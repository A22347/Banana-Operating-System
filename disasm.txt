
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 3f 02 c0       	mov    eax,0xc0023f44
c0000025:	3d 44 3f 02 c0       	cmp    eax,0xc0023f44
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 3f 02 c0       	push   0xc0023f44
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 3f 02 c0       	mov    eax,0xc0023f44
c0000051:	2d 44 3f 02 c0       	sub    eax,0xc0023f44
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 3f 02 c0       	push   0xc0023f44
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 0c 02 02 c0       	mov    ebx,0xc002020c
c0000097:	81 eb 08 02 02 c0    	sub    ebx,0xc0020208
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 08 02 02 c0       	mov    esi,0xc0020208
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 3f 02 c0       	push   0xc0023f44
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 44 3f 02 c0       	push   0xc0023f44
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 57 54 01 00       	call   c0015704 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 35 54 01 00       	call   c0015704 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 42 59 01 00       	call   c0015c30 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 01 60 01 00       	call   c00162f8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 d7 10 01 00       	jmp    c0011456 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 20 02 02 c0 02 	test   BYTE PTR [edx-0x3ffdfde0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 20 02 02 c0 01 	test   BYTE PTR [edx-0x3ffdfde0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 20 02 02 c0 08 	test   BYTE PTR [edx-0x3ffdfde0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 20 02 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfde0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 20 02 02 c0 01 	test   BYTE PTR [edx-0x3ffdfde0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 24 03 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfcdc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 fe 7a 01 00       	jmp    c00198a0 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 28 7b 01 00       	jmp    c00198e0 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 49 7b 01 00       	jmp    c0019920 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 80 04 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfb80]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 80 04 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfb80]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 64 2b 02 c0       	mov    edx,0xc0022b64
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 3c 03 02 c0       	mov    edx,0xc002033c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 42 03 02 c0       	mov    eax,0xc0020342
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 00 04 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfc00]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 4b 03 02 c0       	mov    eax,0xc002034b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 80 04 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfb80]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 d0 03 02 c0       	mov    eax,0xc00203d0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb c0 03 02 c0       	mov    ebx,0xc00203c0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 a0 03 02 c0       	mov    eax,0xc00203a0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 b0 03 02 c0       	mov    eax,0xc00203b0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 52 03 02 c0       	mov    edx,0xc0020352
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 5e 03 02 c0       	mov    edx,0xc002035e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 72 03 02 c0       	mov    edx,0xc0020372
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c a0 07 02 c0 	mov    DWORD PTR [esp+0xc],0xc00207a0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 a0 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc00207a0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 a0 05 02 c0       	mov    eax,0xc00205a0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 e0 04 02 c0       	mov    eax,0xc00204e0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 a0 04 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfb60]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 a0 08 02 c0       	push   0xc00208a0
c000611b:	e8 1c 41 01 00       	call   c001a23c <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ae 08 02 c0       	push   0xc00208ae
c0006153:	e8 e4 40 01 00       	call   c001a23c <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 4d 40 01 00       	call   c001a1e0 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 bd 08 02 c0       	push   0xc00208bd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 c0 08 02 c0       	push   0xc00208c0
c0006812:	e8 25 3a 01 00       	call   c001a23c <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 39 3a 01 00       	call   c001a258 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 c5 08 02 c0 	mov    DWORD PTR [esp],0xc00208c5
c000682c:	e8 0b 3a 01 00       	call   c001a23c <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 1b 3a 01 00       	call   c001a258 <iso_kprintfd>
c000683d:	c7 04 24 cb 08 02 c0 	mov    DWORD PTR [esp],0xc00208cb
c0006844:	e8 f3 39 01 00       	call   c001a23c <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 03 3a 01 00       	call   c001a258 <iso_kprintfd>
c0006855:	c7 04 24 d1 08 02 c0 	mov    DWORD PTR [esp],0xc00208d1
c000685c:	e8 db 39 01 00       	call   c001a23c <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 eb 39 01 00       	call   c001a258 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 bd 08 02 c0       	push   0xc00208bd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 da 08 02 c0       	push   0xc00208da
c0006a31:	e8 06 38 01 00       	call   c001a23c <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 e5 08 02 c0       	push   0xc00208e5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 ec 08 02 c0       	push   0xc00208ec
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 f3 08 02 c0       	push   0xc00208f3
c0006b48:	e8 ef 36 01 00       	call   c001a23c <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 fe 08 02 c0       	push   0xc00208fe
c0006b63:	e8 d4 36 01 00       	call   c001a23c <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 1a a0 00 00       	call   c0010c8c <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 af 5c 00 00       	call   c000c930 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 0f 09 02 c0       	push   0xc002090f
c0006cb2:	e8 b4 a0 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 28 09 02 c0       	push   0xc0020928
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 7d ed 00 00       	call   c0015a5c <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 8c ef 00 00       	call   c0015c80 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 68 67 01 c0       	push   0xc0016768
c0006d03:	52                   	push   edx
c0006d04:	e8 77 ef 00 00       	call   c0015c80 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d11:	68 24 0a 02 c0       	push   0xc0020a24
c0006d16:	e8 50 a0 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d22:	e8 fd a8 00 00       	call   c0011624 <KeInitRand()>
c0006d27:	e8 5f fe 00 00       	call   c0016b8b <Vm::initialise8086()>
c0006d2c:	e8 57 49 00 00       	call   c000b688 <Fs::initVFS()>
c0006d31:	c7 04 24 35 09 02 c0 	mov    DWORD PTR [esp],0xc0020935
c0006d38:	e8 2e a0 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 24 0a 02 c0       	push   0xc0020a24
c0006d5c:	e8 0a a0 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c0006d61:	e8 ff 45 00 00       	call   c000b365 <KeInitialiseSymlinks()>
c0006d66:	e8 63 a5 00 00       	call   c00112ce <KeLoadSystemEnv()>
c0006d6b:	e8 c0 a7 00 00       	call   c0011530 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 4f 09 02 c0       	push   0xc002094f
c0006d7a:	68 58 09 02 c0       	push   0xc0020958
c0006d7f:	e8 f4 ce 00 00       	call   c0013c78 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 04 55 00 00       	call   c000c290 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 48 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a48
c0006d93:	e8 d3 9f 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 84 5b 00 00       	call   c000c92e <Device::loadDriversForAll()>
c0006daa:	c7 04 24 60 09 02 c0 	mov    DWORD PTR [esp],0xc0020960
c0006db1:	e8 b5 9f 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 71 09 02 c0       	push   0xc0020971
c0006dc5:	e8 a5 e6 00 00       	call   c001546f <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 cd e8 00 00       	call   c00156a0 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 04 f3 00 00       	call   c00160e4 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 8d 09 02 c0       	push   0xc002098d
c0006df5:	50                   	push   eax
c0006df6:	e8 af 5b 00 00       	call   c000c9aa <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 94 0a 02 c0       	mov    edx,0xc0020a94
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 11 83 01 00       	call   c001f206 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 71 92 00 00       	call   c00101a4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 4a 92 00 00       	call   c00101a4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 28 92 00 00       	call   c00101a4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 06 92 00 00       	call   c00101a4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 13 91 00 00       	call   c0010120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 ee 90 00 00       	call   c0010120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 70 81 01 00       	call   c001f1c0 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 be 7d 01 00       	call   c001ee30 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 04 91 00 00       	call   c00101a4 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 96 09 02 c0       	push   0xc0020996
c00070e2:	e8 84 a3 00 00       	call   c001146b <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 9c 09 02 c0       	push   0xc002099c
c000711e:	e8 48 a3 00 00       	call   c001146b <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 51 8a 00 00       	jmp    c000fbbc <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071be:	68 a2 09 02 c0       	push   0xc00209a2
c00071c3:	0f 94 05 a0 33 02 c0 	sete   BYTE PTR ds:0xc00233a0
c00071ca:	e8 9c 9b 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 4b 85 00 00       	call   c000f730 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 1e 56 00 00       	call   c000c812 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 ba 09 02 c0 	mov    DWORD PTR [esp],0xc00209ba
c000720d:	e8 59 9b 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 34 90 00 00       	call   c001025c <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 db 55 00 00       	call   c000c812 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 68 0a 02 c0       	push   0xc0020a68
c0007254:	e8 12 9b 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c0007259:	e8 6a 0b 01 00       	call   c0017dc8 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 d4 09 02 c0 	mov    DWORD PTR [esp],0xc00209d4
c0007265:	e8 01 9b 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 36 eb 00 00       	call   c0015dac <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 ef 09 02 c0       	push   0xc00209ef
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 00 0a 02 c0       	push   0xc0020a00
c00072ed:	e8 79 a1 00 00       	call   c001146b <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 0d 0a 02 c0       	push   0xc0020a0d
c0007302:	e8 64 a1 00 00       	call   c001146b <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 17 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a17
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 4a a1 00 00       	jmp    c001146b <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073b1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 81 05 01 00       	call   c0017a94 <HalSystemIdle()>
c0007513:	e8 aa 82 01 00       	call   c001f7c2 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007615:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000761a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 c0 ee 01 c0       	push   0xc001eec0
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 d0 ee 01 c0       	push   0xc001eed0
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 da ee 01 c0       	push   0xc001eeda
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 e4 ee 01 c0       	push   0xc001eee4
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 ee ee 01 c0       	push   0xc001eeee
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 f8 ee 01 c0       	push   0xc001eef8
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 02 ef 01 c0       	push   0xc001ef02
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 0c ef 01 c0       	push   0xc001ef0c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 16 ef 01 c0       	push   0xc001ef16
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 1e ef 01 c0       	push   0xc001ef1e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 28 ef 01 c0       	push   0xc001ef28
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 30 ef 01 c0       	push   0xc001ef30
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 38 ef 01 c0       	push   0xc001ef38
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 40 ef 01 c0       	push   0xc001ef40
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 5a ef 01 c0       	push   0xc001ef5a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 62 ef 01 c0       	push   0xc001ef62
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 6c ef 01 c0       	push   0xc001ef6c
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 76 ef 01 c0       	push   0xc001ef76
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 80 ef 01 c0       	push   0xc001ef80
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 1a f0 01 c0       	push   0xc001f01a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 21 f0 01 c0       	push   0xc001f021
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 0c f0 01 c0       	push   0xc001f00c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 13 f0 01 c0       	push   0xc001f013
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 8a ef 01 c0       	push   0xc001ef8a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 94 ef 01 c0       	push   0xc001ef94
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 9e ef 01 c0       	push   0xc001ef9e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 a8 ef 01 c0       	push   0xc001efa8
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 b2 ef 01 c0       	push   0xc001efb2
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 bc ef 01 c0       	push   0xc001efbc
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 c6 ef 01 c0       	push   0xc001efc6
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 d0 ef 01 c0       	push   0xc001efd0
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 da ef 01 c0       	push   0xc001efda
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 e4 ef 01 c0       	push   0xc001efe4
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 ee ef 01 c0       	push   0xc001efee
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 f8 ef 01 c0       	push   0xc001eff8
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 02 f0 01 c0       	push   0xc001f002
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 5c f1 01 c0       	push   0xc001f15c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 66 f1 01 c0       	push   0xc001f166
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 70 f1 01 c0       	push   0xc001f170
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 7a f1 01 c0       	push   0xc001f17a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 84 f1 01 c0       	push   0xc001f184
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 8e f1 01 c0       	push   0xc001f18e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 98 f1 01 c0       	push   0xc001f198
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 a2 f1 01 c0       	push   0xc001f1a2
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 16 ef 01 c0       	push   0xc001ef16
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 94 33 02 c0    	mov    edx,DWORD PTR ds:0xc0023394
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ba:	8b 3d 94 33 02 c0    	mov    edi,DWORD PTR ds:0xc0023394
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 94 33 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023394,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 94 33 02 c0       	mov    eax,ds:0xc0023394
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 b8 0a 02 c0       	push   0xc0020ab8
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 e8 0a 02 c0       	push   0xc0020ae8
c0007a27:	e8 3f 9a 00 00       	call   c001146b <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 ed 0a 02 c0       	push   0xc0020aed
c0007a3d:	e8 29 9a 00 00       	call   c001146b <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 f4 0a 02 c0       	push   0xc0020af4
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 86 91 00 00       	call   c0010cef <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 af 90 00 00       	call   c0010c39 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007b9b:	e8 ba 7b 01 00       	call   c001f75a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 0c 0b 02 c0       	push   0xc0020b0c
c0007c31:	e8 35 98 00 00       	call   c001146b <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c75:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 0c 0b 02 c0       	push   0xc0020b0c
c0007ca2:	e8 c4 97 00 00       	call   c001146b <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 98 33 02 c0    	mov    esi,DWORD PTR ds:0xc0023398
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 98 33 02 c0    	mov    ebx,DWORD PTR ds:0xc0023398
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 98 33 02 c0    	mov    edx,DWORD PTR ds:0xc0023398
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 b1 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bb1
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 be 96 00 00       	jmp    c001146b <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 34 0b 02 c0       	push   0xc0020b34
c0007e31:	e8 35 96 00 00       	call   c001146b <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e58:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 c7 0b 02 c0       	push   0xc0020bc7
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 64 0b 02 c0       	push   0xc0020b64
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 88 0b 02 c0       	push   0xc0020b88
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 ed 0b 02 c0       	push   0xc0020bed
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 df 0b 02 c0       	push   0xc0020bdf
c000813c:	e8 2a 93 00 00       	call   c001146b <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 4c 0c 02 c0       	mov    edx,0xc0020c4c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 09 0c 02 c0       	push   0xc0020c09
c0008311:	e8 55 91 00 00       	call   c001146b <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000835a:	e8 71 db 00 00       	call   c0015ed0 <schedule()>
c000835f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 49 72 01 00       	call   c001f640 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 26 0c 02 c0       	push   0xc0020c26
c000840c:	e8 5a 90 00 00       	call   c001146b <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 4c 0c 02 c0       	mov    edx,0xc0020c4c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 94 0c 02 c0       	mov    edx,0xc0020c94
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 f6 51 00 00       	call   c000d6ec <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 6c 07 01 00       	call   c0018c88 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d c0 33 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcc40]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d c0 33 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcc40]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 78 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd88]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 50 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcdb0]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 9e 04 01 00       	call   c0018b1c <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 fb 04 01 00       	jmp    c0018c24 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 60 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c60
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 f5 8c 00 00       	jmp    c001146b <KePanic(char const*)>
c0008776:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 64 39 00 00       	jmp    c000c237 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be 6e 0c 02 c0       	mov    esi,0xc0020c6e
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 02 00 01 00       	call   c0018c24 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 94 0c 02 c0       	mov    edx,0xc0020c94
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 7f 0c 02 c0       	push   0xc0020c7f
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 85 0c 02 c0       	push   0xc0020c85
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 5c 0d 02 c0       	mov    edx,0xc0020d5c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 00 34 02 c0       	mov    eax,ds:0xc0023400
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 00 34 02 c0    	mov    DWORD PTR ds:0xc0023400,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 6f 02 c0       	push   0xc0026f98
c00091fc:	e8 27 66 01 00       	call   c001f828 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba 78 0d 02 c0       	mov    edx,0xc0020d78
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 5c 0d 02 c0       	mov    edx,0xc0020d5c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 6f 02 c0       	push   0xc0026f98
c00093d0:	e8 27 65 01 00       	call   c001f8fc <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 6f 02 c0       	push   0xc0026f98
c00093e4:	e8 1b 65 01 00       	call   c001f904 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 6f 02 c0       	push   0xc0026f98
c0009402:	e8 21 64 01 00       	call   c001f828 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 34 0d 02 c0       	push   0xc0020d34
c000942c:	e8 3a 80 00 00       	call   c001146b <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba 78 0d 02 c0       	mov    edx,0xc0020d78
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 6f 02 c0       	push   0xc0026f98
c00094d1:	e8 26 64 01 00       	call   c001f8fc <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 6f 02 c0       	push   0xc0026f98
c00094ee:	e8 b3 64 01 00       	call   c001f9a6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 6f 02 c0       	push   0xc0026f98
c0009570:	e8 71 62 01 00       	call   c001f7e6 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 90 33 02 c0       	push   0xc0023390
c0009580:	68 98 6f 02 c0       	push   0xc0026f98
c0009585:	68 e4 f7 01 c0       	push   0xc001f7e4
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 08 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023408
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 08 34 02 c0    	mov    ecx,DWORD PTR ds:0xc0023408
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 04 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023404
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 04 34 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023404,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 04 34 02 c0    	mov    DWORD PTR ds:0xc0023404,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 8c 0d 02 c0       	push   0xc0020d8c
c0009689:	e8 dd 7d 00 00       	call   c001146b <KePanic(char const*)>
c000968e:	8b 35 04 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023404
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 04 34 02 c0    	mov    DWORD PTR ds:0xc0023404,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 04 34 02 c0       	mov    eax,ds:0xc0023404
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 04 34 02 c0    	mov    DWORD PTR ds:0xc0023404,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 04 34 02 c0       	mov    ds:0xc0023404,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 0c 34 02 c0    	mov    edx,DWORD PTR ds:0xc002340c
c000975f:	8b 0d 14 34 02 c0    	mov    ecx,DWORD PTR ds:0xc0023414
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 0c 34 02 c0    	mov    ecx,DWORD PTR ds:0xc002340c
c000977a:	a1 10 34 02 c0       	mov    eax,ds:0xc0023410
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 10 34 02 c0    	cmp    DWORD PTR ds:0xc0023410,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 20 10 02 c0       	push   0xc0021020
c00097c0:	e8 a6 7c 00 00       	call   c001146b <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 37 10 02 c0       	push   0xc0021037
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 10 34 02 c0    	mov    DWORD PTR ds:0xc0023410,ebx
c0009864:	c6 05 18 34 02 c0 43 	mov    BYTE PTR ds:0xc0023418,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 14 34 02 c0       	mov    ds:0xc0023414,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 0c 34 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002340c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 10 34 02 c0       	mov    eax,ds:0xc0023410
c0009896:	f7 35 0c 34 02 c0    	div    DWORD PTR ds:0xc002340c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 ac 0d 02 c0       	push   0xc0020dac
c00098d1:	e8 95 7b 00 00       	call   c001146b <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 4e 10 02 c0       	push   0xc002104e
c00099a3:	e8 c3 7a 00 00       	call   c001146b <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 d0 0d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020dd0
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 60 7a 00 00       	jmp    c001146b <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 6a 10 02 c0       	push   0xc002106a
c0009a18:	e8 4e 7a 00 00       	call   c001146b <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 86 10 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021086
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 04 7a 00 00       	jmp    c001146b <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 f4 0d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020df4
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b26:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 18 0e 02 c0       	push   0xc0020e18
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 80 0e 02 c0       	push   0xc0020e80
c0009dad:	e8 b9 76 00 00       	call   c001146b <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 a4 0e 02 c0       	push   0xc0020ea4
c0009e99:	e8 cd 75 00 00       	call   c001146b <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 d0 0e 02 c0       	push   0xc0020ed0
c0009fed:	e8 79 74 00 00       	call   c001146b <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 82 28 00 00       	call   c000caa6 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 a0 10 02 c0       	push   0xc00210a0
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 0c 34 02 c0       	mov    eax,ds:0xc002340c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 18 34 02 c0 	movsx  eax,BYTE PTR ds:0xc0023418
c000a2fd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a304:	50                   	push   eax
c000a305:	e8 56 39 00 00       	call   c000dc60 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 0c 34 02 c0    	cmp    DWORD PTR ds:0xc002340c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 f4 0e 02 c0       	push   0xc0020ef4
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a36f:	c7 44 24 50 ae 10 02 c0 	mov    DWORD PTR [esp+0x50],0xc00210ae
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 d1 10 02 c0       	push   0xc00210d1
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 bf 10 02 c0       	push   0xc00210bf
c000a3db:	e8 8b 70 00 00       	call   c001146b <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 d1 10 02 c0       	push   0xc00210d1
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 0c 34 02 c0    	mov    edx,DWORD PTR ds:0xc002340c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 18 34 02 c0 	movsx  eax,BYTE PTR ds:0xc0023418
c000a47a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a481:	50                   	push   eax
c000a482:	e8 6d 37 00 00       	call   c000dbf4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 0c 34 02 c0    	cmp    DWORD PTR ds:0xc002340c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 e4 10 02 c0       	push   0xc00210e4
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 24 0f 02 c0       	push   0xc0020f24
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 44 0f 02 c0       	push   0xc0020f44
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 a4 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fa4
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 f9 10 02 c0       	push   0xc00210f9
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 0d 11 02 c0       	push   0xc002110d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 20 11 02 c0       	push   0xc0021120
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 50 02 c0       	push   0xc0025000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 50 02 c0       	push   0xc0025000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 2d 11 02 c0       	push   0xc002112d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 46 11 02 c0       	push   0xc0021146
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 46 11 02 c0       	push   0xc0021146
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 4e 11 02 c0 	mov    DWORD PTR [esp],0xc002114e
c000a7f8:	e8 6e 6c 00 00       	call   c001146b <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 66 11 02 c0       	push   0xc0021166
c000a80a:	e8 5c 6c 00 00       	call   c001146b <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be 6f 0c 02 c0       	mov    esi,0xc0020c6f
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 6e 0c 02 c0       	mov    al,ds:0xc0020c6e
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 7c 11 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdee84]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 cc 12 02 c0       	push   0xc00212cc
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 e0 12 02 c0       	push   0xc00212e0
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 ea 12 02 c0       	push   0xc00212ea
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 f4 12 02 c0       	push   0xc00212f4
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 38 14 02 c0       	push   0xc0021438
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 fe 12 02 c0       	push   0xc00212fe
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 58 14 02 c0       	push   0xc0021458
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 13 13 02 c0       	push   0xc0021313
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 2d 13 02 c0       	push   0xc002132d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 20 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcbe0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 80 14 02 c0       	push   0xc0021480
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 38 14 02 c0       	push   0xc0021438
c000abb4:	e8 b2 68 00 00       	call   c001146b <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 c8 14 02 c0       	push   0xc00214c8
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 c8 14 02 c0       	push   0xc00214c8
c000abe3:	e8 83 68 00 00       	call   c001146b <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 38 13 02 c0       	push   0xc0021338
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 38 13 02 c0       	push   0xc0021338
c000ac0f:	e8 57 68 00 00       	call   c001146b <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 55 13 02 c0       	push   0xc0021355
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 55 13 02 c0       	push   0xc0021355
c000ac3b:	e8 2b 68 00 00       	call   c001146b <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 e8 14 02 c0       	push   0xc00214e8
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 e8 14 02 c0       	push   0xc00214e8
c000ac67:	e8 ff 67 00 00       	call   c001146b <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 0c 15 02 c0       	push   0xc002150c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 0c 15 02 c0       	push   0xc002150c
c000ac93:	e8 d3 67 00 00       	call   c001146b <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 71 13 02 c0       	push   0xc0021371
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 71 13 02 c0       	push   0xc0021371
c000acbf:	e8 a7 67 00 00       	call   c001146b <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 8d 13 02 c0       	push   0xc002138d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 8d 13 02 c0       	push   0xc002138d
c000aceb:	e8 7b 67 00 00       	call   c001146b <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 2c 15 02 c0       	push   0xc002152c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 2c 15 02 c0       	push   0xc002152c
c000ad17:	e8 4f 67 00 00       	call   c001146b <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 50 15 02 c0       	push   0xc0021550
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 50 15 02 c0       	push   0xc0021550
c000ad43:	e8 23 67 00 00       	call   c001146b <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiIsHashInTable(unsigned short)>:
c000ad50:	0f b7 d0             	movzx  edx,ax
c000ad53:	83 e0 07             	and    eax,0x7
c000ad56:	c1 fa 03             	sar    edx,0x3
c000ad59:	88 c1                	mov    cl,al
c000ad5b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad62:	d3 fa                	sar    edx,cl
c000ad64:	89 d0                	mov    eax,edx
c000ad66:	83 e0 01             	and    eax,0x1
c000ad69:	c3                   	ret    

c000ad6a <KiSetHashInTable(unsigned short, bool)>:
c000ad6a:	56                   	push   esi
c000ad6b:	53                   	push   ebx
c000ad6c:	0f b7 d8             	movzx  ebx,ax
c000ad6f:	83 e0 07             	and    eax,0x7
c000ad72:	c1 fb 03             	sar    ebx,0x3
c000ad75:	89 c1                	mov    ecx,eax
c000ad77:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad7e:	b8 01 00 00 00       	mov    eax,0x1
c000ad83:	d3 e0                	shl    eax,cl
c000ad85:	84 d2                	test   dl,dl
c000ad87:	74 04                	je     c000ad8d <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad89:	09 f0                	or     eax,esi
c000ad8b:	eb 04                	jmp    c000ad91 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad8d:	f7 d0                	not    eax
c000ad8f:	21 f0                	and    eax,esi
c000ad91:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad97:	5b                   	pop    ebx
c000ad98:	5e                   	pop    esi
c000ad99:	c3                   	ret    

c000ad9a <KiFlushSymlinkChanges()>:
c000ad9a:	57                   	push   edi
c000ad9b:	56                   	push   esi
c000ad9c:	53                   	push   ebx
c000ad9d:	83 ec 1c             	sub    esp,0x1c
c000ada0:	68 14 01 00 00       	push   0x114
c000ada5:	e8 0c cd ff ff       	call   c0007ab6 <malloc>
c000adaa:	83 c4 0c             	add    esp,0xc
c000adad:	89 c3                	mov    ebx,eax
c000adaf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000adb5:	68 6f 15 02 c0       	push   0xc002156f
c000adba:	50                   	push   eax
c000adbb:	e8 da 0b 00 00       	call   c000b99a <File::File(char const*, Process*)>
c000adc0:	83 c4 10             	add    esp,0x10
c000adc3:	85 db                	test   ebx,ebx
c000adc5:	75 10                	jne    c000add7 <KiFlushSymlinkChanges()+0x3d>
c000adc7:	83 ec 0c             	sub    esp,0xc
c000adca:	68 8d 15 02 c0       	push   0xc002158d
c000adcf:	e8 97 66 00 00       	call   c001146b <KePanic(char const*)>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	50                   	push   eax
c000add8:	50                   	push   eax
c000add9:	6a 06                	push   0x6
c000addb:	53                   	push   ebx
c000addc:	e8 d7 0b 00 00       	call   c000b9b8 <File::open(FileOpenMode)>
c000ade1:	83 c4 10             	add    esp,0x10
c000ade4:	85 c0                	test   eax,eax
c000ade6:	74 10                	je     c000adf8 <KiFlushSymlinkChanges()+0x5e>
c000ade8:	83 ec 0c             	sub    esp,0xc
c000adeb:	68 a7 15 02 c0       	push   0xc00215a7
c000adf0:	e8 76 66 00 00       	call   c001146b <KePanic(char const*)>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	31 f6                	xor    esi,esi
c000adfa:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae00:	7e 70                	jle    c000ae72 <KiFlushSymlinkChanges()+0xd8>
c000ae02:	83 ec 0c             	sub    esp,0xc
c000ae05:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae07:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae0b:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae12:	57                   	push   edi
c000ae13:	52                   	push   edx
c000ae14:	6a 00                	push   0x0
c000ae16:	6a 08                	push   0x8
c000ae18:	53                   	push   ebx
c000ae19:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae1c:	83 c4 20             	add    esp,0x20
c000ae1f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae24:	74 10                	je     c000ae36 <KiFlushSymlinkChanges()+0x9c>
c000ae26:	83 ec 0c             	sub    esp,0xc
c000ae29:	68 c1 15 02 c0       	push   0xc00215c1
c000ae2e:	e8 38 66 00 00       	call   c001146b <KePanic(char const*)>
c000ae33:	83 c4 10             	add    esp,0x10
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae3b:	89 f0                	mov    eax,esi
c000ae3d:	57                   	push   edi
c000ae3e:	c1 e0 08             	shl    eax,0x8
c000ae41:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae46:	50                   	push   eax
c000ae47:	6a 00                	push   0x0
c000ae49:	68 00 01 00 00       	push   0x100
c000ae4e:	53                   	push   ebx
c000ae4f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae52:	83 c4 20             	add    esp,0x20
c000ae55:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae5d:	74 10                	je     c000ae6f <KiFlushSymlinkChanges()+0xd5>
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	68 db 15 02 c0       	push   0xc00215db
c000ae67:	e8 ff 65 00 00       	call   c001146b <KePanic(char const*)>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	46                   	inc    esi
c000ae70:	eb 88                	jmp    c000adfa <KiFlushSymlinkChanges()+0x60>
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	53                   	push   ebx
c000ae76:	e8 9b 0b 00 00       	call   c000ba16 <File::close()>
c000ae7b:	83 c4 10             	add    esp,0x10
c000ae7e:	85 db                	test   ebx,ebx
c000ae80:	74 0c                	je     c000ae8e <KiFlushSymlinkChanges()+0xf4>
c000ae82:	83 ec 0c             	sub    esp,0xc
c000ae85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae87:	53                   	push   ebx
c000ae88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae98:	83 c4 10             	add    esp,0x10
c000ae9b:	5b                   	pop    ebx
c000ae9c:	5e                   	pop    esi
c000ae9d:	5f                   	pop    edi
c000ae9e:	c3                   	ret    

c000ae9f <KiDeinitialiseSymlinks(void*)>:
c000ae9f:	e9 f6 fe ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>

c000aea4 <KiGetSymlinkHash(char const*)>:
c000aea4:	53                   	push   ebx
c000aea5:	89 c3                	mov    ebx,eax
c000aea7:	83 ec 14             	sub    esp,0x14
c000aeaa:	50                   	push   eax
c000aeab:	e8 c0 56 ff ff       	call   c0000570 <strlen>
c000aeb0:	5a                   	pop    edx
c000aeb1:	59                   	pop    ecx
c000aeb2:	50                   	push   eax
c000aeb3:	53                   	push   ebx
c000aeb4:	e8 34 5f 00 00       	call   c0010ded <KeCalculateCRC32(unsigned char*, int)>
c000aeb9:	83 c4 18             	add    esp,0x18
c000aebc:	89 c2                	mov    edx,eax
c000aebe:	5b                   	pop    ebx
c000aebf:	c1 ea 10             	shr    edx,0x10
c000aec2:	31 d0                	xor    eax,edx
c000aec4:	c3                   	ret    

c000aec5 <KiCreateSymlinkID()>:
c000aec5:	55                   	push   ebp
c000aec6:	57                   	push   edi
c000aec7:	56                   	push   esi
c000aec8:	53                   	push   ebx
c000aec9:	31 db                	xor    ebx,ebx
c000aecb:	83 ec 1c             	sub    esp,0x1c
c000aece:	e8 e6 66 00 00       	call   c00115b9 <KeRand()>
c000aed3:	43                   	inc    ebx
c000aed4:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aeda:	31 d2                	xor    edx,edx
c000aedc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aedf:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000aee3:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aee9:	c1 e0 1b             	shl    eax,0x1b
c000aeec:	89 d7                	mov    edi,edx
c000aeee:	89 c6                	mov    esi,eax
c000aef0:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000aef4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aefc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af02:	75 10                	jne    c000af14 <KiCreateSymlinkID()+0x4f>
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	68 f5 15 02 c0       	push   0xc00215f5
c000af0c:	e8 5a 65 00 00       	call   c001146b <KePanic(char const*)>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af18:	75 04                	jne    c000af1e <KiCreateSymlinkID()+0x59>
c000af1a:	39 f5                	cmp    ebp,esi
c000af1c:	74 b0                	je     c000aece <KiCreateSymlinkID()+0x9>
c000af1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af26:	31 f0                	xor    eax,esi
c000af28:	83 c4 1c             	add    esp,0x1c
c000af2b:	31 fa                	xor    edx,edi
c000af2d:	5b                   	pop    ebx
c000af2e:	5e                   	pop    esi
c000af2f:	5f                   	pop    edi
c000af30:	5d                   	pop    ebp
c000af31:	c3                   	ret    

c000af32 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af32:	53                   	push   ebx
c000af33:	83 ec 0c             	sub    esp,0xc
c000af36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af42:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af47:	68 00 01 00 00       	push   0x100
c000af4c:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af53:	6a 00                	push   0x0
c000af55:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af5c:	c1 e0 08             	shl    eax,0x8
c000af5f:	05 00 70 02 c0       	add    eax,0xc0027000
c000af64:	50                   	push   eax
c000af65:	e8 86 55 ff ff       	call   c00004f0 <memset>
c000af6a:	58                   	pop    eax
c000af6b:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af70:	5a                   	pop    edx
c000af71:	c1 e0 08             	shl    eax,0x8
c000af74:	53                   	push   ebx
c000af75:	05 00 70 02 c0       	add    eax,0xc0027000
c000af7a:	50                   	push   eax
c000af7b:	e8 c0 56 ff ff       	call   c0000640 <strcpy>
c000af80:	89 d8                	mov    eax,ebx
c000af82:	e8 1d ff ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000af87:	ba 01 00 00 00       	mov    edx,0x1
c000af8c:	0f b7 c0             	movzx  eax,ax
c000af8f:	e8 d6 fd ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000af94:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	40                   	inc    eax
c000af9d:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afa2:	83 f8 03             	cmp    eax,0x3
c000afa5:	7e 09                	jle    c000afb0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000afa7:	83 c4 08             	add    esp,0x8
c000afaa:	5b                   	pop    ebx
c000afab:	e9 ea fd ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>
c000afb0:	83 c4 08             	add    esp,0x8
c000afb3:	5b                   	pop    ebx
c000afb4:	c3                   	ret    

c000afb5 <KiIsSymlinkRegistered(char const*)>:
c000afb5:	56                   	push   esi
c000afb6:	53                   	push   ebx
c000afb7:	50                   	push   eax
c000afb8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000afbc:	89 f0                	mov    eax,esi
c000afbe:	e8 e1 fe ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000afc3:	0f b7 c0             	movzx  eax,ax
c000afc6:	e8 85 fd ff ff       	call   c000ad50 <KiIsHashInTable(unsigned short)>
c000afcb:	84 c0                	test   al,al
c000afcd:	74 37                	je     c000b006 <KiIsSymlinkRegistered(char const*)+0x51>
c000afcf:	31 db                	xor    ebx,ebx
c000afd1:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000afd7:	7e 2d                	jle    c000b006 <KiIsSymlinkRegistered(char const*)+0x51>
c000afd9:	50                   	push   eax
c000afda:	50                   	push   eax
c000afdb:	89 d8                	mov    eax,ebx
c000afdd:	c1 e0 08             	shl    eax,0x8
c000afe0:	05 00 70 02 c0       	add    eax,0xc0027000
c000afe5:	50                   	push   eax
c000afe6:	56                   	push   esi
c000afe7:	e8 64 57 ff ff       	call   c0000750 <strcmp>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	85 c0                	test   eax,eax
c000aff1:	75 10                	jne    c000b003 <KiIsSymlinkRegistered(char const*)+0x4e>
c000aff3:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000affa:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b001:	eb 07                	jmp    c000b00a <KiIsSymlinkRegistered(char const*)+0x55>
c000b003:	43                   	inc    ebx
c000b004:	eb cb                	jmp    c000afd1 <KiIsSymlinkRegistered(char const*)+0x1c>
c000b006:	31 c0                	xor    eax,eax
c000b008:	31 d2                	xor    edx,edx
c000b00a:	59                   	pop    ecx
c000b00b:	5b                   	pop    ebx
c000b00c:	5e                   	pop    esi
c000b00d:	c3                   	ret    

c000b00e <KeDereferenceSymlink(char const*, char*)>:
c000b00e:	55                   	push   ebp
c000b00f:	57                   	push   edi
c000b010:	56                   	push   esi
c000b011:	53                   	push   ebx
c000b012:	83 ec 44             	sub    esp,0x44
c000b015:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000b019:	56                   	push   esi
c000b01a:	68 fe 15 02 c0       	push   0xc00215fe
c000b01f:	e8 21 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b024:	89 34 24             	mov    DWORD PTR [esp],esi
c000b027:	e8 89 ff ff ff       	call   c000afb5 <KiIsSymlinkRegistered(char const*)>
c000b02c:	83 c4 10             	add    esp,0x10
c000b02f:	89 c7                	mov    edi,eax
c000b031:	89 d0                	mov    eax,edx
c000b033:	09 f8                	or     eax,edi
c000b035:	75 07                	jne    c000b03e <KeDereferenceSymlink(char const*, char*)+0x30>
c000b037:	31 c0                	xor    eax,eax
c000b039:	e9 e3 01 00 00       	jmp    c000b221 <KeDereferenceSymlink(char const*, char*)+0x213>
c000b03e:	89 d5                	mov    ebp,edx
c000b040:	53                   	push   ebx
c000b041:	53                   	push   ebx
c000b042:	57                   	push   edi
c000b043:	68 18 16 02 c0       	push   0xc0021618
c000b048:	e8 f8 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b04d:	58                   	pop    eax
c000b04e:	5a                   	pop    edx
c000b04f:	55                   	push   ebp
c000b050:	68 26 16 02 c0       	push   0xc0021626
c000b055:	e8 eb f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b05a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b061:	e8 50 ca ff ff       	call   c0007ab6 <malloc>
c000b066:	83 c4 0c             	add    esp,0xc
c000b069:	89 c3                	mov    ebx,eax
c000b06b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b071:	56                   	push   esi
c000b072:	50                   	push   eax
c000b073:	e8 22 09 00 00       	call   c000b99a <File::File(char const*, Process*)>
c000b078:	83 c4 10             	add    esp,0x10
c000b07b:	85 db                	test   ebx,ebx
c000b07d:	0f 84 68 01 00 00    	je     c000b1eb <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b083:	83 ec 0c             	sub    esp,0xc
c000b086:	68 00 22 02 c0       	push   0xc0022200
c000b08b:	e8 b5 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b090:	5a                   	pop    edx
c000b091:	59                   	pop    ecx
c000b092:	6a 01                	push   0x1
c000b094:	53                   	push   ebx
c000b095:	e8 1e 09 00 00       	call   c000b9b8 <File::open(FileOpenMode)>
c000b09a:	83 c4 10             	add    esp,0x10
c000b09d:	85 c0                	test   eax,eax
c000b09f:	74 0b                	je     c000b0ac <KeDereferenceSymlink(char const*, char*)+0x9e>
c000b0a1:	83 ec 0c             	sub    esp,0xc
c000b0a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0a6:	53                   	push   ebx
c000b0a7:	e9 39 01 00 00       	jmp    c000b1e5 <KeDereferenceSymlink(char const*, char*)+0x1d7>
c000b0ac:	83 ec 0c             	sub    esp,0xc
c000b0af:	68 06 0c 02 c0       	push   0xc0020c06
c000b0b4:	e8 8c f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0b9:	58                   	pop    eax
c000b0ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0bc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b0c0:	56                   	push   esi
c000b0c1:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b0c5:	52                   	push   edx
c000b0c6:	6a 00                	push   0x0
c000b0c8:	6a 08                	push   0x8
c000b0ca:	53                   	push   ebx
c000b0cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0ce:	83 c4 20             	add    esp,0x20
c000b0d1:	85 c0                	test   eax,eax
c000b0d3:	0f 85 fe 00 00 00    	jne    c000b1d7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b0d9:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b0de:	0f 85 f3 00 00 00    	jne    c000b1d7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b0e4:	83 ec 0c             	sub    esp,0xc
c000b0e7:	68 32 22 02 c0       	push   0xc0022232
c000b0ec:	e8 54 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0f3:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b0f7:	89 34 24             	mov    DWORD PTR [esp],esi
c000b0fa:	52                   	push   edx
c000b0fb:	6a 00                	push   0x0
c000b0fd:	6a 08                	push   0x8
c000b0ff:	53                   	push   ebx
c000b100:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b103:	83 c4 20             	add    esp,0x20
c000b106:	85 c0                	test   eax,eax
c000b108:	0f 85 c9 00 00 00    	jne    c000b1d7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b10e:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b113:	0f 85 be 00 00 00    	jne    c000b1d7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b119:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b11d:	0f 85 14 ff ff ff    	jne    c000b037 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b123:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b127:	0f 85 0a ff ff ff    	jne    c000b037 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b12d:	83 ec 0c             	sub    esp,0xc
c000b130:	68 34 16 02 c0       	push   0xc0021634
c000b135:	e8 0b f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b13a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b142:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b14a:	83 c4 0c             	add    esp,0xc
c000b14d:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b151:	50                   	push   eax
c000b152:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b156:	50                   	push   eax
c000b157:	53                   	push   ebx
c000b158:	e8 5d 0b 00 00       	call   c000bcba <File::stat(unsigned long long*, bool*)>
c000b15d:	83 c4 10             	add    esp,0x10
c000b160:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b165:	75 70                	jne    c000b1d7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b167:	31 ff                	xor    edi,edi
c000b169:	b8 0f 00 00 00       	mov    eax,0xf
c000b16e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b172:	89 f8                	mov    eax,edi
c000b174:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b178:	73 5d                	jae    c000b1d7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b17a:	83 ec 0c             	sub    esp,0xc
c000b17d:	68 34 16 02 c0       	push   0xc0021634
c000b182:	e8 be f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b187:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b18b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b18f:	83 c0 f0             	add    eax,0xfffffff0
c000b192:	b9 ff 00 00 00       	mov    ecx,0xff
c000b197:	83 d2 ff             	adc    edx,0xffffffff
c000b19a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b19e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	39 c1                	cmp    ecx,eax
c000b1a7:	19 d7                	sbb    edi,edx
c000b1a9:	72 40                	jb     c000b1eb <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b1ab:	83 ec 0c             	sub    esp,0xc
c000b1ae:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b1b0:	56                   	push   esi
c000b1b1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b1b5:	52                   	push   edx
c000b1b6:	50                   	push   eax
c000b1b7:	53                   	push   ebx
c000b1b8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b1bb:	83 c4 20             	add    esp,0x20
c000b1be:	85 c0                	test   eax,eax
c000b1c0:	75 15                	jne    c000b1d7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b1c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b1c6:	89 c7                	mov    edi,eax
c000b1c8:	c1 ff 1f             	sar    edi,0x1f
c000b1cb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b1cf:	75 06                	jne    c000b1d7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b1d1:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b1d5:	74 19                	je     c000b1f0 <KeDereferenceSymlink(char const*, char*)+0x1e2>
c000b1d7:	83 ec 0c             	sub    esp,0xc
c000b1da:	53                   	push   ebx
c000b1db:	e8 36 08 00 00       	call   c000ba16 <File::close()>
c000b1e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1e8:	83 c4 10             	add    esp,0x10
c000b1eb:	83 c8 ff             	or     eax,0xffffffff
c000b1ee:	eb 31                	jmp    c000b221 <KeDereferenceSymlink(char const*, char*)+0x213>
c000b1f0:	83 ec 0c             	sub    esp,0xc
c000b1f3:	68 12 2d 02 c0       	push   0xc0022d12
c000b1f8:	e8 48 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b1fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b200:	e8 11 08 00 00       	call   c000ba16 <File::close()>
c000b205:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b207:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b20a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b20d:	c7 04 24 37 16 02 c0 	mov    DWORD PTR [esp],0xc0021637
c000b214:	e8 2c f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b219:	83 c4 10             	add    esp,0x10
c000b21c:	b8 01 00 00 00       	mov    eax,0x1
c000b221:	83 c4 3c             	add    esp,0x3c
c000b224:	5b                   	pop    ebx
c000b225:	5e                   	pop    esi
c000b226:	5f                   	pop    edi
c000b227:	5d                   	pop    ebp
c000b228:	c3                   	ret    

c000b229 <KeCreateSymlink(char const*, char const*)>:
c000b229:	55                   	push   ebp
c000b22a:	57                   	push   edi
c000b22b:	56                   	push   esi
c000b22c:	53                   	push   ebx
c000b22d:	83 ec 38             	sub    esp,0x38
c000b230:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b234:	68 14 01 00 00       	push   0x114
c000b239:	e8 78 c8 ff ff       	call   c0007ab6 <malloc>
c000b23e:	6a 00                	push   0x0
c000b240:	89 c3                	mov    ebx,eax
c000b242:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b248:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b24c:	50                   	push   eax
c000b24d:	e8 6a 06 00 00       	call   c000b8bc <File::File(char const*, Process*, bool)>
c000b252:	83 c4 20             	add    esp,0x20
c000b255:	b8 01 00 00 00       	mov    eax,0x1
c000b25a:	85 db                	test   ebx,ebx
c000b25c:	0f 84 fb 00 00 00    	je     c000b35d <KeCreateSymlink(char const*, char const*)+0x134>
c000b262:	52                   	push   edx
c000b263:	52                   	push   edx
c000b264:	6a 12                	push   0x12
c000b266:	53                   	push   ebx
c000b267:	e8 4c 07 00 00       	call   c000b9b8 <File::open(FileOpenMode)>
c000b26c:	83 c4 10             	add    esp,0x10
c000b26f:	85 c0                	test   eax,eax
c000b271:	74 0b                	je     c000b27e <KeCreateSymlink(char const*, char const*)+0x55>
c000b273:	83 ec 0c             	sub    esp,0xc
c000b276:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b278:	53                   	push   ebx
c000b279:	e9 d4 00 00 00       	jmp    c000b352 <KeCreateSymlink(char const*, char const*)+0x129>
c000b27e:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b282:	be 3a 16 02 c0       	mov    esi,0xc002163a
c000b287:	b9 09 00 00 00       	mov    ecx,0x9
c000b28c:	fc                   	cld    
c000b28d:	83 ec 0c             	sub    esp,0xc
c000b290:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b292:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b296:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b298:	56                   	push   esi
c000b299:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b29d:	52                   	push   edx
c000b29e:	6a 00                	push   0x0
c000b2a0:	6a 08                	push   0x8
c000b2a2:	53                   	push   ebx
c000b2a3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b2a6:	83 c4 20             	add    esp,0x20
c000b2a9:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b2ae:	0f 85 90 00 00 00    	jne    c000b344 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b2b4:	85 c0                	test   eax,eax
c000b2b6:	0f 85 88 00 00 00    	jne    c000b344 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b2bc:	e8 04 fc ff ff       	call   c000aec5 <KiCreateSymlinkID()>
c000b2c1:	83 ec 0c             	sub    esp,0xc
c000b2c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b2c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b2cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2ce:	56                   	push   esi
c000b2cf:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b2d3:	52                   	push   edx
c000b2d4:	6a 00                	push   0x0
c000b2d6:	6a 08                	push   0x8
c000b2d8:	53                   	push   ebx
c000b2d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b2dc:	83 c4 20             	add    esp,0x20
c000b2df:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b2e4:	75 5e                	jne    c000b344 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b2e6:	85 c0                	test   eax,eax
c000b2e8:	75 5a                	jne    c000b344 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b2ea:	83 ec 0c             	sub    esp,0xc
c000b2ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2ef:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b2f2:	55                   	push   ebp
c000b2f3:	e8 78 52 ff ff       	call   c0000570 <strlen>
c000b2f8:	89 34 24             	mov    DWORD PTR [esp],esi
c000b2fb:	31 d2                	xor    edx,edx
c000b2fd:	55                   	push   ebp
c000b2fe:	52                   	push   edx
c000b2ff:	50                   	push   eax
c000b300:	53                   	push   ebx
c000b301:	ff d7                	call   edi
c000b303:	83 c4 14             	add    esp,0x14
c000b306:	89 c6                	mov    esi,eax
c000b308:	55                   	push   ebp
c000b309:	e8 62 52 ff ff       	call   c0000570 <strlen>
c000b30e:	83 c4 10             	add    esp,0x10
c000b311:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b315:	75 2d                	jne    c000b344 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b317:	85 f6                	test   esi,esi
c000b319:	75 29                	jne    c000b344 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b31b:	50                   	push   eax
c000b31c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b320:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b324:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b328:	e8 05 fc ff ff       	call   c000af32 <KeRegisterSymlink(char const*, unsigned long long)>
c000b32d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b330:	e8 e1 06 00 00       	call   c000ba16 <File::close()>
c000b335:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b337:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b33a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b33d:	83 c4 10             	add    esp,0x10
c000b340:	31 c0                	xor    eax,eax
c000b342:	eb 19                	jmp    c000b35d <KeCreateSymlink(char const*, char const*)+0x134>
c000b344:	83 ec 0c             	sub    esp,0xc
c000b347:	53                   	push   ebx
c000b348:	e8 c9 06 00 00       	call   c000ba16 <File::close()>
c000b34d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b34f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b352:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b355:	83 c4 10             	add    esp,0x10
c000b358:	b8 01 00 00 00       	mov    eax,0x1
c000b35d:	83 c4 2c             	add    esp,0x2c
c000b360:	5b                   	pop    ebx
c000b361:	5e                   	pop    esi
c000b362:	5f                   	pop    edi
c000b363:	5d                   	pop    ebp
c000b364:	c3                   	ret    

c000b365 <KeInitialiseSymlinks()>:
c000b365:	53                   	push   ebx
c000b366:	83 ec 10             	sub    esp,0x10
c000b369:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b373:	6a 00                	push   0x0
c000b375:	68 9f ae 00 c0       	push   0xc000ae9f
c000b37a:	e8 d9 58 00 00       	call   c0010c58 <KeRegisterAtexit(void (*)(void*), void*)>
c000b37f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b386:	e8 2b c7 ff ff       	call   c0007ab6 <malloc>
c000b38b:	83 c4 0c             	add    esp,0xc
c000b38e:	89 c3                	mov    ebx,eax
c000b390:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b396:	68 6f 15 02 c0       	push   0xc002156f
c000b39b:	50                   	push   eax
c000b39c:	e8 f9 05 00 00       	call   c000b99a <File::File(char const*, Process*)>
c000b3a1:	83 c4 10             	add    esp,0x10
c000b3a4:	85 db                	test   ebx,ebx
c000b3a6:	75 10                	jne    c000b3b8 <KeInitialiseSymlinks()+0x53>
c000b3a8:	83 ec 0c             	sub    esp,0xc
c000b3ab:	68 43 16 02 c0       	push   0xc0021643
c000b3b0:	e8 b6 60 00 00       	call   c001146b <KePanic(char const*)>
c000b3b5:	83 c4 10             	add    esp,0x10
c000b3b8:	83 ec 0c             	sub    esp,0xc
c000b3bb:	53                   	push   ebx
c000b3bc:	e8 bb 08 00 00       	call   c000bc7c <File::exists()>
c000b3c1:	83 c4 10             	add    esp,0x10
c000b3c4:	84 c0                	test   al,al
c000b3c6:	75 2d                	jne    c000b3f5 <KeInitialiseSymlinks()+0x90>
c000b3c8:	52                   	push   edx
c000b3c9:	52                   	push   edx
c000b3ca:	6a 12                	push   0x12
c000b3cc:	53                   	push   ebx
c000b3cd:	e8 e6 05 00 00       	call   c000b9b8 <File::open(FileOpenMode)>
c000b3d2:	83 c4 10             	add    esp,0x10
c000b3d5:	85 c0                	test   eax,eax
c000b3d7:	74 10                	je     c000b3e9 <KeInitialiseSymlinks()+0x84>
c000b3d9:	83 ec 0c             	sub    esp,0xc
c000b3dc:	68 60 16 02 c0       	push   0xc0021660
c000b3e1:	e8 85 60 00 00       	call   c001146b <KePanic(char const*)>
c000b3e6:	83 c4 10             	add    esp,0x10
c000b3e9:	83 ec 0c             	sub    esp,0xc
c000b3ec:	53                   	push   ebx
c000b3ed:	e8 24 06 00 00       	call   c000ba16 <File::close()>
c000b3f2:	83 c4 10             	add    esp,0x10
c000b3f5:	85 db                	test   ebx,ebx
c000b3f7:	74 0c                	je     c000b405 <KeInitialiseSymlinks()+0xa0>
c000b3f9:	83 ec 0c             	sub    esp,0xc
c000b3fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3fe:	53                   	push   ebx
c000b3ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b402:	83 c4 10             	add    esp,0x10
c000b405:	50                   	push   eax
c000b406:	50                   	push   eax
c000b407:	68 7d 16 02 c0       	push   0xc002167d
c000b40c:	68 8b 16 02 c0       	push   0xc002168b
c000b411:	e8 13 fe ff ff       	call   c000b229 <KeCreateSymlink(char const*, char const*)>
c000b416:	83 c4 18             	add    esp,0x18
c000b419:	5b                   	pop    ebx
c000b41a:	c3                   	ret    
c000b41b:	90                   	nop

c000b41c <File::read(unsigned long long, void*, int*)>:
c000b41c:	53                   	push   ebx
c000b41d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b421:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b425:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b42c:	83 f8 19             	cmp    eax,0x19
c000b42f:	77 35                	ja     c000b466 <File::read(unsigned long long, void*, int*)+0x4a>
c000b431:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b438:	85 c0                	test   eax,eax
c000b43a:	74 2a                	je     c000b466 <File::read(unsigned long long, void*, int*)+0x4a>
c000b43c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b442:	85 c0                	test   eax,eax
c000b444:	74 20                	je     c000b466 <File::read(unsigned long long, void*, int*)+0x4a>
c000b446:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b44a:	74 21                	je     c000b46d <File::read(unsigned long long, void*, int*)+0x51>
c000b44c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b44e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b452:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b458:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b45c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b460:	5b                   	pop    ebx
c000b461:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b464:	ff e0                	jmp    eax
c000b466:	b8 0b 00 00 00       	mov    eax,0xb
c000b46b:	eb 05                	jmp    c000b472 <File::read(unsigned long long, void*, int*)+0x56>
c000b46d:	b8 05 00 00 00       	mov    eax,0x5
c000b472:	5b                   	pop    ebx
c000b473:	c3                   	ret    

c000b474 <File::write(unsigned long long, void*, int*)>:
c000b474:	53                   	push   ebx
c000b475:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b479:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b47d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b484:	83 f8 19             	cmp    eax,0x19
c000b487:	77 35                	ja     c000b4be <File::write(unsigned long long, void*, int*)+0x4a>
c000b489:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b490:	85 c0                	test   eax,eax
c000b492:	74 2a                	je     c000b4be <File::write(unsigned long long, void*, int*)+0x4a>
c000b494:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b49a:	85 c0                	test   eax,eax
c000b49c:	74 20                	je     c000b4be <File::write(unsigned long long, void*, int*)+0x4a>
c000b49e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b4a2:	74 21                	je     c000b4c5 <File::write(unsigned long long, void*, int*)+0x51>
c000b4a4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b4a6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4aa:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b4b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4b8:	5b                   	pop    ebx
c000b4b9:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b4bc:	ff e0                	jmp    eax
c000b4be:	b8 0b 00 00 00       	mov    eax,0xb
c000b4c3:	eb 05                	jmp    c000b4ca <File::write(unsigned long long, void*, int*)+0x56>
c000b4c5:	b8 05 00 00 00       	mov    eax,0x5
c000b4ca:	5b                   	pop    ebx
c000b4cb:	c3                   	ret    

c000b4cc <Directory::read(unsigned long long, void*, int*)>:
c000b4cc:	53                   	push   ebx
c000b4cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b4d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b4d5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b4dc:	83 f8 19             	cmp    eax,0x19
c000b4df:	77 35                	ja     c000b516 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b4e1:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b4e8:	85 c0                	test   eax,eax
c000b4ea:	74 2a                	je     c000b516 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b4ec:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b4f2:	85 c0                	test   eax,eax
c000b4f4:	74 20                	je     c000b516 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b4f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b4fa:	74 21                	je     c000b51d <Directory::read(unsigned long long, void*, int*)+0x51>
c000b4fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b4fe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b502:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b508:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b50c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b510:	5b                   	pop    ebx
c000b511:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b514:	ff e0                	jmp    eax
c000b516:	b8 0b 00 00 00       	mov    eax,0xb
c000b51b:	eb 05                	jmp    c000b522 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b51d:	b8 05 00 00 00       	mov    eax,0x5
c000b522:	5b                   	pop    ebx
c000b523:	c3                   	ret    

c000b524 <Directory::write(unsigned long long, void*, int*)>:
c000b524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b528:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b52f:	b8 0b 00 00 00       	mov    eax,0xb
c000b534:	83 fa 19             	cmp    edx,0x19
c000b537:	77 18                	ja     c000b551 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b539:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b540:	85 d2                	test   edx,edx
c000b542:	74 0d                	je     c000b551 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b544:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b54b:	19 c0                	sbb    eax,eax
c000b54d:	83 e0 0a             	and    eax,0xa
c000b550:	40                   	inc    eax
c000b551:	c3                   	ret    

c000b552 <File::isAtty()>:
c000b552:	31 c0                	xor    eax,eax
c000b554:	c3                   	ret    
c000b555:	90                   	nop

c000b556 <Directory::isAtty()>:
c000b556:	31 c0                	xor    eax,eax
c000b558:	c3                   	ret    
c000b559:	90                   	nop

c000b55a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b55a:	b8 0a 00 00 00       	mov    eax,0xa
c000b55f:	c3                   	ret    

c000b560 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b560:	b8 0a 00 00 00       	mov    eax,0xa
c000b565:	c3                   	ret    

c000b566 <Filesystem::allocateSwapfile(char const*, int)>:
c000b566:	31 c0                	xor    eax,eax
c000b568:	31 d2                	xor    edx,edx
c000b56a:	c3                   	ret    
c000b56b:	90                   	nop

c000b56c <File::~File()>:
c000b56c:	83 ec 0c             	sub    esp,0xc
c000b56f:	ba 44 17 02 c0       	mov    edx,0xc0021744
c000b574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b578:	89 10                	mov    DWORD PTR [eax],edx
c000b57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b57e:	83 ec 0c             	sub    esp,0xc
c000b581:	50                   	push   eax
c000b582:	e8 1d de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	90                   	nop
c000b58b:	83 c4 0c             	add    esp,0xc
c000b58e:	c3                   	ret    
c000b58f:	90                   	nop

c000b590 <File::~File()>:
c000b590:	83 ec 0c             	sub    esp,0xc
c000b593:	83 ec 0c             	sub    esp,0xc
c000b596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b59a:	e8 cd ff ff ff       	call   c000b56c <File::~File()>
c000b59f:	83 c4 10             	add    esp,0x10
c000b5a2:	83 ec 08             	sub    esp,0x8
c000b5a5:	68 14 01 00 00       	push   0x114
c000b5aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5ae:	e8 65 f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b5b3:	83 c4 10             	add    esp,0x10
c000b5b6:	83 c4 0c             	add    esp,0xc
c000b5b9:	c3                   	ret    

c000b5ba <Directory::~Directory()>:
c000b5ba:	83 ec 0c             	sub    esp,0xc
c000b5bd:	ba 60 17 02 c0       	mov    edx,0xc0021760
c000b5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5c6:	89 10                	mov    DWORD PTR [eax],edx
c000b5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5cc:	83 ec 0c             	sub    esp,0xc
c000b5cf:	50                   	push   eax
c000b5d0:	e8 cf dd ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b5d5:	83 c4 10             	add    esp,0x10
c000b5d8:	90                   	nop
c000b5d9:	83 c4 0c             	add    esp,0xc
c000b5dc:	c3                   	ret    
c000b5dd:	90                   	nop

c000b5de <Directory::~Directory()>:
c000b5de:	83 ec 0c             	sub    esp,0xc
c000b5e1:	83 ec 0c             	sub    esp,0xc
c000b5e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e8:	e8 cd ff ff ff       	call   c000b5ba <Directory::~Directory()>
c000b5ed:	83 c4 10             	add    esp,0x10
c000b5f0:	83 ec 08             	sub    esp,0x8
c000b5f3:	68 14 01 00 00       	push   0x114
c000b5f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5fc:	e8 17 f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b601:	83 c4 10             	add    esp,0x10
c000b604:	83 c4 0c             	add    esp,0xc
c000b607:	c3                   	ret    

c000b608 <Filesystem::Filesystem()>:
c000b608:	ba d8 16 02 c0       	mov    edx,0xc00216d8
c000b60d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b611:	89 10                	mov    DWORD PTR [eax],edx
c000b613:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b619:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b61d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b624:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b629:	90                   	nop
c000b62a:	c3                   	ret    
c000b62b:	90                   	nop

c000b62c <Filesystem::~Filesystem()>:
c000b62c:	ba d8 16 02 c0       	mov    edx,0xc00216d8
c000b631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b635:	89 10                	mov    DWORD PTR [eax],edx
c000b637:	90                   	nop
c000b638:	c3                   	ret    
c000b639:	90                   	nop

c000b63a <Filesystem::~Filesystem()>:
c000b63a:	83 ec 0c             	sub    esp,0xc
c000b63d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b641:	e8 e6 ff ff ff       	call   c000b62c <Filesystem::~Filesystem()>
c000b646:	83 c4 04             	add    esp,0x4
c000b649:	83 ec 08             	sub    esp,0x8
c000b64c:	6a 08                	push   0x8
c000b64e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b652:	e8 c1 f1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b657:	83 c4 10             	add    esp,0x10
c000b65a:	83 c4 0c             	add    esp,0xc
c000b65d:	c3                   	ret    

c000b65e <Fs::getcwd(Process*, char*, int)>:
c000b65e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b662:	31 c0                	xor    eax,eax
c000b664:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b667:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b66b:	7d 15                	jge    c000b682 <Fs::getcwd(Process*, char*, int)+0x24>
c000b66d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b671:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b678:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b67b:	84 c9                	test   cl,cl
c000b67d:	74 06                	je     c000b685 <Fs::getcwd(Process*, char*, int)+0x27>
c000b67f:	40                   	inc    eax
c000b680:	eb e2                	jmp    c000b664 <Fs::getcwd(Process*, char*, int)+0x6>
c000b682:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b685:	31 c0                	xor    eax,eax
c000b687:	c3                   	ret    

c000b688 <Fs::initVFS()>:
c000b688:	83 ec 18             	sub    esp,0x18
c000b68b:	6a 08                	push   0x8
c000b68d:	e8 24 c4 ff ff       	call   c0007ab6 <malloc>
c000b692:	89 04 24             	mov    DWORD PTR [esp],eax
c000b695:	e8 a2 e3 00 00       	call   c0019a3c <FAT::FAT()>
c000b69a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b6a1:	e8 10 c4 ff ff       	call   c0007ab6 <malloc>
c000b6a6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6a9:	e8 ba f2 00 00       	call   c001a968 <ISO9660::ISO9660()>
c000b6ae:	83 c4 1c             	add    esp,0x1c
c000b6b1:	c3                   	ret    

c000b6b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b6b2:	55                   	push   ebp
c000b6b3:	57                   	push   edi
c000b6b4:	56                   	push   esi
c000b6b5:	53                   	push   ebx
c000b6b6:	81 ec 10 04 00 00    	sub    esp,0x410
c000b6bc:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b6c3:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b6ca:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b6d2:	68 00 04 00 00       	push   0x400
c000b6d7:	6a 00                	push   0x0
c000b6d9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b6dd:	57                   	push   edi
c000b6de:	e8 0d 4e ff ff       	call   c00004f0 <memset>
c000b6e3:	83 c4 10             	add    esp,0x10
c000b6e6:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b6ea:	75 0b                	jne    c000b6f7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b6ec:	50                   	push   eax
c000b6ed:	50                   	push   eax
c000b6ee:	55                   	push   ebp
c000b6ef:	57                   	push   edi
c000b6f0:	e8 4b 4f ff ff       	call   c0000640 <strcpy>
c000b6f5:	eb 51                	jmp    c000b748 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b6f7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b6fb:	83 f8 5c             	cmp    eax,0x5c
c000b6fe:	74 05                	je     c000b705 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b700:	83 f8 2f             	cmp    eax,0x2f
c000b703:	75 1e                	jne    c000b723 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b705:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b70c:	8a 00                	mov    al,BYTE PTR [eax]
c000b70e:	3c 60                	cmp    al,0x60
c000b710:	7e 03                	jle    c000b715 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b712:	83 e8 20             	sub    eax,0x20
c000b715:	88 04 24             	mov    BYTE PTR [esp],al
c000b718:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b71f:	50                   	push   eax
c000b720:	50                   	push   eax
c000b721:	eb 1e                	jmp    c000b741 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b723:	50                   	push   eax
c000b724:	50                   	push   eax
c000b725:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b72c:	57                   	push   edi
c000b72d:	e8 0e 4f ff ff       	call   c0000640 <strcpy>
c000b732:	58                   	pop    eax
c000b733:	5a                   	pop    edx
c000b734:	68 83 26 02 c0       	push   0xc0022683
c000b739:	57                   	push   edi
c000b73a:	e8 01 51 ff ff       	call   c0000840 <strcat>
c000b73f:	59                   	pop    ecx
c000b740:	58                   	pop    eax
c000b741:	55                   	push   ebp
c000b742:	57                   	push   edi
c000b743:	e8 f8 50 ff ff       	call   c0000840 <strcat>
c000b748:	83 c4 10             	add    esp,0x10
c000b74b:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b74e:	3c 60                	cmp    al,0x60
c000b750:	7e 03                	jle    c000b755 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b752:	83 e8 20             	sub    eax,0x20
c000b755:	88 04 24             	mov    BYTE PTR [esp],al
c000b758:	88 06                	mov    BYTE PTR [esi],al
c000b75a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b761:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b767:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b76b:	bf 03 00 00 00       	mov    edi,0x3
c000b770:	b8 03 00 00 00       	mov    eax,0x3
c000b775:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b779:	89 e9                	mov    ecx,ebp
c000b77b:	85 ed                	test   ebp,ebp
c000b77d:	0f 84 97 00 00 00    	je     c000b81a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b783:	8d 57 01             	lea    edx,[edi+0x1]
c000b786:	83 fd 5c             	cmp    ebp,0x5c
c000b789:	74 05                	je     c000b790 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b78b:	83 fd 2f             	cmp    ebp,0x2f
c000b78e:	75 12                	jne    c000b7a2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b790:	89 c5                	mov    ebp,eax
c000b792:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b797:	74 09                	je     c000b7a2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b799:	40                   	inc    eax
c000b79a:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b79e:	89 d7                	mov    edi,edx
c000b7a0:	eb d3                	jmp    c000b775 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b7a2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b7a7:	0f be e9             	movsx  ebp,cl
c000b7aa:	75 5e                	jne    c000b80a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b7ac:	83 fd 2e             	cmp    ebp,0x2e
c000b7af:	75 59                	jne    c000b80a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b7b1:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b7b5:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b7ba:	74 18                	je     c000b7d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b7bc:	83 fd 2e             	cmp    ebp,0x2e
c000b7bf:	74 53                	je     c000b814 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b7c1:	89 fa                	mov    edx,edi
c000b7c3:	42                   	inc    edx
c000b7c4:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b7c8:	83 f9 2f             	cmp    ecx,0x2f
c000b7cb:	74 f6                	je     c000b7c3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b7cd:	83 f9 5c             	cmp    ecx,0x5c
c000b7d0:	74 f1                	je     c000b7c3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b7d2:	eb ca                	jmp    c000b79e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b7d4:	83 fd 2e             	cmp    ebp,0x2e
c000b7d7:	74 3b                	je     c000b814 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b7d9:	83 f8 03             	cmp    eax,0x3
c000b7dc:	74 c0                	je     c000b79e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b7de:	42                   	inc    edx
c000b7df:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b7e3:	83 f9 5c             	cmp    ecx,0x5c
c000b7e6:	74 f6                	je     c000b7de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b7e8:	83 f9 2f             	cmp    ecx,0x2f
c000b7eb:	74 f1                	je     c000b7de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b7ed:	48                   	dec    eax
c000b7ee:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b7f2:	75 06                	jne    c000b7fa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b7f4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b7f8:	eb f3                	jmp    c000b7ed <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b7fa:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b7fe:	74 07                	je     c000b807 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b800:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b804:	48                   	dec    eax
c000b805:	eb f3                	jmp    c000b7fa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b807:	40                   	inc    eax
c000b808:	eb 94                	jmp    c000b79e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b80a:	83 fd 5c             	cmp    ebp,0x5c
c000b80d:	74 8f                	je     c000b79e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b80f:	83 fd 2f             	cmp    ebp,0x2f
c000b812:	74 8a                	je     c000b79e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b814:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b817:	40                   	inc    eax
c000b818:	eb 84                	jmp    c000b79e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b81a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b81e:	83 ec 0c             	sub    esp,0xc
c000b821:	56                   	push   esi
c000b822:	e8 49 4d ff ff       	call   c0000570 <strlen>
c000b827:	83 c4 10             	add    esp,0x10
c000b82a:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b82f:	74 17                	je     c000b848 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b831:	83 ec 0c             	sub    esp,0xc
c000b834:	56                   	push   esi
c000b835:	e8 36 4d ff ff       	call   c0000570 <strlen>
c000b83a:	83 c4 10             	add    esp,0x10
c000b83d:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b842:	74 04                	je     c000b848 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b844:	31 ff                	xor    edi,edi
c000b846:	eb 4c                	jmp    c000b894 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000b848:	83 ec 0c             	sub    esp,0xc
c000b84b:	56                   	push   esi
c000b84c:	e8 1f 4d ff ff       	call   c0000570 <strlen>
c000b851:	83 c4 10             	add    esp,0x10
c000b854:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b859:	74 e9                	je     c000b844 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000b85b:	83 ec 0c             	sub    esp,0xc
c000b85e:	56                   	push   esi
c000b85f:	e8 0c 4d ff ff       	call   c0000570 <strlen>
c000b864:	83 c4 10             	add    esp,0x10
c000b867:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b86c:	eb b0                	jmp    c000b81e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000b86e:	50                   	push   eax
c000b86f:	50                   	push   eax
c000b870:	56                   	push   esi
c000b871:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000b875:	55                   	push   ebp
c000b876:	e8 c5 4d ff ff       	call   c0000640 <strcpy>
c000b87b:	5a                   	pop    edx
c000b87c:	59                   	pop    ecx
c000b87d:	56                   	push   esi
c000b87e:	55                   	push   ebp
c000b87f:	e8 8a f7 ff ff       	call   c000b00e <KeDereferenceSymlink(char const*, char*)>
c000b884:	83 c4 10             	add    esp,0x10
c000b887:	48                   	dec    eax
c000b888:	75 27                	jne    c000b8b1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000b88a:	8d 47 01             	lea    eax,[edi+0x1]
c000b88d:	83 ff 14             	cmp    edi,0x14
c000b890:	74 08                	je     c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e8>
c000b892:	89 c7                	mov    edi,eax
c000b894:	85 db                	test   ebx,ebx
c000b896:	75 d6                	jne    c000b86e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000b898:	eb 17                	jmp    c000b8b1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000b89a:	83 ec 0c             	sub    esp,0xc
c000b89d:	bf 15 00 00 00       	mov    edi,0x15
c000b8a2:	68 a9 16 02 c0       	push   0xc00216a9
c000b8a7:	e8 bf 5b 00 00       	call   c001146b <KePanic(char const*)>
c000b8ac:	83 c4 10             	add    esp,0x10
c000b8af:	eb e3                	jmp    c000b894 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000b8b1:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b8b7:	5b                   	pop    ebx
c000b8b8:	5e                   	pop    esi
c000b8b9:	5f                   	pop    edi
c000b8ba:	5d                   	pop    ebp
c000b8bb:	c3                   	ret    

c000b8bc <File::File(char const*, Process*, bool)>:
c000b8bc:	83 ec 1c             	sub    esp,0x1c
c000b8bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b8c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b8cb:	83 ec 08             	sub    esp,0x8
c000b8ce:	6a 00                	push   0x0
c000b8d0:	50                   	push   eax
c000b8d1:	e8 e8 d8 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b8d6:	83 c4 10             	add    esp,0x10
c000b8d9:	ba 44 17 02 c0       	mov    edx,0xc0021744
c000b8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b8e2:	89 10                	mov    DWORD PTR [eax],edx
c000b8e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b8e9:	85 c0                	test   eax,eax
c000b8eb:	74 0f                	je     c000b8fc <File::File(char const*, Process*, bool)+0x40>
c000b8ed:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000b8f2:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000b8f6:	74 04                	je     c000b8fc <File::File(char const*, Process*, bool)+0x40>
c000b8f8:	b0 01                	mov    al,0x1
c000b8fa:	eb 02                	jmp    c000b8fe <File::File(char const*, Process*, bool)+0x42>
c000b8fc:	b0 00                	mov    al,0x0
c000b8fe:	0f b6 c0             	movzx  eax,al
c000b901:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b905:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b90b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b90f:	83 c2 0d             	add    edx,0xd
c000b912:	50                   	push   eax
c000b913:	51                   	push   ecx
c000b914:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b918:	52                   	push   edx
c000b919:	e8 94 fd ff ff       	call   c000b6b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b91e:	83 c4 10             	add    esp,0x10
c000b921:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b925:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b928:	83 e8 41             	sub    eax,0x41
c000b92b:	88 c2                	mov    dl,al
c000b92d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b931:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b937:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b93b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b93f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b943:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b949:	0f b6 c0             	movzx  eax,al
c000b94c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b953:	85 c0                	test   eax,eax
c000b955:	74 3e                	je     c000b995 <File::File(char const*, Process*, bool)+0xd9>
c000b957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b95b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b961:	0f b6 c0             	movzx  eax,al
c000b964:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b96b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b971:	85 c0                	test   eax,eax
c000b973:	75 20                	jne    c000b995 <File::File(char const*, Process*, bool)+0xd9>
c000b975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b979:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b97f:	0f b6 c0             	movzx  eax,al
c000b982:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b989:	83 ec 0c             	sub    esp,0xc
c000b98c:	50                   	push   eax
c000b98d:	e8 a0 21 00 00       	call   c000db32 <LogicalDisk::mount()>
c000b992:	83 c4 10             	add    esp,0x10
c000b995:	90                   	nop
c000b996:	83 c4 1c             	add    esp,0x1c
c000b999:	c3                   	ret    

c000b99a <File::File(char const*, Process*)>:
c000b99a:	83 ec 0c             	sub    esp,0xc
c000b99d:	6a 01                	push   0x1
c000b99f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ab:	e8 0c ff ff ff       	call   c000b8bc <File::File(char const*, Process*, bool)>
c000b9b0:	83 c4 10             	add    esp,0x10
c000b9b3:	90                   	nop
c000b9b4:	83 c4 0c             	add    esp,0xc
c000b9b7:	c3                   	ret    

c000b9b8 <File::open(FileOpenMode)>:
c000b9b8:	53                   	push   ebx
c000b9b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b9be:	83 ec 08             	sub    esp,0x8
c000b9c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b9c5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b9cc:	83 fa 19             	cmp    edx,0x19
c000b9cf:	77 40                	ja     c000ba11 <File::open(FileOpenMode)+0x59>
c000b9d1:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b9d8:	85 d2                	test   edx,edx
c000b9da:	74 35                	je     c000ba11 <File::open(FileOpenMode)+0x59>
c000b9dc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9e2:	85 d2                	test   edx,edx
c000b9e4:	74 2b                	je     c000ba11 <File::open(FileOpenMode)+0x59>
c000b9e6:	b8 06 00 00 00       	mov    eax,0x6
c000b9eb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b9ef:	75 20                	jne    c000ba11 <File::open(FileOpenMode)+0x59>
c000b9f1:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9f3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b9f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9fd:	51                   	push   ecx
c000b9fe:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ba01:	51                   	push   ecx
c000ba02:	52                   	push   edx
c000ba03:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ba06:	83 c4 10             	add    esp,0x10
c000ba09:	85 c0                	test   eax,eax
c000ba0b:	75 04                	jne    c000ba11 <File::open(FileOpenMode)+0x59>
c000ba0d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ba11:	83 c4 08             	add    esp,0x8
c000ba14:	5b                   	pop    ebx
c000ba15:	c3                   	ret    

c000ba16 <File::close()>:
c000ba16:	53                   	push   ebx
c000ba17:	b8 0b 00 00 00       	mov    eax,0xb
c000ba1c:	83 ec 08             	sub    esp,0x8
c000ba1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba23:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba2a:	83 f9 19             	cmp    ecx,0x19
c000ba2d:	77 41                	ja     c000ba70 <File::close()+0x5a>
c000ba2f:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000ba36:	85 db                	test   ebx,ebx
c000ba38:	74 36                	je     c000ba70 <File::close()+0x5a>
c000ba3a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000ba41:	74 2d                	je     c000ba70 <File::close()+0x5a>
c000ba43:	b8 05 00 00 00       	mov    eax,0x5
c000ba48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba4c:	74 22                	je     c000ba70 <File::close()+0x5a>
c000ba4e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000ba52:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000ba59:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ba5f:	53                   	push   ebx
c000ba60:	53                   	push   ebx
c000ba61:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ba63:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ba69:	50                   	push   eax
c000ba6a:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000ba6d:	83 c4 10             	add    esp,0x10
c000ba70:	83 c4 08             	add    esp,0x8
c000ba73:	5b                   	pop    ebx
c000ba74:	c3                   	ret    
c000ba75:	90                   	nop

c000ba76 <File::seek(unsigned long long)>:
c000ba76:	56                   	push   esi
c000ba77:	53                   	push   ebx
c000ba78:	b8 0b 00 00 00       	mov    eax,0xb
c000ba7d:	51                   	push   ecx
c000ba7e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba82:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ba86:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ba8d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba91:	83 fa 19             	cmp    edx,0x19
c000ba94:	77 31                	ja     c000bac7 <File::seek(unsigned long long)+0x51>
c000ba96:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000ba9d:	85 d2                	test   edx,edx
c000ba9f:	74 26                	je     c000bac7 <File::seek(unsigned long long)+0x51>
c000baa1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000baa7:	85 d2                	test   edx,edx
c000baa9:	74 1c                	je     c000bac7 <File::seek(unsigned long long)+0x51>
c000baab:	b8 05 00 00 00       	mov    eax,0x5
c000bab0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bab4:	74 11                	je     c000bac7 <File::seek(unsigned long long)+0x51>
c000bab6:	8b 02                	mov    eax,DWORD PTR [edx]
c000bab8:	53                   	push   ebx
c000bab9:	51                   	push   ecx
c000baba:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bac0:	52                   	push   edx
c000bac1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bac4:	83 c4 10             	add    esp,0x10
c000bac7:	5a                   	pop    edx
c000bac8:	5b                   	pop    ebx
c000bac9:	5e                   	pop    esi
c000baca:	c3                   	ret    
c000bacb:	90                   	nop

c000bacc <File::truncate(unsigned long long)>:
c000bacc:	56                   	push   esi
c000bacd:	53                   	push   ebx
c000bace:	b8 0b 00 00 00       	mov    eax,0xb
c000bad3:	51                   	push   ecx
c000bad4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bad8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000badc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bae3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bae7:	83 fa 19             	cmp    edx,0x19
c000baea:	77 31                	ja     c000bb1d <File::truncate(unsigned long long)+0x51>
c000baec:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000baf3:	85 d2                	test   edx,edx
c000baf5:	74 26                	je     c000bb1d <File::truncate(unsigned long long)+0x51>
c000baf7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bafd:	85 d2                	test   edx,edx
c000baff:	74 1c                	je     c000bb1d <File::truncate(unsigned long long)+0x51>
c000bb01:	b8 05 00 00 00       	mov    eax,0x5
c000bb06:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bb0a:	74 11                	je     c000bb1d <File::truncate(unsigned long long)+0x51>
c000bb0c:	8b 02                	mov    eax,DWORD PTR [edx]
c000bb0e:	53                   	push   ebx
c000bb0f:	51                   	push   ecx
c000bb10:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bb16:	52                   	push   edx
c000bb17:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	5a                   	pop    edx
c000bb1e:	5b                   	pop    ebx
c000bb1f:	5e                   	pop    esi
c000bb20:	c3                   	ret    
c000bb21:	90                   	nop

c000bb22 <File::tell(unsigned long long*)>:
c000bb22:	83 ec 0c             	sub    esp,0xc
c000bb25:	b8 0b 00 00 00       	mov    eax,0xb
c000bb2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bb2e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bb35:	83 fa 19             	cmp    edx,0x19
c000bb38:	77 34                	ja     c000bb6e <File::tell(unsigned long long*)+0x4c>
c000bb3a:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb41:	85 d2                	test   edx,edx
c000bb43:	74 29                	je     c000bb6e <File::tell(unsigned long long*)+0x4c>
c000bb45:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb4b:	85 d2                	test   edx,edx
c000bb4d:	74 1f                	je     c000bb6e <File::tell(unsigned long long*)+0x4c>
c000bb4f:	b8 05 00 00 00       	mov    eax,0x5
c000bb54:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bb58:	74 14                	je     c000bb6e <File::tell(unsigned long long*)+0x4c>
c000bb5a:	50                   	push   eax
c000bb5b:	8b 02                	mov    eax,DWORD PTR [edx]
c000bb5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb61:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bb67:	52                   	push   edx
c000bb68:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	83 c4 0c             	add    esp,0xc
c000bb71:	c3                   	ret    

c000bb72 <File::rewind()>:
c000bb72:	83 ec 10             	sub    esp,0x10
c000bb75:	6a 00                	push   0x0
c000bb77:	6a 00                	push   0x0
c000bb79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb7d:	e8 f4 fe ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c000bb82:	83 c4 1c             	add    esp,0x1c
c000bb85:	c3                   	ret    

c000bb86 <File::unlink()>:
c000bb86:	83 ec 0c             	sub    esp,0xc
c000bb89:	b8 0b 00 00 00       	mov    eax,0xb
c000bb8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb99:	83 f9 19             	cmp    ecx,0x19
c000bb9c:	77 2f                	ja     c000bbcd <File::unlink()+0x47>
c000bb9e:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bba5:	85 c9                	test   ecx,ecx
c000bba7:	74 24                	je     c000bbcd <File::unlink()+0x47>
c000bba9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbaf:	85 c9                	test   ecx,ecx
c000bbb1:	74 1a                	je     c000bbcd <File::unlink()+0x47>
c000bbb3:	b8 06 00 00 00       	mov    eax,0x6
c000bbb8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbbc:	75 0f                	jne    c000bbcd <File::unlink()+0x47>
c000bbbe:	83 c2 0d             	add    edx,0xd
c000bbc1:	50                   	push   eax
c000bbc2:	50                   	push   eax
c000bbc3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbc5:	52                   	push   edx
c000bbc6:	51                   	push   ecx
c000bbc7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bbca:	83 c4 10             	add    esp,0x10
c000bbcd:	83 c4 0c             	add    esp,0xc
c000bbd0:	c3                   	ret    
c000bbd1:	90                   	nop

c000bbd2 <File::rename(char const*)>:
c000bbd2:	83 ec 0c             	sub    esp,0xc
c000bbd5:	b8 0b 00 00 00       	mov    eax,0xb
c000bbda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbde:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbe5:	83 f9 19             	cmp    ecx,0x19
c000bbe8:	77 32                	ja     c000bc1c <File::rename(char const*)+0x4a>
c000bbea:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbf1:	85 c9                	test   ecx,ecx
c000bbf3:	74 27                	je     c000bc1c <File::rename(char const*)+0x4a>
c000bbf5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbfb:	85 c9                	test   ecx,ecx
c000bbfd:	74 1d                	je     c000bc1c <File::rename(char const*)+0x4a>
c000bbff:	b8 06 00 00 00       	mov    eax,0x6
c000bc04:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc08:	75 12                	jne    c000bc1c <File::rename(char const*)+0x4a>
c000bc0a:	83 c2 0d             	add    edx,0xd
c000bc0d:	50                   	push   eax
c000bc0e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc14:	52                   	push   edx
c000bc15:	51                   	push   ecx
c000bc16:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bc19:	83 c4 10             	add    esp,0x10
c000bc1c:	83 c4 0c             	add    esp,0xc
c000bc1f:	c3                   	ret    

c000bc20 <File::chfatattr(unsigned char, unsigned char)>:
c000bc20:	57                   	push   edi
c000bc21:	b8 0b 00 00 00       	mov    eax,0xb
c000bc26:	56                   	push   esi
c000bc27:	53                   	push   ebx
c000bc28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bc30:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc37:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bc3b:	83 f9 19             	cmp    ecx,0x19
c000bc3e:	77 37                	ja     c000bc77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bc40:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc47:	85 c9                	test   ecx,ecx
c000bc49:	74 2c                	je     c000bc77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bc4b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bc51:	85 c9                	test   ecx,ecx
c000bc53:	74 22                	je     c000bc77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bc55:	b8 06 00 00 00       	mov    eax,0x6
c000bc5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc5e:	75 17                	jne    c000bc77 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bc60:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bc62:	89 f0                	mov    eax,esi
c000bc64:	83 c2 0d             	add    edx,0xd
c000bc67:	0f b6 f0             	movzx  esi,al
c000bc6a:	0f b6 db             	movzx  ebx,bl
c000bc6d:	56                   	push   esi
c000bc6e:	53                   	push   ebx
c000bc6f:	52                   	push   edx
c000bc70:	51                   	push   ecx
c000bc71:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bc74:	83 c4 10             	add    esp,0x10
c000bc77:	5b                   	pop    ebx
c000bc78:	5e                   	pop    esi
c000bc79:	5f                   	pop    edi
c000bc7a:	c3                   	ret    
c000bc7b:	90                   	nop

c000bc7c <File::exists()>:
c000bc7c:	83 ec 0c             	sub    esp,0xc
c000bc7f:	31 c0                	xor    eax,eax
c000bc81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc85:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc8c:	83 f9 19             	cmp    ecx,0x19
c000bc8f:	77 24                	ja     c000bcb5 <File::exists()+0x39>
c000bc91:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc98:	85 c9                	test   ecx,ecx
c000bc9a:	74 19                	je     c000bcb5 <File::exists()+0x39>
c000bc9c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bca2:	85 c9                	test   ecx,ecx
c000bca4:	74 0f                	je     c000bcb5 <File::exists()+0x39>
c000bca6:	83 c2 0d             	add    edx,0xd
c000bca9:	50                   	push   eax
c000bcaa:	50                   	push   eax
c000bcab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bcad:	52                   	push   edx
c000bcae:	51                   	push   ecx
c000bcaf:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bcb2:	83 c4 10             	add    esp,0x10
c000bcb5:	83 c4 0c             	add    esp,0xc
c000bcb8:	c3                   	ret    
c000bcb9:	90                   	nop

c000bcba <File::stat(unsigned long long*, bool*)>:
c000bcba:	56                   	push   esi
c000bcbb:	53                   	push   ebx
c000bcbc:	50                   	push   eax
c000bcbd:	b8 0b 00 00 00       	mov    eax,0xb
c000bcc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcc6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bcca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bcd1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcd5:	83 f9 19             	cmp    ecx,0x19
c000bcd8:	77 3d                	ja     c000bd17 <File::stat(unsigned long long*, bool*)+0x5d>
c000bcda:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bce1:	85 c9                	test   ecx,ecx
c000bce3:	74 32                	je     c000bd17 <File::stat(unsigned long long*, bool*)+0x5d>
c000bce5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bceb:	85 c9                	test   ecx,ecx
c000bced:	74 28                	je     c000bd17 <File::stat(unsigned long long*, bool*)+0x5d>
c000bcef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bcf1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bcf5:	74 13                	je     c000bd0a <File::stat(unsigned long long*, bool*)+0x50>
c000bcf7:	83 ec 04             	sub    esp,0x4
c000bcfa:	56                   	push   esi
c000bcfb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bd01:	51                   	push   ecx
c000bd02:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bd05:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bd08:	eb 0a                	jmp    c000bd14 <File::stat(unsigned long long*, bool*)+0x5a>
c000bd0a:	53                   	push   ebx
c000bd0b:	83 c2 0d             	add    edx,0xd
c000bd0e:	56                   	push   esi
c000bd0f:	52                   	push   edx
c000bd10:	51                   	push   ecx
c000bd11:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bd14:	83 c4 10             	add    esp,0x10
c000bd17:	5a                   	pop    edx
c000bd18:	5b                   	pop    ebx
c000bd19:	5e                   	pop    esi
c000bd1a:	c3                   	ret    

c000bd1b <Fs::setcwd(Process*, char*)>:
c000bd1b:	55                   	push   ebp
c000bd1c:	57                   	push   edi
c000bd1d:	56                   	push   esi
c000bd1e:	53                   	push   ebx
c000bd1f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bd25:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bd2c:	6a 00                	push   0x0
c000bd2e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bd34:	57                   	push   edi
c000bd35:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bd3c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bd40:	56                   	push   esi
c000bd41:	e8 6c f9 ff ff       	call   c000b6b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bd46:	89 34 24             	mov    DWORD PTR [esp],esi
c000bd49:	e8 22 48 ff ff       	call   c0000570 <strlen>
c000bd4e:	83 c4 10             	add    esp,0x10
c000bd51:	83 f8 02             	cmp    eax,0x2
c000bd54:	77 15                	ja     c000bd6b <Fs::setcwd(Process*, char*)+0x50>
c000bd56:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bd5b:	83 eb 41             	sub    ebx,0x41
c000bd5e:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bd65:	85 c0                	test   eax,eax
c000bd67:	75 1c                	jne    c000bd85 <Fs::setcwd(Process*, char*)+0x6a>
c000bd69:	eb 2f                	jmp    c000bd9a <Fs::setcwd(Process*, char*)+0x7f>
c000bd6b:	83 ec 0c             	sub    esp,0xc
c000bd6e:	56                   	push   esi
c000bd6f:	e8 fc 47 ff ff       	call   c0000570 <strlen>
c000bd74:	83 c4 10             	add    esp,0x10
c000bd77:	83 f8 03             	cmp    eax,0x3
c000bd7a:	75 57                	jne    c000bdd3 <Fs::setcwd(Process*, char*)+0xb8>
c000bd7c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bd81:	75 50                	jne    c000bdd3 <Fs::setcwd(Process*, char*)+0xb8>
c000bd83:	eb d1                	jmp    c000bd56 <Fs::setcwd(Process*, char*)+0x3b>
c000bd85:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bd8c:	75 0c                	jne    c000bd9a <Fs::setcwd(Process*, char*)+0x7f>
c000bd8e:	83 ec 0c             	sub    esp,0xc
c000bd91:	50                   	push   eax
c000bd92:	e8 9b 1d 00 00       	call   c000db32 <LogicalDisk::mount()>
c000bd97:	83 c4 10             	add    esp,0x10
c000bd9a:	b8 03 00 00 00       	mov    eax,0x3
c000bd9f:	83 fb 19             	cmp    ebx,0x19
c000bda2:	0f 87 c6 00 00 00    	ja     c000be6e <Fs::setcwd(Process*, char*)+0x153>
c000bda8:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bdaf:	b8 05 00 00 00       	mov    eax,0x5
c000bdb4:	85 d2                	test   edx,edx
c000bdb6:	0f 84 b2 00 00 00    	je     c000be6e <Fs::setcwd(Process*, char*)+0x153>
c000bdbc:	b8 06 00 00 00       	mov    eax,0x6
c000bdc1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bdc8:	0f 85 92 00 00 00    	jne    c000be60 <Fs::setcwd(Process*, char*)+0x145>
c000bdce:	e9 9b 00 00 00       	jmp    c000be6e <Fs::setcwd(Process*, char*)+0x153>
c000bdd3:	83 ec 0c             	sub    esp,0xc
c000bdd6:	68 14 01 00 00       	push   0x114
c000bddb:	e8 d6 bc ff ff       	call   c0007ab6 <malloc>
c000bde0:	83 c4 0c             	add    esp,0xc
c000bde3:	89 c3                	mov    ebx,eax
c000bde5:	55                   	push   ebp
c000bde6:	56                   	push   esi
c000bde7:	50                   	push   eax
c000bde8:	e8 ad fb ff ff       	call   c000b99a <File::File(char const*, Process*)>
c000bded:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bdf2:	83 c4 0c             	add    esp,0xc
c000bdf5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bdf9:	50                   	push   eax
c000bdfa:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bdfe:	50                   	push   eax
c000bdff:	53                   	push   ebx
c000be00:	e8 b5 fe ff ff       	call   c000bcba <File::stat(unsigned long long*, bool*)>
c000be05:	83 c4 10             	add    esp,0x10
c000be08:	83 f8 02             	cmp    eax,0x2
c000be0b:	74 27                	je     c000be34 <Fs::setcwd(Process*, char*)+0x119>
c000be0d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000be12:	75 1c                	jne    c000be30 <Fs::setcwd(Process*, char*)+0x115>
c000be14:	b8 02 00 00 00       	mov    eax,0x2
c000be19:	85 db                	test   ebx,ebx
c000be1b:	74 51                	je     c000be6e <Fs::setcwd(Process*, char*)+0x153>
c000be1d:	83 ec 0c             	sub    esp,0xc
c000be20:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be22:	53                   	push   ebx
c000be23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000be26:	83 c4 10             	add    esp,0x10
c000be29:	b8 02 00 00 00       	mov    eax,0x2
c000be2e:	eb 3e                	jmp    c000be6e <Fs::setcwd(Process*, char*)+0x153>
c000be30:	85 c0                	test   eax,eax
c000be32:	74 1c                	je     c000be50 <Fs::setcwd(Process*, char*)+0x135>
c000be34:	b8 01 00 00 00       	mov    eax,0x1
c000be39:	85 db                	test   ebx,ebx
c000be3b:	74 31                	je     c000be6e <Fs::setcwd(Process*, char*)+0x153>
c000be3d:	83 ec 0c             	sub    esp,0xc
c000be40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be42:	53                   	push   ebx
c000be43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000be46:	83 c4 10             	add    esp,0x10
c000be49:	b8 01 00 00 00       	mov    eax,0x1
c000be4e:	eb 1e                	jmp    c000be6e <Fs::setcwd(Process*, char*)+0x153>
c000be50:	85 db                	test   ebx,ebx
c000be52:	74 0c                	je     c000be60 <Fs::setcwd(Process*, char*)+0x145>
c000be54:	83 ec 0c             	sub    esp,0xc
c000be57:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be59:	53                   	push   ebx
c000be5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000be5d:	83 c4 10             	add    esp,0x10
c000be60:	50                   	push   eax
c000be61:	50                   	push   eax
c000be62:	56                   	push   esi
c000be63:	57                   	push   edi
c000be64:	e8 d7 47 ff ff       	call   c0000640 <strcpy>
c000be69:	83 c4 10             	add    esp,0x10
c000be6c:	31 c0                	xor    eax,eax
c000be6e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000be74:	5b                   	pop    ebx
c000be75:	5e                   	pop    esi
c000be76:	5f                   	pop    edi
c000be77:	5d                   	pop    ebp
c000be78:	c3                   	ret    
c000be79:	90                   	nop

c000be7a <Directory::Directory(char const*, Process*)>:
c000be7a:	83 ec 0c             	sub    esp,0xc
c000be7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be81:	83 ec 08             	sub    esp,0x8
c000be84:	6a 00                	push   0x0
c000be86:	50                   	push   eax
c000be87:	e8 32 d3 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000be8c:	83 c4 10             	add    esp,0x10
c000be8f:	ba 60 17 02 c0       	mov    edx,0xc0021760
c000be94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be98:	89 10                	mov    DWORD PTR [eax],edx
c000be9a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000be9f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bea3:	0f 95 c0             	setne  al
c000bea6:	0f b6 c0             	movzx  eax,al
c000bea9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bead:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000beb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beb7:	83 c2 0d             	add    edx,0xd
c000beba:	50                   	push   eax
c000bebb:	51                   	push   ecx
c000bebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bec0:	52                   	push   edx
c000bec1:	e8 ec f7 ff ff       	call   c000b6b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bec6:	83 c4 10             	add    esp,0x10
c000bec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000becd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bed0:	83 e8 41             	sub    eax,0x41
c000bed3:	88 c2                	mov    dl,al
c000bed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bed9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bee3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beeb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bef1:	0f b6 c0             	movzx  eax,al
c000bef4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000befb:	85 c0                	test   eax,eax
c000befd:	74 3e                	je     c000bf3d <Directory::Directory(char const*, Process*)+0xc3>
c000beff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf03:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bf09:	0f b6 c0             	movzx  eax,al
c000bf0c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bf13:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bf19:	85 c0                	test   eax,eax
c000bf1b:	75 20                	jne    c000bf3d <Directory::Directory(char const*, Process*)+0xc3>
c000bf1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf21:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bf27:	0f b6 c0             	movzx  eax,al
c000bf2a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bf31:	83 ec 0c             	sub    esp,0xc
c000bf34:	50                   	push   eax
c000bf35:	e8 f8 1b 00 00       	call   c000db32 <LogicalDisk::mount()>
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	90                   	nop
c000bf3e:	83 c4 0c             	add    esp,0xc
c000bf41:	c3                   	ret    

c000bf42 <Directory::open()>:
c000bf42:	53                   	push   ebx
c000bf43:	b8 0b 00 00 00       	mov    eax,0xb
c000bf48:	83 ec 08             	sub    esp,0x8
c000bf4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf4f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bf56:	83 fa 19             	cmp    edx,0x19
c000bf59:	77 3d                	ja     c000bf98 <Directory::open()+0x56>
c000bf5b:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bf62:	85 d2                	test   edx,edx
c000bf64:	74 32                	je     c000bf98 <Directory::open()+0x56>
c000bf66:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bf6c:	85 d2                	test   edx,edx
c000bf6e:	74 28                	je     c000bf98 <Directory::open()+0x56>
c000bf70:	b8 06 00 00 00       	mov    eax,0x6
c000bf75:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bf79:	75 1d                	jne    c000bf98 <Directory::open()+0x56>
c000bf7b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bf81:	50                   	push   eax
c000bf82:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf84:	51                   	push   ecx
c000bf85:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bf88:	51                   	push   ecx
c000bf89:	52                   	push   edx
c000bf8a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bf8d:	83 c4 10             	add    esp,0x10
c000bf90:	85 c0                	test   eax,eax
c000bf92:	75 04                	jne    c000bf98 <Directory::open()+0x56>
c000bf94:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bf98:	83 c4 08             	add    esp,0x8
c000bf9b:	5b                   	pop    ebx
c000bf9c:	c3                   	ret    
c000bf9d:	90                   	nop

c000bf9e <Directory::close()>:
c000bf9e:	53                   	push   ebx
c000bf9f:	b8 0b 00 00 00       	mov    eax,0xb
c000bfa4:	83 ec 08             	sub    esp,0x8
c000bfa7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfab:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfb2:	83 f9 19             	cmp    ecx,0x19
c000bfb5:	77 41                	ja     c000bff8 <Directory::close()+0x5a>
c000bfb7:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bfbe:	85 db                	test   ebx,ebx
c000bfc0:	74 36                	je     c000bff8 <Directory::close()+0x5a>
c000bfc2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bfc9:	74 2d                	je     c000bff8 <Directory::close()+0x5a>
c000bfcb:	b8 05 00 00 00       	mov    eax,0x5
c000bfd0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bfd4:	74 22                	je     c000bff8 <Directory::close()+0x5a>
c000bfd6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bfda:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bfe1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bfe7:	53                   	push   ebx
c000bfe8:	53                   	push   ebx
c000bfe9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bfeb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bff1:	50                   	push   eax
c000bff2:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bff5:	83 c4 10             	add    esp,0x10
c000bff8:	83 c4 08             	add    esp,0x8
c000bffb:	5b                   	pop    ebx
c000bffc:	c3                   	ret    
c000bffd:	90                   	nop

c000bffe <Directory::unlink()>:
c000bffe:	83 ec 0c             	sub    esp,0xc
c000c001:	b8 0b 00 00 00       	mov    eax,0xb
c000c006:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c00a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c011:	83 f9 19             	cmp    ecx,0x19
c000c014:	77 2f                	ja     c000c045 <Directory::unlink()+0x47>
c000c016:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c01d:	85 c9                	test   ecx,ecx
c000c01f:	74 24                	je     c000c045 <Directory::unlink()+0x47>
c000c021:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c027:	85 c9                	test   ecx,ecx
c000c029:	74 1a                	je     c000c045 <Directory::unlink()+0x47>
c000c02b:	b8 06 00 00 00       	mov    eax,0x6
c000c030:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c034:	75 0f                	jne    c000c045 <Directory::unlink()+0x47>
c000c036:	83 c2 0d             	add    edx,0xd
c000c039:	50                   	push   eax
c000c03a:	50                   	push   eax
c000c03b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c03d:	52                   	push   edx
c000c03e:	51                   	push   ecx
c000c03f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c042:	83 c4 10             	add    esp,0x10
c000c045:	83 c4 0c             	add    esp,0xc
c000c048:	c3                   	ret    
c000c049:	90                   	nop

c000c04a <Directory::rename(char const*)>:
c000c04a:	83 ec 0c             	sub    esp,0xc
c000c04d:	b8 0b 00 00 00       	mov    eax,0xb
c000c052:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c056:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c05d:	83 f9 19             	cmp    ecx,0x19
c000c060:	77 32                	ja     c000c094 <Directory::rename(char const*)+0x4a>
c000c062:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c069:	85 c9                	test   ecx,ecx
c000c06b:	74 27                	je     c000c094 <Directory::rename(char const*)+0x4a>
c000c06d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c073:	85 c9                	test   ecx,ecx
c000c075:	74 1d                	je     c000c094 <Directory::rename(char const*)+0x4a>
c000c077:	b8 06 00 00 00       	mov    eax,0x6
c000c07c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c080:	75 12                	jne    c000c094 <Directory::rename(char const*)+0x4a>
c000c082:	83 c2 0d             	add    edx,0xd
c000c085:	50                   	push   eax
c000c086:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c088:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c08c:	52                   	push   edx
c000c08d:	51                   	push   ecx
c000c08e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c091:	83 c4 10             	add    esp,0x10
c000c094:	83 c4 0c             	add    esp,0xc
c000c097:	c3                   	ret    

c000c098 <Directory::exists()>:
c000c098:	83 ec 0c             	sub    esp,0xc
c000c09b:	31 c0                	xor    eax,eax
c000c09d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0a1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c0a8:	83 f9 19             	cmp    ecx,0x19
c000c0ab:	77 24                	ja     c000c0d1 <Directory::exists()+0x39>
c000c0ad:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c0b4:	85 c9                	test   ecx,ecx
c000c0b6:	74 19                	je     c000c0d1 <Directory::exists()+0x39>
c000c0b8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c0be:	85 c9                	test   ecx,ecx
c000c0c0:	74 0f                	je     c000c0d1 <Directory::exists()+0x39>
c000c0c2:	83 c2 0d             	add    edx,0xd
c000c0c5:	50                   	push   eax
c000c0c6:	50                   	push   eax
c000c0c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c0c9:	52                   	push   edx
c000c0ca:	51                   	push   ecx
c000c0cb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c0ce:	83 c4 10             	add    esp,0x10
c000c0d1:	83 c4 0c             	add    esp,0xc
c000c0d4:	c3                   	ret    
c000c0d5:	90                   	nop

c000c0d6 <Directory::read(dirent*)>:
c000c0d6:	83 ec 1c             	sub    esp,0x1c
c000c0d9:	b8 0b 00 00 00       	mov    eax,0xb
c000c0de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c0e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c0e9:	83 f9 19             	cmp    ecx,0x19
c000c0ec:	77 30                	ja     c000c11e <Directory::read(dirent*)+0x48>
c000c0ee:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c0f5:	85 c9                	test   ecx,ecx
c000c0f7:	74 25                	je     c000c11e <Directory::read(dirent*)+0x48>
c000c0f9:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c100:	74 1c                	je     c000c11e <Directory::read(dirent*)+0x48>
c000c102:	83 ec 0c             	sub    esp,0xc
c000c105:	8b 02                	mov    eax,DWORD PTR [edx]
c000c107:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c10b:	51                   	push   ecx
c000c10c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c110:	6a 00                	push   0x0
c000c112:	68 10 01 00 00       	push   0x110
c000c117:	52                   	push   edx
c000c118:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c11b:	83 c4 20             	add    esp,0x20
c000c11e:	83 c4 1c             	add    esp,0x1c
c000c121:	c3                   	ret    

c000c122 <Directory::create()>:
c000c122:	83 ec 0c             	sub    esp,0xc
c000c125:	b8 0b 00 00 00       	mov    eax,0xb
c000c12a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c12e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c135:	83 f9 19             	cmp    ecx,0x19
c000c138:	77 2f                	ja     c000c169 <Directory::create()+0x47>
c000c13a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c141:	85 c9                	test   ecx,ecx
c000c143:	74 24                	je     c000c169 <Directory::create()+0x47>
c000c145:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c14b:	85 c9                	test   ecx,ecx
c000c14d:	74 1a                	je     c000c169 <Directory::create()+0x47>
c000c14f:	b8 06 00 00 00       	mov    eax,0x6
c000c154:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c158:	75 0f                	jne    c000c169 <Directory::create()+0x47>
c000c15a:	83 c2 0d             	add    edx,0xd
c000c15d:	50                   	push   eax
c000c15e:	50                   	push   eax
c000c15f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c161:	52                   	push   edx
c000c162:	51                   	push   ecx
c000c163:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c166:	83 c4 10             	add    esp,0x10
c000c169:	83 c4 0c             	add    esp,0xc
c000c16c:	c3                   	ret    
c000c16d:	90                   	nop

c000c16e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c16e:	b8 0a 00 00 00       	mov    eax,0xa
c000c173:	c3                   	ret    

c000c174 <Bus::Bus(char const*)>:
c000c174:	83 ec 0c             	sub    esp,0xc
c000c177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c17b:	83 ec 08             	sub    esp,0x8
c000c17e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c182:	50                   	push   eax
c000c183:	e8 22 08 00 00       	call   c000c9aa <Device::Device(char const*)>
c000c188:	83 c4 10             	add    esp,0x10
c000c18b:	ba 7c 17 02 c0       	mov    edx,0xc002177c
c000c190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c194:	89 10                	mov    DWORD PTR [eax],edx
c000c196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c19a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c1a4:	90                   	nop
c000c1a5:	83 c4 0c             	add    esp,0xc
c000c1a8:	c3                   	ret    
c000c1a9:	90                   	nop
c000c1aa:	66 90                	xchg   ax,ax

c000c1ac <Bus::~Bus()>:
c000c1ac:	83 ec 0c             	sub    esp,0xc
c000c1af:	ba 7c 17 02 c0       	mov    edx,0xc002177c
c000c1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b8:	89 10                	mov    DWORD PTR [eax],edx
c000c1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1be:	83 ec 0c             	sub    esp,0xc
c000c1c1:	50                   	push   eax
c000c1c2:	e8 4d 05 00 00       	call   c000c714 <Device::~Device()>
c000c1c7:	83 c4 10             	add    esp,0x10
c000c1ca:	90                   	nop
c000c1cb:	83 c4 0c             	add    esp,0xc
c000c1ce:	c3                   	ret    
c000c1cf:	90                   	nop

c000c1d0 <Bus::~Bus()>:
c000c1d0:	83 ec 0c             	sub    esp,0xc
c000c1d3:	83 ec 0c             	sub    esp,0xc
c000c1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1da:	e8 cd ff ff ff       	call   c000c1ac <Bus::~Bus()>
c000c1df:	83 c4 10             	add    esp,0x10
c000c1e2:	83 ec 08             	sub    esp,0x8
c000c1e5:	68 58 01 00 00       	push   0x158
c000c1ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1ee:	e8 25 e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c1f3:	83 c4 10             	add    esp,0x10
c000c1f6:	83 c4 0c             	add    esp,0xc
c000c1f9:	c3                   	ret    

c000c1fa <beepThread(void*)>:
c000c1fa:	83 ec 0c             	sub    esp,0xc
c000c1fd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c202:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c206:	48                   	dec    eax
c000c207:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c20c:	75 01                	jne    c000c20f <beepThread(void*)+0x15>
c000c20e:	fb                   	sti    
c000c20f:	83 ec 0c             	sub    esp,0xc
c000c212:	6b c2 0a             	imul   eax,edx,0xa
c000c215:	50                   	push   eax
c000c216:	e8 e5 9f 00 00       	call   c0016200 <milliTenthSleep(unsigned int)>
c000c21b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c222:	e8 34 bf 00 00       	call   c001815b <HalMakeBeep(int)>
c000c227:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c22f:	83 c4 1c             	add    esp,0x1c
c000c232:	e9 ad 9e 00 00       	jmp    c00160e4 <blockTask(TaskState)>

c000c237 <Krnl::beep(int, int, bool)>:
c000c237:	56                   	push   esi
c000c238:	53                   	push   ebx
c000c239:	83 ec 10             	sub    esp,0x10
c000c23c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c248:	e8 0e bf 00 00       	call   c001815b <HalMakeBeep(int)>
c000c24d:	83 c4 10             	add    esp,0x10
c000c250:	89 f0                	mov    eax,esi
c000c252:	84 c0                	test   al,al
c000c254:	74 1e                	je     c000c274 <Krnl::beep(int, int, bool)+0x3d>
c000c256:	83 ec 0c             	sub    esp,0xc
c000c259:	6b db 0a             	imul   ebx,ebx,0xa
c000c25c:	53                   	push   ebx
c000c25d:	e8 9e 9f 00 00       	call   c0016200 <milliTenthSleep(unsigned int)>
c000c262:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c26a:	83 c4 14             	add    esp,0x14
c000c26d:	5b                   	pop    ebx
c000c26e:	5e                   	pop    esi
c000c26f:	e9 e7 be 00 00       	jmp    c001815b <HalMakeBeep(int)>
c000c274:	68 e6 00 00 00       	push   0xe6
c000c279:	53                   	push   ebx
c000c27a:	68 fa c1 00 c0       	push   0xc000c1fa
c000c27f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c285:	e8 f6 99 00 00       	call   c0015c80 <Process::createThread(void (*)(void*), void*, int)>
c000c28a:	83 c4 14             	add    esp,0x14
c000c28d:	5b                   	pop    ebx
c000c28e:	5e                   	pop    esi
c000c28f:	c3                   	ret    

c000c290 <User::loadClockSettings(int)>:
c000c290:	53                   	push   ebx
c000c291:	83 ec 14             	sub    esp,0x14
c000c294:	68 14 01 00 00       	push   0x114
c000c299:	e8 18 b8 ff ff       	call   c0007ab6 <malloc>
c000c29e:	83 c4 0c             	add    esp,0xc
c000c2a1:	89 c3                	mov    ebx,eax
c000c2a3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c2a9:	68 a0 17 02 c0       	push   0xc00217a0
c000c2ae:	50                   	push   eax
c000c2af:	e8 e6 f6 ff ff       	call   c000b99a <File::File(char const*, Process*)>
c000c2b4:	58                   	pop    eax
c000c2b5:	5a                   	pop    edx
c000c2b6:	6a 01                	push   0x1
c000c2b8:	53                   	push   ebx
c000c2b9:	e8 fa f6 ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c000c2be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c2c1:	e8 50 f7 ff ff       	call   c000ba16 <File::close()>
c000c2c6:	83 c4 10             	add    esp,0x10
c000c2c9:	85 db                	test   ebx,ebx
c000c2cb:	74 0f                	je     c000c2dc <User::loadClockSettings(int)+0x4c>
c000c2cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c2cf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c2d3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c2d6:	83 c4 08             	add    esp,0x8
c000c2d9:	5b                   	pop    ebx
c000c2da:	ff e0                	jmp    eax
c000c2dc:	83 c4 08             	add    esp,0x8
c000c2df:	5b                   	pop    ebx
c000c2e0:	c3                   	ret    
c000c2e1:	90                   	nop

c000c2e2 <Clock::Clock(char const*)>:
c000c2e2:	83 ec 0c             	sub    esp,0xc
c000c2e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e9:	83 ec 08             	sub    esp,0x8
c000c2ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2f0:	50                   	push   eax
c000c2f1:	e8 b4 06 00 00       	call   c000c9aa <Device::Device(char const*)>
c000c2f6:	83 c4 10             	add    esp,0x10
c000c2f9:	ba c8 17 02 c0       	mov    edx,0xc00217c8
c000c2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c302:	89 10                	mov    DWORD PTR [eax],edx
c000c304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c308:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c312:	90                   	nop
c000c313:	83 c4 0c             	add    esp,0xc
c000c316:	c3                   	ret    
c000c317:	90                   	nop

c000c318 <Clock::~Clock()>:
c000c318:	83 ec 0c             	sub    esp,0xc
c000c31b:	ba c8 17 02 c0       	mov    edx,0xc00217c8
c000c320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c324:	89 10                	mov    DWORD PTR [eax],edx
c000c326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c32a:	83 ec 0c             	sub    esp,0xc
c000c32d:	50                   	push   eax
c000c32e:	e8 e1 03 00 00       	call   c000c714 <Device::~Device()>
c000c333:	83 c4 10             	add    esp,0x10
c000c336:	90                   	nop
c000c337:	83 c4 0c             	add    esp,0xc
c000c33a:	c3                   	ret    
c000c33b:	90                   	nop

c000c33c <Clock::~Clock()>:
c000c33c:	83 ec 0c             	sub    esp,0xc
c000c33f:	83 ec 0c             	sub    esp,0xc
c000c342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c346:	e8 cd ff ff ff       	call   c000c318 <Clock::~Clock()>
c000c34b:	83 c4 10             	add    esp,0x10
c000c34e:	83 ec 08             	sub    esp,0x8
c000c351:	68 58 01 00 00       	push   0x158
c000c356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c35a:	e8 b9 e4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	83 c4 0c             	add    esp,0xc
c000c365:	c3                   	ret    

c000c366 <Clock::timeInSecondsLocal()>:
c000c366:	53                   	push   ebx
c000c367:	83 ec 14             	sub    esp,0x14
c000c36a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c36e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c370:	50                   	push   eax
c000c371:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c374:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c37b:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c381:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c387:	89 cb                	mov    ebx,ecx
c000c389:	c1 fb 1f             	sar    ebx,0x1f
c000c38c:	01 c8                	add    eax,ecx
c000c38e:	11 da                	adc    edx,ebx
c000c390:	83 c4 10             	add    esp,0x10
c000c393:	31 c9                	xor    ecx,ecx
c000c395:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c39c:	74 05                	je     c000c3a3 <Clock::timeInSecondsLocal()+0x3d>
c000c39e:	b9 08 07 00 00       	mov    ecx,0x708
c000c3a3:	31 db                	xor    ebx,ebx
c000c3a5:	01 c8                	add    eax,ecx
c000c3a7:	11 da                	adc    edx,ebx
c000c3a9:	83 c4 08             	add    esp,0x8
c000c3ac:	5b                   	pop    ebx
c000c3ad:	c3                   	ret    

c000c3ae <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c3ae:	57                   	push   edi
c000c3af:	56                   	push   esi
c000c3b0:	53                   	push   ebx
c000c3b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c3b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c3b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c3bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c3bf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c3c2:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c3c9:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c3cf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c3d5:	99                   	cdq    
c000c3d6:	29 c6                	sub    esi,eax
c000c3d8:	19 d7                	sbb    edi,edx
c000c3da:	89 f0                	mov    eax,esi
c000c3dc:	89 fa                	mov    edx,edi
c000c3de:	31 f6                	xor    esi,esi
c000c3e0:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c3e7:	74 05                	je     c000c3ee <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c3e9:	be 08 07 00 00       	mov    esi,0x708
c000c3ee:	31 ff                	xor    edi,edi
c000c3f0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c3f4:	29 f0                	sub    eax,esi
c000c3f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3fa:	19 fa                	sbb    edx,edi
c000c3fc:	89 d8                	mov    eax,ebx
c000c3fe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c402:	5b                   	pop    ebx
c000c403:	5e                   	pop    esi
c000c404:	5f                   	pop    edi
c000c405:	ff e0                	jmp    eax

c000c407 <datetimeToSeconds(datetime_t)>:
c000c407:	55                   	push   ebp
c000c408:	57                   	push   edi
c000c409:	56                   	push   esi
c000c40a:	53                   	push   ebx
c000c40b:	83 ec 0c             	sub    esp,0xc
c000c40e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c412:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c416:	89 d6                	mov    esi,edx
c000c418:	0f b6 c7             	movzx  eax,bh
c000c41b:	c1 ee 10             	shr    esi,0x10
c000c41e:	6b e8 3c             	imul   ebp,eax,0x3c
c000c421:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c427:	0f b6 ce             	movzx  ecx,dh
c000c42a:	89 df                	mov    edi,ebx
c000c42c:	49                   	dec    ecx
c000c42d:	c1 ef 10             	shr    edi,0x10
c000c430:	0f b6 db             	movzx  ebx,bl
c000c433:	89 f8                	mov    eax,edi
c000c435:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c43b:	0f b6 f8             	movzx  edi,al
c000c43e:	0f b6 d2             	movzx  edx,dl
c000c441:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c445:	01 d8                	add    eax,ebx
c000c447:	0f b7 de             	movzx  ebx,si
c000c44a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c44d:	c1 f8 1f             	sar    eax,0x1f
c000c450:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c454:	0f b6 c1             	movzx  eax,cl
c000c457:	8b 0c 85 00 18 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde800]
c000c45e:	83 f8 01             	cmp    eax,0x1
c000c461:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c465:	76 27                	jbe    c000c48e <datetimeToSeconds(datetime_t)+0x87>
c000c467:	83 e6 03             	and    esi,0x3
c000c46a:	75 22                	jne    c000c48e <datetimeToSeconds(datetime_t)+0x87>
c000c46c:	31 d2                	xor    edx,edx
c000c46e:	be 64 00 00 00       	mov    esi,0x64
c000c473:	89 d8                	mov    eax,ebx
c000c475:	f7 f6                	div    esi
c000c477:	85 d2                	test   edx,edx
c000c479:	75 12                	jne    c000c48d <datetimeToSeconds(datetime_t)+0x86>
c000c47b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c481:	be 90 01 00 00       	mov    esi,0x190
c000c486:	99                   	cdq    
c000c487:	f7 fe                	idiv   esi
c000c489:	85 d2                	test   edx,edx
c000c48b:	75 01                	jne    c000c48e <datetimeToSeconds(datetime_t)+0x87>
c000c48d:	41                   	inc    ecx
c000c48e:	83 fb 46             	cmp    ebx,0x46
c000c491:	76 48                	jbe    c000c4db <datetimeToSeconds(datetime_t)+0xd4>
c000c493:	be 46 00 00 00       	mov    esi,0x46
c000c498:	bf 64 00 00 00       	mov    edi,0x64
c000c49d:	bd 90 01 00 00       	mov    ebp,0x190
c000c4a2:	b8 6d 01 00 00       	mov    eax,0x16d
c000c4a7:	f7 c6 03 00 00 00    	test   esi,0x3
c000c4ad:	75 23                	jne    c000c4d2 <datetimeToSeconds(datetime_t)+0xcb>
c000c4af:	89 f0                	mov    eax,esi
c000c4b1:	99                   	cdq    
c000c4b2:	f7 ff                	idiv   edi
c000c4b4:	b8 6e 01 00 00       	mov    eax,0x16e
c000c4b9:	85 d2                	test   edx,edx
c000c4bb:	75 15                	jne    c000c4d2 <datetimeToSeconds(datetime_t)+0xcb>
c000c4bd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c4c3:	99                   	cdq    
c000c4c4:	f7 fd                	idiv   ebp
c000c4c6:	83 fa 01             	cmp    edx,0x1
c000c4c9:	19 c0                	sbb    eax,eax
c000c4cb:	f7 d0                	not    eax
c000c4cd:	05 6e 01 00 00       	add    eax,0x16e
c000c4d2:	01 c1                	add    ecx,eax
c000c4d4:	46                   	inc    esi
c000c4d5:	39 de                	cmp    esi,ebx
c000c4d7:	7c c9                	jl     c000c4a2 <datetimeToSeconds(datetime_t)+0x9b>
c000c4d9:	eb 34                	jmp    c000c50f <datetimeToSeconds(datetime_t)+0x108>
c000c4db:	74 32                	je     c000c50f <datetimeToSeconds(datetime_t)+0x108>
c000c4dd:	b8 45 00 00 00       	mov    eax,0x45
c000c4e2:	89 c2                	mov    edx,eax
c000c4e4:	83 e2 03             	and    edx,0x3
c000c4e7:	39 d8                	cmp    eax,ebx
c000c4e9:	7e 0f                	jle    c000c4fa <datetimeToSeconds(datetime_t)+0xf3>
c000c4eb:	83 fa 01             	cmp    edx,0x1
c000c4ee:	19 d2                	sbb    edx,edx
c000c4f0:	48                   	dec    eax
c000c4f1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c4f8:	eb e8                	jmp    c000c4e2 <datetimeToSeconds(datetime_t)+0xdb>
c000c4fa:	b8 6d 01 00 00       	mov    eax,0x16d
c000c4ff:	85 d2                	test   edx,edx
c000c501:	75 0a                	jne    c000c50d <datetimeToSeconds(datetime_t)+0x106>
c000c503:	83 fb 01             	cmp    ebx,0x1
c000c506:	19 c0                	sbb    eax,eax
c000c508:	05 6e 01 00 00       	add    eax,0x16e
c000c50d:	29 c1                	sub    ecx,eax
c000c50f:	b8 80 51 01 00       	mov    eax,0x15180
c000c514:	f7 e9                	imul   ecx
c000c516:	03 04 24             	add    eax,DWORD PTR [esp]
c000c519:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c51d:	83 c4 0c             	add    esp,0xc
c000c520:	5b                   	pop    ebx
c000c521:	5e                   	pop    esi
c000c522:	5f                   	pop    edi
c000c523:	5d                   	pop    ebp
c000c524:	c3                   	ret    
c000c525:	90                   	nop

c000c526 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c526:	57                   	push   edi
c000c527:	56                   	push   esi
c000c528:	53                   	push   ebx
c000c529:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c52d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c52f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c532:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c536:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c53a:	e8 c8 fe ff ff       	call   c000c407 <datetimeToSeconds(datetime_t)>
c000c53f:	59                   	pop    ecx
c000c540:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c547:	5b                   	pop    ebx
c000c548:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c54e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c554:	89 cb                	mov    ebx,ecx
c000c556:	c1 fb 1f             	sar    ebx,0x1f
c000c559:	29 c8                	sub    eax,ecx
c000c55b:	19 da                	sbb    edx,ebx
c000c55d:	31 c9                	xor    ecx,ecx
c000c55f:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c566:	74 05                	je     c000c56d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c568:	b9 08 07 00 00       	mov    ecx,0x708
c000c56d:	31 db                	xor    ebx,ebx
c000c56f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c573:	29 c8                	sub    eax,ecx
c000c575:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c579:	19 da                	sbb    edx,ebx
c000c57b:	89 f8                	mov    eax,edi
c000c57d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c581:	5b                   	pop    ebx
c000c582:	5e                   	pop    esi
c000c583:	5f                   	pop    edi
c000c584:	ff e0                	jmp    eax

c000c586 <secondsToDatetime(unsigned long long)>:
c000c586:	55                   	push   ebp
c000c587:	57                   	push   edi
c000c588:	56                   	push   esi
c000c589:	53                   	push   ebx
c000c58a:	83 ec 1c             	sub    esp,0x1c
c000c58d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c591:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c595:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c599:	6a 00                	push   0x0
c000c59b:	68 80 51 01 00       	push   0x15180
c000c5a0:	55                   	push   ebp
c000c5a1:	57                   	push   edi
c000c5a2:	e8 99 2f 01 00       	call   c001f540 <__udivdi3>
c000c5a7:	83 c4 10             	add    esp,0x10
c000c5aa:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c5b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c5b4:	6a 00                	push   0x0
c000c5b6:	68 80 51 01 00       	push   0x15180
c000c5bb:	55                   	push   ebp
c000c5bc:	57                   	push   edi
c000c5bd:	bf 10 0e 00 00       	mov    edi,0xe10
c000c5c2:	e8 79 30 01 00       	call   c001f640 <__umoddi3>
c000c5c7:	83 c4 10             	add    esp,0x10
c000c5ca:	99                   	cdq    
c000c5cb:	f7 ff                	idiv   edi
c000c5cd:	bf 3c 00 00 00       	mov    edi,0x3c
c000c5d2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c5d5:	89 d0                	mov    eax,edx
c000c5d7:	99                   	cdq    
c000c5d8:	f7 ff                	idiv   edi
c000c5da:	85 db                	test   ebx,ebx
c000c5dc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c5df:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c5e2:	79 11                	jns    c000c5f5 <secondsToDatetime(unsigned long long)+0x6f>
c000c5e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c5e8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c5ee:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c5f3:	eb 07                	jmp    c000c5fc <secondsToDatetime(unsigned long long)+0x76>
c000c5f5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c5fa:	89 d8                	mov    eax,ebx
c000c5fc:	bf b4 05 00 00       	mov    edi,0x5b4
c000c601:	99                   	cdq    
c000c602:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c607:	f7 f9                	idiv   ecx
c000c609:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c60e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c612:	31 d2                	xor    edx,edx
c000c614:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c61c:	01 c3                	add    ebx,eax
c000c61e:	89 d8                	mov    eax,ebx
c000c620:	f7 f1                	div    ecx
c000c622:	31 d2                	xor    edx,edx
c000c624:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c627:	89 d8                	mov    eax,ebx
c000c629:	f7 f7                	div    edi
c000c62b:	31 d2                	xor    edx,edx
c000c62d:	29 c1                	sub    ecx,eax
c000c62f:	89 d8                	mov    eax,ebx
c000c631:	f7 f5                	div    ebp
c000c633:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c638:	29 c1                	sub    ecx,eax
c000c63a:	31 d2                	xor    edx,edx
c000c63c:	89 c8                	mov    eax,ecx
c000c63e:	f7 f5                	div    ebp
c000c640:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c645:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c649:	31 d2                	xor    edx,edx
c000c64b:	89 c8                	mov    eax,ecx
c000c64d:	f7 f5                	div    ebp
c000c64f:	31 d2                	xor    edx,edx
c000c651:	01 c3                	add    ebx,eax
c000c653:	89 c8                	mov    eax,ecx
c000c655:	f7 f7                	div    edi
c000c657:	bf 99 00 00 00       	mov    edi,0x99
c000c65c:	29 c3                	sub    ebx,eax
c000c65e:	31 d2                	xor    edx,edx
c000c660:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c668:	29 c3                	sub    ebx,eax
c000c66a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c66d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c670:	bb 05 00 00 00       	mov    ebx,0x5
c000c675:	83 c1 02             	add    ecx,0x2
c000c678:	89 c8                	mov    eax,ecx
c000c67a:	f7 f7                	div    edi
c000c67c:	31 d2                	xor    edx,edx
c000c67e:	89 c7                	mov    edi,eax
c000c680:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c686:	83 c0 02             	add    eax,0x2
c000c689:	f7 f3                	div    ebx
c000c68b:	89 eb                	mov    ebx,ebp
c000c68d:	29 c3                	sub    ebx,eax
c000c68f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c695:	88 1e                	mov    BYTE PTR [esi],bl
c000c697:	19 c0                	sbb    eax,eax
c000c699:	31 d2                	xor    edx,edx
c000c69b:	83 e0 0c             	and    eax,0xc
c000c69e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c6a2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c6aa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c6ae:	83 f9 01             	cmp    ecx,0x1
c000c6b1:	0f 96 c2             	setbe  dl
c000c6b4:	41                   	inc    ecx
c000c6b5:	01 d0                	add    eax,edx
c000c6b7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c6ba:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c6be:	83 c4 1c             	add    esp,0x1c
c000c6c1:	89 f0                	mov    eax,esi
c000c6c3:	5b                   	pop    ebx
c000c6c4:	5e                   	pop    esi
c000c6c5:	5f                   	pop    edi
c000c6c6:	5d                   	pop    ebp
c000c6c7:	c2 04 00             	ret    0x4

c000c6ca <Clock::timeInDatetimeLocal()>:
c000c6ca:	53                   	push   ebx
c000c6cb:	83 ec 14             	sub    esp,0x14
c000c6ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c6d6:	e8 8b fc ff ff       	call   c000c366 <Clock::timeInSecondsLocal()>
c000c6db:	83 c4 0c             	add    esp,0xc
c000c6de:	52                   	push   edx
c000c6df:	50                   	push   eax
c000c6e0:	53                   	push   ebx
c000c6e1:	e8 a0 fe ff ff       	call   c000c586 <secondsToDatetime(unsigned long long)>
c000c6e6:	89 d8                	mov    eax,ebx
c000c6e8:	83 c4 14             	add    esp,0x14
c000c6eb:	5b                   	pop    ebx
c000c6ec:	c2 04 00             	ret    0x4
c000c6ef:	90                   	nop

c000c6f0 <Device::hibernate()>:
c000c6f0:	c3                   	ret    
c000c6f1:	90                   	nop

c000c6f2 <Device::wake()>:
c000c6f2:	c3                   	ret    
c000c6f3:	90                   	nop

c000c6f4 <Device::detect()>:
c000c6f4:	c3                   	ret    
c000c6f5:	90                   	nop

c000c6f6 <Device::disableLegacy()>:
c000c6f6:	c3                   	ret    
c000c6f7:	90                   	nop

c000c6f8 <Device::powerSaving(PowerSavingLevel)>:
c000c6f8:	c3                   	ret    
c000c6f9:	90                   	nop

c000c6fa <DriverlessDevice::close(int, int, void*)>:
c000c6fa:	31 c0                	xor    eax,eax
c000c6fc:	c3                   	ret    
c000c6fd:	90                   	nop

c000c6fe <DriverlessDevice::detect()>:
c000c6fe:	c3                   	ret    
c000c6ff:	90                   	nop

c000c700 <DriverlessDevice::open(int, int, void*)>:
c000c700:	83 ec 18             	sub    esp,0x18
c000c703:	68 30 18 02 c0       	push   0xc0021830
c000c708:	e8 5e 4d 00 00       	call   c001146b <KePanic(char const*)>
c000c70d:	83 c8 ff             	or     eax,0xffffffff
c000c710:	83 c4 1c             	add    esp,0x1c
c000c713:	c3                   	ret    

c000c714 <Device::~Device()>:
c000c714:	ba 90 18 02 c0       	mov    edx,0xc0021890
c000c719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c71d:	89 10                	mov    DWORD PTR [eax],edx
c000c71f:	90                   	nop
c000c720:	c3                   	ret    
c000c721:	90                   	nop

c000c722 <Device::~Device()>:
c000c722:	83 ec 0c             	sub    esp,0xc
c000c725:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c729:	e8 e6 ff ff ff       	call   c000c714 <Device::~Device()>
c000c72e:	83 c4 04             	add    esp,0x4
c000c731:	83 ec 08             	sub    esp,0x8
c000c734:	68 58 01 00 00       	push   0x158
c000c739:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c73d:	e8 d6 e0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	83 c4 0c             	add    esp,0xc
c000c748:	c3                   	ret    
c000c749:	90                   	nop

c000c74a <Device::findAndLoadDriver()>:
c000c74a:	c7 44 24 04 4e 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc002184e
c000c752:	e9 ee e1 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c757:	90                   	nop

c000c758 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c758:	57                   	push   edi
c000c759:	b9 09 00 00 00       	mov    ecx,0x9
c000c75e:	56                   	push   esi
c000c75f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c763:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c767:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c771:	81 c7 18 01 00 00    	add    edi,0x118
c000c777:	fc                   	cld    
c000c778:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c77a:	5e                   	pop    esi
c000c77b:	5f                   	pop    edi
c000c77c:	c3                   	ret    
c000c77d:	90                   	nop

c000c77e <Device::preOpenACPI(void*, char*, char*)>:
c000c77e:	57                   	push   edi
c000c77f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c784:	56                   	push   esi
c000c785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c789:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c78d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c797:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c79d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c7a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c7a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c7a9:	b9 0e 00 00 00       	mov    ecx,0xe
c000c7ae:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c7b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c7b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c7ba:	5e                   	pop    esi
c000c7bb:	5f                   	pop    edi
c000c7bc:	c3                   	ret    
c000c7bd:	90                   	nop

c000c7be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c7be:	53                   	push   ebx
c000c7bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c7c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c7c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c7cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c7cf:	0f b6 c0             	movzx  eax,al
c000c7d2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c7d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7da:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c7de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c7e2:	5b                   	pop    ebx
c000c7e3:	e9 a8 05 00 00       	jmp    c000cd90 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c7e8 <Device::getParent()>:
c000c7e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7ec:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c7f2:	c3                   	ret    
c000c7f3:	90                   	nop

c000c7f4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c7f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c7f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c7fc:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c801:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c805:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c809:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c80d:	e9 e6 06 00 00       	jmp    c000cef8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c812 <Device::addChild(Device*)>:
c000c812:	53                   	push   ebx
c000c813:	83 ec 08             	sub    esp,0x8
c000c816:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c81a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c81e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c824:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c82a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c82c:	85 d2                	test   edx,edx
c000c82e:	74 04                	je     c000c834 <Device::addChild(Device*)+0x22>
c000c830:	89 d3                	mov    ebx,edx
c000c832:	eb f6                	jmp    c000c82a <Device::addChild(Device*)+0x18>
c000c834:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c837:	83 ec 0c             	sub    esp,0xc
c000c83a:	6a 08                	push   0x8
c000c83c:	e8 75 b2 ff ff       	call   c0007ab6 <malloc>
c000c841:	89 03                	mov    DWORD PTR [ebx],eax
c000c843:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c849:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c850:	83 c4 18             	add    esp,0x18
c000c853:	5b                   	pop    ebx
c000c854:	c3                   	ret    
c000c855:	90                   	nop

c000c856 <Device::removeAllChildren()>:
c000c856:	56                   	push   esi
c000c857:	53                   	push   ebx
c000c858:	52                   	push   edx
c000c859:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c85d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c863:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c866:	74 17                	je     c000c87f <Device::removeAllChildren()+0x29>
c000c868:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c86b:	85 c0                	test   eax,eax
c000c86d:	74 0c                	je     c000c87b <Device::removeAllChildren()+0x25>
c000c86f:	83 ec 0c             	sub    esp,0xc
c000c872:	8b 10                	mov    edx,DWORD PTR [eax]
c000c874:	50                   	push   eax
c000c875:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c878:	83 c4 10             	add    esp,0x10
c000c87b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c87d:	eb e4                	jmp    c000c863 <Device::removeAllChildren()+0xd>
c000c87f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c885:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c88b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c891:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c898:	58                   	pop    eax
c000c899:	5b                   	pop    ebx
c000c89a:	5e                   	pop    esi
c000c89b:	c3                   	ret    

c000c89c <Device::hibernateAll()>:
c000c89c:	53                   	push   ebx
c000c89d:	83 ec 14             	sub    esp,0x14
c000c8a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c8a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8a6:	53                   	push   ebx
c000c8a7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c8aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8b0:	83 c4 10             	add    esp,0x10
c000c8b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8b6:	74 0f                	je     c000c8c7 <Device::hibernateAll()+0x2b>
c000c8b8:	83 ec 0c             	sub    esp,0xc
c000c8bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8be:	e8 d9 ff ff ff       	call   c000c89c <Device::hibernateAll()>
c000c8c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8c5:	eb e9                	jmp    c000c8b0 <Device::hibernateAll()+0x14>
c000c8c7:	83 c4 08             	add    esp,0x8
c000c8ca:	5b                   	pop    ebx
c000c8cb:	c3                   	ret    

c000c8cc <Device::wakeAll()>:
c000c8cc:	53                   	push   ebx
c000c8cd:	83 ec 14             	sub    esp,0x14
c000c8d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c8d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8d6:	53                   	push   ebx
c000c8d7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c8da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8e0:	83 c4 10             	add    esp,0x10
c000c8e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8e6:	74 0f                	je     c000c8f7 <Device::wakeAll()+0x2b>
c000c8e8:	83 ec 0c             	sub    esp,0xc
c000c8eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8ee:	e8 d9 ff ff ff       	call   c000c8cc <Device::wakeAll()>
c000c8f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8f5:	eb e9                	jmp    c000c8e0 <Device::wakeAll()+0x14>
c000c8f7:	83 c4 08             	add    esp,0x8
c000c8fa:	5b                   	pop    ebx
c000c8fb:	c3                   	ret    

c000c8fc <Device::detectAll()>:
c000c8fc:	53                   	push   ebx
c000c8fd:	83 ec 14             	sub    esp,0x14
c000c900:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c904:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c906:	53                   	push   ebx
c000c907:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c90a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c910:	83 c4 10             	add    esp,0x10
c000c913:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c916:	74 0f                	je     c000c927 <Device::detectAll()+0x2b>
c000c918:	83 ec 0c             	sub    esp,0xc
c000c91b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c91e:	e8 d9 ff ff ff       	call   c000c8fc <Device::detectAll()>
c000c923:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c925:	eb e9                	jmp    c000c910 <Device::detectAll()+0x14>
c000c927:	83 c4 08             	add    esp,0x8
c000c92a:	5b                   	pop    ebx
c000c92b:	c3                   	ret    

c000c92c <Device::disableLegacyAll()>:
c000c92c:	c3                   	ret    
c000c92d:	90                   	nop

c000c92e <Device::loadDriversForAll()>:
c000c92e:	c3                   	ret    
c000c92f:	90                   	nop

c000c930 <Device::closeAll()>:
c000c930:	53                   	push   ebx
c000c931:	83 ec 08             	sub    esp,0x8
c000c934:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c938:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c93a:	6a 00                	push   0x0
c000c93c:	6a 00                	push   0x0
c000c93e:	6a 00                	push   0x0
c000c940:	53                   	push   ebx
c000c941:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c944:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c94a:	83 c4 10             	add    esp,0x10
c000c94d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c950:	74 0f                	je     c000c961 <Device::closeAll()+0x31>
c000c952:	83 ec 0c             	sub    esp,0xc
c000c955:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c958:	e8 d3 ff ff ff       	call   c000c930 <Device::closeAll()>
c000c95d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c95f:	eb e9                	jmp    c000c94a <Device::closeAll()+0x1a>
c000c961:	83 c4 08             	add    esp,0x8
c000c964:	5b                   	pop    ebx
c000c965:	c3                   	ret    

c000c966 <Device::powerSavingAll(PowerSavingLevel)>:
c000c966:	56                   	push   esi
c000c967:	53                   	push   ebx
c000c968:	83 ec 0c             	sub    esp,0xc
c000c96b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c96f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c973:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c975:	56                   	push   esi
c000c976:	53                   	push   ebx
c000c977:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c97a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c986:	74 0f                	je     c000c997 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c988:	52                   	push   edx
c000c989:	52                   	push   edx
c000c98a:	56                   	push   esi
c000c98b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c98e:	e8 d3 ff ff ff       	call   c000c966 <Device::powerSavingAll(PowerSavingLevel)>
c000c993:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c995:	eb e9                	jmp    c000c980 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c997:	58                   	pop    eax
c000c998:	5b                   	pop    ebx
c000c999:	5e                   	pop    esi
c000c99a:	c3                   	ret    
c000c99b:	90                   	nop

c000c99c <Device::setName(char const*)>:
c000c99c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c9a4:	e9 97 3c ff ff       	jmp    c0000640 <strcpy>
c000c9a9:	90                   	nop

c000c9aa <Device::Device(char const*)>:
c000c9aa:	83 ec 1c             	sub    esp,0x1c
c000c9ad:	ba 90 18 02 c0       	mov    edx,0xc0021890
c000c9b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b6:	89 10                	mov    DWORD PTR [eax],edx
c000c9b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9bc:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c9c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ca:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c9d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c9e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c9f0:	83 ec 08             	sub    esp,0x8
c000c9f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9fb:	e8 9c ff ff ff       	call   c000c99c <Device::setName(char const*)>
c000ca00:	83 c4 10             	add    esp,0x10
c000ca03:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000ca0b:	83 ec 0c             	sub    esp,0xc
c000ca0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca12:	e8 9f b0 ff ff       	call   c0007ab6 <malloc>
c000ca17:	83 c4 10             	add    esp,0x10
c000ca1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca20:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ca2b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000ca31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca35:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000ca3b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca45:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000ca4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca56:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000ca5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca61:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000ca68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca6c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000ca76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca7a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ca84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca88:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ca92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca96:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000caa0:	90                   	nop
c000caa1:	83 c4 1c             	add    esp,0x1c
c000caa4:	c3                   	ret    
c000caa5:	90                   	nop

c000caa6 <Device::getName()>:
c000caa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000caaa:	05 d0 00 00 00       	add    eax,0xd0
c000caaf:	c3                   	ret    

c000cab0 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cab0:	83 ec 0c             	sub    esp,0xc
c000cab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab7:	83 ec 08             	sub    esp,0x8
c000caba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabe:	50                   	push   eax
c000cabf:	e8 e6 fe ff ff       	call   c000c9aa <Device::Device(char const*)>
c000cac4:	83 c4 10             	add    esp,0x10
c000cac7:	ba bc 18 02 c0       	mov    edx,0xc00218bc
c000cacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad0:	89 10                	mov    DWORD PTR [eax],edx
c000cad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cae0:	90                   	nop
c000cae1:	83 c4 0c             	add    esp,0xc
c000cae4:	c3                   	ret    
c000cae5:	90                   	nop

c000cae6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cae6:	57                   	push   edi
c000cae7:	56                   	push   esi
c000cae8:	53                   	push   ebx
c000cae9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000caed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000caf1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000caf5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cafb:	75 0c                	jne    c000cb09 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cafd:	52                   	push   edx
c000cafe:	52                   	push   edx
c000caff:	53                   	push   ebx
c000cb00:	56                   	push   esi
c000cb01:	e8 ec 2e 01 00       	call   c001f9f2 <LinkedList<Device>::addElement(Device*)>
c000cb06:	83 c4 10             	add    esp,0x10
c000cb09:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb0f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb12:	74 12                	je     c000cb26 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cb14:	50                   	push   eax
c000cb15:	57                   	push   edi
c000cb16:	56                   	push   esi
c000cb17:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb1a:	e8 c7 ff ff ff       	call   c000cae6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cb1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb21:	83 c4 10             	add    esp,0x10
c000cb24:	eb e9                	jmp    c000cb0f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cb26:	5b                   	pop    ebx
c000cb27:	5e                   	pop    esi
c000cb28:	5f                   	pop    edi
c000cb29:	c3                   	ret    

c000cb2a <getDevicesOfType(DeviceType)>:
c000cb2a:	53                   	push   ebx
c000cb2b:	83 ec 14             	sub    esp,0x14
c000cb2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb32:	53                   	push   ebx
c000cb33:	e8 96 2f 01 00       	call   c001face <LinkedList<Device>::LinkedList()>
c000cb38:	83 c4 0c             	add    esp,0xc
c000cb3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb3f:	53                   	push   ebx
c000cb40:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cb46:	e8 9b ff ff ff       	call   c000cae6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cb4b:	89 d8                	mov    eax,ebx
c000cb4d:	83 c4 18             	add    esp,0x18
c000cb50:	5b                   	pop    ebx
c000cb51:	c2 04 00             	ret    0x4

c000cb54 <HardDiskController::HardDiskController(char const*)>:
c000cb54:	83 ec 0c             	sub    esp,0xc
c000cb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5b:	83 ec 08             	sub    esp,0x8
c000cb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb62:	50                   	push   eax
c000cb63:	e8 42 fe ff ff       	call   c000c9aa <Device::Device(char const*)>
c000cb68:	83 c4 10             	add    esp,0x10
c000cb6b:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c000cb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb74:	89 10                	mov    DWORD PTR [eax],edx
c000cb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb7a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cb84:	90                   	nop
c000cb85:	83 c4 0c             	add    esp,0xc
c000cb88:	c3                   	ret    
c000cb89:	90                   	nop
c000cb8a:	66 90                	xchg   ax,ax

c000cb8c <HardDiskController::~HardDiskController()>:
c000cb8c:	83 ec 0c             	sub    esp,0xc
c000cb8f:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c000cb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb98:	89 10                	mov    DWORD PTR [eax],edx
c000cb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb9e:	83 ec 0c             	sub    esp,0xc
c000cba1:	50                   	push   eax
c000cba2:	e8 6d fb ff ff       	call   c000c714 <Device::~Device()>
c000cba7:	83 c4 10             	add    esp,0x10
c000cbaa:	90                   	nop
c000cbab:	83 c4 0c             	add    esp,0xc
c000cbae:	c3                   	ret    
c000cbaf:	90                   	nop

c000cbb0 <HardDiskController::~HardDiskController()>:
c000cbb0:	83 ec 0c             	sub    esp,0xc
c000cbb3:	83 ec 0c             	sub    esp,0xc
c000cbb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbba:	e8 cd ff ff ff       	call   c000cb8c <HardDiskController::~HardDiskController()>
c000cbbf:	83 c4 10             	add    esp,0x10
c000cbc2:	83 ec 08             	sub    esp,0x8
c000cbc5:	68 58 01 00 00       	push   0x158
c000cbca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbce:	e8 45 dc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cbd3:	83 c4 10             	add    esp,0x10
c000cbd6:	83 c4 0c             	add    esp,0xc
c000cbd9:	c3                   	ret    

c000cbda <PhysicalDisk::eject()>:
c000cbda:	83 c8 ff             	or     eax,0xffffffff
c000cbdd:	c3                   	ret    

c000cbde <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cbde:	83 ec 0c             	sub    esp,0xc
c000cbe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbe5:	83 ec 08             	sub    esp,0x8
c000cbe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbec:	50                   	push   eax
c000cbed:	e8 b8 fd ff ff       	call   c000c9aa <Device::Device(char const*)>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	ba 14 19 02 c0       	mov    edx,0xc0021914
c000cbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbfe:	89 10                	mov    DWORD PTR [eax],edx
c000cc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc04:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc0f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cc16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc1a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cc2c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc36:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cc40:	90                   	nop
c000cc41:	83 c4 0c             	add    esp,0xc
c000cc44:	c3                   	ret    
c000cc45:	90                   	nop

c000cc46 <PhysicalDisk::startCache()>:
c000cc46:	56                   	push   esi
c000cc47:	53                   	push   ebx
c000cc48:	83 ec 10             	sub    esp,0x10
c000cc4b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cc4f:	6a 44                	push   0x44
c000cc51:	e8 60 ae ff ff       	call   c0007ab6 <malloc>
c000cc56:	89 c6                	mov    esi,eax
c000cc58:	58                   	pop    eax
c000cc59:	5a                   	pop    edx
c000cc5a:	53                   	push   ebx
c000cc5b:	56                   	push   esi
c000cc5c:	e8 7b 17 00 00       	call   c000e3dc <VCache::VCache(PhysicalDisk*)>
c000cc61:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cc67:	83 c4 14             	add    esp,0x14
c000cc6a:	5b                   	pop    ebx
c000cc6b:	5e                   	pop    esi
c000cc6c:	c3                   	ret    
c000cc6d:	90                   	nop

c000cc6e <PhysicalDisk::~PhysicalDisk()>:
c000cc6e:	83 ec 0c             	sub    esp,0xc
c000cc71:	ba 14 19 02 c0       	mov    edx,0xc0021914
c000cc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc7a:	89 10                	mov    DWORD PTR [eax],edx
c000cc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc80:	83 ec 0c             	sub    esp,0xc
c000cc83:	50                   	push   eax
c000cc84:	e8 8b fa ff ff       	call   c000c714 <Device::~Device()>
c000cc89:	83 c4 10             	add    esp,0x10
c000cc8c:	90                   	nop
c000cc8d:	83 c4 0c             	add    esp,0xc
c000cc90:	c3                   	ret    
c000cc91:	90                   	nop

c000cc92 <PhysicalDisk::~PhysicalDisk()>:
c000cc92:	83 ec 0c             	sub    esp,0xc
c000cc95:	83 ec 0c             	sub    esp,0xc
c000cc98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9c:	e8 cd ff ff ff       	call   c000cc6e <PhysicalDisk::~PhysicalDisk()>
c000cca1:	83 c4 10             	add    esp,0x10
c000cca4:	83 ec 08             	sub    esp,0x8
c000cca7:	68 6c 01 00 00       	push   0x16c
c000ccac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb0:	e8 63 db ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ccb5:	83 c4 10             	add    esp,0x10
c000ccb8:	83 c4 0c             	add    esp,0xc
c000ccbb:	c3                   	ret    

c000ccbc <int_handler>:
c000ccbc:	55                   	push   ebp
c000ccbd:	57                   	push   edi
c000ccbe:	56                   	push   esi
c000ccbf:	53                   	push   ebx
c000ccc0:	83 ec 0c             	sub    esp,0xc
c000ccc3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ccc7:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ccce:	74 0b                	je     c000ccdb <int_handler+0x1f>
c000ccd0:	fa                   	cli    
c000ccd1:	f4                   	hlt    
c000ccd2:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ccd9:	75 f5                	jne    c000ccd0 <int_handler+0x14>
c000ccdb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ccde:	8d 46 e0             	lea    eax,[esi-0x20]
c000cce1:	83 f8 17             	cmp    eax,0x17
c000cce4:	76 40                	jbe    c000cd26 <int_handler+0x6a>
c000cce6:	c1 e6 04             	shl    esi,0x4
c000cce9:	31 db                	xor    ebx,ebx
c000cceb:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ccf1:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ccf7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ccfb:	85 c0                	test   eax,eax
c000ccfd:	74 13                	je     c000cd12 <int_handler+0x56>
c000ccff:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cd02:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cd06:	74 2c                	je     c000cd34 <int_handler+0x78>
c000cd08:	83 ec 08             	sub    esp,0x8
c000cd0b:	52                   	push   edx
c000cd0c:	57                   	push   edi
c000cd0d:	ff d0                	call   eax
c000cd0f:	83 c4 10             	add    esp,0x10
c000cd12:	83 c3 01             	add    ebx,0x1
c000cd15:	83 fb 04             	cmp    ebx,0x4
c000cd18:	75 dd                	jne    c000ccf7 <int_handler+0x3b>
c000cd1a:	83 c4 0c             	add    esp,0xc
c000cd1d:	31 c0                	xor    eax,eax
c000cd1f:	5b                   	pop    ebx
c000cd20:	31 d2                	xor    edx,edx
c000cd22:	5e                   	pop    esi
c000cd23:	5f                   	pop    edi
c000cd24:	5d                   	pop    ebp
c000cd25:	c3                   	ret    
c000cd26:	83 ec 0c             	sub    esp,0xc
c000cd29:	50                   	push   eax
c000cd2a:	e8 69 b4 00 00       	call   c0018198 <HalEndOfInterrupt(int)>
c000cd2f:	83 c4 10             	add    esp,0x10
c000cd32:	eb b2                	jmp    c000cce6 <int_handler+0x2a>
c000cd34:	83 ec 08             	sub    esp,0x8
c000cd37:	52                   	push   edx
c000cd38:	57                   	push   edi
c000cd39:	ff d0                	call   eax
c000cd3b:	83 c4 10             	add    esp,0x10
c000cd3e:	83 c4 0c             	add    esp,0xc
c000cd41:	5b                   	pop    ebx
c000cd42:	5e                   	pop    esi
c000cd43:	5f                   	pop    edi
c000cd44:	5d                   	pop    ebp
c000cd45:	c3                   	ret    

c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cd46:	56                   	push   esi
c000cd47:	31 c0                	xor    eax,eax
c000cd49:	53                   	push   ebx
c000cd4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cd4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd52:	89 ca                	mov    edx,ecx
c000cd54:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd58:	c1 e2 04             	shl    edx,0x4
c000cd5b:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cd63:	74 17                	je     c000cd7c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cd65:	83 c0 01             	add    eax,0x1
c000cd68:	83 f8 04             	cmp    eax,0x4
c000cd6b:	75 ee                	jne    c000cd5b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cd6d:	c7 44 24 0c 44 19 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021944
c000cd75:	5b                   	pop    ebx
c000cd76:	5e                   	pop    esi
c000cd77:	e9 ef 46 00 00       	jmp    c001146b <KePanic(char const*)>
c000cd7c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cd7f:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cd86:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cd8d:	5b                   	pop    ebx
c000cd8e:	5e                   	pop    esi
c000cd8f:	c3                   	ret    

c000cd90 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cd90:	57                   	push   edi
c000cd91:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cd97:	56                   	push   esi
c000cd98:	53                   	push   ebx
c000cd99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cda1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cda8:	74 54                	je     c000cdfe <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cdaa:	89 c7                	mov    edi,eax
c000cdac:	84 c0                	test   al,al
c000cdae:	74 1d                	je     c000cdcd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cdb0:	83 fe 0f             	cmp    esi,0xf
c000cdb3:	0f 8f d5 00 00 00    	jg     c000ce8e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cdb9:	0f b6 b6 48 34 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcbb8]
c000cdc0:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cdc8:	d1 ef                	shr    edi,1
c000cdca:	83 e7 01             	and    edi,0x1
c000cdcd:	83 ec 08             	sub    esp,0x8
c000cdd0:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cdd5:	31 db                	xor    ebx,ebx
c000cdd7:	50                   	push   eax
c000cdd8:	68 51 19 02 c0       	push   0xc0021951
c000cddd:	e8 63 db ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cde2:	83 c4 10             	add    esp,0x10
c000cde5:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cdea:	85 c0                	test   eax,eax
c000cdec:	7f 55                	jg     c000ce43 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cdee:	83 ec 0c             	sub    esp,0xc
c000cdf1:	68 68 19 02 c0       	push   0xc0021968
c000cdf6:	e8 70 46 00 00       	call   c001146b <KePanic(char const*)>
c000cdfb:	83 c4 10             	add    esp,0x10
c000cdfe:	8d 7e 20             	lea    edi,[esi+0x20]
c000ce01:	89 f8                	mov    eax,edi
c000ce03:	31 d2                	xor    edx,edx
c000ce05:	c1 e0 04             	shl    eax,0x4
c000ce08:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000ce0f:	85 c9                	test   ecx,ecx
c000ce11:	0f 84 8e 00 00 00    	je     c000cea5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000ce17:	83 c2 01             	add    edx,0x1
c000ce1a:	83 fa 04             	cmp    edx,0x4
c000ce1d:	75 e9                	jne    c000ce08 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000ce1f:	83 ec 0c             	sub    esp,0xc
c000ce22:	68 bc 19 02 c0       	push   0xc00219bc
c000ce27:	e8 3f 46 00 00       	call   c001146b <KePanic(char const*)>
c000ce2c:	83 c4 10             	add    esp,0x10
c000ce2f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ce34:	5b                   	pop    ebx
c000ce35:	5e                   	pop    esi
c000ce36:	5f                   	pop    edi
c000ce37:	c3                   	ret    
c000ce38:	83 c3 01             	add    ebx,0x1
c000ce3b:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000ce41:	7e ab                	jle    c000cdee <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000ce43:	83 ec 08             	sub    esp,0x8
c000ce46:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000ce4d:	56                   	push   esi
c000ce4e:	50                   	push   eax
c000ce4f:	e8 ce 1a 01 00       	call   c001e922 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000ce54:	83 c4 10             	add    esp,0x10
c000ce57:	84 c0                	test   al,al
c000ce59:	74 dd                	je     c000ce38 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000ce5b:	83 ec 04             	sub    esp,0x4
c000ce5e:	89 f8                	mov    eax,edi
c000ce60:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000ce67:	0f b6 f8             	movzx  edi,al
c000ce6a:	57                   	push   edi
c000ce6b:	8d 7e 20             	lea    edi,[esi+0x20]
c000ce6e:	6a 00                	push   0x0
c000ce70:	89 f8                	mov    eax,edi
c000ce72:	0f b6 c0             	movzx  eax,al
c000ce75:	50                   	push   eax
c000ce76:	89 f0                	mov    eax,esi
c000ce78:	6a 00                	push   0x0
c000ce7a:	0f b6 c0             	movzx  eax,al
c000ce7d:	6a 00                	push   0x0
c000ce7f:	50                   	push   eax
c000ce80:	53                   	push   ebx
c000ce81:	e8 08 1c 01 00       	call   c001ea8e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000ce86:	83 c4 20             	add    esp,0x20
c000ce89:	e9 73 ff ff ff       	jmp    c000ce01 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000ce8e:	83 ec 0c             	sub    esp,0xc
c000ce91:	31 ff                	xor    edi,edi
c000ce93:	68 84 19 02 c0       	push   0xc0021984
c000ce98:	e8 ce 45 00 00       	call   c001146b <KePanic(char const*)>
c000ce9d:	83 c4 10             	add    esp,0x10
c000cea0:	e9 28 ff ff ff       	jmp    c000cdcd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cea5:	8d 04 ba             	lea    eax,[edx+edi*4]
c000cea8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ceac:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000ceb3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ceb7:	5b                   	pop    ebx
c000ceb8:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000cebf:	89 f0                	mov    eax,esi
c000cec1:	5e                   	pop    esi
c000cec2:	5f                   	pop    edi
c000cec3:	c3                   	ret    

c000cec4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cecc:	c1 e0 04             	shl    eax,0x4
c000cecf:	8d 50 10             	lea    edx,[eax+0x10]
c000ced2:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000ced8:	74 08                	je     c000cee2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ceda:	83 c0 04             	add    eax,0x4
c000cedd:	39 d0                	cmp    eax,edx
c000cedf:	75 f1                	jne    c000ced2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000cee1:	c3                   	ret    
c000cee2:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000ceec:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000cef6:	eb e2                	jmp    c000ceda <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cef8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cef8:	53                   	push   ebx
c000cef9:	83 ec 08             	sub    esp,0x8
c000cefc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf00:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cf05:	74 0e                	je     c000cf15 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cf07:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000cf0c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cf13:	75 37                	jne    c000cf4c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000cf15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf19:	83 c0 20             	add    eax,0x20
c000cf1c:	c1 e0 04             	shl    eax,0x4
c000cf1f:	8d 50 10             	lea    edx,[eax+0x10]
c000cf22:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000cf28:	74 0c                	je     c000cf36 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000cf2a:	83 c0 04             	add    eax,0x4
c000cf2d:	39 d0                	cmp    eax,edx
c000cf2f:	75 f1                	jne    c000cf22 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000cf31:	83 c4 08             	add    esp,0x8
c000cf34:	5b                   	pop    ebx
c000cf35:	c3                   	ret    
c000cf36:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000cf40:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000cf4a:	eb de                	jmp    c000cf2a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000cf4c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000cf51:	7f 11                	jg     c000cf64 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000cf53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf57:	0f b6 80 48 34 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcbb8]
c000cf5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf62:	eb b1                	jmp    c000cf15 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cf64:	83 ec 0c             	sub    esp,0xc
c000cf67:	68 75 19 02 c0       	push   0xc0021975
c000cf6c:	e8 fa 44 00 00       	call   c001146b <KePanic(char const*)>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	eb 9f                	jmp    c000cf15 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000cf76 <setupINTS()>:
c000cf76:	31 c0                	xor    eax,eax
c000cf78:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000cf82:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000cf8c:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000cf96:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000cfa0:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000cfaa:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000cfb4:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000cfbe:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000cfc8:	83 c0 10             	add    eax,0x10
c000cfcb:	3d 00 10 00 00       	cmp    eax,0x1000
c000cfd0:	75 a6                	jne    c000cf78 <setupINTS()+0x2>
c000cfd2:	c3                   	ret    

c000cfd3 <convertLegacyIRQNumber(int)>:
c000cfd3:	83 ec 0c             	sub    esp,0xc
c000cfd6:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cfdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe0:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cfe7:	74 0c                	je     c000cff5 <convertLegacyIRQNumber(int)+0x22>
c000cfe9:	83 f8 0f             	cmp    eax,0xf
c000cfec:	7f 0b                	jg     c000cff9 <convertLegacyIRQNumber(int)+0x26>
c000cfee:	0f b6 80 48 34 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcbb8]
c000cff5:	83 c4 0c             	add    esp,0xc
c000cff8:	c3                   	ret    
c000cff9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cffd:	83 ec 0c             	sub    esp,0xc
c000d000:	68 84 19 02 c0       	push   0xc0021984
c000d005:	e8 61 44 00 00       	call   c001146b <KePanic(char const*)>
c000d00a:	83 c4 10             	add    esp,0x10
c000d00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d011:	83 c4 0c             	add    esp,0xc
c000d014:	c3                   	ret    
c000d015:	90                   	nop

c000d016 <startGUI(void*)>:
c000d016:	55                   	push   ebp
c000d017:	89 e5                	mov    ebp,esp
c000d019:	53                   	push   ebx
c000d01a:	83 ec 04             	sub    esp,0x4
c000d01d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d022:	83 e8 01             	sub    eax,0x1
c000d025:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d02a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d02f:	85 c0                	test   eax,eax
c000d031:	75 01                	jne    c000d034 <startGUI(void*)+0x1e>
c000d033:	fb                   	sti    
c000d034:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d03a:	83 ec 08             	sub    esp,0x8
c000d03d:	6a 01                	push   0x1
c000d03f:	68 e1 19 02 c0       	push   0xc00219e1
c000d044:	e8 26 84 00 00       	call   c001546f <Thr::loadDLL(char const*, bool)>
c000d049:	83 c4 10             	add    esp,0x10
c000d04c:	83 ec 08             	sub    esp,0x8
c000d04f:	53                   	push   ebx
c000d050:	50                   	push   eax
c000d051:	e8 4a 86 00 00       	call   c00156a0 <Thr::executeDLL(unsigned long, void*)>
c000d056:	83 c4 10             	add    esp,0x10
c000d059:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d05f:	83 ec 08             	sub    esp,0x8
c000d062:	6a 01                	push   0x1
c000d064:	68 fb 19 02 c0       	push   0xc00219fb
c000d069:	e8 01 84 00 00       	call   c001546f <Thr::loadDLL(char const*, bool)>
c000d06e:	83 c4 10             	add    esp,0x10
c000d071:	83 ec 08             	sub    esp,0x8
c000d074:	53                   	push   ebx
c000d075:	50                   	push   eax
c000d076:	e8 25 86 00 00       	call   c00156a0 <Thr::executeDLL(unsigned long, void*)>
c000d07b:	83 c4 10             	add    esp,0x10
c000d07e:	90                   	nop
c000d07f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d082:	c9                   	leave  
c000d083:	c3                   	ret    

c000d084 <startGUIVESA(void*)>:
c000d084:	55                   	push   ebp
c000d085:	89 e5                	mov    ebp,esp
c000d087:	53                   	push   ebx
c000d088:	83 ec 04             	sub    esp,0x4
c000d08b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d090:	83 e8 01             	sub    eax,0x1
c000d093:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d098:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d09d:	85 c0                	test   eax,eax
c000d09f:	75 01                	jne    c000d0a2 <startGUIVESA(void*)+0x1e>
c000d0a1:	fb                   	sti    
c000d0a2:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d0a8:	83 ec 08             	sub    esp,0x8
c000d0ab:	6a 01                	push   0x1
c000d0ad:	68 19 1a 02 c0       	push   0xc0021a19
c000d0b2:	e8 b8 83 00 00       	call   c001546f <Thr::loadDLL(char const*, bool)>
c000d0b7:	83 c4 10             	add    esp,0x10
c000d0ba:	83 ec 08             	sub    esp,0x8
c000d0bd:	53                   	push   ebx
c000d0be:	50                   	push   eax
c000d0bf:	e8 dc 85 00 00       	call   c00156a0 <Thr::executeDLL(unsigned long, void*)>
c000d0c4:	83 c4 10             	add    esp,0x10
c000d0c7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d0cd:	83 ec 08             	sub    esp,0x8
c000d0d0:	6a 01                	push   0x1
c000d0d2:	68 fb 19 02 c0       	push   0xc00219fb
c000d0d7:	e8 93 83 00 00       	call   c001546f <Thr::loadDLL(char const*, bool)>
c000d0dc:	83 c4 10             	add    esp,0x10
c000d0df:	83 ec 08             	sub    esp,0x8
c000d0e2:	53                   	push   ebx
c000d0e3:	50                   	push   eax
c000d0e4:	e8 b7 85 00 00       	call   c00156a0 <Thr::executeDLL(unsigned long, void*)>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	90                   	nop
c000d0ed:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d0f0:	c9                   	leave  
c000d0f1:	c3                   	ret    

c000d0f2 <sendKeyToTerminal(unsigned char)>:
c000d0f2:	55                   	push   ebp
c000d0f3:	89 e5                	mov    ebp,esp
c000d0f5:	83 ec 28             	sub    esp,0x28
c000d0f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0fb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d0fe:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d103:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d107:	83 ec 08             	sub    esp,0x8
c000d10a:	52                   	push   edx
c000d10b:	50                   	push   eax
c000d10c:	e8 a5 bc ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d111:	83 c4 10             	add    esp,0x10
c000d114:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d118:	83 f8 0a             	cmp    eax,0xa
c000d11b:	74 16                	je     c000d133 <sendKeyToTerminal(unsigned char)+0x41>
c000d11d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d121:	83 f8 03             	cmp    eax,0x3
c000d124:	74 0d                	je     c000d133 <sendKeyToTerminal(unsigned char)+0x41>
c000d126:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d12a:	83 f8 1c             	cmp    eax,0x1c
c000d12d:	0f 85 97 00 00 00    	jne    c000d1ca <sendKeyToTerminal(unsigned char)+0xd8>
c000d133:	fa                   	cli    
c000d134:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d139:	83 c0 01             	add    eax,0x1
c000d13c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d141:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d146:	83 c0 01             	add    eax,0x1
c000d149:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d14e:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d153:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d156:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d160:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d164:	74 1f                	je     c000d185 <sendKeyToTerminal(unsigned char)+0x93>
c000d166:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d169:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d16c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d16f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d172:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d175:	83 ec 0c             	sub    esp,0xc
c000d178:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d17b:	e8 68 92 00 00       	call   c00163e8 <unblockTask(ThreadControlBlock*)>
c000d180:	83 c4 10             	add    esp,0x10
c000d183:	eb db                	jmp    c000d160 <sendKeyToTerminal(unsigned char)+0x6e>
c000d185:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d18a:	83 e8 01             	sub    eax,0x1
c000d18d:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d192:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d197:	85 c0                	test   eax,eax
c000d199:	75 18                	jne    c000d1b3 <sendKeyToTerminal(unsigned char)+0xc1>
c000d19b:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d1a0:	85 c0                	test   eax,eax
c000d1a2:	74 0f                	je     c000d1b3 <sendKeyToTerminal(unsigned char)+0xc1>
c000d1a4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d1ae:	e8 1d 8d 00 00       	call   c0015ed0 <schedule()>
c000d1b3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1b8:	83 e8 01             	sub    eax,0x1
c000d1bb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1c0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1c5:	85 c0                	test   eax,eax
c000d1c7:	75 01                	jne    c000d1ca <sendKeyToTerminal(unsigned char)+0xd8>
c000d1c9:	fb                   	sti    
c000d1ca:	90                   	nop
c000d1cb:	c9                   	leave  
c000d1cc:	c3                   	ret    

c000d1cd <sendKeyboardToken(KeyboardToken)>:
c000d1cd:	55                   	push   ebp
c000d1ce:	89 e5                	mov    ebp,esp
c000d1d0:	83 ec 18             	sub    esp,0x18
c000d1d3:	e8 e3 42 00 00       	call   c00114bb <KeUserIOReceived()>
c000d1d8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d1db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1de:	0f b7 c0             	movzx  eax,ax
c000d1e1:	83 f2 01             	xor    edx,0x1
c000d1e4:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d1ea:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d1ef:	85 c0                	test   eax,eax
c000d1f1:	74 24                	je     c000d217 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d1f3:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d1f9:	83 ec 04             	sub    esp,0x4
c000d1fc:	68 40 b4 02 c0       	push   0xc002b440
c000d201:	83 ec 08             	sub    esp,0x8
c000d204:	89 e2                	mov    edx,esp
c000d206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d209:	89 02                	mov    DWORD PTR [edx],eax
c000d20b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d20e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d212:	ff d1                	call   ecx
c000d214:	83 c4 10             	add    esp,0x10
c000d217:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d21b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d21e:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d223:	0f b6 d2             	movzx  edx,dl
c000d226:	0f b6 c0             	movzx  eax,al
c000d229:	39 c2                	cmp    edx,eax
c000d22b:	74 1c                	je     c000d249 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d22d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d230:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d235:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d23a:	0f b6 c0             	movzx  eax,al
c000d23d:	83 ec 0c             	sub    esp,0xc
c000d240:	50                   	push   eax
c000d241:	e8 bc b2 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d246:	83 c4 10             	add    esp,0x10
c000d249:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d24c:	0f b6 c0             	movzx  eax,al
c000d24f:	85 c0                	test   eax,eax
c000d251:	0f 84 da 00 00 00    	je     c000d331 <sendKeyboardToken(KeyboardToken)+0x164>
c000d257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d25a:	0f b7 c0             	movzx  eax,ax
c000d25d:	3d 18 03 00 00       	cmp    eax,0x318
c000d262:	75 06                	jne    c000d26a <sendKeyboardToken(KeyboardToken)+0x9d>
c000d264:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d26a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d26d:	0f b7 c0             	movzx  eax,ax
c000d270:	3d 19 03 00 00       	cmp    eax,0x319
c000d275:	75 06                	jne    c000d27d <sendKeyboardToken(KeyboardToken)+0xb0>
c000d277:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d27d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d280:	0f b7 c0             	movzx  eax,ax
c000d283:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d288:	75 06                	jne    c000d290 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d28a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d293:	0f b7 c0             	movzx  eax,ax
c000d296:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d29b:	75 06                	jne    c000d2a3 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d29d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d2a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a6:	0f b7 c0             	movzx  eax,ax
c000d2a9:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d2ae:	75 06                	jne    c000d2b6 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d2b0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d2b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b9:	0f b7 c0             	movzx  eax,ax
c000d2bc:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d2c1:	75 06                	jne    c000d2c9 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d2c3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d2c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2cc:	0f b7 c0             	movzx  eax,ax
c000d2cf:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d2d4:	75 06                	jne    c000d2dc <sendKeyboardToken(KeyboardToken)+0x10f>
c000d2d6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2df:	0f b7 c0             	movzx  eax,ax
c000d2e2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d2e7:	75 06                	jne    c000d2ef <sendKeyboardToken(KeyboardToken)+0x122>
c000d2e9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d2ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2f2:	0f b7 c0             	movzx  eax,ax
c000d2f5:	3d 20 03 00 00       	cmp    eax,0x320
c000d2fa:	75 06                	jne    c000d302 <sendKeyboardToken(KeyboardToken)+0x135>
c000d2fc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d305:	0f b7 c0             	movzx  eax,ax
c000d308:	3d 21 03 00 00       	cmp    eax,0x321
c000d30d:	75 06                	jne    c000d315 <sendKeyboardToken(KeyboardToken)+0x148>
c000d30f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d318:	0f b7 c0             	movzx  eax,ax
c000d31b:	3d 22 03 00 00       	cmp    eax,0x322
c000d320:	0f 85 f1 00 00 00    	jne    c000d417 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d326:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d32c:	e9 e6 00 00 00       	jmp    c000d417 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d334:	0f b7 c0             	movzx  eax,ax
c000d337:	3d 18 03 00 00       	cmp    eax,0x318
c000d33c:	75 0a                	jne    c000d348 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d33e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d344:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d34b:	0f b7 c0             	movzx  eax,ax
c000d34e:	3d 19 03 00 00       	cmp    eax,0x319
c000d353:	75 0a                	jne    c000d35f <sendKeyboardToken(KeyboardToken)+0x192>
c000d355:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d35b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d35f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d362:	0f b7 c0             	movzx  eax,ax
c000d365:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d36a:	75 0a                	jne    c000d376 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d36c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d372:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d379:	0f b7 c0             	movzx  eax,ax
c000d37c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d381:	75 0a                	jne    c000d38d <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d383:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d389:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d38d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d390:	0f b7 c0             	movzx  eax,ax
c000d393:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d398:	75 0a                	jne    c000d3a4 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d39a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d3a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d3a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3a7:	0f b7 c0             	movzx  eax,ax
c000d3aa:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d3af:	75 0a                	jne    c000d3bb <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d3b1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d3b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d3bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3be:	0f b7 c0             	movzx  eax,ax
c000d3c1:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d3c6:	75 0a                	jne    c000d3d2 <sendKeyboardToken(KeyboardToken)+0x205>
c000d3c8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d3ce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d3d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d5:	0f b7 c0             	movzx  eax,ax
c000d3d8:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d3dd:	75 0a                	jne    c000d3e9 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d3df:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d3e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d3e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ec:	0f b7 c0             	movzx  eax,ax
c000d3ef:	3d 20 03 00 00       	cmp    eax,0x320
c000d3f4:	75 0a                	jne    c000d400 <sendKeyboardToken(KeyboardToken)+0x233>
c000d3f6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d3fc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d403:	0f b7 c0             	movzx  eax,ax
c000d406:	3d 21 03 00 00       	cmp    eax,0x321
c000d40b:	75 0a                	jne    c000d417 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d40d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d413:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d41a:	0f b7 c0             	movzx  eax,ax
c000d41d:	3d 00 02 00 00       	cmp    eax,0x200
c000d422:	75 2f                	jne    c000d453 <sendKeyboardToken(KeyboardToken)+0x286>
c000d424:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d429:	83 f0 01             	xor    eax,0x1
c000d42c:	0f b6 c0             	movzx  eax,al
c000d42f:	85 c0                	test   eax,eax
c000d431:	74 20                	je     c000d453 <sendKeyboardToken(KeyboardToken)+0x286>
c000d433:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d438:	6a 01                	push   0x1
c000d43a:	6a 00                	push   0x0
c000d43c:	68 16 d0 00 c0       	push   0xc000d016
c000d441:	50                   	push   eax
c000d442:	e8 39 88 00 00       	call   c0015c80 <Process::createThread(void (*)(void*), void*, int)>
c000d447:	83 c4 10             	add    esp,0x10
c000d44a:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d451:	eb 3a                	jmp    c000d48d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d456:	0f b7 c0             	movzx  eax,ax
c000d459:	3d 01 02 00 00       	cmp    eax,0x201
c000d45e:	75 2d                	jne    c000d48d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d460:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d465:	83 f0 01             	xor    eax,0x1
c000d468:	0f b6 c0             	movzx  eax,al
c000d46b:	85 c0                	test   eax,eax
c000d46d:	74 1e                	je     c000d48d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d46f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d474:	6a 01                	push   0x1
c000d476:	6a 00                	push   0x0
c000d478:	68 84 d0 00 c0       	push   0xc000d084
c000d47d:	50                   	push   eax
c000d47e:	e8 fd 87 00 00       	call   c0015c80 <Process::createThread(void (*)(void*), void*, int)>
c000d483:	83 c4 10             	add    esp,0x10
c000d486:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d48d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d490:	0f b7 c0             	movzx  eax,ax
c000d493:	3d 25 03 00 00       	cmp    eax,0x325
c000d498:	75 06                	jne    c000d4a0 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d49a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d4a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a3:	0f b7 c0             	movzx  eax,ax
c000d4a6:	3d 24 03 00 00       	cmp    eax,0x324
c000d4ab:	75 06                	jne    c000d4b3 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d4ad:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d4b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b6:	0f b7 c0             	movzx  eax,ax
c000d4b9:	3d 23 03 00 00       	cmp    eax,0x323
c000d4be:	75 06                	jne    c000d4c6 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d4c0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d4c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c9:	0f b7 c0             	movzx  eax,ax
c000d4cc:	3d 26 03 00 00       	cmp    eax,0x326
c000d4d1:	75 06                	jne    c000d4d9 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d4d3:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d4d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4dc:	0f b7 c0             	movzx  eax,ax
c000d4df:	3d 27 03 00 00       	cmp    eax,0x327
c000d4e4:	75 06                	jne    c000d4ec <sendKeyboardToken(KeyboardToken)+0x31f>
c000d4e6:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d4ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ef:	0f b7 c0             	movzx  eax,ax
c000d4f2:	3d 22 03 00 00       	cmp    eax,0x322
c000d4f7:	75 06                	jne    c000d4ff <sendKeyboardToken(KeyboardToken)+0x332>
c000d4f9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d4ff:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d503:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d506:	83 f0 01             	xor    eax,0x1
c000d509:	0f b6 c0             	movzx  eax,al
c000d50c:	85 c0                	test   eax,eax
c000d50e:	74 7c                	je     c000d58c <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d510:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d515:	0f b6 c0             	movzx  eax,al
c000d518:	85 c0                	test   eax,eax
c000d51a:	74 43                	je     c000d55f <sendKeyboardToken(KeyboardToken)+0x392>
c000d51c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d520:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d524:	85 c0                	test   eax,eax
c000d526:	74 2b                	je     c000d553 <sendKeyboardToken(KeyboardToken)+0x386>
c000d528:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d52e:	89 d0                	mov    eax,edx
c000d530:	c1 e0 02             	shl    eax,0x2
c000d533:	01 d0                	add    eax,edx
c000d535:	01 c0                	add    eax,eax
c000d537:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d53c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53f:	0f b7 c0             	movzx  eax,ax
c000d542:	8d 50 d0             	lea    edx,[eax-0x30]
c000d545:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d54a:	01 d0                	add    eax,edx
c000d54c:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d551:	eb 71                	jmp    c000d5c4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d553:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d55d:	eb 65                	jmp    c000d5c4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d55f:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d564:	85 c0                	test   eax,eax
c000d566:	74 18                	je     c000d580 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d568:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d56d:	0f b6 c0             	movzx  eax,al
c000d570:	83 ec 0c             	sub    esp,0xc
c000d573:	50                   	push   eax
c000d574:	e8 79 fb ff ff       	call   c000d0f2 <sendKeyToTerminal(unsigned char)>
c000d579:	83 c4 10             	add    esp,0x10
c000d57c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d580:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d58a:	eb 38                	jmp    c000d5c4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d58c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58f:	0f b7 c0             	movzx  eax,ax
c000d592:	3d 01 01 00 00       	cmp    eax,0x101
c000d597:	75 2b                	jne    c000d5c4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d599:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d59e:	85 c0                	test   eax,eax
c000d5a0:	74 18                	je     c000d5ba <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d5a2:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d5a7:	0f b6 c0             	movzx  eax,al
c000d5aa:	83 ec 0c             	sub    esp,0xc
c000d5ad:	50                   	push   eax
c000d5ae:	e8 3f fb ff ff       	call   c000d0f2 <sendKeyToTerminal(unsigned char)>
c000d5b3:	83 c4 10             	add    esp,0x10
c000d5b6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d5ba:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d5c4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d5c7:	83 f0 01             	xor    eax,0x1
c000d5ca:	0f b6 c0             	movzx  eax,al
c000d5cd:	85 c0                	test   eax,eax
c000d5cf:	74 5a                	je     c000d62b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d5d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d5d4:	83 f0 01             	xor    eax,0x1
c000d5d7:	0f b6 c0             	movzx  eax,al
c000d5da:	85 c0                	test   eax,eax
c000d5dc:	74 4d                	je     c000d62b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d5de:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d5e3:	83 f0 01             	xor    eax,0x1
c000d5e6:	0f b6 c0             	movzx  eax,al
c000d5e9:	85 c0                	test   eax,eax
c000d5eb:	74 3e                	je     c000d62b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d5ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5f0:	0f b7 c0             	movzx  eax,ax
c000d5f3:	83 f8 1f             	cmp    eax,0x1f
c000d5f6:	76 0b                	jbe    c000d603 <sendKeyboardToken(KeyboardToken)+0x436>
c000d5f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5fb:	0f b7 c0             	movzx  eax,ax
c000d5fe:	83 f8 7e             	cmp    eax,0x7e
c000d601:	76 16                	jbe    c000d619 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d606:	0f b7 c0             	movzx  eax,ax
c000d609:	83 f8 0a             	cmp    eax,0xa
c000d60c:	74 0b                	je     c000d619 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d60e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d611:	0f b7 c0             	movzx  eax,ax
c000d614:	83 f8 08             	cmp    eax,0x8
c000d617:	75 12                	jne    c000d62b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d61c:	0f b6 c0             	movzx  eax,al
c000d61f:	83 ec 0c             	sub    esp,0xc
c000d622:	50                   	push   eax
c000d623:	e8 ca fa ff ff       	call   c000d0f2 <sendKeyToTerminal(unsigned char)>
c000d628:	83 c4 10             	add    esp,0x10
c000d62b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d62e:	83 f0 01             	xor    eax,0x1
c000d631:	0f b6 c0             	movzx  eax,al
c000d634:	85 c0                	test   eax,eax
c000d636:	74 5d                	je     c000d695 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d638:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d63b:	83 f0 01             	xor    eax,0x1
c000d63e:	0f b6 c0             	movzx  eax,al
c000d641:	85 c0                	test   eax,eax
c000d643:	74 50                	je     c000d695 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d645:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d64a:	0f b6 c0             	movzx  eax,al
c000d64d:	85 c0                	test   eax,eax
c000d64f:	74 44                	je     c000d695 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d654:	0f b7 c0             	movzx  eax,ax
c000d657:	83 f8 3f             	cmp    eax,0x3f
c000d65a:	76 39                	jbe    c000d695 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d65c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d65f:	0f b7 c0             	movzx  eax,ax
c000d662:	83 f8 7f             	cmp    eax,0x7f
c000d665:	77 2e                	ja     c000d695 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d66a:	88 c2                	mov    dl,al
c000d66c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d66f:	0f b7 c0             	movzx  eax,ax
c000d672:	83 f8 5f             	cmp    eax,0x5f
c000d675:	76 04                	jbe    c000d67b <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d677:	b0 20                	mov    al,0x20
c000d679:	eb 02                	jmp    c000d67d <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d67b:	b0 00                	mov    al,0x0
c000d67d:	89 d1                	mov    ecx,edx
c000d67f:	29 c1                	sub    ecx,eax
c000d681:	89 c8                	mov    eax,ecx
c000d683:	83 e8 40             	sub    eax,0x40
c000d686:	0f b6 c0             	movzx  eax,al
c000d689:	83 ec 0c             	sub    esp,0xc
c000d68c:	50                   	push   eax
c000d68d:	e8 60 fa ff ff       	call   c000d0f2 <sendKeyToTerminal(unsigned char)>
c000d692:	83 c4 10             	add    esp,0x10
c000d695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d698:	0f b7 c0             	movzx  eax,ax
c000d69b:	3d 00 03 00 00       	cmp    eax,0x300
c000d6a0:	75 12                	jne    c000d6b4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d6a2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6a5:	83 f0 01             	xor    eax,0x1
c000d6a8:	0f b6 c0             	movzx  eax,al
c000d6ab:	85 c0                	test   eax,eax
c000d6ad:	74 05                	je     c000d6b4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d6af:	e8 4f ae ff ff       	call   c0008503 <doTerminalCycle()>
c000d6b4:	90                   	nop
c000d6b5:	c9                   	leave  
c000d6b6:	c3                   	ret    

c000d6b7 <clearInternalKeybuffer(VgaText*)>:
c000d6b7:	55                   	push   ebp
c000d6b8:	89 e5                	mov    ebp,esp
c000d6ba:	83 ec 08             	sub    esp,0x8
c000d6bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c0:	05 02 01 00 00       	add    eax,0x102
c000d6c5:	83 ec 0c             	sub    esp,0xc
c000d6c8:	50                   	push   eax
c000d6c9:	e8 a2 2e ff ff       	call   c0000570 <strlen>
c000d6ce:	83 c4 10             	add    esp,0x10
c000d6d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6d4:	81 c2 02 01 00 00    	add    edx,0x102
c000d6da:	83 ec 04             	sub    esp,0x4
c000d6dd:	50                   	push   eax
c000d6de:	6a 00                	push   0x0
c000d6e0:	52                   	push   edx
c000d6e1:	e8 0a 2e ff ff       	call   c00004f0 <memset>
c000d6e6:	83 c4 10             	add    esp,0x10
c000d6e9:	90                   	nop
c000d6ea:	c9                   	leave  
c000d6eb:	c3                   	ret    

c000d6ec <readKeyboard(VgaText*, char*, unsigned long)>:
c000d6ec:	55                   	push   ebp
c000d6ed:	89 e5                	mov    ebp,esp
c000d6ef:	83 ec 18             	sub    esp,0x18
c000d6f2:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d6f7:	85 c0                	test   eax,eax
c000d6f9:	74 2a                	je     c000d725 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d6fb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d701:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d707:	83 ec 04             	sub    esp,0x4
c000d70a:	68 40 b4 02 c0       	push   0xc002b440
c000d70f:	83 ec 08             	sub    esp,0x8
c000d712:	89 e2                	mov    edx,esp
c000d714:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d717:	89 02                	mov    DWORD PTR [edx],eax
c000d719:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d71c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d720:	ff d1                	call   ecx
c000d722:	83 c4 10             	add    esp,0x10
c000d725:	fb                   	sti    
c000d726:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d72d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d731:	0f 84 0d 01 00 00    	je     c000d844 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d740:	0f be c0             	movsx  eax,al
c000d743:	85 c0                	test   eax,eax
c000d745:	75 2c                	jne    c000d773 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d747:	fa                   	cli    
c000d748:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d74d:	83 c0 01             	add    eax,0x1
c000d750:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d755:	e8 76 87 00 00       	call   c0015ed0 <schedule()>
c000d75a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d75f:	83 e8 01             	sub    eax,0x1
c000d762:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d767:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d76c:	85 c0                	test   eax,eax
c000d76e:	75 c7                	jne    c000d737 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d770:	fb                   	sti    
c000d771:	eb c4                	jmp    c000d737 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d773:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d776:	8d 50 01             	lea    edx,[eax+0x1]
c000d779:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d77c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d77f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d785:	88 10                	mov    BYTE PTR [eax],dl
c000d787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d78a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d790:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d793:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d797:	83 f8 03             	cmp    eax,0x3
c000d79a:	75 1e                	jne    c000d7ba <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d79c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d7a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7a6:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d7ac:	83 ec 08             	sub    esp,0x8
c000d7af:	6a 02                	push   0x2
c000d7b1:	50                   	push   eax
c000d7b2:	e8 57 41 00 00       	call   c001190e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d7b7:	83 c4 10             	add    esp,0x10
c000d7ba:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d7be:	83 f8 1c             	cmp    eax,0x1c
c000d7c1:	75 1e                	jne    c000d7e1 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d7c3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7cd:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d7d3:	83 ec 08             	sub    esp,0x8
c000d7d6:	6a 09                	push   0x9
c000d7d8:	50                   	push   eax
c000d7d9:	e8 30 41 00 00       	call   c001190e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d7de:	83 c4 10             	add    esp,0x10
c000d7e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7e4:	05 02 01 00 00       	add    eax,0x102
c000d7e9:	83 ec 0c             	sub    esp,0xc
c000d7ec:	50                   	push   eax
c000d7ed:	e8 7e 2d ff ff       	call   c0000570 <strlen>
c000d7f2:	83 c4 10             	add    esp,0x10
c000d7f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d7f8:	81 c2 02 01 00 00    	add    edx,0x102
c000d7fe:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d801:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d804:	81 c2 02 01 00 00    	add    edx,0x102
c000d80a:	83 ec 04             	sub    esp,0x4
c000d80d:	50                   	push   eax
c000d80e:	51                   	push   ecx
c000d80f:	52                   	push   edx
c000d810:	e8 bb 2b ff ff       	call   c00003d0 <memmove>
c000d815:	83 c4 10             	add    esp,0x10
c000d818:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d81c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d820:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d824:	83 f8 0a             	cmp    eax,0xa
c000d827:	74 16                	je     c000d83f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d829:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d82d:	83 f8 03             	cmp    eax,0x3
c000d830:	74 0d                	je     c000d83f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d832:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d836:	83 f8 1c             	cmp    eax,0x1c
c000d839:	0f 85 ee fe ff ff    	jne    c000d72d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d83f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d842:	eb 03                	jmp    c000d847 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d844:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d847:	c9                   	leave  
c000d848:	c3                   	ret    
c000d849:	90                   	nop

c000d84a <Keyboard::Keyboard(char const*)>:
c000d84a:	83 ec 0c             	sub    esp,0xc
c000d84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d851:	83 ec 08             	sub    esp,0x8
c000d854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d858:	50                   	push   eax
c000d859:	e8 4c f1 ff ff       	call   c000c9aa <Device::Device(char const*)>
c000d85e:	83 c4 10             	add    esp,0x10
c000d861:	ba 3c 1a 02 c0       	mov    edx,0xc0021a3c
c000d866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86a:	89 10                	mov    DWORD PTR [eax],edx
c000d86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d870:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d87a:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000d881:	90                   	nop
c000d882:	83 c4 0c             	add    esp,0xc
c000d885:	c3                   	ret    

c000d886 <Keyboard::~Keyboard()>:
c000d886:	83 ec 0c             	sub    esp,0xc
c000d889:	ba 3c 1a 02 c0       	mov    edx,0xc0021a3c
c000d88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d892:	89 10                	mov    DWORD PTR [eax],edx
c000d894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d898:	83 ec 0c             	sub    esp,0xc
c000d89b:	50                   	push   eax
c000d89c:	e8 73 ee ff ff       	call   c000c714 <Device::~Device()>
c000d8a1:	83 c4 10             	add    esp,0x10
c000d8a4:	90                   	nop
c000d8a5:	83 c4 0c             	add    esp,0xc
c000d8a8:	c3                   	ret    
c000d8a9:	90                   	nop

c000d8aa <Keyboard::~Keyboard()>:
c000d8aa:	83 ec 0c             	sub    esp,0xc
c000d8ad:	83 ec 0c             	sub    esp,0xc
c000d8b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b4:	e8 cd ff ff ff       	call   c000d886 <Keyboard::~Keyboard()>
c000d8b9:	83 c4 10             	add    esp,0x10
c000d8bc:	83 ec 08             	sub    esp,0x8
c000d8bf:	68 5c 01 00 00       	push   0x15c
c000d8c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8c8:	e8 4b cf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d8cd:	83 c4 10             	add    esp,0x10
c000d8d0:	83 c4 0c             	add    esp,0xc
c000d8d3:	c3                   	ret    

c000d8d4 <LogicalDisk::close(int, int, void*)>:
c000d8d4:	83 c8 ff             	or     eax,0xffffffff
c000d8d7:	c3                   	ret    

c000d8d8 <LogicalDisk::~LogicalDisk()>:
c000d8d8:	83 ec 0c             	sub    esp,0xc
c000d8db:	ba b4 1a 02 c0       	mov    edx,0xc0021ab4
c000d8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8e4:	89 10                	mov    DWORD PTR [eax],edx
c000d8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ea:	83 ec 0c             	sub    esp,0xc
c000d8ed:	50                   	push   eax
c000d8ee:	e8 21 ee ff ff       	call   c000c714 <Device::~Device()>
c000d8f3:	83 c4 10             	add    esp,0x10
c000d8f6:	90                   	nop
c000d8f7:	83 c4 0c             	add    esp,0xc
c000d8fa:	c3                   	ret    
c000d8fb:	90                   	nop

c000d8fc <LogicalDisk::~LogicalDisk()>:
c000d8fc:	83 ec 0c             	sub    esp,0xc
c000d8ff:	83 ec 0c             	sub    esp,0xc
c000d902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d906:	e8 cd ff ff ff       	call   c000d8d8 <LogicalDisk::~LogicalDisk()>
c000d90b:	83 c4 10             	add    esp,0x10
c000d90e:	83 ec 08             	sub    esp,0x8
c000d911:	68 78 01 00 00       	push   0x178
c000d916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d91a:	e8 f9 ce ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d91f:	83 c4 10             	add    esp,0x10
c000d922:	83 c4 0c             	add    esp,0xc
c000d925:	c3                   	ret    

c000d926 <LogicalDisk::open(int, int, void*)>:
c000d926:	83 ec 18             	sub    esp,0x18
c000d929:	68 68 1a 02 c0       	push   0xc0021a68
c000d92e:	e8 38 3b 00 00       	call   c001146b <KePanic(char const*)>
c000d933:	83 c8 ff             	or     eax,0xffffffff
c000d936:	83 c4 1c             	add    esp,0x1c
c000d939:	c3                   	ret    

c000d93a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d93a:	53                   	push   ebx
c000d93b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d93f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d943:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d947:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d94d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d953:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d959:	77 10                	ja     c000d96b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d95b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d961:	89 d3                	mov    ebx,edx
c000d963:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d969:	72 05                	jb     c000d970 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d96b:	83 c8 ff             	or     eax,0xffffffff
c000d96e:	89 c2                	mov    edx,eax
c000d970:	5b                   	pop    ebx
c000d971:	c3                   	ret    

c000d972 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d972:	56                   	push   esi
c000d973:	83 c8 ff             	or     eax,0xffffffff
c000d976:	53                   	push   ebx
c000d977:	89 c2                	mov    edx,eax
c000d979:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d97d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d981:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d985:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d98b:	77 27                	ja     c000d9b4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d98d:	89 d8                	mov    eax,ebx
c000d98f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d995:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d99b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d9a0:	89 c2                	mov    edx,eax
c000d9a2:	73 10                	jae    c000d9b4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d9a4:	89 c8                	mov    eax,ecx
c000d9a6:	89 da                	mov    edx,ebx
c000d9a8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d9ae:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d9b4:	5b                   	pop    ebx
c000d9b5:	5e                   	pop    esi
c000d9b6:	c3                   	ret    
c000d9b7:	90                   	nop

c000d9b8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d9b8:	83 ec 1c             	sub    esp,0x1c
c000d9bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9cf:	89 04 24             	mov    DWORD PTR [esp],eax
c000d9d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d9d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d9da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9de:	83 ec 08             	sub    esp,0x8
c000d9e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d9e5:	50                   	push   eax
c000d9e6:	e8 bf ef ff ff       	call   c000c9aa <Device::Device(char const*)>
c000d9eb:	83 c4 10             	add    esp,0x10
c000d9ee:	ba b4 1a 02 c0       	mov    edx,0xc0021ab4
c000d9f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f7:	89 10                	mov    DWORD PTR [eax],edx
c000d9f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000da04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da08:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000da0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da13:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000da1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da1e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000da28:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da34:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000da3a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000da40:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da44:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000da47:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da4b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000da51:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000da57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da5f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000da65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da69:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000da73:	90                   	nop
c000da74:	83 c4 1c             	add    esp,0x1c
c000da77:	c3                   	ret    

c000da78 <LogicalDisk::assignDriveLetter()>:
c000da78:	55                   	push   ebp
c000da79:	57                   	push   edi
c000da7a:	56                   	push   esi
c000da7b:	53                   	push   ebx
c000da7c:	83 ec 14             	sub    esp,0x14
c000da7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000da83:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000da89:	b0 41                	mov    al,0x41
c000da8b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000da91:	84 d2                	test   dl,dl
c000da93:	75 02                	jne    c000da97 <LogicalDisk::assignDriveLetter()+0x1f>
c000da95:	b0 43                	mov    al,0x43
c000da97:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000da9d:	0f b6 ca             	movzx  ecx,dl
c000daa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000daa4:	0f be e8             	movsx  ebp,al
c000daa7:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000daad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dab1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dab5:	3c 43                	cmp    al,0x43
c000dab7:	75 10                	jne    c000dac9 <LogicalDisk::assignDriveLetter()+0x51>
c000dab9:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dac0:	75 5a                	jne    c000db1c <LogicalDisk::assignDriveLetter()+0xa4>
c000dac2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dac7:	75 53                	jne    c000db1c <LogicalDisk::assignDriveLetter()+0xa4>
c000dac9:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dacc:	ba 01 00 00 00       	mov    edx,0x1
c000dad1:	89 34 24             	mov    DWORD PTR [esp],esi
c000dad4:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dad7:	d3 e2                	shl    edx,cl
c000dad9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dadd:	89 d7                	mov    edi,edx
c000dadf:	89 d6                	mov    esi,edx
c000dae1:	c1 ff 1f             	sar    edi,0x1f
c000dae4:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dae8:	21 f9                	and    ecx,edi
c000daea:	09 d1                	or     ecx,edx
c000daec:	75 2e                	jne    c000db1c <LogicalDisk::assignDriveLetter()+0xa4>
c000daee:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000daf2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000daf6:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dafc:	09 f2                	or     edx,esi
c000dafe:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db01:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000db07:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000db0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000db12:	09 fa                	or     edx,edi
c000db14:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000db1a:	eb 0d                	jmp    c000db29 <LogicalDisk::assignDriveLetter()+0xb1>
c000db1c:	8d 50 01             	lea    edx,[eax+0x1]
c000db1f:	45                   	inc    ebp
c000db20:	88 d0                	mov    al,dl
c000db22:	80 fa 5b             	cmp    dl,0x5b
c000db25:	75 8e                	jne    c000dab5 <LogicalDisk::assignDriveLetter()+0x3d>
c000db27:	31 c0                	xor    eax,eax
c000db29:	83 c4 14             	add    esp,0x14
c000db2c:	5b                   	pop    ebx
c000db2d:	5e                   	pop    esi
c000db2e:	5f                   	pop    edi
c000db2f:	5d                   	pop    ebp
c000db30:	c3                   	ret    
c000db31:	90                   	nop

c000db32 <LogicalDisk::mount()>:
c000db32:	56                   	push   esi
c000db33:	53                   	push   ebx
c000db34:	53                   	push   ebx
c000db35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db39:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000db3f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000db49:	85 db                	test   ebx,ebx
c000db4b:	74 27                	je     c000db74 <LogicalDisk::mount()+0x42>
c000db4d:	51                   	push   ecx
c000db4e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000db55:	8b 13                	mov    edx,DWORD PTR [ebx]
c000db57:	83 e8 41             	sub    eax,0x41
c000db5a:	50                   	push   eax
c000db5b:	56                   	push   esi
c000db5c:	53                   	push   ebx
c000db5d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000db60:	83 c4 10             	add    esp,0x10
c000db63:	84 c0                	test   al,al
c000db65:	74 08                	je     c000db6f <LogicalDisk::mount()+0x3d>
c000db67:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000db6d:	eb 07                	jmp    c000db76 <LogicalDisk::mount()+0x44>
c000db6f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000db72:	eb d5                	jmp    c000db49 <LogicalDisk::mount()+0x17>
c000db74:	31 c0                	xor    eax,eax
c000db76:	5a                   	pop    edx
c000db77:	5b                   	pop    ebx
c000db78:	5e                   	pop    esi
c000db79:	c3                   	ret    

c000db7a <LogicalDisk::unmount()>:
c000db7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db7e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000db88:	c3                   	ret    
c000db89:	90                   	nop

c000db8a <LogicalDisk::eject()>:
c000db8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db8e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000db94:	8b 10                	mov    edx,DWORD PTR [eax]
c000db96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db9a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000db9d:	90                   	nop

c000db9e <LogicalDisk::unassignDriveLetter()>:
c000db9e:	57                   	push   edi
c000db9f:	56                   	push   esi
c000dba0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dba4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dbab:	85 c9                	test   ecx,ecx
c000dbad:	75 0f                	jne    c000dbbe <LogicalDisk::unassignDriveLetter()+0x20>
c000dbaf:	c7 44 24 0c 8c 1a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021a8c
c000dbb7:	5e                   	pop    esi
c000dbb8:	5f                   	pop    edi
c000dbb9:	e9 ad 38 00 00       	jmp    c001146b <KePanic(char const*)>
c000dbbe:	83 e9 41             	sub    ecx,0x41
c000dbc1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dbc8:	b8 01 00 00 00       	mov    eax,0x1
c000dbcd:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dbd8:	d3 e0                	shl    eax,cl
c000dbda:	89 c7                	mov    edi,eax
c000dbdc:	f7 d0                	not    eax
c000dbde:	c1 ff 1f             	sar    edi,0x1f
c000dbe1:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dbe7:	89 fe                	mov    esi,edi
c000dbe9:	f7 d6                	not    esi
c000dbeb:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dbf1:	5e                   	pop    esi
c000dbf2:	5f                   	pop    edi
c000dbf3:	c3                   	ret    

c000dbf4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000dbf4:	57                   	push   edi
c000dbf5:	56                   	push   esi
c000dbf6:	53                   	push   ebx
c000dbf7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dbfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dc03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dc07:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dc0d:	77 41                	ja     c000dc50 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dc0f:	99                   	cdq    
c000dc10:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dc16:	01 c8                	add    eax,ecx
c000dc18:	11 da                	adc    edx,ebx
c000dc1a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dc20:	19 d7                	sbb    edi,edx
c000dc22:	72 33                	jb     c000dc57 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000dc24:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dc2a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dc30:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dc34:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dc38:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dc3e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dc44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc48:	5b                   	pop    ebx
c000dc49:	5e                   	pop    esi
c000dc4a:	5f                   	pop    edi
c000dc4b:	e9 c6 0a 00 00       	jmp    c000e716 <VCache::read(unsigned long long, int, void*)>
c000dc50:	b8 05 00 00 00       	mov    eax,0x5
c000dc55:	eb 05                	jmp    c000dc5c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000dc57:	b8 07 00 00 00       	mov    eax,0x7
c000dc5c:	5b                   	pop    ebx
c000dc5d:	5e                   	pop    esi
c000dc5e:	5f                   	pop    edi
c000dc5f:	c3                   	ret    

c000dc60 <LogicalDisk::write(unsigned long long, int, void*)>:
c000dc60:	57                   	push   edi
c000dc61:	56                   	push   esi
c000dc62:	53                   	push   ebx
c000dc63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dc67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dc6b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dc6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dc73:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dc79:	77 41                	ja     c000dcbc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000dc7b:	99                   	cdq    
c000dc7c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dc82:	01 c8                	add    eax,ecx
c000dc84:	11 da                	adc    edx,ebx
c000dc86:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dc8c:	19 d7                	sbb    edi,edx
c000dc8e:	72 33                	jb     c000dcc3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dc90:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dc96:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dc9c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dca0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dca4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dcaa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dcb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcb4:	5b                   	pop    ebx
c000dcb5:	5e                   	pop    esi
c000dcb6:	5f                   	pop    edi
c000dcb7:	e9 6c 09 00 00       	jmp    c000e628 <VCache::write(unsigned long long, int, void*)>
c000dcbc:	b8 05 00 00 00       	mov    eax,0x5
c000dcc1:	eb 05                	jmp    c000dcc8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dcc3:	b8 07 00 00 00       	mov    eax,0x7
c000dcc8:	5b                   	pop    ebx
c000dcc9:	5e                   	pop    esi
c000dcca:	5f                   	pop    edi
c000dccb:	c3                   	ret    

c000dccc <Mouse::Mouse(char const*)>:
c000dccc:	83 ec 0c             	sub    esp,0xc
c000dccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcd3:	83 ec 08             	sub    esp,0x8
c000dcd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcda:	50                   	push   eax
c000dcdb:	e8 ca ec ff ff       	call   c000c9aa <Device::Device(char const*)>
c000dce0:	83 c4 10             	add    esp,0x10
c000dce3:	ba e0 1a 02 c0       	mov    edx,0xc0021ae0
c000dce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcec:	89 10                	mov    DWORD PTR [eax],edx
c000dcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dcfc:	90                   	nop
c000dcfd:	83 c4 0c             	add    esp,0xc
c000dd00:	c3                   	ret    
c000dd01:	90                   	nop
c000dd02:	66 90                	xchg   ax,ax

c000dd04 <Mouse::~Mouse()>:
c000dd04:	83 ec 0c             	sub    esp,0xc
c000dd07:	ba e0 1a 02 c0       	mov    edx,0xc0021ae0
c000dd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd10:	89 10                	mov    DWORD PTR [eax],edx
c000dd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd16:	83 ec 0c             	sub    esp,0xc
c000dd19:	50                   	push   eax
c000dd1a:	e8 f5 e9 ff ff       	call   c000c714 <Device::~Device()>
c000dd1f:	83 c4 10             	add    esp,0x10
c000dd22:	90                   	nop
c000dd23:	83 c4 0c             	add    esp,0xc
c000dd26:	c3                   	ret    
c000dd27:	90                   	nop

c000dd28 <Mouse::~Mouse()>:
c000dd28:	83 ec 0c             	sub    esp,0xc
c000dd2b:	83 ec 0c             	sub    esp,0xc
c000dd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd32:	e8 cd ff ff ff       	call   c000dd04 <Mouse::~Mouse()>
c000dd37:	83 c4 10             	add    esp,0x10
c000dd3a:	83 ec 08             	sub    esp,0x8
c000dd3d:	68 58 01 00 00       	push   0x158
c000dd42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd46:	e8 cd ca ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dd4b:	83 c4 10             	add    esp,0x10
c000dd4e:	83 c4 0c             	add    esp,0xc
c000dd51:	c3                   	ret    

c000dd52 <NIC::getMAC()>:
c000dd52:	31 c0                	xor    eax,eax
c000dd54:	31 d2                	xor    edx,edx
c000dd56:	c3                   	ret    
c000dd57:	90                   	nop

c000dd58 <NIC::write(int, unsigned char*, int*)>:
c000dd58:	b8 01 00 00 00       	mov    eax,0x1
c000dd5d:	c3                   	ret    

c000dd5e <NIC::NIC(char const*)>:
c000dd5e:	83 ec 0c             	sub    esp,0xc
c000dd61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd65:	83 ec 08             	sub    esp,0x8
c000dd68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd6c:	50                   	push   eax
c000dd6d:	e8 38 ec ff ff       	call   c000c9aa <Device::Device(char const*)>
c000dd72:	83 c4 10             	add    esp,0x10
c000dd75:	ba 0c 1b 02 c0       	mov    edx,0xc0021b0c
c000dd7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd7e:	89 10                	mov    DWORD PTR [eax],edx
c000dd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd84:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dd8e:	90                   	nop
c000dd8f:	83 c4 0c             	add    esp,0xc
c000dd92:	c3                   	ret    
c000dd93:	90                   	nop

c000dd94 <NIC::~NIC()>:
c000dd94:	83 ec 0c             	sub    esp,0xc
c000dd97:	ba 0c 1b 02 c0       	mov    edx,0xc0021b0c
c000dd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dda0:	89 10                	mov    DWORD PTR [eax],edx
c000dda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dda6:	83 ec 0c             	sub    esp,0xc
c000dda9:	50                   	push   eax
c000ddaa:	e8 65 e9 ff ff       	call   c000c714 <Device::~Device()>
c000ddaf:	83 c4 10             	add    esp,0x10
c000ddb2:	90                   	nop
c000ddb3:	83 c4 0c             	add    esp,0xc
c000ddb6:	c3                   	ret    
c000ddb7:	90                   	nop

c000ddb8 <NIC::~NIC()>:
c000ddb8:	83 ec 0c             	sub    esp,0xc
c000ddbb:	83 ec 0c             	sub    esp,0xc
c000ddbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc2:	e8 cd ff ff ff       	call   c000dd94 <NIC::~NIC()>
c000ddc7:	83 c4 10             	add    esp,0x10
c000ddca:	83 ec 08             	sub    esp,0x8
c000ddcd:	68 58 01 00 00       	push   0x158
c000ddd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd6:	e8 3d ca ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dddb:	83 c4 10             	add    esp,0x10
c000ddde:	83 c4 0c             	add    esp,0xc
c000dde1:	c3                   	ret    

c000dde2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dde2:	55                   	push   ebp
c000dde3:	57                   	push   edi
c000dde4:	56                   	push   esi
c000dde5:	53                   	push   ebx
c000dde6:	81 ec 28 01 00 00    	sub    esp,0x128
c000ddec:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ddf3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ddfa:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000de01:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000de08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000de0c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000de10:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000de17:	e8 8a ec ff ff       	call   c000caa6 <Device::getName()>
c000de1c:	5a                   	pop    edx
c000de1d:	59                   	pop    ecx
c000de1e:	50                   	push   eax
c000de1f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000de23:	55                   	push   ebp
c000de24:	e8 17 28 ff ff       	call   c0000640 <strcpy>
c000de29:	5b                   	pop    ebx
c000de2a:	58                   	pop    eax
c000de2b:	68 38 1b 02 c0       	push   0xc0021b38
c000de30:	55                   	push   ebp
c000de31:	e8 0a 2a ff ff       	call   c0000840 <strcat>
c000de36:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000de3d:	e8 74 9c ff ff       	call   c0007ab6 <malloc>
c000de42:	83 c4 0c             	add    esp,0xc
c000de45:	89 c3                	mov    ebx,eax
c000de47:	57                   	push   edi
c000de48:	56                   	push   esi
c000de49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de51:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000de58:	55                   	push   ebp
c000de59:	50                   	push   eax
c000de5a:	e8 59 fb ff ff       	call   c000d9b8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000de5f:	83 c4 14             	add    esp,0x14
c000de62:	53                   	push   ebx
c000de63:	e8 10 fc ff ff       	call   c000da78 <LogicalDisk::assignDriveLetter()>
c000de68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000de6b:	e8 c2 fc ff ff       	call   c000db32 <LogicalDisk::mount()>
c000de70:	58                   	pop    eax
c000de71:	5a                   	pop    edx
c000de72:	53                   	push   ebx
c000de73:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000de7a:	e8 93 e9 ff ff       	call   c000c812 <Device::addChild(Device*)>
c000de7f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000de85:	5b                   	pop    ebx
c000de86:	5e                   	pop    esi
c000de87:	5f                   	pop    edi
c000de88:	5d                   	pop    ebp
c000de89:	c3                   	ret    

c000de8a <createPartitionsForDisk(PhysicalDisk*)>:
c000de8a:	55                   	push   ebp
c000de8b:	57                   	push   edi
c000de8c:	56                   	push   esi
c000de8d:	53                   	push   ebx
c000de8e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000de94:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000de9b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dea1:	3d 00 02 00 00       	cmp    eax,0x200
c000dea6:	74 27                	je     c000decf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dea8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000deae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000deb4:	83 ec 10             	sub    esp,0x10
c000deb7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000debb:	99                   	cdq    
c000debc:	c1 e6 0a             	shl    esi,0xa
c000debf:	52                   	push   edx
c000dec0:	89 fd                	mov    ebp,edi
c000dec2:	50                   	push   eax
c000dec3:	55                   	push   ebp
c000dec4:	56                   	push   esi
c000dec5:	e8 76 16 01 00       	call   c001f540 <__udivdi3>
c000deca:	e9 b9 00 00 00       	jmp    c000df88 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000decf:	83 ec 0c             	sub    esp,0xc
c000ded2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ded4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ded8:	56                   	push   esi
c000ded9:	6a 01                	push   0x1
c000dedb:	6a 00                	push   0x0
c000dedd:	6a 00                	push   0x0
c000dedf:	53                   	push   ebx
c000dee0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dee3:	83 c4 20             	add    esp,0x20
c000dee6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000deee:	75 0a                	jne    c000defa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000def0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000def8:	74 2c                	je     c000df26 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000defa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df00:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000df06:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000df0c:	83 ec 10             	sub    esp,0x10
c000df0f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000df13:	89 f7                	mov    edi,esi
c000df15:	c1 e0 0a             	shl    eax,0xa
c000df18:	c1 ff 1f             	sar    edi,0x1f
c000df1b:	57                   	push   edi
c000df1c:	56                   	push   esi
c000df1d:	52                   	push   edx
c000df1e:	50                   	push   eax
c000df1f:	e8 1c 16 01 00       	call   c001f540 <__udivdi3>
c000df24:	eb 62                	jmp    c000df88 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000df26:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000df2d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000df34:	89 cf                	mov    edi,ecx
c000df36:	83 e2 7f             	and    edx,0x7f
c000df39:	83 e7 7f             	and    edi,0x7f
c000df3c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000df43:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000df46:	83 e0 7f             	and    eax,0x7f
c000df49:	8d 14 01             	lea    edx,[ecx+eax*1]
c000df4c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000df53:	83 e0 7f             	and    eax,0x7f
c000df56:	01 d0                	add    eax,edx
c000df58:	89 c5                	mov    ebp,eax
c000df5a:	84 c0                	test   al,al
c000df5c:	74 41                	je     c000df9f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000df5e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df64:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000df6a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000df70:	83 ec 10             	sub    esp,0x10
c000df73:	0f a4 c2 0a          	shld   edx,eax,0xa
c000df77:	89 f7                	mov    edi,esi
c000df79:	c1 e0 0a             	shl    eax,0xa
c000df7c:	c1 ff 1f             	sar    edi,0x1f
c000df7f:	57                   	push   edi
c000df80:	56                   	push   esi
c000df81:	52                   	push   edx
c000df82:	50                   	push   eax
c000df83:	e8 b8 15 01 00       	call   c001f540 <__udivdi3>
c000df88:	83 c4 14             	add    esp,0x14
c000df8b:	52                   	push   edx
c000df8c:	50                   	push   eax
c000df8d:	6a 00                	push   0x0
c000df8f:	6a 00                	push   0x0
c000df91:	53                   	push   ebx
c000df92:	e8 4b fe ff ff       	call   c000dde2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000df97:	83 c4 20             	add    esp,0x20
c000df9a:	e9 73 01 00 00       	jmp    c000e112 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000df9f:	89 f0                	mov    eax,esi
c000dfa1:	31 c9                	xor    ecx,ecx
c000dfa3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dfaa:	75 02                	jne    c000dfae <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dfac:	89 cd                	mov    ebp,ecx
c000dfae:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000dfb5:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000dfbc:	c1 e2 08             	shl    edx,0x8
c000dfbf:	c1 e6 10             	shl    esi,0x10
c000dfc2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000dfca:	09 f2                	or     edx,esi
c000dfcc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000dfd4:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000dfdb:	83 c0 10             	add    eax,0x10
c000dfde:	09 f2                	or     edx,esi
c000dfe0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000dfe7:	c1 e6 18             	shl    esi,0x18
c000dfea:	09 f2                	or     edx,esi
c000dfec:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000dff3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000dff7:	c1 e6 10             	shl    esi,0x10
c000dffa:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e001:	c1 e2 08             	shl    edx,0x8
c000e004:	09 f2                	or     edx,esi
c000e006:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e00d:	09 f2                	or     edx,esi
c000e00f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e016:	c1 e6 18             	shl    esi,0x18
c000e019:	09 f2                	or     edx,esi
c000e01b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e01f:	41                   	inc    ecx
c000e020:	83 f9 04             	cmp    ecx,0x4
c000e023:	0f 85 7a ff ff ff    	jne    c000dfa3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e02d:	83 f0 01             	xor    eax,0x1
c000e030:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e034:	75 4f                	jne    c000e085 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e036:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e03a:	83 f0 01             	xor    eax,0x1
c000e03d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e041:	75 42                	jne    c000e085 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e043:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e04b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e053:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e059:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e05f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e065:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e069:	89 f7                	mov    edi,esi
c000e06b:	c1 e0 0a             	shl    eax,0xa
c000e06e:	c1 ff 1f             	sar    edi,0x1f
c000e071:	57                   	push   edi
c000e072:	56                   	push   esi
c000e073:	52                   	push   edx
c000e074:	50                   	push   eax
c000e075:	e8 c6 14 01 00       	call   c001f540 <__udivdi3>
c000e07a:	83 c4 10             	add    esp,0x10
c000e07d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e081:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e085:	89 e8                	mov    eax,ebp
c000e087:	0f b6 e8             	movzx  ebp,al
c000e08a:	85 ed                	test   ebp,ebp
c000e08c:	74 50                	je     c000e0de <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e08e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e092:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e096:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e09a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e09e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e0a6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e0aa:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e0ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0ba:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e0be:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e0c2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e0c6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e0ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e0ce:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e0d2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e0d6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e0da:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e0de:	31 ed                	xor    ebp,ebp
c000e0e0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e0e4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e0e8:	89 f8                	mov    eax,edi
c000e0ea:	09 f0                	or     eax,esi
c000e0ec:	74 1e                	je     c000e10c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e0ee:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e0f2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e0f6:	89 d1                	mov    ecx,edx
c000e0f8:	09 c1                	or     ecx,eax
c000e0fa:	74 10                	je     c000e10c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e0fc:	83 ec 0c             	sub    esp,0xc
c000e0ff:	57                   	push   edi
c000e100:	56                   	push   esi
c000e101:	52                   	push   edx
c000e102:	50                   	push   eax
c000e103:	53                   	push   ebx
c000e104:	e8 d9 fc ff ff       	call   c000dde2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e109:	83 c4 20             	add    esp,0x20
c000e10c:	45                   	inc    ebp
c000e10d:	83 fd 04             	cmp    ebp,0x4
c000e110:	75 ce                	jne    c000e0e0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e112:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e118:	5b                   	pop    ebx
c000e119:	5e                   	pop    esi
c000e11a:	5f                   	pop    edi
c000e11b:	5d                   	pop    ebp
c000e11c:	c3                   	ret    
c000e11d:	66 90                	xchg   ax,ax
c000e11f:	90                   	nop

c000e120 <Serial::Serial(char const*)>:
c000e120:	83 ec 0c             	sub    esp,0xc
c000e123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e127:	83 ec 08             	sub    esp,0x8
c000e12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e12e:	50                   	push   eax
c000e12f:	e8 76 e8 ff ff       	call   c000c9aa <Device::Device(char const*)>
c000e134:	83 c4 10             	add    esp,0x10
c000e137:	ba 4c 1b 02 c0       	mov    edx,0xc0021b4c
c000e13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e140:	89 10                	mov    DWORD PTR [eax],edx
c000e142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e146:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e150:	90                   	nop
c000e151:	83 c4 0c             	add    esp,0xc
c000e154:	c3                   	ret    
c000e155:	90                   	nop
c000e156:	66 90                	xchg   ax,ax

c000e158 <Serial::~Serial()>:
c000e158:	83 ec 0c             	sub    esp,0xc
c000e15b:	ba 4c 1b 02 c0       	mov    edx,0xc0021b4c
c000e160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e164:	89 10                	mov    DWORD PTR [eax],edx
c000e166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e16a:	83 ec 0c             	sub    esp,0xc
c000e16d:	50                   	push   eax
c000e16e:	e8 a1 e5 ff ff       	call   c000c714 <Device::~Device()>
c000e173:	83 c4 10             	add    esp,0x10
c000e176:	90                   	nop
c000e177:	83 c4 0c             	add    esp,0xc
c000e17a:	c3                   	ret    
c000e17b:	90                   	nop

c000e17c <Serial::~Serial()>:
c000e17c:	83 ec 0c             	sub    esp,0xc
c000e17f:	83 ec 0c             	sub    esp,0xc
c000e182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e186:	e8 cd ff ff ff       	call   c000e158 <Serial::~Serial()>
c000e18b:	83 c4 10             	add    esp,0x10
c000e18e:	83 ec 08             	sub    esp,0x8
c000e191:	68 58 01 00 00       	push   0x158
c000e196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e19a:	e8 79 c6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	83 c4 0c             	add    esp,0xc
c000e1a5:	c3                   	ret    
c000e1a6:	66 90                	xchg   ax,ax

c000e1a8 <Timer::Timer(char const*)>:
c000e1a8:	83 ec 0c             	sub    esp,0xc
c000e1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1af:	83 ec 08             	sub    esp,0x8
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	50                   	push   eax
c000e1b7:	e8 ee e7 ff ff       	call   c000c9aa <Device::Device(char const*)>
c000e1bc:	83 c4 10             	add    esp,0x10
c000e1bf:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000e1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1c8:	89 10                	mov    DWORD PTR [eax],edx
c000e1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1ce:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e1d8:	90                   	nop
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    
c000e1dd:	90                   	nop
c000e1de:	66 90                	xchg   ax,ax

c000e1e0 <Timer::~Timer()>:
c000e1e0:	83 ec 0c             	sub    esp,0xc
c000e1e3:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000e1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1ec:	89 10                	mov    DWORD PTR [eax],edx
c000e1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1f2:	83 ec 0c             	sub    esp,0xc
c000e1f5:	50                   	push   eax
c000e1f6:	e8 19 e5 ff ff       	call   c000c714 <Device::~Device()>
c000e1fb:	83 c4 10             	add    esp,0x10
c000e1fe:	90                   	nop
c000e1ff:	83 c4 0c             	add    esp,0xc
c000e202:	c3                   	ret    
c000e203:	90                   	nop

c000e204 <Timer::~Timer()>:
c000e204:	83 ec 0c             	sub    esp,0xc
c000e207:	83 ec 0c             	sub    esp,0xc
c000e20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20e:	e8 cd ff ff ff       	call   c000e1e0 <Timer::~Timer()>
c000e213:	83 c4 10             	add    esp,0x10
c000e216:	83 ec 08             	sub    esp,0x8
c000e219:	68 5c 01 00 00       	push   0x15c
c000e21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e222:	e8 f1 c5 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e227:	83 c4 10             	add    esp,0x10
c000e22a:	83 c4 0c             	add    esp,0xc
c000e22d:	c3                   	ret    

c000e22e <Timer::read()>:
c000e22e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e232:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e238:	c3                   	ret    

c000e239 <setupTimer(int)>:
c000e239:	53                   	push   ebx
c000e23a:	83 ec 14             	sub    esp,0x14
c000e23d:	68 5c 01 00 00       	push   0x15c
c000e242:	e8 6f 98 ff ff       	call   c0007ab6 <malloc>
c000e247:	89 04 24             	mov    DWORD PTR [esp],eax
c000e24a:	89 c3                	mov    ebx,eax
c000e24c:	e8 5b 0b 01 00       	call   c001edac <PIT::PIT()>
c000e251:	58                   	pop    eax
c000e252:	5a                   	pop    edx
c000e253:	53                   	push   ebx
c000e254:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e25a:	e8 b3 e5 ff ff       	call   c000c812 <Device::addChild(Device*)>
c000e25f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e261:	6a 00                	push   0x0
c000e263:	6a 00                	push   0x0
c000e265:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e269:	53                   	push   ebx
c000e26a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e26d:	89 d8                	mov    eax,ebx
c000e26f:	83 c4 28             	add    esp,0x28
c000e272:	5b                   	pop    ebx
c000e273:	c3                   	ret    

c000e274 <timerHandler(unsigned int)>:
c000e274:	56                   	push   esi
c000e275:	53                   	push   ebx
c000e276:	51                   	push   ecx
c000e277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e27b:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e281:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e288:	0f 84 4a 01 00 00    	je     c000e3d8 <timerHandler(unsigned int)+0x164>
c000e28e:	fa                   	cli    
c000e28f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e295:	83 ec 0c             	sub    esp,0xc
c000e298:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e29e:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e2a3:	e8 68 18 01 00       	call   c001fb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e2a8:	83 c4 10             	add    esp,0x10
c000e2ab:	84 c0                	test   al,al
c000e2ad:	0f 85 a1 00 00 00    	jne    c000e354 <timerHandler(unsigned int)+0xe0>
c000e2b3:	83 ec 0c             	sub    esp,0xc
c000e2b6:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e2bb:	e8 6c 18 01 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e2c0:	83 c4 10             	add    esp,0x10
c000e2c3:	89 c6                	mov    esi,eax
c000e2c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2c8:	83 ec 0c             	sub    esp,0xc
c000e2cb:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e2d0:	e8 57 18 01 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e2d5:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e2dc:	89 c3                	mov    ebx,eax
c000e2de:	e8 51 18 01 00       	call   c001fb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e2e3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e2e6:	83 c4 10             	add    esp,0x10
c000e2e9:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e2ef:	77 23                	ja     c000e314 <timerHandler(unsigned int)+0xa0>
c000e2f1:	83 ec 0c             	sub    esp,0xc
c000e2f4:	53                   	push   ebx
c000e2f5:	e8 ee 80 00 00       	call   c00163e8 <unblockTask(ThreadControlBlock*)>
c000e2fa:	83 c4 10             	add    esp,0x10
c000e2fd:	39 de                	cmp    esi,ebx
c000e2ff:	75 27                	jne    c000e328 <timerHandler(unsigned int)+0xb4>
c000e301:	83 ec 0c             	sub    esp,0xc
c000e304:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e309:	e8 1e 18 01 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e30e:	89 c6                	mov    esi,eax
c000e310:	eb 12                	jmp    c000e324 <timerHandler(unsigned int)+0xb0>
c000e312:	66 90                	xchg   ax,ax
c000e314:	52                   	push   edx
c000e315:	52                   	push   edx
c000e316:	53                   	push   ebx
c000e317:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e31c:	e8 cf 18 01 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e321:	8d 76 00             	lea    esi,[esi+0x0]
c000e324:	83 c4 10             	add    esp,0x10
c000e327:	90                   	nop
c000e328:	83 ec 0c             	sub    esp,0xc
c000e32b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e330:	e8 db 17 01 00       	call   c001fb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e335:	83 c4 10             	add    esp,0x10
c000e338:	84 c0                	test   al,al
c000e33a:	75 18                	jne    c000e354 <timerHandler(unsigned int)+0xe0>
c000e33c:	83 ec 0c             	sub    esp,0xc
c000e33f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e344:	e8 e3 17 01 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e349:	83 c4 10             	add    esp,0x10
c000e34c:	39 f0                	cmp    eax,esi
c000e34e:	0f 85 74 ff ff ff    	jne    c000e2c8 <timerHandler(unsigned int)+0x54>
c000e354:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e359:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e35d:	74 41                	je     c000e3a0 <timerHandler(unsigned int)+0x12c>
c000e35f:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e366:	74 38                	je     c000e3a0 <timerHandler(unsigned int)+0x12c>
c000e368:	fa                   	cli    
c000e369:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e36f:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e374:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e37a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e37d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e383:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e386:	72 08                	jb     c000e390 <timerHandler(unsigned int)+0x11c>
c000e388:	e8 43 7b 00 00       	call   c0015ed0 <schedule()>
c000e38d:	8d 76 00             	lea    esi,[esi+0x0]
c000e390:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e395:	48                   	dec    eax
c000e396:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e39b:	75 03                	jne    c000e3a0 <timerHandler(unsigned int)+0x12c>
c000e39d:	fb                   	sti    
c000e39e:	66 90                	xchg   ax,ax
c000e3a0:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e3a5:	48                   	dec    eax
c000e3a6:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e3ab:	75 1b                	jne    c000e3c8 <timerHandler(unsigned int)+0x154>
c000e3ad:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e3b4:	74 12                	je     c000e3c8 <timerHandler(unsigned int)+0x154>
c000e3b6:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e3c0:	e8 0b 7b 00 00       	call   c0015ed0 <schedule()>
c000e3c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3c8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e3cd:	48                   	dec    eax
c000e3ce:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e3d3:	75 03                	jne    c000e3d8 <timerHandler(unsigned int)+0x164>
c000e3d5:	fb                   	sti    
c000e3d6:	66 90                	xchg   ax,ax
c000e3d8:	58                   	pop    eax
c000e3d9:	5b                   	pop    ebx
c000e3da:	5e                   	pop    esi
c000e3db:	c3                   	ret    

c000e3dc <VCache::VCache(PhysicalDisk*)>:
c000e3dc:	53                   	push   ebx
c000e3dd:	83 ec 18             	sub    esp,0x18
c000e3e0:	ba c0 1b 02 c0       	mov    edx,0xc0021bc0
c000e3e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3e9:	89 10                	mov    DWORD PTR [eax],edx
c000e3eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ef:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e3f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3fa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e401:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e405:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e40c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e417:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e41e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e429:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e430:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e434:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e43c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e443:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e44a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e44e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e456:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e45a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e45e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e466:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e46d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e475:	83 ec 0c             	sub    esp,0xc
c000e478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e47c:	e8 35 96 ff ff       	call   c0007ab6 <malloc>
c000e481:	83 c4 10             	add    esp,0x10
c000e484:	89 c3                	mov    ebx,eax
c000e486:	83 ec 0c             	sub    esp,0xc
c000e489:	53                   	push   ebx
c000e48a:	e8 dd 77 00 00       	call   c0015c6c <Mutex::Mutex()>
c000e48f:	83 c4 10             	add    esp,0x10
c000e492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e496:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e49d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e4a1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e4a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4a8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e4af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e4b3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e4c4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e4ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e4d4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e4d7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e4da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4de:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e4e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e4e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e4ec:	05 00 02 00 00       	add    eax,0x200
c000e4f1:	c1 e0 03             	shl    eax,0x3
c000e4f4:	83 ec 0c             	sub    esp,0xc
c000e4f7:	50                   	push   eax
c000e4f8:	e8 b9 95 ff ff       	call   c0007ab6 <malloc>
c000e4fd:	83 c4 10             	add    esp,0x10
c000e500:	89 c2                	mov    edx,eax
c000e502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e506:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e50d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e518:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e51c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e520:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e526:	89 d0                	mov    eax,edx
c000e528:	c1 e0 02             	shl    eax,0x2
c000e52b:	01 d0                	add    eax,edx
c000e52d:	c1 e0 04             	shl    eax,0x4
c000e530:	83 ec 0c             	sub    esp,0xc
c000e533:	50                   	push   eax
c000e534:	e8 7d 95 ff ff       	call   c0007ab6 <malloc>
c000e539:	83 c4 10             	add    esp,0x10
c000e53c:	89 c2                	mov    edx,eax
c000e53e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e542:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e545:	90                   	nop
c000e546:	83 c4 18             	add    esp,0x18
c000e549:	5b                   	pop    ebx
c000e54a:	c3                   	ret    
c000e54b:	90                   	nop

c000e54c <VCache::invalidateReadBuffer()>:
c000e54c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e550:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e556:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e55a:	c3                   	ret    
c000e55b:	90                   	nop

c000e55c <VCache::writeWriteBuffer()>:
c000e55c:	53                   	push   ebx
c000e55d:	83 ec 08             	sub    esp,0x8
c000e560:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e564:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e568:	74 1e                	je     c000e588 <VCache::writeWriteBuffer()+0x2c>
c000e56a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e56d:	83 ec 0c             	sub    esp,0xc
c000e570:	8b 10                	mov    edx,DWORD PTR [eax]
c000e572:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e575:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e578:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e57b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e57e:	50                   	push   eax
c000e57f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e582:	83 c4 20             	add    esp,0x20
c000e585:	8d 76 00             	lea    esi,[esi+0x0]
c000e588:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e58f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e596:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e59a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e5a1:	83 c4 08             	add    esp,0x8
c000e5a4:	5b                   	pop    ebx
c000e5a5:	c3                   	ret    
c000e5a6:	66 90                	xchg   ax,ax

c000e5a8 <VCache::~VCache()>:
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	ba c0 1b 02 c0       	mov    edx,0xc0021bc0
c000e5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5b4:	89 10                	mov    DWORD PTR [eax],edx
c000e5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ba:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e5bd:	0f b6 c0             	movzx  eax,al
c000e5c0:	85 c0                	test   eax,eax
c000e5c2:	74 10                	je     c000e5d4 <VCache::~VCache()+0x2c>
c000e5c4:	83 ec 0c             	sub    esp,0xc
c000e5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5cb:	e8 8c ff ff ff       	call   c000e55c <VCache::writeWriteBuffer()>
c000e5d0:	83 c4 10             	add    esp,0x10
c000e5d3:	90                   	nop
c000e5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e5db:	83 ec 0c             	sub    esp,0xc
c000e5de:	50                   	push   eax
c000e5df:	e8 e2 94 ff ff       	call   c0007ac6 <free>
c000e5e4:	83 c4 10             	add    esp,0x10
c000e5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e5ee:	83 ec 0c             	sub    esp,0xc
c000e5f1:	50                   	push   eax
c000e5f2:	e8 cf 94 ff ff       	call   c0007ac6 <free>
c000e5f7:	83 c4 10             	add    esp,0x10
c000e5fa:	90                   	nop
c000e5fb:	83 c4 0c             	add    esp,0xc
c000e5fe:	c3                   	ret    
c000e5ff:	90                   	nop

c000e600 <VCache::~VCache()>:
c000e600:	83 ec 0c             	sub    esp,0xc
c000e603:	83 ec 0c             	sub    esp,0xc
c000e606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60a:	e8 99 ff ff ff       	call   c000e5a8 <VCache::~VCache()>
c000e60f:	83 c4 10             	add    esp,0x10
c000e612:	83 ec 08             	sub    esp,0x8
c000e615:	6a 44                	push   0x44
c000e617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e61b:	e8 f8 c1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e620:	83 c4 10             	add    esp,0x10
c000e623:	83 c4 0c             	add    esp,0xc
c000e626:	c3                   	ret    
c000e627:	90                   	nop

c000e628 <VCache::write(unsigned long long, int, void*)>:
c000e628:	55                   	push   ebp
c000e629:	57                   	push   edi
c000e62a:	56                   	push   esi
c000e62b:	53                   	push   ebx
c000e62c:	83 ec 1c             	sub    esp,0x1c
c000e62f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e633:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e637:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e63b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e63f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e643:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e647:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e64b:	74 07                	je     c000e654 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e64d:	53                   	push   ebx
c000e64e:	e8 f9 fe ff ff       	call   c000e54c <VCache::invalidateReadBuffer()>
c000e653:	58                   	pop    eax
c000e654:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e658:	74 62                	je     c000e6bc <VCache::write(unsigned long long, int, void*)+0x94>
c000e65a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e65d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e661:	99                   	cdq    
c000e662:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e666:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e669:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e66c:	31 c1                	xor    ecx,eax
c000e66e:	89 d0                	mov    eax,edx
c000e670:	89 ca                	mov    edx,ecx
c000e672:	31 e8                	xor    eax,ebp
c000e674:	09 c2                	or     edx,eax
c000e676:	75 38                	jne    c000e6b0 <VCache::write(unsigned long long, int, void*)+0x88>
c000e678:	83 ff 01             	cmp    edi,0x1
c000e67b:	75 33                	jne    c000e6b0 <VCache::write(unsigned long long, int, void*)+0x88>
c000e67d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e680:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e684:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e68a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e68d:	0f af c8             	imul   ecx,eax
c000e690:	01 cf                	add    edi,ecx
c000e692:	89 c1                	mov    ecx,eax
c000e694:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e696:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e699:	40                   	inc    eax
c000e69a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e69d:	83 f8 50             	cmp    eax,0x50
c000e6a0:	75 6a                	jne    c000e70c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e6a2:	83 ec 0c             	sub    esp,0xc
c000e6a5:	53                   	push   ebx
c000e6a6:	e8 b1 fe ff ff       	call   c000e55c <VCache::writeWriteBuffer()>
c000e6ab:	83 c4 10             	add    esp,0x10
c000e6ae:	eb 5c                	jmp    c000e70c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e6b0:	83 ec 0c             	sub    esp,0xc
c000e6b3:	53                   	push   ebx
c000e6b4:	e8 a3 fe ff ff       	call   c000e55c <VCache::writeWriteBuffer()>
c000e6b9:	83 c4 10             	add    esp,0x10
c000e6bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e6bf:	83 ff 4f             	cmp    edi,0x4f
c000e6c2:	7f 20                	jg     c000e6e4 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e6c4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e6c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e6cb:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e6ce:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e6d1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e6d5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e6d8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e6de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6e0:	eb 2a                	jmp    c000e70c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e6e2:	66 90                	xchg   ax,ax
c000e6e4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6e6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e6ea:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e6ee:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e6f2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e6f6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e6fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6fe:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e701:	83 c4 1c             	add    esp,0x1c
c000e704:	5b                   	pop    ebx
c000e705:	5e                   	pop    esi
c000e706:	5f                   	pop    edi
c000e707:	5d                   	pop    ebp
c000e708:	ff e0                	jmp    eax
c000e70a:	66 90                	xchg   ax,ax
c000e70c:	83 c4 1c             	add    esp,0x1c
c000e70f:	31 c0                	xor    eax,eax
c000e711:	5b                   	pop    ebx
c000e712:	5e                   	pop    esi
c000e713:	5f                   	pop    edi
c000e714:	5d                   	pop    ebp
c000e715:	c3                   	ret    

c000e716 <VCache::read(unsigned long long, int, void*)>:
c000e716:	55                   	push   ebp
c000e717:	57                   	push   edi
c000e718:	56                   	push   esi
c000e719:	53                   	push   ebx
c000e71a:	83 ec 1c             	sub    esp,0x1c
c000e71d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e721:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e725:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e729:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e72d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e731:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e735:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e739:	74 0d                	je     c000e748 <VCache::read(unsigned long long, int, void*)+0x32>
c000e73b:	83 ec 0c             	sub    esp,0xc
c000e73e:	57                   	push   edi
c000e73f:	e8 18 fe ff ff       	call   c000e55c <VCache::writeWriteBuffer()>
c000e744:	83 c4 10             	add    esp,0x10
c000e747:	90                   	nop
c000e748:	83 fd 01             	cmp    ebp,0x1
c000e74b:	0f 85 93 00 00 00    	jne    c000e7e4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e751:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e754:	89 04 24             	mov    DWORD PTR [esp],eax
c000e757:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e75e:	0f 85 80 00 00 00    	jne    c000e7e4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e764:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e767:	89 e9                	mov    ecx,ebp
c000e769:	f7 d9                	neg    ecx
c000e76b:	89 c8                	mov    eax,ecx
c000e76d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e771:	c1 f8 1f             	sar    eax,0x1f
c000e774:	21 d9                	and    ecx,ebx
c000e776:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e77a:	89 c8                	mov    eax,ecx
c000e77c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e780:	21 f1                	and    ecx,esi
c000e782:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e786:	89 ca                	mov    edx,ecx
c000e788:	74 2e                	je     c000e7b8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e78a:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e78d:	75 29                	jne    c000e7b8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e78f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e792:	75 24                	jne    c000e7b8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e794:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e797:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e79d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e7a0:	8d 70 ff             	lea    esi,[eax-0x1]
c000e7a3:	21 f3                	and    ebx,esi
c000e7a5:	0f af d9             	imul   ebx,ecx
c000e7a8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e7ab:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e7af:	89 de                	mov    esi,ebx
c000e7b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7b3:	31 c0                	xor    eax,eax
c000e7b5:	eb 61                	jmp    c000e818 <VCache::read(unsigned long long, int, void*)+0x102>
c000e7b7:	90                   	nop
c000e7b8:	83 ec 0c             	sub    esp,0xc
c000e7bb:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e7bf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e7c3:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e7c6:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e7c9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e7cb:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e7ce:	55                   	push   ebp
c000e7cf:	52                   	push   edx
c000e7d0:	50                   	push   eax
c000e7d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e7d8:	83 c4 20             	add    esp,0x20
c000e7db:	85 c0                	test   eax,eax
c000e7dd:	75 39                	jne    c000e818 <VCache::read(unsigned long long, int, void*)+0x102>
c000e7df:	eb b3                	jmp    c000e794 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e7e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7e4:	83 ec 0c             	sub    esp,0xc
c000e7e7:	57                   	push   edi
c000e7e8:	e8 5f fd ff ff       	call   c000e54c <VCache::invalidateReadBuffer()>
c000e7ed:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e7f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e7f4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e7f6:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e7fa:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e7fe:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e802:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e806:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e80a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e80d:	83 c4 2c             	add    esp,0x2c
c000e810:	5b                   	pop    ebx
c000e811:	5e                   	pop    esi
c000e812:	5f                   	pop    edi
c000e813:	5d                   	pop    ebp
c000e814:	ff e0                	jmp    eax
c000e816:	66 90                	xchg   ax,ax
c000e818:	83 c4 1c             	add    esp,0x1c
c000e81b:	5b                   	pop    ebx
c000e81c:	5e                   	pop    esi
c000e81d:	5f                   	pop    edi
c000e81e:	5d                   	pop    ebp
c000e81f:	c3                   	ret    

c000e820 <Video::putrect(int, int, int, int, unsigned int)>:
c000e820:	55                   	push   ebp
c000e821:	57                   	push   edi
c000e822:	56                   	push   esi
c000e823:	53                   	push   ebx
c000e824:	83 ec 1c             	sub    esp,0x1c
c000e827:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e82b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e82f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e833:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e837:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e83b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e83f:	01 df                	add    edi,ebx
c000e841:	39 fb                	cmp    ebx,edi
c000e843:	7d 1f                	jge    c000e864 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e845:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e849:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e84d:	7d 12                	jge    c000e861 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e84f:	8b 16                	mov    edx,DWORD PTR [esi]
c000e851:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e855:	53                   	push   ebx
c000e856:	55                   	push   ebp
c000e857:	45                   	inc    ebp
c000e858:	56                   	push   esi
c000e859:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e85c:	83 c4 10             	add    esp,0x10
c000e85f:	eb e8                	jmp    c000e849 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e861:	43                   	inc    ebx
c000e862:	eb dd                	jmp    c000e841 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e864:	83 c4 1c             	add    esp,0x1c
c000e867:	5b                   	pop    ebx
c000e868:	5e                   	pop    esi
c000e869:	5f                   	pop    edi
c000e86a:	5d                   	pop    ebp
c000e86b:	c3                   	ret    

c000e86c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e86c:	55                   	push   ebp
c000e86d:	57                   	push   edi
c000e86e:	31 ff                	xor    edi,edi
c000e870:	56                   	push   esi
c000e871:	53                   	push   ebx
c000e872:	83 ec 1c             	sub    esp,0x1c
c000e875:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e879:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e87d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e884:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e88d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e891:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e895:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e898:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e89c:	01 f9                	add    ecx,edi
c000e89e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e8a2:	7d 2f                	jge    c000e8d3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e8a4:	31 f6                	xor    esi,esi
c000e8a6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e8aa:	01 f2                	add    edx,esi
c000e8ac:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e8b0:	7d 1a                	jge    c000e8cc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e8b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e8b5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e8b8:	46                   	inc    esi
c000e8b9:	51                   	push   ecx
c000e8ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e8be:	52                   	push   edx
c000e8bf:	55                   	push   ebp
c000e8c0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8c3:	83 c4 10             	add    esp,0x10
c000e8c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8ca:	eb da                	jmp    c000e8a6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e8cc:	47                   	inc    edi
c000e8cd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e8d1:	eb c5                	jmp    c000e898 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e8d3:	83 c4 1c             	add    esp,0x1c
c000e8d6:	5b                   	pop    ebx
c000e8d7:	5e                   	pop    esi
c000e8d8:	5f                   	pop    edi
c000e8d9:	5d                   	pop    ebp
c000e8da:	c3                   	ret    
c000e8db:	90                   	nop

c000e8dc <Video::blit(unsigned int*, int, int, int, int)>:
c000e8dc:	55                   	push   ebp
c000e8dd:	57                   	push   edi
c000e8de:	56                   	push   esi
c000e8df:	53                   	push   ebx
c000e8e0:	83 ec 1c             	sub    esp,0x1c
c000e8e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e8eb:	85 c0                	test   eax,eax
c000e8ed:	79 02                	jns    c000e8f1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e8ef:	31 c0                	xor    eax,eax
c000e8f1:	c1 e0 02             	shl    eax,0x2
c000e8f4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e8f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e900:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e904:	39 d8                	cmp    eax,ebx
c000e906:	7e 49                	jle    c000e951 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e908:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e90e:	7c 41                	jl     c000e951 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e910:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e914:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e918:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e91c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e920:	39 f9                	cmp    ecx,edi
c000e922:	7e 22                	jle    c000e946 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e924:	83 c5 04             	add    ebp,0x4
c000e927:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e92d:	7c 14                	jl     c000e943 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e92f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e931:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e934:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e938:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e93c:	56                   	push   esi
c000e93d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e940:	83 c4 10             	add    esp,0x10
c000e943:	47                   	inc    edi
c000e944:	eb d2                	jmp    c000e918 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e946:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e94a:	43                   	inc    ebx
c000e94b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e94f:	eb ab                	jmp    c000e8fc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e951:	83 c4 1c             	add    esp,0x1c
c000e954:	5b                   	pop    ebx
c000e955:	5e                   	pop    esi
c000e956:	5f                   	pop    edi
c000e957:	5d                   	pop    ebp
c000e958:	c3                   	ret    
c000e959:	90                   	nop

c000e95a <Video::clearScreen(unsigned int)>:
c000e95a:	57                   	push   edi
c000e95b:	56                   	push   esi
c000e95c:	53                   	push   ebx
c000e95d:	31 db                	xor    ebx,ebx
c000e95f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e963:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e969:	7e 1f                	jle    c000e98a <Video::clearScreen(unsigned int)+0x30>
c000e96b:	31 ff                	xor    edi,edi
c000e96d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e973:	7e 12                	jle    c000e987 <Video::clearScreen(unsigned int)+0x2d>
c000e975:	8b 06                	mov    eax,DWORD PTR [esi]
c000e977:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e97b:	53                   	push   ebx
c000e97c:	57                   	push   edi
c000e97d:	47                   	inc    edi
c000e97e:	56                   	push   esi
c000e97f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e982:	83 c4 10             	add    esp,0x10
c000e985:	eb e6                	jmp    c000e96d <Video::clearScreen(unsigned int)+0x13>
c000e987:	43                   	inc    ebx
c000e988:	eb d9                	jmp    c000e963 <Video::clearScreen(unsigned int)+0x9>
c000e98a:	5b                   	pop    ebx
c000e98b:	5e                   	pop    esi
c000e98c:	5f                   	pop    edi
c000e98d:	c3                   	ret    

c000e98e <Video::putpixel(int, int, unsigned int)>:
c000e98e:	c7 44 24 04 c8 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bc8
c000e996:	e9 d0 2a 00 00       	jmp    c001146b <KePanic(char const*)>
c000e99b:	90                   	nop

c000e99c <Video::readPixelApprox(int, int)>:
c000e99c:	83 ec 18             	sub    esp,0x18
c000e99f:	68 e9 1b 02 c0       	push   0xc0021be9
c000e9a4:	e8 c2 2a 00 00       	call   c001146b <KePanic(char const*)>
c000e9a9:	31 c0                	xor    eax,eax
c000e9ab:	83 c4 1c             	add    esp,0x1c
c000e9ae:	c3                   	ret    
c000e9af:	90                   	nop

c000e9b0 <Video::Video(char const*)>:
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9b7:	83 ec 08             	sub    esp,0x8
c000e9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9be:	50                   	push   eax
c000e9bf:	e8 e6 df ff ff       	call   c000c9aa <Device::Device(char const*)>
c000e9c4:	83 c4 10             	add    esp,0x10
c000e9c7:	ba 64 1c 02 c0       	mov    edx,0xc0021c64
c000e9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9d0:	89 10                	mov    DWORD PTR [eax],edx
c000e9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9d6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e9e0:	90                   	nop
c000e9e1:	83 c4 0c             	add    esp,0xc
c000e9e4:	c3                   	ret    
c000e9e5:	90                   	nop

c000e9e6 <Video::~Video()>:
c000e9e6:	83 ec 0c             	sub    esp,0xc
c000e9e9:	ba 64 1c 02 c0       	mov    edx,0xc0021c64
c000e9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9f2:	89 10                	mov    DWORD PTR [eax],edx
c000e9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9f8:	83 ec 0c             	sub    esp,0xc
c000e9fb:	50                   	push   eax
c000e9fc:	e8 13 dd ff ff       	call   c000c714 <Device::~Device()>
c000ea01:	83 c4 10             	add    esp,0x10
c000ea04:	90                   	nop
c000ea05:	83 c4 0c             	add    esp,0xc
c000ea08:	c3                   	ret    
c000ea09:	90                   	nop

c000ea0a <Video::~Video()>:
c000ea0a:	83 ec 0c             	sub    esp,0xc
c000ea0d:	83 ec 0c             	sub    esp,0xc
c000ea10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea14:	e8 cd ff ff ff       	call   c000e9e6 <Video::~Video()>
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	83 ec 08             	sub    esp,0x8
c000ea1f:	68 64 01 00 00       	push   0x164
c000ea24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea28:	e8 eb bd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	83 c4 0c             	add    esp,0xc
c000ea33:	c3                   	ret    

c000ea34 <Video::isMonochrome()>:
c000ea34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ea38:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ea3e:	c3                   	ret    
c000ea3f:	90                   	nop

c000ea40 <Video::getWidth()>:
c000ea40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ea44:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ea4a:	c3                   	ret    
c000ea4b:	90                   	nop

c000ea4c <Video::getHeight()>:
c000ea4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ea50:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ea56:	c3                   	ret    
c000ea57:	90                   	nop

c000ea58 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ea58:	55                   	push   ebp
c000ea59:	57                   	push   edi
c000ea5a:	56                   	push   esi
c000ea5b:	53                   	push   ebx
c000ea5c:	83 ec 2c             	sub    esp,0x2c
c000ea5f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea63:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ea67:	83 f8 01             	cmp    eax,0x1
c000ea6a:	19 c9                	sbb    ecx,ecx
c000ea6c:	31 db                	xor    ebx,ebx
c000ea6e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea72:	89 cd                	mov    ebp,ecx
c000ea74:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ea7c:	f7 d5                	not    ebp
c000ea7e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ea84:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ea88:	01 d8                	add    eax,ebx
c000ea8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea8e:	56                   	push   esi
c000ea8f:	e8 b8 ff ff ff       	call   c000ea4c <Video::getHeight()>
c000ea94:	59                   	pop    ecx
c000ea95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ea99:	7e 70                	jle    c000eb0b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ea9b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea9f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000eaa3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000eaa6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eaaa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000eaae:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000eab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eab9:	89 f8                	mov    eax,edi
c000eabb:	83 c0 20             	add    eax,0x20
c000eabe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eac2:	56                   	push   esi
c000eac3:	e8 78 ff ff ff       	call   c000ea40 <Video::getWidth()>
c000eac8:	5a                   	pop    edx
c000eac9:	39 c7                	cmp    edi,eax
c000eacb:	7d 34                	jge    c000eb01 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000eacd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ead2:	74 05                	je     c000ead9 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ead4:	8b 06                	mov    eax,DWORD PTR [esi]
c000ead6:	55                   	push   ebp
c000ead7:	eb 0d                	jmp    c000eae6 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ead9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000eade:	74 12                	je     c000eaf2 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000eae0:	8b 06                	mov    eax,DWORD PTR [esi]
c000eae2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eae6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eaea:	57                   	push   edi
c000eaeb:	56                   	push   esi
c000eaec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eaef:	83 c4 10             	add    esp,0x10
c000eaf2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000eaf6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000eafa:	47                   	inc    edi
c000eafb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000eaff:	75 c1                	jne    c000eac2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000eb01:	43                   	inc    ebx
c000eb02:	83 fb 20             	cmp    ebx,0x20
c000eb05:	0f 85 79 ff ff ff    	jne    c000ea84 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000eb0b:	83 c4 2c             	add    esp,0x2c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	90                   	nop

c000eb14 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000eb14:	55                   	push   ebp
c000eb15:	57                   	push   edi
c000eb16:	56                   	push   esi
c000eb17:	53                   	push   ebx
c000eb18:	83 ec 28             	sub    esp,0x28
c000eb1b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eb1f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000eb23:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000eb27:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000eb2b:	c1 e6 08             	shl    esi,0x8
c000eb2e:	01 c6                	add    esi,eax
c000eb30:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000eb34:	c1 e0 08             	shl    eax,0x8
c000eb37:	01 d0                	add    eax,edx
c000eb39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb41:	0f af c6             	imul   eax,esi
c000eb44:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000eb4b:	50                   	push   eax
c000eb4c:	e8 65 8f ff ff       	call   c0007ab6 <malloc>
c000eb51:	83 c4 10             	add    esp,0x10
c000eb54:	89 c7                	mov    edi,eax
c000eb56:	85 c0                	test   eax,eax
c000eb58:	75 10                	jne    c000eb6a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 14 1c 02 c0       	push   0xc0021c14
c000eb62:	e8 04 29 00 00       	call   c001146b <KePanic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000eb6e:	ba 12 00 00 00       	mov    edx,0x12
c000eb73:	85 c0                	test   eax,eax
c000eb75:	74 11                	je     c000eb88 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000eb77:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eb7b:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eb7f:	c1 fa 03             	sar    edx,0x3
c000eb82:	0f af d1             	imul   edx,ecx
c000eb85:	83 c2 12             	add    edx,0x12
c000eb88:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eb8c:	74 04                	je     c000eb92 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eb8e:	85 f6                	test   esi,esi
c000eb90:	75 12                	jne    c000eba4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 24 1c 02 c0       	push   0xc0021c24
c000eb9a:	e8 a6 bd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eb9f:	e9 b8 00 00 00       	jmp    c000ec5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eba4:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eba8:	83 f9 02             	cmp    ecx,0x2
c000ebab:	0f 85 96 00 00 00    	jne    c000ec47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ebb1:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ebb6:	75 0e                	jne    c000ebc6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ebb8:	85 c0                	test   eax,eax
c000ebba:	75 0a                	jne    c000ebc6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ebbc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ebbf:	83 e8 18             	sub    eax,0x18
c000ebc2:	a8 f7                	test   al,0xf7
c000ebc4:	74 0a                	je     c000ebd0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ebc6:	83 ec 0c             	sub    esp,0xc
c000ebc9:	68 39 1c 02 c0       	push   0xc0021c39
c000ebce:	eb 7f                	jmp    c000ec4f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ebd0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ebd8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ebe0:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ebe4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ebec:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ebf0:	75 0c                	jne    c000ebfe <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ebf2:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ebf7:	c1 e0 18             	shl    eax,0x18
c000ebfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ebfe:	45                   	inc    ebp
c000ebff:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ec04:	c1 e1 10             	shl    ecx,0x10
c000ec07:	89 c8                	mov    eax,ecx
c000ec09:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ec0e:	c1 e1 08             	shl    ecx,0x8
c000ec11:	09 c1                	or     ecx,eax
c000ec13:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ec17:	09 c1                	or     ecx,eax
c000ec19:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ec1d:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ec21:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ec25:	c1 f8 03             	sar    eax,0x3
c000ec28:	01 c2                	add    edx,eax
c000ec2a:	89 e8                	mov    eax,ebp
c000ec2c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ec30:	39 c6                	cmp    esi,eax
c000ec32:	7f b0                	jg     c000ebe4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ec34:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ec38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ec3c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ec3f:	7e 22                	jle    c000ec63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ec41:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ec45:	eb 99                	jmp    c000ebe0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ec47:	50                   	push   eax
c000ec48:	50                   	push   eax
c000ec49:	51                   	push   ecx
c000ec4a:	68 47 1c 02 c0       	push   0xc0021c47
c000ec4f:	e8 f1 bc ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ec54:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ec57:	e8 6a 8e ff ff       	call   c0007ac6 <free>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	31 ff                	xor    edi,edi
c000ec61:	eb 0f                	jmp    c000ec72 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ec63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec67:	89 30                	mov    DWORD PTR [eax],esi
c000ec69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec6d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ec70:	89 30                	mov    DWORD PTR [eax],esi
c000ec72:	83 c4 1c             	add    esp,0x1c
c000ec75:	89 f8                	mov    eax,edi
c000ec77:	5b                   	pop    ebx
c000ec78:	5e                   	pop    esi
c000ec79:	5f                   	pop    edi
c000ec7a:	5d                   	pop    ebp
c000ec7b:	c3                   	ret    

c000ec7c <Video::putTGA(int, int, unsigned char*, int)>:
c000ec7c:	55                   	push   ebp
c000ec7d:	57                   	push   edi
c000ec7e:	56                   	push   esi
c000ec7f:	53                   	push   ebx
c000ec80:	83 ec 28             	sub    esp,0x28
c000ec83:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ec87:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ec8b:	50                   	push   eax
c000ec8c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ec90:	50                   	push   eax
c000ec91:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ec95:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ec99:	56                   	push   esi
c000ec9a:	e8 75 fe ff ff       	call   c000eb14 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ec9f:	83 c4 20             	add    esp,0x20
c000eca2:	85 c0                	test   eax,eax
c000eca4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eca8:	74 35                	je     c000ecdf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ecaa:	89 c7                	mov    edi,eax
c000ecac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ecb0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ecb4:	39 d8                	cmp    eax,ebx
c000ecb6:	7e 27                	jle    c000ecdf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ecb8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ecbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecc0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ecc4:	39 e8                	cmp    eax,ebp
c000ecc6:	7e 14                	jle    c000ecdc <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ecc8:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecca:	83 c7 04             	add    edi,0x4
c000eccd:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ecd0:	53                   	push   ebx
c000ecd1:	55                   	push   ebp
c000ecd2:	45                   	inc    ebp
c000ecd3:	56                   	push   esi
c000ecd4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ecd7:	83 c4 10             	add    esp,0x10
c000ecda:	eb e0                	jmp    c000ecbc <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ecdc:	43                   	inc    ebx
c000ecdd:	eb cd                	jmp    c000ecac <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ecdf:	83 c4 1c             	add    esp,0x1c
c000ece2:	5b                   	pop    ebx
c000ece3:	5e                   	pop    esi
c000ece4:	5f                   	pop    edi
c000ece5:	5d                   	pop    ebp
c000ece6:	c3                   	ret    
c000ece7:	90                   	nop

c000ece8 <ACPI::close(int, int, void*)>:
c000ece8:	83 ec 1c             	sub    esp,0x1c
c000eceb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ecf3:	74 0b                	je     c000ed00 <ACPI::close(int, int, void*)+0x18>
c000ecf5:	b8 00 00 00 00       	mov    eax,0x0
c000ecfa:	e9 99 00 00 00       	jmp    c000ed98 <ACPI::close(int, int, void*)+0xb0>
c000ecff:	90                   	nop
c000ed00:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ed05:	75 29                	jne    c000ed30 <ACPI::close(int, int, void*)+0x48>
c000ed07:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ed0c:	85 c0                	test   eax,eax
c000ed0e:	74 08                	je     c000ed18 <ACPI::close(int, int, void*)+0x30>
c000ed10:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ed15:	ff d0                	call   eax
c000ed17:	90                   	nop
c000ed18:	83 ec 0c             	sub    esp,0xc
c000ed1b:	68 a8 1c 02 c0       	push   0xc0021ca8
c000ed20:	e8 46 27 00 00       	call   c001146b <KePanic(char const*)>
c000ed25:	83 c4 10             	add    esp,0x10
c000ed28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed2d:	eb 69                	jmp    c000ed98 <ACPI::close(int, int, void*)+0xb0>
c000ed2f:	90                   	nop
c000ed30:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ed35:	75 59                	jne    c000ed90 <ACPI::close(int, int, void*)+0xa8>
c000ed37:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ed3c:	85 c0                	test   eax,eax
c000ed3e:	74 08                	je     c000ed48 <ACPI::close(int, int, void*)+0x60>
c000ed40:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ed45:	ff d0                	call   eax
c000ed47:	90                   	nop
c000ed48:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ed4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed50:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ed55:	83 e0 02             	and    eax,0x2
c000ed58:	74 1e                	je     c000ed78 <ACPI::close(int, int, void*)+0x90>
c000ed5a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ed61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed65:	89 c2                	mov    edx,eax
c000ed67:	ec                   	in     al,dx
c000ed68:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ed6c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ed70:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ed74:	eb da                	jmp    c000ed50 <ACPI::close(int, int, void*)+0x68>
c000ed76:	66 90                	xchg   ax,ax
c000ed78:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ed7f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ed84:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ed88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed8c:	ee                   	out    dx,al
c000ed8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed95:	8d 76 00             	lea    esi,[esi+0x0]
c000ed98:	83 c4 1c             	add    esp,0x1c
c000ed9b:	c3                   	ret    

c000ed9c <findRSDP()>:
c000ed9c:	83 ec 1c             	sub    esp,0x1c
c000ed9f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000eda4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000edaa:	83 e0 04             	and    eax,0x4
c000edad:	0f b6 c0             	movzx  eax,al
c000edb0:	85 c0                	test   eax,eax
c000edb2:	75 08                	jne    c000edbc <findRSDP()+0x20>
c000edb4:	b8 00 00 00 00       	mov    eax,0x0
c000edb9:	eb 75                	jmp    c000ee30 <findRSDP()+0x94>
c000edbb:	90                   	nop
c000edbc:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000edc1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000edc6:	7f 1c                	jg     c000ede4 <findRSDP()+0x48>
c000edc8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000edcd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000edd3:	83 e2 fb             	and    edx,0xfffffffb
c000edd6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eddc:	b8 00 00 00 00       	mov    eax,0x0
c000ede1:	eb 4d                	jmp    c000ee30 <findRSDP()+0x94>
c000ede3:	90                   	nop
c000ede4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000edec:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000edf4:	77 32                	ja     c000ee28 <findRSDP()+0x8c>
c000edf6:	83 ec 04             	sub    esp,0x4
c000edf9:	6a 08                	push   0x8
c000edfb:	68 43 1d 02 c0       	push   0xc0021d43
c000ee00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee04:	e8 77 15 ff ff       	call   c0000380 <memcmp>
c000ee09:	83 c4 10             	add    esp,0x10
c000ee0c:	85 c0                	test   eax,eax
c000ee0e:	0f 94 c0             	sete   al
c000ee11:	0f b6 c0             	movzx  eax,al
c000ee14:	85 c0                	test   eax,eax
c000ee16:	74 08                	je     c000ee20 <findRSDP()+0x84>
c000ee18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee1c:	eb 12                	jmp    c000ee30 <findRSDP()+0x94>
c000ee1e:	66 90                	xchg   ax,ax
c000ee20:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ee25:	eb c5                	jmp    c000edec <findRSDP()+0x50>
c000ee27:	90                   	nop
c000ee28:	b8 00 00 00 00       	mov    eax,0x0
c000ee2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee30:	83 c4 1c             	add    esp,0x1c
c000ee33:	c3                   	ret    

c000ee34 <loadACPITables(unsigned char*)>:
c000ee34:	57                   	push   edi
c000ee35:	56                   	push   esi
c000ee36:	53                   	push   ebx
c000ee37:	83 ec 60             	sub    esp,0x60
c000ee3a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ee3f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee45:	83 e0 04             	and    eax,0x4
c000ee48:	0f b6 c0             	movzx  eax,al
c000ee4b:	85 c0                	test   eax,eax
c000ee4d:	0f 84 41 02 00 00    	je     c000f094 <loadACPITables(unsigned char*)+0x260>
c000ee53:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000ee58:	0f b6 c0             	movzx  eax,al
c000ee5b:	85 c0                	test   eax,eax
c000ee5d:	74 79                	je     c000eed8 <loadACPITables(unsigned char*)+0xa4>
c000ee5f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee63:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ee67:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ee6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee6e:	83 e8 24             	sub    eax,0x24
c000ee71:	c1 e8 03             	shr    eax,0x3
c000ee74:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ee78:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ee80:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ee84:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ee88:	0f 8d ba 00 00 00    	jge    c000ef48 <loadACPITables(unsigned char*)+0x114>
c000ee8e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee92:	83 c0 24             	add    eax,0x24
c000ee95:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ee99:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ee9d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eea1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000eea5:	c1 e0 03             	shl    eax,0x3
c000eea8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000eeac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eeb0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000eeb3:	8b 00                	mov    eax,DWORD PTR [eax]
c000eeb5:	89 c1                	mov    ecx,eax
c000eeb7:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000eebc:	8d 50 01             	lea    edx,[eax+0x1]
c000eebf:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000eec5:	89 ca                	mov    edx,ecx
c000eec7:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000eece:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000eed3:	eb ab                	jmp    c000ee80 <loadACPITables(unsigned char*)+0x4c>
c000eed5:	8d 76 00             	lea    esi,[esi+0x0]
c000eed8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000eedc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eee0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eee4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eee7:	83 e8 24             	sub    eax,0x24
c000eeea:	c1 e8 02             	shr    eax,0x2
c000eeed:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eef1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000eef9:	8d 76 00             	lea    esi,[esi+0x0]
c000eefc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ef00:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ef04:	7d 42                	jge    c000ef48 <loadACPITables(unsigned char*)+0x114>
c000ef06:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ef0a:	83 c0 24             	add    eax,0x24
c000ef0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ef11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef15:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ef19:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ef1d:	c1 e0 02             	shl    eax,0x2
c000ef20:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ef24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ef28:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ef2a:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000ef2f:	8d 50 01             	lea    edx,[eax+0x1]
c000ef32:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000ef38:	89 ca                	mov    edx,ecx
c000ef3a:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000ef41:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ef46:	eb b4                	jmp    c000eefc <loadACPITables(unsigned char*)+0xc8>
c000ef48:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ef50:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000ef55:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ef59:	0f 8d 39 01 00 00    	jge    c000f098 <loadACPITables(unsigned char*)+0x264>
c000ef5f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef63:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000ef6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ef76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef7a:	25 ff 0f 00 00       	and    eax,0xfff
c000ef7f:	89 c6                	mov    esi,eax
c000ef81:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000ef87:	83 ec 0c             	sub    esp,0xc
c000ef8a:	6a 01                	push   0x1
c000ef8c:	e8 7c a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef91:	83 c4 10             	add    esp,0x10
c000ef94:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ef98:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef9e:	83 ec 0c             	sub    esp,0xc
c000efa1:	6a 01                	push   0x1
c000efa3:	6a 01                	push   0x1
c000efa5:	50                   	push   eax
c000efa6:	52                   	push   edx
c000efa7:	53                   	push   ebx
c000efa8:	e8 6d af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efad:	83 c4 20             	add    esp,0x20
c000efb0:	09 f0                	or     eax,esi
c000efb2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efb6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000efba:	c1 e0 03             	shl    eax,0x3
c000efbd:	05 20 b9 02 c0       	add    eax,0xc002b920
c000efc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000efc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000efca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efce:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000efd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000efda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efe2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000efe6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000efea:	89 c6                	mov    esi,eax
c000efec:	89 d7                	mov    edi,edx
c000efee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eff0:	89 c8                	mov    eax,ecx
c000eff2:	89 fa                	mov    edx,edi
c000eff4:	89 f3                	mov    ebx,esi
c000eff6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000effa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000effe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f002:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f006:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f009:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f00d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f011:	05 00 10 00 00       	add    eax,0x1000
c000f016:	c1 e8 0c             	shr    eax,0xc
c000f019:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f01d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f021:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f025:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f029:	25 ff 0f 00 00       	and    eax,0xfff
c000f02e:	89 c6                	mov    esi,eax
c000f030:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f036:	83 ec 0c             	sub    esp,0xc
c000f039:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f03d:	e8 cb a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f042:	83 c4 10             	add    esp,0x10
c000f045:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f049:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f04f:	83 ec 0c             	sub    esp,0xc
c000f052:	6a 01                	push   0x1
c000f054:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f058:	50                   	push   eax
c000f059:	52                   	push   edx
c000f05a:	53                   	push   ebx
c000f05b:	e8 ba ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f060:	83 c4 20             	add    esp,0x20
c000f063:	09 f0                	or     eax,esi
c000f065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f06d:	83 ec 0c             	sub    esp,0xc
c000f070:	50                   	push   eax
c000f071:	e8 b5 a8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000f076:	83 c4 10             	add    esp,0x10
c000f079:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f07d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f081:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f088:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f08d:	e9 be fe ff ff       	jmp    c000ef50 <loadACPITables(unsigned char*)+0x11c>
c000f092:	66 90                	xchg   ax,ax
c000f094:	90                   	nop
c000f095:	8d 76 00             	lea    esi,[esi+0x0]
c000f098:	83 c4 60             	add    esp,0x60
c000f09b:	5b                   	pop    ebx
c000f09c:	5e                   	pop    esi
c000f09d:	5f                   	pop    edi
c000f09e:	c3                   	ret    
c000f09f:	90                   	nop

c000f0a0 <findRSDT(unsigned char*)>:
c000f0a0:	57                   	push   edi
c000f0a1:	56                   	push   esi
c000f0a2:	53                   	push   ebx
c000f0a3:	83 ec 50             	sub    esp,0x50
c000f0a6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f0ab:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0b1:	83 e0 04             	and    eax,0x4
c000f0b4:	0f b6 c0             	movzx  eax,al
c000f0b7:	85 c0                	test   eax,eax
c000f0b9:	75 0d                	jne    c000f0c8 <findRSDT(unsigned char*)+0x28>
c000f0bb:	b8 00 00 00 00       	mov    eax,0x0
c000f0c0:	e9 2b 01 00 00       	jmp    c000f1f0 <findRSDT(unsigned char*)+0x150>
c000f0c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c8:	89 e0                	mov    eax,esp
c000f0ca:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f0ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f0d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f0d6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f0de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f0e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f0e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f0ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f0ee:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f0f2:	89 c6                	mov    esi,eax
c000f0f4:	89 d7                	mov    edi,edx
c000f0f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f0f8:	89 c8                	mov    eax,ecx
c000f0fa:	89 fa                	mov    edx,edi
c000f0fc:	89 f3                	mov    ebx,esi
c000f0fe:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f102:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f106:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f10a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f10e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f112:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f11a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f11e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f122:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f12a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f12e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f132:	25 ff 0f 00 00       	and    eax,0xfff
c000f137:	89 c6                	mov    esi,eax
c000f139:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f13f:	83 ec 0c             	sub    esp,0xc
c000f142:	6a 02                	push   0x2
c000f144:	e8 c4 a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f149:	83 c4 10             	add    esp,0x10
c000f14c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f150:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f156:	83 ec 0c             	sub    esp,0xc
c000f159:	6a 01                	push   0x1
c000f15b:	6a 02                	push   0x2
c000f15d:	50                   	push   eax
c000f15e:	52                   	push   edx
c000f15f:	53                   	push   ebx
c000f160:	e8 b5 ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f165:	83 c4 20             	add    esp,0x20
c000f168:	09 f0                	or     eax,esi
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f172:	25 ff 0f 00 00       	and    eax,0xfff
c000f177:	89 c6                	mov    esi,eax
c000f179:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f17f:	83 ec 0c             	sub    esp,0xc
c000f182:	6a 02                	push   0x2
c000f184:	e8 84 a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f189:	83 c4 10             	add    esp,0x10
c000f18c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f190:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f196:	83 ec 0c             	sub    esp,0xc
c000f199:	6a 01                	push   0x1
c000f19b:	6a 02                	push   0x2
c000f19d:	50                   	push   eax
c000f19e:	52                   	push   edx
c000f19f:	53                   	push   ebx
c000f1a0:	e8 75 ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1a5:	83 c4 20             	add    esp,0x20
c000f1a8:	09 f0                	or     eax,esi
c000f1aa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f1ae:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f1b3:	85 c0                	test   eax,eax
c000f1b5:	75 11                	jne    c000f1c8 <findRSDT(unsigned char*)+0x128>
c000f1b7:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f1be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f1c2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f1c6:	eb 24                	jmp    c000f1ec <findRSDT(unsigned char*)+0x14c>
c000f1c8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f1cd:	83 f8 02             	cmp    eax,0x2
c000f1d0:	75 12                	jne    c000f1e4 <findRSDT(unsigned char*)+0x144>
c000f1d2:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f1d9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1dd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f1e1:	eb 09                	jmp    c000f1ec <findRSDT(unsigned char*)+0x14c>
c000f1e3:	90                   	nop
c000f1e4:	b8 00 00 00 00       	mov    eax,0x0
c000f1e9:	eb 05                	jmp    c000f1f0 <findRSDT(unsigned char*)+0x150>
c000f1eb:	90                   	nop
c000f1ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f1f0:	83 c4 50             	add    esp,0x50
c000f1f3:	5b                   	pop    ebx
c000f1f4:	5e                   	pop    esi
c000f1f5:	5f                   	pop    edi
c000f1f6:	c3                   	ret    
c000f1f7:	90                   	nop

c000f1f8 <findDataTable(unsigned char*, char*)>:
c000f1f8:	83 ec 1c             	sub    esp,0x1c
c000f1fb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f200:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f206:	83 e0 04             	and    eax,0x4
c000f209:	0f b6 c0             	movzx  eax,al
c000f20c:	85 c0                	test   eax,eax
c000f20e:	75 08                	jne    c000f218 <findDataTable(unsigned char*, char*)+0x20>
c000f210:	b8 00 00 00 00       	mov    eax,0x0
c000f215:	eb 5d                	jmp    c000f274 <findDataTable(unsigned char*, char*)+0x7c>
c000f217:	90                   	nop
c000f218:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f220:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f225:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f229:	7d 41                	jge    c000f26c <findDataTable(unsigned char*, char*)+0x74>
c000f22b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f22f:	c1 e0 03             	shl    eax,0x3
c000f232:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f237:	83 ec 04             	sub    esp,0x4
c000f23a:	6a 04                	push   0x4
c000f23c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f240:	50                   	push   eax
c000f241:	e8 3a 11 ff ff       	call   c0000380 <memcmp>
c000f246:	83 c4 10             	add    esp,0x10
c000f249:	85 c0                	test   eax,eax
c000f24b:	0f 94 c0             	sete   al
c000f24e:	0f b6 c0             	movzx  eax,al
c000f251:	85 c0                	test   eax,eax
c000f253:	74 0f                	je     c000f264 <findDataTable(unsigned char*, char*)+0x6c>
c000f255:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f259:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f260:	eb 12                	jmp    c000f274 <findDataTable(unsigned char*, char*)+0x7c>
c000f262:	66 90                	xchg   ax,ax
c000f264:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f269:	eb b5                	jmp    c000f220 <findDataTable(unsigned char*, char*)+0x28>
c000f26b:	90                   	nop
c000f26c:	b8 00 00 00 00       	mov    eax,0x0
c000f271:	8d 76 00             	lea    esi,[esi+0x0]
c000f274:	83 c4 1c             	add    esp,0x1c
c000f277:	c3                   	ret    

c000f278 <scanMADT()>:
c000f278:	53                   	push   ebx
c000f279:	83 ec 38             	sub    esp,0x38
c000f27c:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f281:	25 00 04 00 00       	and    eax,0x400
c000f286:	74 14                	je     c000f29c <scanMADT()+0x24>
c000f288:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f28d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f293:	83 e2 fb             	and    edx,0xfffffffb
c000f296:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f29c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f2a1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f2a7:	83 e0 04             	and    eax,0x4
c000f2aa:	0f b6 c0             	movzx  eax,al
c000f2ad:	85 c0                	test   eax,eax
c000f2af:	0f 84 6b 04 00 00    	je     c000f720 <scanMADT()+0x4a8>
c000f2b5:	e8 e2 fa ff ff       	call   c000ed9c <findRSDP()>
c000f2ba:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f2bf:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f2c4:	85 c0                	test   eax,eax
c000f2c6:	75 1c                	jne    c000f2e4 <scanMADT()+0x6c>
c000f2c8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f2cd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f2d3:	83 e2 fb             	and    edx,0xfffffffb
c000f2d6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f2dc:	e9 47 04 00 00       	jmp    c000f728 <scanMADT()+0x4b0>
c000f2e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2e4:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f2e9:	83 ec 0c             	sub    esp,0xc
c000f2ec:	50                   	push   eax
c000f2ed:	e8 ae fd ff ff       	call   c000f0a0 <findRSDT(unsigned char*)>
c000f2f2:	83 c4 10             	add    esp,0x10
c000f2f5:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f2fa:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f2ff:	85 c0                	test   eax,eax
c000f301:	75 19                	jne    c000f31c <scanMADT()+0xa4>
c000f303:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f308:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f30e:	83 e2 fb             	and    edx,0xfffffffb
c000f311:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f317:	e9 0c 04 00 00       	jmp    c000f728 <scanMADT()+0x4b0>
c000f31c:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f321:	83 ec 0c             	sub    esp,0xc
c000f324:	50                   	push   eax
c000f325:	e8 0a fb ff ff       	call   c000ee34 <loadACPITables(unsigned char*)>
c000f32a:	83 c4 10             	add    esp,0x10
c000f32d:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f332:	83 ec 08             	sub    esp,0x8
c000f335:	68 4c 1d 02 c0       	push   0xc0021d4c
c000f33a:	50                   	push   eax
c000f33b:	e8 b8 fe ff ff       	call   c000f1f8 <findDataTable(unsigned char*, char*)>
c000f340:	83 c4 10             	add    esp,0x10
c000f343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f347:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f34c:	75 1a                	jne    c000f368 <scanMADT()+0xf0>
c000f34e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f353:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f359:	83 e2 fe             	and    edx,0xfffffffe
c000f35c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f362:	e9 c1 03 00 00       	jmp    c000f728 <scanMADT()+0x4b0>
c000f367:	90                   	nop
c000f368:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f370:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f374:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f377:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f37b:	0f 87 a7 03 00 00    	ja     c000f728 <scanMADT()+0x4b0>
c000f381:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f389:	0f 87 99 03 00 00    	ja     c000f728 <scanMADT()+0x4b0>
c000f38f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f393:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f397:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f39b:	8d 50 01             	lea    edx,[eax+0x1]
c000f39e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3a6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3aa:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f3ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3b2:	8d 50 01             	lea    edx,[eax+0x1]
c000f3b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3c1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f3c5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f3ca:	83 f8 02             	cmp    eax,0x2
c000f3cd:	0f 86 51 03 00 00    	jbe    c000f724 <scanMADT()+0x4ac>
c000f3d3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f3d8:	85 c0                	test   eax,eax
c000f3da:	75 58                	jne    c000f434 <scanMADT()+0x1bc>
c000f3dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3e0:	8d 50 01             	lea    edx,[eax+0x1]
c000f3e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3e7:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f3ed:	0f b6 d2             	movzx  edx,dl
c000f3f0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f3f4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f3f8:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f3fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f402:	8d 50 01             	lea    edx,[eax+0x1]
c000f405:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f409:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f40f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f412:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f418:	0f b6 d2             	movzx  edx,dl
c000f41b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f41f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f423:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f429:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f42e:	e9 d9 02 00 00       	jmp    c000f70c <scanMADT()+0x494>
c000f433:	90                   	nop
c000f434:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f439:	83 f8 01             	cmp    eax,0x1
c000f43c:	0f 85 1a 01 00 00    	jne    c000f55c <scanMADT()+0x2e4>
c000f442:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f446:	8d 50 01             	lea    edx,[eax+0x1]
c000f449:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f44d:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f453:	0f b6 d2             	movzx  edx,dl
c000f456:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f45a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f45e:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f464:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f469:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f46d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f471:	01 d0                	add    eax,edx
c000f473:	83 c0 2c             	add    eax,0x2c
c000f476:	8a 00                	mov    al,BYTE PTR [eax]
c000f478:	0f b6 d0             	movzx  edx,al
c000f47b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f47f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f482:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f486:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f48a:	0f b6 c0             	movzx  eax,al
c000f48d:	c1 e0 08             	shl    eax,0x8
c000f490:	89 d1                	mov    ecx,edx
c000f492:	09 c1                	or     ecx,eax
c000f494:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f498:	8d 50 02             	lea    edx,[eax+0x2]
c000f49b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f49f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f4a3:	0f b6 c0             	movzx  eax,al
c000f4a6:	c1 e0 10             	shl    eax,0x10
c000f4a9:	09 c1                	or     ecx,eax
c000f4ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4af:	8d 50 03             	lea    edx,[eax+0x3]
c000f4b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4b6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f4ba:	0f b6 c0             	movzx  eax,al
c000f4bd:	c1 e0 18             	shl    eax,0x18
c000f4c0:	09 c1                	or     ecx,eax
c000f4c2:	89 ca                	mov    edx,ecx
c000f4c4:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f4c9:	0f b6 c0             	movzx  eax,al
c000f4cc:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f4d3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f4d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4e0:	01 d0                	add    eax,edx
c000f4e2:	83 c0 2c             	add    eax,0x2c
c000f4e5:	8a 00                	mov    al,BYTE PTR [eax]
c000f4e7:	0f b6 d0             	movzx  edx,al
c000f4ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ee:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4f5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4f9:	0f b6 c0             	movzx  eax,al
c000f4fc:	c1 e0 08             	shl    eax,0x8
c000f4ff:	89 d1                	mov    ecx,edx
c000f501:	09 c1                	or     ecx,eax
c000f503:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f507:	8d 50 02             	lea    edx,[eax+0x2]
c000f50a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f50e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f512:	0f b6 c0             	movzx  eax,al
c000f515:	c1 e0 10             	shl    eax,0x10
c000f518:	09 c1                	or     ecx,eax
c000f51a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f51e:	8d 50 03             	lea    edx,[eax+0x3]
c000f521:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f525:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f529:	0f b6 c0             	movzx  eax,al
c000f52c:	c1 e0 18             	shl    eax,0x18
c000f52f:	09 c1                	or     ecx,eax
c000f531:	89 ca                	mov    edx,ecx
c000f533:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f538:	0f b6 c0             	movzx  eax,al
c000f53b:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f542:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f547:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f54c:	83 c0 01             	add    eax,0x1
c000f54f:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f554:	e9 b3 01 00 00       	jmp    c000f70c <scanMADT()+0x494>
c000f559:	8d 76 00             	lea    esi,[esi+0x0]
c000f55c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f561:	83 f8 02             	cmp    eax,0x2
c000f564:	0f 85 ea 00 00 00    	jne    c000f654 <scanMADT()+0x3dc>
c000f56a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f56e:	8d 50 01             	lea    edx,[eax+0x1]
c000f571:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f575:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f579:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f57d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f581:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f585:	8d 50 01             	lea    edx,[eax+0x1]
c000f588:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f58c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f590:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f594:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f598:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f59c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5a0:	01 d0                	add    eax,edx
c000f5a2:	83 c0 2c             	add    eax,0x2c
c000f5a5:	8a 00                	mov    al,BYTE PTR [eax]
c000f5a7:	0f b6 d0             	movzx  edx,al
c000f5aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ae:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5b5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5b9:	0f b6 c0             	movzx  eax,al
c000f5bc:	c1 e0 08             	shl    eax,0x8
c000f5bf:	89 d1                	mov    ecx,edx
c000f5c1:	09 c1                	or     ecx,eax
c000f5c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c7:	8d 50 02             	lea    edx,[eax+0x2]
c000f5ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5ce:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f5d2:	0f b6 c0             	movzx  eax,al
c000f5d5:	c1 e0 10             	shl    eax,0x10
c000f5d8:	09 c1                	or     ecx,eax
c000f5da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5de:	8d 50 03             	lea    edx,[eax+0x3]
c000f5e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5e5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f5e9:	0f b6 c0             	movzx  eax,al
c000f5ec:	c1 e0 18             	shl    eax,0x18
c000f5ef:	09 c8                	or     eax,ecx
c000f5f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f5f5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f5fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f602:	01 d0                	add    eax,edx
c000f604:	83 c0 2c             	add    eax,0x2c
c000f607:	8a 00                	mov    al,BYTE PTR [eax]
c000f609:	0f b6 c0             	movzx  eax,al
c000f60c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f610:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f613:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f617:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f61b:	0f b6 d2             	movzx  edx,dl
c000f61e:	c1 e2 08             	shl    edx,0x8
c000f621:	09 d0                	or     eax,edx
c000f623:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f628:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f62d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f632:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f636:	88 90 48 34 02 c0    	mov    BYTE PTR [eax-0x3ffdcbb8],dl
c000f63c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f641:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f646:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f64e:	e9 b9 00 00 00       	jmp    c000f70c <scanMADT()+0x494>
c000f653:	90                   	nop
c000f654:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f659:	83 f8 04             	cmp    eax,0x4
c000f65c:	0f 85 9a 00 00 00    	jne    c000f6fc <scanMADT()+0x484>
c000f662:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f666:	8d 50 01             	lea    edx,[eax+0x1]
c000f669:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f66d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f671:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f675:	0f b6 c0             	movzx  eax,al
c000f678:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f67c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f680:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f684:	01 d0                	add    eax,edx
c000f686:	83 c0 2c             	add    eax,0x2c
c000f689:	8a 00                	mov    al,BYTE PTR [eax]
c000f68b:	0f b6 d0             	movzx  edx,al
c000f68e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f692:	8d 48 01             	lea    ecx,[eax+0x1]
c000f695:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f699:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f69d:	0f b6 c0             	movzx  eax,al
c000f6a0:	c1 e0 08             	shl    eax,0x8
c000f6a3:	09 d0                	or     eax,edx
c000f6a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f6a9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f6ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6b2:	8d 50 01             	lea    edx,[eax+0x1]
c000f6b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f6c1:	0f b6 c0             	movzx  eax,al
c000f6c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6cc:	c1 e0 08             	shl    eax,0x8
c000f6cf:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f6d3:	89 c1                	mov    ecx,eax
c000f6d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f6d9:	c1 e0 18             	shl    eax,0x18
c000f6dc:	89 c3                	mov    ebx,eax
c000f6de:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f6e3:	8d 50 01             	lea    edx,[eax+0x1]
c000f6e6:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f6ec:	09 d9                	or     ecx,ebx
c000f6ee:	89 ca                	mov    edx,ecx
c000f6f0:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f6f7:	eb 13                	jmp    c000f70c <scanMADT()+0x494>
c000f6f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6fc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f701:	83 f8 05             	cmp    eax,0x5
c000f704:	75 06                	jne    c000f70c <scanMADT()+0x494>
c000f706:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f70b:	90                   	nop
c000f70c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f711:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f715:	01 d0                	add    eax,edx
c000f717:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f71b:	e9 50 fc ff ff       	jmp    c000f370 <scanMADT()+0xf8>
c000f720:	90                   	nop
c000f721:	eb 05                	jmp    c000f728 <scanMADT()+0x4b0>
c000f723:	90                   	nop
c000f724:	90                   	nop
c000f725:	8d 76 00             	lea    esi,[esi+0x0]
c000f728:	83 c4 38             	add    esp,0x38
c000f72b:	5b                   	pop    ebx
c000f72c:	c3                   	ret    
c000f72d:	90                   	nop
c000f72e:	66 90                	xchg   ax,ax

c000f730 <ACPI::ACPI()>:
c000f730:	83 ec 0c             	sub    esp,0xc
c000f733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f737:	83 ec 08             	sub    esp,0x8
c000f73a:	68 51 1d 02 c0       	push   0xc0021d51
c000f73f:	50                   	push   eax
c000f740:	e8 65 d2 ff ff       	call   c000c9aa <Device::Device(char const*)>
c000f745:	83 c4 10             	add    esp,0x10
c000f748:	ba a4 1e 02 c0       	mov    edx,0xc0021ea4
c000f74d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f751:	89 10                	mov    DWORD PTR [eax],edx
c000f753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f757:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f762:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f770:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f77a:	e8 f9 fa ff ff       	call   c000f278 <scanMADT()>
c000f77f:	90                   	nop
c000f780:	83 c4 0c             	add    esp,0xc
c000f783:	c3                   	ret    

c000f784 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f784:	83 ec 2c             	sub    esp,0x2c
c000f787:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f78b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f78f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f793:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f797:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f79c:	88 d0                	mov    al,dl
c000f79e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f7a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f7a7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f7af:	90                   	nop
c000f7b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f7b4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f7ba:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f7be:	0f 8d b0 00 00 00    	jge    c000f874 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f7c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f7c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f7cc:	83 c2 2a             	add    edx,0x2a
c000f7cf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f7d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f7d8:	0f b7 c0             	movzx  eax,ax
c000f7db:	39 c2                	cmp    edx,eax
c000f7dd:	0f 85 85 00 00 00    	jne    c000f868 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f7e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f7e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f7eb:	83 c2 2a             	add    edx,0x2a
c000f7ee:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f7f2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f7f7:	0f b6 c0             	movzx  eax,al
c000f7fa:	39 c2                	cmp    edx,eax
c000f7fc:	75 6a                	jne    c000f868 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f7fe:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f803:	85 c0                	test   eax,eax
c000f805:	74 3d                	je     c000f844 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f807:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f80b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f80f:	83 c2 2a             	add    edx,0x2a
c000f812:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f816:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f81a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f81d:	39 c2                	cmp    edx,eax
c000f81f:	74 13                	je     c000f834 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f821:	83 ec 0c             	sub    esp,0xc
c000f824:	68 cc 1c 02 c0       	push   0xc0021ccc
c000f829:	e8 3d 1c 00 00       	call   c001146b <KePanic(char const*)>
c000f82e:	83 c4 10             	add    esp,0x10
c000f831:	8d 76 00             	lea    esi,[esi+0x0]
c000f834:	83 ec 0c             	sub    esp,0xc
c000f837:	68 56 1d 02 c0       	push   0xc0021d56
c000f83c:	e8 2a 1c 00 00       	call   c001146b <KePanic(char const*)>
c000f841:	83 c4 10             	add    esp,0x10
c000f844:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f848:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f84c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f850:	83 c2 2a             	add    edx,0x2a
c000f853:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f857:	8b 02                	mov    eax,DWORD PTR [edx]
c000f859:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f85c:	89 01                	mov    DWORD PTR [ecx],eax
c000f85e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f861:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f866:	66 90                	xchg   ax,ax
c000f868:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f86d:	e9 3e ff ff ff       	jmp    c000f7b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f872:	66 90                	xchg   ax,ax
c000f874:	90                   	nop
c000f875:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f879:	83 c4 2c             	add    esp,0x2c
c000f87c:	c2 04 00             	ret    0x4
c000f87f:	90                   	nop

c000f880 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f880:	83 ec 1c             	sub    esp,0x1c
c000f883:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f887:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f88b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f88f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f894:	88 c8                	mov    al,cl
c000f896:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f89a:	88 d0                	mov    al,dl
c000f89c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f8a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8a4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f8aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8ae:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f8b1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f8b5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f8b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8bd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f8c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f8c7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f8ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8ce:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f8d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8d7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f8dd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f8e1:	83 c0 01             	add    eax,0x1
c000f8e4:	88 c1                	mov    cl,al
c000f8e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8ea:	83 c2 2a             	add    edx,0x2a
c000f8ed:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f8f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8f5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f8fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8ff:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f902:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f906:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f90a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f90e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f914:	8d 50 01             	lea    edx,[eax+0x1]
c000f917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f91b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f921:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f925:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f92b:	3d 00 02 00 00       	cmp    eax,0x200
c000f930:	75 12                	jne    c000f944 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f932:	83 ec 0c             	sub    esp,0xc
c000f935:	68 65 1d 02 c0       	push   0xc0021d65
c000f93a:	e8 2c 1b 00 00       	call   c001146b <KePanic(char const*)>
c000f93f:	83 c4 10             	add    esp,0x10
c000f942:	66 90                	xchg   ax,ax
c000f944:	90                   	nop
c000f945:	83 c4 1c             	add    esp,0x1c
c000f948:	c3                   	ret    
c000f949:	90                   	nop
c000f94a:	66 90                	xchg   ax,ax

c000f94c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f94c:	b8 00 00 00 00       	mov    eax,0x0
c000f951:	c3                   	ret    
c000f952:	66 90                	xchg   ax,ax

c000f954 <ACPI::detectPCI()>:
c000f954:	53                   	push   ebx
c000f955:	83 ec 28             	sub    esp,0x28
c000f958:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f95d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f962:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f967:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f96d:	83 e0 04             	and    eax,0x4
c000f970:	0f b6 c0             	movzx  eax,al
c000f973:	85 c0                	test   eax,eax
c000f975:	74 2d                	je     c000f9a4 <ACPI::detectPCI()+0x50>
c000f977:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f97c:	83 ec 08             	sub    esp,0x8
c000f97f:	68 82 1d 02 c0       	push   0xc0021d82
c000f984:	50                   	push   eax
c000f985:	e8 6e f8 ff ff       	call   c000f1f8 <findDataTable(unsigned char*, char*)>
c000f98a:	83 c4 10             	add    esp,0x10
c000f98d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f991:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f996:	74 0c                	je     c000f9a4 <ACPI::detectPCI()+0x50>
c000f998:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f99d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f9a2:	66 90                	xchg   ax,ax
c000f9a4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f9ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9b0:	8a 00                	mov    al,BYTE PTR [eax]
c000f9b2:	0f b6 c0             	movzx  eax,al
c000f9b5:	83 f8 01             	cmp    eax,0x1
c000f9b8:	75 0e                	jne    c000f9c8 <ACPI::detectPCI()+0x74>
c000f9ba:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f9bf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f9c4:	eb 2e                	jmp    c000f9f4 <ACPI::detectPCI()+0xa0>
c000f9c6:	66 90                	xchg   ax,ax
c000f9c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9cc:	8a 00                	mov    al,BYTE PTR [eax]
c000f9ce:	0f b6 c0             	movzx  eax,al
c000f9d1:	83 f8 02             	cmp    eax,0x2
c000f9d4:	75 1e                	jne    c000f9f4 <ACPI::detectPCI()+0xa0>
c000f9d6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f9db:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f9e0:	85 c0                	test   eax,eax
c000f9e2:	74 10                	je     c000f9f4 <ACPI::detectPCI()+0xa0>
c000f9e4:	83 ec 0c             	sub    esp,0xc
c000f9e7:	68 fc 1c 02 c0       	push   0xc0021cfc
c000f9ec:	e8 7a 1a 00 00       	call   c001146b <KePanic(char const*)>
c000f9f1:	83 c4 10             	add    esp,0x10
c000f9f4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f9f8:	83 f0 01             	xor    eax,0x1
c000f9fb:	0f b6 c0             	movzx  eax,al
c000f9fe:	85 c0                	test   eax,eax
c000fa00:	74 46                	je     c000fa48 <ACPI::detectPCI()+0xf4>
c000fa02:	e8 29 07 ff ff       	call   c0000130 <manualPCIProbe>
c000fa07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fa0b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fa10:	75 0e                	jne    c000fa20 <ACPI::detectPCI()+0xcc>
c000fa12:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa17:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fa1c:	eb 2a                	jmp    c000fa48 <ACPI::detectPCI()+0xf4>
c000fa1e:	66 90                	xchg   ax,ax
c000fa20:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fa25:	75 21                	jne    c000fa48 <ACPI::detectPCI()+0xf4>
c000fa27:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa2c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fa31:	85 c0                	test   eax,eax
c000fa33:	74 13                	je     c000fa48 <ACPI::detectPCI()+0xf4>
c000fa35:	83 ec 0c             	sub    esp,0xc
c000fa38:	68 fc 1c 02 c0       	push   0xc0021cfc
c000fa3d:	e8 29 1a 00 00       	call   c001146b <KePanic(char const*)>
c000fa42:	83 c4 10             	add    esp,0x10
c000fa45:	8d 76 00             	lea    esi,[esi+0x0]
c000fa48:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa4d:	85 c0                	test   eax,eax
c000fa4f:	0f 84 87 00 00 00    	je     c000fadc <ACPI::detectPCI()+0x188>
c000fa55:	83 ec 0c             	sub    esp,0xc
c000fa58:	68 87 1d 02 c0       	push   0xc0021d87
c000fa5d:	e8 09 13 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c000fa62:	83 c4 10             	add    esp,0x10
c000fa65:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fa6d:	83 ec 0c             	sub    esp,0xc
c000fa70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa74:	e8 3d 80 ff ff       	call   c0007ab6 <malloc>
c000fa79:	83 c4 10             	add    esp,0x10
c000fa7c:	89 c3                	mov    ebx,eax
c000fa7e:	83 ec 0c             	sub    esp,0xc
c000fa81:	53                   	push   ebx
c000fa82:	e8 21 b5 00 00       	call   c001afa8 <PCI::PCI()>
c000fa87:	83 c4 10             	add    esp,0x10
c000fa8a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fa8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa92:	83 ec 08             	sub    esp,0x8
c000fa95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa99:	50                   	push   eax
c000fa9a:	e8 73 cd ff ff       	call   c000c812 <Device::addChild(Device*)>
c000fa9f:	83 c4 10             	add    esp,0x10
c000faa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000faa6:	8b 00                	mov    eax,DWORD PTR [eax]
c000faa8:	83 c0 08             	add    eax,0x8
c000faab:	8b 00                	mov    eax,DWORD PTR [eax]
c000faad:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fab2:	85 d2                	test   edx,edx
c000fab4:	74 0a                	je     c000fac0 <ACPI::detectPCI()+0x16c>
c000fab6:	ba 01 00 00 00       	mov    edx,0x1
c000fabb:	eb 0b                	jmp    c000fac8 <ACPI::detectPCI()+0x174>
c000fabd:	8d 76 00             	lea    esi,[esi+0x0]
c000fac0:	ba 02 00 00 00       	mov    edx,0x2
c000fac5:	8d 76 00             	lea    esi,[esi+0x0]
c000fac8:	6a 00                	push   0x0
c000faca:	6a 00                	push   0x0
c000facc:	52                   	push   edx
c000facd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fad1:	ff d0                	call   eax
c000fad3:	83 c4 10             	add    esp,0x10
c000fad6:	e9 91 00 00 00       	jmp    c000fb6c <ACPI::detectPCI()+0x218>
c000fadb:	90                   	nop
c000fadc:	83 ec 0c             	sub    esp,0xc
c000fadf:	68 9f 1d 02 c0       	push   0xc0021d9f
c000fae4:	e8 82 12 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c000fae9:	83 c4 10             	add    esp,0x10
c000faec:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000faf3:	83 ec 0c             	sub    esp,0xc
c000faf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fafa:	e8 b7 7f ff ff       	call   c0007ab6 <malloc>
c000faff:	83 c4 10             	add    esp,0x10
c000fb02:	89 c3                	mov    ebx,eax
c000fb04:	83 ec 0c             	sub    esp,0xc
c000fb07:	53                   	push   ebx
c000fb08:	e8 35 c0 00 00       	call   c001bb42 <IDE::IDE()>
c000fb0d:	83 c4 10             	add    esp,0x10
c000fb10:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fb14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb18:	83 ec 08             	sub    esp,0x8
c000fb1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fb1f:	50                   	push   eax
c000fb20:	e8 ed cc ff ff       	call   c000c812 <Device::addChild(Device*)>
c000fb25:	83 c4 10             	add    esp,0x10
c000fb28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb2c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fb36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb3a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fb43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb47:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fb50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb54:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb56:	83 c0 08             	add    eax,0x8
c000fb59:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb5b:	6a 00                	push   0x0
c000fb5d:	6a 00                	push   0x0
c000fb5f:	6a 00                	push   0x0
c000fb61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb65:	ff d0                	call   eax
c000fb67:	83 c4 10             	add    esp,0x10
c000fb6a:	66 90                	xchg   ax,ax
c000fb6c:	90                   	nop
c000fb6d:	83 c4 28             	add    esp,0x28
c000fb70:	5b                   	pop    ebx
c000fb71:	c3                   	ret    
c000fb72:	66 90                	xchg   ax,ax

c000fb74 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fb74:	83 ec 1c             	sub    esp,0x1c
c000fb77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb7b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb7e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fb82:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fb87:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fb8c:	83 ec 08             	sub    esp,0x8
c000fb8f:	52                   	push   edx
c000fb90:	50                   	push   eax
c000fb91:	e8 e2 75 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fb96:	83 c4 10             	add    esp,0x10
c000fb99:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fb9d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fba2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fba7:	83 ec 04             	sub    esp,0x4
c000fbaa:	6a 01                	push   0x1
c000fbac:	52                   	push   edx
c000fbad:	50                   	push   eax
c000fbae:	e8 df 76 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fbb3:	83 c4 10             	add    esp,0x10
c000fbb6:	90                   	nop
c000fbb7:	83 c4 1c             	add    esp,0x1c
c000fbba:	c3                   	ret    
c000fbbb:	90                   	nop

c000fbbc <ACPI::sleep()>:
c000fbbc:	83 ec 0c             	sub    esp,0xc
c000fbbf:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fbc4:	85 c0                	test   eax,eax
c000fbc6:	74 08                	je     c000fbd0 <ACPI::sleep()+0x14>
c000fbc8:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fbcd:	ff d0                	call   eax
c000fbcf:	90                   	nop
c000fbd0:	90                   	nop
c000fbd1:	83 c4 0c             	add    esp,0xc
c000fbd4:	c3                   	ret    
c000fbd5:	90                   	nop
c000fbd6:	66 90                	xchg   ax,ax

c000fbd8 <ACPI::open(int, int, void*)>:
c000fbd8:	57                   	push   edi
c000fbd9:	56                   	push   esi
c000fbda:	53                   	push   ebx
c000fbdb:	81 ec 70 01 00 00    	sub    esp,0x170
c000fbe1:	83 ec 0c             	sub    esp,0xc
c000fbe4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fbeb:	e8 64 fd ff ff       	call   c000f954 <ACPI::detectPCI()>
c000fbf0:	83 c4 10             	add    esp,0x10
c000fbf3:	83 ec 0c             	sub    esp,0xc
c000fbf6:	68 24 1d 02 c0       	push   0xc0021d24
c000fbfb:	e8 6b 11 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c000fc00:	83 c4 10             	add    esp,0x10
c000fc03:	b8 4c 05 00 00       	mov    eax,0x54c
c000fc08:	8a 00                	mov    al,BYTE PTR [eax]
c000fc0a:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fc11:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fc19:	83 f8 01             	cmp    eax,0x1
c000fc1c:	75 12                	jne    c000fc30 <ACPI::open(int, int, void*)+0x58>
c000fc1e:	83 ec 0c             	sub    esp,0xc
c000fc21:	68 8b 16 02 c0       	push   0xc002168b
c000fc26:	e8 ca 4d 00 00       	call   c00149f5 <Thr::loadKernelSymbolTable(char const*)>
c000fc2b:	83 c4 10             	add    esp,0x10
c000fc2e:	eb 34                	jmp    c000fc64 <ACPI::open(int, int, void*)+0x8c>
c000fc30:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fc38:	3d bb 00 00 00       	cmp    eax,0xbb
c000fc3d:	75 15                	jne    c000fc54 <ACPI::open(int, int, void*)+0x7c>
c000fc3f:	83 ec 0c             	sub    esp,0xc
c000fc42:	68 b4 1d 02 c0       	push   0xc0021db4
c000fc47:	e8 a9 4d 00 00       	call   c00149f5 <Thr::loadKernelSymbolTable(char const*)>
c000fc4c:	83 c4 10             	add    esp,0x10
c000fc4f:	eb 13                	jmp    c000fc64 <ACPI::open(int, int, void*)+0x8c>
c000fc51:	8d 76 00             	lea    esi,[esi+0x0]
c000fc54:	83 ec 0c             	sub    esp,0xc
c000fc57:	68 d2 1d 02 c0       	push   0xc0021dd2
c000fc5c:	e8 0a 18 00 00       	call   c001146b <KePanic(char const*)>
c000fc61:	83 c4 10             	add    esp,0x10
c000fc64:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fc6c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fc77:	83 ec 0c             	sub    esp,0xc
c000fc7a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fc81:	e8 30 7e ff ff       	call   c0007ab6 <malloc>
c000fc86:	83 c4 10             	add    esp,0x10
c000fc89:	89 c3                	mov    ebx,eax
c000fc8b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fc90:	83 ec 04             	sub    esp,0x4
c000fc93:	50                   	push   eax
c000fc94:	68 ec 1d 02 c0       	push   0xc0021dec
c000fc99:	53                   	push   ebx
c000fc9a:	e8 fb bc ff ff       	call   c000b99a <File::File(char const*, Process*)>
c000fc9f:	83 c4 10             	add    esp,0x10
c000fca2:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fca9:	83 ec 08             	sub    esp,0x8
c000fcac:	6a 01                	push   0x1
c000fcae:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fcb5:	e8 fe bc ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c000fcba:	83 c4 10             	add    esp,0x10
c000fcbd:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fcc4:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fccc:	75 16                	jne    c000fce4 <ACPI::open(int, int, void*)+0x10c>
c000fcce:	83 ec 0c             	sub    esp,0xc
c000fcd1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fcd8:	e8 39 bd ff ff       	call   c000ba16 <File::close()>
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	eb 0a                	jmp    c000fcec <ACPI::open(int, int, void*)+0x114>
c000fce2:	66 90                	xchg   ax,ax
c000fce4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fcec:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fcf4:	74 1e                	je     c000fd14 <ACPI::open(int, int, void*)+0x13c>
c000fcf6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fcfd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcff:	83 c0 08             	add    eax,0x8
c000fd02:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd04:	83 ec 0c             	sub    esp,0xc
c000fd07:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fd0e:	ff d0                	call   eax
c000fd10:	83 c4 10             	add    esp,0x10
c000fd13:	90                   	nop
c000fd14:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fd1b:	83 f0 01             	xor    eax,0x1
c000fd1e:	0f b6 c0             	movzx  eax,al
c000fd21:	85 c0                	test   eax,eax
c000fd23:	74 43                	je     c000fd68 <ACPI::open(int, int, void*)+0x190>
c000fd25:	83 ec 0c             	sub    esp,0xc
c000fd28:	68 0a 1e 02 c0       	push   0xc0021e0a
c000fd2d:	e8 39 10 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c000fd32:	83 c4 10             	add    esp,0x10
c000fd35:	83 ec 04             	sub    esp,0x4
c000fd38:	6a 0c                	push   0xc
c000fd3a:	68 25 1e 02 c0       	push   0xc0021e25
c000fd3f:	68 36 1e 02 c0       	push   0xc0021e36
c000fd44:	e8 2f 3f 00 00       	call   c0013c78 <Reg::readIntWithDefault(char*, char*, int)>
c000fd49:	83 c4 10             	add    esp,0x10
c000fd4c:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fd53:	83 ec 0c             	sub    esp,0xc
c000fd56:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fd5d:	e8 da 9a ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fd62:	83 c4 10             	add    esp,0x10
c000fd65:	8d 76 00             	lea    esi,[esi+0x0]
c000fd68:	83 ec 0c             	sub    esp,0xc
c000fd6b:	68 35 09 02 c0       	push   0xc0020935
c000fd70:	e8 f6 0f 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c000fd75:	83 c4 10             	add    esp,0x10
c000fd78:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fd7f:	83 ec 08             	sub    esp,0x8
c000fd82:	6a 13                	push   0x13
c000fd84:	50                   	push   eax
c000fd85:	e8 a0 cd ff ff       	call   c000cb2a <getDevicesOfType(DeviceType)>
c000fd8a:	83 c4 0c             	add    esp,0xc
c000fd8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd90:	83 ec 0c             	sub    esp,0xc
c000fd93:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd9a:	50                   	push   eax
c000fd9b:	e8 80 ff 00 00       	call   c001fd20 <LinkedList<Device>::isEmpty()>
c000fda0:	83 c4 10             	add    esp,0x10
c000fda3:	83 f0 01             	xor    eax,0x1
c000fda6:	0f b6 c0             	movzx  eax,al
c000fda9:	85 c0                	test   eax,eax
c000fdab:	0f 84 47 01 00 00    	je     c000fef8 <ACPI::open(int, int, void*)+0x320>
c000fdb1:	83 ec 0c             	sub    esp,0xc
c000fdb4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fdbb:	50                   	push   eax
c000fdbc:	e8 7b ff 00 00       	call   c001fd3c <LinkedList<Device>::getFirstElement()>
c000fdc1:	83 c4 10             	add    esp,0x10
c000fdc4:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fdcb:	83 ec 0c             	sub    esp,0xc
c000fdce:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fdd5:	50                   	push   eax
c000fdd6:	e8 69 ff 00 00       	call   c001fd44 <LinkedList<Device>::removeFirst()>
c000fddb:	83 c4 10             	add    esp,0x10
c000fdde:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fde5:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fdec:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fdf3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fdf7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fdfd:	ba 09 00 00 00       	mov    edx,0x9
c000fe02:	fc                   	cld    
c000fe03:	89 c7                	mov    edi,eax
c000fe05:	89 de                	mov    esi,ebx
c000fe07:	89 d1                	mov    ecx,edx
c000fe09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fe0b:	83 ec 08             	sub    esp,0x8
c000fe0e:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fe12:	50                   	push   eax
c000fe13:	83 ec 24             	sub    esp,0x24
c000fe16:	89 e0                	mov    eax,esp
c000fe18:	89 c3                	mov    ebx,eax
c000fe1a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fe1e:	ba 09 00 00 00       	mov    edx,0x9
c000fe23:	89 df                	mov    edi,ebx
c000fe25:	89 c6                	mov    esi,eax
c000fe27:	89 d1                	mov    ecx,edx
c000fe29:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fe2b:	e8 62 b6 00 00       	call   c001b492 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fe30:	83 c4 30             	add    esp,0x30
c000fe33:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fe3a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fe42:	0f 84 48 ff ff ff    	je     c000fd90 <ACPI::open(int, int, void*)+0x1b8>
c000fe48:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fe53:	83 ec 0c             	sub    esp,0xc
c000fe56:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fe5d:	e8 54 7c ff ff       	call   c0007ab6 <malloc>
c000fe62:	83 c4 10             	add    esp,0x10
c000fe65:	89 c3                	mov    ebx,eax
c000fe67:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fe6c:	83 ec 04             	sub    esp,0x4
c000fe6f:	50                   	push   eax
c000fe70:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fe77:	53                   	push   ebx
c000fe78:	e8 1d bb ff ff       	call   c000b99a <File::File(char const*, Process*)>
c000fe7d:	83 c4 10             	add    esp,0x10
c000fe80:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fe87:	83 ec 0c             	sub    esp,0xc
c000fe8a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fe91:	e8 e6 bd ff ff       	call   c000bc7c <File::exists()>
c000fe96:	83 c4 10             	add    esp,0x10
c000fe99:	0f b6 c0             	movzx  eax,al
c000fe9c:	85 c0                	test   eax,eax
c000fe9e:	74 28                	je     c000fec8 <ACPI::open(int, int, void*)+0x2f0>
c000fea0:	83 ec 08             	sub    esp,0x8
c000fea3:	6a 01                	push   0x1
c000fea5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000feac:	e8 be 55 00 00       	call   c001546f <Thr::loadDLL(char const*, bool)>
c000feb1:	83 c4 10             	add    esp,0x10
c000feb4:	83 ec 08             	sub    esp,0x8
c000feb7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000febe:	50                   	push   eax
c000febf:	e8 dc 57 00 00       	call   c00156a0 <Thr::executeDLL(unsigned long, void*)>
c000fec4:	83 c4 10             	add    esp,0x10
c000fec7:	90                   	nop
c000fec8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fed0:	0f 84 ba fe ff ff    	je     c000fd90 <ACPI::open(int, int, void*)+0x1b8>
c000fed6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fedd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fedf:	83 c0 08             	add    eax,0x8
c000fee2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000feee:	ff d0                	call   eax
c000fef0:	83 c4 10             	add    esp,0x10
c000fef3:	e9 98 fe ff ff       	jmp    c000fd90 <ACPI::open(int, int, void*)+0x1b8>
c000fef8:	83 ec 0c             	sub    esp,0xc
c000fefb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff02:	50                   	push   eax
c000ff03:	e8 14 fe 00 00       	call   c001fd1c <LinkedList<Device>::~LinkedList()>
c000ff08:	83 c4 10             	add    esp,0x10
c000ff0b:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000ff11:	83 ec 08             	sub    esp,0x8
c000ff14:	6a 01                	push   0x1
c000ff16:	68 3d 1e 02 c0       	push   0xc0021e3d
c000ff1b:	e8 4f 55 00 00       	call   c001546f <Thr::loadDLL(char const*, bool)>
c000ff20:	83 c4 10             	add    esp,0x10
c000ff23:	83 ec 08             	sub    esp,0x8
c000ff26:	53                   	push   ebx
c000ff27:	50                   	push   eax
c000ff28:	e8 73 57 00 00       	call   c00156a0 <Thr::executeDLL(unsigned long, void*)>
c000ff2d:	83 c4 10             	add    esp,0x10
c000ff30:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ff35:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ff3b:	83 e0 04             	and    eax,0x4
c000ff3e:	0f b6 c0             	movzx  eax,al
c000ff41:	85 c0                	test   eax,eax
c000ff43:	0f 84 1b 01 00 00    	je     c0010064 <ACPI::open(int, int, void*)+0x48c>
c000ff49:	83 ec 0c             	sub    esp,0xc
c000ff4c:	68 5a 1e 02 c0       	push   0xc0021e5a
c000ff51:	e8 15 0e 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c000ff56:	83 c4 10             	add    esp,0x10
c000ff59:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ff64:	83 ec 0c             	sub    esp,0xc
c000ff67:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ff6e:	e8 43 7b ff ff       	call   c0007ab6 <malloc>
c000ff73:	83 c4 10             	add    esp,0x10
c000ff76:	89 c3                	mov    ebx,eax
c000ff78:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ff7d:	83 ec 04             	sub    esp,0x4
c000ff80:	50                   	push   eax
c000ff81:	68 77 1e 02 c0       	push   0xc0021e77
c000ff86:	53                   	push   ebx
c000ff87:	e8 0e ba ff ff       	call   c000b99a <File::File(char const*, Process*)>
c000ff8c:	83 c4 10             	add    esp,0x10
c000ff8f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ff96:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff9e:	74 20                	je     c000ffc0 <ACPI::open(int, int, void*)+0x3e8>
c000ffa0:	83 ec 0c             	sub    esp,0xc
c000ffa3:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ffaa:	e8 cd bc ff ff       	call   c000bc7c <File::exists()>
c000ffaf:	83 c4 10             	add    esp,0x10
c000ffb2:	0f b6 c0             	movzx  eax,al
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 07                	je     c000ffc0 <ACPI::open(int, int, void*)+0x3e8>
c000ffb9:	b0 01                	mov    al,0x1
c000ffbb:	eb 07                	jmp    c000ffc4 <ACPI::open(int, int, void*)+0x3ec>
c000ffbd:	8d 76 00             	lea    esi,[esi+0x0]
c000ffc0:	b0 00                	mov    al,0x0
c000ffc2:	66 90                	xchg   ax,ax
c000ffc4:	0f b6 c0             	movzx  eax,al
c000ffc7:	85 c0                	test   eax,eax
c000ffc9:	74 25                	je     c000fff0 <ACPI::open(int, int, void*)+0x418>
c000ffcb:	83 ec 08             	sub    esp,0x8
c000ffce:	6a 01                	push   0x1
c000ffd0:	68 77 1e 02 c0       	push   0xc0021e77
c000ffd5:	e8 95 54 00 00       	call   c001546f <Thr::loadDLL(char const*, bool)>
c000ffda:	83 c4 10             	add    esp,0x10
c000ffdd:	83 ec 08             	sub    esp,0x8
c000ffe0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ffe7:	50                   	push   eax
c000ffe8:	e8 b3 56 00 00       	call   c00156a0 <Thr::executeDLL(unsigned long, void*)>
c000ffed:	83 c4 10             	add    esp,0x10
c000fff0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fff8:	74 2a                	je     c0010024 <ACPI::open(int, int, void*)+0x44c>
c000fffa:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010002:	74 20                	je     c0010024 <ACPI::open(int, int, void*)+0x44c>
c0010004:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001000b:	8b 00                	mov    eax,DWORD PTR [eax]
c001000d:	83 c0 08             	add    eax,0x8
c0010010:	8b 00                	mov    eax,DWORD PTR [eax]
c0010012:	83 ec 0c             	sub    esp,0xc
c0010015:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001001c:	ff d0                	call   eax
c001001e:	83 c4 10             	add    esp,0x10
c0010021:	8d 76 00             	lea    esi,[esi+0x0]
c0010024:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c0010029:	83 ec 08             	sub    esp,0x8
c001002c:	68 94 1e 02 c0       	push   0xc0021e94
c0010031:	50                   	push   eax
c0010032:	e8 c1 f1 ff ff       	call   c000f1f8 <findDataTable(unsigned char*, char*)>
c0010037:	83 c4 10             	add    esp,0x10
c001003a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0010041:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0010049:	74 19                	je     c0010064 <ACPI::open(int, int, void*)+0x48c>
c001004b:	83 ec 08             	sub    esp,0x8
c001004e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0010055:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001005c:	e8 13 fb ff ff       	call   c000fb74 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010061:	83 c4 10             	add    esp,0x10
c0010064:	b8 00 00 00 00       	mov    eax,0x0
c0010069:	81 c4 70 01 00 00    	add    esp,0x170
c001006f:	5b                   	pop    ebx
c0010070:	5e                   	pop    esi
c0010071:	5f                   	pop    edi
c0010072:	c3                   	ret    
c0010073:	90                   	nop

c0010074 <CPU::close(int, int, void*)>:
c0010074:	31 c0                	xor    eax,eax
c0010076:	c3                   	ret    
c0010077:	90                   	nop

c0010078 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010078:	60                   	pusha  
c0010079:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001007d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010081:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010085:	9c                   	pushf  
c0010086:	fa                   	cli    
c0010087:	0f 09                	wbinvd 
c0010089:	0f 30                	wrmsr  
c001008b:	9d                   	popf   
c001008c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010090:	89 02                	mov    DWORD PTR [edx],eax
c0010092:	61                   	popa   
c0010093:	c3                   	ret    

c0010094 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010094:	60                   	pusha  
c0010095:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010099:	9c                   	pushf  
c001009a:	fa                   	cli    
c001009b:	0f 09                	wbinvd 
c001009d:	31 c0                	xor    eax,eax
c001009f:	31 d2                	xor    edx,edx
c00100a1:	0f 32                	rdmsr  
c00100a3:	9d                   	popf   
c00100a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100a8:	89 02                	mov    DWORD PTR [edx],eax
c00100aa:	61                   	popa   
c00100ab:	c3                   	ret    

c00100ac <CPU::AMD_K6_writeback(int, int, int)>:
c00100ac:	56                   	push   esi
c00100ad:	53                   	push   ebx
c00100ae:	83 ec 10             	sub    esp,0x10
c00100b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100b5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00100ba:	75 5d                	jne    c0010119 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00100bc:	83 f8 08             	cmp    eax,0x8
c00100bf:	75 09                	jne    c00100ca <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00100c1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00100c6:	7e 13                	jle    c00100db <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00100c8:	eb 30                	jmp    c00100fa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00100ca:	83 f8 06             	cmp    eax,0x6
c00100cd:	7c 4a                	jl     c0010119 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00100cf:	83 f8 07             	cmp    eax,0x7
c00100d2:	7e 07                	jle    c00100db <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00100d4:	83 f8 09             	cmp    eax,0x9
c00100d7:	74 21                	je     c00100fa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00100d9:	eb 3e                	jmp    c0010119 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00100db:	89 e6                	mov    esi,esp
c00100dd:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c00100e3:	56                   	push   esi
c00100e4:	c1 eb 15             	shr    ebx,0x15
c00100e7:	68 82 00 00 c0       	push   0xc0000082
c00100ec:	83 e3 7e             	and    ebx,0x7e
c00100ef:	e8 a0 ff ff ff       	call   c0010094 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00100f4:	56                   	push   esi
c00100f5:	6a 00                	push   0x0
c00100f7:	53                   	push   ebx
c00100f8:	eb 12                	jmp    c001010c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00100fa:	89 e3                	mov    ebx,esp
c00100fc:	53                   	push   ebx
c00100fd:	68 82 00 00 c0       	push   0xc0000082
c0010102:	e8 8d ff ff ff       	call   c0010094 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010107:	53                   	push   ebx
c0010108:	6a 00                	push   0x0
c001010a:	6a 00                	push   0x0
c001010c:	68 82 00 00 c0       	push   0xc0000082
c0010111:	e8 62 ff ff ff       	call   c0010078 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010116:	83 c4 18             	add    esp,0x18
c0010119:	83 c4 10             	add    esp,0x10
c001011c:	5b                   	pop    ebx
c001011d:	5e                   	pop    esi
c001011e:	c3                   	ret    
c001011f:	90                   	nop

c0010120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010120:	55                   	push   ebp
c0010121:	57                   	push   edi
c0010122:	56                   	push   esi
c0010123:	53                   	push   ebx
c0010124:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010128:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001012c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010130:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010134:	39 05 58 34 02 c0    	cmp    DWORD PTR ds:0xc0023458,eax
c001013a:	75 23                	jne    c001015f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001013c:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0010141:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010145:	89 06                	mov    DWORD PTR [esi],eax
c0010147:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001014c:	89 07                	mov    DWORD PTR [edi],eax
c001014e:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c0010153:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010156:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c001015b:	89 02                	mov    DWORD PTR [edx],eax
c001015d:	eb 3f                	jmp    c001019e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001015f:	31 c9                	xor    ecx,ecx
c0010161:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010165:	0f a2                	cpuid  
c0010167:	89 06                	mov    DWORD PTR [esi],eax
c0010169:	89 1f                	mov    DWORD PTR [edi],ebx
c001016b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001016f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010172:	89 10                	mov    DWORD PTR [eax],edx
c0010174:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010178:	a3 58 34 02 c0       	mov    ds:0xc0023458,eax
c001017d:	8b 06                	mov    eax,DWORD PTR [esi]
c001017f:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010184:	8b 07                	mov    eax,DWORD PTR [edi]
c0010186:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c001018b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001018e:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010193:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010197:	8b 00                	mov    eax,DWORD PTR [eax]
c0010199:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c001019e:	5b                   	pop    ebx
c001019f:	5e                   	pop    esi
c00101a0:	5f                   	pop    edi
c00101a1:	5d                   	pop    ebp
c00101a2:	c3                   	ret    
c00101a3:	90                   	nop

c00101a4 <CPU::cpuidCheckEDX(unsigned int)>:
c00101a4:	83 ec 10             	sub    esp,0x10
c00101a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101ab:	50                   	push   eax
c00101ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101b0:	50                   	push   eax
c00101b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101b5:	50                   	push   eax
c00101b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101ba:	50                   	push   eax
c00101bb:	6a 01                	push   0x1
c00101bd:	e8 5e ff ff ff       	call   c0010120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00101c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101c6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00101ca:	0f 95 c0             	setne  al
c00101cd:	83 c4 24             	add    esp,0x24
c00101d0:	c3                   	ret    
c00101d1:	90                   	nop

c00101d2 <CPU::cpuidCheckECX(unsigned int)>:
c00101d2:	83 ec 10             	sub    esp,0x10
c00101d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101d9:	50                   	push   eax
c00101da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101de:	50                   	push   eax
c00101df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101e3:	50                   	push   eax
c00101e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101e8:	50                   	push   eax
c00101e9:	6a 01                	push   0x1
c00101eb:	e8 30 ff ff ff       	call   c0010120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00101f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101f4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00101f8:	0f 95 c0             	setne  al
c00101fb:	83 c4 24             	add    esp,0x24
c00101fe:	c3                   	ret    
c00101ff:	90                   	nop

c0010200 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010200:	83 ec 10             	sub    esp,0x10
c0010203:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010207:	50                   	push   eax
c0010208:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001020c:	50                   	push   eax
c001020d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010211:	50                   	push   eax
c0010212:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010216:	50                   	push   eax
c0010217:	6a 07                	push   0x7
c0010219:	e8 02 ff ff ff       	call   c0010120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001021e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010222:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010226:	0f 95 c0             	setne  al
c0010229:	83 c4 24             	add    esp,0x24
c001022c:	c3                   	ret    
c001022d:	90                   	nop

c001022e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001022e:	83 ec 10             	sub    esp,0x10
c0010231:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010235:	50                   	push   eax
c0010236:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001023a:	50                   	push   eax
c001023b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001023f:	50                   	push   eax
c0010240:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010244:	50                   	push   eax
c0010245:	6a 07                	push   0x7
c0010247:	e8 d4 fe ff ff       	call   c0010120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001024c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010250:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010254:	0f 95 c0             	setne  al
c0010257:	83 c4 24             	add    esp,0x24
c001025a:	c3                   	ret    
c001025b:	90                   	nop

c001025c <CPU::CPU()>:
c001025c:	83 ec 0c             	sub    esp,0xc
c001025f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010263:	83 ec 08             	sub    esp,0x8
c0010266:	68 b9 1f 02 c0       	push   0xc0021fb9
c001026b:	50                   	push   eax
c001026c:	e8 39 c7 ff ff       	call   c000c9aa <Device::Device(char const*)>
c0010271:	83 c4 10             	add    esp,0x10
c0010274:	ba 4c 20 02 c0       	mov    edx,0xc002204c
c0010279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027d:	89 10                	mov    DWORD PTR [eax],edx
c001027f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010283:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001028d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010291:	05 78 01 00 00       	add    eax,0x178
c0010296:	83 ec 0c             	sub    esp,0xc
c0010299:	50                   	push   eax
c001029a:	e8 bd 70 ff ff       	call   c000735c <GDT::GDT()>
c001029f:	83 c4 10             	add    esp,0x10
c00102a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a6:	05 7c 09 00 00       	add    eax,0x97c
c00102ab:	83 ec 0c             	sub    esp,0xc
c00102ae:	50                   	push   eax
c00102af:	e8 f8 72 ff ff       	call   c00075ac <IDT::IDT()>
c00102b4:	83 c4 10             	add    esp,0x10
c00102b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102bb:	05 7c 11 00 00       	add    eax,0x117c
c00102c0:	83 ec 0c             	sub    esp,0xc
c00102c3:	50                   	push   eax
c00102c4:	e8 7b 8c ff ff       	call   c0008f44 <TSS::TSS()>
c00102c9:	83 c4 10             	add    esp,0x10
c00102cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00102d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102db:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00102e5:	90                   	nop
c00102e6:	83 c4 0c             	add    esp,0xc
c00102e9:	c3                   	ret    

c00102ea <CPU::displayFeatures()>:
c00102ea:	c3                   	ret    
c00102eb:	90                   	nop

c00102ec <CPU::detectFeatures()>:
c00102ec:	55                   	push   ebp
c00102ed:	57                   	push   edi
c00102ee:	56                   	push   esi
c00102ef:	53                   	push   ebx
c00102f0:	83 ec 30             	sub    esp,0x30
c00102f3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00102f7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010301:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010308:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001030e:	6a 0d                	push   0xd
c0010310:	6a 00                	push   0x0
c0010312:	55                   	push   ebp
c0010313:	e8 d8 01 ff ff       	call   c00004f0 <memset>
c0010318:	83 c4 10             	add    esp,0x10
c001031b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010320:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010327:	0f 84 db 05 00 00    	je     c0010908 <CPU::detectFeatures()+0x61c>
c001032d:	83 ec 0c             	sub    esp,0xc
c0010330:	89 ef                	mov    edi,ebp
c0010332:	6a 10                	push   0x10
c0010334:	e8 6b fe ff ff       	call   c00101a4 <CPU::cpuidCheckEDX(unsigned int)>
c0010339:	83 e0 01             	and    eax,0x1
c001033c:	8d 14 00             	lea    edx,[eax+eax*1]
c001033f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010345:	83 e0 fd             	and    eax,0xfffffffd
c0010348:	09 d0                	or     eax,edx
c001034a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010350:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010357:	e8 48 fe ff ff       	call   c00101a4 <CPU::cpuidCheckEDX(unsigned int)>
c001035c:	83 e0 01             	and    eax,0x1
c001035f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010366:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001036c:	83 e0 fb             	and    eax,0xfffffffb
c001036f:	09 d0                	or     eax,edx
c0010371:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010377:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001037e:	e8 21 fe ff ff       	call   c00101a4 <CPU::cpuidCheckEDX(unsigned int)>
c0010383:	83 e0 01             	and    eax,0x1
c0010386:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001038d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010393:	83 e0 f7             	and    eax,0xfffffff7
c0010396:	09 d0                	or     eax,edx
c0010398:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001039e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00103a5:	e8 fa fd ff ff       	call   c00101a4 <CPU::cpuidCheckEDX(unsigned int)>
c00103aa:	83 e0 01             	and    eax,0x1
c00103ad:	c1 e0 04             	shl    eax,0x4
c00103b0:	89 c2                	mov    edx,eax
c00103b2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00103b8:	83 e0 ef             	and    eax,0xffffffef
c00103bb:	09 d0                	or     eax,edx
c00103bd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00103c3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00103ca:	e8 d5 fd ff ff       	call   c00101a4 <CPU::cpuidCheckEDX(unsigned int)>
c00103cf:	83 e0 01             	and    eax,0x1
c00103d2:	c1 e0 05             	shl    eax,0x5
c00103d5:	89 c2                	mov    edx,eax
c00103d7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00103dd:	83 e0 df             	and    eax,0xffffffdf
c00103e0:	09 d0                	or     eax,edx
c00103e2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00103e8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00103ef:	e8 b0 fd ff ff       	call   c00101a4 <CPU::cpuidCheckEDX(unsigned int)>
c00103f4:	83 e0 01             	and    eax,0x1
c00103f7:	8d 14 00             	lea    edx,[eax+eax*1]
c00103fa:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010400:	83 e0 fd             	and    eax,0xfffffffd
c0010403:	09 d0                	or     eax,edx
c0010405:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001040b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010412:	e8 8d fd ff ff       	call   c00101a4 <CPU::cpuidCheckEDX(unsigned int)>
c0010417:	83 e0 01             	and    eax,0x1
c001041a:	c1 e0 06             	shl    eax,0x6
c001041d:	89 c2                	mov    edx,eax
c001041f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010425:	83 e0 bf             	and    eax,0xffffffbf
c0010428:	09 d0                	or     eax,edx
c001042a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010430:	58                   	pop    eax
c0010431:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010435:	50                   	push   eax
c0010436:	8d 44 24 28          	lea    eax,[esp+0x28]
c001043a:	50                   	push   eax
c001043b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001043f:	56                   	push   esi
c0010440:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010444:	50                   	push   eax
c0010445:	6a 00                	push   0x0
c0010447:	e8 d4 fc ff ff       	call   c0010120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001044c:	b8 04 00 00 00       	mov    eax,0x4
c0010451:	89 c1                	mov    ecx,eax
c0010453:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010455:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001045b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001045f:	89 c1                	mov    ecx,eax
c0010461:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010463:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010469:	8d 74 24 38          	lea    esi,[esp+0x38]
c001046d:	89 c1                	mov    ecx,eax
c001046f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010471:	83 c4 18             	add    esp,0x18
c0010474:	68 c8 1e 02 c0       	push   0xc0021ec8
c0010479:	55                   	push   ebp
c001047a:	e8 d1 02 ff ff       	call   c0000750 <strcmp>
c001047f:	83 c4 10             	add    esp,0x10
c0010482:	85 c0                	test   eax,eax
c0010484:	75 0f                	jne    c0010495 <CPU::detectFeatures()+0x1a9>
c0010486:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010490:	e9 22 02 00 00       	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c0010495:	50                   	push   eax
c0010496:	50                   	push   eax
c0010497:	68 d5 1e 02 c0       	push   0xc0021ed5
c001049c:	55                   	push   ebp
c001049d:	e8 ae 02 ff ff       	call   c0000750 <strcmp>
c00104a2:	83 c4 10             	add    esp,0x10
c00104a5:	85 c0                	test   eax,eax
c00104a7:	74 dd                	je     c0010486 <CPU::detectFeatures()+0x19a>
c00104a9:	50                   	push   eax
c00104aa:	50                   	push   eax
c00104ab:	68 e2 1e 02 c0       	push   0xc0021ee2
c00104b0:	55                   	push   ebp
c00104b1:	e8 9a 02 ff ff       	call   c0000750 <strcmp>
c00104b6:	83 c4 10             	add    esp,0x10
c00104b9:	85 c0                	test   eax,eax
c00104bb:	74 2a                	je     c00104e7 <CPU::detectFeatures()+0x1fb>
c00104bd:	50                   	push   eax
c00104be:	50                   	push   eax
c00104bf:	68 ef 1e 02 c0       	push   0xc0021eef
c00104c4:	55                   	push   ebp
c00104c5:	e8 86 02 ff ff       	call   c0000750 <strcmp>
c00104ca:	83 c4 10             	add    esp,0x10
c00104cd:	85 c0                	test   eax,eax
c00104cf:	74 16                	je     c00104e7 <CPU::detectFeatures()+0x1fb>
c00104d1:	50                   	push   eax
c00104d2:	50                   	push   eax
c00104d3:	68 fc 1e 02 c0       	push   0xc0021efc
c00104d8:	55                   	push   ebp
c00104d9:	e8 72 02 ff ff       	call   c0000750 <strcmp>
c00104de:	83 c4 10             	add    esp,0x10
c00104e1:	85 c0                	test   eax,eax
c00104e3:	74 48                	je     c001052d <CPU::detectFeatures()+0x241>
c00104e5:	eb 0f                	jmp    c00104f6 <CPU::detectFeatures()+0x20a>
c00104e7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00104f1:	e9 c1 01 00 00       	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c00104f6:	50                   	push   eax
c00104f7:	50                   	push   eax
c00104f8:	68 09 1f 02 c0       	push   0xc0021f09
c00104fd:	55                   	push   ebp
c00104fe:	e8 4d 02 ff ff       	call   c0000750 <strcmp>
c0010503:	83 c4 10             	add    esp,0x10
c0010506:	85 c0                	test   eax,eax
c0010508:	74 23                	je     c001052d <CPU::detectFeatures()+0x241>
c001050a:	57                   	push   edi
c001050b:	57                   	push   edi
c001050c:	68 16 1f 02 c0       	push   0xc0021f16
c0010511:	55                   	push   ebp
c0010512:	e8 39 02 ff ff       	call   c0000750 <strcmp>
c0010517:	83 c4 10             	add    esp,0x10
c001051a:	85 c0                	test   eax,eax
c001051c:	75 1e                	jne    c001053c <CPU::detectFeatures()+0x250>
c001051e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010528:	e9 8a 01 00 00       	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c001052d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010537:	e9 7b 01 00 00       	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c001053c:	56                   	push   esi
c001053d:	56                   	push   esi
c001053e:	68 23 1f 02 c0       	push   0xc0021f23
c0010543:	55                   	push   ebp
c0010544:	e8 07 02 ff ff       	call   c0000750 <strcmp>
c0010549:	83 c4 10             	add    esp,0x10
c001054c:	85 c0                	test   eax,eax
c001054e:	75 0f                	jne    c001055f <CPU::detectFeatures()+0x273>
c0010550:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001055a:	e9 58 01 00 00       	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c001055f:	51                   	push   ecx
c0010560:	51                   	push   ecx
c0010561:	68 e2 1e 02 c0       	push   0xc0021ee2
c0010566:	55                   	push   ebp
c0010567:	e8 e4 01 ff ff       	call   c0000750 <strcmp>
c001056c:	83 c4 10             	add    esp,0x10
c001056f:	85 c0                	test   eax,eax
c0010571:	75 0f                	jne    c0010582 <CPU::detectFeatures()+0x296>
c0010573:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001057d:	e9 35 01 00 00       	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c0010582:	52                   	push   edx
c0010583:	52                   	push   edx
c0010584:	68 30 1f 02 c0       	push   0xc0021f30
c0010589:	55                   	push   ebp
c001058a:	e8 c1 01 ff ff       	call   c0000750 <strcmp>
c001058f:	83 c4 10             	add    esp,0x10
c0010592:	85 c0                	test   eax,eax
c0010594:	75 0f                	jne    c00105a5 <CPU::detectFeatures()+0x2b9>
c0010596:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00105a0:	e9 12 01 00 00       	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c00105a5:	50                   	push   eax
c00105a6:	50                   	push   eax
c00105a7:	68 3d 1f 02 c0       	push   0xc0021f3d
c00105ac:	55                   	push   ebp
c00105ad:	e8 9e 01 ff ff       	call   c0000750 <strcmp>
c00105b2:	83 c4 10             	add    esp,0x10
c00105b5:	85 c0                	test   eax,eax
c00105b7:	75 0f                	jne    c00105c8 <CPU::detectFeatures()+0x2dc>
c00105b9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00105c3:	e9 ef 00 00 00       	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c00105c8:	50                   	push   eax
c00105c9:	50                   	push   eax
c00105ca:	68 4a 1f 02 c0       	push   0xc0021f4a
c00105cf:	55                   	push   ebp
c00105d0:	e8 7b 01 ff ff       	call   c0000750 <strcmp>
c00105d5:	83 c4 10             	add    esp,0x10
c00105d8:	85 c0                	test   eax,eax
c00105da:	75 0f                	jne    c00105eb <CPU::detectFeatures()+0x2ff>
c00105dc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00105e6:	e9 cc 00 00 00       	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c00105eb:	50                   	push   eax
c00105ec:	50                   	push   eax
c00105ed:	68 57 1f 02 c0       	push   0xc0021f57
c00105f2:	55                   	push   ebp
c00105f3:	e8 58 01 ff ff       	call   c0000750 <strcmp>
c00105f8:	83 c4 10             	add    esp,0x10
c00105fb:	85 c0                	test   eax,eax
c00105fd:	75 0f                	jne    c001060e <CPU::detectFeatures()+0x322>
c00105ff:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010609:	e9 a9 00 00 00       	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c001060e:	50                   	push   eax
c001060f:	50                   	push   eax
c0010610:	68 64 1f 02 c0       	push   0xc0021f64
c0010615:	55                   	push   ebp
c0010616:	e8 35 01 ff ff       	call   c0000750 <strcmp>
c001061b:	83 c4 10             	add    esp,0x10
c001061e:	85 c0                	test   eax,eax
c0010620:	75 0f                	jne    c0010631 <CPU::detectFeatures()+0x345>
c0010622:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001062c:	e9 86 00 00 00       	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c0010631:	50                   	push   eax
c0010632:	50                   	push   eax
c0010633:	68 71 1f 02 c0       	push   0xc0021f71
c0010638:	55                   	push   ebp
c0010639:	e8 12 01 ff ff       	call   c0000750 <strcmp>
c001063e:	83 c4 10             	add    esp,0x10
c0010641:	85 c0                	test   eax,eax
c0010643:	75 0c                	jne    c0010651 <CPU::detectFeatures()+0x365>
c0010645:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001064f:	eb 66                	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c0010651:	50                   	push   eax
c0010652:	50                   	push   eax
c0010653:	68 7e 1f 02 c0       	push   0xc0021f7e
c0010658:	55                   	push   ebp
c0010659:	e8 f2 00 ff ff       	call   c0000750 <strcmp>
c001065e:	83 c4 10             	add    esp,0x10
c0010661:	85 c0                	test   eax,eax
c0010663:	75 0c                	jne    c0010671 <CPU::detectFeatures()+0x385>
c0010665:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001066f:	eb 46                	jmp    c00106b7 <CPU::detectFeatures()+0x3cb>
c0010671:	57                   	push   edi
c0010672:	57                   	push   edi
c0010673:	68 8b 1f 02 c0       	push   0xc0021f8b
c0010678:	55                   	push   ebp
c0010679:	e8 d2 00 ff ff       	call   c0000750 <strcmp>
c001067e:	83 c4 10             	add    esp,0x10
c0010681:	85 c0                	test   eax,eax
c0010683:	74 e0                	je     c0010665 <CPU::detectFeatures()+0x379>
c0010685:	56                   	push   esi
c0010686:	56                   	push   esi
c0010687:	68 98 1f 02 c0       	push   0xc0021f98
c001068c:	55                   	push   ebp
c001068d:	e8 be 00 ff ff       	call   c0000750 <strcmp>
c0010692:	83 c4 10             	add    esp,0x10
c0010695:	85 c0                	test   eax,eax
c0010697:	74 cc                	je     c0010665 <CPU::detectFeatures()+0x379>
c0010699:	51                   	push   ecx
c001069a:	51                   	push   ecx
c001069b:	68 a5 1f 02 c0       	push   0xc0021fa5
c00106a0:	55                   	push   ebp
c00106a1:	e8 aa 00 ff ff       	call   c0000750 <strcmp>
c00106a6:	83 c4 10             	add    esp,0x10
c00106a9:	85 c0                	test   eax,eax
c00106ab:	74 b8                	je     c0010665 <CPU::detectFeatures()+0x379>
c00106ad:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00106b7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00106bc:	0f 86 be 00 00 00    	jbe    c0010780 <CPU::detectFeatures()+0x494>
c00106c2:	83 ec 0c             	sub    esp,0xc
c00106c5:	68 80 00 00 00       	push   0x80
c00106ca:	e8 31 fb ff ff       	call   c0010200 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00106cf:	83 e0 01             	and    eax,0x1
c00106d2:	c1 e0 06             	shl    eax,0x6
c00106d5:	89 c2                	mov    edx,eax
c00106d7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00106dd:	83 e0 bf             	and    eax,0xffffffbf
c00106e0:	09 d0                	or     eax,edx
c00106e2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00106e8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00106ef:	e8 0c fb ff ff       	call   c0010200 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00106f4:	83 e0 01             	and    eax,0x1
c00106f7:	c1 e0 04             	shl    eax,0x4
c00106fa:	89 c2                	mov    edx,eax
c00106fc:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010702:	83 e0 ef             	and    eax,0xffffffef
c0010705:	09 d0                	or     eax,edx
c0010707:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001070d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010714:	e8 e7 fa ff ff       	call   c0010200 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010719:	89 c2                	mov    edx,eax
c001071b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010721:	c1 e2 07             	shl    edx,0x7
c0010724:	83 e0 7f             	and    eax,0x7f
c0010727:	09 d0                	or     eax,edx
c0010729:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001072f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010736:	e8 f3 fa ff ff       	call   c001022e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001073b:	83 e0 01             	and    eax,0x1
c001073e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010745:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001074b:	83 e0 f7             	and    eax,0xfffffff7
c001074e:	09 d0                	or     eax,edx
c0010750:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010756:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001075d:	e8 cc fa ff ff       	call   c001022e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010762:	83 c4 10             	add    esp,0x10
c0010765:	83 e0 01             	and    eax,0x1
c0010768:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001076f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010775:	83 e0 fb             	and    eax,0xfffffffb
c0010778:	09 d0                	or     eax,edx
c001077a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010780:	83 ec 0c             	sub    esp,0xc
c0010783:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010787:	50                   	push   eax
c0010788:	8d 44 24 28          	lea    eax,[esp+0x28]
c001078c:	50                   	push   eax
c001078d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010791:	57                   	push   edi
c0010792:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010796:	56                   	push   esi
c0010797:	6a 01                	push   0x1
c0010799:	e8 82 f9 ff ff       	call   c0010120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001079e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107a2:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00107a8:	89 c1                	mov    ecx,eax
c00107aa:	83 e2 f0             	and    edx,0xfffffff0
c00107ad:	83 e1 0f             	and    ecx,0xf
c00107b0:	09 ca                	or     edx,ecx
c00107b2:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00107b8:	89 c2                	mov    edx,eax
c00107ba:	c1 ea 04             	shr    edx,0x4
c00107bd:	83 e2 0f             	and    edx,0xf
c00107c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00107c4:	89 d1                	mov    ecx,edx
c00107c6:	83 c4 20             	add    esp,0x20
c00107c9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00107cf:	c1 e1 06             	shl    ecx,0x6
c00107d2:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00107d8:	09 ca                	or     edx,ecx
c00107da:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00107e1:	89 c2                	mov    edx,eax
c00107e3:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00107e9:	c1 ea 08             	shr    edx,0x8
c00107ec:	83 e1 3f             	and    ecx,0x3f
c00107ef:	83 e2 0f             	and    edx,0xf
c00107f2:	89 d5                	mov    ebp,edx
c00107f4:	83 e5 03             	and    ebp,0x3
c00107f7:	c1 e5 06             	shl    ebp,0x6
c00107fa:	09 e9                	or     ecx,ebp
c00107fc:	89 d5                	mov    ebp,edx
c00107fe:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010804:	c1 ed 02             	shr    ebp,0x2
c0010807:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001080d:	83 e1 c0             	and    ecx,0xffffffc0
c0010810:	09 e9                	or     ecx,ebp
c0010812:	89 c5                	mov    ebp,eax
c0010814:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001081a:	c1 ed 08             	shr    ebp,0x8
c001081d:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010823:	83 e5 30             	and    ebp,0x30
c0010826:	83 e1 cf             	and    ecx,0xffffffcf
c0010829:	09 e9                	or     ecx,ebp
c001082b:	83 fa 06             	cmp    edx,0x6
c001082e:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010834:	74 05                	je     c001083b <CPU::detectFeatures()+0x54f>
c0010836:	83 fa 0f             	cmp    edx,0xf
c0010839:	75 64                	jne    c001089f <CPU::detectFeatures()+0x5b3>
c001083b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010841:	89 c1                	mov    ecx,eax
c0010843:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010849:	c1 e9 10             	shr    ecx,0x10
c001084c:	c1 e1 04             	shl    ecx,0x4
c001084f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010853:	0f b6 c9             	movzx  ecx,cl
c0010856:	c1 e1 06             	shl    ecx,0x6
c0010859:	09 e9                	or     ecx,ebp
c001085b:	83 fa 0f             	cmp    edx,0xf
c001085e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010865:	75 38                	jne    c001089f <CPU::detectFeatures()+0x5b3>
c0010867:	c1 e8 14             	shr    eax,0x14
c001086a:	83 c0 0f             	add    eax,0xf
c001086d:	0f b6 c0             	movzx  eax,al
c0010870:	89 c2                	mov    edx,eax
c0010872:	c1 e8 02             	shr    eax,0x2
c0010875:	83 e2 03             	and    edx,0x3
c0010878:	89 d1                	mov    ecx,edx
c001087a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010880:	c1 e1 06             	shl    ecx,0x6
c0010883:	83 e2 3f             	and    edx,0x3f
c0010886:	09 ca                	or     edx,ecx
c0010888:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001088e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010894:	83 e2 c0             	and    edx,0xffffffc0
c0010897:	09 d0                	or     eax,edx
c0010899:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001089f:	83 ec 0c             	sub    esp,0xc
c00108a2:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108a8:	83 c8 07             	or     eax,0x7
c00108ab:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108b1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00108b5:	50                   	push   eax
c00108b6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00108ba:	55                   	push   ebp
c00108bb:	57                   	push   edi
c00108bc:	56                   	push   esi
c00108bd:	68 00 00 00 80       	push   0x80000000
c00108c2:	e8 59 f8 ff ff       	call   c0010120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00108c7:	83 c4 20             	add    esp,0x20
c00108ca:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00108d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00108d6:	76 1e                	jbe    c00108f6 <CPU::detectFeatures()+0x60a>
c00108d8:	83 ec 0c             	sub    esp,0xc
c00108db:	50                   	push   eax
c00108dc:	55                   	push   ebp
c00108dd:	57                   	push   edi
c00108de:	56                   	push   esi
c00108df:	68 01 00 00 80       	push   0x80000001
c00108e4:	e8 37 f8 ff ff       	call   c0010120 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00108e9:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00108f3:	83 c4 20             	add    esp,0x20
c00108f6:	52                   	push   edx
c00108f7:	52                   	push   edx
c00108f8:	68 b1 1f 02 c0       	push   0xc0021fb1
c00108fd:	53                   	push   ebx
c00108fe:	e8 99 c0 ff ff       	call   c000c99c <Device::setName(char const*)>
c0010903:	83 c4 10             	add    esp,0x10
c0010906:	eb 69                	jmp    c0010971 <CPU::detectFeatures()+0x685>
c0010908:	50                   	push   eax
c0010909:	50                   	push   eax
c001090a:	68 16 1f 02 c0       	push   0xc0021f16
c001090f:	55                   	push   ebp
c0010910:	e8 2b fd fe ff       	call   c0000640 <strcpy>
c0010915:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001091f:	e8 9f f8 fe ff       	call   c00001c3 <is486>
c0010924:	83 c4 10             	add    esp,0x10
c0010927:	85 c0                	test   eax,eax
c0010929:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001092f:	74 1f                	je     c0010950 <CPU::detectFeatures()+0x664>
c0010931:	83 c8 07             	or     eax,0x7
c0010934:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001093a:	0f 20 c0             	mov    eax,cr0
c001093d:	83 e0 14             	and    eax,0x14
c0010940:	83 f8 04             	cmp    eax,0x4
c0010943:	75 10                	jne    c0010955 <CPU::detectFeatures()+0x669>
c0010945:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001094b:	83 e0 fd             	and    eax,0xfffffffd
c001094e:	eb 1b                	jmp    c001096b <CPU::detectFeatures()+0x67f>
c0010950:	83 e0 f8             	and    eax,0xfffffff8
c0010953:	eb df                	jmp    c0010934 <CPU::detectFeatures()+0x648>
c0010955:	e8 44 f8 fe ff       	call   c000019e <hasLegacyFPU>
c001095a:	83 e0 01             	and    eax,0x1
c001095d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010960:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010966:	83 e0 fd             	and    eax,0xfffffffd
c0010969:	09 d0                	or     eax,edx
c001096b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010971:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010978:	74 17                	je     c0010991 <CPU::detectFeatures()+0x6a5>
c001097a:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010980:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010986:	83 c8 10             	or     eax,0x10
c0010989:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001098f:	eb 20                	jmp    c00109b1 <CPU::detectFeatures()+0x6c5>
c0010991:	e8 08 f8 fe ff       	call   c000019e <hasLegacyFPU>
c0010996:	83 e0 01             	and    eax,0x1
c0010999:	8d 14 00             	lea    edx,[eax+eax*1]
c001099c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00109a2:	83 e0 fd             	and    eax,0xfffffffd
c00109a5:	09 d0                	or     eax,edx
c00109a7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00109ad:	a8 02                	test   al,0x2
c00109af:	75 c9                	jne    c001097a <CPU::detectFeatures()+0x68e>
c00109b1:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00109b8:	83 c4 2c             	add    esp,0x2c
c00109bb:	5b                   	pop    ebx
c00109bc:	5e                   	pop    esi
c00109bd:	5f                   	pop    edi
c00109be:	5d                   	pop    ebp
c00109bf:	c3                   	ret    

c00109c0 <CPU::setupSMEP()>:
c00109c0:	0f 20 e0             	mov    eax,cr4
c00109c3:	0d 00 00 10 00       	or     eax,0x100000
c00109c8:	0f 22 e0             	mov    cr4,eax
c00109cb:	c3                   	ret    

c00109cc <CPU::setupUMIP()>:
c00109cc:	0f 20 e0             	mov    eax,cr4
c00109cf:	80 cc 08             	or     ah,0x8
c00109d2:	0f 22 e0             	mov    cr4,eax
c00109d5:	c3                   	ret    

c00109d6 <CPU::setupTSC()>:
c00109d6:	0f 20 e0             	mov    eax,cr4
c00109d9:	83 c8 04             	or     eax,0x4
c00109dc:	0f 22 e0             	mov    cr4,eax
c00109df:	c3                   	ret    

c00109e0 <CPU::setupLargePages()>:
c00109e0:	0f 20 e0             	mov    eax,cr4
c00109e3:	83 c8 10             	or     eax,0x10
c00109e6:	0f 22 e0             	mov    cr4,eax
c00109e9:	c3                   	ret    

c00109ea <CPU::setupPAT()>:
c00109ea:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00109ef:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00109f6:	74 2c                	je     c0010a24 <CPU::setupPAT()+0x3a>
c00109f8:	53                   	push   ebx
c00109f9:	83 ec 10             	sub    esp,0x10
c00109fc:	68 77 02 00 00       	push   0x277
c0010a01:	50                   	push   eax
c0010a02:	e8 b9 66 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010a07:	83 e2 f8             	and    edx,0xfffffff8
c0010a0a:	83 ca 01             	or     edx,0x1
c0010a0d:	52                   	push   edx
c0010a0e:	50                   	push   eax
c0010a0f:	68 77 02 00 00       	push   0x277
c0010a14:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010a1a:	e8 cd 66 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010a1f:	83 c4 28             	add    esp,0x28
c0010a22:	5b                   	pop    ebx
c0010a23:	c3                   	ret    
c0010a24:	c3                   	ret    
c0010a25:	90                   	nop

c0010a26 <CPU::setupMTRR()>:
c0010a26:	c3                   	ret    
c0010a27:	90                   	nop

c0010a28 <CPU::setupGlobalPages()>:
c0010a28:	0f 20 e0             	mov    eax,cr4
c0010a2b:	0c 80                	or     al,0x80
c0010a2d:	0f 22 e0             	mov    cr4,eax
c0010a30:	c3                   	ret    
c0010a31:	90                   	nop

c0010a32 <CPU::allowUsermodeDataAccess()>:
c0010a32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a36:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010a3d:	74 03                	je     c0010a42 <CPU::allowUsermodeDataAccess()+0x10>
c0010a3f:	0f 01 cb             	stac   
c0010a42:	c3                   	ret    
c0010a43:	90                   	nop

c0010a44 <CPU::prohibitUsermodeDataAccess()>:
c0010a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a48:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010a4f:	74 03                	je     c0010a54 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010a51:	0f 01 ca             	clac   
c0010a54:	c3                   	ret    
c0010a55:	90                   	nop

c0010a56 <CPU::setupSMAP()>:
c0010a56:	0f 20 e0             	mov    eax,cr4
c0010a59:	0d 00 00 20 00       	or     eax,0x200000
c0010a5e:	0f 22 e0             	mov    cr4,eax
c0010a61:	eb e1                	jmp    c0010a44 <CPU::prohibitUsermodeDataAccess()>
c0010a63:	90                   	nop

c0010a64 <CPU::setupFeatures()>:
c0010a64:	53                   	push   ebx
c0010a65:	83 ec 08             	sub    esp,0x8
c0010a68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a6c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010a73:	74 18                	je     c0010a8d <CPU::setupFeatures()+0x29>
c0010a75:	83 ec 0c             	sub    esp,0xc
c0010a78:	68 bd 1f 02 c0       	push   0xc0021fbd
c0010a7d:	e8 c3 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a85:	e8 42 ff ff ff       	call   c00109cc <CPU::setupUMIP()>
c0010a8a:	83 c4 10             	add    esp,0x10
c0010a8d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010a94:	74 18                	je     c0010aae <CPU::setupFeatures()+0x4a>
c0010a96:	83 ec 0c             	sub    esp,0xc
c0010a99:	68 c7 1f 02 c0       	push   0xc0021fc7
c0010a9e:	e8 a2 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010aa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010aa6:	e8 2b ff ff ff       	call   c00109d6 <CPU::setupTSC()>
c0010aab:	83 c4 10             	add    esp,0x10
c0010aae:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010ab5:	74 18                	je     c0010acf <CPU::setupFeatures()+0x6b>
c0010ab7:	83 ec 0c             	sub    esp,0xc
c0010aba:	68 d0 1f 02 c0       	push   0xc0021fd0
c0010abf:	e8 81 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ac4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ac7:	e8 14 ff ff ff       	call   c00109e0 <CPU::setupLargePages()>
c0010acc:	83 c4 10             	add    esp,0x10
c0010acf:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010ad6:	74 18                	je     c0010af0 <CPU::setupFeatures()+0x8c>
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	68 d9 1f 02 c0       	push   0xc0021fd9
c0010ae0:	e8 60 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ae5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ae8:	e8 3b ff ff ff       	call   c0010a28 <CPU::setupGlobalPages()>
c0010aed:	83 c4 10             	add    esp,0x10
c0010af0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010af7:	74 18                	je     c0010b11 <CPU::setupFeatures()+0xad>
c0010af9:	83 ec 0c             	sub    esp,0xc
c0010afc:	68 eb 1f 02 c0       	push   0xc0021feb
c0010b01:	e8 3f 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010b06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b09:	e8 dc fe ff ff       	call   c00109ea <CPU::setupPAT()>
c0010b0e:	83 c4 10             	add    esp,0x10
c0010b11:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010b18:	74 11                	je     c0010b2b <CPU::setupFeatures()+0xc7>
c0010b1a:	c7 44 24 10 f4 1f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021ff4
c0010b22:	83 c4 08             	add    esp,0x8
c0010b25:	5b                   	pop    ebx
c0010b26:	e9 1a 9e ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010b2b:	83 c4 08             	add    esp,0x8
c0010b2e:	5b                   	pop    ebx
c0010b2f:	c3                   	ret    

c0010b30 <CPU::open(int, int, void*)>:
c0010b30:	55                   	push   ebp
c0010b31:	57                   	push   edi
c0010b32:	56                   	push   esi
c0010b33:	53                   	push   ebx
c0010b34:	83 ec 18             	sub    esp,0x18
c0010b37:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b3b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010b3f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010b43:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010b49:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010b4f:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010b55:	50                   	push   eax
c0010b56:	e8 63 68 ff ff       	call   c00073be <GDT::setup()>
c0010b5b:	83 c4 0c             	add    esp,0xc
c0010b5e:	6a 00                	push   0x0
c0010b60:	68 ef be ad de       	push   0xdeadbeef
c0010b65:	55                   	push   ebp
c0010b66:	e8 1d 84 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010b6b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010b6e:	e8 f5 83 ff ff       	call   c0008f68 <TSS::flush()>
c0010b73:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010b79:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b7c:	e8 a1 6a ff ff       	call   c0007622 <IDT::setup()>
c0010b81:	b8 00 04 00 00       	mov    eax,0x400
c0010b86:	0f 23 f8             	mov    db7,eax
c0010b89:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010b93:	e8 27 72 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010b98:	83 c4 10             	add    esp,0x10
c0010b9b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010ba1:	85 f6                	test   esi,esi
c0010ba3:	89 38                	mov    DWORD PTR [eax],edi
c0010ba5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010bab:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010bae:	74 10                	je     c0010bc0 <CPU::open(int, int, void*)+0x90>
c0010bb0:	50                   	push   eax
c0010bb1:	50                   	push   eax
c0010bb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010bb8:	56                   	push   esi
c0010bb9:	e8 f0 8c ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010bbe:	eb 0d                	jmp    c0010bcd <CPU::open(int, int, void*)+0x9d>
c0010bc0:	83 ec 0c             	sub    esp,0xc
c0010bc3:	68 fe 1f 02 c0       	push   0xc0021ffe
c0010bc8:	e8 9e 08 00 00       	call   c001146b <KePanic(char const*)>
c0010bcd:	83 c4 10             	add    esp,0x10
c0010bd0:	83 ec 0c             	sub    esp,0xc
c0010bd3:	68 0c 20 02 c0       	push   0xc002200c
c0010bd8:	e8 8e 01 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c0010bdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010be0:	e8 07 f7 ff ff       	call   c00102ec <CPU::detectFeatures()>
c0010be5:	c7 04 24 2f 20 02 c0 	mov    DWORD PTR [esp],0xc002202f
c0010bec:	e8 7a 01 00 00       	call   c0010d6b <KeSetBootMessage(char const*)>
c0010bf1:	e8 af 73 00 00       	call   c0017fa5 <HalInitialise()>
c0010bf6:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010bfb:	83 e0 10             	and    eax,0x10
c0010bfe:	83 f8 01             	cmp    eax,0x1
c0010c01:	19 c0                	sbb    eax,eax
c0010c03:	83 e0 46             	and    eax,0x46
c0010c06:	83 c0 1e             	add    eax,0x1e
c0010c09:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c0c:	e8 28 d6 ff ff       	call   c000e239 <setupTimer(int)>
c0010c11:	83 c4 10             	add    esp,0x10
c0010c14:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010c1a:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010c21:	74 0c                	je     c0010c2f <CPU::open(int, int, void*)+0xff>
c0010c23:	83 ec 0c             	sub    esp,0xc
c0010c26:	53                   	push   ebx
c0010c27:	e8 38 fe ff ff       	call   c0010a64 <CPU::setupFeatures()>
c0010c2c:	83 c4 10             	add    esp,0x10
c0010c2f:	83 c4 0c             	add    esp,0xc
c0010c32:	31 c0                	xor    eax,eax
c0010c34:	5b                   	pop    ebx
c0010c35:	5e                   	pop    esi
c0010c36:	5f                   	pop    edi
c0010c37:	5d                   	pop    ebp
c0010c38:	c3                   	ret    

c0010c39 <KeInitialiseAtexit()>:
c0010c39:	83 ec 10             	sub    esp,0x10
c0010c3c:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010c46:	6a 60                	push   0x60
c0010c48:	6a 00                	push   0x0
c0010c4a:	68 20 be 02 c0       	push   0xc002be20
c0010c4f:	e8 9c f8 fe ff       	call   c00004f0 <memset>
c0010c54:	83 c4 1c             	add    esp,0x1c
c0010c57:	c3                   	ret    

c0010c58 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010c58:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010c5d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010c61:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010c68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c6c:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010c73:	40                   	inc    eax
c0010c74:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010c79:	83 f8 17             	cmp    eax,0x17
c0010c7c:	7e 0d                	jle    c0010c8b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010c7e:	c7 44 24 04 70 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022070
c0010c86:	e9 e0 07 00 00       	jmp    c001146b <KePanic(char const*)>
c0010c8b:	c3                   	ret    

c0010c8c <KeExecuteAtexit()>:
c0010c8c:	53                   	push   ebx
c0010c8d:	31 db                	xor    ebx,ebx
c0010c8f:	83 ec 08             	sub    esp,0x8
c0010c92:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010c98:	7e 50                	jle    c0010cea <KeExecuteAtexit()+0x5e>
c0010c9a:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010ca1:	85 c0                	test   eax,eax
c0010ca3:	74 42                	je     c0010ce7 <KeExecuteAtexit()+0x5b>
c0010ca5:	51                   	push   ecx
c0010ca6:	50                   	push   eax
c0010ca7:	53                   	push   ebx
c0010ca8:	68 89 20 02 c0       	push   0xc0022089
c0010cad:	e8 93 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010cb2:	58                   	pop    eax
c0010cb3:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010cba:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010cc1:	c7 04 24 ab 20 02 c0 	mov    DWORD PTR [esp],0xc00220ab
c0010cc8:	e8 78 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ccd:	c7 04 24 0b 32 02 c0 	mov    DWORD PTR [esp],0xc002320b
c0010cd4:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010cdf:	e8 61 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ce4:	83 c4 10             	add    esp,0x10
c0010ce7:	43                   	inc    ebx
c0010ce8:	eb a8                	jmp    c0010c92 <KeExecuteAtexit()+0x6>
c0010cea:	83 c4 08             	add    esp,0x8
c0010ced:	5b                   	pop    ebx
c0010cee:	c3                   	ret    

c0010cef <KeDisplaySplashScreen()>:
c0010cef:	55                   	push   ebp
c0010cf0:	bd 05 00 00 00       	mov    ebp,0x5
c0010cf5:	57                   	push   edi
c0010cf6:	bf 0a 00 00 00       	mov    edi,0xa
c0010cfb:	56                   	push   esi
c0010cfc:	31 f6                	xor    esi,esi
c0010cfe:	53                   	push   ebx
c0010cff:	31 db                	xor    ebx,ebx
c0010d01:	83 ec 0c             	sub    esp,0xc
c0010d04:	0f b6 96 60 34 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcba0]
c0010d0b:	89 d0                	mov    eax,edx
c0010d0d:	85 d2                	test   edx,edx
c0010d0f:	74 52                	je     c0010d63 <KeDisplaySplashScreen()+0x74>
c0010d11:	80 bb 96 34 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcb6a],0xdb
c0010d18:	75 13                	jne    c0010d2d <KeDisplaySplashScreen()+0x3e>
c0010d1a:	0f b6 8b 95 34 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcb6b]
c0010d21:	83 e1 fe             	and    ecx,0xfffffffe
c0010d24:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010d2a:	75 01                	jne    c0010d2d <KeDisplaySplashScreen()+0x3e>
c0010d2c:	47                   	inc    edi
c0010d2d:	83 fa 0d             	cmp    edx,0xd
c0010d30:	74 28                	je     c0010d5a <KeDisplaySplashScreen()+0x6b>
c0010d32:	83 fa 0a             	cmp    edx,0xa
c0010d35:	75 0a                	jne    c0010d41 <KeDisplaySplashScreen()+0x52>
c0010d37:	45                   	inc    ebp
c0010d38:	bf 0a 00 00 00       	mov    edi,0xa
c0010d3d:	31 db                	xor    ebx,ebx
c0010d3f:	eb 19                	jmp    c0010d5a <KeDisplaySplashScreen()+0x6b>
c0010d41:	83 ec 0c             	sub    esp,0xc
c0010d44:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010d47:	55                   	push   ebp
c0010d48:	0f be c0             	movsx  eax,al
c0010d4b:	52                   	push   edx
c0010d4c:	43                   	inc    ebx
c0010d4d:	6a 00                	push   0x0
c0010d4f:	6a 0e                	push   0xe
c0010d51:	50                   	push   eax
c0010d52:	e8 cd 7e 00 00       	call   c0018c24 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010d57:	83 c4 20             	add    esp,0x20
c0010d5a:	46                   	inc    esi
c0010d5b:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010d61:	75 a1                	jne    c0010d04 <KeDisplaySplashScreen()+0x15>
c0010d63:	83 c4 0c             	add    esp,0xc
c0010d66:	5b                   	pop    ebx
c0010d67:	5e                   	pop    esi
c0010d68:	5f                   	pop    edi
c0010d69:	5d                   	pop    ebp
c0010d6a:	c3                   	ret    

c0010d6b <KeSetBootMessage(char const*)>:
c0010d6b:	57                   	push   edi
c0010d6c:	56                   	push   esi
c0010d6d:	53                   	push   ebx
c0010d6e:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010d74:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010d7b:	68 9e 00 00 00       	push   0x9e
c0010d80:	6a 00                	push   0x0
c0010d82:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010d86:	56                   	push   esi
c0010d87:	e8 64 f7 fe ff       	call   c00004f0 <memset>
c0010d8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d8f:	e8 dc f7 fe ff       	call   c0000570 <strlen>
c0010d94:	ba 50 00 00 00       	mov    edx,0x50
c0010d99:	83 c4 10             	add    esp,0x10
c0010d9c:	29 c2                	sub    edx,eax
c0010d9e:	31 c9                	xor    ecx,ecx
c0010da0:	83 e2 fe             	and    edx,0xfffffffe
c0010da3:	01 f2                	add    edx,esi
c0010da5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010daa:	84 c0                	test   al,al
c0010dac:	74 0a                	je     c0010db8 <KeSetBootMessage(char const*)+0x4d>
c0010dae:	80 cc 0f             	or     ah,0xf
c0010db1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010db5:	41                   	inc    ecx
c0010db6:	eb ed                	jmp    c0010da5 <KeSetBootMessage(char const*)+0x3a>
c0010db8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010dbd:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010dc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dc4:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010dca:	5b                   	pop    ebx
c0010dcb:	5e                   	pop    esi
c0010dcc:	5f                   	pop    edi
c0010dcd:	c3                   	ret    
c0010dce:	66 90                	xchg   ax,ax

c0010dd0 <Krnl::handlePowerButton()>:
c0010dd0:	83 ec 0c             	sub    esp,0xc
c0010dd3:	e8 ee 06 00 00       	call   c00114c6 <KeHandlePowerButton()>
c0010dd8:	90                   	nop
c0010dd9:	83 c4 0c             	add    esp,0xc
c0010ddc:	c3                   	ret    
c0010ddd:	8d 76 00             	lea    esi,[esi+0x0]

c0010de0 <Krnl::handleSleepButton()>:
c0010de0:	83 ec 0c             	sub    esp,0xc
c0010de3:	e8 13 07 00 00       	call   c00114fb <KeHandleSleepButton()>
c0010de8:	90                   	nop
c0010de9:	83 c4 0c             	add    esp,0xc
c0010dec:	c3                   	ret    

c0010ded <KeCalculateCRC32(unsigned char*, int)>:
c0010ded:	53                   	push   ebx
c0010dee:	83 c8 ff             	or     eax,0xffffffff
c0010df1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010df5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010df9:	01 cb                	add    ebx,ecx
c0010dfb:	39 d9                	cmp    ecx,ebx
c0010dfd:	74 15                	je     c0010e14 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010dff:	41                   	inc    ecx
c0010e00:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010e03:	31 c2                	xor    edx,eax
c0010e05:	c1 e8 08             	shr    eax,0x8
c0010e08:	0f b6 d2             	movzx  edx,dl
c0010e0b:	33 04 95 c0 35 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdca40]
c0010e12:	eb e7                	jmp    c0010dfb <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010e14:	f7 d0                	not    eax
c0010e16:	5b                   	pop    ebx
c0010e17:	c3                   	ret    

c0010e18 <EnvVarContainer::getEnv(char const*)>:
c0010e18:	57                   	push   edi
c0010e19:	56                   	push   esi
c0010e1a:	53                   	push   ebx
c0010e1b:	31 db                	xor    ebx,ebx
c0010e1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e21:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010e23:	7e 2b                	jle    c0010e50 <EnvVarContainer::getEnv(char const*)+0x38>
c0010e25:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010e2c:	50                   	push   eax
c0010e2d:	50                   	push   eax
c0010e2e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010e31:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010e34:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e38:	e8 13 f9 fe ff       	call   c0000750 <strcmp>
c0010e3d:	83 c4 10             	add    esp,0x10
c0010e40:	85 c0                	test   eax,eax
c0010e42:	75 09                	jne    c0010e4d <EnvVarContainer::getEnv(char const*)+0x35>
c0010e44:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010e47:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010e4b:	eb 05                	jmp    c0010e52 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010e4d:	43                   	inc    ebx
c0010e4e:	eb d1                	jmp    c0010e21 <EnvVarContainer::getEnv(char const*)+0x9>
c0010e50:	31 c0                	xor    eax,eax
c0010e52:	5b                   	pop    ebx
c0010e53:	5e                   	pop    esi
c0010e54:	5f                   	pop    edi
c0010e55:	c3                   	ret    

c0010e56 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010e56:	55                   	push   ebp
c0010e57:	57                   	push   edi
c0010e58:	56                   	push   esi
c0010e59:	53                   	push   ebx
c0010e5a:	83 ec 28             	sub    esp,0x28
c0010e5d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010e61:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010e65:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010e69:	56                   	push   esi
c0010e6a:	e8 01 f7 fe ff       	call   c0000570 <strlen>
c0010e6f:	40                   	inc    eax
c0010e70:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e73:	e8 3e 6c ff ff       	call   c0007ab6 <malloc>
c0010e78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010e7f:	e8 ec f6 fe ff       	call   c0000570 <strlen>
c0010e84:	40                   	inc    eax
c0010e85:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e88:	e8 29 6c ff ff       	call   c0007ab6 <malloc>
c0010e8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010e94:	e8 d7 f6 fe ff       	call   c0000570 <strlen>
c0010e99:	83 c4 0c             	add    esp,0xc
c0010e9c:	40                   	inc    eax
c0010e9d:	50                   	push   eax
c0010e9e:	6a 00                	push   0x0
c0010ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ea4:	e8 47 f6 fe ff       	call   c00004f0 <memset>
c0010ea9:	89 34 24             	mov    DWORD PTR [esp],esi
c0010eac:	e8 bf f6 fe ff       	call   c0000570 <strlen>
c0010eb1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010eb5:	8d 48 01             	lea    ecx,[eax+0x1]
c0010eb8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010eba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ebd:	89 de                	mov    esi,ebx
c0010ebf:	e8 ac f6 fe ff       	call   c0000570 <strlen>
c0010ec4:	83 c4 0c             	add    esp,0xc
c0010ec7:	40                   	inc    eax
c0010ec8:	50                   	push   eax
c0010ec9:	6a 00                	push   0x0
c0010ecb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ecf:	e8 1c f6 fe ff       	call   c00004f0 <memset>
c0010ed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ed7:	e8 94 f6 fe ff       	call   c0000570 <strlen>
c0010edc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010ee0:	8d 48 01             	lea    ecx,[eax+0x1]
c0010ee3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ee5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010ee8:	40                   	inc    eax
c0010ee9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010eec:	c1 e0 03             	shl    eax,0x3
c0010eef:	5a                   	pop    edx
c0010ef0:	59                   	pop    ecx
c0010ef1:	50                   	push   eax
c0010ef2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010ef5:	e8 a8 6b ff ff       	call   c0007aa2 <realloc>
c0010efa:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010efe:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010f01:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010f04:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010f08:	b9 08 00 00 00       	mov    ecx,0x8
c0010f0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f0f:	83 c4 2c             	add    esp,0x2c
c0010f12:	5b                   	pop    ebx
c0010f13:	5e                   	pop    esi
c0010f14:	5f                   	pop    edi
c0010f15:	5d                   	pop    ebp
c0010f16:	c3                   	ret    
c0010f17:	90                   	nop

c0010f18 <EnvVarContainer::deleteEnv(char const*)>:
c0010f18:	c3                   	ret    
c0010f19:	90                   	nop

c0010f1a <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010f1a:	55                   	push   ebp
c0010f1b:	57                   	push   edi
c0010f1c:	56                   	push   esi
c0010f1d:	53                   	push   ebx
c0010f1e:	81 ec 38 01 00 00    	sub    esp,0x138
c0010f24:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010f2b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010f32:	68 14 01 00 00       	push   0x114
c0010f37:	e8 7a 6b ff ff       	call   c0007ab6 <malloc>
c0010f3c:	83 c4 0c             	add    esp,0xc
c0010f3f:	89 c3                	mov    ebx,eax
c0010f41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010f44:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010f4b:	50                   	push   eax
c0010f4c:	e8 49 aa ff ff       	call   c000b99a <File::File(char const*, Process*)>
c0010f51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f54:	e8 23 ad ff ff       	call   c000bc7c <File::exists()>
c0010f59:	83 c4 10             	add    esp,0x10
c0010f5c:	84 c0                	test   al,al
c0010f5e:	75 31                	jne    c0010f91 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010f60:	50                   	push   eax
c0010f61:	50                   	push   eax
c0010f62:	6a 12                	push   0x12
c0010f64:	53                   	push   ebx
c0010f65:	e8 4e aa ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c0010f6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f6c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010f6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f72:	e8 f9 f5 fe ff       	call   c0000570 <strlen>
c0010f77:	5a                   	pop    edx
c0010f78:	31 d2                	xor    edx,edx
c0010f7a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010f7e:	51                   	push   ecx
c0010f7f:	56                   	push   esi
c0010f80:	52                   	push   edx
c0010f81:	50                   	push   eax
c0010f82:	53                   	push   ebx
c0010f83:	ff d7                	call   edi
c0010f85:	83 c4 14             	add    esp,0x14
c0010f88:	53                   	push   ebx
c0010f89:	e8 88 aa ff ff       	call   c000ba16 <File::close()>
c0010f8e:	83 c4 10             	add    esp,0x10
c0010f91:	56                   	push   esi
c0010f92:	31 f6                	xor    esi,esi
c0010f94:	68 00 01 00 00       	push   0x100
c0010f99:	6a 00                	push   0x0
c0010f9b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010f9f:	50                   	push   eax
c0010fa0:	e8 4b f5 fe ff       	call   c00004f0 <memset>
c0010fa5:	5f                   	pop    edi
c0010fa6:	58                   	pop    eax
c0010fa7:	6a 01                	push   0x1
c0010fa9:	53                   	push   ebx
c0010faa:	e8 09 aa ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c0010faf:	83 c4 10             	add    esp,0x10
c0010fb2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fba:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010fc2:	83 ec 0c             	sub    esp,0xc
c0010fc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010fc7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010fcb:	51                   	push   ecx
c0010fcc:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010fd0:	52                   	push   edx
c0010fd1:	6a 00                	push   0x0
c0010fd3:	6a 01                	push   0x1
c0010fd5:	53                   	push   ebx
c0010fd6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010fd9:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010fde:	83 c4 20             	add    esp,0x20
c0010fe1:	89 c2                	mov    edx,eax
c0010fe3:	85 c0                	test   eax,eax
c0010fe5:	0f 84 36 01 00 00    	je     c0011121 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010feb:	83 f8 0d             	cmp    eax,0xd
c0010fee:	0f 84 22 01 00 00    	je     c0011116 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010ff4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010ff9:	0f 84 f0 00 00 00    	je     c00110ef <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010fff:	83 f8 0a             	cmp    eax,0xa
c0011002:	74 13                	je     c0011017 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011004:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011009:	74 0c                	je     c0011017 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001100b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011011:	0f 8e f6 00 00 00    	jle    c001110d <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0011017:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001101b:	83 ec 0c             	sub    esp,0xc
c001101e:	8d 78 01             	lea    edi,[eax+0x1]
c0011021:	57                   	push   edi
c0011022:	e8 8f 6a ff ff       	call   c0007ab6 <malloc>
c0011027:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001102b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001102f:	8d 56 04             	lea    edx,[esi+0x4]
c0011032:	89 14 24             	mov    DWORD PTR [esp],edx
c0011035:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011039:	e8 78 6a ff ff       	call   c0007ab6 <malloc>
c001103e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011042:	83 c4 0c             	add    esp,0xc
c0011045:	57                   	push   edi
c0011046:	6a 00                	push   0x0
c0011048:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001104c:	e8 9f f4 fe ff       	call   c00004f0 <memset>
c0011051:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011055:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011059:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001105d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001105f:	83 c4 0c             	add    esp,0xc
c0011062:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011066:	52                   	push   edx
c0011067:	6a 00                	push   0x0
c0011069:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001106d:	e8 7e f4 fe ff       	call   c00004f0 <memset>
c0011072:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011076:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001107a:	89 34 24             	mov    DWORD PTR [esp],esi
c001107d:	e8 ee f4 fe ff       	call   c0000570 <strlen>
c0011082:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011086:	89 c1                	mov    ecx,eax
c0011088:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001108a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001108d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011090:	40                   	inc    eax
c0011091:	83 c4 10             	add    esp,0x10
c0011094:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011097:	85 d2                	test   edx,edx
c0011099:	75 0c                	jne    c00110a7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001109b:	83 ec 0c             	sub    esp,0xc
c001109e:	6a 08                	push   0x8
c00110a0:	e8 11 6a ff ff       	call   c0007ab6 <malloc>
c00110a5:	eb 0c                	jmp    c00110b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00110a7:	c1 e0 03             	shl    eax,0x3
c00110aa:	51                   	push   ecx
c00110ab:	51                   	push   ecx
c00110ac:	50                   	push   eax
c00110ad:	52                   	push   edx
c00110ae:	e8 ef 69 ff ff       	call   c0007aa2 <realloc>
c00110b3:	83 c4 10             	add    esp,0x10
c00110b6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00110b9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00110bc:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00110bf:	8d 74 24 18          	lea    esi,[esp+0x18]
c00110c3:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00110c7:	b9 08 00 00 00       	mov    ecx,0x8
c00110cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110ce:	31 f6                	xor    esi,esi
c00110d0:	50                   	push   eax
c00110d1:	68 00 01 00 00       	push   0x100
c00110d6:	6a 00                	push   0x0
c00110d8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00110dc:	50                   	push   eax
c00110dd:	e8 0e f4 fe ff       	call   c00004f0 <memset>
c00110e2:	83 c4 10             	add    esp,0x10
c00110e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00110ed:	eb 27                	jmp    c0011116 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00110ef:	83 f8 3d             	cmp    eax,0x3d
c00110f2:	74 1e                	je     c0011112 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00110f4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00110fa:	7f 07                	jg     c0011103 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00110fc:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0011100:	46                   	inc    esi
c0011101:	eb 13                	jmp    c0011116 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011103:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001110b:	eb 09                	jmp    c0011116 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001110d:	83 f8 3d             	cmp    eax,0x3d
c0011110:	75 ea                	jne    c00110fc <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011112:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011116:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001111b:	0f 85 99 fe ff ff    	jne    c0010fba <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011121:	83 ec 0c             	sub    esp,0xc
c0011124:	53                   	push   ebx
c0011125:	e8 ec a8 ff ff       	call   c000ba16 <File::close()>
c001112a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001112c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001112f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011132:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011138:	5b                   	pop    ebx
c0011139:	5e                   	pop    esi
c001113a:	5f                   	pop    edi
c001113b:	5d                   	pop    ebp
c001113c:	c3                   	ret    
c001113d:	90                   	nop

c001113e <EnvVarContainer::__loadSystem()>:
c001113e:	83 ec 10             	sub    esp,0x10
c0011141:	68 c0 39 02 c0       	push   0xc00239c0
c0011146:	68 b0 20 02 c0       	push   0xc00220b0
c001114b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001114f:	e8 c6 fd ff ff       	call   c0010f1a <EnvVarContainer::loadFrom(char const*, char const*)>
c0011154:	83 c4 1c             	add    esp,0x1c
c0011157:	c3                   	ret    

c0011158 <EnvVarContainer::__loadUser()>:
c0011158:	c3                   	ret    
c0011159:	90                   	nop

c001115a <EnvVarContainer::EnvVarContainer(Process*)>:
c001115a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001115e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011168:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001116c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001116f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011173:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001117a:	90                   	nop
c001117b:	c3                   	ret    

c001117c <EnvVarContainer::~EnvVarContainer()>:
c001117c:	83 ec 0c             	sub    esp,0xc
c001117f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011183:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011186:	85 c0                	test   eax,eax
c0011188:	74 1d                	je     c00111a7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001118a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011190:	85 c0                	test   eax,eax
c0011192:	74 13                	je     c00111a7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011198:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001119b:	83 ec 0c             	sub    esp,0xc
c001119e:	50                   	push   eax
c001119f:	e8 22 69 ff ff       	call   c0007ac6 <free>
c00111a4:	83 c4 10             	add    esp,0x10
c00111a7:	90                   	nop
c00111a8:	83 c4 0c             	add    esp,0xc
c00111ab:	c3                   	ret    

c00111ac <KeGetEnv(Process*, char const*)>:
c00111ac:	53                   	push   ebx
c00111ad:	83 ec 08             	sub    esp,0x8
c00111b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00111b8:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c00111be:	74 04                	je     c00111c4 <KeGetEnv(Process*, char const*)+0x18>
c00111c0:	85 c0                	test   eax,eax
c00111c2:	75 0b                	jne    c00111cf <KeGetEnv(Process*, char const*)+0x23>
c00111c4:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00111c9:	85 c0                	test   eax,eax
c00111cb:	75 19                	jne    c00111e6 <KeGetEnv(Process*, char const*)+0x3a>
c00111cd:	eb 27                	jmp    c00111f6 <KeGetEnv(Process*, char const*)+0x4a>
c00111cf:	52                   	push   edx
c00111d0:	52                   	push   edx
c00111d1:	53                   	push   ebx
c00111d2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00111d8:	e8 3b fc ff ff       	call   c0010e18 <EnvVarContainer::getEnv(char const*)>
c00111dd:	83 c4 10             	add    esp,0x10
c00111e0:	85 c0                	test   eax,eax
c00111e2:	75 28                	jne    c001120c <KeGetEnv(Process*, char const*)+0x60>
c00111e4:	eb de                	jmp    c00111c4 <KeGetEnv(Process*, char const*)+0x18>
c00111e6:	52                   	push   edx
c00111e7:	52                   	push   edx
c00111e8:	53                   	push   ebx
c00111e9:	50                   	push   eax
c00111ea:	e8 29 fc ff ff       	call   c0010e18 <EnvVarContainer::getEnv(char const*)>
c00111ef:	83 c4 10             	add    esp,0x10
c00111f2:	85 c0                	test   eax,eax
c00111f4:	75 16                	jne    c001120c <KeGetEnv(Process*, char const*)+0x60>
c00111f6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00111fa:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00111ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011203:	83 c4 08             	add    esp,0x8
c0011206:	5b                   	pop    ebx
c0011207:	e9 0c fc ff ff       	jmp    c0010e18 <EnvVarContainer::getEnv(char const*)>
c001120c:	83 c4 08             	add    esp,0x8
c001120f:	5b                   	pop    ebx
c0011210:	c3                   	ret    

c0011211 <KeSetEnvSystem(char const*, char const*)>:
c0011211:	83 ec 10             	sub    esp,0x10
c0011214:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011218:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001121c:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c0011222:	e8 2f fc ff ff       	call   c0010e56 <EnvVarContainer::setEnv(char const*, char const*)>
c0011227:	83 c4 1c             	add    esp,0x1c
c001122a:	c3                   	ret    

c001122b <KeSetEnvUser(char const*, char const*)>:
c001122b:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011230:	85 c0                	test   eax,eax
c0011232:	74 15                	je     c0011249 <KeSetEnvUser(char const*, char const*)+0x1e>
c0011234:	83 ec 10             	sub    esp,0x10
c0011237:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001123b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001123f:	50                   	push   eax
c0011240:	e8 11 fc ff ff       	call   c0010e56 <EnvVarContainer::setEnv(char const*, char const*)>
c0011245:	83 c4 1c             	add    esp,0x1c
c0011248:	c3                   	ret    
c0011249:	c3                   	ret    

c001124a <KeSetEnvProcess(Process*, char const*, char const*)>:
c001124a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001124e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011254:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011258:	e9 f9 fb ff ff       	jmp    c0010e56 <EnvVarContainer::setEnv(char const*, char const*)>

c001125d <KeDeleteEnvSystem(char const*)>:
c001125d:	c3                   	ret    

c001125e <KeDeleteEnvUser(char const*)>:
c001125e:	c3                   	ret    

c001125f <KeDeleteEnvProcess(Process*, char const*)>:
c001125f:	c3                   	ret    

c0011260 <KeNewProcessEnv(Process*)>:
c0011260:	83 ec 28             	sub    esp,0x28
c0011263:	6a 0c                	push   0xc
c0011265:	e8 4c 68 ff ff       	call   c0007ab6 <malloc>
c001126a:	5a                   	pop    edx
c001126b:	59                   	pop    ecx
c001126c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011270:	50                   	push   eax
c0011271:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011275:	e8 e0 fe ff ff       	call   c001115a <EnvVarContainer::EnvVarContainer(Process*)>
c001127a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001127e:	83 c4 2c             	add    esp,0x2c
c0011281:	c3                   	ret    

c0011282 <KeCopyProcessEnv(Process*, Process*)>:
c0011282:	57                   	push   edi
c0011283:	56                   	push   esi
c0011284:	53                   	push   ebx
c0011285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011289:	83 ec 0c             	sub    esp,0xc
c001128c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011292:	6a 0c                	push   0xc
c0011294:	e8 1d 68 ff ff       	call   c0007ab6 <malloc>
c0011299:	89 c3                	mov    ebx,eax
c001129b:	58                   	pop    eax
c001129c:	5a                   	pop    edx
c001129d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a1:	53                   	push   ebx
c00112a2:	e8 b3 fe ff ff       	call   c001115a <EnvVarContainer::EnvVarContainer(Process*)>
c00112a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00112a9:	89 03                	mov    DWORD PTR [ebx],eax
c00112ab:	c1 e0 03             	shl    eax,0x3
c00112ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00112b1:	e8 00 68 ff ff       	call   c0007ab6 <malloc>
c00112b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00112b9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00112bb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00112be:	c1 e1 03             	shl    ecx,0x3
c00112c1:	89 c7                	mov    edi,eax
c00112c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112c5:	83 c4 10             	add    esp,0x10
c00112c8:	89 d8                	mov    eax,ebx
c00112ca:	5b                   	pop    ebx
c00112cb:	5e                   	pop    esi
c00112cc:	5f                   	pop    edi
c00112cd:	c3                   	ret    

c00112ce <KeLoadSystemEnv()>:
c00112ce:	53                   	push   ebx
c00112cf:	83 ec 14             	sub    esp,0x14
c00112d2:	6a 0c                	push   0xc
c00112d4:	e8 dd 67 ff ff       	call   c0007ab6 <malloc>
c00112d9:	89 c3                	mov    ebx,eax
c00112db:	58                   	pop    eax
c00112dc:	5a                   	pop    edx
c00112dd:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00112e3:	53                   	push   ebx
c00112e4:	e8 71 fe ff ff       	call   c001115a <EnvVarContainer::EnvVarContainer(Process*)>
c00112e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112ec:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c00112f2:	e8 47 fe ff ff       	call   c001113e <EnvVarContainer::__loadSystem()>
c00112f7:	83 c4 18             	add    esp,0x18
c00112fa:	5b                   	pop    ebx
c00112fb:	c3                   	ret    

c00112fc <KeLoadUserEnv()>:
c00112fc:	53                   	push   ebx
c00112fd:	83 ec 14             	sub    esp,0x14
c0011300:	6a 0c                	push   0xc
c0011302:	e8 af 67 ff ff       	call   c0007ab6 <malloc>
c0011307:	89 c3                	mov    ebx,eax
c0011309:	58                   	pop    eax
c001130a:	5a                   	pop    edx
c001130b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011311:	53                   	push   ebx
c0011312:	e8 43 fe ff ff       	call   c001115a <EnvVarContainer::EnvVarContainer(Process*)>
c0011317:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c001131d:	83 c4 18             	add    esp,0x18
c0011320:	5b                   	pop    ebx
c0011321:	c3                   	ret    

c0011322 <KeFlushEnv()>:
c0011322:	c3                   	ret    

c0011323 <KeGetProcessTotalEnvCount(Process*)>:
c0011323:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011327:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c001132d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011333:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011338:	8b 00                	mov    eax,DWORD PTR [eax]
c001133a:	03 01                	add    eax,DWORD PTR [ecx]
c001133c:	85 d2                	test   edx,edx
c001133e:	74 02                	je     c0011342 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011340:	03 02                	add    eax,DWORD PTR [edx]
c0011342:	c3                   	ret    

c0011343 <KeGetProcessEnvPair(Process*, int)>:
c0011343:	57                   	push   edi
c0011344:	56                   	push   esi
c0011345:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c001134b:	53                   	push   ebx
c001134c:	85 f6                	test   esi,esi
c001134e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011352:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011356:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001135c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011360:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011362:	75 16                	jne    c001137a <KeGetProcessEnvPair(Process*, int)+0x37>
c0011364:	39 c2                	cmp    edx,eax
c0011366:	7c 16                	jl     c001137e <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011368:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c001136e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011370:	01 c6                	add    esi,eax
c0011372:	39 d6                	cmp    esi,edx
c0011374:	7e 3c                	jle    c00113b2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011376:	29 c2                	sub    edx,eax
c0011378:	eb 04                	jmp    c001137e <KeGetProcessEnvPair(Process*, int)+0x3b>
c001137a:	39 c2                	cmp    edx,eax
c001137c:	7d 05                	jge    c0011383 <KeGetProcessEnvPair(Process*, int)+0x40>
c001137e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011381:	eb 20                	jmp    c00113a3 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011383:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011385:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011388:	39 d1                	cmp    ecx,edx
c001138a:	7e 04                	jle    c0011390 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001138c:	29 c2                	sub    edx,eax
c001138e:	eb 10                	jmp    c00113a0 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011390:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011396:	03 0e                	add    ecx,DWORD PTR [esi]
c0011398:	39 d1                	cmp    ecx,edx
c001139a:	7e 16                	jle    c00113b2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001139c:	29 c2                	sub    edx,eax
c001139e:	29 fa                	sub    edx,edi
c00113a0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00113a3:	8d 14 d0             	lea    edx,[eax+edx*8]
c00113a6:	8b 02                	mov    eax,DWORD PTR [edx]
c00113a8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00113ab:	89 03                	mov    DWORD PTR [ebx],eax
c00113ad:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00113b0:	eb 1d                	jmp    c00113cf <KeGetProcessEnvPair(Process*, int)+0x8c>
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	68 d2 20 02 c0       	push   0xc00220d2
c00113ba:	e8 ac 00 00 00       	call   c001146b <KePanic(char const*)>
c00113bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00113c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00113cc:	83 c4 10             	add    esp,0x10
c00113cf:	89 d8                	mov    eax,ebx
c00113d1:	5b                   	pop    ebx
c00113d2:	5e                   	pop    esi
c00113d3:	5f                   	pop    edi
c00113d4:	c2 04 00             	ret    0x4

c00113d7 <CPU::current()>:
c00113d7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00113dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00113e2:	c3                   	ret    

c00113e3 <operator new(unsigned long)>:
c00113e3:	e9 ce 66 ff ff       	jmp    c0007ab6 <malloc>

c00113e8 <operator delete(void*)>:
c00113e8:	e9 e9 66 ff ff       	jmp    c0007ad6 <rfree>

c00113ed <disableIRQs()>:
c00113ed:	fa                   	cli    
c00113ee:	c3                   	ret    

c00113ef <enableIRQs()>:
c00113ef:	fb                   	sti    
c00113f0:	c3                   	ret    

c00113f1 <lockScheduler()>:
c00113f1:	fa                   	cli    
c00113f2:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00113f8:	c3                   	ret    

c00113f9 <unlockScheduler()>:
c00113f9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00113fe:	48                   	dec    eax
c00113ff:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011404:	75 01                	jne    c0011407 <unlockScheduler()+0xe>
c0011406:	fb                   	sti    
c0011407:	c3                   	ret    

c0011408 <lockStuff()>:
c0011408:	fa                   	cli    
c0011409:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001140f:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011415:	c3                   	ret    

c0011416 <unlockStuff()>:
c0011416:	83 ec 0c             	sub    esp,0xc
c0011419:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001141e:	48                   	dec    eax
c001141f:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0011424:	75 18                	jne    c001143e <unlockStuff()+0x28>
c0011426:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c001142d:	74 0f                	je     c001143e <unlockStuff()+0x28>
c001142f:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0011439:	e8 92 4a 00 00       	call   c0015ed0 <schedule()>
c001143e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011443:	48                   	dec    eax
c0011444:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011449:	75 01                	jne    c001144c <unlockStuff()+0x36>
c001144b:	fb                   	sti    
c001144c:	83 c4 0c             	add    esp,0xc
c001144f:	c3                   	ret    

c0011450 <Virt::getAKernelVAS()>:
c0011450:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0011455:	c3                   	ret    

c0011456 <__not_memcpy>:
c0011456:	57                   	push   edi
c0011457:	56                   	push   esi
c0011458:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001145c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011460:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011464:	89 c7                	mov    edi,eax
c0011466:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011468:	5e                   	pop    esi
c0011469:	5f                   	pop    edi
c001146a:	c3                   	ret    

c001146b <KePanic(char const*)>:
c001146b:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c0011472:	e9 ff 69 00 00       	jmp    c0017e76 <HalPanic(char const*)>

c0011477 <KePowerThread(void*)>:
c0011477:	83 ec 0c             	sub    esp,0xc
c001147a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001147f:	48                   	dec    eax
c0011480:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011485:	75 01                	jne    c0011488 <KePowerThread(void*)+0x11>
c0011487:	fb                   	sti    
c0011488:	83 ec 0c             	sub    esp,0xc
c001148b:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011492:	6a 0a                	push   0xa
c0011494:	e8 7b 4d 00 00       	call   c0016214 <sleep(unsigned int)>
c0011499:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c00114a0:	83 c4 10             	add    esp,0x10
c00114a3:	eb e3                	jmp    c0011488 <KePowerThread(void*)+0x11>

c00114a5 <KeChangePowerSettings(PowerSettings)>:
c00114a5:	57                   	push   edi
c00114a6:	b9 09 00 00 00       	mov    ecx,0x9
c00114ab:	56                   	push   esi
c00114ac:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c00114b1:	fc                   	cld    
c00114b2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00114b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00114b8:	5e                   	pop    esi
c00114b9:	5f                   	pop    edi
c00114ba:	c3                   	ret    

c00114bb <KeUserIOReceived()>:
c00114bb:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00114c5:	c3                   	ret    

c00114c6 <KeHandlePowerButton()>:
c00114c6:	83 ec 0c             	sub    esp,0xc
c00114c9:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c00114ce:	83 f8 02             	cmp    eax,0x2
c00114d1:	75 10                	jne    c00114e3 <KeHandlePowerButton()+0x1d>
c00114d3:	83 ec 0c             	sub    esp,0xc
c00114d6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00114dc:	e8 47 5c ff ff       	call   c0007128 <Computer::shutdown()>
c00114e1:	eb 11                	jmp    c00114f4 <KeHandlePowerButton()+0x2e>
c00114e3:	48                   	dec    eax
c00114e4:	75 11                	jne    c00114f7 <KeHandlePowerButton()+0x31>
c00114e6:	83 ec 0c             	sub    esp,0xc
c00114e9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00114ef:	e8 64 5c ff ff       	call   c0007158 <Computer::sleep()>
c00114f4:	83 c4 10             	add    esp,0x10
c00114f7:	83 c4 0c             	add    esp,0xc
c00114fa:	c3                   	ret    

c00114fb <KeHandleSleepButton()>:
c00114fb:	83 ec 0c             	sub    esp,0xc
c00114fe:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0011503:	83 f8 02             	cmp    eax,0x2
c0011506:	75 10                	jne    c0011518 <KeHandleSleepButton()+0x1d>
c0011508:	83 ec 0c             	sub    esp,0xc
c001150b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011511:	e8 12 5c ff ff       	call   c0007128 <Computer::shutdown()>
c0011516:	eb 11                	jmp    c0011529 <KeHandleSleepButton()+0x2e>
c0011518:	48                   	dec    eax
c0011519:	75 11                	jne    c001152c <KeHandleSleepButton()+0x31>
c001151b:	83 ec 0c             	sub    esp,0xc
c001151e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011524:	e8 2f 5c ff ff       	call   c0007158 <Computer::sleep()>
c0011529:	83 c4 10             	add    esp,0x10
c001152c:	83 c4 0c             	add    esp,0xc
c001152f:	c3                   	ret    

c0011530 <KeSetupPowerManager()>:
c0011530:	83 ec 0c             	sub    esp,0xc
c0011533:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c001153d:	68 f0 00 00 00       	push   0xf0
c0011542:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011549:	6a 00                	push   0x0
c001154b:	68 77 14 01 c0       	push   0xc0011477
c0011550:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011556:	e8 25 47 00 00       	call   c0015c80 <Process::createThread(void (*)(void*), void*, int)>
c001155b:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011565:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c001156f:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011579:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c0011583:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c001158d:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011597:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c00115a1:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c00115ab:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c00115b5:	83 c4 1c             	add    esp,0x1c
c00115b8:	c3                   	ret    

c00115b9 <KeRand()>:
c00115b9:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c00115c3:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c00115cd:	53                   	push   ebx
c00115ce:	01 c1                	add    ecx,eax
c00115d0:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00115d5:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c00115db:	01 ca                	add    edx,ecx
c00115dd:	05 ef 04 b5 00       	add    eax,0xb504ef
c00115e2:	83 d2 00             	adc    edx,0x0
c00115e5:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00115ea:	0f b7 da             	movzx  ebx,dx
c00115ed:	89 da                	mov    edx,ebx
c00115ef:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c00115f5:	0f ac d0 0e          	shrd   eax,edx,0xe
c00115f9:	5b                   	pop    ebx
c00115fa:	c3                   	ret    

c00115fb <KeSeedRand(unsigned int)>:
c00115fb:	53                   	push   ebx
c00115fc:	83 ec 08             	sub    esp,0x8
c00115ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011603:	e8 8d 6b 00 00       	call   c0018195 <HalGetRand()>
c0011608:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c0011612:	31 d8                	xor    eax,ebx
c0011614:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011619:	e8 9b ff ff ff       	call   c00115b9 <KeRand()>
c001161e:	83 c4 08             	add    esp,0x8
c0011621:	5b                   	pop    ebx
c0011622:	eb 95                	jmp    c00115b9 <KeRand()>

c0011624 <KeInitRand()>:
c0011624:	83 ec 0c             	sub    esp,0xc
c0011627:	e8 5e 69 00 00       	call   c0017f8a <HalQueryPerformanceCounter()>
c001162c:	0f 20 da             	mov    edx,cr3
c001162f:	0f 22 da             	mov    cr3,edx
c0011632:	0f 20 da             	mov    edx,cr3
c0011635:	0f 22 da             	mov    cr3,edx
c0011638:	0f 20 da             	mov    edx,cr3
c001163b:	0f 22 da             	mov    cr3,edx
c001163e:	0f 20 da             	mov    edx,cr3
c0011641:	0f 22 da             	mov    cr3,edx
c0011644:	83 ec 0c             	sub    esp,0xc
c0011647:	35 03 8a 95 38       	xor    eax,0x38958a03
c001164c:	50                   	push   eax
c001164d:	e8 a9 ff ff ff       	call   c00115fb <KeSeedRand(unsigned int)>
c0011652:	83 c4 1c             	add    esp,0x1c
c0011655:	c3                   	ret    
c0011656:	66 90                	xchg   ax,ax

c0011658 <KeResolveCompatibilitySymbol(char*)>:
c0011658:	83 ec 0c             	sub    esp,0xc
c001165b:	83 ec 08             	sub    esp,0x8
c001165e:	68 ec 20 02 c0       	push   0xc00220ec
c0011663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011667:	e8 e4 f0 fe ff       	call   c0000750 <strcmp>
c001166c:	83 c4 10             	add    esp,0x10
c001166f:	85 c0                	test   eax,eax
c0011671:	0f 94 c0             	sete   al
c0011674:	0f b6 c0             	movzx  eax,al
c0011677:	85 c0                	test   eax,eax
c0011679:	74 0d                	je     c0011688 <KeResolveCompatibilitySymbol(char*)+0x30>
c001167b:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011680:	e9 8b 01 00 00       	jmp    c0011810 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011685:	8d 76 00             	lea    esi,[esi+0x0]
c0011688:	83 ec 08             	sub    esp,0x8
c001168b:	68 f5 20 02 c0       	push   0xc00220f5
c0011690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011694:	e8 b7 f0 fe ff       	call   c0000750 <strcmp>
c0011699:	83 c4 10             	add    esp,0x10
c001169c:	85 c0                	test   eax,eax
c001169e:	0f 94 c0             	sete   al
c00116a1:	0f b6 c0             	movzx  eax,al
c00116a4:	85 c0                	test   eax,eax
c00116a6:	74 0c                	je     c00116b4 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00116a8:	b8 40 f5 01 c0       	mov    eax,0xc001f540
c00116ad:	e9 5e 01 00 00       	jmp    c0011810 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116b2:	66 90                	xchg   ax,ax
c00116b4:	83 ec 08             	sub    esp,0x8
c00116b7:	68 ff 20 02 c0       	push   0xc00220ff
c00116bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116c0:	e8 8b f0 fe ff       	call   c0000750 <strcmp>
c00116c5:	83 c4 10             	add    esp,0x10
c00116c8:	85 c0                	test   eax,eax
c00116ca:	0f 94 c0             	sete   al
c00116cd:	0f b6 c0             	movzx  eax,al
c00116d0:	85 c0                	test   eax,eax
c00116d2:	74 0c                	je     c00116e0 <KeResolveCompatibilitySymbol(char*)+0x88>
c00116d4:	b8 74 f2 01 c0       	mov    eax,0xc001f274
c00116d9:	e9 32 01 00 00       	jmp    c0011810 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116de:	66 90                	xchg   ax,ax
c00116e0:	83 ec 08             	sub    esp,0x8
c00116e3:	68 08 21 02 c0       	push   0xc0022108
c00116e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ec:	e8 5f f0 fe ff       	call   c0000750 <strcmp>
c00116f1:	83 c4 10             	add    esp,0x10
c00116f4:	85 c0                	test   eax,eax
c00116f6:	0f 94 c0             	sete   al
c00116f9:	0f b6 c0             	movzx  eax,al
c00116fc:	85 c0                	test   eax,eax
c00116fe:	74 0c                	je     c001170c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011700:	b8 6b 14 01 c0       	mov    eax,0xc001146b
c0011705:	e9 06 01 00 00       	jmp    c0011810 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001170a:	66 90                	xchg   ax,ax
c001170c:	83 ec 08             	sub    esp,0x8
c001170f:	68 1b 21 02 c0       	push   0xc002211b
c0011714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011718:	e8 33 f0 fe ff       	call   c0000750 <strcmp>
c001171d:	83 c4 10             	add    esp,0x10
c0011720:	85 c0                	test   eax,eax
c0011722:	0f 94 c0             	sete   al
c0011725:	0f b6 c0             	movzx  eax,al
c0011728:	85 c0                	test   eax,eax
c001172a:	74 0c                	je     c0011738 <KeResolveCompatibilitySymbol(char*)+0xe0>
c001172c:	b8 6b 0d 01 c0       	mov    eax,0xc0010d6b
c0011731:	e9 da 00 00 00       	jmp    c0011810 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011736:	66 90                	xchg   ax,ax
c0011738:	83 ec 08             	sub    esp,0x8
c001173b:	68 38 21 02 c0       	push   0xc0022138
c0011740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011744:	e8 07 f0 fe ff       	call   c0000750 <strcmp>
c0011749:	83 c4 10             	add    esp,0x10
c001174c:	85 c0                	test   eax,eax
c001174e:	0f 94 c0             	sete   al
c0011751:	0f b6 c0             	movzx  eax,al
c0011754:	85 c0                	test   eax,eax
c0011756:	74 0c                	je     c0011764 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011758:	b8 40 f6 01 c0       	mov    eax,0xc001f640
c001175d:	e9 ae 00 00 00       	jmp    c0011810 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011762:	66 90                	xchg   ax,ax
c0011764:	83 ec 08             	sub    esp,0x8
c0011767:	68 42 21 02 c0       	push   0xc0022142
c001176c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011770:	e8 db ef fe ff       	call   c0000750 <strcmp>
c0011775:	83 c4 10             	add    esp,0x10
c0011778:	85 c0                	test   eax,eax
c001177a:	0f 94 c0             	sete   al
c001177d:	0f b6 c0             	movzx  eax,al
c0011780:	85 c0                	test   eax,eax
c0011782:	74 0c                	je     c0011790 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011784:	b8 c0 f3 01 c0       	mov    eax,0xc001f3c0
c0011789:	e9 82 00 00 00       	jmp    c0011810 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001178e:	66 90                	xchg   ax,ax
c0011790:	83 ec 08             	sub    esp,0x8
c0011793:	68 4b 21 02 c0       	push   0xc002214b
c0011798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001179c:	e8 af ef fe ff       	call   c0000750 <strcmp>
c00117a1:	83 c4 10             	add    esp,0x10
c00117a4:	85 c0                	test   eax,eax
c00117a6:	0f 94 c0             	sete   al
c00117a9:	0f b6 c0             	movzx  eax,al
c00117ac:	85 c0                	test   eax,eax
c00117ae:	74 08                	je     c00117b8 <KeResolveCompatibilitySymbol(char*)+0x160>
c00117b0:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00117b5:	eb 59                	jmp    c0011810 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117b7:	90                   	nop
c00117b8:	83 ec 08             	sub    esp,0x8
c00117bb:	68 63 21 02 c0       	push   0xc0022163
c00117c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117c4:	e8 87 ef fe ff       	call   c0000750 <strcmp>
c00117c9:	83 c4 10             	add    esp,0x10
c00117cc:	85 c0                	test   eax,eax
c00117ce:	0f 94 c0             	sete   al
c00117d1:	0f b6 c0             	movzx  eax,al
c00117d4:	85 c0                	test   eax,eax
c00117d6:	74 08                	je     c00117e0 <KeResolveCompatibilitySymbol(char*)+0x188>
c00117d8:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00117dd:	eb 31                	jmp    c0011810 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117df:	90                   	nop
c00117e0:	83 ec 08             	sub    esp,0x8
c00117e3:	68 70 21 02 c0       	push   0xc0022170
c00117e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117ec:	e8 5f ef fe ff       	call   c0000750 <strcmp>
c00117f1:	83 c4 10             	add    esp,0x10
c00117f4:	85 c0                	test   eax,eax
c00117f6:	0f 94 c0             	sete   al
c00117f9:	0f b6 c0             	movzx  eax,al
c00117fc:	85 c0                	test   eax,eax
c00117fe:	74 08                	je     c0011808 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011800:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011805:	eb 09                	jmp    c0011810 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011807:	90                   	nop
c0011808:	b8 00 00 00 00       	mov    eax,0x0
c001180d:	8d 76 00             	lea    esi,[esi+0x0]
c0011810:	83 c4 0c             	add    esp,0xc
c0011813:	c3                   	ret    

c0011814 <KiSigKill(int)>:
c0011814:	83 ec 0c             	sub    esp,0xc
c0011817:	6a 00                	push   0x0
c0011819:	6a 00                	push   0x0
c001181b:	6a ff                	push   0xffffffff
c001181d:	6a 01                	push   0x1
c001181f:	e8 2e 38 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011824:	83 c4 1c             	add    esp,0x1c
c0011827:	c3                   	ret    

c0011828 <KiDefaultSignalHandlerIgnore(int)>:
c0011828:	c3                   	ret    

c0011829 <KiDefaultSignalHandlerPause(int)>:
c0011829:	57                   	push   edi
c001182a:	b9 07 00 00 00       	mov    ecx,0x7
c001182f:	56                   	push   esi
c0011830:	be b9 21 02 c0       	mov    esi,0xc00221b9
c0011835:	83 ec 24             	sub    esp,0x24
c0011838:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001183c:	fc                   	cld    
c001183d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001183f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011843:	50                   	push   eax
c0011844:	6a 00                	push   0x0
c0011846:	6a 00                	push   0x0
c0011848:	6a 27                	push   0x27
c001184a:	e8 03 38 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001184f:	83 c4 34             	add    esp,0x34
c0011852:	5e                   	pop    esi
c0011853:	5f                   	pop    edi
c0011854:	c3                   	ret    

c0011855 <KiDefaultSignalHandlerResume(int)>:
c0011855:	57                   	push   edi
c0011856:	b9 1d 00 00 00       	mov    ecx,0x1d
c001185b:	56                   	push   esi
c001185c:	be d5 21 02 c0       	mov    esi,0xc00221d5
c0011861:	83 ec 24             	sub    esp,0x24
c0011864:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011868:	fc                   	cld    
c0011869:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001186b:	8d 44 24 03          	lea    eax,[esp+0x3]
c001186f:	50                   	push   eax
c0011870:	6a 00                	push   0x0
c0011872:	6a 00                	push   0x0
c0011874:	6a 27                	push   0x27
c0011876:	e8 d7 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001187b:	83 c4 34             	add    esp,0x34
c001187e:	5e                   	pop    esi
c001187f:	5f                   	pop    edi
c0011880:	c3                   	ret    

c0011881 <KeDeinitSignals(SigHandlerBlock*)>:
c0011881:	e9 40 62 ff ff       	jmp    c0007ac6 <free>

c0011886 <KeInitSignals()>:
c0011886:	53                   	push   ebx
c0011887:	83 ec 14             	sub    esp,0x14
c001188a:	68 c8 00 00 00       	push   0xc8
c001188f:	e8 22 62 ff ff       	call   c0007ab6 <malloc>
c0011894:	83 c4 0c             	add    esp,0xc
c0011897:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00118a1:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00118ab:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00118b2:	89 c3                	mov    ebx,eax
c00118b4:	6a 20                	push   0x20
c00118b6:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00118bc:	6a 00                	push   0x0
c00118be:	50                   	push   eax
c00118bf:	e8 2c ec fe ff       	call   c00004f0 <memset>
c00118c4:	83 c4 0c             	add    esp,0xc
c00118c7:	6a 44                	push   0x44
c00118c9:	6a 00                	push   0x0
c00118cb:	53                   	push   ebx
c00118cc:	e8 1f ec fe ff       	call   c00004f0 <memset>
c00118d1:	89 d8                	mov    eax,ebx
c00118d3:	83 c4 18             	add    esp,0x18
c00118d6:	5b                   	pop    ebx
c00118d7:	c3                   	ret    

c00118d8 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00118d8:	53                   	push   ebx
c00118d9:	b8 01 00 00 00       	mov    eax,0x1
c00118de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00118e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00118e6:	83 f9 10             	cmp    ecx,0x10
c00118e9:	7f 21                	jg     c001190c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00118eb:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00118ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118f2:	89 03                	mov    DWORD PTR [ebx],eax
c00118f4:	b8 01 00 00 00       	mov    eax,0x1
c00118f9:	d3 e0                	shl    eax,cl
c00118fb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00118ff:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011902:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001190a:	31 c0                	xor    eax,eax
c001190c:	5b                   	pop    ebx
c001190d:	c3                   	ret    

c001190e <KeRaiseSignal(SigHandlerBlock*, int)>:
c001190e:	55                   	push   ebp
c001190f:	57                   	push   edi
c0011910:	bf 08 00 00 00       	mov    edi,0x8
c0011915:	56                   	push   esi
c0011916:	53                   	push   ebx
c0011917:	83 ec 18             	sub    esp,0x18
c001191a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001191e:	68 f2 21 02 c0       	push   0xc00221f2
c0011923:	e8 1d 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011928:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001192f:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	31 c9                	xor    ecx,ecx
c001193a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001193e:	99                   	cdq    
c001193f:	f7 ff                	idiv   edi
c0011941:	8d 42 24             	lea    eax,[edx+0x24]
c0011944:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011948:	85 f6                	test   esi,esi
c001194a:	75 1a                	jne    c0011966 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c001194c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011950:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011954:	50                   	push   eax
c0011955:	50                   	push   eax
c0011956:	52                   	push   edx
c0011957:	68 03 22 02 c0       	push   0xc0022203
c001195c:	e8 e4 8f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011961:	83 c4 10             	add    esp,0x10
c0011964:	eb 1b                	jmp    c0011981 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011966:	41                   	inc    ecx
c0011967:	83 f9 08             	cmp    ecx,0x8
c001196a:	75 ce                	jne    c001193a <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001196c:	83 ec 0c             	sub    esp,0xc
c001196f:	be 01 00 00 00       	mov    esi,0x1
c0011974:	68 24 22 02 c0       	push   0xc0022224
c0011979:	e8 c7 8f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001197e:	83 c4 10             	add    esp,0x10
c0011981:	83 c4 0c             	add    esp,0xc
c0011984:	89 f0                	mov    eax,esi
c0011986:	5b                   	pop    ebx
c0011987:	5e                   	pop    esi
c0011988:	5f                   	pop    edi
c0011989:	5d                   	pop    ebp
c001198a:	c3                   	ret    

c001198b <KeCheckSignal(SigHandlerBlock*, int*)>:
c001198b:	55                   	push   ebp
c001198c:	57                   	push   edi
c001198d:	56                   	push   esi
c001198e:	53                   	push   ebx
c001198f:	51                   	push   ecx
c0011990:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011994:	85 db                	test   ebx,ebx
c0011996:	0f 84 bc 00 00 00    	je     c0011a58 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001199c:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00119a3:	0f 84 af 00 00 00    	je     c0011a58 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00119a9:	31 c9                	xor    ecx,ecx
c00119ab:	bf 08 00 00 00       	mov    edi,0x8
c00119b0:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00119b6:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00119b9:	99                   	cdq    
c00119ba:	f7 ff                	idiv   edi
c00119bc:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00119c3:	85 ed                	test   ebp,ebp
c00119c5:	0f 84 9e 00 00 00    	je     c0011a69 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00119cb:	89 e9                	mov    ecx,ebp
c00119cd:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00119d3:	bf 01 00 00 00       	mov    edi,0x1
c00119d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00119db:	d3 e7                	shl    edi,cl
c00119dd:	31 c9                	xor    ecx,ecx
c00119df:	b8 01 00 00 00       	mov    eax,0x1
c00119e4:	d3 e0                	shl    eax,cl
c00119e6:	85 04 24             	test   DWORD PTR [esp],eax
c00119e9:	74 06                	je     c00119f1 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00119eb:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00119ef:	75 67                	jne    c0011a58 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00119f1:	41                   	inc    ecx
c00119f2:	83 f9 11             	cmp    ecx,0x11
c00119f5:	75 e8                	jne    c00119df <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00119f7:	46                   	inc    esi
c00119f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00119fb:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011a01:	09 f8                	or     eax,edi
c0011a03:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011a0e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011a14:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011a1b:	31 c0                	xor    eax,eax
c0011a1d:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011a25:	74 09                	je     c0011a30 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011a27:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011a2e:	eb 06                	jmp    c0011a36 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011a30:	40                   	inc    eax
c0011a31:	83 f8 08             	cmp    eax,0x8
c0011a34:	75 e7                	jne    c0011a1d <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011a36:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011a39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a3d:	83 fd 09             	cmp    ebp,0x9
c0011a40:	89 2a                	mov    DWORD PTR [edx],ebp
c0011a42:	75 07                	jne    c0011a4b <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011a44:	b8 14 18 01 c0       	mov    eax,0xc0011814
c0011a49:	eb 31                	jmp    c0011a7c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011a4b:	83 f8 01             	cmp    eax,0x1
c0011a4e:	75 0c                	jne    c0011a5c <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011a50:	f7 d7                	not    edi
c0011a52:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011a58:	31 c0                	xor    eax,eax
c0011a5a:	eb 20                	jmp    c0011a7c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011a5c:	85 c0                	test   eax,eax
c0011a5e:	75 1c                	jne    c0011a7c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011a60:	8b 04 ad 20 3a 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc5e0]
c0011a67:	eb 13                	jmp    c0011a7c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011a69:	46                   	inc    esi
c0011a6a:	41                   	inc    ecx
c0011a6b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011a71:	83 f9 08             	cmp    ecx,0x8
c0011a74:	0f 85 36 ff ff ff    	jne    c00119b0 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011a7a:	eb dc                	jmp    c0011a58 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011a7c:	5a                   	pop    edx
c0011a7d:	5b                   	pop    ebx
c0011a7e:	5e                   	pop    esi
c0011a7f:	5f                   	pop    edi
c0011a80:	5d                   	pop    ebp
c0011a81:	c3                   	ret    

c0011a82 <KiCheckSignalZ>:
c0011a82:	83 ec 10             	sub    esp,0x10
c0011a85:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011a89:	50                   	push   eax
c0011a8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a92:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011a98:	e8 ee fe ff ff       	call   c001198b <KeCheckSignal(SigHandlerBlock*, int*)>
c0011a9d:	5a                   	pop    edx
c0011a9e:	31 d2                	xor    edx,edx
c0011aa0:	59                   	pop    ecx
c0011aa1:	85 c0                	test   eax,eax
c0011aa3:	74 19                	je     c0011abe <KiCheckSignalZ+0x3c>
c0011aa5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011aab:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011aae:	89 02                	mov    DWORD PTR [edx],eax
c0011ab0:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011ab7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011abb:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011abe:	89 d0                	mov    eax,edx
c0011ac0:	83 c4 10             	add    esp,0x10
c0011ac3:	c3                   	ret    

c0011ac4 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011ac4:	56                   	push   esi
c0011ac5:	53                   	push   ebx
c0011ac6:	bb 01 00 00 00       	mov    ebx,0x1
c0011acb:	52                   	push   edx
c0011acc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011ad0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ad4:	d3 e3                	shl    ebx,cl
c0011ad6:	83 f9 10             	cmp    ecx,0x10
c0011ad9:	7f 08                	jg     c0011ae3 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011adb:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011ae1:	75 10                	jne    c0011af3 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011ae3:	83 ec 0c             	sub    esp,0xc
c0011ae6:	68 35 22 02 c0       	push   0xc0022235
c0011aeb:	e8 7b f9 ff ff       	call   c001146b <KePanic(char const*)>
c0011af0:	83 c4 10             	add    esp,0x10
c0011af3:	f7 d3                	not    ebx
c0011af5:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011afb:	58                   	pop    eax
c0011afc:	5b                   	pop    ebx
c0011afd:	5e                   	pop    esi
c0011afe:	c3                   	ret    

c0011aff <KiFinishSignalZ>:
c0011aff:	53                   	push   ebx
c0011b00:	83 ec 10             	sub    esp,0x10
c0011b03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b07:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011b0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b12:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011b18:	e8 a7 ff ff ff       	call   c0011ac4 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011b1d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011b23:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011b2a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011b31:	83 c4 18             	add    esp,0x18
c0011b34:	5b                   	pop    ebx
c0011b35:	c3                   	ret    

c0011b36 <SysSeekDir(regs*)>:
c0011b36:	31 c0                	xor    eax,eax
c0011b38:	31 d2                	xor    edx,edx
c0011b3a:	c3                   	ret    

c0011b3b <SysTellDir(regs*)>:
c0011b3b:	31 c0                	xor    eax,eax
c0011b3d:	31 d2                	xor    edx,edx
c0011b3f:	c3                   	ret    

c0011b40 <SysVerify(regs*)>:
c0011b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b44:	31 d2                	xor    edx,edx
c0011b46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b49:	c3                   	ret    

c0011b4a <SysGetArgc(regs*)>:
c0011b4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b4f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b52:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011b58:	89 c2                	mov    edx,eax
c0011b5a:	c1 fa 1f             	sar    edx,0x1f
c0011b5d:	c3                   	ret    

c0011b5e <SysTTYName(regs*)>:
c0011b5e:	b8 01 00 00 00       	mov    eax,0x1
c0011b63:	31 d2                	xor    edx,edx
c0011b65:	c3                   	ret    

c0011b66 <SysFormatDisk(regs*)>:
c0011b66:	56                   	push   esi
c0011b67:	53                   	push   ebx
c0011b68:	83 ec 04             	sub    esp,0x4
c0011b6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b6f:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011b75:	eb 28                	jmp    c0011b9f <SysFormatDisk(regs*)+0x39>
c0011b77:	83 ec 0c             	sub    esp,0xc
c0011b7a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011b7d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011b80:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011b82:	51                   	push   ecx
c0011b83:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011b86:	51                   	push   ecx
c0011b87:	50                   	push   eax
c0011b88:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011b8f:	50                   	push   eax
c0011b90:	53                   	push   ebx
c0011b91:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011b94:	83 c4 20             	add    esp,0x20
c0011b97:	83 f8 08             	cmp    eax,0x8
c0011b9a:	75 14                	jne    c0011bb0 <SysFormatDisk(regs*)+0x4a>
c0011b9c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011b9f:	85 db                	test   ebx,ebx
c0011ba1:	75 d4                	jne    c0011b77 <SysFormatDisk(regs*)+0x11>
c0011ba3:	83 c4 04             	add    esp,0x4
c0011ba6:	b8 03 00 00 00       	mov    eax,0x3
c0011bab:	31 d2                	xor    edx,edx
c0011bad:	5b                   	pop    ebx
c0011bae:	5e                   	pop    esi
c0011baf:	c3                   	ret    
c0011bb0:	85 c0                	test   eax,eax
c0011bb2:	74 1f                	je     c0011bd3 <SysFormatDisk(regs*)+0x6d>
c0011bb4:	83 f8 09             	cmp    eax,0x9
c0011bb7:	74 0d                	je     c0011bc6 <SysFormatDisk(regs*)+0x60>
c0011bb9:	83 c4 04             	add    esp,0x4
c0011bbc:	b8 02 00 00 00       	mov    eax,0x2
c0011bc1:	31 d2                	xor    edx,edx
c0011bc3:	5b                   	pop    ebx
c0011bc4:	5e                   	pop    esi
c0011bc5:	c3                   	ret    
c0011bc6:	83 c4 04             	add    esp,0x4
c0011bc9:	b8 01 00 00 00       	mov    eax,0x1
c0011bce:	31 d2                	xor    edx,edx
c0011bd0:	5b                   	pop    ebx
c0011bd1:	5e                   	pop    esi
c0011bd2:	c3                   	ret    
c0011bd3:	83 c4 04             	add    esp,0x4
c0011bd6:	31 c0                	xor    eax,eax
c0011bd8:	31 d2                	xor    edx,edx
c0011bda:	5b                   	pop    ebx
c0011bdb:	5e                   	pop    esi
c0011bdc:	c3                   	ret    

c0011bdd <SysSetDiskVolumeLabel(regs*)>:
c0011bdd:	56                   	push   esi
c0011bde:	53                   	push   ebx
c0011bdf:	83 ec 04             	sub    esp,0x4
c0011be2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011be6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011be9:	83 f8 19             	cmp    eax,0x19
c0011bec:	77 33                	ja     c0011c21 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011bee:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011bf5:	85 c9                	test   ecx,ecx
c0011bf7:	74 28                	je     c0011c21 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011bf9:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011bfc:	85 db                	test   ebx,ebx
c0011bfe:	74 21                	je     c0011c21 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011c00:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011c06:	85 d2                	test   edx,edx
c0011c08:	74 17                	je     c0011c21 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011c0a:	8b 32                	mov    esi,DWORD PTR [edx]
c0011c0c:	53                   	push   ebx
c0011c0d:	50                   	push   eax
c0011c0e:	51                   	push   ecx
c0011c0f:	52                   	push   edx
c0011c10:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011c13:	83 c4 10             	add    esp,0x10
c0011c16:	89 c2                	mov    edx,eax
c0011c18:	83 c4 04             	add    esp,0x4
c0011c1b:	c1 fa 1f             	sar    edx,0x1f
c0011c1e:	5b                   	pop    ebx
c0011c1f:	5e                   	pop    esi
c0011c20:	c3                   	ret    
c0011c21:	83 c4 04             	add    esp,0x4
c0011c24:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011c29:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c2e:	5b                   	pop    ebx
c0011c2f:	5e                   	pop    esi
c0011c30:	c3                   	ret    

c0011c31 <SysGetDiskVolumeLabel(regs*)>:
c0011c31:	57                   	push   edi
c0011c32:	56                   	push   esi
c0011c33:	53                   	push   ebx
c0011c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c38:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011c3b:	83 fa 19             	cmp    edx,0x19
c0011c3e:	77 3c                	ja     c0011c7c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011c40:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011c47:	85 c9                	test   ecx,ecx
c0011c49:	74 31                	je     c0011c7c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011c4b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011c4e:	85 db                	test   ebx,ebx
c0011c50:	74 2a                	je     c0011c7c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011c52:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c55:	85 f6                	test   esi,esi
c0011c57:	74 23                	je     c0011c7c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011c59:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011c5f:	85 c0                	test   eax,eax
c0011c61:	74 19                	je     c0011c7c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011c63:	83 ec 0c             	sub    esp,0xc
c0011c66:	8b 38                	mov    edi,DWORD PTR [eax]
c0011c68:	56                   	push   esi
c0011c69:	53                   	push   ebx
c0011c6a:	52                   	push   edx
c0011c6b:	51                   	push   ecx
c0011c6c:	50                   	push   eax
c0011c6d:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011c70:	83 c4 20             	add    esp,0x20
c0011c73:	89 c2                	mov    edx,eax
c0011c75:	5b                   	pop    ebx
c0011c76:	c1 fa 1f             	sar    edx,0x1f
c0011c79:	5e                   	pop    esi
c0011c7a:	5f                   	pop    edi
c0011c7b:	c3                   	ret    
c0011c7c:	5b                   	pop    ebx
c0011c7d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011c82:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c87:	5e                   	pop    esi
c0011c88:	5f                   	pop    edi
c0011c89:	c3                   	ret    

c0011c8a <SysShutdown(regs*)>:
c0011c8a:	83 ec 0c             	sub    esp,0xc
c0011c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c91:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c94:	85 c0                	test   eax,eax
c0011c96:	74 18                	je     c0011cb0 <SysShutdown(regs*)+0x26>
c0011c98:	83 f8 01             	cmp    eax,0x1
c0011c9b:	74 38                	je     c0011cd5 <SysShutdown(regs*)+0x4b>
c0011c9d:	83 f8 02             	cmp    eax,0x2
c0011ca0:	74 24                	je     c0011cc6 <SysShutdown(regs*)+0x3c>
c0011ca2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ca7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cac:	83 c4 0c             	add    esp,0xc
c0011caf:	c3                   	ret    
c0011cb0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011cb5:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cb7:	6a 00                	push   0x0
c0011cb9:	6a 00                	push   0x0
c0011cbb:	6a 00                	push   0x0
c0011cbd:	50                   	push   eax
c0011cbe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011cc1:	83 c4 10             	add    esp,0x10
c0011cc4:	eb dc                	jmp    c0011ca2 <SysShutdown(regs*)+0x18>
c0011cc6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011ccb:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ccd:	6a 00                	push   0x0
c0011ccf:	6a 00                	push   0x0
c0011cd1:	6a 01                	push   0x1
c0011cd3:	eb e8                	jmp    c0011cbd <SysShutdown(regs*)+0x33>
c0011cd5:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011cda:	85 c0                	test   eax,eax
c0011cdc:	74 02                	je     c0011ce0 <SysShutdown(regs*)+0x56>
c0011cde:	ff d0                	call   eax
c0011ce0:	31 c0                	xor    eax,eax
c0011ce2:	31 d2                	xor    edx,edx
c0011ce4:	83 c4 0c             	add    esp,0xc
c0011ce7:	c3                   	ret    

c0011ce8 <SysRealpath(regs*)>:
c0011ce8:	83 ec 0c             	sub    esp,0xc
c0011ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cef:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011cf2:	85 d2                	test   edx,edx
c0011cf4:	74 07                	je     c0011cfd <SysRealpath(regs*)+0x15>
c0011cf6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011cf9:	85 c0                	test   eax,eax
c0011cfb:	75 0b                	jne    c0011d08 <SysRealpath(regs*)+0x20>
c0011cfd:	b8 01 00 00 00       	mov    eax,0x1
c0011d02:	31 d2                	xor    edx,edx
c0011d04:	83 c4 0c             	add    esp,0xc
c0011d07:	c3                   	ret    
c0011d08:	6a 00                	push   0x0
c0011d0a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011d10:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011d13:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011d19:	51                   	push   ecx
c0011d1a:	52                   	push   edx
c0011d1b:	50                   	push   eax
c0011d1c:	e8 91 99 ff ff       	call   c000b6b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011d21:	83 c4 10             	add    esp,0x10
c0011d24:	31 c0                	xor    eax,eax
c0011d26:	31 d2                	xor    edx,edx
c0011d28:	83 c4 0c             	add    esp,0xc
c0011d2b:	c3                   	ret    

c0011d2c <SysReadDir(regs*)>:
c0011d2c:	53                   	push   ebx
c0011d2d:	83 ec 18             	sub    esp,0x18
c0011d30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d34:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d37:	83 f8 02             	cmp    eax,0x2
c0011d3a:	76 61                	jbe    c0011d9d <SysReadDir(regs*)+0x71>
c0011d3c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011d43:	77 49                	ja     c0011d8e <SysReadDir(regs*)+0x62>
c0011d45:	83 ec 0c             	sub    esp,0xc
c0011d48:	50                   	push   eax
c0011d49:	e8 65 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d4e:	83 c4 10             	add    esp,0x10
c0011d51:	85 c0                	test   eax,eax
c0011d53:	74 39                	je     c0011d8e <SysReadDir(regs*)+0x62>
c0011d55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d5d:	83 ec 0c             	sub    esp,0xc
c0011d60:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d62:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011d66:	51                   	push   ecx
c0011d67:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011d6a:	51                   	push   ecx
c0011d6b:	6a 00                	push   0x0
c0011d6d:	68 10 01 00 00       	push   0x110
c0011d72:	50                   	push   eax
c0011d73:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d76:	83 c4 20             	add    esp,0x20
c0011d79:	85 c0                	test   eax,eax
c0011d7b:	74 29                	je     c0011da6 <SysReadDir(regs*)+0x7a>
c0011d7d:	83 f8 07             	cmp    eax,0x7
c0011d80:	74 1b                	je     c0011d9d <SysReadDir(regs*)+0x71>
c0011d82:	b8 02 00 00 00       	mov    eax,0x2
c0011d87:	31 d2                	xor    edx,edx
c0011d89:	83 c4 18             	add    esp,0x18
c0011d8c:	5b                   	pop    ebx
c0011d8d:	c3                   	ret    
c0011d8e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d93:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d98:	83 c4 18             	add    esp,0x18
c0011d9b:	5b                   	pop    ebx
c0011d9c:	c3                   	ret    
c0011d9d:	b8 01 00 00 00       	mov    eax,0x1
c0011da2:	31 d2                	xor    edx,edx
c0011da4:	eb e3                	jmp    c0011d89 <SysReadDir(regs*)+0x5d>
c0011da6:	31 c0                	xor    eax,eax
c0011da8:	31 d2                	xor    edx,edx
c0011daa:	eb dd                	jmp    c0011d89 <SysReadDir(regs*)+0x5d>

c0011dac <SysIsATTY(regs*)>:
c0011dac:	83 ec 0c             	sub    esp,0xc
c0011daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011db6:	83 f8 02             	cmp    eax,0x2
c0011db9:	76 07                	jbe    c0011dc2 <SysIsATTY(regs*)+0x16>
c0011dbb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011dc0:	75 26                	jne    c0011de8 <SysIsATTY(regs*)+0x3c>
c0011dc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dc7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011dd0:	85 c0                	test   eax,eax
c0011dd2:	74 24                	je     c0011df8 <SysIsATTY(regs*)+0x4c>
c0011dd4:	83 ec 0c             	sub    esp,0xc
c0011dd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dd9:	50                   	push   eax
c0011dda:	ff 12                	call   DWORD PTR [edx]
c0011ddc:	31 d2                	xor    edx,edx
c0011dde:	0f b6 c0             	movzx  eax,al
c0011de1:	83 c4 10             	add    esp,0x10
c0011de4:	83 c4 0c             	add    esp,0xc
c0011de7:	c3                   	ret    
c0011de8:	83 ec 0c             	sub    esp,0xc
c0011deb:	50                   	push   eax
c0011dec:	e8 c2 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011df1:	83 c4 10             	add    esp,0x10
c0011df4:	85 c0                	test   eax,eax
c0011df6:	75 dc                	jne    c0011dd4 <SysIsATTY(regs*)+0x28>
c0011df8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dfd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e02:	83 c4 0c             	add    esp,0xc
c0011e05:	c3                   	ret    

c0011e06 <SysSeek(regs*)>:
c0011e06:	53                   	push   ebx
c0011e07:	83 ec 08             	sub    esp,0x8
c0011e0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e0e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e11:	8d 50 fd             	lea    edx,[eax-0x3]
c0011e14:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011e1a:	77 32                	ja     c0011e4e <SysSeek(regs*)+0x48>
c0011e1c:	83 ec 0c             	sub    esp,0xc
c0011e1f:	50                   	push   eax
c0011e20:	e8 8e 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011e25:	83 c4 0c             	add    esp,0xc
c0011e28:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011e2b:	31 db                	xor    ebx,ebx
c0011e2d:	53                   	push   ebx
c0011e2e:	51                   	push   ecx
c0011e2f:	50                   	push   eax
c0011e30:	e8 41 9c ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0011e35:	83 c4 10             	add    esp,0x10
c0011e38:	85 c0                	test   eax,eax
c0011e3a:	0f 95 c0             	setne  al
c0011e3d:	31 d2                	xor    edx,edx
c0011e3f:	0f b6 c0             	movzx  eax,al
c0011e42:	f7 d8                	neg    eax
c0011e44:	83 d2 00             	adc    edx,0x0
c0011e47:	83 c4 08             	add    esp,0x8
c0011e4a:	f7 da                	neg    edx
c0011e4c:	5b                   	pop    ebx
c0011e4d:	c3                   	ret    
c0011e4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e53:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e58:	83 c4 08             	add    esp,0x8
c0011e5b:	5b                   	pop    ebx
c0011e5c:	c3                   	ret    

c0011e5d <SysTell(regs*)>:
c0011e5d:	53                   	push   ebx
c0011e5e:	83 ec 08             	sub    esp,0x8
c0011e61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e65:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e68:	83 f8 02             	cmp    eax,0x2
c0011e6b:	76 4e                	jbe    c0011ebb <SysTell(regs*)+0x5e>
c0011e6d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e72:	76 19                	jbe    c0011e8d <SysTell(regs*)+0x30>
c0011e74:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e77:	31 d2                	xor    edx,edx
c0011e79:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e86:	31 c0                	xor    eax,eax
c0011e88:	83 c4 08             	add    esp,0x8
c0011e8b:	5b                   	pop    ebx
c0011e8c:	c3                   	ret    
c0011e8d:	83 ec 0c             	sub    esp,0xc
c0011e90:	50                   	push   eax
c0011e91:	e8 1d 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011e96:	5a                   	pop    edx
c0011e97:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011e9a:	59                   	pop    ecx
c0011e9b:	53                   	push   ebx
c0011e9c:	50                   	push   eax
c0011e9d:	e8 80 9c ff ff       	call   c000bb22 <File::tell(unsigned long long*)>
c0011ea2:	83 c4 10             	add    esp,0x10
c0011ea5:	85 c0                	test   eax,eax
c0011ea7:	0f 95 c0             	setne  al
c0011eaa:	31 d2                	xor    edx,edx
c0011eac:	0f b6 c0             	movzx  eax,al
c0011eaf:	f7 d8                	neg    eax
c0011eb1:	83 d2 00             	adc    edx,0x0
c0011eb4:	83 c4 08             	add    esp,0x8
c0011eb7:	f7 da                	neg    edx
c0011eb9:	5b                   	pop    ebx
c0011eba:	c3                   	ret    
c0011ebb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ec0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ec5:	83 c4 08             	add    esp,0x8
c0011ec8:	5b                   	pop    ebx
c0011ec9:	c3                   	ret    

c0011eca <SysSize(regs*)>:
c0011eca:	53                   	push   ebx
c0011ecb:	83 ec 18             	sub    esp,0x18
c0011ece:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ed2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ed5:	83 f8 02             	cmp    eax,0x2
c0011ed8:	76 54                	jbe    c0011f2e <SysSize(regs*)+0x64>
c0011eda:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011edf:	76 19                	jbe    c0011efa <SysSize(regs*)+0x30>
c0011ee1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ee4:	31 d2                	xor    edx,edx
c0011ee6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011eec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ef3:	31 c0                	xor    eax,eax
c0011ef5:	83 c4 18             	add    esp,0x18
c0011ef8:	5b                   	pop    ebx
c0011ef9:	c3                   	ret    
c0011efa:	83 ec 0c             	sub    esp,0xc
c0011efd:	50                   	push   eax
c0011efe:	e8 b0 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f03:	83 c4 0c             	add    esp,0xc
c0011f06:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011f0a:	52                   	push   edx
c0011f0b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011f0e:	52                   	push   edx
c0011f0f:	50                   	push   eax
c0011f10:	e8 a5 9d ff ff       	call   c000bcba <File::stat(unsigned long long*, bool*)>
c0011f15:	83 c4 10             	add    esp,0x10
c0011f18:	85 c0                	test   eax,eax
c0011f1a:	0f 95 c0             	setne  al
c0011f1d:	31 d2                	xor    edx,edx
c0011f1f:	0f b6 c0             	movzx  eax,al
c0011f22:	f7 d8                	neg    eax
c0011f24:	83 d2 00             	adc    edx,0x0
c0011f27:	83 c4 18             	add    esp,0x18
c0011f2a:	f7 da                	neg    edx
c0011f2c:	5b                   	pop    ebx
c0011f2d:	c3                   	ret    
c0011f2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f33:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f38:	83 c4 18             	add    esp,0x18
c0011f3b:	5b                   	pop    ebx
c0011f3c:	c3                   	ret    

c0011f3d <SysSizeFromFilename(regs*)>:
c0011f3d:	55                   	push   ebp
c0011f3e:	57                   	push   edi
c0011f3f:	56                   	push   esi
c0011f40:	53                   	push   ebx
c0011f41:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0011f47:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
c0011f4e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011f51:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011f54:	85 f6                	test   esi,esi
c0011f56:	74 34                	je     c0011f8c <SysSizeFromFilename(regs*)+0x4f>
c0011f58:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011f5e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f61:	83 f8 02             	cmp    eax,0x2
c0011f64:	76 2d                	jbe    c0011f93 <SysSizeFromFilename(regs*)+0x56>
c0011f66:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f6b:	76 3b                	jbe    c0011fa8 <SysSizeFromFilename(regs*)+0x6b>
c0011f6d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f7d:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011f83:	31 c0                	xor    eax,eax
c0011f85:	5b                   	pop    ebx
c0011f86:	31 d2                	xor    edx,edx
c0011f88:	5e                   	pop    esi
c0011f89:	5f                   	pop    edi
c0011f8a:	5d                   	pop    ebp
c0011f8b:	c3                   	ret    
c0011f8c:	89 f8                	mov    eax,edi
c0011f8e:	83 f8 02             	cmp    eax,0x2
c0011f91:	77 d3                	ja     c0011f66 <SysSizeFromFilename(regs*)+0x29>
c0011f93:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011f99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f9e:	5b                   	pop    ebx
c0011f9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fa4:	5e                   	pop    esi
c0011fa5:	5f                   	pop    edi
c0011fa6:	5d                   	pop    ebp
c0011fa7:	c3                   	ret    
c0011fa8:	83 ec 0c             	sub    esp,0xc
c0011fab:	68 14 01 00 00       	push   0x114
c0011fb0:	e8 01 5b ff ff       	call   c0007ab6 <malloc>
c0011fb5:	6a 01                	push   0x1
c0011fb7:	89 c5                	mov    ebp,eax
c0011fb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fbe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fc1:	50                   	push   eax
c0011fc2:	57                   	push   edi
c0011fc3:	55                   	push   ebp
c0011fc4:	e8 f3 98 ff ff       	call   c000b8bc <File::File(char const*, Process*, bool)>
c0011fc9:	83 c4 1c             	add    esp,0x1c
c0011fcc:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0011fd0:	50                   	push   eax
c0011fd1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011fd4:	52                   	push   edx
c0011fd5:	55                   	push   ebp
c0011fd6:	e8 df 9c ff ff       	call   c000bcba <File::stat(unsigned long long*, bool*)>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	85 ed                	test   ebp,ebp
c0011fe0:	74 15                	je     c0011ff7 <SysSizeFromFilename(regs*)+0xba>
c0011fe2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fe6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011fe9:	83 ec 0c             	sub    esp,0xc
c0011fec:	55                   	push   ebp
c0011fed:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011ff0:	83 c4 10             	add    esp,0x10
c0011ff3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ff7:	85 c0                	test   eax,eax
c0011ff9:	75 98                	jne    c0011f93 <SysSizeFromFilename(regs*)+0x56>
c0011ffb:	83 ec 08             	sub    esp,0x8
c0011ffe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012002:	50                   	push   eax
c0012003:	57                   	push   edi
c0012004:	e8 05 90 ff ff       	call   c000b00e <KeDereferenceSymlink(char const*, char*)>
c0012009:	83 c4 10             	add    esp,0x10
c001200c:	83 f8 01             	cmp    eax,0x1
c001200f:	74 1a                	je     c001202b <SysSizeFromFilename(regs*)+0xee>
c0012011:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012016:	74 26                	je     c001203e <SysSizeFromFilename(regs*)+0x101>
c0012018:	85 f6                	test   esi,esi
c001201a:	0f 84 5d ff ff ff    	je     c0011f7d <SysSizeFromFilename(regs*)+0x40>
c0012020:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012026:	e9 52 ff ff ff       	jmp    c0011f7d <SysSizeFromFilename(regs*)+0x40>
c001202b:	85 f6                	test   esi,esi
c001202d:	0f 84 4a ff ff ff    	je     c0011f7d <SysSizeFromFilename(regs*)+0x40>
c0012033:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012039:	e9 3f ff ff ff       	jmp    c0011f7d <SysSizeFromFilename(regs*)+0x40>
c001203e:	85 f6                	test   esi,esi
c0012040:	0f 84 37 ff ff ff    	je     c0011f7d <SysSizeFromFilename(regs*)+0x40>
c0012046:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001204c:	e9 2c ff ff ff       	jmp    c0011f7d <SysSizeFromFilename(regs*)+0x40>

c0012051 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012051:	55                   	push   ebp
c0012052:	57                   	push   edi
c0012053:	56                   	push   esi
c0012054:	53                   	push   ebx
c0012055:	81 ec 3c 01 00 00    	sub    esp,0x13c
c001205b:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
c0012062:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012065:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012068:	85 f6                	test   esi,esi
c001206a:	74 34                	je     c00120a0 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c001206c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012072:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012075:	83 f8 02             	cmp    eax,0x2
c0012078:	76 2d                	jbe    c00120a7 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001207a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001207f:	76 3b                	jbe    c00120bc <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0012081:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012084:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001208a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012091:	81 c4 3c 01 00 00    	add    esp,0x13c
c0012097:	31 c0                	xor    eax,eax
c0012099:	5b                   	pop    ebx
c001209a:	31 d2                	xor    edx,edx
c001209c:	5e                   	pop    esi
c001209d:	5f                   	pop    edi
c001209e:	5d                   	pop    ebp
c001209f:	c3                   	ret    
c00120a0:	89 f8                	mov    eax,edi
c00120a2:	83 f8 02             	cmp    eax,0x2
c00120a5:	77 d3                	ja     c001207a <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00120a7:	81 c4 3c 01 00 00    	add    esp,0x13c
c00120ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120b2:	5b                   	pop    ebx
c00120b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120b8:	5e                   	pop    esi
c00120b9:	5f                   	pop    edi
c00120ba:	5d                   	pop    ebp
c00120bb:	c3                   	ret    
c00120bc:	83 ec 0c             	sub    esp,0xc
c00120bf:	68 14 01 00 00       	push   0x114
c00120c4:	e8 ed 59 ff ff       	call   c0007ab6 <malloc>
c00120c9:	6a 00                	push   0x0
c00120cb:	89 c5                	mov    ebp,eax
c00120cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120d5:	50                   	push   eax
c00120d6:	57                   	push   edi
c00120d7:	55                   	push   ebp
c00120d8:	e8 df 97 ff ff       	call   c000b8bc <File::File(char const*, Process*, bool)>
c00120dd:	83 c4 1c             	add    esp,0x1c
c00120e0:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00120e4:	50                   	push   eax
c00120e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120e8:	52                   	push   edx
c00120e9:	55                   	push   ebp
c00120ea:	e8 cb 9b ff ff       	call   c000bcba <File::stat(unsigned long long*, bool*)>
c00120ef:	83 c4 10             	add    esp,0x10
c00120f2:	85 ed                	test   ebp,ebp
c00120f4:	74 15                	je     c001210b <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c00120f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120fa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00120fd:	83 ec 0c             	sub    esp,0xc
c0012100:	55                   	push   ebp
c0012101:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012104:	83 c4 10             	add    esp,0x10
c0012107:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001210b:	85 c0                	test   eax,eax
c001210d:	75 98                	jne    c00120a7 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001210f:	83 ec 08             	sub    esp,0x8
c0012112:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012116:	50                   	push   eax
c0012117:	57                   	push   edi
c0012118:	e8 f1 8e ff ff       	call   c000b00e <KeDereferenceSymlink(char const*, char*)>
c001211d:	83 c4 10             	add    esp,0x10
c0012120:	83 f8 01             	cmp    eax,0x1
c0012123:	74 1a                	je     c001213f <SysSizeFromFilenameNoSymlink(regs*)+0xee>
c0012125:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001212a:	74 26                	je     c0012152 <SysSizeFromFilenameNoSymlink(regs*)+0x101>
c001212c:	85 f6                	test   esi,esi
c001212e:	0f 84 5d ff ff ff    	je     c0012091 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012134:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001213a:	e9 52 ff ff ff       	jmp    c0012091 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001213f:	85 f6                	test   esi,esi
c0012141:	0f 84 4a ff ff ff    	je     c0012091 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012147:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001214d:	e9 3f ff ff ff       	jmp    c0012091 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012152:	85 f6                	test   esi,esi
c0012154:	0f 84 37 ff ff ff    	je     c0012091 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001215a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012160:	e9 2c ff ff ff       	jmp    c0012091 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0012165 <SysClose(regs*)>:
c0012165:	53                   	push   ebx
c0012166:	83 ec 08             	sub    esp,0x8
c0012169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001216d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012170:	83 f8 02             	cmp    eax,0x2
c0012173:	76 41                	jbe    c00121b6 <SysClose(regs*)+0x51>
c0012175:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001217b:	83 fa 01             	cmp    edx,0x1
c001217e:	76 2d                	jbe    c00121ad <SysClose(regs*)+0x48>
c0012180:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012185:	77 2f                	ja     c00121b6 <SysClose(regs*)+0x51>
c0012187:	83 ec 0c             	sub    esp,0xc
c001218a:	50                   	push   eax
c001218b:	e8 23 73 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012190:	89 c3                	mov    ebx,eax
c0012192:	89 04 24             	mov    DWORD PTR [esp],eax
c0012195:	e8 7c 98 ff ff       	call   c000ba16 <File::close()>
c001219a:	83 c4 10             	add    esp,0x10
c001219d:	85 db                	test   ebx,ebx
c001219f:	74 0c                	je     c00121ad <SysClose(regs*)+0x48>
c00121a1:	83 ec 0c             	sub    esp,0xc
c00121a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121a6:	53                   	push   ebx
c00121a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121aa:	83 c4 10             	add    esp,0x10
c00121ad:	31 c0                	xor    eax,eax
c00121af:	31 d2                	xor    edx,edx
c00121b1:	83 c4 08             	add    esp,0x8
c00121b4:	5b                   	pop    ebx
c00121b5:	c3                   	ret    
c00121b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121c0:	83 c4 08             	add    esp,0x8
c00121c3:	5b                   	pop    ebx
c00121c4:	c3                   	ret    

c00121c5 <SysOpenDir(regs*)>:
c00121c5:	56                   	push   esi
c00121c6:	53                   	push   ebx
c00121c7:	83 ec 04             	sub    esp,0x4
c00121ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00121ce:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00121d1:	85 c9                	test   ecx,ecx
c00121d3:	74 5d                	je     c0012232 <SysOpenDir(regs*)+0x6d>
c00121d5:	83 ec 0c             	sub    esp,0xc
c00121d8:	68 14 01 00 00       	push   0x114
c00121dd:	e8 d4 58 ff ff       	call   c0007ab6 <malloc>
c00121e2:	83 c4 0c             	add    esp,0xc
c00121e5:	89 c6                	mov    esi,eax
c00121e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121ef:	50                   	push   eax
c00121f0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00121f3:	52                   	push   edx
c00121f4:	56                   	push   esi
c00121f5:	e8 80 9c ff ff       	call   c000be7a <Directory::Directory(char const*, Process*)>
c00121fa:	83 c4 10             	add    esp,0x10
c00121fd:	85 f6                	test   esi,esi
c00121ff:	74 31                	je     c0012232 <SysOpenDir(regs*)+0x6d>
c0012201:	83 ec 0c             	sub    esp,0xc
c0012204:	56                   	push   esi
c0012205:	e8 38 9d ff ff       	call   c000bf42 <Directory::open()>
c001220a:	83 c4 10             	add    esp,0x10
c001220d:	85 c0                	test   eax,eax
c001220f:	75 21                	jne    c0012232 <SysOpenDir(regs*)+0x6d>
c0012211:	83 ec 0c             	sub    esp,0xc
c0012214:	56                   	push   esi
c0012215:	e8 9c 6f ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001221a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001221d:	83 c4 10             	add    esp,0x10
c0012220:	89 02                	mov    DWORD PTR [edx],eax
c0012222:	c1 f8 1f             	sar    eax,0x1f
c0012225:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012228:	83 c4 04             	add    esp,0x4
c001222b:	31 c0                	xor    eax,eax
c001222d:	31 d2                	xor    edx,edx
c001222f:	5b                   	pop    ebx
c0012230:	5e                   	pop    esi
c0012231:	c3                   	ret    
c0012232:	83 c4 04             	add    esp,0x4
c0012235:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001223a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001223f:	5b                   	pop    ebx
c0012240:	5e                   	pop    esi
c0012241:	c3                   	ret    

c0012242 <SysMakeDir(regs*)>:
c0012242:	56                   	push   esi
c0012243:	53                   	push   ebx
c0012244:	83 ec 10             	sub    esp,0x10
c0012247:	68 14 01 00 00       	push   0x114
c001224c:	e8 65 58 ff ff       	call   c0007ab6 <malloc>
c0012251:	83 c4 0c             	add    esp,0xc
c0012254:	89 c3                	mov    ebx,eax
c0012256:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001225b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001225e:	50                   	push   eax
c001225f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012263:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012266:	52                   	push   edx
c0012267:	53                   	push   ebx
c0012268:	e8 0d 9c ff ff       	call   c000be7a <Directory::Directory(char const*, Process*)>
c001226d:	83 c4 10             	add    esp,0x10
c0012270:	85 db                	test   ebx,ebx
c0012272:	74 2c                	je     c00122a0 <SysMakeDir(regs*)+0x5e>
c0012274:	83 ec 0c             	sub    esp,0xc
c0012277:	53                   	push   ebx
c0012278:	e8 a5 9e ff ff       	call   c000c122 <Directory::create()>
c001227d:	89 c6                	mov    esi,eax
c001227f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012281:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012284:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012287:	83 c4 10             	add    esp,0x10
c001228a:	31 c0                	xor    eax,eax
c001228c:	85 f6                	test   esi,esi
c001228e:	0f 95 c0             	setne  al
c0012291:	31 d2                	xor    edx,edx
c0012293:	f7 d8                	neg    eax
c0012295:	83 d2 00             	adc    edx,0x0
c0012298:	83 c4 04             	add    esp,0x4
c001229b:	f7 da                	neg    edx
c001229d:	5b                   	pop    ebx
c001229e:	5e                   	pop    esi
c001229f:	c3                   	ret    
c00122a0:	83 c4 04             	add    esp,0x4
c00122a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122ad:	5b                   	pop    ebx
c00122ae:	5e                   	pop    esi
c00122af:	c3                   	ret    

c00122b0 <SysCloseDir(regs*)>:
c00122b0:	53                   	push   ebx
c00122b1:	83 ec 08             	sub    esp,0x8
c00122b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00122bb:	8d 50 fd             	lea    edx,[eax-0x3]
c00122be:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00122c4:	77 2f                	ja     c00122f5 <SysCloseDir(regs*)+0x45>
c00122c6:	83 ec 0c             	sub    esp,0xc
c00122c9:	50                   	push   eax
c00122ca:	e8 e4 71 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00122cf:	89 c3                	mov    ebx,eax
c00122d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00122d4:	e8 c5 9c ff ff       	call   c000bf9e <Directory::close()>
c00122d9:	83 c4 10             	add    esp,0x10
c00122dc:	85 db                	test   ebx,ebx
c00122de:	74 0c                	je     c00122ec <SysCloseDir(regs*)+0x3c>
c00122e0:	83 ec 0c             	sub    esp,0xc
c00122e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122e5:	53                   	push   ebx
c00122e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00122e9:	83 c4 10             	add    esp,0x10
c00122ec:	31 c0                	xor    eax,eax
c00122ee:	31 d2                	xor    edx,edx
c00122f0:	83 c4 08             	add    esp,0x8
c00122f3:	5b                   	pop    ebx
c00122f4:	c3                   	ret    
c00122f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122ff:	83 c4 08             	add    esp,0x8
c0012302:	5b                   	pop    ebx
c0012303:	c3                   	ret    

c0012304 <SysWait(regs*)>:
c0012304:	83 ec 10             	sub    esp,0x10
c0012307:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001230b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001230e:	52                   	push   edx
c001230f:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012312:	51                   	push   ecx
c0012313:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012316:	50                   	push   eax
c0012317:	e8 00 3e 00 00       	call   c001611c <waitTask(int, int*, int)>
c001231c:	83 c4 1c             	add    esp,0x1c
c001231f:	89 c2                	mov    edx,eax
c0012321:	c1 fa 1f             	sar    edx,0x1f
c0012324:	c3                   	ret    

c0012325 <SysNotImpl(regs*)>:
c0012325:	83 ec 18             	sub    esp,0x18
c0012328:	68 46 22 02 c0       	push   0xc0022246
c001232d:	e8 39 f1 ff ff       	call   c001146b <KePanic(char const*)>
c0012332:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012337:	ba ff ff ff ff       	mov    edx,0xffffffff
c001233c:	83 c4 1c             	add    esp,0x1c
c001233f:	c3                   	ret    

c0012340 <SysPanic(regs*)>:
c0012340:	83 ec 18             	sub    esp,0x18
c0012343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012347:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001234a:	50                   	push   eax
c001234b:	e8 1b f1 ff ff       	call   c001146b <KePanic(char const*)>
c0012350:	b8 01 00 00 00       	mov    eax,0x1
c0012355:	31 d2                	xor    edx,edx
c0012357:	83 c4 1c             	add    esp,0x1c
c001235a:	c3                   	ret    

c001235b <SysRmdir(regs*)>:
c001235b:	56                   	push   esi
c001235c:	53                   	push   ebx
c001235d:	83 ec 20             	sub    esp,0x20
c0012360:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012364:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012367:	68 14 01 00 00       	push   0x114
c001236c:	e8 45 57 ff ff       	call   c0007ab6 <malloc>
c0012371:	6a 00                	push   0x0
c0012373:	89 c3                	mov    ebx,eax
c0012375:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001237a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001237d:	50                   	push   eax
c001237e:	56                   	push   esi
c001237f:	53                   	push   ebx
c0012380:	e8 37 95 ff ff       	call   c000b8bc <File::File(char const*, Process*, bool)>
c0012385:	83 c4 14             	add    esp,0x14
c0012388:	53                   	push   ebx
c0012389:	e8 f8 97 ff ff       	call   c000bb86 <File::unlink()>
c001238e:	83 c4 10             	add    esp,0x10
c0012391:	85 db                	test   ebx,ebx
c0012393:	74 14                	je     c00123a9 <SysRmdir(regs*)+0x4e>
c0012395:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012399:	8b 13                	mov    edx,DWORD PTR [ebx]
c001239b:	83 ec 0c             	sub    esp,0xc
c001239e:	53                   	push   ebx
c001239f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00123a2:	83 c4 10             	add    esp,0x10
c00123a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123a9:	85 c0                	test   eax,eax
c00123ab:	0f 95 c0             	setne  al
c00123ae:	31 d2                	xor    edx,edx
c00123b0:	0f b6 c0             	movzx  eax,al
c00123b3:	f7 d8                	neg    eax
c00123b5:	83 d2 00             	adc    edx,0x0
c00123b8:	83 c4 14             	add    esp,0x14
c00123bb:	f7 da                	neg    edx
c00123bd:	5b                   	pop    ebx
c00123be:	5e                   	pop    esi
c00123bf:	c3                   	ret    

c00123c0 <SysUnlink(regs*)>:
c00123c0:	56                   	push   esi
c00123c1:	53                   	push   ebx
c00123c2:	83 ec 20             	sub    esp,0x20
c00123c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123c9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00123cc:	68 14 01 00 00       	push   0x114
c00123d1:	e8 e0 56 ff ff       	call   c0007ab6 <malloc>
c00123d6:	6a 00                	push   0x0
c00123d8:	89 c3                	mov    ebx,eax
c00123da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123e2:	50                   	push   eax
c00123e3:	56                   	push   esi
c00123e4:	53                   	push   ebx
c00123e5:	e8 d2 94 ff ff       	call   c000b8bc <File::File(char const*, Process*, bool)>
c00123ea:	83 c4 14             	add    esp,0x14
c00123ed:	53                   	push   ebx
c00123ee:	e8 93 97 ff ff       	call   c000bb86 <File::unlink()>
c00123f3:	83 c4 10             	add    esp,0x10
c00123f6:	85 db                	test   ebx,ebx
c00123f8:	74 14                	je     c001240e <SysUnlink(regs*)+0x4e>
c00123fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012400:	83 ec 0c             	sub    esp,0xc
c0012403:	53                   	push   ebx
c0012404:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012407:	83 c4 10             	add    esp,0x10
c001240a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001240e:	85 c0                	test   eax,eax
c0012410:	0f 95 c0             	setne  al
c0012413:	31 d2                	xor    edx,edx
c0012415:	0f b6 c0             	movzx  eax,al
c0012418:	f7 d8                	neg    eax
c001241a:	83 d2 00             	adc    edx,0x0
c001241d:	83 c4 14             	add    esp,0x14
c0012420:	f7 da                	neg    edx
c0012422:	5b                   	pop    ebx
c0012423:	5e                   	pop    esi
c0012424:	c3                   	ret    

c0012425 <SysGetArgv(regs*)>:
c0012425:	83 ec 0c             	sub    esp,0xc
c0012428:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001242c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001242f:	85 c0                	test   eax,eax
c0012431:	78 2c                	js     c001245f <SysGetArgv(regs*)+0x3a>
c0012433:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012439:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001243c:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012442:	7d 1b                	jge    c001245f <SysGetArgv(regs*)+0x3a>
c0012444:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001244b:	85 c0                	test   eax,eax
c001244d:	74 18                	je     c0012467 <SysGetArgv(regs*)+0x42>
c001244f:	83 ec 08             	sub    esp,0x8
c0012452:	50                   	push   eax
c0012453:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012456:	50                   	push   eax
c0012457:	e8 e4 e1 fe ff       	call   c0000640 <strcpy>
c001245c:	83 c4 10             	add    esp,0x10
c001245f:	31 c0                	xor    eax,eax
c0012461:	31 d2                	xor    edx,edx
c0012463:	83 c4 0c             	add    esp,0xc
c0012466:	c3                   	ret    
c0012467:	b8 01 00 00 00       	mov    eax,0x1
c001246c:	31 d2                	xor    edx,edx
c001246e:	83 c4 0c             	add    esp,0xc
c0012471:	c3                   	ret    

c0012472 <SysUSleep(regs*)>:
c0012472:	83 ec 1c             	sub    esp,0x1c
c0012475:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012479:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001247c:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001247f:	6a 00                	push   0x0
c0012481:	6a 64                	push   0x64
c0012483:	52                   	push   edx
c0012484:	50                   	push   eax
c0012485:	e8 b6 d0 00 00       	call   c001f540 <__udivdi3>
c001248a:	83 c4 14             	add    esp,0x14
c001248d:	50                   	push   eax
c001248e:	e8 6d 3d 00 00       	call   c0016200 <milliTenthSleep(unsigned int)>
c0012493:	31 c0                	xor    eax,eax
c0012495:	31 d2                	xor    edx,edx
c0012497:	83 c4 1c             	add    esp,0x1c
c001249a:	c3                   	ret    

c001249b <SysSpawn(regs*)>:
c001249b:	56                   	push   esi
c001249c:	53                   	push   ebx
c001249d:	83 ec 04             	sub    esp,0x4
c00124a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124a4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00124a7:	85 f6                	test   esi,esi
c00124a9:	75 0a                	jne    c00124b5 <SysSpawn(regs*)+0x1a>
c00124ab:	83 c4 04             	add    esp,0x4
c00124ae:	31 c0                	xor    eax,eax
c00124b0:	31 d2                	xor    edx,edx
c00124b2:	5b                   	pop    ebx
c00124b3:	5e                   	pop    esi
c00124b4:	c3                   	ret    
c00124b5:	83 ec 0c             	sub    esp,0xc
c00124b8:	68 24 07 00 00       	push   0x724
c00124bd:	e8 f4 55 ff ff       	call   c0007ab6 <malloc>
c00124c2:	83 c4 10             	add    esp,0x10
c00124c5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00124c8:	89 c6                	mov    esi,eax
c00124ca:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00124cd:	85 c9                	test   ecx,ecx
c00124cf:	75 39                	jne    c001250a <SysSpawn(regs*)+0x6f>
c00124d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124d9:	52                   	push   edx
c00124da:	50                   	push   eax
c00124db:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124de:	50                   	push   eax
c00124df:	56                   	push   esi
c00124e0:	e8 6b 33 00 00       	call   c0015850 <Process::Process(char const*, Process*, char**)>
c00124e5:	83 c4 10             	add    esp,0x10
c00124e8:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00124ef:	75 ba                	jne    c00124ab <SysSpawn(regs*)+0x10>
c00124f1:	83 ec 0c             	sub    esp,0xc
c00124f4:	56                   	push   esi
c00124f5:	e8 92 38 00 00       	call   c0015d8c <Process::createUserThread()>
c00124fa:	8b 06                	mov    eax,DWORD PTR [esi]
c00124fc:	83 c4 10             	add    esp,0x10
c00124ff:	89 c2                	mov    edx,eax
c0012501:	83 c4 04             	add    esp,0x4
c0012504:	c1 fa 1f             	sar    edx,0x1f
c0012507:	5b                   	pop    ebx
c0012508:	5e                   	pop    esi
c0012509:	c3                   	ret    
c001250a:	31 c0                	xor    eax,eax
c001250c:	eb cb                	jmp    c00124d9 <SysSpawn(regs*)+0x3e>

c001250e <SysGetEnv(regs*)>:
c001250e:	57                   	push   edi
c001250f:	56                   	push   esi
c0012510:	53                   	push   ebx
c0012511:	83 ec 1c             	sub    esp,0x1c
c0012514:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012518:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001251d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012520:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012523:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012526:	51                   	push   ecx
c0012527:	e8 f7 ed ff ff       	call   c0011323 <KeGetProcessTotalEnvCount(Process*)>
c001252c:	83 c4 10             	add    esp,0x10
c001252f:	39 c7                	cmp    edi,eax
c0012531:	7c 14                	jl     c0012547 <SysGetEnv(regs*)+0x39>
c0012533:	85 f6                	test   esi,esi
c0012535:	75 0b                	jne    c0012542 <SysGetEnv(regs*)+0x34>
c0012537:	83 c4 10             	add    esp,0x10
c001253a:	31 c0                	xor    eax,eax
c001253c:	5b                   	pop    ebx
c001253d:	31 d2                	xor    edx,edx
c001253f:	5e                   	pop    esi
c0012540:	5f                   	pop    edi
c0012541:	c3                   	ret    
c0012542:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012545:	eb f0                	jmp    c0012537 <SysGetEnv(regs*)+0x29>
c0012547:	8d 44 24 08          	lea    eax,[esp+0x8]
c001254b:	83 ec 04             	sub    esp,0x4
c001254e:	57                   	push   edi
c001254f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012555:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012558:	57                   	push   edi
c0012559:	50                   	push   eax
c001255a:	e8 e4 ed ff ff       	call   c0011343 <KeGetProcessEnvPair(Process*, int)>
c001255f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012562:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012566:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001256a:	83 c4 0c             	add    esp,0xc
c001256d:	85 d2                	test   edx,edx
c001256f:	75 23                	jne    c0012594 <SysGetEnv(regs*)+0x86>
c0012571:	83 ec 0c             	sub    esp,0xc
c0012574:	50                   	push   eax
c0012575:	e8 f6 df fe ff       	call   c0000570 <strlen>
c001257a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001257d:	89 c3                	mov    ebx,eax
c001257f:	e8 ec df fe ff       	call   c0000570 <strlen>
c0012584:	83 c4 10             	add    esp,0x10
c0012587:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001258b:	83 c4 10             	add    esp,0x10
c001258e:	31 d2                	xor    edx,edx
c0012590:	5b                   	pop    ebx
c0012591:	5e                   	pop    esi
c0012592:	5f                   	pop    edi
c0012593:	c3                   	ret    
c0012594:	83 ec 08             	sub    esp,0x8
c0012597:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001259a:	50                   	push   eax
c001259b:	56                   	push   esi
c001259c:	e8 9f e0 fe ff       	call   c0000640 <strcpy>
c00125a1:	58                   	pop    eax
c00125a2:	5a                   	pop    edx
c00125a3:	68 60 22 02 c0       	push   0xc0022260
c00125a8:	56                   	push   esi
c00125a9:	e8 92 e2 fe ff       	call   c0000840 <strcat>
c00125ae:	59                   	pop    ecx
c00125af:	5b                   	pop    ebx
c00125b0:	57                   	push   edi
c00125b1:	56                   	push   esi
c00125b2:	e8 89 e2 fe ff       	call   c0000840 <strcat>
c00125b7:	83 c4 10             	add    esp,0x10
c00125ba:	e9 78 ff ff ff       	jmp    c0012537 <SysGetEnv(regs*)+0x29>

c00125bf <SysSetFatAttrib(regs*)>:
c00125bf:	57                   	push   edi
c00125c0:	56                   	push   esi
c00125c1:	53                   	push   ebx
c00125c2:	83 ec 1c             	sub    esp,0x1c
c00125c5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00125c9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00125cc:	68 14 01 00 00       	push   0x114
c00125d1:	e8 e0 54 ff ff       	call   c0007ab6 <malloc>
c00125d6:	83 c4 0c             	add    esp,0xc
c00125d9:	89 c3                	mov    ebx,eax
c00125db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125e3:	50                   	push   eax
c00125e4:	57                   	push   edi
c00125e5:	53                   	push   ebx
c00125e6:	e8 af 93 ff ff       	call   c000b99a <File::File(char const*, Process*)>
c00125eb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00125ee:	83 c4 0c             	add    esp,0xc
c00125f1:	0f b6 d4             	movzx  edx,ah
c00125f4:	0f b6 c0             	movzx  eax,al
c00125f7:	52                   	push   edx
c00125f8:	50                   	push   eax
c00125f9:	53                   	push   ebx
c00125fa:	e8 21 96 ff ff       	call   c000bc20 <File::chfatattr(unsigned char, unsigned char)>
c00125ff:	83 c4 10             	add    esp,0x10
c0012602:	85 db                	test   ebx,ebx
c0012604:	74 14                	je     c001261a <SysSetFatAttrib(regs*)+0x5b>
c0012606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001260a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001260c:	83 ec 0c             	sub    esp,0xc
c001260f:	53                   	push   ebx
c0012610:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012613:	83 c4 10             	add    esp,0x10
c0012616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001261a:	85 c0                	test   eax,eax
c001261c:	0f 95 c0             	setne  al
c001261f:	31 d2                	xor    edx,edx
c0012621:	0f b6 c0             	movzx  eax,al
c0012624:	f7 d8                	neg    eax
c0012626:	83 d2 00             	adc    edx,0x0
c0012629:	83 c4 10             	add    esp,0x10
c001262c:	f7 da                	neg    edx
c001262e:	5b                   	pop    ebx
c001262f:	5e                   	pop    esi
c0012630:	5f                   	pop    edi
c0012631:	c3                   	ret    

c0012632 <SysPipe(regs*)>:
c0012632:	57                   	push   edi
c0012633:	56                   	push   esi
c0012634:	53                   	push   ebx
c0012635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012639:	83 ec 0c             	sub    esp,0xc
c001263c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001263f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012642:	6a 20                	push   0x20
c0012644:	e8 6d 54 ff ff       	call   c0007ab6 <malloc>
c0012649:	89 c3                	mov    ebx,eax
c001264b:	58                   	pop    eax
c001264c:	5a                   	pop    edx
c001264d:	68 00 50 00 00       	push   0x5000
c0012652:	53                   	push   ebx
c0012653:	e8 d0 5d ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012658:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001265b:	e8 56 6b ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012660:	89 07                	mov    DWORD PTR [edi],eax
c0012662:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012665:	e8 4c 6b ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001266a:	83 c4 10             	add    esp,0x10
c001266d:	89 06                	mov    DWORD PTR [esi],eax
c001266f:	31 d2                	xor    edx,edx
c0012671:	5b                   	pop    ebx
c0012672:	31 c0                	xor    eax,eax
c0012674:	5e                   	pop    esi
c0012675:	5f                   	pop    edi
c0012676:	c3                   	ret    

c0012677 <SysGetUnixTime(regs*)>:
c0012677:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001267c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012682:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012686:	e9 db 9c ff ff       	jmp    c000c366 <Clock::timeInSecondsLocal()>

c001268b <string_ends_with(char const*, char const*)>:
c001268b:	57                   	push   edi
c001268c:	56                   	push   esi
c001268d:	53                   	push   ebx
c001268e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012692:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012696:	83 ec 0c             	sub    esp,0xc
c0012699:	53                   	push   ebx
c001269a:	e8 d1 de fe ff       	call   c0000570 <strlen>
c001269f:	89 3c 24             	mov    DWORD PTR [esp],edi
c00126a2:	89 c6                	mov    esi,eax
c00126a4:	e8 c7 de fe ff       	call   c0000570 <strlen>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	39 c6                	cmp    esi,eax
c00126ae:	7d 06                	jge    c00126b6 <string_ends_with(char const*, char const*)+0x2b>
c00126b0:	5b                   	pop    ebx
c00126b1:	31 c0                	xor    eax,eax
c00126b3:	5e                   	pop    esi
c00126b4:	5f                   	pop    edi
c00126b5:	c3                   	ret    
c00126b6:	83 ec 08             	sub    esp,0x8
c00126b9:	29 c6                	sub    esi,eax
c00126bb:	57                   	push   edi
c00126bc:	01 f3                	add    ebx,esi
c00126be:	53                   	push   ebx
c00126bf:	e8 8c e0 fe ff       	call   c0000750 <strcmp>
c00126c4:	83 c4 10             	add    esp,0x10
c00126c7:	85 c0                	test   eax,eax
c00126c9:	5b                   	pop    ebx
c00126ca:	0f 94 c0             	sete   al
c00126cd:	5e                   	pop    esi
c00126ce:	0f b6 c0             	movzx  eax,al
c00126d1:	5f                   	pop    edi
c00126d2:	c3                   	ret    

c00126d3 <SysOpen(regs*)>:
c00126d3:	56                   	push   esi
c00126d4:	53                   	push   ebx
c00126d5:	81 ec 04 01 00 00    	sub    esp,0x104
c00126db:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00126e2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00126e5:	85 c0                	test   eax,eax
c00126e7:	0f 84 bc 01 00 00    	je     c00128a9 <SysOpen(regs*)+0x1d6>
c00126ed:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126f0:	85 c0                	test   eax,eax
c00126f2:	0f 84 b1 01 00 00    	je     c00128a9 <SysOpen(regs*)+0x1d6>
c00126f8:	6a 00                	push   0x0
c00126fa:	68 62 22 02 c0       	push   0xc0022262
c00126ff:	50                   	push   eax
c0012700:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012704:	56                   	push   esi
c0012705:	e8 a8 8f ff ff       	call   c000b6b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001270a:	89 34 24             	mov    DWORD PTR [esp],esi
c001270d:	e8 5e de fe ff       	call   c0000570 <strlen>
c0012712:	83 c4 10             	add    esp,0x10
c0012715:	83 e8 01             	sub    eax,0x1
c0012718:	74 21                	je     c001273b <SysOpen(regs*)+0x68>
c001271a:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001271e:	eb 12                	jmp    c0012732 <SysOpen(regs*)+0x5f>
c0012720:	83 fa 3a             	cmp    edx,0x3a
c0012723:	74 12                	je     c0012737 <SysOpen(regs*)+0x64>
c0012725:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012729:	83 e8 01             	sub    eax,0x1
c001272c:	74 0d                	je     c001273b <SysOpen(regs*)+0x68>
c001272e:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012732:	83 fa 2e             	cmp    edx,0x2e
c0012735:	75 e9                	jne    c0012720 <SysOpen(regs*)+0x4d>
c0012737:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001273b:	83 ec 08             	sub    esp,0x8
c001273e:	68 66 22 02 c0       	push   0xc0022266
c0012743:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012746:	50                   	push   eax
c0012747:	e8 3f ff ff ff       	call   c001268b <string_ends_with(char const*, char const*)>
c001274c:	83 c4 10             	add    esp,0x10
c001274f:	85 c0                	test   eax,eax
c0012751:	74 1d                	je     c0012770 <SysOpen(regs*)+0x9d>
c0012753:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012756:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001275c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012763:	81 c4 04 01 00 00    	add    esp,0x104
c0012769:	31 c0                	xor    eax,eax
c001276b:	31 d2                	xor    edx,edx
c001276d:	5b                   	pop    ebx
c001276e:	5e                   	pop    esi
c001276f:	c3                   	ret    
c0012770:	83 ec 08             	sub    esp,0x8
c0012773:	68 6b 22 02 c0       	push   0xc002226b
c0012778:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001277b:	50                   	push   eax
c001277c:	e8 0a ff ff ff       	call   c001268b <string_ends_with(char const*, char const*)>
c0012781:	83 c4 10             	add    esp,0x10
c0012784:	85 c0                	test   eax,eax
c0012786:	75 cb                	jne    c0012753 <SysOpen(regs*)+0x80>
c0012788:	83 ec 08             	sub    esp,0x8
c001278b:	68 67 22 02 c0       	push   0xc0022267
c0012790:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012793:	50                   	push   eax
c0012794:	e8 b7 df fe ff       	call   c0000750 <strcmp>
c0012799:	83 c4 10             	add    esp,0x10
c001279c:	85 c0                	test   eax,eax
c001279e:	74 b3                	je     c0012753 <SysOpen(regs*)+0x80>
c00127a0:	83 ec 08             	sub    esp,0x8
c00127a3:	68 66 22 02 c0       	push   0xc0022266
c00127a8:	56                   	push   esi
c00127a9:	e8 dd fe ff ff       	call   c001268b <string_ends_with(char const*, char const*)>
c00127ae:	83 c4 10             	add    esp,0x10
c00127b1:	85 c0                	test   eax,eax
c00127b3:	75 9e                	jne    c0012753 <SysOpen(regs*)+0x80>
c00127b5:	83 ec 08             	sub    esp,0x8
c00127b8:	68 70 22 02 c0       	push   0xc0022270
c00127bd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00127c0:	50                   	push   eax
c00127c1:	e8 c5 fe ff ff       	call   c001268b <string_ends_with(char const*, char const*)>
c00127c6:	83 c4 10             	add    esp,0x10
c00127c9:	85 c0                	test   eax,eax
c00127cb:	0f 85 eb 00 00 00    	jne    c00128bc <SysOpen(regs*)+0x1e9>
c00127d1:	83 ec 08             	sub    esp,0x8
c00127d4:	68 75 22 02 c0       	push   0xc0022275
c00127d9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00127dc:	50                   	push   eax
c00127dd:	e8 a9 fe ff ff       	call   c001268b <string_ends_with(char const*, char const*)>
c00127e2:	83 c4 10             	add    esp,0x10
c00127e5:	85 c0                	test   eax,eax
c00127e7:	0f 85 cf 00 00 00    	jne    c00128bc <SysOpen(regs*)+0x1e9>
c00127ed:	83 ec 08             	sub    esp,0x8
c00127f0:	68 71 22 02 c0       	push   0xc0022271
c00127f5:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00127f8:	51                   	push   ecx
c00127f9:	e8 52 df fe ff       	call   c0000750 <strcmp>
c00127fe:	83 c4 10             	add    esp,0x10
c0012801:	85 c0                	test   eax,eax
c0012803:	0f 84 b3 00 00 00    	je     c00128bc <SysOpen(regs*)+0x1e9>
c0012809:	83 ec 08             	sub    esp,0x8
c001280c:	68 70 22 02 c0       	push   0xc0022270
c0012811:	56                   	push   esi
c0012812:	e8 74 fe ff ff       	call   c001268b <string_ends_with(char const*, char const*)>
c0012817:	83 c4 10             	add    esp,0x10
c001281a:	85 c0                	test   eax,eax
c001281c:	0f 85 9a 00 00 00    	jne    c00128bc <SysOpen(regs*)+0x1e9>
c0012822:	83 ec 0c             	sub    esp,0xc
c0012825:	68 14 01 00 00       	push   0x114
c001282a:	e8 87 52 ff ff       	call   c0007ab6 <malloc>
c001282f:	83 c4 0c             	add    esp,0xc
c0012832:	89 c6                	mov    esi,eax
c0012834:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012839:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001283c:	50                   	push   eax
c001283d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012840:	52                   	push   edx
c0012841:	56                   	push   esi
c0012842:	e8 53 91 ff ff       	call   c000b99a <File::File(char const*, Process*)>
c0012847:	83 c4 10             	add    esp,0x10
c001284a:	85 f6                	test   esi,esi
c001284c:	74 5b                	je     c00128a9 <SysOpen(regs*)+0x1d6>
c001284e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012851:	0f b6 c2             	movzx  eax,dl
c0012854:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012857:	89 d0                	mov    eax,edx
c0012859:	83 e0 01             	and    eax,0x1
c001285c:	f6 c2 02             	test   dl,0x2
c001285f:	74 03                	je     c0012864 <SysOpen(regs*)+0x191>
c0012861:	83 c8 02             	or     eax,0x2
c0012864:	f6 c2 04             	test   dl,0x4
c0012867:	74 03                	je     c001286c <SysOpen(regs*)+0x199>
c0012869:	83 c8 04             	or     eax,0x4
c001286c:	f6 c2 08             	test   dl,0x8
c001286f:	74 03                	je     c0012874 <SysOpen(regs*)+0x1a1>
c0012871:	83 c8 0a             	or     eax,0xa
c0012874:	80 e2 10             	and    dl,0x10
c0012877:	74 03                	je     c001287c <SysOpen(regs*)+0x1a9>
c0012879:	83 c8 12             	or     eax,0x12
c001287c:	83 ec 08             	sub    esp,0x8
c001287f:	50                   	push   eax
c0012880:	56                   	push   esi
c0012881:	e8 32 91 ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c0012886:	83 c4 10             	add    esp,0x10
c0012889:	85 c0                	test   eax,eax
c001288b:	75 1c                	jne    c00128a9 <SysOpen(regs*)+0x1d6>
c001288d:	83 ec 0c             	sub    esp,0xc
c0012890:	56                   	push   esi
c0012891:	e8 20 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012899:	83 c4 10             	add    esp,0x10
c001289c:	89 02                	mov    DWORD PTR [edx],eax
c001289e:	c1 f8 1f             	sar    eax,0x1f
c00128a1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00128a4:	e9 ba fe ff ff       	jmp    c0012763 <SysOpen(regs*)+0x90>
c00128a9:	81 c4 04 01 00 00    	add    esp,0x104
c00128af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00128b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00128b9:	5b                   	pop    ebx
c00128ba:	5e                   	pop    esi
c00128bb:	c3                   	ret    
c00128bc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128bf:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00128c5:	e9 92 fe ff ff       	jmp    c001275c <SysOpen(regs*)+0x89>

c00128ca <KeSystemCall(regs*, void*)>:
c00128ca:	53                   	push   ebx
c00128cb:	83 ec 08             	sub    esp,0x8
c00128ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00128d2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00128d5:	83 f8 3e             	cmp    eax,0x3e
c00128d8:	77 16                	ja     c00128f0 <KeSystemCall(regs*, void*)+0x26>
c00128da:	8b 14 85 80 3a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc580]
c00128e1:	85 d2                	test   edx,edx
c00128e3:	74 0b                	je     c00128f0 <KeSystemCall(regs*, void*)+0x26>
c00128e5:	83 ec 0c             	sub    esp,0xc
c00128e8:	53                   	push   ebx
c00128e9:	ff d2                	call   edx
c00128eb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00128ee:	eb 0d                	jmp    c00128fd <KeSystemCall(regs*, void*)+0x33>
c00128f0:	52                   	push   edx
c00128f1:	52                   	push   edx
c00128f2:	50                   	push   eax
c00128f3:	68 7a 22 02 c0       	push   0xc002227a
c00128f8:	e8 48 80 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00128fd:	83 c4 10             	add    esp,0x10
c0012900:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012905:	31 d2                	xor    edx,edx
c0012907:	83 c4 08             	add    esp,0x8
c001290a:	5b                   	pop    ebx
c001290b:	c3                   	ret    

c001290c <KeSwitchEndian16(unsigned short)>:
c001290c:	83 ec 04             	sub    esp,0x4
c001290f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012913:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012917:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001291b:	c1 f8 08             	sar    eax,0x8
c001291e:	89 c2                	mov    edx,eax
c0012920:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012924:	c1 e0 08             	shl    eax,0x8
c0012927:	09 d0                	or     eax,edx
c0012929:	83 c4 04             	add    esp,0x4
c001292c:	c3                   	ret    
c001292d:	8d 76 00             	lea    esi,[esi+0x0]

c0012930 <KeSwitchEndian32(unsigned int)>:
c0012930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012934:	c1 e8 18             	shr    eax,0x18
c0012937:	89 c2                	mov    edx,eax
c0012939:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001293d:	c1 e0 08             	shl    eax,0x8
c0012940:	25 00 00 ff 00       	and    eax,0xff0000
c0012945:	09 c2                	or     edx,eax
c0012947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001294b:	c1 e8 08             	shr    eax,0x8
c001294e:	25 00 ff 00 00       	and    eax,0xff00
c0012953:	09 c2                	or     edx,eax
c0012955:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012959:	c1 e0 18             	shl    eax,0x18
c001295c:	09 d0                	or     eax,edx
c001295e:	c3                   	ret    
c001295f:	90                   	nop

c0012960 <EthernetCRC32(unsigned char*, int)>:
c0012960:	83 ec 10             	sub    esp,0x10
c0012963:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012968:	75 0a                	jne    c0012974 <EthernetCRC32(unsigned char*, int)+0x14>
c001296a:	b8 00 00 00 00       	mov    eax,0x0
c001296f:	e9 8c 00 00 00       	jmp    c0012a00 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012974:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012979:	7f 09                	jg     c0012984 <EthernetCRC32(unsigned char*, int)+0x24>
c001297b:	b8 00 00 00 00       	mov    eax,0x0
c0012980:	eb 7e                	jmp    c0012a00 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012982:	66 90                	xchg   ax,ax
c0012984:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001298c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012998:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001299c:	7d 5a                	jge    c00129f8 <EthernetCRC32(unsigned char*, int)+0x98>
c001299e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00129a6:	01 d0                	add    eax,edx
c00129a8:	8a 00                	mov    al,BYTE PTR [eax]
c00129aa:	0f b6 c0             	movzx  eax,al
c00129ad:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00129b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00129b9:	8d 76 00             	lea    esi,[esi+0x0]
c00129bc:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00129c1:	7f 2d                	jg     c00129f0 <EthernetCRC32(unsigned char*, int)+0x90>
c00129c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129c7:	83 e0 01             	and    eax,0x1
c00129ca:	74 10                	je     c00129dc <EthernetCRC32(unsigned char*, int)+0x7c>
c00129cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129d0:	d1 e8                	shr    eax,1
c00129d2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00129d7:	eb 0b                	jmp    c00129e4 <EthernetCRC32(unsigned char*, int)+0x84>
c00129d9:	8d 76 00             	lea    esi,[esi+0x0]
c00129dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129e0:	d1 e8                	shr    eax,1
c00129e2:	66 90                	xchg   ax,ax
c00129e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129e8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00129ed:	eb cd                	jmp    c00129bc <EthernetCRC32(unsigned char*, int)+0x5c>
c00129ef:	90                   	nop
c00129f0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00129f5:	eb 9d                	jmp    c0012994 <EthernetCRC32(unsigned char*, int)+0x34>
c00129f7:	90                   	nop
c00129f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129fc:	f7 d0                	not    eax
c00129fe:	66 90                	xchg   ax,ax
c0012a00:	83 c4 10             	add    esp,0x10
c0012a03:	c3                   	ret    

c0012a04 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012a04:	83 ec 2c             	sub    esp,0x2c
c0012a07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a0b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012a10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a1f:	0f b7 c0             	movzx  eax,ax
c0012a22:	3d 06 08 00 00       	cmp    eax,0x806
c0012a27:	75 13                	jne    c0012a3c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012a29:	83 ec 0c             	sub    esp,0xc
c0012a2c:	68 8e 22 02 c0       	push   0xc002228e
c0012a31:	e8 0f 7f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012a36:	83 c4 10             	add    esp,0x10
c0012a39:	eb 25                	jmp    c0012a60 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012a3b:	90                   	nop
c0012a3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a43:	0f b7 c0             	movzx  eax,ax
c0012a46:	3d 00 08 00 00       	cmp    eax,0x800
c0012a4b:	75 13                	jne    c0012a60 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012a4d:	83 ec 0c             	sub    esp,0xc
c0012a50:	68 a4 22 02 c0       	push   0xc00222a4
c0012a55:	e8 eb 7e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012a5a:	83 c4 10             	add    esp,0x10
c0012a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a60:	90                   	nop
c0012a61:	83 c4 2c             	add    esp,0x2c
c0012a64:	c3                   	ret    

c0012a65 <CmOpen(char const*)>:
c0012a65:	57                   	push   edi
c0012a66:	56                   	push   esi
c0012a67:	53                   	push   ebx
c0012a68:	83 ec 1c             	sub    esp,0x1c
c0012a6b:	6a 30                	push   0x30
c0012a6d:	e8 44 50 ff ff       	call   c0007ab6 <malloc>
c0012a72:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012a79:	89 c3                	mov    ebx,eax
c0012a7b:	e8 36 50 ff ff       	call   c0007ab6 <malloc>
c0012a80:	83 c4 0c             	add    esp,0xc
c0012a83:	89 c6                	mov    esi,eax
c0012a85:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012a8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012a8f:	50                   	push   eax
c0012a90:	e8 05 8f ff ff       	call   c000b99a <File::File(char const*, Process*)>
c0012a95:	83 c4 0c             	add    esp,0xc
c0012a98:	89 33                	mov    DWORD PTR [ebx],esi
c0012a9a:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012a9e:	50                   	push   eax
c0012a9f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012aa3:	50                   	push   eax
c0012aa4:	56                   	push   esi
c0012aa5:	e8 10 92 ff ff       	call   c000bcba <File::stat(unsigned long long*, bool*)>
c0012aaa:	5a                   	pop    edx
c0012aab:	59                   	pop    ecx
c0012aac:	6a 01                	push   0x1
c0012aae:	ff 33                	push   DWORD PTR [ebx]
c0012ab0:	e8 03 8f ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c0012ab5:	5e                   	pop    esi
c0012ab6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012aba:	e8 f7 4f ff ff       	call   c0007ab6 <malloc>
c0012abf:	5a                   	pop    edx
c0012ac0:	89 c7                	mov    edi,eax
c0012ac2:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012ac6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ac8:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aca:	56                   	push   esi
c0012acb:	57                   	push   edi
c0012acc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ad0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ad4:	50                   	push   eax
c0012ad5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012ad8:	83 c4 14             	add    esp,0x14
c0012adb:	ff 33                	push   DWORD PTR [ebx]
c0012add:	e8 34 8f ff ff       	call   c000ba16 <File::close()>
c0012ae2:	59                   	pop    ecx
c0012ae3:	58                   	pop    eax
c0012ae4:	6a 13                	push   0x13
c0012ae6:	ff 33                	push   DWORD PTR [ebx]
c0012ae8:	e8 cb 8e ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c0012aed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012aef:	8b 10                	mov    edx,DWORD PTR [eax]
c0012af1:	89 34 24             	mov    DWORD PTR [esp],esi
c0012af4:	57                   	push   edi
c0012af5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012af9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012afd:	50                   	push   eax
c0012afe:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012b01:	83 c4 14             	add    esp,0x14
c0012b04:	57                   	push   edi
c0012b05:	e8 bc 4f ff ff       	call   c0007ac6 <free>
c0012b0a:	83 c4 10             	add    esp,0x10
c0012b0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012b10:	75 10                	jne    c0012b22 <CmOpen(char const*)+0xbd>
c0012b12:	83 ec 0c             	sub    esp,0xc
c0012b15:	68 b9 22 02 c0       	push   0xc00222b9
c0012b1a:	e8 4c e9 ff ff       	call   c001146b <KePanic(char const*)>
c0012b1f:	83 c4 10             	add    esp,0x10
c0012b22:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012b25:	50                   	push   eax
c0012b26:	6a 00                	push   0x0
c0012b28:	6a 00                	push   0x0
c0012b2a:	ff 33                	push   DWORD PTR [ebx]
c0012b2c:	e8 45 8f ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0012b31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b33:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b35:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b38:	57                   	push   edi
c0012b39:	6a 00                	push   0x0
c0012b3b:	6a 2b                	push   0x2b
c0012b3d:	50                   	push   eax
c0012b3e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012b41:	83 c4 1c             	add    esp,0x1c
c0012b44:	6a 00                	push   0x0
c0012b46:	6a 00                	push   0x0
c0012b48:	ff 33                	push   DWORD PTR [ebx]
c0012b4a:	e8 27 8f ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0012b4f:	83 c4 0c             	add    esp,0xc
c0012b52:	6a 08                	push   0x8
c0012b54:	68 ca 22 02 c0       	push   0xc00222ca
c0012b59:	57                   	push   edi
c0012b5a:	e8 21 d8 fe ff       	call   c0000380 <memcmp>
c0012b5f:	83 c4 10             	add    esp,0x10
c0012b62:	85 c0                	test   eax,eax
c0012b64:	74 10                	je     c0012b76 <CmOpen(char const*)+0x111>
c0012b66:	83 ec 0c             	sub    esp,0xc
c0012b69:	68 d3 22 02 c0       	push   0xc00222d3
c0012b6e:	e8 f8 e8 ff ff       	call   c001146b <KePanic(char const*)>
c0012b73:	83 c4 10             	add    esp,0x10
c0012b76:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012b7a:	89 d8                	mov    eax,ebx
c0012b7c:	83 c4 10             	add    esp,0x10
c0012b7f:	5b                   	pop    ebx
c0012b80:	5e                   	pop    esi
c0012b81:	5f                   	pop    edi
c0012b82:	c3                   	ret    

c0012b83 <CmClose(Reghive_Tag*)>:
c0012b83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b87:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012b8b:	74 0b                	je     c0012b98 <CmClose(Reghive_Tag*)+0x15>
c0012b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b93:	e9 7e 8e ff ff       	jmp    c000ba16 <File::close()>
c0012b98:	c3                   	ret    

c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012b99:	53                   	push   ebx
c0012b9a:	83 ec 18             	sub    esp,0x18
c0012b9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ba1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ba5:	74 29                	je     c0012bd0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012ba7:	50                   	push   eax
c0012ba8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012bad:	99                   	cdq    
c0012bae:	52                   	push   edx
c0012baf:	50                   	push   eax
c0012bb0:	ff 33                	push   DWORD PTR [ebx]
c0012bb2:	e8 bf 8e ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0012bb7:	5a                   	pop    edx
c0012bb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bba:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012bbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bc0:	51                   	push   ecx
c0012bc1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012bc5:	6a 00                	push   0x0
c0012bc7:	6a 2b                	push   0x2b
c0012bc9:	50                   	push   eax
c0012bca:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012bcd:	83 c4 20             	add    esp,0x20
c0012bd0:	83 c4 18             	add    esp,0x18
c0012bd3:	5b                   	pop    ebx
c0012bd4:	c3                   	ret    

c0012bd5 <CmGetString(Reghive_Tag*, int, char*)>:
c0012bd5:	55                   	push   ebp
c0012bd6:	57                   	push   edi
c0012bd7:	56                   	push   esi
c0012bd8:	53                   	push   ebx
c0012bd9:	31 db                	xor    ebx,ebx
c0012bdb:	83 ec 70             	sub    esp,0x70
c0012bde:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012be5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012be9:	50                   	push   eax
c0012bea:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012bf1:	55                   	push   ebp
c0012bf2:	e8 a2 ff ff ff       	call   c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012bf7:	83 c4 10             	add    esp,0x10
c0012bfa:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012bff:	c1 e0 08             	shl    eax,0x8
c0012c02:	89 c2                	mov    edx,eax
c0012c04:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012c09:	09 d0                	or     eax,edx
c0012c0b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012c10:	c1 e0 08             	shl    eax,0x8
c0012c13:	09 d0                	or     eax,edx
c0012c15:	74 25                	je     c0012c3c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012c17:	6b fb 0d             	imul   edi,ebx,0xd
c0012c1a:	52                   	push   edx
c0012c1b:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012c1f:	52                   	push   edx
c0012c20:	50                   	push   eax
c0012c21:	55                   	push   ebp
c0012c22:	e8 72 ff ff ff       	call   c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c27:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012c2b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012c32:	b9 27 00 00 00       	mov    ecx,0x27
c0012c37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012c39:	83 c4 10             	add    esp,0x10
c0012c3c:	83 c3 03             	add    ebx,0x3
c0012c3f:	83 fb 15             	cmp    ebx,0x15
c0012c42:	75 b6                	jne    c0012bfa <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012c44:	83 c4 6c             	add    esp,0x6c
c0012c47:	5b                   	pop    ebx
c0012c48:	5e                   	pop    esi
c0012c49:	5f                   	pop    edi
c0012c4a:	5d                   	pop    ebp
c0012c4b:	c3                   	ret    

c0012c4c <CmEnterDirectory(Reghive_Tag*, int)>:
c0012c4c:	83 ec 40             	sub    esp,0x40
c0012c4f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012c53:	50                   	push   eax
c0012c54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012c58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012c5c:	e8 38 ff ff ff       	call   c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c61:	83 c4 10             	add    esp,0x10
c0012c64:	83 c8 ff             	or     eax,0xffffffff
c0012c67:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012c6c:	75 19                	jne    c0012c87 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012c6e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012c73:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012c78:	c1 e0 08             	shl    eax,0x8
c0012c7b:	09 c2                	or     edx,eax
c0012c7d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012c82:	c1 e0 10             	shl    eax,0x10
c0012c85:	09 d0                	or     eax,edx
c0012c87:	83 c4 3c             	add    esp,0x3c
c0012c8a:	c3                   	ret    

c0012c8b <CmGetNext(Reghive_Tag*, int)>:
c0012c8b:	83 ec 40             	sub    esp,0x40
c0012c8e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012c92:	50                   	push   eax
c0012c93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012c97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012c9b:	e8 f9 fe ff ff       	call   c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ca0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012ca5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012caa:	c1 e0 08             	shl    eax,0x8
c0012cad:	09 c2                	or     edx,eax
c0012caf:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012cb4:	83 c4 4c             	add    esp,0x4c
c0012cb7:	c1 e0 10             	shl    eax,0x10
c0012cba:	09 d0                	or     eax,edx
c0012cbc:	c3                   	ret    

c0012cbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012cbd:	53                   	push   ebx
c0012cbe:	83 ec 18             	sub    esp,0x18
c0012cc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012cc5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012cc9:	74 29                	je     c0012cf4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012ccb:	50                   	push   eax
c0012ccc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012cd1:	99                   	cdq    
c0012cd2:	52                   	push   edx
c0012cd3:	50                   	push   eax
c0012cd4:	ff 33                	push   DWORD PTR [ebx]
c0012cd6:	e8 9b 8d ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0012cdb:	5a                   	pop    edx
c0012cdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cde:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ce2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ce4:	51                   	push   ecx
c0012ce5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ce9:	6a 00                	push   0x0
c0012ceb:	6a 2b                	push   0x2b
c0012ced:	50                   	push   eax
c0012cee:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012cf1:	83 c4 20             	add    esp,0x20
c0012cf4:	83 c4 18             	add    esp,0x18
c0012cf7:	5b                   	pop    ebx
c0012cf8:	c3                   	ret    

c0012cf9 <CmFreeExtent(Reghive_Tag*, int)>:
c0012cf9:	53                   	push   ebx
c0012cfa:	83 ec 3c             	sub    esp,0x3c
c0012cfd:	6a 2b                	push   0x2b
c0012cff:	6a 00                	push   0x0
c0012d01:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012d05:	53                   	push   ebx
c0012d06:	e8 e5 d7 fe ff       	call   c00004f0 <memset>
c0012d0b:	83 c4 0c             	add    esp,0xc
c0012d0e:	53                   	push   ebx
c0012d0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d13:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d17:	e8 a1 ff ff ff       	call   c0012cbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d1c:	83 c4 48             	add    esp,0x48
c0012d1f:	5b                   	pop    ebx
c0012d20:	c3                   	ret    

c0012d21 <CmUpdateHeader(Reghive_Tag*)>:
c0012d21:	83 ec 0c             	sub    esp,0xc
c0012d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d28:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d2c:	74 10                	je     c0012d3e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012d2e:	52                   	push   edx
c0012d2f:	8d 50 05             	lea    edx,[eax+0x5]
c0012d32:	52                   	push   edx
c0012d33:	6a 00                	push   0x0
c0012d35:	50                   	push   eax
c0012d36:	e8 82 ff ff ff       	call   c0012cbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d3b:	83 c4 10             	add    esp,0x10
c0012d3e:	83 c4 0c             	add    esp,0xc
c0012d41:	c3                   	ret    

c0012d42 <CmExpand(Reghive_Tag*, int)>:
c0012d42:	57                   	push   edi
c0012d43:	56                   	push   esi
c0012d44:	83 ce ff             	or     esi,0xffffffff
c0012d47:	53                   	push   ebx
c0012d48:	83 ec 30             	sub    esp,0x30
c0012d4b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012d4f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d53:	74 5f                	je     c0012db4 <CmExpand(Reghive_Tag*, int)+0x72>
c0012d55:	31 d2                	xor    edx,edx
c0012d57:	31 f6                	xor    esi,esi
c0012d59:	50                   	push   eax
c0012d5a:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012d5e:	52                   	push   edx
c0012d5f:	50                   	push   eax
c0012d60:	ff 33                	push   DWORD PTR [ebx]
c0012d62:	e8 0f 8d ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0012d67:	83 c4 0c             	add    esp,0xc
c0012d6a:	6a 2b                	push   0x2b
c0012d6c:	6a 00                	push   0x0
c0012d6e:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012d72:	57                   	push   edi
c0012d73:	e8 78 d7 fe ff       	call   c00004f0 <memset>
c0012d78:	83 c4 10             	add    esp,0x10
c0012d7b:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012d7f:	7d 1b                	jge    c0012d9c <CmExpand(Reghive_Tag*, int)+0x5a>
c0012d81:	83 ec 0c             	sub    esp,0xc
c0012d84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d86:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012d8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d8c:	46                   	inc    esi
c0012d8d:	51                   	push   ecx
c0012d8e:	57                   	push   edi
c0012d8f:	6a 00                	push   0x0
c0012d91:	6a 2b                	push   0x2b
c0012d93:	50                   	push   eax
c0012d94:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012d97:	83 c4 20             	add    esp,0x20
c0012d9a:	eb df                	jmp    c0012d7b <CmExpand(Reghive_Tag*, int)+0x39>
c0012d9c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012da0:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012da3:	83 ec 0c             	sub    esp,0xc
c0012da6:	01 f2                	add    edx,esi
c0012da8:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012dab:	53                   	push   ebx
c0012dac:	e8 70 ff ff ff       	call   c0012d21 <CmUpdateHeader(Reghive_Tag*)>
c0012db1:	83 c4 10             	add    esp,0x10
c0012db4:	83 c4 30             	add    esp,0x30
c0012db7:	89 f0                	mov    eax,esi
c0012db9:	5b                   	pop    ebx
c0012dba:	5e                   	pop    esi
c0012dbb:	5f                   	pop    edi
c0012dbc:	c3                   	ret    

c0012dbd <CmFindUnusedExtent(Reghive_Tag*)>:
c0012dbd:	55                   	push   ebp
c0012dbe:	57                   	push   edi
c0012dbf:	56                   	push   esi
c0012dc0:	53                   	push   ebx
c0012dc1:	83 cb ff             	or     ebx,0xffffffff
c0012dc4:	83 ec 1c             	sub    esp,0x1c
c0012dc7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012dcb:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012dcf:	74 68                	je     c0012e39 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012dd1:	be 2b 00 00 00       	mov    esi,0x2b
c0012dd6:	51                   	push   ecx
c0012dd7:	31 ff                	xor    edi,edi
c0012dd9:	6a 00                	push   0x0
c0012ddb:	31 db                	xor    ebx,ebx
c0012ddd:	6a 00                	push   0x0
c0012ddf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012de2:	e8 8f 8c ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0012de7:	83 c4 10             	add    esp,0x10
c0012dea:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012ded:	76 3b                	jbe    c0012e2a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012def:	83 ec 0c             	sub    esp,0xc
c0012df2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012df5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012df9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dfb:	51                   	push   ecx
c0012dfc:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012e00:	51                   	push   ecx
c0012e01:	6a 00                	push   0x0
c0012e03:	6a 01                	push   0x1
c0012e05:	50                   	push   eax
c0012e06:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012e09:	83 c4 20             	add    esp,0x20
c0012e0c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012e11:	74 26                	je     c0012e39 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012e13:	43                   	inc    ebx
c0012e14:	52                   	push   edx
c0012e15:	57                   	push   edi
c0012e16:	56                   	push   esi
c0012e17:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012e1a:	e8 57 8c ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0012e1f:	83 c6 2b             	add    esi,0x2b
c0012e22:	83 d7 00             	adc    edi,0x0
c0012e25:	83 c4 10             	add    esp,0x10
c0012e28:	eb c0                	jmp    c0012dea <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012e2a:	50                   	push   eax
c0012e2b:	50                   	push   eax
c0012e2c:	6a 40                	push   0x40
c0012e2e:	55                   	push   ebp
c0012e2f:	e8 0e ff ff ff       	call   c0012d42 <CmExpand(Reghive_Tag*, int)>
c0012e34:	83 c4 10             	add    esp,0x10
c0012e37:	89 c3                	mov    ebx,eax
c0012e39:	83 c4 1c             	add    esp,0x1c
c0012e3c:	89 d8                	mov    eax,ebx
c0012e3e:	5b                   	pop    ebx
c0012e3f:	5e                   	pop    esi
c0012e40:	5f                   	pop    edi
c0012e41:	5d                   	pop    ebp
c0012e42:	c3                   	ret    

c0012e43 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012e43:	55                   	push   ebp
c0012e44:	57                   	push   edi
c0012e45:	56                   	push   esi
c0012e46:	53                   	push   ebx
c0012e47:	81 ec 88 00 00 00    	sub    esp,0x88
c0012e4d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012e54:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012e5b:	e8 5d ff ff ff       	call   c0012dbd <CmFindUnusedExtent(Reghive_Tag*)>
c0012e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e64:	83 c4 0c             	add    esp,0xc
c0012e67:	6a 2b                	push   0x2b
c0012e69:	6a 00                	push   0x0
c0012e6b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012e6f:	55                   	push   ebp
c0012e70:	e8 7b d6 fe ff       	call   c00004f0 <memset>
c0012e75:	83 c4 10             	add    esp,0x10
c0012e78:	85 db                	test   ebx,ebx
c0012e7a:	74 12                	je     c0012e8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012e7c:	51                   	push   ecx
c0012e7d:	55                   	push   ebp
c0012e7e:	53                   	push   ebx
c0012e7f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012e86:	e8 0e fd ff ff       	call   c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e8b:	83 c4 10             	add    esp,0x10
c0012e8e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012e92:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012e99:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012e9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ea0:	85 db                	test   ebx,ebx
c0012ea2:	74 49                	je     c0012eed <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012ea4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012ea9:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012eae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012eb2:	c1 e0 08             	shl    eax,0x8
c0012eb5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012ebb:	09 c8                	or     eax,ecx
c0012ebd:	74 11                	je     c0012ed0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012ebf:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012ec3:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012ec7:	c1 e8 10             	shr    eax,0x10
c0012eca:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012ece:	eb 0f                	jmp    c0012edf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012ed0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012ed5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012eda:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012edf:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012ee3:	c1 ea 08             	shr    edx,0x8
c0012ee6:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012eeb:	eb 0f                	jmp    c0012efc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012eed:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012ef2:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012ef7:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012efc:	52                   	push   edx
c0012efd:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012f01:	50                   	push   eax
c0012f02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f06:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012f0d:	e8 ab fd ff ff       	call   c0012cbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f12:	83 c4 10             	add    esp,0x10
c0012f15:	85 db                	test   ebx,ebx
c0012f17:	74 12                	je     c0012f2b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012f19:	50                   	push   eax
c0012f1a:	55                   	push   ebp
c0012f1b:	53                   	push   ebx
c0012f1c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012f23:	e8 95 fd ff ff       	call   c0012cbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f28:	83 c4 10             	add    esp,0x10
c0012f2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f2f:	83 c4 7c             	add    esp,0x7c
c0012f32:	5b                   	pop    ebx
c0012f33:	5e                   	pop    esi
c0012f34:	5f                   	pop    edi
c0012f35:	5d                   	pop    ebp
c0012f36:	c3                   	ret    

c0012f37 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012f37:	55                   	push   ebp
c0012f38:	57                   	push   edi
c0012f39:	56                   	push   esi
c0012f3a:	53                   	push   ebx
c0012f3b:	bb 27 00 00 00       	mov    ebx,0x27
c0012f40:	81 ec 88 00 00 00    	sub    esp,0x88
c0012f46:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012f4d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012f54:	e8 17 d6 fe ff       	call   c0000570 <strlen>
c0012f59:	8d 48 26             	lea    ecx,[eax+0x26]
c0012f5c:	89 c8                	mov    eax,ecx
c0012f5e:	99                   	cdq    
c0012f5f:	f7 fb                	idiv   ebx
c0012f61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f65:	83 c4 10             	add    esp,0x10
c0012f68:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012f6e:	7e 10                	jle    c0012f80 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012f70:	83 ec 0c             	sub    esp,0xc
c0012f73:	68 e4 22 02 c0       	push   0xc00222e4
c0012f78:	e8 ee e4 ff ff       	call   c001146b <KePanic(char const*)>
c0012f7d:	83 c4 10             	add    esp,0x10
c0012f80:	31 ff                	xor    edi,edi
c0012f82:	50                   	push   eax
c0012f83:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012f87:	53                   	push   ebx
c0012f88:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012f8f:	56                   	push   esi
c0012f90:	e8 04 fc ff ff       	call   c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f95:	83 c4 10             	add    esp,0x10
c0012f98:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012f9c:	89 d0                	mov    eax,edx
c0012f9e:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012fa2:	c1 e0 08             	shl    eax,0x8
c0012fa5:	09 c2                	or     edx,eax
c0012fa7:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012fab:	c1 e2 08             	shl    edx,0x8
c0012fae:	09 c2                	or     edx,eax
c0012fb0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012fb4:	7e 76                	jle    c001302c <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012fb6:	85 d2                	test   edx,edx
c0012fb8:	75 25                	jne    c0012fdf <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012fba:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012fbf:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012fc3:	50                   	push   eax
c0012fc4:	6a 00                	push   0x0
c0012fc6:	6a 00                	push   0x0
c0012fc8:	56                   	push   esi
c0012fc9:	e8 75 fe ff ff       	call   c0012e43 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012fce:	83 c4 10             	add    esp,0x10
c0012fd1:	89 c2                	mov    edx,eax
c0012fd3:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012fd6:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012fd9:	c1 f8 10             	sar    eax,0x10
c0012fdc:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012fdf:	55                   	push   ebp
c0012fe0:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012fe4:	55                   	push   ebp
c0012fe5:	52                   	push   edx
c0012fe6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012fea:	56                   	push   esi
c0012feb:	e8 a9 fb ff ff       	call   c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ff0:	83 c4 0c             	add    esp,0xc
c0012ff3:	6a 27                	push   0x27
c0012ff5:	6a 00                	push   0x0
c0012ff7:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012ffb:	51                   	push   ecx
c0012ffc:	e8 ef d4 fe ff       	call   c00004f0 <memset>
c0013001:	83 c4 0c             	add    esp,0xc
c0013004:	6b c7 27             	imul   eax,edi,0x27
c0013007:	6a 27                	push   0x27
c0013009:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013010:	50                   	push   eax
c0013011:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013015:	51                   	push   ecx
c0013016:	e8 65 d6 fe ff       	call   c0000680 <strncpy>
c001301b:	83 c4 0c             	add    esp,0xc
c001301e:	55                   	push   ebp
c001301f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013023:	52                   	push   edx
c0013024:	56                   	push   esi
c0013025:	e8 93 fc ff ff       	call   c0012cbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001302a:	eb 19                	jmp    c0013045 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001302c:	85 d2                	test   edx,edx
c001302e:	74 18                	je     c0013048 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0013030:	51                   	push   ecx
c0013031:	51                   	push   ecx
c0013032:	52                   	push   edx
c0013033:	56                   	push   esi
c0013034:	e8 c0 fc ff ff       	call   c0012cf9 <CmFreeExtent(Reghive_Tag*, int)>
c0013039:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001303d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013041:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013045:	83 c4 10             	add    esp,0x10
c0013048:	47                   	inc    edi
c0013049:	83 c3 03             	add    ebx,0x3
c001304c:	83 ff 07             	cmp    edi,0x7
c001304f:	0f 85 43 ff ff ff    	jne    c0012f98 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013055:	50                   	push   eax
c0013056:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001305a:	50                   	push   eax
c001305b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013062:	56                   	push   esi
c0013063:	e8 55 fc ff ff       	call   c0012cbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013068:	81 c4 8c 00 00 00    	add    esp,0x8c
c001306e:	5b                   	pop    ebx
c001306f:	5e                   	pop    esi
c0013070:	5f                   	pop    edi
c0013071:	5d                   	pop    ebp
c0013072:	c3                   	ret    

c0013073 <CmGetMatch(char*, char*, bool, bool*)>:
c0013073:	56                   	push   esi
c0013074:	53                   	push   ebx
c0013075:	50                   	push   eax
c0013076:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001307a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001307f:	74 25                	je     c00130a6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013081:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013084:	31 db                	xor    ebx,ebx
c0013086:	50                   	push   eax
c0013087:	50                   	push   eax
c0013088:	8d 04 9d 80 3b 02 c0 	lea    eax,[ebx*4-0x3ffdc480]
c001308f:	50                   	push   eax
c0013090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013094:	e8 b7 d6 fe ff       	call   c0000750 <strcmp>
c0013099:	83 c4 10             	add    esp,0x10
c001309c:	85 c0                	test   eax,eax
c001309e:	74 2e                	je     c00130ce <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00130a0:	43                   	inc    ebx
c00130a1:	83 fb 3f             	cmp    ebx,0x3f
c00130a4:	75 e0                	jne    c0013086 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00130a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00130a9:	31 db                	xor    ebx,ebx
c00130ab:	8d 04 9d 80 3b 02 c0 	lea    eax,[ebx*4-0x3ffdc480]
c00130b2:	51                   	push   ecx
c00130b3:	51                   	push   ecx
c00130b4:	50                   	push   eax
c00130b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00130b9:	e8 92 d6 fe ff       	call   c0000750 <strcmp>
c00130be:	83 c4 10             	add    esp,0x10
c00130c1:	85 c0                	test   eax,eax
c00130c3:	74 09                	je     c00130ce <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00130c5:	43                   	inc    ebx
c00130c6:	83 fb 3f             	cmp    ebx,0x3f
c00130c9:	75 e0                	jne    c00130ab <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00130cb:	83 cb ff             	or     ebx,0xffffffff
c00130ce:	89 d8                	mov    eax,ebx
c00130d0:	5a                   	pop    edx
c00130d1:	5b                   	pop    ebx
c00130d2:	5e                   	pop    esi
c00130d3:	c3                   	ret    

c00130d4 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00130d4:	55                   	push   ebp
c00130d5:	31 c0                	xor    eax,eax
c00130d7:	57                   	push   edi
c00130d8:	56                   	push   esi
c00130d9:	53                   	push   ebx
c00130da:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00130de:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00130e2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00130e4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00130e8:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00130eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00130ef:	83 fd 1f             	cmp    ebp,0x1f
c00130f2:	7f 0b                	jg     c00130ff <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00130f4:	0f b6 c2             	movzx  eax,dl
c00130f7:	d3 e0                	shl    eax,cl
c00130f9:	09 07                	or     DWORD PTR [edi],eax
c00130fb:	b0 01                	mov    al,0x1
c00130fd:	01 33                	add    DWORD PTR [ebx],esi
c00130ff:	5b                   	pop    ebx
c0013100:	5e                   	pop    esi
c0013101:	5f                   	pop    edi
c0013102:	5d                   	pop    ebp
c0013103:	c3                   	ret    

c0013104 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0013104:	57                   	push   edi
c0013105:	56                   	push   esi
c0013106:	53                   	push   ebx
c0013107:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001310b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001310f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0013113:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013117:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013119:	7c 17                	jl     c0013132 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001311b:	8b 17                	mov    edx,DWORD PTR [edi]
c001311d:	b8 01 00 00 00       	mov    eax,0x1
c0013122:	d3 e0                	shl    eax,cl
c0013124:	48                   	dec    eax
c0013125:	21 d0                	and    eax,edx
c0013127:	d3 ea                	shr    edx,cl
c0013129:	89 17                	mov    DWORD PTR [edi],edx
c001312b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001312d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013130:	eb 05                	jmp    c0013137 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013132:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013135:	31 c0                	xor    eax,eax
c0013137:	5b                   	pop    ebx
c0013138:	5e                   	pop    esi
c0013139:	5f                   	pop    edi
c001313a:	c3                   	ret    

c001313b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001313b:	83 ec 40             	sub    esp,0x40
c001313e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013142:	50                   	push   eax
c0013143:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013147:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001314b:	e8 49 fa ff ff       	call   c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013150:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013154:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013158:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001315c:	89 10                	mov    DWORD PTR [eax],edx
c001315e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013161:	83 c4 4c             	add    esp,0x4c
c0013164:	c3                   	ret    

c0013165 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013165:	55                   	push   ebp
c0013166:	57                   	push   edi
c0013167:	56                   	push   esi
c0013168:	53                   	push   ebx
c0013169:	83 ec 40             	sub    esp,0x40
c001316c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013170:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013174:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013178:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001317c:	53                   	push   ebx
c001317d:	56                   	push   esi
c001317e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013182:	e8 12 fa ff ff       	call   c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013187:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001318b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001318f:	83 c4 0c             	add    esp,0xc
c0013192:	53                   	push   ebx
c0013193:	56                   	push   esi
c0013194:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013198:	e8 20 fb ff ff       	call   c0012cbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001319d:	83 c4 4c             	add    esp,0x4c
c00131a0:	5b                   	pop    ebx
c00131a1:	5e                   	pop    esi
c00131a2:	5f                   	pop    edi
c00131a3:	5d                   	pop    ebp
c00131a4:	c3                   	ret    

c00131a5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00131a5:	55                   	push   ebp
c00131a6:	57                   	push   edi
c00131a7:	56                   	push   esi
c00131a8:	31 f6                	xor    esi,esi
c00131aa:	53                   	push   ebx
c00131ab:	31 db                	xor    ebx,ebx
c00131ad:	83 ec 40             	sub    esp,0x40
c00131b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00131b8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00131c0:	6a 12                	push   0x12
c00131c2:	68 ee 00 00 00       	push   0xee
c00131c7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00131cb:	e8 20 d3 fe ff       	call   c00004f0 <memset>
c00131d0:	83 c4 10             	add    esp,0x10
c00131d3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00131d7:	6a 08                	push   0x8
c00131d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00131dd:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00131e1:	50                   	push   eax
c00131e2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00131e6:	55                   	push   ebp
c00131e7:	57                   	push   edi
c00131e8:	e8 e7 fe ff ff       	call   c00130d4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00131ed:	83 c4 10             	add    esp,0x10
c00131f0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00131f4:	50                   	push   eax
c00131f5:	6a 06                	push   0x6
c00131f7:	55                   	push   ebp
c00131f8:	57                   	push   edi
c00131f9:	e8 06 ff ff ff       	call   c0013104 <CmGetShift(unsigned int*, int*, int, bool*)>
c00131fe:	83 c4 10             	add    esp,0x10
c0013201:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013206:	74 07                	je     c001320f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013208:	46                   	inc    esi
c0013209:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001320d:	eb e1                	jmp    c00131f0 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001320f:	43                   	inc    ebx
c0013210:	83 fb 12             	cmp    ebx,0x12
c0013213:	75 c2                	jne    c00131d7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013215:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013219:	31 db                	xor    ebx,ebx
c001321b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001321e:	50                   	push   eax
c001321f:	50                   	push   eax
c0013220:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0013225:	43                   	inc    ebx
c0013226:	8d 04 85 80 3b 02 c0 	lea    eax,[eax*4-0x3ffdc480]
c001322d:	50                   	push   eax
c001322e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013232:	e8 09 d6 fe ff       	call   c0000840 <strcat>
c0013237:	83 c4 10             	add    esp,0x10
c001323a:	83 fb 18             	cmp    ebx,0x18
c001323d:	75 df                	jne    c001321e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001323f:	83 c4 3c             	add    esp,0x3c
c0013242:	31 c0                	xor    eax,eax
c0013244:	5b                   	pop    ebx
c0013245:	5e                   	pop    esi
c0013246:	5f                   	pop    edi
c0013247:	5d                   	pop    ebp
c0013248:	c3                   	ret    

c0013249 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013249:	83 ec 40             	sub    esp,0x40
c001324c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013250:	50                   	push   eax
c0013251:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013255:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013259:	e8 3b f9 ff ff       	call   c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001325e:	58                   	pop    eax
c001325f:	5a                   	pop    edx
c0013260:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013264:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013268:	50                   	push   eax
c0013269:	e8 37 ff ff ff       	call   c00131a5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001326e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013273:	83 c4 4c             	add    esp,0x4c
c0013276:	c3                   	ret    

c0013277 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013277:	55                   	push   ebp
c0013278:	57                   	push   edi
c0013279:	56                   	push   esi
c001327a:	53                   	push   ebx
c001327b:	31 db                	xor    ebx,ebx
c001327d:	83 ec 70             	sub    esp,0x70
c0013280:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013287:	6a 30                	push   0x30
c0013289:	6a 00                	push   0x0
c001328b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001328f:	56                   	push   esi
c0013290:	e8 5b d2 fe ff       	call   c00004f0 <memset>
c0013295:	83 c4 10             	add    esp,0x10
c0013298:	83 ec 0c             	sub    esp,0xc
c001329b:	57                   	push   edi
c001329c:	e8 cf d2 fe ff       	call   c0000570 <strlen>
c00132a1:	83 c4 10             	add    esp,0x10
c00132a4:	39 d8                	cmp    eax,ebx
c00132a6:	76 16                	jbe    c00132be <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00132a8:	83 ec 0c             	sub    esp,0xc
c00132ab:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00132af:	50                   	push   eax
c00132b0:	e8 7b d6 fe ff       	call   c0000930 <toupper>
c00132b5:	83 c4 10             	add    esp,0x10
c00132b8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00132bb:	43                   	inc    ebx
c00132bc:	eb da                	jmp    c0013298 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00132be:	31 f6                	xor    esi,esi
c00132c0:	52                   	push   edx
c00132c1:	31 ff                	xor    edi,edi
c00132c3:	6a 18                	push   0x18
c00132c5:	6a 3f                	push   0x3f
c00132c7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00132cb:	50                   	push   eax
c00132cc:	e8 1f d2 fe ff       	call   c00004f0 <memset>
c00132d1:	83 c4 10             	add    esp,0x10
c00132d4:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00132d8:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00132dc:	84 c0                	test   al,al
c00132de:	0f 84 b0 00 00 00    	je     c0013394 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00132e4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00132e8:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00132ed:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00132f1:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00132f6:	8d 6e 01             	lea    ebp,[esi+0x1]
c00132f9:	83 ec 0c             	sub    esp,0xc
c00132fc:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013300:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013304:	53                   	push   ebx
c0013305:	e8 66 d2 fe ff       	call   c0000570 <strlen>
c001330a:	83 c4 10             	add    esp,0x10
c001330d:	85 c0                	test   eax,eax
c001330f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013313:	74 0b                	je     c0013320 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013315:	50                   	push   eax
c0013316:	6a 01                	push   0x1
c0013318:	53                   	push   ebx
c0013319:	8d 44 24 20          	lea    eax,[esp+0x20]
c001331d:	50                   	push   eax
c001331e:	eb 0a                	jmp    c001332a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013320:	50                   	push   eax
c0013321:	6a 00                	push   0x0
c0013323:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013327:	50                   	push   eax
c0013328:	6a 00                	push   0x0
c001332a:	e8 44 fd ff ff       	call   c0013073 <CmGetMatch(char*, char*, bool, bool*)>
c001332f:	83 c4 10             	add    esp,0x10
c0013332:	83 f8 ff             	cmp    eax,0xffffffff
c0013335:	75 1a                	jne    c0013351 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013337:	83 ec 0c             	sub    esp,0xc
c001333a:	68 f9 22 02 c0       	push   0xc00222f9
c001333f:	e8 27 e1 ff ff       	call   c001146b <KePanic(char const*)>
c0013344:	83 c4 10             	add    esp,0x10
c0013347:	b8 02 00 00 00       	mov    eax,0x2
c001334c:	e9 bc 00 00 00       	jmp    c001340d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013351:	83 ff 18             	cmp    edi,0x18
c0013354:	75 1a                	jne    c0013370 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013356:	83 ec 0c             	sub    esp,0xc
c0013359:	68 0e 23 02 c0       	push   0xc002230e
c001335e:	e8 08 e1 ff ff       	call   c001146b <KePanic(char const*)>
c0013363:	83 c4 10             	add    esp,0x10
c0013366:	b8 01 00 00 00       	mov    eax,0x1
c001336b:	e9 9d 00 00 00       	jmp    c001340d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013370:	47                   	inc    edi
c0013371:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013376:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001337a:	74 02                	je     c001337e <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c001337c:	89 ee                	mov    esi,ebp
c001337e:	83 ec 0c             	sub    esp,0xc
c0013381:	53                   	push   ebx
c0013382:	e8 e9 d1 fe ff       	call   c0000570 <strlen>
c0013387:	83 c4 10             	add    esp,0x10
c001338a:	85 c0                	test   eax,eax
c001338c:	74 06                	je     c0013394 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001338e:	46                   	inc    esi
c001338f:	e9 40 ff ff ff       	jmp    c00132d4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013394:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001339c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00133a4:	31 f6                	xor    esi,esi
c00133a6:	50                   	push   eax
c00133a7:	31 ff                	xor    edi,edi
c00133a9:	6a 12                	push   0x12
c00133ab:	68 ee 00 00 00       	push   0xee
c00133b0:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00133b7:	e8 34 d1 fe ff       	call   c00004f0 <memset>
c00133bc:	83 c4 10             	add    esp,0x10
c00133bf:	83 fe 17             	cmp    esi,0x17
c00133c2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00133c6:	7e 26                	jle    c00133ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00133c8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133cc:	50                   	push   eax
c00133cd:	6a 08                	push   0x8
c00133cf:	55                   	push   ebp
c00133d0:	53                   	push   ebx
c00133d1:	e8 2e fd ff ff       	call   c0013104 <CmGetShift(unsigned int*, int*, int, bool*)>
c00133d6:	83 c4 10             	add    esp,0x10
c00133d9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133de:	74 26                	je     c0013406 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00133e0:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00133e7:	4e                   	dec    esi
c00133e8:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00133eb:	47                   	inc    edi
c00133ec:	eb 1c                	jmp    c001340a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00133ee:	6a 06                	push   0x6
c00133f0:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00133f5:	50                   	push   eax
c00133f6:	55                   	push   ebp
c00133f7:	53                   	push   ebx
c00133f8:	e8 d7 fc ff ff       	call   c00130d4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00133fd:	83 c4 10             	add    esp,0x10
c0013400:	84 c0                	test   al,al
c0013402:	75 06                	jne    c001340a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013404:	eb c2                	jmp    c00133c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0013406:	31 c0                	xor    eax,eax
c0013408:	eb 03                	jmp    c001340d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001340a:	46                   	inc    esi
c001340b:	eb b2                	jmp    c00133bf <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c001340d:	83 c4 6c             	add    esp,0x6c
c0013410:	5b                   	pop    ebx
c0013411:	5e                   	pop    esi
c0013412:	5f                   	pop    edi
c0013413:	5d                   	pop    ebp
c0013414:	c3                   	ret    

c0013415 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013415:	53                   	push   ebx
c0013416:	83 ec 3c             	sub    esp,0x3c
c0013419:	6a 2b                	push   0x2b
c001341b:	6a 00                	push   0x0
c001341d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013421:	53                   	push   ebx
c0013422:	e8 c9 d0 fe ff       	call   c00004f0 <memset>
c0013427:	58                   	pop    eax
c0013428:	5a                   	pop    edx
c0013429:	8d 44 24 11          	lea    eax,[esp+0x11]
c001342d:	50                   	push   eax
c001342e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013432:	e8 40 fe ff ff       	call   c0013277 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013437:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001343c:	83 c4 0c             	add    esp,0xc
c001343f:	6a 15                	push   0x15
c0013441:	6a 00                	push   0x0
c0013443:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013447:	50                   	push   eax
c0013448:	e8 a3 d0 fe ff       	call   c00004f0 <memset>
c001344d:	53                   	push   ebx
c001344e:	6a 00                	push   0x0
c0013450:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013454:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013458:	e8 e6 f9 ff ff       	call   c0012e43 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001345d:	83 c4 58             	add    esp,0x58
c0013460:	5b                   	pop    ebx
c0013461:	c3                   	ret    

c0013462 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013462:	56                   	push   esi
c0013463:	53                   	push   ebx
c0013464:	83 ec 48             	sub    esp,0x48
c0013467:	6a 12                	push   0x12
c0013469:	68 ff 00 00 00       	push   0xff
c001346e:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013472:	56                   	push   esi
c0013473:	e8 78 d0 fe ff       	call   c00004f0 <memset>
c0013478:	5a                   	pop    edx
c0013479:	59                   	pop    ecx
c001347a:	56                   	push   esi
c001347b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001347f:	e8 f3 fd ff ff       	call   c0013277 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013484:	83 c4 10             	add    esp,0x10
c0013487:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001348b:	85 db                	test   ebx,ebx
c001348d:	74 42                	je     c00134d1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001348f:	50                   	push   eax
c0013490:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013494:	50                   	push   eax
c0013495:	53                   	push   ebx
c0013496:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001349a:	e8 fa f6 ff ff       	call   c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001349f:	83 c4 0c             	add    esp,0xc
c00134a2:	6a 12                	push   0x12
c00134a4:	8d 44 24 21          	lea    eax,[esp+0x21]
c00134a8:	50                   	push   eax
c00134a9:	56                   	push   esi
c00134aa:	e8 d1 ce fe ff       	call   c0000380 <memcmp>
c00134af:	83 c4 10             	add    esp,0x10
c00134b2:	85 c0                	test   eax,eax
c00134b4:	74 1e                	je     c00134d4 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00134b6:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00134bb:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00134c0:	c1 e3 08             	shl    ebx,0x8
c00134c3:	09 d8                	or     eax,ebx
c00134c5:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00134ca:	c1 e3 10             	shl    ebx,0x10
c00134cd:	09 c3                	or     ebx,eax
c00134cf:	eb ba                	jmp    c001348b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00134d1:	83 cb ff             	or     ebx,0xffffffff
c00134d4:	89 d8                	mov    eax,ebx
c00134d6:	83 c4 44             	add    esp,0x44
c00134d9:	5b                   	pop    ebx
c00134da:	5e                   	pop    esi
c00134db:	c3                   	ret    

c00134dc <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00134dc:	57                   	push   edi
c00134dd:	56                   	push   esi
c00134de:	53                   	push   ebx
c00134df:	83 ec 34             	sub    esp,0x34
c00134e2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00134e6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00134ea:	6a 2b                	push   0x2b
c00134ec:	6a 00                	push   0x0
c00134ee:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00134f2:	53                   	push   ebx
c00134f3:	e8 f8 cf fe ff       	call   c00004f0 <memset>
c00134f8:	58                   	pop    eax
c00134f9:	5a                   	pop    edx
c00134fa:	8d 44 24 11          	lea    eax,[esp+0x11]
c00134fe:	50                   	push   eax
c00134ff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013503:	e8 6f fd ff ff       	call   c0013277 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013508:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001350c:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013510:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013514:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013518:	53                   	push   ebx
c0013519:	6a 00                	push   0x0
c001351b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001351f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013523:	e8 1b f9 ff ff       	call   c0012e43 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013528:	83 c4 50             	add    esp,0x50
c001352b:	5b                   	pop    ebx
c001352c:	5e                   	pop    esi
c001352d:	5f                   	pop    edi
c001352e:	c3                   	ret    

c001352f <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001352f:	55                   	push   ebp
c0013530:	57                   	push   edi
c0013531:	56                   	push   esi
c0013532:	53                   	push   ebx
c0013533:	83 ec 40             	sub    esp,0x40
c0013536:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001353a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001353e:	6a 2b                	push   0x2b
c0013540:	6a 00                	push   0x0
c0013542:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013546:	56                   	push   esi
c0013547:	e8 a4 cf fe ff       	call   c00004f0 <memset>
c001354c:	5f                   	pop    edi
c001354d:	89 ef                	mov    edi,ebp
c001354f:	58                   	pop    eax
c0013550:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013554:	50                   	push   eax
c0013555:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013559:	e8 19 fd ff ff       	call   c0013277 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001355e:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013563:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013568:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001356d:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013572:	83 c4 10             	add    esp,0x10
c0013575:	85 ed                	test   ebp,ebp
c0013577:	74 14                	je     c001358d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013579:	51                   	push   ecx
c001357a:	51                   	push   ecx
c001357b:	57                   	push   edi
c001357c:	53                   	push   ebx
c001357d:	e8 09 f7 ff ff       	call   c0012c8b <CmGetNext(Reghive_Tag*, int)>
c0013582:	83 c4 10             	add    esp,0x10
c0013585:	85 c0                	test   eax,eax
c0013587:	74 04                	je     c001358d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013589:	89 c7                	mov    edi,eax
c001358b:	eb e8                	jmp    c0013575 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001358d:	56                   	push   esi
c001358e:	6a 00                	push   0x0
c0013590:	57                   	push   edi
c0013591:	53                   	push   ebx
c0013592:	e8 ac f8 ff ff       	call   c0012e43 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013597:	83 c4 0c             	add    esp,0xc
c001359a:	89 c7                	mov    edi,eax
c001359c:	56                   	push   esi
c001359d:	50                   	push   eax
c001359e:	53                   	push   ebx
c001359f:	e8 f5 f5 ff ff       	call   c0012b99 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00135a4:	58                   	pop    eax
c00135a5:	5a                   	pop    edx
c00135a6:	6a 6c                	push   0x6c
c00135a8:	6a 00                	push   0x0
c00135aa:	6a 00                	push   0x0
c00135ac:	68 1f 23 02 c0       	push   0xc002231f
c00135b1:	57                   	push   edi
c00135b2:	53                   	push   ebx
c00135b3:	e8 24 ff ff ff       	call   c00134dc <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00135b8:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00135bc:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00135c0:	c1 e8 10             	shr    eax,0x10
c00135c3:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00135c7:	83 c4 1c             	add    esp,0x1c
c00135ca:	56                   	push   esi
c00135cb:	57                   	push   edi
c00135cc:	53                   	push   ebx
c00135cd:	e8 eb f6 ff ff       	call   c0012cbd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00135d2:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00135d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00135dc:	c1 e0 08             	shl    eax,0x8
c00135df:	09 c2                	or     edx,eax
c00135e1:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00135e6:	83 c4 4c             	add    esp,0x4c
c00135e9:	c1 e0 10             	shl    eax,0x10
c00135ec:	5b                   	pop    ebx
c00135ed:	09 d0                	or     eax,edx
c00135ef:	5e                   	pop    esi
c00135f0:	5f                   	pop    edi
c00135f1:	5d                   	pop    ebp
c00135f2:	c3                   	ret    

c00135f3 <zStrtok(char*, char const*)>:
c00135f3:	55                   	push   ebp
c00135f4:	57                   	push   edi
c00135f5:	56                   	push   esi
c00135f6:	53                   	push   ebx
c00135f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135ff:	85 db                	test   ebx,ebx
c0013601:	74 2f                	je     c0013632 <zStrtok(char*, char const*)+0x3f>
c0013603:	85 c0                	test   eax,eax
c0013605:	75 09                	jne    c0013610 <zStrtok(char*, char const*)+0x1d>
c0013607:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001360c:	85 c0                	test   eax,eax
c001360e:	74 50                	je     c0013660 <zStrtok(char*, char const*)+0x6d>
c0013610:	31 c9                	xor    ecx,ecx
c0013612:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013616:	74 03                	je     c001361b <zStrtok(char*, char const*)+0x28>
c0013618:	41                   	inc    ecx
c0013619:	eb f7                	jmp    c0013612 <zStrtok(char*, char const*)+0x1f>
c001361b:	31 d2                	xor    edx,edx
c001361d:	39 ca                	cmp    edx,ecx
c001361f:	74 15                	je     c0013636 <zStrtok(char*, char const*)+0x43>
c0013621:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013625:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013628:	8d 3c 10             	lea    edi,[eax+edx*1]
c001362b:	39 ee                	cmp    esi,ebp
c001362d:	74 13                	je     c0013642 <zStrtok(char*, char const*)+0x4f>
c001362f:	42                   	inc    edx
c0013630:	eb eb                	jmp    c001361d <zStrtok(char*, char const*)+0x2a>
c0013632:	31 c0                	xor    eax,eax
c0013634:	eb 2a                	jmp    c0013660 <zStrtok(char*, char const*)+0x6d>
c0013636:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c0013640:	eb 1e                	jmp    c0013660 <zStrtok(char*, char const*)+0x6d>
c0013642:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013645:	39 ce                	cmp    esi,ecx
c0013647:	75 0a                	jne    c0013653 <zStrtok(char*, char const*)+0x60>
c0013649:	40                   	inc    eax
c001364a:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001364f:	89 d8                	mov    eax,ebx
c0013651:	eb 0d                	jmp    c0013660 <zStrtok(char*, char const*)+0x6d>
c0013653:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013657:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001365a:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013660:	5b                   	pop    ebx
c0013661:	5e                   	pop    esi
c0013662:	5f                   	pop    edi
c0013663:	5d                   	pop    ebp
c0013664:	c3                   	ret    

c0013665 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013665:	57                   	push   edi
c0013666:	56                   	push   esi
c0013667:	53                   	push   ebx
c0013668:	81 ec 08 01 00 00    	sub    esp,0x108
c001366e:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013675:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001367c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013680:	53                   	push   ebx
c0013681:	e8 ba cf fe ff       	call   c0000640 <strcpy>
c0013686:	59                   	pop    ecx
c0013687:	5e                   	pop    esi
c0013688:	68 83 26 02 c0       	push   0xc0022683
c001368d:	53                   	push   ebx
c001368e:	bb 01 00 00 00       	mov    ebx,0x1
c0013693:	e8 5b ff ff ff       	call   c00135f3 <zStrtok(char*, char const*)>
c0013698:	83 c4 10             	add    esp,0x10
c001369b:	85 c0                	test   eax,eax
c001369d:	74 3b                	je     c00136da <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001369f:	52                   	push   edx
c00136a0:	50                   	push   eax
c00136a1:	6a 01                	push   0x1
c00136a3:	57                   	push   edi
c00136a4:	e8 b9 fd ff ff       	call   c0013462 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00136a9:	59                   	pop    ecx
c00136aa:	89 c3                	mov    ebx,eax
c00136ac:	5e                   	pop    esi
c00136ad:	68 83 26 02 c0       	push   0xc0022683
c00136b2:	6a 00                	push   0x0
c00136b4:	e8 3a ff ff ff       	call   c00135f3 <zStrtok(char*, char const*)>
c00136b9:	83 c4 10             	add    esp,0x10
c00136bc:	89 c6                	mov    esi,eax
c00136be:	85 c0                	test   eax,eax
c00136c0:	74 18                	je     c00136da <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00136c2:	52                   	push   edx
c00136c3:	52                   	push   edx
c00136c4:	53                   	push   ebx
c00136c5:	57                   	push   edi
c00136c6:	e8 81 f5 ff ff       	call   c0012c4c <CmEnterDirectory(Reghive_Tag*, int)>
c00136cb:	83 c4 10             	add    esp,0x10
c00136ce:	89 c3                	mov    ebx,eax
c00136d0:	83 f8 ff             	cmp    eax,0xffffffff
c00136d3:	74 05                	je     c00136da <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00136d5:	50                   	push   eax
c00136d6:	56                   	push   esi
c00136d7:	53                   	push   ebx
c00136d8:	eb c9                	jmp    c00136a3 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00136da:	81 c4 00 01 00 00    	add    esp,0x100
c00136e0:	89 d8                	mov    eax,ebx
c00136e2:	5b                   	pop    ebx
c00136e3:	5e                   	pop    esi
c00136e4:	5f                   	pop    edi
c00136e5:	c3                   	ret    

c00136e6 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00136e6:	55                   	push   ebp
c00136e7:	57                   	push   edi
c00136e8:	56                   	push   esi
c00136e9:	53                   	push   ebx
c00136ea:	83 ec 5c             	sub    esp,0x5c
c00136ed:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00136f1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00136f5:	85 db                	test   ebx,ebx
c00136f7:	0f 8e 84 00 00 00    	jle    c0013781 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00136fd:	31 ed                	xor    ebp,ebp
c00136ff:	57                   	push   edi
c0013700:	6a 32                	push   0x32
c0013702:	6a 00                	push   0x0
c0013704:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013708:	57                   	push   edi
c0013709:	e8 e2 cd fe ff       	call   c00004f0 <memset>
c001370e:	83 c4 0c             	add    esp,0xc
c0013711:	57                   	push   edi
c0013712:	53                   	push   ebx
c0013713:	56                   	push   esi
c0013714:	e8 30 fb ff ff       	call   c0013249 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001371d:	83 c4 10             	add    esp,0x10
c0013720:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013724:	7d 13                	jge    c0013739 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013726:	83 ec 0c             	sub    esp,0xc
c0013729:	45                   	inc    ebp
c001372a:	68 27 2a 02 c0       	push   0xc0022a27
c001372f:	e8 11 72 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013734:	83 c4 10             	add    esp,0x10
c0013737:	eb e7                	jmp    c0013720 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013739:	51                   	push   ecx
c001373a:	57                   	push   edi
c001373b:	53                   	push   ebx
c001373c:	68 25 23 02 c0       	push   0xc0022325
c0013741:	e8 ff 71 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013746:	83 c4 10             	add    esp,0x10
c0013749:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001374e:	75 1e                	jne    c001376e <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013750:	52                   	push   edx
c0013751:	52                   	push   edx
c0013752:	53                   	push   ebx
c0013753:	56                   	push   esi
c0013754:	e8 f3 f4 ff ff       	call   c0012c4c <CmEnterDirectory(Reghive_Tag*, int)>
c0013759:	83 c4 0c             	add    esp,0xc
c001375c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013760:	8d 51 04             	lea    edx,[ecx+0x4]
c0013763:	52                   	push   edx
c0013764:	50                   	push   eax
c0013765:	56                   	push   esi
c0013766:	e8 7b ff ff ff       	call   c00136e6 <CmDisplayTree(Reghive_Tag*, int, int)>
c001376b:	83 c4 10             	add    esp,0x10
c001376e:	50                   	push   eax
c001376f:	50                   	push   eax
c0013770:	53                   	push   ebx
c0013771:	56                   	push   esi
c0013772:	e8 14 f5 ff ff       	call   c0012c8b <CmGetNext(Reghive_Tag*, int)>
c0013777:	83 c4 10             	add    esp,0x10
c001377a:	89 c3                	mov    ebx,eax
c001377c:	e9 74 ff ff ff       	jmp    c00136f5 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013781:	83 c4 5c             	add    esp,0x5c
c0013784:	5b                   	pop    ebx
c0013785:	5e                   	pop    esi
c0013786:	5f                   	pop    edi
c0013787:	5d                   	pop    ebp
c0013788:	c3                   	ret    

c0013789 <CmSplitFinalSlashInPlace(char*)>:
c0013789:	53                   	push   ebx
c001378a:	83 ec 14             	sub    esp,0x14
c001378d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013791:	53                   	push   ebx
c0013792:	e8 d9 cd fe ff       	call   c0000570 <strlen>
c0013797:	83 c4 10             	add    esp,0x10
c001379a:	48                   	dec    eax
c001379b:	85 c0                	test   eax,eax
c001379d:	74 15                	je     c00137b4 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001379f:	8d 14 03             	lea    edx,[ebx+eax*1]
c00137a2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00137a6:	75 09                	jne    c00137b1 <CmSplitFinalSlashInPlace(char*)+0x28>
c00137a8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00137ab:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00137af:	eb 05                	jmp    c00137b6 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00137b1:	48                   	dec    eax
c00137b2:	eb e7                	jmp    c001379b <CmSplitFinalSlashInPlace(char*)+0x12>
c00137b4:	31 c0                	xor    eax,eax
c00137b6:	83 c4 08             	add    esp,0x8
c00137b9:	5b                   	pop    ebx
c00137ba:	c3                   	ret    

c00137bb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00137bb:	55                   	push   ebp
c00137bc:	57                   	push   edi
c00137bd:	56                   	push   esi
c00137be:	53                   	push   ebx
c00137bf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00137c5:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00137cc:	8a 13                	mov    dl,BYTE PTR [ebx]
c00137ce:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00137d1:	80 fa 40             	cmp    dl,0x40
c00137d4:	75 1c                	jne    c00137f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c00137d6:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c00137d9:	85 c9                	test   ecx,ecx
c00137db:	0f 84 09 01 00 00    	je     c00138ea <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00137e1:	8d 43 01             	lea    eax,[ebx+0x1]
c00137e4:	83 f9 3a             	cmp    ecx,0x3a
c00137e7:	74 04                	je     c00137ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c00137e9:	89 c3                	mov    ebx,eax
c00137eb:	eb e9                	jmp    c00137d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00137ed:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00137f0:	89 c3                	mov    ebx,eax
c00137f2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00137f6:	50                   	push   eax
c00137f7:	6a 40                	push   0x40
c00137f9:	6a 00                	push   0x0
c00137fb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00137ff:	50                   	push   eax
c0013800:	e8 eb cc fe ff       	call   c00004f0 <memset>
c0013805:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001380c:	31 c0                	xor    eax,eax
c001380e:	83 c4 10             	add    esp,0x10
c0013811:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013816:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013819:	89 d1                	mov    ecx,edx
c001381b:	85 d2                	test   edx,edx
c001381d:	0f 84 c7 00 00 00    	je     c00138ea <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013823:	3d c7 00 00 00       	cmp    eax,0xc7
c0013828:	0f 8f bc 00 00 00    	jg     c00138ea <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001382e:	83 fa 0a             	cmp    edx,0xa
c0013831:	0f 85 a4 00 00 00    	jne    c00138db <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013837:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001383c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013841:	89 c8                	mov    eax,ecx
c0013843:	a8 df                	test   al,0xdf
c0013845:	0f 94 c2             	sete   dl
c0013848:	83 f9 23             	cmp    ecx,0x23
c001384b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013850:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013854:	80 e2 01             	and    dl,0x1
c0013857:	75 4a                	jne    c00138a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013859:	83 e8 09             	sub    eax,0x9
c001385c:	3c 01                	cmp    al,0x1
c001385e:	76 43                	jbe    c00138a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013860:	83 f9 5b             	cmp    ecx,0x5b
c0013863:	75 42                	jne    c00138a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013865:	83 fe 40             	cmp    esi,0x40
c0013868:	75 39                	jne    c00138a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001386a:	83 ec 0c             	sub    esp,0xc
c001386d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013871:	52                   	push   edx
c0013872:	e8 f9 cc fe ff       	call   c0000570 <strlen>
c0013877:	83 c4 10             	add    esp,0x10
c001387a:	83 f8 3f             	cmp    eax,0x3f
c001387d:	77 6b                	ja     c00138ea <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001387f:	50                   	push   eax
c0013880:	50                   	push   eax
c0013881:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013885:	52                   	push   edx
c0013886:	8d 54 24 24          	lea    edx,[esp+0x24]
c001388a:	52                   	push   edx
c001388b:	e8 b0 cd fe ff       	call   c0000640 <strcpy>
c0013890:	58                   	pop    eax
c0013891:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013895:	52                   	push   edx
c0013896:	e8 d5 cc fe ff       	call   c0000570 <strlen>
c001389b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00138a0:	83 c4 10             	add    esp,0x10
c00138a3:	31 d2                	xor    edx,edx
c00138a5:	eb 3b                	jmp    c00138e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c00138a7:	83 fe 40             	cmp    esi,0x40
c00138aa:	74 06                	je     c00138b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c00138ac:	8d 44 24 58          	lea    eax,[esp+0x58]
c00138b0:	eb 20                	jmp    c00138d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c00138b2:	50                   	push   eax
c00138b3:	50                   	push   eax
c00138b4:	55                   	push   ebp
c00138b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00138b9:	50                   	push   eax
c00138ba:	e8 91 ce fe ff       	call   c0000750 <strcmp>
c00138bf:	83 c4 10             	add    esp,0x10
c00138c2:	85 c0                	test   eax,eax
c00138c4:	75 dd                	jne    c00138a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00138c6:	eb e4                	jmp    c00138ac <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00138c8:	8d 50 01             	lea    edx,[eax+0x1]
c00138cb:	83 f9 3d             	cmp    ecx,0x3d
c00138ce:	74 1e                	je     c00138ee <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c00138d0:	89 d0                	mov    eax,edx
c00138d2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00138d5:	85 c9                	test   ecx,ecx
c00138d7:	75 ef                	jne    c00138c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c00138d9:	eb 0f                	jmp    c00138ea <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00138db:	8d 50 01             	lea    edx,[eax+0x1]
c00138de:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00138e2:	47                   	inc    edi
c00138e3:	89 d0                	mov    eax,edx
c00138e5:	e9 2c ff ff ff       	jmp    c0013816 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c00138ea:	31 c0                	xor    eax,eax
c00138ec:	eb 33                	jmp    c0013921 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c00138ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00138f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00138f5:	50                   	push   eax
c00138f6:	50                   	push   eax
c00138f7:	8d 44 24 60          	lea    eax,[esp+0x60]
c00138fb:	50                   	push   eax
c00138fc:	53                   	push   ebx
c00138fd:	e8 4e ce fe ff       	call   c0000750 <strcmp>
c0013902:	83 c4 10             	add    esp,0x10
c0013905:	85 c0                	test   eax,eax
c0013907:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001390b:	75 96                	jne    c00138a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001390d:	51                   	push   ecx
c001390e:	51                   	push   ecx
c001390f:	52                   	push   edx
c0013910:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013917:	e8 24 cd fe ff       	call   c0000640 <strcpy>
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	b0 01                	mov    al,0x1
c0013921:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013927:	5b                   	pop    ebx
c0013928:	5e                   	pop    esi
c0013929:	5f                   	pop    edi
c001392a:	5d                   	pop    ebp
c001392b:	c3                   	ret    

c001392c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001392c:	57                   	push   edi
c001392d:	56                   	push   esi
c001392e:	53                   	push   ebx
c001392f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013935:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001393c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013943:	53                   	push   ebx
c0013944:	e8 27 cc fe ff       	call   c0000570 <strlen>
c0013949:	89 34 24             	mov    DWORD PTR [esp],esi
c001394c:	89 c7                	mov    edi,eax
c001394e:	e8 1d cc fe ff       	call   c0000570 <strlen>
c0013953:	83 c4 10             	add    esp,0x10
c0013956:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001395a:	3d ff 00 00 00       	cmp    eax,0xff
c001395f:	0f 87 d3 00 00 00    	ja     c0013a38 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013965:	57                   	push   edi
c0013966:	57                   	push   edi
c0013967:	56                   	push   esi
c0013968:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001396c:	56                   	push   esi
c001396d:	e8 ce cc fe ff       	call   c0000640 <strcpy>
c0013972:	58                   	pop    eax
c0013973:	5a                   	pop    edx
c0013974:	68 83 26 02 c0       	push   0xc0022683
c0013979:	56                   	push   esi
c001397a:	e8 c1 ce fe ff       	call   c0000840 <strcat>
c001397f:	59                   	pop    ecx
c0013980:	5f                   	pop    edi
c0013981:	53                   	push   ebx
c0013982:	56                   	push   esi
c0013983:	e8 b8 ce fe ff       	call   c0000840 <strcat>
c0013988:	58                   	pop    eax
c0013989:	5a                   	pop    edx
c001398a:	68 2f 23 02 c0       	push   0xc002232f
c001398f:	56                   	push   esi
c0013990:	e8 ab ce fe ff       	call   c0000840 <strcat>
c0013995:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001399c:	e8 15 41 ff ff       	call   c0007ab6 <malloc>
c00139a1:	83 c4 0c             	add    esp,0xc
c00139a4:	89 c3                	mov    ebx,eax
c00139a6:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00139ac:	56                   	push   esi
c00139ad:	50                   	push   eax
c00139ae:	e8 e7 7f ff ff       	call   c000b99a <File::File(char const*, Process*)>
c00139b3:	83 c4 10             	add    esp,0x10
c00139b6:	85 db                	test   ebx,ebx
c00139b8:	74 7e                	je     c0013a38 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00139ba:	51                   	push   ecx
c00139bb:	51                   	push   ecx
c00139bc:	6a 01                	push   0x1
c00139be:	53                   	push   ebx
c00139bf:	e8 f4 7f ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c00139c4:	83 c4 10             	add    esp,0x10
c00139c7:	85 c0                	test   eax,eax
c00139c9:	74 08                	je     c00139d3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00139cb:	83 ec 0c             	sub    esp,0xc
c00139ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139d0:	53                   	push   ebx
c00139d1:	eb 5f                	jmp    c0013a32 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00139d3:	52                   	push   edx
c00139d4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00139d8:	50                   	push   eax
c00139d9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00139dd:	50                   	push   eax
c00139de:	53                   	push   ebx
c00139df:	e8 d6 82 ff ff       	call   c000bcba <File::stat(unsigned long long*, bool*)>
c00139e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	89 c1                	mov    ecx,eax
c00139ed:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00139f1:	74 31                	je     c0013a24 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00139f3:	83 ec 0c             	sub    esp,0xc
c00139f6:	50                   	push   eax
c00139f7:	e8 ba 40 ff ff       	call   c0007ab6 <malloc>
c00139fc:	89 c6                	mov    esi,eax
c00139fe:	58                   	pop    eax
c00139ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a01:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013a05:	52                   	push   edx
c0013a06:	56                   	push   esi
c0013a07:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013a0b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013a0f:	53                   	push   ebx
c0013a10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a13:	83 c4 20             	add    esp,0x20
c0013a16:	85 c0                	test   eax,eax
c0013a18:	75 0a                	jne    c0013a24 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013a1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a1e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013a22:	74 18                	je     c0013a3c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013a24:	83 ec 0c             	sub    esp,0xc
c0013a27:	53                   	push   ebx
c0013a28:	e8 e9 7f ff ff       	call   c000ba16 <File::close()>
c0013a2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a35:	83 c4 10             	add    esp,0x10
c0013a38:	31 c0                	xor    eax,eax
c0013a3a:	eb 3b                	jmp    c0013a77 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013a3c:	83 ec 0c             	sub    esp,0xc
c0013a3f:	53                   	push   ebx
c0013a40:	e8 d1 7f ff ff       	call   c000ba16 <File::close()>
c0013a45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a4a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a4d:	83 c4 0c             	add    esp,0xc
c0013a50:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013a57:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013a5e:	56                   	push   esi
c0013a5f:	e8 57 fd ff ff       	call   c00137bb <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013a64:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a67:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013a6b:	e8 56 40 ff ff       	call   c0007ac6 <free>
c0013a70:	83 c4 10             	add    esp,0x10
c0013a73:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013a77:	81 c4 20 01 00 00    	add    esp,0x120
c0013a7d:	5b                   	pop    ebx
c0013a7e:	5e                   	pop    esi
c0013a7f:	5f                   	pop    edi
c0013a80:	c3                   	ret    

c0013a81 <Reg::getLine(char*, char*, char*)>:
c0013a81:	57                   	push   edi
c0013a82:	56                   	push   esi
c0013a83:	53                   	push   ebx
c0013a84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a8c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a90:	57                   	push   edi
c0013a91:	56                   	push   esi
c0013a92:	53                   	push   ebx
c0013a93:	68 34 23 02 c0       	push   0xc0022334
c0013a98:	e8 8f fe ff ff       	call   c001392c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013a9d:	83 c4 10             	add    esp,0x10
c0013aa0:	84 c0                	test   al,al
c0013aa2:	75 10                	jne    c0013ab4 <Reg::getLine(char*, char*, char*)+0x33>
c0013aa4:	57                   	push   edi
c0013aa5:	56                   	push   esi
c0013aa6:	53                   	push   ebx
c0013aa7:	68 59 23 02 c0       	push   0xc0022359
c0013aac:	e8 7b fe ff ff       	call   c001392c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013ab1:	83 c4 10             	add    esp,0x10
c0013ab4:	5b                   	pop    ebx
c0013ab5:	5e                   	pop    esi
c0013ab6:	5f                   	pop    edi
c0013ab7:	c3                   	ret    

c0013ab8 <Reg::readInt(char*, char*, int*)>:
c0013ab8:	55                   	push   ebp
c0013ab9:	57                   	push   edi
c0013aba:	56                   	push   esi
c0013abb:	53                   	push   ebx
c0013abc:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013ac2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013ac6:	55                   	push   ebp
c0013ac7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013ace:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013ad5:	e8 a7 ff ff ff       	call   c0013a81 <Reg::getLine(char*, char*, char*)>
c0013ada:	83 c4 10             	add    esp,0x10
c0013add:	84 c0                	test   al,al
c0013adf:	0f 84 b6 00 00 00    	je     c0013b9b <Reg::readInt(char*, char*, int*)+0xe3>
c0013ae5:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013aea:	83 fa 2b             	cmp    edx,0x2b
c0013aed:	74 0c                	je     c0013afb <Reg::readInt(char*, char*, int*)+0x43>
c0013aef:	83 fa 2d             	cmp    edx,0x2d
c0013af2:	75 0e                	jne    c0013b02 <Reg::readInt(char*, char*, int*)+0x4a>
c0013af4:	ba 01 00 00 00       	mov    edx,0x1
c0013af9:	eb 0b                	jmp    c0013b06 <Reg::readInt(char*, char*, int*)+0x4e>
c0013afb:	ba 01 00 00 00       	mov    edx,0x1
c0013b00:	eb 02                	jmp    c0013b04 <Reg::readInt(char*, char*, int*)+0x4c>
c0013b02:	31 d2                	xor    edx,edx
c0013b04:	31 c0                	xor    eax,eax
c0013b06:	be 0a 00 00 00       	mov    esi,0xa
c0013b0b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013b10:	75 21                	jne    c0013b33 <Reg::readInt(char*, char*, int*)+0x7b>
c0013b12:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013b17:	83 f9 78             	cmp    ecx,0x78
c0013b1a:	75 0a                	jne    c0013b26 <Reg::readInt(char*, char*, int*)+0x6e>
c0013b1c:	83 c2 02             	add    edx,0x2
c0013b1f:	be 10 00 00 00       	mov    esi,0x10
c0013b24:	eb 0d                	jmp    c0013b33 <Reg::readInt(char*, char*, int*)+0x7b>
c0013b26:	83 f9 62             	cmp    ecx,0x62
c0013b29:	75 08                	jne    c0013b33 <Reg::readInt(char*, char*, int*)+0x7b>
c0013b2b:	83 c2 02             	add    edx,0x2
c0013b2e:	be 02 00 00 00       	mov    esi,0x2
c0013b33:	01 d5                	add    ebp,edx
c0013b35:	31 d2                	xor    edx,edx
c0013b37:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013b3b:	83 f9 0d             	cmp    ecx,0xd
c0013b3e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013b42:	0f 94 c3             	sete   bl
c0013b45:	85 c9                	test   ecx,ecx
c0013b47:	89 df                	mov    edi,ebx
c0013b49:	0f 94 c3             	sete   bl
c0013b4c:	09 df                	or     edi,ebx
c0013b4e:	89 fb                	mov    ebx,edi
c0013b50:	83 e7 01             	and    edi,0x1
c0013b53:	75 35                	jne    c0013b8a <Reg::readInt(char*, char*, int*)+0xd2>
c0013b55:	0f af d6             	imul   edx,esi
c0013b58:	83 fe 10             	cmp    esi,0x10
c0013b5b:	75 26                	jne    c0013b83 <Reg::readInt(char*, char*, int*)+0xcb>
c0013b5d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013b61:	83 ef 41             	sub    edi,0x41
c0013b64:	89 fb                	mov    ebx,edi
c0013b66:	80 fb 05             	cmp    bl,0x5
c0013b69:	77 06                	ja     c0013b71 <Reg::readInt(char*, char*, int*)+0xb9>
c0013b6b:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013b6f:	eb 16                	jmp    c0013b87 <Reg::readInt(char*, char*, int*)+0xcf>
c0013b71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013b75:	83 eb 61             	sub    ebx,0x61
c0013b78:	80 fb 05             	cmp    bl,0x5
c0013b7b:	77 06                	ja     c0013b83 <Reg::readInt(char*, char*, int*)+0xcb>
c0013b7d:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013b81:	eb 04                	jmp    c0013b87 <Reg::readInt(char*, char*, int*)+0xcf>
c0013b83:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013b87:	45                   	inc    ebp
c0013b88:	eb ad                	jmp    c0013b37 <Reg::readInt(char*, char*, int*)+0x7f>
c0013b8a:	84 c0                	test   al,al
c0013b8c:	74 02                	je     c0013b90 <Reg::readInt(char*, char*, int*)+0xd8>
c0013b8e:	f7 da                	neg    edx
c0013b90:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013b97:	89 10                	mov    DWORD PTR [eax],edx
c0013b99:	88 d8                	mov    al,bl
c0013b9b:	81 c4 ec 00 00 00    	add    esp,0xec
c0013ba1:	5b                   	pop    ebx
c0013ba2:	5e                   	pop    esi
c0013ba3:	5f                   	pop    edi
c0013ba4:	5d                   	pop    ebp
c0013ba5:	c3                   	ret    

c0013ba6 <Reg::readString(char*, char*, char*, int)>:
c0013ba6:	57                   	push   edi
c0013ba7:	56                   	push   esi
c0013ba8:	53                   	push   ebx
c0013ba9:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013baf:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013bb6:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013bba:	57                   	push   edi
c0013bbb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013bc2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013bc9:	e8 b3 fe ff ff       	call   c0013a81 <Reg::getLine(char*, char*, char*)>
c0013bce:	83 c4 10             	add    esp,0x10
c0013bd1:	89 c6                	mov    esi,eax
c0013bd3:	84 c0                	test   al,al
c0013bd5:	74 44                	je     c0013c1b <Reg::readString(char*, char*, char*, int)+0x75>
c0013bd7:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013bde:	31 c0                	xor    eax,eax
c0013be0:	4a                   	dec    edx
c0013be1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013be4:	84 c9                	test   cl,cl
c0013be6:	74 0f                	je     c0013bf7 <Reg::readString(char*, char*, char*, int)+0x51>
c0013be8:	39 c2                	cmp    edx,eax
c0013bea:	7e 0b                	jle    c0013bf7 <Reg::readString(char*, char*, char*, int)+0x51>
c0013bec:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013bef:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013bf4:	40                   	inc    eax
c0013bf5:	eb ea                	jmp    c0013be1 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013bf7:	83 ec 0c             	sub    esp,0xc
c0013bfa:	53                   	push   ebx
c0013bfb:	e8 70 c9 fe ff       	call   c0000570 <strlen>
c0013c00:	83 c4 10             	add    esp,0x10
c0013c03:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013c08:	75 11                	jne    c0013c1b <Reg::readString(char*, char*, char*, int)+0x75>
c0013c0a:	83 ec 0c             	sub    esp,0xc
c0013c0d:	53                   	push   ebx
c0013c0e:	e8 5d c9 fe ff       	call   c0000570 <strlen>
c0013c13:	83 c4 10             	add    esp,0x10
c0013c16:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013c1b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013c21:	89 f0                	mov    eax,esi
c0013c23:	5b                   	pop    ebx
c0013c24:	5e                   	pop    esi
c0013c25:	5f                   	pop    edi
c0013c26:	c3                   	ret    

c0013c27 <Reg::readBool(char*, char*, bool*)>:
c0013c27:	83 ec 20             	sub    esp,0x20
c0013c2a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013c2e:	50                   	push   eax
c0013c2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c37:	e8 7c fe ff ff       	call   c0013ab8 <Reg::readInt(char*, char*, int*)>
c0013c3c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013c41:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013c45:	0f 95 02             	setne  BYTE PTR [edx]
c0013c48:	83 c4 2c             	add    esp,0x2c
c0013c4b:	c3                   	ret    

c0013c4c <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013c4c:	53                   	push   ebx
c0013c4d:	83 ec 1c             	sub    esp,0x1c
c0013c50:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013c54:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013c58:	50                   	push   eax
c0013c59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c61:	e8 c1 ff ff ff       	call   c0013c27 <Reg::readBool(char*, char*, bool*)>
c0013c66:	83 c4 10             	add    esp,0x10
c0013c69:	84 c0                	test   al,al
c0013c6b:	74 04                	je     c0013c71 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013c6d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013c71:	88 d8                	mov    al,bl
c0013c73:	83 c4 18             	add    esp,0x18
c0013c76:	5b                   	pop    ebx
c0013c77:	c3                   	ret    

c0013c78 <Reg::readIntWithDefault(char*, char*, int)>:
c0013c78:	53                   	push   ebx
c0013c79:	83 ec 1c             	sub    esp,0x1c
c0013c7c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013c80:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013c84:	50                   	push   eax
c0013c85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c8d:	e8 26 fe ff ff       	call   c0013ab8 <Reg::readInt(char*, char*, int*)>
c0013c92:	83 c4 10             	add    esp,0x10
c0013c95:	84 c0                	test   al,al
c0013c97:	74 04                	je     c0013c9d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013c99:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013c9d:	89 d8                	mov    eax,ebx
c0013c9f:	83 c4 18             	add    esp,0x18
c0013ca2:	5b                   	pop    ebx
c0013ca3:	c3                   	ret    

c0013ca4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013ca4:	57                   	push   edi
c0013ca5:	56                   	push   esi
c0013ca6:	56                   	push   esi
c0013ca7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013cab:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013caf:	56                   	push   esi
c0013cb0:	57                   	push   edi
c0013cb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb9:	e8 e8 fe ff ff       	call   c0013ba6 <Reg::readString(char*, char*, char*, int)>
c0013cbe:	83 c4 10             	add    esp,0x10
c0013cc1:	84 c0                	test   al,al
c0013cc3:	75 1a                	jne    c0013cdf <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013cc5:	51                   	push   ecx
c0013cc6:	56                   	push   esi
c0013cc7:	6a 00                	push   0x0
c0013cc9:	57                   	push   edi
c0013cca:	e8 21 c8 fe ff       	call   c00004f0 <memset>
c0013ccf:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013cd2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013cd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013cd8:	83 c4 10             	add    esp,0x10
c0013cdb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013cdf:	89 f8                	mov    eax,edi
c0013ce1:	5a                   	pop    edx
c0013ce2:	5e                   	pop    esi
c0013ce3:	5f                   	pop    edi
c0013ce4:	c3                   	ret    

c0013ce5 <SysEject(regs*)>:
c0013ce5:	83 ec 0c             	sub    esp,0xc
c0013ce8:	83 ca ff             	or     edx,0xffffffff
c0013ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cef:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013cf2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013cf7:	83 e9 41             	sub    ecx,0x41
c0013cfa:	83 f9 19             	cmp    ecx,0x19
c0013cfd:	77 18                	ja     c0013d17 <SysEject(regs*)+0x32>
c0013cff:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013d06:	85 c9                	test   ecx,ecx
c0013d08:	74 0d                	je     c0013d17 <SysEject(regs*)+0x32>
c0013d0a:	83 ec 0c             	sub    esp,0xc
c0013d0d:	51                   	push   ecx
c0013d0e:	e8 77 9e ff ff       	call   c000db8a <LogicalDisk::eject()>
c0013d13:	83 c4 10             	add    esp,0x10
c0013d16:	99                   	cdq    
c0013d17:	83 c4 0c             	add    esp,0xc
c0013d1a:	c3                   	ret    

c0013d1b <SysExit(regs*)>:
c0013d1b:	83 ec 18             	sub    esp,0x18
c0013d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d22:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d25:	e8 46 2b 00 00       	call   c0016870 <terminateTask(int)>
c0013d2a:	83 c8 ff             	or     eax,0xffffffff
c0013d2d:	83 c4 1c             	add    esp,0x1c
c0013d30:	89 c2                	mov    edx,eax
c0013d32:	c3                   	ret    

c0013d33 <SysGetCwd(regs*)>:
c0013d33:	83 ec 10             	sub    esp,0x10
c0013d36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d3a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013d3d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d45:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013d48:	e8 11 79 ff ff       	call   c000b65e <Fs::getcwd(Process*, char*, int)>
c0013d4d:	83 c4 1c             	add    esp,0x1c
c0013d50:	99                   	cdq    
c0013d51:	c3                   	ret    

c0013d52 <SysGetPID(regs*)>:
c0013d52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d57:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d5c:	99                   	cdq    
c0013d5d:	c3                   	ret    

c0013d5e <SysGetRAMData(regs*)>:
c0013d5e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013d64:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013d6e:	99                   	cdq    
c0013d6f:	f7 f9                	idiv   ecx
c0013d71:	c1 e0 18             	shl    eax,0x18
c0013d74:	09 c8                	or     eax,ecx
c0013d76:	99                   	cdq    
c0013d77:	c3                   	ret    

c0013d78 <SysGetVGAPtr(regs*)>:
c0013d78:	55                   	push   ebp
c0013d79:	57                   	push   edi
c0013d7a:	56                   	push   esi
c0013d7b:	53                   	push   ebx
c0013d7c:	83 ec 18             	sub    esp,0x18
c0013d7f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013d83:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d86:	e8 b1 25 00 00       	call   c001633c <Thr::processFromPID(int)>
c0013d8b:	83 c4 10             	add    esp,0x10
c0013d8e:	89 c1                	mov    ecx,eax
c0013d90:	b8 01 00 00 00       	mov    eax,0x1
c0013d95:	85 c9                	test   ecx,ecx
c0013d97:	74 57                	je     c0013df0 <SysGetVGAPtr(regs*)+0x78>
c0013d99:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013d9f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013da3:	74 0c                	je     c0013db1 <SysGetVGAPtr(regs*)+0x39>
c0013da5:	83 ec 0c             	sub    esp,0xc
c0013da8:	55                   	push   ebp
c0013da9:	e8 ab 49 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013dae:	83 c4 10             	add    esp,0x10
c0013db1:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013db4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013db7:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013dbc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013dbe:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013dc1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013dc4:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013dca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013dcd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013dd0:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013dd6:	50                   	push   eax
c0013dd7:	50                   	push   eax
c0013dd8:	68 74 23 02 c0       	push   0xc0022374
c0013ddd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013de0:	05 a8 0f 00 00       	add    eax,0xfa8
c0013de5:	50                   	push   eax
c0013de6:	e8 55 c8 fe ff       	call   c0000640 <strcpy>
c0013deb:	83 c4 10             	add    esp,0x10
c0013dee:	31 c0                	xor    eax,eax
c0013df0:	83 c4 0c             	add    esp,0xc
c0013df3:	31 d2                	xor    edx,edx
c0013df5:	5b                   	pop    ebx
c0013df6:	5e                   	pop    esi
c0013df7:	5f                   	pop    edi
c0013df8:	5d                   	pop    ebp
c0013df9:	c3                   	ret    
c0013dfa:	66 90                	xchg   ax,ax

c0013dfc <SysKill(regs*)>:
c0013dfc:	53                   	push   ebx
c0013dfd:	83 ec 08             	sub    esp,0x8
c0013e00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e04:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013e08:	75 16                	jne    c0013e20 <SysKill(regs*)+0x24>
c0013e0a:	83 ec 0c             	sub    esp,0xc
c0013e0d:	68 7e 23 02 c0       	push   0xc002237e
c0013e12:	e8 54 d6 ff ff       	call   c001146b <KePanic(char const*)>
c0013e17:	83 c4 10             	add    esp,0x10
c0013e1a:	e9 89 00 00 00       	jmp    c0013ea8 <SysKill(regs*)+0xac>
c0013e1f:	90                   	nop
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013e28:	e8 ff bc 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0013e30:	83 c4 10             	add    esp,0x10
c0013e33:	85 c0                	test   eax,eax
c0013e35:	74 19                	je     c0013e50 <SysKill(regs*)+0x54>
c0013e37:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013e3a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013e3d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013e3f:	74 33                	je     c0013e74 <SysKill(regs*)+0x78>
c0013e41:	52                   	push   edx
c0013e42:	52                   	push   edx
c0013e43:	50                   	push   eax
c0013e44:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013e49:	e8 fe bf 00 00       	call   c001fe4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013e4e:	eb e0                	jmp    c0013e30 <SysKill(regs*)+0x34>
c0013e50:	83 ec 0c             	sub    esp,0xc
c0013e53:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013e58:	e8 cf bc 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013e60:	83 c4 10             	add    esp,0x10
c0013e63:	85 c0                	test   eax,eax
c0013e65:	74 41                	je     c0013ea8 <SysKill(regs*)+0xac>
c0013e67:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013e6a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013e6d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013e6f:	75 27                	jne    c0013e98 <SysKill(regs*)+0x9c>
c0013e71:	8d 76 00             	lea    esi,[esi+0x0]
c0013e74:	51                   	push   ecx
c0013e75:	51                   	push   ecx
c0013e76:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e81:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013e87:	e8 82 da ff ff       	call   c001190e <KeRaiseSignal(SigHandlerBlock*, int)>
c0013e8c:	83 c4 10             	add    esp,0x10
c0013e8f:	31 c0                	xor    eax,eax
c0013e91:	31 d2                	xor    edx,edx
c0013e93:	eb 1b                	jmp    c0013eb0 <SysKill(regs*)+0xb4>
c0013e95:	8d 76 00             	lea    esi,[esi+0x0]
c0013e98:	52                   	push   edx
c0013e99:	52                   	push   edx
c0013e9a:	50                   	push   eax
c0013e9b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013ea0:	e8 a7 bf 00 00       	call   c001fe4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ea5:	eb b9                	jmp    c0013e60 <SysKill(regs*)+0x64>
c0013ea7:	90                   	nop
c0013ea8:	83 c8 ff             	or     eax,0xffffffff
c0013eab:	89 c2                	mov    edx,eax
c0013ead:	8d 76 00             	lea    esi,[esi+0x0]
c0013eb0:	83 c4 08             	add    esp,0x8
c0013eb3:	5b                   	pop    ebx
c0013eb4:	c3                   	ret    

c0013eb5 <SysLoadDLL(regs*)>:
c0013eb5:	56                   	push   esi
c0013eb6:	53                   	push   ebx
c0013eb7:	31 d2                	xor    edx,edx
c0013eb9:	51                   	push   ecx
c0013eba:	b8 01 00 00 00       	mov    eax,0x1
c0013ebf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ec3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013ec7:	0f 84 8c 00 00 00    	je     c0013f59 <SysLoadDLL(regs*)+0xa4>
c0013ecd:	83 ec 0c             	sub    esp,0xc
c0013ed0:	68 14 01 00 00       	push   0x114
c0013ed5:	e8 dc 3b ff ff       	call   c0007ab6 <malloc>
c0013eda:	83 c4 0c             	add    esp,0xc
c0013edd:	89 c3                	mov    ebx,eax
c0013edf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ee4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013ee7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013eea:	53                   	push   ebx
c0013eeb:	e8 aa 7a ff ff       	call   c000b99a <File::File(char const*, Process*)>
c0013ef0:	83 c4 10             	add    esp,0x10
c0013ef3:	31 d2                	xor    edx,edx
c0013ef5:	b8 02 00 00 00       	mov    eax,0x2
c0013efa:	85 db                	test   ebx,ebx
c0013efc:	74 5b                	je     c0013f59 <SysLoadDLL(regs*)+0xa4>
c0013efe:	83 ec 0c             	sub    esp,0xc
c0013f01:	53                   	push   ebx
c0013f02:	e8 75 7d ff ff       	call   c000bc7c <File::exists()>
c0013f07:	83 c4 10             	add    esp,0x10
c0013f0a:	84 c0                	test   al,al
c0013f0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f0e:	75 11                	jne    c0013f21 <SysLoadDLL(regs*)+0x6c>
c0013f10:	83 ec 0c             	sub    esp,0xc
c0013f13:	53                   	push   ebx
c0013f14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f17:	83 c4 10             	add    esp,0x10
c0013f1a:	b8 03 00 00 00       	mov    eax,0x3
c0013f1f:	eb 36                	jmp    c0013f57 <SysLoadDLL(regs*)+0xa2>
c0013f21:	83 ec 0c             	sub    esp,0xc
c0013f24:	53                   	push   ebx
c0013f25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f28:	58                   	pop    eax
c0013f29:	5a                   	pop    edx
c0013f2a:	6a 00                	push   0x0
c0013f2c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013f2f:	e8 3b 15 00 00       	call   c001546f <Thr::loadDLL(char const*, bool)>
c0013f34:	83 c4 10             	add    esp,0x10
c0013f37:	89 c1                	mov    ecx,eax
c0013f39:	31 d2                	xor    edx,edx
c0013f3b:	b8 04 00 00 00       	mov    eax,0x4
c0013f40:	85 c9                	test   ecx,ecx
c0013f42:	74 15                	je     c0013f59 <SysLoadDLL(regs*)+0xa4>
c0013f44:	53                   	push   ebx
c0013f45:	53                   	push   ebx
c0013f46:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0013f4c:	51                   	push   ecx
c0013f4d:	e8 4e 17 00 00       	call   c00156a0 <Thr::executeDLL(unsigned long, void*)>
c0013f52:	83 c4 10             	add    esp,0x10
c0013f55:	31 c0                	xor    eax,eax
c0013f57:	31 d2                	xor    edx,edx
c0013f59:	59                   	pop    ecx
c0013f5a:	5b                   	pop    ebx
c0013f5b:	5e                   	pop    esi
c0013f5c:	c3                   	ret    

c0013f5d <SysRead(regs*)>:
c0013f5d:	57                   	push   edi
c0013f5e:	56                   	push   esi
c0013f5f:	53                   	push   ebx
c0013f60:	83 ec 10             	sub    esp,0x10
c0013f63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013f67:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f6a:	83 f8 02             	cmp    eax,0x2
c0013f6d:	77 10                	ja     c0013f7f <SysRead(regs*)+0x22>
c0013f6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f77:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013f7d:	eb 0e                	jmp    c0013f8d <SysRead(regs*)+0x30>
c0013f7f:	83 ec 0c             	sub    esp,0xc
c0013f82:	50                   	push   eax
c0013f83:	e8 2b 55 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013f88:	83 c4 10             	add    esp,0x10
c0013f8b:	89 c1                	mov    ecx,eax
c0013f8d:	83 c8 ff             	or     eax,0xffffffff
c0013f90:	85 c9                	test   ecx,ecx
c0013f92:	89 c2                	mov    edx,eax
c0013f94:	74 28                	je     c0013fbe <SysRead(regs*)+0x61>
c0013f96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013f9e:	31 ff                	xor    edi,edi
c0013fa0:	83 ec 0c             	sub    esp,0xc
c0013fa3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013fa5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013fa9:	52                   	push   edx
c0013faa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013fad:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013fb0:	57                   	push   edi
c0013fb1:	56                   	push   esi
c0013fb2:	51                   	push   ecx
c0013fb3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013fba:	83 c4 20             	add    esp,0x20
c0013fbd:	99                   	cdq    
c0013fbe:	83 c4 10             	add    esp,0x10
c0013fc1:	5b                   	pop    ebx
c0013fc2:	5e                   	pop    esi
c0013fc3:	5f                   	pop    edi
c0013fc4:	c3                   	ret    

c0013fc5 <SysRegisterSignal(regs*)>:
c0013fc5:	83 ec 18             	sub    esp,0x18
c0013fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fcc:	6a 00                	push   0x0
c0013fce:	6a 00                	push   0x0
c0013fd0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013fd3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fdb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fde:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013fe4:	e8 ef d8 ff ff       	call   c00118d8 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013fe9:	83 c4 2c             	add    esp,0x2c
c0013fec:	99                   	cdq    
c0013fed:	c3                   	ret    

c0013fee <SysRegistryGetTypeFromPath(regs*)>:
c0013fee:	57                   	push   edi
c0013fef:	56                   	push   esi
c0013ff0:	53                   	push   ebx
c0013ff1:	81 ec 38 01 00 00    	sub    esp,0x138
c0013ff7:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013ffe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014001:	68 9f 23 02 c0       	push   0xc002239f
c0014006:	e8 3a 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001400b:	5a                   	pop    edx
c001400c:	59                   	pop    ecx
c001400d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014010:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014013:	e8 4d f6 ff ff       	call   c0013665 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014018:	5f                   	pop    edi
c0014019:	89 c6                	mov    esi,eax
c001401b:	5a                   	pop    edx
c001401c:	50                   	push   eax
c001401d:	68 bf 23 02 c0       	push   0xc00223bf
c0014022:	e8 1e 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014027:	83 c4 10             	add    esp,0x10
c001402a:	85 f6                	test   esi,esi
c001402c:	74 28                	je     c0014056 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001402e:	50                   	push   eax
c001402f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014033:	57                   	push   edi
c0014034:	56                   	push   esi
c0014035:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014038:	e8 0c f2 ff ff       	call   c0013249 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001403d:	83 c4 0c             	add    esp,0xc
c0014040:	89 c3                	mov    ebx,eax
c0014042:	57                   	push   edi
c0014043:	50                   	push   eax
c0014044:	68 c7 23 02 c0       	push   0xc00223c7
c0014049:	e8 f7 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001404e:	89 d8                	mov    eax,ebx
c0014050:	83 c4 10             	add    esp,0x10
c0014053:	99                   	cdq    
c0014054:	eb 05                	jmp    c001405b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0014056:	83 c8 ff             	or     eax,0xffffffff
c0014059:	89 c2                	mov    edx,eax
c001405b:	81 c4 30 01 00 00    	add    esp,0x130
c0014061:	5b                   	pop    ebx
c0014062:	5e                   	pop    esi
c0014063:	5f                   	pop    edi
c0014064:	c3                   	ret    

c0014065 <SysRegistryReadExtent(regs*)>:
c0014065:	83 ec 1c             	sub    esp,0x1c
c0014068:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001406c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001406f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014072:	85 c0                	test   eax,eax
c0014074:	79 1f                	jns    c0014095 <SysRegistryReadExtent(regs*)+0x30>
c0014076:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001407b:	52                   	push   edx
c001407c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014080:	52                   	push   edx
c0014081:	50                   	push   eax
c0014082:	51                   	push   ecx
c0014083:	e8 b3 f0 ff ff       	call   c001313b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014088:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001408c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014090:	83 c4 10             	add    esp,0x10
c0014093:	eb 14                	jmp    c00140a9 <SysRegistryReadExtent(regs*)+0x44>
c0014095:	83 ec 04             	sub    esp,0x4
c0014098:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001409b:	50                   	push   eax
c001409c:	51                   	push   ecx
c001409d:	e8 33 eb ff ff       	call   c0012bd5 <CmGetString(Reghive_Tag*, int, char*)>
c00140a2:	83 c4 10             	add    esp,0x10
c00140a5:	31 c0                	xor    eax,eax
c00140a7:	31 d2                	xor    edx,edx
c00140a9:	83 c4 1c             	add    esp,0x1c
c00140ac:	c3                   	ret    

c00140ad <SysRegistryPathToExtentLookup(regs*)>:
c00140ad:	53                   	push   ebx
c00140ae:	83 ec 10             	sub    esp,0x10
c00140b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00140b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140b8:	68 dd 23 02 c0       	push   0xc00223dd
c00140bd:	e8 83 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00140c2:	58                   	pop    eax
c00140c3:	5a                   	pop    edx
c00140c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140c7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140ca:	e8 96 f5 ff ff       	call   c0013665 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00140cf:	83 c4 18             	add    esp,0x18
c00140d2:	99                   	cdq    
c00140d3:	5b                   	pop    ebx
c00140d4:	c3                   	ret    

c00140d5 <SysRegistryEnterDirectory(regs*)>:
c00140d5:	53                   	push   ebx
c00140d6:	83 ec 10             	sub    esp,0x10
c00140d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00140dd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140e0:	68 00 24 02 c0       	push   0xc0022400
c00140e5:	e8 5b 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00140ea:	58                   	pop    eax
c00140eb:	5a                   	pop    edx
c00140ec:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140ef:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140f2:	e8 55 eb ff ff       	call   c0012c4c <CmEnterDirectory(Reghive_Tag*, int)>
c00140f7:	83 c4 18             	add    esp,0x18
c00140fa:	99                   	cdq    
c00140fb:	5b                   	pop    ebx
c00140fc:	c3                   	ret    

c00140fd <SysRegistryGetNext(regs*)>:
c00140fd:	53                   	push   ebx
c00140fe:	83 ec 10             	sub    esp,0x10
c0014101:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014105:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014108:	68 1e 24 02 c0       	push   0xc002241e
c001410d:	e8 33 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014112:	58                   	pop    eax
c0014113:	5a                   	pop    edx
c0014114:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014117:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001411a:	e8 6c eb ff ff       	call   c0012c8b <CmGetNext(Reghive_Tag*, int)>
c001411f:	83 c4 18             	add    esp,0x18
c0014122:	99                   	cdq    
c0014123:	5b                   	pop    ebx
c0014124:	c3                   	ret    

c0014125 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014125:	57                   	push   edi
c0014126:	56                   	push   esi
c0014127:	53                   	push   ebx
c0014128:	81 ec 34 01 00 00    	sub    esp,0x134
c001412e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014135:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014139:	57                   	push   edi
c001413a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001413d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014140:	e8 04 f1 ff ff       	call   c0013249 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014145:	89 c3                	mov    ebx,eax
c0014147:	58                   	pop    eax
c0014148:	5a                   	pop    edx
c0014149:	57                   	push   edi
c001414a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001414d:	e8 ee c4 fe ff       	call   c0000640 <strcpy>
c0014152:	89 d8                	mov    eax,ebx
c0014154:	81 c4 40 01 00 00    	add    esp,0x140
c001415a:	99                   	cdq    
c001415b:	5b                   	pop    ebx
c001415c:	5e                   	pop    esi
c001415d:	5f                   	pop    edi
c001415e:	c3                   	ret    

c001415f <SysRegistryOpen(regs*)>:
c001415f:	83 ec 18             	sub    esp,0x18
c0014162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014166:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014169:	e8 f7 e8 ff ff       	call   c0012a65 <CmOpen(char const*)>
c001416e:	83 c4 1c             	add    esp,0x1c
c0014171:	99                   	cdq    
c0014172:	c3                   	ret    

c0014173 <SysRegistryClose(regs*)>:
c0014173:	83 ec 18             	sub    esp,0x18
c0014176:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001417a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001417d:	e8 01 ea ff ff       	call   c0012b83 <CmClose(Reghive_Tag*)>
c0014182:	31 c0                	xor    eax,eax
c0014184:	31 d2                	xor    edx,edx
c0014186:	83 c4 1c             	add    esp,0x1c
c0014189:	c3                   	ret    

c001418a <SysSbrk(regs*)>:
c001418a:	56                   	push   esi
c001418b:	53                   	push   ebx
c001418c:	50                   	push   eax
c001418d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014192:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014196:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014199:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001419c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00141a2:	85 db                	test   ebx,ebx
c00141a4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00141a7:	74 02                	je     c00141ab <SysSbrk(regs*)+0x21>
c00141a9:	79 06                	jns    c00141b1 <SysSbrk(regs*)+0x27>
c00141ab:	89 f0                	mov    eax,esi
c00141ad:	31 d2                	xor    edx,edx
c00141af:	eb 2a                	jmp    c00141db <SysSbrk(regs*)+0x51>
c00141b1:	83 c8 ff             	or     eax,0xffffffff
c00141b4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00141ba:	89 c2                	mov    edx,eax
c00141bc:	77 1d                	ja     c00141db <SysSbrk(regs*)+0x51>
c00141be:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00141c4:	50                   	push   eax
c00141c5:	c1 ea 0c             	shr    edx,0xc
c00141c8:	68 07 0c 00 00       	push   0xc07
c00141cd:	52                   	push   edx
c00141ce:	51                   	push   ecx
c00141cf:	e8 50 5c ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00141d4:	89 f0                	mov    eax,esi
c00141d6:	31 d2                	xor    edx,edx
c00141d8:	83 c4 10             	add    esp,0x10
c00141db:	59                   	pop    ecx
c00141dc:	5b                   	pop    ebx
c00141dd:	5e                   	pop    esi
c00141de:	c3                   	ret    

c00141df <SysSetCwd(regs*)>:
c00141df:	83 ec 14             	sub    esp,0x14
c00141e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141e6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00141e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141ee:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00141f1:	e8 25 7b ff ff       	call   c000bd1b <Fs::setcwd(Process*, char*)>
c00141f6:	83 c4 1c             	add    esp,0x1c
c00141f9:	99                   	cdq    
c00141fa:	c3                   	ret    

c00141fb <SysSetTime(regs*)>:
c00141fb:	55                   	push   ebp
c00141fc:	31 c9                	xor    ecx,ecx
c00141fe:	57                   	push   edi
c00141ff:	bd 0c 00 00 00       	mov    ebp,0xc
c0014204:	56                   	push   esi
c0014205:	53                   	push   ebx
c0014206:	31 db                	xor    ebx,ebx
c0014208:	83 ec 10             	sub    esp,0x10
c001420b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001420f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0014212:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014215:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014218:	89 c2                	mov    edx,eax
c001421a:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014220:	83 e2 1f             	and    edx,0x1f
c0014223:	c1 e7 10             	shl    edi,0x10
c0014226:	42                   	inc    edx
c0014227:	c1 e8 05             	shr    eax,0x5
c001422a:	88 d1                	mov    cl,dl
c001422c:	31 d2                	xor    edx,edx
c001422e:	f7 f5                	div    ebp
c0014230:	89 dd                	mov    ebp,ebx
c0014232:	88 d5                	mov    ch,dl
c0014234:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001423a:	0f b7 c1             	movzx  eax,cx
c001423d:	31 d2                	xor    edx,edx
c001423f:	09 f8                	or     eax,edi
c0014241:	bf 3c 00 00 00       	mov    edi,0x3c
c0014246:	89 c1                	mov    ecx,eax
c0014248:	89 f0                	mov    eax,esi
c001424a:	f7 f7                	div    edi
c001424c:	c1 e2 10             	shl    edx,0x10
c001424f:	09 d5                	or     ebp,edx
c0014251:	31 d2                	xor    edx,edx
c0014253:	89 eb                	mov    ebx,ebp
c0014255:	f7 f7                	div    edi
c0014257:	bf 10 0e 00 00       	mov    edi,0xe10
c001425c:	88 d7                	mov    bh,dl
c001425e:	89 f0                	mov    eax,esi
c0014260:	31 d2                	xor    edx,edx
c0014262:	f7 f7                	div    edi
c0014264:	bf 18 00 00 00       	mov    edi,0x18
c0014269:	31 d2                	xor    edx,edx
c001426b:	f7 f7                	div    edi
c001426d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0014272:	88 d3                	mov    bl,dl
c0014274:	53                   	push   ebx
c0014275:	51                   	push   ecx
c0014276:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001427c:	e8 a5 82 ff ff       	call   c000c526 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014281:	83 c4 1c             	add    esp,0x1c
c0014284:	83 f0 01             	xor    eax,0x1
c0014287:	5b                   	pop    ebx
c0014288:	0f b6 c0             	movzx  eax,al
c001428b:	5e                   	pop    esi
c001428c:	31 d2                	xor    edx,edx
c001428e:	5f                   	pop    edi
c001428f:	5d                   	pop    ebp
c0014290:	c3                   	ret    

c0014291 <SysSymlink(regs*)>:
c0014291:	53                   	push   ebx
c0014292:	83 c8 ff             	or     eax,0xffffffff
c0014295:	83 ec 08             	sub    esp,0x8
c0014298:	89 c2                	mov    edx,eax
c001429a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001429e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00142a1:	85 c9                	test   ecx,ecx
c00142a3:	74 14                	je     c00142b9 <SysSymlink(regs*)+0x28>
c00142a5:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00142a8:	85 db                	test   ebx,ebx
c00142aa:	74 0d                	je     c00142b9 <SysSymlink(regs*)+0x28>
c00142ac:	50                   	push   eax
c00142ad:	50                   	push   eax
c00142ae:	53                   	push   ebx
c00142af:	51                   	push   ecx
c00142b0:	e8 74 6f ff ff       	call   c000b229 <KeCreateSymlink(char const*, char const*)>
c00142b5:	83 c4 10             	add    esp,0x10
c00142b8:	99                   	cdq    
c00142b9:	83 c4 08             	add    esp,0x8
c00142bc:	5b                   	pop    ebx
c00142bd:	c3                   	ret    

c00142be <SysTimezone(regs*)>:
c00142be:	53                   	push   ebx
c00142bf:	83 ec 08             	sub    esp,0x8
c00142c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142c6:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00142ca:	75 17                	jne    c00142e3 <SysTimezone(regs*)+0x25>
c00142cc:	83 ec 0c             	sub    esp,0xc
c00142cf:	68 35 24 02 c0       	push   0xc0022435
c00142d4:	e8 6c 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142d9:	83 c8 ff             	or     eax,0xffffffff
c00142dc:	83 c4 10             	add    esp,0x10
c00142df:	89 c2                	mov    edx,eax
c00142e1:	eb 20                	jmp    c0014303 <SysTimezone(regs*)+0x45>
c00142e3:	83 ec 0c             	sub    esp,0xc
c00142e6:	68 4a 24 02 c0       	push   0xc002244a
c00142eb:	e8 55 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142f0:	58                   	pop    eax
c00142f1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142f4:	e8 97 7f ff ff       	call   c000c290 <User::loadClockSettings(int)>
c00142f9:	83 c4 10             	add    esp,0x10
c00142fc:	b8 01 00 00 00       	mov    eax,0x1
c0014301:	31 d2                	xor    edx,edx
c0014303:	83 c4 08             	add    esp,0x8
c0014306:	5b                   	pop    ebx
c0014307:	c3                   	ret    

c0014308 <SysTruncate(regs*)>:
c0014308:	55                   	push   ebp
c0014309:	57                   	push   edi
c001430a:	31 ff                	xor    edi,edi
c001430c:	56                   	push   esi
c001430d:	53                   	push   ebx
c001430e:	83 ec 0c             	sub    esp,0xc
c0014311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014315:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014318:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001431b:	89 ce                	mov    esi,ecx
c001431d:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014321:	0f 84 9a 00 00 00    	je     c00143c1 <SysTruncate(regs*)+0xb9>
c0014327:	83 ec 0c             	sub    esp,0xc
c001432a:	68 14 01 00 00       	push   0x114
c001432f:	e8 82 37 ff ff       	call   c0007ab6 <malloc>
c0014334:	83 c4 0c             	add    esp,0xc
c0014337:	89 c3                	mov    ebx,eax
c0014339:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001433e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014341:	55                   	push   ebp
c0014342:	53                   	push   ebx
c0014343:	e8 52 76 ff ff       	call   c000b99a <File::File(char const*, Process*)>
c0014348:	83 c4 10             	add    esp,0x10
c001434b:	31 d2                	xor    edx,edx
c001434d:	b8 03 00 00 00       	mov    eax,0x3
c0014352:	85 db                	test   ebx,ebx
c0014354:	0f 84 a2 00 00 00    	je     c00143fc <SysTruncate(regs*)+0xf4>
c001435a:	51                   	push   ecx
c001435b:	51                   	push   ecx
c001435c:	6a 02                	push   0x2
c001435e:	53                   	push   ebx
c001435f:	e8 54 76 ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c0014364:	83 c4 10             	add    esp,0x10
c0014367:	85 c0                	test   eax,eax
c0014369:	74 13                	je     c001437e <SysTruncate(regs*)+0x76>
c001436b:	83 ec 0c             	sub    esp,0xc
c001436e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014370:	53                   	push   ebx
c0014371:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014374:	83 c4 10             	add    esp,0x10
c0014377:	b8 04 00 00 00       	mov    eax,0x4
c001437c:	eb 7c                	jmp    c00143fa <SysTruncate(regs*)+0xf2>
c001437e:	52                   	push   edx
c001437f:	57                   	push   edi
c0014380:	56                   	push   esi
c0014381:	53                   	push   ebx
c0014382:	e8 45 77 ff ff       	call   c000bacc <File::truncate(unsigned long long)>
c0014387:	83 c4 10             	add    esp,0x10
c001438a:	85 c0                	test   eax,eax
c001438c:	74 1b                	je     c00143a9 <SysTruncate(regs*)+0xa1>
c001438e:	83 ec 0c             	sub    esp,0xc
c0014391:	53                   	push   ebx
c0014392:	e8 7f 76 ff ff       	call   c000ba16 <File::close()>
c0014397:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014399:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001439c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001439f:	83 c4 10             	add    esp,0x10
c00143a2:	b8 05 00 00 00       	mov    eax,0x5
c00143a7:	eb 51                	jmp    c00143fa <SysTruncate(regs*)+0xf2>
c00143a9:	83 ec 0c             	sub    esp,0xc
c00143ac:	53                   	push   ebx
c00143ad:	e8 64 76 ff ff       	call   c000ba16 <File::close()>
c00143b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00143ba:	83 c4 10             	add    esp,0x10
c00143bd:	31 c0                	xor    eax,eax
c00143bf:	eb 39                	jmp    c00143fa <SysTruncate(regs*)+0xf2>
c00143c1:	31 d2                	xor    edx,edx
c00143c3:	b8 01 00 00 00       	mov    eax,0x1
c00143c8:	83 fd 02             	cmp    ebp,0x2
c00143cb:	7e 2f                	jle    c00143fc <SysTruncate(regs*)+0xf4>
c00143cd:	83 ec 0c             	sub    esp,0xc
c00143d0:	51                   	push   ecx
c00143d1:	e8 dd 50 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00143d6:	83 c4 10             	add    esp,0x10
c00143d9:	89 c1                	mov    ecx,eax
c00143db:	31 d2                	xor    edx,edx
c00143dd:	b8 02 00 00 00       	mov    eax,0x2
c00143e2:	85 c9                	test   ecx,ecx
c00143e4:	74 16                	je     c00143fc <SysTruncate(regs*)+0xf4>
c00143e6:	50                   	push   eax
c00143e7:	57                   	push   edi
c00143e8:	56                   	push   esi
c00143e9:	51                   	push   ecx
c00143ea:	e8 dd 76 ff ff       	call   c000bacc <File::truncate(unsigned long long)>
c00143ef:	83 c4 10             	add    esp,0x10
c00143f2:	85 c0                	test   eax,eax
c00143f4:	0f 95 c0             	setne  al
c00143f7:	0f b6 c0             	movzx  eax,al
c00143fa:	31 d2                	xor    edx,edx
c00143fc:	83 c4 0c             	add    esp,0xc
c00143ff:	5b                   	pop    ebx
c0014400:	5e                   	pop    esi
c0014401:	5f                   	pop    edi
c0014402:	5d                   	pop    ebp
c0014403:	c3                   	ret    

c0014404 <SysWrite(regs*)>:
c0014404:	57                   	push   edi
c0014405:	56                   	push   esi
c0014406:	53                   	push   ebx
c0014407:	83 ec 10             	sub    esp,0x10
c001440a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001440e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014411:	83 f8 02             	cmp    eax,0x2
c0014414:	77 10                	ja     c0014426 <SysWrite(regs*)+0x22>
c0014416:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001441b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001441e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014424:	eb 0e                	jmp    c0014434 <SysWrite(regs*)+0x30>
c0014426:	83 ec 0c             	sub    esp,0xc
c0014429:	50                   	push   eax
c001442a:	e8 84 50 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001442f:	83 c4 10             	add    esp,0x10
c0014432:	89 c1                	mov    ecx,eax
c0014434:	83 c8 ff             	or     eax,0xffffffff
c0014437:	85 c9                	test   ecx,ecx
c0014439:	89 c2                	mov    edx,eax
c001443b:	74 28                	je     c0014465 <SysWrite(regs*)+0x61>
c001443d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014445:	31 ff                	xor    edi,edi
c0014447:	83 ec 0c             	sub    esp,0xc
c001444a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001444c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014450:	52                   	push   edx
c0014451:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014454:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014457:	57                   	push   edi
c0014458:	56                   	push   esi
c0014459:	51                   	push   ecx
c001445a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001445d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014461:	83 c4 20             	add    esp,0x20
c0014464:	99                   	cdq    
c0014465:	83 c4 10             	add    esp,0x10
c0014468:	5b                   	pop    ebx
c0014469:	5e                   	pop    esi
c001446a:	5f                   	pop    edi
c001446b:	c3                   	ret    

c001446c <SysWsbe(regs*)>:
c001446c:	57                   	push   edi
c001446d:	b9 0b 00 00 00       	mov    ecx,0xb
c0014472:	56                   	push   esi
c0014473:	be 89 24 02 c0       	mov    esi,0xc0022489
c0014478:	53                   	push   ebx
c0014479:	83 ec 30             	sub    esp,0x30
c001447c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014480:	fc                   	cld    
c0014481:	83 ec 0c             	sub    esp,0xc
c0014484:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014486:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001448a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001448f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014492:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014498:	8b 06                	mov    eax,DWORD PTR [esi]
c001449a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001449d:	57                   	push   edi
c001449e:	e8 cd c0 fe ff       	call   c0000570 <strlen>
c00144a3:	5a                   	pop    edx
c00144a4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00144a8:	52                   	push   edx
c00144a9:	31 d2                	xor    edx,edx
c00144ab:	57                   	push   edi
c00144ac:	52                   	push   edx
c00144ad:	50                   	push   eax
c00144ae:	56                   	push   esi
c00144af:	ff d3                	call   ebx
c00144b1:	83 c4 14             	add    esp,0x14
c00144b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00144b8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00144bb:	e8 b0 23 00 00       	call   c0016870 <terminateTask(int)>
c00144c0:	83 c4 40             	add    esp,0x40
c00144c3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00144c8:	5b                   	pop    ebx
c00144c9:	31 d2                	xor    edx,edx
c00144cb:	5e                   	pop    esi
c00144cc:	5f                   	pop    edi
c00144cd:	c3                   	ret    

c00144ce <SysYield(regs*)>:
c00144ce:	83 ec 0c             	sub    esp,0xc
c00144d1:	fa                   	cli    
c00144d2:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00144d8:	e8 f3 19 00 00       	call   c0015ed0 <schedule()>
c00144dd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00144e2:	48                   	dec    eax
c00144e3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00144e8:	75 01                	jne    c00144eb <SysYield(regs*)+0x1d>
c00144ea:	fb                   	sti    
c00144eb:	31 c0                	xor    eax,eax
c00144ed:	31 d2                	xor    edx,edx
c00144ef:	83 c4 0c             	add    esp,0xc
c00144f2:	c3                   	ret    

c00144f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00144f3:	55                   	push   ebp
c00144f4:	57                   	push   edi
c00144f5:	56                   	push   esi
c00144f6:	53                   	push   ebx
c00144f7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00144fd:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014505:	0f 95 c0             	setne  al
c0014508:	31 d2                	xor    edx,edx
c001450a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014512:	0f 94 c2             	sete   dl
c0014515:	85 c2                	test   edx,eax
c0014517:	74 34                	je     c001454d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014519:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014524:	74 27                	je     c001454d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014526:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001452d:	05 00 10 00 00       	add    eax,0x1000
c0014532:	89 c1                	mov    ecx,eax
c0014534:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014539:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001453f:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014546:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001454d:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014554:	83 ec 0c             	sub    esp,0xc
c0014557:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001455d:	6a 01                	push   0x1
c001455f:	e8 a9 50 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0014564:	83 c4 10             	add    esp,0x10
c0014567:	89 c3                	mov    ebx,eax
c0014569:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001456f:	0f 86 25 01 00 00    	jbe    c001469a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014575:	c1 ee 0c             	shr    esi,0xc
c0014578:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001457f:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014583:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001458b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014592:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014596:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001459d:	29 ef                	sub    edi,ebp
c001459f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00145a3:	0f 83 f8 00 00 00    	jae    c00146a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00145a9:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00145af:	76 05                	jbe    c00145b6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00145b1:	bf 00 10 00 00       	mov    edi,0x1000
c00145b6:	83 ec 0c             	sub    esp,0xc
c00145b9:	31 d2                	xor    edx,edx
c00145bb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00145c2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00145c4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00145c8:	50                   	push   eax
c00145c9:	8d 74 24 30          	lea    esi,[esp+0x30]
c00145cd:	56                   	push   esi
c00145ce:	52                   	push   edx
c00145cf:	57                   	push   edi
c00145d0:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00145d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145da:	83 c4 20             	add    esp,0x20
c00145dd:	85 c0                	test   eax,eax
c00145df:	75 06                	jne    c00145e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00145e1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00145e5:	74 13                	je     c00145fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00145e7:	83 ec 0c             	sub    esp,0xc
c00145ea:	53                   	push   ebx
c00145eb:	e8 3b 53 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00145f0:	83 c4 10             	add    esp,0x10
c00145f3:	31 c0                	xor    eax,eax
c00145f5:	e9 7c 01 00 00       	jmp    c0014776 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00145fa:	fa                   	cli    
c00145fb:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014601:	e8 b9 37 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014606:	6a 07                	push   0x7
c0014608:	89 c7                	mov    edi,eax
c001460a:	53                   	push   ebx
c001460b:	50                   	push   eax
c001460c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014611:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014614:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001461a:	e8 01 57 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001461f:	83 c4 0c             	add    esp,0xc
c0014622:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014629:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001462f:	6a 00                	push   0x0
c0014631:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014636:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014639:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001463f:	e8 42 55 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014644:	58                   	pop    eax
c0014645:	5a                   	pop    edx
c0014646:	68 07 0c 00 00       	push   0xc07
c001464b:	55                   	push   ebp
c001464c:	57                   	push   edi
c001464d:	89 df                	mov    edi,ebx
c001464f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014656:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001465c:	6a 00                	push   0x0
c001465e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014663:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014666:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001466c:	e8 01 59 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014671:	b9 00 10 00 00       	mov    ecx,0x1000
c0014676:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014678:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001467d:	83 c4 20             	add    esp,0x20
c0014680:	48                   	dec    eax
c0014681:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014686:	85 c0                	test   eax,eax
c0014688:	75 01                	jne    c001468b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001468a:	fb                   	sti    
c001468b:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014691:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014695:	e9 f1 fe ff ff       	jmp    c001458b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001469a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00146a1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00146a8:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00146ae:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00146b4:	0f 86 ae 00 00 00    	jbe    c0014768 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00146ba:	fa                   	cli    
c00146bb:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00146c1:	c1 ee 0c             	shr    esi,0xc
c00146c4:	51                   	push   ecx
c00146c5:	31 ff                	xor    edi,edi
c00146c7:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00146ce:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00146d4:	6a 00                	push   0x0
c00146d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146de:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00146e4:	e8 9d 54 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00146e9:	83 c4 10             	add    esp,0x10
c00146ec:	e8 ce 36 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00146f1:	47                   	inc    edi
c00146f2:	6a 07                	push   0x7
c00146f4:	53                   	push   ebx
c00146f5:	50                   	push   eax
c00146f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00146fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014700:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014703:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014709:	e8 12 56 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001470e:	58                   	pop    eax
c001470f:	5a                   	pop    edx
c0014710:	68 07 0c 00 00       	push   0xc07
c0014715:	55                   	push   ebp
c0014716:	81 c5 00 10 00 00    	add    ebp,0x1000
c001471c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014720:	50                   	push   eax
c0014721:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014728:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001472e:	6a 00                	push   0x0
c0014730:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014735:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014738:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001473e:	e8 2f 58 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014743:	83 c4 1c             	add    esp,0x1c
c0014746:	68 00 10 00 00       	push   0x1000
c001474b:	6a 00                	push   0x0
c001474d:	53                   	push   ebx
c001474e:	e8 9d bd fe ff       	call   c00004f0 <memset>
c0014753:	83 c4 10             	add    esp,0x10
c0014756:	39 fe                	cmp    esi,edi
c0014758:	77 92                	ja     c00146ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c001475a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001475f:	48                   	dec    eax
c0014760:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014765:	75 01                	jne    c0014768 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014767:	fb                   	sti    
c0014768:	83 ec 0c             	sub    esp,0xc
c001476b:	53                   	push   ebx
c001476c:	e8 ba 51 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014771:	83 c4 10             	add    esp,0x10
c0014774:	b0 01                	mov    al,0x1
c0014776:	81 c4 2c 10 00 00    	add    esp,0x102c
c001477c:	5b                   	pop    ebx
c001477d:	5e                   	pop    esi
c001477e:	5f                   	pop    edi
c001477f:	5d                   	pop    ebp
c0014780:	c3                   	ret    

c0014781 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014781:	55                   	push   ebp
c0014782:	57                   	push   edi
c0014783:	56                   	push   esi
c0014784:	53                   	push   ebx
c0014785:	83 ec 48             	sub    esp,0x48
c0014788:	68 14 01 00 00       	push   0x114
c001478d:	e8 24 33 ff ff       	call   c0007ab6 <malloc>
c0014792:	83 c4 0c             	add    esp,0xc
c0014795:	89 c6                	mov    esi,eax
c0014797:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001479b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001479f:	50                   	push   eax
c00147a0:	e8 f5 71 ff ff       	call   c000b99a <File::File(char const*, Process*)>
c00147a5:	58                   	pop    eax
c00147a6:	5a                   	pop    edx
c00147a7:	6a 01                	push   0x1
c00147a9:	56                   	push   esi
c00147aa:	e8 09 72 ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c00147af:	83 c4 10             	add    esp,0x10
c00147b2:	85 c0                	test   eax,eax
c00147b4:	0f 85 43 01 00 00    	jne    c00148fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00147ba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00147c2:	83 ec 0c             	sub    esp,0xc
c00147c5:	6a 34                	push   0x34
c00147c7:	e8 ea 32 ff ff       	call   c0007ab6 <malloc>
c00147cc:	89 c3                	mov    ebx,eax
c00147ce:	58                   	pop    eax
c00147cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00147d1:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00147d5:	57                   	push   edi
c00147d6:	53                   	push   ebx
c00147d7:	6a 00                	push   0x0
c00147d9:	6a 34                	push   0x34
c00147db:	56                   	push   esi
c00147dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147df:	83 c4 20             	add    esp,0x20
c00147e2:	85 c0                	test   eax,eax
c00147e4:	0f 85 13 01 00 00    	jne    c00148fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00147ea:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00147f0:	0f 85 07 01 00 00    	jne    c00148fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00147f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00147f9:	85 c0                	test   eax,eax
c00147fb:	0f 84 fc 00 00 00    	je     c00148fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014801:	31 d2                	xor    edx,edx
c0014803:	55                   	push   ebp
c0014804:	52                   	push   edx
c0014805:	50                   	push   eax
c0014806:	56                   	push   esi
c0014807:	e8 6a 72 ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c001480c:	83 c4 10             	add    esp,0x10
c001480f:	85 c0                	test   eax,eax
c0014811:	0f 85 e6 00 00 00    	jne    c00148fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014817:	83 ec 0c             	sub    esp,0xc
c001481a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001481d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014821:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014825:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014829:	0f af c2             	imul   eax,edx
c001482c:	50                   	push   eax
c001482d:	e8 84 32 ff ff       	call   c0007ab6 <malloc>
c0014832:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014834:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014838:	89 3c 24             	mov    DWORD PTR [esp],edi
c001483b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001483f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014843:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014847:	0f af c2             	imul   eax,edx
c001484a:	99                   	cdq    
c001484b:	52                   	push   edx
c001484c:	50                   	push   eax
c001484d:	56                   	push   esi
c001484e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014851:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014854:	83 c4 20             	add    esp,0x20
c0014857:	85 c0                	test   eax,eax
c0014859:	0f 84 9e 00 00 00    	je     c00148fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001485f:	31 d2                	xor    edx,edx
c0014861:	51                   	push   ecx
c0014862:	52                   	push   edx
c0014863:	50                   	push   eax
c0014864:	56                   	push   esi
c0014865:	e8 0c 72 ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	85 c0                	test   eax,eax
c001486f:	0f 85 88 00 00 00    	jne    c00148fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014875:	83 ec 0c             	sub    esp,0xc
c0014878:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001487c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014880:	31 ed                	xor    ebp,ebp
c0014882:	0f af c2             	imul   eax,edx
c0014885:	50                   	push   eax
c0014886:	e8 2b 32 ff ff       	call   c0007ab6 <malloc>
c001488b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001488d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014891:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014898:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001489c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00148a0:	0f af c2             	imul   eax,edx
c00148a3:	99                   	cdq    
c00148a4:	52                   	push   edx
c00148a5:	50                   	push   eax
c00148a6:	56                   	push   esi
c00148a7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148aa:	83 c4 20             	add    esp,0x20
c00148ad:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00148b5:	0f b7 fd             	movzx  edi,bp
c00148b8:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00148bc:	73 7d                	jae    c001493b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c00148be:	c1 e7 05             	shl    edi,0x5
c00148c1:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00148c5:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00148c8:	75 6b                	jne    c0014935 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00148ca:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00148cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148d1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00148d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00148d8:	52                   	push   edx
c00148d9:	31 d2                	xor    edx,edx
c00148db:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00148de:	52                   	push   edx
c00148df:	50                   	push   eax
c00148e0:	56                   	push   esi
c00148e1:	e8 90 71 ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c00148e6:	83 c4 10             	add    esp,0x10
c00148e9:	85 c0                	test   eax,eax
c00148eb:	74 17                	je     c0014904 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c00148ed:	83 ec 0c             	sub    esp,0xc
c00148f0:	68 b5 24 02 c0       	push   0xc00224b5
c00148f5:	e8 4b 60 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00148fa:	83 c4 10             	add    esp,0x10
c00148fd:	31 c0                	xor    eax,eax
c00148ff:	e9 87 00 00 00       	jmp    c001498b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014904:	83 ec 0c             	sub    esp,0xc
c0014907:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001490a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001490d:	50                   	push   eax
c001490e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014916:	56                   	push   esi
c0014917:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001491b:	e8 d3 fb ff ff       	call   c00144f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014920:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014924:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014928:	83 c4 20             	add    esp,0x20
c001492b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001492f:	73 04                	jae    c0014935 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014931:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014935:	45                   	inc    ebp
c0014936:	e9 7a ff ff ff       	jmp    c00148b5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001493b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001493f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014943:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014947:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001494d:	83 ec 0c             	sub    esp,0xc
c0014950:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014956:	25 00 f0 ff ff       	and    eax,0xfffff000
c001495b:	05 00 10 00 00       	add    eax,0x1000
c0014960:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014963:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014967:	e8 5a 31 ff ff       	call   c0007ac6 <free>
c001496c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001496f:	e8 52 31 ff ff       	call   c0007ac6 <free>
c0014974:	58                   	pop    eax
c0014975:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014979:	e8 48 31 ff ff       	call   c0007ac6 <free>
c001497e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014981:	e8 90 70 ff ff       	call   c000ba16 <File::close()>
c0014986:	83 c4 10             	add    esp,0x10
c0014989:	b0 01                	mov    al,0x1
c001498b:	83 c4 3c             	add    esp,0x3c
c001498e:	5b                   	pop    ebx
c001498f:	5e                   	pop    esi
c0014990:	5f                   	pop    edi
c0014991:	5d                   	pop    ebp
c0014992:	c3                   	ret    

c0014993 <Thr::runtimeReferenceHelper()>:
c0014993:	83 ec 18             	sub    esp,0x18
c0014996:	68 bd 24 02 c0       	push   0xc00224bd
c001499b:	e8 a5 5f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00149a0:	fa                   	cli    
c00149a1:	83 c4 10             	add    esp,0x10
c00149a4:	eb fe                	jmp    c00149a4 <Thr::runtimeReferenceHelper()+0x11>

c00149a6 <Thr::getAddressOfKernelSymbol(char const*)>:
c00149a6:	57                   	push   edi
c00149a7:	56                   	push   esi
c00149a8:	53                   	push   ebx
c00149a9:	31 db                	xor    ebx,ebx
c00149ab:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c00149b1:	7e 3c                	jle    c00149ef <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00149b3:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c00149ba:	31 ff                	xor    edi,edi
c00149bc:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c00149c3:	7e 27                	jle    c00149ec <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00149c5:	50                   	push   eax
c00149c6:	50                   	push   eax
c00149c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00149cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00149cd:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c00149d4:	50                   	push   eax
c00149d5:	e8 76 bd fe ff       	call   c0000750 <strcmp>
c00149da:	83 c4 10             	add    esp,0x10
c00149dd:	85 c0                	test   eax,eax
c00149df:	75 05                	jne    c00149e6 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00149e1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00149e4:	eb 0b                	jmp    c00149f1 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00149e6:	83 c6 10             	add    esi,0x10
c00149e9:	47                   	inc    edi
c00149ea:	eb d0                	jmp    c00149bc <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00149ec:	43                   	inc    ebx
c00149ed:	eb bc                	jmp    c00149ab <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00149ef:	31 c0                	xor    eax,eax
c00149f1:	5b                   	pop    ebx
c00149f2:	5e                   	pop    esi
c00149f3:	5f                   	pop    edi
c00149f4:	c3                   	ret    

c00149f5 <Thr::loadKernelSymbolTable(char const*)>:
c00149f5:	55                   	push   ebp
c00149f6:	57                   	push   edi
c00149f7:	56                   	push   esi
c00149f8:	53                   	push   ebx
c00149f9:	83 ec 68             	sub    esp,0x68
c00149fc:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014a02:	68 14 01 00 00       	push   0x114
c0014a07:	e8 aa 30 ff ff       	call   c0007ab6 <malloc>
c0014a0c:	83 c4 0c             	add    esp,0xc
c0014a0f:	89 c3                	mov    ebx,eax
c0014a11:	56                   	push   esi
c0014a12:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014a16:	50                   	push   eax
c0014a17:	e8 7e 6f ff ff       	call   c000b99a <File::File(char const*, Process*)>
c0014a1c:	5e                   	pop    esi
c0014a1d:	5f                   	pop    edi
c0014a1e:	6a 01                	push   0x1
c0014a20:	53                   	push   ebx
c0014a21:	e8 92 6f ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c0014a26:	83 c4 10             	add    esp,0x10
c0014a29:	85 c0                	test   eax,eax
c0014a2b:	74 0a                	je     c0014a37 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014a2d:	83 ec 0c             	sub    esp,0xc
c0014a30:	68 df 24 02 c0       	push   0xc00224df
c0014a35:	eb 34                	jmp    c0014a6b <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014a37:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014a3f:	83 ec 0c             	sub    esp,0xc
c0014a42:	6a 34                	push   0x34
c0014a44:	e8 6d 30 ff ff       	call   c0007ab6 <malloc>
c0014a49:	59                   	pop    ecx
c0014a4a:	89 c7                	mov    edi,eax
c0014a4c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014a50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a52:	56                   	push   esi
c0014a53:	57                   	push   edi
c0014a54:	6a 00                	push   0x0
c0014a56:	6a 34                	push   0x34
c0014a58:	53                   	push   ebx
c0014a59:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a5c:	83 c4 20             	add    esp,0x20
c0014a5f:	85 c0                	test   eax,eax
c0014a61:	74 17                	je     c0014a7a <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014a63:	83 ec 0c             	sub    esp,0xc
c0014a66:	68 f6 24 02 c0       	push   0xc00224f6
c0014a6b:	e8 fb c9 ff ff       	call   c001146b <KePanic(char const*)>
c0014a70:	83 c4 10             	add    esp,0x10
c0014a73:	31 c0                	xor    eax,eax
c0014a75:	e9 31 02 00 00       	jmp    c0014cab <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014a7a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014a80:	75 e1                	jne    c0014a63 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014a82:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014a85:	85 c0                	test   eax,eax
c0014a87:	74 da                	je     c0014a63 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014a89:	52                   	push   edx
c0014a8a:	31 d2                	xor    edx,edx
c0014a8c:	52                   	push   edx
c0014a8d:	50                   	push   eax
c0014a8e:	53                   	push   ebx
c0014a8f:	e8 e2 6f ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0014a94:	83 c4 10             	add    esp,0x10
c0014a97:	85 c0                	test   eax,eax
c0014a99:	75 c8                	jne    c0014a63 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014a9b:	83 ec 0c             	sub    esp,0xc
c0014a9e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014aa2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014aa6:	31 ed                	xor    ebp,ebp
c0014aa8:	0f af c2             	imul   eax,edx
c0014aab:	50                   	push   eax
c0014aac:	e8 05 30 ff ff       	call   c0007ab6 <malloc>
c0014ab1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ab3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ab7:	89 34 24             	mov    DWORD PTR [esp],esi
c0014aba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014abe:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014ac2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014ac6:	0f af c2             	imul   eax,edx
c0014ac9:	99                   	cdq    
c0014aca:	52                   	push   edx
c0014acb:	50                   	push   eax
c0014acc:	53                   	push   ebx
c0014acd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ad0:	83 c4 20             	add    esp,0x20
c0014ad3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014adb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ae3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014aeb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014af3:	0f b7 f5             	movzx  esi,bp
c0014af6:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014afa:	0f 83 a7 00 00 00    	jae    c0014ba7 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014b00:	6b f6 28             	imul   esi,esi,0x28
c0014b03:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014b07:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014b0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b0e:	50                   	push   eax
c0014b0f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014b13:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014b17:	8b 16                	mov    edx,DWORD PTR [esi]
c0014b19:	6b c0 28             	imul   eax,eax,0x28
c0014b1c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014b20:	89 d0                	mov    eax,edx
c0014b22:	31 d2                	xor    edx,edx
c0014b24:	52                   	push   edx
c0014b25:	50                   	push   eax
c0014b26:	53                   	push   ebx
c0014b27:	e8 4a 6f ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0014b2c:	83 c4 0c             	add    esp,0xc
c0014b2f:	6a 20                	push   0x20
c0014b31:	6a 00                	push   0x0
c0014b33:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014b37:	52                   	push   edx
c0014b38:	e8 b3 b9 fe ff       	call   c00004f0 <memset>
c0014b3d:	58                   	pop    eax
c0014b3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b40:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014b44:	51                   	push   ecx
c0014b45:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014b49:	52                   	push   edx
c0014b4a:	6a 00                	push   0x0
c0014b4c:	6a 1f                	push   0x1f
c0014b4e:	53                   	push   ebx
c0014b4f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b52:	83 c4 18             	add    esp,0x18
c0014b55:	68 0d 25 02 c0       	push   0xc002250d
c0014b5a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014b5e:	52                   	push   edx
c0014b5f:	e8 ec bb fe ff       	call   c0000750 <strcmp>
c0014b64:	83 c4 10             	add    esp,0x10
c0014b67:	85 c0                	test   eax,eax
c0014b69:	75 0f                	jne    c0014b7a <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014b6b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014b6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b7a:	50                   	push   eax
c0014b7b:	50                   	push   eax
c0014b7c:	68 15 25 02 c0       	push   0xc0022515
c0014b81:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014b85:	50                   	push   eax
c0014b86:	e8 c5 bb fe ff       	call   c0000750 <strcmp>
c0014b8b:	83 c4 10             	add    esp,0x10
c0014b8e:	85 c0                	test   eax,eax
c0014b90:	75 0f                	jne    c0014ba1 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014b92:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014b95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ba1:	45                   	inc    ebp
c0014ba2:	e9 4c ff ff ff       	jmp    c0014af3 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014ba7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014bac:	75 10                	jne    c0014bbe <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014bae:	83 ec 0c             	sub    esp,0xc
c0014bb1:	68 1d 25 02 c0       	push   0xc002251d
c0014bb6:	e8 b0 c8 ff ff       	call   c001146b <KePanic(char const*)>
c0014bbb:	83 c4 10             	add    esp,0x10
c0014bbe:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014bc3:	75 10                	jne    c0014bd5 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014bc5:	83 ec 0c             	sub    esp,0xc
c0014bc8:	68 1d 25 02 c0       	push   0xc002251d
c0014bcd:	e8 99 c8 ff ff       	call   c001146b <KePanic(char const*)>
c0014bd2:	83 c4 10             	add    esp,0x10
c0014bd5:	31 d2                	xor    edx,edx
c0014bd7:	50                   	push   eax
c0014bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bdc:	52                   	push   edx
c0014bdd:	50                   	push   eax
c0014bde:	53                   	push   ebx
c0014bdf:	e8 92 6e ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0014be4:	5a                   	pop    edx
c0014be5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014be9:	e8 c8 2e ff ff       	call   c0007ab6 <malloc>
c0014bee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014bf2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bf6:	31 c9                	xor    ecx,ecx
c0014bf8:	5e                   	pop    esi
c0014bf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bfb:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014bff:	55                   	push   ebp
c0014c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c04:	51                   	push   ecx
c0014c05:	52                   	push   edx
c0014c06:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014c0a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014c0e:	53                   	push   ebx
c0014c0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c12:	83 c4 14             	add    esp,0x14
c0014c15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c19:	e8 98 2e ff ff       	call   c0007ab6 <malloc>
c0014c1e:	89 c6                	mov    esi,eax
c0014c20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014c25:	56                   	push   esi
c0014c26:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014c2a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014c2e:	51                   	push   ecx
c0014c2f:	52                   	push   edx
c0014c30:	53                   	push   ebx
c0014c31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014c38:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014c3e:	83 c4 1c             	add    esp,0x1c
c0014c41:	c1 e8 04             	shr    eax,0x4
c0014c44:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014c4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c4f:	31 d2                	xor    edx,edx
c0014c51:	52                   	push   edx
c0014c52:	50                   	push   eax
c0014c53:	53                   	push   ebx
c0014c54:	e8 1d 6e ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0014c59:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c5b:	31 d2                	xor    edx,edx
c0014c5d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014c60:	56                   	push   esi
c0014c61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014c65:	52                   	push   edx
c0014c66:	50                   	push   eax
c0014c67:	53                   	push   ebx
c0014c68:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c6b:	83 c4 14             	add    esp,0x14
c0014c6e:	53                   	push   ebx
c0014c6f:	e8 a2 6d ff ff       	call   c000ba16 <File::close()>
c0014c74:	5d                   	pop    ebp
c0014c75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c79:	e8 48 2e ff ff       	call   c0007ac6 <free>
c0014c7e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014c81:	e8 40 2e ff ff       	call   c0007ac6 <free>
c0014c86:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014c8b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014c8f:	8d 50 01             	lea    edx,[eax+0x1]
c0014c92:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014c99:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014ca0:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014ca6:	83 c4 10             	add    esp,0x10
c0014ca9:	b0 01                	mov    al,0x1
c0014cab:	83 c4 5c             	add    esp,0x5c
c0014cae:	5b                   	pop    ebx
c0014caf:	5e                   	pop    esi
c0014cb0:	5f                   	pop    edi
c0014cb1:	5d                   	pop    ebp
c0014cb2:	c3                   	ret    

c0014cb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014cb3:	55                   	push   ebp
c0014cb4:	57                   	push   edi
c0014cb5:	56                   	push   esi
c0014cb6:	53                   	push   ebx
c0014cb7:	81 ec 68 03 00 00    	sub    esp,0x368
c0014cbd:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014cc4:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014cca:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014cce:	68 14 01 00 00       	push   0x114
c0014cd3:	e8 de 2d ff ff       	call   c0007ab6 <malloc>
c0014cd8:	83 c4 0c             	add    esp,0xc
c0014cdb:	89 c5                	mov    ebp,eax
c0014cdd:	53                   	push   ebx
c0014cde:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014ce5:	50                   	push   eax
c0014ce6:	e8 af 6c ff ff       	call   c000b99a <File::File(char const*, Process*)>
c0014ceb:	5e                   	pop    esi
c0014cec:	5f                   	pop    edi
c0014ced:	6a 01                	push   0x1
c0014cef:	55                   	push   ebp
c0014cf0:	e8 c3 6c ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	85 c0                	test   eax,eax
c0014cfa:	0f 85 aa 06 00 00    	jne    c00153aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014d00:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014d08:	83 ec 0c             	sub    esp,0xc
c0014d0b:	6a 34                	push   0x34
c0014d0d:	e8 a4 2d ff ff       	call   c0007ab6 <malloc>
c0014d12:	5b                   	pop    ebx
c0014d13:	89 c7                	mov    edi,eax
c0014d15:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014d19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014d1c:	53                   	push   ebx
c0014d1d:	57                   	push   edi
c0014d1e:	6a 00                	push   0x0
c0014d20:	6a 34                	push   0x34
c0014d22:	55                   	push   ebp
c0014d23:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d26:	83 c4 20             	add    esp,0x20
c0014d29:	85 c0                	test   eax,eax
c0014d2b:	0f 85 79 06 00 00    	jne    c00153aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014d31:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014d37:	0f 85 6d 06 00 00    	jne    c00153aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014d3d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014d40:	85 c0                	test   eax,eax
c0014d42:	0f 84 62 06 00 00    	je     c00153aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014d48:	31 d2                	xor    edx,edx
c0014d4a:	51                   	push   ecx
c0014d4b:	52                   	push   edx
c0014d4c:	50                   	push   eax
c0014d4d:	55                   	push   ebp
c0014d4e:	e8 23 6d ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0014d53:	83 c4 10             	add    esp,0x10
c0014d56:	85 c0                	test   eax,eax
c0014d58:	0f 85 4c 06 00 00    	jne    c00153aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014d5e:	83 ec 0c             	sub    esp,0xc
c0014d61:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014d64:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d68:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014d6c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d70:	0f af c2             	imul   eax,edx
c0014d73:	50                   	push   eax
c0014d74:	e8 3d 2d ff ff       	call   c0007ab6 <malloc>
c0014d79:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014d7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d87:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d8b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d8f:	0f af c2             	imul   eax,edx
c0014d92:	99                   	cdq    
c0014d93:	52                   	push   edx
c0014d94:	50                   	push   eax
c0014d95:	55                   	push   ebp
c0014d96:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d99:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014d9c:	83 c4 20             	add    esp,0x20
c0014d9f:	85 c0                	test   eax,eax
c0014da1:	0f 84 03 06 00 00    	je     c00153aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014da7:	52                   	push   edx
c0014da8:	31 d2                	xor    edx,edx
c0014daa:	52                   	push   edx
c0014dab:	50                   	push   eax
c0014dac:	55                   	push   ebp
c0014dad:	e8 c4 6c ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0014db2:	83 c4 10             	add    esp,0x10
c0014db5:	85 c0                	test   eax,eax
c0014db7:	0f 85 ed 05 00 00    	jne    c00153aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014dbd:	83 ec 0c             	sub    esp,0xc
c0014dc0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014dc4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014dc8:	31 f6                	xor    esi,esi
c0014dca:	0f af c2             	imul   eax,edx
c0014dcd:	50                   	push   eax
c0014dce:	e8 e3 2c ff ff       	call   c0007ab6 <malloc>
c0014dd3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014dd6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014dda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ddd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014de1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014de5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014de9:	0f af c2             	imul   eax,edx
c0014dec:	99                   	cdq    
c0014ded:	52                   	push   edx
c0014dee:	50                   	push   eax
c0014def:	55                   	push   ebp
c0014df0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014df3:	83 c4 20             	add    esp,0x20
c0014df6:	0f b7 de             	movzx  ebx,si
c0014df9:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014dfd:	0f 83 87 00 00 00    	jae    c0014e8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014e03:	c1 e3 05             	shl    ebx,0x5
c0014e06:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014e0a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014e0d:	75 75                	jne    c0014e84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014e0f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014e12:	31 d2                	xor    edx,edx
c0014e14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e18:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e1f:	50                   	push   eax
c0014e20:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014e23:	52                   	push   edx
c0014e24:	50                   	push   eax
c0014e25:	55                   	push   ebp
c0014e26:	e8 4b 6c ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0014e2b:	83 c4 10             	add    esp,0x10
c0014e2e:	85 c0                	test   eax,eax
c0014e30:	0f 85 74 05 00 00    	jne    c00153aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014e36:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014e3d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014e40:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014e44:	31 d2                	xor    edx,edx
c0014e46:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014e4a:	83 ec 0c             	sub    esp,0xc
c0014e4d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e51:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e58:	50                   	push   eax
c0014e59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e61:	52                   	push   edx
c0014e62:	50                   	push   eax
c0014e63:	55                   	push   ebp
c0014e64:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e67:	83 c4 1c             	add    esp,0x1c
c0014e6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014e6d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014e70:	50                   	push   eax
c0014e71:	6a 00                	push   0x0
c0014e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e77:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014e7b:	50                   	push   eax
c0014e7c:	e8 6f b6 fe ff       	call   c00004f0 <memset>
c0014e81:	83 c4 10             	add    esp,0x10
c0014e84:	46                   	inc    esi
c0014e85:	e9 6c ff ff ff       	jmp    c0014df6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014e8a:	53                   	push   ebx
c0014e8b:	31 db                	xor    ebx,ebx
c0014e8d:	68 00 01 00 00       	push   0x100
c0014e92:	6a 00                	push   0x0
c0014e94:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014e98:	50                   	push   eax
c0014e99:	e8 52 b6 fe ff       	call   c00004f0 <memset>
c0014e9e:	83 c4 0c             	add    esp,0xc
c0014ea1:	68 00 01 00 00       	push   0x100
c0014ea6:	6a 00                	push   0x0
c0014ea8:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014eaf:	50                   	push   eax
c0014eb0:	e8 3b b6 fe ff       	call   c00004f0 <memset>
c0014eb5:	83 c4 10             	add    esp,0x10
c0014eb8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014ec0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014ec8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014ed0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014ed8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014ee0:	0f b7 f3             	movzx  esi,bx
c0014ee3:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014ee7:	0f 83 2d 01 00 00    	jae    c001501a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014eed:	6b f6 28             	imul   esi,esi,0x28
c0014ef0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014ef4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014ef7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014efb:	52                   	push   edx
c0014efc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014f00:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014f04:	8b 06                	mov    eax,DWORD PTR [esi]
c0014f06:	6b d2 28             	imul   edx,edx,0x28
c0014f09:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014f0d:	31 d2                	xor    edx,edx
c0014f0f:	52                   	push   edx
c0014f10:	50                   	push   eax
c0014f11:	55                   	push   ebp
c0014f12:	e8 5f 6b ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0014f17:	83 c4 0c             	add    esp,0xc
c0014f1a:	6a 20                	push   0x20
c0014f1c:	6a 00                	push   0x0
c0014f1e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014f25:	51                   	push   ecx
c0014f26:	e8 c5 b5 fe ff       	call   c00004f0 <memset>
c0014f2b:	59                   	pop    ecx
c0014f2c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014f2f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014f33:	52                   	push   edx
c0014f34:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014f3b:	51                   	push   ecx
c0014f3c:	6a 00                	push   0x0
c0014f3e:	6a 1f                	push   0x1f
c0014f40:	55                   	push   ebp
c0014f41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f44:	83 c4 1c             	add    esp,0x1c
c0014f47:	6a 09                	push   0x9
c0014f49:	68 37 25 02 c0       	push   0xc0022537
c0014f4e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014f55:	51                   	push   ecx
c0014f56:	e8 25 b4 fe ff       	call   c0000380 <memcmp>
c0014f5b:	83 c4 10             	add    esp,0x10
c0014f5e:	85 c0                	test   eax,eax
c0014f60:	75 21                	jne    c0014f83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014f62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014f6a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014f6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014f72:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014f75:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014f7c:	89 d0                	mov    eax,edx
c0014f7e:	40                   	inc    eax
c0014f7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f83:	50                   	push   eax
c0014f84:	6a 09                	push   0x9
c0014f86:	68 41 25 02 c0       	push   0xc0022541
c0014f8b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f92:	50                   	push   eax
c0014f93:	e8 e8 b3 fe ff       	call   c0000380 <memcmp>
c0014f98:	83 c4 10             	add    esp,0x10
c0014f9b:	85 c0                	test   eax,eax
c0014f9d:	75 21                	jne    c0014fc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014f9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fa3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014fa7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014fab:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014faf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014fb2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014fb9:	89 d0                	mov    eax,edx
c0014fbb:	40                   	inc    eax
c0014fbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fc0:	50                   	push   eax
c0014fc1:	50                   	push   eax
c0014fc2:	68 0d 25 02 c0       	push   0xc002250d
c0014fc7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014fce:	50                   	push   eax
c0014fcf:	e8 7c b7 fe ff       	call   c0000750 <strcmp>
c0014fd4:	83 c4 10             	add    esp,0x10
c0014fd7:	85 c0                	test   eax,eax
c0014fd9:	75 0f                	jne    c0014fea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014fdb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014fde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014fe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014fe6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014fea:	50                   	push   eax
c0014feb:	50                   	push   eax
c0014fec:	68 15 25 02 c0       	push   0xc0022515
c0014ff1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ff8:	50                   	push   eax
c0014ff9:	e8 52 b7 fe ff       	call   c0000750 <strcmp>
c0014ffe:	83 c4 10             	add    esp,0x10
c0015001:	85 c0                	test   eax,eax
c0015003:	75 0f                	jne    c0015014 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0015005:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015008:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001500c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015010:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015014:	43                   	inc    ebx
c0015015:	e9 c6 fe ff ff       	jmp    c0014ee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001501a:	31 d2                	xor    edx,edx
c001501c:	50                   	push   eax
c001501d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015021:	52                   	push   edx
c0015022:	50                   	push   eax
c0015023:	55                   	push   ebp
c0015024:	e8 4d 6a ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0015029:	58                   	pop    eax
c001502a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001502e:	e8 83 2a ff ff       	call   c0007ab6 <malloc>
c0015033:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015036:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001503a:	31 d2                	xor    edx,edx
c001503c:	58                   	pop    eax
c001503d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015041:	53                   	push   ebx
c0015042:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015046:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001504a:	52                   	push   edx
c001504b:	50                   	push   eax
c001504c:	55                   	push   ebp
c001504d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015050:	83 c4 14             	add    esp,0x14
c0015053:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015057:	e8 5a 2a ff ff       	call   c0007ab6 <malloc>
c001505c:	31 d2                	xor    edx,edx
c001505e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015062:	83 c4 0c             	add    esp,0xc
c0015065:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015069:	52                   	push   edx
c001506a:	50                   	push   eax
c001506b:	55                   	push   ebp
c001506c:	e8 05 6a ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c0015071:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015074:	31 d2                	xor    edx,edx
c0015076:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001507d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015081:	52                   	push   edx
c0015082:	50                   	push   eax
c0015083:	55                   	push   ebp
c0015084:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015087:	83 c4 20             	add    esp,0x20
c001508a:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001508f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015097:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001509b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001509f:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00150a3:	0f 84 05 03 00 00    	je     c00153ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00150a9:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00150b0:	31 d2                	xor    edx,edx
c00150b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150b6:	c1 e8 03             	shr    eax,0x3
c00150b9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00150bd:	51                   	push   ecx
c00150be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150c2:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00150c6:	52                   	push   edx
c00150c7:	50                   	push   eax
c00150c8:	55                   	push   ebp
c00150c9:	e8 a8 69 ff ff       	call   c000ba76 <File::seek(unsigned long long)>
c00150ce:	5b                   	pop    ebx
c00150cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150d3:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00150da:	e8 d7 29 ff ff       	call   c0007ab6 <malloc>
c00150df:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00150e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00150e6:	31 d2                	xor    edx,edx
c00150e8:	5e                   	pop    esi
c00150e9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00150ed:	50                   	push   eax
c00150ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00150f6:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00150fd:	52                   	push   edx
c00150fe:	50                   	push   eax
c00150ff:	55                   	push   ebp
c0015100:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015103:	83 c4 20             	add    esp,0x20
c0015106:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001510e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015112:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0015116:	0f 8d 76 02 00 00    	jge    c0015392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c001511c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015124:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0015129:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c001512c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015134:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0015138:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001513c:	c1 e8 08             	shr    eax,0x8
c001513f:	89 c6                	mov    esi,eax
c0015141:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015145:	c1 e6 04             	shl    esi,0x4
c0015148:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001514c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c001514f:	85 db                	test   ebx,ebx
c0015151:	0f 85 b3 00 00 00    	jne    c001520a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015157:	83 ec 0c             	sub    esp,0xc
c001515a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001515e:	03 06                	add    eax,DWORD PTR [esi]
c0015160:	50                   	push   eax
c0015161:	e8 40 f8 ff ff       	call   c00149a6 <Thr::getAddressOfKernelSymbol(char const*)>
c0015166:	83 c4 10             	add    esp,0x10
c0015169:	89 c3                	mov    ebx,eax
c001516b:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0015170:	85 c0                	test   eax,eax
c0015172:	0f 85 92 00 00 00    	jne    c001520a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015178:	83 ec 0c             	sub    esp,0xc
c001517b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001517f:	03 06                	add    eax,DWORD PTR [esi]
c0015181:	50                   	push   eax
c0015182:	e8 d1 c4 ff ff       	call   c0011658 <KeResolveCompatibilitySymbol(char*)>
c0015187:	83 c4 10             	add    esp,0x10
c001518a:	89 c3                	mov    ebx,eax
c001518c:	85 c0                	test   eax,eax
c001518e:	75 7a                	jne    c001520a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015190:	51                   	push   ecx
c0015191:	51                   	push   ecx
c0015192:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015196:	03 06                	add    eax,DWORD PTR [esi]
c0015198:	50                   	push   eax
c0015199:	68 4b 25 02 c0       	push   0xc002254b
c001519e:	e8 a2 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00151a3:	58                   	pop    eax
c00151a4:	5a                   	pop    edx
c00151a5:	68 65 25 02 c0       	push   0xc0022565
c00151aa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151b1:	50                   	push   eax
c00151b2:	e8 89 b4 fe ff       	call   c0000640 <strcpy>
c00151b7:	59                   	pop    ecx
c00151b8:	58                   	pop    eax
c00151b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00151bd:	03 06                	add    eax,DWORD PTR [esi]
c00151bf:	50                   	push   eax
c00151c0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151c7:	50                   	push   eax
c00151c8:	e8 73 b6 fe ff       	call   c0000840 <strcat>
c00151cd:	58                   	pop    eax
c00151ce:	5a                   	pop    edx
c00151cf:	68 fb 25 02 c0       	push   0xc00225fb
c00151d4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151db:	50                   	push   eax
c00151dc:	e8 5f b6 fe ff       	call   c0000840 <strcat>
c00151e1:	83 c4 10             	add    esp,0x10
c00151e4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00151e9:	0f 84 5d 01 00 00    	je     c001534c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00151ef:	83 ec 0c             	sub    esp,0xc
c00151f2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151f9:	50                   	push   eax
c00151fa:	e8 6c c2 ff ff       	call   c001146b <KePanic(char const*)>
c00151ff:	83 c4 10             	add    esp,0x10
c0015202:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015206:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c001520a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001520f:	83 f8 01             	cmp    eax,0x1
c0015212:	0f 85 8f 00 00 00    	jne    c00152a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0015218:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001521f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0015223:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015227:	01 ce                	add    esi,ecx
c0015229:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015231:	0f 94 c0             	sete   al
c0015234:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001523c:	0f 94 c2             	sete   dl
c001523f:	09 c2                	or     edx,eax
c0015241:	8b 06                	mov    eax,DWORD PTR [esi]
c0015243:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015248:	0f b6 d2             	movzx  edx,dl
c001524b:	74 41                	je     c001528e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c001524d:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0015250:	85 d2                	test   edx,edx
c0015252:	75 15                	jne    c0015269 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0015254:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015258:	66 83 f8 0c          	cmp    ax,0xc
c001525c:	76 05                	jbe    c0015263 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001525e:	b8 0c 00 00 00       	mov    eax,0xc
c0015263:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015267:	76 37                	jbe    c00152a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015269:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001526d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015272:	0f 84 d4 00 00 00    	je     c001534c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015278:	83 ec 0c             	sub    esp,0xc
c001527b:	68 7c 25 02 c0       	push   0xc002257c
c0015280:	e8 e6 c1 ff ff       	call   c001146b <KePanic(char const*)>
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001528c:	eb 12                	jmp    c00152a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001528e:	01 c1                	add    ecx,eax
c0015290:	85 d2                	test   edx,edx
c0015292:	75 0c                	jne    c00152a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015294:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015298:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001529c:	77 02                	ja     c00152a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001529e:	01 d9                	add    ecx,ebx
c00152a0:	89 0e                	mov    DWORD PTR [esi],ecx
c00152a2:	e9 e2 00 00 00       	jmp    c0015389 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00152a7:	83 f8 02             	cmp    eax,0x2
c00152aa:	75 77                	jne    c0015323 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00152ac:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00152b3:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00152b7:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00152bb:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00152c3:	74 21                	je     c00152e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00152c5:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00152cd:	74 17                	je     c00152e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00152cf:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00152d3:	b8 0a 00 00 00       	mov    eax,0xa
c00152d8:	83 fa 0e             	cmp    edx,0xe
c00152db:	77 03                	ja     c00152e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00152dd:	8d 42 fc             	lea    eax,[edx-0x4]
c00152e0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00152e4:	76 17                	jbe    c00152fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00152e6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00152eb:	74 5f                	je     c001534c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00152ed:	83 ec 0c             	sub    esp,0xc
c00152f0:	68 98 25 02 c0       	push   0xc0022598
c00152f5:	e8 71 c1 ff ff       	call   c001146b <KePanic(char const*)>
c00152fa:	83 c4 10             	add    esp,0x10
c00152fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00152ff:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015304:	74 13                	je     c0015319 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0015306:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001530a:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0015311:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0015315:	01 d0                	add    eax,edx
c0015317:	eb 04                	jmp    c001531d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015319:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001531d:	01 c3                	add    ebx,eax
c001531f:	89 1e                	mov    DWORD PTR [esi],ebx
c0015321:	eb 66                	jmp    c0015389 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015323:	52                   	push   edx
c0015324:	52                   	push   edx
c0015325:	50                   	push   eax
c0015326:	68 b4 25 02 c0       	push   0xc00225b4
c001532b:	e8 15 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015330:	83 c4 10             	add    esp,0x10
c0015333:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015338:	74 12                	je     c001534c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001533a:	83 ec 0c             	sub    esp,0xc
c001533d:	68 bf 25 02 c0       	push   0xc00225bf
c0015342:	e8 24 c1 ff ff       	call   c001146b <KePanic(char const*)>
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	eb 3d                	jmp    c0015389 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001534c:	83 ec 0c             	sub    esp,0xc
c001534f:	55                   	push   ebp
c0015350:	e8 c1 66 ff ff       	call   c000ba16 <File::close()>
c0015355:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015358:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001535b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001535e:	59                   	pop    ecx
c001535f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015363:	e8 5e 27 ff ff       	call   c0007ac6 <free>
c0015368:	5b                   	pop    ebx
c0015369:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001536d:	e8 54 27 ff ff       	call   c0007ac6 <free>
c0015372:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015375:	e8 4c 27 ff ff       	call   c0007ac6 <free>
c001537a:	5e                   	pop    esi
c001537b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001537f:	e8 42 27 ff ff       	call   c0007ac6 <free>
c0015384:	83 c4 10             	add    esp,0x10
c0015387:	eb 21                	jmp    c00153aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015389:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001538d:	e9 7c fd ff ff       	jmp    c001510e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015392:	83 ec 0c             	sub    esp,0xc
c0015395:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015399:	e8 28 27 ff ff       	call   c0007ac6 <free>
c001539e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	e9 f1 fc ff ff       	jmp    c001509b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00153aa:	31 c0                	xor    eax,eax
c00153ac:	eb 33                	jmp    c00153e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00153ae:	83 ec 0c             	sub    esp,0xc
c00153b1:	55                   	push   ebp
c00153b2:	e8 5f 66 ff ff       	call   c000ba16 <File::close()>
c00153b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00153ba:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00153bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153c0:	58                   	pop    eax
c00153c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00153c5:	e8 fc 26 ff ff       	call   c0007ac6 <free>
c00153ca:	89 3c 24             	mov    DWORD PTR [esp],edi
c00153cd:	e8 f4 26 ff ff       	call   c0007ac6 <free>
c00153d2:	5a                   	pop    edx
c00153d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153d7:	e8 ea 26 ff ff       	call   c0007ac6 <free>
c00153dc:	83 c4 10             	add    esp,0x10
c00153df:	b0 01                	mov    al,0x1
c00153e1:	81 c4 5c 03 00 00    	add    esp,0x35c
c00153e7:	5b                   	pop    ebx
c00153e8:	5e                   	pop    esi
c00153e9:	5f                   	pop    edi
c00153ea:	5d                   	pop    ebp
c00153eb:	c3                   	ret    

c00153ec <Thr::getDriverBaseFromAddress(unsigned long)>:
c00153ec:	56                   	push   esi
c00153ed:	31 d2                	xor    edx,edx
c00153ef:	53                   	push   ebx
c00153f0:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00153f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00153fa:	39 d3                	cmp    ebx,edx
c00153fc:	7e 1b                	jle    c0015419 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00153fe:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c0015405:	39 c8                	cmp    eax,ecx
c0015407:	77 0d                	ja     c0015416 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015409:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015410:	01 c6                	add    esi,eax
c0015412:	39 ce                	cmp    esi,ecx
c0015414:	77 05                	ja     c001541b <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015416:	42                   	inc    edx
c0015417:	eb e1                	jmp    c00153fa <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015419:	31 c0                	xor    eax,eax
c001541b:	5b                   	pop    ebx
c001541c:	5e                   	pop    esi
c001541d:	c3                   	ret    

c001541e <Thr::getDriverNameFromAddress(unsigned long)>:
c001541e:	53                   	push   ebx
c001541f:	31 c0                	xor    eax,eax
c0015421:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015425:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001542b:	39 c3                	cmp    ebx,eax
c001542d:	7e 22                	jle    c0015451 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001542f:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c0015436:	39 ca                	cmp    edx,ecx
c0015438:	77 14                	ja     c001544e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001543a:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c0015441:	39 ca                	cmp    edx,ecx
c0015443:	76 09                	jbe    c001544e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015445:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c001544c:	eb 05                	jmp    c0015453 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001544e:	40                   	inc    eax
c001544f:	eb da                	jmp    c001542b <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015451:	31 c0                	xor    eax,eax
c0015453:	5b                   	pop    ebx
c0015454:	c3                   	ret    

c0015455 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015455:	53                   	push   ebx
c0015456:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001545a:	53                   	push   ebx
c001545b:	e8 8c ff ff ff       	call   c00153ec <Thr::getDriverBaseFromAddress(unsigned long)>
c0015460:	5a                   	pop    edx
c0015461:	31 d2                	xor    edx,edx
c0015463:	85 c0                	test   eax,eax
c0015465:	74 04                	je     c001546b <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015467:	89 da                	mov    edx,ebx
c0015469:	29 c2                	sub    edx,eax
c001546b:	89 d0                	mov    eax,edx
c001546d:	5b                   	pop    ebx
c001546e:	c3                   	ret    

c001546f <Thr::loadDLL(char const*, bool)>:
c001546f:	55                   	push   ebp
c0015470:	57                   	push   edi
c0015471:	56                   	push   esi
c0015472:	53                   	push   ebx
c0015473:	81 ec 34 01 00 00    	sub    esp,0x134
c0015479:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015480:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015487:	56                   	push   esi
c0015488:	68 d7 25 02 c0       	push   0xc00225d7
c001548d:	e8 b3 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015492:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015499:	e8 18 26 ff ff       	call   c0007ab6 <malloc>
c001549e:	83 c4 0c             	add    esp,0xc
c00154a1:	89 c3                	mov    ebx,eax
c00154a3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00154a9:	56                   	push   esi
c00154aa:	50                   	push   eax
c00154ab:	e8 ea 64 ff ff       	call   c000b99a <File::File(char const*, Process*)>
c00154b0:	83 c4 10             	add    esp,0x10
c00154b3:	85 db                	test   ebx,ebx
c00154b5:	75 3c                	jne    c00154f3 <Thr::loadDLL(char const*, bool)+0x84>
c00154b7:	89 f8                	mov    eax,edi
c00154b9:	84 c0                	test   al,al
c00154bb:	0f 84 d2 01 00 00    	je     c0015693 <Thr::loadDLL(char const*, bool)+0x224>
c00154c1:	55                   	push   ebp
c00154c2:	55                   	push   ebp
c00154c3:	68 e8 25 02 c0       	push   0xc00225e8
c00154c8:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00154cc:	55                   	push   ebp
c00154cd:	e8 6e b1 fe ff       	call   c0000640 <strcpy>
c00154d2:	58                   	pop    eax
c00154d3:	5a                   	pop    edx
c00154d4:	56                   	push   esi
c00154d5:	55                   	push   ebp
c00154d6:	e8 65 b3 fe ff       	call   c0000840 <strcat>
c00154db:	59                   	pop    ecx
c00154dc:	58                   	pop    eax
c00154dd:	68 fb 25 02 c0       	push   0xc00225fb
c00154e2:	55                   	push   ebp
c00154e3:	e8 58 b3 fe ff       	call   c0000840 <strcat>
c00154e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00154eb:	e8 7b bf ff ff       	call   c001146b <KePanic(char const*)>
c00154f0:	83 c4 10             	add    esp,0x10
c00154f3:	51                   	push   ecx
c00154f4:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00154f8:	50                   	push   eax
c00154f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00154fd:	50                   	push   eax
c00154fe:	53                   	push   ebx
c00154ff:	e8 b6 67 ff ff       	call   c000bcba <File::stat(unsigned long long*, bool*)>
c0015504:	83 c4 10             	add    esp,0x10
c0015507:	85 db                	test   ebx,ebx
c0015509:	74 0c                	je     c0015517 <Thr::loadDLL(char const*, bool)+0xa8>
c001550b:	83 ec 0c             	sub    esp,0xc
c001550e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015510:	53                   	push   ebx
c0015511:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015514:	83 c4 10             	add    esp,0x10
c0015517:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001551c:	75 0a                	jne    c0015528 <Thr::loadDLL(char const*, bool)+0xb9>
c001551e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015522:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015526:	75 3c                	jne    c0015564 <Thr::loadDLL(char const*, bool)+0xf5>
c0015528:	89 f8                	mov    eax,edi
c001552a:	84 c0                	test   al,al
c001552c:	0f 84 49 01 00 00    	je     c001567b <Thr::loadDLL(char const*, bool)+0x20c>
c0015532:	51                   	push   ecx
c0015533:	51                   	push   ecx
c0015534:	68 e8 25 02 c0       	push   0xc00225e8
c0015539:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001553d:	53                   	push   ebx
c001553e:	e8 fd b0 fe ff       	call   c0000640 <strcpy>
c0015543:	5d                   	pop    ebp
c0015544:	58                   	pop    eax
c0015545:	56                   	push   esi
c0015546:	53                   	push   ebx
c0015547:	e8 f4 b2 fe ff       	call   c0000840 <strcat>
c001554c:	58                   	pop    eax
c001554d:	5a                   	pop    edx
c001554e:	68 fb 25 02 c0       	push   0xc00225fb
c0015553:	53                   	push   ebx
c0015554:	e8 e7 b2 fe ff       	call   c0000840 <strcat>
c0015559:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001555c:	e8 0a bf ff ff       	call   c001146b <KePanic(char const*)>
c0015561:	83 c4 10             	add    esp,0x10
c0015564:	52                   	push   edx
c0015565:	6a 03                	push   0x3
c0015567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001556b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001556f:	05 ff 0f 00 00       	add    eax,0xfff
c0015574:	83 d2 00             	adc    edx,0x0
c0015577:	0f ac d0 0c          	shrd   eax,edx,0xc
c001557b:	50                   	push   eax
c001557c:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015582:	e8 9d 48 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0015587:	59                   	pop    ecx
c0015588:	89 c3                	mov    ebx,eax
c001558a:	5d                   	pop    ebp
c001558b:	50                   	push   eax
c001558c:	68 d2 0b 02 c0       	push   0xc0020bd2
c0015591:	e8 af 53 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015596:	89 34 24             	mov    DWORD PTR [esp],esi
c0015599:	e8 d2 af fe ff       	call   c0000570 <strlen>
c001559e:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c00155a4:	40                   	inc    eax
c00155a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00155a8:	e8 09 25 ff ff       	call   c0007ab6 <malloc>
c00155ad:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c00155b4:	58                   	pop    eax
c00155b5:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00155ba:	5a                   	pop    edx
c00155bb:	56                   	push   esi
c00155bc:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00155c3:	e8 78 b0 fe ff       	call   c0000640 <strcpy>
c00155c8:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00155cd:	8d 50 01             	lea    edx,[eax+0x1]
c00155d0:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c00155d7:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c00155dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00155e1:	83 c4 0c             	add    esp,0xc
c00155e4:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c00155eb:	6a 01                	push   0x1
c00155ed:	53                   	push   ebx
c00155ee:	56                   	push   esi
c00155ef:	e8 bf f6 ff ff       	call   c0014cb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00155f4:	83 c4 10             	add    esp,0x10
c00155f7:	0f b6 c0             	movzx  eax,al
c00155fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00155fe:	85 c0                	test   eax,eax
c0015600:	0f 85 89 00 00 00    	jne    c001568f <Thr::loadDLL(char const*, bool)+0x220>
c0015606:	89 f8                	mov    eax,edi
c0015608:	84 c0                	test   al,al
c001560a:	74 73                	je     c001567f <Thr::loadDLL(char const*, bool)+0x210>
c001560c:	83 ec 0c             	sub    esp,0xc
c001560f:	68 fd 25 02 c0       	push   0xc00225fd
c0015614:	e8 52 be ff ff       	call   c001146b <KePanic(char const*)>
c0015619:	83 c4 10             	add    esp,0x10
c001561c:	eb 61                	jmp    c001567f <Thr::loadDLL(char const*, bool)+0x210>
c001561e:	50                   	push   eax
c001561f:	50                   	push   eax
c0015620:	89 e8                	mov    eax,ebp
c0015622:	c1 e0 0c             	shl    eax,0xc
c0015625:	01 d8                	add    eax,ebx
c0015627:	50                   	push   eax
c0015628:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001562e:	e8 d9 42 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0015633:	83 c4 10             	add    esp,0x10
c0015636:	8b 00                	mov    eax,DWORD PTR [eax]
c0015638:	a8 60                	test   al,0x60
c001563a:	75 11                	jne    c001564d <Thr::loadDLL(char const*, bool)+0x1de>
c001563c:	83 ec 0c             	sub    esp,0xc
c001563f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015644:	50                   	push   eax
c0015645:	e8 0c 27 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c001564a:	83 c4 10             	add    esp,0x10
c001564d:	45                   	inc    ebp
c001564e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015652:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015656:	05 ff 0f 00 00       	add    eax,0xfff
c001565b:	bf 00 00 00 00       	mov    edi,0x0
c0015660:	83 d2 00             	adc    edx,0x0
c0015663:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015667:	c1 ea 0c             	shr    edx,0xc
c001566a:	39 c5                	cmp    ebp,eax
c001566c:	89 d1                	mov    ecx,edx
c001566e:	89 f8                	mov    eax,edi
c0015670:	19 c8                	sbb    eax,ecx
c0015672:	72 aa                	jb     c001561e <Thr::loadDLL(char const*, bool)+0x1af>
c0015674:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015679:	75 18                	jne    c0015693 <Thr::loadDLL(char const*, bool)+0x224>
c001567b:	31 db                	xor    ebx,ebx
c001567d:	eb 14                	jmp    c0015693 <Thr::loadDLL(char const*, bool)+0x224>
c001567f:	83 ec 0c             	sub    esp,0xc
c0015682:	68 1c 26 02 c0       	push   0xc002261c
c0015687:	e8 df bd ff ff       	call   c001146b <KePanic(char const*)>
c001568c:	83 c4 10             	add    esp,0x10
c001568f:	31 ed                	xor    ebp,ebp
c0015691:	eb bb                	jmp    c001564e <Thr::loadDLL(char const*, bool)+0x1df>
c0015693:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015699:	89 d8                	mov    eax,ebx
c001569b:	5b                   	pop    ebx
c001569c:	5e                   	pop    esi
c001569d:	5f                   	pop    edi
c001569e:	5d                   	pop    ebp
c001569f:	c3                   	ret    

c00156a0 <Thr::executeDLL(unsigned long, void*)>:
c00156a0:	56                   	push   esi
c00156a1:	53                   	push   ebx
c00156a2:	52                   	push   edx
c00156a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00156ab:	85 db                	test   ebx,ebx
c00156ad:	75 10                	jne    c00156bf <Thr::executeDLL(unsigned long, void*)+0x1f>
c00156af:	83 ec 0c             	sub    esp,0xc
c00156b2:	68 38 26 02 c0       	push   0xc0022638
c00156b7:	e8 af bd ff ff       	call   c001146b <KePanic(char const*)>
c00156bc:	83 c4 10             	add    esp,0x10
c00156bf:	50                   	push   eax
c00156c0:	50                   	push   eax
c00156c1:	53                   	push   ebx
c00156c2:	68 62 26 02 c0       	push   0xc0022662
c00156c7:	e8 79 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00156cc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00156d0:	89 d8                	mov    eax,ebx
c00156d2:	83 c4 14             	add    esp,0x14
c00156d5:	5b                   	pop    ebx
c00156d6:	5e                   	pop    esi
c00156d7:	ff e0                	jmp    eax
c00156d9:	66 90                	xchg   ax,ax
c00156db:	90                   	nop

c00156dc <userModeEntryPoint(void*)>:
c00156dc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00156e1:	83 e8 01             	sub    eax,0x1
c00156e4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00156e9:	75 01                	jne    c00156ec <userModeEntryPoint(void*)+0x10>
c00156eb:	fb                   	sti    
c00156ec:	fb                   	sti    
c00156ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156f5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00156fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156ff:	e9 3b ab fe ff       	jmp    c000023f <goToUsermode>

c0015704 <changeTSS>:
c0015704:	83 ec 14             	sub    esp,0x14
c0015707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001570c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001570f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015714:	c1 e2 15             	shl    edx,0x15
c0015717:	29 d0                	sub    eax,edx
c0015719:	50                   	push   eax
c001571a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001571f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015725:	05 7c 11 00 00       	add    eax,0x117c
c001572a:	50                   	push   eax
c001572b:	e8 24 38 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c0015730:	83 c4 1c             	add    esp,0x1c
c0015733:	c3                   	ret    

c0015734 <switchToThread(ThreadControlBlock*)>:
c0015734:	57                   	push   edi
c0015735:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001573b:	56                   	push   esi
c001573c:	85 c9                	test   ecx,ecx
c001573e:	53                   	push   ebx
c001573f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015743:	0f 85 8b 00 00 00    	jne    c00157d4 <switchToThread(ThreadControlBlock*)+0xa0>
c0015749:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c001574d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015753:	74 7b                	je     c00157d0 <switchToThread(ThreadControlBlock*)+0x9c>
c0015755:	b8 00 04 00 00       	mov    eax,0x400
c001575a:	29 d0                	sub    eax,edx
c001575c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001575f:	d1 f8                	sar    eax,1
c0015761:	01 d0                	add    eax,edx
c0015763:	90                   	nop
c0015764:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015767:	e8 1e 28 00 00       	call   c0017f8a <HalQueryPerformanceCounter()>
c001576c:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015771:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015777:	89 c6                	mov    esi,eax
c0015779:	89 d7                	mov    edi,edx
c001577b:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015781:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015786:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c001578c:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015792:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015798:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001579e:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c00157a4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00157a7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00157aa:	01 c6                	add    esi,eax
c00157ac:	11 d7                	adc    edi,edx
c00157ae:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00157b1:	83 ec 0c             	sub    esp,0xc
c00157b4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00157b7:	53                   	push   ebx
c00157b8:	e8 ba aa fe ff       	call   c0000277 <switchToThreadASM>
c00157bd:	0f 20 c0             	mov    eax,cr0
c00157c0:	83 c8 08             	or     eax,0x8
c00157c3:	0f 22 c0             	mov    cr0,eax
c00157c6:	83 c4 10             	add    esp,0x10
c00157c9:	5b                   	pop    ebx
c00157ca:	5e                   	pop    esi
c00157cb:	5f                   	pop    edi
c00157cc:	c3                   	ret    
c00157cd:	8d 76 00             	lea    esi,[esi+0x0]
c00157d0:	31 c0                	xor    eax,eax
c00157d2:	eb 90                	jmp    c0015764 <switchToThread(ThreadControlBlock*)+0x30>
c00157d4:	5b                   	pop    ebx
c00157d5:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00157df:	5e                   	pop    esi
c00157e0:	5f                   	pop    edi
c00157e1:	c3                   	ret    
c00157e2:	66 90                	xchg   ax,ax

c00157e4 <Process::addArgs(char**)>:
c00157e4:	57                   	push   edi
c00157e5:	56                   	push   esi
c00157e6:	53                   	push   ebx
c00157e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00157ef:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00157f9:	85 ff                	test   edi,edi
c00157fb:	74 4f                	je     c001584c <Process::addArgs(char**)+0x68>
c00157fd:	8b 07                	mov    eax,DWORD PTR [edi]
c00157ff:	85 c0                	test   eax,eax
c0015801:	74 49                	je     c001584c <Process::addArgs(char**)+0x68>
c0015803:	31 db                	xor    ebx,ebx
c0015805:	8d 76 00             	lea    esi,[esi+0x0]
c0015808:	83 ec 0c             	sub    esp,0xc
c001580b:	50                   	push   eax
c001580c:	e8 5f ad fe ff       	call   c0000570 <strlen>
c0015811:	83 c0 01             	add    eax,0x1
c0015814:	89 04 24             	mov    DWORD PTR [esp],eax
c0015817:	e8 9a 22 ff ff       	call   c0007ab6 <malloc>
c001581c:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015823:	5a                   	pop    edx
c0015824:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015827:	59                   	pop    ecx
c0015828:	83 c3 01             	add    ebx,0x1
c001582b:	52                   	push   edx
c001582c:	50                   	push   eax
c001582d:	e8 0e ae fe ff       	call   c0000640 <strcpy>
c0015832:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015838:	83 c4 10             	add    esp,0x10
c001583b:	83 c1 01             	add    ecx,0x1
c001583e:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015844:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015847:	85 c0                	test   eax,eax
c0015849:	75 bd                	jne    c0015808 <Process::addArgs(char**)+0x24>
c001584b:	90                   	nop
c001584c:	5b                   	pop    ebx
c001584d:	5e                   	pop    esi
c001584e:	5f                   	pop    edi
c001584f:	c3                   	ret    

c0015850 <Process::Process(char const*, Process*, char**)>:
c0015850:	56                   	push   esi
c0015851:	53                   	push   ebx
c0015852:	83 ec 14             	sub    esp,0x14
c0015855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015859:	05 0c 02 00 00       	add    eax,0x20c
c001585e:	bb 07 00 00 00       	mov    ebx,0x7
c0015863:	89 c6                	mov    esi,eax
c0015865:	8d 76 00             	lea    esi,[esi+0x0]
c0015868:	85 db                	test   ebx,ebx
c001586a:	78 14                	js     c0015880 <Process::Process(char const*, Process*, char**)+0x30>
c001586c:	83 ec 0c             	sub    esp,0xc
c001586f:	56                   	push   esi
c0015870:	e8 e3 a5 00 00       	call   c001fe58 <ThreadControlBlock::ThreadControlBlock()>
c0015875:	83 c4 10             	add    esp,0x10
c0015878:	83 c6 5f             	add    esi,0x5f
c001587b:	83 eb 01             	sub    ebx,0x1
c001587e:	eb e8                	jmp    c0015868 <Process::Process(char const*, Process*, char**)+0x18>
c0015880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015884:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001588b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001588f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015896:	83 ec 0c             	sub    esp,0xc
c0015899:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001589d:	e8 be b9 ff ff       	call   c0011260 <KeNewProcessEnv(Process*)>
c00158a2:	83 c4 10             	add    esp,0x10
c00158a5:	89 c2                	mov    edx,eax
c00158a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158ab:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00158b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158b5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00158be:	a1 80 3c 02 c0       	mov    eax,ds:0xc0023c80
c00158c3:	8d 50 01             	lea    edx,[eax+0x1]
c00158c6:	89 15 80 3c 02 c0    	mov    DWORD PTR ds:0xc0023c80,edx
c00158cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00158d0:	89 02                	mov    DWORD PTR [edx],eax
c00158d2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00158da:	83 ec 0c             	sub    esp,0xc
c00158dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00158e1:	e8 d0 21 ff ff       	call   c0007ab6 <malloc>
c00158e6:	83 c4 10             	add    esp,0x10
c00158e9:	89 c3                	mov    ebx,eax
c00158eb:	83 ec 08             	sub    esp,0x8
c00158ee:	6a 00                	push   0x0
c00158f0:	53                   	push   ebx
c00158f1:	e8 72 47 ff ff       	call   c000a068 <VAS::VAS(bool)>
c00158f6:	83 c4 10             	add    esp,0x10
c00158f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158fd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015907:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015911:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015915:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015919:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001591f:	e8 62 bf ff ff       	call   c0011886 <KeInitSignals()>
c0015924:	89 c2                	mov    edx,eax
c0015926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001592a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015934:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001593a:	85 c0                	test   eax,eax
c001593c:	74 42                	je     c0015980 <Process::Process(char const*, Process*, char**)+0x130>
c001593e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015942:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015948:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001594e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015952:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001595c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015962:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001596c:	05 0c 01 00 00       	add    eax,0x10c
c0015971:	83 ec 08             	sub    esp,0x8
c0015974:	52                   	push   edx
c0015975:	50                   	push   eax
c0015976:	e8 c5 ac fe ff       	call   c0000640 <strcpy>
c001597b:	83 c4 10             	add    esp,0x10
c001597e:	eb 64                	jmp    c00159e4 <Process::Process(char const*, Process*, char**)+0x194>
c0015980:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015988:	83 ec 0c             	sub    esp,0xc
c001598b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001598f:	e8 22 21 ff ff       	call   c0007ab6 <malloc>
c0015994:	83 c4 10             	add    esp,0x10
c0015997:	89 c3                	mov    ebx,eax
c0015999:	83 ec 08             	sub    esp,0x8
c001599c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00159a0:	53                   	push   ebx
c00159a1:	e8 c0 32 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c00159a6:	83 c4 10             	add    esp,0x10
c00159a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159ad:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00159b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00159bd:	83 ec 0c             	sub    esp,0xc
c00159c0:	50                   	push   eax
c00159c1:	e8 3e 2b ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c00159c6:	83 c4 10             	add    esp,0x10
c00159c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159cd:	05 0c 01 00 00       	add    eax,0x10c
c00159d2:	83 ec 08             	sub    esp,0x8
c00159d5:	68 81 26 02 c0       	push   0xc0022681
c00159da:	50                   	push   eax
c00159db:	e8 60 ac fe ff       	call   c0000640 <strcpy>
c00159e0:	83 c4 10             	add    esp,0x10
c00159e3:	90                   	nop
c00159e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159e8:	83 c0 0c             	add    eax,0xc
c00159eb:	83 ec 08             	sub    esp,0x8
c00159ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00159f2:	50                   	push   eax
c00159f3:	e8 48 ac fe ff       	call   c0000640 <strcpy>
c00159f8:	83 c4 10             	add    esp,0x10
c00159fb:	83 ec 08             	sub    esp,0x8
c00159fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015a02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a06:	e8 d9 fd ff ff       	call   c00157e4 <Process::addArgs(char**)>
c0015a0b:	83 c4 10             	add    esp,0x10
c0015a0e:	83 ec 08             	sub    esp,0x8
c0015a11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a19:	e8 63 ed ff ff       	call   c0014781 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015a1e:	83 c4 10             	add    esp,0x10
c0015a21:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015a25:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015a29:	83 f0 01             	xor    eax,0x1
c0015a2c:	88 c2                	mov    dl,al
c0015a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a32:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015a38:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015a3d:	83 ec 04             	sub    esp,0x4
c0015a40:	50                   	push   eax
c0015a41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a45:	68 d8 26 02 c0       	push   0xc00226d8
c0015a4a:	e8 f6 4e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015a4f:	83 c4 10             	add    esp,0x10
c0015a52:	90                   	nop
c0015a53:	83 c4 14             	add    esp,0x14
c0015a56:	5b                   	pop    ebx
c0015a57:	5e                   	pop    esi
c0015a58:	c3                   	ret    
c0015a59:	90                   	nop
c0015a5a:	66 90                	xchg   ax,ax

c0015a5c <Process::Process(bool, char const*, Process*, char**)>:
c0015a5c:	56                   	push   esi
c0015a5d:	53                   	push   ebx
c0015a5e:	83 ec 24             	sub    esp,0x24
c0015a61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a65:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015a69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a6d:	05 0c 02 00 00       	add    eax,0x20c
c0015a72:	bb 07 00 00 00       	mov    ebx,0x7
c0015a77:	89 c6                	mov    esi,eax
c0015a79:	8d 76 00             	lea    esi,[esi+0x0]
c0015a7c:	85 db                	test   ebx,ebx
c0015a7e:	78 14                	js     c0015a94 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015a80:	83 ec 0c             	sub    esp,0xc
c0015a83:	56                   	push   esi
c0015a84:	e8 cf a3 00 00       	call   c001fe58 <ThreadControlBlock::ThreadControlBlock()>
c0015a89:	83 c4 10             	add    esp,0x10
c0015a8c:	83 c6 5f             	add    esi,0x5f
c0015a8f:	83 eb 01             	sub    ebx,0x1
c0015a92:	eb e8                	jmp    c0015a7c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015a94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a98:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015a9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015aa3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015aaa:	83 ec 0c             	sub    esp,0xc
c0015aad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015ab1:	e8 aa b7 ff ff       	call   c0011260 <KeNewProcessEnv(Process*)>
c0015ab6:	83 c4 10             	add    esp,0x10
c0015ab9:	89 c2                	mov    edx,eax
c0015abb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015abf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015ac5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ac9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015ad2:	a1 80 3c 02 c0       	mov    eax,ds:0xc0023c80
c0015ad7:	8d 50 01             	lea    edx,[eax+0x1]
c0015ada:	89 15 80 3c 02 c0    	mov    DWORD PTR ds:0xc0023c80,edx
c0015ae0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015ae4:	89 02                	mov    DWORD PTR [edx],eax
c0015ae6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015aee:	83 ec 0c             	sub    esp,0xc
c0015af1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015af5:	e8 bc 1f ff ff       	call   c0007ab6 <malloc>
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	89 c3                	mov    ebx,eax
c0015aff:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015b04:	83 ec 08             	sub    esp,0x8
c0015b07:	50                   	push   eax
c0015b08:	53                   	push   ebx
c0015b09:	e8 5a 45 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015b0e:	83 c4 10             	add    esp,0x10
c0015b11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b15:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015b1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b1f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b2d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015b31:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015b37:	e8 4a bd ff ff       	call   c0011886 <KeInitSignals()>
c0015b3c:	89 c2                	mov    edx,eax
c0015b3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b42:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015b48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b4c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b52:	85 c0                	test   eax,eax
c0015b54:	74 42                	je     c0015b98 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015b56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b5a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b60:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b6a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b74:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b7a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015b80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b84:	05 0c 01 00 00       	add    eax,0x10c
c0015b89:	83 ec 08             	sub    esp,0x8
c0015b8c:	52                   	push   edx
c0015b8d:	50                   	push   eax
c0015b8e:	e8 ad aa fe ff       	call   c0000640 <strcpy>
c0015b93:	83 c4 10             	add    esp,0x10
c0015b96:	eb 64                	jmp    c0015bfc <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015b98:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015ba0:	83 ec 0c             	sub    esp,0xc
c0015ba3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015ba7:	e8 0a 1f ff ff       	call   c0007ab6 <malloc>
c0015bac:	83 c4 10             	add    esp,0x10
c0015baf:	89 c3                	mov    ebx,eax
c0015bb1:	83 ec 08             	sub    esp,0x8
c0015bb4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015bb8:	53                   	push   ebx
c0015bb9:	e8 a8 30 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015bbe:	83 c4 10             	add    esp,0x10
c0015bc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bc5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015bcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bcf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015bd5:	83 ec 0c             	sub    esp,0xc
c0015bd8:	50                   	push   eax
c0015bd9:	e8 26 29 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015bde:	83 c4 10             	add    esp,0x10
c0015be1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015be5:	05 0c 01 00 00       	add    eax,0x10c
c0015bea:	83 ec 08             	sub    esp,0x8
c0015bed:	68 81 26 02 c0       	push   0xc0022681
c0015bf2:	50                   	push   eax
c0015bf3:	e8 48 aa fe ff       	call   c0000640 <strcpy>
c0015bf8:	83 c4 10             	add    esp,0x10
c0015bfb:	90                   	nop
c0015bfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c00:	83 c0 0c             	add    eax,0xc
c0015c03:	83 ec 08             	sub    esp,0x8
c0015c06:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015c0a:	50                   	push   eax
c0015c0b:	e8 30 aa fe ff       	call   c0000640 <strcpy>
c0015c10:	83 c4 10             	add    esp,0x10
c0015c13:	83 ec 08             	sub    esp,0x8
c0015c16:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015c1a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c1e:	e8 c1 fb ff ff       	call   c00157e4 <Process::addArgs(char**)>
c0015c23:	83 c4 10             	add    esp,0x10
c0015c26:	90                   	nop
c0015c27:	83 c4 24             	add    esp,0x24
c0015c2a:	5b                   	pop    ebx
c0015c2b:	5e                   	pop    esi
c0015c2c:	c3                   	ret    
c0015c2d:	8d 76 00             	lea    esi,[esi+0x0]

c0015c30 <taskStartupFunction>:
c0015c30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c35:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015c38:	c3                   	ret    
c0015c39:	90                   	nop
c0015c3a:	66 90                	xchg   ax,ax

c0015c3c <Semaphore::Semaphore(int)>:
c0015c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c44:	89 10                	mov    DWORD PTR [eax],edx
c0015c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c4a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015c51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c60:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015c67:	90                   	nop
c0015c68:	c3                   	ret    
c0015c69:	90                   	nop
c0015c6a:	66 90                	xchg   ax,ax

c0015c6c <Mutex::Mutex()>:
c0015c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c70:	6a 01                	push   0x1
c0015c72:	50                   	push   eax
c0015c73:	e8 c4 ff ff ff       	call   c0015c3c <Semaphore::Semaphore(int)>
c0015c78:	83 c4 08             	add    esp,0x8
c0015c7b:	90                   	nop
c0015c7c:	c3                   	ret    
c0015c7d:	90                   	nop
c0015c7e:	66 90                	xchg   ax,ax

c0015c80 <Process::createThread(void (*)(void*), void*, int)>:
c0015c80:	57                   	push   edi
c0015c81:	31 c9                	xor    ecx,ecx
c0015c83:	56                   	push   esi
c0015c84:	53                   	push   ebx
c0015c85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c89:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015c90:	89 f2                	mov    edx,esi
c0015c92:	66 90                	xchg   ax,ax
c0015c94:	0f b7 c2             	movzx  eax,dx
c0015c97:	80 e2 01             	and    dl,0x1
c0015c9a:	74 14                	je     c0015cb0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015c9c:	d1 f8                	sar    eax,1
c0015c9e:	83 c1 01             	add    ecx,0x1
c0015ca1:	89 c2                	mov    edx,eax
c0015ca3:	83 f9 10             	cmp    ecx,0x10
c0015ca6:	75 ec                	jne    c0015c94 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015ca8:	31 db                	xor    ebx,ebx
c0015caa:	89 d8                	mov    eax,ebx
c0015cac:	5b                   	pop    ebx
c0015cad:	5e                   	pop    esi
c0015cae:	5f                   	pop    edi
c0015caf:	c3                   	ret    
c0015cb0:	b8 01 00 00 00       	mov    eax,0x1
c0015cb5:	d3 e0                	shl    eax,cl
c0015cb7:	09 c6                	or     esi,eax
c0015cb9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015cbc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015cc3:	01 c0                	add    eax,eax
c0015cc5:	01 c8                	add    eax,ecx
c0015cc7:	8d 04 80             	lea    eax,[eax+eax*4]
c0015cca:	01 d8                	add    eax,ebx
c0015ccc:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015cd3:	75 0b                	jne    c0015ce0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015cd5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015cdf:	90                   	nop
c0015ce0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015ce6:	83 ec 0c             	sub    esp,0xc
c0015ce9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015cec:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015cef:	01 c0                	add    eax,eax
c0015cf1:	01 c8                	add    eax,ecx
c0015cf3:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015cf6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015cf9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015cff:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015d05:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015d09:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015d0f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015d15:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015d1b:	89 ca                	mov    edx,ecx
c0015d1d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015d24:	f7 da                	neg    edx
c0015d26:	c1 e2 15             	shl    edx,0x15
c0015d29:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015d2f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015d35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015d39:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015d43:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015d49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d4d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015d53:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015d5d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015d67:	68 00 01 00 00       	push   0x100
c0015d6c:	e8 45 1d ff ff       	call   c0007ab6 <malloc>
c0015d71:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015d74:	58                   	pop    eax
c0015d75:	5a                   	pop    edx
c0015d76:	53                   	push   ebx
c0015d77:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015d7c:	e8 6f 9e 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d81:	83 c4 10             	add    esp,0x10
c0015d84:	89 d8                	mov    eax,ebx
c0015d86:	5b                   	pop    ebx
c0015d87:	5e                   	pop    esi
c0015d88:	5f                   	pop    edi
c0015d89:	c3                   	ret    
c0015d8a:	66 90                	xchg   ax,ax

c0015d8c <Process::createUserThread()>:
c0015d8c:	83 ec 0c             	sub    esp,0xc
c0015d8f:	68 80 00 00 00       	push   0x80
c0015d94:	6a 00                	push   0x0
c0015d96:	68 dc 56 01 c0       	push   0xc00156dc
c0015d9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d9f:	50                   	push   eax
c0015da0:	e8 db fe ff ff       	call   c0015c80 <Process::createThread(void (*)(void*), void*, int)>
c0015da5:	83 c4 1c             	add    esp,0x1c
c0015da8:	c3                   	ret    
c0015da9:	8d 76 00             	lea    esi,[esi+0x0]

c0015dac <setupMultitasking(void (*)())>:
c0015dac:	56                   	push   esi
c0015dad:	53                   	push   ebx
c0015dae:	83 ec 04             	sub    esp,0x4
c0015db1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015db5:	eb 11                	jmp    c0015dc8 <setupMultitasking(void (*)())+0x1c>
c0015db7:	90                   	nop
c0015db8:	83 ec 0c             	sub    esp,0xc
c0015dbb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015dc0:	e8 6f 9d 00 00       	call   c001fb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015dc5:	83 c4 10             	add    esp,0x10
c0015dc8:	83 ec 0c             	sub    esp,0xc
c0015dcb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015dd0:	e8 3b 9d 00 00       	call   c001fb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015dd5:	83 c4 10             	add    esp,0x10
c0015dd8:	84 c0                	test   al,al
c0015dda:	74 dc                	je     c0015db8 <setupMultitasking(void (*)())+0xc>
c0015ddc:	83 ec 0c             	sub    esp,0xc
c0015ddf:	68 24 07 00 00       	push   0x724
c0015de4:	e8 cd 1c ff ff       	call   c0007ab6 <malloc>
c0015de9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015df0:	89 c3                	mov    ebx,eax
c0015df2:	6a 00                	push   0x0
c0015df4:	68 85 26 02 c0       	push   0xc0022685
c0015df9:	6a 01                	push   0x1
c0015dfb:	50                   	push   eax
c0015dfc:	e8 5b fc ff ff       	call   c0015a5c <Process::Process(bool, char const*, Process*, char**)>
c0015e01:	83 c4 14             	add    esp,0x14
c0015e04:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015e0a:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015e10:	50                   	push   eax
c0015e11:	e8 43 29 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015e16:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015e1d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015e27:	83 c8 01             	or     eax,0x1
c0015e2a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015e31:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015e37:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015e3a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015e44:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015e4a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015e50:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015e5a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015e64:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015e6e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015e74:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015e7e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015e84:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015e8e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015e95:	e8 1c 1c ff ff       	call   c0007ab6 <malloc>
c0015e9a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015ea0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015ea6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015eac:	5a                   	pop    edx
c0015ead:	59                   	pop    ecx
c0015eae:	68 81 26 02 c0       	push   0xc0022681
c0015eb3:	50                   	push   eax
c0015eb4:	e8 87 a7 fe ff       	call   c0000640 <strcpy>
c0015eb9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015ec0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015ec4:	83 c4 14             	add    esp,0x14
c0015ec7:	5b                   	pop    ebx
c0015ec8:	5e                   	pop    esi
c0015ec9:	e9 9b a3 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015ece:	66 90                	xchg   ax,ax

c0015ed0 <schedule()>:
c0015ed0:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0015ed6:	85 d2                	test   edx,edx
c0015ed8:	74 0e                	je     c0015ee8 <schedule()+0x18>
c0015eda:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015ee4:	c3                   	ret    
c0015ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ee8:	53                   	push   ebx
c0015ee9:	83 ec 14             	sub    esp,0x14
c0015eec:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015ef1:	e8 1a 9c 00 00       	call   c001fb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ef6:	83 c4 10             	add    esp,0x10
c0015ef9:	84 c0                	test   al,al
c0015efb:	75 3f                	jne    c0015f3c <schedule()+0x6c>
c0015efd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f02:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015f05:	83 fa 01             	cmp    edx,0x1
c0015f08:	74 3a                	je     c0015f44 <schedule()+0x74>
c0015f0a:	66 90                	xchg   ax,ax
c0015f0c:	83 ec 0c             	sub    esp,0xc
c0015f0f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f14:	e8 13 9c 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f19:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0015f20:	89 c3                	mov    ebx,eax
c0015f22:	e8 0d 9c 00 00       	call   c001fb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f27:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015f2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f31:	e8 fe f7 ff ff       	call   c0015734 <switchToThread(ThreadControlBlock*)>
c0015f36:	83 c4 10             	add    esp,0x10
c0015f39:	8d 76 00             	lea    esi,[esi+0x0]
c0015f3c:	83 c4 08             	add    esp,0x8
c0015f3f:	5b                   	pop    ebx
c0015f40:	c3                   	ret    
c0015f41:	8d 76 00             	lea    esi,[esi+0x0]
c0015f44:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015f4b:	83 ec 08             	sub    esp,0x8
c0015f4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f53:	50                   	push   eax
c0015f54:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f59:	e8 92 9c 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f5e:	83 c4 10             	add    esp,0x10
c0015f61:	eb a9                	jmp    c0015f0c <schedule()+0x3c>
c0015f63:	90                   	nop

c0015f64 <Semaphore::tryAcquire()>:
c0015f64:	53                   	push   ebx
c0015f65:	83 ec 08             	sub    esp,0x8
c0015f68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f6c:	fa                   	cli    
c0015f6d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015f72:	8d 50 01             	lea    edx,[eax+0x1]
c0015f75:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0015f7b:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0015f81:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015f84:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0015f8a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015f8d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015f8f:	7c 33                	jl     c0015fc4 <Semaphore::tryAcquire()+0x60>
c0015f91:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0015f97:	85 d2                	test   edx,edx
c0015f99:	75 0d                	jne    c0015fa8 <Semaphore::tryAcquire()+0x44>
c0015f9b:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c0015fa1:	85 d2                	test   edx,edx
c0015fa3:	75 6f                	jne    c0016014 <Semaphore::tryAcquire()+0xb0>
c0015fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0015fa8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015fad:	85 c0                	test   eax,eax
c0015faf:	74 0b                	je     c0015fbc <Semaphore::tryAcquire()+0x58>
c0015fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0015fb4:	31 c0                	xor    eax,eax
c0015fb6:	83 c4 08             	add    esp,0x8
c0015fb9:	5b                   	pop    ebx
c0015fba:	c3                   	ret    
c0015fbb:	90                   	nop
c0015fbc:	fb                   	sti    
c0015fbd:	83 c4 08             	add    esp,0x8
c0015fc0:	5b                   	pop    ebx
c0015fc1:	c3                   	ret    
c0015fc2:	66 90                	xchg   ax,ax
c0015fc4:	83 c3 01             	add    ebx,0x1
c0015fc7:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0015fcd:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015fd0:	85 d2                	test   edx,edx
c0015fd2:	75 24                	jne    c0015ff8 <Semaphore::tryAcquire()+0x94>
c0015fd4:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c0015fda:	85 c9                	test   ecx,ecx
c0015fdc:	74 1a                	je     c0015ff8 <Semaphore::tryAcquire()+0x94>
c0015fde:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0015fe8:	e8 e3 fe ff ff       	call   c0015ed0 <schedule()>
c0015fed:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015ff2:	83 e8 01             	sub    eax,0x1
c0015ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ff8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015ffd:	85 c0                	test   eax,eax
c0015fff:	75 0b                	jne    c001600c <Semaphore::tryAcquire()+0xa8>
c0016001:	fb                   	sti    
c0016002:	b0 01                	mov    al,0x1
c0016004:	83 c4 08             	add    esp,0x8
c0016007:	5b                   	pop    ebx
c0016008:	c3                   	ret    
c0016009:	8d 76 00             	lea    esi,[esi+0x0]
c001600c:	b0 01                	mov    al,0x1
c001600e:	83 c4 08             	add    esp,0x8
c0016011:	5b                   	pop    ebx
c0016012:	c3                   	ret    
c0016013:	90                   	nop
c0016014:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001601e:	e8 ad fe ff ff       	call   c0015ed0 <schedule()>
c0016023:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016028:	83 e8 01             	sub    eax,0x1
c001602b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016030:	85 c0                	test   eax,eax
c0016032:	75 80                	jne    c0015fb4 <Semaphore::tryAcquire()+0x50>
c0016034:	eb 86                	jmp    c0015fbc <Semaphore::tryAcquire()+0x58>
c0016036:	66 90                	xchg   ax,ax

c0016038 <Semaphore::assertLocked(char const*)>:
c0016038:	83 ec 0c             	sub    esp,0xc
c001603b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001603f:	fa                   	cli    
c0016040:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016046:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001604b:	83 c1 01             	add    ecx,0x1
c001604e:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016054:	8d 48 01             	lea    ecx,[eax+0x1]
c0016057:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001605d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001605f:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0016062:	7c 28                	jl     c001608c <Semaphore::assertLocked(char const*)+0x54>
c0016064:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016069:	85 c0                	test   eax,eax
c001606b:	75 0b                	jne    c0016078 <Semaphore::assertLocked(char const*)+0x40>
c001606d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016072:	85 c0                	test   eax,eax
c0016074:	75 32                	jne    c00160a8 <Semaphore::assertLocked(char const*)+0x70>
c0016076:	66 90                	xchg   ax,ax
c0016078:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001607d:	83 e8 01             	sub    eax,0x1
c0016080:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016085:	75 01                	jne    c0016088 <Semaphore::assertLocked(char const*)+0x50>
c0016087:	fb                   	sti    
c0016088:	83 c4 0c             	add    esp,0xc
c001608b:	c3                   	ret    
c001608c:	83 ec 0c             	sub    esp,0xc
c001608f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016093:	52                   	push   edx
c0016094:	e8 d2 b3 ff ff       	call   c001146b <KePanic(char const*)>
c0016099:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001609e:	83 c4 10             	add    esp,0x10
c00160a1:	83 e8 01             	sub    eax,0x1
c00160a4:	eb be                	jmp    c0016064 <Semaphore::assertLocked(char const*)+0x2c>
c00160a6:	66 90                	xchg   ax,ax
c00160a8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00160b2:	e8 19 fe ff ff       	call   c0015ed0 <schedule()>
c00160b7:	eb bf                	jmp    c0016078 <Semaphore::assertLocked(char const*)+0x40>
c00160b9:	8d 76 00             	lea    esi,[esi+0x0]

c00160bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00160bc:	83 ec 0c             	sub    esp,0xc
c00160bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00160cb:	e8 00 fe ff ff       	call   c0015ed0 <schedule()>
c00160d0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00160d5:	83 e8 01             	sub    eax,0x1
c00160d8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00160dd:	75 01                	jne    c00160e0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00160df:	fb                   	sti    
c00160e0:	83 c4 0c             	add    esp,0xc
c00160e3:	c3                   	ret    

c00160e4 <blockTask(TaskState)>:
c00160e4:	83 ec 0c             	sub    esp,0xc
c00160e7:	fa                   	cli    
c00160e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00160ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160f1:	83 c0 01             	add    eax,0x1
c00160f4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00160f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016101:	e8 ca fd ff ff       	call   c0015ed0 <schedule()>
c0016106:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001610b:	83 e8 01             	sub    eax,0x1
c001610e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016113:	75 03                	jne    c0016118 <blockTask(TaskState)+0x34>
c0016115:	fb                   	sti    
c0016116:	66 90                	xchg   ax,ax
c0016118:	83 c4 0c             	add    esp,0xc
c001611b:	c3                   	ret    

c001611c <waitTask(int, int*, int)>:
c001611c:	83 ec 18             	sub    esp,0x18
c001611f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016124:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016128:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001612b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001612f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016134:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016137:	6a 07                	push   0x7
c0016139:	e8 a6 ff ff ff       	call   c00160e4 <blockTask(TaskState)>
c001613e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016143:	83 c4 10             	add    esp,0x10
c0016146:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016149:	85 d2                	test   edx,edx
c001614b:	74 0b                	je     c0016158 <waitTask(int, int*, int)+0x3c>
c001614d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016150:	89 02                	mov    DWORD PTR [edx],eax
c0016152:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016157:	90                   	nop
c0016158:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001615b:	83 c4 0c             	add    esp,0xc
c001615e:	c3                   	ret    
c001615f:	90                   	nop

c0016160 <milliTenthSleepUntil(unsigned int)>:
c0016160:	83 ec 0c             	sub    esp,0xc
c0016163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016167:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c001616d:	76 05                	jbe    c0016174 <milliTenthSleepUntil(unsigned int)+0x14>
c001616f:	90                   	nop
c0016170:	83 c4 0c             	add    esp,0xc
c0016173:	c3                   	ret    
c0016174:	fa                   	cli    
c0016175:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001617b:	83 ec 08             	sub    esp,0x8
c001617e:	83 c2 01             	add    edx,0x1
c0016181:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016187:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001618d:	83 c1 01             	add    ecx,0x1
c0016190:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016196:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001619c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001619f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161a4:	50                   	push   eax
c00161a5:	68 d8 c6 02 c0       	push   0xc002c6d8
c00161aa:	e8 41 9a 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00161af:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00161b6:	e8 29 ff ff ff       	call   c00160e4 <blockTask(TaskState)>
c00161bb:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00161c0:	83 c4 10             	add    esp,0x10
c00161c3:	83 e8 01             	sub    eax,0x1
c00161c6:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00161cb:	85 c0                	test   eax,eax
c00161cd:	75 09                	jne    c00161d8 <milliTenthSleepUntil(unsigned int)+0x78>
c00161cf:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00161d4:	85 c0                	test   eax,eax
c00161d6:	75 14                	jne    c00161ec <milliTenthSleepUntil(unsigned int)+0x8c>
c00161d8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161dd:	83 e8 01             	sub    eax,0x1
c00161e0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161e5:	75 89                	jne    c0016170 <milliTenthSleepUntil(unsigned int)+0x10>
c00161e7:	fb                   	sti    
c00161e8:	83 c4 0c             	add    esp,0xc
c00161eb:	c3                   	ret    
c00161ec:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161f6:	e8 d5 fc ff ff       	call   c0015ed0 <schedule()>
c00161fb:	eb db                	jmp    c00161d8 <milliTenthSleepUntil(unsigned int)+0x78>
c00161fd:	8d 76 00             	lea    esi,[esi+0x0]

c0016200 <milliTenthSleep(unsigned int)>:
c0016200:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016204:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016209:	01 c2                	add    edx,eax
c001620b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001620f:	e9 4c ff ff ff       	jmp    c0016160 <milliTenthSleepUntil(unsigned int)>

c0016214 <sleep(unsigned int)>:
c0016214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016218:	8d 04 80             	lea    eax,[eax+eax*4]
c001621b:	8d 04 80             	lea    eax,[eax+eax*4]
c001621e:	8d 04 80             	lea    eax,[eax+eax*4]
c0016221:	8d 04 80             	lea    eax,[eax+eax*4]
c0016224:	c1 e0 04             	shl    eax,0x4
c0016227:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001622b:	eb d3                	jmp    c0016200 <milliTenthSleep(unsigned int)>
c001622d:	90                   	nop
c001622e:	66 90                	xchg   ax,ax

c0016230 <Semaphore::acquire()>:
c0016230:	83 ec 0c             	sub    esp,0xc
c0016233:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016237:	fa                   	cli    
c0016238:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001623d:	83 c0 01             	add    eax,0x1
c0016240:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016245:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001624a:	8d 48 01             	lea    ecx,[eax+0x1]
c001624d:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016253:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016256:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016258:	7d 2e                	jge    c0016288 <Semaphore::acquire()+0x58>
c001625a:	83 c1 01             	add    ecx,0x1
c001625d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016260:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016265:	85 c0                	test   eax,eax
c0016267:	75 0b                	jne    c0016274 <Semaphore::acquire()+0x44>
c0016269:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001626e:	85 c0                	test   eax,eax
c0016270:	75 66                	jne    c00162d8 <Semaphore::acquire()+0xa8>
c0016272:	66 90                	xchg   ax,ax
c0016274:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016279:	83 e8 01             	sub    eax,0x1
c001627c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016281:	75 01                	jne    c0016284 <Semaphore::acquire()+0x54>
c0016283:	fb                   	sti    
c0016284:	83 c4 0c             	add    esp,0xc
c0016287:	c3                   	ret    
c0016288:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001628d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016294:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016297:	85 c9                	test   ecx,ecx
c0016299:	74 51                	je     c00162ec <Semaphore::acquire()+0xbc>
c001629b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001629e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00162a4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00162a7:	90                   	nop
c00162a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162ad:	83 ec 0c             	sub    esp,0xc
c00162b0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00162b3:	68 04 27 02 c0       	push   0xc0022704
c00162b8:	e8 88 46 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00162bd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00162c4:	e8 1b fe ff ff       	call   c00160e4 <blockTask(TaskState)>
c00162c9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162ce:	83 c4 10             	add    esp,0x10
c00162d1:	83 e8 01             	sub    eax,0x1
c00162d4:	eb 8a                	jmp    c0016260 <Semaphore::acquire()+0x30>
c00162d6:	66 90                	xchg   ax,ax
c00162d8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162e2:	e8 e9 fb ff ff       	call   c0015ed0 <schedule()>
c00162e7:	eb 8b                	jmp    c0016274 <Semaphore::acquire()+0x44>
c00162e9:	8d 76 00             	lea    esi,[esi+0x0]
c00162ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162f1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00162f4:	eb b2                	jmp    c00162a8 <Semaphore::acquire()+0x78>
c00162f6:	66 90                	xchg   ax,ax

c00162f8 <taskReturned>:
c00162f8:	83 ec 18             	sub    esp,0x18
c00162fb:	68 24 27 02 c0       	push   0xc0022724
c0016300:	e8 66 b1 ff ff       	call   c001146b <KePanic(char const*)>
c0016305:	83 c4 10             	add    esp,0x10
c0016308:	83 ec 0c             	sub    esp,0xc
c001630b:	6a 02                	push   0x2
c001630d:	e8 d2 fd ff ff       	call   c00160e4 <blockTask(TaskState)>
c0016312:	fa                   	cli    
c0016313:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016318:	83 c0 01             	add    eax,0x1
c001631b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016320:	e8 ab fb ff ff       	call   c0015ed0 <schedule()>
c0016325:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001632a:	83 c4 10             	add    esp,0x10
c001632d:	83 e8 01             	sub    eax,0x1
c0016330:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016335:	85 c0                	test   eax,eax
c0016337:	75 cf                	jne    c0016308 <taskReturned+0x10>
c0016339:	fb                   	sti    
c001633a:	eb cc                	jmp    c0016308 <taskReturned+0x10>

c001633c <Thr::processFromPID(int)>:
c001633c:	57                   	push   edi
c001633d:	56                   	push   esi
c001633e:	53                   	push   ebx
c001633f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016343:	fa                   	cli    
c0016344:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001634a:	83 ec 0c             	sub    esp,0xc
c001634d:	83 c1 01             	add    ecx,0x1
c0016350:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016355:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001635b:	e8 cc 97 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016360:	83 c4 10             	add    esp,0x10
c0016363:	89 c7                	mov    edi,eax
c0016365:	eb 15                	jmp    c001637c <Thr::processFromPID(int)+0x40>
c0016367:	90                   	nop
c0016368:	83 ec 0c             	sub    esp,0xc
c001636b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016370:	e8 b7 97 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016375:	83 c4 10             	add    esp,0x10
c0016378:	39 f8                	cmp    eax,edi
c001637a:	74 50                	je     c00163cc <Thr::processFromPID(int)+0x90>
c001637c:	83 ec 0c             	sub    esp,0xc
c001637f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016384:	e8 a3 97 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016389:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016390:	89 c3                	mov    ebx,eax
c0016392:	e8 9d 97 00 00       	call   c001fb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016397:	58                   	pop    eax
c0016398:	5a                   	pop    edx
c0016399:	53                   	push   ebx
c001639a:	68 e4 c6 02 c0       	push   0xc002c6e4
c001639f:	e8 4c 98 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163a4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163a7:	83 c4 10             	add    esp,0x10
c00163aa:	39 30                	cmp    DWORD PTR [eax],esi
c00163ac:	75 ba                	jne    c0016368 <Thr::processFromPID(int)+0x2c>
c00163ae:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163b3:	83 e8 01             	sub    eax,0x1
c00163b6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163bb:	74 0b                	je     c00163c8 <Thr::processFromPID(int)+0x8c>
c00163bd:	8d 76 00             	lea    esi,[esi+0x0]
c00163c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163c3:	5b                   	pop    ebx
c00163c4:	5e                   	pop    esi
c00163c5:	5f                   	pop    edi
c00163c6:	c3                   	ret    
c00163c7:	90                   	nop
c00163c8:	fb                   	sti    
c00163c9:	eb f5                	jmp    c00163c0 <Thr::processFromPID(int)+0x84>
c00163cb:	90                   	nop
c00163cc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163d1:	83 e8 01             	sub    eax,0x1
c00163d4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163d9:	75 05                	jne    c00163e0 <Thr::processFromPID(int)+0xa4>
c00163db:	fb                   	sti    
c00163dc:	5b                   	pop    ebx
c00163dd:	5e                   	pop    esi
c00163de:	5f                   	pop    edi
c00163df:	c3                   	ret    
c00163e0:	5b                   	pop    ebx
c00163e1:	31 c0                	xor    eax,eax
c00163e3:	5e                   	pop    esi
c00163e4:	5f                   	pop    edi
c00163e5:	c3                   	ret    
c00163e6:	66 90                	xchg   ax,ax

c00163e8 <unblockTask(ThreadControlBlock*)>:
c00163e8:	53                   	push   ebx
c00163e9:	83 ec 08             	sub    esp,0x8
c00163ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00163f0:	fa                   	cli    
c00163f1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163f6:	83 c0 01             	add    eax,0x1
c00163f9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163fe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016401:	85 c0                	test   eax,eax
c0016403:	74 67                	je     c001646c <unblockTask(ThreadControlBlock*)+0x84>
c0016405:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016408:	83 f8 01             	cmp    eax,0x1
c001640b:	74 37                	je     c0016444 <unblockTask(ThreadControlBlock*)+0x5c>
c001640d:	83 ec 0c             	sub    esp,0xc
c0016410:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016415:	e8 12 97 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001641a:	83 c4 10             	add    esp,0x10
c001641d:	85 c0                	test   eax,eax
c001641f:	75 1b                	jne    c001643c <unblockTask(ThreadControlBlock*)+0x54>
c0016421:	eb 5d                	jmp    c0016480 <unblockTask(ThreadControlBlock*)+0x98>
c0016423:	90                   	nop
c0016424:	83 ec 08             	sub    esp,0x8
c0016427:	50                   	push   eax
c0016428:	68 e4 c6 02 c0       	push   0xc002c6e4
c001642d:	e8 1a 9a 00 00       	call   c001fe4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016432:	83 c4 10             	add    esp,0x10
c0016435:	85 c0                	test   eax,eax
c0016437:	74 47                	je     c0016480 <unblockTask(ThreadControlBlock*)+0x98>
c0016439:	8d 76 00             	lea    esi,[esi+0x0]
c001643c:	39 c3                	cmp    ebx,eax
c001643e:	75 e4                	jne    c0016424 <unblockTask(ThreadControlBlock*)+0x3c>
c0016440:	eb 12                	jmp    c0016454 <unblockTask(ThreadControlBlock*)+0x6c>
c0016442:	66 90                	xchg   ax,ax
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	68 a3 26 02 c0       	push   0xc00226a3
c001644c:	e8 f4 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016451:	83 c4 10             	add    esp,0x10
c0016454:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016459:	83 e8 01             	sub    eax,0x1
c001645c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016461:	75 01                	jne    c0016464 <unblockTask(ThreadControlBlock*)+0x7c>
c0016463:	fb                   	sti    
c0016464:	83 c4 08             	add    esp,0x8
c0016467:	5b                   	pop    ebx
c0016468:	c3                   	ret    
c0016469:	8d 76 00             	lea    esi,[esi+0x0]
c001646c:	83 ec 0c             	sub    esp,0xc
c001646f:	68 8c 26 02 c0       	push   0xc002268c
c0016474:	e8 cc 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016479:	83 c4 10             	add    esp,0x10
c001647c:	eb d6                	jmp    c0016454 <unblockTask(ThreadControlBlock*)+0x6c>
c001647e:	66 90                	xchg   ax,ax
c0016480:	83 ec 08             	sub    esp,0x8
c0016483:	53                   	push   ebx
c0016484:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016489:	e8 62 97 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001648e:	83 c4 10             	add    esp,0x10
c0016491:	eb c1                	jmp    c0016454 <unblockTask(ThreadControlBlock*)+0x6c>
c0016493:	90                   	nop

c0016494 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016494:	55                   	push   ebp
c0016495:	57                   	push   edi
c0016496:	56                   	push   esi
c0016497:	53                   	push   ebx
c0016498:	83 ec 1c             	sub    esp,0x1c
c001649b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001649f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164a2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00164a8:	85 ed                	test   ebp,ebp
c00164aa:	7e 28                	jle    c00164d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00164ac:	31 f6                	xor    esi,esi
c00164ae:	66 90                	xchg   ax,ax
c00164b0:	83 ec 0c             	sub    esp,0xc
c00164b3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00164ba:	83 c6 01             	add    esi,0x1
c00164bd:	57                   	push   edi
c00164be:	e8 03 16 ff ff       	call   c0007ac6 <free>
c00164c3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164c6:	83 c4 10             	add    esp,0x10
c00164c9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00164cf:	7f df                	jg     c00164b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00164d1:	8d 76 00             	lea    esi,[esi+0x0]
c00164d4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00164de:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00164e3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00164e6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00164e9:	d3 c0                	rol    eax,cl
c00164eb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00164f2:	21 c8                	and    eax,ecx
c00164f4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00164fb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00164fe:	89 f7                	mov    edi,esi
c0016500:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016508:	0f 85 72 01 00 00    	jne    c0016680 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001650e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016514:	85 ed                	test   ebp,ebp
c0016516:	74 1c                	je     c0016534 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016518:	83 ec 0c             	sub    esp,0xc
c001651b:	55                   	push   ebp
c001651c:	e8 5b ac ff ff       	call   c001117c <EnvVarContainer::~EnvVarContainer()>
c0016521:	59                   	pop    ecx
c0016522:	5e                   	pop    esi
c0016523:	6a 0c                	push   0xc
c0016525:	55                   	push   ebp
c0016526:	e8 ed 42 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001652b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001652e:	83 c4 10             	add    esp,0x10
c0016531:	89 f7                	mov    edi,esi
c0016533:	90                   	nop
c0016534:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001653a:	85 c0                	test   eax,eax
c001653c:	0f 84 b2 00 00 00    	je     c00165f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016542:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016545:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016549:	31 c9                	xor    ecx,ecx
c001654b:	eb 17                	jmp    c0016564 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001654d:	8d 76 00             	lea    esi,[esi+0x0]
c0016550:	83 c1 01             	add    ecx,0x1
c0016553:	83 f9 10             	cmp    ecx,0x10
c0016556:	0f 84 98 00 00 00    	je     c00165f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001655c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016562:	66 90                	xchg   ax,ax
c0016564:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001656b:	d3 fa                	sar    edx,cl
c001656d:	80 e2 01             	and    dl,0x1
c0016570:	74 de                	je     c0016550 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016572:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016575:	01 d2                	add    edx,edx
c0016577:	01 ca                	add    edx,ecx
c0016579:	8d 14 92             	lea    edx,[edx+edx*4]
c001657c:	01 d0                	add    eax,edx
c001657e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016584:	83 fd 07             	cmp    ebp,0x7
c0016587:	75 c7                	jne    c0016550 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016589:	05 40 02 00 00       	add    eax,0x240
c001658e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016591:	83 fd ff             	cmp    ebp,0xffffffff
c0016594:	0f 8c ee 00 00 00    	jl     c0016688 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001659a:	0f 84 ac 01 00 00    	je     c001674c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00165a0:	85 ed                	test   ebp,ebp
c00165a2:	0f 84 90 01 00 00    	je     c0016738 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00165a8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00165aa:	75 a4                	jne    c0016550 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00165ac:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00165b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00165b6:	01 d0                	add    eax,edx
c00165b8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00165bc:	83 ec 0c             	sub    esp,0xc
c00165bf:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00165c5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165c8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00165ce:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00165d5:	50                   	push   eax
c00165d6:	e8 0d fe ff ff       	call   c00163e8 <unblockTask(ThreadControlBlock*)>
c00165db:	83 c4 10             	add    esp,0x10
c00165de:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00165e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165e5:	89 f7                	mov    edi,esi
c00165e7:	83 c1 01             	add    ecx,0x1
c00165ea:	83 f9 10             	cmp    ecx,0x10
c00165ed:	0f 85 69 ff ff ff    	jne    c001655c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00165f3:	90                   	nop
c00165f4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00165fa:	85 c0                	test   eax,eax
c00165fc:	74 62                	je     c0016660 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00165fe:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016604:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001660a:	74 54                	je     c0016660 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001660c:	83 ec 0c             	sub    esp,0xc
c001660f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016614:	e8 13 95 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016619:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016620:	89 c7                	mov    edi,eax
c0016622:	e8 e9 94 00 00       	call   c001fb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016627:	83 c4 10             	add    esp,0x10
c001662a:	84 c0                	test   al,al
c001662c:	0f 84 ce 00 00 00    	je     c0016700 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016632:	66 90                	xchg   ax,ax
c0016634:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016637:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001663d:	85 d2                	test   edx,edx
c001663f:	74 0f                	je     c0016650 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016641:	83 ec 0c             	sub    esp,0xc
c0016644:	8b 02                	mov    eax,DWORD PTR [edx]
c0016646:	52                   	push   edx
c0016647:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001664a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001664d:	83 c4 10             	add    esp,0x10
c0016650:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001665a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001665d:	8d 76 00             	lea    esi,[esi+0x0]
c0016660:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016666:	85 db                	test   ebx,ebx
c0016668:	74 16                	je     c0016680 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001666a:	83 ec 0c             	sub    esp,0xc
c001666d:	53                   	push   ebx
c001666e:	e8 3f 35 ff ff       	call   c0009bb2 <VAS::~VAS()>
c0016673:	58                   	pop    eax
c0016674:	5a                   	pop    edx
c0016675:	6a 14                	push   0x14
c0016677:	53                   	push   ebx
c0016678:	e8 9b 41 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001667d:	83 c4 10             	add    esp,0x10
c0016680:	83 c4 1c             	add    esp,0x1c
c0016683:	5b                   	pop    ebx
c0016684:	5e                   	pop    esi
c0016685:	5f                   	pop    edi
c0016686:	5d                   	pop    ebp
c0016687:	c3                   	ret    
c0016688:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001668c:	83 ec 0c             	sub    esp,0xc
c001668f:	68 58 27 02 c0       	push   0xc0022758
c0016694:	e8 d2 ad ff ff       	call   c001146b <KePanic(char const*)>
c0016699:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001669c:	83 c4 10             	add    esp,0x10
c001669f:	89 f7                	mov    edi,esi
c00166a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166a5:	e9 a6 fe ff ff       	jmp    c0016550 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166aa:	66 90                	xchg   ax,ax
c00166ac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00166b2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00166b8:	75 1e                	jne    c00166d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00166ba:	83 ec 0c             	sub    esp,0xc
c00166bd:	68 c0 27 02 c0       	push   0xc00227c0
c00166c2:	e8 7e 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00166c7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00166ce:	e8 11 fa ff ff       	call   c00160e4 <blockTask(TaskState)>
c00166d3:	83 c4 10             	add    esp,0x10
c00166d6:	66 90                	xchg   ax,ax
c00166d8:	83 ec 08             	sub    esp,0x8
c00166db:	56                   	push   esi
c00166dc:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166e1:	e8 0a 95 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166e6:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00166ed:	e8 3a 94 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166f2:	83 c4 10             	add    esp,0x10
c00166f5:	39 f8                	cmp    eax,edi
c00166f7:	0f 84 37 ff ff ff    	je     c0016634 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00166fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016700:	83 ec 0c             	sub    esp,0xc
c0016703:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016708:	e8 1f 94 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001670d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016714:	89 c6                	mov    esi,eax
c0016716:	e8 19 94 00 00       	call   c001fb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001671b:	83 c4 10             	add    esp,0x10
c001671e:	39 f3                	cmp    ebx,esi
c0016720:	74 b6                	je     c00166d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016722:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016725:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016728:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001672e:	75 a8                	jne    c00166d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016730:	e9 77 ff ff ff       	jmp    c00166ac <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016735:	8d 76 00             	lea    esi,[esi+0x0]
c0016738:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001673c:	83 ec 0c             	sub    esp,0xc
c001673f:	68 8c 27 02 c0       	push   0xc002278c
c0016744:	e9 4b ff ff ff       	jmp    c0016694 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016749:	8d 76 00             	lea    esi,[esi+0x0]
c001674c:	8b 36                	mov    esi,DWORD PTR [esi]
c001674e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016752:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016755:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016758:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001675e:	01 d7                	add    edi,edx
c0016760:	89 f8                	mov    eax,edi
c0016762:	e9 51 fe ff ff       	jmp    c00165b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016767:	90                   	nop

c0016768 <cleanerTaskFunction(void*)>:
c0016768:	53                   	push   ebx
c0016769:	83 ec 08             	sub    esp,0x8
c001676c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016771:	83 e8 01             	sub    eax,0x1
c0016774:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016779:	75 01                	jne    c001677c <cleanerTaskFunction(void*)+0x14>
c001677b:	fb                   	sti    
c001677c:	fa                   	cli    
c001677d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016782:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016789:	8d 50 01             	lea    edx,[eax+0x1]
c001678c:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016792:	0f 84 c4 00 00 00    	je     c001685c <cleanerTaskFunction(void*)+0xf4>
c0016798:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001679d:	85 c0                	test   eax,eax
c001679f:	75 03                	jne    c00167a4 <cleanerTaskFunction(void*)+0x3c>
c00167a1:	fb                   	sti    
c00167a2:	66 90                	xchg   ax,ax
c00167a4:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c00167ab:	fa                   	cli    
c00167ac:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00167b2:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00167b8:	83 c2 01             	add    edx,0x1
c00167bb:	83 c1 01             	add    ecx,0x1
c00167be:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00167c4:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00167ca:	fa                   	cli    
c00167cb:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c00167d1:	83 c3 01             	add    ebx,0x1
c00167d4:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c00167da:	eb 28                	jmp    c0016804 <cleanerTaskFunction(void*)+0x9c>
c00167dc:	83 ec 0c             	sub    esp,0xc
c00167df:	68 cc c6 02 c0       	push   0xc002c6cc
c00167e4:	e8 43 93 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167e9:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00167f0:	89 c3                	mov    ebx,eax
c00167f2:	e8 3d 93 00 00       	call   c001fb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00167f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167fa:	e8 95 fc ff ff       	call   c0016494 <cleanupTerminatedTask(ThreadControlBlock*)>
c00167ff:	83 c4 10             	add    esp,0x10
c0016802:	66 90                	xchg   ax,ax
c0016804:	83 ec 0c             	sub    esp,0xc
c0016807:	68 cc c6 02 c0       	push   0xc002c6cc
c001680c:	e8 ff 92 00 00       	call   c001fb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016811:	83 c4 10             	add    esp,0x10
c0016814:	84 c0                	test   al,al
c0016816:	74 c4                	je     c00167dc <cleanerTaskFunction(void*)+0x74>
c0016818:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001681d:	83 e8 01             	sub    eax,0x1
c0016820:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016825:	75 01                	jne    c0016828 <cleanerTaskFunction(void*)+0xc0>
c0016827:	fb                   	sti    
c0016828:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001682d:	83 e8 01             	sub    eax,0x1
c0016830:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016835:	0f 85 31 ff ff ff    	jne    c001676c <cleanerTaskFunction(void*)+0x4>
c001683b:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016840:	85 c0                	test   eax,eax
c0016842:	0f 84 24 ff ff ff    	je     c001676c <cleanerTaskFunction(void*)+0x4>
c0016848:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016852:	e8 79 f6 ff ff       	call   c0015ed0 <schedule()>
c0016857:	e9 10 ff ff ff       	jmp    c001676c <cleanerTaskFunction(void*)+0x4>
c001685c:	83 ec 0c             	sub    esp,0xc
c001685f:	6a 02                	push   0x2
c0016861:	e8 56 f8 ff ff       	call   c00160bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016866:	83 c4 10             	add    esp,0x10
c0016869:	e9 36 ff ff ff       	jmp    c00167a4 <cleanerTaskFunction(void*)+0x3c>
c001686e:	66 90                	xchg   ax,ax

c0016870 <terminateTask(int)>:
c0016870:	83 ec 14             	sub    esp,0x14
c0016873:	fa                   	cli    
c0016874:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001687a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016880:	83 c2 01             	add    edx,0x1
c0016883:	83 c1 01             	add    ecx,0x1
c0016886:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001688c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016892:	fa                   	cli    
c0016893:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016898:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001689c:	83 c0 01             	add    eax,0x1
c001689f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00168a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168a9:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00168ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168b1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00168b4:	50                   	push   eax
c00168b5:	68 cc c6 02 c0       	push   0xc002c6cc
c00168ba:	e8 31 93 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168c4:	83 c4 10             	add    esp,0x10
c00168c7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00168ce:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c00168d3:	85 c0                	test   eax,eax
c00168d5:	74 65                	je     c001693c <terminateTask(int)+0xcc>
c00168d7:	83 ec 0c             	sub    esp,0xc
c00168da:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c00168e1:	50                   	push   eax
c00168e2:	e8 01 fb ff ff       	call   c00163e8 <unblockTask(ThreadControlBlock*)>
c00168e7:	83 c4 10             	add    esp,0x10
c00168ea:	66 90                	xchg   ax,ax
c00168ec:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00168f1:	83 e8 01             	sub    eax,0x1
c00168f4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00168f9:	75 01                	jne    c00168fc <terminateTask(int)+0x8c>
c00168fb:	fb                   	sti    
c00168fc:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016901:	83 e8 01             	sub    eax,0x1
c0016904:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016909:	75 09                	jne    c0016914 <terminateTask(int)+0xa4>
c001690b:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016912:	75 3c                	jne    c0016950 <terminateTask(int)+0xe0>
c0016914:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016919:	83 e8 01             	sub    eax,0x1
c001691c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016921:	75 01                	jne    c0016924 <terminateTask(int)+0xb4>
c0016923:	fb                   	sti    
c0016924:	fa                   	cli    
c0016925:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001692a:	83 c0 01             	add    eax,0x1
c001692d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016932:	66 90                	xchg   ax,ax
c0016934:	e8 97 f5 ff ff       	call   c0015ed0 <schedule()>
c0016939:	eb d9                	jmp    c0016914 <terminateTask(int)+0xa4>
c001693b:	90                   	nop
c001693c:	83 ec 0c             	sub    esp,0xc
c001693f:	68 ba 26 02 c0       	push   0xc00226ba
c0016944:	e8 fc 3f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016949:	83 c4 10             	add    esp,0x10
c001694c:	eb 9e                	jmp    c00168ec <terminateTask(int)+0x7c>
c001694e:	66 90                	xchg   ax,ax
c0016950:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001695a:	eb d8                	jmp    c0016934 <terminateTask(int)+0xc4>

c001695c <Thr::terminateFromIRQ(int)>:
c001695c:	83 ec 18             	sub    esp,0x18
c001695f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016963:	50                   	push   eax
c0016964:	e8 07 ff ff ff       	call   c0016870 <terminateTask(int)>
c0016969:	90                   	nop
c001696a:	66 90                	xchg   ax,ax

c001696c <Semaphore::release()>:
c001696c:	83 ec 0c             	sub    esp,0xc
c001696f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016973:	fa                   	cli    
c0016974:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016979:	83 c0 01             	add    eax,0x1
c001697c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016981:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016986:	8d 48 01             	lea    ecx,[eax+0x1]
c0016989:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001698f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016992:	85 c9                	test   ecx,ecx
c0016994:	74 42                	je     c00169d8 <Semaphore::release()+0x6c>
c0016996:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016999:	83 ec 0c             	sub    esp,0xc
c001699c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001699f:	51                   	push   ecx
c00169a0:	e8 43 fa ff ff       	call   c00163e8 <unblockTask(ThreadControlBlock*)>
c00169a5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00169aa:	83 c4 10             	add    esp,0x10
c00169ad:	83 e8 01             	sub    eax,0x1
c00169b0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00169b5:	85 c0                	test   eax,eax
c00169b7:	75 0b                	jne    c00169c4 <Semaphore::release()+0x58>
c00169b9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00169be:	85 c0                	test   eax,eax
c00169c0:	75 22                	jne    c00169e4 <Semaphore::release()+0x78>
c00169c2:	66 90                	xchg   ax,ax
c00169c4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169c9:	83 e8 01             	sub    eax,0x1
c00169cc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169d1:	75 01                	jne    c00169d4 <Semaphore::release()+0x68>
c00169d3:	fb                   	sti    
c00169d4:	83 c4 0c             	add    esp,0xc
c00169d7:	c3                   	ret    
c00169d8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00169db:	83 e9 01             	sub    ecx,0x1
c00169de:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00169e1:	eb cd                	jmp    c00169b0 <Semaphore::release()+0x44>
c00169e3:	90                   	nop
c00169e4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00169ee:	e8 dd f4 ff ff       	call   c0015ed0 <schedule()>
c00169f3:	eb cf                	jmp    c00169c4 <Semaphore::release()+0x58>
c00169f5:	8d 76 00             	lea    esi,[esi+0x0]

c00169f8 <__static_initialization_and_destruction_0(int, int)>:
c00169f8:	83 ec 0c             	sub    esp,0xc
c00169fb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016a00:	0f 85 8e 00 00 00    	jne    c0016a94 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016a06:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016a0e:	0f 85 80 00 00 00    	jne    c0016a94 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016a14:	83 ec 0c             	sub    esp,0xc
c0016a17:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016a1c:	e8 83 94 00 00       	call   c001fea4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016a21:	83 c4 10             	add    esp,0x10
c0016a24:	83 ec 04             	sub    esp,0x4
c0016a27:	68 90 33 02 c0       	push   0xc0023390
c0016a2c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016a31:	68 54 fe 01 c0       	push   0xc001fe54
c0016a36:	e8 8d 3d ff ff       	call   c000a7c8 <__cxa_atexit>
c0016a3b:	83 c4 10             	add    esp,0x10
c0016a3e:	83 ec 0c             	sub    esp,0xc
c0016a41:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016a46:	e8 59 94 00 00       	call   c001fea4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016a4b:	83 c4 10             	add    esp,0x10
c0016a4e:	83 ec 04             	sub    esp,0x4
c0016a51:	68 90 33 02 c0       	push   0xc0023390
c0016a56:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016a5b:	68 54 fe 01 c0       	push   0xc001fe54
c0016a60:	e8 63 3d ff ff       	call   c000a7c8 <__cxa_atexit>
c0016a65:	83 c4 10             	add    esp,0x10
c0016a68:	83 ec 0c             	sub    esp,0xc
c0016a6b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a70:	e8 2f 94 00 00       	call   c001fea4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016a75:	83 c4 10             	add    esp,0x10
c0016a78:	83 ec 04             	sub    esp,0x4
c0016a7b:	68 90 33 02 c0       	push   0xc0023390
c0016a80:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a85:	68 54 fe 01 c0       	push   0xc001fe54
c0016a8a:	e8 39 3d ff ff       	call   c000a7c8 <__cxa_atexit>
c0016a8f:	83 c4 10             	add    esp,0x10
c0016a92:	66 90                	xchg   ax,ax
c0016a94:	90                   	nop
c0016a95:	83 c4 0c             	add    esp,0xc
c0016a98:	c3                   	ret    
c0016a99:	8d 76 00             	lea    esi,[esi+0x0]

c0016a9c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016a9c:	83 ec 0c             	sub    esp,0xc
c0016a9f:	83 ec 08             	sub    esp,0x8
c0016aa2:	68 ff ff 00 00       	push   0xffff
c0016aa7:	6a 01                	push   0x1
c0016aa9:	e8 4a ff ff ff       	call   c00169f8 <__static_initialization_and_destruction_0(int, int)>
c0016aae:	83 c4 10             	add    esp,0x10
c0016ab1:	83 c4 0c             	add    esp,0xc
c0016ab4:	c3                   	ret    

c0016ab5 <Vm::inbv(unsigned short)>:
c0016ab5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016ab9:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016abe:	75 06                	jne    c0016ac6 <Vm::inbv(unsigned short)+0x11>
c0016ac0:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016ac5:	c3                   	ret    
c0016ac6:	ec                   	in     al,dx
c0016ac7:	c3                   	ret    

c0016ac8 <Vm::outbv(unsigned short, unsigned char)>:
c0016ac8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016acc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ad0:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016ad5:	75 25                	jne    c0016afc <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016ad7:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016add:	8d 51 01             	lea    edx,[ecx+0x1]
c0016ae0:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016ae6:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016aec:	83 fa 20             	cmp    edx,0x20
c0016aef:	75 0c                	jne    c0016afd <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016af1:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016afb:	c3                   	ret    
c0016afc:	ee                   	out    dx,al
c0016afd:	c3                   	ret    

c0016afe <Vm::realToLinear(unsigned short, unsigned short)>:
c0016afe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b03:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b08:	c1 e0 04             	shl    eax,0x4
c0016b0b:	01 d0                	add    eax,edx
c0016b0d:	c3                   	ret    

c0016b0e <Vm::getSegment(unsigned int)>:
c0016b0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b12:	c1 e8 10             	shr    eax,0x10
c0016b15:	c3                   	ret    

c0016b16 <Vm::getOffset(unsigned int)>:
c0016b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b1a:	c3                   	ret    

c0016b1b <Vm::mainloop2()>:
c0016b1b:	83 ec 18             	sub    esp,0x18
c0016b1e:	fa                   	cli    
c0016b1f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016b25:	6a 02                	push   0x2
c0016b27:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016b2e:	e8 89 f5 ff ff       	call   c00160bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016b33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b38:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016b3c:	52                   	push   edx
c0016b3d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016b41:	52                   	push   edx
c0016b42:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016b46:	52                   	push   edx
c0016b47:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016b4b:	50                   	push   eax
c0016b4c:	e8 be 96 fe ff       	call   c000020f <goToVM86>
c0016b51:	83 c4 2c             	add    esp,0x2c
c0016b54:	c3                   	ret    

c0016b55 <Vm::mainVm8086Loop(void*)>:
c0016b55:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b5a:	48                   	dec    eax
c0016b5b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b60:	75 01                	jne    c0016b63 <Vm::mainVm8086Loop(void*)+0xe>
c0016b62:	fb                   	sti    
c0016b63:	eb b6                	jmp    c0016b1b <Vm::mainloop2()>

c0016b65 <Vm::mainloop3(unsigned long)>:
c0016b65:	83 ec 18             	sub    esp,0x18
c0016b68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b6c:	fa                   	cli    
c0016b6d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016b73:	6a 02                	push   0x2
c0016b75:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016b7c:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016b81:	e8 36 f5 ff ff       	call   c00160bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016b86:	83 c4 1c             	add    esp,0x1c
c0016b89:	eb 90                	jmp    c0016b1b <Vm::mainloop2()>

c0016b8b <Vm::initialise8086()>:
c0016b8b:	83 ec 0c             	sub    esp,0xc
c0016b8e:	68 80 00 00 00       	push   0x80
c0016b93:	6a 00                	push   0x0
c0016b95:	68 55 6b 01 c0       	push   0xc0016b55
c0016b9a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016ba0:	e8 db f0 ff ff       	call   c0015c80 <Process::createThread(void (*)(void*), void*, int)>
c0016ba5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016bac:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016bb1:	68 00 01 00 00       	push   0x100
c0016bb6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016bbb:	6a 00                	push   0x0
c0016bbd:	6a 00                	push   0x0
c0016bbf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bc5:	e8 50 33 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016bca:	83 c4 2c             	add    esp,0x2c
c0016bcd:	c3                   	ret    

c0016bce <Vm::finish8086()>:
c0016bce:	53                   	push   ebx
c0016bcf:	83 ec 08             	sub    esp,0x8
c0016bd2:	fa                   	cli    
c0016bd3:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016bd9:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016be0:	75 15                	jne    c0016bf7 <Vm::finish8086()+0x29>
c0016be2:	e8 e9 f2 ff ff       	call   c0015ed0 <schedule()>
c0016be7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bec:	48                   	dec    eax
c0016bed:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bf2:	75 de                	jne    c0016bd2 <Vm::finish8086()+0x4>
c0016bf4:	fb                   	sti    
c0016bf5:	eb db                	jmp    c0016bd2 <Vm::finish8086()+0x4>
c0016bf7:	83 ec 0c             	sub    esp,0xc
c0016bfa:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016c00:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016c06:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016c0d:	e8 d6 f7 ff ff       	call   c00163e8 <unblockTask(ThreadControlBlock*)>
c0016c12:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c17:	83 c4 10             	add    esp,0x10
c0016c1a:	8d 50 ff             	lea    edx,[eax-0x1]
c0016c1d:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016c23:	85 d2                	test   edx,edx
c0016c25:	75 01                	jne    c0016c28 <Vm::finish8086()+0x5a>
c0016c27:	fb                   	sti    
c0016c28:	89 d8                	mov    eax,ebx
c0016c2a:	83 c4 08             	add    esp,0x8
c0016c2d:	5b                   	pop    ebx
c0016c2e:	c3                   	ret    

c0016c2f <Vm::getOutput8086(unsigned char*)>:
c0016c2f:	57                   	push   edi
c0016c30:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016c36:	56                   	push   esi
c0016c37:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016c40:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c42:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016c47:	5e                   	pop    esi
c0016c48:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016c52:	5f                   	pop    edi
c0016c53:	c3                   	ret    

c0016c54 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016c54:	55                   	push   ebp
c0016c55:	57                   	push   edi
c0016c56:	56                   	push   esi
c0016c57:	53                   	push   ebx
c0016c58:	83 ec 0c             	sub    esp,0xc
c0016c5b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016c5f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016c63:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016c67:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016c6b:	fa                   	cli    
c0016c6c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016c72:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016c79:	75 15                	jne    c0016c90 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016c7b:	e8 50 f2 ff ff       	call   c0015ed0 <schedule()>
c0016c80:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c85:	48                   	dec    eax
c0016c86:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c8b:	75 de                	jne    c0016c6b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016c8d:	fb                   	sti    
c0016c8e:	eb db                	jmp    c0016c6b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016c90:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016c95:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016c9f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016ca3:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016ca7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016cab:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016caf:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016cb3:	0f b7 ff             	movzx  edi,di
c0016cb6:	0f b7 f6             	movzx  esi,si
c0016cb9:	50                   	push   eax
c0016cba:	6a 20                	push   0x20
c0016cbc:	6a 00                	push   0x0
c0016cbe:	68 40 c7 02 c0       	push   0xc002c740
c0016cc3:	e8 28 98 fe ff       	call   c00004f0 <memset>
c0016cc8:	5a                   	pop    edx
c0016cc9:	59                   	pop    ecx
c0016cca:	57                   	push   edi
c0016ccb:	56                   	push   esi
c0016ccc:	e8 2d fe ff ff       	call   c0016afe <Vm::realToLinear(unsigned short, unsigned short)>
c0016cd1:	83 c4 10             	add    esp,0x10
c0016cd4:	89 c7                	mov    edi,eax
c0016cd6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016cda:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016cde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ce0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ce5:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016cec:	48                   	dec    eax
c0016ced:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016cf2:	75 01                	jne    c0016cf5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016cf4:	fb                   	sti    
c0016cf5:	83 ec 0c             	sub    esp,0xc
c0016cf8:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016cfe:	e8 e5 f6 ff ff       	call   c00163e8 <unblockTask(ThreadControlBlock*)>
c0016d03:	83 c4 1c             	add    esp,0x1c
c0016d06:	b0 01                	mov    al,0x1
c0016d08:	5b                   	pop    ebx
c0016d09:	5e                   	pop    esi
c0016d0a:	5f                   	pop    edi
c0016d0b:	5d                   	pop    ebp
c0016d0c:	c3                   	ret    

c0016d0d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016d0d:	55                   	push   ebp
c0016d0e:	57                   	push   edi
c0016d0f:	56                   	push   esi
c0016d10:	53                   	push   ebx
c0016d11:	83 ec 34             	sub    esp,0x34
c0016d14:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016d18:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016d1c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016d20:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016d24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d28:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016d2c:	68 e8 27 02 c0       	push   0xc00227e8
c0016d31:	e8 0f 3c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016d36:	83 c4 10             	add    esp,0x10
c0016d39:	fa                   	cli    
c0016d3a:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d40:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016d46:	84 db                	test   bl,bl
c0016d48:	75 15                	jne    c0016d5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016d4a:	e8 81 f1 ff ff       	call   c0015ed0 <schedule()>
c0016d4f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d54:	48                   	dec    eax
c0016d55:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d5a:	75 dd                	jne    c0016d39 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016d5c:	fb                   	sti    
c0016d5d:	eb da                	jmp    c0016d39 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016d5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d63:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016d68:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016d72:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016d76:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016d7a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016d7e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016d82:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016d86:	50                   	push   eax
c0016d87:	6a 20                	push   0x20
c0016d89:	6a 00                	push   0x0
c0016d8b:	68 40 c7 02 c0       	push   0xc002c740
c0016d90:	e8 5b 97 fe ff       	call   c00004f0 <memset>
c0016d95:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016d9c:	e8 15 0d ff ff       	call   c0007ab6 <malloc>
c0016da1:	83 c4 0c             	add    esp,0xc
c0016da4:	89 c5                	mov    ebp,eax
c0016da6:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016dac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016db0:	50                   	push   eax
c0016db1:	e8 e4 4b ff ff       	call   c000b99a <File::File(char const*, Process*)>
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	85 ed                	test   ebp,ebp
c0016dbb:	75 0a                	jne    c0016dc7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016dbd:	83 ec 0c             	sub    esp,0xc
c0016dc0:	68 0a 28 02 c0       	push   0xc002280a
c0016dc5:	eb 2b                	jmp    c0016df2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016dc7:	50                   	push   eax
c0016dc8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016dcc:	50                   	push   eax
c0016dcd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016dd1:	50                   	push   eax
c0016dd2:	55                   	push   ebp
c0016dd3:	e8 e2 4e ff ff       	call   c000bcba <File::stat(unsigned long long*, bool*)>
c0016dd8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016ddc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016de0:	83 c4 10             	add    esp,0x10
c0016de3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016de8:	74 27                	je     c0016e11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016dea:	83 ec 0c             	sub    esp,0xc
c0016ded:	68 1e 28 02 c0       	push   0xc002281e
c0016df2:	e8 74 a6 ff ff       	call   c001146b <KePanic(char const*)>
c0016df7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dfc:	83 c4 10             	add    esp,0x10
c0016dff:	48                   	dec    eax
c0016e00:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e05:	85 c0                	test   eax,eax
c0016e07:	75 01                	jne    c0016e0a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016e09:	fb                   	sti    
c0016e0a:	31 db                	xor    ebx,ebx
c0016e0c:	e9 90 00 00 00       	jmp    c0016ea1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016e11:	51                   	push   ecx
c0016e12:	51                   	push   ecx
c0016e13:	6a 01                	push   0x1
c0016e15:	55                   	push   ebp
c0016e16:	e8 9d 4b ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c0016e1b:	83 c4 10             	add    esp,0x10
c0016e1e:	85 c0                	test   eax,eax
c0016e20:	74 26                	je     c0016e48 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016e22:	83 ec 0c             	sub    esp,0xc
c0016e25:	68 37 28 02 c0       	push   0xc0022837
c0016e2a:	e8 3c a6 ff ff       	call   c001146b <KePanic(char const*)>
c0016e2f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e34:	83 c4 10             	add    esp,0x10
c0016e37:	48                   	dec    eax
c0016e38:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e3d:	85 c0                	test   eax,eax
c0016e3f:	75 c9                	jne    c0016e0a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016e41:	fb                   	sti    
c0016e42:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016e46:	eb 59                	jmp    c0016ea1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016e48:	0f b7 ff             	movzx  edi,di
c0016e4b:	50                   	push   eax
c0016e4c:	0f b7 f6             	movzx  esi,si
c0016e4f:	50                   	push   eax
c0016e50:	57                   	push   edi
c0016e51:	56                   	push   esi
c0016e52:	e8 a7 fc ff ff       	call   c0016afe <Vm::realToLinear(unsigned short, unsigned short)>
c0016e57:	5a                   	pop    edx
c0016e58:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016e5b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016e5f:	51                   	push   ecx
c0016e60:	50                   	push   eax
c0016e61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e69:	55                   	push   ebp
c0016e6a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016e6d:	83 c4 14             	add    esp,0x14
c0016e70:	55                   	push   ebp
c0016e71:	e8 a0 4b ff ff       	call   c000ba16 <File::close()>
c0016e76:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e7b:	83 c4 10             	add    esp,0x10
c0016e7e:	48                   	dec    eax
c0016e7f:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016e86:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e8b:	85 c0                	test   eax,eax
c0016e8d:	75 01                	jne    c0016e90 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016e8f:	fb                   	sti    
c0016e90:	83 ec 0c             	sub    esp,0xc
c0016e93:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e99:	e8 4a f5 ff ff       	call   c00163e8 <unblockTask(ThreadControlBlock*)>
c0016e9e:	83 c4 10             	add    esp,0x10
c0016ea1:	83 c4 2c             	add    esp,0x2c
c0016ea4:	88 d8                	mov    al,bl
c0016ea6:	5b                   	pop    ebx
c0016ea7:	5e                   	pop    esi
c0016ea8:	5f                   	pop    edi
c0016ea9:	5d                   	pop    ebp
c0016eaa:	c3                   	ret    

c0016eab <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016eab:	57                   	push   edi
c0016eac:	56                   	push   esi
c0016ead:	53                   	push   ebx
c0016eae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016eb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eb6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016eba:	83 e8 06             	sub    eax,0x6
c0016ebd:	0f b7 c0             	movzx  eax,ax
c0016ec0:	50                   	push   eax
c0016ec1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016ec6:	50                   	push   eax
c0016ec7:	e8 32 fc ff ff       	call   c0016afe <Vm::realToLinear(unsigned short, unsigned short)>
c0016ecc:	5a                   	pop    edx
c0016ecd:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016ed0:	59                   	pop    ecx
c0016ed1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016ed4:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016ed7:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016edd:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016ee0:	8d 56 02             	lea    edx,[esi+0x2]
c0016ee3:	66 89 10             	mov    WORD PTR [eax],dx
c0016ee6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016eea:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016eee:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016ef1:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016ef5:	0f b6 f1             	movzx  esi,cl
c0016ef8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016efc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f02:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016f06:	0f b6 d5             	movzx  edx,ch
c0016f09:	74 0a                	je     c0016f15 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016f0b:	c1 e2 08             	shl    edx,0x8
c0016f0e:	09 f2                	or     edx,esi
c0016f10:	80 ce 02             	or     dh,0x2
c0016f13:	eb 08                	jmp    c0016f1d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016f15:	c1 e2 08             	shl    edx,0x8
c0016f18:	09 f2                	or     edx,esi
c0016f1a:	80 e6 fd             	and    dh,0xfd
c0016f1d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016f21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f26:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016f2a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016f32:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016f35:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016f3d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016f40:	5b                   	pop    ebx
c0016f41:	5e                   	pop    esi
c0016f42:	5f                   	pop    edi
c0016f43:	c3                   	ret    

c0016f44 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016f44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f4e:	c1 e0 04             	shl    eax,0x4
c0016f51:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016f54:	c3                   	ret    

c0016f55 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016f55:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f5a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f5f:	c1 e0 04             	shl    eax,0x4
c0016f62:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016f66:	c3                   	ret    

c0016f67 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016f67:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f6c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f71:	c1 e0 04             	shl    eax,0x4
c0016f74:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016f77:	c3                   	ret    

c0016f78 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016f78:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f7d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f82:	c1 e0 04             	shl    eax,0x4
c0016f85:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f89:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016f8c:	c3                   	ret    

c0016f8d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016f8d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f92:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f97:	c1 e0 04             	shl    eax,0x4
c0016f9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f9e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016fa2:	c3                   	ret    

c0016fa3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016fa3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016fa8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016fad:	c1 e0 04             	shl    eax,0x4
c0016fb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016fb4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016fb7:	c3                   	ret    

c0016fb8 <Vm::faultHandler(regs*)>:
c0016fb8:	55                   	push   ebp
c0016fb9:	57                   	push   edi
c0016fba:	56                   	push   esi
c0016fbb:	53                   	push   ebx
c0016fbc:	83 ec 2c             	sub    esp,0x2c
c0016fbf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016fc3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016fc6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016fca:	0f b7 f8             	movzx  edi,ax
c0016fcd:	52                   	push   edx
c0016fce:	0f b7 c0             	movzx  eax,ax
c0016fd1:	50                   	push   eax
c0016fd2:	e8 27 fb ff ff       	call   c0016afe <Vm::realToLinear(unsigned short, unsigned short)>
c0016fd7:	5a                   	pop    edx
c0016fd8:	59                   	pop    ecx
c0016fd9:	89 c1                	mov    ecx,eax
c0016fdb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016fde:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fe2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016fe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016feb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016fee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ff2:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016ff7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ffb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017003:	e8 f6 fa ff ff       	call   c0016afe <Vm::realToLinear(unsigned short, unsigned short)>
c0017008:	5e                   	pop    esi
c0017009:	be 06 00 00 00       	mov    esi,0x6
c001700e:	5d                   	pop    ebp
c001700f:	31 ed                	xor    ebp,ebp
c0017011:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017016:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017019:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001701f:	0f 84 74 02 00 00    	je     c0017299 <Vm::faultHandler(regs*)+0x2e1>
c0017025:	0f 87 94 00 00 00    	ja     c00170bf <Vm::faultHandler(regs*)+0x107>
c001702b:	83 fa 66             	cmp    edx,0x66
c001702e:	0f 84 e2 01 00 00    	je     c0017216 <Vm::faultHandler(regs*)+0x25e>
c0017034:	77 47                	ja     c001707d <Vm::faultHandler(regs*)+0xc5>
c0017036:	83 fa 36             	cmp    edx,0x36
c0017039:	0f 84 ca 01 00 00    	je     c0017209 <Vm::faultHandler(regs*)+0x251>
c001703f:	77 1a                	ja     c001705b <Vm::faultHandler(regs*)+0xa3>
c0017041:	83 fa 26             	cmp    edx,0x26
c0017044:	0f 84 98 01 00 00    	je     c00171e2 <Vm::faultHandler(regs*)+0x22a>
c001704a:	83 fa 2e             	cmp    edx,0x2e
c001704d:	0f 85 21 06 00 00    	jne    c0017674 <Vm::faultHandler(regs*)+0x6bc>
c0017053:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017056:	31 f6                	xor    esi,esi
c0017058:	41                   	inc    ecx
c0017059:	eb bb                	jmp    c0017016 <Vm::faultHandler(regs*)+0x5e>
c001705b:	83 fa 64             	cmp    edx,0x64
c001705e:	0f 84 8b 01 00 00    	je     c00171ef <Vm::faultHandler(regs*)+0x237>
c0017064:	0f 87 92 01 00 00    	ja     c00171fc <Vm::faultHandler(regs*)+0x244>
c001706a:	83 fa 3e             	cmp    edx,0x3e
c001706d:	0f 85 01 06 00 00    	jne    c0017674 <Vm::faultHandler(regs*)+0x6bc>
c0017073:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017076:	be 01 00 00 00       	mov    esi,0x1
c001707b:	eb db                	jmp    c0017058 <Vm::faultHandler(regs*)+0xa0>
c001707d:	83 fa 6d             	cmp    edx,0x6d
c0017080:	0f 84 34 03 00 00    	je     c00173ba <Vm::faultHandler(regs*)+0x402>
c0017086:	77 17                	ja     c001709f <Vm::faultHandler(regs*)+0xe7>
c0017088:	83 fa 67             	cmp    edx,0x67
c001708b:	0f 84 92 01 00 00    	je     c0017223 <Vm::faultHandler(regs*)+0x26b>
c0017091:	83 fa 6c             	cmp    edx,0x6c
c0017094:	0f 84 b1 02 00 00    	je     c001734b <Vm::faultHandler(regs*)+0x393>
c001709a:	e9 d5 05 00 00       	jmp    c0017674 <Vm::faultHandler(regs*)+0x6bc>
c001709f:	83 fa 6f             	cmp    edx,0x6f
c00170a2:	0f 84 3d 04 00 00    	je     c00174e5 <Vm::faultHandler(regs*)+0x52d>
c00170a8:	0f 82 9f 03 00 00    	jb     c001744d <Vm::faultHandler(regs*)+0x495>
c00170ae:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00170b4:	0f 84 76 01 00 00    	je     c0017230 <Vm::faultHandler(regs*)+0x278>
c00170ba:	e9 b5 05 00 00       	jmp    c0017674 <Vm::faultHandler(regs*)+0x6bc>
c00170bf:	81 fa ec 00 00 00    	cmp    edx,0xec
c00170c5:	0f 84 51 05 00 00    	je     c001761c <Vm::faultHandler(regs*)+0x664>
c00170cb:	0f 87 a9 00 00 00    	ja     c001717a <Vm::faultHandler(regs*)+0x1c2>
c00170d1:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00170d7:	0f 84 d0 04 00 00    	je     c00175ad <Vm::faultHandler(regs*)+0x5f5>
c00170dd:	77 78                	ja     c0017157 <Vm::faultHandler(regs*)+0x19f>
c00170df:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00170e5:	0f 84 0e 02 00 00    	je     c00172f9 <Vm::faultHandler(regs*)+0x341>
c00170eb:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00170f1:	0f 85 7d 05 00 00    	jne    c0017674 <Vm::faultHandler(regs*)+0x6bc>
c00170f7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00170fb:	89 d1                	mov    ecx,edx
c00170fd:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017100:	c1 e1 08             	shl    ecx,0x8
c0017103:	09 ca                	or     edx,ecx
c0017105:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017108:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001710c:	89 d1                	mov    ecx,edx
c001710e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017112:	c1 e1 08             	shl    ecx,0x8
c0017115:	09 ca                	or     edx,ecx
c0017117:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001711a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001711e:	89 d1                	mov    ecx,edx
c0017120:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017124:	c1 e1 08             	shl    ecx,0x8
c0017127:	09 ca                	or     edx,ecx
c0017129:	81 ca 00 02 02 00    	or     edx,0x20200
c001712f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017132:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017136:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001713c:	d1 e8                	shr    eax,1
c001713e:	83 e0 01             	and    eax,0x1
c0017141:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017144:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017147:	83 c0 06             	add    eax,0x6
c001714a:	25 ff ff 00 00       	and    eax,0xffff
c001714f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017152:	e9 19 05 00 00       	jmp    c0017670 <Vm::faultHandler(regs*)+0x6b8>
c0017157:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001715d:	0f 84 8f 04 00 00    	je     c00175f2 <Vm::faultHandler(regs*)+0x63a>
c0017163:	0f 82 60 04 00 00    	jb     c00175c9 <Vm::faultHandler(regs*)+0x611>
c0017169:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001716f:	0f 84 94 04 00 00    	je     c0017609 <Vm::faultHandler(regs*)+0x651>
c0017175:	e9 fa 04 00 00       	jmp    c0017674 <Vm::faultHandler(regs*)+0x6bc>
c001717a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017180:	0f 84 d7 04 00 00    	je     c001765d <Vm::faultHandler(regs*)+0x6a5>
c0017186:	77 2e                	ja     c00171b6 <Vm::faultHandler(regs*)+0x1fe>
c0017188:	81 fa ed 00 00 00    	cmp    edx,0xed
c001718e:	0f 84 a4 04 00 00    	je     c0017638 <Vm::faultHandler(regs*)+0x680>
c0017194:	81 fa ee 00 00 00    	cmp    edx,0xee
c001719a:	0f 85 d4 04 00 00    	jne    c0017674 <Vm::faultHandler(regs*)+0x6bc>
c00171a0:	50                   	push   eax
c00171a1:	50                   	push   eax
c00171a2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00171a6:	50                   	push   eax
c00171a7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00171ab:	50                   	push   eax
c00171ac:	e8 17 f9 ff ff       	call   c0016ac8 <Vm::outbv(unsigned short, unsigned char)>
c00171b1:	e9 9f 04 00 00       	jmp    c0017655 <Vm::faultHandler(regs*)+0x69d>
c00171b6:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00171bc:	0f 84 6d 01 00 00    	je     c001732f <Vm::faultHandler(regs*)+0x377>
c00171c2:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00171c8:	0f 84 6f 01 00 00    	je     c001733d <Vm::faultHandler(regs*)+0x385>
c00171ce:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00171d4:	0f 85 9a 04 00 00    	jne    c0017674 <Vm::faultHandler(regs*)+0x6bc>
c00171da:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171dd:	e9 76 fe ff ff       	jmp    c0017058 <Vm::faultHandler(regs*)+0xa0>
c00171e2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171e5:	be 02 00 00 00       	mov    esi,0x2
c00171ea:	e9 69 fe ff ff       	jmp    c0017058 <Vm::faultHandler(regs*)+0xa0>
c00171ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171f2:	be 03 00 00 00       	mov    esi,0x3
c00171f7:	e9 5c fe ff ff       	jmp    c0017058 <Vm::faultHandler(regs*)+0xa0>
c00171fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171ff:	be 04 00 00 00       	mov    esi,0x4
c0017204:	e9 4f fe ff ff       	jmp    c0017058 <Vm::faultHandler(regs*)+0xa0>
c0017209:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001720c:	be 05 00 00 00       	mov    esi,0x5
c0017211:	e9 42 fe ff ff       	jmp    c0017058 <Vm::faultHandler(regs*)+0xa0>
c0017216:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017219:	bd 01 00 00 00       	mov    ebp,0x1
c001721e:	e9 35 fe ff ff       	jmp    c0017058 <Vm::faultHandler(regs*)+0xa0>
c0017223:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017226:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001722b:	e9 28 fe ff ff       	jmp    c0017058 <Vm::faultHandler(regs*)+0xa0>
c0017230:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017233:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017237:	83 e5 01             	and    ebp,0x1
c001723a:	74 30                	je     c001726c <Vm::faultHandler(regs*)+0x2b4>
c001723c:	83 e9 04             	sub    ecx,0x4
c001723f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017245:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001724b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001724e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017251:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017257:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001725b:	0f 84 0c 04 00 00    	je     c001766d <Vm::faultHandler(regs*)+0x6b5>
c0017261:	80 ce 02             	or     dh,0x2
c0017264:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017267:	e9 01 04 00 00       	jmp    c001766d <Vm::faultHandler(regs*)+0x6b5>
c001726c:	83 e9 02             	sub    ecx,0x2
c001726f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017275:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017278:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001727c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017282:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017286:	74 05                	je     c001728d <Vm::faultHandler(regs*)+0x2d5>
c0017288:	80 ce 02             	or     dh,0x2
c001728b:	eb 03                	jmp    c0017290 <Vm::faultHandler(regs*)+0x2d8>
c001728d:	80 e6 fd             	and    dh,0xfd
c0017290:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017294:	e9 d4 03 00 00       	jmp    c001766d <Vm::faultHandler(regs*)+0x6b5>
c0017299:	83 e5 01             	and    ebp,0x1
c001729c:	74 2a                	je     c00172c8 <Vm::faultHandler(regs*)+0x310>
c001729e:	8b 10                	mov    edx,DWORD PTR [eax]
c00172a0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00172a6:	81 ca 00 02 02 00    	or     edx,0x20200
c00172ac:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00172af:	8b 00                	mov    eax,DWORD PTR [eax]
c00172b1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00172b7:	c1 e8 09             	shr    eax,0x9
c00172ba:	83 e0 01             	and    eax,0x1
c00172bd:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00172c0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00172c3:	83 c0 04             	add    eax,0x4
c00172c6:	eb 24                	jmp    c00172ec <Vm::faultHandler(regs*)+0x334>
c00172c8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00172cb:	81 ca 00 02 02 00    	or     edx,0x20200
c00172d1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00172d4:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00172d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00172dd:	c1 e8 09             	shr    eax,0x9
c00172e0:	83 e0 01             	and    eax,0x1
c00172e3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00172e6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00172e9:	83 c0 02             	add    eax,0x2
c00172ec:	25 ff ff 00 00       	and    eax,0xffff
c00172f1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00172f4:	e9 74 03 00 00       	jmp    c001766d <Vm::faultHandler(regs*)+0x6b5>
c00172f9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172fd:	3d ee 00 00 00       	cmp    eax,0xee
c0017302:	75 10                	jne    c0017314 <Vm::faultHandler(regs*)+0x35c>
c0017304:	83 ec 0c             	sub    esp,0xc
c0017307:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001730a:	e8 56 f8 ff ff       	call   c0016b65 <Vm::mainloop3(unsigned long)>
c001730f:	e9 44 03 00 00       	jmp    c0017658 <Vm::faultHandler(regs*)+0x6a0>
c0017314:	83 ec 0c             	sub    esp,0xc
c0017317:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001731b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001731f:	51                   	push   ecx
c0017320:	50                   	push   eax
c0017321:	53                   	push   ebx
c0017322:	e8 84 fb ff ff       	call   c0016eab <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017327:	83 c4 20             	add    esp,0x20
c001732a:	e9 41 03 00 00       	jmp    c0017670 <Vm::faultHandler(regs*)+0x6b8>
c001732f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017334:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017338:	e9 30 03 00 00       	jmp    c001766d <Vm::faultHandler(regs*)+0x6b5>
c001733d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017342:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017346:	e9 22 03 00 00       	jmp    c001766d <Vm::faultHandler(regs*)+0x6b5>
c001734b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001734e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017353:	74 2b                	je     c0017380 <Vm::faultHandler(regs*)+0x3c8>
c0017355:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001735c:	76 22                	jbe    c0017380 <Vm::faultHandler(regs*)+0x3c8>
c001735e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017362:	50                   	push   eax
c0017363:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017367:	50                   	push   eax
c0017368:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001736c:	50                   	push   eax
c001736d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017371:	50                   	push   eax
c0017372:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017376:	50                   	push   eax
c0017377:	6a 6c                	push   0x6c
c0017379:	6a 6c                	push   0x6c
c001737b:	e9 bd 01 00 00       	jmp    c001753d <Vm::faultHandler(regs*)+0x585>
c0017380:	83 ec 0c             	sub    esp,0xc
c0017383:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017387:	0f b7 f6             	movzx  esi,si
c001738a:	50                   	push   eax
c001738b:	e8 25 f7 ff ff       	call   c0016ab5 <Vm::inbv(unsigned short)>
c0017390:	83 c4 0c             	add    esp,0xc
c0017393:	0f b6 c0             	movzx  eax,al
c0017396:	50                   	push   eax
c0017397:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001739b:	50                   	push   eax
c001739c:	56                   	push   esi
c001739d:	e8 d6 fb ff ff       	call   c0016f78 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00173a2:	83 c4 10             	add    esp,0x10
c00173a5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00173a8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00173ac:	74 03                	je     c00173b1 <Vm::faultHandler(regs*)+0x3f9>
c00173ae:	48                   	dec    eax
c00173af:	eb 01                	jmp    c00173b2 <Vm::faultHandler(regs*)+0x3fa>
c00173b1:	40                   	inc    eax
c00173b2:	0f b7 c0             	movzx  eax,ax
c00173b5:	e9 8b 00 00 00       	jmp    c0017445 <Vm::faultHandler(regs*)+0x48d>
c00173ba:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00173bd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00173c0:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00173c5:	74 29                	je     c00173f0 <Vm::faultHandler(regs*)+0x438>
c00173c7:	3d ff ff 00 00       	cmp    eax,0xffff
c00173cc:	76 22                	jbe    c00173f0 <Vm::faultHandler(regs*)+0x438>
c00173ce:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00173d2:	50                   	push   eax
c00173d3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00173d7:	50                   	push   eax
c00173d8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00173dc:	50                   	push   eax
c00173dd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00173e1:	50                   	push   eax
c00173e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173e6:	50                   	push   eax
c00173e7:	6a 6d                	push   0x6d
c00173e9:	6a 6d                	push   0x6d
c00173eb:	e9 4d 01 00 00       	jmp    c001753d <Vm::faultHandler(regs*)+0x585>
c00173f0:	0f b7 c8             	movzx  ecx,ax
c00173f3:	0f b7 f6             	movzx  esi,si
c00173f6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00173f9:	83 e5 01             	and    ebp,0x1
c00173fc:	74 20                	je     c001741e <Vm::faultHandler(regs*)+0x466>
c00173fe:	ed                   	in     eax,dx
c00173ff:	55                   	push   ebp
c0017400:	50                   	push   eax
c0017401:	51                   	push   ecx
c0017402:	56                   	push   esi
c0017403:	e8 9b fb ff ff       	call   c0016fa3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017408:	83 c4 10             	add    esp,0x10
c001740b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001740e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017412:	74 05                	je     c0017419 <Vm::faultHandler(regs*)+0x461>
c0017414:	83 e8 04             	sub    eax,0x4
c0017417:	eb 27                	jmp    c0017440 <Vm::faultHandler(regs*)+0x488>
c0017419:	83 c0 04             	add    eax,0x4
c001741c:	eb 22                	jmp    c0017440 <Vm::faultHandler(regs*)+0x488>
c001741e:	66 ed                	in     ax,dx
c0017420:	0f b7 c0             	movzx  eax,ax
c0017423:	57                   	push   edi
c0017424:	50                   	push   eax
c0017425:	51                   	push   ecx
c0017426:	56                   	push   esi
c0017427:	e8 61 fb ff ff       	call   c0016f8d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001742c:	83 c4 10             	add    esp,0x10
c001742f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017432:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017436:	74 05                	je     c001743d <Vm::faultHandler(regs*)+0x485>
c0017438:	83 e8 02             	sub    eax,0x2
c001743b:	eb 03                	jmp    c0017440 <Vm::faultHandler(regs*)+0x488>
c001743d:	83 c0 02             	add    eax,0x2
c0017440:	25 ff ff 00 00       	and    eax,0xffff
c0017445:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017448:	e9 20 02 00 00       	jmp    c001766d <Vm::faultHandler(regs*)+0x6b5>
c001744d:	8d 46 ff             	lea    eax,[esi-0x1]
c0017450:	0f b6 f0             	movzx  esi,al
c0017453:	83 fe 05             	cmp    esi,0x5
c0017456:	77 23                	ja     c001747b <Vm::faultHandler(regs*)+0x4c3>
c0017458:	ff 24 b5 ac 28 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd754]
c001745f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017464:	eb 15                	jmp    c001747b <Vm::faultHandler(regs*)+0x4c3>
c0017466:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001746a:	eb 0f                	jmp    c001747b <Vm::faultHandler(regs*)+0x4c3>
c001746c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017470:	eb 09                	jmp    c001747b <Vm::faultHandler(regs*)+0x4c3>
c0017472:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017476:	eb 03                	jmp    c001747b <Vm::faultHandler(regs*)+0x4c3>
c0017478:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001747b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001747e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017483:	74 29                	je     c00174ae <Vm::faultHandler(regs*)+0x4f6>
c0017485:	3d ff ff 00 00       	cmp    eax,0xffff
c001748a:	76 22                	jbe    c00174ae <Vm::faultHandler(regs*)+0x4f6>
c001748c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017490:	50                   	push   eax
c0017491:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017495:	50                   	push   eax
c0017496:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001749a:	50                   	push   eax
c001749b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001749f:	50                   	push   eax
c00174a0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174a4:	50                   	push   eax
c00174a5:	6a 6e                	push   0x6e
c00174a7:	6a 6e                	push   0x6e
c00174a9:	e9 8f 00 00 00       	jmp    c001753d <Vm::faultHandler(regs*)+0x585>
c00174ae:	0f b7 c0             	movzx  eax,ax
c00174b1:	52                   	push   edx
c00174b2:	52                   	push   edx
c00174b3:	50                   	push   eax
c00174b4:	57                   	push   edi
c00174b5:	e8 8a fa ff ff       	call   c0016f44 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00174ba:	59                   	pop    ecx
c00174bb:	0f b6 c0             	movzx  eax,al
c00174be:	5e                   	pop    esi
c00174bf:	50                   	push   eax
c00174c0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00174c4:	50                   	push   eax
c00174c5:	e8 fe f5 ff ff       	call   c0016ac8 <Vm::outbv(unsigned short, unsigned char)>
c00174ca:	83 c4 10             	add    esp,0x10
c00174cd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00174d0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00174d4:	74 03                	je     c00174d9 <Vm::faultHandler(regs*)+0x521>
c00174d6:	48                   	dec    eax
c00174d7:	eb 01                	jmp    c00174da <Vm::faultHandler(regs*)+0x522>
c00174d9:	40                   	inc    eax
c00174da:	0f b7 c0             	movzx  eax,ax
c00174dd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00174e0:	e9 88 01 00 00       	jmp    c001766d <Vm::faultHandler(regs*)+0x6b5>
c00174e5:	8d 46 ff             	lea    eax,[esi-0x1]
c00174e8:	0f b6 f0             	movzx  esi,al
c00174eb:	83 fe 05             	cmp    esi,0x5
c00174ee:	77 1e                	ja     c001750e <Vm::faultHandler(regs*)+0x556>
c00174f0:	ff 24 b5 c4 28 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd73c]
c00174f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00174fb:	eb 11                	jmp    c001750e <Vm::faultHandler(regs*)+0x556>
c00174fd:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017500:	eb 0c                	jmp    c001750e <Vm::faultHandler(regs*)+0x556>
c0017502:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017505:	eb 07                	jmp    c001750e <Vm::faultHandler(regs*)+0x556>
c0017507:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001750a:	eb 02                	jmp    c001750e <Vm::faultHandler(regs*)+0x556>
c001750c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001750e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017511:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017516:	74 37                	je     c001754f <Vm::faultHandler(regs*)+0x597>
c0017518:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001751e:	76 2f                	jbe    c001754f <Vm::faultHandler(regs*)+0x597>
c0017520:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017524:	50                   	push   eax
c0017525:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017529:	50                   	push   eax
c001752a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001752e:	50                   	push   eax
c001752f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017533:	50                   	push   eax
c0017534:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017538:	50                   	push   eax
c0017539:	6a 6f                	push   0x6f
c001753b:	6a 6f                	push   0x6f
c001753d:	68 50 28 02 c0       	push   0xc0022850
c0017542:	e8 fe 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017547:	83 c4 20             	add    esp,0x20
c001754a:	e9 83 01 00 00       	jmp    c00176d2 <Vm::faultHandler(regs*)+0x71a>
c001754f:	0f b7 d7             	movzx  edx,di
c0017552:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017555:	0f b7 c6             	movzx  eax,si
c0017558:	81 e1 00 04 00 00    	and    ecx,0x400
c001755e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017561:	83 e5 01             	and    ebp,0x1
c0017564:	74 1d                	je     c0017583 <Vm::faultHandler(regs*)+0x5cb>
c0017566:	55                   	push   ebp
c0017567:	55                   	push   ebp
c0017568:	50                   	push   eax
c0017569:	52                   	push   edx
c001756a:	e8 f8 f9 ff ff       	call   c0016f67 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001756f:	83 c4 10             	add    esp,0x10
c0017572:	89 fa                	mov    edx,edi
c0017574:	ef                   	out    dx,eax
c0017575:	85 c9                	test   ecx,ecx
c0017577:	74 05                	je     c001757e <Vm::faultHandler(regs*)+0x5c6>
c0017579:	83 ee 04             	sub    esi,0x4
c001757c:	eb 21                	jmp    c001759f <Vm::faultHandler(regs*)+0x5e7>
c001757e:	83 c6 04             	add    esi,0x4
c0017581:	eb 1c                	jmp    c001759f <Vm::faultHandler(regs*)+0x5e7>
c0017583:	55                   	push   ebp
c0017584:	55                   	push   ebp
c0017585:	50                   	push   eax
c0017586:	52                   	push   edx
c0017587:	e8 c9 f9 ff ff       	call   c0016f55 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001758c:	83 c4 10             	add    esp,0x10
c001758f:	89 fa                	mov    edx,edi
c0017591:	66 ef                	out    dx,ax
c0017593:	85 c9                	test   ecx,ecx
c0017595:	74 05                	je     c001759c <Vm::faultHandler(regs*)+0x5e4>
c0017597:	83 ee 02             	sub    esi,0x2
c001759a:	eb 03                	jmp    c001759f <Vm::faultHandler(regs*)+0x5e7>
c001759c:	83 c6 02             	add    esi,0x2
c001759f:	81 e6 ff ff 00 00    	and    esi,0xffff
c00175a5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00175a8:	e9 c0 00 00 00       	jmp    c001766d <Vm::faultHandler(regs*)+0x6b5>
c00175ad:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00175b4:	83 ec 0c             	sub    esp,0xc
c00175b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175bb:	50                   	push   eax
c00175bc:	e8 f4 f4 ff ff       	call   c0016ab5 <Vm::inbv(unsigned short)>
c00175c1:	0f b6 c0             	movzx  eax,al
c00175c4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00175c7:	eb 3a                	jmp    c0017603 <Vm::faultHandler(regs*)+0x64b>
c00175c9:	83 e5 01             	and    ebp,0x1
c00175cc:	74 07                	je     c00175d5 <Vm::faultHandler(regs*)+0x61d>
c00175ce:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00175d2:	ed                   	in     eax,dx
c00175d3:	eb 14                	jmp    c00175e9 <Vm::faultHandler(regs*)+0x631>
c00175d5:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00175d8:	66 31 f6             	xor    si,si
c00175db:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00175de:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00175e2:	66 ed                	in     ax,dx
c00175e4:	0f b7 c0             	movzx  eax,ax
c00175e7:	09 f0                	or     eax,esi
c00175e9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00175ec:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00175f0:	eb 7e                	jmp    c0017670 <Vm::faultHandler(regs*)+0x6b8>
c00175f2:	52                   	push   edx
c00175f3:	52                   	push   edx
c00175f4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00175f8:	50                   	push   eax
c00175f9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175fd:	50                   	push   eax
c00175fe:	e8 c5 f4 ff ff       	call   c0016ac8 <Vm::outbv(unsigned short, unsigned char)>
c0017603:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017607:	eb 4f                	jmp    c0017658 <Vm::faultHandler(regs*)+0x6a0>
c0017609:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001760c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017610:	83 e5 01             	and    ebp,0x1
c0017613:	74 03                	je     c0017618 <Vm::faultHandler(regs*)+0x660>
c0017615:	ef                   	out    dx,eax
c0017616:	eb d4                	jmp    c00175ec <Vm::faultHandler(regs*)+0x634>
c0017618:	66 ef                	out    dx,ax
c001761a:	eb d0                	jmp    c00175ec <Vm::faultHandler(regs*)+0x634>
c001761c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017623:	83 ec 0c             	sub    esp,0xc
c0017626:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001762a:	50                   	push   eax
c001762b:	e8 85 f4 ff ff       	call   c0016ab5 <Vm::inbv(unsigned short)>
c0017630:	0f b6 c0             	movzx  eax,al
c0017633:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017636:	eb 1d                	jmp    c0017655 <Vm::faultHandler(regs*)+0x69d>
c0017638:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001763b:	83 e5 01             	and    ebp,0x1
c001763e:	74 03                	je     c0017643 <Vm::faultHandler(regs*)+0x68b>
c0017640:	ed                   	in     eax,dx
c0017641:	eb 0d                	jmp    c0017650 <Vm::faultHandler(regs*)+0x698>
c0017643:	66 ed                	in     ax,dx
c0017645:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017648:	0f b7 c0             	movzx  eax,ax
c001764b:	66 31 d2             	xor    dx,dx
c001764e:	09 d0                	or     eax,edx
c0017650:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017653:	eb 18                	jmp    c001766d <Vm::faultHandler(regs*)+0x6b5>
c0017655:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017658:	83 c4 10             	add    esp,0x10
c001765b:	eb 13                	jmp    c0017670 <Vm::faultHandler(regs*)+0x6b8>
c001765d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017660:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017663:	83 e5 01             	and    ebp,0x1
c0017666:	74 03                	je     c001766b <Vm::faultHandler(regs*)+0x6b3>
c0017668:	ef                   	out    dx,eax
c0017669:	eb 02                	jmp    c001766d <Vm::faultHandler(regs*)+0x6b5>
c001766b:	66 ef                	out    dx,ax
c001766d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017670:	b0 01                	mov    al,0x1
c0017672:	eb 60                	jmp    c00176d4 <Vm::faultHandler(regs*)+0x71c>
c0017674:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017678:	50                   	push   eax
c0017679:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001767d:	50                   	push   eax
c001767e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017682:	50                   	push   eax
c0017683:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017687:	50                   	push   eax
c0017688:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001768c:	50                   	push   eax
c001768d:	52                   	push   edx
c001768e:	52                   	push   edx
c001768f:	68 7d 28 02 c0       	push   0xc002287d
c0017694:	e8 ac 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017699:	83 c4 20             	add    esp,0x20
c001769c:	83 ec 0c             	sub    esp,0xc
c001769f:	6a 60                	push   0x60
c00176a1:	e8 0f f4 ff ff       	call   c0016ab5 <Vm::inbv(unsigned short)>
c00176a6:	83 c4 10             	add    esp,0x10
c00176a9:	0f b6 d0             	movzx  edx,al
c00176ac:	83 fa 1c             	cmp    edx,0x1c
c00176af:	74 05                	je     c00176b6 <Vm::faultHandler(regs*)+0x6fe>
c00176b1:	83 fa 5a             	cmp    edx,0x5a
c00176b4:	75 e6                	jne    c001769c <Vm::faultHandler(regs*)+0x6e4>
c00176b6:	0f b6 c0             	movzx  eax,al
c00176b9:	83 f8 1c             	cmp    eax,0x1c
c00176bc:	74 05                	je     c00176c3 <Vm::faultHandler(regs*)+0x70b>
c00176be:	83 f8 5a             	cmp    eax,0x5a
c00176c1:	75 0f                	jne    c00176d2 <Vm::faultHandler(regs*)+0x71a>
c00176c3:	83 ec 0c             	sub    esp,0xc
c00176c6:	6a 60                	push   0x60
c00176c8:	e8 e8 f3 ff ff       	call   c0016ab5 <Vm::inbv(unsigned short)>
c00176cd:	83 c4 10             	add    esp,0x10
c00176d0:	eb e4                	jmp    c00176b6 <Vm::faultHandler(regs*)+0x6fe>
c00176d2:	31 c0                	xor    eax,eax
c00176d4:	83 c4 2c             	add    esp,0x2c
c00176d7:	5b                   	pop    ebx
c00176d8:	5e                   	pop    esi
c00176d9:	5f                   	pop    edi
c00176da:	5d                   	pop    ebp
c00176db:	c3                   	ret    

c00176dc <noCopro(unsigned long)>:
c00176dc:	c3                   	ret    

c00176dd <nmiHandler(regs*, void*)>:
c00176dd:	83 ec 0c             	sub    esp,0xc
c00176e0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00176e5:	83 ec 0c             	sub    esp,0xc
c00176e8:	50                   	push   eax
c00176e9:	e8 c8 fb fe ff       	call   c00072b6 <Computer::handleNMI()>
c00176ee:	83 c4 10             	add    esp,0x10
c00176f1:	90                   	nop
c00176f2:	83 c4 0c             	add    esp,0xc
c00176f5:	c3                   	ret    

c00176f6 <doubleFault(regs*, void*)>:
c00176f6:	55                   	push   ebp
c00176f7:	89 e5                	mov    ebp,esp
c00176f9:	83 ec 08             	sub    esp,0x8
c00176fc:	83 ec 0c             	sub    esp,0xc
c00176ff:	68 dc 28 02 c0       	push   0xc00228dc
c0017704:	e8 62 9d ff ff       	call   c001146b <KePanic(char const*)>
c0017709:	83 c4 10             	add    esp,0x10
c001770c:	90                   	nop
c001770d:	c9                   	leave  
c001770e:	c3                   	ret    

c001770f <displayDebugInfo(regs*)>:
c001770f:	83 ec 1c             	sub    esp,0x1c
c0017712:	0f 20 c0             	mov    eax,cr0
c0017715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017719:	0f 20 d0             	mov    eax,cr2
c001771c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017720:	0f 20 d8             	mov    eax,cr3
c0017723:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017727:	0f 20 e0             	mov    eax,cr4
c001772a:	89 04 24             	mov    DWORD PTR [esp],eax
c001772d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017731:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017734:	83 ec 08             	sub    esp,0x8
c0017737:	50                   	push   eax
c0017738:	68 f8 28 02 c0       	push   0xc00228f8
c001773d:	e8 03 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017742:	83 c4 10             	add    esp,0x10
c0017745:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017749:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001774c:	83 ec 08             	sub    esp,0x8
c001774f:	50                   	push   eax
c0017750:	68 e9 28 02 c0       	push   0xc00228e9
c0017755:	e8 eb 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001775a:	83 c4 10             	add    esp,0x10
c001775d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017761:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017764:	83 ec 08             	sub    esp,0x8
c0017767:	50                   	push   eax
c0017768:	68 f4 28 02 c0       	push   0xc00228f4
c001776d:	e8 d3 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017772:	83 c4 10             	add    esp,0x10
c0017775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017779:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001777c:	83 ec 08             	sub    esp,0x8
c001777f:	50                   	push   eax
c0017780:	68 03 29 02 c0       	push   0xc0022903
c0017785:	e8 bb 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001778a:	83 c4 10             	add    esp,0x10
c001778d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017791:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017794:	83 ec 08             	sub    esp,0x8
c0017797:	50                   	push   eax
c0017798:	68 0e 29 02 c0       	push   0xc002290e
c001779d:	e8 a3 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00177a2:	83 c4 10             	add    esp,0x10
c00177a5:	83 ec 08             	sub    esp,0x8
c00177a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00177ac:	68 19 29 02 c0       	push   0xc0022919
c00177b1:	e8 8f 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00177b6:	83 c4 10             	add    esp,0x10
c00177b9:	83 ec 08             	sub    esp,0x8
c00177bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00177c0:	68 24 29 02 c0       	push   0xc0022924
c00177c5:	e8 7b 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00177ca:	83 c4 10             	add    esp,0x10
c00177cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177d1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00177d4:	c1 e0 05             	shl    eax,0x5
c00177d7:	8d 90 a0 3c 02 c0    	lea    edx,[eax-0x3ffdc360]
c00177dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177e1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00177e4:	83 ec 04             	sub    esp,0x4
c00177e7:	52                   	push   edx
c00177e8:	50                   	push   eax
c00177e9:	68 2f 29 02 c0       	push   0xc002292f
c00177ee:	e8 52 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00177f3:	83 c4 10             	add    esp,0x10
c00177f6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00177fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017801:	83 ec 0c             	sub    esp,0xc
c0017804:	50                   	push   eax
c0017805:	e8 4f 0f ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c001780a:	83 c4 10             	add    esp,0x10
c001780d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017812:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017818:	83 ec 08             	sub    esp,0x8
c001781b:	68 3e 29 02 c0       	push   0xc002293e
c0017820:	50                   	push   eax
c0017821:	e8 80 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017826:	83 c4 10             	add    esp,0x10
c0017829:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001782e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017834:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017838:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001783b:	83 ec 08             	sub    esp,0x8
c001783e:	52                   	push   edx
c001783f:	50                   	push   eax
c0017840:	e8 1b 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017845:	83 c4 10             	add    esp,0x10
c0017848:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001784d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017853:	83 ec 08             	sub    esp,0x8
c0017856:	68 4c 29 02 c0       	push   0xc002294c
c001785b:	50                   	push   eax
c001785c:	e8 45 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017861:	83 c4 10             	add    esp,0x10
c0017864:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017869:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001786f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017874:	8b 12                	mov    edx,DWORD PTR [edx]
c0017876:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017879:	83 c2 0c             	add    edx,0xc
c001787c:	83 ec 08             	sub    esp,0x8
c001787f:	52                   	push   edx
c0017880:	50                   	push   eax
c0017881:	e8 20 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017886:	83 c4 10             	add    esp,0x10
c0017889:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001788e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017894:	83 ec 08             	sub    esp,0x8
c0017897:	68 55 29 02 c0       	push   0xc0022955
c001789c:	50                   	push   eax
c001789d:	e8 04 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00178a2:	83 c4 10             	add    esp,0x10
c00178a5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00178aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178b4:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00178b7:	83 ec 08             	sub    esp,0x8
c00178ba:	52                   	push   edx
c00178bb:	50                   	push   eax
c00178bc:	e8 9f 11 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00178c1:	83 c4 10             	add    esp,0x10
c00178c4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00178c9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178cf:	83 ec 08             	sub    esp,0x8
c00178d2:	68 5d 29 02 c0       	push   0xc002295d
c00178d7:	50                   	push   eax
c00178d8:	e8 c9 11 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00178dd:	83 c4 10             	add    esp,0x10
c00178e0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00178e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178ef:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00178f2:	83 ec 08             	sub    esp,0x8
c00178f5:	52                   	push   edx
c00178f6:	50                   	push   eax
c00178f7:	e8 64 11 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00178fc:	83 c4 10             	add    esp,0x10
c00178ff:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017904:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001790a:	83 ec 08             	sub    esp,0x8
c001790d:	68 65 29 02 c0       	push   0xc0022965
c0017912:	50                   	push   eax
c0017913:	e8 8e 11 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017918:	83 c4 10             	add    esp,0x10
c001791b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017920:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017926:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001792a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001792d:	83 ec 08             	sub    esp,0x8
c0017930:	52                   	push   edx
c0017931:	50                   	push   eax
c0017932:	e8 29 11 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001793f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017945:	83 ec 08             	sub    esp,0x8
c0017948:	68 6d 29 02 c0       	push   0xc002296d
c001794d:	50                   	push   eax
c001794e:	e8 53 11 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017953:	83 c4 10             	add    esp,0x10
c0017956:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001795b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017961:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017965:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017968:	83 ec 08             	sub    esp,0x8
c001796b:	52                   	push   edx
c001796c:	50                   	push   eax
c001796d:	e8 ee 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017972:	83 c4 10             	add    esp,0x10
c0017975:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001797a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017980:	83 ec 08             	sub    esp,0x8
c0017983:	68 75 29 02 c0       	push   0xc0022975
c0017988:	50                   	push   eax
c0017989:	e8 18 11 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001798e:	83 c4 10             	add    esp,0x10
c0017991:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017996:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001799c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179a0:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00179a3:	83 ec 08             	sub    esp,0x8
c00179a6:	52                   	push   edx
c00179a7:	50                   	push   eax
c00179a8:	e8 b3 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00179ad:	83 c4 10             	add    esp,0x10
c00179b0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179bb:	83 ec 08             	sub    esp,0x8
c00179be:	68 7d 29 02 c0       	push   0xc002297d
c00179c3:	50                   	push   eax
c00179c4:	e8 dd 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00179c9:	83 c4 10             	add    esp,0x10
c00179cc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179db:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00179de:	83 ec 08             	sub    esp,0x8
c00179e1:	52                   	push   edx
c00179e2:	50                   	push   eax
c00179e3:	e8 78 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00179e8:	83 c4 10             	add    esp,0x10
c00179eb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179f6:	83 ec 08             	sub    esp,0x8
c00179f9:	68 85 29 02 c0       	push   0xc0022985
c00179fe:	50                   	push   eax
c00179ff:	e8 a2 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a04:	83 c4 10             	add    esp,0x10
c0017a07:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a12:	83 ec 08             	sub    esp,0x8
c0017a15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017a19:	50                   	push   eax
c0017a1a:	e8 41 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a1f:	83 c4 10             	add    esp,0x10
c0017a22:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a27:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a2d:	83 ec 08             	sub    esp,0x8
c0017a30:	68 8e 29 02 c0       	push   0xc002298e
c0017a35:	50                   	push   eax
c0017a36:	e8 6b 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a3b:	83 c4 10             	add    esp,0x10
c0017a3e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a43:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a49:	83 ec 08             	sub    esp,0x8
c0017a4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a50:	50                   	push   eax
c0017a51:	e8 0a 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a56:	83 c4 10             	add    esp,0x10
c0017a59:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a5e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a64:	83 ec 08             	sub    esp,0x8
c0017a67:	68 96 29 02 c0       	push   0xc0022996
c0017a6c:	50                   	push   eax
c0017a6d:	e8 34 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a72:	83 c4 10             	add    esp,0x10
c0017a75:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a7a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a80:	83 ec 08             	sub    esp,0x8
c0017a83:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017a87:	50                   	push   eax
c0017a88:	e8 d3 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a8d:	83 c4 10             	add    esp,0x10
c0017a90:	fa                   	cli    
c0017a91:	f4                   	hlt    
c0017a92:	eb fe                	jmp    c0017a92 <displayDebugInfo(regs*)+0x383>

c0017a94 <HalSystemIdle()>:
c0017a94:	56                   	push   esi
c0017a95:	53                   	push   ebx
c0017a96:	83 ec 14             	sub    esp,0x14
c0017a99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017a9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017aa4:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017aaa:	83 e0 04             	and    eax,0x4
c0017aad:	0f b6 c0             	movzx  eax,al
c0017ab0:	85 c0                	test   eax,eax
c0017ab2:	0f 95 c0             	setne  al
c0017ab5:	0f b6 c0             	movzx  eax,al
c0017ab8:	85 c0                	test   eax,eax
c0017aba:	74 4c                	je     c0017b08 <HalSystemIdle()+0x74>
c0017abc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ac1:	83 ec 08             	sub    esp,0x8
c0017ac4:	68 e1 00 00 00       	push   0xe1
c0017ac9:	50                   	push   eax
c0017aca:	e8 f1 f5 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017acf:	83 c4 10             	add    esp,0x10
c0017ad2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ad6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017ada:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017adf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ae3:	83 e2 02             	and    edx,0x2
c0017ae6:	89 d3                	mov    ebx,edx
c0017ae8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017aec:	83 e2 00             	and    edx,0x0
c0017aef:	89 d6                	mov    esi,edx
c0017af1:	56                   	push   esi
c0017af2:	53                   	push   ebx
c0017af3:	68 e1 00 00 00       	push   0xe1
c0017af8:	50                   	push   eax
c0017af9:	e8 ee f5 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017afe:	83 c4 10             	add    esp,0x10
c0017b01:	e8 8e 86 fe ff       	call   c0000194 <doTPAUSE>
c0017b06:	eb 01                	jmp    c0017b09 <HalSystemIdle()+0x75>
c0017b08:	f4                   	hlt    
c0017b09:	90                   	nop
c0017b0a:	83 c4 14             	add    esp,0x14
c0017b0d:	5b                   	pop    ebx
c0017b0e:	5e                   	pop    esi
c0017b0f:	c3                   	ret    

c0017b10 <displayProgramFault(char const*)>:
c0017b10:	83 ec 0c             	sub    esp,0xc
c0017b13:	83 ec 0c             	sub    esp,0xc
c0017b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b1a:	e8 26 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017b1f:	83 c4 10             	add    esp,0x10
c0017b22:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017b27:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017b2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b32:	85 c0                	test   eax,eax
c0017b34:	74 21                	je     c0017b57 <displayProgramFault(char const*)+0x47>
c0017b36:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017b3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b3d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017b40:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b46:	6a 04                	push   0x4
c0017b48:	6a 0f                	push   0xf
c0017b4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b4e:	50                   	push   eax
c0017b4f:	e8 c4 0f ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017b54:	83 c4 10             	add    esp,0x10
c0017b57:	90                   	nop
c0017b58:	83 c4 0c             	add    esp,0xc
c0017b5b:	c3                   	ret    

c0017b5c <gpFault(regs*, void*)>:
c0017b5c:	83 ec 1c             	sub    esp,0x1c
c0017b5f:	c7 05 74 c7 02 c0 b8 6f 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0016fb8
c0017b69:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017b6e:	85 c0                	test   eax,eax
c0017b70:	74 1e                	je     c0017b90 <gpFault(regs*, void*)+0x34>
c0017b72:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017b77:	83 ec 0c             	sub    esp,0xc
c0017b7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b7e:	ff d0                	call   eax
c0017b80:	83 c4 10             	add    esp,0x10
c0017b83:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017b87:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017b8c:	85 c0                	test   eax,eax
c0017b8e:	75 2e                	jne    c0017bbe <gpFault(regs*, void*)+0x62>
c0017b90:	83 ec 0c             	sub    esp,0xc
c0017b93:	68 9e 29 02 c0       	push   0xc002299e
c0017b98:	e8 73 ff ff ff       	call   c0017b10 <displayProgramFault(char const*)>
c0017b9d:	83 c4 10             	add    esp,0x10
c0017ba0:	83 ec 0c             	sub    esp,0xc
c0017ba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ba7:	e8 63 fb ff ff       	call   c001770f <displayDebugInfo(regs*)>
c0017bac:	83 c4 10             	add    esp,0x10
c0017baf:	83 ec 0c             	sub    esp,0xc
c0017bb2:	6a 00                	push   0x0
c0017bb4:	e8 a3 ed ff ff       	call   c001695c <Thr::terminateFromIRQ(int)>
c0017bb9:	83 c4 10             	add    esp,0x10
c0017bbc:	eb 01                	jmp    c0017bbf <gpFault(regs*, void*)+0x63>
c0017bbe:	90                   	nop
c0017bbf:	83 c4 1c             	add    esp,0x1c
c0017bc2:	c3                   	ret    

c0017bc3 <pgFault(regs*, void*)>:
c0017bc3:	83 ec 1c             	sub    esp,0x1c
c0017bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bca:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017bcd:	0f 20 d0             	mov    eax,cr2
c0017bd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bd8:	83 ec 04             	sub    esp,0x4
c0017bdb:	52                   	push   edx
c0017bdc:	50                   	push   eax
c0017bdd:	68 7c 2a 02 c0       	push   0xc0022a7c
c0017be2:	e8 5e 2d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017be7:	83 c4 10             	add    esp,0x10
c0017bea:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bf1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017bf4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017bfa:	0f 20 d2             	mov    edx,cr2
c0017bfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c05:	83 ec 08             	sub    esp,0x8
c0017c08:	52                   	push   edx
c0017c09:	50                   	push   eax
c0017c0a:	e8 81 27 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017c0f:	83 c4 10             	add    esp,0x10
c0017c12:	0f b6 c0             	movzx  eax,al
c0017c15:	85 c0                	test   eax,eax
c0017c17:	75 2e                	jne    c0017c47 <pgFault(regs*, void*)+0x84>
c0017c19:	83 ec 0c             	sub    esp,0xc
c0017c1c:	68 b7 29 02 c0       	push   0xc00229b7
c0017c21:	e8 ea fe ff ff       	call   c0017b10 <displayProgramFault(char const*)>
c0017c26:	83 c4 10             	add    esp,0x10
c0017c29:	83 ec 0c             	sub    esp,0xc
c0017c2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c30:	e8 da fa ff ff       	call   c001770f <displayDebugInfo(regs*)>
c0017c35:	83 c4 10             	add    esp,0x10
c0017c38:	83 ec 0c             	sub    esp,0xc
c0017c3b:	6a 00                	push   0x0
c0017c3d:	e8 1a ed ff ff       	call   c001695c <Thr::terminateFromIRQ(int)>
c0017c42:	83 c4 10             	add    esp,0x10
c0017c45:	eb 01                	jmp    c0017c48 <pgFault(regs*, void*)+0x85>
c0017c47:	90                   	nop
c0017c48:	83 c4 1c             	add    esp,0x1c
c0017c4b:	c3                   	ret    

c0017c4c <otherISRHandler(regs*, void*)>:
c0017c4c:	83 ec 0c             	sub    esp,0xc
c0017c4f:	83 ec 0c             	sub    esp,0xc
c0017c52:	68 a4 2a 02 c0       	push   0xc0022aa4
c0017c57:	e8 b4 fe ff ff       	call   c0017b10 <displayProgramFault(char const*)>
c0017c5c:	83 c4 10             	add    esp,0x10
c0017c5f:	83 ec 0c             	sub    esp,0xc
c0017c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c66:	e8 a4 fa ff ff       	call   c001770f <displayDebugInfo(regs*)>
c0017c6b:	83 c4 10             	add    esp,0x10
c0017c6e:	83 ec 0c             	sub    esp,0xc
c0017c71:	6a 00                	push   0x0
c0017c73:	e8 e4 ec ff ff       	call   c001695c <Thr::terminateFromIRQ(int)>
c0017c78:	83 c4 10             	add    esp,0x10
c0017c7b:	90                   	nop
c0017c7c:	83 c4 0c             	add    esp,0xc
c0017c7f:	c3                   	ret    

c0017c80 <opcodeFault(regs*, void*)>:
c0017c80:	55                   	push   ebp
c0017c81:	89 e5                	mov    ebp,esp
c0017c83:	83 ec 08             	sub    esp,0x8
c0017c86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c89:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017c8c:	83 ec 08             	sub    esp,0x8
c0017c8f:	50                   	push   eax
c0017c90:	68 c2 29 02 c0       	push   0xc00229c2
c0017c95:	e8 ab 2c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017c9a:	83 c4 10             	add    esp,0x10
c0017c9d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ca2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ca8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017cae:	0f b6 c0             	movzx  eax,al
c0017cb1:	85 c0                	test   eax,eax
c0017cb3:	74 21                	je     c0017cd6 <opcodeFault(regs*, void*)+0x56>
c0017cb5:	83 ec 0c             	sub    esp,0xc
c0017cb8:	68 cc 2a 02 c0       	push   0xc0022acc
c0017cbd:	e8 83 2c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017cc2:	83 c4 10             	add    esp,0x10
c0017cc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cc8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ccb:	8d 50 19             	lea    edx,[eax+0x19]
c0017cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cd1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017cd4:	eb 2b                	jmp    c0017d01 <opcodeFault(regs*, void*)+0x81>
c0017cd6:	83 ec 0c             	sub    esp,0xc
c0017cd9:	68 d0 29 02 c0       	push   0xc00229d0
c0017cde:	e8 2d fe ff ff       	call   c0017b10 <displayProgramFault(char const*)>
c0017ce3:	83 c4 10             	add    esp,0x10
c0017ce6:	83 ec 0c             	sub    esp,0xc
c0017ce9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017cec:	e8 1e fa ff ff       	call   c001770f <displayDebugInfo(regs*)>
c0017cf1:	83 c4 10             	add    esp,0x10
c0017cf4:	83 ec 0c             	sub    esp,0xc
c0017cf7:	6a 00                	push   0x0
c0017cf9:	e8 5e ec ff ff       	call   c001695c <Thr::terminateFromIRQ(int)>
c0017cfe:	83 c4 10             	add    esp,0x10
c0017d01:	c9                   	leave  
c0017d02:	c3                   	ret    

c0017d03 <i386SaveCoprocessor(void*)>:
c0017d03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d07:	83 c0 3f             	add    eax,0x3f
c0017d0a:	83 e0 c0             	and    eax,0xffffffc0
c0017d0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d11:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017d17 <i386LoadCoprocessor(void*)>:
c0017d17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d1b:	83 c0 3f             	add    eax,0x3f
c0017d1e:	83 e0 c0             	and    eax,0xffffffc0
c0017d21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d25:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017d2b <x87EmulHandler(regs*, void*)>:
c0017d2b:	53                   	push   ebx
c0017d2c:	83 ec 08             	sub    esp,0x8
c0017d2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d34:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017d38:	74 10                	je     c0017d4a <x87EmulHandler(regs*, void*)+0x1f>
c0017d3a:	83 ec 0c             	sub    esp,0xc
c0017d3d:	68 dd 29 02 c0       	push   0xc00229dd
c0017d42:	e8 24 97 ff ff       	call   c001146b <KePanic(char const*)>
c0017d47:	83 c4 10             	add    esp,0x10
c0017d4a:	0f 20 c0             	mov    eax,cr0
c0017d4d:	a8 08                	test   al,0x8
c0017d4f:	74 59                	je     c0017daa <x87EmulHandler(regs*, void*)+0x7f>
c0017d51:	0f 06                	clts   
c0017d53:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017d58:	85 c0                	test   eax,eax
c0017d5a:	74 0e                	je     c0017d6a <x87EmulHandler(regs*, void*)+0x3f>
c0017d5c:	83 ec 0c             	sub    esp,0xc
c0017d5f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017d62:	e8 9c ff ff ff       	call   c0017d03 <i386SaveCoprocessor(void*)>
c0017d67:	83 c4 10             	add    esp,0x10
c0017d6a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017d70:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017d74:	75 12                	jne    c0017d88 <x87EmulHandler(regs*, void*)+0x5d>
c0017d76:	83 ec 0c             	sub    esp,0xc
c0017d79:	68 40 02 00 00       	push   0x240
c0017d7e:	e8 33 fd fe ff       	call   c0007ab6 <malloc>
c0017d83:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017d86:	eb 10                	jmp    c0017d98 <x87EmulHandler(regs*, void*)+0x6d>
c0017d88:	83 ec 0c             	sub    esp,0xc
c0017d8b:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017d90:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017d93:	e8 7f ff ff ff       	call   c0017d17 <i386LoadCoprocessor(void*)>
c0017d98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d9d:	83 c4 10             	add    esp,0x10
c0017da0:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017da5:	83 c4 08             	add    esp,0x8
c0017da8:	5b                   	pop    ebx
c0017da9:	c3                   	ret    
c0017daa:	83 ec 0c             	sub    esp,0xc
c0017dad:	68 f1 29 02 c0       	push   0xc00229f1
c0017db2:	e8 8e 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017db7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017dbf:	83 c4 18             	add    esp,0x18
c0017dc2:	5b                   	pop    ebx
c0017dc3:	e9 94 eb ff ff       	jmp    c001695c <Thr::terminateFromIRQ(int)>

c0017dc8 <HalInitialiseCoprocessor()>:
c0017dc8:	83 ec 10             	sub    esp,0x10
c0017dcb:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017dd5:	6a 00                	push   0x0
c0017dd7:	68 2b 7d 01 c0       	push   0xc0017d2b
c0017ddc:	6a 07                	push   0x7
c0017dde:	e8 63 4f ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017de3:	e8 48 70 00 00       	call   c001ee30 <avxDetect>
c0017de8:	83 c4 10             	add    esp,0x10
c0017deb:	85 c0                	test   eax,eax
c0017ded:	74 1c                	je     c0017e0b <HalInitialiseCoprocessor()+0x43>
c0017def:	c7 05 70 c7 02 c0 5a ee 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001ee5a
c0017df9:	c7 05 6c c7 02 c0 6b ee 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001ee6b
c0017e03:	83 c4 0c             	add    esp,0xc
c0017e06:	e9 71 70 00 00       	jmp    c001ee7c <avxInit>
c0017e0b:	e8 b0 73 00 00       	call   c001f1c0 <absolutelyNoChanceInHell>
c0017e10:	85 c0                	test   eax,eax
c0017e12:	74 1c                	je     c0017e30 <HalInitialiseCoprocessor()+0x68>
c0017e14:	c7 05 70 c7 02 c0 d8 f1 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f1d8
c0017e1e:	c7 05 6c c7 02 c0 e0 f1 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f1e0
c0017e28:	83 c4 0c             	add    esp,0xc
c0017e2b:	e9 b8 73 00 00       	jmp    c001f1e8 <sseInit>
c0017e30:	e8 d1 73 00 00       	call   c001f206 <x87Detect>
c0017e35:	85 c0                	test   eax,eax
c0017e37:	74 1c                	je     c0017e55 <HalInitialiseCoprocessor()+0x8d>
c0017e39:	c7 05 70 c7 02 c0 21 f2 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f221
c0017e43:	c7 05 6c c7 02 c0 28 f2 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f228
c0017e4d:	83 c4 0c             	add    esp,0xc
c0017e50:	e9 da 73 00 00       	jmp    c001f22f <x87Init>
c0017e55:	c7 05 70 c7 02 c0 dc 76 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc00176dc
c0017e5f:	c7 05 6c c7 02 c0 dc 76 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc00176dc
c0017e69:	0f 20 c0             	mov    eax,cr0
c0017e6c:	83 c8 04             	or     eax,0x4
c0017e6f:	0f 22 c0             	mov    cr0,eax
c0017e72:	83 c4 0c             	add    esp,0xc
c0017e75:	c3                   	ret    

c0017e76 <HalPanic(char const*)>:
c0017e76:	53                   	push   ebx
c0017e77:	83 ec 10             	sub    esp,0x10
c0017e7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e7e:	fa                   	cli    
c0017e7f:	53                   	push   ebx
c0017e80:	68 07 2a 02 c0       	push   0xc0022a07
c0017e85:	e8 bb 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e8a:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0017e8f:	83 c4 10             	add    esp,0x10
c0017e92:	85 c0                	test   eax,eax
c0017e94:	74 09                	je     c0017e9f <HalPanic(char const*)+0x29>
c0017e96:	83 ec 0c             	sub    esp,0xc
c0017e99:	53                   	push   ebx
c0017e9a:	ff d0                	call   eax
c0017e9c:	83 c4 10             	add    esp,0x10
c0017e9f:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0017ea4:	85 c0                	test   eax,eax
c0017ea6:	0f 84 dc 00 00 00    	je     c0017f88 <HalPanic(char const*)+0x112>
c0017eac:	52                   	push   edx
c0017ead:	6a 01                	push   0x1
c0017eaf:	6a 0f                	push   0xf
c0017eb1:	50                   	push   eax
c0017eb2:	e8 fd 06 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017eb7:	59                   	pop    ecx
c0017eb8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017ebe:	e8 e1 08 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017ec3:	58                   	pop    eax
c0017ec4:	5a                   	pop    edx
c0017ec5:	68 84 0c 02 c0       	push   0xc0020c84
c0017eca:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017ed0:	e8 17 07 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017ed5:	83 c4 0c             	add    esp,0xc
c0017ed8:	6a 01                	push   0x1
c0017eda:	6a 0f                	push   0xf
c0017edc:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017ee2:	e8 cd 06 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ee7:	59                   	pop    ecx
c0017ee8:	58                   	pop    eax
c0017ee9:	68 20 2a 02 c0       	push   0xc0022a20
c0017eee:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017ef4:	e8 ad 0b ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ef9:	83 c4 0c             	add    esp,0xc
c0017efc:	6a 0f                	push   0xf
c0017efe:	6a 01                	push   0x1
c0017f00:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017f06:	e8 a9 06 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017f0b:	58                   	pop    eax
c0017f0c:	5a                   	pop    edx
c0017f0d:	68 29 2a 02 c0       	push   0xc0022a29
c0017f12:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017f18:	e8 89 0b ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017f1d:	83 c4 0c             	add    esp,0xc
c0017f20:	6a 01                	push   0x1
c0017f22:	6a 0f                	push   0xf
c0017f24:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017f2a:	e8 85 06 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017f2f:	59                   	pop    ecx
c0017f30:	58                   	pop    eax
c0017f31:	68 6d 2a 02 c0       	push   0xc0022a6d
c0017f36:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017f3c:	e8 65 0b ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017f41:	58                   	pop    eax
c0017f42:	5a                   	pop    edx
c0017f43:	68 36 2a 02 c0       	push   0xc0022a36
c0017f48:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017f4e:	e8 53 0b ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017f53:	59                   	pop    ecx
c0017f54:	58                   	pop    eax
c0017f55:	68 70 2a 02 c0       	push   0xc0022a70
c0017f5a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017f60:	e8 41 0b ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017f65:	58                   	pop    eax
c0017f66:	5a                   	pop    edx
c0017f67:	53                   	push   ebx
c0017f68:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017f6e:	e8 33 0b ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017f73:	59                   	pop    ecx
c0017f74:	5b                   	pop    ebx
c0017f75:	68 6d 2a 02 c0       	push   0xc0022a6d
c0017f7a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017f80:	e8 21 0b ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017f85:	83 c4 10             	add    esp,0x10
c0017f88:	eb fe                	jmp    c0017f88 <HalPanic(char const*)+0x112>

c0017f8a <HalQueryPerformanceCounter()>:
c0017f8a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017f8f:	31 d2                	xor    edx,edx
c0017f91:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017f97:	31 c0                	xor    eax,eax
c0017f99:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017fa0:	74 02                	je     c0017fa4 <HalQueryPerformanceCounter()+0x1a>
c0017fa2:	0f 31                	rdtsc  
c0017fa4:	c3                   	ret    

c0017fa5 <HalInitialise()>:
c0017fa5:	53                   	push   ebx
c0017fa6:	83 ec 08             	sub    esp,0x8
c0017fa9:	e8 c8 4f ff ff       	call   c000cf76 <setupINTS()>
c0017fae:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0017fb5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017fba:	75 0f                	jne    c0017fcb <HalInitialise()+0x26>
c0017fbc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017fc2:	83 e2 fe             	and    edx,0xfffffffe
c0017fc5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017fcb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017fd1:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0017fd8:	83 e2 fe             	and    edx,0xfffffffe
c0017fdb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017fe1:	e8 9e 02 00 00       	call   c0018284 <picOpen()>
c0017fe6:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0017fed:	74 0a                	je     c0017ff9 <HalInitialise()+0x54>
c0017fef:	e8 e0 01 00 00       	call   c00181d4 <picDisable()>
c0017ff4:	e8 ad 67 00 00       	call   c001e7a6 <apicOpen()>
c0017ff9:	bb 0f 00 00 00       	mov    ebx,0xf
c0017ffe:	50                   	push   eax
c0017fff:	6a 00                	push   0x0
c0018001:	68 4c 7c 01 c0       	push   0xc0017c4c
c0018006:	6a 00                	push   0x0
c0018008:	e8 39 4d ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001800d:	83 c4 0c             	add    esp,0xc
c0018010:	6a 00                	push   0x0
c0018012:	68 4c 7c 01 c0       	push   0xc0017c4c
c0018017:	6a 01                	push   0x1
c0018019:	e8 28 4d ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001801e:	83 c4 0c             	add    esp,0xc
c0018021:	6a 00                	push   0x0
c0018023:	68 dd 76 01 c0       	push   0xc00176dd
c0018028:	6a 02                	push   0x2
c001802a:	e8 17 4d ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001802f:	83 c4 0c             	add    esp,0xc
c0018032:	6a 00                	push   0x0
c0018034:	68 4c 7c 01 c0       	push   0xc0017c4c
c0018039:	6a 03                	push   0x3
c001803b:	e8 06 4d ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018040:	83 c4 0c             	add    esp,0xc
c0018043:	6a 00                	push   0x0
c0018045:	68 4c 7c 01 c0       	push   0xc0017c4c
c001804a:	6a 04                	push   0x4
c001804c:	e8 f5 4c ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018051:	83 c4 0c             	add    esp,0xc
c0018054:	6a 00                	push   0x0
c0018056:	68 4c 7c 01 c0       	push   0xc0017c4c
c001805b:	6a 05                	push   0x5
c001805d:	e8 e4 4c ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018062:	83 c4 0c             	add    esp,0xc
c0018065:	6a 00                	push   0x0
c0018067:	68 80 7c 01 c0       	push   0xc0017c80
c001806c:	6a 06                	push   0x6
c001806e:	e8 d3 4c ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018073:	83 c4 0c             	add    esp,0xc
c0018076:	6a 00                	push   0x0
c0018078:	68 f6 76 01 c0       	push   0xc00176f6
c001807d:	6a 08                	push   0x8
c001807f:	e8 c2 4c ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018084:	83 c4 0c             	add    esp,0xc
c0018087:	6a 00                	push   0x0
c0018089:	68 4c 7c 01 c0       	push   0xc0017c4c
c001808e:	6a 09                	push   0x9
c0018090:	e8 b1 4c ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018095:	83 c4 0c             	add    esp,0xc
c0018098:	6a 00                	push   0x0
c001809a:	68 4c 7c 01 c0       	push   0xc0017c4c
c001809f:	6a 0a                	push   0xa
c00180a1:	e8 a0 4c ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00180a6:	83 c4 0c             	add    esp,0xc
c00180a9:	6a 00                	push   0x0
c00180ab:	68 4c 7c 01 c0       	push   0xc0017c4c
c00180b0:	6a 0b                	push   0xb
c00180b2:	e8 8f 4c ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00180b7:	83 c4 0c             	add    esp,0xc
c00180ba:	6a 00                	push   0x0
c00180bc:	68 5c 7b 01 c0       	push   0xc0017b5c
c00180c1:	6a 0d                	push   0xd
c00180c3:	e8 7e 4c ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00180c8:	83 c4 0c             	add    esp,0xc
c00180cb:	6a 00                	push   0x0
c00180cd:	68 c3 7b 01 c0       	push   0xc0017bc3
c00180d2:	6a 0e                	push   0xe
c00180d4:	e8 6d 4c ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00180d9:	83 c4 10             	add    esp,0x10
c00180dc:	50                   	push   eax
c00180dd:	6a 00                	push   0x0
c00180df:	68 4c 7c 01 c0       	push   0xc0017c4c
c00180e4:	53                   	push   ebx
c00180e5:	43                   	inc    ebx
c00180e6:	e8 5b 4c ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00180eb:	83 c4 10             	add    esp,0x10
c00180ee:	83 fb 1e             	cmp    ebx,0x1e
c00180f1:	75 e9                	jne    c00180dc <HalInitialise()+0x137>
c00180f3:	50                   	push   eax
c00180f4:	6a 00                	push   0x0
c00180f6:	68 ca 28 01 c0       	push   0xc00128ca
c00180fb:	6a 60                	push   0x60
c00180fd:	e8 44 4c ff ff       	call   c000cd46 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018102:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018107:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018111:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018118:	e8 99 f9 fe ff       	call   c0007ab6 <malloc>
c001811d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018120:	89 c3                	mov    ebx,eax
c0018122:	e8 3b 09 00 00       	call   c0018a62 <RTC::RTC()>
c0018127:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018131:	5a                   	pop    edx
c0018132:	59                   	pop    ecx
c0018133:	53                   	push   ebx
c0018134:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001813a:	e8 d3 46 ff ff       	call   c000c812 <Device::addChild(Device*)>
c001813f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018141:	6a 00                	push   0x0
c0018143:	6a 00                	push   0x0
c0018145:	6a 00                	push   0x0
c0018147:	53                   	push   ebx
c0018148:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001814b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018150:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018156:	83 c4 28             	add    esp,0x28
c0018159:	5b                   	pop    ebx
c001815a:	c3                   	ret    

c001815b <HalMakeBeep(int)>:
c001815b:	53                   	push   ebx
c001815c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018160:	85 db                	test   ebx,ebx
c0018162:	75 07                	jne    c001816b <HalMakeBeep(int)+0x10>
c0018164:	e4 61                	in     al,0x61
c0018166:	83 e0 fc             	and    eax,0xfffffffc
c0018169:	eb 26                	jmp    c0018191 <HalMakeBeep(int)+0x36>
c001816b:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018170:	99                   	cdq    
c0018171:	f7 fb                	idiv   ebx
c0018173:	89 c1                	mov    ecx,eax
c0018175:	b0 b6                	mov    al,0xb6
c0018177:	e6 43                	out    0x43,al
c0018179:	88 c8                	mov    al,cl
c001817b:	e6 42                	out    0x42,al
c001817d:	89 c8                	mov    eax,ecx
c001817f:	c1 e8 08             	shr    eax,0x8
c0018182:	e6 42                	out    0x42,al
c0018184:	e4 61                	in     al,0x61
c0018186:	89 c2                	mov    edx,eax
c0018188:	83 ca 03             	or     edx,0x3
c001818b:	38 d0                	cmp    al,dl
c001818d:	74 04                	je     c0018193 <HalMakeBeep(int)+0x38>
c001818f:	88 d0                	mov    al,dl
c0018191:	e6 61                	out    0x61,al
c0018193:	5b                   	pop    ebx
c0018194:	c3                   	ret    

c0018195 <HalGetRand()>:
c0018195:	31 c0                	xor    eax,eax
c0018197:	c3                   	ret    

c0018198 <HalEndOfInterrupt(int)>:
c0018198:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001819f:	74 23                	je     c00181c4 <HalEndOfInterrupt(int)+0x2c>
c00181a1:	83 ec 14             	sub    esp,0x14
c00181a4:	6a 1b                	push   0x1b
c00181a6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00181ac:	e8 0f ef fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00181b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00181b6:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00181c0:	83 c4 1c             	add    esp,0x1c
c00181c3:	c3                   	ret    
c00181c4:	e9 3f 02 00 00       	jmp    c0018408 <picEOI(int)>

c00181c9 <HalRestart()>:
c00181c9:	c3                   	ret    

c00181ca <HalShutdown()>:
c00181ca:	c3                   	ret    

c00181cb <HalSleep()>:
c00181cb:	c3                   	ret    

c00181cc <picIoWait()>:
c00181cc:	eb 00                	jmp    c00181ce <picIoWait()+0x2>
c00181ce:	eb 00                	jmp    c00181d0 <picIoWait()+0x4>
c00181d0:	90                   	nop
c00181d1:	c3                   	ret    
c00181d2:	66 90                	xchg   ax,ax

c00181d4 <picDisable()>:
c00181d4:	83 ec 10             	sub    esp,0x10
c00181d7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00181de:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00181e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00181e7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00181ec:	ee                   	out    dx,al
c00181ed:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00181f4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00181f9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00181fd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018202:	ee                   	out    dx,al
c0018203:	90                   	nop
c0018204:	83 c4 10             	add    esp,0x10
c0018207:	c3                   	ret    

c0018208 <picGetIRQReg(int)>:
c0018208:	83 ec 10             	sub    esp,0x10
c001820b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001820f:	0f b6 c0             	movzx  eax,al
c0018212:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018219:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001821d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018221:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018226:	ee                   	out    dx,al
c0018227:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001822b:	0f b6 c0             	movzx  eax,al
c001822e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018235:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018239:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001823d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018242:	ee                   	out    dx,al
c0018243:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001824a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001824f:	89 c2                	mov    edx,eax
c0018251:	ec                   	in     al,dx
c0018252:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018256:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001825a:	0f b6 c0             	movzx  eax,al
c001825d:	c1 e0 08             	shl    eax,0x8
c0018260:	89 c1                	mov    ecx,eax
c0018262:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018269:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001826e:	89 c2                	mov    edx,eax
c0018270:	ec                   	in     al,dx
c0018271:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018275:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018279:	0f b6 c0             	movzx  eax,al
c001827c:	09 c8                	or     eax,ecx
c001827e:	83 c4 10             	add    esp,0x10
c0018281:	c3                   	ret    
c0018282:	66 90                	xchg   ax,ax

c0018284 <picOpen()>:
c0018284:	83 ec 50             	sub    esp,0x50
c0018287:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001828e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018293:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018297:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001829b:	ee                   	out    dx,al
c001829c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00182a3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00182a8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00182ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00182b0:	ee                   	out    dx,al
c00182b1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00182b9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00182c1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00182c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00182cc:	89 c2                	mov    edx,eax
c00182ce:	ec                   	in     al,dx
c00182cf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00182d3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00182d7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00182db:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00182e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182e6:	89 c2                	mov    edx,eax
c00182e8:	ec                   	in     al,dx
c00182e9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00182ed:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00182f1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00182f5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00182fc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018301:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018305:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018309:	ee                   	out    dx,al
c001830a:	e8 bd fe ff ff       	call   c00181cc <picIoWait()>
c001830f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018316:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001831b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001831f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018323:	ee                   	out    dx,al
c0018324:	e8 a3 fe ff ff       	call   c00181cc <picIoWait()>
c0018329:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001832d:	0f b6 c0             	movzx  eax,al
c0018330:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018337:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001833b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001833f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018343:	ee                   	out    dx,al
c0018344:	e8 83 fe ff ff       	call   c00181cc <picIoWait()>
c0018349:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001834d:	0f b6 c0             	movzx  eax,al
c0018350:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018357:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001835b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001835f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018363:	ee                   	out    dx,al
c0018364:	e8 63 fe ff ff       	call   c00181cc <picIoWait()>
c0018369:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018370:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018375:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018379:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001837d:	ee                   	out    dx,al
c001837e:	e8 49 fe ff ff       	call   c00181cc <picIoWait()>
c0018383:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001838a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001838f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018393:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018397:	ee                   	out    dx,al
c0018398:	e8 2f fe ff ff       	call   c00181cc <picIoWait()>
c001839d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00183a4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00183a9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00183ad:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00183b1:	ee                   	out    dx,al
c00183b2:	e8 15 fe ff ff       	call   c00181cc <picIoWait()>
c00183b7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00183be:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00183c3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00183c7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00183cb:	ee                   	out    dx,al
c00183cc:	e8 fb fd ff ff       	call   c00181cc <picIoWait()>
c00183d1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00183d6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00183dd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00183e1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00183e5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00183e9:	ee                   	out    dx,al
c00183ea:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00183ef:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00183f6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00183fa:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00183fe:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018402:	ee                   	out    dx,al
c0018403:	90                   	nop
c0018404:	83 c4 50             	add    esp,0x50
c0018407:	c3                   	ret    

c0018408 <picEOI(int)>:
c0018408:	83 ec 10             	sub    esp,0x10
c001840b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018410:	75 1e                	jne    c0018430 <picEOI(int)+0x28>
c0018412:	6a 0b                	push   0xb
c0018414:	e8 ef fd ff ff       	call   c0018208 <picGetIRQReg(int)>
c0018419:	83 c4 04             	add    esp,0x4
c001841c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018421:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018426:	25 80 00 00 00       	and    eax,0x80
c001842b:	74 73                	je     c00184a0 <picEOI(int)+0x98>
c001842d:	8d 76 00             	lea    esi,[esi+0x0]
c0018430:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018435:	75 31                	jne    c0018468 <picEOI(int)+0x60>
c0018437:	6a 0b                	push   0xb
c0018439:	e8 ca fd ff ff       	call   c0018208 <picGetIRQReg(int)>
c001843e:	83 c4 04             	add    esp,0x4
c0018441:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001844a:	98                   	cwde   
c001844b:	85 c0                	test   eax,eax
c001844d:	78 19                	js     c0018468 <picEOI(int)+0x60>
c001844f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018456:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001845b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001845f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018464:	ee                   	out    dx,al
c0018465:	eb 3d                	jmp    c00184a4 <picEOI(int)+0x9c>
c0018467:	90                   	nop
c0018468:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001846d:	7e 19                	jle    c0018488 <picEOI(int)+0x80>
c001846f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018476:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001847b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001847f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018484:	ee                   	out    dx,al
c0018485:	8d 76 00             	lea    esi,[esi+0x0]
c0018488:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001848f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018494:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018498:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001849d:	ee                   	out    dx,al
c001849e:	eb 04                	jmp    c00184a4 <picEOI(int)+0x9c>
c00184a0:	90                   	nop
c00184a1:	8d 76 00             	lea    esi,[esi+0x0]
c00184a4:	83 c4 10             	add    esp,0x10
c00184a7:	c3                   	ret    

c00184a8 <RTC::open(int, int, void*)>:
c00184a8:	31 c0                	xor    eax,eax
c00184aa:	c3                   	ret    
c00184ab:	90                   	nop

c00184ac <RTC::close(int, int, void*)>:
c00184ac:	31 c0                	xor    eax,eax
c00184ae:	c3                   	ret    
c00184af:	90                   	nop

c00184b0 <RTC::timeInSecondsUTC()>:
c00184b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184b4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00184ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00184c0:	c3                   	ret    
c00184c1:	90                   	nop

c00184c2 <RTC::timeInDatetimeUTC()>:
c00184c2:	53                   	push   ebx
c00184c3:	83 ec 14             	sub    esp,0x14
c00184c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00184ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00184d0:	50                   	push   eax
c00184d1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00184d4:	83 c4 0c             	add    esp,0xc
c00184d7:	52                   	push   edx
c00184d8:	50                   	push   eax
c00184d9:	53                   	push   ebx
c00184da:	e8 a7 40 ff ff       	call   c000c586 <secondsToDatetime(unsigned long long)>
c00184df:	89 d8                	mov    eax,ebx
c00184e1:	83 c4 14             	add    esp,0x14
c00184e4:	5b                   	pop    ebx
c00184e5:	c2 04 00             	ret    0x4

c00184e8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00184e8:	56                   	push   esi
c00184e9:	53                   	push   ebx
c00184ea:	83 ec 14             	sub    esp,0x14
c00184ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00184f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00184f3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00184f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00184fa:	52                   	push   edx
c00184fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00184ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018503:	50                   	push   eax
c0018504:	e8 7d 40 ff ff       	call   c000c586 <secondsToDatetime(unsigned long long)>
c0018509:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001850d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018511:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018515:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018519:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001851d:	89 f0                	mov    eax,esi
c001851f:	83 c4 20             	add    esp,0x20
c0018522:	5b                   	pop    ebx
c0018523:	5e                   	pop    esi
c0018524:	ff e0                	jmp    eax

c0018526 <RTC::~RTC()>:
c0018526:	83 ec 0c             	sub    esp,0xc
c0018529:	ba 0c 2b 02 c0       	mov    edx,0xc0022b0c
c001852e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018532:	89 10                	mov    DWORD PTR [eax],edx
c0018534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018538:	83 ec 0c             	sub    esp,0xc
c001853b:	50                   	push   eax
c001853c:	e8 d7 3d ff ff       	call   c000c318 <Clock::~Clock()>
c0018541:	83 c4 10             	add    esp,0x10
c0018544:	90                   	nop
c0018545:	83 c4 0c             	add    esp,0xc
c0018548:	c3                   	ret    
c0018549:	90                   	nop

c001854a <RTC::~RTC()>:
c001854a:	83 ec 0c             	sub    esp,0xc
c001854d:	83 ec 0c             	sub    esp,0xc
c0018550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018554:	e8 cd ff ff ff       	call   c0018526 <RTC::~RTC()>
c0018559:	83 c4 10             	add    esp,0x10
c001855c:	83 ec 08             	sub    esp,0x8
c001855f:	68 60 01 00 00       	push   0x160
c0018564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018568:	e8 ab 22 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001856d:	83 c4 10             	add    esp,0x10
c0018570:	83 c4 0c             	add    esp,0xc
c0018573:	c3                   	ret    

c0018574 <RTC::get_update_in_progress_flag()>:
c0018574:	83 ec 14             	sub    esp,0x14
c0018577:	6a 0a                	push   0xa
c0018579:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001857f:	e8 f4 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018584:	83 c4 1c             	add    esp,0x1c
c0018587:	0f b6 c0             	movzx  eax,al
c001858a:	c1 e8 07             	shr    eax,0x7
c001858d:	c3                   	ret    

c001858e <RTC::completeRTCRefresh()>:
c001858e:	55                   	push   ebp
c001858f:	57                   	push   edi
c0018590:	56                   	push   esi
c0018591:	53                   	push   ebx
c0018592:	83 ec 3c             	sub    esp,0x3c
c0018595:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c001859b:	83 ec 0c             	sub    esp,0xc
c001859e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00185a2:	e8 cd ff ff ff       	call   c0018574 <RTC::get_update_in_progress_flag()>
c00185a7:	83 c4 10             	add    esp,0x10
c00185aa:	84 c0                	test   al,al
c00185ac:	74 0e                	je     c00185bc <RTC::completeRTCRefresh()+0x2e>
c00185ae:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00185b4:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00185ba:	73 df                	jae    c001859b <RTC::completeRTCRefresh()+0xd>
c00185bc:	51                   	push   ecx
c00185bd:	51                   	push   ecx
c00185be:	6a 00                	push   0x0
c00185c0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00185c6:	e8 ad eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00185cb:	5b                   	pop    ebx
c00185cc:	89 c7                	mov    edi,eax
c00185ce:	5e                   	pop    esi
c00185cf:	6a 02                	push   0x2
c00185d1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00185d7:	e8 9c eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00185dc:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00185e0:	5d                   	pop    ebp
c00185e1:	58                   	pop    eax
c00185e2:	6a 04                	push   0x4
c00185e4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00185ea:	e8 89 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00185ef:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00185f3:	58                   	pop    eax
c00185f4:	5a                   	pop    edx
c00185f5:	6a 07                	push   0x7
c00185f7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00185fd:	e8 76 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018602:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018606:	59                   	pop    ecx
c0018607:	5b                   	pop    ebx
c0018608:	6a 08                	push   0x8
c001860a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018610:	e8 63 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018615:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018619:	5e                   	pop    esi
c001861a:	5d                   	pop    ebp
c001861b:	6a 09                	push   0x9
c001861d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018623:	e8 50 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018628:	0f b6 c0             	movzx  eax,al
c001862b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001862f:	83 c4 10             	add    esp,0x10
c0018632:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018638:	83 ec 0c             	sub    esp,0xc
c001863b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001863f:	e8 30 ff ff ff       	call   c0018574 <RTC::get_update_in_progress_flag()>
c0018644:	83 c4 10             	add    esp,0x10
c0018647:	84 c0                	test   al,al
c0018649:	74 0e                	je     c0018659 <RTC::completeRTCRefresh()+0xcb>
c001864b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018651:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018657:	73 df                	jae    c0018638 <RTC::completeRTCRefresh()+0xaa>
c0018659:	51                   	push   ecx
c001865a:	51                   	push   ecx
c001865b:	6a 00                	push   0x0
c001865d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018663:	e8 10 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018668:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001866c:	5b                   	pop    ebx
c001866d:	5e                   	pop    esi
c001866e:	6a 02                	push   0x2
c0018670:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018676:	e8 fd ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001867b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001867f:	5d                   	pop    ebp
c0018680:	58                   	pop    eax
c0018681:	6a 04                	push   0x4
c0018683:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018689:	e8 ea ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001868e:	88 c3                	mov    bl,al
c0018690:	58                   	pop    eax
c0018691:	5a                   	pop    edx
c0018692:	6a 07                	push   0x7
c0018694:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001869a:	e8 d9 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001869f:	59                   	pop    ecx
c00186a0:	89 c6                	mov    esi,eax
c00186a2:	5d                   	pop    ebp
c00186a3:	6a 08                	push   0x8
c00186a5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186ab:	e8 c8 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00186b0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00186b4:	58                   	pop    eax
c00186b5:	5a                   	pop    edx
c00186b6:	6a 09                	push   0x9
c00186b8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186be:	e8 b5 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00186c3:	89 f9                	mov    ecx,edi
c00186c5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00186c9:	0f b6 e8             	movzx  ebp,al
c00186cc:	83 c4 10             	add    esp,0x10
c00186cf:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00186d3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00186d8:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00186dd:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00186e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00186e5:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00186e9:	0f 94 c0             	sete   al
c00186ec:	0f b6 fb             	movzx  edi,bl
c00186ef:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00186f3:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00186f8:	0f 94 c2             	sete   dl
c00186fb:	21 d0                	and    eax,edx
c00186fd:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018701:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018705:	0f 94 c2             	sete   dl
c0018708:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001870c:	21 c2                	and    edx,eax
c001870e:	89 f0                	mov    eax,esi
c0018710:	0f b6 c0             	movzx  eax,al
c0018713:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018717:	89 f0                	mov    eax,esi
c0018719:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001871d:	0f 94 c0             	sete   al
c0018720:	21 d0                	and    eax,edx
c0018722:	31 d2                	xor    edx,edx
c0018724:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018728:	0f 94 c2             	sete   dl
c001872b:	85 c2                	test   edx,eax
c001872d:	75 27                	jne    c0018756 <RTC::completeRTCRefresh()+0x1c8>
c001872f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018733:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018737:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001873b:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001873f:	89 f0                	mov    eax,esi
c0018741:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018745:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018749:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001874d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018751:	e9 dc fe ff ff       	jmp    c0018632 <RTC::completeRTCRefresh()+0xa4>
c0018756:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001875a:	75 d3                	jne    c001872f <RTC::completeRTCRefresh()+0x1a1>
c001875c:	52                   	push   edx
c001875d:	52                   	push   edx
c001875e:	6a 0b                	push   0xb
c0018760:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018766:	e8 0d ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001876b:	83 c4 10             	add    esp,0x10
c001876e:	a8 04                	test   al,0x4
c0018770:	75 7a                	jne    c00187ec <RTC::completeRTCRefresh()+0x25e>
c0018772:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018776:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001877a:	83 e1 0f             	and    ecx,0xf
c001877d:	c1 ea 04             	shr    edx,0x4
c0018780:	c1 ef 04             	shr    edi,0x4
c0018783:	6b d2 0a             	imul   edx,edx,0xa
c0018786:	83 e6 0f             	and    esi,0xf
c0018789:	01 d1                	add    ecx,edx
c001878b:	c1 ed 04             	shr    ebp,0x4
c001878e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018792:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018796:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001879a:	c1 ea 04             	shr    edx,0x4
c001879d:	83 e1 0f             	and    ecx,0xf
c00187a0:	6b d2 0a             	imul   edx,edx,0xa
c00187a3:	6b ed 0a             	imul   ebp,ebp,0xa
c00187a6:	01 d1                	add    ecx,edx
c00187a8:	89 fa                	mov    edx,edi
c00187aa:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00187ae:	83 e2 07             	and    edx,0x7
c00187b1:	89 d9                	mov    ecx,ebx
c00187b3:	6b d2 0a             	imul   edx,edx,0xa
c00187b6:	83 e1 0f             	and    ecx,0xf
c00187b9:	83 e3 80             	and    ebx,0xffffff80
c00187bc:	01 d1                	add    ecx,edx
c00187be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187c2:	09 cb                	or     ebx,ecx
c00187c4:	c1 ea 04             	shr    edx,0x4
c00187c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00187cb:	6b d2 0a             	imul   edx,edx,0xa
c00187ce:	83 e1 0f             	and    ecx,0xf
c00187d1:	01 d6                	add    esi,edx
c00187d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00187d7:	c1 ea 04             	shr    edx,0x4
c00187da:	6b d2 0a             	imul   edx,edx,0xa
c00187dd:	01 d1                	add    ecx,edx
c00187df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00187e3:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00187e7:	83 e2 0f             	and    edx,0xf
c00187ea:	01 d5                	add    ebp,edx
c00187ec:	a8 02                	test   al,0x2
c00187ee:	75 15                	jne    c0018805 <RTC::completeRTCRefresh()+0x277>
c00187f0:	f6 c3 80             	test   bl,0x80
c00187f3:	74 10                	je     c0018805 <RTC::completeRTCRefresh()+0x277>
c00187f5:	83 e3 7f             	and    ebx,0x7f
c00187f8:	b9 18 00 00 00       	mov    ecx,0x18
c00187fd:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018800:	99                   	cdq    
c0018801:	f7 f9                	idiv   ecx
c0018803:	88 d3                	mov    bl,dl
c0018805:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001880b:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018811:	77 06                	ja     c0018819 <RTC::completeRTCRefresh()+0x28b>
c0018813:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018819:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001881e:	31 c9                	xor    ecx,ecx
c0018820:	c1 e0 10             	shl    eax,0x10
c0018823:	89 cd                	mov    ebp,ecx
c0018825:	c1 e7 10             	shl    edi,0x10
c0018828:	31 d2                	xor    edx,edx
c001882a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018830:	09 c5                	or     ebp,eax
c0018832:	89 f0                	mov    eax,esi
c0018834:	89 e9                	mov    ecx,ebp
c0018836:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001883a:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001883e:	88 c2                	mov    dl,al
c0018840:	88 d9                	mov    cl,bl
c0018842:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018846:	0f b7 c2             	movzx  eax,dx
c0018849:	09 f8                	or     eax,edi
c001884b:	89 c2                	mov    edx,eax
c001884d:	50                   	push   eax
c001884e:	50                   	push   eax
c001884f:	51                   	push   ecx
c0018850:	52                   	push   edx
c0018851:	e8 b1 3b ff ff       	call   c000c407 <datetimeToSeconds(datetime_t)>
c0018856:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001885a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018860:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018866:	83 c4 4c             	add    esp,0x4c
c0018869:	5b                   	pop    ebx
c001886a:	5e                   	pop    esi
c001886b:	5f                   	pop    edi
c001886c:	5d                   	pop    ebp
c001886d:	c3                   	ret    

c001886e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001886e:	55                   	push   ebp
c001886f:	57                   	push   edi
c0018870:	56                   	push   esi
c0018871:	53                   	push   ebx
c0018872:	83 ec 30             	sub    esp,0x30
c0018875:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018879:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001887d:	6a 00                	push   0x0
c001887f:	6a 00                	push   0x0
c0018881:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018887:	e8 06 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001888c:	83 c4 0c             	add    esp,0xc
c001888f:	6a 00                	push   0x0
c0018891:	6a 02                	push   0x2
c0018893:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018899:	e8 f4 e9 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001889e:	31 d2                	xor    edx,edx
c00188a0:	89 f9                	mov    ecx,edi
c00188a2:	89 f8                	mov    eax,edi
c00188a4:	c1 e9 10             	shr    ecx,0x10
c00188a7:	0f b6 c4             	movzx  eax,ah
c00188aa:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00188ae:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00188b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00188b6:	b9 64 00 00 00       	mov    ecx,0x64
c00188bb:	89 f0                	mov    eax,esi
c00188bd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00188c1:	89 f0                	mov    eax,esi
c00188c3:	0f b6 c4             	movzx  eax,ah
c00188c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00188ca:	89 f0                	mov    eax,esi
c00188cc:	c1 e8 10             	shr    eax,0x10
c00188cf:	f7 f1                	div    ecx
c00188d1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00188d5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00188d9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00188dd:	59                   	pop    ecx
c00188de:	5b                   	pop    ebx
c00188df:	89 fb                	mov    ebx,edi
c00188e1:	6a 0b                	push   0xb
c00188e3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188e9:	e8 8a e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188ee:	83 c4 10             	add    esp,0x10
c00188f1:	89 c5                	mov    ebp,eax
c00188f3:	a8 04                	test   al,0x4
c00188f5:	75 6e                	jne    c0018965 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00188f7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00188fb:	31 d2                	xor    edx,edx
c00188fd:	0f b6 c1             	movzx  eax,cl
c0018900:	b9 0a 00 00 00       	mov    ecx,0xa
c0018905:	f7 f1                	div    ecx
c0018907:	c1 e0 04             	shl    eax,0x4
c001890a:	09 d0                	or     eax,edx
c001890c:	31 d2                	xor    edx,edx
c001890e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018912:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018917:	f7 f1                	div    ecx
c0018919:	c1 e0 04             	shl    eax,0x4
c001891c:	09 d0                	or     eax,edx
c001891e:	31 d2                	xor    edx,edx
c0018920:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018924:	0f b6 c3             	movzx  eax,bl
c0018927:	f7 f1                	div    ecx
c0018929:	c1 e0 04             	shl    eax,0x4
c001892c:	09 d0                	or     eax,edx
c001892e:	31 d2                	xor    edx,edx
c0018930:	89 c3                	mov    ebx,eax
c0018932:	89 f0                	mov    eax,esi
c0018934:	0f b6 c0             	movzx  eax,al
c0018937:	f7 f1                	div    ecx
c0018939:	c1 e0 04             	shl    eax,0x4
c001893c:	09 d0                	or     eax,edx
c001893e:	31 d2                	xor    edx,edx
c0018940:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018944:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018949:	f7 f1                	div    ecx
c001894b:	c1 e0 04             	shl    eax,0x4
c001894e:	09 d0                	or     eax,edx
c0018950:	31 d2                	xor    edx,edx
c0018952:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018956:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001895a:	f7 f1                	div    ecx
c001895c:	c1 e0 04             	shl    eax,0x4
c001895f:	09 d0                	or     eax,edx
c0018961:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018965:	83 e5 02             	and    ebp,0x2
c0018968:	75 1e                	jne    c0018988 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001896a:	0f b6 c3             	movzx  eax,bl
c001896d:	83 f8 0b             	cmp    eax,0xb
c0018970:	76 10                	jbe    c0018982 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018972:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018975:	88 d3                	mov    bl,dl
c0018977:	84 d2                	test   dl,dl
c0018979:	75 02                	jne    c001897d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c001897b:	b3 0c                	mov    bl,0xc
c001897d:	83 cb 80             	or     ebx,0xffffff80
c0018980:	eb 06                	jmp    c0018988 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018982:	85 c0                	test   eax,eax
c0018984:	75 02                	jne    c0018988 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018986:	b3 0c                	mov    bl,0xc
c0018988:	0f b6 db             	movzx  ebx,bl
c001898b:	50                   	push   eax
c001898c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018991:	52                   	push   edx
c0018992:	6a 00                	push   0x0
c0018994:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001899a:	e8 f3 e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001899f:	83 c4 0c             	add    esp,0xc
c00189a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189a7:	50                   	push   eax
c00189a8:	6a 02                	push   0x2
c00189aa:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189b0:	e8 dd e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189b5:	83 c4 0c             	add    esp,0xc
c00189b8:	53                   	push   ebx
c00189b9:	6a 04                	push   0x4
c00189bb:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189c1:	e8 cc e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189c6:	83 c4 0c             	add    esp,0xc
c00189c9:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00189ce:	52                   	push   edx
c00189cf:	6a 07                	push   0x7
c00189d1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189d7:	e8 b6 e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189dc:	83 c4 0c             	add    esp,0xc
c00189df:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189e4:	50                   	push   eax
c00189e5:	6a 08                	push   0x8
c00189e7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189ed:	e8 a0 e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189f2:	83 c4 0c             	add    esp,0xc
c00189f5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00189fa:	55                   	push   ebp
c00189fb:	6a 09                	push   0x9
c00189fd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a03:	e8 8a e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a08:	5a                   	pop    edx
c0018a09:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018a0d:	e8 7c fb ff ff       	call   c001858e <RTC::completeRTCRefresh()>
c0018a12:	83 c4 3c             	add    esp,0x3c
c0018a15:	b0 01                	mov    al,0x1
c0018a17:	5b                   	pop    ebx
c0018a18:	5e                   	pop    esi
c0018a19:	5f                   	pop    edi
c0018a1a:	5d                   	pop    ebp
c0018a1b:	c3                   	ret    

c0018a1c <rtcIRQHandler(regs*, void*)>:
c0018a1c:	53                   	push   ebx
c0018a1d:	83 ec 10             	sub    esp,0x10
c0018a20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018a24:	6a 0c                	push   0xc
c0018a26:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a2c:	e8 47 e7 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018a31:	83 c4 10             	add    esp,0x10
c0018a34:	a8 80                	test   al,0x80
c0018a36:	74 24                	je     c0018a5c <rtcIRQHandler(regs*, void*)+0x40>
c0018a38:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018a3f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018a46:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018a4d:	75 0d                	jne    c0018a5c <rtcIRQHandler(regs*, void*)+0x40>
c0018a4f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018a53:	83 c4 08             	add    esp,0x8
c0018a56:	5b                   	pop    ebx
c0018a57:	e9 32 fb ff ff       	jmp    c001858e <RTC::completeRTCRefresh()>
c0018a5c:	83 c4 08             	add    esp,0x8
c0018a5f:	5b                   	pop    ebx
c0018a60:	c3                   	ret    
c0018a61:	90                   	nop

c0018a62 <RTC::RTC()>:
c0018a62:	83 ec 1c             	sub    esp,0x1c
c0018a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a69:	83 ec 08             	sub    esp,0x8
c0018a6c:	68 ef 2a 02 c0       	push   0xc0022aef
c0018a71:	50                   	push   eax
c0018a72:	e8 6b 38 ff ff       	call   c000c2e2 <Clock::Clock(char const*)>
c0018a77:	83 c4 10             	add    esp,0x10
c0018a7a:	ba 0c 2b 02 c0       	mov    edx,0xc0022b0c
c0018a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a83:	89 10                	mov    DWORD PTR [eax],edx
c0018a85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a89:	83 ec 0c             	sub    esp,0xc
c0018a8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a90:	6a 01                	push   0x1
c0018a92:	68 1c 8a 01 c0       	push   0xc0018a1c
c0018a97:	6a 08                	push   0x8
c0018a99:	50                   	push   eax
c0018a9a:	e8 1f 3d ff ff       	call   c000c7be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018a9f:	83 c4 20             	add    esp,0x20
c0018aa2:	89 c2                	mov    edx,eax
c0018aa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018aa8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018aae:	fa                   	cli    
c0018aaf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018ab4:	83 c0 01             	add    eax,0x1
c0018ab7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018abc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018ac1:	83 ec 08             	sub    esp,0x8
c0018ac4:	6a 0b                	push   0xb
c0018ac6:	50                   	push   eax
c0018ac7:	e8 ac e6 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018acc:	83 c4 10             	add    esp,0x10
c0018acf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018ad3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018ad8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018adc:	83 ca 10             	or     edx,0x10
c0018adf:	0f b6 d2             	movzx  edx,dl
c0018ae2:	83 ec 04             	sub    esp,0x4
c0018ae5:	52                   	push   edx
c0018ae6:	6a 0b                	push   0xb
c0018ae8:	50                   	push   eax
c0018ae9:	e8 a4 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018aee:	83 c4 10             	add    esp,0x10
c0018af1:	83 ec 0c             	sub    esp,0xc
c0018af4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018af8:	e8 91 fa ff ff       	call   c001858e <RTC::completeRTCRefresh()>
c0018afd:	83 c4 10             	add    esp,0x10
c0018b00:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018b05:	83 e8 01             	sub    eax,0x1
c0018b08:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018b0d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018b12:	85 c0                	test   eax,eax
c0018b14:	75 01                	jne    c0018b17 <RTC::RTC()+0xb5>
c0018b16:	fb                   	sti    
c0018b17:	90                   	nop
c0018b18:	83 c4 1c             	add    esp,0x1c
c0018b1b:	c3                   	ret    

c0018b1c <HalConsoleScroll(int, int)>:
c0018b1c:	83 ec 10             	sub    esp,0x10
c0018b1f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018b27:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018b2f:	90                   	nop
c0018b30:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018b35:	0f 8f e1 00 00 00    	jg     c0018c1c <HalConsoleScroll(int, int)+0x100>
c0018b3b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018b43:	90                   	nop
c0018b44:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018b4c:	0f 8f be 00 00 00    	jg     c0018c10 <HalConsoleScroll(int, int)+0xf4>
c0018b52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b56:	89 d0                	mov    eax,edx
c0018b58:	c1 e0 02             	shl    eax,0x2
c0018b5b:	01 d0                	add    eax,edx
c0018b5d:	c1 e0 05             	shl    eax,0x5
c0018b60:	89 c2                	mov    edx,eax
c0018b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b66:	01 d0                	add    eax,edx
c0018b68:	89 c2                	mov    edx,eax
c0018b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b6e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018b71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b75:	89 d0                	mov    eax,edx
c0018b77:	c1 e0 02             	shl    eax,0x2
c0018b7a:	01 d0                	add    eax,edx
c0018b7c:	c1 e0 05             	shl    eax,0x5
c0018b7f:	89 c2                	mov    edx,eax
c0018b81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b85:	01 d0                	add    eax,edx
c0018b87:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b91:	01 c2                	add    edx,eax
c0018b93:	8a 01                	mov    al,BYTE PTR [ecx]
c0018b95:	88 02                	mov    BYTE PTR [edx],al
c0018b97:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018b9c:	75 66                	jne    c0018c04 <HalConsoleScroll(int, int)+0xe8>
c0018b9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ba2:	83 e0 01             	and    eax,0x1
c0018ba5:	74 39                	je     c0018be0 <HalConsoleScroll(int, int)+0xc4>
c0018ba7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018bab:	83 e0 0f             	and    eax,0xf
c0018bae:	88 c2                	mov    dl,al
c0018bb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018bb4:	c1 e0 04             	shl    eax,0x4
c0018bb7:	09 d0                	or     eax,edx
c0018bb9:	88 c1                	mov    cl,al
c0018bbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bbf:	89 d0                	mov    eax,edx
c0018bc1:	c1 e0 02             	shl    eax,0x2
c0018bc4:	01 d0                	add    eax,edx
c0018bc6:	c1 e0 05             	shl    eax,0x5
c0018bc9:	89 c2                	mov    edx,eax
c0018bcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bcf:	01 d0                	add    eax,edx
c0018bd1:	89 c2                	mov    edx,eax
c0018bd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018bd7:	01 d0                	add    eax,edx
c0018bd9:	88 ca                	mov    dl,cl
c0018bdb:	88 10                	mov    BYTE PTR [eax],dl
c0018bdd:	eb 25                	jmp    c0018c04 <HalConsoleScroll(int, int)+0xe8>
c0018bdf:	90                   	nop
c0018be0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018be4:	89 d0                	mov    eax,edx
c0018be6:	c1 e0 02             	shl    eax,0x2
c0018be9:	01 d0                	add    eax,edx
c0018beb:	c1 e0 05             	shl    eax,0x5
c0018bee:	89 c2                	mov    edx,eax
c0018bf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bf4:	01 d0                	add    eax,edx
c0018bf6:	89 c2                	mov    edx,eax
c0018bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018bfc:	01 d0                	add    eax,edx
c0018bfe:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018c01:	8d 76 00             	lea    esi,[esi+0x0]
c0018c04:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018c09:	e9 36 ff ff ff       	jmp    c0018b44 <HalConsoleScroll(int, int)+0x28>
c0018c0e:	66 90                	xchg   ax,ax
c0018c10:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018c15:	e9 16 ff ff ff       	jmp    c0018b30 <HalConsoleScroll(int, int)+0x14>
c0018c1a:	66 90                	xchg   ax,ax
c0018c1c:	90                   	nop
c0018c1d:	83 c4 10             	add    esp,0x10
c0018c20:	c3                   	ret    
c0018c21:	8d 76 00             	lea    esi,[esi+0x0]

c0018c24 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018c24:	83 ec 14             	sub    esp,0x14
c0018c27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c2b:	88 04 24             	mov    BYTE PTR [esp],al
c0018c2e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018c31:	0f b6 c0             	movzx  eax,al
c0018c34:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018c38:	89 d1                	mov    ecx,edx
c0018c3a:	83 e1 0f             	and    ecx,0xf
c0018c3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018c41:	c1 e2 04             	shl    edx,0x4
c0018c44:	0f b6 d2             	movzx  edx,dl
c0018c47:	09 ca                	or     edx,ecx
c0018c49:	c1 e2 08             	shl    edx,0x8
c0018c4c:	09 d0                	or     eax,edx
c0018c4e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018c53:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018c5b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018c5f:	89 d0                	mov    eax,edx
c0018c61:	c1 e0 02             	shl    eax,0x2
c0018c64:	01 d0                	add    eax,edx
c0018c66:	c1 e0 04             	shl    eax,0x4
c0018c69:	89 c2                	mov    edx,eax
c0018c6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c6f:	01 d0                	add    eax,edx
c0018c71:	01 c0                	add    eax,eax
c0018c73:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018c77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c7b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018c80:	66 89 02             	mov    WORD PTR [edx],ax
c0018c83:	90                   	nop
c0018c84:	83 c4 14             	add    esp,0x14
c0018c87:	c3                   	ret    

c0018c88 <HalConsoleCursorUpdate(int, int)>:
c0018c88:	83 ec 20             	sub    esp,0x20
c0018c8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c8f:	89 c2                	mov    edx,eax
c0018c91:	c1 e2 02             	shl    edx,0x2
c0018c94:	01 d0                	add    eax,edx
c0018c96:	c1 e0 04             	shl    eax,0x4
c0018c99:	89 c2                	mov    edx,eax
c0018c9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c9f:	01 d0                	add    eax,edx
c0018ca1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018ca6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018cad:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018cb2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018cb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018cba:	ee                   	out    dx,al
c0018cbb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018cc0:	0f b6 c0             	movzx  eax,al
c0018cc3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018cca:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018cce:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018cd2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018cd6:	ee                   	out    dx,al
c0018cd7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018cde:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018ce3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018ce7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ceb:	ee                   	out    dx,al
c0018cec:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018cf1:	c1 e8 08             	shr    eax,0x8
c0018cf4:	0f b6 c0             	movzx  eax,al
c0018cf7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018cfe:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018d02:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018d06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d0a:	ee                   	out    dx,al
c0018d0b:	90                   	nop
c0018d0c:	83 c4 20             	add    esp,0x20
c0018d0f:	c3                   	ret    

c0018d10 <FAT::getName()>:
c0018d10:	b8 40 2b 02 c0       	mov    eax,0xc0022b40
c0018d15:	c3                   	ret    
c0018d16:	66 90                	xchg   ax,ax

c0018d18 <FAT::tell(void*, unsigned long long*)>:
c0018d18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018d1d:	75 09                	jne    c0018d28 <FAT::tell(void*, unsigned long long*)+0x10>
c0018d1f:	b8 04 00 00 00       	mov    eax,0x4
c0018d24:	c3                   	ret    
c0018d25:	8d 76 00             	lea    esi,[esi+0x0]
c0018d28:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d2d:	75 09                	jne    c0018d38 <FAT::tell(void*, unsigned long long*)+0x20>
c0018d2f:	b8 04 00 00 00       	mov    eax,0x4
c0018d34:	c3                   	ret    
c0018d35:	8d 76 00             	lea    esi,[esi+0x0]
c0018d38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d3c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018d3f:	ba 00 00 00 00       	mov    edx,0x0
c0018d44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d48:	89 01                	mov    DWORD PTR [ecx],eax
c0018d4a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018d4d:	b8 00 00 00 00       	mov    eax,0x0
c0018d52:	c3                   	ret    
c0018d53:	90                   	nop

c0018d54 <FAT::stat(void*, unsigned long long*)>:
c0018d54:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018d59:	75 09                	jne    c0018d64 <FAT::stat(void*, unsigned long long*)+0x10>
c0018d5b:	b8 04 00 00 00       	mov    eax,0x4
c0018d60:	c3                   	ret    
c0018d61:	8d 76 00             	lea    esi,[esi+0x0]
c0018d64:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d69:	75 09                	jne    c0018d74 <FAT::stat(void*, unsigned long long*)+0x20>
c0018d6b:	b8 04 00 00 00       	mov    eax,0x4
c0018d70:	c3                   	ret    
c0018d71:	8d 76 00             	lea    esi,[esi+0x0]
c0018d74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d7b:	ba 00 00 00 00       	mov    edx,0x0
c0018d80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d84:	89 01                	mov    DWORD PTR [ecx],eax
c0018d86:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018d89:	b8 00 00 00 00       	mov    eax,0x0
c0018d8e:	c3                   	ret    
c0018d8f:	90                   	nop

c0018d90 <FAT::~FAT()>:
c0018d90:	83 ec 0c             	sub    esp,0xc
c0018d93:	ba 8c 2b 02 c0       	mov    edx,0xc0022b8c
c0018d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d9c:	89 10                	mov    DWORD PTR [eax],edx
c0018d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018da2:	83 ec 0c             	sub    esp,0xc
c0018da5:	50                   	push   eax
c0018da6:	e8 81 28 ff ff       	call   c000b62c <Filesystem::~Filesystem()>
c0018dab:	83 c4 10             	add    esp,0x10
c0018dae:	90                   	nop
c0018daf:	83 c4 0c             	add    esp,0xc
c0018db2:	c3                   	ret    
c0018db3:	90                   	nop

c0018db4 <FAT::~FAT()>:
c0018db4:	83 ec 0c             	sub    esp,0xc
c0018db7:	83 ec 0c             	sub    esp,0xc
c0018dba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018dbe:	e8 cd ff ff ff       	call   c0018d90 <FAT::~FAT()>
c0018dc3:	83 c4 10             	add    esp,0x10
c0018dc6:	83 ec 08             	sub    esp,0x8
c0018dc9:	6a 08                	push   0x8
c0018dcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018dcf:	e8 44 1a ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018dd4:	83 c4 10             	add    esp,0x10
c0018dd7:	83 c4 0c             	add    esp,0xc
c0018dda:	c3                   	ret    
c0018ddb:	90                   	nop

c0018ddc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018ddc:	83 ec 1c             	sub    esp,0x1c
c0018ddf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018de6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018deb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018def:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018df6:	83 f8 ff             	cmp    eax,0xffffffff
c0018df9:	75 35                	jne    c0018e30 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018dfb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018dff:	88 c2                	mov    dl,al
c0018e01:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018e06:	01 d0                	add    eax,edx
c0018e08:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018e0c:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018e12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e16:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018e1d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018e22:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e26:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018e2d:	eb 19                	jmp    c0018e48 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018e2f:	90                   	nop
c0018e30:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018e34:	88 c2                	mov    dl,al
c0018e36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e3a:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018e41:	01 d0                	add    eax,edx
c0018e43:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018e47:	90                   	nop
c0018e48:	83 ec 04             	sub    esp,0x4
c0018e4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018e4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018e53:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018e57:	50                   	push   eax
c0018e58:	e8 72 c1 fe ff       	call   c0004fcf <f_getlabel>
c0018e5d:	83 c4 10             	add    esp,0x10
c0018e60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e64:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e69:	75 09                	jne    c0018e74 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018e6b:	b8 00 00 00 00       	mov    eax,0x0
c0018e70:	eb 0a                	jmp    c0018e7c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018e72:	66 90                	xchg   ax,ax
c0018e74:	b8 01 00 00 00       	mov    eax,0x1
c0018e79:	8d 76 00             	lea    esi,[esi+0x0]
c0018e7c:	83 c4 1c             	add    esp,0x1c
c0018e7f:	c3                   	ret    

c0018e80 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018e80:	57                   	push   edi
c0018e81:	83 ec 58             	sub    esp,0x58
c0018e84:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018e8c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018e90:	b8 00 00 00 00       	mov    eax,0x0
c0018e95:	b9 0f 00 00 00       	mov    ecx,0xf
c0018e9a:	fc                   	cld    
c0018e9b:	89 d7                	mov    edi,edx
c0018e9d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018e9f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ea3:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018eaa:	83 f8 ff             	cmp    eax,0xffffffff
c0018ead:	75 35                	jne    c0018ee4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018eaf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018eb3:	88 c2                	mov    dl,al
c0018eb5:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018eba:	01 d0                	add    eax,edx
c0018ebc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ec0:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018ec6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018eca:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018ed1:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018ed6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018eda:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018ee1:	eb 19                	jmp    c0018efc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018ee3:	90                   	nop
c0018ee4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ee8:	88 c2                	mov    dl,al
c0018eea:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018eee:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018ef5:	01 d0                	add    eax,edx
c0018ef7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018efb:	90                   	nop
c0018efc:	83 ec 08             	sub    esp,0x8
c0018eff:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018f03:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f07:	50                   	push   eax
c0018f08:	e8 33 79 fe ff       	call   c0000840 <strcat>
c0018f0d:	83 c4 10             	add    esp,0x10
c0018f10:	83 ec 0c             	sub    esp,0xc
c0018f13:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f17:	50                   	push   eax
c0018f18:	e8 03 c2 fe ff       	call   c0005120 <f_setlabel>
c0018f1d:	83 c4 10             	add    esp,0x10
c0018f20:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018f24:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018f29:	75 09                	jne    c0018f34 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018f2b:	b8 00 00 00 00       	mov    eax,0x0
c0018f30:	eb 0a                	jmp    c0018f3c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018f32:	66 90                	xchg   ax,ax
c0018f34:	b8 01 00 00 00       	mov    eax,0x1
c0018f39:	8d 76 00             	lea    esi,[esi+0x0]
c0018f3c:	83 c4 58             	add    esp,0x58
c0018f3f:	5f                   	pop    edi
c0018f40:	c3                   	ret    
c0018f41:	90                   	nop
c0018f42:	66 90                	xchg   ax,ax

c0018f44 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018f44:	83 ec 2c             	sub    esp,0x2c
c0018f47:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018f4f:	83 ec 08             	sub    esp,0x8
c0018f52:	68 64 2b 02 c0       	push   0xc0022b64
c0018f57:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f5b:	e8 f0 77 fe ff       	call   c0000750 <strcmp>
c0018f60:	83 c4 10             	add    esp,0x10
c0018f63:	85 c0                	test   eax,eax
c0018f65:	0f 94 c0             	sete   al
c0018f68:	0f b6 c0             	movzx  eax,al
c0018f6b:	85 c0                	test   eax,eax
c0018f6d:	74 0d                	je     c0018f7c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018f6f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018f77:	e9 c0 00 00 00       	jmp    c001903c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018f7c:	83 ec 08             	sub    esp,0x8
c0018f7f:	68 56 2b 02 c0       	push   0xc0022b56
c0018f84:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f88:	e8 c3 77 fe ff       	call   c0000750 <strcmp>
c0018f8d:	83 c4 10             	add    esp,0x10
c0018f90:	85 c0                	test   eax,eax
c0018f92:	0f 94 c0             	sete   al
c0018f95:	0f b6 c0             	movzx  eax,al
c0018f98:	85 c0                	test   eax,eax
c0018f9a:	74 10                	je     c0018fac <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018f9c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018fa4:	e9 93 00 00 00       	jmp    c001903c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0018fac:	83 ec 08             	sub    esp,0x8
c0018faf:	68 5c 2b 02 c0       	push   0xc0022b5c
c0018fb4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018fb8:	e8 93 77 fe ff       	call   c0000750 <strcmp>
c0018fbd:	83 c4 10             	add    esp,0x10
c0018fc0:	85 c0                	test   eax,eax
c0018fc2:	0f 94 c0             	sete   al
c0018fc5:	0f b6 c0             	movzx  eax,al
c0018fc8:	85 c0                	test   eax,eax
c0018fca:	74 0c                	je     c0018fd8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018fcc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018fd4:	eb 66                	jmp    c001903c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018fd6:	66 90                	xchg   ax,ax
c0018fd8:	83 ec 08             	sub    esp,0x8
c0018fdb:	68 3c 03 02 c0       	push   0xc002033c
c0018fe0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018fe4:	e8 67 77 fe ff       	call   c0000750 <strcmp>
c0018fe9:	83 c4 10             	add    esp,0x10
c0018fec:	85 c0                	test   eax,eax
c0018fee:	0f 94 c0             	sete   al
c0018ff1:	0f b6 c0             	movzx  eax,al
c0018ff4:	85 c0                	test   eax,eax
c0018ff6:	74 0c                	je     c0019004 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018ff8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019000:	eb 3a                	jmp    c001903c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019002:	66 90                	xchg   ax,ax
c0019004:	83 ec 08             	sub    esp,0x8
c0019007:	68 62 2b 02 c0       	push   0xc0022b62
c001900c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019010:	e8 3b 77 fe ff       	call   c0000750 <strcmp>
c0019015:	83 c4 10             	add    esp,0x10
c0019018:	85 c0                	test   eax,eax
c001901a:	0f 94 c0             	sete   al
c001901d:	0f b6 c0             	movzx  eax,al
c0019020:	85 c0                	test   eax,eax
c0019022:	74 0c                	je     c0019030 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019024:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001902c:	eb 0e                	jmp    c001903c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001902e:	66 90                	xchg   ax,ax
c0019030:	b8 08 00 00 00       	mov    eax,0x8
c0019035:	e9 ea 00 00 00       	jmp    c0019124 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001903a:	66 90                	xchg   ax,ax
c001903c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019043:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019048:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001904c:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019053:	83 f8 ff             	cmp    eax,0xffffffff
c0019056:	75 34                	jne    c001908c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019058:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001905c:	88 c2                	mov    dl,al
c001905e:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019063:	01 d0                	add    eax,edx
c0019065:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019069:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001906f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019073:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001907a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001907f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019083:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001908a:	eb 18                	jmp    c00190a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001908c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019090:	88 c2                	mov    dl,al
c0019092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019096:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001909d:	01 d0                	add    eax,edx
c001909f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00190a3:	90                   	nop
c00190a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190a8:	88 04 24             	mov    BYTE PTR [esp],al
c00190ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00190af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190b3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00190bb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00190c0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00190c8:	83 ec 0c             	sub    esp,0xc
c00190cb:	68 00 20 00 00       	push   0x2000
c00190d0:	e8 e1 e9 fe ff       	call   c0007ab6 <malloc>
c00190d5:	83 c4 10             	add    esp,0x10
c00190d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00190dc:	68 00 20 00 00       	push   0x2000
c00190e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190e5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00190e9:	50                   	push   eax
c00190ea:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00190ee:	50                   	push   eax
c00190ef:	e8 29 c3 fe ff       	call   c000541d <f_mkfs>
c00190f4:	83 c4 10             	add    esp,0x10
c00190f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00190fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019100:	75 0a                	jne    c001910c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019102:	b8 00 00 00 00       	mov    eax,0x0
c0019107:	eb 1b                	jmp    c0019124 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019109:	8d 76 00             	lea    esi,[esi+0x0]
c001910c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019111:	75 09                	jne    c001911c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019113:	b8 09 00 00 00       	mov    eax,0x9
c0019118:	eb 0a                	jmp    c0019124 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001911a:	66 90                	xchg   ax,ax
c001911c:	b8 01 00 00 00       	mov    eax,0x1
c0019121:	8d 76 00             	lea    esi,[esi+0x0]
c0019124:	83 c4 2c             	add    esp,0x2c
c0019127:	c3                   	ret    

c0019128 <FAT::tryMount(LogicalDisk*, int)>:
c0019128:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001912e:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019133:	83 f8 14             	cmp    eax,0x14
c0019136:	75 18                	jne    c0019150 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019138:	83 ec 0c             	sub    esp,0xc
c001913b:	68 68 2b 02 c0       	push   0xc0022b68
c0019140:	e8 26 83 ff ff       	call   c001146b <KePanic(char const*)>
c0019145:	83 c4 10             	add    esp,0x10
c0019148:	b0 00                	mov    al,0x0
c001914a:	e9 ed 01 00 00       	jmp    c001933c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001914f:	90                   	nop
c0019150:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019157:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001915d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019163:	3d 00 02 00 00       	cmp    eax,0x200
c0019168:	74 0a                	je     c0019174 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001916a:	b0 00                	mov    al,0x0
c001916c:	e9 cb 01 00 00       	jmp    c001933c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019171:	8d 76 00             	lea    esi,[esi+0x0]
c0019174:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001917c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019183:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001918a:	83 f8 ff             	cmp    eax,0xffffffff
c001918d:	74 09                	je     c0019198 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001918f:	b0 01                	mov    al,0x1
c0019191:	e9 a6 01 00 00       	jmp    c001933c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019196:	66 90                	xchg   ax,ax
c0019198:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00191a2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00191aa:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00191b1:	88 c2                	mov    dl,al
c00191b3:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191b8:	01 d0                	add    eax,edx
c00191ba:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00191c1:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00191c7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00191ce:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00191d5:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191da:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00191e1:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00191e8:	83 ec 0c             	sub    esp,0xc
c00191eb:	68 34 02 00 00       	push   0x234
c00191f0:	e8 c1 e8 fe ff       	call   c0007ab6 <malloc>
c00191f5:	83 c4 10             	add    esp,0x10
c00191f8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00191ff:	83 ec 04             	sub    esp,0x4
c0019202:	6a 00                	push   0x0
c0019204:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001920b:	50                   	push   eax
c001920c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019213:	e8 e0 a9 fe ff       	call   c0003bf8 <f_mount>
c0019218:	83 c4 10             	add    esp,0x10
c001921b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019222:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001922a:	74 1c                	je     c0019248 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001922c:	83 ec 0c             	sub    esp,0xc
c001922f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019236:	e8 9b e8 fe ff       	call   c0007ad6 <rfree>
c001923b:	83 c4 10             	add    esp,0x10
c001923e:	b0 00                	mov    al,0x0
c0019240:	e9 f7 00 00 00       	jmp    c001933c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019245:	8d 76 00             	lea    esi,[esi+0x0]
c0019248:	83 ec 04             	sub    esp,0x4
c001924b:	68 00 01 00 00       	push   0x100
c0019250:	6a 00                	push   0x0
c0019252:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019259:	50                   	push   eax
c001925a:	e8 91 72 fe ff       	call   c00004f0 <memset>
c001925f:	83 c4 10             	add    esp,0x10
c0019262:	83 ec 08             	sub    esp,0x8
c0019265:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001926c:	50                   	push   eax
c001926d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019274:	50                   	push   eax
c0019275:	e8 c6 75 fe ff       	call   c0000840 <strcat>
c001927a:	83 c4 10             	add    esp,0x10
c001927d:	83 ec 08             	sub    esp,0x8
c0019280:	68 76 2b 02 c0       	push   0xc0022b76
c0019285:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001928c:	50                   	push   eax
c001928d:	e8 ae 75 fe ff       	call   c0000840 <strcat>
c0019292:	83 c4 10             	add    esp,0x10
c0019295:	83 ec 04             	sub    esp,0x4
c0019298:	6a 01                	push   0x1
c001929a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00192a1:	50                   	push   eax
c00192a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00192a6:	50                   	push   eax
c00192a7:	e8 ae a9 fe ff       	call   c0003c5a <f_open>
c00192ac:	83 c4 10             	add    esp,0x10
c00192af:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00192b6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00192bd:	85 c0                	test   eax,eax
c00192bf:	74 0b                	je     c00192cc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00192c1:	78 31                	js     c00192f4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00192c3:	83 e8 04             	sub    eax,0x4
c00192c6:	83 f8 01             	cmp    eax,0x1
c00192c9:	77 29                	ja     c00192f4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00192cb:	90                   	nop
c00192cc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00192d4:	83 ec 0c             	sub    esp,0xc
c00192d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00192db:	50                   	push   eax
c00192dc:	e8 48 b1 fe ff       	call   c0004429 <f_close>
c00192e1:	83 c4 10             	add    esp,0x10
c00192e4:	90                   	nop
c00192e5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00192ed:	85 c0                	test   eax,eax
c00192ef:	74 43                	je     c0019334 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00192f1:	eb 31                	jmp    c0019324 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00192f3:	90                   	nop
c00192f4:	83 ec 0c             	sub    esp,0xc
c00192f7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00192fe:	e8 d3 e7 fe ff       	call   c0007ad6 <rfree>
c0019303:	83 c4 10             	add    esp,0x10
c0019306:	83 ec 04             	sub    esp,0x4
c0019309:	6a 00                	push   0x0
c001930b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019312:	50                   	push   eax
c0019313:	6a 00                	push   0x0
c0019315:	e8 de a8 fe ff       	call   c0003bf8 <f_mount>
c001931a:	83 c4 10             	add    esp,0x10
c001931d:	b0 00                	mov    al,0x0
c001931f:	eb 1b                	jmp    c001933c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019321:	8d 76 00             	lea    esi,[esi+0x0]
c0019324:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019329:	83 c0 01             	add    eax,0x1
c001932c:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019331:	8d 76 00             	lea    esi,[esi+0x0]
c0019334:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001933b:	90                   	nop
c001933c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019342:	c3                   	ret    
c0019343:	90                   	nop

c0019344 <FAT::allocateSwapfile(char const*, int)>:
c0019344:	55                   	push   ebp
c0019345:	57                   	push   edi
c0019346:	56                   	push   esi
c0019347:	53                   	push   ebx
c0019348:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001934e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019359:	83 ec 0c             	sub    esp,0xc
c001935c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019363:	e8 4e e7 fe ff       	call   c0007ab6 <malloc>
c0019368:	83 c4 10             	add    esp,0x10
c001936b:	89 c7                	mov    edi,eax
c001936d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0019372:	83 ec 04             	sub    esp,0x4
c0019375:	50                   	push   eax
c0019376:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001937d:	57                   	push   edi
c001937e:	e8 17 26 ff ff       	call   c000b99a <File::File(char const*, Process*)>
c0019383:	83 c4 10             	add    esp,0x10
c0019386:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001938d:	83 ec 04             	sub    esp,0x4
c0019390:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019394:	50                   	push   eax
c0019395:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019399:	50                   	push   eax
c001939a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00193a1:	e8 14 29 ff ff       	call   c000bcba <File::stat(unsigned long long*, bool*)>
c00193a6:	83 c4 10             	add    esp,0x10
c00193a9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00193b0:	c1 e0 14             	shl    eax,0x14
c00193b3:	89 c7                	mov    edi,eax
c00193b5:	89 c5                	mov    ebp,eax
c00193b7:	c1 fd 1f             	sar    ebp,0x1f
c00193ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00193c2:	89 f9                	mov    ecx,edi
c00193c4:	31 c1                	xor    ecx,eax
c00193c6:	89 cb                	mov    ebx,ecx
c00193c8:	89 e9                	mov    ecx,ebp
c00193ca:	31 d1                	xor    ecx,edx
c00193cc:	89 ce                	mov    esi,ecx
c00193ce:	89 f0                	mov    eax,esi
c00193d0:	09 d8                	or     eax,ebx
c00193d2:	0f 84 9c 00 00 00    	je     c0019474 <FAT::allocateSwapfile(char const*, int)+0x130>
c00193d8:	83 ec 0c             	sub    esp,0xc
c00193db:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00193e2:	e8 9f 27 ff ff       	call   c000bb86 <File::unlink()>
c00193e7:	83 c4 10             	add    esp,0x10
c00193ea:	83 ec 08             	sub    esp,0x8
c00193ed:	6a 12                	push   0x12
c00193ef:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00193f6:	e8 bd 25 ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c00193fb:	83 c4 10             	add    esp,0x10
c00193fe:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019405:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001940b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019412:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019419:	c1 e0 14             	shl    eax,0x14
c001941c:	83 ec 04             	sub    esp,0x4
c001941f:	6a 01                	push   0x1
c0019421:	50                   	push   eax
c0019422:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019429:	e8 82 be fe ff       	call   c00052b0 <f_expand>
c001942e:	83 c4 10             	add    esp,0x10
c0019431:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019438:	8b 00                	mov    eax,DWORD PTR [eax]
c001943a:	83 c0 10             	add    eax,0x10
c001943d:	8b 00                	mov    eax,DWORD PTR [eax]
c001943f:	83 ec 0c             	sub    esp,0xc
c0019442:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019446:	52                   	push   edx
c0019447:	8d 54 24 30          	lea    edx,[esp+0x30]
c001944b:	52                   	push   edx
c001944c:	6a 00                	push   0x0
c001944e:	68 00 04 00 00       	push   0x400
c0019453:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001945a:	ff d0                	call   eax
c001945c:	83 c4 20             	add    esp,0x20
c001945f:	83 ec 0c             	sub    esp,0xc
c0019462:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019469:	e8 a8 25 ff ff       	call   c000ba16 <File::close()>
c001946e:	83 c4 10             	add    esp,0x10
c0019471:	8d 76 00             	lea    esi,[esi+0x0]
c0019474:	83 ec 08             	sub    esp,0x8
c0019477:	6a 01                	push   0x1
c0019479:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019480:	e8 33 25 ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c0019485:	83 c4 10             	add    esp,0x10
c0019488:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001948f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019491:	83 c0 0c             	add    eax,0xc
c0019494:	8b 00                	mov    eax,DWORD PTR [eax]
c0019496:	83 ec 0c             	sub    esp,0xc
c0019499:	8d 54 24 24          	lea    edx,[esp+0x24]
c001949d:	52                   	push   edx
c001949e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00194a2:	52                   	push   edx
c00194a3:	6a 00                	push   0x0
c00194a5:	6a 04                	push   0x4
c00194a7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00194ae:	ff d0                	call   eax
c00194b0:	83 c4 20             	add    esp,0x20
c00194b3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00194ba:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00194c0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00194c7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00194ce:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00194d1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00194d8:	83 ec 0c             	sub    esp,0xc
c00194db:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00194e2:	e8 2f 25 ff ff       	call   c000ba16 <File::close()>
c00194e7:	83 c4 10             	add    esp,0x10
c00194ea:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00194f1:	ba 00 00 00 00       	mov    edx,0x0
c00194f6:	81 c4 3c 04 00 00    	add    esp,0x43c
c00194fc:	5b                   	pop    ebx
c00194fd:	5e                   	pop    esi
c00194fe:	5f                   	pop    edi
c00194ff:	5d                   	pop    ebp
c0019500:	c3                   	ret    
c0019501:	90                   	nop
c0019502:	66 90                	xchg   ax,ax

c0019504 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019504:	57                   	push   edi
c0019505:	56                   	push   esi
c0019506:	53                   	push   ebx
c0019507:	81 ec 50 02 00 00    	sub    esp,0x250
c001950d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019515:	74 0d                	je     c0019524 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019517:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001951f:	75 0f                	jne    c0019530 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019521:	8d 76 00             	lea    esi,[esi+0x0]
c0019524:	b8 04 00 00 00       	mov    eax,0x4
c0019529:	e9 3a 01 00 00       	jmp    c0019668 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001952e:	66 90                	xchg   ax,ax
c0019530:	83 ec 08             	sub    esp,0x8
c0019533:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001953a:	50                   	push   eax
c001953b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019542:	e8 af b1 fe ff       	call   c00046f6 <f_readdir>
c0019547:	83 c4 10             	add    esp,0x10
c001954a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019551:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019558:	83 ec 0c             	sub    esp,0xc
c001955b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019562:	83 c0 16             	add    eax,0x16
c0019565:	50                   	push   eax
c0019566:	e8 05 70 fe ff       	call   c0000570 <strlen>
c001956b:	83 c4 10             	add    esp,0x10
c001956e:	ba 00 00 00 00       	mov    edx,0x0
c0019573:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019577:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001957b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019582:	0f b6 c0             	movzx  eax,al
c0019585:	83 e0 10             	and    eax,0x10
c0019588:	74 0a                	je     c0019594 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001958a:	b8 02 00 00 00       	mov    eax,0x2
c001958f:	eb 0b                	jmp    c001959c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019591:	8d 76 00             	lea    esi,[esi+0x0]
c0019594:	b8 01 00 00 00       	mov    eax,0x1
c0019599:	8d 76 00             	lea    esi,[esi+0x0]
c001959c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195a0:	83 ec 08             	sub    esp,0x8
c00195a3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00195aa:	83 c0 16             	add    eax,0x16
c00195ad:	50                   	push   eax
c00195ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c00195b2:	83 c0 10             	add    eax,0x10
c00195b5:	50                   	push   eax
c00195b6:	e8 85 70 fe ff       	call   c0000640 <strcpy>
c00195bb:	83 c4 10             	add    esp,0x10
c00195be:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00195c5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00195cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00195d0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00195d7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00195de:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00195e5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00195ec:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00195f3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00195fa:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019601:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019608:	89 c6                	mov    esi,eax
c001960a:	89 d7                	mov    edi,edx
c001960c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001960e:	89 c8                	mov    eax,ecx
c0019610:	89 fa                	mov    edx,edi
c0019612:	89 f3                	mov    ebx,esi
c0019614:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001961b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019622:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019629:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019630:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019636:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001963d:	0f be c0             	movsx  eax,al
c0019640:	85 c0                	test   eax,eax
c0019642:	75 08                	jne    c001964c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019644:	b8 07 00 00 00       	mov    eax,0x7
c0019649:	eb 1d                	jmp    c0019668 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001964b:	90                   	nop
c001964c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019653:	85 c0                	test   eax,eax
c0019655:	75 09                	jne    c0019660 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019657:	b8 00 00 00 00       	mov    eax,0x0
c001965c:	eb 0a                	jmp    c0019668 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001965e:	66 90                	xchg   ax,ax
c0019660:	b8 01 00 00 00       	mov    eax,0x1
c0019665:	8d 76 00             	lea    esi,[esi+0x0]
c0019668:	81 c4 50 02 00 00    	add    esp,0x250
c001966e:	5b                   	pop    ebx
c001966f:	5e                   	pop    esi
c0019670:	5f                   	pop    edi
c0019671:	c3                   	ret    
c0019672:	66 90                	xchg   ax,ax

c0019674 <FAT::read(void*, unsigned long, void*, int*)>:
c0019674:	83 ec 1c             	sub    esp,0x1c
c0019677:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001967c:	74 0a                	je     c0019688 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001967e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019683:	75 0b                	jne    c0019690 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019685:	8d 76 00             	lea    esi,[esi+0x0]
c0019688:	b8 04 00 00 00       	mov    eax,0x4
c001968d:	eb 41                	jmp    c00196d0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001968f:	90                   	nop
c0019690:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019694:	50                   	push   eax
c0019695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001969d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196a1:	e8 77 a8 fe ff       	call   c0003f1d <f_read>
c00196a6:	83 c4 10             	add    esp,0x10
c00196a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196b1:	89 c2                	mov    edx,eax
c00196b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00196b7:	89 10                	mov    DWORD PTR [eax],edx
c00196b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196bd:	85 c0                	test   eax,eax
c00196bf:	75 07                	jne    c00196c8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00196c1:	b8 00 00 00 00       	mov    eax,0x0
c00196c6:	eb 08                	jmp    c00196d0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00196c8:	b8 01 00 00 00       	mov    eax,0x1
c00196cd:	8d 76 00             	lea    esi,[esi+0x0]
c00196d0:	83 c4 1c             	add    esp,0x1c
c00196d3:	c3                   	ret    

c00196d4 <FAT::write(void*, unsigned long, void*, int*)>:
c00196d4:	83 ec 1c             	sub    esp,0x1c
c00196d7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00196dc:	74 0a                	je     c00196e8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00196de:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00196e3:	75 0b                	jne    c00196f0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00196e5:	8d 76 00             	lea    esi,[esi+0x0]
c00196e8:	b8 04 00 00 00       	mov    eax,0x4
c00196ed:	eb 41                	jmp    c0019730 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00196ef:	90                   	nop
c00196f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00196f4:	50                   	push   eax
c00196f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00196f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00196fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019701:	e8 16 aa fe ff       	call   c000411c <f_write>
c0019706:	83 c4 10             	add    esp,0x10
c0019709:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001970d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019711:	89 c2                	mov    edx,eax
c0019713:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019717:	89 10                	mov    DWORD PTR [eax],edx
c0019719:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001971d:	85 c0                	test   eax,eax
c001971f:	75 07                	jne    c0019728 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019721:	b8 00 00 00 00       	mov    eax,0x0
c0019726:	eb 08                	jmp    c0019730 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019728:	b8 01 00 00 00       	mov    eax,0x1
c001972d:	8d 76 00             	lea    esi,[esi+0x0]
c0019730:	83 c4 1c             	add    esp,0x1c
c0019733:	c3                   	ret    

c0019734 <FAT::close(void*)>:
c0019734:	83 ec 1c             	sub    esp,0x1c
c0019737:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001973c:	75 0a                	jne    c0019748 <FAT::close(void*)+0x14>
c001973e:	b8 04 00 00 00       	mov    eax,0x4
c0019743:	eb 3f                	jmp    c0019784 <FAT::close(void*)+0x50>
c0019745:	8d 76 00             	lea    esi,[esi+0x0]
c0019748:	83 ec 0c             	sub    esp,0xc
c001974b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001974f:	e8 d5 ac fe ff       	call   c0004429 <f_close>
c0019754:	83 c4 10             	add    esp,0x10
c0019757:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001975b:	83 ec 0c             	sub    esp,0xc
c001975e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019762:	e8 5f e3 fe ff       	call   c0007ac6 <free>
c0019767:	83 c4 10             	add    esp,0x10
c001976a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001976e:	85 c0                	test   eax,eax
c0019770:	75 0a                	jne    c001977c <FAT::close(void*)+0x48>
c0019772:	b8 00 00 00 00       	mov    eax,0x0
c0019777:	eb 0b                	jmp    c0019784 <FAT::close(void*)+0x50>
c0019779:	8d 76 00             	lea    esi,[esi+0x0]
c001977c:	b8 01 00 00 00       	mov    eax,0x1
c0019781:	8d 76 00             	lea    esi,[esi+0x0]
c0019784:	83 c4 1c             	add    esp,0x1c
c0019787:	c3                   	ret    

c0019788 <FAT::closeDir(void*)>:
c0019788:	83 ec 1c             	sub    esp,0x1c
c001978b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019790:	75 0a                	jne    c001979c <FAT::closeDir(void*)+0x14>
c0019792:	b8 04 00 00 00       	mov    eax,0x4
c0019797:	eb 3f                	jmp    c00197d8 <FAT::closeDir(void*)+0x50>
c0019799:	8d 76 00             	lea    esi,[esi+0x0]
c001979c:	83 ec 0c             	sub    esp,0xc
c001979f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197a3:	e8 2c af fe ff       	call   c00046d4 <f_closedir>
c00197a8:	83 c4 10             	add    esp,0x10
c00197ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197af:	83 ec 0c             	sub    esp,0xc
c00197b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197b6:	e8 0b e3 fe ff       	call   c0007ac6 <free>
c00197bb:	83 c4 10             	add    esp,0x10
c00197be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197c2:	85 c0                	test   eax,eax
c00197c4:	75 0a                	jne    c00197d0 <FAT::closeDir(void*)+0x48>
c00197c6:	b8 00 00 00 00       	mov    eax,0x0
c00197cb:	eb 0b                	jmp    c00197d8 <FAT::closeDir(void*)+0x50>
c00197cd:	8d 76 00             	lea    esi,[esi+0x0]
c00197d0:	b8 01 00 00 00       	mov    eax,0x1
c00197d5:	8d 76 00             	lea    esi,[esi+0x0]
c00197d8:	83 c4 1c             	add    esp,0x1c
c00197db:	c3                   	ret    

c00197dc <FAT::truncate(void*, unsigned long long)>:
c00197dc:	83 ec 2c             	sub    esp,0x2c
c00197df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00197eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197ef:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00197f4:	75 0a                	jne    c0019800 <FAT::truncate(void*, unsigned long long)+0x24>
c00197f6:	b8 04 00 00 00       	mov    eax,0x4
c00197fb:	eb 47                	jmp    c0019844 <FAT::truncate(void*, unsigned long long)+0x68>
c00197fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019800:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019804:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019807:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001980b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019813:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019817:	83 ec 08             	sub    esp,0x8
c001981a:	50                   	push   eax
c001981b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001981f:	e8 34 ac fe ff       	call   c0004458 <f_lseek>
c0019824:	83 c4 10             	add    esp,0x10
c0019827:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001982b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001982f:	85 c0                	test   eax,eax
c0019831:	75 09                	jne    c001983c <FAT::truncate(void*, unsigned long long)+0x60>
c0019833:	b8 00 00 00 00       	mov    eax,0x0
c0019838:	eb 0a                	jmp    c0019844 <FAT::truncate(void*, unsigned long long)+0x68>
c001983a:	66 90                	xchg   ax,ax
c001983c:	b8 01 00 00 00       	mov    eax,0x1
c0019841:	8d 76 00             	lea    esi,[esi+0x0]
c0019844:	83 c4 2c             	add    esp,0x2c
c0019847:	c3                   	ret    

c0019848 <FAT::seek(void*, unsigned long long)>:
c0019848:	83 ec 2c             	sub    esp,0x2c
c001984b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001984f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019853:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019857:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001985b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019860:	75 0a                	jne    c001986c <FAT::seek(void*, unsigned long long)+0x24>
c0019862:	b8 04 00 00 00       	mov    eax,0x4
c0019867:	eb 33                	jmp    c001989c <FAT::seek(void*, unsigned long long)+0x54>
c0019869:	8d 76 00             	lea    esi,[esi+0x0]
c001986c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019870:	83 ec 08             	sub    esp,0x8
c0019873:	50                   	push   eax
c0019874:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019878:	e8 db ab fe ff       	call   c0004458 <f_lseek>
c001987d:	83 c4 10             	add    esp,0x10
c0019880:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019884:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019888:	85 c0                	test   eax,eax
c001988a:	75 08                	jne    c0019894 <FAT::seek(void*, unsigned long long)+0x4c>
c001988c:	b8 00 00 00 00       	mov    eax,0x0
c0019891:	eb 09                	jmp    c001989c <FAT::seek(void*, unsigned long long)+0x54>
c0019893:	90                   	nop
c0019894:	b8 01 00 00 00       	mov    eax,0x1
c0019899:	8d 76 00             	lea    esi,[esi+0x0]
c001989c:	83 c4 2c             	add    esp,0x2c
c001989f:	c3                   	ret    

c00198a0 <fatWrapperReadDisk>:
c00198a0:	53                   	push   ebx
c00198a1:	83 ec 18             	sub    esp,0x18
c00198a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00198ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00198b1:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c00198b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00198bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00198c0:	ba 00 00 00 00       	mov    edx,0x0
c00198c5:	83 ec 0c             	sub    esp,0xc
c00198c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198cc:	53                   	push   ebx
c00198cd:	52                   	push   edx
c00198ce:	50                   	push   eax
c00198cf:	51                   	push   ecx
c00198d0:	e8 1f 43 ff ff       	call   c000dbf4 <LogicalDisk::read(unsigned long long, int, void*)>
c00198d5:	83 c4 20             	add    esp,0x20
c00198d8:	83 c4 18             	add    esp,0x18
c00198db:	5b                   	pop    ebx
c00198dc:	c3                   	ret    
c00198dd:	8d 76 00             	lea    esi,[esi+0x0]

c00198e0 <fatWrapperWriteDisk>:
c00198e0:	53                   	push   ebx
c00198e1:	83 ec 18             	sub    esp,0x18
c00198e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00198ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00198f1:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c00198f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00198fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019900:	ba 00 00 00 00       	mov    edx,0x0
c0019905:	83 ec 0c             	sub    esp,0xc
c0019908:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001990c:	53                   	push   ebx
c001990d:	52                   	push   edx
c001990e:	50                   	push   eax
c001990f:	51                   	push   ecx
c0019910:	e8 4b 43 ff ff       	call   c000dc60 <LogicalDisk::write(unsigned long long, int, void*)>
c0019915:	83 c4 20             	add    esp,0x20
c0019918:	83 c4 18             	add    esp,0x18
c001991b:	5b                   	pop    ebx
c001991c:	c3                   	ret    
c001991d:	8d 76 00             	lea    esi,[esi+0x0]

c0019920 <fatWrapperIoctl>:
c0019920:	53                   	push   ebx
c0019921:	83 ec 28             	sub    esp,0x28
c0019924:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019928:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001992c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019930:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019934:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019939:	83 f8 02             	cmp    eax,0x2
c001993c:	75 32                	jne    c0019970 <fatWrapperIoctl+0x50>
c001993e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019942:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019946:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001994b:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019952:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019958:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001995e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019962:	66 89 02             	mov    WORD PTR [edx],ax
c0019965:	b8 00 00 00 00       	mov    eax,0x0
c001996a:	e9 c5 00 00 00       	jmp    c0019a34 <fatWrapperIoctl+0x114>
c001996f:	90                   	nop
c0019970:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019975:	83 f8 01             	cmp    eax,0x1
c0019978:	75 6a                	jne    c00199e4 <fatWrapperIoctl+0xc4>
c001997a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001997e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019982:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019987:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c001998e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019994:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001999a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00199a0:	89 c8                	mov    eax,ecx
c00199a2:	89 da                	mov    edx,ebx
c00199a4:	0f a4 c2 0a          	shld   edx,eax,0xa
c00199a8:	c1 e0 0a             	shl    eax,0xa
c00199ab:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00199b0:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c00199b7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00199bd:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00199c3:	89 cb                	mov    ebx,ecx
c00199c5:	c1 fb 1f             	sar    ebx,0x1f
c00199c8:	53                   	push   ebx
c00199c9:	51                   	push   ecx
c00199ca:	52                   	push   edx
c00199cb:	50                   	push   eax
c00199cc:	e8 6f 5b 00 00       	call   c001f540 <__udivdi3>
c00199d1:	83 c4 10             	add    esp,0x10
c00199d4:	89 c2                	mov    edx,eax
c00199d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199da:	89 10                	mov    DWORD PTR [eax],edx
c00199dc:	b8 00 00 00 00       	mov    eax,0x0
c00199e1:	eb 51                	jmp    c0019a34 <fatWrapperIoctl+0x114>
c00199e3:	90                   	nop
c00199e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00199e9:	85 c0                	test   eax,eax
c00199eb:	75 07                	jne    c00199f4 <fatWrapperIoctl+0xd4>
c00199ed:	b8 00 00 00 00       	mov    eax,0x0
c00199f2:	eb 40                	jmp    c0019a34 <fatWrapperIoctl+0x114>
c00199f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00199f9:	83 f8 03             	cmp    eax,0x3
c00199fc:	75 1a                	jne    c0019a18 <fatWrapperIoctl+0xf8>
c00199fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a0a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019a10:	b8 00 00 00 00       	mov    eax,0x0
c0019a15:	eb 1d                	jmp    c0019a34 <fatWrapperIoctl+0x114>
c0019a17:	90                   	nop
c0019a18:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019a1d:	83 f8 04             	cmp    eax,0x4
c0019a20:	75 0a                	jne    c0019a2c <fatWrapperIoctl+0x10c>
c0019a22:	b8 00 00 00 00       	mov    eax,0x0
c0019a27:	eb 0b                	jmp    c0019a34 <fatWrapperIoctl+0x114>
c0019a29:	8d 76 00             	lea    esi,[esi+0x0]
c0019a2c:	b8 04 00 00 00       	mov    eax,0x4
c0019a31:	8d 76 00             	lea    esi,[esi+0x0]
c0019a34:	83 c4 28             	add    esp,0x28
c0019a37:	5b                   	pop    ebx
c0019a38:	c3                   	ret    
c0019a39:	90                   	nop
c0019a3a:	66 90                	xchg   ax,ax

c0019a3c <FAT::FAT()>:
c0019a3c:	83 ec 1c             	sub    esp,0x1c
c0019a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a43:	83 ec 0c             	sub    esp,0xc
c0019a46:	50                   	push   eax
c0019a47:	e8 bc 1b ff ff       	call   c000b608 <Filesystem::Filesystem()>
c0019a4c:	83 c4 10             	add    esp,0x10
c0019a4f:	ba 8c 2b 02 c0       	mov    edx,0xc0022b8c
c0019a54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a58:	89 10                	mov    DWORD PTR [eax],edx
c0019a5a:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019a64:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a6c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019a71:	7f 19                	jg     c0019a8c <FAT::FAT()+0x50>
c0019a73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a77:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019a82:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019a87:	eb e3                	jmp    c0019a6c <FAT::FAT()+0x30>
c0019a89:	8d 76 00             	lea    esi,[esi+0x0]
c0019a8c:	90                   	nop
c0019a8d:	83 c4 1c             	add    esp,0x1c
c0019a90:	c3                   	ret    
c0019a91:	90                   	nop
c0019a92:	66 90                	xchg   ax,ax

c0019a94 <FAT::fixFilepath(char*)>:
c0019a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a98:	8a 00                	mov    al,BYTE PTR [eax]
c0019a9a:	0f be c0             	movsx  eax,al
c0019a9d:	83 f8 40             	cmp    eax,0x40
c0019aa0:	7e 2e                	jle    c0019ad0 <FAT::fixFilepath(char*)+0x3c>
c0019aa2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aa6:	8a 00                	mov    al,BYTE PTR [eax]
c0019aa8:	83 e8 41             	sub    eax,0x41
c0019aab:	88 c2                	mov    dl,al
c0019aad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ab1:	88 10                	mov    BYTE PTR [eax],dl
c0019ab3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ab7:	8a 00                	mov    al,BYTE PTR [eax]
c0019ab9:	0f be c0             	movsx  eax,al
c0019abc:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019ac3:	83 c0 30             	add    eax,0x30
c0019ac6:	88 c2                	mov    dl,al
c0019ac8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019acc:	88 10                	mov    BYTE PTR [eax],dl
c0019ace:	66 90                	xchg   ax,ax
c0019ad0:	90                   	nop
c0019ad1:	c3                   	ret    
c0019ad2:	66 90                	xchg   ax,ax

c0019ad4 <FAT::open(char const*, void**, FileOpenMode)>:
c0019ad4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ada:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ae2:	74 0c                	je     c0019af0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019ae4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019aec:	75 0e                	jne    c0019afc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019aee:	66 90                	xchg   ax,ax
c0019af0:	b8 04 00 00 00       	mov    eax,0x4
c0019af5:	e9 46 01 00 00       	jmp    c0019c40 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019afa:	66 90                	xchg   ax,ax
c0019afc:	83 ec 08             	sub    esp,0x8
c0019aff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b0a:	50                   	push   eax
c0019b0b:	e8 30 6b fe ff       	call   c0000640 <strcpy>
c0019b10:	83 c4 10             	add    esp,0x10
c0019b13:	83 ec 08             	sub    esp,0x8
c0019b16:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019b1a:	50                   	push   eax
c0019b1b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b22:	e8 6d ff ff ff       	call   c0019a94 <FAT::fixFilepath(char*)>
c0019b27:	83 c4 10             	add    esp,0x10
c0019b2a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019b32:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019b39:	83 e0 01             	and    eax,0x1
c0019b3c:	74 12                	je     c0019b50 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019b3e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019b45:	83 c8 01             	or     eax,0x1
c0019b48:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019b4f:	90                   	nop
c0019b50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019b57:	83 e0 04             	and    eax,0x4
c0019b5a:	74 24                	je     c0019b80 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019b5c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019b63:	83 c8 30             	or     eax,0x30
c0019b66:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019b6d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019b74:	83 c8 02             	or     eax,0x2
c0019b77:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019b7e:	66 90                	xchg   ax,ax
c0019b80:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019b87:	83 e0 02             	and    eax,0x2
c0019b8a:	74 14                	je     c0019ba0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019b8c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019b93:	83 c8 02             	or     eax,0x2
c0019b96:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ba7:	83 e0 08             	and    eax,0x8
c0019baa:	74 14                	je     c0019bc0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019bac:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019bb3:	83 c8 04             	or     eax,0x4
c0019bb6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019bc7:	83 e0 10             	and    eax,0x10
c0019bca:	74 14                	je     c0019be0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019bcc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019bd3:	83 c8 08             	or     eax,0x8
c0019bd6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0019be0:	83 ec 0c             	sub    esp,0xc
c0019be3:	68 28 02 00 00       	push   0x228
c0019be8:	e8 c9 de fe ff       	call   c0007ab6 <malloc>
c0019bed:	83 c4 10             	add    esp,0x10
c0019bf0:	89 c2                	mov    edx,eax
c0019bf2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019bf9:	89 10                	mov    DWORD PTR [eax],edx
c0019bfb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019c03:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019c0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c0c:	83 ec 04             	sub    esp,0x4
c0019c0f:	52                   	push   edx
c0019c10:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019c14:	52                   	push   edx
c0019c15:	50                   	push   eax
c0019c16:	e8 3f a0 fe ff       	call   c0003c5a <f_open>
c0019c1b:	83 c4 10             	add    esp,0x10
c0019c1e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019c25:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019c2d:	74 09                	je     c0019c38 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019c2f:	b8 01 00 00 00       	mov    eax,0x1
c0019c34:	eb 0a                	jmp    c0019c40 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019c36:	66 90                	xchg   ax,ax
c0019c38:	b8 00 00 00 00       	mov    eax,0x0
c0019c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c40:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019c46:	c3                   	ret    
c0019c47:	90                   	nop

c0019c48 <FAT::openDir(char const*, void**)>:
c0019c48:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c4e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c56:	74 0c                	je     c0019c64 <FAT::openDir(char const*, void**)+0x1c>
c0019c58:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019c60:	75 0e                	jne    c0019c70 <FAT::openDir(char const*, void**)+0x28>
c0019c62:	66 90                	xchg   ax,ax
c0019c64:	b8 04 00 00 00       	mov    eax,0x4
c0019c69:	e9 82 00 00 00       	jmp    c0019cf0 <FAT::openDir(char const*, void**)+0xa8>
c0019c6e:	66 90                	xchg   ax,ax
c0019c70:	83 ec 08             	sub    esp,0x8
c0019c73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c7e:	50                   	push   eax
c0019c7f:	e8 bc 69 fe ff       	call   c0000640 <strcpy>
c0019c84:	83 c4 10             	add    esp,0x10
c0019c87:	83 ec 08             	sub    esp,0x8
c0019c8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c8e:	50                   	push   eax
c0019c8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c96:	e8 f9 fd ff ff       	call   c0019a94 <FAT::fixFilepath(char*)>
c0019c9b:	83 c4 10             	add    esp,0x10
c0019c9e:	83 ec 0c             	sub    esp,0xc
c0019ca1:	6a 30                	push   0x30
c0019ca3:	e8 0e de fe ff       	call   c0007ab6 <malloc>
c0019ca8:	83 c4 10             	add    esp,0x10
c0019cab:	89 c2                	mov    edx,eax
c0019cad:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019cb4:	89 10                	mov    DWORD PTR [eax],edx
c0019cb6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0019cbf:	83 ec 08             	sub    esp,0x8
c0019cc2:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019cc6:	52                   	push   edx
c0019cc7:	50                   	push   eax
c0019cc8:	e8 3c a9 fe ff       	call   c0004609 <f_opendir>
c0019ccd:	83 c4 10             	add    esp,0x10
c0019cd0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019cd7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019cdf:	74 07                	je     c0019ce8 <FAT::openDir(char const*, void**)+0xa0>
c0019ce1:	b8 01 00 00 00       	mov    eax,0x1
c0019ce6:	eb 08                	jmp    c0019cf0 <FAT::openDir(char const*, void**)+0xa8>
c0019ce8:	b8 00 00 00 00       	mov    eax,0x0
c0019ced:	8d 76 00             	lea    esi,[esi+0x0]
c0019cf0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019cf6:	c3                   	ret    
c0019cf7:	90                   	nop

c0019cf8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019cf8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019cfe:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019d06:	75 0c                	jne    c0019d14 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019d08:	b8 04 00 00 00       	mov    eax,0x4
c0019d0d:	e9 d6 00 00 00       	jmp    c0019de8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019d12:	66 90                	xchg   ax,ax
c0019d14:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019d1c:	75 0a                	jne    c0019d28 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019d1e:	b8 04 00 00 00       	mov    eax,0x4
c0019d23:	e9 c0 00 00 00       	jmp    c0019de8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019d28:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019d30:	75 0a                	jne    c0019d3c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019d32:	b8 04 00 00 00       	mov    eax,0x4
c0019d37:	e9 ac 00 00 00       	jmp    c0019de8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019d3c:	83 ec 08             	sub    esp,0x8
c0019d3f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d46:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019d4d:	50                   	push   eax
c0019d4e:	e8 ed 68 fe ff       	call   c0000640 <strcpy>
c0019d53:	83 c4 10             	add    esp,0x10
c0019d56:	83 ec 08             	sub    esp,0x8
c0019d59:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019d60:	50                   	push   eax
c0019d61:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d68:	e8 27 fd ff ff       	call   c0019a94 <FAT::fixFilepath(char*)>
c0019d6d:	83 c4 10             	add    esp,0x10
c0019d70:	83 ec 08             	sub    esp,0x8
c0019d73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019d77:	50                   	push   eax
c0019d78:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019d7f:	50                   	push   eax
c0019d80:	e8 03 aa fe ff       	call   c0004788 <f_stat>
c0019d85:	83 c4 10             	add    esp,0x10
c0019d88:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019d8f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019d96:	85 c0                	test   eax,eax
c0019d98:	74 0a                	je     c0019da4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019d9a:	83 f8 04             	cmp    eax,0x4
c0019d9d:	74 39                	je     c0019dd8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019d9f:	eb 3f                	jmp    c0019de0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019da1:	8d 76 00             	lea    esi,[esi+0x0]
c0019da4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019da8:	0f b6 c0             	movzx  eax,al
c0019dab:	83 e0 10             	and    eax,0x10
c0019dae:	0f 95 c2             	setne  dl
c0019db1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019db8:	88 10                	mov    BYTE PTR [eax],dl
c0019dba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dbe:	ba 00 00 00 00       	mov    edx,0x0
c0019dc3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019dca:	89 01                	mov    DWORD PTR [ecx],eax
c0019dcc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019dcf:	b8 00 00 00 00       	mov    eax,0x0
c0019dd4:	eb 12                	jmp    c0019de8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019dd6:	66 90                	xchg   ax,ax
c0019dd8:	b8 02 00 00 00       	mov    eax,0x2
c0019ddd:	eb 09                	jmp    c0019de8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ddf:	90                   	nop
c0019de0:	b8 01 00 00 00       	mov    eax,0x1
c0019de5:	8d 76 00             	lea    esi,[esi+0x0]
c0019de8:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019dee:	c3                   	ret    
c0019def:	90                   	nop

c0019df0 <FAT::unlink(char const*)>:
c0019df0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019df6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019dfe:	75 08                	jne    c0019e08 <FAT::unlink(char const*)+0x18>
c0019e00:	b8 04 00 00 00       	mov    eax,0x4
c0019e05:	eb 61                	jmp    c0019e68 <FAT::unlink(char const*)+0x78>
c0019e07:	90                   	nop
c0019e08:	83 ec 08             	sub    esp,0x8
c0019e0b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e12:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e16:	50                   	push   eax
c0019e17:	e8 24 68 fe ff       	call   c0000640 <strcpy>
c0019e1c:	83 c4 10             	add    esp,0x10
c0019e1f:	83 ec 08             	sub    esp,0x8
c0019e22:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e26:	50                   	push   eax
c0019e27:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e2e:	e8 61 fc ff ff       	call   c0019a94 <FAT::fixFilepath(char*)>
c0019e33:	83 c4 10             	add    esp,0x10
c0019e36:	83 ec 0c             	sub    esp,0xc
c0019e39:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e3d:	50                   	push   eax
c0019e3e:	e8 b7 ab fe ff       	call   c00049fa <f_unlink>
c0019e43:	83 c4 10             	add    esp,0x10
c0019e46:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e4d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019e54:	85 c0                	test   eax,eax
c0019e56:	75 08                	jne    c0019e60 <FAT::unlink(char const*)+0x70>
c0019e58:	b8 00 00 00 00       	mov    eax,0x0
c0019e5d:	eb 09                	jmp    c0019e68 <FAT::unlink(char const*)+0x78>
c0019e5f:	90                   	nop
c0019e60:	b8 01 00 00 00       	mov    eax,0x1
c0019e65:	8d 76 00             	lea    esi,[esi+0x0]
c0019e68:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e6e:	c3                   	ret    
c0019e6f:	90                   	nop

c0019e70 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e70:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019e76:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019e7d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019e84:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019e88:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019e8c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019e94:	75 0a                	jne    c0019ea0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019e96:	b8 04 00 00 00       	mov    eax,0x4
c0019e9b:	e9 7c 01 00 00       	jmp    c001a01c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019ea0:	83 ec 08             	sub    esp,0x8
c0019ea3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019eaa:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019eae:	50                   	push   eax
c0019eaf:	e8 8c 67 fe ff       	call   c0000640 <strcpy>
c0019eb4:	83 c4 10             	add    esp,0x10
c0019eb7:	83 ec 08             	sub    esp,0x8
c0019eba:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019ebe:	50                   	push   eax
c0019ebf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019ec6:	e8 c9 fb ff ff       	call   c0019a94 <FAT::fixFilepath(char*)>
c0019ecb:	83 c4 10             	add    esp,0x10
c0019ece:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019ed6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019ede:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ee3:	83 e0 01             	and    eax,0x1
c0019ee6:	74 14                	je     c0019efc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019ee8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019eef:	83 c8 01             	or     eax,0x1
c0019ef2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0019efc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019f01:	83 e0 02             	and    eax,0x2
c0019f04:	74 12                	je     c0019f18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019f06:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019f0d:	83 c8 20             	or     eax,0x20
c0019f10:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019f17:	90                   	nop
c0019f18:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019f1d:	83 e0 04             	and    eax,0x4
c0019f20:	74 12                	je     c0019f34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019f22:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019f29:	83 c8 04             	or     eax,0x4
c0019f2c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019f33:	90                   	nop
c0019f34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019f39:	83 e0 08             	and    eax,0x8
c0019f3c:	74 12                	je     c0019f50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019f3e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019f45:	83 c8 02             	or     eax,0x2
c0019f48:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019f4f:	90                   	nop
c0019f50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019f55:	83 e0 01             	and    eax,0x1
c0019f58:	74 12                	je     c0019f6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019f5a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019f61:	83 c8 01             	or     eax,0x1
c0019f64:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019f6b:	90                   	nop
c0019f6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019f71:	83 e0 02             	and    eax,0x2
c0019f74:	74 12                	je     c0019f88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019f76:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019f7d:	83 c8 20             	or     eax,0x20
c0019f80:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019f87:	90                   	nop
c0019f88:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019f8d:	83 e0 04             	and    eax,0x4
c0019f90:	74 12                	je     c0019fa4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019f92:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019f99:	83 c8 04             	or     eax,0x4
c0019f9c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019fa3:	90                   	nop
c0019fa4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019fa9:	83 e0 08             	and    eax,0x8
c0019fac:	74 12                	je     c0019fc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019fae:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019fb5:	83 c8 02             	or     eax,0x2
c0019fb8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019fbf:	90                   	nop
c0019fc0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019fc7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019fce:	09 d0                	or     eax,edx
c0019fd0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019fd7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019fdf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019fe7:	83 ec 04             	sub    esp,0x4
c0019fea:	52                   	push   edx
c0019feb:	50                   	push   eax
c0019fec:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ff0:	50                   	push   eax
c0019ff1:	e8 79 ae fe ff       	call   c0004e6f <f_chmod>
c0019ff6:	83 c4 10             	add    esp,0x10
c0019ff9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a000:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a007:	85 c0                	test   eax,eax
c001a009:	75 09                	jne    c001a014 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a00b:	b8 00 00 00 00       	mov    eax,0x0
c001a010:	eb 0a                	jmp    c001a01c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a012:	66 90                	xchg   ax,ax
c001a014:	b8 01 00 00 00       	mov    eax,0x1
c001a019:	8d 76 00             	lea    esi,[esi+0x0]
c001a01c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a022:	c3                   	ret    
c001a023:	90                   	nop

c001a024 <FAT::rename(char const*, char const*)>:
c001a024:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a02a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a032:	74 0c                	je     c001a040 <FAT::rename(char const*, char const*)+0x1c>
c001a034:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a03c:	75 0e                	jne    c001a04c <FAT::rename(char const*, char const*)+0x28>
c001a03e:	66 90                	xchg   ax,ax
c001a040:	b8 04 00 00 00       	mov    eax,0x4
c001a045:	e9 9e 00 00 00       	jmp    c001a0e8 <FAT::rename(char const*, char const*)+0xc4>
c001a04a:	66 90                	xchg   ax,ax
c001a04c:	83 ec 08             	sub    esp,0x8
c001a04f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a056:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a05d:	50                   	push   eax
c001a05e:	e8 dd 65 fe ff       	call   c0000640 <strcpy>
c001a063:	83 c4 10             	add    esp,0x10
c001a066:	83 ec 08             	sub    esp,0x8
c001a069:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a070:	50                   	push   eax
c001a071:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a078:	e8 17 fa ff ff       	call   c0019a94 <FAT::fixFilepath(char*)>
c001a07d:	83 c4 10             	add    esp,0x10
c001a080:	83 ec 08             	sub    esp,0x8
c001a083:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a08a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a08e:	50                   	push   eax
c001a08f:	e8 ac 65 fe ff       	call   c0000640 <strcpy>
c001a094:	83 c4 10             	add    esp,0x10
c001a097:	83 ec 08             	sub    esp,0x8
c001a09a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a09e:	50                   	push   eax
c001a09f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a0a6:	e8 e9 f9 ff ff       	call   c0019a94 <FAT::fixFilepath(char*)>
c001a0ab:	83 c4 10             	add    esp,0x10
c001a0ae:	83 ec 08             	sub    esp,0x8
c001a0b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a0b5:	50                   	push   eax
c001a0b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a0bd:	50                   	push   eax
c001a0be:	e8 f4 ab fe ff       	call   c0004cb7 <f_rename>
c001a0c3:	83 c4 10             	add    esp,0x10
c001a0c6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a0cd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a0d4:	85 c0                	test   eax,eax
c001a0d6:	75 08                	jne    c001a0e0 <FAT::rename(char const*, char const*)+0xbc>
c001a0d8:	b8 00 00 00 00       	mov    eax,0x0
c001a0dd:	eb 09                	jmp    c001a0e8 <FAT::rename(char const*, char const*)+0xc4>
c001a0df:	90                   	nop
c001a0e0:	b8 01 00 00 00       	mov    eax,0x1
c001a0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a0ee:	c3                   	ret    
c001a0ef:	90                   	nop

c001a0f0 <FAT::mkdir(char const*)>:
c001a0f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a0f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a0fe:	75 08                	jne    c001a108 <FAT::mkdir(char const*)+0x18>
c001a100:	b8 04 00 00 00       	mov    eax,0x4
c001a105:	eb 61                	jmp    c001a168 <FAT::mkdir(char const*)+0x78>
c001a107:	90                   	nop
c001a108:	83 ec 08             	sub    esp,0x8
c001a10b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a112:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a116:	50                   	push   eax
c001a117:	e8 24 65 fe ff       	call   c0000640 <strcpy>
c001a11c:	83 c4 10             	add    esp,0x10
c001a11f:	83 ec 08             	sub    esp,0x8
c001a122:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a126:	50                   	push   eax
c001a127:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a12e:	e8 61 f9 ff ff       	call   c0019a94 <FAT::fixFilepath(char*)>
c001a133:	83 c4 10             	add    esp,0x10
c001a136:	83 ec 0c             	sub    esp,0xc
c001a139:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a13d:	50                   	push   eax
c001a13e:	e8 d9 a9 fe ff       	call   c0004b1c <f_mkdir>
c001a143:	83 c4 10             	add    esp,0x10
c001a146:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a14d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a154:	85 c0                	test   eax,eax
c001a156:	75 08                	jne    c001a160 <FAT::mkdir(char const*)+0x70>
c001a158:	b8 00 00 00 00       	mov    eax,0x0
c001a15d:	eb 09                	jmp    c001a168 <FAT::mkdir(char const*)+0x78>
c001a15f:	90                   	nop
c001a160:	b8 01 00 00 00       	mov    eax,0x1
c001a165:	8d 76 00             	lea    esi,[esi+0x0]
c001a168:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a16e:	c3                   	ret    
c001a16f:	90                   	nop

c001a170 <FAT::exists(char const*)>:
c001a170:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a176:	83 ec 08             	sub    esp,0x8
c001a179:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a180:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a184:	50                   	push   eax
c001a185:	e8 b6 64 fe ff       	call   c0000640 <strcpy>
c001a18a:	83 c4 10             	add    esp,0x10
c001a18d:	83 ec 08             	sub    esp,0x8
c001a190:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a194:	50                   	push   eax
c001a195:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a19c:	e8 f3 f8 ff ff       	call   c0019a94 <FAT::fixFilepath(char*)>
c001a1a1:	83 c4 10             	add    esp,0x10
c001a1a4:	83 ec 08             	sub    esp,0x8
c001a1a7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a1ae:	50                   	push   eax
c001a1af:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a1b3:	50                   	push   eax
c001a1b4:	e8 cf a5 fe ff       	call   c0004788 <f_stat>
c001a1b9:	83 c4 10             	add    esp,0x10
c001a1bc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a1c3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a1ca:	85 c0                	test   eax,eax
c001a1cc:	75 06                	jne    c001a1d4 <FAT::exists(char const*)+0x64>
c001a1ce:	b0 01                	mov    al,0x1
c001a1d0:	eb 06                	jmp    c001a1d8 <FAT::exists(char const*)+0x68>
c001a1d2:	66 90                	xchg   ax,ax
c001a1d4:	b0 00                	mov    al,0x0
c001a1d6:	66 90                	xchg   ax,ax
c001a1d8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a1de:	c3                   	ret    
c001a1df:	90                   	nop

c001a1e0 <isoReadDiscSectorHelper>:
c001a1e0:	83 ec 2c             	sub    esp,0x2c
c001a1e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a1e7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a1eb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a1f0:	83 e8 41             	sub    eax,0x41
c001a1f3:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a1fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a1fe:	ba 00 00 00 00       	mov    edx,0x0
c001a203:	83 ec 0c             	sub    esp,0xc
c001a206:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a20a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a20e:	52                   	push   edx
c001a20f:	50                   	push   eax
c001a210:	51                   	push   ecx
c001a211:	e8 de 39 ff ff       	call   c000dbf4 <LogicalDisk::read(unsigned long long, int, void*)>
c001a216:	83 c4 20             	add    esp,0x20
c001a219:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a21d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a222:	74 0c                	je     c001a230 <isoReadDiscSectorHelper+0x50>
c001a224:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a228:	c1 e0 0b             	shl    eax,0xb
c001a22b:	eb 0b                	jmp    c001a238 <isoReadDiscSectorHelper+0x58>
c001a22d:	8d 76 00             	lea    esi,[esi+0x0]
c001a230:	b8 00 00 00 00       	mov    eax,0x0
c001a235:	8d 76 00             	lea    esi,[esi+0x0]
c001a238:	83 c4 2c             	add    esp,0x2c
c001a23b:	c3                   	ret    

c001a23c <iso_kprintf>:
c001a23c:	83 ec 0c             	sub    esp,0xc
c001a23f:	83 ec 08             	sub    esp,0x8
c001a242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a246:	68 3a 29 02 c0       	push   0xc002293a
c001a24b:	e8 f5 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a250:	83 c4 10             	add    esp,0x10
c001a253:	90                   	nop
c001a254:	83 c4 0c             	add    esp,0xc
c001a257:	c3                   	ret    

c001a258 <iso_kprintfd>:
c001a258:	83 ec 0c             	sub    esp,0xc
c001a25b:	83 ec 08             	sub    esp,0x8
c001a25e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a262:	68 1a 11 02 c0       	push   0xc002111a
c001a267:	e8 d9 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a26c:	83 c4 10             	add    esp,0x10
c001a26f:	90                   	nop
c001a270:	83 c4 0c             	add    esp,0xc
c001a273:	c3                   	ret    

c001a274 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a274:	b8 08 00 00 00       	mov    eax,0x8
c001a279:	c3                   	ret    

c001a27a <ISO9660::truncate(void*, unsigned long long)>:
c001a27a:	b8 01 00 00 00       	mov    eax,0x1
c001a27f:	c3                   	ret    

c001a280 <ISO9660::getName()>:
c001a280:	b8 f0 2b 02 c0       	mov    eax,0xc0022bf0
c001a285:	c3                   	ret    

c001a286 <ISO9660::closeDir(void*)>:
c001a286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a28a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a28c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a28f:	90                   	nop

c001a290 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a290:	b8 01 00 00 00       	mov    eax,0x1
c001a295:	c3                   	ret    

c001a296 <ISO9660::unlink(char const*)>:
c001a296:	b8 01 00 00 00       	mov    eax,0x1
c001a29b:	c3                   	ret    

c001a29c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a29c:	b8 03 00 00 00       	mov    eax,0x3
c001a2a1:	c3                   	ret    

c001a2a2 <ISO9660::rename(char const*, char const*)>:
c001a2a2:	b8 01 00 00 00       	mov    eax,0x1
c001a2a7:	c3                   	ret    

c001a2a8 <ISO9660::mkdir(char const*)>:
c001a2a8:	b8 01 00 00 00       	mov    eax,0x1
c001a2ad:	c3                   	ret    

c001a2ae <ISO9660::~ISO9660()>:
c001a2ae:	83 ec 0c             	sub    esp,0xc
c001a2b1:	ba 30 2d 02 c0       	mov    edx,0xc0022d30
c001a2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2ba:	89 10                	mov    DWORD PTR [eax],edx
c001a2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2c0:	83 ec 0c             	sub    esp,0xc
c001a2c3:	50                   	push   eax
c001a2c4:	e8 63 13 ff ff       	call   c000b62c <Filesystem::~Filesystem()>
c001a2c9:	83 c4 10             	add    esp,0x10
c001a2cc:	90                   	nop
c001a2cd:	83 c4 0c             	add    esp,0xc
c001a2d0:	c3                   	ret    
c001a2d1:	90                   	nop

c001a2d2 <ISO9660::~ISO9660()>:
c001a2d2:	83 ec 0c             	sub    esp,0xc
c001a2d5:	83 ec 0c             	sub    esp,0xc
c001a2d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2dc:	e8 cd ff ff ff       	call   c001a2ae <ISO9660::~ISO9660()>
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	83 ec 08             	sub    esp,0x8
c001a2e7:	6a 08                	push   0x8
c001a2e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2ed:	e8 26 05 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a2f2:	83 c4 10             	add    esp,0x10
c001a2f5:	83 c4 0c             	add    esp,0xc
c001a2f8:	c3                   	ret    
c001a2f9:	90                   	nop

c001a2fa <ISO9660::exists(char const*)>:
c001a2fa:	83 ec 18             	sub    esp,0x18
c001a2fd:	68 0b 2c 02 c0       	push   0xc0022c0b
c001a302:	e8 64 71 ff ff       	call   c001146b <KePanic(char const*)>
c001a307:	31 c0                	xor    eax,eax
c001a309:	83 c4 1c             	add    esp,0x1c
c001a30c:	c3                   	ret    
c001a30d:	90                   	nop

c001a30e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a30e:	56                   	push   esi
c001a30f:	53                   	push   ebx
c001a310:	53                   	push   ebx
c001a311:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a315:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a319:	85 db                	test   ebx,ebx
c001a31b:	0f 84 ca 00 00 00    	je     c001a3eb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a321:	85 f6                	test   esi,esi
c001a323:	0f 84 c2 00 00 00    	je     c001a3eb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a329:	b8 03 00 00 00       	mov    eax,0x3
c001a32e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a333:	0f 85 b7 00 00 00    	jne    c001a3f0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a339:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a33b:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a342:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a348:	74 1b                	je     c001a365 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a34a:	85 c0                	test   eax,eax
c001a34c:	74 10                	je     c001a35e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a34e:	83 ec 0c             	sub    esp,0xc
c001a351:	68 29 2c 02 c0       	push   0xc0022c29
c001a356:	e8 10 71 ff ff       	call   c001146b <KePanic(char const*)>
c001a35b:	83 c4 10             	add    esp,0x10
c001a35e:	8a 03                	mov    al,BYTE PTR [ebx]
c001a360:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a365:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a368:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a36f:	85 c0                	test   eax,eax
c001a371:	74 09                	je     c001a37c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a373:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a37a:	74 48                	je     c001a3c4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a37c:	83 ec 0c             	sub    esp,0xc
c001a37f:	68 39 2c 02 c0       	push   0xc0022c39
c001a384:	e8 bc 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a389:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a38c:	83 c4 10             	add    esp,0x10
c001a38f:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a396:	85 c0                	test   eax,eax
c001a398:	74 17                	je     c001a3b1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a39a:	83 ec 0c             	sub    esp,0xc
c001a39d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a3a4:	68 59 2c 02 c0       	push   0xc0022c59
c001a3a9:	e8 97 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a3ae:	83 c4 10             	add    esp,0x10
c001a3b1:	83 ec 0c             	sub    esp,0xc
c001a3b4:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a3bb:	50                   	push   eax
c001a3bc:	e8 85 c6 fe ff       	call   c0006a46 <init_percd>
c001a3c1:	83 c4 10             	add    esp,0x10
c001a3c4:	83 c3 03             	add    ebx,0x3
c001a3c7:	51                   	push   ecx
c001a3c8:	51                   	push   ecx
c001a3c9:	6a 00                	push   0x0
c001a3cb:	53                   	push   ebx
c001a3cc:	e8 3c c1 fe ff       	call   c000650d <iso_open>
c001a3d1:	83 c4 10             	add    esp,0x10
c001a3d4:	89 c2                	mov    edx,eax
c001a3d6:	b8 01 00 00 00       	mov    eax,0x1
c001a3db:	83 fa ff             	cmp    edx,0xffffffff
c001a3de:	74 10                	je     c001a3f0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a3e0:	83 c2 32             	add    edx,0x32
c001a3e3:	31 c0                	xor    eax,eax
c001a3e5:	01 d2                	add    edx,edx
c001a3e7:	89 16                	mov    DWORD PTR [esi],edx
c001a3e9:	eb 05                	jmp    c001a3f0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a3eb:	b8 04 00 00 00       	mov    eax,0x4
c001a3f0:	5a                   	pop    edx
c001a3f1:	5b                   	pop    ebx
c001a3f2:	5e                   	pop    esi
c001a3f3:	c3                   	ret    

c001a3f4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a3f4:	53                   	push   ebx
c001a3f5:	83 ec 08             	sub    esp,0x8
c001a3f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a400:	85 c0                	test   eax,eax
c001a402:	74 2d                	je     c001a431 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a404:	85 db                	test   ebx,ebx
c001a406:	74 29                	je     c001a431 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a408:	b9 02 00 00 00       	mov    ecx,0x2
c001a40d:	52                   	push   edx
c001a40e:	99                   	cdq    
c001a40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a413:	f7 f9                	idiv   ecx
c001a415:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a419:	83 e8 32             	sub    eax,0x32
c001a41c:	50                   	push   eax
c001a41d:	e8 93 c1 fe ff       	call   c00065b5 <iso_read>
c001a422:	83 c4 10             	add    esp,0x10
c001a425:	89 03                	mov    DWORD PTR [ebx],eax
c001a427:	09 d0                	or     eax,edx
c001a429:	0f 94 c0             	sete   al
c001a42c:	0f b6 c0             	movzx  eax,al
c001a42f:	eb 05                	jmp    c001a436 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a431:	b8 04 00 00 00       	mov    eax,0x4
c001a436:	83 c4 08             	add    esp,0x8
c001a439:	5b                   	pop    ebx
c001a43a:	c3                   	ret    
c001a43b:	90                   	nop

c001a43c <ISO9660::seek(void*, unsigned long long)>:
c001a43c:	57                   	push   edi
c001a43d:	56                   	push   esi
c001a43e:	b8 04 00 00 00       	mov    eax,0x4
c001a443:	51                   	push   ecx
c001a444:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a448:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a44c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a450:	85 d2                	test   edx,edx
c001a452:	74 26                	je     c001a47a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a454:	6a 00                	push   0x0
c001a456:	b9 02 00 00 00       	mov    ecx,0x2
c001a45b:	57                   	push   edi
c001a45c:	89 d0                	mov    eax,edx
c001a45e:	56                   	push   esi
c001a45f:	99                   	cdq    
c001a460:	f7 f9                	idiv   ecx
c001a462:	83 e8 32             	sub    eax,0x32
c001a465:	50                   	push   eax
c001a466:	e8 60 c2 fe ff       	call   c00066cb <iso_seek>
c001a46b:	83 c4 10             	add    esp,0x10
c001a46e:	31 f0                	xor    eax,esi
c001a470:	31 fa                	xor    edx,edi
c001a472:	09 d0                	or     eax,edx
c001a474:	0f 95 c0             	setne  al
c001a477:	0f b6 c0             	movzx  eax,al
c001a47a:	5a                   	pop    edx
c001a47b:	5e                   	pop    esi
c001a47c:	5f                   	pop    edi
c001a47d:	c3                   	ret    

c001a47e <ISO9660::tell(void*, unsigned long long*)>:
c001a47e:	53                   	push   ebx
c001a47f:	83 ec 08             	sub    esp,0x8
c001a482:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a486:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a48a:	85 c0                	test   eax,eax
c001a48c:	74 24                	je     c001a4b2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a48e:	85 db                	test   ebx,ebx
c001a490:	74 20                	je     c001a4b2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a492:	83 ec 0c             	sub    esp,0xc
c001a495:	b9 02 00 00 00       	mov    ecx,0x2
c001a49a:	99                   	cdq    
c001a49b:	f7 f9                	idiv   ecx
c001a49d:	83 e8 32             	sub    eax,0x32
c001a4a0:	50                   	push   eax
c001a4a1:	e8 a9 c2 fe ff       	call   c000674f <iso_tell>
c001a4a6:	83 c4 10             	add    esp,0x10
c001a4a9:	89 03                	mov    DWORD PTR [ebx],eax
c001a4ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a4ae:	31 c0                	xor    eax,eax
c001a4b0:	eb 05                	jmp    c001a4b7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a4b2:	b8 04 00 00 00       	mov    eax,0x4
c001a4b7:	83 c4 08             	add    esp,0x8
c001a4ba:	5b                   	pop    ebx
c001a4bb:	c3                   	ret    

c001a4bc <ISO9660::stat(void*, unsigned long long*)>:
c001a4bc:	53                   	push   ebx
c001a4bd:	83 ec 14             	sub    esp,0x14
c001a4c0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a4c4:	68 7d 2c 02 c0       	push   0xc0022c7d
c001a4c9:	e8 77 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a4ce:	83 c4 10             	add    esp,0x10
c001a4d1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a4d6:	74 2c                	je     c001a504 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a4d8:	85 db                	test   ebx,ebx
c001a4da:	74 28                	je     c001a504 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a4dc:	83 ec 0c             	sub    esp,0xc
c001a4df:	b9 02 00 00 00       	mov    ecx,0x2
c001a4e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4e8:	99                   	cdq    
c001a4e9:	f7 f9                	idiv   ecx
c001a4eb:	83 e8 32             	sub    eax,0x32
c001a4ee:	50                   	push   eax
c001a4ef:	e8 8c c2 fe ff       	call   c0006780 <iso_total>
c001a4f4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a4fb:	89 03                	mov    DWORD PTR [ebx],eax
c001a4fd:	83 c4 10             	add    esp,0x10
c001a500:	31 c0                	xor    eax,eax
c001a502:	eb 05                	jmp    c001a509 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a504:	b8 04 00 00 00       	mov    eax,0x4
c001a509:	83 c4 08             	add    esp,0x8
c001a50c:	5b                   	pop    ebx
c001a50d:	c3                   	ret    

c001a50e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a50e:	55                   	push   ebp
c001a50f:	57                   	push   edi
c001a510:	56                   	push   esi
c001a511:	53                   	push   ebx
c001a512:	83 ec 18             	sub    esp,0x18
c001a515:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a519:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a51d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a521:	68 85 2c 02 c0       	push   0xc0022c85
c001a526:	e8 1a 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a52b:	83 c4 10             	add    esp,0x10
c001a52e:	85 ff                	test   edi,edi
c001a530:	0f 94 c0             	sete   al
c001a533:	85 f6                	test   esi,esi
c001a535:	0f 94 c2             	sete   dl
c001a538:	09 d0                	or     eax,edx
c001a53a:	a8 01                	test   al,0x1
c001a53c:	0f 85 dd 00 00 00    	jne    c001a61f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a542:	85 db                	test   ebx,ebx
c001a544:	0f 84 d5 00 00 00    	je     c001a61f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a54a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a54d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a553:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a55a:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a561:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a563:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a569:	74 1b                	je     c001a586 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a56b:	85 c0                	test   eax,eax
c001a56d:	74 10                	je     c001a57f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a56f:	83 ec 0c             	sub    esp,0xc
c001a572:	68 29 2c 02 c0       	push   0xc0022c29
c001a577:	e8 ef 6e ff ff       	call   c001146b <KePanic(char const*)>
c001a57c:	83 c4 10             	add    esp,0x10
c001a57f:	8a 03                	mov    al,BYTE PTR [ebx]
c001a581:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a586:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a589:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a590:	85 c0                	test   eax,eax
c001a592:	74 09                	je     c001a59d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a594:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a59b:	74 51                	je     c001a5ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a59d:	83 ec 0c             	sub    esp,0xc
c001a5a0:	68 8d 2c 02 c0       	push   0xc0022c8d
c001a5a5:	e8 9b 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a5aa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5ad:	83 c4 10             	add    esp,0x10
c001a5b0:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a5b8:	74 21                	je     c001a5db <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a5ba:	83 ec 0c             	sub    esp,0xc
c001a5bd:	68 ad 2c 02 c0       	push   0xc0022cad
c001a5c2:	e8 7e 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a5c7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5ca:	83 c4 10             	add    esp,0x10
c001a5cd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5d4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a5db:	83 ec 0c             	sub    esp,0xc
c001a5de:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a5e5:	50                   	push   eax
c001a5e6:	e8 5b c4 fe ff       	call   c0006a46 <init_percd>
c001a5eb:	83 c4 10             	add    esp,0x10
c001a5ee:	83 c3 03             	add    ebx,0x3
c001a5f1:	52                   	push   edx
c001a5f2:	52                   	push   edx
c001a5f3:	6a 00                	push   0x0
c001a5f5:	53                   	push   ebx
c001a5f6:	e8 12 bf fe ff       	call   c000650d <iso_open>
c001a5fb:	83 c4 10             	add    esp,0x10
c001a5fe:	89 c5                	mov    ebp,eax
c001a600:	83 f8 ff             	cmp    eax,0xffffffff
c001a603:	75 21                	jne    c001a626 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a605:	50                   	push   eax
c001a606:	50                   	push   eax
c001a607:	6a 01                	push   0x1
c001a609:	53                   	push   ebx
c001a60a:	e8 fe be fe ff       	call   c000650d <iso_open>
c001a60f:	83 c4 10             	add    esp,0x10
c001a612:	ba 02 00 00 00       	mov    edx,0x2
c001a617:	40                   	inc    eax
c001a618:	74 2b                	je     c001a645 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a61a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a61d:	eb 24                	jmp    c001a643 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a61f:	ba 04 00 00 00       	mov    edx,0x4
c001a624:	eb 1f                	jmp    c001a645 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a626:	83 ec 0c             	sub    esp,0xc
c001a629:	50                   	push   eax
c001a62a:	e8 51 c1 fe ff       	call   c0006780 <iso_total>
c001a62f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a636:	89 07                	mov    DWORD PTR [edi],eax
c001a638:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a63b:	e8 57 bf fe ff       	call   c0006597 <iso_close>
c001a640:	83 c4 10             	add    esp,0x10
c001a643:	31 d2                	xor    edx,edx
c001a645:	83 c4 0c             	add    esp,0xc
c001a648:	89 d0                	mov    eax,edx
c001a64a:	5b                   	pop    ebx
c001a64b:	5e                   	pop    esi
c001a64c:	5f                   	pop    edi
c001a64d:	5d                   	pop    ebp
c001a64e:	c3                   	ret    
c001a64f:	90                   	nop

c001a650 <ISO9660::close(void*)>:
c001a650:	83 ec 0c             	sub    esp,0xc
c001a653:	b8 04 00 00 00       	mov    eax,0x4
c001a658:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a65c:	85 d2                	test   edx,edx
c001a65e:	74 1b                	je     c001a67b <ISO9660::close(void*)+0x2b>
c001a660:	83 ec 0c             	sub    esp,0xc
c001a663:	b9 02 00 00 00       	mov    ecx,0x2
c001a668:	89 d0                	mov    eax,edx
c001a66a:	99                   	cdq    
c001a66b:	f7 f9                	idiv   ecx
c001a66d:	83 e8 32             	sub    eax,0x32
c001a670:	50                   	push   eax
c001a671:	e8 21 bf fe ff       	call   c0006597 <iso_close>
c001a676:	83 c4 10             	add    esp,0x10
c001a679:	31 c0                	xor    eax,eax
c001a67b:	83 c4 0c             	add    esp,0xc
c001a67e:	c3                   	ret    
c001a67f:	90                   	nop

c001a680 <ISO9660::openDir(char const*, void**)>:
c001a680:	56                   	push   esi
c001a681:	53                   	push   ebx
c001a682:	50                   	push   eax
c001a683:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a687:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a68b:	85 db                	test   ebx,ebx
c001a68d:	0f 84 bd 00 00 00    	je     c001a750 <ISO9660::openDir(char const*, void**)+0xd0>
c001a693:	85 f6                	test   esi,esi
c001a695:	0f 84 b5 00 00 00    	je     c001a750 <ISO9660::openDir(char const*, void**)+0xd0>
c001a69b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a69d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a6a4:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a6aa:	74 1b                	je     c001a6c7 <ISO9660::openDir(char const*, void**)+0x47>
c001a6ac:	85 c0                	test   eax,eax
c001a6ae:	74 10                	je     c001a6c0 <ISO9660::openDir(char const*, void**)+0x40>
c001a6b0:	83 ec 0c             	sub    esp,0xc
c001a6b3:	68 29 2c 02 c0       	push   0xc0022c29
c001a6b8:	e8 ae 6d ff ff       	call   c001146b <KePanic(char const*)>
c001a6bd:	83 c4 10             	add    esp,0x10
c001a6c0:	8a 03                	mov    al,BYTE PTR [ebx]
c001a6c2:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a6c7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a6ca:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a6d1:	85 c0                	test   eax,eax
c001a6d3:	74 10                	je     c001a6e5 <ISO9660::openDir(char const*, void**)+0x65>
c001a6d5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a6dc:	74 1a                	je     c001a6f8 <ISO9660::openDir(char const*, void**)+0x78>
c001a6de:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a6e5:	83 ec 0c             	sub    esp,0xc
c001a6e8:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a6ef:	50                   	push   eax
c001a6f0:	e8 51 c3 fe ff       	call   c0006a46 <init_percd>
c001a6f5:	83 c4 10             	add    esp,0x10
c001a6f8:	83 c3 03             	add    ebx,0x3
c001a6fb:	50                   	push   eax
c001a6fc:	50                   	push   eax
c001a6fd:	6a 01                	push   0x1
c001a6ff:	53                   	push   ebx
c001a700:	e8 08 be fe ff       	call   c000650d <iso_open>
c001a705:	83 c4 10             	add    esp,0x10
c001a708:	89 c3                	mov    ebx,eax
c001a70a:	83 f8 ff             	cmp    eax,0xffffffff
c001a70d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a712:	75 1c                	jne    c001a730 <ISO9660::openDir(char const*, void**)+0xb0>
c001a714:	53                   	push   ebx
c001a715:	53                   	push   ebx
c001a716:	68 d1 2c 02 c0       	push   0xc0022cd1
c001a71b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a721:	e8 80 e3 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a726:	83 c4 10             	add    esp,0x10
c001a729:	b8 01 00 00 00       	mov    eax,0x1
c001a72e:	eb 25                	jmp    c001a755 <ISO9660::openDir(char const*, void**)+0xd5>
c001a730:	01 db                	add    ebx,ebx
c001a732:	51                   	push   ecx
c001a733:	83 c3 65             	add    ebx,0x65
c001a736:	51                   	push   ecx
c001a737:	68 e4 2c 02 c0       	push   0xc0022ce4
c001a73c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a742:	e8 5f e3 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a747:	89 1e                	mov    DWORD PTR [esi],ebx
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	31 c0                	xor    eax,eax
c001a74e:	eb 05                	jmp    c001a755 <ISO9660::openDir(char const*, void**)+0xd5>
c001a750:	b8 04 00 00 00       	mov    eax,0x4
c001a755:	5a                   	pop    edx
c001a756:	5b                   	pop    ebx
c001a757:	5e                   	pop    esi
c001a758:	c3                   	ret    
c001a759:	90                   	nop

c001a75a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a75a:	55                   	push   ebp
c001a75b:	57                   	push   edi
c001a75c:	56                   	push   esi
c001a75d:	53                   	push   ebx
c001a75e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a764:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a76b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a772:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a77a:	0f 84 e7 00 00 00    	je     c001a867 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a780:	85 db                	test   ebx,ebx
c001a782:	0f 84 df 00 00 00    	je     c001a867 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a788:	83 ec 0c             	sub    esp,0xc
c001a78b:	68 f7 2c 02 c0       	push   0xc0022cf7
c001a790:	e8 b0 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a795:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a79c:	b9 02 00 00 00       	mov    ecx,0x2
c001a7a1:	99                   	cdq    
c001a7a2:	f7 f9                	idiv   ecx
c001a7a4:	83 e8 32             	sub    eax,0x32
c001a7a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7aa:	e8 23 c0 fe ff       	call   c00067d2 <iso_readdir>
c001a7af:	83 c4 10             	add    esp,0x10
c001a7b2:	89 c6                	mov    esi,eax
c001a7b4:	85 c0                	test   eax,eax
c001a7b6:	75 37                	jne    c001a7ef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a7b8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a7bd:	56                   	push   esi
c001a7be:	56                   	push   esi
c001a7bf:	68 02 2d 02 c0       	push   0xc0022d02
c001a7c4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a7ca:	e8 d7 e2 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a7cf:	83 c4 0c             	add    esp,0xc
c001a7d2:	68 10 01 00 00       	push   0x110
c001a7d7:	6a 00                	push   0x0
c001a7d9:	57                   	push   edi
c001a7da:	e8 11 5d fe ff       	call   c00004f0 <memset>
c001a7df:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a7e5:	83 c4 10             	add    esp,0x10
c001a7e8:	b8 01 00 00 00       	mov    eax,0x1
c001a7ed:	eb 7d                	jmp    c001a86c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a7ef:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a7f5:	8d 68 08             	lea    ebp,[eax+0x8]
c001a7f8:	83 ec 0c             	sub    esp,0xc
c001a7fb:	55                   	push   ebp
c001a7fc:	e8 6f 5d fe ff       	call   c0000570 <strlen>
c001a801:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a809:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a80d:	83 c4 10             	add    esp,0x10
c001a810:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a814:	75 0a                	jne    c001a820 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a816:	b8 02 00 00 00       	mov    eax,0x2
c001a81b:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a81e:	74 05                	je     c001a825 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a820:	b8 01 00 00 00       	mov    eax,0x1
c001a825:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a829:	50                   	push   eax
c001a82a:	50                   	push   eax
c001a82b:	55                   	push   ebp
c001a82c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a830:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a834:	50                   	push   eax
c001a835:	e8 06 5e fe ff       	call   c0000640 <strcpy>
c001a83a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a841:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a843:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a849:	5a                   	pop    edx
c001a84a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a84f:	59                   	pop    ecx
c001a850:	68 15 2d 02 c0       	push   0xc0022d15
c001a855:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a85b:	e8 46 e2 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a860:	83 c4 10             	add    esp,0x10
c001a863:	31 c0                	xor    eax,eax
c001a865:	eb 05                	jmp    c001a86c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a867:	b8 04 00 00 00       	mov    eax,0x4
c001a86c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a872:	5b                   	pop    ebx
c001a873:	5e                   	pop    esi
c001a874:	5f                   	pop    edi
c001a875:	5d                   	pop    ebp
c001a876:	c3                   	ret    

c001a877 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a877:	57                   	push   edi
c001a878:	56                   	push   esi
c001a879:	53                   	push   ebx
c001a87a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a87e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a882:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a886:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001a88c:	0f be cb             	movsx  ecx,bl
c001a88f:	75 0b                	jne    c001a89c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a891:	0f be 05 40 3f 02 c0 	movsx  eax,BYTE PTR ds:0xc0023f40
c001a898:	39 c8                	cmp    eax,ecx
c001a89a:	74 47                	je     c001a8e3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a89c:	83 ec 0c             	sub    esp,0xc
c001a89f:	31 d2                	xor    edx,edx
c001a8a1:	68 a0 c8 02 c0       	push   0xc002c8a0
c001a8a6:	6a 01                	push   0x1
c001a8a8:	52                   	push   edx
c001a8a9:	56                   	push   esi
c001a8aa:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001a8b1:	e8 3e 33 ff ff       	call   c000dbf4 <LogicalDisk::read(unsigned long long, int, void*)>
c001a8b6:	83 c4 20             	add    esp,0x20
c001a8b9:	85 c0                	test   eax,eax
c001a8bb:	75 0e                	jne    c001a8cb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a8bd:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001a8c3:	88 1d 40 3f 02 c0    	mov    BYTE PTR ds:0xc0023f40,bl
c001a8c9:	eb 18                	jmp    c001a8e3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a8cb:	50                   	push   eax
c001a8cc:	68 00 08 00 00       	push   0x800
c001a8d1:	6a 00                	push   0x0
c001a8d3:	57                   	push   edi
c001a8d4:	e8 17 5c fe ff       	call   c00004f0 <memset>
c001a8d9:	83 c4 10             	add    esp,0x10
c001a8dc:	b8 01 00 00 00       	mov    eax,0x1
c001a8e1:	eb 0e                	jmp    c001a8f1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a8e3:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001a8e8:	b9 00 08 00 00       	mov    ecx,0x800
c001a8ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8ef:	31 c0                	xor    eax,eax
c001a8f1:	5b                   	pop    ebx
c001a8f2:	5e                   	pop    esi
c001a8f3:	5f                   	pop    edi
c001a8f4:	c3                   	ret    
c001a8f5:	90                   	nop

c001a8f6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a8f6:	53                   	push   ebx
c001a8f7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a8fd:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001a907:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a90e:	8d 58 41             	lea    ebx,[eax+0x41]
c001a911:	0f be db             	movsx  ebx,bl
c001a914:	53                   	push   ebx
c001a915:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a919:	50                   	push   eax
c001a91a:	6a 10                	push   0x10
c001a91c:	e8 56 ff ff ff       	call   c001a877 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a921:	83 c4 10             	add    esp,0x10
c001a924:	31 d2                	xor    edx,edx
c001a926:	85 c0                	test   eax,eax
c001a928:	75 33                	jne    c001a95d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a92a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a92f:	75 2c                	jne    c001a95d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a931:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a936:	75 25                	jne    c001a95d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a938:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a93d:	75 1e                	jne    c001a95d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a93f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a944:	75 17                	jne    c001a95d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a946:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a94b:	75 10                	jne    c001a95d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a94d:	83 ec 0c             	sub    esp,0xc
c001a950:	53                   	push   ebx
c001a951:	e8 f0 c0 fe ff       	call   c0006a46 <init_percd>
c001a956:	83 c4 10             	add    esp,0x10
c001a959:	40                   	inc    eax
c001a95a:	0f 95 c2             	setne  dl
c001a95d:	88 d0                	mov    al,dl
c001a95f:	81 c4 08 08 00 00    	add    esp,0x808
c001a965:	5b                   	pop    ebx
c001a966:	c3                   	ret    
c001a967:	90                   	nop

c001a968 <ISO9660::ISO9660()>:
c001a968:	83 ec 0c             	sub    esp,0xc
c001a96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a96f:	83 ec 0c             	sub    esp,0xc
c001a972:	50                   	push   eax
c001a973:	e8 90 0c ff ff       	call   c000b608 <Filesystem::Filesystem()>
c001a978:	83 c4 10             	add    esp,0x10
c001a97b:	ba 30 2d 02 c0       	mov    edx,0xc0022d30
c001a980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a984:	89 10                	mov    DWORD PTR [eax],edx
c001a986:	e8 cd c1 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a98b:	90                   	nop
c001a98c:	83 c4 0c             	add    esp,0xc
c001a98f:	c3                   	ret    

c001a990 <SoundCard::beginPlayback()>:
c001a990:	c7 44 24 04 94 2d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022d94
c001a998:	e9 ce 6a ff ff       	jmp    c001146b <KePanic(char const*)>
c001a99d:	90                   	nop

c001a99e <SoundCard::stopPlayback()>:
c001a99e:	c7 44 24 04 94 2d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022d94
c001a9a6:	e9 c0 6a ff ff       	jmp    c001146b <KePanic(char const*)>
c001a9ab:	90                   	nop

c001a9ac <SoundCard::SoundCard(char const*)>:
c001a9ac:	83 ec 1c             	sub    esp,0x1c
c001a9af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9b3:	83 ec 08             	sub    esp,0x8
c001a9b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a9ba:	50                   	push   eax
c001a9bb:	e8 ea 1f ff ff       	call   c000c9aa <Device::Device(char const*)>
c001a9c0:	83 c4 10             	add    esp,0x10
c001a9c3:	ba e0 2d 02 c0       	mov    edx,0xc0022de0
c001a9c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9cc:	89 10                	mov    DWORD PTR [eax],edx
c001a9ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9d2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a9d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9dd:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a9e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9eb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9f9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001aa03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa07:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001aa11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa19:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001aa1e:	7f 1a                	jg     c001aa3a <SoundCard::SoundCard(char const*)+0x8e>
c001aa20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa28:	83 c2 54             	add    edx,0x54
c001aa2b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001aa33:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001aa38:	eb df                	jmp    c001aa19 <SoundCard::SoundCard(char const*)+0x6d>
c001aa3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa3e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001aa45:	90                   	nop
c001aa46:	83 c4 1c             	add    esp,0x1c
c001aa49:	c3                   	ret    

c001aa4a <SoundCard::~SoundCard()>:
c001aa4a:	83 ec 0c             	sub    esp,0xc
c001aa4d:	ba e0 2d 02 c0       	mov    edx,0xc0022de0
c001aa52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa56:	89 10                	mov    DWORD PTR [eax],edx
c001aa58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa5c:	83 ec 0c             	sub    esp,0xc
c001aa5f:	50                   	push   eax
c001aa60:	e8 af 1c ff ff       	call   c000c714 <Device::~Device()>
c001aa65:	83 c4 10             	add    esp,0x10
c001aa68:	90                   	nop
c001aa69:	83 c4 0c             	add    esp,0xc
c001aa6c:	c3                   	ret    
c001aa6d:	90                   	nop

c001aa6e <SoundCard::~SoundCard()>:
c001aa6e:	83 ec 0c             	sub    esp,0xc
c001aa71:	83 ec 0c             	sub    esp,0xc
c001aa74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa78:	e8 cd ff ff ff       	call   c001aa4a <SoundCard::~SoundCard()>
c001aa7d:	83 c4 10             	add    esp,0x10
c001aa80:	83 ec 08             	sub    esp,0x8
c001aa83:	68 e8 01 00 00       	push   0x1e8
c001aa88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa8c:	e8 87 fd fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001aa91:	83 c4 10             	add    esp,0x10
c001aa94:	83 c4 0c             	add    esp,0xc
c001aa97:	c3                   	ret    

c001aa98 <SoundCard::configureRates(int, int, int)>:
c001aa98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa9c:	31 c0                	xor    eax,eax
c001aa9e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001aaa5:	75 20                	jne    c001aac7 <SoundCard::configureRates(int, int, int)+0x2f>
c001aaa7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aaab:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001aab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aab5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001aabb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aabf:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001aac5:	b0 01                	mov    al,0x1
c001aac7:	c3                   	ret    

c001aac8 <SoundCard::getSamples16(int, short*)>:
c001aac8:	55                   	push   ebp
c001aac9:	57                   	push   edi
c001aaca:	31 ff                	xor    edi,edi
c001aacc:	56                   	push   esi
c001aacd:	53                   	push   ebx
c001aace:	31 db                	xor    ebx,ebx
c001aad0:	83 ec 10             	sub    esp,0x10
c001aad3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001aad7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aadb:	8d 04 36             	lea    eax,[esi+esi*1]
c001aade:	50                   	push   eax
c001aadf:	6a 00                	push   0x0
c001aae1:	55                   	push   ebp
c001aae2:	e8 09 5a fe ff       	call   c00004f0 <memset>
c001aae7:	83 c4 10             	add    esp,0x10
c001aaea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaee:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001aaf5:	85 c0                	test   eax,eax
c001aaf7:	74 1b                	je     c001ab14 <SoundCard::getSamples16(int, short*)+0x4c>
c001aaf9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001aafd:	75 15                	jne    c001ab14 <SoundCard::getSamples16(int, short*)+0x4c>
c001aaff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab03:	55                   	push   ebp
c001ab04:	56                   	push   esi
c001ab05:	50                   	push   eax
c001ab06:	e8 f1 02 00 00       	call   c001adfc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ab0b:	83 c4 10             	add    esp,0x10
c001ab0e:	39 c7                	cmp    edi,eax
c001ab10:	7d 02                	jge    c001ab14 <SoundCard::getSamples16(int, short*)+0x4c>
c001ab12:	89 c7                	mov    edi,eax
c001ab14:	43                   	inc    ebx
c001ab15:	83 fb 20             	cmp    ebx,0x20
c001ab18:	75 d0                	jne    c001aaea <SoundCard::getSamples16(int, short*)+0x22>
c001ab1a:	83 c4 0c             	add    esp,0xc
c001ab1d:	89 f8                	mov    eax,edi
c001ab1f:	5b                   	pop    ebx
c001ab20:	5e                   	pop    esi
c001ab21:	5f                   	pop    edi
c001ab22:	5d                   	pop    ebp
c001ab23:	c3                   	ret    

c001ab24 <SoundCard::getSamples32(int, int*)>:
c001ab24:	55                   	push   ebp
c001ab25:	57                   	push   edi
c001ab26:	31 ff                	xor    edi,edi
c001ab28:	56                   	push   esi
c001ab29:	31 f6                	xor    esi,esi
c001ab2b:	53                   	push   ebx
c001ab2c:	83 ec 10             	sub    esp,0x10
c001ab2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab33:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ab37:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ab3b:	c1 e0 02             	shl    eax,0x2
c001ab3e:	50                   	push   eax
c001ab3f:	6a 00                	push   0x0
c001ab41:	55                   	push   ebp
c001ab42:	e8 a9 59 fe ff       	call   c00004f0 <memset>
c001ab47:	83 c4 10             	add    esp,0x10
c001ab4a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ab51:	85 c0                	test   eax,eax
c001ab53:	74 1b                	je     c001ab70 <SoundCard::getSamples32(int, int*)+0x4c>
c001ab55:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ab59:	75 15                	jne    c001ab70 <SoundCard::getSamples32(int, int*)+0x4c>
c001ab5b:	53                   	push   ebx
c001ab5c:	55                   	push   ebp
c001ab5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab61:	50                   	push   eax
c001ab62:	e8 61 03 00 00       	call   c001aec8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ab67:	83 c4 10             	add    esp,0x10
c001ab6a:	39 c6                	cmp    esi,eax
c001ab6c:	7d 02                	jge    c001ab70 <SoundCard::getSamples32(int, int*)+0x4c>
c001ab6e:	89 c6                	mov    esi,eax
c001ab70:	47                   	inc    edi
c001ab71:	83 ff 20             	cmp    edi,0x20
c001ab74:	75 d4                	jne    c001ab4a <SoundCard::getSamples32(int, int*)+0x26>
c001ab76:	85 f6                	test   esi,esi
c001ab78:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ab7f:	75 0f                	jne    c001ab90 <SoundCard::getSamples32(int, int*)+0x6c>
c001ab81:	85 c0                	test   eax,eax
c001ab83:	74 1b                	je     c001aba0 <SoundCard::getSamples32(int, int*)+0x7c>
c001ab85:	83 ec 0c             	sub    esp,0xc
c001ab88:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab8a:	53                   	push   ebx
c001ab8b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ab8e:	eb 0d                	jmp    c001ab9d <SoundCard::getSamples32(int, int*)+0x79>
c001ab90:	85 c0                	test   eax,eax
c001ab92:	75 0c                	jne    c001aba0 <SoundCard::getSamples32(int, int*)+0x7c>
c001ab94:	83 ec 0c             	sub    esp,0xc
c001ab97:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab99:	53                   	push   ebx
c001ab9a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ab9d:	83 c4 10             	add    esp,0x10
c001aba0:	83 c4 0c             	add    esp,0xc
c001aba3:	89 f0                	mov    eax,esi
c001aba5:	5b                   	pop    ebx
c001aba6:	5e                   	pop    esi
c001aba7:	5f                   	pop    edi
c001aba8:	5d                   	pop    ebp
c001aba9:	c3                   	ret    

c001abaa <SoundCard::addChannel(SoundPort*)>:
c001abaa:	83 ec 0c             	sub    esp,0xc
c001abad:	31 c0                	xor    eax,eax
c001abaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abb3:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001abbb:	74 1b                	je     c001abd8 <SoundCard::addChannel(SoundPort*)+0x2e>
c001abbd:	40                   	inc    eax
c001abbe:	83 f8 20             	cmp    eax,0x20
c001abc1:	75 f0                	jne    c001abb3 <SoundCard::addChannel(SoundPort*)+0x9>
c001abc3:	83 ec 0c             	sub    esp,0xc
c001abc6:	68 b9 2d 02 c0       	push   0xc0022db9
c001abcb:	e8 9b 68 ff ff       	call   c001146b <KePanic(char const*)>
c001abd0:	83 c4 10             	add    esp,0x10
c001abd3:	83 c8 ff             	or     eax,0xffffffff
c001abd6:	eb 0b                	jmp    c001abe3 <SoundCard::addChannel(SoundPort*)+0x39>
c001abd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001abdc:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001abe3:	83 c4 0c             	add    esp,0xc
c001abe6:	c3                   	ret    
c001abe7:	90                   	nop

c001abe8 <SoundCard::removeChannel(int)>:
c001abe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001abf0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001abfb:	c3                   	ret    

c001abfc <SoundPort::SoundPort(int, int, int, int)>:
c001abfc:	83 ec 0c             	sub    esp,0xc
c001abff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac03:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ac0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ac12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac1a:	89 10                	mov    DWORD PTR [eax],edx
c001ac1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ac24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ac27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac2f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ac32:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ac37:	75 13                	jne    c001ac4c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ac39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac3d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac3f:	05 a0 0f 00 00       	add    eax,0xfa0
c001ac44:	01 c0                	add    eax,eax
c001ac46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac4a:	66 90                	xchg   ax,ax
c001ac4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac50:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ac54:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ac57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac5b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ac62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac66:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ac69:	c1 e0 02             	shl    eax,0x2
c001ac6c:	83 ec 0c             	sub    esp,0xc
c001ac6f:	50                   	push   eax
c001ac70:	e8 41 ce fe ff       	call   c0007ab6 <malloc>
c001ac75:	83 c4 10             	add    esp,0x10
c001ac78:	89 c2                	mov    edx,eax
c001ac7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac7e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ac81:	90                   	nop
c001ac82:	83 c4 0c             	add    esp,0xc
c001ac85:	c3                   	ret    
c001ac86:	66 90                	xchg   ax,ax

c001ac88 <SoundPort::~SoundPort()>:
c001ac88:	83 ec 0c             	sub    esp,0xc
c001ac8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac8f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ac92:	85 c0                	test   eax,eax
c001ac94:	74 1e                	je     c001acb4 <SoundPort::~SoundPort()+0x2c>
c001ac96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac9a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ac9d:	83 ec 0c             	sub    esp,0xc
c001aca0:	50                   	push   eax
c001aca1:	e8 20 ce fe ff       	call   c0007ac6 <free>
c001aca6:	83 c4 10             	add    esp,0x10
c001aca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acad:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001acb4:	90                   	nop
c001acb5:	83 c4 0c             	add    esp,0xc
c001acb8:	c3                   	ret    
c001acb9:	90                   	nop
c001acba:	66 90                	xchg   ax,ax

c001acbc <SoundPort::unpause()>:
c001acbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acc0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001acc4:	c3                   	ret    
c001acc5:	90                   	nop
c001acc6:	66 90                	xchg   ax,ax

c001acc8 <SoundPort::pause()>:
c001acc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001accc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001acd0:	c3                   	ret    
c001acd1:	90                   	nop
c001acd2:	66 90                	xchg   ax,ax

c001acd4 <SoundPort::getBufferUsed()>:
c001acd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acd8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acdb:	c3                   	ret    

c001acdc <SoundPort::getBufferSize()>:
c001acdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ace0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ace3:	c3                   	ret    

c001ace4 <SoundPort::buffer16(short*, int)>:
c001ace4:	55                   	push   ebp
c001ace5:	57                   	push   edi
c001ace6:	56                   	push   esi
c001ace7:	53                   	push   ebx
c001ace8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001acec:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001acf0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001acf3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001acf6:	74 68                	je     c001ad60 <SoundPort::buffer16(short*, int)+0x7c>
c001acf8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001acfc:	85 c9                	test   ecx,ecx
c001acfe:	7e 60                	jle    c001ad60 <SoundPort::buffer16(short*, int)+0x7c>
c001ad00:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ad04:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ad07:	c1 e1 0f             	shl    ecx,0xf
c001ad0a:	8d 70 01             	lea    esi,[eax+0x1]
c001ad0d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ad10:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ad13:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ad16:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ad19:	74 4d                	je     c001ad68 <SoundPort::buffer16(short*, int)+0x84>
c001ad1b:	31 f6                	xor    esi,esi
c001ad1d:	eb 21                	jmp    c001ad40 <SoundPort::buffer16(short*, int)+0x5c>
c001ad1f:	90                   	nop
c001ad20:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ad25:	8d 79 01             	lea    edi,[ecx+0x1]
c001ad28:	c1 e3 0f             	shl    ebx,0xf
c001ad2b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001ad2e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001ad31:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001ad34:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ad37:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ad3a:	74 1c                	je     c001ad58 <SoundPort::buffer16(short*, int)+0x74>
c001ad3c:	89 c6                	mov    esi,eax
c001ad3e:	66 90                	xchg   ax,ax
c001ad40:	8d 46 01             	lea    eax,[esi+0x1]
c001ad43:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ad47:	75 d7                	jne    c001ad20 <SoundPort::buffer16(short*, int)+0x3c>
c001ad49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad50:	5b                   	pop    ebx
c001ad51:	5e                   	pop    esi
c001ad52:	5f                   	pop    edi
c001ad53:	5d                   	pop    ebp
c001ad54:	c3                   	ret    
c001ad55:	8d 76 00             	lea    esi,[esi+0x0]
c001ad58:	5b                   	pop    ebx
c001ad59:	8d 46 02             	lea    eax,[esi+0x2]
c001ad5c:	5e                   	pop    esi
c001ad5d:	5f                   	pop    edi
c001ad5e:	5d                   	pop    ebp
c001ad5f:	c3                   	ret    
c001ad60:	5b                   	pop    ebx
c001ad61:	31 c0                	xor    eax,eax
c001ad63:	5e                   	pop    esi
c001ad64:	5f                   	pop    edi
c001ad65:	5d                   	pop    ebp
c001ad66:	c3                   	ret    
c001ad67:	90                   	nop
c001ad68:	b8 01 00 00 00       	mov    eax,0x1
c001ad6d:	eb e1                	jmp    c001ad50 <SoundPort::buffer16(short*, int)+0x6c>
c001ad6f:	90                   	nop

c001ad70 <SoundPort::buffer32(int*, int)>:
c001ad70:	55                   	push   ebp
c001ad71:	57                   	push   edi
c001ad72:	56                   	push   esi
c001ad73:	53                   	push   ebx
c001ad74:	83 ec 04             	sub    esp,0x4
c001ad77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad7f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ad82:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ad86:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad89:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ad8c:	74 5a                	je     c001ade8 <SoundPort::buffer32(int*, int)+0x78>
c001ad8e:	85 c0                	test   eax,eax
c001ad90:	7e 56                	jle    c001ade8 <SoundPort::buffer32(int*, int)+0x78>
c001ad92:	8d 71 01             	lea    esi,[ecx+0x1]
c001ad95:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ad98:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ad9b:	8b 37                	mov    esi,DWORD PTR [edi]
c001ad9d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001ada0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ada3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ada6:	74 4c                	je     c001adf4 <SoundPort::buffer32(int*, int)+0x84>
c001ada8:	31 f6                	xor    esi,esi
c001adaa:	eb 1c                	jmp    c001adc8 <SoundPort::buffer32(int*, int)+0x58>
c001adac:	8d 69 01             	lea    ebp,[ecx+0x1]
c001adaf:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001adb2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001adb5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001adb8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001adbc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001adbf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001adc2:	74 18                	je     c001addc <SoundPort::buffer32(int*, int)+0x6c>
c001adc4:	89 de                	mov    esi,ebx
c001adc6:	66 90                	xchg   ax,ax
c001adc8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001adcb:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001adce:	75 dc                	jne    c001adac <SoundPort::buffer32(int*, int)+0x3c>
c001add0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001add3:	90                   	nop
c001add4:	83 c4 04             	add    esp,0x4
c001add7:	5b                   	pop    ebx
c001add8:	5e                   	pop    esi
c001add9:	5f                   	pop    edi
c001adda:	5d                   	pop    ebp
c001addb:	c3                   	ret    
c001addc:	83 c4 04             	add    esp,0x4
c001addf:	8d 46 02             	lea    eax,[esi+0x2]
c001ade2:	5b                   	pop    ebx
c001ade3:	5e                   	pop    esi
c001ade4:	5f                   	pop    edi
c001ade5:	5d                   	pop    ebp
c001ade6:	c3                   	ret    
c001ade7:	90                   	nop
c001ade8:	83 c4 04             	add    esp,0x4
c001adeb:	31 c0                	xor    eax,eax
c001aded:	5b                   	pop    ebx
c001adee:	5e                   	pop    esi
c001adef:	5f                   	pop    edi
c001adf0:	5d                   	pop    ebp
c001adf1:	c3                   	ret    
c001adf2:	66 90                	xchg   ax,ax
c001adf4:	b8 01 00 00 00       	mov    eax,0x1
c001adf9:	eb d9                	jmp    c001add4 <SoundPort::buffer32(int*, int)+0x64>
c001adfb:	90                   	nop

c001adfc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001adfc:	57                   	push   edi
c001adfd:	56                   	push   esi
c001adfe:	53                   	push   ebx
c001adff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae03:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ae07:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001ae0d:	39 03                	cmp    DWORD PTR [ebx],eax
c001ae0f:	74 13                	je     c001ae24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001ae11:	83 ec 0c             	sub    esp,0xc
c001ae14:	68 0c 2e 02 c0       	push   0xc0022e0c
c001ae19:	e8 4d 66 ff ff       	call   c001146b <KePanic(char const*)>
c001ae1e:	83 c4 10             	add    esp,0x10
c001ae21:	8d 76 00             	lea    esi,[esi+0x0]
c001ae24:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001ae2a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ae2d:	74 11                	je     c001ae40 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001ae2f:	83 ec 0c             	sub    esp,0xc
c001ae32:	68 4b 2e 02 c0       	push   0xc0022e4b
c001ae37:	e8 2f 66 ff ff       	call   c001146b <KePanic(char const*)>
c001ae3c:	83 c4 10             	add    esp,0x10
c001ae3f:	90                   	nop
c001ae40:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001ae46:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ae49:	74 11                	je     c001ae5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001ae4b:	83 ec 0c             	sub    esp,0xc
c001ae4e:	68 4b 2e 02 c0       	push   0xc0022e4b
c001ae53:	e8 13 66 ff ff       	call   c001146b <KePanic(char const*)>
c001ae58:	83 c4 10             	add    esp,0x10
c001ae5b:	90                   	nop
c001ae5c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ae5f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001ae63:	7e 07                	jle    c001ae6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001ae65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae69:	8d 76 00             	lea    esi,[esi+0x0]
c001ae6c:	85 f6                	test   esi,esi
c001ae6e:	7e 2c                	jle    c001ae9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001ae70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae74:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ae77:	31 c9                	xor    ecx,ecx
c001ae79:	01 d7                	add    edi,edx
c001ae7b:	90                   	nop
c001ae7c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ae7f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ae82:	85 c0                	test   eax,eax
c001ae84:	79 06                	jns    c001ae8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ae86:	05 ff 7f 00 00       	add    eax,0x7fff
c001ae8b:	90                   	nop
c001ae8c:	c1 f8 0f             	sar    eax,0xf
c001ae8f:	83 c1 04             	add    ecx,0x4
c001ae92:	66 01 02             	add    WORD PTR [edx],ax
c001ae95:	83 c2 02             	add    edx,0x2
c001ae98:	39 d7                	cmp    edi,edx
c001ae9a:	75 e0                	jne    c001ae7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ae9c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ae9f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aea2:	83 ec 04             	sub    esp,0x4
c001aea5:	29 f0                	sub    eax,esi
c001aea7:	c1 e0 02             	shl    eax,0x2
c001aeaa:	50                   	push   eax
c001aeab:	8d 04 b2             	lea    eax,[edx+esi*4]
c001aeae:	50                   	push   eax
c001aeaf:	52                   	push   edx
c001aeb0:	e8 1b 55 fe ff       	call   c00003d0 <memmove>
c001aeb5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aeb8:	83 c4 10             	add    esp,0x10
c001aebb:	29 f0                	sub    eax,esi
c001aebd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aec0:	89 f0                	mov    eax,esi
c001aec2:	5b                   	pop    ebx
c001aec3:	5e                   	pop    esi
c001aec4:	5f                   	pop    edi
c001aec5:	c3                   	ret    
c001aec6:	66 90                	xchg   ax,ax

c001aec8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001aec8:	57                   	push   edi
c001aec9:	56                   	push   esi
c001aeca:	53                   	push   ebx
c001aecb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aecf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aed3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aed7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001aedd:	39 06                	cmp    DWORD PTR [esi],eax
c001aedf:	74 13                	je     c001aef4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001aee1:	83 ec 0c             	sub    esp,0xc
c001aee4:	68 2c 2e 02 c0       	push   0xc0022e2c
c001aee9:	e8 7d 65 ff ff       	call   c001146b <KePanic(char const*)>
c001aeee:	83 c4 10             	add    esp,0x10
c001aef1:	8d 76 00             	lea    esi,[esi+0x0]
c001aef4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001aefa:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001aefd:	74 11                	je     c001af10 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001aeff:	83 ec 0c             	sub    esp,0xc
c001af02:	68 67 2e 02 c0       	push   0xc0022e67
c001af07:	e8 5f 65 ff ff       	call   c001146b <KePanic(char const*)>
c001af0c:	83 c4 10             	add    esp,0x10
c001af0f:	90                   	nop
c001af10:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001af16:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001af19:	74 11                	je     c001af2c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001af1b:	83 ec 0c             	sub    esp,0xc
c001af1e:	68 67 2e 02 c0       	push   0xc0022e67
c001af23:	e8 43 65 ff ff       	call   c001146b <KePanic(char const*)>
c001af28:	83 c4 10             	add    esp,0x10
c001af2b:	90                   	nop
c001af2c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001af2f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001af33:	7e 07                	jle    c001af3c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001af35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001af39:	8d 76 00             	lea    esi,[esi+0x0]
c001af3c:	85 ff                	test   edi,edi
c001af3e:	7e 1c                	jle    c001af5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001af40:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001af47:	31 c0                	xor    eax,eax
c001af49:	8d 76 00             	lea    esi,[esi+0x0]
c001af4c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001af4f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001af52:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001af55:	83 c0 04             	add    eax,0x4
c001af58:	39 c1                	cmp    ecx,eax
c001af5a:	75 f0                	jne    c001af4c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001af5c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001af5f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001af62:	83 ec 04             	sub    esp,0x4
c001af65:	29 f8                	sub    eax,edi
c001af67:	c1 e0 02             	shl    eax,0x2
c001af6a:	50                   	push   eax
c001af6b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001af6e:	50                   	push   eax
c001af6f:	52                   	push   edx
c001af70:	e8 5b 54 fe ff       	call   c00003d0 <memmove>
c001af75:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001af78:	83 c4 10             	add    esp,0x10
c001af7b:	29 f8                	sub    eax,edi
c001af7d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001af80:	89 f8                	mov    eax,edi
c001af82:	5b                   	pop    ebx
c001af83:	5e                   	pop    esi
c001af84:	5f                   	pop    edi
c001af85:	c3                   	ret    

c001af86 <PCI::open(int, int, void*)>:
c001af86:	83 ec 18             	sub    esp,0x18
c001af89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af91:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001af97:	8b 10                	mov    edx,DWORD PTR [eax]
c001af99:	50                   	push   eax
c001af9a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001af9d:	31 c0                	xor    eax,eax
c001af9f:	83 c4 1c             	add    esp,0x1c
c001afa2:	c3                   	ret    
c001afa3:	90                   	nop

c001afa4 <PCI::close(int, int, void*)>:
c001afa4:	31 c0                	xor    eax,eax
c001afa6:	c3                   	ret    
c001afa7:	90                   	nop

c001afa8 <PCI::PCI()>:
c001afa8:	83 ec 0c             	sub    esp,0xc
c001afab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afaf:	83 ec 08             	sub    esp,0x8
c001afb2:	68 83 2e 02 c0       	push   0xc0022e83
c001afb7:	50                   	push   eax
c001afb8:	e8 b7 11 ff ff       	call   c000c174 <Bus::Bus(char const*)>
c001afbd:	83 c4 10             	add    esp,0x10
c001afc0:	ba 2c 2f 02 c0       	mov    edx,0xc0022f2c
c001afc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afc9:	89 10                	mov    DWORD PTR [eax],edx
c001afcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afcf:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001afd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afdd:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001afe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afe6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001afec:	0f b6 d0             	movzx  edx,al
c001afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff3:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001affa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001affe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b004:	0f b6 d0             	movzx  edx,al
c001b007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b00b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b014:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b01a:	8d 50 01             	lea    edx,[eax+0x1]
c001b01d:	88 d1                	mov    cl,dl
c001b01f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b023:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b029:	0f b6 d0             	movzx  edx,al
c001b02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b030:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b034:	83 c9 c0             	or     ecx,0xffffffc0
c001b037:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b03b:	90                   	nop
c001b03c:	83 c4 0c             	add    esp,0xc
c001b03f:	c3                   	ret    

c001b040 <PCI::readBAR8(unsigned int, int)>:
c001b040:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b044:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b048:	f6 c2 01             	test   dl,0x1
c001b04b:	74 07                	je     c001b054 <PCI::readBAR8(unsigned int, int)+0x14>
c001b04d:	83 e2 fc             	and    edx,0xfffffffc
c001b050:	01 c2                	add    edx,eax
c001b052:	ec                   	in     al,dx
c001b053:	c3                   	ret    
c001b054:	83 e2 f0             	and    edx,0xfffffff0
c001b057:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b05a:	c3                   	ret    
c001b05b:	90                   	nop

c001b05c <PCI::readBAR16(unsigned int, int)>:
c001b05c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b060:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b064:	f6 c2 01             	test   dl,0x1
c001b067:	74 08                	je     c001b071 <PCI::readBAR16(unsigned int, int)+0x15>
c001b069:	83 e2 fc             	and    edx,0xfffffffc
c001b06c:	01 c2                	add    edx,eax
c001b06e:	66 ed                	in     ax,dx
c001b070:	c3                   	ret    
c001b071:	83 e2 f0             	and    edx,0xfffffff0
c001b074:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b078:	c3                   	ret    
c001b079:	90                   	nop

c001b07a <PCI::readBAR32(unsigned int, int)>:
c001b07a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b07e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b082:	f6 c2 01             	test   dl,0x1
c001b085:	74 07                	je     c001b08e <PCI::readBAR32(unsigned int, int)+0x14>
c001b087:	83 e2 fc             	and    edx,0xfffffffc
c001b08a:	01 c2                	add    edx,eax
c001b08c:	ed                   	in     eax,dx
c001b08d:	c3                   	ret    
c001b08e:	83 e2 f0             	and    edx,0xfffffff0
c001b091:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b094:	c3                   	ret    
c001b095:	90                   	nop

c001b096 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b096:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b09a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b09e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0a2:	f6 c2 01             	test   dl,0x1
c001b0a5:	74 07                	je     c001b0ae <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b0a7:	83 e2 fc             	and    edx,0xfffffffc
c001b0aa:	01 ca                	add    edx,ecx
c001b0ac:	ee                   	out    dx,al
c001b0ad:	c3                   	ret    
c001b0ae:	83 e2 f0             	and    edx,0xfffffff0
c001b0b1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b0b4:	c3                   	ret    
c001b0b5:	90                   	nop

c001b0b6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b0b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b0ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0c2:	f6 c2 01             	test   dl,0x1
c001b0c5:	74 08                	je     c001b0cf <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b0c7:	83 e2 fc             	and    edx,0xfffffffc
c001b0ca:	01 ca                	add    edx,ecx
c001b0cc:	66 ef                	out    dx,ax
c001b0ce:	c3                   	ret    
c001b0cf:	83 e2 f0             	and    edx,0xfffffff0
c001b0d2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b0d6:	c3                   	ret    
c001b0d7:	90                   	nop

c001b0d8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b0d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b0dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0e4:	f6 c2 01             	test   dl,0x1
c001b0e7:	74 07                	je     c001b0f0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b0e9:	83 e2 fc             	and    edx,0xfffffffc
c001b0ec:	01 ca                	add    edx,ecx
c001b0ee:	ef                   	out    dx,eax
c001b0ef:	c3                   	ret    
c001b0f0:	83 e2 f0             	and    edx,0xfffffff0
c001b0f3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b0f6:	c3                   	ret    
c001b0f7:	90                   	nop

c001b0f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b0f8:	55                   	push   ebp
c001b0f9:	57                   	push   edi
c001b0fa:	56                   	push   esi
c001b0fb:	53                   	push   ebx
c001b0fc:	83 ec 0c             	sub    esp,0xc
c001b0ff:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b104:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b108:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b10c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b110:	83 fe 07             	cmp    esi,0x7
c001b113:	76 10                	jbe    c001b125 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b115:	83 ec 0c             	sub    esp,0xc
c001b118:	68 8b 2e 02 c0       	push   0xc0022e8b
c001b11d:	e8 49 63 ff ff       	call   c001146b <KePanic(char const*)>
c001b122:	83 c4 10             	add    esp,0x10
c001b125:	0f b6 db             	movzx  ebx,bl
c001b128:	83 fb 0f             	cmp    ebx,0xf
c001b12b:	76 10                	jbe    c001b13d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b12d:	83 ec 0c             	sub    esp,0xc
c001b130:	68 bb 2e 02 c0       	push   0xc0022ebb
c001b135:	e8 31 63 ff ff       	call   c001146b <KePanic(char const*)>
c001b13a:	83 c4 10             	add    esp,0x10
c001b13d:	8d 04 36             	lea    eax,[esi+esi*1]
c001b140:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b145:	83 c8 f0             	or     eax,0xfffffff0
c001b148:	ee                   	out    dx,al
c001b149:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b14e:	89 e8                	mov    eax,ebp
c001b150:	ee                   	out    dx,al
c001b151:	83 c4 0c             	add    esp,0xc
c001b154:	89 d8                	mov    eax,ebx
c001b156:	89 f9                	mov    ecx,edi
c001b158:	c1 e0 08             	shl    eax,0x8
c001b15b:	0f b6 d9             	movzx  ebx,cl
c001b15e:	83 e3 fc             	and    ebx,0xfffffffc
c001b161:	09 d8                	or     eax,ebx
c001b163:	5b                   	pop    ebx
c001b164:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b169:	5e                   	pop    esi
c001b16a:	5f                   	pop    edi
c001b16b:	5d                   	pop    ebp
c001b16c:	c3                   	ret    
c001b16d:	90                   	nop

c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b16e:	57                   	push   edi
c001b16f:	56                   	push   esi
c001b170:	53                   	push   ebx
c001b171:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b175:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b179:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b17f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b183:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b187:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b18b:	83 ff 01             	cmp    edi,0x1
c001b18e:	75 3f                	jne    c001b1cf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b190:	89 de                	mov    esi,ebx
c001b192:	0f b6 c0             	movzx  eax,al
c001b195:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b19b:	c1 e0 10             	shl    eax,0x10
c001b19e:	0f b6 c9             	movzx  ecx,cl
c001b1a1:	09 f0                	or     eax,esi
c001b1a3:	c1 e1 08             	shl    ecx,0x8
c001b1a6:	0f b6 d2             	movzx  edx,dl
c001b1a9:	09 c8                	or     eax,ecx
c001b1ab:	c1 e2 0b             	shl    edx,0xb
c001b1ae:	09 d0                	or     eax,edx
c001b1b0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1b5:	0d 00 00 00 80       	or     eax,0x80000000
c001b1ba:	ef                   	out    dx,eax
c001b1bb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1c0:	ed                   	in     eax,dx
c001b1c1:	83 e3 02             	and    ebx,0x2
c001b1c4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b1cb:	d3 e8                	shr    eax,cl
c001b1cd:	eb 44                	jmp    c001b213 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b1cf:	83 ff 02             	cmp    edi,0x2
c001b1d2:	75 2d                	jne    c001b201 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b1d4:	83 ec 0c             	sub    esp,0xc
c001b1d7:	0f b6 c9             	movzx  ecx,cl
c001b1da:	0f b6 d2             	movzx  edx,dl
c001b1dd:	0f b6 fb             	movzx  edi,bl
c001b1e0:	0f b6 c0             	movzx  eax,al
c001b1e3:	57                   	push   edi
c001b1e4:	51                   	push   ecx
c001b1e5:	52                   	push   edx
c001b1e6:	50                   	push   eax
c001b1e7:	56                   	push   esi
c001b1e8:	e8 0b ff ff ff       	call   c001b0f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1ed:	89 c2                	mov    edx,eax
c001b1ef:	ed                   	in     eax,dx
c001b1f0:	83 e3 02             	and    ebx,0x2
c001b1f3:	83 c4 20             	add    esp,0x20
c001b1f6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b1fd:	d3 e8                	shr    eax,cl
c001b1ff:	eb 12                	jmp    c001b213 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b201:	83 ec 0c             	sub    esp,0xc
c001b204:	68 eb 2e 02 c0       	push   0xc0022eeb
c001b209:	e8 5d 62 ff ff       	call   c001146b <KePanic(char const*)>
c001b20e:	83 c4 10             	add    esp,0x10
c001b211:	31 c0                	xor    eax,eax
c001b213:	5b                   	pop    ebx
c001b214:	5e                   	pop    esi
c001b215:	5f                   	pop    edi
c001b216:	c3                   	ret    
c001b217:	90                   	nop

c001b218 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b218:	83 ec 18             	sub    esp,0x18
c001b21b:	6a 00                	push   0x0
c001b21d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b222:	50                   	push   eax
c001b223:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b228:	50                   	push   eax
c001b229:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b22e:	50                   	push   eax
c001b22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b233:	e8 36 ff ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b238:	83 c4 2c             	add    esp,0x2c
c001b23b:	c3                   	ret    

c001b23c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b23c:	83 ec 18             	sub    esp,0x18
c001b23f:	6a 0e                	push   0xe
c001b241:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b246:	50                   	push   eax
c001b247:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b24c:	50                   	push   eax
c001b24d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b252:	50                   	push   eax
c001b253:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b257:	e8 12 ff ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b25c:	83 c4 2c             	add    esp,0x2c
c001b25f:	0f b6 c0             	movzx  eax,al
c001b262:	c3                   	ret    
c001b263:	90                   	nop

c001b264 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b264:	55                   	push   ebp
c001b265:	57                   	push   edi
c001b266:	56                   	push   esi
c001b267:	53                   	push   ebx
c001b268:	83 ec 18             	sub    esp,0x18
c001b26b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b270:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b275:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b27a:	6a 0a                	push   0xa
c001b27c:	56                   	push   esi
c001b27d:	55                   	push   ebp
c001b27e:	57                   	push   edi
c001b27f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b283:	e8 e6 fe ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b288:	83 c4 14             	add    esp,0x14
c001b28b:	89 c3                	mov    ebx,eax
c001b28d:	6a 0a                	push   0xa
c001b28f:	0f b6 db             	movzx  ebx,bl
c001b292:	56                   	push   esi
c001b293:	55                   	push   ebp
c001b294:	57                   	push   edi
c001b295:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b299:	e8 d0 fe ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b29e:	83 c4 2c             	add    esp,0x2c
c001b2a1:	25 00 ff 00 00       	and    eax,0xff00
c001b2a6:	09 d8                	or     eax,ebx
c001b2a8:	5b                   	pop    ebx
c001b2a9:	5e                   	pop    esi
c001b2aa:	5f                   	pop    edi
c001b2ab:	5d                   	pop    ebp
c001b2ac:	c3                   	ret    
c001b2ad:	90                   	nop

c001b2ae <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b2ae:	83 ec 18             	sub    esp,0x18
c001b2b1:	6a 08                	push   0x8
c001b2b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b2b8:	50                   	push   eax
c001b2b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b2be:	50                   	push   eax
c001b2bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b2c4:	50                   	push   eax
c001b2c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2c9:	e8 a0 fe ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b2ce:	83 c4 2c             	add    esp,0x2c
c001b2d1:	0f b6 c4             	movzx  eax,ah
c001b2d4:	c3                   	ret    
c001b2d5:	90                   	nop

c001b2d6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b2d6:	83 ec 18             	sub    esp,0x18
c001b2d9:	6a 08                	push   0x8
c001b2db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b2e0:	50                   	push   eax
c001b2e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b2e6:	50                   	push   eax
c001b2e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b2ec:	50                   	push   eax
c001b2ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2f1:	e8 78 fe ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b2f6:	83 c4 2c             	add    esp,0x2c
c001b2f9:	c3                   	ret    

c001b2fa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b2fa:	83 ec 18             	sub    esp,0x18
c001b2fd:	6a 3c                	push   0x3c
c001b2ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b304:	50                   	push   eax
c001b305:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b30a:	50                   	push   eax
c001b30b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b310:	50                   	push   eax
c001b311:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b315:	e8 54 fe ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b31a:	83 c4 2c             	add    esp,0x2c
c001b31d:	c3                   	ret    

c001b31e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b31e:	83 ec 18             	sub    esp,0x18
c001b321:	6a 18                	push   0x18
c001b323:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b328:	50                   	push   eax
c001b329:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b32e:	50                   	push   eax
c001b32f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b334:	50                   	push   eax
c001b335:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b339:	e8 30 fe ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b33e:	83 c4 2c             	add    esp,0x2c
c001b341:	0f b6 c4             	movzx  eax,ah
c001b344:	c3                   	ret    
c001b345:	90                   	nop

c001b346 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b346:	55                   	push   ebp
c001b347:	57                   	push   edi
c001b348:	56                   	push   esi
c001b349:	53                   	push   ebx
c001b34a:	83 ec 28             	sub    esp,0x28
c001b34d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b351:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b356:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b35b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b360:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b367:	8d 43 12             	lea    eax,[ebx+0x12]
c001b36a:	83 c3 10             	add    ebx,0x10
c001b36d:	0f b6 c0             	movzx  eax,al
c001b370:	0f b6 db             	movzx  ebx,bl
c001b373:	50                   	push   eax
c001b374:	51                   	push   ecx
c001b375:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b379:	57                   	push   edi
c001b37a:	55                   	push   ebp
c001b37b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b37f:	e8 ea fd ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b384:	83 c4 14             	add    esp,0x14
c001b387:	89 c6                	mov    esi,eax
c001b389:	53                   	push   ebx
c001b38a:	c1 e6 10             	shl    esi,0x10
c001b38d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b391:	51                   	push   ecx
c001b392:	57                   	push   edi
c001b393:	55                   	push   ebp
c001b394:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b398:	e8 d1 fd ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b39d:	83 c4 3c             	add    esp,0x3c
c001b3a0:	0f b7 c0             	movzx  eax,ax
c001b3a3:	5b                   	pop    ebx
c001b3a4:	09 f0                	or     eax,esi
c001b3a6:	5e                   	pop    esi
c001b3a7:	5f                   	pop    edi
c001b3a8:	5d                   	pop    ebp
c001b3a9:	c3                   	ret    

c001b3aa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b3aa:	55                   	push   ebp
c001b3ab:	57                   	push   edi
c001b3ac:	56                   	push   esi
c001b3ad:	53                   	push   ebx
c001b3ae:	83 ec 0c             	sub    esp,0xc
c001b3b1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b3b5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b3b9:	89 f5                	mov    ebp,esi
c001b3bb:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b3c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b3c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b3c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b3cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b3d1:	83 f9 01             	cmp    ecx,0x1
c001b3d4:	75 5d                	jne    c001b433 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b3d6:	0f b6 c8             	movzx  ecx,al
c001b3d9:	0f b6 d2             	movzx  edx,dl
c001b3dc:	c1 e1 10             	shl    ecx,0x10
c001b3df:	c1 e2 0b             	shl    edx,0xb
c001b3e2:	89 f0                	mov    eax,esi
c001b3e4:	25 fc 00 00 00       	and    eax,0xfc
c001b3e9:	09 c1                	or     ecx,eax
c001b3eb:	89 e8                	mov    eax,ebp
c001b3ed:	0f b6 c0             	movzx  eax,al
c001b3f0:	c1 e0 08             	shl    eax,0x8
c001b3f3:	09 c1                	or     ecx,eax
c001b3f5:	09 d1                	or     ecx,edx
c001b3f7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3fc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b402:	89 c8                	mov    eax,ecx
c001b404:	ef                   	out    dx,eax
c001b405:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b40a:	ed                   	in     eax,dx
c001b40b:	0f b7 db             	movzx  ebx,bx
c001b40e:	83 e6 02             	and    esi,0x2
c001b411:	74 0a                	je     c001b41d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b413:	0f b7 d0             	movzx  edx,ax
c001b416:	c1 e3 10             	shl    ebx,0x10
c001b419:	09 d3                	or     ebx,edx
c001b41b:	eb 05                	jmp    c001b422 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b41d:	66 31 c0             	xor    ax,ax
c001b420:	09 c3                	or     ebx,eax
c001b422:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b427:	89 c8                	mov    eax,ecx
c001b429:	ef                   	out    dx,eax
c001b42a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b42f:	89 d8                	mov    eax,ebx
c001b431:	eb 41                	jmp    c001b474 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b433:	83 f9 02             	cmp    ecx,0x2
c001b436:	75 45                	jne    c001b47d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b438:	83 ec 0c             	sub    esp,0xc
c001b43b:	0f b6 d2             	movzx  edx,dl
c001b43e:	89 f1                	mov    ecx,esi
c001b440:	0f b6 c0             	movzx  eax,al
c001b443:	0f b6 f1             	movzx  esi,cl
c001b446:	89 e9                	mov    ecx,ebp
c001b448:	56                   	push   esi
c001b449:	0f b6 c9             	movzx  ecx,cl
c001b44c:	51                   	push   ecx
c001b44d:	52                   	push   edx
c001b44e:	50                   	push   eax
c001b44f:	57                   	push   edi
c001b450:	e8 a3 fc ff ff       	call   c001b0f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b455:	89 c2                	mov    edx,eax
c001b457:	ed                   	in     eax,dx
c001b458:	83 c4 20             	add    esp,0x20
c001b45b:	0f b7 db             	movzx  ebx,bx
c001b45e:	f6 c2 02             	test   dl,0x2
c001b461:	74 0c                	je     c001b46f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b463:	0f b7 c8             	movzx  ecx,ax
c001b466:	89 d8                	mov    eax,ebx
c001b468:	c1 e0 10             	shl    eax,0x10
c001b46b:	09 c8                	or     eax,ecx
c001b46d:	eb 05                	jmp    c001b474 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b46f:	66 31 c0             	xor    ax,ax
c001b472:	09 d8                	or     eax,ebx
c001b474:	ef                   	out    dx,eax
c001b475:	83 c4 0c             	add    esp,0xc
c001b478:	5b                   	pop    ebx
c001b479:	5e                   	pop    esi
c001b47a:	5f                   	pop    edi
c001b47b:	5d                   	pop    ebp
c001b47c:	c3                   	ret    
c001b47d:	c7 44 24 20 eb 2e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022eeb
c001b485:	83 c4 0c             	add    esp,0xc
c001b488:	5b                   	pop    ebx
c001b489:	5e                   	pop    esi
c001b48a:	5f                   	pop    edi
c001b48b:	5d                   	pop    ebp
c001b48c:	e9 da 5f ff ff       	jmp    c001146b <KePanic(char const*)>
c001b491:	90                   	nop

c001b492 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b492:	55                   	push   ebp
c001b493:	57                   	push   edi
c001b494:	56                   	push   esi
c001b495:	53                   	push   ebx
c001b496:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b49c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b4a3:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b4aa:	0f 85 bd 00 00 00    	jne    c001b56d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b4b0:	83 ec 0c             	sub    esp,0xc
c001b4b3:	68 14 01 00 00       	push   0x114
c001b4b8:	e8 f9 c5 fe ff       	call   c0007ab6 <malloc>
c001b4bd:	83 c4 0c             	add    esp,0xc
c001b4c0:	89 c3                	mov    ebx,eax
c001b4c2:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b4c8:	68 f1 2e 02 c0       	push   0xc0022ef1
c001b4cd:	50                   	push   eax
c001b4ce:	e8 c7 04 ff ff       	call   c000b99a <File::File(char const*, Process*)>
c001b4d3:	83 c4 10             	add    esp,0x10
c001b4d6:	85 db                	test   ebx,ebx
c001b4d8:	0f 84 67 02 00 00    	je     c001b745 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b4de:	56                   	push   esi
c001b4df:	56                   	push   esi
c001b4e0:	6a 01                	push   0x1
c001b4e2:	53                   	push   ebx
c001b4e3:	e8 d0 04 ff ff       	call   c000b9b8 <File::open(FileOpenMode)>
c001b4e8:	83 c4 10             	add    esp,0x10
c001b4eb:	85 c0                	test   eax,eax
c001b4ed:	0f 85 52 02 00 00    	jne    c001b745 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b4f3:	52                   	push   edx
c001b4f4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b4f8:	50                   	push   eax
c001b4f9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b4fd:	50                   	push   eax
c001b4fe:	53                   	push   ebx
c001b4ff:	e8 b6 07 ff ff       	call   c000bcba <File::stat(unsigned long long*, bool*)>
c001b504:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b508:	40                   	inc    eax
c001b509:	89 04 24             	mov    DWORD PTR [esp],eax
c001b50c:	e8 a5 c5 fe ff       	call   c0007ab6 <malloc>
c001b511:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b515:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b51a:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b51e:	59                   	pop    ecx
c001b51f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b521:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b525:	51                   	push   ecx
c001b526:	50                   	push   eax
c001b527:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b52b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b52f:	53                   	push   ebx
c001b530:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b533:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b537:	83 c4 20             	add    esp,0x20
c001b53a:	89 c8                	mov    eax,ecx
c001b53c:	99                   	cdq    
c001b53d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b541:	0f 85 fe 01 00 00    	jne    c001b745 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b547:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b54b:	0f 85 f4 01 00 00    	jne    c001b745 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b551:	83 ec 0c             	sub    esp,0xc
c001b554:	53                   	push   ebx
c001b555:	e8 bc 04 ff ff       	call   c000ba16 <File::close()>
c001b55a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b55e:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b565:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b56a:	83 c4 10             	add    esp,0x10
c001b56d:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b572:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b578:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b57c:	31 f6                	xor    esi,esi
c001b57e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b586:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b58d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b592:	31 c9                	xor    ecx,ecx
c001b594:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b59c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b5a1:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b5a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b5ad:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b5b5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b5b9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b5bd:	0f 8e 82 01 00 00    	jle    c001b745 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b5c3:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b5c6:	d4 40                	aam    0x40
c001b5c8:	d5 39                	aad    0x39
c001b5ca:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b5ce:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b5d2:	d4 40                	aam    0x40
c001b5d4:	d5 39                	aad    0x39
c001b5d6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b5da:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b5de:	d4 40                	aam    0x40
c001b5e0:	d5 39                	aad    0x39
c001b5e2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b5e6:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b5ea:	d4 40                	aam    0x40
c001b5ec:	d5 39                	aad    0x39
c001b5ee:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b5f2:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b5f6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b5fa:	3c 56                	cmp    al,0x56
c001b5fc:	74 43                	je     c001b641 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b5fe:	d4 40                	aam    0x40
c001b600:	d5 39                	aad    0x39
c001b602:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b605:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b609:	0f b6 c9             	movzx  ecx,cl
c001b60c:	c1 e1 04             	shl    ecx,0x4
c001b60f:	d4 40                	aam    0x40
c001b611:	d5 39                	aad    0x39
c001b613:	83 e8 30             	sub    eax,0x30
c001b616:	0f b6 c0             	movzx  eax,al
c001b619:	09 c1                	or     ecx,eax
c001b61b:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b61f:	c1 e1 04             	shl    ecx,0x4
c001b622:	d4 40                	aam    0x40
c001b624:	d5 39                	aad    0x39
c001b626:	83 e8 30             	sub    eax,0x30
c001b629:	0f b6 c0             	movzx  eax,al
c001b62c:	09 c1                	or     ecx,eax
c001b62e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b632:	c1 e1 04             	shl    ecx,0x4
c001b635:	d4 40                	aam    0x40
c001b637:	d5 39                	aad    0x39
c001b639:	83 e8 30             	sub    eax,0x30
c001b63c:	0f b6 c0             	movzx  eax,al
c001b63f:	09 c1                	or     ecx,eax
c001b641:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b645:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b649:	3c 58                	cmp    al,0x58
c001b64b:	74 47                	je     c001b694 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b64d:	d4 40                	aam    0x40
c001b64f:	d5 39                	aad    0x39
c001b651:	8d 50 d0             	lea    edx,[eax-0x30]
c001b654:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b658:	0f b6 d2             	movzx  edx,dl
c001b65b:	c1 e2 04             	shl    edx,0x4
c001b65e:	d4 40                	aam    0x40
c001b660:	d5 39                	aad    0x39
c001b662:	83 e8 30             	sub    eax,0x30
c001b665:	0f b6 c0             	movzx  eax,al
c001b668:	09 c2                	or     edx,eax
c001b66a:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b66e:	c1 e2 04             	shl    edx,0x4
c001b671:	d4 40                	aam    0x40
c001b673:	d5 39                	aad    0x39
c001b675:	83 e8 30             	sub    eax,0x30
c001b678:	0f b6 c0             	movzx  eax,al
c001b67b:	09 c2                	or     edx,eax
c001b67d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b681:	c1 e2 04             	shl    edx,0x4
c001b684:	d4 40                	aam    0x40
c001b686:	d5 39                	aad    0x39
c001b688:	83 e8 30             	sub    eax,0x30
c001b68b:	0f b6 c0             	movzx  eax,al
c001b68e:	09 c2                	or     edx,eax
c001b690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b694:	83 c6 10             	add    esi,0x10
c001b697:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b69b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b69f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b6a3:	83 fa 0a             	cmp    edx,0xa
c001b6a6:	74 0b                	je     c001b6b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b6a8:	47                   	inc    edi
c001b6a9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b6ad:	75 19                	jne    c001b6c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b6af:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b6b3:	31 c0                	xor    eax,eax
c001b6b5:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b6ba:	0f 94 c0             	sete   al
c001b6bd:	01 c6                	add    esi,eax
c001b6bf:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b6c4:	75 0b                	jne    c001b6d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b6c6:	eb 14                	jmp    c001b6dc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b6c8:	46                   	inc    esi
c001b6c9:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b6cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b6cf:	eb ca                	jmp    c001b69b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b6d1:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b6d6:	0f 85 dd fe ff ff    	jne    c001b5b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b6dc:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b6e1:	74 10                	je     c001b6f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b6e3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b6e8:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b6ed:	0f 85 c6 fe ff ff    	jne    c001b5b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b6f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6f7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b6fb:	83 e8 30             	sub    eax,0x30
c001b6fe:	83 ef 30             	sub    edi,0x30
c001b701:	c1 e0 04             	shl    eax,0x4
c001b704:	09 f8                	or     eax,edi
c001b706:	0f b6 c0             	movzx  eax,al
c001b709:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b70d:	0f 85 a6 fe ff ff    	jne    c001b5b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b717:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b71b:	83 e8 30             	sub    eax,0x30
c001b71e:	83 ef 30             	sub    edi,0x30
c001b721:	c1 e0 04             	shl    eax,0x4
c001b724:	09 f8                	or     eax,edi
c001b726:	0f b6 c0             	movzx  eax,al
c001b729:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b72d:	0f 85 86 fe ff ff    	jne    c001b5b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b733:	50                   	push   eax
c001b734:	50                   	push   eax
c001b735:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b739:	50                   	push   eax
c001b73a:	55                   	push   ebp
c001b73b:	e8 00 4f fe ff       	call   c0000640 <strcpy>
c001b740:	83 c4 10             	add    esp,0x10
c001b743:	eb 06                	jmp    c001b74b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b745:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b749:	31 ed                	xor    ebp,ebp
c001b74b:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b751:	89 e8                	mov    eax,ebp
c001b753:	5b                   	pop    ebx
c001b754:	5e                   	pop    esi
c001b755:	5f                   	pop    edi
c001b756:	5d                   	pop    ebp
c001b757:	c3                   	ret    

c001b758 <PCI::checkBus(unsigned char)>:
c001b758:	56                   	push   esi
c001b759:	53                   	push   ebx
c001b75a:	31 db                	xor    ebx,ebx
c001b75c:	51                   	push   ecx
c001b75d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b762:	52                   	push   edx
c001b763:	53                   	push   ebx
c001b764:	43                   	inc    ebx
c001b765:	56                   	push   esi
c001b766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b76a:	e8 03 03 00 00       	call   c001ba72 <PCI::checkDevice(unsigned char, unsigned char)>
c001b76f:	83 c4 10             	add    esp,0x10
c001b772:	83 fb 20             	cmp    ebx,0x20
c001b775:	75 eb                	jne    c001b762 <PCI::checkBus(unsigned char)+0xa>
c001b777:	58                   	pop    eax
c001b778:	5b                   	pop    ebx
c001b779:	5e                   	pop    esi
c001b77a:	c3                   	ret    
c001b77b:	90                   	nop

c001b77c <PCI::foundDevice(PCIDeviceInfo)>:
c001b77c:	55                   	push   ebp
c001b77d:	57                   	push   edi
c001b77e:	56                   	push   esi
c001b77f:	53                   	push   ebx
c001b780:	83 ec 1c             	sub    esp,0x1c
c001b783:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b788:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b78c:	3d ff ff 00 00       	cmp    eax,0xffff
c001b791:	0f 84 57 01 00 00    	je     c001b8ee <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b797:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b79c:	66 3d 06 04          	cmp    ax,0x406
c001b7a0:	75 2c                	jne    c001b7ce <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b7a2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b7a7:	50                   	push   eax
c001b7a8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b7ad:	50                   	push   eax
c001b7ae:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b7b3:	50                   	push   eax
c001b7b4:	53                   	push   ebx
c001b7b5:	e8 64 fb ff ff       	call   c001b31e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b7ba:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b7be:	0f b6 c0             	movzx  eax,al
c001b7c1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b7c5:	83 c4 2c             	add    esp,0x2c
c001b7c8:	5b                   	pop    ebx
c001b7c9:	5e                   	pop    esi
c001b7ca:	5f                   	pop    edi
c001b7cb:	5d                   	pop    ebp
c001b7cc:	eb 8a                	jmp    c001b758 <PCI::checkBus(unsigned char)>
c001b7ce:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b7d2:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b7d8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b7dc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b7e0:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b7e5:	85 d2                	test   edx,edx
c001b7e7:	74 36                	je     c001b81f <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b7e9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b7ec:	85 c9                	test   ecx,ecx
c001b7ee:	74 2b                	je     c001b81b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b7f0:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b7f6:	31 ee                	xor    esi,ebp
c001b7f8:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b7fe:	75 1b                	jne    c001b81b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b800:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b804:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b80a:	75 0f                	jne    c001b81b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b80c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b813:	39 f9                	cmp    ecx,edi
c001b815:	0f 84 d3 00 00 00    	je     c001b8ee <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b81b:	8b 12                	mov    edx,DWORD PTR [edx]
c001b81d:	eb c6                	jmp    c001b7e5 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b81f:	3d 01 06 00 00       	cmp    eax,0x601
c001b824:	75 19                	jne    c001b83f <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b826:	83 ec 0c             	sub    esp,0xc
c001b829:	68 64 01 00 00       	push   0x164
c001b82e:	e8 83 c2 fe ff       	call   c0007ab6 <malloc>
c001b833:	89 c5                	mov    ebp,eax
c001b835:	89 04 24             	mov    DWORD PTR [esp],eax
c001b838:	e8 a1 0e 00 00       	call   c001c6de <SATABus::SATABus()>
c001b83d:	eb 1e                	jmp    c001b85d <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b83f:	3d 01 01 00 00       	cmp    eax,0x101
c001b844:	75 62                	jne    c001b8a8 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b846:	83 ec 0c             	sub    esp,0xc
c001b849:	68 70 02 00 00       	push   0x270
c001b84e:	e8 63 c2 fe ff       	call   c0007ab6 <malloc>
c001b853:	89 c5                	mov    ebp,eax
c001b855:	89 04 24             	mov    DWORD PTR [esp],eax
c001b858:	e8 e5 02 00 00       	call   c001bb42 <IDE::IDE()>
c001b85d:	5f                   	pop    edi
c001b85e:	58                   	pop    eax
c001b85f:	55                   	push   ebp
c001b860:	53                   	push   ebx
c001b861:	e8 ac 0f ff ff       	call   c000c812 <Device::addChild(Device*)>
c001b866:	83 ec 1c             	sub    esp,0x1c
c001b869:	b9 09 00 00 00       	mov    ecx,0x9
c001b86e:	fc                   	cld    
c001b86f:	89 e7                	mov    edi,esp
c001b871:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b875:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b877:	55                   	push   ebp
c001b878:	e8 db 0e ff ff       	call   c000c758 <Device::preOpenPCI(PCIDeviceInfo)>
c001b87d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b880:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b884:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b88c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b894:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b89c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b89f:	83 c4 4c             	add    esp,0x4c
c001b8a2:	5b                   	pop    ebx
c001b8a3:	5e                   	pop    esi
c001b8a4:	5f                   	pop    edi
c001b8a5:	5d                   	pop    ebp
c001b8a6:	ff e0                	jmp    eax
c001b8a8:	83 ec 0c             	sub    esp,0xc
c001b8ab:	68 58 01 00 00       	push   0x158
c001b8b0:	e8 01 c2 fe ff       	call   c0007ab6 <malloc>
c001b8b5:	89 c5                	mov    ebp,eax
c001b8b7:	58                   	pop    eax
c001b8b8:	5a                   	pop    edx
c001b8b9:	68 0a 2f 02 c0       	push   0xc0022f0a
c001b8be:	55                   	push   ebp
c001b8bf:	e8 ec 11 ff ff       	call   c000cab0 <DriverlessDevice::DriverlessDevice(char const*)>
c001b8c4:	59                   	pop    ecx
c001b8c5:	5e                   	pop    esi
c001b8c6:	55                   	push   ebp
c001b8c7:	53                   	push   ebx
c001b8c8:	e8 45 0f ff ff       	call   c000c812 <Device::addChild(Device*)>
c001b8cd:	83 c4 10             	add    esp,0x10
c001b8d0:	b9 09 00 00 00       	mov    ecx,0x9
c001b8d5:	fc                   	cld    
c001b8d6:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b8da:	89 fe                	mov    esi,edi
c001b8dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b8de:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b8e2:	83 c4 1c             	add    esp,0x1c
c001b8e5:	5b                   	pop    ebx
c001b8e6:	5e                   	pop    esi
c001b8e7:	5f                   	pop    edi
c001b8e8:	5d                   	pop    ebp
c001b8e9:	e9 6a 0e ff ff       	jmp    c000c758 <Device::preOpenPCI(PCIDeviceInfo)>
c001b8ee:	83 c4 1c             	add    esp,0x1c
c001b8f1:	5b                   	pop    ebx
c001b8f2:	5e                   	pop    esi
c001b8f3:	5f                   	pop    edi
c001b8f4:	5d                   	pop    ebp
c001b8f5:	c3                   	ret    

c001b8f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b8f6:	55                   	push   ebp
c001b8f7:	57                   	push   edi
c001b8f8:	56                   	push   esi
c001b8f9:	53                   	push   ebx
c001b8fa:	83 ec 68             	sub    esp,0x68
c001b8fd:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b901:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b908:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b90c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b913:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b918:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b91c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b923:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b928:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b92c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b931:	6a 0c                	push   0xc
c001b933:	57                   	push   edi
c001b934:	53                   	push   ebx
c001b935:	56                   	push   esi
c001b936:	55                   	push   ebp
c001b937:	e8 32 f8 ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b93c:	83 c4 20             	add    esp,0x20
c001b93f:	57                   	push   edi
c001b940:	53                   	push   ebx
c001b941:	56                   	push   esi
c001b942:	55                   	push   ebp
c001b943:	e8 1c f9 ff ff       	call   c001b264 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b948:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b94d:	57                   	push   edi
c001b94e:	53                   	push   ebx
c001b94f:	56                   	push   esi
c001b950:	55                   	push   ebp
c001b951:	e8 a4 f9 ff ff       	call   c001b2fa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b956:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b95a:	83 c4 14             	add    esp,0x14
c001b95d:	6a 3c                	push   0x3c
c001b95f:	57                   	push   edi
c001b960:	53                   	push   ebx
c001b961:	56                   	push   esi
c001b962:	55                   	push   ebp
c001b963:	e8 06 f8 ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b968:	0f b6 c4             	movzx  eax,ah
c001b96b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b96f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b973:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b977:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001b97c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b982:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b988:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b98c:	83 c4 20             	add    esp,0x20
c001b98f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b994:	74 30                	je     c001b9c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b996:	31 c0                	xor    eax,eax
c001b998:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b99c:	7e 28                	jle    c001b9c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b99e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b9a6:	39 cb                	cmp    ebx,ecx
c001b9a8:	75 19                	jne    c001b9c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b9aa:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b9b2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b9b6:	75 0b                	jne    c001b9c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b9b8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b9bf:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b9c3:	40                   	inc    eax
c001b9c4:	eb d2                	jmp    c001b998 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b9c6:	31 d2                	xor    edx,edx
c001b9c8:	83 ec 0c             	sub    esp,0xc
c001b9cb:	57                   	push   edi
c001b9cc:	53                   	push   ebx
c001b9cd:	56                   	push   esi
c001b9ce:	52                   	push   edx
c001b9cf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b9d3:	55                   	push   ebp
c001b9d4:	e8 6d f9 ff ff       	call   c001b346 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b9d9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b9dd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b9e1:	42                   	inc    edx
c001b9e2:	83 c4 20             	add    esp,0x20
c001b9e5:	83 fa 06             	cmp    edx,0x6
c001b9e8:	75 de                	jne    c001b9c8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b9ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b9ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9f2:	c1 e2 08             	shl    edx,0x8
c001b9f5:	83 ec 0c             	sub    esp,0xc
c001b9f8:	0f b6 c4             	movzx  eax,ah
c001b9fb:	09 d0                	or     eax,edx
c001b9fd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ba02:	6a 02                	push   0x2
c001ba04:	57                   	push   edi
c001ba05:	53                   	push   ebx
c001ba06:	56                   	push   esi
c001ba07:	55                   	push   ebp
c001ba08:	e8 61 f7 ff ff       	call   c001b16e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba0d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ba12:	83 c4 20             	add    esp,0x20
c001ba15:	57                   	push   edi
c001ba16:	53                   	push   ebx
c001ba17:	56                   	push   esi
c001ba18:	55                   	push   ebp
c001ba19:	e8 90 f8 ff ff       	call   c001b2ae <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ba1e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ba22:	57                   	push   edi
c001ba23:	53                   	push   ebx
c001ba24:	56                   	push   esi
c001ba25:	55                   	push   ebp
c001ba26:	e8 ed f7 ff ff       	call   c001b218 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ba2b:	b9 09 00 00 00       	mov    ecx,0x9
c001ba30:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ba35:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ba39:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ba3d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ba41:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ba45:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ba49:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ba4d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ba51:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ba55:	83 ec 0c             	sub    esp,0xc
c001ba58:	fc                   	cld    
c001ba59:	89 e7                	mov    edi,esp
c001ba5b:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ba5f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba61:	55                   	push   ebp
c001ba62:	e8 15 fd ff ff       	call   c001b77c <PCI::foundDevice(PCIDeviceInfo)>
c001ba67:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ba6d:	5b                   	pop    ebx
c001ba6e:	5e                   	pop    esi
c001ba6f:	5f                   	pop    edi
c001ba70:	5d                   	pop    ebp
c001ba71:	c3                   	ret    

c001ba72 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ba72:	55                   	push   ebp
c001ba73:	57                   	push   edi
c001ba74:	56                   	push   esi
c001ba75:	53                   	push   ebx
c001ba76:	83 ec 0c             	sub    esp,0xc
c001ba79:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ba7d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ba82:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ba87:	6a 00                	push   0x0
c001ba89:	56                   	push   esi
c001ba8a:	57                   	push   edi
c001ba8b:	55                   	push   ebp
c001ba8c:	e8 87 f7 ff ff       	call   c001b218 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ba91:	6a 00                	push   0x0
c001ba93:	56                   	push   esi
c001ba94:	57                   	push   edi
c001ba95:	55                   	push   ebp
c001ba96:	e8 5b fe ff ff       	call   c001b8f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ba9b:	83 c4 20             	add    esp,0x20
c001ba9e:	6a 00                	push   0x0
c001baa0:	56                   	push   esi
c001baa1:	57                   	push   edi
c001baa2:	55                   	push   ebp
c001baa3:	e8 94 f7 ff ff       	call   c001b23c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001baa8:	83 c4 10             	add    esp,0x10
c001baab:	a8 80                	test   al,0x80
c001baad:	74 2d                	je     c001badc <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001baaf:	bb 01 00 00 00       	mov    ebx,0x1
c001bab4:	53                   	push   ebx
c001bab5:	56                   	push   esi
c001bab6:	57                   	push   edi
c001bab7:	55                   	push   ebp
c001bab8:	e8 5b f7 ff ff       	call   c001b218 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001babd:	83 c4 10             	add    esp,0x10
c001bac0:	0f b7 c0             	movzx  eax,ax
c001bac3:	3d ff ff 00 00       	cmp    eax,0xffff
c001bac8:	74 0c                	je     c001bad6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001baca:	53                   	push   ebx
c001bacb:	56                   	push   esi
c001bacc:	57                   	push   edi
c001bacd:	55                   	push   ebp
c001bace:	e8 23 fe ff ff       	call   c001b8f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bad3:	83 c4 10             	add    esp,0x10
c001bad6:	43                   	inc    ebx
c001bad7:	83 fb 08             	cmp    ebx,0x8
c001bada:	75 d8                	jne    c001bab4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001badc:	83 c4 0c             	add    esp,0xc
c001badf:	5b                   	pop    ebx
c001bae0:	5e                   	pop    esi
c001bae1:	5f                   	pop    edi
c001bae2:	5d                   	pop    ebp
c001bae3:	c3                   	ret    

c001bae4 <PCI::detect()>:
c001bae4:	56                   	push   esi
c001bae5:	53                   	push   ebx
c001bae6:	53                   	push   ebx
c001bae7:	31 db                	xor    ebx,ebx
c001bae9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001baed:	6a 00                	push   0x0
c001baef:	6a 00                	push   0x0
c001baf1:	6a 00                	push   0x0
c001baf3:	56                   	push   esi
c001baf4:	e8 43 f7 ff ff       	call   c001b23c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001baf9:	83 c4 10             	add    esp,0x10
c001bafc:	a8 80                	test   al,0x80
c001bafe:	75 21                	jne    c001bb21 <PCI::detect()+0x3d>
c001bb00:	51                   	push   ecx
c001bb01:	51                   	push   ecx
c001bb02:	6a 00                	push   0x0
c001bb04:	56                   	push   esi
c001bb05:	e8 4e fc ff ff       	call   c001b758 <PCI::checkBus(unsigned char)>
c001bb0a:	83 c4 10             	add    esp,0x10
c001bb0d:	eb 2a                	jmp    c001bb39 <PCI::detect()+0x55>
c001bb0f:	52                   	push   edx
c001bb10:	52                   	push   edx
c001bb11:	53                   	push   ebx
c001bb12:	43                   	inc    ebx
c001bb13:	56                   	push   esi
c001bb14:	e8 3f fc ff ff       	call   c001b758 <PCI::checkBus(unsigned char)>
c001bb19:	83 c4 10             	add    esp,0x10
c001bb1c:	83 fb 08             	cmp    ebx,0x8
c001bb1f:	74 18                	je     c001bb39 <PCI::detect()+0x55>
c001bb21:	53                   	push   ebx
c001bb22:	6a 00                	push   0x0
c001bb24:	6a 00                	push   0x0
c001bb26:	56                   	push   esi
c001bb27:	e8 ec f6 ff ff       	call   c001b218 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb2c:	83 c4 10             	add    esp,0x10
c001bb2f:	0f b7 c0             	movzx  eax,ax
c001bb32:	3d ff ff 00 00       	cmp    eax,0xffff
c001bb37:	74 d6                	je     c001bb0f <PCI::detect()+0x2b>
c001bb39:	58                   	pop    eax
c001bb3a:	5b                   	pop    ebx
c001bb3b:	5e                   	pop    esi
c001bb3c:	c3                   	ret    
c001bb3d:	90                   	nop

c001bb3e <IDE::close(int, int, void*)>:
c001bb3e:	83 c8 ff             	or     eax,0xffffffff
c001bb41:	c3                   	ret    

c001bb42 <IDE::IDE()>:
c001bb42:	83 ec 0c             	sub    esp,0xc
c001bb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb49:	83 ec 08             	sub    esp,0x8
c001bb4c:	68 50 2f 02 c0       	push   0xc0022f50
c001bb51:	50                   	push   eax
c001bb52:	e8 fd 0f ff ff       	call   c000cb54 <HardDiskController::HardDiskController(char const*)>
c001bb57:	83 c4 10             	add    esp,0x10
c001bb5a:	ba e0 2f 02 c0       	mov    edx,0xc0022fe0
c001bb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb63:	89 10                	mov    DWORD PTR [eax],edx
c001bb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb69:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bb70:	90                   	nop
c001bb71:	83 c4 0c             	add    esp,0xc
c001bb74:	c3                   	ret    
c001bb75:	90                   	nop

c001bb76 <IDE::prepareInterrupt(unsigned char)>:
c001bb76:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb7f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bb87:	c3                   	ret    

c001bb88 <selectDrive(unsigned char, unsigned char)>:
c001bb88:	c3                   	ret    
c001bb89:	90                   	nop

c001bb8a <IDE::getBase(unsigned char)>:
c001bb8a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bb8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb93:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bb9b:	c3                   	ret    

c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bb9c:	55                   	push   ebp
c001bb9d:	57                   	push   edi
c001bb9e:	56                   	push   esi
c001bb9f:	53                   	push   ebx
c001bba0:	83 ec 1c             	sub    esp,0x1c
c001bba3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bba7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bbab:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bbae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bbb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bbb6:	80 f9 03             	cmp    cl,0x3
c001bbb9:	77 4f                	ja     c001bc0a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bbbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbbf:	0f b6 fa             	movzx  edi,dl
c001bbc2:	0f b6 db             	movzx  ebx,bl
c001bbc5:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bbc8:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bbcd:	80 ca 80             	or     dl,0x80
c001bbd0:	52                   	push   edx
c001bbd1:	6a 0c                	push   0xc
c001bbd3:	57                   	push   edi
c001bbd4:	56                   	push   esi
c001bbd5:	e8 c2 ff ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbda:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bbdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bbe3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bbe7:	ee                   	out    dx,al
c001bbe8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bbed:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001bbf1:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bbf5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bbf9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bc01:	83 c4 2c             	add    esp,0x2c
c001bc04:	5b                   	pop    ebx
c001bc05:	5e                   	pop    esi
c001bc06:	5f                   	pop    edi
c001bc07:	5d                   	pop    ebp
c001bc08:	eb 92                	jmp    c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc0a:	0f b6 cb             	movzx  ecx,bl
c001bc0d:	83 f9 07             	cmp    ecx,0x7
c001bc10:	77 12                	ja     c001bc24 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bc12:	0f b6 d2             	movzx  edx,dl
c001bc15:	0f b6 db             	movzx  ebx,bl
c001bc18:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001bc20:	01 da                	add    edx,ebx
c001bc22:	eb 2f                	jmp    c001bc53 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bc24:	83 f9 0d             	cmp    ecx,0xd
c001bc27:	77 13                	ja     c001bc3c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bc29:	0f b6 d2             	movzx  edx,dl
c001bc2c:	0f b6 db             	movzx  ebx,bl
c001bc2f:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001bc36:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bc3a:	eb 17                	jmp    c001bc53 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bc3c:	83 f9 15             	cmp    ecx,0x15
c001bc3f:	77 13                	ja     c001bc54 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bc41:	0f b6 d2             	movzx  edx,dl
c001bc44:	0f b6 db             	movzx  ebx,bl
c001bc47:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001bc4f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bc53:	ee                   	out    dx,al
c001bc54:	83 c4 1c             	add    esp,0x1c
c001bc57:	5b                   	pop    ebx
c001bc58:	5e                   	pop    esi
c001bc59:	5f                   	pop    edi
c001bc5a:	5d                   	pop    ebp
c001bc5b:	c3                   	ret    

c001bc5c <IDE::read(unsigned char, unsigned char)>:
c001bc5c:	55                   	push   ebp
c001bc5d:	57                   	push   edi
c001bc5e:	56                   	push   esi
c001bc5f:	53                   	push   ebx
c001bc60:	83 ec 1c             	sub    esp,0x1c
c001bc63:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bc67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bc6b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bc6e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bc72:	3c 03                	cmp    al,0x3
c001bc74:	77 40                	ja     c001bcb6 <IDE::read(unsigned char, unsigned char)+0x5a>
c001bc76:	0f b6 f9             	movzx  edi,cl
c001bc79:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bc7c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bc81:	0c 80                	or     al,0x80
c001bc83:	50                   	push   eax
c001bc84:	6a 0c                	push   0xc
c001bc86:	57                   	push   edi
c001bc87:	56                   	push   esi
c001bc88:	e8 0f ff ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc8d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bc92:	0f b6 d3             	movzx  edx,bl
c001bc95:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bc99:	ec                   	in     al,dx
c001bc9a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bc9e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bca3:	52                   	push   edx
c001bca4:	6a 0c                	push   0xc
c001bca6:	57                   	push   edi
c001bca7:	56                   	push   esi
c001bca8:	e8 ef fe ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcad:	83 c4 20             	add    esp,0x20
c001bcb0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bcb4:	eb 4c                	jmp    c001bd02 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bcb6:	0f b6 d3             	movzx  edx,bl
c001bcb9:	83 fa 07             	cmp    edx,0x7
c001bcbc:	77 12                	ja     c001bcd0 <IDE::read(unsigned char, unsigned char)+0x74>
c001bcbe:	0f b6 c9             	movzx  ecx,cl
c001bcc1:	0f b6 d3             	movzx  edx,bl
c001bcc4:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bccc:	01 c2                	add    edx,eax
c001bcce:	eb 31                	jmp    c001bd01 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bcd0:	83 fa 0d             	cmp    edx,0xd
c001bcd3:	77 13                	ja     c001bce8 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bcd5:	0f b6 c9             	movzx  ecx,cl
c001bcd8:	0f b6 d3             	movzx  edx,bl
c001bcdb:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bce2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bce6:	eb 19                	jmp    c001bd01 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bce8:	31 c0                	xor    eax,eax
c001bcea:	83 fa 15             	cmp    edx,0x15
c001bced:	77 13                	ja     c001bd02 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bcef:	0f b6 c9             	movzx  ecx,cl
c001bcf2:	0f b6 d3             	movzx  edx,bl
c001bcf5:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bcfd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bd01:	ec                   	in     al,dx
c001bd02:	83 c4 1c             	add    esp,0x1c
c001bd05:	5b                   	pop    ebx
c001bd06:	5e                   	pop    esi
c001bd07:	5f                   	pop    edi
c001bd08:	5d                   	pop    ebp
c001bd09:	c3                   	ret    

c001bd0a <IDE::waitInterrupt(unsigned char)>:
c001bd0a:	55                   	push   ebp
c001bd0b:	57                   	push   edi
c001bd0c:	56                   	push   esi
c001bd0d:	53                   	push   ebx
c001bd0e:	31 db                	xor    ebx,ebx
c001bd10:	83 ec 0c             	sub    esp,0xc
c001bd13:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bd17:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bd1c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bd24:	89 e8                	mov    eax,ebp
c001bd26:	84 c0                	test   al,al
c001bd28:	75 30                	jne    c001bd5a <IDE::waitInterrupt(unsigned char)+0x50>
c001bd2a:	50                   	push   eax
c001bd2b:	6a 0c                	push   0xc
c001bd2d:	56                   	push   esi
c001bd2e:	57                   	push   edi
c001bd2f:	e8 28 ff ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001bd34:	83 c4 10             	add    esp,0x10
c001bd37:	a8 01                	test   al,0x1
c001bd39:	75 27                	jne    c001bd62 <IDE::waitInterrupt(unsigned char)+0x58>
c001bd3b:	f6 c3 04             	test   bl,0x4
c001bd3e:	75 12                	jne    c001bd52 <IDE::waitInterrupt(unsigned char)+0x48>
c001bd40:	83 fb 32             	cmp    ebx,0x32
c001bd43:	7e 0d                	jle    c001bd52 <IDE::waitInterrupt(unsigned char)+0x48>
c001bd45:	83 ec 0c             	sub    esp,0xc
c001bd48:	6a 64                	push   0x64
c001bd4a:	e8 b1 a4 ff ff       	call   c0016200 <milliTenthSleep(unsigned int)>
c001bd4f:	83 c4 10             	add    esp,0x10
c001bd52:	83 fb 3c             	cmp    ebx,0x3c
c001bd55:	74 0b                	je     c001bd62 <IDE::waitInterrupt(unsigned char)+0x58>
c001bd57:	43                   	inc    ebx
c001bd58:	eb c2                	jmp    c001bd1c <IDE::waitInterrupt(unsigned char)+0x12>
c001bd5a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bd62:	83 c4 0c             	add    esp,0xc
c001bd65:	89 e8                	mov    eax,ebp
c001bd67:	5b                   	pop    ebx
c001bd68:	5e                   	pop    esi
c001bd69:	5f                   	pop    edi
c001bd6a:	5d                   	pop    ebp
c001bd6b:	c3                   	ret    

c001bd6c <ideChannel0IRQHandler(regs*, void*)>:
c001bd6c:	83 ec 10             	sub    esp,0x10
c001bd6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd73:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bd7a:	6a 07                	push   0x7
c001bd7c:	6a 00                	push   0x0
c001bd7e:	50                   	push   eax
c001bd7f:	e8 d8 fe ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001bd84:	83 c4 1c             	add    esp,0x1c
c001bd87:	c3                   	ret    

c001bd88 <ideChannel1IRQHandler(regs*, void*)>:
c001bd88:	83 ec 10             	sub    esp,0x10
c001bd8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd8f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bd96:	6a 07                	push   0x7
c001bd98:	6a 01                	push   0x1
c001bd9a:	50                   	push   eax
c001bd9b:	e8 bc fe ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001bda0:	83 c4 1c             	add    esp,0x1c
c001bda3:	c3                   	ret    

c001bda4 <IDE::enableIRQs(unsigned char, bool)>:
c001bda4:	57                   	push   edi
c001bda5:	b8 02 00 00 00       	mov    eax,0x2
c001bdaa:	56                   	push   esi
c001bdab:	53                   	push   ebx
c001bdac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bdb0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bdb4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bdb9:	74 02                	je     c001bdbd <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bdbb:	31 c0                	xor    eax,eax
c001bdbd:	0f b6 db             	movzx  ebx,bl
c001bdc0:	bf 04 00 00 00       	mov    edi,0x4
c001bdc5:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bdcc:	50                   	push   eax
c001bdcd:	6a 0c                	push   0xc
c001bdcf:	53                   	push   ebx
c001bdd0:	56                   	push   esi
c001bdd1:	e8 c6 fd ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdd6:	83 c4 10             	add    esp,0x10
c001bdd9:	50                   	push   eax
c001bdda:	6a 0c                	push   0xc
c001bddc:	53                   	push   ebx
c001bddd:	56                   	push   esi
c001bdde:	e8 79 fe ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001bde3:	83 c4 10             	add    esp,0x10
c001bde6:	4f                   	dec    edi
c001bde7:	75 f0                	jne    c001bdd9 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bde9:	5b                   	pop    ebx
c001bdea:	5e                   	pop    esi
c001bdeb:	5f                   	pop    edi
c001bdec:	c3                   	ret    
c001bded:	90                   	nop

c001bdee <IDE::open(int, int, void*)>:
c001bdee:	55                   	push   ebp
c001bdef:	57                   	push   edi
c001bdf0:	56                   	push   esi
c001bdf1:	53                   	push   ebx
c001bdf2:	83 ec 1c             	sub    esp,0x1c
c001bdf5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bdf9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001be02:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001be0b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001be12:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001be19:	0f 85 de 02 00 00    	jne    c001c0fd <IDE::open(int, int, void*)+0x30f>
c001be1f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001be25:	88 04 24             	mov    BYTE PTR [esp],al
c001be28:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be2b:	83 e0 7f             	and    eax,0x7f
c001be2e:	83 f8 05             	cmp    eax,0x5
c001be31:	74 05                	je     c001be38 <IDE::open(int, int, void*)+0x4a>
c001be33:	83 f8 0f             	cmp    eax,0xf
c001be36:	75 32                	jne    c001be6a <IDE::open(int, int, void*)+0x7c>
c001be38:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001be3e:	83 e0 fc             	and    eax,0xfffffffc
c001be41:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001be48:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001be4e:	83 e0 fc             	and    eax,0xfffffffc
c001be51:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be58:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001be5e:	83 e0 fc             	and    eax,0xfffffffc
c001be61:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be68:	eb 14                	jmp    c001be7e <IDE::open(int, int, void*)+0x90>
c001be6a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001be74:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001be7e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001be85:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001be8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be90:	89 c6                	mov    esi,eax
c001be92:	bf f8 0c 00 00       	mov    edi,0xcf8
c001be97:	c1 e6 10             	shl    esi,0x10
c001be9a:	89 e8                	mov    eax,ebp
c001be9c:	89 fa                	mov    edx,edi
c001be9e:	c1 e0 0b             	shl    eax,0xb
c001bea1:	09 f0                	or     eax,esi
c001bea3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001beaa:	c1 e6 08             	shl    esi,0x8
c001bead:	09 c6                	or     esi,eax
c001beaf:	89 f0                	mov    eax,esi
c001beb1:	0d 08 00 00 80       	or     eax,0x80000008
c001beb6:	ef                   	out    dx,eax
c001beb7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bebc:	89 ca                	mov    edx,ecx
c001bebe:	ed                   	in     eax,dx
c001bebf:	c1 e8 10             	shr    eax,0x10
c001bec2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bec7:	0f 84 f9 00 00 00    	je     c001bfc6 <IDE::open(int, int, void*)+0x1d8>
c001becd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bed3:	89 fa                	mov    edx,edi
c001bed5:	89 f0                	mov    eax,esi
c001bed7:	ef                   	out    dx,eax
c001bed8:	b0 fe                	mov    al,0xfe
c001beda:	89 ca                	mov    edx,ecx
c001bedc:	ee                   	out    dx,al
c001bedd:	89 f0                	mov    eax,esi
c001bedf:	89 fa                	mov    edx,edi
c001bee1:	ef                   	out    dx,eax
c001bee2:	89 ca                	mov    edx,ecx
c001bee4:	ed                   	in     eax,dx
c001bee5:	3c fe                	cmp    al,0xfe
c001bee7:	0f 85 a9 00 00 00    	jne    c001bf96 <IDE::open(int, int, void*)+0x1a8>
c001beed:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001bef3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001befa:	74 33                	je     c001bf2f <IDE::open(int, int, void*)+0x141>
c001befc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bf02:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bf06:	40                   	inc    eax
c001bf07:	83 ec 0c             	sub    esp,0xc
c001bf0a:	0f b6 c0             	movzx  eax,al
c001bf0d:	50                   	push   eax
c001bf0e:	55                   	push   ebp
c001bf0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf13:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bf19:	51                   	push   ecx
c001bf1a:	e8 65 38 ff ff       	call   c000f784 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bf1f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bf24:	83 c4 1c             	add    esp,0x1c
c001bf27:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bf2d:	eb 0a                	jmp    c001bf39 <IDE::open(int, int, void*)+0x14b>
c001bf2f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bf39:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bf40:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bf47:	c1 e1 10             	shl    ecx,0x10
c001bf4a:	c1 e0 08             	shl    eax,0x8
c001bf4d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bf52:	09 c1                	or     ecx,eax
c001bf54:	89 fa                	mov    edx,edi
c001bf56:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bf5d:	c1 e0 0b             	shl    eax,0xb
c001bf60:	09 c1                	or     ecx,eax
c001bf62:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bf68:	89 c8                	mov    eax,ecx
c001bf6a:	ef                   	out    dx,eax
c001bf6b:	be fc 0c 00 00       	mov    esi,0xcfc
c001bf70:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bf76:	89 f2                	mov    edx,esi
c001bf78:	ee                   	out    dx,al
c001bf79:	89 c8                	mov    eax,ecx
c001bf7b:	89 fa                	mov    edx,edi
c001bf7d:	ef                   	out    dx,eax
c001bf7e:	89 f2                	mov    edx,esi
c001bf80:	ed                   	in     eax,dx
c001bf81:	0f b6 c0             	movzx  eax,al
c001bf84:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bf8a:	74 4a                	je     c001bfd6 <IDE::open(int, int, void*)+0x1e8>
c001bf8c:	83 ec 0c             	sub    esp,0xc
c001bf8f:	68 68 2f 02 c0       	push   0xc0022f68
c001bf94:	eb 38                	jmp    c001bfce <IDE::open(int, int, void*)+0x1e0>
c001bf96:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bf9f:	75 1b                	jne    c001bfbc <IDE::open(int, int, void*)+0x1ce>
c001bfa1:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bfa5:	3d 80 00 00 00       	cmp    eax,0x80
c001bfaa:	74 07                	je     c001bfb3 <IDE::open(int, int, void*)+0x1c5>
c001bfac:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bfb1:	75 09                	jne    c001bfbc <IDE::open(int, int, void*)+0x1ce>
c001bfb3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bfba:	eb 1a                	jmp    c001bfd6 <IDE::open(int, int, void*)+0x1e8>
c001bfbc:	83 ec 0c             	sub    esp,0xc
c001bfbf:	68 70 2f 02 c0       	push   0xc0022f70
c001bfc4:	eb 08                	jmp    c001bfce <IDE::open(int, int, void*)+0x1e0>
c001bfc6:	83 ec 0c             	sub    esp,0xc
c001bfc9:	68 a1 2f 02 c0       	push   0xc0022fa1
c001bfce:	e8 98 54 ff ff       	call   c001146b <KePanic(char const*)>
c001bfd3:	83 c4 10             	add    esp,0x10
c001bfd6:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bfdd:	74 1a                	je     c001bff9 <IDE::open(int, int, void*)+0x20b>
c001bfdf:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bfe5:	83 e0 fc             	and    eax,0xfffffffc
c001bfe8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bfef:	83 c0 08             	add    eax,0x8
c001bff2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bff9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bfff:	89 c2                	mov    edx,eax
c001c001:	83 e2 0f             	and    edx,0xf
c001c004:	83 fa 08             	cmp    edx,0x8
c001c007:	75 0a                	jne    c001c013 <IDE::open(int, int, void*)+0x225>
c001c009:	83 e8 02             	sub    eax,0x2
c001c00c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c013:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c019:	89 c2                	mov    edx,eax
c001c01b:	83 e2 0f             	and    edx,0xf
c001c01e:	83 fa 08             	cmp    edx,0x8
c001c021:	75 0a                	jne    c001c02d <IDE::open(int, int, void*)+0x23f>
c001c023:	83 e8 02             	sub    eax,0x2
c001c026:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c02d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c034:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c03b:	89 d0                	mov    eax,edx
c001c03d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c040:	8d 7a 01             	lea    edi,[edx+0x1]
c001c043:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c047:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c04b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c04f:	83 e1 3f             	and    ecx,0x3f
c001c052:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c056:	89 f9                	mov    ecx,edi
c001c058:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c05f:	0f b6 c9             	movzx  ecx,cl
c001c062:	8d 78 02             	lea    edi,[eax+0x2]
c001c065:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c068:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c06c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c070:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c074:	83 e2 3f             	and    edx,0x3f
c001c077:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c07b:	89 f9                	mov    ecx,edi
c001c07d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c083:	0f b6 d1             	movzx  edx,cl
c001c086:	8d 78 03             	lea    edi,[eax+0x3]
c001c089:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c08c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c090:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c094:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c098:	83 e1 3f             	and    ecx,0x3f
c001c09b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c09f:	89 f9                	mov    ecx,edi
c001c0a1:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c0a7:	0f b6 c9             	movzx  ecx,cl
c001c0aa:	8d 78 04             	lea    edi,[eax+0x4]
c001c0ad:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c0b0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c0b4:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c0b8:	89 fa                	mov    edx,edi
c001c0ba:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c0c0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c0c4:	83 e2 3f             	and    edx,0x3f
c001c0c7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c0cb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c0d2:	66 85 f6             	test   si,si
c001c0d5:	74 65                	je     c001c13c <IDE::open(int, int, void*)+0x34e>
c001c0d7:	89 f9                	mov    ecx,edi
c001c0d9:	83 c0 05             	add    eax,0x5
c001c0dc:	0f b6 d1             	movzx  edx,cl
c001c0df:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c0e2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c0e6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c0ea:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c0f0:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c0f4:	83 e0 3f             	and    eax,0x3f
c001c0f7:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c0fb:	eb 3f                	jmp    c001c13c <IDE::open(int, int, void*)+0x34e>
c001c0fd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c103:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c10a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c111:	05 06 02 00 00       	add    eax,0x206
c001c116:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c11d:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c124:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c12b:	05 06 02 00 00       	add    eax,0x206
c001c130:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c137:	e9 bd fe ff ff       	jmp    c001bff9 <IDE::open(int, int, void*)+0x20b>
c001c13c:	50                   	push   eax
c001c13d:	50                   	push   eax
c001c13e:	6a 00                	push   0x0
c001c140:	53                   	push   ebx
c001c141:	e8 30 fa ff ff       	call   c001bb76 <IDE::prepareInterrupt(unsigned char)>
c001c146:	5a                   	pop    edx
c001c147:	59                   	pop    ecx
c001c148:	6a 01                	push   0x1
c001c14a:	53                   	push   ebx
c001c14b:	e8 26 fa ff ff       	call   c001bb76 <IDE::prepareInterrupt(unsigned char)>
c001c150:	83 c4 0c             	add    esp,0xc
c001c153:	6a 00                	push   0x0
c001c155:	6a 00                	push   0x0
c001c157:	53                   	push   ebx
c001c158:	e8 47 fc ff ff       	call   c001bda4 <IDE::enableIRQs(unsigned char, bool)>
c001c15d:	83 c4 0c             	add    esp,0xc
c001c160:	6a 00                	push   0x0
c001c162:	6a 01                	push   0x1
c001c164:	53                   	push   ebx
c001c165:	e8 3a fc ff ff       	call   c001bda4 <IDE::enableIRQs(unsigned char, bool)>
c001c16a:	83 c4 10             	add    esp,0x10
c001c16d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c174:	74 34                	je     c001c1aa <IDE::open(int, int, void*)+0x3bc>
c001c176:	83 ec 0c             	sub    esp,0xc
c001c179:	53                   	push   ebx
c001c17a:	6a 01                	push   0x1
c001c17c:	68 6c bd 01 c0       	push   0xc001bd6c
c001c181:	6a 0e                	push   0xe
c001c183:	53                   	push   ebx
c001c184:	e8 35 06 ff ff       	call   c000c7be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c189:	83 c4 14             	add    esp,0x14
c001c18c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c192:	53                   	push   ebx
c001c193:	6a 01                	push   0x1
c001c195:	68 88 bd 01 c0       	push   0xc001bd88
c001c19a:	6a 0f                	push   0xf
c001c19c:	53                   	push   ebx
c001c19d:	e8 1c 06 ff ff       	call   c000c7be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1a2:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c1a8:	eb 38                	jmp    c001c1e2 <IDE::open(int, int, void*)+0x3f4>
c001c1aa:	83 ec 0c             	sub    esp,0xc
c001c1ad:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c1b7:	53                   	push   ebx
c001c1b8:	6a 00                	push   0x0
c001c1ba:	68 6c bd 01 c0       	push   0xc001bd6c
c001c1bf:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c1c5:	53                   	push   ebx
c001c1c6:	e8 f3 05 ff ff       	call   c000c7be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1cb:	83 c4 14             	add    esp,0x14
c001c1ce:	53                   	push   ebx
c001c1cf:	6a 00                	push   0x0
c001c1d1:	68 88 bd 01 c0       	push   0xc001bd88
c001c1d6:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c1dc:	53                   	push   ebx
c001c1dd:	e8 dc 05 ff ff       	call   c000c7be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1e4:	83 c4 20             	add    esp,0x20
c001c1e7:	83 ec 0c             	sub    esp,0xc
c001c1ea:	53                   	push   ebx
c001c1eb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c1ee:	83 c4 0c             	add    esp,0xc
c001c1f1:	6a 07                	push   0x7
c001c1f3:	6a 00                	push   0x0
c001c1f5:	53                   	push   ebx
c001c1f6:	e8 61 fa ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c1fb:	83 c4 0c             	add    esp,0xc
c001c1fe:	6a 07                	push   0x7
c001c200:	6a 01                	push   0x1
c001c202:	53                   	push   ebx
c001c203:	e8 54 fa ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c208:	83 c4 0c             	add    esp,0xc
c001c20b:	6a 01                	push   0x1
c001c20d:	6a 00                	push   0x0
c001c20f:	53                   	push   ebx
c001c210:	e8 8f fb ff ff       	call   c001bda4 <IDE::enableIRQs(unsigned char, bool)>
c001c215:	83 c4 0c             	add    esp,0xc
c001c218:	6a 01                	push   0x1
c001c21a:	6a 01                	push   0x1
c001c21c:	53                   	push   ebx
c001c21d:	e8 82 fb ff ff       	call   c001bda4 <IDE::enableIRQs(unsigned char, bool)>
c001c222:	83 c4 2c             	add    esp,0x2c
c001c225:	31 c0                	xor    eax,eax
c001c227:	5b                   	pop    ebx
c001c228:	5e                   	pop    esi
c001c229:	5f                   	pop    edi
c001c22a:	5d                   	pop    ebp
c001c22b:	c3                   	ret    

c001c22c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c22c:	55                   	push   ebp
c001c22d:	57                   	push   edi
c001c22e:	56                   	push   esi
c001c22f:	53                   	push   ebx
c001c230:	83 ec 1c             	sub    esp,0x1c
c001c233:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c237:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c23b:	8d 42 f8             	lea    eax,[edx-0x8]
c001c23e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c242:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c246:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c24a:	3c 03                	cmp    al,0x3
c001c24c:	77 5a                	ja     c001c2a8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c24e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c252:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c256:	0f b6 db             	movzx  ebx,bl
c001c259:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c25c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c261:	0c 80                	or     al,0x80
c001c263:	50                   	push   eax
c001c264:	6a 0c                	push   0xc
c001c266:	53                   	push   ebx
c001c267:	56                   	push   esi
c001c268:	e8 2f f9 ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c26d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c272:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c276:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c27a:	0f b6 d2             	movzx  edx,dl
c001c27d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c281:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c283:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c288:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c28c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c290:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c294:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c29c:	83 c4 2c             	add    esp,0x2c
c001c29f:	5b                   	pop    ebx
c001c2a0:	5e                   	pop    esi
c001c2a1:	5f                   	pop    edi
c001c2a2:	5d                   	pop    ebp
c001c2a3:	e9 f4 f8 ff ff       	jmp    c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2a8:	0f b6 c2             	movzx  eax,dl
c001c2ab:	83 f8 07             	cmp    eax,0x7
c001c2ae:	77 12                	ja     c001c2c2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c2b0:	0f b6 c2             	movzx  eax,dl
c001c2b3:	0f b6 db             	movzx  ebx,bl
c001c2b6:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c2be:	01 c2                	add    edx,eax
c001c2c0:	eb 2f                	jmp    c001c2f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c2c2:	83 f8 0d             	cmp    eax,0xd
c001c2c5:	77 13                	ja     c001c2da <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c2c7:	0f b6 db             	movzx  ebx,bl
c001c2ca:	0f b6 d2             	movzx  edx,dl
c001c2cd:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c2d4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c2d8:	eb 17                	jmp    c001c2f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c2da:	83 f8 15             	cmp    eax,0x15
c001c2dd:	77 14                	ja     c001c2f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c2df:	0f b6 db             	movzx  ebx,bl
c001c2e2:	0f b6 d2             	movzx  edx,dl
c001c2e5:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c2ed:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c2f1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c2f3:	83 c4 1c             	add    esp,0x1c
c001c2f6:	5b                   	pop    ebx
c001c2f7:	5e                   	pop    esi
c001c2f8:	5f                   	pop    edi
c001c2f9:	5d                   	pop    ebp
c001c2fa:	c3                   	ret    
c001c2fb:	90                   	nop

c001c2fc <IDE::detect()>:
c001c2fc:	55                   	push   ebp
c001c2fd:	57                   	push   edi
c001c2fe:	56                   	push   esi
c001c2ff:	53                   	push   ebx
c001c300:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c306:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c30d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c314:	0f 85 a4 02 00 00    	jne    c001c5be <IDE::detect()+0x2c2>
c001c31a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c321:	31 f6                	xor    esi,esi
c001c323:	31 ed                	xor    ebp,ebp
c001c325:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c32d:	89 e8                	mov    eax,ebp
c001c32f:	c1 e0 06             	shl    eax,0x6
c001c332:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c33a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c33e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c346:	c1 e0 04             	shl    eax,0x4
c001c349:	83 c8 a0             	or     eax,0xffffffa0
c001c34c:	0f b6 c0             	movzx  eax,al
c001c34f:	50                   	push   eax
c001c350:	6a 06                	push   0x6
c001c352:	56                   	push   esi
c001c353:	53                   	push   ebx
c001c354:	e8 43 f8 ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c359:	83 c4 0c             	add    esp,0xc
c001c35c:	6a 0c                	push   0xc
c001c35e:	56                   	push   esi
c001c35f:	53                   	push   ebx
c001c360:	e8 f7 f8 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c365:	83 c4 0c             	add    esp,0xc
c001c368:	6a 0c                	push   0xc
c001c36a:	56                   	push   esi
c001c36b:	53                   	push   ebx
c001c36c:	e8 eb f8 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c371:	83 c4 0c             	add    esp,0xc
c001c374:	6a 0c                	push   0xc
c001c376:	56                   	push   esi
c001c377:	53                   	push   ebx
c001c378:	e8 df f8 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c37d:	83 c4 0c             	add    esp,0xc
c001c380:	6a 0c                	push   0xc
c001c382:	56                   	push   esi
c001c383:	53                   	push   ebx
c001c384:	e8 d3 f8 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c389:	68 ec 00 00 00       	push   0xec
c001c38e:	6a 07                	push   0x7
c001c390:	56                   	push   esi
c001c391:	53                   	push   ebx
c001c392:	e8 05 f8 ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c397:	83 c4 1c             	add    esp,0x1c
c001c39a:	6a 0c                	push   0xc
c001c39c:	56                   	push   esi
c001c39d:	53                   	push   ebx
c001c39e:	e8 b9 f8 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c3a3:	83 c4 0c             	add    esp,0xc
c001c3a6:	6a 0c                	push   0xc
c001c3a8:	56                   	push   esi
c001c3a9:	53                   	push   ebx
c001c3aa:	e8 ad f8 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c3af:	83 c4 0c             	add    esp,0xc
c001c3b2:	6a 0c                	push   0xc
c001c3b4:	56                   	push   esi
c001c3b5:	53                   	push   ebx
c001c3b6:	e8 a1 f8 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c3bb:	83 c4 0c             	add    esp,0xc
c001c3be:	6a 0c                	push   0xc
c001c3c0:	56                   	push   esi
c001c3c1:	53                   	push   ebx
c001c3c2:	e8 95 f8 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c3c7:	83 c4 0c             	add    esp,0xc
c001c3ca:	6a 0c                	push   0xc
c001c3cc:	56                   	push   esi
c001c3cd:	53                   	push   ebx
c001c3ce:	e8 89 f8 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c3d3:	83 c4 10             	add    esp,0x10
c001c3d6:	84 c0                	test   al,al
c001c3d8:	0f 84 60 01 00 00    	je     c001c53e <IDE::detect()+0x242>
c001c3de:	31 ff                	xor    edi,edi
c001c3e0:	50                   	push   eax
c001c3e1:	6a 0c                	push   0xc
c001c3e3:	56                   	push   esi
c001c3e4:	53                   	push   ebx
c001c3e5:	e8 72 f8 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c3ea:	83 c4 10             	add    esp,0x10
c001c3ed:	a8 01                	test   al,0x1
c001c3ef:	0f 85 6a 01 00 00    	jne    c001c55f <IDE::detect()+0x263>
c001c3f5:	a8 80                	test   al,0x80
c001c3f7:	75 04                	jne    c001c3fd <IDE::detect()+0x101>
c001c3f9:	a8 08                	test   al,0x8
c001c3fb:	75 23                	jne    c001c420 <IDE::detect()+0x124>
c001c3fd:	47                   	inc    edi
c001c3fe:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c404:	7e da                	jle    c001c3e0 <IDE::detect()+0xe4>
c001c406:	83 ec 0c             	sub    esp,0xc
c001c409:	6a 32                	push   0x32
c001c40b:	e8 f0 9d ff ff       	call   c0016200 <milliTenthSleep(unsigned int)>
c001c410:	83 c4 10             	add    esp,0x10
c001c413:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c419:	75 c5                	jne    c001c3e0 <IDE::detect()+0xe4>
c001c41b:	e9 3f 01 00 00       	jmp    c001c55f <IDE::detect()+0x263>
c001c420:	31 c9                	xor    ecx,ecx
c001c422:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c426:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c42a:	83 ec 0c             	sub    esp,0xc
c001c42d:	68 80 00 00 00       	push   0x80
c001c432:	57                   	push   edi
c001c433:	6a 00                	push   0x0
c001c435:	56                   	push   esi
c001c436:	53                   	push   ebx
c001c437:	e8 f0 fd ff ff       	call   c001c22c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c43c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c441:	89 e8                	mov    eax,ebp
c001c443:	89 d1                	mov    ecx,edx
c001c445:	c1 e0 06             	shl    eax,0x6
c001c448:	01 d8                	add    eax,ebx
c001c44a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c451:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c458:	89 f2                	mov    edx,esi
c001c45a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c460:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c464:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c46a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c46e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c475:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c47d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c484:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c48c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c492:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c499:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c49f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c4a3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c4a7:	83 c4 20             	add    esp,0x20
c001c4aa:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c4ad:	83 c0 02             	add    eax,0x2
c001c4b0:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c4b6:	83 c7 02             	add    edi,0x2
c001c4b9:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c4bc:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c4c2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c4c6:	75 e2                	jne    c001c4aa <IDE::detect()+0x1ae>
c001c4c8:	89 e8                	mov    eax,ebp
c001c4ca:	c1 e0 06             	shl    eax,0x6
c001c4cd:	01 d8                	add    eax,ebx
c001c4cf:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c4d6:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c4dd:	c1 ea 09             	shr    edx,0x9
c001c4e0:	83 e2 01             	and    edx,0x1
c001c4e3:	80 e1 01             	and    cl,0x1
c001c4e6:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c4ec:	75 22                	jne    c001c510 <IDE::detect()+0x214>
c001c4ee:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c4f5:	74 46                	je     c001c53d <IDE::detect()+0x241>
c001c4f7:	83 ec 0c             	sub    esp,0xc
c001c4fa:	68 7c 01 00 00       	push   0x17c
c001c4ff:	e8 b2 b5 fe ff       	call   c0007ab6 <malloc>
c001c504:	89 c7                	mov    edi,eax
c001c506:	89 04 24             	mov    DWORD PTR [esp],eax
c001c509:	e8 1a 05 00 00       	call   c001ca28 <ATA::ATA()>
c001c50e:	eb 17                	jmp    c001c527 <IDE::detect()+0x22b>
c001c510:	83 ec 0c             	sub    esp,0xc
c001c513:	68 84 01 00 00       	push   0x184
c001c518:	e8 99 b5 fe ff       	call   c0007ab6 <malloc>
c001c51d:	89 c7                	mov    edi,eax
c001c51f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c522:	e8 45 0e 00 00       	call   c001d36c <ATAPI::ATAPI()>
c001c527:	5a                   	pop    edx
c001c528:	59                   	pop    ecx
c001c529:	57                   	push   edi
c001c52a:	53                   	push   ebx
c001c52b:	e8 e2 02 ff ff       	call   c000c812 <Device::addChild(Device*)>
c001c530:	8b 07                	mov    eax,DWORD PTR [edi]
c001c532:	53                   	push   ebx
c001c533:	55                   	push   ebp
c001c534:	6a 00                	push   0x0
c001c536:	57                   	push   edi
c001c537:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c53a:	83 c4 20             	add    esp,0x20
c001c53d:	45                   	inc    ebp
c001c53e:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c543:	74 0d                	je     c001c552 <IDE::detect()+0x256>
c001c545:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c54d:	e9 db fd ff ff       	jmp    c001c32d <IDE::detect()+0x31>
c001c552:	4e                   	dec    esi
c001c553:	74 69                	je     c001c5be <IDE::detect()+0x2c2>
c001c555:	be 01 00 00 00       	mov    esi,0x1
c001c55a:	e9 c6 fd ff ff       	jmp    c001c325 <IDE::detect()+0x29>
c001c55f:	50                   	push   eax
c001c560:	6a 04                	push   0x4
c001c562:	56                   	push   esi
c001c563:	53                   	push   ebx
c001c564:	e8 f3 f6 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c569:	83 c4 0c             	add    esp,0xc
c001c56c:	89 c7                	mov    edi,eax
c001c56e:	6a 05                	push   0x5
c001c570:	56                   	push   esi
c001c571:	53                   	push   ebx
c001c572:	e8 e5 f6 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c577:	83 c4 10             	add    esp,0x10
c001c57a:	89 f9                	mov    ecx,edi
c001c57c:	0f b6 c0             	movzx  eax,al
c001c57f:	0f b6 f9             	movzx  edi,cl
c001c582:	83 ff 14             	cmp    edi,0x14
c001c585:	75 07                	jne    c001c58e <IDE::detect()+0x292>
c001c587:	3d eb 00 00 00       	cmp    eax,0xeb
c001c58c:	eb 0a                	jmp    c001c598 <IDE::detect()+0x29c>
c001c58e:	3d 96 00 00 00       	cmp    eax,0x96
c001c593:	75 a9                	jne    c001c53e <IDE::detect()+0x242>
c001c595:	83 ff 69             	cmp    edi,0x69
c001c598:	75 a4                	jne    c001c53e <IDE::detect()+0x242>
c001c59a:	68 a1 00 00 00       	push   0xa1
c001c59f:	6a 07                	push   0x7
c001c5a1:	56                   	push   esi
c001c5a2:	53                   	push   ebx
c001c5a3:	e8 f4 f5 ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5a8:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c5af:	e8 4c 9c ff ff       	call   c0016200 <milliTenthSleep(unsigned int)>
c001c5b4:	83 c4 10             	add    esp,0x10
c001c5b7:	b1 01                	mov    cl,0x1
c001c5b9:	e9 64 fe ff ff       	jmp    c001c422 <IDE::detect()+0x126>
c001c5be:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c5c4:	5b                   	pop    ebx
c001c5c5:	5e                   	pop    esi
c001c5c6:	5f                   	pop    edi
c001c5c7:	5d                   	pop    ebp
c001c5c8:	c3                   	ret    
c001c5c9:	90                   	nop

c001c5ca <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c5ca:	55                   	push   ebp
c001c5cb:	57                   	push   edi
c001c5cc:	56                   	push   esi
c001c5cd:	53                   	push   ebx
c001c5ce:	83 ec 1c             	sub    esp,0x1c
c001c5d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c5d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c5d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5dd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c5e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5e5:	88 c3                	mov    bl,al
c001c5e7:	25 ff 00 00 00       	and    eax,0xff
c001c5ec:	0f 84 88 00 00 00    	je     c001c67a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c5f2:	83 ec 0c             	sub    esp,0xc
c001c5f5:	89 c7                	mov    edi,eax
c001c5f7:	68 cb 2f 02 c0       	push   0xc0022fcb
c001c5fc:	e8 44 e3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c601:	83 c4 10             	add    esp,0x10
c001c604:	83 ff 01             	cmp    edi,0x1
c001c607:	74 6b                	je     c001c674 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c609:	83 ff 02             	cmp    edi,0x2
c001c60c:	75 58                	jne    c001c666 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c60e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c613:	01 ff                	add    edi,edi
c001c615:	50                   	push   eax
c001c616:	09 fe                	or     esi,edi
c001c618:	6a 01                	push   0x1
c001c61a:	89 f0                	mov    eax,esi
c001c61c:	0f b6 f0             	movzx  esi,al
c001c61f:	c1 e6 06             	shl    esi,0x6
c001c622:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c62a:	50                   	push   eax
c001c62b:	55                   	push   ebp
c001c62c:	e8 2b f6 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c631:	83 c4 10             	add    esp,0x10
c001c634:	a8 01                	test   al,0x1
c001c636:	74 02                	je     c001c63a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c638:	b3 07                	mov    bl,0x7
c001c63a:	a8 02                	test   al,0x2
c001c63c:	74 02                	je     c001c640 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c63e:	b3 03                	mov    bl,0x3
c001c640:	a8 04                	test   al,0x4
c001c642:	74 02                	je     c001c646 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c644:	b3 14                	mov    bl,0x14
c001c646:	a8 08                	test   al,0x8
c001c648:	74 02                	je     c001c64c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c64a:	b3 03                	mov    bl,0x3
c001c64c:	a8 10                	test   al,0x10
c001c64e:	74 02                	je     c001c652 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c650:	b3 15                	mov    bl,0x15
c001c652:	a8 20                	test   al,0x20
c001c654:	74 02                	je     c001c658 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c656:	b3 03                	mov    bl,0x3
c001c658:	a8 40                	test   al,0x40
c001c65a:	74 02                	je     c001c65e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c65c:	b3 16                	mov    bl,0x16
c001c65e:	a8 80                	test   al,0x80
c001c660:	74 18                	je     c001c67a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c662:	b3 0d                	mov    bl,0xd
c001c664:	eb 14                	jmp    c001c67a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c666:	83 ff 03             	cmp    edi,0x3
c001c669:	74 0d                	je     c001c678 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c66b:	83 ff 04             	cmp    edi,0x4
c001c66e:	75 0a                	jne    c001c67a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c670:	b3 08                	mov    bl,0x8
c001c672:	eb 06                	jmp    c001c67a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c674:	b3 13                	mov    bl,0x13
c001c676:	eb 02                	jmp    c001c67a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c678:	b3 17                	mov    bl,0x17
c001c67a:	83 c4 1c             	add    esp,0x1c
c001c67d:	88 d8                	mov    al,bl
c001c67f:	5b                   	pop    ebx
c001c680:	5e                   	pop    esi
c001c681:	5f                   	pop    edi
c001c682:	5d                   	pop    ebp
c001c683:	c3                   	ret    

c001c684 <IDE::polling(unsigned char, unsigned int)>:
c001c684:	57                   	push   edi
c001c685:	56                   	push   esi
c001c686:	53                   	push   ebx
c001c687:	bb 04 00 00 00       	mov    ebx,0x4
c001c68c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c690:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c695:	52                   	push   edx
c001c696:	6a 0c                	push   0xc
c001c698:	56                   	push   esi
c001c699:	57                   	push   edi
c001c69a:	e8 bd f5 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c69f:	83 c4 10             	add    esp,0x10
c001c6a2:	4b                   	dec    ebx
c001c6a3:	75 f0                	jne    c001c695 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c6a5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c6aa:	50                   	push   eax
c001c6ab:	6a 0c                	push   0xc
c001c6ad:	56                   	push   esi
c001c6ae:	57                   	push   edi
c001c6af:	e8 a8 f5 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001c6b4:	83 c4 10             	add    esp,0x10
c001c6b7:	a8 01                	test   al,0x1
c001c6b9:	75 17                	jne    c001c6d2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c6bb:	a8 20                	test   al,0x20
c001c6bd:	75 0f                	jne    c001c6ce <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c6bf:	4b                   	dec    ebx
c001c6c0:	74 10                	je     c001c6d2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c6c2:	a8 80                	test   al,0x80
c001c6c4:	75 e4                	jne    c001c6aa <IDE::polling(unsigned char, unsigned int)+0x26>
c001c6c6:	a8 08                	test   al,0x8
c001c6c8:	74 e0                	je     c001c6aa <IDE::polling(unsigned char, unsigned int)+0x26>
c001c6ca:	31 c0                	xor    eax,eax
c001c6cc:	eb 06                	jmp    c001c6d4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c6ce:	b0 01                	mov    al,0x1
c001c6d0:	eb 02                	jmp    c001c6d4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c6d2:	b0 02                	mov    al,0x2
c001c6d4:	5b                   	pop    ebx
c001c6d5:	5e                   	pop    esi
c001c6d6:	5f                   	pop    edi
c001c6d7:	c3                   	ret    

c001c6d8 <SATABus::close(int, int, void*)>:
c001c6d8:	31 c0                	xor    eax,eax
c001c6da:	c3                   	ret    
c001c6db:	90                   	nop

c001c6dc <SATABus::detect()>:
c001c6dc:	c3                   	ret    
c001c6dd:	90                   	nop

c001c6de <SATABus::SATABus()>:
c001c6de:	83 ec 0c             	sub    esp,0xc
c001c6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e5:	83 ec 08             	sub    esp,0x8
c001c6e8:	68 04 30 02 c0       	push   0xc0023004
c001c6ed:	50                   	push   eax
c001c6ee:	e8 61 04 ff ff       	call   c000cb54 <HardDiskController::HardDiskController(char const*)>
c001c6f3:	83 c4 10             	add    esp,0x10
c001c6f6:	ba 30 30 02 c0       	mov    edx,0xc0023030
c001c6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ff:	89 10                	mov    DWORD PTR [eax],edx
c001c701:	83 ec 0c             	sub    esp,0xc
c001c704:	6a 50                	push   0x50
c001c706:	e8 83 b7 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c70b:	83 c4 10             	add    esp,0x10
c001c70e:	89 c2                	mov    edx,eax
c001c710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c714:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c71a:	83 ec 0c             	sub    esp,0xc
c001c71d:	6a 50                	push   0x50
c001c71f:	e8 e9 ce fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c724:	83 c4 10             	add    esp,0x10
c001c727:	89 c2                	mov    edx,eax
c001c729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c733:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c738:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c73c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c742:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c746:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c74c:	83 ec 0c             	sub    esp,0xc
c001c74f:	6a 03                	push   0x3
c001c751:	6a 50                	push   0x50
c001c753:	51                   	push   ecx
c001c754:	52                   	push   edx
c001c755:	50                   	push   eax
c001c756:	e8 bf d7 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c75b:	83 c4 20             	add    esp,0x20
c001c75e:	90                   	nop
c001c75f:	83 c4 0c             	add    esp,0xc
c001c762:	c3                   	ret    
c001c763:	90                   	nop

c001c764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c768:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c76b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c76e:	09 c2                	or     edx,eax
c001c770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c774:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c77a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c77c:	31 c0                	xor    eax,eax
c001c77e:	c1 e9 08             	shr    ecx,0x8
c001c781:	83 e1 0f             	and    ecx,0xf
c001c784:	39 c8                	cmp    eax,ecx
c001c786:	74 0a                	je     c001c792 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c788:	f6 c2 01             	test   dl,0x1
c001c78b:	74 08                	je     c001c795 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c78d:	d1 ea                	shr    edx,1
c001c78f:	40                   	inc    eax
c001c790:	eb f2                	jmp    c001c784 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c792:	83 c8 ff             	or     eax,0xffffffff
c001c795:	c3                   	ret    

c001c796 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c79a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c79d:	89 c2                	mov    edx,eax
c001c79f:	c1 ea 08             	shr    edx,0x8
c001c7a2:	83 e2 0f             	and    edx,0xf
c001c7a5:	4a                   	dec    edx
c001c7a6:	75 32                	jne    c001c7da <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c7a8:	83 e0 0f             	and    eax,0xf
c001c7ab:	83 f8 03             	cmp    eax,0x3
c001c7ae:	75 2a                	jne    c001c7da <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c7b0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c7b3:	b8 02 00 00 00       	mov    eax,0x2
c001c7b8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c7be:	74 1c                	je     c001c7dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c7c0:	b8 04 00 00 00       	mov    eax,0x4
c001c7c5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c7cb:	74 0f                	je     c001c7dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c7cd:	31 c0                	xor    eax,eax
c001c7cf:	83 fa 03             	cmp    edx,0x3
c001c7d2:	0f 94 c0             	sete   al
c001c7d5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c7d9:	c3                   	ret    
c001c7da:	31 c0                	xor    eax,eax
c001c7dc:	c3                   	ret    
c001c7dd:	90                   	nop

c001c7de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c7de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c7e5:	0f ba e2 0f          	bt     edx,0xf
c001c7e9:	72 f7                	jb     c001c7e2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c7eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c7ee:	83 ca 10             	or     edx,0x10
c001c7f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c7f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c7f7:	83 ca 01             	or     edx,0x1
c001c7fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c7fd:	c3                   	ret    

c001c7fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c7fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c802:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c805:	83 e2 fe             	and    edx,0xfffffffe
c001c808:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c80b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c80e:	83 e2 ef             	and    edx,0xffffffef
c001c811:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c814:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c817:	0f ba e2 0e          	bt     edx,0xe
c001c81b:	72 f7                	jb     c001c814 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c81d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c820:	0f ba e2 0f          	bt     edx,0xf
c001c824:	72 ee                	jb     c001c814 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c826:	c3                   	ret    
c001c827:	90                   	nop

c001c828 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c828:	55                   	push   ebp
c001c829:	57                   	push   edi
c001c82a:	56                   	push   esi
c001c82b:	53                   	push   ebx
c001c82c:	83 ec 1c             	sub    esp,0x1c
c001c82f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c833:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c837:	53                   	push   ebx
c001c838:	56                   	push   esi
c001c839:	e8 c0 ff ff ff       	call   c001c7fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c83e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c842:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c848:	83 ec 0c             	sub    esp,0xc
c001c84b:	c1 e5 0a             	shl    ebp,0xa
c001c84e:	01 e8                	add    eax,ebp
c001c850:	89 03                	mov    DWORD PTR [ebx],eax
c001c852:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c854:	68 00 04 00 00       	push   0x400
c001c859:	6a 00                	push   0x0
c001c85b:	50                   	push   eax
c001c85c:	e8 8f 3c fe ff       	call   c00004f0 <memset>
c001c861:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c867:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c86b:	01 e8                	add    eax,ebp
c001c86d:	83 c4 1c             	add    esp,0x1c
c001c870:	89 03                	mov    DWORD PTR [ebx],eax
c001c872:	c1 e2 08             	shl    edx,0x8
c001c875:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c87c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c882:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c888:	01 f8                	add    eax,edi
c001c88a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c88d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c890:	68 00 01 00 00       	push   0x100
c001c895:	6a 00                	push   0x0
c001c897:	50                   	push   eax
c001c898:	e8 53 3c fe ff       	call   c00004f0 <memset>
c001c89d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c8a3:	01 fa                	add    edx,edi
c001c8a5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c8a9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c8ac:	c1 e7 0d             	shl    edi,0xd
c001c8af:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c8b6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c8bc:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c8c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c8c6:	31 ff                	xor    edi,edi
c001c8c8:	83 c4 10             	add    esp,0x10
c001c8cb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c8d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8d5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c8db:	83 c5 20             	add    ebp,0x20
c001c8de:	01 f8                	add    eax,edi
c001c8e0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c8e3:	52                   	push   edx
c001c8e4:	68 00 01 00 00       	push   0x100
c001c8e9:	6a 00                	push   0x0
c001c8eb:	50                   	push   eax
c001c8ec:	e8 ff 3b fe ff       	call   c00004f0 <memset>
c001c8f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c8f5:	83 c4 10             	add    esp,0x10
c001c8f8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c8fe:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c905:	01 f8                	add    eax,edi
c001c907:	81 c7 00 01 00 00    	add    edi,0x100
c001c90d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c910:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c916:	75 b3                	jne    c001c8cb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c918:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c91f:	50                   	push   eax
c001c920:	50                   	push   eax
c001c921:	53                   	push   ebx
c001c922:	56                   	push   esi
c001c923:	e8 b6 fe ff ff       	call   c001c7de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c928:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c92f:	83 c4 2c             	add    esp,0x2c
c001c932:	5b                   	pop    ebx
c001c933:	5e                   	pop    esi
c001c934:	5f                   	pop    edi
c001c935:	5d                   	pop    ebp
c001c936:	c3                   	ret    
c001c937:	90                   	nop

c001c938 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c938:	55                   	push   ebp
c001c939:	57                   	push   edi
c001c93a:	56                   	push   esi
c001c93b:	53                   	push   ebx
c001c93c:	31 db                	xor    ebx,ebx
c001c93e:	83 ec 0c             	sub    esp,0xc
c001c941:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c945:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c949:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c94c:	f7 c7 01 00 00 00    	test   edi,0x1
c001c952:	74 7a                	je     c001c9ce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c954:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c958:	89 d8                	mov    eax,ebx
c001c95a:	c1 e0 07             	shl    eax,0x7
c001c95d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c964:	55                   	push   ebp
c001c965:	56                   	push   esi
c001c966:	e8 2b fe ff ff       	call   c001c796 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c96b:	5a                   	pop    edx
c001c96c:	83 f8 01             	cmp    eax,0x1
c001c96f:	59                   	pop    ecx
c001c970:	75 21                	jne    c001c993 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c972:	50                   	push   eax
c001c973:	53                   	push   ebx
c001c974:	55                   	push   ebp
c001c975:	56                   	push   esi
c001c976:	e8 ad fe ff ff       	call   c001c828 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c97b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c982:	e8 2f b1 fe ff       	call   c0007ab6 <malloc>
c001c987:	89 c5                	mov    ebp,eax
c001c989:	89 04 24             	mov    DWORD PTR [esp],eax
c001c98c:	e8 99 10 00 00       	call   c001da2a <SATA::SATA()>
c001c991:	eb 24                	jmp    c001c9b7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c993:	83 f8 04             	cmp    eax,0x4
c001c996:	75 36                	jne    c001c9ce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c998:	51                   	push   ecx
c001c999:	53                   	push   ebx
c001c99a:	55                   	push   ebp
c001c99b:	56                   	push   esi
c001c99c:	e8 87 fe ff ff       	call   c001c828 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c9a1:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c9a8:	e8 09 b1 fe ff       	call   c0007ab6 <malloc>
c001c9ad:	89 c5                	mov    ebp,eax
c001c9af:	89 04 24             	mov    DWORD PTR [esp],eax
c001c9b2:	e8 d5 17 00 00       	call   c001e18c <SATAPI::SATAPI()>
c001c9b7:	58                   	pop    eax
c001c9b8:	5a                   	pop    edx
c001c9b9:	55                   	push   ebp
c001c9ba:	56                   	push   esi
c001c9bb:	e8 52 fe fe ff       	call   c000c812 <Device::addChild(Device*)>
c001c9c0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c9c3:	56                   	push   esi
c001c9c4:	6a 00                	push   0x0
c001c9c6:	53                   	push   ebx
c001c9c7:	55                   	push   ebp
c001c9c8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c9cb:	83 c4 20             	add    esp,0x20
c001c9ce:	d1 ef                	shr    edi,1
c001c9d0:	43                   	inc    ebx
c001c9d1:	83 fb 20             	cmp    ebx,0x20
c001c9d4:	0f 85 72 ff ff ff    	jne    c001c94c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c9da:	83 c4 0c             	add    esp,0xc
c001c9dd:	5b                   	pop    ebx
c001c9de:	5e                   	pop    esi
c001c9df:	5f                   	pop    edi
c001c9e0:	5d                   	pop    ebp
c001c9e1:	c3                   	ret    

c001c9e2 <SATABus::open(int, int, void*)>:
c001c9e2:	83 ec 14             	sub    esp,0x14
c001c9e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c9e9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c9ef:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c9f5:	52                   	push   edx
c001c9f6:	50                   	push   eax
c001c9f7:	e8 3c ff ff ff       	call   c001c938 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c9fc:	31 c0                	xor    eax,eax
c001c9fe:	83 c4 1c             	add    esp,0x1c
c001ca01:	c3                   	ret    

c001ca02 <ATA::close(int, int, void*)>:
c001ca02:	83 ec 0c             	sub    esp,0xc
c001ca05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca09:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca0f:	85 c0                	test   eax,eax
c001ca11:	74 0c                	je     c001ca1f <ATA::close(int, int, void*)+0x1d>
c001ca13:	83 ec 0c             	sub    esp,0xc
c001ca16:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca18:	50                   	push   eax
c001ca19:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca1c:	83 c4 10             	add    esp,0x10
c001ca1f:	31 c0                	xor    eax,eax
c001ca21:	83 c4 0c             	add    esp,0xc
c001ca24:	c3                   	ret    
c001ca25:	90                   	nop

c001ca26 <ATA::powerSaving(PowerSavingLevel)>:
c001ca26:	c3                   	ret    
c001ca27:	90                   	nop

c001ca28 <ATA::ATA()>:
c001ca28:	83 ec 0c             	sub    esp,0xc
c001ca2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca2f:	83 ec 04             	sub    esp,0x4
c001ca32:	68 00 02 00 00       	push   0x200
c001ca37:	68 fd 30 02 c0       	push   0xc00230fd
c001ca3c:	50                   	push   eax
c001ca3d:	e8 9c 01 ff ff       	call   c000cbde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ca42:	83 c4 10             	add    esp,0x10
c001ca45:	ba 70 30 02 c0       	mov    edx,0xc0023070
c001ca4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca4e:	89 10                	mov    DWORD PTR [eax],edx
c001ca50:	90                   	nop
c001ca51:	83 c4 0c             	add    esp,0xc
c001ca54:	c3                   	ret    
c001ca55:	90                   	nop

c001ca56 <ATA::flush(bool)>:
c001ca56:	53                   	push   ebx
c001ca57:	83 ec 08             	sub    esp,0x8
c001ca5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ca63:	83 f8 01             	cmp    eax,0x1
c001ca66:	19 c0                	sbb    eax,eax
c001ca68:	83 e0 fd             	and    eax,0xfffffffd
c001ca6b:	05 ea 00 00 00       	add    eax,0xea
c001ca70:	50                   	push   eax
c001ca71:	6a 07                	push   0x7
c001ca73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca7a:	50                   	push   eax
c001ca7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca81:	e8 16 f1 ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca86:	83 c4 0c             	add    esp,0xc
c001ca89:	6a 00                	push   0x0
c001ca8b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca92:	50                   	push   eax
c001ca93:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca99:	e8 e6 fb ff ff       	call   c001c684 <IDE::polling(unsigned char, unsigned int)>
c001ca9e:	83 c4 18             	add    esp,0x18
c001caa1:	5b                   	pop    ebx
c001caa2:	c3                   	ret    
c001caa3:	90                   	nop

c001caa4 <ATA::readyForCommand()>:
c001caa4:	56                   	push   esi
c001caa5:	53                   	push   ebx
c001caa6:	53                   	push   ebx
c001caa7:	31 db                	xor    ebx,ebx
c001caa9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001caad:	51                   	push   ecx
c001caae:	6a 0c                	push   0xc
c001cab0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cab7:	50                   	push   eax
c001cab8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cabe:	e8 99 f1 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001cac3:	83 c4 10             	add    esp,0x10
c001cac6:	a8 88                	test   al,0x88
c001cac8:	74 1f                	je     c001cae9 <ATA::readyForCommand()+0x45>
c001caca:	43                   	inc    ebx
c001cacb:	83 fb 63             	cmp    ebx,0x63
c001cace:	7e dd                	jle    c001caad <ATA::readyForCommand()+0x9>
c001cad0:	83 ec 0c             	sub    esp,0xc
c001cad3:	6a 0a                	push   0xa
c001cad5:	e8 26 97 ff ff       	call   c0016200 <milliTenthSleep(unsigned int)>
c001cada:	83 c4 10             	add    esp,0x10
c001cadd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cae3:	75 c8                	jne    c001caad <ATA::readyForCommand()+0x9>
c001cae5:	31 c0                	xor    eax,eax
c001cae7:	eb 02                	jmp    c001caeb <ATA::readyForCommand()+0x47>
c001cae9:	b0 01                	mov    al,0x1
c001caeb:	5a                   	pop    edx
c001caec:	5b                   	pop    ebx
c001caed:	5e                   	pop    esi
c001caee:	c3                   	ret    
c001caef:	90                   	nop

c001caf0 <ATA::access(unsigned long long, int, void*, bool)>:
c001caf0:	55                   	push   ebp
c001caf1:	57                   	push   edi
c001caf2:	56                   	push   esi
c001caf3:	53                   	push   ebx
c001caf4:	83 ec 2c             	sub    esp,0x2c
c001caf7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cafb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001caff:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cb03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cb0b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cb0f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cb13:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cb19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb1d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cb23:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cb27:	c1 e0 06             	shl    eax,0x6
c001cb2a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cb32:	74 5d                	je     c001cb91 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001cb34:	89 fa                	mov    edx,edi
c001cb36:	89 f0                	mov    eax,esi
c001cb38:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001cb3c:	c1 ea 1c             	shr    edx,0x1c
c001cb3f:	89 d1                	mov    ecx,edx
c001cb41:	09 c1                	or     ecx,eax
c001cb43:	74 25                	je     c001cb6a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cb45:	31 ed                	xor    ebp,ebp
c001cb47:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cb4e:	89 fa                	mov    edx,edi
c001cb50:	89 f0                	mov    eax,esi
c001cb52:	0f ad d0             	shrd   eax,edx,cl
c001cb55:	d3 ea                	shr    edx,cl
c001cb57:	f6 c1 20             	test   cl,0x20
c001cb5a:	74 02                	je     c001cb5e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cb5c:	89 d0                	mov    eax,edx
c001cb5e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cb62:	45                   	inc    ebp
c001cb63:	83 fd 06             	cmp    ebp,0x6
c001cb66:	75 df                	jne    c001cb47 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cb68:	eb 76                	jmp    c001cbe0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001cb6a:	89 f0                	mov    eax,esi
c001cb6c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cb71:	89 fa                	mov    edx,edi
c001cb73:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cb7a:	0f ac d0 10          	shrd   eax,edx,0x10
c001cb7e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cb83:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cb87:	c1 ee 18             	shr    esi,0x18
c001cb8a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001cb8f:	eb 56                	jmp    c001cbe7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cb91:	6a 00                	push   0x0
c001cb93:	6a 3f                	push   0x3f
c001cb95:	57                   	push   edi
c001cb96:	56                   	push   esi
c001cb97:	e8 a4 2a 00 00       	call   c001f640 <__umoddi3>
c001cb9c:	83 c4 10             	add    esp,0x10
c001cb9f:	40                   	inc    eax
c001cba0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cba4:	6a 00                	push   0x0
c001cba6:	68 f0 03 00 00       	push   0x3f0
c001cbab:	57                   	push   edi
c001cbac:	56                   	push   esi
c001cbad:	e8 8e 29 00 00       	call   c001f540 <__udivdi3>
c001cbb2:	83 c4 10             	add    esp,0x10
c001cbb5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cbba:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cbc1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cbc6:	6a 00                	push   0x0
c001cbc8:	6a 3f                	push   0x3f
c001cbca:	57                   	push   edi
c001cbcb:	56                   	push   esi
c001cbcc:	e8 6f 29 00 00       	call   c001f540 <__udivdi3>
c001cbd1:	83 c4 10             	add    esp,0x10
c001cbd4:	83 e0 0f             	and    eax,0xf
c001cbd7:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001cbdc:	89 c6                	mov    esi,eax
c001cbde:	eb 07                	jmp    c001cbe7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cbe0:	31 f6                	xor    esi,esi
c001cbe2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001cbe7:	bf 01 00 00 00       	mov    edi,0x1
c001cbec:	50                   	push   eax
c001cbed:	6a 00                	push   0x0
c001cbef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbf6:	50                   	push   eax
c001cbf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cbfb:	e8 a4 f1 ff ff       	call   c001bda4 <IDE::enableIRQs(unsigned char, bool)>
c001cc00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc03:	e8 9c fe ff ff       	call   c001caa4 <ATA::readyForCommand()>
c001cc08:	83 c4 10             	add    esp,0x10
c001cc0b:	84 c0                	test   al,al
c001cc0d:	0f 84 69 02 00 00    	je     c001ce7c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cc13:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cc19:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cc1f:	c1 e0 04             	shl    eax,0x4
c001cc22:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cc29:	09 c6                	or     esi,eax
c001cc2b:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001cc30:	75 05                	jne    c001cc37 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cc32:	83 ce a0             	or     esi,0xffffffa0
c001cc35:	eb 03                	jmp    c001cc3a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cc37:	83 ce e0             	or     esi,0xffffffe0
c001cc3a:	89 f0                	mov    eax,esi
c001cc3c:	0f b6 f0             	movzx  esi,al
c001cc3f:	56                   	push   esi
c001cc40:	6a 06                	push   0x6
c001cc42:	51                   	push   ecx
c001cc43:	52                   	push   edx
c001cc44:	e8 53 ef ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc49:	83 c4 10             	add    esp,0x10
c001cc4c:	6a 00                	push   0x0
c001cc4e:	6a 01                	push   0x1
c001cc50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc57:	50                   	push   eax
c001cc58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc5e:	e8 39 ef ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc63:	83 c4 10             	add    esp,0x10
c001cc66:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001cc6b:	83 f8 02             	cmp    eax,0x2
c001cc6e:	75 6e                	jne    c001ccde <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001cc70:	6a 00                	push   0x0
c001cc72:	6a 08                	push   0x8
c001cc74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc7b:	50                   	push   eax
c001cc7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc82:	e8 15 ef ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc87:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cc8c:	50                   	push   eax
c001cc8d:	6a 09                	push   0x9
c001cc8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc96:	50                   	push   eax
c001cc97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc9d:	e8 fa ee ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cca2:	83 c4 20             	add    esp,0x20
c001cca5:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ccaa:	50                   	push   eax
c001ccab:	6a 0a                	push   0xa
c001ccad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccb4:	50                   	push   eax
c001ccb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccbb:	e8 dc ee ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccc0:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ccc5:	50                   	push   eax
c001ccc6:	6a 0b                	push   0xb
c001ccc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cccf:	50                   	push   eax
c001ccd0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccd6:	e8 c1 ee ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccdb:	83 c4 20             	add    esp,0x20
c001ccde:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cce3:	50                   	push   eax
c001cce4:	6a 02                	push   0x2
c001cce6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cced:	50                   	push   eax
c001ccee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccf4:	e8 a3 ee ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccf9:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ccfe:	50                   	push   eax
c001ccff:	6a 03                	push   0x3
c001cd01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd08:	50                   	push   eax
c001cd09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd0f:	e8 88 ee ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd14:	83 c4 20             	add    esp,0x20
c001cd17:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cd1c:	50                   	push   eax
c001cd1d:	6a 04                	push   0x4
c001cd1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd26:	50                   	push   eax
c001cd27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd2d:	e8 6a ee ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd32:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd37:	50                   	push   eax
c001cd38:	6a 05                	push   0x5
c001cd3a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd41:	50                   	push   eax
c001cd42:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd48:	e8 4f ee ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd4d:	83 c4 20             	add    esp,0x20
c001cd50:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cd55:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cd5a:	74 11                	je     c001cd6d <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cd5c:	b8 30 00 00 00       	mov    eax,0x30
c001cd61:	83 fa 02             	cmp    edx,0x2
c001cd64:	75 16                	jne    c001cd7c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cd66:	b8 34 00 00 00       	mov    eax,0x34
c001cd6b:	eb 0f                	jmp    c001cd7c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cd6d:	b8 20 00 00 00       	mov    eax,0x20
c001cd72:	83 fa 02             	cmp    edx,0x2
c001cd75:	75 05                	jne    c001cd7c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cd77:	b8 24 00 00 00       	mov    eax,0x24
c001cd7c:	50                   	push   eax
c001cd7d:	6a 07                	push   0x7
c001cd7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd86:	50                   	push   eax
c001cd87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd8d:	e8 0a ee ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd92:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cd96:	83 c4 10             	add    esp,0x10
c001cd99:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cd9e:	85 f6                	test   esi,esi
c001cda0:	0f 84 b3 00 00 00    	je     c001ce59 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cda6:	50                   	push   eax
c001cda7:	6a 01                	push   0x1
c001cda9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdb0:	50                   	push   eax
c001cdb1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdb7:	e8 c8 f8 ff ff       	call   c001c684 <IDE::polling(unsigned char, unsigned int)>
c001cdbc:	83 c4 10             	add    esp,0x10
c001cdbf:	0f b6 f8             	movzx  edi,al
c001cdc2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cdc8:	85 ff                	test   edi,edi
c001cdca:	74 1d                	je     c001cde9 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cdcc:	57                   	push   edi
c001cdcd:	0f b6 d2             	movzx  edx,dl
c001cdd0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cdd7:	50                   	push   eax
c001cdd8:	52                   	push   edx
c001cdd9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cddf:	e8 e6 f7 ff ff       	call   c001c5ca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cde4:	e9 90 00 00 00       	jmp    c001ce79 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cde9:	85 ed                	test   ebp,ebp
c001cdeb:	74 3b                	je     c001ce28 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cded:	31 c9                	xor    ecx,ecx
c001cdef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cdf3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cdf7:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cdfb:	50                   	push   eax
c001cdfc:	50                   	push   eax
c001cdfd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce04:	50                   	push   eax
c001ce05:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce0b:	e8 7a ed ff ff       	call   c001bb8a <IDE::getBase(unsigned char)>
c001ce10:	89 c2                	mov    edx,eax
c001ce12:	89 f8                	mov    eax,edi
c001ce14:	66 ef                	out    dx,ax
c001ce16:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ce1a:	83 c4 10             	add    esp,0x10
c001ce1d:	41                   	inc    ecx
c001ce1e:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001ce24:	75 c9                	jne    c001cdef <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001ce26:	eb 23                	jmp    c001ce4b <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001ce28:	0f b6 d2             	movzx  edx,dl
c001ce2b:	51                   	push   ecx
c001ce2c:	51                   	push   ecx
c001ce2d:	52                   	push   edx
c001ce2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce34:	e8 51 ed ff ff       	call   c001bb8a <IDE::getBase(unsigned char)>
c001ce39:	b9 00 01 00 00       	mov    ecx,0x100
c001ce3e:	89 c2                	mov    edx,eax
c001ce40:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ce44:	fc                   	cld    
c001ce45:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ce48:	83 c4 10             	add    esp,0x10
c001ce4b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ce53:	4e                   	dec    esi
c001ce54:	e9 45 ff ff ff       	jmp    c001cd9e <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001ce59:	31 ff                	xor    edi,edi
c001ce5b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ce60:	74 1a                	je     c001ce7c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001ce62:	50                   	push   eax
c001ce63:	50                   	push   eax
c001ce64:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001ce69:	83 f8 02             	cmp    eax,0x2
c001ce6c:	0f 94 c0             	sete   al
c001ce6f:	0f b6 c0             	movzx  eax,al
c001ce72:	50                   	push   eax
c001ce73:	53                   	push   ebx
c001ce74:	e8 dd fb ff ff       	call   c001ca56 <ATA::flush(bool)>
c001ce79:	83 c4 10             	add    esp,0x10
c001ce7c:	83 c4 2c             	add    esp,0x2c
c001ce7f:	89 f8                	mov    eax,edi
c001ce81:	5b                   	pop    ebx
c001ce82:	5e                   	pop    esi
c001ce83:	5f                   	pop    edi
c001ce84:	5d                   	pop    ebp
c001ce85:	c3                   	ret    

c001ce86 <ATA::detectCHS()>:
c001ce86:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ce8a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ce90:	c1 e0 06             	shl    eax,0x6
c001ce93:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ce99:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cea3:	c7 44 24 04 54 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023054
c001ceab:	e9 bb 45 ff ff       	jmp    c001146b <KePanic(char const*)>

c001ceb0 <ATA::open(int, int, void*)>:
c001ceb0:	53                   	push   ebx
c001ceb1:	83 ec 08             	sub    esp,0x8
c001ceb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ceb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cebc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cec0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cec6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cecc:	c1 e0 06             	shl    eax,0x6
c001cecf:	01 d0                	add    eax,edx
c001ced1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ced8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cede:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cee5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ceef:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cef5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cefc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cf03:	75 0c                	jne    c001cf11 <ATA::open(int, int, void*)+0x61>
c001cf05:	83 ec 0c             	sub    esp,0xc
c001cf08:	53                   	push   ebx
c001cf09:	e8 78 ff ff ff       	call   c001ce86 <ATA::detectCHS()>
c001cf0e:	83 c4 10             	add    esp,0x10
c001cf11:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cf17:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cf1d:	c1 e0 06             	shl    eax,0x6
c001cf20:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cf27:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cf31:	d1 e8                	shr    eax,1
c001cf33:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cf39:	6a 04                	push   0x4
c001cf3b:	6a 0c                	push   0xc
c001cf3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf44:	50                   	push   eax
c001cf45:	52                   	push   edx
c001cf46:	e8 51 ec ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf4b:	90                   	nop
c001cf4c:	90                   	nop
c001cf4d:	6a 00                	push   0x0
c001cf4f:	6a 0c                	push   0xc
c001cf51:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf58:	50                   	push   eax
c001cf59:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf5f:	e8 38 ec ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf64:	83 c4 14             	add    esp,0x14
c001cf67:	53                   	push   ebx
c001cf68:	e8 d9 fc fe ff       	call   c000cc46 <PhysicalDisk::startCache()>
c001cf6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf70:	e8 15 0f ff ff       	call   c000de8a <createPartitionsForDisk(PhysicalDisk*)>
c001cf75:	31 c0                	xor    eax,eax
c001cf77:	83 c4 18             	add    esp,0x18
c001cf7a:	5b                   	pop    ebx
c001cf7b:	c3                   	ret    

c001cf7c <combineCharAndColour(char, unsigned char)>:
c001cf7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cf81:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cf87:	c1 e0 08             	shl    eax,0x8
c001cf8a:	09 d0                	or     eax,edx
c001cf8c:	c3                   	ret    

c001cf8d <combineColours(unsigned char, unsigned char)>:
c001cf8d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cf92:	c1 e0 04             	shl    eax,0x4
c001cf95:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cf99:	c3                   	ret    

c001cf9a <ATA::read(unsigned long long, int, void*)>:
c001cf9a:	55                   	push   ebp
c001cf9b:	57                   	push   edi
c001cf9c:	56                   	push   esi
c001cf9d:	be 04 00 00 00       	mov    esi,0x4
c001cfa2:	53                   	push   ebx
c001cfa3:	83 ec 0c             	sub    esp,0xc
c001cfa6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cfaa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfae:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cfb1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cfb5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cfb9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cfbf:	0f 87 a1 01 00 00    	ja     c001d166 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cfc5:	be 06 00 00 00       	mov    esi,0x6
c001cfca:	85 c9                	test   ecx,ecx
c001cfcc:	0f 84 94 01 00 00    	je     c001d166 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cfd2:	55                   	push   ebp
c001cfd3:	55                   	push   ebp
c001cfd4:	6a 00                	push   0x0
c001cfd6:	51                   	push   ecx
c001cfd7:	53                   	push   ebx
c001cfd8:	52                   	push   edx
c001cfd9:	50                   	push   eax
c001cfda:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cfde:	e8 0d fb ff ff       	call   c001caf0 <ATA::access(unsigned long long, int, void*, bool)>
c001cfe3:	83 c4 20             	add    esp,0x20
c001cfe6:	89 c6                	mov    esi,eax
c001cfe8:	85 c0                	test   eax,eax
c001cfea:	0f 85 71 01 00 00    	jne    c001d161 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cff0:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001cff6:	89 da                	mov    edx,ebx
c001cff8:	50                   	push   eax
c001cff9:	bd 10 27 00 00       	mov    ebp,0x2710
c001cffe:	50                   	push   eax
c001cfff:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d005:	6a 0f                	push   0xf
c001d007:	6a 00                	push   0x0
c001d009:	e8 7f ff ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001d00e:	59                   	pop    ecx
c001d00f:	b9 0a 00 00 00       	mov    ecx,0xa
c001d014:	5b                   	pop    ebx
c001d015:	0f b6 d8             	movzx  ebx,al
c001d018:	89 d0                	mov    eax,edx
c001d01a:	53                   	push   ebx
c001d01b:	99                   	cdq    
c001d01c:	f7 fd                	idiv   ebp
c001d01e:	99                   	cdq    
c001d01f:	f7 f9                	idiv   ecx
c001d021:	83 c2 30             	add    edx,0x30
c001d024:	0f b6 d2             	movzx  edx,dl
c001d027:	52                   	push   edx
c001d028:	e8 4f ff ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d02d:	5f                   	pop    edi
c001d02e:	bf e8 03 00 00       	mov    edi,0x3e8
c001d033:	5a                   	pop    edx
c001d034:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d03a:	53                   	push   ebx
c001d03b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d040:	99                   	cdq    
c001d041:	f7 ff                	idiv   edi
c001d043:	99                   	cdq    
c001d044:	f7 f9                	idiv   ecx
c001d046:	8d 42 30             	lea    eax,[edx+0x30]
c001d049:	0f b6 c0             	movzx  eax,al
c001d04c:	50                   	push   eax
c001d04d:	e8 2a ff ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d052:	5f                   	pop    edi
c001d053:	bf 64 00 00 00       	mov    edi,0x64
c001d058:	5a                   	pop    edx
c001d059:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d05f:	53                   	push   ebx
c001d060:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d065:	99                   	cdq    
c001d066:	f7 ff                	idiv   edi
c001d068:	99                   	cdq    
c001d069:	f7 f9                	idiv   ecx
c001d06b:	8d 42 30             	lea    eax,[edx+0x30]
c001d06e:	0f b6 c0             	movzx  eax,al
c001d071:	50                   	push   eax
c001d072:	e8 05 ff ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d077:	5a                   	pop    edx
c001d078:	5a                   	pop    edx
c001d079:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d07f:	53                   	push   ebx
c001d080:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d085:	99                   	cdq    
c001d086:	f7 f9                	idiv   ecx
c001d088:	99                   	cdq    
c001d089:	f7 f9                	idiv   ecx
c001d08b:	8d 42 30             	lea    eax,[edx+0x30]
c001d08e:	0f b6 c0             	movzx  eax,al
c001d091:	50                   	push   eax
c001d092:	e8 e5 fe ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d097:	5a                   	pop    edx
c001d098:	5a                   	pop    edx
c001d099:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d09f:	53                   	push   ebx
c001d0a0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d0a5:	99                   	cdq    
c001d0a6:	f7 f9                	idiv   ecx
c001d0a8:	83 c2 30             	add    edx,0x30
c001d0ab:	0f b6 d2             	movzx  edx,dl
c001d0ae:	52                   	push   edx
c001d0af:	e8 c8 fe ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d0b4:	5a                   	pop    edx
c001d0b5:	5a                   	pop    edx
c001d0b6:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d0bc:	53                   	push   ebx
c001d0bd:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d0c2:	99                   	cdq    
c001d0c3:	f7 fd                	idiv   ebp
c001d0c5:	99                   	cdq    
c001d0c6:	f7 f9                	idiv   ecx
c001d0c8:	8d 42 30             	lea    eax,[edx+0x30]
c001d0cb:	0f b6 c0             	movzx  eax,al
c001d0ce:	50                   	push   eax
c001d0cf:	e8 a8 fe ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d0d4:	5d                   	pop    ebp
c001d0d5:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d0da:	5a                   	pop    edx
c001d0db:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d0e1:	53                   	push   ebx
c001d0e2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d0e7:	99                   	cdq    
c001d0e8:	f7 fd                	idiv   ebp
c001d0ea:	99                   	cdq    
c001d0eb:	f7 f9                	idiv   ecx
c001d0ed:	8d 42 30             	lea    eax,[edx+0x30]
c001d0f0:	0f b6 c0             	movzx  eax,al
c001d0f3:	50                   	push   eax
c001d0f4:	e8 83 fe ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d0f9:	5d                   	pop    ebp
c001d0fa:	5a                   	pop    edx
c001d0fb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d101:	53                   	push   ebx
c001d102:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d107:	99                   	cdq    
c001d108:	f7 ff                	idiv   edi
c001d10a:	99                   	cdq    
c001d10b:	f7 f9                	idiv   ecx
c001d10d:	8d 42 30             	lea    eax,[edx+0x30]
c001d110:	0f b6 c0             	movzx  eax,al
c001d113:	50                   	push   eax
c001d114:	e8 63 fe ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d119:	5f                   	pop    edi
c001d11a:	5d                   	pop    ebp
c001d11b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d121:	53                   	push   ebx
c001d122:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d127:	99                   	cdq    
c001d128:	f7 f9                	idiv   ecx
c001d12a:	99                   	cdq    
c001d12b:	f7 f9                	idiv   ecx
c001d12d:	8d 42 30             	lea    eax,[edx+0x30]
c001d130:	0f b6 c0             	movzx  eax,al
c001d133:	50                   	push   eax
c001d134:	e8 43 fe ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d139:	5a                   	pop    edx
c001d13a:	5f                   	pop    edi
c001d13b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d141:	53                   	push   ebx
c001d142:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d147:	99                   	cdq    
c001d148:	f7 f9                	idiv   ecx
c001d14a:	83 c2 30             	add    edx,0x30
c001d14d:	0f b6 d2             	movzx  edx,dl
c001d150:	52                   	push   edx
c001d151:	e8 26 fe ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d156:	83 c4 10             	add    esp,0x10
c001d159:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d15f:	eb 05                	jmp    c001d166 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d161:	be 01 00 00 00       	mov    esi,0x1
c001d166:	83 c4 0c             	add    esp,0xc
c001d169:	89 f0                	mov    eax,esi
c001d16b:	5b                   	pop    ebx
c001d16c:	5e                   	pop    esi
c001d16d:	5f                   	pop    edi
c001d16e:	5d                   	pop    ebp
c001d16f:	c3                   	ret    

c001d170 <ATA::write(unsigned long long, int, void*)>:
c001d170:	55                   	push   ebp
c001d171:	57                   	push   edi
c001d172:	56                   	push   esi
c001d173:	be 04 00 00 00       	mov    esi,0x4
c001d178:	53                   	push   ebx
c001d179:	83 ec 0c             	sub    esp,0xc
c001d17c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d180:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d184:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d187:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d18b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d18f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d195:	0f 87 9c 01 00 00    	ja     c001d337 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d19b:	be 06 00 00 00       	mov    esi,0x6
c001d1a0:	85 c9                	test   ecx,ecx
c001d1a2:	0f 84 8f 01 00 00    	je     c001d337 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d1a8:	55                   	push   ebp
c001d1a9:	55                   	push   ebp
c001d1aa:	6a 01                	push   0x1
c001d1ac:	51                   	push   ecx
c001d1ad:	53                   	push   ebx
c001d1ae:	52                   	push   edx
c001d1af:	50                   	push   eax
c001d1b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d1b4:	e8 37 f9 ff ff       	call   c001caf0 <ATA::access(unsigned long long, int, void*, bool)>
c001d1b9:	83 c4 20             	add    esp,0x20
c001d1bc:	89 c6                	mov    esi,eax
c001d1be:	85 c0                	test   eax,eax
c001d1c0:	0f 85 6c 01 00 00    	jne    c001d332 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d1c6:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d1cc:	bd 10 27 00 00       	mov    ebp,0x2710
c001d1d1:	50                   	push   eax
c001d1d2:	50                   	push   eax
c001d1d3:	6a 0f                	push   0xf
c001d1d5:	6a 00                	push   0x0
c001d1d7:	e8 b1 fd ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001d1dc:	5a                   	pop    edx
c001d1dd:	0f b6 d8             	movzx  ebx,al
c001d1e0:	59                   	pop    ecx
c001d1e1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1e6:	53                   	push   ebx
c001d1e7:	b9 0a 00 00 00       	mov    ecx,0xa
c001d1ec:	99                   	cdq    
c001d1ed:	f7 fd                	idiv   ebp
c001d1ef:	99                   	cdq    
c001d1f0:	f7 f9                	idiv   ecx
c001d1f2:	8d 42 30             	lea    eax,[edx+0x30]
c001d1f5:	0f b6 c0             	movzx  eax,al
c001d1f8:	50                   	push   eax
c001d1f9:	e8 7e fd ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d1fe:	5f                   	pop    edi
c001d1ff:	bf e8 03 00 00       	mov    edi,0x3e8
c001d204:	5a                   	pop    edx
c001d205:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d20b:	53                   	push   ebx
c001d20c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d211:	99                   	cdq    
c001d212:	f7 ff                	idiv   edi
c001d214:	99                   	cdq    
c001d215:	f7 f9                	idiv   ecx
c001d217:	8d 42 30             	lea    eax,[edx+0x30]
c001d21a:	0f b6 c0             	movzx  eax,al
c001d21d:	50                   	push   eax
c001d21e:	e8 59 fd ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d223:	5f                   	pop    edi
c001d224:	bf 64 00 00 00       	mov    edi,0x64
c001d229:	5a                   	pop    edx
c001d22a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d230:	53                   	push   ebx
c001d231:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d236:	99                   	cdq    
c001d237:	f7 ff                	idiv   edi
c001d239:	99                   	cdq    
c001d23a:	f7 f9                	idiv   ecx
c001d23c:	8d 42 30             	lea    eax,[edx+0x30]
c001d23f:	0f b6 c0             	movzx  eax,al
c001d242:	50                   	push   eax
c001d243:	e8 34 fd ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d248:	5a                   	pop    edx
c001d249:	5a                   	pop    edx
c001d24a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d250:	53                   	push   ebx
c001d251:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d256:	99                   	cdq    
c001d257:	f7 f9                	idiv   ecx
c001d259:	99                   	cdq    
c001d25a:	f7 f9                	idiv   ecx
c001d25c:	8d 42 30             	lea    eax,[edx+0x30]
c001d25f:	0f b6 c0             	movzx  eax,al
c001d262:	50                   	push   eax
c001d263:	e8 14 fd ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d268:	5a                   	pop    edx
c001d269:	5a                   	pop    edx
c001d26a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d270:	53                   	push   ebx
c001d271:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d276:	99                   	cdq    
c001d277:	f7 f9                	idiv   ecx
c001d279:	8d 42 30             	lea    eax,[edx+0x30]
c001d27c:	0f b6 c0             	movzx  eax,al
c001d27f:	50                   	push   eax
c001d280:	e8 f7 fc ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d285:	5a                   	pop    edx
c001d286:	5a                   	pop    edx
c001d287:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d28d:	53                   	push   ebx
c001d28e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d293:	99                   	cdq    
c001d294:	f7 fd                	idiv   ebp
c001d296:	99                   	cdq    
c001d297:	f7 f9                	idiv   ecx
c001d299:	8d 42 30             	lea    eax,[edx+0x30]
c001d29c:	0f b6 c0             	movzx  eax,al
c001d29f:	50                   	push   eax
c001d2a0:	e8 d7 fc ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d2a5:	5d                   	pop    ebp
c001d2a6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d2ab:	5a                   	pop    edx
c001d2ac:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d2b2:	53                   	push   ebx
c001d2b3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2b8:	99                   	cdq    
c001d2b9:	f7 fd                	idiv   ebp
c001d2bb:	99                   	cdq    
c001d2bc:	f7 f9                	idiv   ecx
c001d2be:	8d 42 30             	lea    eax,[edx+0x30]
c001d2c1:	0f b6 c0             	movzx  eax,al
c001d2c4:	50                   	push   eax
c001d2c5:	e8 b2 fc ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d2ca:	5d                   	pop    ebp
c001d2cb:	5a                   	pop    edx
c001d2cc:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d2d2:	53                   	push   ebx
c001d2d3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2d8:	99                   	cdq    
c001d2d9:	f7 ff                	idiv   edi
c001d2db:	99                   	cdq    
c001d2dc:	f7 f9                	idiv   ecx
c001d2de:	8d 42 30             	lea    eax,[edx+0x30]
c001d2e1:	0f b6 c0             	movzx  eax,al
c001d2e4:	50                   	push   eax
c001d2e5:	e8 92 fc ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d2ea:	5f                   	pop    edi
c001d2eb:	5d                   	pop    ebp
c001d2ec:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d2f2:	53                   	push   ebx
c001d2f3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2f8:	99                   	cdq    
c001d2f9:	f7 f9                	idiv   ecx
c001d2fb:	99                   	cdq    
c001d2fc:	f7 f9                	idiv   ecx
c001d2fe:	8d 42 30             	lea    eax,[edx+0x30]
c001d301:	0f b6 c0             	movzx  eax,al
c001d304:	50                   	push   eax
c001d305:	e8 72 fc ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d30a:	5a                   	pop    edx
c001d30b:	5f                   	pop    edi
c001d30c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d312:	53                   	push   ebx
c001d313:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d318:	99                   	cdq    
c001d319:	f7 f9                	idiv   ecx
c001d31b:	83 c2 30             	add    edx,0x30
c001d31e:	0f b6 d2             	movzx  edx,dl
c001d321:	52                   	push   edx
c001d322:	e8 55 fc ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001d327:	83 c4 10             	add    esp,0x10
c001d32a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d330:	eb 05                	jmp    c001d337 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d332:	be 01 00 00 00       	mov    esi,0x1
c001d337:	83 c4 0c             	add    esp,0xc
c001d33a:	89 f0                	mov    eax,esi
c001d33c:	5b                   	pop    ebx
c001d33d:	5e                   	pop    esi
c001d33e:	5f                   	pop    edi
c001d33f:	5d                   	pop    ebp
c001d340:	c3                   	ret    
c001d341:	90                   	nop

c001d342 <ATAPI::write(unsigned long long, int, void*)>:
c001d342:	b8 03 00 00 00       	mov    eax,0x3
c001d347:	c3                   	ret    

c001d348 <ATAPI::close(int, int, void*)>:
c001d348:	83 ec 0c             	sub    esp,0xc
c001d34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d34f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d355:	85 c0                	test   eax,eax
c001d357:	74 0c                	je     c001d365 <ATAPI::close(int, int, void*)+0x1d>
c001d359:	83 ec 0c             	sub    esp,0xc
c001d35c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d35e:	50                   	push   eax
c001d35f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d362:	83 c4 10             	add    esp,0x10
c001d365:	31 c0                	xor    eax,eax
c001d367:	83 c4 0c             	add    esp,0xc
c001d36a:	c3                   	ret    
c001d36b:	90                   	nop

c001d36c <ATAPI::ATAPI()>:
c001d36c:	83 ec 0c             	sub    esp,0xc
c001d36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d373:	83 ec 04             	sub    esp,0x4
c001d376:	68 00 08 00 00       	push   0x800
c001d37b:	68 9d 31 02 c0       	push   0xc002319d
c001d380:	50                   	push   eax
c001d381:	e8 58 f8 fe ff       	call   c000cbde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d386:	83 c4 10             	add    esp,0x10
c001d389:	ba b8 30 02 c0       	mov    edx,0xc00230b8
c001d38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d392:	89 10                	mov    DWORD PTR [eax],edx
c001d394:	90                   	nop
c001d395:	83 c4 0c             	add    esp,0xc
c001d398:	c3                   	ret    
c001d399:	90                   	nop

c001d39a <ATAPI::readyForCommand()>:
c001d39a:	56                   	push   esi
c001d39b:	53                   	push   ebx
c001d39c:	53                   	push   ebx
c001d39d:	31 db                	xor    ebx,ebx
c001d39f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d3a3:	51                   	push   ecx
c001d3a4:	6a 0c                	push   0xc
c001d3a6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d3ad:	50                   	push   eax
c001d3ae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d3b4:	e8 a3 e8 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001d3b9:	83 c4 10             	add    esp,0x10
c001d3bc:	a8 88                	test   al,0x88
c001d3be:	74 25                	je     c001d3e5 <ATAPI::readyForCommand()+0x4b>
c001d3c0:	43                   	inc    ebx
c001d3c1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d3c7:	7e da                	jle    c001d3a3 <ATAPI::readyForCommand()+0x9>
c001d3c9:	83 ec 0c             	sub    esp,0xc
c001d3cc:	68 5e 01 00 00       	push   0x15e
c001d3d1:	e8 2a 8e ff ff       	call   c0016200 <milliTenthSleep(unsigned int)>
c001d3d6:	83 c4 10             	add    esp,0x10
c001d3d9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d3df:	75 c2                	jne    c001d3a3 <ATAPI::readyForCommand()+0x9>
c001d3e1:	31 c0                	xor    eax,eax
c001d3e3:	eb 02                	jmp    c001d3e7 <ATAPI::readyForCommand()+0x4d>
c001d3e5:	b0 01                	mov    al,0x1
c001d3e7:	5a                   	pop    edx
c001d3e8:	5b                   	pop    ebx
c001d3e9:	5e                   	pop    esi
c001d3ea:	c3                   	ret    
c001d3eb:	90                   	nop

c001d3ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d3ec:	55                   	push   ebp
c001d3ed:	57                   	push   edi
c001d3ee:	56                   	push   esi
c001d3ef:	53                   	push   ebx
c001d3f0:	83 ec 20             	sub    esp,0x20
c001d3f3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d3f7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d3fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d3ff:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d403:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d407:	6a 01                	push   0x1
c001d409:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d410:	50                   	push   eax
c001d411:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d417:	e8 88 e9 ff ff       	call   c001bda4 <IDE::enableIRQs(unsigned char, bool)>
c001d41c:	5e                   	pop    esi
c001d41d:	58                   	pop    eax
c001d41e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d425:	50                   	push   eax
c001d426:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d42c:	e8 45 e7 ff ff       	call   c001bb76 <IDE::prepareInterrupt(unsigned char)>
c001d431:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d434:	e8 61 ff ff ff       	call   c001d39a <ATAPI::readyForCommand()>
c001d439:	83 c4 10             	add    esp,0x10
c001d43c:	84 c0                	test   al,al
c001d43e:	75 0a                	jne    c001d44a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d440:	bb 01 00 00 00       	mov    ebx,0x1
c001d445:	e9 60 02 00 00       	jmp    c001d6aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d44a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d450:	c1 e0 04             	shl    eax,0x4
c001d453:	0f b6 c0             	movzx  eax,al
c001d456:	50                   	push   eax
c001d457:	6a 06                	push   0x6
c001d459:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d460:	50                   	push   eax
c001d461:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d467:	e8 30 e7 ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d46c:	6a 00                	push   0x0
c001d46e:	6a 01                	push   0x1
c001d470:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d477:	50                   	push   eax
c001d478:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d47e:	e8 19 e7 ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d483:	83 c4 20             	add    esp,0x20
c001d486:	0f b6 c3             	movzx  eax,bl
c001d489:	0f b6 df             	movzx  ebx,bh
c001d48c:	50                   	push   eax
c001d48d:	6a 04                	push   0x4
c001d48f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d496:	50                   	push   eax
c001d497:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d49d:	e8 fa e6 ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4a2:	53                   	push   ebx
c001d4a3:	6a 05                	push   0x5
c001d4a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4ac:	50                   	push   eax
c001d4ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4b3:	e8 e4 e6 ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4b8:	83 c4 20             	add    esp,0x20
c001d4bb:	68 a0 00 00 00       	push   0xa0
c001d4c0:	6a 07                	push   0x7
c001d4c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4c9:	50                   	push   eax
c001d4ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4d0:	e8 c7 e6 ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4d5:	83 c4 0c             	add    esp,0xc
c001d4d8:	6a 01                	push   0x1
c001d4da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4e1:	50                   	push   eax
c001d4e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4e8:	e8 97 f1 ff ff       	call   c001c684 <IDE::polling(unsigned char, unsigned int)>
c001d4ed:	83 c4 10             	add    esp,0x10
c001d4f0:	0f b6 d8             	movzx  ebx,al
c001d4f3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d4f9:	85 db                	test   ebx,ebx
c001d4fb:	74 20                	je     c001d51d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d4fd:	53                   	push   ebx
c001d4fe:	0f b6 c0             	movzx  eax,al
c001d501:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d508:	52                   	push   edx
c001d509:	50                   	push   eax
c001d50a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d510:	e8 b5 f0 ff ff       	call   c001c5ca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d515:	83 c4 10             	add    esp,0x10
c001d518:	e9 8d 01 00 00       	jmp    c001d6aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d51d:	0f b6 c0             	movzx  eax,al
c001d520:	53                   	push   ebx
c001d521:	53                   	push   ebx
c001d522:	50                   	push   eax
c001d523:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d529:	e8 5c e6 ff ff       	call   c001bb8a <IDE::getBase(unsigned char)>
c001d52e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d532:	b9 06 00 00 00       	mov    ecx,0x6
c001d537:	89 c2                	mov    edx,eax
c001d539:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d53c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d540:	83 c4 10             	add    esp,0x10
c001d543:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d548:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d54c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d552:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d559:	85 db                	test   ebx,ebx
c001d55b:	0f 84 ec 00 00 00    	je     c001d64d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d561:	51                   	push   ecx
c001d562:	51                   	push   ecx
c001d563:	52                   	push   edx
c001d564:	50                   	push   eax
c001d565:	e8 a0 e7 ff ff       	call   c001bd0a <IDE::waitInterrupt(unsigned char)>
c001d56a:	83 c4 10             	add    esp,0x10
c001d56d:	84 c0                	test   al,al
c001d56f:	0f 84 cb fe ff ff    	je     c001d440 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d575:	56                   	push   esi
c001d576:	56                   	push   esi
c001d577:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d57e:	50                   	push   eax
c001d57f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d585:	e8 ec e5 ff ff       	call   c001bb76 <IDE::prepareInterrupt(unsigned char)>
c001d58a:	83 c4 0c             	add    esp,0xc
c001d58d:	6a 04                	push   0x4
c001d58f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d596:	50                   	push   eax
c001d597:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d59d:	e8 ba e6 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001d5a2:	83 c4 0c             	add    esp,0xc
c001d5a5:	89 c6                	mov    esi,eax
c001d5a7:	6a 05                	push   0x5
c001d5a9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5b0:	50                   	push   eax
c001d5b1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5b7:	e8 a0 e6 ff ff       	call   c001bc5c <IDE::read(unsigned char, unsigned char)>
c001d5bc:	89 f1                	mov    ecx,esi
c001d5be:	0f b6 c0             	movzx  eax,al
c001d5c1:	0f b6 f1             	movzx  esi,cl
c001d5c4:	c1 e0 08             	shl    eax,0x8
c001d5c7:	09 c6                	or     esi,eax
c001d5c9:	d1 fe                	sar    esi,1
c001d5cb:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d5cf:	83 c4 10             	add    esp,0x10
c001d5d2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d5d7:	74 41                	je     c001d61a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d5d9:	31 c9                	xor    ecx,ecx
c001d5db:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d5e1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d5e8:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d5ec:	75 0a                	jne    c001d5f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d5ee:	01 c9                	add    ecx,ecx
c001d5f0:	01 cd                	add    ebp,ecx
c001d5f2:	4b                   	dec    ebx
c001d5f3:	e9 54 ff ff ff       	jmp    c001d54c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d5f8:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d5fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d601:	51                   	push   ecx
c001d602:	51                   	push   ecx
c001d603:	52                   	push   edx
c001d604:	50                   	push   eax
c001d605:	e8 80 e5 ff ff       	call   c001bb8a <IDE::getBase(unsigned char)>
c001d60a:	89 c2                	mov    edx,eax
c001d60c:	89 f0                	mov    eax,esi
c001d60e:	66 ef                	out    dx,ax
c001d610:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d614:	83 c4 10             	add    esp,0x10
c001d617:	41                   	inc    ecx
c001d618:	eb c1                	jmp    c001d5db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d61a:	31 f6                	xor    esi,esi
c001d61c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d622:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d629:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d62d:	75 06                	jne    c001d635 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d62f:	01 f6                	add    esi,esi
c001d631:	01 f5                	add    ebp,esi
c001d633:	eb bd                	jmp    c001d5f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d635:	51                   	push   ecx
c001d636:	51                   	push   ecx
c001d637:	52                   	push   edx
c001d638:	50                   	push   eax
c001d639:	e8 4c e5 ff ff       	call   c001bb8a <IDE::getBase(unsigned char)>
c001d63e:	89 c2                	mov    edx,eax
c001d640:	66 ed                	in     ax,dx
c001d642:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d647:	83 c4 10             	add    esp,0x10
c001d64a:	46                   	inc    esi
c001d64b:	eb cf                	jmp    c001d61c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d64d:	51                   	push   ecx
c001d64e:	51                   	push   ecx
c001d64f:	52                   	push   edx
c001d650:	50                   	push   eax
c001d651:	e8 b4 e6 ff ff       	call   c001bd0a <IDE::waitInterrupt(unsigned char)>
c001d656:	83 c4 10             	add    esp,0x10
c001d659:	84 c0                	test   al,al
c001d65b:	0f 84 df fd ff ff    	je     c001d440 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d661:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d666:	52                   	push   edx
c001d667:	52                   	push   edx
c001d668:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d66f:	50                   	push   eax
c001d670:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d676:	e8 fb e4 ff ff       	call   c001bb76 <IDE::prepareInterrupt(unsigned char)>
c001d67b:	83 c4 10             	add    esp,0x10
c001d67e:	50                   	push   eax
c001d67f:	50                   	push   eax
c001d680:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d687:	50                   	push   eax
c001d688:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d68e:	e8 f7 e4 ff ff       	call   c001bb8a <IDE::getBase(unsigned char)>
c001d693:	8d 50 07             	lea    edx,[eax+0x7]
c001d696:	ec                   	in     al,dx
c001d697:	83 c4 10             	add    esp,0x10
c001d69a:	a8 88                	test   al,0x88
c001d69c:	74 0a                	je     c001d6a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d69e:	4b                   	dec    ebx
c001d69f:	75 dd                	jne    c001d67e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d6a1:	bb 02 00 00 00       	mov    ebx,0x2
c001d6a6:	eb 02                	jmp    c001d6aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d6a8:	31 db                	xor    ebx,ebx
c001d6aa:	83 c4 1c             	add    esp,0x1c
c001d6ad:	89 d8                	mov    eax,ebx
c001d6af:	5b                   	pop    ebx
c001d6b0:	5e                   	pop    esi
c001d6b1:	5f                   	pop    edi
c001d6b2:	5d                   	pop    ebp
c001d6b3:	c3                   	ret    

c001d6b4 <ATAPI::diskRemoved()>:
c001d6b4:	53                   	push   ebx
c001d6b5:	83 ec 14             	sub    esp,0x14
c001d6b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d6bc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d6c3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d6c9:	e8 ac 04 ff ff       	call   c000db7a <LogicalDisk::unmount()>
c001d6ce:	58                   	pop    eax
c001d6cf:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d6d5:	e8 82 0e ff ff       	call   c000e55c <VCache::writeWriteBuffer()>
c001d6da:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d6e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6e4:	83 c4 18             	add    esp,0x18
c001d6e7:	5b                   	pop    ebx
c001d6e8:	e9 5f 0e ff ff       	jmp    c000e54c <VCache::invalidateReadBuffer()>
c001d6ed:	90                   	nop

c001d6ee <ATAPI::eject()>:
c001d6ee:	57                   	push   edi
c001d6ef:	b9 03 00 00 00       	mov    ecx,0x3
c001d6f4:	53                   	push   ebx
c001d6f5:	83 ec 14             	sub    esp,0x14
c001d6f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d6fc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d700:	fc                   	cld    
c001d701:	31 c0                	xor    eax,eax
c001d703:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d705:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d70a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d70f:	50                   	push   eax
c001d710:	50                   	push   eax
c001d711:	6a 00                	push   0x0
c001d713:	6a 00                	push   0x0
c001d715:	6a 00                	push   0x0
c001d717:	6a 02                	push   0x2
c001d719:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d71d:	50                   	push   eax
c001d71e:	53                   	push   ebx
c001d71f:	e8 c8 fc ff ff       	call   c001d3ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d724:	83 c4 14             	add    esp,0x14
c001d727:	53                   	push   ebx
c001d728:	e8 87 ff ff ff       	call   c001d6b4 <ATAPI::diskRemoved()>
c001d72d:	83 c4 24             	add    esp,0x24
c001d730:	31 c0                	xor    eax,eax
c001d732:	5b                   	pop    ebx
c001d733:	5f                   	pop    edi
c001d734:	c3                   	ret    
c001d735:	90                   	nop

c001d736 <ATAPI::diskInserted()>:
c001d736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d73a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d741:	c3                   	ret    

c001d742 <ATAPI::detectMedia()>:
c001d742:	56                   	push   esi
c001d743:	53                   	push   ebx
c001d744:	83 ec 28             	sub    esp,0x28
c001d747:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d74b:	6a 0c                	push   0xc
c001d74d:	6a 00                	push   0x0
c001d74f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d753:	56                   	push   esi
c001d754:	e8 97 2d fe ff       	call   c00004f0 <memset>
c001d759:	58                   	pop    eax
c001d75a:	5a                   	pop    edx
c001d75b:	6a 00                	push   0x0
c001d75d:	6a 00                	push   0x0
c001d75f:	6a 00                	push   0x0
c001d761:	6a 00                	push   0x0
c001d763:	56                   	push   esi
c001d764:	53                   	push   ebx
c001d765:	e8 82 fc ff ff       	call   c001d3ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d76a:	83 c4 1c             	add    esp,0x1c
c001d76d:	6a 0c                	push   0xc
c001d76f:	6a 00                	push   0x0
c001d771:	56                   	push   esi
c001d772:	e8 79 2d fe ff       	call   c00004f0 <memset>
c001d777:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d77c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d781:	59                   	pop    ecx
c001d782:	58                   	pop    eax
c001d783:	6a 01                	push   0x1
c001d785:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d789:	50                   	push   eax
c001d78a:	6a 00                	push   0x0
c001d78c:	6a 12                	push   0x12
c001d78e:	56                   	push   esi
c001d78f:	53                   	push   ebx
c001d790:	e8 57 fc ff ff       	call   c001d3ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d795:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d799:	83 c4 20             	add    esp,0x20
c001d79c:	83 e0 7f             	and    eax,0x7f
c001d79f:	83 f8 70             	cmp    eax,0x70
c001d7a2:	74 15                	je     c001d7b9 <ATAPI::detectMedia()+0x77>
c001d7a4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d7ab:	75 0c                	jne    c001d7b9 <ATAPI::detectMedia()+0x77>
c001d7ad:	83 ec 0c             	sub    esp,0xc
c001d7b0:	53                   	push   ebx
c001d7b1:	e8 80 ff ff ff       	call   c001d736 <ATAPI::diskInserted()>
c001d7b6:	83 c4 10             	add    esp,0x10
c001d7b9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d7bd:	83 e0 0f             	and    eax,0xf
c001d7c0:	83 f8 02             	cmp    eax,0x2
c001d7c3:	75 1b                	jne    c001d7e0 <ATAPI::detectMedia()+0x9e>
c001d7c5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d7ca:	75 2d                	jne    c001d7f9 <ATAPI::detectMedia()+0xb7>
c001d7cc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d7d3:	74 24                	je     c001d7f9 <ATAPI::detectMedia()+0xb7>
c001d7d5:	83 ec 0c             	sub    esp,0xc
c001d7d8:	53                   	push   ebx
c001d7d9:	e8 d6 fe ff ff       	call   c001d6b4 <ATAPI::diskRemoved()>
c001d7de:	eb 16                	jmp    c001d7f6 <ATAPI::detectMedia()+0xb4>
c001d7e0:	85 c0                	test   eax,eax
c001d7e2:	75 15                	jne    c001d7f9 <ATAPI::detectMedia()+0xb7>
c001d7e4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d7eb:	75 0c                	jne    c001d7f9 <ATAPI::detectMedia()+0xb7>
c001d7ed:	83 ec 0c             	sub    esp,0xc
c001d7f0:	53                   	push   ebx
c001d7f1:	e8 40 ff ff ff       	call   c001d736 <ATAPI::diskInserted()>
c001d7f6:	83 c4 10             	add    esp,0x10
c001d7f9:	83 c4 24             	add    esp,0x24
c001d7fc:	5b                   	pop    ebx
c001d7fd:	5e                   	pop    esi
c001d7fe:	c3                   	ret    
c001d7ff:	90                   	nop

c001d800 <ATAPI::open(int, int, void*)>:
c001d800:	56                   	push   esi
c001d801:	53                   	push   ebx
c001d802:	50                   	push   eax
c001d803:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d807:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d80b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d80f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d815:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d81b:	c1 e0 06             	shl    eax,0x6
c001d81e:	01 d0                	add    eax,edx
c001d820:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d827:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d82d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d834:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d83e:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d844:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d84b:	6a 04                	push   0x4
c001d84d:	6a 0c                	push   0xc
c001d84f:	51                   	push   ecx
c001d850:	52                   	push   edx
c001d851:	e8 46 e3 ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d856:	90                   	nop
c001d857:	90                   	nop
c001d858:	6a 00                	push   0x0
c001d85a:	6a 0c                	push   0xc
c001d85c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d863:	50                   	push   eax
c001d864:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d86a:	e8 2d e3 ff ff       	call   c001bb9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d86f:	83 c4 14             	add    esp,0x14
c001d872:	68 78 01 00 00       	push   0x178
c001d877:	e8 3a a2 fe ff       	call   c0007ab6 <malloc>
c001d87c:	83 c4 0c             	add    esp,0xc
c001d87f:	89 c6                	mov    esi,eax
c001d881:	6a 00                	push   0x0
c001d883:	68 ff ff ff 7f       	push   0x7fffffff
c001d888:	6a 00                	push   0x0
c001d88a:	6a 00                	push   0x0
c001d88c:	53                   	push   ebx
c001d88d:	68 4f 32 02 c0       	push   0xc002324f
c001d892:	50                   	push   eax
c001d893:	e8 20 01 ff ff       	call   c000d9b8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d898:	83 c4 14             	add    esp,0x14
c001d89b:	56                   	push   esi
c001d89c:	e8 d7 01 ff ff       	call   c000da78 <LogicalDisk::assignDriveLetter()>
c001d8a1:	5a                   	pop    edx
c001d8a2:	0f be c0             	movsx  eax,al
c001d8a5:	59                   	pop    ecx
c001d8a6:	50                   	push   eax
c001d8a7:	68 a0 30 02 c0       	push   0xc00230a0
c001d8ac:	e8 94 d0 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d8b1:	58                   	pop    eax
c001d8b2:	5a                   	pop    edx
c001d8b3:	56                   	push   esi
c001d8b4:	53                   	push   ebx
c001d8b5:	e8 58 ef fe ff       	call   c000c812 <Device::addChild(Device*)>
c001d8ba:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d8c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8c3:	e8 7e f3 fe ff       	call   c000cc46 <PhysicalDisk::startCache()>
c001d8c8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d8cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8d2:	e8 6b fe ff ff       	call   c001d742 <ATAPI::detectMedia()>
c001d8d7:	83 c4 14             	add    esp,0x14
c001d8da:	31 c0                	xor    eax,eax
c001d8dc:	5b                   	pop    ebx
c001d8dd:	5e                   	pop    esi
c001d8de:	c3                   	ret    
c001d8df:	90                   	nop

c001d8e0 <ATAPI::read(unsigned long long, int, void*)>:
c001d8e0:	55                   	push   ebp
c001d8e1:	57                   	push   edi
c001d8e2:	56                   	push   esi
c001d8e3:	53                   	push   ebx
c001d8e4:	83 ec 1c             	sub    esp,0x1c
c001d8e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d8eb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d8ef:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d8f3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d8fa:	74 3c                	je     c001d938 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d8fc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d900:	b9 03 00 00 00       	mov    ecx,0x3
c001d905:	fc                   	cld    
c001d906:	31 c0                	xor    eax,eax
c001d908:	0f ce                	bswap  esi
c001d90a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d90c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d911:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d915:	89 e8                	mov    eax,ebp
c001d917:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d91b:	50                   	push   eax
c001d91c:	50                   	push   eax
c001d91d:	55                   	push   ebp
c001d91e:	c1 e5 0b             	shl    ebp,0xb
c001d921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d925:	6a 00                	push   0x0
c001d927:	55                   	push   ebp
c001d928:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d92c:	50                   	push   eax
c001d92d:	53                   	push   ebx
c001d92e:	e8 b9 fa ff ff       	call   c001d3ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d933:	83 c4 20             	add    esp,0x20
c001d936:	eb 1a                	jmp    c001d952 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d938:	83 ec 0c             	sub    esp,0xc
c001d93b:	53                   	push   ebx
c001d93c:	e8 01 fe ff ff       	call   c001d742 <ATAPI::detectMedia()>
c001d941:	83 c4 10             	add    esp,0x10
c001d944:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d94b:	75 af                	jne    c001d8fc <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d94d:	b8 02 00 00 00       	mov    eax,0x2
c001d952:	83 c4 1c             	add    esp,0x1c
c001d955:	5b                   	pop    ebx
c001d956:	5e                   	pop    esi
c001d957:	5f                   	pop    edi
c001d958:	5d                   	pop    ebp
c001d959:	c3                   	ret    

c001d95a <SATA::close(int, int, void*)>:
c001d95a:	83 ec 0c             	sub    esp,0xc
c001d95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d961:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d967:	85 c0                	test   eax,eax
c001d969:	74 0c                	je     c001d977 <SATA::close(int, int, void*)+0x1d>
c001d96b:	83 ec 0c             	sub    esp,0xc
c001d96e:	8b 10                	mov    edx,DWORD PTR [eax]
c001d970:	50                   	push   eax
c001d971:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d974:	83 c4 10             	add    esp,0x10
c001d977:	31 c0                	xor    eax,eax
c001d979:	83 c4 0c             	add    esp,0xc
c001d97c:	c3                   	ret    
c001d97d:	90                   	nop

c001d97e <SATA::powerSaving(PowerSavingLevel)>:
c001d97e:	c3                   	ret    
c001d97f:	90                   	nop

c001d980 <SATA::open(int, int, void*)>:
c001d980:	56                   	push   esi
c001d981:	53                   	push   ebx
c001d982:	50                   	push   eax
c001d983:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d987:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d98b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d995:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d99b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d9a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9a9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d9b3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d9b9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d9c0:	e8 fa a3 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d9c5:	89 c6                	mov    esi,eax
c001d9c7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d9cd:	81 c6 00 10 00 00    	add    esi,0x1000
c001d9d3:	e8 e7 a3 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d9d8:	39 c6                	cmp    esi,eax
c001d9da:	74 10                	je     c001d9ec <SATA::open(int, int, void*)+0x6c>
c001d9dc:	83 ec 0c             	sub    esp,0xc
c001d9df:	68 e8 30 02 c0       	push   0xc00230e8
c001d9e4:	e8 82 3a ff ff       	call   c001146b <KePanic(char const*)>
c001d9e9:	83 c4 10             	add    esp,0x10
c001d9ec:	83 ec 0c             	sub    esp,0xc
c001d9ef:	6a 02                	push   0x2
c001d9f1:	e8 17 bc fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d9f6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d9fc:	6a 03                	push   0x3
c001d9fe:	50                   	push   eax
c001d9ff:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001da05:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001da0b:	e8 10 c3 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001da10:	83 c4 14             	add    esp,0x14
c001da13:	53                   	push   ebx
c001da14:	e8 2d f2 fe ff       	call   c000cc46 <PhysicalDisk::startCache()>
c001da19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da1c:	e8 69 04 ff ff       	call   c000de8a <createPartitionsForDisk(PhysicalDisk*)>
c001da21:	83 c4 14             	add    esp,0x14
c001da24:	31 c0                	xor    eax,eax
c001da26:	5b                   	pop    ebx
c001da27:	5e                   	pop    esi
c001da28:	c3                   	ret    
c001da29:	90                   	nop

c001da2a <SATA::SATA()>:
c001da2a:	83 ec 0c             	sub    esp,0xc
c001da2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da31:	83 ec 04             	sub    esp,0x4
c001da34:	68 00 02 00 00       	push   0x200
c001da39:	68 fc 30 02 c0       	push   0xc00230fc
c001da3e:	50                   	push   eax
c001da3f:	e8 9a f1 fe ff       	call   c000cbde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001da44:	83 c4 10             	add    esp,0x10
c001da47:	ba 6c 31 02 c0       	mov    edx,0xc002316c
c001da4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da50:	89 10                	mov    DWORD PTR [eax],edx
c001da52:	90                   	nop
c001da53:	83 c4 0c             	add    esp,0xc
c001da56:	c3                   	ret    
c001da57:	90                   	nop

c001da58 <SATA::access(unsigned long long, int, void*, bool)>:
c001da58:	55                   	push   ebp
c001da59:	57                   	push   edi
c001da5a:	56                   	push   esi
c001da5b:	53                   	push   ebx
c001da5c:	83 ec 2c             	sub    esp,0x2c
c001da5f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001da63:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001da67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001da6b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001da6f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001da73:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001da78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da7c:	7e 10                	jle    c001da8e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001da7e:	83 ec 0c             	sub    esp,0xc
c001da81:	68 0c 31 02 c0       	push   0xc002310c
c001da86:	e8 e0 39 ff ff       	call   c001146b <KePanic(char const*)>
c001da8b:	83 c4 10             	add    esp,0x10
c001da8e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001da94:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001da9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001daa0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001daa4:	89 d0                	mov    eax,edx
c001daa6:	c1 e0 07             	shl    eax,0x7
c001daa9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001daad:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dab7:	51                   	push   ecx
c001dab8:	8d 42 02             	lea    eax,[edx+0x2]
c001dabb:	51                   	push   ecx
c001dabc:	c1 e0 07             	shl    eax,0x7
c001dabf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dac3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dac7:	50                   	push   eax
c001dac8:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dace:	e8 91 ec ff ff       	call   c001c764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dad3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dad7:	83 c4 10             	add    esp,0x10
c001dada:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dadf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dae3:	0f 84 57 01 00 00    	je     c001dc40 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dae9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001daed:	c1 e0 09             	shl    eax,0x9
c001daf0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001daf5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001daf9:	74 0e                	je     c001db09 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dafb:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001db01:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001db05:	89 c1                	mov    ecx,eax
c001db07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001db09:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001db0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001db13:	8d 42 02             	lea    eax,[edx+0x2]
c001db16:	c1 e0 07             	shl    eax,0x7
c001db19:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001db1d:	8b 00                	mov    eax,DWORD PTR [eax]
c001db1f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001db25:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001db2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db2f:	c1 e1 05             	shl    ecx,0x5
c001db32:	01 c8                	add    eax,ecx
c001db34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001db38:	83 e1 01             	and    ecx,0x1
c001db3b:	89 ce                	mov    esi,ecx
c001db3d:	8a 08                	mov    cl,BYTE PTR [eax]
c001db3f:	c1 e6 06             	shl    esi,0x6
c001db42:	83 e1 bf             	and    ecx,0xffffffbf
c001db45:	09 f1                	or     ecx,esi
c001db47:	88 08                	mov    BYTE PTR [eax],cl
c001db49:	8b 08                	mov    ecx,DWORD PTR [eax]
c001db4b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001db51:	81 c9 05 00 01 00    	or     ecx,0x10005
c001db57:	89 08                	mov    DWORD PTR [eax],ecx
c001db59:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001db5f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001db65:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001db6b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001db6e:	50                   	push   eax
c001db6f:	68 90 00 00 00       	push   0x90
c001db74:	6a 00                	push   0x0
c001db76:	56                   	push   esi
c001db77:	e8 74 29 fe ff       	call   c00004f0 <memset>
c001db7c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001db82:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001db88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001db8c:	83 c4 10             	add    esp,0x10
c001db8f:	48                   	dec    eax
c001db90:	25 ff ff 3f 00       	and    eax,0x3fffff
c001db95:	89 c1                	mov    ecx,eax
c001db97:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001db9d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dba2:	09 c8                	or     eax,ecx
c001dba4:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dbaa:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dbb0:	83 c8 80             	or     eax,0xffffff80
c001dbb3:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dbb9:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dbbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dbc0:	25 00 7f 00 00       	and    eax,0x7f00
c001dbc5:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dbca:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dbcf:	66 89 06             	mov    WORD PTR [esi],ax
c001dbd2:	b0 35                	mov    al,0x35
c001dbd4:	75 02                	jne    c001dbd8 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001dbd6:	b0 25                	mov    al,0x25
c001dbd8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001dbdb:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001dbdf:	89 e8                	mov    eax,ebp
c001dbe1:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dbe5:	c1 e8 10             	shr    eax,0x10
c001dbe8:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dbeb:	89 e8                	mov    eax,ebp
c001dbed:	c1 e8 18             	shr    eax,0x18
c001dbf0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dbf3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dbf7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001dbfa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dbfe:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001dc01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dc05:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001dc09:	89 d6                	mov    esi,edx
c001dc0b:	31 c0                	xor    eax,eax
c001dc0d:	c1 e6 07             	shl    esi,0x7
c001dc10:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001dc14:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001dc1a:	80 e1 88             	and    cl,0x88
c001dc1d:	74 0a                	je     c001dc29 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001dc1f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dc24:	74 0a                	je     c001dc30 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001dc26:	40                   	inc    eax
c001dc27:	eb eb                	jmp    c001dc14 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001dc29:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dc2e:	75 17                	jne    c001dc47 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001dc30:	83 ec 0c             	sub    esp,0xc
c001dc33:	68 45 31 02 c0       	push   0xc0023145
c001dc38:	e8 08 cd fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001dc3d:	83 c4 10             	add    esp,0x10
c001dc40:	b8 01 00 00 00       	mov    eax,0x1
c001dc45:	eb 5d                	jmp    c001dca4 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001dc47:	b8 01 00 00 00       	mov    eax,0x1
c001dc4c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001dc50:	c1 e2 07             	shl    edx,0x7
c001dc53:	d3 e0                	shl    eax,cl
c001dc55:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001dc59:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001dc5f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001dc65:	85 c8                	test   eax,ecx
c001dc67:	74 16                	je     c001dc7f <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001dc69:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001dc6f:	0f ba e1 1e          	bt     ecx,0x1e
c001dc73:	73 ea                	jae    c001dc5f <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001dc75:	83 ec 0c             	sub    esp,0xc
c001dc78:	68 53 31 02 c0       	push   0xc0023153
c001dc7d:	eb b9                	jmp    c001dc38 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001dc7f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001dc85:	0f ba e0 1e          	bt     eax,0x1e
c001dc89:	72 b5                	jb     c001dc40 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dc8b:	31 c0                	xor    eax,eax
c001dc8d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dc92:	75 10                	jne    c001dca4 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001dc94:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001dc9a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001dc9e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dca2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dca4:	83 c4 2c             	add    esp,0x2c
c001dca7:	5b                   	pop    ebx
c001dca8:	5e                   	pop    esi
c001dca9:	5f                   	pop    edi
c001dcaa:	5d                   	pop    ebp
c001dcab:	c3                   	ret    

c001dcac <SATA::read(unsigned long long, int, void*)>:
c001dcac:	55                   	push   ebp
c001dcad:	57                   	push   edi
c001dcae:	56                   	push   esi
c001dcaf:	be 04 00 00 00       	mov    esi,0x4
c001dcb4:	53                   	push   ebx
c001dcb5:	83 ec 0c             	sub    esp,0xc
c001dcb8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dcbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dcc0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001dcc3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dcc7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dccb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dcd1:	0f 87 1a 02 00 00    	ja     c001def1 <SATA::read(unsigned long long, int, void*)+0x245>
c001dcd7:	be 06 00 00 00       	mov    esi,0x6
c001dcdc:	85 c9                	test   ecx,ecx
c001dcde:	0f 84 0d 02 00 00    	je     c001def1 <SATA::read(unsigned long long, int, void*)+0x245>
c001dce4:	56                   	push   esi
c001dce5:	56                   	push   esi
c001dce6:	6a 00                	push   0x0
c001dce8:	51                   	push   ecx
c001dce9:	53                   	push   ebx
c001dcea:	52                   	push   edx
c001dceb:	50                   	push   eax
c001dcec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcf0:	e8 63 fd ff ff       	call   c001da58 <SATA::access(unsigned long long, int, void*, bool)>
c001dcf5:	83 c4 20             	add    esp,0x20
c001dcf8:	89 c6                	mov    esi,eax
c001dcfa:	85 c0                	test   eax,eax
c001dcfc:	0f 85 ea 01 00 00    	jne    c001deec <SATA::read(unsigned long long, int, void*)+0x240>
c001dd02:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001dd08:	bb 0a 00 00 00       	mov    ebx,0xa
c001dd0d:	50                   	push   eax
c001dd0e:	50                   	push   eax
c001dd0f:	6a 0f                	push   0xf
c001dd11:	6a 00                	push   0x0
c001dd13:	e8 75 f2 ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001dd18:	5a                   	pop    edx
c001dd19:	0f b6 c0             	movzx  eax,al
c001dd1c:	59                   	pop    ecx
c001dd1d:	b9 10 27 00 00       	mov    ecx,0x2710
c001dd22:	50                   	push   eax
c001dd23:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dd28:	99                   	cdq    
c001dd29:	f7 f9                	idiv   ecx
c001dd2b:	99                   	cdq    
c001dd2c:	f7 fb                	idiv   ebx
c001dd2e:	8d 42 30             	lea    eax,[edx+0x30]
c001dd31:	0f b6 c0             	movzx  eax,al
c001dd34:	50                   	push   eax
c001dd35:	e8 42 f2 ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001dd3a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dd40:	5f                   	pop    edi
c001dd41:	5d                   	pop    ebp
c001dd42:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dd47:	6a 0f                	push   0xf
c001dd49:	6a 00                	push   0x0
c001dd4b:	e8 3d f2 ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001dd50:	5a                   	pop    edx
c001dd51:	0f b6 c0             	movzx  eax,al
c001dd54:	59                   	pop    ecx
c001dd55:	50                   	push   eax
c001dd56:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dd5b:	99                   	cdq    
c001dd5c:	f7 fd                	idiv   ebp
c001dd5e:	99                   	cdq    
c001dd5f:	f7 fb                	idiv   ebx
c001dd61:	8d 42 30             	lea    eax,[edx+0x30]
c001dd64:	0f b6 c0             	movzx  eax,al
c001dd67:	50                   	push   eax
c001dd68:	e8 0f f2 ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001dd6d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dd73:	5f                   	pop    edi
c001dd74:	bf 64 00 00 00       	mov    edi,0x64
c001dd79:	58                   	pop    eax
c001dd7a:	6a 0f                	push   0xf
c001dd7c:	6a 00                	push   0x0
c001dd7e:	e8 0a f2 ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001dd83:	5a                   	pop    edx
c001dd84:	0f b6 c0             	movzx  eax,al
c001dd87:	59                   	pop    ecx
c001dd88:	50                   	push   eax
c001dd89:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dd8e:	99                   	cdq    
c001dd8f:	f7 ff                	idiv   edi
c001dd91:	99                   	cdq    
c001dd92:	f7 fb                	idiv   ebx
c001dd94:	8d 42 30             	lea    eax,[edx+0x30]
c001dd97:	0f b6 c0             	movzx  eax,al
c001dd9a:	50                   	push   eax
c001dd9b:	e8 dc f1 ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001dda0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dda6:	58                   	pop    eax
c001dda7:	5a                   	pop    edx
c001dda8:	6a 0f                	push   0xf
c001ddaa:	6a 00                	push   0x0
c001ddac:	e8 dc f1 ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001ddb1:	59                   	pop    ecx
c001ddb2:	0f b6 c0             	movzx  eax,al
c001ddb5:	5a                   	pop    edx
c001ddb6:	50                   	push   eax
c001ddb7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001ddbc:	99                   	cdq    
c001ddbd:	f7 fb                	idiv   ebx
c001ddbf:	99                   	cdq    
c001ddc0:	f7 fb                	idiv   ebx
c001ddc2:	8d 42 30             	lea    eax,[edx+0x30]
c001ddc5:	0f b6 c0             	movzx  eax,al
c001ddc8:	50                   	push   eax
c001ddc9:	e8 ae f1 ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001ddce:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ddd4:	59                   	pop    ecx
c001ddd5:	58                   	pop    eax
c001ddd6:	6a 0f                	push   0xf
c001ddd8:	6a 00                	push   0x0
c001ddda:	e8 ae f1 ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001dddf:	5a                   	pop    edx
c001dde0:	0f b6 c0             	movzx  eax,al
c001dde3:	59                   	pop    ecx
c001dde4:	50                   	push   eax
c001dde5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001ddea:	99                   	cdq    
c001ddeb:	f7 fb                	idiv   ebx
c001dded:	8d 42 30             	lea    eax,[edx+0x30]
c001ddf0:	0f b6 c0             	movzx  eax,al
c001ddf3:	50                   	push   eax
c001ddf4:	e8 83 f1 ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001ddf9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ddff:	58                   	pop    eax
c001de00:	5a                   	pop    edx
c001de01:	6a 0f                	push   0xf
c001de03:	6a 00                	push   0x0
c001de05:	e8 83 f1 ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001de0a:	59                   	pop    ecx
c001de0b:	0f b6 c0             	movzx  eax,al
c001de0e:	5a                   	pop    edx
c001de0f:	b9 10 27 00 00       	mov    ecx,0x2710
c001de14:	50                   	push   eax
c001de15:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001de1a:	99                   	cdq    
c001de1b:	f7 f9                	idiv   ecx
c001de1d:	99                   	cdq    
c001de1e:	f7 fb                	idiv   ebx
c001de20:	8d 42 30             	lea    eax,[edx+0x30]
c001de23:	0f b6 c0             	movzx  eax,al
c001de26:	50                   	push   eax
c001de27:	e8 50 f1 ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001de2c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001de32:	59                   	pop    ecx
c001de33:	58                   	pop    eax
c001de34:	6a 0f                	push   0xf
c001de36:	6a 00                	push   0x0
c001de38:	e8 50 f1 ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001de3d:	5a                   	pop    edx
c001de3e:	0f b6 c0             	movzx  eax,al
c001de41:	59                   	pop    ecx
c001de42:	50                   	push   eax
c001de43:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001de48:	99                   	cdq    
c001de49:	f7 fd                	idiv   ebp
c001de4b:	99                   	cdq    
c001de4c:	f7 fb                	idiv   ebx
c001de4e:	8d 42 30             	lea    eax,[edx+0x30]
c001de51:	0f b6 c0             	movzx  eax,al
c001de54:	50                   	push   eax
c001de55:	e8 22 f1 ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001de5a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001de60:	5d                   	pop    ebp
c001de61:	58                   	pop    eax
c001de62:	6a 0f                	push   0xf
c001de64:	6a 00                	push   0x0
c001de66:	e8 22 f1 ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001de6b:	5a                   	pop    edx
c001de6c:	0f b6 c0             	movzx  eax,al
c001de6f:	59                   	pop    ecx
c001de70:	50                   	push   eax
c001de71:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001de76:	99                   	cdq    
c001de77:	f7 ff                	idiv   edi
c001de79:	99                   	cdq    
c001de7a:	f7 fb                	idiv   ebx
c001de7c:	8d 42 30             	lea    eax,[edx+0x30]
c001de7f:	0f b6 c0             	movzx  eax,al
c001de82:	50                   	push   eax
c001de83:	e8 f4 f0 ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001de88:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001de8e:	5f                   	pop    edi
c001de8f:	5d                   	pop    ebp
c001de90:	6a 0f                	push   0xf
c001de92:	6a 00                	push   0x0
c001de94:	e8 f4 f0 ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001de99:	5a                   	pop    edx
c001de9a:	0f b6 c0             	movzx  eax,al
c001de9d:	59                   	pop    ecx
c001de9e:	50                   	push   eax
c001de9f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dea4:	99                   	cdq    
c001dea5:	f7 fb                	idiv   ebx
c001dea7:	99                   	cdq    
c001dea8:	f7 fb                	idiv   ebx
c001deaa:	8d 42 30             	lea    eax,[edx+0x30]
c001dead:	0f b6 c0             	movzx  eax,al
c001deb0:	50                   	push   eax
c001deb1:	e8 c6 f0 ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001deb6:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001debc:	5f                   	pop    edi
c001debd:	5d                   	pop    ebp
c001debe:	6a 0f                	push   0xf
c001dec0:	6a 00                	push   0x0
c001dec2:	e8 c6 f0 ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001dec7:	5a                   	pop    edx
c001dec8:	0f b6 c0             	movzx  eax,al
c001decb:	59                   	pop    ecx
c001decc:	50                   	push   eax
c001decd:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001ded2:	99                   	cdq    
c001ded3:	f7 fb                	idiv   ebx
c001ded5:	83 c2 30             	add    edx,0x30
c001ded8:	0f b6 d2             	movzx  edx,dl
c001dedb:	52                   	push   edx
c001dedc:	e8 9b f0 ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001dee1:	83 c4 10             	add    esp,0x10
c001dee4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001deea:	eb 05                	jmp    c001def1 <SATA::read(unsigned long long, int, void*)+0x245>
c001deec:	be 01 00 00 00       	mov    esi,0x1
c001def1:	83 c4 0c             	add    esp,0xc
c001def4:	89 f0                	mov    eax,esi
c001def6:	5b                   	pop    ebx
c001def7:	5e                   	pop    esi
c001def8:	5f                   	pop    edi
c001def9:	5d                   	pop    ebp
c001defa:	c3                   	ret    
c001defb:	90                   	nop

c001defc <SATA::write(unsigned long long, int, void*)>:
c001defc:	55                   	push   ebp
c001defd:	b8 04 00 00 00       	mov    eax,0x4
c001df02:	57                   	push   edi
c001df03:	56                   	push   esi
c001df04:	53                   	push   ebx
c001df05:	83 ec 1c             	sub    esp,0x1c
c001df08:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001df0c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001df10:	8d 75 ff             	lea    esi,[ebp-0x1]
c001df13:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001df17:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001df1b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001df21:	0f 87 32 02 00 00    	ja     c001e159 <SATA::write(unsigned long long, int, void*)+0x25d>
c001df27:	b8 06 00 00 00       	mov    eax,0x6
c001df2c:	85 ff                	test   edi,edi
c001df2e:	0f 84 25 02 00 00    	je     c001e159 <SATA::write(unsigned long long, int, void*)+0x25d>
c001df34:	89 ee                	mov    esi,ebp
c001df36:	c1 e6 09             	shl    esi,0x9
c001df39:	01 fe                	add    esi,edi
c001df3b:	89 c8                	mov    eax,ecx
c001df3d:	89 da                	mov    edx,ebx
c001df3f:	83 c0 01             	add    eax,0x1
c001df42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001df46:	83 d2 00             	adc    edx,0x0
c001df49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001df4d:	50                   	push   eax
c001df4e:	50                   	push   eax
c001df4f:	6a 01                	push   0x1
c001df51:	57                   	push   edi
c001df52:	81 c7 00 02 00 00    	add    edi,0x200
c001df58:	6a 01                	push   0x1
c001df5a:	53                   	push   ebx
c001df5b:	51                   	push   ecx
c001df5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001df60:	e8 f3 fa ff ff       	call   c001da58 <SATA::access(unsigned long long, int, void*, bool)>
c001df65:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001df69:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df6d:	83 c4 20             	add    esp,0x20
c001df70:	39 f7                	cmp    edi,esi
c001df72:	75 c7                	jne    c001df3b <SATA::write(unsigned long long, int, void*)+0x3f>
c001df74:	bb 0a 00 00 00       	mov    ebx,0xa
c001df79:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001df7f:	bd 10 27 00 00       	mov    ebp,0x2710
c001df84:	50                   	push   eax
c001df85:	50                   	push   eax
c001df86:	6a 0f                	push   0xf
c001df88:	6a 00                	push   0x0
c001df8a:	e8 fe ef ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001df8f:	5a                   	pop    edx
c001df90:	0f b6 c0             	movzx  eax,al
c001df93:	59                   	pop    ecx
c001df94:	50                   	push   eax
c001df95:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df9a:	99                   	cdq    
c001df9b:	f7 fd                	idiv   ebp
c001df9d:	99                   	cdq    
c001df9e:	f7 fb                	idiv   ebx
c001dfa0:	8d 42 30             	lea    eax,[edx+0x30]
c001dfa3:	0f b6 c0             	movzx  eax,al
c001dfa6:	50                   	push   eax
c001dfa7:	e8 d0 ef ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001dfac:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dfb2:	5e                   	pop    esi
c001dfb3:	5f                   	pop    edi
c001dfb4:	bf e8 03 00 00       	mov    edi,0x3e8
c001dfb9:	6a 0f                	push   0xf
c001dfbb:	6a 00                	push   0x0
c001dfbd:	e8 cb ef ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001dfc2:	5a                   	pop    edx
c001dfc3:	0f b6 c0             	movzx  eax,al
c001dfc6:	59                   	pop    ecx
c001dfc7:	50                   	push   eax
c001dfc8:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfcd:	99                   	cdq    
c001dfce:	f7 ff                	idiv   edi
c001dfd0:	99                   	cdq    
c001dfd1:	f7 fb                	idiv   ebx
c001dfd3:	8d 42 30             	lea    eax,[edx+0x30]
c001dfd6:	0f b6 c0             	movzx  eax,al
c001dfd9:	50                   	push   eax
c001dfda:	e8 9d ef ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001dfdf:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dfe5:	5e                   	pop    esi
c001dfe6:	be 64 00 00 00       	mov    esi,0x64
c001dfeb:	58                   	pop    eax
c001dfec:	6a 0f                	push   0xf
c001dfee:	6a 00                	push   0x0
c001dff0:	e8 98 ef ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001dff5:	5a                   	pop    edx
c001dff6:	0f b6 c0             	movzx  eax,al
c001dff9:	59                   	pop    ecx
c001dffa:	50                   	push   eax
c001dffb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e000:	99                   	cdq    
c001e001:	f7 fe                	idiv   esi
c001e003:	99                   	cdq    
c001e004:	f7 fb                	idiv   ebx
c001e006:	8d 42 30             	lea    eax,[edx+0x30]
c001e009:	0f b6 c0             	movzx  eax,al
c001e00c:	50                   	push   eax
c001e00d:	e8 6a ef ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001e012:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e018:	58                   	pop    eax
c001e019:	5a                   	pop    edx
c001e01a:	6a 0f                	push   0xf
c001e01c:	6a 00                	push   0x0
c001e01e:	e8 6a ef ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001e023:	59                   	pop    ecx
c001e024:	0f b6 c0             	movzx  eax,al
c001e027:	5a                   	pop    edx
c001e028:	50                   	push   eax
c001e029:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e02e:	99                   	cdq    
c001e02f:	f7 fb                	idiv   ebx
c001e031:	99                   	cdq    
c001e032:	f7 fb                	idiv   ebx
c001e034:	8d 42 30             	lea    eax,[edx+0x30]
c001e037:	0f b6 c0             	movzx  eax,al
c001e03a:	50                   	push   eax
c001e03b:	e8 3c ef ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001e040:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e046:	59                   	pop    ecx
c001e047:	58                   	pop    eax
c001e048:	6a 0f                	push   0xf
c001e04a:	6a 00                	push   0x0
c001e04c:	e8 3c ef ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001e051:	5a                   	pop    edx
c001e052:	0f b6 c0             	movzx  eax,al
c001e055:	59                   	pop    ecx
c001e056:	50                   	push   eax
c001e057:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e05c:	99                   	cdq    
c001e05d:	f7 fb                	idiv   ebx
c001e05f:	83 c2 30             	add    edx,0x30
c001e062:	0f b6 d2             	movzx  edx,dl
c001e065:	52                   	push   edx
c001e066:	e8 11 ef ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001e06b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e071:	58                   	pop    eax
c001e072:	5a                   	pop    edx
c001e073:	6a 0f                	push   0xf
c001e075:	6a 00                	push   0x0
c001e077:	e8 11 ef ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001e07c:	59                   	pop    ecx
c001e07d:	0f b6 c0             	movzx  eax,al
c001e080:	5a                   	pop    edx
c001e081:	50                   	push   eax
c001e082:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e087:	99                   	cdq    
c001e088:	f7 fd                	idiv   ebp
c001e08a:	99                   	cdq    
c001e08b:	f7 fb                	idiv   ebx
c001e08d:	8d 42 30             	lea    eax,[edx+0x30]
c001e090:	0f b6 c0             	movzx  eax,al
c001e093:	50                   	push   eax
c001e094:	e8 e3 ee ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001e099:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e09f:	59                   	pop    ecx
c001e0a0:	5d                   	pop    ebp
c001e0a1:	6a 0f                	push   0xf
c001e0a3:	6a 00                	push   0x0
c001e0a5:	e8 e3 ee ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001e0aa:	5a                   	pop    edx
c001e0ab:	0f b6 c0             	movzx  eax,al
c001e0ae:	59                   	pop    ecx
c001e0af:	50                   	push   eax
c001e0b0:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0b5:	99                   	cdq    
c001e0b6:	f7 ff                	idiv   edi
c001e0b8:	99                   	cdq    
c001e0b9:	f7 fb                	idiv   ebx
c001e0bb:	8d 42 30             	lea    eax,[edx+0x30]
c001e0be:	0f b6 c0             	movzx  eax,al
c001e0c1:	50                   	push   eax
c001e0c2:	e8 b5 ee ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001e0c7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e0cd:	5f                   	pop    edi
c001e0ce:	5d                   	pop    ebp
c001e0cf:	6a 0f                	push   0xf
c001e0d1:	6a 00                	push   0x0
c001e0d3:	e8 b5 ee ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001e0d8:	5a                   	pop    edx
c001e0d9:	0f b6 c0             	movzx  eax,al
c001e0dc:	59                   	pop    ecx
c001e0dd:	50                   	push   eax
c001e0de:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0e3:	99                   	cdq    
c001e0e4:	f7 fe                	idiv   esi
c001e0e6:	99                   	cdq    
c001e0e7:	f7 fb                	idiv   ebx
c001e0e9:	8d 42 30             	lea    eax,[edx+0x30]
c001e0ec:	0f b6 c0             	movzx  eax,al
c001e0ef:	50                   	push   eax
c001e0f0:	e8 87 ee ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001e0f5:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e0fb:	5e                   	pop    esi
c001e0fc:	5f                   	pop    edi
c001e0fd:	6a 0f                	push   0xf
c001e0ff:	6a 00                	push   0x0
c001e101:	e8 87 ee ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001e106:	5d                   	pop    ebp
c001e107:	0f b6 c0             	movzx  eax,al
c001e10a:	5a                   	pop    edx
c001e10b:	50                   	push   eax
c001e10c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e111:	99                   	cdq    
c001e112:	f7 fb                	idiv   ebx
c001e114:	99                   	cdq    
c001e115:	f7 fb                	idiv   ebx
c001e117:	8d 42 30             	lea    eax,[edx+0x30]
c001e11a:	0f b6 c0             	movzx  eax,al
c001e11d:	50                   	push   eax
c001e11e:	e8 59 ee ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001e123:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e129:	59                   	pop    ecx
c001e12a:	5e                   	pop    esi
c001e12b:	6a 0f                	push   0xf
c001e12d:	6a 00                	push   0x0
c001e12f:	e8 59 ee ff ff       	call   c001cf8d <combineColours(unsigned char, unsigned char)>
c001e134:	5f                   	pop    edi
c001e135:	0f b6 c0             	movzx  eax,al
c001e138:	5d                   	pop    ebp
c001e139:	50                   	push   eax
c001e13a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e13f:	99                   	cdq    
c001e140:	f7 fb                	idiv   ebx
c001e142:	83 c2 30             	add    edx,0x30
c001e145:	0f b6 d2             	movzx  edx,dl
c001e148:	52                   	push   edx
c001e149:	e8 2e ee ff ff       	call   c001cf7c <combineCharAndColour(char, unsigned char)>
c001e14e:	83 c4 10             	add    esp,0x10
c001e151:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e157:	31 c0                	xor    eax,eax
c001e159:	83 c4 1c             	add    esp,0x1c
c001e15c:	5b                   	pop    ebx
c001e15d:	5e                   	pop    esi
c001e15e:	5f                   	pop    edi
c001e15f:	5d                   	pop    ebp
c001e160:	c3                   	ret    
c001e161:	90                   	nop

c001e162 <SATAPI::write(unsigned long long, int, void*)>:
c001e162:	b8 03 00 00 00       	mov    eax,0x3
c001e167:	c3                   	ret    

c001e168 <SATAPI::close(int, int, void*)>:
c001e168:	83 ec 0c             	sub    esp,0xc
c001e16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e175:	85 c0                	test   eax,eax
c001e177:	74 0c                	je     c001e185 <SATAPI::close(int, int, void*)+0x1d>
c001e179:	83 ec 0c             	sub    esp,0xc
c001e17c:	8b 10                	mov    edx,DWORD PTR [eax]
c001e17e:	50                   	push   eax
c001e17f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e182:	83 c4 10             	add    esp,0x10
c001e185:	31 c0                	xor    eax,eax
c001e187:	83 c4 0c             	add    esp,0xc
c001e18a:	c3                   	ret    
c001e18b:	90                   	nop

c001e18c <SATAPI::SATAPI()>:
c001e18c:	83 ec 0c             	sub    esp,0xc
c001e18f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e193:	83 ec 04             	sub    esp,0x4
c001e196:	68 00 08 00 00       	push   0x800
c001e19b:	68 9c 31 02 c0       	push   0xc002319c
c001e1a0:	50                   	push   eax
c001e1a1:	e8 38 ea fe ff       	call   c000cbde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e1a6:	83 c4 10             	add    esp,0x10
c001e1a9:	ba 90 32 02 c0       	mov    edx,0xc0023290
c001e1ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b2:	89 10                	mov    DWORD PTR [eax],edx
c001e1b4:	90                   	nop
c001e1b5:	83 c4 0c             	add    esp,0xc
c001e1b8:	c3                   	ret    
c001e1b9:	90                   	nop

c001e1ba <SATAPI::diskRemoved()>:
c001e1ba:	c3                   	ret    
c001e1bb:	90                   	nop

c001e1bc <SATAPI::diskInserted()>:
c001e1bc:	83 ec 18             	sub    esp,0x18
c001e1bf:	68 a8 31 02 c0       	push   0xc00231a8
c001e1c4:	e8 7c c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1cd:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e1d4:	83 c4 1c             	add    esp,0x1c
c001e1d7:	c3                   	ret    

c001e1d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e1d8:	55                   	push   ebp
c001e1d9:	57                   	push   edi
c001e1da:	56                   	push   esi
c001e1db:	53                   	push   ebx
c001e1dc:	83 ec 34             	sub    esp,0x34
c001e1df:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e1e3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e1e7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e1eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e1ef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e1f3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e1f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e1ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e203:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e209:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e20d:	83 c0 02             	add    eax,0x2
c001e210:	c1 e0 07             	shl    eax,0x7
c001e213:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e217:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e21b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e21f:	c1 e0 07             	shl    eax,0x7
c001e222:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e226:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e22a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e234:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e238:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e23e:	e8 21 e5 ff ff       	call   c001c764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e243:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e247:	83 c4 10             	add    esp,0x10
c001e24a:	b8 01 00 00 00       	mov    eax,0x1
c001e24f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e254:	0f 84 53 02 00 00    	je     c001e4ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e25a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e264:	8b 00                	mov    eax,DWORD PTR [eax]
c001e266:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e26c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e272:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e276:	c1 e1 05             	shl    ecx,0x5
c001e279:	01 c8                	add    eax,ecx
c001e27b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e27d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e283:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e289:	89 08                	mov    DWORD PTR [eax],ecx
c001e28b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e291:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e297:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e29d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e2a0:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e2a3:	50                   	push   eax
c001e2a4:	68 90 00 00 00       	push   0x90
c001e2a9:	6a 00                	push   0x0
c001e2ab:	53                   	push   ebx
c001e2ac:	e8 3f 22 fe ff       	call   c00004f0 <memset>
c001e2b1:	b9 0c 00 00 00       	mov    ecx,0xc
c001e2b6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e2ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e2bc:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e2c2:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e2c6:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e2cc:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e2d0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e2d4:	48                   	dec    eax
c001e2d5:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e2da:	89 c1                	mov    ecx,eax
c001e2dc:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e2e2:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e2e7:	09 c8                	or     eax,ecx
c001e2e9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e2ef:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e2f5:	83 c8 80             	or     eax,0xffffff80
c001e2f8:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e2fe:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e301:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e305:	25 00 7f 00 00       	and    eax,0x7f00
c001e30a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e30e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e313:	66 89 03             	mov    WORD PTR [ebx],ax
c001e316:	89 d0                	mov    eax,edx
c001e318:	c1 ea 18             	shr    edx,0x18
c001e31b:	c1 e8 10             	shr    eax,0x10
c001e31e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e321:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e324:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e328:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e32b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e32f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e332:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e336:	83 c4 10             	add    esp,0x10
c001e339:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e33d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e341:	31 c0                	xor    eax,eax
c001e343:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e349:	80 e1 88             	and    cl,0x88
c001e34c:	74 0a                	je     c001e358 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e34e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e353:	74 0a                	je     c001e35f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e355:	40                   	inc    eax
c001e356:	eb eb                	jmp    c001e343 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e358:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e35d:	75 43                	jne    c001e3a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e35f:	83 ec 0c             	sub    esp,0xc
c001e362:	68 c0 31 02 c0       	push   0xc00231c0
c001e367:	e8 d9 c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e36c:	58                   	pop    eax
c001e36d:	5a                   	pop    edx
c001e36e:	68 d5 31 02 c0       	push   0xc00231d5
c001e373:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e379:	e8 28 a7 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e37e:	59                   	pop    ecx
c001e37f:	5b                   	pop    ebx
c001e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e384:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e38a:	e8 6f e4 ff ff       	call   c001c7fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e38f:	5e                   	pop    esi
c001e390:	5f                   	pop    edi
c001e391:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e395:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e39b:	e8 3e e4 ff ff       	call   c001c7de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e3a0:	eb 48                	jmp    c001e3ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e3a2:	be 01 00 00 00       	mov    esi,0x1
c001e3a7:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e3ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e3af:	d3 e6                	shl    esi,cl
c001e3b1:	c1 e7 07             	shl    edi,0x7
c001e3b4:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e3ba:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e3bf:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e3c3:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e3c9:	85 c6                	test   esi,eax
c001e3cb:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e3d1:	0f 84 a3 00 00 00    	je     c001e47a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e3d7:	0f ba e0 1e          	bt     eax,0x1e
c001e3db:	73 1a                	jae    c001e3f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e3dd:	83 ec 0c             	sub    esp,0xc
c001e3e0:	68 e7 31 02 c0       	push   0xc00231e7
c001e3e5:	e8 5b c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e3ea:	83 c4 10             	add    esp,0x10
c001e3ed:	b8 01 00 00 00       	mov    eax,0x1
c001e3f2:	e9 b6 00 00 00       	jmp    c001e4ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e3f7:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e3fd:	83 f8 0d             	cmp    eax,0xd
c001e400:	77 0a                	ja     c001e40c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e402:	83 ec 0c             	sub    esp,0xc
c001e405:	68 c8 00 00 00       	push   0xc8
c001e40a:	eb 28                	jmp    c001e434 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e40c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e412:	83 f8 0d             	cmp    eax,0xd
c001e415:	77 0a                	ja     c001e421 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e417:	83 ec 0c             	sub    esp,0xc
c001e41a:	68 58 02 00 00       	push   0x258
c001e41f:	eb 13                	jmp    c001e434 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e421:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e427:	83 f8 06             	cmp    eax,0x6
c001e42a:	77 10                	ja     c001e43c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e42c:	83 ec 0c             	sub    esp,0xc
c001e42f:	68 dc 05 00 00       	push   0x5dc
c001e434:	e8 c7 7d ff ff       	call   c0016200 <milliTenthSleep(unsigned int)>
c001e439:	83 c4 10             	add    esp,0x10
c001e43c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e440:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e443:	75 06                	jne    c001e44b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e445:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e449:	74 15                	je     c001e460 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e44b:	83 fb 06             	cmp    ebx,0x6
c001e44e:	77 10                	ja     c001e460 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e450:	83 ec 0c             	sub    esp,0xc
c001e453:	68 c4 09 00 00       	push   0x9c4
c001e458:	e8 a3 7d ff ff       	call   c0016200 <milliTenthSleep(unsigned int)>
c001e45d:	83 c4 10             	add    esp,0x10
c001e460:	43                   	inc    ebx
c001e461:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e467:	0f 85 56 ff ff ff    	jne    c001e3c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e46d:	83 ec 0c             	sub    esp,0xc
c001e470:	68 fa 31 02 c0       	push   0xc00231fa
c001e475:	e9 6b ff ff ff       	jmp    c001e3e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e47a:	0f ba e0 1e          	bt     eax,0x1e
c001e47e:	73 0d                	jae    c001e48d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e480:	83 ec 0c             	sub    esp,0xc
c001e483:	68 0e 32 02 c0       	push   0xc002320e
c001e488:	e9 58 ff ff ff       	jmp    c001e3e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e48d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e492:	74 17                	je     c001e4ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e494:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e499:	74 10                	je     c001e4ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e49b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e4a1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e4a5:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e4a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e4ab:	31 c0                	xor    eax,eax
c001e4ad:	83 c4 2c             	add    esp,0x2c
c001e4b0:	5b                   	pop    ebx
c001e4b1:	5e                   	pop    esi
c001e4b2:	5f                   	pop    edi
c001e4b3:	5d                   	pop    ebp
c001e4b4:	c3                   	ret    
c001e4b5:	90                   	nop

c001e4b6 <SATAPI::eject()>:
c001e4b6:	57                   	push   edi
c001e4b7:	b9 03 00 00 00       	mov    ecx,0x3
c001e4bc:	83 ec 18             	sub    esp,0x18
c001e4bf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e4c3:	fc                   	cld    
c001e4c4:	31 c0                	xor    eax,eax
c001e4c6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e4c8:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e4cd:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e4d2:	50                   	push   eax
c001e4d3:	6a 00                	push   0x0
c001e4d5:	6a 00                	push   0x0
c001e4d7:	6a 00                	push   0x0
c001e4d9:	6a 00                	push   0x0
c001e4db:	6a 02                	push   0x2
c001e4dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e4e1:	50                   	push   eax
c001e4e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e4e6:	e8 ed fc ff ff       	call   c001e1d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e4eb:	31 c0                	xor    eax,eax
c001e4ed:	83 c4 38             	add    esp,0x38
c001e4f0:	5f                   	pop    edi
c001e4f1:	c3                   	ret    

c001e4f2 <SATAPI::detectMedia()>:
c001e4f2:	53                   	push   ebx
c001e4f3:	83 ec 14             	sub    esp,0x14
c001e4f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e4fa:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e500:	e8 57 00 ff ff       	call   c000e55c <VCache::writeWriteBuffer()>
c001e505:	59                   	pop    ecx
c001e506:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e50c:	e8 3b 00 ff ff       	call   c000e54c <VCache::invalidateReadBuffer()>
c001e511:	c7 04 24 23 32 02 c0 	mov    DWORD PTR [esp],0xc0023223
c001e518:	e8 28 c4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e51d:	83 c4 10             	add    esp,0x10
c001e520:	31 c0                	xor    eax,eax
c001e522:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e529:	85 d2                	test   edx,edx
c001e52b:	74 0f                	je     c001e53c <SATAPI::detectMedia()+0x4a>
c001e52d:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e533:	75 07                	jne    c001e53c <SATAPI::detectMedia()+0x4a>
c001e535:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e53c:	40                   	inc    eax
c001e53d:	83 f8 1a             	cmp    eax,0x1a
c001e540:	75 e0                	jne    c001e522 <SATAPI::detectMedia()+0x30>
c001e542:	83 c4 08             	add    esp,0x8
c001e545:	5b                   	pop    ebx
c001e546:	c3                   	ret    
c001e547:	90                   	nop

c001e548 <SATAPI::open(int, int, void*)>:
c001e548:	56                   	push   esi
c001e549:	53                   	push   ebx
c001e54a:	51                   	push   ecx
c001e54b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e54f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e553:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e55d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e563:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e56d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e571:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e57b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e581:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e588:	e8 32 98 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e58d:	89 c6                	mov    esi,eax
c001e58f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e595:	81 c6 00 10 00 00    	add    esi,0x1000
c001e59b:	e8 1f 98 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e5a0:	39 c6                	cmp    esi,eax
c001e5a2:	74 10                	je     c001e5b4 <SATAPI::open(int, int, void*)+0x6c>
c001e5a4:	83 ec 0c             	sub    esp,0xc
c001e5a7:	68 38 32 02 c0       	push   0xc0023238
c001e5ac:	e8 ba 2e ff ff       	call   c001146b <KePanic(char const*)>
c001e5b1:	83 c4 10             	add    esp,0x10
c001e5b4:	83 ec 0c             	sub    esp,0xc
c001e5b7:	6a 02                	push   0x2
c001e5b9:	e8 4f b0 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e5be:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e5c4:	6a 03                	push   0x3
c001e5c6:	50                   	push   eax
c001e5c7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e5cd:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e5d3:	e8 48 b7 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e5d8:	83 c4 14             	add    esp,0x14
c001e5db:	68 78 01 00 00       	push   0x178
c001e5e0:	e8 d1 94 fe ff       	call   c0007ab6 <malloc>
c001e5e5:	83 c4 0c             	add    esp,0xc
c001e5e8:	89 c6                	mov    esi,eax
c001e5ea:	6a 00                	push   0x0
c001e5ec:	68 ff ff ff 7f       	push   0x7fffffff
c001e5f1:	6a 00                	push   0x0
c001e5f3:	6a 00                	push   0x0
c001e5f5:	53                   	push   ebx
c001e5f6:	68 4e 32 02 c0       	push   0xc002324e
c001e5fb:	50                   	push   eax
c001e5fc:	e8 b7 f3 fe ff       	call   c000d9b8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e601:	83 c4 14             	add    esp,0x14
c001e604:	56                   	push   esi
c001e605:	e8 6e f4 fe ff       	call   c000da78 <LogicalDisk::assignDriveLetter()>
c001e60a:	5a                   	pop    edx
c001e60b:	0f be c0             	movsx  eax,al
c001e60e:	59                   	pop    ecx
c001e60f:	50                   	push   eax
c001e610:	68 a0 30 02 c0       	push   0xc00230a0
c001e615:	e8 2b c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e61a:	58                   	pop    eax
c001e61b:	5a                   	pop    edx
c001e61c:	56                   	push   esi
c001e61d:	53                   	push   ebx
c001e61e:	e8 ef e1 fe ff       	call   c000c812 <Device::addChild(Device*)>
c001e623:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e629:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e62c:	e8 15 e6 fe ff       	call   c000cc46 <PhysicalDisk::startCache()>
c001e631:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e638:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e63b:	e8 b2 fe ff ff       	call   c001e4f2 <SATAPI::detectMedia()>
c001e640:	83 c4 14             	add    esp,0x14
c001e643:	31 c0                	xor    eax,eax
c001e645:	5b                   	pop    ebx
c001e646:	5e                   	pop    esi
c001e647:	c3                   	ret    

c001e648 <SATAPI::read(unsigned long long, int, void*)>:
c001e648:	57                   	push   edi
c001e649:	56                   	push   esi
c001e64a:	53                   	push   ebx
c001e64b:	83 ec 30             	sub    esp,0x30
c001e64e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e652:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e656:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e65a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e65e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e662:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e666:	83 fe 04             	cmp    esi,0x4
c001e669:	7e 10                	jle    c001e67b <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e66b:	83 ec 0c             	sub    esp,0xc
c001e66e:	68 5c 32 02 c0       	push   0xc002325c
c001e673:	e8 f3 2d ff ff       	call   c001146b <KePanic(char const*)>
c001e678:	83 c4 10             	add    esp,0x10
c001e67b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e681:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e687:	51                   	push   ecx
c001e688:	50                   	push   eax
c001e689:	83 c0 02             	add    eax,0x2
c001e68c:	c1 e0 07             	shl    eax,0x7
c001e68f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e695:	50                   	push   eax
c001e696:	52                   	push   edx
c001e697:	e8 8c e1 ff ff       	call   c001c828 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e69c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e6a0:	b9 03 00 00 00       	mov    ecx,0x3
c001e6a5:	fc                   	cld    
c001e6a6:	31 c0                	xor    eax,eax
c001e6a8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e6aa:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e6af:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e6b4:	83 c4 0c             	add    esp,0xc
c001e6b7:	6a 00                	push   0x0
c001e6b9:	6a 00                	push   0x0
c001e6bb:	6a 00                	push   0x0
c001e6bd:	6a 00                	push   0x0
c001e6bf:	6a 02                	push   0x2
c001e6c1:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e6c5:	50                   	push   eax
c001e6c6:	53                   	push   ebx
c001e6c7:	e8 0c fb ff ff       	call   c001e1d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e6cc:	83 c4 20             	add    esp,0x20
c001e6cf:	85 c0                	test   eax,eax
c001e6d1:	75 44                	jne    c001e717 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e6d3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e6d7:	b9 03 00 00 00       	mov    ecx,0x3
c001e6dc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e6de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e6e2:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e6e7:	0f c8                	bswap  eax
c001e6e9:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e6ed:	89 f0                	mov    eax,esi
c001e6ef:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e6f3:	50                   	push   eax
c001e6f4:	56                   	push   esi
c001e6f5:	c1 e6 0b             	shl    esi,0xb
c001e6f8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e6fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e700:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e704:	56                   	push   esi
c001e705:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e709:	50                   	push   eax
c001e70a:	53                   	push   ebx
c001e70b:	e8 c8 fa ff ff       	call   c001e1d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e710:	83 c4 20             	add    esp,0x20
c001e713:	85 c0                	test   eax,eax
c001e715:	74 14                	je     c001e72b <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e717:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e71b:	83 ec 0c             	sub    esp,0xc
c001e71e:	53                   	push   ebx
c001e71f:	e8 ce fd ff ff       	call   c001e4f2 <SATAPI::detectMedia()>
c001e724:	83 c4 10             	add    esp,0x10
c001e727:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e72b:	83 c4 30             	add    esp,0x30
c001e72e:	5b                   	pop    ebx
c001e72f:	5e                   	pop    esi
c001e730:	5f                   	pop    edi
c001e731:	c3                   	ret    

c001e732 <IOAPIC::close(int, int, void*)>:
c001e732:	b8 00 00 00 00       	mov    eax,0x0
c001e737:	c3                   	ret    

c001e738 <apicGetBase()>:
c001e738:	55                   	push   ebp
c001e739:	89 e5                	mov    ebp,esp
c001e73b:	83 ec 18             	sub    esp,0x18
c001e73e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e743:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e749:	83 e0 08             	and    eax,0x8
c001e74c:	0f b6 c0             	movzx  eax,al
c001e74f:	85 c0                	test   eax,eax
c001e751:	75 07                	jne    c001e75a <apicGetBase()+0x22>
c001e753:	b8 00 00 00 00       	mov    eax,0x0
c001e758:	eb 21                	jmp    c001e77b <apicGetBase()+0x43>
c001e75a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e75f:	83 ec 08             	sub    esp,0x8
c001e762:	6a 1b                	push   0x1b
c001e764:	50                   	push   eax
c001e765:	e8 56 89 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e76a:	83 c4 10             	add    esp,0x10
c001e76d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e770:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e773:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e776:	25 00 00 ff ff       	and    eax,0xffff0000
c001e77b:	c9                   	leave  
c001e77c:	c3                   	ret    
c001e77d:	90                   	nop

c001e77e <IOAPIC::IOAPIC()>:
c001e77e:	83 ec 0c             	sub    esp,0xc
c001e781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e785:	83 ec 08             	sub    esp,0x8
c001e788:	68 c0 32 02 c0       	push   0xc00232c0
c001e78d:	50                   	push   eax
c001e78e:	e8 17 e2 fe ff       	call   c000c9aa <Device::Device(char const*)>
c001e793:	83 c4 10             	add    esp,0x10
c001e796:	ba d0 32 02 c0       	mov    edx,0xc00232d0
c001e79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e79f:	89 10                	mov    DWORD PTR [eax],edx
c001e7a1:	90                   	nop
c001e7a2:	83 c4 0c             	add    esp,0xc
c001e7a5:	c3                   	ret    

c001e7a6 <apicOpen()>:
c001e7a6:	55                   	push   ebp
c001e7a7:	89 e5                	mov    ebp,esp
c001e7a9:	53                   	push   ebx
c001e7aa:	83 ec 34             	sub    esp,0x34
c001e7ad:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e7b2:	83 f0 01             	xor    eax,0x1
c001e7b5:	0f b6 c0             	movzx  eax,al
c001e7b8:	85 c0                	test   eax,eax
c001e7ba:	0f 84 a3 00 00 00    	je     c001e863 <apicOpen()+0xbd>
c001e7c0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e7c4:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e7c9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e7cd:	0f b6 c0             	movzx  eax,al
c001e7d0:	39 c2                	cmp    edx,eax
c001e7d2:	0f 83 84 00 00 00    	jae    c001e85c <apicOpen()+0xb6>
c001e7d8:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e7df:	83 ec 0c             	sub    esp,0xc
c001e7e2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e7e5:	e8 cc 92 fe ff       	call   c0007ab6 <malloc>
c001e7ea:	83 c4 10             	add    esp,0x10
c001e7ed:	89 c3                	mov    ebx,eax
c001e7ef:	83 ec 0c             	sub    esp,0xc
c001e7f2:	53                   	push   ebx
c001e7f3:	e8 86 ff ff ff       	call   c001e77e <IOAPIC::IOAPIC()>
c001e7f8:	83 c4 10             	add    esp,0x10
c001e7fb:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e7fe:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e802:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e805:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e80c:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001e811:	83 c0 01             	add    eax,0x1
c001e814:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001e819:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e81e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e824:	83 ec 08             	sub    esp,0x8
c001e827:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e82a:	50                   	push   eax
c001e82b:	e8 e2 df fe ff       	call   c000c812 <Device::addChild(Device*)>
c001e830:	83 c4 10             	add    esp,0x10
c001e833:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e836:	8b 00                	mov    eax,DWORD PTR [eax]
c001e838:	83 c0 08             	add    eax,0x8
c001e83b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e83d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e841:	6a 00                	push   0x0
c001e843:	6a 00                	push   0x0
c001e845:	52                   	push   edx
c001e846:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e849:	ff d0                	call   eax
c001e84b:	83 c4 10             	add    esp,0x10
c001e84e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e851:	83 c0 01             	add    eax,0x1
c001e854:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e857:	e9 68 ff ff ff       	jmp    c001e7c4 <apicOpen()+0x1e>
c001e85c:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001e863:	e8 d0 fe ff ff       	call   c001e738 <apicGetBase()>
c001e868:	05 f0 00 00 00       	add    eax,0xf0
c001e86d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e870:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e873:	8b 00                	mov    eax,DWORD PTR [eax]
c001e875:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e878:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e87f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e886:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e889:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e88c:	89 10                	mov    DWORD PTR [eax],edx
c001e88e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e895:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001e89a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e89d:	7d 7c                	jge    c001e91b <apicOpen()+0x175>
c001e89f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8a2:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001e8a9:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e8ac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8af:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001e8b6:	c1 e8 08             	shr    eax,0x8
c001e8b9:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e8bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8c0:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001e8c7:	c1 e8 18             	shr    eax,0x18
c001e8ca:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e8cd:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e8d1:	3d ff 00 00 00       	cmp    eax,0xff
c001e8d6:	75 3a                	jne    c001e912 <apicOpen()+0x16c>
c001e8d8:	e8 5b fe ff ff       	call   c001e738 <apicGetBase()>
c001e8dd:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e8e1:	83 fa 01             	cmp    edx,0x1
c001e8e4:	75 07                	jne    c001e8ed <apicOpen()+0x147>
c001e8e6:	ba 60 03 00 00       	mov    edx,0x360
c001e8eb:	eb 05                	jmp    c001e8f2 <apicOpen()+0x14c>
c001e8ed:	ba 50 03 00 00       	mov    edx,0x350
c001e8f2:	01 d0                	add    eax,edx
c001e8f4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e8f7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e8fa:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8fc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e8ff:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e906:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e90a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e90d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e910:	89 10                	mov    DWORD PTR [eax],edx
c001e912:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e916:	e9 7a ff ff ff       	jmp    c001e895 <apicOpen()+0xef>
c001e91b:	90                   	nop
c001e91c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e91f:	c9                   	leave  
c001e920:	c3                   	ret    
c001e921:	90                   	nop

c001e922 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e922:	55                   	push   ebp
c001e923:	89 e5                	mov    ebp,esp
c001e925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e928:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e92e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e931:	72 1d                	jb     c001e950 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e933:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e936:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e93c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e93f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e945:	01 d0                	add    eax,edx
c001e947:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e94a:	73 04                	jae    c001e950 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e94c:	b0 01                	mov    al,0x1
c001e94e:	eb 02                	jmp    c001e952 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e950:	b0 00                	mov    al,0x0
c001e952:	5d                   	pop    ebp
c001e953:	c3                   	ret    

c001e954 <IOAPIC::read(int)>:
c001e954:	55                   	push   ebp
c001e955:	89 e5                	mov    ebp,esp
c001e957:	83 ec 10             	sub    esp,0x10
c001e95a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e95d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e963:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e966:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e969:	0f b6 d0             	movzx  edx,al
c001e96c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e96f:	89 10                	mov    DWORD PTR [eax],edx
c001e971:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e974:	83 c0 10             	add    eax,0x10
c001e977:	8b 00                	mov    eax,DWORD PTR [eax]
c001e979:	c9                   	leave  
c001e97a:	c3                   	ret    
c001e97b:	90                   	nop

c001e97c <IOAPIC::open(int, int, void*)>:
c001e97c:	55                   	push   ebp
c001e97d:	89 e5                	mov    ebp,esp
c001e97f:	57                   	push   edi
c001e980:	56                   	push   esi
c001e981:	53                   	push   ebx
c001e982:	83 ec 04             	sub    esp,0x4
c001e985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e988:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e98b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e994:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e99a:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001e9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e9a4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e9aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e9ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e9b3:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001e9ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e9bd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e9c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e9c6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e9cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e9cf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e9d5:	0f b6 f0             	movzx  esi,al
c001e9d8:	89 d0                	mov    eax,edx
c001e9da:	ba 00 00 00 00       	mov    edx,0x0
c001e9df:	89 c7                	mov    edi,eax
c001e9e1:	83 e7 ff             	and    edi,0xffffffff
c001e9e4:	89 f9                	mov    ecx,edi
c001e9e6:	0f b6 da             	movzx  ebx,dl
c001e9e9:	89 c8                	mov    eax,ecx
c001e9eb:	89 da                	mov    edx,ebx
c001e9ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e9f0:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e9f3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e9f7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e9fb:	83 e0 00             	and    eax,0x0
c001e9fe:	09 d0                	or     eax,edx
c001ea00:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ea04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ea07:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ea0d:	8d 50 01             	lea    edx,[eax+0x1]
c001ea10:	88 d1                	mov    cl,dl
c001ea12:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ea15:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ea1b:	0f b6 d0             	movzx  edx,al
c001ea1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ea21:	83 c2 08             	add    edx,0x8
c001ea24:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ea28:	0f b6 c9             	movzx  ecx,cl
c001ea2b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ea31:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ea35:	6a 01                	push   0x1
c001ea37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea3a:	e8 15 ff ff ff       	call   c001e954 <IOAPIC::read(int)>
c001ea3f:	83 c4 08             	add    esp,0x8
c001ea42:	c1 f8 10             	sar    eax,0x10
c001ea45:	0f b6 c0             	movzx  eax,al
c001ea48:	8d 50 01             	lea    edx,[eax+0x1]
c001ea4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ea4e:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ea54:	b8 00 00 00 00       	mov    eax,0x0
c001ea59:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ea5c:	5b                   	pop    ebx
c001ea5d:	5e                   	pop    esi
c001ea5e:	5f                   	pop    edi
c001ea5f:	5d                   	pop    ebp
c001ea60:	c3                   	ret    
c001ea61:	90                   	nop

c001ea62 <IOAPIC::write(int, int)>:
c001ea62:	55                   	push   ebp
c001ea63:	89 e5                	mov    ebp,esp
c001ea65:	83 ec 10             	sub    esp,0x10
c001ea68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ea6b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ea71:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ea74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ea77:	0f b6 d0             	movzx  edx,al
c001ea7a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ea7d:	89 10                	mov    DWORD PTR [eax],edx
c001ea7f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ea82:	8d 50 10             	lea    edx,[eax+0x10]
c001ea85:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ea88:	89 02                	mov    DWORD PTR [edx],eax
c001ea8a:	90                   	nop
c001ea8b:	c9                   	leave  
c001ea8c:	c3                   	ret    
c001ea8d:	90                   	nop

c001ea8e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ea8e:	55                   	push   ebp
c001ea8f:	89 e5                	mov    ebp,esp
c001ea91:	53                   	push   ebx
c001ea92:	83 ec 2c             	sub    esp,0x2c
c001ea95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ea98:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ea9b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ea9e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001eaa1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001eaa4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001eaa7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eaaa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001eaad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001eab0:	88 d8                	mov    al,bl
c001eab2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001eab5:	88 c8                	mov    al,cl
c001eab7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001eaba:	88 d0                	mov    al,dl
c001eabc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001eabf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001eac3:	83 c0 08             	add    eax,0x8
c001eac6:	01 c0                	add    eax,eax
c001eac8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001eacb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001eacf:	83 c0 08             	add    eax,0x8
c001ead2:	01 c0                	add    eax,eax
c001ead4:	83 c0 01             	add    eax,0x1
c001ead7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001eada:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eadd:	50                   	push   eax
c001eade:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eae1:	e8 6e fe ff ff       	call   c001e954 <IOAPIC::read(int)>
c001eae6:	83 c4 08             	add    esp,0x8
c001eae9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eaec:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001eaf3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eaf6:	c1 e0 18             	shl    eax,0x18
c001eaf9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001eafc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001eaff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eb02:	52                   	push   edx
c001eb03:	50                   	push   eax
c001eb04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb07:	e8 56 ff ff ff       	call   c001ea62 <IOAPIC::write(int, int)>
c001eb0c:	83 c4 0c             	add    esp,0xc
c001eb0f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb12:	50                   	push   eax
c001eb13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb16:	e8 39 fe ff ff       	call   c001e954 <IOAPIC::read(int)>
c001eb1b:	83 c4 08             	add    esp,0x8
c001eb1e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001eb21:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001eb28:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001eb2f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001eb36:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001eb3a:	85 c0                	test   eax,eax
c001eb3c:	74 09                	je     c001eb47 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001eb3e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001eb45:	eb 07                	jmp    c001eb4e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001eb47:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001eb4e:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001eb52:	85 c0                	test   eax,eax
c001eb54:	74 09                	je     c001eb5f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001eb56:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001eb5d:	eb 07                	jmp    c001eb66 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001eb5f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001eb66:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001eb6d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001eb71:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001eb74:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001eb77:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb7a:	52                   	push   edx
c001eb7b:	50                   	push   eax
c001eb7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb7f:	e8 de fe ff ff       	call   c001ea62 <IOAPIC::write(int, int)>
c001eb84:	83 c4 0c             	add    esp,0xc
c001eb87:	90                   	nop
c001eb88:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eb8b:	c9                   	leave  
c001eb8c:	c3                   	ret    
c001eb8d:	66 90                	xchg   ax,ax
c001eb8f:	90                   	nop

c001eb90 <APICTimer::close(int, int, void*)>:
c001eb90:	b8 00 00 00 00       	mov    eax,0x0
c001eb95:	c3                   	ret    
c001eb96:	66 90                	xchg   ax,ax

c001eb98 <apicTimerHandler(regs*, void*)>:
c001eb98:	83 ec 0c             	sub    esp,0xc
c001eb9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eb9f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001eba1:	b8 10 27 00 00       	mov    eax,0x2710
c001eba6:	ba 00 00 00 00       	mov    edx,0x0
c001ebab:	f7 f1                	div    ecx
c001ebad:	83 ec 0c             	sub    esp,0xc
c001ebb0:	50                   	push   eax
c001ebb1:	e8 be f6 fe ff       	call   c000e274 <timerHandler(unsigned int)>
c001ebb6:	83 c4 10             	add    esp,0x10
c001ebb9:	90                   	nop
c001ebba:	83 c4 0c             	add    esp,0xc
c001ebbd:	c3                   	ret    
c001ebbe:	66 90                	xchg   ax,ax

c001ebc0 <APICTimer::open(int, int, void*)>:
c001ebc0:	83 ec 0c             	sub    esp,0xc
c001ebc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebc9:	83 c0 24             	add    eax,0x24
c001ebcc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebce:	83 ec 08             	sub    esp,0x8
c001ebd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebd9:	ff d0                	call   eax
c001ebdb:	83 c4 10             	add    esp,0x10
c001ebde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ebe6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ebec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ebf4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ebfa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ebfe:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ec04:	83 ec 0c             	sub    esp,0xc
c001ec07:	51                   	push   ecx
c001ec08:	6a 01                	push   0x1
c001ec0a:	68 98 eb 01 c0       	push   0xc001eb98
c001ec0f:	52                   	push   edx
c001ec10:	50                   	push   eax
c001ec11:	e8 a8 db fe ff       	call   c000c7be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ec16:	83 c4 20             	add    esp,0x20
c001ec19:	89 c2                	mov    edx,eax
c001ec1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ec25:	b8 00 00 00 00       	mov    eax,0x0
c001ec2a:	83 c4 0c             	add    esp,0xc
c001ec2d:	c3                   	ret    
c001ec2e:	66 90                	xchg   ax,ax

c001ec30 <APICTimer::write(int)>:
c001ec30:	83 ec 0c             	sub    esp,0xc
c001ec33:	83 ec 0c             	sub    esp,0xc
c001ec36:	68 f4 32 02 c0       	push   0xc00232f4
c001ec3b:	e8 2b 28 ff ff       	call   c001146b <KePanic(char const*)>
c001ec40:	83 c4 10             	add    esp,0x10
c001ec43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec4b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec51:	90                   	nop
c001ec52:	83 c4 0c             	add    esp,0xc
c001ec55:	c3                   	ret    
c001ec56:	66 90                	xchg   ax,ax

c001ec58 <APICTimer::APICTimer()>:
c001ec58:	83 ec 0c             	sub    esp,0xc
c001ec5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5f:	83 ec 08             	sub    esp,0x8
c001ec62:	68 04 33 02 c0       	push   0xc0023304
c001ec67:	50                   	push   eax
c001ec68:	e8 3b f5 fe ff       	call   c000e1a8 <Timer::Timer(char const*)>
c001ec6d:	83 c4 10             	add    esp,0x10
c001ec70:	ba 18 33 02 c0       	mov    edx,0xc0023318
c001ec75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec79:	89 10                	mov    DWORD PTR [eax],edx
c001ec7b:	90                   	nop
c001ec7c:	83 c4 0c             	add    esp,0xc
c001ec7f:	c3                   	ret    

c001ec80 <PIT::write(int)>:
c001ec80:	83 ec 10             	sub    esp,0x10
c001ec83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ec87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ec8b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec95:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ec9a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ec9f:	89 c2                	mov    edx,eax
c001eca1:	c1 fa 1f             	sar    edx,0x1f
c001eca4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eca8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecac:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ecb3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ecb8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ecbc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ecc1:	ee                   	out    dx,al
c001ecc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecc6:	0f b6 c0             	movzx  eax,al
c001ecc9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ecd0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ecd4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ecd8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ecdd:	ee                   	out    dx,al
c001ecde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ece2:	c1 f8 08             	sar    eax,0x8
c001ece5:	0f b6 c0             	movzx  eax,al
c001ece8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ecef:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ecf3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ecf7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ecfc:	ee                   	out    dx,al
c001ecfd:	90                   	nop
c001ecfe:	83 c4 10             	add    esp,0x10
c001ed01:	c3                   	ret    
c001ed02:	66 90                	xchg   ax,ax

c001ed04 <pitHandler(regs*, void*)>:
c001ed04:	83 ec 0c             	sub    esp,0xc
c001ed07:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ed0d:	b8 10 27 00 00       	mov    eax,0x2710
c001ed12:	89 c2                	mov    edx,eax
c001ed14:	c1 fa 1f             	sar    edx,0x1f
c001ed17:	f7 f9                	idiv   ecx
c001ed19:	83 ec 0c             	sub    esp,0xc
c001ed1c:	50                   	push   eax
c001ed1d:	e8 52 f5 fe ff       	call   c000e274 <timerHandler(unsigned int)>
c001ed22:	83 c4 10             	add    esp,0x10
c001ed25:	90                   	nop
c001ed26:	83 c4 0c             	add    esp,0xc
c001ed29:	c3                   	ret    
c001ed2a:	66 90                	xchg   ax,ax

c001ed2c <PIT::open(int, int, void*)>:
c001ed2c:	83 ec 0c             	sub    esp,0xc
c001ed2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed33:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed35:	83 c0 24             	add    eax,0x24
c001ed38:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed3a:	83 ec 08             	sub    esp,0x8
c001ed3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed45:	ff d0                	call   eax
c001ed47:	83 c4 10             	add    esp,0x10
c001ed4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4e:	83 ec 0c             	sub    esp,0xc
c001ed51:	6a 00                	push   0x0
c001ed53:	6a 01                	push   0x1
c001ed55:	68 04 ed 01 c0       	push   0xc001ed04
c001ed5a:	6a 00                	push   0x0
c001ed5c:	50                   	push   eax
c001ed5d:	e8 5c da fe ff       	call   c000c7be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed62:	83 c4 20             	add    esp,0x20
c001ed65:	89 c2                	mov    edx,eax
c001ed67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ed71:	b8 00 00 00 00       	mov    eax,0x0
c001ed76:	83 c4 0c             	add    esp,0xc
c001ed79:	c3                   	ret    
c001ed7a:	66 90                	xchg   ax,ax

c001ed7c <PIT::close(int, int, void*)>:
c001ed7c:	83 ec 0c             	sub    esp,0xc
c001ed7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed83:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ed8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed91:	6a 01                	push   0x1
c001ed93:	68 04 ed 01 c0       	push   0xc001ed04
c001ed98:	6a 00                	push   0x0
c001ed9a:	50                   	push   eax
c001ed9b:	e8 54 da fe ff       	call   c000c7f4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001eda0:	83 c4 10             	add    esp,0x10
c001eda3:	b8 00 00 00 00       	mov    eax,0x0
c001eda8:	83 c4 0c             	add    esp,0xc
c001edab:	c3                   	ret    

c001edac <PIT::PIT()>:
c001edac:	83 ec 0c             	sub    esp,0xc
c001edaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb3:	83 ec 08             	sub    esp,0x8
c001edb6:	68 40 33 02 c0       	push   0xc0023340
c001edbb:	50                   	push   eax
c001edbc:	e8 e7 f3 fe ff       	call   c000e1a8 <Timer::Timer(char const*)>
c001edc1:	83 c4 10             	add    esp,0x10
c001edc4:	ba 68 33 02 c0       	mov    edx,0xc0023368
c001edc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edcd:	89 10                	mov    DWORD PTR [eax],edx
c001edcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001edd9:	0f b6 d0             	movzx  edx,al
c001eddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ede7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edeb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001edf1:	0f b6 d0             	movzx  edx,al
c001edf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001edfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee01:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ee07:	8d 50 01             	lea    edx,[eax+0x1]
c001ee0a:	88 d1                	mov    cl,dl
c001ee0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee10:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ee16:	0f b6 d0             	movzx  edx,al
c001ee19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee1d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ee21:	83 e1 3f             	and    ecx,0x3f
c001ee24:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ee28:	90                   	nop
c001ee29:	83 c4 0c             	add    esp,0xc
c001ee2c:	c3                   	ret    
c001ee2d:	66 90                	xchg   ax,ax
c001ee2f:	90                   	nop

c001ee30 <avxDetect>:
c001ee30:	b8 01 00 00 00       	mov    eax,0x1
c001ee35:	0f a2                	cpuid  
c001ee37:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ee3d:	74 15                	je     c001ee54 <avxDetect.noAVX>
c001ee3f:	b8 01 00 00 00       	mov    eax,0x1
c001ee44:	0f a2                	cpuid  
c001ee46:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ee4c:	74 06                	je     c001ee54 <avxDetect.noAVX>
c001ee4e:	b8 01 00 00 00       	mov    eax,0x1
c001ee53:	c3                   	ret    

c001ee54 <avxDetect.noAVX>:
c001ee54:	b8 00 00 00 00       	mov    eax,0x0
c001ee59:	c3                   	ret    

c001ee5a <avxSave>:
c001ee5a:	53                   	push   ebx
c001ee5b:	52                   	push   edx
c001ee5c:	31 c0                	xor    eax,eax
c001ee5e:	48                   	dec    eax
c001ee5f:	89 c2                	mov    edx,eax
c001ee61:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ee65:	0f ae 23             	xsave  [ebx]
c001ee68:	5a                   	pop    edx
c001ee69:	5b                   	pop    ebx
c001ee6a:	c3                   	ret    

c001ee6b <avxLoad>:
c001ee6b:	53                   	push   ebx
c001ee6c:	52                   	push   edx
c001ee6d:	31 c0                	xor    eax,eax
c001ee6f:	48                   	dec    eax
c001ee70:	89 c2                	mov    edx,eax
c001ee72:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ee76:	0f ae 2b             	xrstor [ebx]
c001ee79:	5a                   	pop    edx
c001ee7a:	5b                   	pop    ebx
c001ee7b:	c3                   	ret    

c001ee7c <avxInit>:
c001ee7c:	e8 67 03 00 00       	call   c001f1e8 <sseInit>
c001ee81:	50                   	push   eax
c001ee82:	51                   	push   ecx
c001ee83:	0f 20 e0             	mov    eax,cr4
c001ee86:	0d 00 00 04 00       	or     eax,0x40000
c001ee8b:	0f 22 e0             	mov    cr4,eax
c001ee8e:	31 c9                	xor    ecx,ecx
c001ee90:	0f 01 d0             	xgetbv 
c001ee93:	0d 07 00 00 00       	or     eax,0x7
c001ee98:	0f 01 d1             	xsetbv 
c001ee9b:	59                   	pop    ecx
c001ee9c:	58                   	pop    eax
c001ee9d:	c3                   	ret    

c001ee9e <avxClose>:
c001ee9e:	c3                   	ret    

c001ee9f <wouldSheSayYes>:
c001ee9f:	c3                   	ret    
c001eea0:	49                   	dec    ecx
c001eea1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001eea5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001eea9:	75 20                	jne    c001eecb <isr0+0xb>
c001eeab:	4e                   	dec    esi
c001eeac:	79 61                	jns    c001ef0f <isr7+0x3>
c001eeae:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eeb3:	66 90                	xchg   ax,ax
c001eeb5:	66 90                	xchg   ax,ax
c001eeb7:	66 90                	xchg   ax,ax
c001eeb9:	66 90                	xchg   ax,ax
c001eebb:	66 90                	xchg   ax,ax
c001eebd:	66 90                	xchg   ax,ax
c001eebf:	90                   	nop

c001eec0 <isr0>:
c001eec0:	fa                   	cli    
c001eec1:	68 00 00 00 00       	push   0x0
c001eec6:	68 00 00 00 00       	push   0x0
c001eecb:	e9 56 01 00 00       	jmp    c001f026 <int_common_stub>

c001eed0 <isr1>:
c001eed0:	fa                   	cli    
c001eed1:	6a 00                	push   0x0
c001eed3:	6a 01                	push   0x1
c001eed5:	e9 4c 01 00 00       	jmp    c001f026 <int_common_stub>

c001eeda <isr2>:
c001eeda:	fa                   	cli    
c001eedb:	6a 00                	push   0x0
c001eedd:	6a 02                	push   0x2
c001eedf:	e9 42 01 00 00       	jmp    c001f026 <int_common_stub>

c001eee4 <isr3>:
c001eee4:	fa                   	cli    
c001eee5:	6a 00                	push   0x0
c001eee7:	6a 03                	push   0x3
c001eee9:	e9 38 01 00 00       	jmp    c001f026 <int_common_stub>

c001eeee <isr4>:
c001eeee:	fa                   	cli    
c001eeef:	6a 00                	push   0x0
c001eef1:	6a 04                	push   0x4
c001eef3:	e9 2e 01 00 00       	jmp    c001f026 <int_common_stub>

c001eef8 <isr5>:
c001eef8:	fa                   	cli    
c001eef9:	6a 00                	push   0x0
c001eefb:	6a 05                	push   0x5
c001eefd:	e9 24 01 00 00       	jmp    c001f026 <int_common_stub>

c001ef02 <isr6>:
c001ef02:	fa                   	cli    
c001ef03:	6a 00                	push   0x0
c001ef05:	6a 06                	push   0x6
c001ef07:	e9 1a 01 00 00       	jmp    c001f026 <int_common_stub>

c001ef0c <isr7>:
c001ef0c:	fa                   	cli    
c001ef0d:	6a 00                	push   0x0
c001ef0f:	6a 07                	push   0x7
c001ef11:	e9 10 01 00 00       	jmp    c001f026 <int_common_stub>

c001ef16 <isr8>:
c001ef16:	fa                   	cli    
c001ef17:	6a 08                	push   0x8
c001ef19:	e9 08 01 00 00       	jmp    c001f026 <int_common_stub>

c001ef1e <isr9>:
c001ef1e:	fa                   	cli    
c001ef1f:	6a 00                	push   0x0
c001ef21:	6a 09                	push   0x9
c001ef23:	e9 fe 00 00 00       	jmp    c001f026 <int_common_stub>

c001ef28 <isr10>:
c001ef28:	fa                   	cli    
c001ef29:	6a 0a                	push   0xa
c001ef2b:	e9 f6 00 00 00       	jmp    c001f026 <int_common_stub>

c001ef30 <isr11>:
c001ef30:	fa                   	cli    
c001ef31:	6a 0b                	push   0xb
c001ef33:	e9 ee 00 00 00       	jmp    c001f026 <int_common_stub>

c001ef38 <isr12>:
c001ef38:	fa                   	cli    
c001ef39:	6a 0c                	push   0xc
c001ef3b:	e9 e6 00 00 00       	jmp    c001f026 <int_common_stub>

c001ef40 <isr13>:
c001ef40:	fa                   	cli    
c001ef41:	6a 0d                	push   0xd
c001ef43:	53                   	push   ebx
c001ef44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ef48:	81 fb 16 f1 01 c0    	cmp    ebx,0xc001f116
c001ef4e:	5b                   	pop    ebx
c001ef4f:	0f 84 c3 01 00 00    	je     c001f118 <finishSignal2>
c001ef55:	e9 cc 00 00 00       	jmp    c001f026 <int_common_stub>

c001ef5a <isr14>:
c001ef5a:	fa                   	cli    
c001ef5b:	6a 0e                	push   0xe
c001ef5d:	e9 c4 00 00 00       	jmp    c001f026 <int_common_stub>

c001ef62 <isr15>:
c001ef62:	fa                   	cli    
c001ef63:	6a 00                	push   0x0
c001ef65:	6a 0f                	push   0xf
c001ef67:	e9 ba 00 00 00       	jmp    c001f026 <int_common_stub>

c001ef6c <isr16>:
c001ef6c:	fa                   	cli    
c001ef6d:	6a 00                	push   0x0
c001ef6f:	6a 10                	push   0x10
c001ef71:	e9 b0 00 00 00       	jmp    c001f026 <int_common_stub>

c001ef76 <isr17>:
c001ef76:	fa                   	cli    
c001ef77:	6a 00                	push   0x0
c001ef79:	6a 11                	push   0x11
c001ef7b:	e9 a6 00 00 00       	jmp    c001f026 <int_common_stub>

c001ef80 <isr18>:
c001ef80:	fa                   	cli    
c001ef81:	6a 00                	push   0x0
c001ef83:	6a 12                	push   0x12
c001ef85:	e9 9c 00 00 00       	jmp    c001f026 <int_common_stub>

c001ef8a <irq3>:
c001ef8a:	fa                   	cli    
c001ef8b:	6a 00                	push   0x0
c001ef8d:	6a 23                	push   0x23
c001ef8f:	e9 92 00 00 00       	jmp    c001f026 <int_common_stub>

c001ef94 <irq4>:
c001ef94:	fa                   	cli    
c001ef95:	6a 00                	push   0x0
c001ef97:	6a 24                	push   0x24
c001ef99:	e9 88 00 00 00       	jmp    c001f026 <int_common_stub>

c001ef9e <irq5>:
c001ef9e:	fa                   	cli    
c001ef9f:	6a 00                	push   0x0
c001efa1:	6a 25                	push   0x25
c001efa3:	e9 7e 00 00 00       	jmp    c001f026 <int_common_stub>

c001efa8 <irq6>:
c001efa8:	fa                   	cli    
c001efa9:	6a 00                	push   0x0
c001efab:	6a 26                	push   0x26
c001efad:	e9 74 00 00 00       	jmp    c001f026 <int_common_stub>

c001efb2 <irq7>:
c001efb2:	fa                   	cli    
c001efb3:	6a 00                	push   0x0
c001efb5:	6a 27                	push   0x27
c001efb7:	e9 6a 00 00 00       	jmp    c001f026 <int_common_stub>

c001efbc <irq8>:
c001efbc:	fa                   	cli    
c001efbd:	6a 00                	push   0x0
c001efbf:	6a 28                	push   0x28
c001efc1:	e9 60 00 00 00       	jmp    c001f026 <int_common_stub>

c001efc6 <irq9>:
c001efc6:	fa                   	cli    
c001efc7:	6a 00                	push   0x0
c001efc9:	6a 29                	push   0x29
c001efcb:	e9 56 00 00 00       	jmp    c001f026 <int_common_stub>

c001efd0 <irq10>:
c001efd0:	fa                   	cli    
c001efd1:	6a 00                	push   0x0
c001efd3:	6a 2a                	push   0x2a
c001efd5:	e9 4c 00 00 00       	jmp    c001f026 <int_common_stub>

c001efda <irq11>:
c001efda:	fa                   	cli    
c001efdb:	6a 00                	push   0x0
c001efdd:	6a 2b                	push   0x2b
c001efdf:	e9 42 00 00 00       	jmp    c001f026 <int_common_stub>

c001efe4 <irq12>:
c001efe4:	fa                   	cli    
c001efe5:	6a 00                	push   0x0
c001efe7:	6a 2c                	push   0x2c
c001efe9:	e9 38 00 00 00       	jmp    c001f026 <int_common_stub>

c001efee <irq13>:
c001efee:	fa                   	cli    
c001efef:	6a 00                	push   0x0
c001eff1:	6a 2d                	push   0x2d
c001eff3:	e9 2e 00 00 00       	jmp    c001f026 <int_common_stub>

c001eff8 <irq14>:
c001eff8:	fa                   	cli    
c001eff9:	6a 00                	push   0x0
c001effb:	6a 2e                	push   0x2e
c001effd:	e9 24 00 00 00       	jmp    c001f026 <int_common_stub>

c001f002 <irq15>:
c001f002:	fa                   	cli    
c001f003:	6a 00                	push   0x0
c001f005:	6a 2f                	push   0x2f
c001f007:	e9 1a 00 00 00       	jmp    c001f026 <int_common_stub>

c001f00c <irq1>:
c001f00c:	fa                   	cli    
c001f00d:	6a 00                	push   0x0
c001f00f:	6a 21                	push   0x21
c001f011:	eb 13                	jmp    c001f026 <int_common_stub>

c001f013 <irq2>:
c001f013:	fa                   	cli    
c001f014:	6a 00                	push   0x0
c001f016:	6a 22                	push   0x22
c001f018:	eb 0c                	jmp    c001f026 <int_common_stub>

c001f01a <isr96>:
c001f01a:	6a 00                	push   0x0
c001f01c:	6a 60                	push   0x60
c001f01e:	fb                   	sti    
c001f01f:	eb 37                	jmp    c001f058 <syscall_common_stub>

c001f021 <irq0>:
c001f021:	fa                   	cli    
c001f022:	6a 00                	push   0x0
c001f024:	6a 20                	push   0x20

c001f026 <int_common_stub>:
c001f026:	60                   	pusha  
c001f027:	1e                   	push   ds
c001f028:	06                   	push   es
c001f029:	0f a0                	push   fs
c001f02b:	0f a8                	push   gs
c001f02d:	66 b8 10 00          	mov    ax,0x10
c001f031:	66 8e d8             	mov    ds,ax
c001f034:	66 8e c0             	mov    es,ax
c001f037:	66 8e e0             	mov    fs,ax
c001f03a:	66 8e e8             	mov    gs,ax
c001f03d:	54                   	push   esp
c001f03e:	fc                   	cld    
c001f03f:	e8 78 dc fe ff       	call   c000ccbc <int_handler>
c001f044:	81 c4 04 00 00 00    	add    esp,0x4
c001f04a:	0f a9                	pop    gs
c001f04c:	0f a1                	pop    fs
c001f04e:	07                   	pop    es
c001f04f:	1f                   	pop    ds
c001f050:	61                   	popa   
c001f051:	81 c4 08 00 00 00    	add    esp,0x8
c001f057:	cf                   	iret   

c001f058 <syscall_common_stub>:
c001f058:	60                   	pusha  
c001f059:	1e                   	push   ds
c001f05a:	06                   	push   es
c001f05b:	0f a0                	push   fs
c001f05d:	0f a8                	push   gs
c001f05f:	66 b8 10 00          	mov    ax,0x10
c001f063:	66 8e d8             	mov    ds,ax
c001f066:	66 8e c0             	mov    es,ax
c001f069:	66 8e e0             	mov    fs,ax
c001f06c:	66 8e e8             	mov    gs,ax
c001f06f:	54                   	push   esp
c001f070:	fc                   	cld    
c001f071:	e8 46 dc fe ff       	call   c000ccbc <int_handler>
c001f076:	81 c4 04 00 00 00    	add    esp,0x4
c001f07c:	0f a9                	pop    gs
c001f07e:	0f a1                	pop    fs
c001f080:	07                   	pop    es
c001f081:	1f                   	pop    ds
c001f082:	e8 fb 29 ff ff       	call   c0011a82 <KiCheckSignalZ>
c001f087:	3d 00 00 00 00       	cmp    eax,0x0
c001f08c:	0f 84 c0 00 00 00    	je     c001f152 <skipSignals>
c001f092:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f097:	61                   	popa   
c001f098:	53                   	push   ebx
c001f099:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f09f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f0a2:	5b                   	pop    ebx
c001f0a3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f0a8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f0ab:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f0ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0b1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f0b4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f0b7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f0ba:	81 c4 08 00 00 00    	add    esp,0x8
c001f0c0:	5e                   	pop    esi
c001f0c1:	5b                   	pop    ebx
c001f0c2:	59                   	pop    ecx
c001f0c3:	5a                   	pop    edx
c001f0c4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f0c7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f0ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f0cd:	52                   	push   edx
c001f0ce:	51                   	push   ecx
c001f0cf:	53                   	push   ebx
c001f0d0:	56                   	push   esi
c001f0d1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f0d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f0da:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f0dd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f0e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f0e6:	60                   	pusha  
c001f0e7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f0ed:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f0f0:	89 e3                	mov    ebx,esp
c001f0f2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f0f5:	52                   	push   edx
c001f0f6:	68 16 f1 01 c0       	push   0xc001f116
c001f0fb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f0fe:	89 dc                	mov    esp,ebx
c001f100:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f103:	68 23 00 00 00       	push   0x23
c001f108:	51                   	push   ecx
c001f109:	68 02 02 00 00       	push   0x202
c001f10e:	68 1b 00 00 00       	push   0x1b
c001f113:	ff 36                	push   DWORD PTR [esi]
c001f115:	cf                   	iret   

c001f116 <finishSignal>:
c001f116:	cd 0f                	int    0xf

c001f118 <finishSignal2>:
c001f118:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f11e:	e8 dc 29 ff ff       	call   c0011aff <KiFinishSignalZ>
c001f123:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f129:	68 23 00 00 00       	push   0x23
c001f12e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f131:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f134:	68 1b 00 00 00       	push   0x1b
c001f139:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f13c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f13f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f142:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f145:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f148:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f14b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f14e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f151:	cf                   	iret   

c001f152 <skipSignals>:
c001f152:	61                   	popa   
c001f153:	81 c4 08 00 00 00    	add    esp,0x8
c001f159:	cf                   	iret   
c001f15a:	90                   	nop
c001f15b:	90                   	nop

c001f15c <irq16>:
c001f15c:	fa                   	cli    
c001f15d:	6a 00                	push   0x0
c001f15f:	6a 30                	push   0x30
c001f161:	e9 c0 fe ff ff       	jmp    c001f026 <int_common_stub>

c001f166 <irq17>:
c001f166:	fa                   	cli    
c001f167:	6a 00                	push   0x0
c001f169:	6a 31                	push   0x31
c001f16b:	e9 b6 fe ff ff       	jmp    c001f026 <int_common_stub>

c001f170 <irq18>:
c001f170:	fa                   	cli    
c001f171:	6a 00                	push   0x0
c001f173:	6a 32                	push   0x32
c001f175:	e9 ac fe ff ff       	jmp    c001f026 <int_common_stub>

c001f17a <irq19>:
c001f17a:	fa                   	cli    
c001f17b:	6a 00                	push   0x0
c001f17d:	6a 33                	push   0x33
c001f17f:	e9 a2 fe ff ff       	jmp    c001f026 <int_common_stub>

c001f184 <irq20>:
c001f184:	fa                   	cli    
c001f185:	6a 00                	push   0x0
c001f187:	6a 34                	push   0x34
c001f189:	e9 98 fe ff ff       	jmp    c001f026 <int_common_stub>

c001f18e <irq21>:
c001f18e:	fa                   	cli    
c001f18f:	6a 00                	push   0x0
c001f191:	6a 35                	push   0x35
c001f193:	e9 8e fe ff ff       	jmp    c001f026 <int_common_stub>

c001f198 <irq22>:
c001f198:	fa                   	cli    
c001f199:	6a 00                	push   0x0
c001f19b:	6a 36                	push   0x36
c001f19d:	e9 84 fe ff ff       	jmp    c001f026 <int_common_stub>

c001f1a2 <irq23>:
c001f1a2:	fa                   	cli    
c001f1a3:	6a 00                	push   0x0
c001f1a5:	6a 37                	push   0x37
c001f1a7:	e9 7a fe ff ff       	jmp    c001f026 <int_common_stub>
c001f1ac:	66 90                	xchg   ax,ax
c001f1ae:	66 90                	xchg   ax,ax

c001f1b0 <i386GetRDRAND>:
c001f1b0:	b9 64 00 00 00       	mov    ecx,0x64

c001f1b5 <retry>:
c001f1b5:	0f c7 f0             	rdrand eax
c001f1b8:	72 05                	jb     c001f1bf <retry.done>
c001f1ba:	e2 f9                	loop   c001f1b5 <retry>

c001f1bc <retry.fail>:
c001f1bc:	31 c0                	xor    eax,eax
c001f1be:	c3                   	ret    

c001f1bf <retry.done>:
c001f1bf:	c3                   	ret    

c001f1c0 <absolutelyNoChanceInHell>:
c001f1c0:	b8 01 00 00 00       	mov    eax,0x1
c001f1c5:	0f a2                	cpuid  
c001f1c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f1cd:	74 06                	je     c001f1d5 <sseDetect.noSSE>
c001f1cf:	b8 01 00 00 00       	mov    eax,0x1
c001f1d4:	c3                   	ret    

c001f1d5 <sseDetect.noSSE>:
c001f1d5:	31 c0                	xor    eax,eax
c001f1d7:	c3                   	ret    

c001f1d8 <sseSave>:
c001f1d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1dc:	0f ae 00             	fxsave [eax]
c001f1df:	c3                   	ret    

c001f1e0 <sseLoad>:
c001f1e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1e4:	0f ae 08             	fxrstor [eax]
c001f1e7:	c3                   	ret    

c001f1e8 <sseInit>:
c001f1e8:	e8 42 00 00 00       	call   c001f22f <x87Init>
c001f1ed:	0f 20 e0             	mov    eax,cr4
c001f1f0:	66 0d 00 06          	or     ax,0x600
c001f1f4:	0f 22 e0             	mov    cr4,eax
c001f1f7:	c3                   	ret    

c001f1f8 <sseClose>:
c001f1f8:	c3                   	ret    
c001f1f9:	66 90                	xchg   ax,ax
c001f1fb:	66 90                	xchg   ax,ax
c001f1fd:	66 90                	xchg   ax,ax
c001f1ff:	90                   	nop

c001f200 <value_37F>:
c001f200:	7f 03                	jg     c001f205 <value_37A+0x1>

c001f202 <value_37E>:
c001f202:	7e 03                	jle    c001f207 <x87Detect+0x1>

c001f204 <value_37A>:
c001f204:	7a 03                	jp     c001f209 <x87Detect+0x3>

c001f206 <x87Detect>:
c001f206:	b8 01 00 00 00       	mov    eax,0x1
c001f20b:	0f a2                	cpuid  
c001f20d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f213:	74 06                	je     c001f21b <x87Detect.nox87>
c001f215:	b8 01 00 00 00       	mov    eax,0x1
c001f21a:	c3                   	ret    

c001f21b <x87Detect.nox87>:
c001f21b:	b8 00 00 00 00       	mov    eax,0x0
c001f220:	c3                   	ret    

c001f221 <x87Save>:
c001f221:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f225:	dd 30                	fnsave [eax]
c001f227:	c3                   	ret    

c001f228 <x87Load>:
c001f228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f22c:	dd 20                	frstor [eax]
c001f22e:	c3                   	ret    

c001f22f <x87Init>:
c001f22f:	0f 20 c0             	mov    eax,cr0
c001f232:	66 25 fb ff          	and    ax,0xfffb
c001f236:	66 0d 22 00          	or     ax,0x22
c001f23a:	0f 22 c0             	mov    cr0,eax
c001f23d:	db e3                	fninit 
c001f23f:	0f 06                	clts   
c001f241:	d9 2d 04 f2 01 c0    	fldcw  WORD PTR ds:0xc001f204
c001f247:	c3                   	ret    

c001f248 <x87Close>:
c001f248:	c3                   	ret    
c001f249:	66 90                	xchg   ax,ax
c001f24b:	90                   	nop

c001f24c <__do_global_ctors_aux>:
c001f24c:	a1 00 02 02 c0       	mov    eax,ds:0xc0020200
c001f251:	83 f8 ff             	cmp    eax,0xffffffff
c001f254:	74 1a                	je     c001f270 <__do_global_ctors_aux+0x24>
c001f256:	55                   	push   ebp
c001f257:	89 e5                	mov    ebp,esp
c001f259:	53                   	push   ebx
c001f25a:	52                   	push   edx
c001f25b:	bb 00 02 02 c0       	mov    ebx,0xc0020200
c001f260:	ff d0                	call   eax
c001f262:	83 eb 04             	sub    ebx,0x4
c001f265:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f267:	83 f8 ff             	cmp    eax,0xffffffff
c001f26a:	75 f4                	jne    c001f260 <__do_global_ctors_aux+0x14>
c001f26c:	58                   	pop    eax
c001f26d:	5b                   	pop    ebx
c001f26e:	5d                   	pop    ebp
c001f26f:	c3                   	ret    
c001f270:	c3                   	ret    
c001f271:	66 90                	xchg   ax,ax
c001f273:	90                   	nop

c001f274 <__divdi3>:
c001f274:	55                   	push   ebp
c001f275:	57                   	push   edi
c001f276:	56                   	push   esi
c001f277:	53                   	push   ebx
c001f278:	83 ec 1c             	sub    esp,0x1c
c001f27b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f27f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f283:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f286:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f28a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f28e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f292:	85 db                	test   ebx,ebx
c001f294:	0f 88 8e 00 00 00    	js     c001f328 <__divdi3+0xb4>
c001f29a:	89 dd                	mov    ebp,ebx
c001f29c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f2a4:	89 d3                	mov    ebx,edx
c001f2a6:	85 d2                	test   edx,edx
c001f2a8:	79 0d                	jns    c001f2b7 <__divdi3+0x43>
c001f2aa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f2ae:	f7 d8                	neg    eax
c001f2b0:	83 d2 00             	adc    edx,0x0
c001f2b3:	f7 da                	neg    edx
c001f2b5:	89 d3                	mov    ebx,edx
c001f2b7:	89 c7                	mov    edi,eax
c001f2b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2bc:	85 db                	test   ebx,ebx
c001f2be:	75 48                	jne    c001f308 <__divdi3+0x94>
c001f2c0:	39 ef                	cmp    edi,ebp
c001f2c2:	76 24                	jbe    c001f2e8 <__divdi3+0x74>
c001f2c4:	89 ea                	mov    edx,ebp
c001f2c6:	f7 f7                	div    edi
c001f2c8:	89 c1                	mov    ecx,eax
c001f2ca:	31 f6                	xor    esi,esi
c001f2cc:	89 c8                	mov    eax,ecx
c001f2ce:	89 f2                	mov    edx,esi
c001f2d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2d4:	85 c9                	test   ecx,ecx
c001f2d6:	74 07                	je     c001f2df <__divdi3+0x6b>
c001f2d8:	f7 d8                	neg    eax
c001f2da:	83 d2 00             	adc    edx,0x0
c001f2dd:	f7 da                	neg    edx
c001f2df:	83 c4 1c             	add    esp,0x1c
c001f2e2:	5b                   	pop    ebx
c001f2e3:	5e                   	pop    esi
c001f2e4:	5f                   	pop    edi
c001f2e5:	5d                   	pop    ebp
c001f2e6:	c3                   	ret    
c001f2e7:	90                   	nop
c001f2e8:	85 ff                	test   edi,edi
c001f2ea:	75 0b                	jne    c001f2f7 <__divdi3+0x83>
c001f2ec:	b8 01 00 00 00       	mov    eax,0x1
c001f2f1:	31 d2                	xor    edx,edx
c001f2f3:	f7 f3                	div    ebx
c001f2f5:	89 c7                	mov    edi,eax
c001f2f7:	31 d2                	xor    edx,edx
c001f2f9:	89 e8                	mov    eax,ebp
c001f2fb:	f7 f7                	div    edi
c001f2fd:	89 c6                	mov    esi,eax
c001f2ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f302:	f7 f7                	div    edi
c001f304:	89 c1                	mov    ecx,eax
c001f306:	eb c4                	jmp    c001f2cc <__divdi3+0x58>
c001f308:	39 eb                	cmp    ebx,ebp
c001f30a:	77 3c                	ja     c001f348 <__divdi3+0xd4>
c001f30c:	0f bd f3             	bsr    esi,ebx
c001f30f:	83 f6 1f             	xor    esi,0x1f
c001f312:	75 40                	jne    c001f354 <__divdi3+0xe0>
c001f314:	39 eb                	cmp    ebx,ebp
c001f316:	72 09                	jb     c001f321 <__divdi3+0xad>
c001f318:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f31b:	0f 87 97 00 00 00    	ja     c001f3b8 <__divdi3+0x144>
c001f321:	b9 01 00 00 00       	mov    ecx,0x1
c001f326:	eb a4                	jmp    c001f2cc <__divdi3+0x58>
c001f328:	f7 d9                	neg    ecx
c001f32a:	83 d3 00             	adc    ebx,0x0
c001f32d:	f7 db                	neg    ebx
c001f32f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f332:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f336:	89 dd                	mov    ebp,ebx
c001f338:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f340:	e9 5f ff ff ff       	jmp    c001f2a4 <__divdi3+0x30>
c001f345:	8d 76 00             	lea    esi,[esi+0x0]
c001f348:	31 f6                	xor    esi,esi
c001f34a:	31 c9                	xor    ecx,ecx
c001f34c:	e9 7b ff ff ff       	jmp    c001f2cc <__divdi3+0x58>
c001f351:	8d 76 00             	lea    esi,[esi+0x0]
c001f354:	b8 20 00 00 00       	mov    eax,0x20
c001f359:	29 f0                	sub    eax,esi
c001f35b:	89 f1                	mov    ecx,esi
c001f35d:	d3 e3                	shl    ebx,cl
c001f35f:	89 fa                	mov    edx,edi
c001f361:	88 c1                	mov    cl,al
c001f363:	d3 ea                	shr    edx,cl
c001f365:	09 da                	or     edx,ebx
c001f367:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f36b:	89 f1                	mov    ecx,esi
c001f36d:	d3 e7                	shl    edi,cl
c001f36f:	89 eb                	mov    ebx,ebp
c001f371:	88 c1                	mov    cl,al
c001f373:	d3 eb                	shr    ebx,cl
c001f375:	89 f1                	mov    ecx,esi
c001f377:	d3 e5                	shl    ebp,cl
c001f379:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f37c:	88 c1                	mov    cl,al
c001f37e:	d3 ea                	shr    edx,cl
c001f380:	09 d5                	or     ebp,edx
c001f382:	89 e8                	mov    eax,ebp
c001f384:	89 da                	mov    edx,ebx
c001f386:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f38a:	89 d3                	mov    ebx,edx
c001f38c:	89 c5                	mov    ebp,eax
c001f38e:	f7 e7                	mul    edi
c001f390:	39 d3                	cmp    ebx,edx
c001f392:	72 18                	jb     c001f3ac <__divdi3+0x138>
c001f394:	74 0a                	je     c001f3a0 <__divdi3+0x12c>
c001f396:	89 e9                	mov    ecx,ebp
c001f398:	31 f6                	xor    esi,esi
c001f39a:	e9 2d ff ff ff       	jmp    c001f2cc <__divdi3+0x58>
c001f39f:	90                   	nop
c001f3a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f3a3:	89 f1                	mov    ecx,esi
c001f3a5:	d3 e7                	shl    edi,cl
c001f3a7:	39 c7                	cmp    edi,eax
c001f3a9:	73 eb                	jae    c001f396 <__divdi3+0x122>
c001f3ab:	90                   	nop
c001f3ac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f3af:	31 f6                	xor    esi,esi
c001f3b1:	e9 16 ff ff ff       	jmp    c001f2cc <__divdi3+0x58>
c001f3b6:	66 90                	xchg   ax,ax
c001f3b8:	31 c9                	xor    ecx,ecx
c001f3ba:	e9 0d ff ff ff       	jmp    c001f2cc <__divdi3+0x58>
c001f3bf:	90                   	nop

c001f3c0 <__moddi3>:
c001f3c0:	55                   	push   ebp
c001f3c1:	57                   	push   edi
c001f3c2:	56                   	push   esi
c001f3c3:	53                   	push   ebx
c001f3c4:	83 ec 2c             	sub    esp,0x2c
c001f3c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f3cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f3cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f3d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f3d7:	85 db                	test   ebx,ebx
c001f3d9:	0f 88 85 00 00 00    	js     c001f464 <__moddi3+0xa4>
c001f3df:	89 de                	mov    esi,ebx
c001f3e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f3e9:	89 d7                	mov    edi,edx
c001f3eb:	85 d2                	test   edx,edx
c001f3ed:	79 09                	jns    c001f3f8 <__moddi3+0x38>
c001f3ef:	f7 d8                	neg    eax
c001f3f1:	83 d2 00             	adc    edx,0x0
c001f3f4:	f7 da                	neg    edx
c001f3f6:	89 d7                	mov    edi,edx
c001f3f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3fc:	89 cd                	mov    ebp,ecx
c001f3fe:	85 ff                	test   edi,edi
c001f400:	75 52                	jne    c001f454 <__moddi3+0x94>
c001f402:	89 c3                	mov    ebx,eax
c001f404:	39 f0                	cmp    eax,esi
c001f406:	76 24                	jbe    c001f42c <__moddi3+0x6c>
c001f408:	89 c8                	mov    eax,ecx
c001f40a:	89 f2                	mov    edx,esi
c001f40c:	f7 f3                	div    ebx
c001f40e:	89 d6                	mov    esi,edx
c001f410:	89 f0                	mov    eax,esi
c001f412:	31 d2                	xor    edx,edx
c001f414:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f418:	85 c9                	test   ecx,ecx
c001f41a:	74 07                	je     c001f423 <__moddi3+0x63>
c001f41c:	f7 d8                	neg    eax
c001f41e:	83 d2 00             	adc    edx,0x0
c001f421:	f7 da                	neg    edx
c001f423:	83 c4 2c             	add    esp,0x2c
c001f426:	5b                   	pop    ebx
c001f427:	5e                   	pop    esi
c001f428:	5f                   	pop    edi
c001f429:	5d                   	pop    ebp
c001f42a:	c3                   	ret    
c001f42b:	90                   	nop
c001f42c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f430:	85 db                	test   ebx,ebx
c001f432:	75 0d                	jne    c001f441 <__moddi3+0x81>
c001f434:	b8 01 00 00 00       	mov    eax,0x1
c001f439:	31 d2                	xor    edx,edx
c001f43b:	f7 f7                	div    edi
c001f43d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f441:	89 f0                	mov    eax,esi
c001f443:	31 d2                	xor    edx,edx
c001f445:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f449:	f7 f7                	div    edi
c001f44b:	89 e8                	mov    eax,ebp
c001f44d:	f7 f7                	div    edi
c001f44f:	89 d6                	mov    esi,edx
c001f451:	eb bd                	jmp    c001f410 <__moddi3+0x50>
c001f453:	90                   	nop
c001f454:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f458:	39 f7                	cmp    edi,esi
c001f45a:	76 20                	jbe    c001f47c <__moddi3+0xbc>
c001f45c:	89 c8                	mov    eax,ecx
c001f45e:	89 f2                	mov    edx,esi
c001f460:	eb b2                	jmp    c001f414 <__moddi3+0x54>
c001f462:	66 90                	xchg   ax,ax
c001f464:	f7 d9                	neg    ecx
c001f466:	83 d3 00             	adc    ebx,0x0
c001f469:	f7 db                	neg    ebx
c001f46b:	89 de                	mov    esi,ebx
c001f46d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f475:	e9 6f ff ff ff       	jmp    c001f3e9 <__moddi3+0x29>
c001f47a:	66 90                	xchg   ax,ax
c001f47c:	0f bd c7             	bsr    eax,edi
c001f47f:	83 f0 1f             	xor    eax,0x1f
c001f482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f486:	75 24                	jne    c001f4ac <__moddi3+0xec>
c001f488:	39 f7                	cmp    edi,esi
c001f48a:	72 06                	jb     c001f492 <__moddi3+0xd2>
c001f48c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f490:	77 0c                	ja     c001f49e <__moddi3+0xde>
c001f492:	89 e9                	mov    ecx,ebp
c001f494:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f498:	19 fe                	sbb    esi,edi
c001f49a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f49e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f4a2:	89 f2                	mov    edx,esi
c001f4a4:	e9 6b ff ff ff       	jmp    c001f414 <__moddi3+0x54>
c001f4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001f4ac:	b8 20 00 00 00       	mov    eax,0x20
c001f4b1:	89 c2                	mov    edx,eax
c001f4b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f4b7:	29 da                	sub    edx,ebx
c001f4b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f4bd:	88 d9                	mov    cl,bl
c001f4bf:	d3 e7                	shl    edi,cl
c001f4c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4c5:	88 d1                	mov    cl,dl
c001f4c7:	d3 e8                	shr    eax,cl
c001f4c9:	09 c7                	or     edi,eax
c001f4cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f4cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f4d3:	89 d8                	mov    eax,ebx
c001f4d5:	88 d9                	mov    cl,bl
c001f4d7:	d3 e7                	shl    edi,cl
c001f4d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f4dd:	89 f3                	mov    ebx,esi
c001f4df:	88 d1                	mov    cl,dl
c001f4e1:	d3 eb                	shr    ebx,cl
c001f4e3:	89 c7                	mov    edi,eax
c001f4e5:	88 c1                	mov    cl,al
c001f4e7:	d3 e6                	shl    esi,cl
c001f4e9:	89 e8                	mov    eax,ebp
c001f4eb:	88 d1                	mov    cl,dl
c001f4ed:	d3 e8                	shr    eax,cl
c001f4ef:	09 f0                	or     eax,esi
c001f4f1:	89 f9                	mov    ecx,edi
c001f4f3:	d3 e5                	shl    ebp,cl
c001f4f5:	89 da                	mov    edx,ebx
c001f4f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f4fb:	89 d3                	mov    ebx,edx
c001f4fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f501:	89 c6                	mov    esi,eax
c001f503:	89 d1                	mov    ecx,edx
c001f505:	39 d3                	cmp    ebx,edx
c001f507:	72 27                	jb     c001f530 <__moddi3+0x170>
c001f509:	74 21                	je     c001f52c <__moddi3+0x16c>
c001f50b:	29 f5                	sub    ebp,esi
c001f50d:	19 cb                	sbb    ebx,ecx
c001f50f:	89 de                	mov    esi,ebx
c001f511:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f515:	d3 e6                	shl    esi,cl
c001f517:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f51b:	89 f9                	mov    ecx,edi
c001f51d:	d3 ed                	shr    ebp,cl
c001f51f:	09 ee                	or     esi,ebp
c001f521:	89 f0                	mov    eax,esi
c001f523:	d3 eb                	shr    ebx,cl
c001f525:	89 da                	mov    edx,ebx
c001f527:	e9 e8 fe ff ff       	jmp    c001f414 <__moddi3+0x54>
c001f52c:	39 c5                	cmp    ebp,eax
c001f52e:	73 db                	jae    c001f50b <__moddi3+0x14b>
c001f530:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f534:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f538:	89 d1                	mov    ecx,edx
c001f53a:	89 c6                	mov    esi,eax
c001f53c:	eb cd                	jmp    c001f50b <__moddi3+0x14b>
c001f53e:	66 90                	xchg   ax,ax

c001f540 <__udivdi3>:
c001f540:	55                   	push   ebp
c001f541:	57                   	push   edi
c001f542:	56                   	push   esi
c001f543:	53                   	push   ebx
c001f544:	83 ec 1c             	sub    esp,0x1c
c001f547:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f54b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f54f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f553:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f557:	85 d2                	test   edx,edx
c001f559:	75 41                	jne    c001f59c <__udivdi3+0x5c>
c001f55b:	39 f7                	cmp    edi,esi
c001f55d:	76 15                	jbe    c001f574 <__udivdi3+0x34>
c001f55f:	89 e8                	mov    eax,ebp
c001f561:	89 f2                	mov    edx,esi
c001f563:	f7 f7                	div    edi
c001f565:	31 db                	xor    ebx,ebx
c001f567:	89 da                	mov    edx,ebx
c001f569:	83 c4 1c             	add    esp,0x1c
c001f56c:	5b                   	pop    ebx
c001f56d:	5e                   	pop    esi
c001f56e:	5f                   	pop    edi
c001f56f:	5d                   	pop    ebp
c001f570:	c3                   	ret    
c001f571:	8d 76 00             	lea    esi,[esi+0x0]
c001f574:	89 f9                	mov    ecx,edi
c001f576:	85 ff                	test   edi,edi
c001f578:	75 0b                	jne    c001f585 <__udivdi3+0x45>
c001f57a:	b8 01 00 00 00       	mov    eax,0x1
c001f57f:	31 d2                	xor    edx,edx
c001f581:	f7 f7                	div    edi
c001f583:	89 c1                	mov    ecx,eax
c001f585:	31 d2                	xor    edx,edx
c001f587:	89 f0                	mov    eax,esi
c001f589:	f7 f1                	div    ecx
c001f58b:	89 c3                	mov    ebx,eax
c001f58d:	89 e8                	mov    eax,ebp
c001f58f:	f7 f1                	div    ecx
c001f591:	89 da                	mov    edx,ebx
c001f593:	83 c4 1c             	add    esp,0x1c
c001f596:	5b                   	pop    ebx
c001f597:	5e                   	pop    esi
c001f598:	5f                   	pop    edi
c001f599:	5d                   	pop    ebp
c001f59a:	c3                   	ret    
c001f59b:	90                   	nop
c001f59c:	39 f2                	cmp    edx,esi
c001f59e:	77 1c                	ja     c001f5bc <__udivdi3+0x7c>
c001f5a0:	0f bd da             	bsr    ebx,edx
c001f5a3:	83 f3 1f             	xor    ebx,0x1f
c001f5a6:	75 24                	jne    c001f5cc <__udivdi3+0x8c>
c001f5a8:	39 f2                	cmp    edx,esi
c001f5aa:	72 08                	jb     c001f5b4 <__udivdi3+0x74>
c001f5ac:	39 ef                	cmp    edi,ebp
c001f5ae:	0f 87 84 00 00 00    	ja     c001f638 <__udivdi3+0xf8>
c001f5b4:	b8 01 00 00 00       	mov    eax,0x1
c001f5b9:	eb ac                	jmp    c001f567 <__udivdi3+0x27>
c001f5bb:	90                   	nop
c001f5bc:	31 db                	xor    ebx,ebx
c001f5be:	31 c0                	xor    eax,eax
c001f5c0:	89 da                	mov    edx,ebx
c001f5c2:	83 c4 1c             	add    esp,0x1c
c001f5c5:	5b                   	pop    ebx
c001f5c6:	5e                   	pop    esi
c001f5c7:	5f                   	pop    edi
c001f5c8:	5d                   	pop    ebp
c001f5c9:	c3                   	ret    
c001f5ca:	66 90                	xchg   ax,ax
c001f5cc:	b8 20 00 00 00       	mov    eax,0x20
c001f5d1:	29 d8                	sub    eax,ebx
c001f5d3:	88 d9                	mov    cl,bl
c001f5d5:	d3 e2                	shl    edx,cl
c001f5d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f5db:	89 fa                	mov    edx,edi
c001f5dd:	88 c1                	mov    cl,al
c001f5df:	d3 ea                	shr    edx,cl
c001f5e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5e5:	09 d1                	or     ecx,edx
c001f5e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5eb:	88 d9                	mov    cl,bl
c001f5ed:	d3 e7                	shl    edi,cl
c001f5ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f5f3:	89 f7                	mov    edi,esi
c001f5f5:	88 c1                	mov    cl,al
c001f5f7:	d3 ef                	shr    edi,cl
c001f5f9:	88 d9                	mov    cl,bl
c001f5fb:	d3 e6                	shl    esi,cl
c001f5fd:	89 ea                	mov    edx,ebp
c001f5ff:	88 c1                	mov    cl,al
c001f601:	d3 ea                	shr    edx,cl
c001f603:	09 d6                	or     esi,edx
c001f605:	89 f0                	mov    eax,esi
c001f607:	89 fa                	mov    edx,edi
c001f609:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f60d:	89 d7                	mov    edi,edx
c001f60f:	89 c6                	mov    esi,eax
c001f611:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f615:	39 d7                	cmp    edi,edx
c001f617:	72 13                	jb     c001f62c <__udivdi3+0xec>
c001f619:	74 09                	je     c001f624 <__udivdi3+0xe4>
c001f61b:	89 f0                	mov    eax,esi
c001f61d:	31 db                	xor    ebx,ebx
c001f61f:	e9 43 ff ff ff       	jmp    c001f567 <__udivdi3+0x27>
c001f624:	88 d9                	mov    cl,bl
c001f626:	d3 e5                	shl    ebp,cl
c001f628:	39 c5                	cmp    ebp,eax
c001f62a:	73 ef                	jae    c001f61b <__udivdi3+0xdb>
c001f62c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f62f:	31 db                	xor    ebx,ebx
c001f631:	e9 31 ff ff ff       	jmp    c001f567 <__udivdi3+0x27>
c001f636:	66 90                	xchg   ax,ax
c001f638:	31 c0                	xor    eax,eax
c001f63a:	e9 28 ff ff ff       	jmp    c001f567 <__udivdi3+0x27>
c001f63f:	90                   	nop

c001f640 <__umoddi3>:
c001f640:	55                   	push   ebp
c001f641:	57                   	push   edi
c001f642:	56                   	push   esi
c001f643:	53                   	push   ebx
c001f644:	83 ec 1c             	sub    esp,0x1c
c001f647:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f64b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f64f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f653:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f657:	89 da                	mov    edx,ebx
c001f659:	85 c0                	test   eax,eax
c001f65b:	75 37                	jne    c001f694 <__umoddi3+0x54>
c001f65d:	39 df                	cmp    edi,ebx
c001f65f:	76 13                	jbe    c001f674 <__umoddi3+0x34>
c001f661:	89 f0                	mov    eax,esi
c001f663:	f7 f7                	div    edi
c001f665:	89 d0                	mov    eax,edx
c001f667:	31 d2                	xor    edx,edx
c001f669:	83 c4 1c             	add    esp,0x1c
c001f66c:	5b                   	pop    ebx
c001f66d:	5e                   	pop    esi
c001f66e:	5f                   	pop    edi
c001f66f:	5d                   	pop    ebp
c001f670:	c3                   	ret    
c001f671:	8d 76 00             	lea    esi,[esi+0x0]
c001f674:	89 fd                	mov    ebp,edi
c001f676:	85 ff                	test   edi,edi
c001f678:	75 0b                	jne    c001f685 <__umoddi3+0x45>
c001f67a:	b8 01 00 00 00       	mov    eax,0x1
c001f67f:	31 d2                	xor    edx,edx
c001f681:	f7 f7                	div    edi
c001f683:	89 c5                	mov    ebp,eax
c001f685:	89 d8                	mov    eax,ebx
c001f687:	31 d2                	xor    edx,edx
c001f689:	f7 f5                	div    ebp
c001f68b:	89 f0                	mov    eax,esi
c001f68d:	f7 f5                	div    ebp
c001f68f:	89 d0                	mov    eax,edx
c001f691:	eb d4                	jmp    c001f667 <__umoddi3+0x27>
c001f693:	90                   	nop
c001f694:	89 f1                	mov    ecx,esi
c001f696:	39 d8                	cmp    eax,ebx
c001f698:	76 0a                	jbe    c001f6a4 <__umoddi3+0x64>
c001f69a:	89 f0                	mov    eax,esi
c001f69c:	83 c4 1c             	add    esp,0x1c
c001f69f:	5b                   	pop    ebx
c001f6a0:	5e                   	pop    esi
c001f6a1:	5f                   	pop    edi
c001f6a2:	5d                   	pop    ebp
c001f6a3:	c3                   	ret    
c001f6a4:	0f bd e8             	bsr    ebp,eax
c001f6a7:	83 f5 1f             	xor    ebp,0x1f
c001f6aa:	75 1c                	jne    c001f6c8 <__umoddi3+0x88>
c001f6ac:	39 d8                	cmp    eax,ebx
c001f6ae:	72 04                	jb     c001f6b4 <__umoddi3+0x74>
c001f6b0:	39 f7                	cmp    edi,esi
c001f6b2:	77 08                	ja     c001f6bc <__umoddi3+0x7c>
c001f6b4:	89 da                	mov    edx,ebx
c001f6b6:	29 fe                	sub    esi,edi
c001f6b8:	19 c2                	sbb    edx,eax
c001f6ba:	89 f1                	mov    ecx,esi
c001f6bc:	89 c8                	mov    eax,ecx
c001f6be:	83 c4 1c             	add    esp,0x1c
c001f6c1:	5b                   	pop    ebx
c001f6c2:	5e                   	pop    esi
c001f6c3:	5f                   	pop    edi
c001f6c4:	5d                   	pop    ebp
c001f6c5:	c3                   	ret    
c001f6c6:	66 90                	xchg   ax,ax
c001f6c8:	ba 20 00 00 00       	mov    edx,0x20
c001f6cd:	29 ea                	sub    edx,ebp
c001f6cf:	89 e9                	mov    ecx,ebp
c001f6d1:	d3 e0                	shl    eax,cl
c001f6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f6d7:	89 f8                	mov    eax,edi
c001f6d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f6dd:	88 d1                	mov    cl,dl
c001f6df:	d3 e8                	shr    eax,cl
c001f6e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6e5:	09 c1                	or     ecx,eax
c001f6e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f6eb:	89 e9                	mov    ecx,ebp
c001f6ed:	d3 e7                	shl    edi,cl
c001f6ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6f3:	89 d8                	mov    eax,ebx
c001f6f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f6f9:	88 d1                	mov    cl,dl
c001f6fb:	d3 e8                	shr    eax,cl
c001f6fd:	89 c7                	mov    edi,eax
c001f6ff:	89 e9                	mov    ecx,ebp
c001f701:	d3 e3                	shl    ebx,cl
c001f703:	89 f0                	mov    eax,esi
c001f705:	88 d1                	mov    cl,dl
c001f707:	d3 e8                	shr    eax,cl
c001f709:	09 d8                	or     eax,ebx
c001f70b:	89 e9                	mov    ecx,ebp
c001f70d:	d3 e6                	shl    esi,cl
c001f70f:	89 f3                	mov    ebx,esi
c001f711:	89 fa                	mov    edx,edi
c001f713:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f717:	89 d1                	mov    ecx,edx
c001f719:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f71d:	89 c6                	mov    esi,eax
c001f71f:	89 d7                	mov    edi,edx
c001f721:	39 d1                	cmp    ecx,edx
c001f723:	72 27                	jb     c001f74c <__umoddi3+0x10c>
c001f725:	74 21                	je     c001f748 <__umoddi3+0x108>
c001f727:	89 ca                	mov    edx,ecx
c001f729:	29 f3                	sub    ebx,esi
c001f72b:	19 fa                	sbb    edx,edi
c001f72d:	89 d0                	mov    eax,edx
c001f72f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f733:	d3 e0                	shl    eax,cl
c001f735:	89 e9                	mov    ecx,ebp
c001f737:	d3 eb                	shr    ebx,cl
c001f739:	09 d8                	or     eax,ebx
c001f73b:	d3 ea                	shr    edx,cl
c001f73d:	83 c4 1c             	add    esp,0x1c
c001f740:	5b                   	pop    ebx
c001f741:	5e                   	pop    esi
c001f742:	5f                   	pop    edi
c001f743:	5d                   	pop    ebp
c001f744:	c3                   	ret    
c001f745:	8d 76 00             	lea    esi,[esi+0x0]
c001f748:	39 c3                	cmp    ebx,eax
c001f74a:	73 db                	jae    c001f727 <__umoddi3+0xe7>
c001f74c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f750:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f754:	89 d7                	mov    edi,edx
c001f756:	89 c6                	mov    esi,eax
c001f758:	eb cd                	jmp    c001f727 <__umoddi3+0xe7>

Disassembly of section .init:

c001f75a <_init>:
c001f75a:	55                   	push   ebp
c001f75b:	89 e5                	mov    ebp,esp
c001f75d:	e8 92 09 fe ff       	call   c00000f4 <frame_dummy>
c001f762:	e8 e5 fa ff ff       	call   c001f24c <__do_global_ctors_aux>
c001f767:	5d                   	pop    ebp
c001f768:	c3                   	ret    

Disassembly of section .fini:

c001f769 <_fini>:
c001f769:	55                   	push   ebp
c001f76a:	89 e5                	mov    ebp,esp
c001f76c:	e8 13 09 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f771:	5d                   	pop    ebp
c001f772:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f774 <Computer::~Computer()>:
c001f774:	83 ec 0c             	sub    esp,0xc
c001f777:	ba 94 0a 02 c0       	mov    edx,0xc0020a94
c001f77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f780:	89 10                	mov    DWORD PTR [eax],edx
c001f782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f786:	83 ec 0c             	sub    esp,0xc
c001f789:	50                   	push   eax
c001f78a:	e8 85 cf fe ff       	call   c000c714 <Device::~Device()>
c001f78f:	83 c4 10             	add    esp,0x10
c001f792:	90                   	nop
c001f793:	83 c4 0c             	add    esp,0xc
c001f796:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f798 <Computer::~Computer()>:
c001f798:	83 ec 0c             	sub    esp,0xc
c001f79b:	83 ec 0c             	sub    esp,0xc
c001f79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7a2:	e8 cd ff ff ff       	call   c001f774 <Computer::~Computer()>
c001f7a7:	83 c4 10             	add    esp,0x10
c001f7aa:	83 ec 08             	sub    esp,0x8
c001f7ad:	68 70 01 00 00       	push   0x170
c001f7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7b6:	e8 5d b0 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f7bb:	83 c4 10             	add    esp,0x10
c001f7be:	83 c4 0c             	add    esp,0xc
c001f7c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f7c2 <idleCommon()>:
c001f7c2:	83 ec 0c             	sub    esp,0xc
c001f7c5:	fa                   	cli    
c001f7c6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f7cc:	e8 ff 66 ff ff       	call   c0015ed0 <schedule()>
c001f7d1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f7d6:	48                   	dec    eax
c001f7d7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f7dc:	75 01                	jne    c001f7df <idleCommon()+0x1d>
c001f7de:	fb                   	sti    
c001f7df:	83 c4 0c             	add    esp,0xc
c001f7e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f7e4 <LinkedList<UnixFile>::~LinkedList()>:
c001f7e4:	90                   	nop
c001f7e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f7e6 <LinkedList<UnixFile>::LinkedList()>:
c001f7e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f80a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f814:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f81b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f81f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f826:	90                   	nop
c001f827:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f828 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f828:	83 ec 0c             	sub    esp,0xc
c001f82b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f830:	75 10                	jne    c001f842 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f832:	83 ec 0c             	sub    esp,0xc
c001f835:	68 a8 0c 02 c0       	push   0xc0020ca8
c001f83a:	e8 2c 1c ff ff       	call   c001146b <KePanic(char const*)>
c001f83f:	83 c4 10             	add    esp,0x10
c001f842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f846:	8b 00                	mov    eax,DWORD PTR [eax]
c001f848:	85 c0                	test   eax,eax
c001f84a:	74 34                	je     c001f880 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f850:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f853:	85 c0                	test   eax,eax
c001f855:	74 29                	je     c001f880 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f85e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f862:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f869:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f86d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f874:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f877:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f87e:	eb 65                	jmp    c001f8e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f884:	8b 00                	mov    eax,DWORD PTR [eax]
c001f886:	85 c0                	test   eax,eax
c001f888:	75 4b                	jne    c001f8d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f891:	85 c0                	test   eax,eax
c001f893:	75 40                	jne    c001f8d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f899:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f89d:	89 10                	mov    DWORD PTR [eax],edx
c001f89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8bf:	85 c0                	test   eax,eax
c001f8c1:	74 22                	je     c001f8e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8c3:	83 ec 0c             	sub    esp,0xc
c001f8c6:	68 ca 0c 02 c0       	push   0xc0020cca
c001f8cb:	e8 9b 1b ff ff       	call   c001146b <KePanic(char const*)>
c001f8d0:	83 c4 10             	add    esp,0x10
c001f8d3:	eb 10                	jmp    c001f8e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8d5:	83 ec 0c             	sub    esp,0xc
c001f8d8:	68 d4 0c 02 c0       	push   0xc0020cd4
c001f8dd:	e8 89 1b ff ff       	call   c001146b <KePanic(char const*)>
c001f8e2:	83 c4 10             	add    esp,0x10
c001f8e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8ec:	8d 50 01             	lea    edx,[eax+0x1]
c001f8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8f6:	90                   	nop
c001f8f7:	83 c4 0c             	add    esp,0xc
c001f8fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f8fc <LinkedList<UnixFile>::getFirstElement()>:
c001f8fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f900:	8b 00                	mov    eax,DWORD PTR [eax]
c001f902:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f904 <LinkedList<UnixFile>::removeFirst()>:
c001f904:	83 ec 0c             	sub    esp,0xc
c001f907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f90d:	85 c0                	test   eax,eax
c001f90f:	75 12                	jne    c001f923 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f911:	83 ec 0c             	sub    esp,0xc
c001f914:	68 e0 0c 02 c0       	push   0xc0020ce0
c001f919:	e8 4d 1b ff ff       	call   c001146b <KePanic(char const*)>
c001f91e:	83 c4 10             	add    esp,0x10
c001f921:	eb 7e                	jmp    c001f9a1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f927:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f92d:	85 c0                	test   eax,eax
c001f92f:	74 10                	je     c001f941 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f931:	83 ec 0c             	sub    esp,0xc
c001f934:	68 2b 0d 02 c0       	push   0xc0020d2b
c001f939:	e8 2d 1b ff ff       	call   c001146b <KePanic(char const*)>
c001f93e:	83 c4 10             	add    esp,0x10
c001f941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f945:	8b 00                	mov    eax,DWORD PTR [eax]
c001f947:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f94a:	85 c0                	test   eax,eax
c001f94c:	75 33                	jne    c001f981 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f952:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f967:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f96a:	83 f8 01             	cmp    eax,0x1
c001f96d:	74 21                	je     c001f990 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f96f:	83 ec 0c             	sub    esp,0xc
c001f972:	68 04 0d 02 c0       	push   0xc0020d04
c001f977:	e8 ef 1a ff ff       	call   c001146b <KePanic(char const*)>
c001f97c:	83 c4 10             	add    esp,0x10
c001f97f:	eb 0f                	jmp    c001f990 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f985:	8b 00                	mov    eax,DWORD PTR [eax]
c001f987:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98e:	89 10                	mov    DWORD PTR [eax],edx
c001f990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f994:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f997:	8d 50 ff             	lea    edx,[eax-0x1]
c001f99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9a1:	83 c4 0c             	add    esp,0xc
c001f9a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f9a6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f9a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9ad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f9ae <DriverlessDevice::~DriverlessDevice()>:
c001f9ae:	ba bc 18 02 c0       	mov    edx,0xc00218bc
c001f9b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9b7:	89 10                	mov    DWORD PTR [eax],edx
c001f9b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9bd:	50                   	push   eax
c001f9be:	e8 51 cd fe ff       	call   c000c714 <Device::~Device()>
c001f9c3:	83 c4 04             	add    esp,0x4
c001f9c6:	90                   	nop
c001f9c7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f9c8 <DriverlessDevice::~DriverlessDevice()>:
c001f9c8:	83 ec 0c             	sub    esp,0xc
c001f9cb:	83 ec 0c             	sub    esp,0xc
c001f9ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9d2:	e8 d7 ff ff ff       	call   c001f9ae <DriverlessDevice::~DriverlessDevice()>
c001f9d7:	83 c4 10             	add    esp,0x10
c001f9da:	83 ec 08             	sub    esp,0x8
c001f9dd:	68 58 01 00 00       	push   0x158
c001f9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9e6:	e8 2d ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f9eb:	83 c4 10             	add    esp,0x10
c001f9ee:	83 c4 0c             	add    esp,0xc
c001f9f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f9f2 <LinkedList<Device>::addElement(Device*)>:
c001f9f2:	83 ec 0c             	sub    esp,0xc
c001f9f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f9fa:	75 10                	jne    c001fa0c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f9fc:	83 ec 0c             	sub    esp,0xc
c001f9ff:	68 a8 0c 02 c0       	push   0xc0020ca8
c001fa04:	e8 62 1a ff ff       	call   c001146b <KePanic(char const*)>
c001fa09:	83 c4 10             	add    esp,0x10
c001fa0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa10:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa12:	85 c0                	test   eax,eax
c001fa14:	74 3a                	je     c001fa50 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa1d:	85 c0                	test   eax,eax
c001fa1f:	74 2f                	je     c001fa50 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa2c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa3a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa44:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fa4e:	eb 68                	jmp    c001fab8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fa50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa54:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa56:	85 c0                	test   eax,eax
c001fa58:	75 4e                	jne    c001faa8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa61:	85 c0                	test   eax,eax
c001fa63:	75 43                	jne    c001faa8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa6d:	89 10                	mov    DWORD PTR [eax],edx
c001fa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa81:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fa8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa92:	85 c0                	test   eax,eax
c001fa94:	74 22                	je     c001fab8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fa96:	83 ec 0c             	sub    esp,0xc
c001fa99:	68 ca 0c 02 c0       	push   0xc0020cca
c001fa9e:	e8 c8 19 ff ff       	call   c001146b <KePanic(char const*)>
c001faa3:	83 c4 10             	add    esp,0x10
c001faa6:	eb 10                	jmp    c001fab8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001faa8:	83 ec 0c             	sub    esp,0xc
c001faab:	68 d4 0c 02 c0       	push   0xc0020cd4
c001fab0:	e8 b6 19 ff ff       	call   c001146b <KePanic(char const*)>
c001fab5:	83 c4 10             	add    esp,0x10
c001fab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fabc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fabf:	8d 50 01             	lea    edx,[eax+0x1]
c001fac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fac9:	90                   	nop
c001faca:	83 c4 0c             	add    esp,0xc
c001facd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001face <LinkedList<Device>::LinkedList()>:
c001face:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fadc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fae3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001faee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fafc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb0e:	90                   	nop
c001fb0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fb10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb16:	85 c0                	test   eax,eax
c001fb18:	75 0e                	jne    c001fb28 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fb1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb21:	85 c0                	test   eax,eax
c001fb23:	75 03                	jne    c001fb28 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fb25:	b0 01                	mov    al,0x1
c001fb27:	c3                   	ret    
c001fb28:	b0 00                	mov    al,0x0
c001fb2a:	90                   	nop
c001fb2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fb2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb30:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fb34:	83 ec 0c             	sub    esp,0xc
c001fb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb3d:	85 c0                	test   eax,eax
c001fb3f:	75 17                	jne    c001fb58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fb41:	83 ec 0c             	sub    esp,0xc
c001fb44:	68 e0 0c 02 c0       	push   0xc0020ce0
c001fb49:	e8 1d 19 ff ff       	call   c001146b <KePanic(char const*)>
c001fb4e:	83 c4 10             	add    esp,0x10
c001fb51:	e9 96 00 00 00       	jmp    c001fbec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fb56:	66 90                	xchg   ax,ax
c001fb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb62:	85 c0                	test   eax,eax
c001fb64:	0f 95 c0             	setne  al
c001fb67:	0f b6 c0             	movzx  eax,al
c001fb6a:	85 c0                	test   eax,eax
c001fb6c:	74 12                	je     c001fb80 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fb6e:	83 ec 0c             	sub    esp,0xc
c001fb71:	68 2b 0d 02 c0       	push   0xc0020d2b
c001fb76:	e8 f0 18 ff ff       	call   c001146b <KePanic(char const*)>
c001fb7b:	83 c4 10             	add    esp,0x10
c001fb7e:	66 90                	xchg   ax,ax
c001fb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb84:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb89:	85 c0                	test   eax,eax
c001fb8b:	0f 94 c0             	sete   al
c001fb8e:	0f b6 c0             	movzx  eax,al
c001fb91:	85 c0                	test   eax,eax
c001fb93:	74 33                	je     c001fbc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbb1:	83 f8 01             	cmp    eax,0x1
c001fbb4:	74 22                	je     c001fbd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fbb6:	83 ec 0c             	sub    esp,0xc
c001fbb9:	68 04 0d 02 c0       	push   0xc0020d04
c001fbbe:	e8 a8 18 ff ff       	call   c001146b <KePanic(char const*)>
c001fbc3:	83 c4 10             	add    esp,0x10
c001fbc6:	eb 10                	jmp    c001fbd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fbc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbcc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd5:	89 10                	mov    DWORD PTR [eax],edx
c001fbd7:	90                   	nop
c001fbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbdc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbdf:	8d 50 ff             	lea    edx,[eax-0x1]
c001fbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fbe9:	8d 76 00             	lea    esi,[esi+0x0]
c001fbec:	83 c4 0c             	add    esp,0xc
c001fbef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fbf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fbf0:	83 ec 0c             	sub    esp,0xc
c001fbf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fbf8:	75 12                	jne    c001fc0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fbfa:	83 ec 0c             	sub    esp,0xc
c001fbfd:	68 a8 0c 02 c0       	push   0xc0020ca8
c001fc02:	e8 64 18 ff ff       	call   c001146b <KePanic(char const*)>
c001fc07:	83 c4 10             	add    esp,0x10
c001fc0a:	66 90                	xchg   ax,ax
c001fc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc10:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc12:	85 c0                	test   eax,eax
c001fc14:	74 36                	je     c001fc4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fc16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc1d:	85 c0                	test   eax,eax
c001fc1f:	74 2b                	je     c001fc4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fc21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc2c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc41:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fc48:	eb 6a                	jmp    c001fcb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fc4a:	66 90                	xchg   ax,ax
c001fc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc50:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc52:	85 c0                	test   eax,eax
c001fc54:	75 4e                	jne    c001fca4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc5d:	85 c0                	test   eax,eax
c001fc5f:	75 43                	jne    c001fca4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fc61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc69:	89 10                	mov    DWORD PTR [eax],edx
c001fc6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc7d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fc84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc8b:	85 c0                	test   eax,eax
c001fc8d:	74 25                	je     c001fcb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fc8f:	83 ec 0c             	sub    esp,0xc
c001fc92:	68 ca 0c 02 c0       	push   0xc0020cca
c001fc97:	e8 cf 17 ff ff       	call   c001146b <KePanic(char const*)>
c001fc9c:	83 c4 10             	add    esp,0x10
c001fc9f:	eb 13                	jmp    c001fcb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fca1:	8d 76 00             	lea    esi,[esi+0x0]
c001fca4:	83 ec 0c             	sub    esp,0xc
c001fca7:	68 d4 0c 02 c0       	push   0xc0020cd4
c001fcac:	e8 ba 17 ff ff       	call   c001146b <KePanic(char const*)>
c001fcb1:	83 c4 10             	add    esp,0x10
c001fcb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcbb:	8d 50 01             	lea    edx,[eax+0x1]
c001fcbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fcc5:	90                   	nop
c001fcc6:	83 c4 0c             	add    esp,0xc
c001fcc9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fccc <ACPI::~ACPI()>:
c001fccc:	83 ec 0c             	sub    esp,0xc
c001fccf:	ba a4 1e 02 c0       	mov    edx,0xc0021ea4
c001fcd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd8:	89 10                	mov    DWORD PTR [eax],edx
c001fcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcde:	83 ec 0c             	sub    esp,0xc
c001fce1:	50                   	push   eax
c001fce2:	e8 2d ca fe ff       	call   c000c714 <Device::~Device()>
c001fce7:	83 c4 10             	add    esp,0x10
c001fcea:	90                   	nop
c001fceb:	83 c4 0c             	add    esp,0xc
c001fcee:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fcf0 <ACPI::~ACPI()>:
c001fcf0:	83 ec 0c             	sub    esp,0xc
c001fcf3:	83 ec 0c             	sub    esp,0xc
c001fcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcfa:	e8 cd ff ff ff       	call   c001fccc <ACPI::~ACPI()>
c001fcff:	83 c4 10             	add    esp,0x10
c001fd02:	83 ec 08             	sub    esp,0x8
c001fd05:	68 64 12 00 00       	push   0x1264
c001fd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd0e:	e8 05 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	83 c4 0c             	add    esp,0xc
c001fd19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fd1c <LinkedList<Device>::~LinkedList()>:
c001fd1c:	90                   	nop
c001fd1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fd20 <LinkedList<Device>::isEmpty()>:
c001fd20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd24:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd26:	85 c0                	test   eax,eax
c001fd28:	75 0e                	jne    c001fd38 <LinkedList<Device>::isEmpty()+0x18>
c001fd2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd31:	85 c0                	test   eax,eax
c001fd33:	75 03                	jne    c001fd38 <LinkedList<Device>::isEmpty()+0x18>
c001fd35:	b0 01                	mov    al,0x1
c001fd37:	c3                   	ret    
c001fd38:	b0 00                	mov    al,0x0
c001fd3a:	90                   	nop
c001fd3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fd3c <LinkedList<Device>::getFirstElement()>:
c001fd3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd40:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fd44 <LinkedList<Device>::removeFirst()>:
c001fd44:	83 ec 0c             	sub    esp,0xc
c001fd47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd4d:	85 c0                	test   eax,eax
c001fd4f:	75 17                	jne    c001fd68 <LinkedList<Device>::removeFirst()+0x24>
c001fd51:	83 ec 0c             	sub    esp,0xc
c001fd54:	68 e0 0c 02 c0       	push   0xc0020ce0
c001fd59:	e8 0d 17 ff ff       	call   c001146b <KePanic(char const*)>
c001fd5e:	83 c4 10             	add    esp,0x10
c001fd61:	e9 92 00 00 00       	jmp    c001fdf8 <LinkedList<Device>::removeFirst()+0xb4>
c001fd66:	66 90                	xchg   ax,ax
c001fd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd6f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fd75:	85 c0                	test   eax,eax
c001fd77:	74 13                	je     c001fd8c <LinkedList<Device>::removeFirst()+0x48>
c001fd79:	83 ec 0c             	sub    esp,0xc
c001fd7c:	68 2b 0d 02 c0       	push   0xc0020d2b
c001fd81:	e8 e5 16 ff ff       	call   c001146b <KePanic(char const*)>
c001fd86:	83 c4 10             	add    esp,0x10
c001fd89:	8d 76 00             	lea    esi,[esi+0x0]
c001fd8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd92:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fd98:	85 c0                	test   eax,eax
c001fd9a:	75 34                	jne    c001fdd0 <LinkedList<Device>::removeFirst()+0x8c>
c001fd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdaa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdb8:	83 f8 01             	cmp    eax,0x1
c001fdbb:	74 27                	je     c001fde4 <LinkedList<Device>::removeFirst()+0xa0>
c001fdbd:	83 ec 0c             	sub    esp,0xc
c001fdc0:	68 04 0d 02 c0       	push   0xc0020d04
c001fdc5:	e8 a1 16 ff ff       	call   c001146b <KePanic(char const*)>
c001fdca:	83 c4 10             	add    esp,0x10
c001fdcd:	eb 15                	jmp    c001fde4 <LinkedList<Device>::removeFirst()+0xa0>
c001fdcf:	90                   	nop
c001fdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdd6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde0:	89 10                	mov    DWORD PTR [eax],edx
c001fde2:	66 90                	xchg   ax,ax
c001fde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdeb:	8d 50 ff             	lea    edx,[eax-0x1]
c001fdee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fdf5:	8d 76 00             	lea    esi,[esi+0x0]
c001fdf8:	83 c4 0c             	add    esp,0xc
c001fdfb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fdfc <CPU::~CPU()>:
c001fdfc:	83 ec 0c             	sub    esp,0xc
c001fdff:	ba 4c 20 02 c0       	mov    edx,0xc002204c
c001fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe08:	89 10                	mov    DWORD PTR [eax],edx
c001fe0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0e:	83 ec 0c             	sub    esp,0xc
c001fe11:	50                   	push   eax
c001fe12:	e8 fd c8 fe ff       	call   c000c714 <Device::~Device()>
c001fe17:	83 c4 10             	add    esp,0x10
c001fe1a:	90                   	nop
c001fe1b:	83 c4 0c             	add    esp,0xc
c001fe1e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fe20 <CPU::~CPU()>:
c001fe20:	83 ec 0c             	sub    esp,0xc
c001fe23:	83 ec 0c             	sub    esp,0xc
c001fe26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe2a:	e8 cd ff ff ff       	call   c001fdfc <CPU::~CPU()>
c001fe2f:	83 c4 10             	add    esp,0x10
c001fe32:	83 ec 08             	sub    esp,0x8
c001fe35:	68 94 11 00 00       	push   0x1194
c001fe3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe3e:	e8 d5 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe43:	83 c4 10             	add    esp,0x10
c001fe46:	83 c4 0c             	add    esp,0xc
c001fe49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fe4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fe4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fe54 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fe54:	90                   	nop
c001fe55:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fe58 <ThreadControlBlock::ThreadControlBlock()>:
c001fe58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe5c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe67:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fe6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe72:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fe79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fe84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe88:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fe8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe93:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fe97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe9b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fe9f:	90                   	nop
c001fea0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fea4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fea8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001feae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001feb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001febd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fec8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fece:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fed2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fed9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fedd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fee4:	90                   	nop
c001fee5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fee6 <PCI::~PCI()>:
c001fee6:	83 ec 0c             	sub    esp,0xc
c001fee9:	ba 2c 2f 02 c0       	mov    edx,0xc0022f2c
c001feee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef2:	89 10                	mov    DWORD PTR [eax],edx
c001fef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef8:	83 ec 0c             	sub    esp,0xc
c001fefb:	50                   	push   eax
c001fefc:	e8 ab c2 fe ff       	call   c000c1ac <Bus::~Bus()>
c001ff01:	83 c4 10             	add    esp,0x10
c001ff04:	90                   	nop
c001ff05:	83 c4 0c             	add    esp,0xc
c001ff08:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ff0a <PCI::~PCI()>:
c001ff0a:	83 ec 0c             	sub    esp,0xc
c001ff0d:	83 ec 0c             	sub    esp,0xc
c001ff10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff14:	e8 cd ff ff ff       	call   c001fee6 <PCI::~PCI()>
c001ff19:	83 c4 10             	add    esp,0x10
c001ff1c:	83 ec 08             	sub    esp,0x8
c001ff1f:	68 5c 01 00 00       	push   0x15c
c001ff24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff28:	e8 eb a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff2d:	83 c4 10             	add    esp,0x10
c001ff30:	83 c4 0c             	add    esp,0xc
c001ff33:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ff34 <IDE::~IDE()>:
c001ff34:	83 ec 0c             	sub    esp,0xc
c001ff37:	ba e0 2f 02 c0       	mov    edx,0xc0022fe0
c001ff3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff40:	89 10                	mov    DWORD PTR [eax],edx
c001ff42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff46:	83 ec 0c             	sub    esp,0xc
c001ff49:	50                   	push   eax
c001ff4a:	e8 3d cc fe ff       	call   c000cb8c <HardDiskController::~HardDiskController()>
c001ff4f:	83 c4 10             	add    esp,0x10
c001ff52:	90                   	nop
c001ff53:	83 c4 0c             	add    esp,0xc
c001ff56:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ff58 <IDE::~IDE()>:
c001ff58:	83 ec 0c             	sub    esp,0xc
c001ff5b:	83 ec 0c             	sub    esp,0xc
c001ff5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff62:	e8 cd ff ff ff       	call   c001ff34 <IDE::~IDE()>
c001ff67:	83 c4 10             	add    esp,0x10
c001ff6a:	83 ec 08             	sub    esp,0x8
c001ff6d:	68 70 02 00 00       	push   0x270
c001ff72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff76:	e8 9d a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff7b:	83 c4 10             	add    esp,0x10
c001ff7e:	83 c4 0c             	add    esp,0xc
c001ff81:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001ff82 <SATABus::~SATABus()>:
c001ff82:	83 ec 0c             	sub    esp,0xc
c001ff85:	ba 30 30 02 c0       	mov    edx,0xc0023030
c001ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8e:	89 10                	mov    DWORD PTR [eax],edx
c001ff90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff94:	83 ec 0c             	sub    esp,0xc
c001ff97:	50                   	push   eax
c001ff98:	e8 ef cb fe ff       	call   c000cb8c <HardDiskController::~HardDiskController()>
c001ff9d:	83 c4 10             	add    esp,0x10
c001ffa0:	90                   	nop
c001ffa1:	83 c4 0c             	add    esp,0xc
c001ffa4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001ffa6 <SATABus::~SATABus()>:
c001ffa6:	83 ec 0c             	sub    esp,0xc
c001ffa9:	83 ec 0c             	sub    esp,0xc
c001ffac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffb0:	e8 cd ff ff ff       	call   c001ff82 <SATABus::~SATABus()>
c001ffb5:	83 c4 10             	add    esp,0x10
c001ffb8:	83 ec 08             	sub    esp,0x8
c001ffbb:	68 64 01 00 00       	push   0x164
c001ffc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc4:	e8 4f a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ffc9:	83 c4 10             	add    esp,0x10
c001ffcc:	83 c4 0c             	add    esp,0xc
c001ffcf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ffd0 <ATA::~ATA()>:
c001ffd0:	83 ec 0c             	sub    esp,0xc
c001ffd3:	ba 70 30 02 c0       	mov    edx,0xc0023070
c001ffd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffdc:	89 10                	mov    DWORD PTR [eax],edx
c001ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe2:	83 ec 0c             	sub    esp,0xc
c001ffe5:	50                   	push   eax
c001ffe6:	e8 83 cc fe ff       	call   c000cc6e <PhysicalDisk::~PhysicalDisk()>
c001ffeb:	83 c4 10             	add    esp,0x10
c001ffee:	90                   	nop
c001ffef:	83 c4 0c             	add    esp,0xc
c001fff2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fff4 <ATA::~ATA()>:
c001fff4:	83 ec 0c             	sub    esp,0xc
c001fff7:	83 ec 0c             	sub    esp,0xc
c001fffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fffe:	e8 cd ff ff ff       	call   c001ffd0 <ATA::~ATA()>
c0020003:	83 c4 10             	add    esp,0x10
c0020006:	83 ec 08             	sub    esp,0x8
c0020009:	68 7c 01 00 00       	push   0x17c
c002000e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020012:	e8 01 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020017:	83 c4 10             	add    esp,0x10
c002001a:	83 c4 0c             	add    esp,0xc
c002001d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002001e <ATAPI::~ATAPI()>:
c002001e:	83 ec 0c             	sub    esp,0xc
c0020021:	ba b8 30 02 c0       	mov    edx,0xc00230b8
c0020026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002a:	89 10                	mov    DWORD PTR [eax],edx
c002002c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020030:	83 ec 0c             	sub    esp,0xc
c0020033:	50                   	push   eax
c0020034:	e8 35 cc fe ff       	call   c000cc6e <PhysicalDisk::~PhysicalDisk()>
c0020039:	83 c4 10             	add    esp,0x10
c002003c:	90                   	nop
c002003d:	83 c4 0c             	add    esp,0xc
c0020040:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020042 <ATAPI::~ATAPI()>:
c0020042:	83 ec 0c             	sub    esp,0xc
c0020045:	83 ec 0c             	sub    esp,0xc
c0020048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002004c:	e8 cd ff ff ff       	call   c002001e <ATAPI::~ATAPI()>
c0020051:	83 c4 10             	add    esp,0x10
c0020054:	83 ec 08             	sub    esp,0x8
c0020057:	68 84 01 00 00       	push   0x184
c002005c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020060:	e8 b3 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020065:	83 c4 10             	add    esp,0x10
c0020068:	83 c4 0c             	add    esp,0xc
c002006b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002006c <SATA::~SATA()>:
c002006c:	83 ec 0c             	sub    esp,0xc
c002006f:	ba 6c 31 02 c0       	mov    edx,0xc002316c
c0020074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020078:	89 10                	mov    DWORD PTR [eax],edx
c002007a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002007e:	83 ec 0c             	sub    esp,0xc
c0020081:	50                   	push   eax
c0020082:	e8 e7 cb fe ff       	call   c000cc6e <PhysicalDisk::~PhysicalDisk()>
c0020087:	83 c4 10             	add    esp,0x10
c002008a:	90                   	nop
c002008b:	83 c4 0c             	add    esp,0xc
c002008e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020090 <SATA::~SATA()>:
c0020090:	83 ec 0c             	sub    esp,0xc
c0020093:	83 ec 0c             	sub    esp,0xc
c0020096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002009a:	e8 cd ff ff ff       	call   c002006c <SATA::~SATA()>
c002009f:	83 c4 10             	add    esp,0x10
c00200a2:	83 ec 08             	sub    esp,0x8
c00200a5:	68 7c 01 00 00       	push   0x17c
c00200aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ae:	e8 65 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00200b3:	83 c4 10             	add    esp,0x10
c00200b6:	83 c4 0c             	add    esp,0xc
c00200b9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00200ba <SATAPI::~SATAPI()>:
c00200ba:	83 ec 0c             	sub    esp,0xc
c00200bd:	ba 90 32 02 c0       	mov    edx,0xc0023290
c00200c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c6:	89 10                	mov    DWORD PTR [eax],edx
c00200c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200cc:	83 ec 0c             	sub    esp,0xc
c00200cf:	50                   	push   eax
c00200d0:	e8 99 cb fe ff       	call   c000cc6e <PhysicalDisk::~PhysicalDisk()>
c00200d5:	83 c4 10             	add    esp,0x10
c00200d8:	90                   	nop
c00200d9:	83 c4 0c             	add    esp,0xc
c00200dc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00200de <SATAPI::~SATAPI()>:
c00200de:	83 ec 0c             	sub    esp,0xc
c00200e1:	83 ec 0c             	sub    esp,0xc
c00200e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200e8:	e8 cd ff ff ff       	call   c00200ba <SATAPI::~SATAPI()>
c00200ed:	83 c4 10             	add    esp,0x10
c00200f0:	83 ec 08             	sub    esp,0x8
c00200f3:	68 84 01 00 00       	push   0x184
c00200f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200fc:	e8 17 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020101:	83 c4 10             	add    esp,0x10
c0020104:	83 c4 0c             	add    esp,0xc
c0020107:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020108 <IOAPIC::~IOAPIC()>:
c0020108:	83 ec 0c             	sub    esp,0xc
c002010b:	ba d0 32 02 c0       	mov    edx,0xc00232d0
c0020110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020114:	89 10                	mov    DWORD PTR [eax],edx
c0020116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011a:	83 ec 0c             	sub    esp,0xc
c002011d:	50                   	push   eax
c002011e:	e8 f1 c5 fe ff       	call   c000c714 <Device::~Device()>
c0020123:	83 c4 10             	add    esp,0x10
c0020126:	90                   	nop
c0020127:	83 c4 0c             	add    esp,0xc
c002012a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002012c <IOAPIC::~IOAPIC()>:
c002012c:	83 ec 0c             	sub    esp,0xc
c002012f:	83 ec 0c             	sub    esp,0xc
c0020132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020136:	e8 cd ff ff ff       	call   c0020108 <IOAPIC::~IOAPIC()>
c002013b:	83 c4 10             	add    esp,0x10
c002013e:	83 ec 08             	sub    esp,0x8
c0020141:	68 68 01 00 00       	push   0x168
c0020146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002014a:	e8 c9 a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002014f:	83 c4 10             	add    esp,0x10
c0020152:	83 c4 0c             	add    esp,0xc
c0020155:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020158 <APICTimer::~APICTimer()>:
c0020158:	83 ec 0c             	sub    esp,0xc
c002015b:	ba 18 33 02 c0       	mov    edx,0xc0023318
c0020160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020164:	89 10                	mov    DWORD PTR [eax],edx
c0020166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002016a:	83 ec 0c             	sub    esp,0xc
c002016d:	50                   	push   eax
c002016e:	e8 6d e0 fe ff       	call   c000e1e0 <Timer::~Timer()>
c0020173:	83 c4 10             	add    esp,0x10
c0020176:	90                   	nop
c0020177:	83 c4 0c             	add    esp,0xc
c002017a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002017c <APICTimer::~APICTimer()>:
c002017c:	83 ec 0c             	sub    esp,0xc
c002017f:	83 ec 0c             	sub    esp,0xc
c0020182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020186:	e8 cd ff ff ff       	call   c0020158 <APICTimer::~APICTimer()>
c002018b:	83 c4 10             	add    esp,0x10
c002018e:	83 ec 08             	sub    esp,0x8
c0020191:	68 60 01 00 00       	push   0x160
c0020196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002019a:	e8 79 a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002019f:	83 c4 10             	add    esp,0x10
c00201a2:	83 c4 0c             	add    esp,0xc
c00201a5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00201a8 <PIT::~PIT()>:
c00201a8:	83 ec 0c             	sub    esp,0xc
c00201ab:	ba 68 33 02 c0       	mov    edx,0xc0023368
c00201b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b4:	89 10                	mov    DWORD PTR [eax],edx
c00201b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ba:	83 ec 0c             	sub    esp,0xc
c00201bd:	50                   	push   eax
c00201be:	e8 1d e0 fe ff       	call   c000e1e0 <Timer::~Timer()>
c00201c3:	83 c4 10             	add    esp,0x10
c00201c6:	90                   	nop
c00201c7:	83 c4 0c             	add    esp,0xc
c00201ca:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00201cc <PIT::~PIT()>:
c00201cc:	83 ec 0c             	sub    esp,0xc
c00201cf:	83 ec 0c             	sub    esp,0xc
c00201d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d6:	e8 cd ff ff ff       	call   c00201a8 <PIT::~PIT()>
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	83 ec 08             	sub    esp,0x8
c00201e1:	68 5c 01 00 00       	push   0x15c
c00201e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ea:	e8 29 a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00201ef:	83 c4 10             	add    esp,0x10
c00201f2:	83 c4 0c             	add    esp,0xc
c00201f5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 7d 21 02 c0       	mov    esi,0xc002217d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 99 21 02 c0       	mov    esi,0xc0022199
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
