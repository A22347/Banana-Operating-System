
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 01 9e 00 00       	call   c0009e21 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 45 2f 02 00       	call   c0022f6a <_init>
c0000025:	c3                   	ret    
c0000026:	bb ee 3b 02 c0       	mov    ebx,0xc0023bee
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb fc 3b 02 c0    	cmp    ebx,0xc0023bfc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 83 02 c0       	mov    eax,0xc0028358
c0000049:	3d 58 83 02 c0       	cmp    eax,0xc0028358
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 83 02 c0       	push   0xc0028358
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 83 02 c0       	mov    eax,0xc0028358
c0000075:	2d 58 83 02 c0       	sub    eax,0xc0028358
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 83 02 c0       	push   0xc0028358
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e0 84 02 c0 00 	cmp    BYTE PTR ds:0xc00284e0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 04 3c 02 c0       	mov    ebx,0xc0023c04
c00000bb:	81 eb 00 3c 02 c0    	sub    ebx,0xc0023c00
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 00 3c 02 c0       	mov    esi,0xc0023c00
c00000ca:	a1 e4 84 02 c0       	mov    eax,ds:0xc00284e4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 e4 84 02 c0       	mov    ds:0xc00284e4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 e4 84 02 c0       	mov    eax,ds:0xc00284e4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 83 02 c0       	push   0xc0028358
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e0 84 02 c0 01 	mov    BYTE PTR ds:0xc00284e0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 e8 84 02 c0       	push   0xc00284e8
c000012c:	68 58 83 02 c0       	push   0xc0028358
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 a4 82 01 00       	call   c001857c <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 c4 ca 00 00       	call   c000cdb4 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 82 82 01 00       	call   c001857c <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 4b 87 01 00       	call   c0018a64 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 8e 8d 01 00       	call   c00190b0 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 30 89 02 c0 	lgdtd  ds:0xc0028930
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 32 e9 00 00       	call   c000ee49 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 00 85 02 c0       	mov    ds:0xc0028500,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 00 85 02 c0    	mov    DWORD PTR ds:0xc0028500,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 00 85 02 c0    	mov    ebx,DWORD PTR ds:0xc0028500
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 20 3c 02 c0 02 	test   BYTE PTR [edx-0x3ffdc3e0],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 20 3c 02 c0 01 	test   BYTE PTR [edx-0x3ffdc3e0],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 20 3c 02 c0 08 	test   BYTE PTR [edx-0x3ffdc3e0],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 20 3c 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc3e0],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 20 3c 02 c0 01 	test   BYTE PTR [edx-0x3ffdc3e0],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 20 85 02 c0    	mov    ecx,DWORD PTR ds:0xc0028520
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 20 85 02 c0    	mov    DWORD PTR ds:0xc0028520,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 24 85 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7adc]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 24 85 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7adc],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 20 85 02 c0    	mov    DWORD PTR ds:0xc0028520,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 4c 85 02 c0    	cmp    DWORD PTR ds:0xc002854c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 5c 85 02 c0    	mov    ecx,DWORD PTR ds:0xc002855c
c0000d6c:	c7 42 0c 54 85 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028554
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 5c 85 02 c0    	mov    DWORD PTR ds:0xc002855c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 4c 85 02 c0    	mov    DWORD PTR ds:0xc002854c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 20 85 02 c0 02 	test   BYTE PTR ds:0xc0028520,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 20 85 02 c0       	mov    eax,0xc0028520
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 d7 8d 00 00       	call   c0009c24 <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 19 8d 00 00       	call   c0009c24 <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 03 8d 00 00       	call   c0009c24 <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 df 8c 00 00       	call   c0009c24 <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 20 85 02 c0    	mov    edi,DWORD PTR ds:0xc0028520
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 20 85 02 c0       	mov    eax,0xc0028520
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 24 85 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7adc]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 24 85 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7adc],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 54 85 02 c0 	lea    edx,[eax*8-0x3ffd7aac]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 20 85 02 c0       	mov    eax,0xc0028520
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 60 85 02 c0    	mov    ebx,DWORD PTR ds:0xc0028560
c00010ee:	81 fb 54 85 02 c0    	cmp    ebx,0xc0028554
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 54 85 02 c0       	cmp    eax,0xc0028554
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 50 85 02 c0    	cmp    DWORD PTR ds:0xc0028550,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 5c 85 02 c0       	mov    ds:0xc002855c,eax
c000112a:	a3 60 85 02 c0       	mov    ds:0xc0028560,eax
c000112f:	a3 50 85 02 c0       	mov    ds:0xc0028550,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 54 85 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028554
c000113d:	c7 40 0c 54 85 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028554
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 60 85 02 c0       	mov    ds:0xc0028560,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 54 85 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028554
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 18 85 02 c0 	lea    ebp,[edx*4-0x3ffd7ae8]
c000118e:	8b 14 95 20 85 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7ae0]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 20 85 02 c0 	lea    ecx,[edx*4-0x3ffd7ae0]
c00011a9:	8b 14 95 20 85 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7ae0]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 54 88 02 c0 	or     DWORD PTR [edi*4-0x3ffd77ac],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 54 85 02 c0 	lea    eax,[eax*8-0x3ffd7aac]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 5c 85 02 c0    	mov    DWORD PTR ds:0xc002855c,ecx
c0001263:	89 0d 60 85 02 c0    	mov    DWORD PTR ds:0xc0028560,ecx
c0001269:	c7 41 08 54 85 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028554
c0001270:	c7 41 0c 54 85 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028554
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 4c 85 02 c0 	lea    edx,[ecx*8-0x3ffd7ab4]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 54 88 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd77ac]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 54 88 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd77ac]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 4c 85 02 c0 	lea    edx,[eax*4-0x3ffd7ab4]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 54 88 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd77ac],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 5c 85 02 c0    	mov    DWORD PTR ds:0xc002855c,edi
c0001336:	89 3d 60 85 02 c0    	mov    DWORD PTR ds:0xc0028560,edi
c000133c:	c7 47 08 54 85 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028554
c0001343:	c7 47 0c 54 85 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028554
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 50 85 02 c0    	mov    DWORD PTR ds:0xc0028550,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 4c 85 02 c0       	mov    eax,ds:0xc002854c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 4c 85 02 c0    	mov    DWORD PTR ds:0xc002854c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 20 85 02 c0       	mov    edx,0xc0028520
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 20 85 02 c0 00 	cmp    DWORD PTR ds:0xc0028520,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 20 85 02 c0       	mov    eax,0xc0028520
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 74 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028874
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 74 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028874,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 74 88 02 c0    	mov    DWORD PTR ds:0xc0028874,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 4c 85 02 c0    	cmp    DWORD PTR ds:0xc002854c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 4c 85 02 c0    	mov    DWORD PTR ds:0xc002854c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 20 85 02 c0 00 	cmp    DWORD PTR ds:0xc0028520,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 20 85 02 c0       	mov    eax,0xc0028520
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 7c 88 02 c0    	push   DWORD PTR ds:0xc002887c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 20 85 02 c0 00 	cmp    DWORD PTR ds:0xc0028520,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 20 85 02 c0       	mov    eax,0xc0028520
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 7c 88 02 c0       	mov    eax,ds:0xc002887c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 20 85 02 c0       	mov    eax,0xc0028520
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 4c 85 02 c0 00 	cmp    DWORD PTR ds:0xc002854c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 20 85 02 c0       	mov    eax,0xc0028520
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 4c 85 02 c0       	mov    eax,ds:0xc002854c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 24 85 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7adc]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 54 85 02 c0       	mov    eax,0xc0028554
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 4c 88 02 c0       	cmp    eax,0xc002884c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 70 88 02 c0    	mov    esi,DWORD PTR ds:0xc0028870
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 84 88 02 c0    	mov    esi,DWORD PTR ds:0xc0028884
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 94 88 02 c0    	mov    esi,DWORD PTR ds:0xc0028894
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 20 85 02 c0       	mov    eax,0xc0028520
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 24 3d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc2dc]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 68 88 02 c0    	mov    DWORD PTR ds:0xc0028868,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 6c 88 02 c0    	mov    DWORD PTR ds:0xc002886c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 74 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028874,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 e0 9f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6020]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 46 a3 01 00       	jmp    c001be6c <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 e0 9f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6020]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 78 a3 01 00       	jmp    c001beb4 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 e0 9f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6020]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 a1 a3 01 00       	jmp    c001befc <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 12 0f 02 00       	call   c0022d50 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 40 3e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc1c0]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 40 3e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc1c0]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 40 3d 02 c0       	mov    edx,0xc0023d40
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 60 3e 02 c0       	mov    edx,0xc0023e60
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 44 6d 02 c0       	mov    edx,0xc0026d44
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 6c 3e 02 c0       	mov    edx,0xc0023e6c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 50 3e 02 c0       	mov    edx,0xc0023e50
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 c0 88 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7740]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 a0 88 02 c0    	mov    ax,ds:0xc00288a0
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 a0 88 02 c0    	mov    ds:0xc00288a0,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 0f fd 01 00       	call   c0022d50 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 72 3e 02 c0       	mov    eax,0xc0023e72
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad c0 3d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc240]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 7b 3e 02 c0       	mov    eax,0xc0023e7b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 40 3e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc1c0]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 da e6 01 00       	call   c0022d50 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 50 3e 02 c0       	mov    edx,0xc0023e50
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 40 3d 02 c0       	mov    edx,0xc0023d40
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 50 3d 02 c0       	mov    edx,0xc0023d50
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 c0 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7740]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 c0 88 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7740],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 a1 d0 01 00       	call   c0022d50 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 87 d0 01 00       	call   c0022d50 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 97 3d 02 c0       	mov    eax,0xc0023d97
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 90 3d 02 c0       	mov    eax,0xc0023d90
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 20 bc 01 00       	call   c0022d50 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 c0 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7740]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 80 3d 02 c0       	mov    esi,0xc0023d80
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 94 b5 01 00       	call   c0022d50 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 60 3e 02 c0       	mov    edx,0xc0023e60
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 60 3d 02 c0       	mov    edx,0xc0023d60
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 70 3d 02 c0       	mov    edx,0xc0023d70
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 82 3e 02 c0       	mov    edx,0xc0023e82
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 8e 3e 02 c0       	mov    edx,0xc0023e8e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba a2 3e 02 c0       	mov    edx,0xc0023ea2
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 88 17 00 00       	call   c0009d5b <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 80 17 00 00       	call   c0009d6b <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c c0 41 02 c0 	mov    DWORD PTR [esp+0xc],0xc00241c0
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 c0 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc00241c0
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 00 3f 02 c0       	mov    eax,0xc0023f00
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 c0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc140]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 e2 14 00 00       	jmp    c0009d5b <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 fd 14 00 00       	jmp    c0009d7b <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000888b:	48                   	dec    eax
c000888c:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c00088a2:	48                   	dec    eax
c00088a3:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c00088b3:	ff 05 44 9e 02 c0    	inc    DWORD PTR ds:0xc0029e44
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c00088c2:	48                   	dec    eax
c00088c3:	a3 44 9e 02 c0       	mov    ds:0xc0029e44,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 40 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029e40,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 40 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x0
c00088dd:	e8 ee 03 01 00       	call   c0018cd0 <schedule()>
c00088e2:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c00088e7:	48                   	dec    eax
c00088e8:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 50 8a 02 c0       	mov    eax,ds:0xc0028a50
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 c0 42 02 c0       	push   0xc00242c0
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 28 89 02 c0       	mov    eax,0xc0028928
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 c9 42 02 c0       	push   0xc00242c9
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 50 2d 02 c0       	mov    eax,0xc0022d50
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 d3 42 02 c0       	push   0xc00242d3
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 84 2a 02 c0       	mov    eax,0xc0022a84
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 dc 42 02 c0       	push   0xc00242dc
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 50 2e 02 c0       	mov    eax,0xc0022e50
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 e6 42 02 c0       	push   0xc00242e6
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 d0 2b 02 c0       	mov    eax,0xc0022bd0
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 ef 42 02 c0       	push   0xc00242ef
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 2c 89 02 c0       	mov    eax,0xc002892c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 fc 42 02 c0       	push   0xc00242fc
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 2d 89 02 c0       	mov    eax,0xc002892d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 ff 5c 00 00       	call   c000e744 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 09 43 02 c0       	push   0xc0024309
c0008a75:	e8 3b 13 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 20 43 02 c0 	mov    DWORD PTR [esp],0xc0024320
c0008a82:	e8 2e 13 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 c8 12 00 00       	call   c0009d5b <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 70 9e 02 c0    	push   DWORD PTR ds:0xc0029e70
c0008aa2:	68 39 43 02 c0       	push   0xc0024339
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 fd fd 00 00       	call   c00188ac <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 53 97 00 c0       	push   0xc0009753
c0008abe:	53                   	push   ebx
c0008abf:	e8 f0 ff 00 00       	call   c0018ab4 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 f8 94 01 c0       	push   0xc00194f8
c0008acd:	ff 35 70 9e 02 c0    	push   DWORD PTR ds:0xc0029e70
c0008ad3:	e8 dc ff 00 00       	call   c0018ab4 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 28 9e 02 c0       	mov    ds:0xc0029e28,eax
c0008ae0:	68 2c 46 02 c0       	push   0xc002462c
c0008ae5:	c6 05 2d 89 02 c0 01 	mov    BYTE PTR ds:0xc002892d,0x1
c0008aec:	e8 c4 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008af1:	e8 dd 0d 01 00       	call   c00198d3 <Vm::initialise8086()>
c0008af6:	e8 e3 48 00 00       	call   c000d3de <Fs::initVFS()>
c0008afb:	c7 04 24 46 43 02 c0 	mov    DWORD PTR [esp],0xc0024346
c0008b02:	e8 ae 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b07:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 2c 46 02 c0       	push   0xc002462c
c0008b26:	e8 8a 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 ea e5 00 00       	call   c001711a <Sys::loadSyscalls()>
c0008b30:	e8 87 c4 00 00       	call   c0014fbc <Krnl::loadSystemEnv()>
c0008b35:	e8 d9 c8 00 00       	call   c0015413 <Krnl::setupPowerManager()>
c0008b3a:	83 c4 0c             	add    esp,0xc
c0008b3d:	6a 3a                	push   0x3a
c0008b3f:	68 60 43 02 c0       	push   0xc0024360
c0008b44:	68 69 43 02 c0       	push   0xc0024369
c0008b49:	e8 8f d3 00 00       	call   c0015edd <Reg::readIntWithDefault(char*, char*, int)>
c0008b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b51:	e8 a6 54 00 00       	call   c000dffc <User::loadClockSettings(int)>
c0008b56:	c7 04 24 50 46 02 c0 	mov    DWORD PTR [esp],0xc0024650
c0008b5d:	e8 53 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b62:	58                   	pop    eax
c0008b63:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0008b68:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b6e:	e8 91 5b 00 00       	call   c000e704 <Device::loadDriversForAll()>
c0008b73:	c7 04 24 71 43 02 c0 	mov    DWORD PTR [esp],0xc0024371
c0008b7a:	e8 36 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b7f:	e8 a0 bf 00 00       	call   c0014b24 <Krnl::startCPUs()>
c0008b84:	c7 04 24 8b 43 02 c0 	mov    DWORD PTR [esp],0xc002438b
c0008b8b:	e8 25 12 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0008b90:	5a                   	pop    edx
c0008b91:	8b 1d 28 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028928
c0008b97:	59                   	pop    ecx
c0008b98:	6a 01                	push   0x1
c0008b9a:	68 9c 43 02 c0       	push   0xc002439c
c0008b9f:	e8 46 f7 00 00       	call   c00182ea <Thr::loadDLL(char const*, bool)>
c0008ba4:	5a                   	pop    edx
c0008ba5:	59                   	pop    ecx
c0008ba6:	53                   	push   ebx
c0008ba7:	50                   	push   eax
c0008ba8:	e8 6e f9 00 00       	call   c001851b <Thr::executeDLL(unsigned long, void*)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 ec 0c             	sub    esp,0xc
c0008bb3:	6a 02                	push   0x2
c0008bb5:	e8 0e 03 01 00       	call   c0018ec8 <blockTask(TaskState)>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	eb f1                	jmp    c0008bb0 <Krnl::firstTask()+0x144>
c0008bbf:	90                   	nop

c0008bc0 <Computer::Computer()>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc7:	83 ec 08             	sub    esp,0x8
c0008bca:	68 b8 43 02 c0       	push   0xc00243b8
c0008bcf:	50                   	push   eax
c0008bd0:	e8 e9 5b 00 00       	call   c000e7be <Device::Device(char const*)>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	ba 00 47 02 c0       	mov    edx,0xc0024700
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	89 10                	mov    DWORD PTR [eax],edx
c0008be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c09:	83 ca 04             	or     edx,0x4
c0008c0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c1c:	0f b6 d0             	movzx  edx,al
c0008c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c23:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c34:	0f b6 d0             	movzx  edx,al
c0008c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c57:	0f b6 d0             	movzx  edx,al
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c62:	83 e1 3f             	and    ecx,0x3f
c0008c65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c73:	0f b6 d0             	movzx  edx,al
c0008c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c8b:	0f b6 d0             	movzx  edx,al
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0008ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cae:	0f b6 d0             	movzx  edx,al
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb9:	83 e1 3f             	and    ecx,0x3f
c0008cbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cca:	0f b6 d0             	movzx  edx,al
c0008ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ce2:	0f b6 d0             	movzx  edx,al
c0008ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0008cfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d05:	0f b6 d0             	movzx  edx,al
c0008d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d10:	83 e1 3f             	and    ecx,0x3f
c0008d13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d17:	90                   	nop
c0008d18:	83 c4 0c             	add    esp,0xc
c0008d1b:	c3                   	ret    

c0008d1c <Computer::setBootMessage(char const*)>:
c0008d1c:	c3                   	ret    
c0008d1d:	90                   	nop

c0008d1e <Computer::detectFeatures()>:
c0008d1e:	55                   	push   ebp
c0008d1f:	57                   	push   edi
c0008d20:	56                   	push   esi
c0008d21:	53                   	push   ebx
c0008d22:	83 ec 1c             	sub    esp,0x1c
c0008d25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d29:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d33:	e8 e1 74 ff ff       	call   c0000219 <detectCPUID>
c0008d38:	85 c0                	test   eax,eax
c0008d3a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d40:	0f 95 c2             	setne  dl
c0008d43:	83 e0 fd             	and    eax,0xfffffffd
c0008d46:	d1 e2                	shl    edx,1
c0008d48:	09 d0                	or     eax,edx
c0008d4a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d50:	a8 02                	test   al,0x2
c0008d52:	75 46                	jne    c0008d9a <Computer::detectFeatures()+0x7c>
c0008d54:	f6 05 41 89 02 c0 04 	test   BYTE PTR ds:0xc0028941,0x4
c0008d5b:	74 07                	je     c0008d64 <Computer::detectFeatures()+0x46>
c0008d5d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d64:	e8 ad 9c 01 00       	call   c0022a16 <x87Detect>
c0008d69:	83 e0 01             	and    eax,0x1
c0008d6c:	c1 e0 04             	shl    eax,0x4
c0008d6f:	88 c2                	mov    dl,al
c0008d71:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d77:	83 e0 ef             	and    eax,0xffffffef
c0008d7a:	09 d0                	or     eax,edx
c0008d7c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d82:	a8 10                	test   al,0x10
c0008d84:	0f 85 2a 01 00 00    	jne    c0008eb4 <Computer::detectFeatures()+0x196>
c0008d8a:	84 c0                	test   al,al
c0008d8c:	0f 88 45 01 00 00    	js     c0008ed7 <Computer::detectFeatures()+0x1b9>
c0008d92:	83 c4 1c             	add    esp,0x1c
c0008d95:	5b                   	pop    ebx
c0008d96:	5e                   	pop    esi
c0008d97:	5f                   	pop    edi
c0008d98:	5d                   	pop    ebp
c0008d99:	c3                   	ret    
c0008d9a:	83 ec 0c             	sub    esp,0xc
c0008d9d:	6a 20                	push   0x20
c0008d9f:	e8 46 a9 00 00       	call   c00136ea <CPU::cpuidCheckEDX(unsigned int)>
c0008da4:	83 e0 01             	and    eax,0x1
c0008da7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dae:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008db4:	83 e0 f7             	and    eax,0xfffffff7
c0008db7:	09 d0                	or     eax,edx
c0008db9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dbf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc6:	e8 1f a9 00 00       	call   c00136ea <CPU::cpuidCheckEDX(unsigned int)>
c0008dcb:	83 e0 01             	and    eax,0x1
c0008dce:	88 c2                	mov    dl,al
c0008dd0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd6:	83 e0 fe             	and    eax,0xfffffffe
c0008dd9:	09 d0                	or     eax,edx
c0008ddb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008de1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de8:	e8 fd a8 00 00       	call   c00136ea <CPU::cpuidCheckEDX(unsigned int)>
c0008ded:	c1 e0 07             	shl    eax,0x7
c0008df0:	88 c2                	mov    dl,al
c0008df2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df8:	83 e0 7f             	and    eax,0x7f
c0008dfb:	09 d0                	or     eax,edx
c0008dfd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e0a:	e8 db a8 00 00       	call   c00136ea <CPU::cpuidCheckEDX(unsigned int)>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	83 e0 01             	and    eax,0x1
c0008e15:	c1 e0 05             	shl    eax,0x5
c0008e18:	88 c2                	mov    dl,al
c0008e1a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e20:	83 e0 df             	and    eax,0xffffffdf
c0008e23:	09 d0                	or     eax,edx
c0008e25:	f7 05 40 89 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028940,0x401
c0008e2f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e35:	0f 84 c2 00 00 00    	je     c0008efd <Computer::detectFeatures()+0x1df>
c0008e3b:	83 e0 fe             	and    eax,0xfffffffe
c0008e3e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e44:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	83 e2 09             	and    edx,0x9
c0008e4f:	fe ca                	dec    dl
c0008e51:	75 09                	jne    c0008e5c <Computer::detectFeatures()+0x13e>
c0008e53:	83 e0 fe             	and    eax,0xfffffffe
c0008e56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e5c:	83 ec 0c             	sub    esp,0xc
c0008e5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e63:	50                   	push   eax
c0008e64:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e68:	55                   	push   ebp
c0008e69:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e6d:	57                   	push   edi
c0008e6e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e72:	56                   	push   esi
c0008e73:	68 00 00 00 80       	push   0x80000000
c0008e78:	e8 e9 a7 00 00       	call   c0013666 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e7d:	83 c4 20             	add    esp,0x20
c0008e80:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e8b:	0f 86 c3 fe ff ff    	jbe    c0008d54 <Computer::detectFeatures()+0x36>
c0008e91:	83 ec 0c             	sub    esp,0xc
c0008e94:	50                   	push   eax
c0008e95:	55                   	push   ebp
c0008e96:	57                   	push   edi
c0008e97:	56                   	push   esi
c0008e98:	68 01 00 00 80       	push   0x80000001
c0008e9d:	e8 c4 a7 00 00       	call   c0013666 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ea2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008eac:	83 c4 20             	add    esp,0x20
c0008eaf:	e9 a0 fe ff ff       	jmp    c0008d54 <Computer::detectFeatures()+0x36>
c0008eb4:	e8 17 9b 01 00       	call   c00229d0 <absolutelyNoChanceInHell>
c0008eb9:	88 c2                	mov    dl,al
c0008ebb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ec1:	c1 e2 07             	shl    edx,0x7
c0008ec4:	83 e0 7f             	and    eax,0x7f
c0008ec7:	09 d0                	or     eax,edx
c0008ec9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ecf:	84 c0                	test   al,al
c0008ed1:	0f 89 bb fe ff ff    	jns    c0008d92 <Computer::detectFeatures()+0x74>
c0008ed7:	e8 d4 9a 01 00       	call   c00229b0 <avxDetect>
c0008edc:	83 e0 01             	and    eax,0x1
c0008edf:	c1 e0 05             	shl    eax,0x5
c0008ee2:	88 c2                	mov    dl,al
c0008ee4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008eea:	83 e0 df             	and    eax,0xffffffdf
c0008eed:	09 d0                	or     eax,edx
c0008eef:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ef5:	83 c4 1c             	add    esp,0x1c
c0008ef8:	5b                   	pop    ebx
c0008ef9:	5e                   	pop    esi
c0008efa:	5f                   	pop    edi
c0008efb:	5d                   	pop    ebp
c0008efc:	c3                   	ret    
c0008efd:	83 ec 0c             	sub    esp,0xc
c0008f00:	68 00 02 00 00       	push   0x200
c0008f05:	e8 e0 a7 00 00       	call   c00136ea <CPU::cpuidCheckEDX(unsigned int)>
c0008f0a:	83 c4 10             	add    esp,0x10
c0008f0d:	83 e0 01             	and    eax,0x1
c0008f10:	88 c2                	mov    dl,al
c0008f12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f18:	83 e0 fe             	and    eax,0xfffffffe
c0008f1b:	09 d0                	or     eax,edx
c0008f1d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f23:	e9 1c ff ff ff       	jmp    c0008e44 <Computer::detectFeatures()+0x126>

c0008f28 <Computer::displayFeatures()>:
c0008f28:	53                   	push   ebx
c0008f29:	83 ec 14             	sub    esp,0x14
c0008f2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f30:	68 c8 43 02 c0       	push   0xc00243c8
c0008f35:	e8 0d 41 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008f3a:	83 c4 10             	add    esp,0x10
c0008f3d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f44:	0f 85 73 02 00 00    	jne    c00091bd <Computer::displayFeatures()+0x295>
c0008f4a:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0008f4f:	83 ec 08             	sub    esp,0x8
c0008f52:	50                   	push   eax
c0008f53:	68 db 43 02 c0       	push   0xc00243db
c0008f58:	e8 ea 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008f5d:	83 c4 10             	add    esp,0x10
c0008f60:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f67:	0f 85 8c 02 00 00    	jne    c00091f9 <Computer::displayFeatures()+0x2d1>
c0008f6d:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0008f72:	83 ec 08             	sub    esp,0x8
c0008f75:	50                   	push   eax
c0008f76:	68 ec 43 02 c0       	push   0xc00243ec
c0008f7b:	e8 c7 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f8a:	0f 85 5f 02 00 00    	jne    c00091ef <Computer::displayFeatures()+0x2c7>
c0008f90:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0008f95:	83 ec 08             	sub    esp,0x8
c0008f98:	50                   	push   eax
c0008f99:	68 fd 43 02 c0       	push   0xc00243fd
c0008f9e:	e8 a4 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008fa3:	83 c4 10             	add    esp,0x10
c0008fa6:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fad:	0f 85 32 02 00 00    	jne    c00091e5 <Computer::displayFeatures()+0x2bd>
c0008fb3:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0008fb8:	83 ec 08             	sub    esp,0x8
c0008fbb:	50                   	push   eax
c0008fbc:	68 0e 44 02 c0       	push   0xc002440e
c0008fc1:	e8 81 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008fc6:	83 c4 10             	add    esp,0x10
c0008fc9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fd0:	0f 85 05 02 00 00    	jne    c00091db <Computer::displayFeatures()+0x2b3>
c0008fd6:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0008fdb:	83 ec 08             	sub    esp,0x8
c0008fde:	50                   	push   eax
c0008fdf:	68 1f 44 02 c0       	push   0xc002441f
c0008fe4:	e8 5e 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0008fe9:	83 c4 10             	add    esp,0x10
c0008fec:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0008ff3:	0f 85 d8 01 00 00    	jne    c00091d1 <Computer::displayFeatures()+0x2a9>
c0008ff9:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0008ffe:	83 ec 08             	sub    esp,0x8
c0009001:	50                   	push   eax
c0009002:	68 30 44 02 c0       	push   0xc0024430
c0009007:	e8 3b 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000900c:	83 c4 10             	add    esp,0x10
c000900f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c0009016:	0f 85 ab 01 00 00    	jne    c00091c7 <Computer::displayFeatures()+0x29f>
c000901c:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0009021:	83 ec 08             	sub    esp,0x8
c0009024:	50                   	push   eax
c0009025:	68 41 44 02 c0       	push   0xc0024441
c000902a:	e8 18 40 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000902f:	83 c4 10             	add    esp,0x10
c0009032:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009039:	0f 88 1b 02 00 00    	js     c000925a <Computer::displayFeatures()+0x332>
c000903f:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0009044:	83 ec 08             	sub    esp,0x8
c0009047:	50                   	push   eax
c0009048:	68 52 44 02 c0       	push   0xc0024452
c000904d:	e8 f5 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009052:	83 c4 10             	add    esp,0x10
c0009055:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000905c:	0f 85 a1 01 00 00    	jne    c0009203 <Computer::displayFeatures()+0x2db>
c0009062:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0009067:	83 ec 08             	sub    esp,0x8
c000906a:	50                   	push   eax
c000906b:	68 63 44 02 c0       	push   0xc0024463
c0009070:	e8 d2 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009075:	83 c4 10             	add    esp,0x10
c0009078:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000907f:	0f 85 cb 01 00 00    	jne    c0009250 <Computer::displayFeatures()+0x328>
c0009085:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c000908a:	83 ec 08             	sub    esp,0x8
c000908d:	50                   	push   eax
c000908e:	68 74 44 02 c0       	push   0xc0024474
c0009093:	e8 af 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009098:	83 c4 10             	add    esp,0x10
c000909b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c00090a2:	0f 85 9e 01 00 00    	jne    c0009246 <Computer::displayFeatures()+0x31e>
c00090a8:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c00090ad:	83 ec 08             	sub    esp,0x8
c00090b0:	50                   	push   eax
c00090b1:	68 85 44 02 c0       	push   0xc0024485
c00090b6:	e8 8c 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00090bb:	83 c4 10             	add    esp,0x10
c00090be:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090c5:	0f 85 71 01 00 00    	jne    c000923c <Computer::displayFeatures()+0x314>
c00090cb:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c00090d0:	83 ec 08             	sub    esp,0x8
c00090d3:	50                   	push   eax
c00090d4:	68 96 44 02 c0       	push   0xc0024496
c00090d9:	e8 69 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00090de:	83 c4 10             	add    esp,0x10
c00090e1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090e8:	0f 85 44 01 00 00    	jne    c0009232 <Computer::displayFeatures()+0x30a>
c00090ee:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c00090f3:	83 ec 08             	sub    esp,0x8
c00090f6:	50                   	push   eax
c00090f7:	68 a7 44 02 c0       	push   0xc00244a7
c00090fc:	e8 46 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000910b:	0f 85 17 01 00 00    	jne    c0009228 <Computer::displayFeatures()+0x300>
c0009111:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0009116:	83 ec 08             	sub    esp,0x8
c0009119:	50                   	push   eax
c000911a:	68 b8 44 02 c0       	push   0xc00244b8
c000911f:	e8 23 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009124:	83 c4 10             	add    esp,0x10
c0009127:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000912e:	0f 85 ea 00 00 00    	jne    c000921e <Computer::displayFeatures()+0x2f6>
c0009134:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0009139:	83 ec 08             	sub    esp,0x8
c000913c:	50                   	push   eax
c000913d:	68 c9 44 02 c0       	push   0xc00244c9
c0009142:	e8 00 3f 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009147:	83 c4 10             	add    esp,0x10
c000914a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009151:	0f 88 0d 01 00 00    	js     c0009264 <Computer::displayFeatures()+0x33c>
c0009157:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c000915c:	83 ec 08             	sub    esp,0x8
c000915f:	50                   	push   eax
c0009160:	68 da 44 02 c0       	push   0xc00244da
c0009165:	e8 dd 3e 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000916a:	83 c4 10             	add    esp,0x10
c000916d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c0009174:	0f 85 9a 00 00 00    	jne    c0009214 <Computer::displayFeatures()+0x2ec>
c000917a:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c000917f:	83 ec 08             	sub    esp,0x8
c0009182:	50                   	push   eax
c0009183:	68 eb 44 02 c0       	push   0xc00244eb
c0009188:	e8 ba 3e 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000918d:	83 c4 10             	add    esp,0x10
c0009190:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c0009197:	75 74                	jne    c000920d <Computer::displayFeatures()+0x2e5>
c0009199:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c000919e:	83 ec 08             	sub    esp,0x8
c00091a1:	50                   	push   eax
c00091a2:	68 fc 44 02 c0       	push   0xc00244fc
c00091a7:	e8 9b 3e 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00091ac:	c7 44 24 20 fb 64 02 c0 	mov    DWORD PTR [esp+0x20],0xc00264fb
c00091b4:	83 c4 18             	add    esp,0x18
c00091b7:	5b                   	pop    ebx
c00091b8:	e9 8a 3e 00 00       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>
c00091bd:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c00091c2:	e9 88 fd ff ff       	jmp    c0008f4f <Computer::displayFeatures()+0x27>
c00091c7:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c00091cc:	e9 50 fe ff ff       	jmp    c0009021 <Computer::displayFeatures()+0xf9>
c00091d1:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c00091d6:	e9 23 fe ff ff       	jmp    c0008ffe <Computer::displayFeatures()+0xd6>
c00091db:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c00091e0:	e9 f6 fd ff ff       	jmp    c0008fdb <Computer::displayFeatures()+0xb3>
c00091e5:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c00091ea:	e9 c9 fd ff ff       	jmp    c0008fb8 <Computer::displayFeatures()+0x90>
c00091ef:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c00091f4:	e9 9c fd ff ff       	jmp    c0008f95 <Computer::displayFeatures()+0x6d>
c00091f9:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c00091fe:	e9 6f fd ff ff       	jmp    c0008f72 <Computer::displayFeatures()+0x4a>
c0009203:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0009208:	e9 5a fe ff ff       	jmp    c0009067 <Computer::displayFeatures()+0x13f>
c000920d:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0009212:	eb 8a                	jmp    c000919e <Computer::displayFeatures()+0x276>
c0009214:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0009219:	e9 61 ff ff ff       	jmp    c000917f <Computer::displayFeatures()+0x257>
c000921e:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0009223:	e9 11 ff ff ff       	jmp    c0009139 <Computer::displayFeatures()+0x211>
c0009228:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c000922d:	e9 e4 fe ff ff       	jmp    c0009116 <Computer::displayFeatures()+0x1ee>
c0009232:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0009237:	e9 b7 fe ff ff       	jmp    c00090f3 <Computer::displayFeatures()+0x1cb>
c000923c:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0009241:	e9 8a fe ff ff       	jmp    c00090d0 <Computer::displayFeatures()+0x1a8>
c0009246:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c000924b:	e9 5d fe ff ff       	jmp    c00090ad <Computer::displayFeatures()+0x185>
c0009250:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0009255:	e9 30 fe ff ff       	jmp    c000908a <Computer::displayFeatures()+0x162>
c000925a:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c000925f:	e9 e0 fd ff ff       	jmp    c0009044 <Computer::displayFeatures()+0x11c>
c0009264:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0009269:	e9 ee fe ff ff       	jmp    c000915c <Computer::displayFeatures()+0x234>

c000926e <Computer::rdmsr(unsigned int)>:
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009275:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000927c:	74 0a                	je     c0009288 <Computer::rdmsr(unsigned int)+0x1a>
c000927e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009282:	0f 32                	rdmsr  
c0009284:	83 c4 0c             	add    esp,0xc
c0009287:	c3                   	ret    
c0009288:	83 ec 0c             	sub    esp,0xc
c000928b:	68 0d 45 02 c0       	push   0xc002450d
c0009290:	e8 30 be 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c0009295:	83 c4 10             	add    esp,0x10
c0009298:	eb e4                	jmp    c000927e <Computer::rdmsr(unsigned int)+0x10>

c000929a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000929a:	57                   	push   edi
c000929b:	56                   	push   esi
c000929c:	52                   	push   edx
c000929d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00092a5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092a9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092b0:	74 0e                	je     c00092c0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092b6:	89 f0                	mov    eax,esi
c00092b8:	89 fa                	mov    edx,edi
c00092ba:	0f 30                	wrmsr  
c00092bc:	58                   	pop    eax
c00092bd:	5e                   	pop    esi
c00092be:	5f                   	pop    edi
c00092bf:	c3                   	ret    
c00092c0:	83 ec 0c             	sub    esp,0xc
c00092c3:	68 13 45 02 c0       	push   0xc0024513
c00092c8:	e8 f8 bd 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	eb e0                	jmp    c00092b2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092d2 <Computer::shutdown()>:
c00092d2:	83 ec 0c             	sub    esp,0xc
c00092d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092db:	6a 00                	push   0x0
c00092dd:	6a 00                	push   0x0
c00092df:	6a 00                	push   0x0
c00092e1:	50                   	push   eax
c00092e2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092e5:	83 c4 1c             	add    esp,0x1c
c00092e8:	c3                   	ret    
c00092e9:	90                   	nop

c00092ea <Computer::restart()>:
c00092ea:	83 ec 0c             	sub    esp,0xc
c00092ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00092f3:	6a 00                	push   0x0
c00092f5:	6a 00                	push   0x0
c00092f7:	6a 01                	push   0x1
c00092f9:	50                   	push   eax
c00092fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092fd:	83 c4 1c             	add    esp,0x1c
c0009300:	c3                   	ret    
c0009301:	90                   	nop

c0009302 <Computer::sleep()>:
c0009302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009306:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000930c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009310:	e9 a3 99 00 00       	jmp    c0012cb8 <ACPI::sleep()>
c0009315:	90                   	nop

c0009316 <Computer::nmiEnabled()>:
c0009316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009320:	c3                   	ret    
c0009321:	90                   	nop

c0009322 <Computer::readCMOS(unsigned char)>:
c0009322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009326:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000932d:	19 c0                	sbb    eax,eax
c000932f:	83 e0 80             	and    eax,0xffffff80
c0009332:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009336:	e6 70                	out    0x70,al
c0009338:	e4 71                	in     al,0x71
c000933a:	c3                   	ret    
c000933b:	90                   	nop

c000933c <Computer::enableNMI(bool)>:
c000933c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009344:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000934a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009352:	eb ce                	jmp    c0009322 <Computer::readCMOS(unsigned char)>

c0009354 <Computer::open(int, int, void*)>:
c0009354:	56                   	push   esi
c0009355:	53                   	push   ebx
c0009356:	83 ec 10             	sub    esp,0x10
c0009359:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000935d:	68 70 46 02 c0       	push   0xc0024670
c0009362:	e8 4e 0a 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009367:	58                   	pop    eax
c0009368:	f6 05 40 89 02 c0 04 	test   BYTE PTR ds:0xc0028940,0x4
c000936f:	5a                   	pop    edx
c0009370:	0f 94 05 00 7d 02 c0 	sete   BYTE PTR ds:0xc0027d00
c0009377:	68 58 01 00 00       	push   0x158
c000937c:	68 19 45 02 c0       	push   0xc0024519
c0009381:	e8 c1 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009386:	59                   	pop    ecx
c0009387:	5e                   	pop    esi
c0009388:	68 14 01 00 00       	push   0x114
c000938d:	68 2f 45 02 c0       	push   0xc002452f
c0009392:	e8 b0 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009397:	58                   	pop    eax
c0009398:	5a                   	pop    edx
c0009399:	6a 14                	push   0x14
c000939b:	68 43 45 02 c0       	push   0xc0024543
c00093a0:	e8 a2 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00093a5:	59                   	pop    ecx
c00093a6:	5e                   	pop    esi
c00093a7:	68 1f 07 00 00       	push   0x71f
c00093ac:	68 56 45 02 c0       	push   0xc0024556
c00093b1:	e8 91 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00093b6:	58                   	pop    eax
c00093b7:	5a                   	pop    edx
c00093b8:	6a 5f                	push   0x5f
c00093ba:	68 6d 45 02 c0       	push   0xc002456d
c00093bf:	e8 83 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00093c4:	c7 04 24 83 45 02 c0 	mov    DWORD PTR [esp],0xc0024583
c00093cb:	e8 77 3c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00093d0:	c7 04 24 95 45 02 c0 	mov    DWORD PTR [esp],0xc0024595
c00093d7:	e8 d9 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00093dc:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00093e3:	e8 73 09 00 00       	call   c0009d5b <malloc>
c00093e8:	89 c6                	mov    esi,eax
c00093ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00093ed:	e8 7e 91 00 00       	call   c0012570 <ACPI::ACPI()>
c00093f2:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00093f8:	c7 04 24 af 45 02 c0 	mov    DWORD PTR [esp],0xc00245af
c00093ff:	e8 b1 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009404:	59                   	pop    ecx
c0009405:	5e                   	pop    esi
c0009406:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000940c:	53                   	push   ebx
c000940d:	e8 a8 51 00 00       	call   c000e5ba <Device::addChild(Device*)>
c0009412:	c7 04 24 94 46 02 c0 	mov    DWORD PTR [esp],0xc0024694
c0009419:	e8 97 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000941e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009421:	e8 f8 f8 ff ff       	call   c0008d1e <Computer::detectFeatures()>
c0009426:	c7 04 24 b4 46 02 c0 	mov    DWORD PTR [esp],0xc00246b4
c000942d:	e8 83 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009432:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009435:	e8 ee fa ff ff       	call   c0008f28 <Computer::displayFeatures()>
c000943a:	c7 04 24 c9 45 02 c0 	mov    DWORD PTR [esp],0xc00245c9
c0009441:	e8 6f 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009446:	58                   	pop    eax
c0009447:	5a                   	pop    edx
c0009448:	6a 01                	push   0x1
c000944a:	53                   	push   ebx
c000944b:	e8 ec fe ff ff       	call   c000933c <Computer::enableNMI(bool)>
c0009450:	c7 04 24 71 43 02 c0 	mov    DWORD PTR [esp],0xc0024371
c0009457:	e8 59 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000945c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009463:	e8 f3 08 00 00       	call   c0009d5b <malloc>
c0009468:	89 04 24             	mov    DWORD PTR [esp],eax
c000946b:	89 c6                	mov    esi,eax
c000946d:	e8 30 a3 00 00       	call   c00137a2 <CPU::CPU()>
c0009472:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009478:	59                   	pop    ecx
c0009479:	58                   	pop    eax
c000947a:	56                   	push   esi
c000947b:	53                   	push   ebx
c000947c:	e8 39 51 00 00       	call   c000e5ba <Device::addChild(Device*)>
c0009481:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0009487:	8b 10                	mov    edx,DWORD PTR [eax]
c0009489:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000948d:	6a 00                	push   0x0
c000948f:	6a 00                	push   0x0
c0009491:	50                   	push   eax
c0009492:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009495:	83 c4 14             	add    esp,0x14
c0009498:	68 d4 46 02 c0       	push   0xc00246d4
c000949d:	e8 13 09 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00094a2:	e8 af 56 00 00       	call   c000eb56 <setupFPU()>
c00094a7:	83 c4 10             	add    esp,0x10
c00094aa:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00094b0:	85 c0                	test   eax,eax
c00094b2:	74 1f                	je     c00094d3 <Computer::open(int, int, void*)+0x17f>
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	50                   	push   eax
c00094b8:	53                   	push   ebx
c00094b9:	e8 fc 50 00 00       	call   c000e5ba <Device::addChild(Device*)>
c00094be:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c00094c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00094c6:	6a 00                	push   0x0
c00094c8:	6a 00                	push   0x0
c00094ca:	6a 00                	push   0x0
c00094cc:	50                   	push   eax
c00094cd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094d0:	83 c4 20             	add    esp,0x20
c00094d3:	83 ec 0c             	sub    esp,0xc
c00094d6:	68 da 45 02 c0       	push   0xc00245da
c00094db:	e8 d5 08 00 00       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00094e0:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c00094e7:	e8 dc f6 00 00       	call   c0018bc8 <setupMultitasking(void (*)())>
c00094ec:	83 c4 14             	add    esp,0x14
c00094ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00094f4:	5b                   	pop    ebx
c00094f5:	5e                   	pop    esi
c00094f6:	c3                   	ret    
c00094f7:	90                   	nop

c00094f8 <Computer::disableNMI()>:
c00094f8:	6a 00                	push   0x0
c00094fa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00094fe:	e8 39 fe ff ff       	call   c000933c <Computer::enableNMI(bool)>
c0009503:	58                   	pop    eax
c0009504:	5a                   	pop    edx
c0009505:	c3                   	ret    

c0009506 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009511:	19 c0                	sbb    eax,eax
c0009513:	83 e0 80             	and    eax,0xffffff80
c0009516:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000951a:	e6 70                	out    0x70,al
c000951c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009520:	e6 71                	out    0x71,al
c0009522:	c3                   	ret    
c0009523:	90                   	nop

c0009524 <Computer::handleNMI()>:
c0009524:	56                   	push   esi
c0009525:	53                   	push   ebx
c0009526:	83 ec 10             	sub    esp,0x10
c0009529:	e4 92                	in     al,0x92
c000952b:	89 c6                	mov    esi,eax
c000952d:	e4 61                	in     al,0x61
c000952f:	68 f5 45 02 c0       	push   0xc00245f5
c0009534:	88 c3                	mov    bl,al
c0009536:	e8 0c 3b 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000953b:	83 c4 10             	add    esp,0x10
c000953e:	83 e6 10             	and    esi,0x10
c0009541:	75 0d                	jne    c0009550 <Computer::handleNMI()+0x2c>
c0009543:	f6 c3 40             	test   bl,0x40
c0009546:	75 1d                	jne    c0009565 <Computer::handleNMI()+0x41>
c0009548:	84 db                	test   bl,bl
c000954a:	78 2d                	js     c0009579 <Computer::handleNMI()+0x55>
c000954c:	58                   	pop    eax
c000954d:	5b                   	pop    ebx
c000954e:	5e                   	pop    esi
c000954f:	c3                   	ret    
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 06 46 02 c0       	push   0xc0024606
c0009558:	e8 68 bb 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	f6 c3 40             	test   bl,0x40
c0009563:	74 e3                	je     c0009548 <Computer::handleNMI()+0x24>
c0009565:	83 ec 0c             	sub    esp,0xc
c0009568:	68 13 46 02 c0       	push   0xc0024613
c000956d:	e8 53 bb 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	84 db                	test   bl,bl
c0009577:	79 d3                	jns    c000954c <Computer::handleNMI()+0x28>
c0009579:	c7 44 24 10 1d 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc002461d
c0009581:	5a                   	pop    edx
c0009582:	5b                   	pop    ebx
c0009583:	5e                   	pop    esi
c0009584:	e9 3c bb 00 00       	jmp    c00150c5 <Krnl::panic(char const*)>
c0009589:	90                   	nop

c000958a <Computer::setDiskActivityLight(int, bool)>:
c000958a:	56                   	push   esi
c000958b:	53                   	push   ebx
c000958c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009590:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009595:	77 1b                	ja     c00095b2 <Computer::setDiskActivityLight(int, bool)+0x28>
c0009597:	e4 92                	in     al,0x92
c0009599:	bb 40 00 00 00       	mov    ebx,0x40
c000959e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00095a2:	89 da                	mov    edx,ebx
c00095a4:	d3 e2                	shl    edx,cl
c00095a6:	89 f1                	mov    ecx,esi
c00095a8:	f7 d2                	not    edx
c00095aa:	d3 e3                	shl    ebx,cl
c00095ac:	21 d0                	and    eax,edx
c00095ae:	09 d8                	or     eax,ebx
c00095b0:	e6 92                	out    0x92,al
c00095b2:	5b                   	pop    ebx
c00095b3:	5e                   	pop    esi
c00095b4:	c3                   	ret    
c00095b5:	90                   	nop

c00095b6 <GDTEntry::setBase(unsigned int)>:
c00095b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00095be:	89 c1                	mov    ecx,eax
c00095c0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00095c4:	c1 e9 10             	shr    ecx,0x10
c00095c7:	c1 e8 18             	shr    eax,0x18
c00095ca:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00095cd:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00095d0:	c3                   	ret    
c00095d1:	90                   	nop

c00095d2 <GDTEntry::setLimit(unsigned int)>:
c00095d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00095d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095da:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00095dd:	66 89 01             	mov    WORD PTR [ecx],ax
c00095e0:	83 e2 f0             	and    edx,0xfffffff0
c00095e3:	c1 e8 10             	shr    eax,0x10
c00095e6:	83 e0 0f             	and    eax,0xf
c00095e9:	09 d0                	or     eax,edx
c00095eb:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00095ee:	c3                   	ret    
c00095ef:	90                   	nop

c00095f0 <GDT::GDT()>:
c00095f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00095fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009604:	90                   	nop
c0009605:	c3                   	ret    

c0009606 <GDT::addEntry(GDTEntry)>:
c0009606:	53                   	push   ebx
c0009607:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000960b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000960f:	8b 02                	mov    eax,DWORD PTR [edx]
c0009611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009615:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009619:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000961d:	8d 48 01             	lea    ecx,[eax+0x1]
c0009620:	c1 e0 03             	shl    eax,0x3
c0009623:	89 0a                	mov    DWORD PTR [edx],ecx
c0009625:	5b                   	pop    ebx
c0009626:	c3                   	ret    
c0009627:	90                   	nop

c0009628 <GDT::getNumberOfEntries()>:
c0009628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000962c:	8b 00                	mov    eax,DWORD PTR [eax]
c000962e:	c3                   	ret    
c000962f:	90                   	nop

c0009630 <GDT::flush()>:
c0009630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009634:	8b 10                	mov    edx,DWORD PTR [eax]
c0009636:	83 c0 04             	add    eax,0x4
c0009639:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009640:	a3 32 89 02 c0       	mov    ds:0xc0028932,eax
c0009645:	66 89 15 30 89 02 c0 	mov    WORD PTR ds:0xc0028930,dx
c000964c:	e9 34 6d ff ff       	jmp    c0000385 <loadGDT>
c0009651:	90                   	nop

c0009652 <GDT::setup()>:
c0009652:	55                   	push   ebp
c0009653:	57                   	push   edi
c0009654:	56                   	push   esi
c0009655:	53                   	push   ebx
c0009656:	83 ec 3c             	sub    esp,0x3c
c0009659:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000965d:	6a 00                	push   0x0
c000965f:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0009663:	53                   	push   ebx
c0009664:	e8 4d ff ff ff       	call   c00095b6 <GDTEntry::setBase(unsigned int)>
c0009669:	6a 00                	push   0x0
c000966b:	53                   	push   ebx
c000966c:	e8 61 ff ff ff       	call   c00095d2 <GDTEntry::setLimit(unsigned int)>
c0009671:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c0009679:	6a 00                	push   0x0
c000967b:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000967f:	53                   	push   ebx
c0009680:	e8 31 ff ff ff       	call   c00095b6 <GDTEntry::setBase(unsigned int)>
c0009685:	68 ff ff ff 00       	push   0xffffff
c000968a:	53                   	push   ebx
c000968b:	e8 42 ff ff ff       	call   c00095d2 <GDTEntry::setLimit(unsigned int)>
c0009690:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009694:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009699:	0d 00 9a c0 00       	or     eax,0xc09a00
c000969e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00096a2:	83 c4 20             	add    esp,0x20
c00096a5:	6a 00                	push   0x0
c00096a7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00096ab:	53                   	push   ebx
c00096ac:	e8 05 ff ff ff       	call   c00095b6 <GDTEntry::setBase(unsigned int)>
c00096b1:	68 ff ff ff 00       	push   0xffffff
c00096b6:	53                   	push   ebx
c00096b7:	e8 16 ff ff ff       	call   c00095d2 <GDTEntry::setLimit(unsigned int)>
c00096bc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00096c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00096c4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096c8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00096cc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00096d0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096d5:	0d 00 92 c0 00       	or     eax,0xc09200
c00096da:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00096de:	89 d8                	mov    eax,ebx
c00096e0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00096e4:	80 cc 60             	or     ah,0x60
c00096e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096eb:	83 c4 0c             	add    esp,0xc
c00096ee:	89 f8                	mov    eax,edi
c00096f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096f4:	80 cc 60             	or     ah,0x60
c00096f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096fb:	89 c7                	mov    edi,eax
c00096fd:	55                   	push   ebp
c00096fe:	e8 03 ff ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009703:	83 c4 0c             	add    esp,0xc
c0009706:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000970a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000970e:	55                   	push   ebp
c000970f:	e8 f2 fe ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009714:	83 c4 0c             	add    esp,0xc
c0009717:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000971b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000971f:	55                   	push   ebp
c0009720:	e8 e1 fe ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009725:	83 c4 0c             	add    esp,0xc
c0009728:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000972c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009730:	53                   	push   ebx
c0009731:	51                   	push   ecx
c0009732:	55                   	push   ebp
c0009733:	e8 ce fe ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009738:	83 c4 0c             	add    esp,0xc
c000973b:	57                   	push   edi
c000973c:	56                   	push   esi
c000973d:	55                   	push   ebp
c000973e:	e8 c3 fe ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c0009743:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009746:	e8 e5 fe ff ff       	call   c0009630 <GDT::flush()>
c000974b:	83 c4 4c             	add    esp,0x4c
c000974e:	5b                   	pop    ebx
c000974f:	5e                   	pop    esi
c0009750:	5f                   	pop    edi
c0009751:	5d                   	pop    ebp
c0009752:	c3                   	ret    

c0009753 <idleFunction(void*)>:
c0009753:	53                   	push   ebx
c0009754:	83 ec 08             	sub    esp,0x8
c0009757:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000975c:	48                   	dec    eax
c000975d:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0009762:	75 01                	jne    c0009765 <idleFunction(void*)+0x12>
c0009764:	fb                   	sti    
c0009765:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000976a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009770:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c0009777:	74 3c                	je     c00097b5 <idleFunction(void*)+0x62>
c0009779:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009780:	74 33                	je     c00097b5 <idleFunction(void*)+0x62>
c0009782:	31 db                	xor    ebx,ebx
c0009784:	52                   	push   edx
c0009785:	52                   	push   edx
c0009786:	68 e1 00 00 00       	push   0xe1
c000978b:	50                   	push   eax
c000978c:	e8 dd fa ff ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0009791:	53                   	push   ebx
c0009792:	83 e0 02             	and    eax,0x2
c0009795:	50                   	push   eax
c0009796:	68 e1 00 00 00       	push   0xe1
c000979b:	ff 35 28 89 02 c0    	push   DWORD PTR ds:0xc0028928
c00097a1:	e8 f4 fa ff ff       	call   c000929a <Computer::wrmsr(unsigned int, unsigned long long)>
c00097a6:	83 c4 20             	add    esp,0x20
c00097a9:	e8 06 6a ff ff       	call   c00001b4 <doTPAUSE>
c00097ae:	e8 1f 98 01 00       	call   c0022fd2 <idleCommon()>
c00097b3:	eb f4                	jmp    c00097a9 <idleFunction(void*)+0x56>
c00097b5:	fb                   	sti    
c00097b6:	f4                   	hlt    
c00097b7:	e8 16 98 01 00       	call   c0022fd2 <idleCommon()>
c00097bc:	eb f7                	jmp    c00097b5 <idleFunction(void*)+0x62>
c00097be:	66 90                	xchg   ax,ax

c00097c0 <IDTEntry::IDTEntry(bool)>:
c00097c0:	83 ec 04             	sub    esp,0x4
c00097c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097c7:	88 04 24             	mov    BYTE PTR [esp],al
c00097ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097ce:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00097d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097d8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00097dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097e0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097e3:	83 e2 f0             	and    edx,0xfffffff0
c00097e6:	83 ca 0e             	or     edx,0xe
c00097e9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097f0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097f3:	83 e2 ef             	and    edx,0xffffffef
c00097f6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097f9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00097fd:	74 05                	je     c0009804 <IDTEntry::IDTEntry(bool)+0x44>
c00097ff:	b2 03                	mov    dl,0x3
c0009801:	eb 05                	jmp    c0009808 <IDTEntry::IDTEntry(bool)+0x48>
c0009803:	90                   	nop
c0009804:	b2 00                	mov    dl,0x0
c0009806:	66 90                	xchg   ax,ax
c0009808:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000980c:	83 e2 03             	and    edx,0x3
c000980f:	88 d1                	mov    cl,dl
c0009811:	c1 e1 05             	shl    ecx,0x5
c0009814:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009817:	83 e2 9f             	and    edx,0xffffff9f
c000981a:	09 ca                	or     edx,ecx
c000981c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000981f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009823:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009826:	83 ca 80             	or     edx,0xffffff80
c0009829:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000982c:	90                   	nop
c000982d:	83 c4 04             	add    esp,0x4
c0009830:	c3                   	ret    
c0009831:	90                   	nop

c0009832 <IDTEntry::setOffset(unsigned int)>:
c0009832:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000983a:	66 89 02             	mov    WORD PTR [edx],ax
c000983d:	c1 e8 10             	shr    eax,0x10
c0009840:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0009844:	c3                   	ret    
c0009845:	90                   	nop
c0009846:	66 90                	xchg   ax,ax

c0009848 <IDT::IDT()>:
c0009848:	90                   	nop
c0009849:	c3                   	ret    

c000984a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000984a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000984e:	83 c0 30             	add    eax,0x30
c0009851:	c3                   	ret    

c0009852 <IDT::addEntry(IDTEntry, int)>:
c0009852:	53                   	push   ebx
c0009853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009857:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000985b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000985f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009863:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0009866:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000986a:	5b                   	pop    ebx
c000986b:	c3                   	ret    

c000986c <IDT::addEntry(int, void (*)(), bool)>:
c000986c:	53                   	push   ebx
c000986d:	83 ec 10             	sub    esp,0x10
c0009870:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009875:	50                   	push   eax
c0009876:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000987a:	53                   	push   ebx
c000987b:	e8 40 ff ff ff       	call   c00097c0 <IDTEntry::IDTEntry(bool)>
c0009880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009884:	53                   	push   ebx
c0009885:	e8 a8 ff ff ff       	call   c0009832 <IDTEntry::setOffset(unsigned int)>
c000988a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000988e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009892:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009896:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000989a:	e8 b3 ff ff ff       	call   c0009852 <IDT::addEntry(IDTEntry, int)>
c000989f:	83 c4 30             	add    esp,0x30
c00098a2:	5b                   	pop    ebx
c00098a3:	c3                   	ret    

c00098a4 <IDT::flush()>:
c00098a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098a8:	66 c7 05 38 89 02 c0 ff 07 	mov    WORD PTR ds:0xc0028938,0x7ff
c00098b1:	a3 3a 89 02 c0       	mov    ds:0xc002893a,eax
c00098b6:	0f 01 1d 38 89 02 c0 	lidtd  ds:0xc0028938
c00098bd:	c3                   	ret    

c00098be <IDT::setup()>:
c00098be:	57                   	push   edi
c00098bf:	56                   	push   esi
c00098c0:	53                   	push   ebx
c00098c1:	83 ec 10             	sub    esp,0x10
c00098c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00098c8:	6a 00                	push   0x0
c00098ca:	68 a5 03 00 c0       	push   0xc00003a5
c00098cf:	6a 00                	push   0x0
c00098d1:	53                   	push   ebx
c00098d2:	e8 95 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00098d7:	6a 00                	push   0x0
c00098d9:	68 b5 03 00 c0       	push   0xc00003b5
c00098de:	6a 01                	push   0x1
c00098e0:	53                   	push   ebx
c00098e1:	e8 86 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00098e6:	83 c4 20             	add    esp,0x20
c00098e9:	6a 00                	push   0x0
c00098eb:	68 bf 03 00 c0       	push   0xc00003bf
c00098f0:	6a 02                	push   0x2
c00098f2:	53                   	push   ebx
c00098f3:	e8 74 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00098f8:	6a 00                	push   0x0
c00098fa:	68 c9 03 00 c0       	push   0xc00003c9
c00098ff:	6a 03                	push   0x3
c0009901:	53                   	push   ebx
c0009902:	e8 65 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009907:	83 c4 20             	add    esp,0x20
c000990a:	6a 00                	push   0x0
c000990c:	68 d3 03 00 c0       	push   0xc00003d3
c0009911:	6a 04                	push   0x4
c0009913:	53                   	push   ebx
c0009914:	e8 53 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009919:	6a 00                	push   0x0
c000991b:	68 dd 03 00 c0       	push   0xc00003dd
c0009920:	6a 05                	push   0x5
c0009922:	53                   	push   ebx
c0009923:	e8 44 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009928:	83 c4 20             	add    esp,0x20
c000992b:	6a 00                	push   0x0
c000992d:	68 e7 03 00 c0       	push   0xc00003e7
c0009932:	6a 06                	push   0x6
c0009934:	53                   	push   ebx
c0009935:	e8 32 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000993a:	6a 00                	push   0x0
c000993c:	68 f1 03 00 c0       	push   0xc00003f1
c0009941:	6a 07                	push   0x7
c0009943:	53                   	push   ebx
c0009944:	e8 23 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009949:	83 c4 20             	add    esp,0x20
c000994c:	6a 00                	push   0x0
c000994e:	68 fb 03 00 c0       	push   0xc00003fb
c0009953:	6a 08                	push   0x8
c0009955:	53                   	push   ebx
c0009956:	e8 11 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000995b:	6a 00                	push   0x0
c000995d:	68 03 04 00 c0       	push   0xc0000403
c0009962:	6a 09                	push   0x9
c0009964:	53                   	push   ebx
c0009965:	e8 02 ff ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000996a:	83 c4 20             	add    esp,0x20
c000996d:	6a 00                	push   0x0
c000996f:	68 0d 04 00 c0       	push   0xc000040d
c0009974:	6a 0a                	push   0xa
c0009976:	53                   	push   ebx
c0009977:	e8 f0 fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000997c:	6a 00                	push   0x0
c000997e:	68 15 04 00 c0       	push   0xc0000415
c0009983:	6a 0b                	push   0xb
c0009985:	53                   	push   ebx
c0009986:	e8 e1 fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000998b:	83 c4 20             	add    esp,0x20
c000998e:	6a 00                	push   0x0
c0009990:	68 1d 04 00 c0       	push   0xc000041d
c0009995:	6a 0c                	push   0xc
c0009997:	53                   	push   ebx
c0009998:	e8 cf fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c000999d:	6a 00                	push   0x0
c000999f:	68 25 04 00 c0       	push   0xc0000425
c00099a4:	6a 0d                	push   0xd
c00099a6:	53                   	push   ebx
c00099a7:	e8 c0 fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099ac:	83 c4 20             	add    esp,0x20
c00099af:	6a 00                	push   0x0
c00099b1:	68 2d 04 00 c0       	push   0xc000042d
c00099b6:	6a 0e                	push   0xe
c00099b8:	53                   	push   ebx
c00099b9:	e8 ae fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099be:	6a 00                	push   0x0
c00099c0:	68 35 04 00 c0       	push   0xc0000435
c00099c5:	6a 0f                	push   0xf
c00099c7:	53                   	push   ebx
c00099c8:	e8 9f fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099cd:	83 c4 20             	add    esp,0x20
c00099d0:	6a 00                	push   0x0
c00099d2:	68 3f 04 00 c0       	push   0xc000043f
c00099d7:	6a 10                	push   0x10
c00099d9:	53                   	push   ebx
c00099da:	e8 8d fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099df:	6a 00                	push   0x0
c00099e1:	68 49 04 00 c0       	push   0xc0000449
c00099e6:	6a 11                	push   0x11
c00099e8:	53                   	push   ebx
c00099e9:	e8 7e fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c00099ee:	83 c4 20             	add    esp,0x20
c00099f1:	6a 00                	push   0x0
c00099f3:	68 53 04 00 c0       	push   0xc0000453
c00099f8:	6a 12                	push   0x12
c00099fa:	53                   	push   ebx
c00099fb:	e8 6c fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a00:	6a 01                	push   0x1
c0009a02:	68 ed 04 00 c0       	push   0xc00004ed
c0009a07:	6a 60                	push   0x60
c0009a09:	53                   	push   ebx
c0009a0a:	e8 5d fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a0f:	83 c4 20             	add    esp,0x20
c0009a12:	6a 00                	push   0x0
c0009a14:	68 f4 04 00 c0       	push   0xc00004f4
c0009a19:	6a 20                	push   0x20
c0009a1b:	53                   	push   ebx
c0009a1c:	e8 4b fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a21:	6a 00                	push   0x0
c0009a23:	68 df 04 00 c0       	push   0xc00004df
c0009a28:	6a 21                	push   0x21
c0009a2a:	53                   	push   ebx
c0009a2b:	e8 3c fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a30:	83 c4 20             	add    esp,0x20
c0009a33:	6a 00                	push   0x0
c0009a35:	68 e6 04 00 c0       	push   0xc00004e6
c0009a3a:	6a 22                	push   0x22
c0009a3c:	53                   	push   ebx
c0009a3d:	e8 2a fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a42:	6a 00                	push   0x0
c0009a44:	68 5d 04 00 c0       	push   0xc000045d
c0009a49:	6a 23                	push   0x23
c0009a4b:	53                   	push   ebx
c0009a4c:	e8 1b fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a51:	83 c4 20             	add    esp,0x20
c0009a54:	6a 00                	push   0x0
c0009a56:	68 67 04 00 c0       	push   0xc0000467
c0009a5b:	6a 24                	push   0x24
c0009a5d:	53                   	push   ebx
c0009a5e:	e8 09 fe ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a63:	6a 00                	push   0x0
c0009a65:	68 71 04 00 c0       	push   0xc0000471
c0009a6a:	6a 25                	push   0x25
c0009a6c:	53                   	push   ebx
c0009a6d:	e8 fa fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a72:	83 c4 20             	add    esp,0x20
c0009a75:	6a 00                	push   0x0
c0009a77:	68 7b 04 00 c0       	push   0xc000047b
c0009a7c:	6a 26                	push   0x26
c0009a7e:	53                   	push   ebx
c0009a7f:	e8 e8 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a84:	6a 00                	push   0x0
c0009a86:	68 85 04 00 c0       	push   0xc0000485
c0009a8b:	6a 27                	push   0x27
c0009a8d:	53                   	push   ebx
c0009a8e:	e8 d9 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009a93:	83 c4 20             	add    esp,0x20
c0009a96:	6a 00                	push   0x0
c0009a98:	68 8f 04 00 c0       	push   0xc000048f
c0009a9d:	6a 28                	push   0x28
c0009a9f:	53                   	push   ebx
c0009aa0:	e8 c7 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009aa5:	6a 00                	push   0x0
c0009aa7:	68 99 04 00 c0       	push   0xc0000499
c0009aac:	6a 29                	push   0x29
c0009aae:	53                   	push   ebx
c0009aaf:	e8 b8 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009ab4:	83 c4 20             	add    esp,0x20
c0009ab7:	6a 00                	push   0x0
c0009ab9:	68 a3 04 00 c0       	push   0xc00004a3
c0009abe:	6a 2a                	push   0x2a
c0009ac0:	53                   	push   ebx
c0009ac1:	e8 a6 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009ac6:	6a 00                	push   0x0
c0009ac8:	68 ad 04 00 c0       	push   0xc00004ad
c0009acd:	6a 2b                	push   0x2b
c0009acf:	53                   	push   ebx
c0009ad0:	e8 97 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009ad5:	83 c4 20             	add    esp,0x20
c0009ad8:	6a 00                	push   0x0
c0009ada:	68 b7 04 00 c0       	push   0xc00004b7
c0009adf:	6a 2c                	push   0x2c
c0009ae1:	53                   	push   ebx
c0009ae2:	e8 85 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009ae7:	6a 00                	push   0x0
c0009ae9:	68 c1 04 00 c0       	push   0xc00004c1
c0009aee:	6a 2d                	push   0x2d
c0009af0:	53                   	push   ebx
c0009af1:	e8 76 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009af6:	83 c4 20             	add    esp,0x20
c0009af9:	6a 00                	push   0x0
c0009afb:	68 cb 04 00 c0       	push   0xc00004cb
c0009b00:	6a 2e                	push   0x2e
c0009b02:	53                   	push   ebx
c0009b03:	e8 64 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b08:	6a 00                	push   0x0
c0009b0a:	68 d5 04 00 c0       	push   0xc00004d5
c0009b0f:	6a 2f                	push   0x2f
c0009b11:	53                   	push   ebx
c0009b12:	e8 55 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b17:	83 c4 20             	add    esp,0x20
c0009b1a:	6a 00                	push   0x0
c0009b1c:	68 2b 05 00 c0       	push   0xc000052b
c0009b21:	6a 30                	push   0x30
c0009b23:	53                   	push   ebx
c0009b24:	e8 43 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b29:	6a 00                	push   0x0
c0009b2b:	68 35 05 00 c0       	push   0xc0000535
c0009b30:	6a 31                	push   0x31
c0009b32:	53                   	push   ebx
c0009b33:	e8 34 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b38:	83 c4 20             	add    esp,0x20
c0009b3b:	6a 00                	push   0x0
c0009b3d:	68 3f 05 00 c0       	push   0xc000053f
c0009b42:	6a 32                	push   0x32
c0009b44:	53                   	push   ebx
c0009b45:	e8 22 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b4a:	6a 00                	push   0x0
c0009b4c:	68 49 05 00 c0       	push   0xc0000549
c0009b51:	6a 33                	push   0x33
c0009b53:	53                   	push   ebx
c0009b54:	e8 13 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b59:	83 c4 20             	add    esp,0x20
c0009b5c:	6a 00                	push   0x0
c0009b5e:	68 53 05 00 c0       	push   0xc0000553
c0009b63:	6a 34                	push   0x34
c0009b65:	53                   	push   ebx
c0009b66:	e8 01 fd ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b6b:	6a 00                	push   0x0
c0009b6d:	68 5d 05 00 c0       	push   0xc000055d
c0009b72:	6a 35                	push   0x35
c0009b74:	53                   	push   ebx
c0009b75:	e8 f2 fc ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b7a:	83 c4 20             	add    esp,0x20
c0009b7d:	6a 00                	push   0x0
c0009b7f:	68 67 05 00 c0       	push   0xc0000567
c0009b84:	6a 36                	push   0x36
c0009b86:	53                   	push   ebx
c0009b87:	e8 e0 fc ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b8c:	6a 00                	push   0x0
c0009b8e:	68 71 05 00 c0       	push   0xc0000571
c0009b93:	6a 37                	push   0x37
c0009b95:	53                   	push   ebx
c0009b96:	e8 d1 fc ff ff       	call   c000986c <IDT::addEntry(int, void (*)(), bool)>
c0009b9b:	83 c4 1c             	add    esp,0x1c
c0009b9e:	6a 03                	push   0x3
c0009ba0:	6a 02                	push   0x2
c0009ba2:	ff 35 50 8a 02 c0    	push   DWORD PTR ds:0xc0028a50
c0009ba8:	e8 1d 29 00 00       	call   c000c4ca <VAS::allocatePages(int, int)>
c0009bad:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009bb4:	89 c6                	mov    esi,eax
c0009bb6:	e8 a0 01 00 00       	call   c0009d5b <malloc>
c0009bbb:	81 c6 00 20 00 00    	add    esi,0x2000
c0009bc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bc4:	89 c7                	mov    edi,eax
c0009bc6:	e8 99 1a 00 00       	call   c000b664 <TSS::TSS()>
c0009bcb:	83 c4 0c             	add    esp,0xc
c0009bce:	68 fb 03 00 c0       	push   0xc00003fb
c0009bd3:	56                   	push   esi
c0009bd4:	57                   	push   edi
c0009bd5:	e8 ce 1a 00 00       	call   c000b6a8 <TSS::setup(unsigned long, unsigned long)>
c0009bda:	89 c6                	mov    esi,eax
c0009bdc:	58                   	pop    eax
c0009bdd:	5a                   	pop    edx
c0009bde:	6a 00                	push   0x0
c0009be0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009be4:	50                   	push   eax
c0009be5:	e8 d6 fb ff ff       	call   c00097c0 <IDTEntry::IDTEntry(bool)>
c0009bea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009bee:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009bf3:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009bfa:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009c00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c04:	80 ce 05             	or     dh,0x5
c0009c07:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009c0a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c12:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009c15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009c18:	e8 87 fc ff ff       	call   c00098a4 <IDT::flush()>
c0009c1d:	83 c4 20             	add    esp,0x20
c0009c20:	5b                   	pop    ebx
c0009c21:	5e                   	pop    esi
c0009c22:	5f                   	pop    edi
c0009c23:	c3                   	ret    

c0009c24 <sbrk>:
c0009c24:	55                   	push   ebp
c0009c25:	57                   	push   edi
c0009c26:	56                   	push   esi
c0009c27:	53                   	push   ebx
c0009c28:	83 ec 24             	sub    esp,0x24
c0009c2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009c2f:	53                   	push   ebx
c0009c30:	68 24 47 02 c0       	push   0xc0024724
c0009c35:	e8 0d 34 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009c3a:	83 c4 10             	add    esp,0x10
c0009c3d:	85 db                	test   ebx,ebx
c0009c3f:	74 5f                	je     c0009ca0 <sbrk+0x7c>
c0009c41:	78 64                	js     c0009ca7 <sbrk+0x83>
c0009c43:	a1 8c 7b 02 c0       	mov    eax,ds:0xc0027b8c
c0009c48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4c:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009c52:	89 dd                	mov    ebp,ebx
c0009c54:	78 69                	js     c0009cbf <sbrk+0x9b>
c0009c56:	c1 fd 0c             	sar    ebp,0xc
c0009c59:	bb 00 00 00 00       	mov    ebx,0x0
c0009c5e:	8b 35 50 8a 02 c0    	mov    esi,DWORD PTR ds:0xc0028a50
c0009c64:	8b 3d 8c 7b 02 c0    	mov    edi,DWORD PTR ds:0xc0027b8c
c0009c6a:	e8 a3 07 00 00       	call   c000a412 <Phys::allocatePage()>
c0009c6f:	68 01 04 00 00       	push   0x401
c0009c74:	57                   	push   edi
c0009c75:	50                   	push   eax
c0009c76:	56                   	push   esi
c0009c77:	e8 4c 27 00 00       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c7c:	81 05 8c 7b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027b8c,0x1000
c0009c86:	43                   	inc    ebx
c0009c87:	83 c4 10             	add    esp,0x10
c0009c8a:	39 dd                	cmp    ebp,ebx
c0009c8c:	75 d0                	jne    c0009c5e <sbrk+0x3a>
c0009c8e:	0f 20 d8             	mov    eax,cr3
c0009c91:	0f 22 d8             	mov    cr3,eax
c0009c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c98:	83 c4 1c             	add    esp,0x1c
c0009c9b:	5b                   	pop    ebx
c0009c9c:	5e                   	pop    esi
c0009c9d:	5f                   	pop    edi
c0009c9e:	5d                   	pop    ebp
c0009c9f:	c3                   	ret    
c0009ca0:	a1 8c 7b 02 c0       	mov    eax,ds:0xc0027b8c
c0009ca5:	eb f1                	jmp    c0009c98 <sbrk+0x74>
c0009ca7:	83 ec 08             	sub    esp,0x8
c0009caa:	53                   	push   ebx
c0009cab:	68 50 47 02 c0       	push   0xc0024750
c0009cb0:	e8 92 33 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009cb5:	83 c4 10             	add    esp,0x10
c0009cb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009cbd:	eb d9                	jmp    c0009c98 <sbrk+0x74>
c0009cbf:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009cc5:	eb 8f                	jmp    c0009c56 <sbrk+0x32>

c0009cc7 <mmap>:
c0009cc7:	83 ec 18             	sub    esp,0x18
c0009cca:	68 42 47 02 c0       	push   0xc0024742
c0009ccf:	e8 f1 b3 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c0009cd4:	b8 00 00 00 00       	mov    eax,0x0
c0009cd9:	83 c4 1c             	add    esp,0x1c
c0009cdc:	c3                   	ret    

c0009cdd <munmap>:
c0009cdd:	83 ec 18             	sub    esp,0x18
c0009ce0:	68 47 47 02 c0       	push   0xc0024747
c0009ce5:	e8 db b3 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c0009cea:	b8 00 00 00 00       	mov    eax,0x0
c0009cef:	83 c4 1c             	add    esp,0x1c
c0009cf2:	c3                   	ret    

c0009cf3 <liballoc_lock()>:
c0009cf3:	fa                   	cli    
c0009cf4:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0009cfa:	b8 00 00 00 00       	mov    eax,0x0
c0009cff:	c3                   	ret    

c0009d00 <liballoc_unlock()>:
c0009d00:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0009d05:	48                   	dec    eax
c0009d06:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0009d0b:	75 01                	jne    c0009d0e <liballoc_unlock()+0xe>
c0009d0d:	fb                   	sti    
c0009d0e:	b8 00 00 00 00       	mov    eax,0x0
c0009d13:	c3                   	ret    

c0009d14 <liballoc_alloc(int)>:
c0009d14:	83 ec 10             	sub    esp,0x10
c0009d17:	6a 01                	push   0x1
c0009d19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d1d:	ff 35 50 8a 02 c0    	push   DWORD PTR ds:0xc0028a50
c0009d23:	e8 a2 27 00 00       	call   c000c4ca <VAS::allocatePages(int, int)>
c0009d28:	83 c4 1c             	add    esp,0x1c
c0009d2b:	c3                   	ret    

c0009d2c <liballoc_free(void*, int)>:
c0009d2c:	83 ec 14             	sub    esp,0x14
c0009d2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d33:	ff 35 50 8a 02 c0    	push   DWORD PTR ds:0xc0028a50
c0009d39:	e8 36 24 00 00       	call   c000c174 <VAS::freeAllocatedPages(unsigned long)>
c0009d3e:	b8 00 00 00 00       	mov    eax,0x0
c0009d43:	83 c4 1c             	add    esp,0x1c
c0009d46:	c3                   	ret    

c0009d47 <realloc>:
c0009d47:	83 ec 14             	sub    esp,0x14
c0009d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d52:	e8 09 78 ff ff       	call   c0001560 <dlrealloc>
c0009d57:	83 c4 1c             	add    esp,0x1c
c0009d5a:	c3                   	ret    

c0009d5b <malloc>:
c0009d5b:	83 ec 18             	sub    esp,0x18
c0009d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d62:	e8 bc 72 ff ff       	call   c0001023 <dlmalloc>
c0009d67:	83 c4 1c             	add    esp,0x1c
c0009d6a:	c3                   	ret    

c0009d6b <free>:
c0009d6b:	83 ec 18             	sub    esp,0x18
c0009d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d72:	e8 51 6f ff ff       	call   c0000cc8 <dlfree>
c0009d77:	83 c4 1c             	add    esp,0x1c
c0009d7a:	c3                   	ret    

c0009d7b <rfree>:
c0009d7b:	83 ec 18             	sub    esp,0x18
c0009d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d82:	e8 41 6f ff ff       	call   c0000cc8 <dlfree>
c0009d87:	83 c4 1c             	add    esp,0x1c
c0009d8a:	c3                   	ret    

c0009d8b <calloc>:
c0009d8b:	56                   	push   esi
c0009d8c:	53                   	push   ebx
c0009d8d:	83 ec 10             	sub    esp,0x10
c0009d90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009d94:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009d99:	53                   	push   ebx
c0009d9a:	e8 bc ff ff ff       	call   c0009d5b <malloc>
c0009d9f:	89 c6                	mov    esi,eax
c0009da1:	83 c4 0c             	add    esp,0xc
c0009da4:	53                   	push   ebx
c0009da5:	6a 00                	push   0x0
c0009da7:	50                   	push   eax
c0009da8:	e8 d7 68 ff ff       	call   c0000684 <memset>
c0009dad:	89 f0                	mov    eax,esi
c0009daf:	83 c4 14             	add    esp,0x14
c0009db2:	5b                   	pop    ebx
c0009db3:	5e                   	pop    esi
c0009db4:	c3                   	ret    

c0009db5 <Krnl::setBootMessage(char const*)>:
c0009db5:	57                   	push   edi
c0009db6:	56                   	push   esi
c0009db7:	53                   	push   ebx
c0009db8:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009dbe:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009dc5:	68 9e 00 00 00       	push   0x9e
c0009dca:	6a 00                	push   0x0
c0009dcc:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009dd0:	56                   	push   esi
c0009dd1:	e8 ae 68 ff ff       	call   c0000684 <memset>
c0009dd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009dd9:	e8 c2 68 ff ff       	call   c00006a0 <strlen>
c0009dde:	ba 50 00 00 00       	mov    edx,0x50
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	29 c2                	sub    edx,eax
c0009de8:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009dec:	d1 ea                	shr    edx,1
c0009dee:	84 c0                	test   al,al
c0009df0:	74 19                	je     c0009e0b <Krnl::setBootMessage(char const*)+0x56>
c0009df2:	01 d2                	add    edx,edx
c0009df4:	43                   	inc    ebx
c0009df5:	01 f2                	add    edx,esi
c0009df7:	80 cc 0f             	or     ah,0xf
c0009dfa:	83 c2 02             	add    edx,0x2
c0009dfd:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009e01:	43                   	inc    ebx
c0009e02:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009e07:	84 c0                	test   al,al
c0009e09:	75 ec                	jne    c0009df7 <Krnl::setBootMessage(char const*)+0x42>
c0009e0b:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009e10:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009e15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009e17:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009e1d:	5b                   	pop    ebx
c0009e1e:	5e                   	pop    esi
c0009e1f:	5f                   	pop    edi
c0009e20:	c3                   	ret    

c0009e21 <kernel_main>:
c0009e21:	57                   	push   edi
c0009e22:	56                   	push   esi
c0009e23:	53                   	push   ebx
c0009e24:	83 ec 20             	sub    esp,0x20
c0009e27:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009e2c:	a3 40 89 02 c0       	mov    ds:0xc0028940,eax
c0009e31:	f6 c4 08             	test   ah,0x8
c0009e34:	0f 85 7a 03 00 00    	jne    c000a1b4 <kernel_main+0x393>
c0009e3a:	31 f6                	xor    esi,esi
c0009e3c:	bf f9 03 00 00       	mov    edi,0x3f9
c0009e41:	89 f0                	mov    eax,esi
c0009e43:	89 fa                	mov    edx,edi
c0009e45:	ee                   	out    dx,al
c0009e46:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009e4b:	b0 80                	mov    al,0x80
c0009e4d:	89 da                	mov    edx,ebx
c0009e4f:	ee                   	out    dx,al
c0009e50:	b1 03                	mov    cl,0x3
c0009e52:	ba f8 03 00 00       	mov    edx,0x3f8
c0009e57:	88 c8                	mov    al,cl
c0009e59:	ee                   	out    dx,al
c0009e5a:	89 f0                	mov    eax,esi
c0009e5c:	89 fa                	mov    edx,edi
c0009e5e:	ee                   	out    dx,al
c0009e5f:	88 c8                	mov    al,cl
c0009e61:	89 da                	mov    edx,ebx
c0009e63:	ee                   	out    dx,al
c0009e64:	b0 c7                	mov    al,0xc7
c0009e66:	ba fa 03 00 00       	mov    edx,0x3fa
c0009e6b:	ee                   	out    dx,al
c0009e6c:	b0 0b                	mov    al,0xb
c0009e6e:	ba fc 03 00 00       	mov    edx,0x3fc
c0009e73:	ee                   	out    dx,al
c0009e74:	83 ec 0c             	sub    esp,0xc
c0009e77:	68 80 47 02 c0       	push   0xc0024780
c0009e7c:	e8 c6 31 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0009e81:	83 c4 10             	add    esp,0x10
c0009e84:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0009e8b:	0f 85 eb 02 00 00    	jne    c000a17c <kernel_main+0x35b>
c0009e91:	e8 d2 0c 00 00       	call   c000ab68 <installVgaTextImplementation()>
c0009e96:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0009e9d:	0f 85 94 02 00 00    	jne    c000a137 <kernel_main+0x316>
c0009ea3:	0f b6 05 a0 7b 02 c0 	movzx  eax,BYTE PTR ds:0xc0027ba0
c0009eaa:	84 c0                	test   al,al
c0009eac:	74 7b                	je     c0009f29 <kernel_main+0x108>
c0009eae:	31 db                	xor    ebx,ebx
c0009eb0:	bf 0a 00 00 00       	mov    edi,0xa
c0009eb5:	be 05 00 00 00       	mov    esi,0x5
c0009eba:	31 c9                	xor    ecx,ecx
c0009ebc:	eb 2a                	jmp    c0009ee8 <kernel_main+0xc7>
c0009ebe:	3c 0d                	cmp    al,0xd
c0009ec0:	74 1a                	je     c0009edc <kernel_main+0xbb>
c0009ec2:	3c 0a                	cmp    al,0xa
c0009ec4:	74 40                	je     c0009f06 <kernel_main+0xe5>
c0009ec6:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009ec9:	80 cc 0e             	or     ah,0xe
c0009ecc:	c1 e2 04             	shl    edx,0x4
c0009ecf:	01 ca                	add    edx,ecx
c0009ed1:	41                   	inc    ecx
c0009ed2:	01 fa                	add    edx,edi
c0009ed4:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009edc:	43                   	inc    ebx
c0009edd:	0f b6 83 a0 7b 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8460]
c0009ee4:	84 c0                	test   al,al
c0009ee6:	74 32                	je     c0009f1a <kernel_main+0xf9>
c0009ee8:	80 b9 d6 7b 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd842a],0xdb
c0009eef:	75 cd                	jne    c0009ebe <kernel_main+0x9d>
c0009ef1:	0f b6 91 d5 7b 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd842b]
c0009ef8:	83 e2 fe             	and    edx,0xfffffffe
c0009efb:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009f01:	75 bb                	jne    c0009ebe <kernel_main+0x9d>
c0009f03:	47                   	inc    edi
c0009f04:	eb b8                	jmp    c0009ebe <kernel_main+0x9d>
c0009f06:	43                   	inc    ebx
c0009f07:	46                   	inc    esi
c0009f08:	31 c9                	xor    ecx,ecx
c0009f0a:	0f b6 83 a0 7b 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8460]
c0009f11:	bf 0a 00 00 00       	mov    edi,0xa
c0009f16:	84 c0                	test   al,al
c0009f18:	75 ce                	jne    c0009ee8 <kernel_main+0xc7>
c0009f1a:	8b 15 40 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028940
c0009f20:	80 e6 08             	and    dh,0x8
c0009f23:	0f 85 bf 00 00 00    	jne    c0009fe8 <kernel_main+0x1c7>
c0009f29:	83 ec 0c             	sub    esp,0xc
c0009f2c:	68 1c 48 02 c0       	push   0xc002481c
c0009f31:	e8 7f fe ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009f36:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009f3b:	05 ff 0f 00 00       	add    eax,0xfff
c0009f40:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f45:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f48:	e8 44 06 00 00       	call   c000a591 <Phys::physicalMemorySetup(unsigned int)>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0009f57:	0f 85 a2 01 00 00    	jne    c000a0ff <kernel_main+0x2de>
c0009f5d:	e8 7e 1f 00 00       	call   c000bee0 <Virt::virtualMemorySetup()>
c0009f62:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0009f69:	0f 85 58 01 00 00    	jne    c000a0c7 <kernel_main+0x2a6>
c0009f6f:	83 ec 0c             	sub    esp,0xc
c0009f72:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009f76:	56                   	push   esi
c0009f77:	e8 20 20 00 00       	call   c000bf9c <VAS::VAS()>
c0009f7c:	83 c4 10             	add    esp,0x10
c0009f7f:	89 35 50 8a 02 c0    	mov    DWORD PTR ds:0xc0028a50,esi
c0009f85:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0009f8c:	0f 85 fd 00 00 00    	jne    c000a08f <kernel_main+0x26e>
c0009f92:	e8 89 60 ff ff       	call   c0000020 <callGlobalConstructors>
c0009f97:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0009f9e:	0f 85 b3 00 00 00    	jne    c000a057 <kernel_main+0x236>
c0009fa4:	83 ec 0c             	sub    esp,0xc
c0009fa7:	68 ec 01 00 00       	push   0x1ec
c0009fac:	e8 aa fd ff ff       	call   c0009d5b <malloc>
c0009fb1:	89 c3                	mov    ebx,eax
c0009fb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fb6:	e8 05 ec ff ff       	call   c0008bc0 <Computer::Computer()>
c0009fbb:	83 c4 10             	add    esp,0x10
c0009fbe:	89 1d 28 89 02 c0    	mov    DWORD PTR ds:0xc0028928,ebx
c0009fc4:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0009fcb:	75 53                	jne    c000a020 <kernel_main+0x1ff>
c0009fcd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009fcf:	6a 00                	push   0x0
c0009fd1:	6a 00                	push   0x0
c0009fd3:	6a 00                	push   0x0
c0009fd5:	53                   	push   ebx
c0009fd6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009fd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fdc:	e8 6b 22 00 00       	call   c000c24c <VAS::~VAS()>
c0009fe1:	83 c4 30             	add    esp,0x30
c0009fe4:	5b                   	pop    ebx
c0009fe5:	5e                   	pop    esi
c0009fe6:	5f                   	pop    edi
c0009fe7:	c3                   	ret    
c0009fe8:	83 ec 0c             	sub    esp,0xc
c0009feb:	68 cb 47 02 c0       	push   0xc00247cb
c0009ff0:	e8 c0 fd ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0009ff5:	83 c4 10             	add    esp,0x10
c0009ff8:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0009fff:	0f 85 24 ff ff ff    	jne    c0009f29 <kernel_main+0x108>
c000a005:	eb 04                	jmp    c000a00b <kernel_main+0x1ea>
c000a007:	3c 1c                	cmp    al,0x1c
c000a009:	74 06                	je     c000a011 <kernel_main+0x1f0>
c000a00b:	e4 60                	in     al,0x60
c000a00d:	3c 5a                	cmp    al,0x5a
c000a00f:	75 f6                	jne    c000a007 <kernel_main+0x1e6>
c000a011:	e4 60                	in     al,0x60
c000a013:	3c 5a                	cmp    al,0x5a
c000a015:	74 fa                	je     c000a011 <kernel_main+0x1f0>
c000a017:	3c 1c                	cmp    al,0x1c
c000a019:	74 f6                	je     c000a011 <kernel_main+0x1f0>
c000a01b:	e9 09 ff ff ff       	jmp    c0009f29 <kernel_main+0x108>
c000a020:	83 ec 0c             	sub    esp,0xc
c000a023:	68 0a 48 02 c0       	push   0xc002480a
c000a028:	e8 88 fd ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a02d:	83 c4 10             	add    esp,0x10
c000a030:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c000a037:	74 0c                	je     c000a045 <kernel_main+0x224>
c000a039:	8b 1d 28 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028928
c000a03f:	eb 8c                	jmp    c0009fcd <kernel_main+0x1ac>
c000a041:	3c 1c                	cmp    al,0x1c
c000a043:	74 06                	je     c000a04b <kernel_main+0x22a>
c000a045:	e4 60                	in     al,0x60
c000a047:	3c 5a                	cmp    al,0x5a
c000a049:	75 f6                	jne    c000a041 <kernel_main+0x220>
c000a04b:	e4 60                	in     al,0x60
c000a04d:	3c 5a                	cmp    al,0x5a
c000a04f:	74 fa                	je     c000a04b <kernel_main+0x22a>
c000a051:	3c 1c                	cmp    al,0x1c
c000a053:	74 f6                	je     c000a04b <kernel_main+0x22a>
c000a055:	eb e2                	jmp    c000a039 <kernel_main+0x218>
c000a057:	83 ec 0c             	sub    esp,0xc
c000a05a:	68 f7 47 02 c0       	push   0xc00247f7
c000a05f:	e8 51 fd ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a064:	83 c4 10             	add    esp,0x10
c000a067:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c000a06e:	0f 85 30 ff ff ff    	jne    c0009fa4 <kernel_main+0x183>
c000a074:	eb 04                	jmp    c000a07a <kernel_main+0x259>
c000a076:	3c 1c                	cmp    al,0x1c
c000a078:	74 06                	je     c000a080 <kernel_main+0x25f>
c000a07a:	e4 60                	in     al,0x60
c000a07c:	3c 5a                	cmp    al,0x5a
c000a07e:	75 f6                	jne    c000a076 <kernel_main+0x255>
c000a080:	e4 60                	in     al,0x60
c000a082:	3c 5a                	cmp    al,0x5a
c000a084:	74 fa                	je     c000a080 <kernel_main+0x25f>
c000a086:	3c 1c                	cmp    al,0x1c
c000a088:	74 f6                	je     c000a080 <kernel_main+0x25f>
c000a08a:	e9 15 ff ff ff       	jmp    c0009fa4 <kernel_main+0x183>
c000a08f:	83 ec 0c             	sub    esp,0xc
c000a092:	68 ed 47 02 c0       	push   0xc00247ed
c000a097:	e8 19 fd ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a09c:	83 c4 10             	add    esp,0x10
c000a09f:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c000a0a6:	0f 85 e6 fe ff ff    	jne    c0009f92 <kernel_main+0x171>
c000a0ac:	eb 04                	jmp    c000a0b2 <kernel_main+0x291>
c000a0ae:	3c 1c                	cmp    al,0x1c
c000a0b0:	74 06                	je     c000a0b8 <kernel_main+0x297>
c000a0b2:	e4 60                	in     al,0x60
c000a0b4:	3c 5a                	cmp    al,0x5a
c000a0b6:	75 f6                	jne    c000a0ae <kernel_main+0x28d>
c000a0b8:	e4 60                	in     al,0x60
c000a0ba:	3c 5a                	cmp    al,0x5a
c000a0bc:	74 fa                	je     c000a0b8 <kernel_main+0x297>
c000a0be:	3c 1c                	cmp    al,0x1c
c000a0c0:	74 f6                	je     c000a0b8 <kernel_main+0x297>
c000a0c2:	e9 cb fe ff ff       	jmp    c0009f92 <kernel_main+0x171>
c000a0c7:	83 ec 0c             	sub    esp,0xc
c000a0ca:	68 e2 47 02 c0       	push   0xc00247e2
c000a0cf:	e8 e1 fc ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a0d4:	83 c4 10             	add    esp,0x10
c000a0d7:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c000a0de:	0f 85 8b fe ff ff    	jne    c0009f6f <kernel_main+0x14e>
c000a0e4:	eb 04                	jmp    c000a0ea <kernel_main+0x2c9>
c000a0e6:	3c 1c                	cmp    al,0x1c
c000a0e8:	74 06                	je     c000a0f0 <kernel_main+0x2cf>
c000a0ea:	e4 60                	in     al,0x60
c000a0ec:	3c 5a                	cmp    al,0x5a
c000a0ee:	75 f6                	jne    c000a0e6 <kernel_main+0x2c5>
c000a0f0:	e4 60                	in     al,0x60
c000a0f2:	3c 5a                	cmp    al,0x5a
c000a0f4:	74 fa                	je     c000a0f0 <kernel_main+0x2cf>
c000a0f6:	3c 1c                	cmp    al,0x1c
c000a0f8:	74 f6                	je     c000a0f0 <kernel_main+0x2cf>
c000a0fa:	e9 70 fe ff ff       	jmp    c0009f6f <kernel_main+0x14e>
c000a0ff:	83 ec 0c             	sub    esp,0xc
c000a102:	68 d7 47 02 c0       	push   0xc00247d7
c000a107:	e8 a9 fc ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a10c:	83 c4 10             	add    esp,0x10
c000a10f:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c000a116:	0f 85 41 fe ff ff    	jne    c0009f5d <kernel_main+0x13c>
c000a11c:	eb 04                	jmp    c000a122 <kernel_main+0x301>
c000a11e:	3c 1c                	cmp    al,0x1c
c000a120:	74 06                	je     c000a128 <kernel_main+0x307>
c000a122:	e4 60                	in     al,0x60
c000a124:	3c 5a                	cmp    al,0x5a
c000a126:	75 f6                	jne    c000a11e <kernel_main+0x2fd>
c000a128:	e4 60                	in     al,0x60
c000a12a:	3c 5a                	cmp    al,0x5a
c000a12c:	74 fa                	je     c000a128 <kernel_main+0x307>
c000a12e:	3c 1c                	cmp    al,0x1c
c000a130:	74 f6                	je     c000a128 <kernel_main+0x307>
c000a132:	e9 26 fe ff ff       	jmp    c0009f5d <kernel_main+0x13c>
c000a137:	83 ec 0c             	sub    esp,0xc
c000a13a:	68 b9 47 02 c0       	push   0xc00247b9
c000a13f:	e8 71 fc ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a144:	8b 15 40 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028940
c000a14a:	83 c4 10             	add    esp,0x10
c000a14d:	f6 c2 80             	test   dl,0x80
c000a150:	74 18                	je     c000a16a <kernel_main+0x349>
c000a152:	0f b6 05 a0 7b 02 c0 	movzx  eax,BYTE PTR ds:0xc0027ba0
c000a159:	84 c0                	test   al,al
c000a15b:	0f 85 4d fd ff ff    	jne    c0009eae <kernel_main+0x8d>
c000a161:	e9 ba fd ff ff       	jmp    c0009f20 <kernel_main+0xff>
c000a166:	3c 1c                	cmp    al,0x1c
c000a168:	74 06                	je     c000a170 <kernel_main+0x34f>
c000a16a:	e4 60                	in     al,0x60
c000a16c:	3c 5a                	cmp    al,0x5a
c000a16e:	75 f6                	jne    c000a166 <kernel_main+0x345>
c000a170:	e4 60                	in     al,0x60
c000a172:	3c 5a                	cmp    al,0x5a
c000a174:	74 fa                	je     c000a170 <kernel_main+0x34f>
c000a176:	3c 1c                	cmp    al,0x1c
c000a178:	74 f6                	je     c000a170 <kernel_main+0x34f>
c000a17a:	eb d6                	jmp    c000a152 <kernel_main+0x331>
c000a17c:	83 ec 0c             	sub    esp,0xc
c000a17f:	68 aa 47 02 c0       	push   0xc00247aa
c000a184:	e8 2c fc ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a189:	83 c4 10             	add    esp,0x10
c000a18c:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c000a193:	0f 85 f8 fc ff ff    	jne    c0009e91 <kernel_main+0x70>
c000a199:	eb 04                	jmp    c000a19f <kernel_main+0x37e>
c000a19b:	3c 1c                	cmp    al,0x1c
c000a19d:	74 06                	je     c000a1a5 <kernel_main+0x384>
c000a19f:	e4 60                	in     al,0x60
c000a1a1:	3c 5a                	cmp    al,0x5a
c000a1a3:	75 f6                	jne    c000a19b <kernel_main+0x37a>
c000a1a5:	e4 60                	in     al,0x60
c000a1a7:	3c 5a                	cmp    al,0x5a
c000a1a9:	74 fa                	je     c000a1a5 <kernel_main+0x384>
c000a1ab:	3c 1c                	cmp    al,0x1c
c000a1ad:	74 f6                	je     c000a1a5 <kernel_main+0x384>
c000a1af:	e9 dd fc ff ff       	jmp    c0009e91 <kernel_main+0x70>
c000a1b4:	83 ec 0c             	sub    esp,0xc
c000a1b7:	68 97 47 02 c0       	push   0xc0024797
c000a1bc:	e8 f4 fb ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c000a1c1:	83 c4 10             	add    esp,0x10
c000a1c4:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c000a1cb:	0f 85 69 fc ff ff    	jne    c0009e3a <kernel_main+0x19>
c000a1d1:	eb 04                	jmp    c000a1d7 <kernel_main+0x3b6>
c000a1d3:	3c 1c                	cmp    al,0x1c
c000a1d5:	74 06                	je     c000a1dd <kernel_main+0x3bc>
c000a1d7:	e4 60                	in     al,0x60
c000a1d9:	3c 5a                	cmp    al,0x5a
c000a1db:	75 f6                	jne    c000a1d3 <kernel_main+0x3b2>
c000a1dd:	e4 60                	in     al,0x60
c000a1df:	3c 5a                	cmp    al,0x5a
c000a1e1:	74 fa                	je     c000a1dd <kernel_main+0x3bc>
c000a1e3:	3c 1c                	cmp    al,0x1c
c000a1e5:	74 f6                	je     c000a1dd <kernel_main+0x3bc>
c000a1e7:	e9 4e fc ff ff       	jmp    c0009e3a <kernel_main+0x19>

c000a1ec <Phys::allocateDMA(unsigned long)>:
c000a1ec:	55                   	push   ebp
c000a1ed:	31 ed                	xor    ebp,ebp
c000a1ef:	57                   	push   edi
c000a1f0:	56                   	push   esi
c000a1f1:	53                   	push   ebx
c000a1f2:	31 db                	xor    ebx,ebx
c000a1f4:	83 ec 28             	sub    esp,0x28
c000a1f7:	68 3b 48 02 c0       	push   0xc002483b
c000a1fc:	e8 46 2e 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a201:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a205:	83 c4 10             	add    esp,0x10
c000a208:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a20e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a216:	c1 ef 0c             	shr    edi,0xc
c000a219:	31 c0                	xor    eax,eax
c000a21b:	eb 19                	jmp    c000a236 <Phys::allocateDMA(unsigned long)+0x4a>
c000a21d:	85 c0                	test   eax,eax
c000a21f:	75 06                	jne    c000a227 <Phys::allocateDMA(unsigned long)+0x3b>
c000a221:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a225:	89 dd                	mov    ebp,ebx
c000a227:	8d 70 01             	lea    esi,[eax+0x1]
c000a22a:	39 f7                	cmp    edi,esi
c000a22c:	74 3f                	je     c000a26d <Phys::allocateDMA(unsigned long)+0x81>
c000a22e:	89 f0                	mov    eax,esi
c000a230:	43                   	inc    ebx
c000a231:	83 fb 0f             	cmp    ebx,0xf
c000a234:	7f 11                	jg     c000a247 <Phys::allocateDMA(unsigned long)+0x5b>
c000a236:	80 bb 5c 89 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd76a4],0x0
c000a23d:	74 de                	je     c000a21d <Phys::allocateDMA(unsigned long)+0x31>
c000a23f:	31 c0                	xor    eax,eax
c000a241:	43                   	inc    ebx
c000a242:	83 fb 0f             	cmp    ebx,0xf
c000a245:	7e ef                	jle    c000a236 <Phys::allocateDMA(unsigned long)+0x4a>
c000a247:	83 ec 0c             	sub    esp,0xc
c000a24a:	68 6b 48 02 c0       	push   0xc002486b
c000a24f:	e8 f3 2d 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a254:	c7 04 24 28 49 02 c0 	mov    DWORD PTR [esp],0xc0024928
c000a25b:	e8 65 ae 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000a260:	83 c4 10             	add    esp,0x10
c000a263:	31 c0                	xor    eax,eax
c000a265:	83 c4 1c             	add    esp,0x1c
c000a268:	5b                   	pop    ebx
c000a269:	5e                   	pop    esi
c000a26a:	5f                   	pop    edi
c000a26b:	5d                   	pop    ebp
c000a26c:	c3                   	ret    
c000a26d:	89 e9                	mov    ecx,ebp
c000a26f:	c1 f9 04             	sar    ecx,0x4
c000a272:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a276:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a27a:	89 ca                	mov    edx,ecx
c000a27c:	4a                   	dec    edx
c000a27d:	79 03                	jns    c000a282 <Phys::allocateDMA(unsigned long)+0x96>
c000a27f:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a282:	c1 fa 04             	sar    edx,0x4
c000a285:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a289:	74 08                	je     c000a293 <Phys::allocateDMA(unsigned long)+0xa7>
c000a28b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a28f:	31 c0                	xor    eax,eax
c000a291:	eb ae                	jmp    c000a241 <Phys::allocateDMA(unsigned long)+0x55>
c000a293:	85 f6                	test   esi,esi
c000a295:	74 15                	je     c000a2ac <Phys::allocateDMA(unsigned long)+0xc0>
c000a297:	8d 95 5c 89 02 c0    	lea    edx,[ebp-0x3ffd76a4]
c000a29d:	8d 84 05 5d 89 02 c0 	lea    eax,[ebp+eax*1-0x3ffd76a3]
c000a2a4:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a2a7:	42                   	inc    edx
c000a2a8:	39 d0                	cmp    eax,edx
c000a2aa:	75 f8                	jne    c000a2a4 <Phys::allocateDMA(unsigned long)+0xb8>
c000a2ac:	83 ec 0c             	sub    esp,0xc
c000a2af:	01 3d 54 89 02 c0    	add    DWORD PTR ds:0xc0028954,edi
c000a2b5:	68 54 48 02 c0       	push   0xc0024854
c000a2ba:	e8 88 2d 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a2bf:	83 c4 10             	add    esp,0x10
c000a2c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2c6:	85 c0                	test   eax,eax
c000a2c8:	74 23                	je     c000a2ed <Phys::allocateDMA(unsigned long)+0x101>
c000a2ca:	83 ec 0c             	sub    esp,0xc
c000a2cd:	68 de 77 02 c0       	push   0xc00277de
c000a2d2:	e8 70 2d 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a2d7:	c7 04 24 28 49 02 c0 	mov    DWORD PTR [esp],0xc0024928
c000a2de:	e8 e2 ad 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 f0                	mov    eax,esi
c000a2e8:	e9 43 ff ff ff       	jmp    c000a230 <Phys::allocateDMA(unsigned long)+0x44>
c000a2ed:	c1 e5 0c             	shl    ebp,0xc
c000a2f0:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a2f6:	e9 6a ff ff ff       	jmp    c000a265 <Phys::allocateDMA(unsigned long)+0x79>

c000a2fb <Phys::freeDMA(unsigned long, unsigned long)>:
c000a2fb:	83 ec 18             	sub    esp,0x18
c000a2fe:	68 6f 48 02 c0       	push   0xc002486f
c000a303:	e8 3f 2d 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a308:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a30c:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a316:	c1 ea 0c             	shr    edx,0xc
c000a319:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a31e:	29 15 54 89 02 c0    	sub    DWORD PTR ds:0xc0028954,edx
c000a324:	c1 e8 0c             	shr    eax,0xc
c000a327:	83 c4 10             	add    esp,0x10
c000a32a:	85 d2                	test   edx,edx
c000a32c:	74 0f                	je     c000a33d <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a32e:	05 5c 89 02 c0       	add    eax,0xc002895c
c000a333:	01 c2                	add    edx,eax
c000a335:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a338:	40                   	inc    eax
c000a339:	39 d0                	cmp    eax,edx
c000a33b:	75 f8                	jne    c000a335 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a33d:	83 c4 0c             	add    esp,0xc
c000a340:	c3                   	ret    

c000a341 <Phys::setPageState(unsigned long, bool)>:
c000a341:	56                   	push   esi
c000a342:	ba 01 00 00 00       	mov    edx,0x1
c000a347:	53                   	push   ebx
c000a348:	8b 35 e4 7c 02 c0    	mov    esi,DWORD PTR ds:0xc0027ce4
c000a34e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a356:	89 c8                	mov    eax,ecx
c000a358:	83 e1 07             	and    ecx,0x7
c000a35b:	c1 e8 03             	shr    eax,0x3
c000a35e:	d3 e3                	shl    ebx,cl
c000a360:	01 c6                	add    esi,eax
c000a362:	d3 e2                	shl    edx,cl
c000a364:	f7 d2                	not    edx
c000a366:	20 16                	and    BYTE PTR [esi],dl
c000a368:	03 05 e4 7c 02 c0    	add    eax,DWORD PTR ds:0xc0027ce4
c000a36e:	08 18                	or     BYTE PTR [eax],bl
c000a370:	5b                   	pop    ebx
c000a371:	5e                   	pop    esi
c000a372:	c3                   	ret    

c000a373 <Phys::getPageState(unsigned long)>:
c000a373:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a377:	8b 15 e4 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027ce4
c000a37d:	89 c8                	mov    eax,ecx
c000a37f:	83 e1 07             	and    ecx,0x7
c000a382:	c1 e8 03             	shr    eax,0x3
c000a385:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a389:	d3 f8                	sar    eax,cl
c000a38b:	83 e0 01             	and    eax,0x1
c000a38e:	c3                   	ret    

c000a38f <Phys::freePage(unsigned long)>:
c000a38f:	53                   	push   ebx
c000a390:	83 ec 10             	sub    esp,0x10
c000a393:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a397:	53                   	push   ebx
c000a398:	68 85 48 02 c0       	push   0xc0024885
c000a39d:	e8 a5 2c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a3a2:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	3d ff ff 00 00       	cmp    eax,0xffff
c000a3b0:	76 3d                	jbe    c000a3ef <Phys::freePage(unsigned long)+0x60>
c000a3b2:	83 ec 0c             	sub    esp,0xc
c000a3b5:	c1 eb 0c             	shr    ebx,0xc
c000a3b8:	53                   	push   ebx
c000a3b9:	e8 b5 ff ff ff       	call   c000a373 <Phys::getPageState(unsigned long)>
c000a3be:	83 c4 10             	add    esp,0x10
c000a3c1:	84 c0                	test   al,al
c000a3c3:	74 19                	je     c000a3de <Phys::freePage(unsigned long)+0x4f>
c000a3c5:	83 ec 08             	sub    esp,0x8
c000a3c8:	ff 0d 54 89 02 c0    	dec    DWORD PTR ds:0xc0028954
c000a3ce:	6a 00                	push   0x0
c000a3d0:	53                   	push   ebx
c000a3d1:	e8 6b ff ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a3d6:	83 c4 10             	add    esp,0x10
c000a3d9:	83 c4 08             	add    esp,0x8
c000a3dc:	5b                   	pop    ebx
c000a3dd:	c3                   	ret    
c000a3de:	c7 44 24 10 af 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc00248af
c000a3e6:	83 c4 08             	add    esp,0x8
c000a3e9:	5b                   	pop    ebx
c000a3ea:	e9 d6 ac 00 00       	jmp    c00150c5 <Krnl::panic(char const*)>
c000a3ef:	83 ec 08             	sub    esp,0x8
c000a3f2:	53                   	push   ebx
c000a3f3:	68 98 48 02 c0       	push   0xc0024898
c000a3f8:	e8 4a 2c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a3fd:	58                   	pop    eax
c000a3fe:	5a                   	pop    edx
c000a3ff:	68 00 10 00 00       	push   0x1000
c000a404:	53                   	push   ebx
c000a405:	e8 f1 fe ff ff       	call   c000a2fb <Phys::freeDMA(unsigned long, unsigned long)>
c000a40a:	83 c4 10             	add    esp,0x10
c000a40d:	83 c4 08             	add    esp,0x8
c000a410:	5b                   	pop    ebx
c000a411:	c3                   	ret    

c000a412 <Phys::allocatePage()>:
c000a412:	56                   	push   esi
c000a413:	53                   	push   ebx
c000a414:	83 ec 14             	sub    esp,0x14
c000a417:	8b 35 48 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028948
c000a41d:	89 f3                	mov    ebx,esi
c000a41f:	eb 0a                	jmp    c000a42b <Phys::allocatePage()+0x19>
c000a421:	89 1d 48 89 02 c0    	mov    DWORD PTR ds:0xc0028948,ebx
c000a427:	39 de                	cmp    esi,ebx
c000a429:	74 24                	je     c000a44f <Phys::allocatePage()+0x3d>
c000a42b:	53                   	push   ebx
c000a42c:	e8 42 ff ff ff       	call   c000a373 <Phys::getPageState(unsigned long)>
c000a431:	5a                   	pop    edx
c000a432:	84 c0                	test   al,al
c000a434:	74 69                	je     c000a49f <Phys::allocatePage()+0x8d>
c000a436:	43                   	inc    ebx
c000a437:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a43d:	75 e2                	jne    c000a421 <Phys::allocatePage()+0xf>
c000a43f:	31 db                	xor    ebx,ebx
c000a441:	c7 05 48 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028948,0x0
c000a44b:	39 de                	cmp    esi,ebx
c000a44d:	75 dc                	jne    c000a42b <Phys::allocatePage()+0x19>
c000a44f:	83 ec 0c             	sub    esp,0xc
c000a452:	80 35 6c 89 02 c0 01 	xor    BYTE PTR ds:0xc002896c,0x1
c000a459:	68 50 49 02 c0       	push   0xc0024950
c000a45e:	e8 e4 2b 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a463:	58                   	pop    eax
c000a464:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a469:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a46c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a472:	e8 5f 28 00 00       	call   c000ccd6 <VAS::scanForEviction()>
c000a477:	83 c4 10             	add    esp,0x10
c000a47a:	85 c0                	test   eax,eax
c000a47c:	75 62                	jne    c000a4e0 <Phys::allocatePage()+0xce>
c000a47e:	83 ec 0c             	sub    esp,0xc
c000a481:	68 74 49 02 c0       	push   0xc0024974
c000a486:	e8 3a ac 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000a48b:	83 c4 10             	add    esp,0x10
c000a48e:	8b 1d 48 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028948
c000a494:	53                   	push   ebx
c000a495:	e8 d9 fe ff ff       	call   c000a373 <Phys::getPageState(unsigned long)>
c000a49a:	5a                   	pop    edx
c000a49b:	84 c0                	test   al,al
c000a49d:	75 97                	jne    c000a436 <Phys::allocatePage()+0x24>
c000a49f:	6a 01                	push   0x1
c000a4a1:	53                   	push   ebx
c000a4a2:	e8 9a fe ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a4a7:	5a                   	pop    edx
c000a4a8:	a1 54 89 02 c0       	mov    eax,ds:0xc0028954
c000a4ad:	59                   	pop    ecx
c000a4ae:	40                   	inc    eax
c000a4af:	8b 15 48 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028948
c000a4b5:	a3 54 89 02 c0       	mov    ds:0xc0028954,eax
c000a4ba:	c1 e2 0c             	shl    edx,0xc
c000a4bd:	52                   	push   edx
c000a4be:	ff 35 58 89 02 c0    	push   DWORD PTR ds:0xc0028958
c000a4c4:	50                   	push   eax
c000a4c5:	68 c5 48 02 c0       	push   0xc00248c5
c000a4ca:	e8 78 2b 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a4cf:	a1 48 89 02 c0       	mov    eax,ds:0xc0028948
c000a4d4:	83 c4 10             	add    esp,0x10
c000a4d7:	c1 e0 0c             	shl    eax,0xc
c000a4da:	83 c4 14             	add    esp,0x14
c000a4dd:	5b                   	pop    ebx
c000a4de:	5e                   	pop    esi
c000a4df:	c3                   	ret    
c000a4e0:	83 ec 08             	sub    esp,0x8
c000a4e3:	89 c2                	mov    edx,eax
c000a4e5:	6a 01                	push   0x1
c000a4e7:	c1 ea 0c             	shr    edx,0xc
c000a4ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4ee:	52                   	push   edx
c000a4ef:	e8 4d fe ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a4f4:	83 c4 10             	add    esp,0x10
c000a4f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4fb:	eb dd                	jmp    c000a4da <Phys::allocatePage()+0xc8>

c000a4fd <Phys::allocateContiguousPages(int)>:
c000a4fd:	57                   	push   edi
c000a4fe:	56                   	push   esi
c000a4ff:	53                   	push   ebx
c000a500:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a504:	fa                   	cli    
c000a505:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c000a50b:	31 db                	xor    ebx,ebx
c000a50d:	85 db                	test   ebx,ebx
c000a50f:	75 11                	jne    c000a522 <Phys::allocateContiguousPages(int)+0x25>
c000a511:	e8 fc fe ff ff       	call   c000a412 <Phys::allocatePage()>
c000a516:	83 fe 01             	cmp    esi,0x1
c000a519:	89 c7                	mov    edi,eax
c000a51b:	74 21                	je     c000a53e <Phys::allocateContiguousPages(int)+0x41>
c000a51d:	bb 01 00 00 00       	mov    ebx,0x1
c000a522:	e8 eb fe ff ff       	call   c000a412 <Phys::allocatePage()>
c000a527:	89 da                	mov    edx,ebx
c000a529:	c1 e2 0c             	shl    edx,0xc
c000a52c:	01 fa                	add    edx,edi
c000a52e:	39 c2                	cmp    edx,eax
c000a530:	74 20                	je     c000a552 <Phys::allocateContiguousPages(int)+0x55>
c000a532:	bb 01 00 00 00       	mov    ebx,0x1
c000a537:	89 c7                	mov    edi,eax
c000a539:	83 fe 01             	cmp    esi,0x1
c000a53c:	75 e4                	jne    c000a522 <Phys::allocateContiguousPages(int)+0x25>
c000a53e:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000a543:	48                   	dec    eax
c000a544:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000a549:	75 01                	jne    c000a54c <Phys::allocateContiguousPages(int)+0x4f>
c000a54b:	fb                   	sti    
c000a54c:	89 f8                	mov    eax,edi
c000a54e:	5b                   	pop    ebx
c000a54f:	5e                   	pop    esi
c000a550:	5f                   	pop    edi
c000a551:	c3                   	ret    
c000a552:	43                   	inc    ebx
c000a553:	39 f3                	cmp    ebx,esi
c000a555:	75 b6                	jne    c000a50d <Phys::allocateContiguousPages(int)+0x10>
c000a557:	eb e5                	jmp    c000a53e <Phys::allocateContiguousPages(int)+0x41>

c000a559 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a559:	56                   	push   esi
c000a55a:	53                   	push   ebx
c000a55b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a55f:	39 1d 4c 89 02 c0    	cmp    DWORD PTR ds:0xc002894c,ebx
c000a565:	73 06                	jae    c000a56d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a567:	89 1d 4c 89 02 c0    	mov    DWORD PTR ds:0xc002894c,ebx
c000a56d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a571:	c1 eb 0c             	shr    ebx,0xc
c000a574:	c1 e8 0c             	shr    eax,0xc
c000a577:	39 d8                	cmp    eax,ebx
c000a579:	73 13                	jae    c000a58e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a57b:	6a 00                	push   0x0
c000a57d:	8d 70 01             	lea    esi,[eax+0x1]
c000a580:	50                   	push   eax
c000a581:	e8 bb fd ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a586:	5a                   	pop    edx
c000a587:	89 f0                	mov    eax,esi
c000a589:	59                   	pop    ecx
c000a58a:	39 f3                	cmp    ebx,esi
c000a58c:	75 ed                	jne    c000a57b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a58e:	5b                   	pop    ebx
c000a58f:	5e                   	pop    esi
c000a590:	c3                   	ret    

c000a591 <Phys::physicalMemorySetup(unsigned int)>:
c000a591:	55                   	push   ebp
c000a592:	57                   	push   edi
c000a593:	56                   	push   esi
c000a594:	53                   	push   ebx
c000a595:	31 db                	xor    ebx,ebx
c000a597:	83 ec 40             	sub    esp,0x40
c000a59a:	6a 10                	push   0x10
c000a59c:	6a 00                	push   0x0
c000a59e:	68 5c 89 02 c0       	push   0xc002895c
c000a5a3:	e8 dc 60 ff ff       	call   c0000684 <memset>
c000a5a8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a5ac:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a5b1:	05 00 10 00 00       	add    eax,0x1000
c000a5b6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5ba:	5a                   	pop    edx
c000a5bb:	59                   	pop    ecx
c000a5bc:	50                   	push   eax
c000a5bd:	68 e3 48 02 c0       	push   0xc00248e3
c000a5c2:	e8 80 2a 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a5c7:	83 c4 10             	add    esp,0x10
c000a5ca:	83 ec 08             	sub    esp,0x8
c000a5cd:	6a 01                	push   0x1
c000a5cf:	53                   	push   ebx
c000a5d0:	43                   	inc    ebx
c000a5d1:	e8 6b fd ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a5d6:	83 c4 10             	add    esp,0x10
c000a5d9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a5df:	75 e9                	jne    c000a5ca <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a5e1:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a5e8:	66 85 c0             	test   ax,ax
c000a5eb:	0f 84 8e 01 00 00    	je     c000a77f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a5f1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a5f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a5fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a601:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a606:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a60a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a612:	eb 15                	jmp    c000a629 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a614:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a618:	83 c3 18             	add    ebx,0x18
c000a61b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a61f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a623:	0f 84 66 01 00 00    	je     c000a78f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a629:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a62c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a62f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a632:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a636:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a63a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a63c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a63f:	01 f0                	add    eax,esi
c000a641:	55                   	push   ebp
c000a642:	11 fa                	adc    edx,edi
c000a644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a648:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a64c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a650:	56                   	push   esi
c000a651:	68 a4 49 02 c0       	push   0xc00249a4
c000a656:	e8 ec 29 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a65b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a65f:	83 c4 10             	add    esp,0x10
c000a662:	09 f8                	or     eax,edi
c000a664:	0f 85 25 01 00 00    	jne    c000a78f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a66a:	4d                   	dec    ebp
c000a66b:	75 a7                	jne    c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a66d:	ba 00 00 08 00       	mov    edx,0x80000
c000a672:	89 c1                	mov    ecx,eax
c000a674:	39 f2                	cmp    edx,esi
c000a676:	19 f9                	sbb    ecx,edi
c000a678:	0f 82 a7 00 00 00    	jb     c000a725 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a67e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a682:	89 c1                	mov    ecx,eax
c000a684:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a688:	0f 83 97 00 00 00    	jae    c000a725 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a68e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a693:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a697:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a69b:	39 fa                	cmp    edx,edi
c000a69d:	19 e8                	sbb    eax,ebp
c000a69f:	0f 82 a5 01 00 00    	jb     c000a84a <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a6a5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a6a9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a6ad:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a6b3:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a6b8:	83 d5 ff             	adc    ebp,0xffffffff
c000a6bb:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a6bf:	31 c0                	xor    eax,eax
c000a6c1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a6c5:	39 fa                	cmp    edx,edi
c000a6c7:	89 c1                	mov    ecx,eax
c000a6c9:	19 e9                	sbb    ecx,ebp
c000a6cb:	0f 83 43 ff ff ff    	jae    c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6d1:	be 00 00 08 00       	mov    esi,0x80000
c000a6d6:	57                   	push   edi
c000a6d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a6db:	57                   	push   edi
c000a6dc:	56                   	push   esi
c000a6dd:	68 c8 49 02 c0       	push   0xc00249c8
c000a6e2:	e8 60 29 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a6e7:	5d                   	pop    ebp
c000a6e8:	58                   	pop    eax
c000a6e9:	57                   	push   edi
c000a6ea:	56                   	push   esi
c000a6eb:	e8 69 fe ff ff       	call   c000a559 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a6f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a6f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6f8:	83 c4 0c             	add    esp,0xc
c000a6fb:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a6ff:	03 05 58 89 02 c0    	add    eax,DWORD PTR ds:0xc0028958
c000a705:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a70c:	a3 58 89 02 c0       	mov    ds:0xc0028958,eax
c000a711:	52                   	push   edx
c000a712:	50                   	push   eax
c000a713:	68 09 49 02 c0       	push   0xc0024909
c000a718:	e8 2a 29 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000a71d:	83 c4 10             	add    esp,0x10
c000a720:	e9 ef fe ff ff       	jmp    c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a725:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a729:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a72d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a731:	39 ea                	cmp    edx,ebp
c000a733:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a737:	0f 82 d7 fe ff ff    	jb     c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a73d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a742:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a746:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a74a:	0f 83 c4 fe ff ff    	jae    c000a614 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a750:	39 ee                	cmp    esi,ebp
c000a752:	89 f8                	mov    eax,edi
c000a754:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a758:	0f 83 78 ff ff ff    	jae    c000a6d6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a75e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a762:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a766:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a76a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a76e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a772:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a776:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a77a:	e9 57 ff ff ff       	jmp    c000a6d6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a77f:	83 ec 0c             	sub    esp,0xc
c000a782:	68 fb 48 02 c0       	push   0xc00248fb
c000a787:	e8 39 a9 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000a78c:	83 c4 10             	add    esp,0x10
c000a78f:	83 ec 08             	sub    esp,0x8
c000a792:	6a 00                	push   0x0
c000a794:	6a 05                	push   0x5
c000a796:	e8 a6 fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a79b:	58                   	pop    eax
c000a79c:	5a                   	pop    edx
c000a79d:	6a 00                	push   0x0
c000a79f:	6a 06                	push   0x6
c000a7a1:	e8 9b fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a7a6:	59                   	pop    ecx
c000a7a7:	5b                   	pop    ebx
c000a7a8:	bb 60 00 00 00       	mov    ebx,0x60
c000a7ad:	6a 00                	push   0x0
c000a7af:	6a 07                	push   0x7
c000a7b1:	e8 8b fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a7b6:	83 05 58 89 02 c0 03 	add    DWORD PTR ds:0xc0028958,0x3
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 ec 08             	sub    esp,0x8
c000a7c3:	6a 00                	push   0x0
c000a7c5:	53                   	push   ebx
c000a7c6:	43                   	inc    ebx
c000a7c7:	e8 75 fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a7cc:	83 c4 10             	add    esp,0x10
c000a7cf:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a7d5:	75 e9                	jne    c000a7c0 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a7d7:	a1 58 89 02 c0       	mov    eax,ds:0xc0028958
c000a7dc:	bb 40 01 00 00       	mov    ebx,0x140
c000a7e1:	83 c0 20             	add    eax,0x20
c000a7e4:	a3 58 89 02 c0       	mov    ds:0xc0028958,eax
c000a7e9:	eb 22                	jmp    c000a80d <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a7eb:	83 ec 08             	sub    esp,0x8
c000a7ee:	6a 00                	push   0x0
c000a7f0:	53                   	push   ebx
c000a7f1:	43                   	inc    ebx
c000a7f2:	e8 4a fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a7f7:	a1 58 89 02 c0       	mov    eax,ds:0xc0028958
c000a7fc:	83 c4 10             	add    esp,0x10
c000a7ff:	40                   	inc    eax
c000a800:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a806:	a3 58 89 02 c0       	mov    ds:0xc0028958,eax
c000a80b:	74 07                	je     c000a814 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a80d:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a812:	7e d7                	jle    c000a7eb <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a814:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a819:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a81e:	7f 22                	jg     c000a842 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a820:	83 ec 08             	sub    esp,0x8
c000a823:	6a 00                	push   0x0
c000a825:	53                   	push   ebx
c000a826:	43                   	inc    ebx
c000a827:	e8 15 fb ff ff       	call   c000a341 <Phys::setPageState(unsigned long, bool)>
c000a82c:	a1 58 89 02 c0       	mov    eax,ds:0xc0028958
c000a831:	83 c4 10             	add    esp,0x10
c000a834:	40                   	inc    eax
c000a835:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a83b:	a3 58 89 02 c0       	mov    ds:0xc0028958,eax
c000a840:	75 d7                	jne    c000a819 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a842:	83 c4 3c             	add    esp,0x3c
c000a845:	5b                   	pop    ebx
c000a846:	5e                   	pop    esi
c000a847:	5f                   	pop    edi
c000a848:	5d                   	pop    ebp
c000a849:	c3                   	ret    
c000a84a:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a852:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a85a:	e9 46 fe ff ff       	jmp    c000a6a5 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a85f:	90                   	nop

c000a860 <Pipe::isAtty()>:
c000a860:	31 c0                	xor    eax,eax
c000a862:	c3                   	ret    
c000a863:	90                   	nop

c000a864 <Pipe::~Pipe()>:
c000a864:	83 ec 0c             	sub    esp,0xc
c000a867:	ba 34 4a 02 c0       	mov    edx,0xc0024a34
c000a86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a870:	89 10                	mov    DWORD PTR [eax],edx
c000a872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a876:	83 ec 0c             	sub    esp,0xc
c000a879:	50                   	push   eax
c000a87a:	e8 41 12 00 00       	call   c000bac0 <UnixFile::~UnixFile()>
c000a87f:	83 c4 10             	add    esp,0x10
c000a882:	90                   	nop
c000a883:	83 c4 0c             	add    esp,0xc
c000a886:	c3                   	ret    
c000a887:	90                   	nop

c000a888 <Pipe::~Pipe()>:
c000a888:	83 ec 0c             	sub    esp,0xc
c000a88b:	83 ec 0c             	sub    esp,0xc
c000a88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a892:	e8 cd ff ff ff       	call   c000a864 <Pipe::~Pipe()>
c000a897:	83 c4 10             	add    esp,0x10
c000a89a:	83 ec 08             	sub    esp,0x8
c000a89d:	6a 20                	push   0x20
c000a89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8a3:	e8 be 26 00 00       	call   c000cf66 <operator delete(void*, unsigned long)>
c000a8a8:	83 c4 10             	add    esp,0x10
c000a8ab:	83 c4 0c             	add    esp,0xc
c000a8ae:	c3                   	ret    
c000a8af:	90                   	nop

c000a8b0 <Pipe::read(unsigned long long, void*, int*)>:
c000a8b0:	55                   	push   ebp
c000a8b1:	57                   	push   edi
c000a8b2:	56                   	push   esi
c000a8b3:	53                   	push   ebx
c000a8b4:	83 ec 1c             	sub    esp,0x1c
c000a8b7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a8bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a8bf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a8c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8c6:	89 c8                	mov    eax,ecx
c000a8c8:	99                   	cdq    
c000a8c9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a8cd:	74 24                	je     c000a8f3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8cf:	39 f9                	cmp    ecx,edi
c000a8d1:	89 d1                	mov    ecx,edx
c000a8d3:	19 f1                	sbb    ecx,esi
c000a8d5:	73 1c                	jae    c000a8f3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8d7:	fa                   	cli    
c000a8d8:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c000a8de:	e8 ed e3 00 00       	call   c0018cd0 <schedule()>
c000a8e3:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000a8e8:	48                   	dec    eax
c000a8e9:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000a8ee:	75 d3                	jne    c000a8c3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a8f0:	fb                   	sti    
c000a8f1:	eb d0                	jmp    c000a8c3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a8f3:	39 f8                	cmp    eax,edi
c000a8f5:	89 d1                	mov    ecx,edx
c000a8f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a8fa:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a8fe:	19 f1                	sbb    ecx,esi
c000a900:	73 07                	jae    c000a909 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a902:	89 04 24             	mov    DWORD PTR [esp],eax
c000a905:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a909:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a90c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a90f:	29 f7                	sub    edi,esi
c000a911:	89 f8                	mov    eax,edi
c000a913:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a917:	99                   	cdq    
c000a918:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a91f:	19 d0                	sbb    eax,edx
c000a921:	73 07                	jae    c000a92a <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a923:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a92a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a92d:	89 ea                	mov    edx,ebp
c000a92f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a933:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a938:	74 0d                	je     c000a947 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a93a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a93d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a941:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a947:	85 d2                	test   edx,edx
c000a949:	74 11                	je     c000a95c <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a94b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a94f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a952:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a956:	89 d1                	mov    ecx,edx
c000a958:	89 c7                	mov    edi,eax
c000a95a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a95c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a95f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a962:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a965:	99                   	cdq    
c000a966:	89 f7                	mov    edi,esi
c000a968:	03 04 24             	add    eax,DWORD PTR [esp]
c000a96b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a96f:	c1 ff 1f             	sar    edi,0x1f
c000a972:	57                   	push   edi
c000a973:	56                   	push   esi
c000a974:	52                   	push   edx
c000a975:	50                   	push   eax
c000a976:	e8 d5 84 01 00       	call   c0022e50 <__umoddi3>
c000a97b:	83 c4 10             	add    esp,0x10
c000a97e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a981:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a986:	75 10                	jne    c000a998 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a988:	83 ec 0c             	sub    esp,0xc
c000a98b:	68 f1 49 02 c0       	push   0xc00249f1
c000a990:	e8 30 a7 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000a995:	83 c4 10             	add    esp,0x10
c000a998:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a99c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a99f:	89 10                	mov    DWORD PTR [eax],edx
c000a9a1:	83 c4 1c             	add    esp,0x1c
c000a9a4:	31 c0                	xor    eax,eax
c000a9a6:	5b                   	pop    ebx
c000a9a7:	5e                   	pop    esi
c000a9a8:	5f                   	pop    edi
c000a9a9:	5d                   	pop    ebp
c000a9aa:	c3                   	ret    
c000a9ab:	90                   	nop

c000a9ac <Pipe::write(unsigned long long, void*, int*)>:
c000a9ac:	55                   	push   ebp
c000a9ad:	57                   	push   edi
c000a9ae:	56                   	push   esi
c000a9af:	53                   	push   ebx
c000a9b0:	83 ec 1c             	sub    esp,0x1c
c000a9b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a9b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9bb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a9be:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a9c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c9:	89 d8                	mov    eax,ebx
c000a9cb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a9ce:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a9d2:	89 d6                	mov    esi,edx
c000a9d4:	89 d7                	mov    edi,edx
c000a9d6:	c1 ff 1f             	sar    edi,0x1f
c000a9d9:	03 34 24             	add    esi,DWORD PTR [esp]
c000a9dc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a9e0:	c1 f8 1f             	sar    eax,0x1f
c000a9e3:	39 f3                	cmp    ebx,esi
c000a9e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9ed:	19 f8                	sbb    eax,edi
c000a9ef:	b8 01 00 00 00       	mov    eax,0x1
c000a9f4:	72 6e                	jb     c000aa64 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a9f6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a9f9:	01 d0                	add    eax,edx
c000a9fb:	99                   	cdq    
c000a9fc:	f7 fb                	idiv   ebx
c000a9fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa02:	29 d3                	sub    ebx,edx
c000aa04:	89 d7                	mov    edi,edx
c000aa06:	89 de                	mov    esi,ebx
c000aa08:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa0b:	c1 fb 1f             	sar    ebx,0x1f
c000aa0e:	39 f2                	cmp    edx,esi
c000aa10:	19 d8                	sbb    eax,ebx
c000aa12:	b8 00 00 00 00       	mov    eax,0x0
c000aa17:	72 04                	jb     c000aa1d <Pipe::write(unsigned long long, void*, int*)+0x71>
c000aa19:	89 d0                	mov    eax,edx
c000aa1b:	29 f0                	sub    eax,esi
c000aa1d:	89 d3                	mov    ebx,edx
c000aa1f:	29 c3                	sub    ebx,eax
c000aa21:	74 0b                	je     c000aa2e <Pipe::write(unsigned long long, void*, int*)+0x82>
c000aa23:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000aa26:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000aa2a:	89 d9                	mov    ecx,ebx
c000aa2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa2e:	85 c0                	test   eax,eax
c000aa30:	74 0d                	je     c000aa3f <Pipe::write(unsigned long long, void*, int*)+0x93>
c000aa32:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000aa36:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000aa39:	89 de                	mov    esi,ebx
c000aa3b:	89 c1                	mov    ecx,eax
c000aa3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa3f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000aa42:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aa47:	75 10                	jne    c000aa59 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000aa49:	83 ec 0c             	sub    esp,0xc
c000aa4c:	68 0d 4a 02 c0       	push   0xc0024a0d
c000aa51:	e8 6f a6 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000aa56:	83 c4 10             	add    esp,0x10
c000aa59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aa5d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa60:	89 08                	mov    DWORD PTR [eax],ecx
c000aa62:	31 c0                	xor    eax,eax
c000aa64:	83 c4 1c             	add    esp,0x1c
c000aa67:	5b                   	pop    ebx
c000aa68:	5e                   	pop    esi
c000aa69:	5f                   	pop    edi
c000aa6a:	5d                   	pop    ebp
c000aa6b:	c3                   	ret    

c000aa6c <Pipe::Pipe(int)>:
c000aa6c:	83 ec 0c             	sub    esp,0xc
c000aa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa73:	83 ec 08             	sub    esp,0x8
c000aa76:	6a 00                	push   0x0
c000aa78:	50                   	push   eax
c000aa79:	e8 60 0e 00 00       	call   c000b8de <UnixFile::UnixFile(int)>
c000aa7e:	83 c4 10             	add    esp,0x10
c000aa81:	ba 34 4a 02 c0       	mov    edx,0xc0024a34
c000aa86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa8a:	89 10                	mov    DWORD PTR [eax],edx
c000aa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aa94:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aa97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000aaad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aab1:	83 ec 0c             	sub    esp,0xc
c000aab4:	50                   	push   eax
c000aab5:	e8 a1 f2 ff ff       	call   c0009d5b <malloc>
c000aaba:	83 c4 10             	add    esp,0x10
c000aabd:	89 c2                	mov    edx,eax
c000aabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aace:	90                   	nop
c000aacf:	83 c4 0c             	add    esp,0xc
c000aad2:	c3                   	ret    
c000aad3:	90                   	nop

c000aad4 <VgaText::isAtty()>:
c000aad4:	b0 01                	mov    al,0x1
c000aad6:	c3                   	ret    
c000aad7:	90                   	nop

c000aad8 <VgaText::~VgaText()>:
c000aad8:	83 ec 0c             	sub    esp,0xc
c000aadb:	ba bc 4a 02 c0       	mov    edx,0xc0024abc
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	89 10                	mov    DWORD PTR [eax],edx
c000aae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaea:	83 ec 0c             	sub    esp,0xc
c000aaed:	50                   	push   eax
c000aaee:	e8 cd 0f 00 00       	call   c000bac0 <UnixFile::~UnixFile()>
c000aaf3:	83 c4 10             	add    esp,0x10
c000aaf6:	90                   	nop
c000aaf7:	83 c4 0c             	add    esp,0xc
c000aafa:	c3                   	ret    
c000aafb:	90                   	nop

c000aafc <VgaText::~VgaText()>:
c000aafc:	83 ec 0c             	sub    esp,0xc
c000aaff:	83 ec 0c             	sub    esp,0xc
c000ab02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab06:	e8 cd ff ff ff       	call   c000aad8 <VgaText::~VgaText()>
c000ab0b:	83 c4 10             	add    esp,0x10
c000ab0e:	83 ec 08             	sub    esp,0x8
c000ab11:	68 b4 01 00 00       	push   0x1b4
c000ab16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab1a:	e8 47 24 00 00       	call   c000cf66 <operator delete(void*, unsigned long)>
c000ab1f:	83 c4 10             	add    esp,0x10
c000ab22:	83 c4 0c             	add    esp,0xc
c000ab25:	c3                   	ret    

c000ab26 <VgaText::read(unsigned long long, void*, int*)>:
c000ab26:	83 ec 10             	sub    esp,0x10
c000ab29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab2d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab35:	e8 5f 59 00 00       	call   c0010499 <readKeyboard(VgaText*, char*, unsigned long)>
c000ab3a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ab3e:	89 02                	mov    DWORD PTR [edx],eax
c000ab40:	31 c0                	xor    eax,eax
c000ab42:	83 c4 1c             	add    esp,0x1c
c000ab45:	c3                   	ret    

c000ab46 <setTerminalScrollLock(bool)>:
c000ab46:	c3                   	ret    

c000ab47 <addToTerminalCycle(VgaText*)>:
c000ab47:	8b 15 a0 89 02 c0    	mov    edx,DWORD PTR ds:0xc00289a0
c000ab4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab51:	85 d2                	test   edx,edx
c000ab53:	75 09                	jne    c000ab5e <addToTerminalCycle(VgaText*)+0x17>
c000ab55:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ab58:	a3 a0 89 02 c0       	mov    ds:0xc00289a0,eax
c000ab5d:	c3                   	ret    
c000ab5e:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ab61:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ab64:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ab67:	c3                   	ret    

c000ab68 <installVgaTextImplementation()>:
c000ab68:	83 ec 10             	sub    esp,0x10
c000ab6b:	6a 20                	push   0x20
c000ab6d:	6a 00                	push   0x0
c000ab6f:	68 80 89 02 c0       	push   0xc0028980
c000ab74:	e8 0b 5b ff ff       	call   c0000684 <memset>
c000ab79:	83 c4 1c             	add    esp,0x1c
c000ab7c:	c3                   	ret    

c000ab7d <scrollTerminalScrollLock(int)>:
c000ab7d:	c3                   	ret    

c000ab7e <VgaText::updateTitle()>:
c000ab7e:	53                   	push   ebx
c000ab7f:	31 c0                	xor    eax,eax
c000ab81:	83 ec 58             	sub    esp,0x58
c000ab84:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ab88:	89 e1                	mov    ecx,esp
c000ab8a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ab8e:	40                   	inc    eax
c000ab8f:	83 f8 50             	cmp    eax,0x50
c000ab92:	75 f6                	jne    c000ab8a <VgaText::updateTitle()+0xc>
c000ab94:	31 c0                	xor    eax,eax
c000ab96:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000ab9d:	84 db                	test   bl,bl
c000ab9f:	74 06                	je     c000aba7 <VgaText::updateTitle()+0x29>
c000aba1:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000aba4:	40                   	inc    eax
c000aba5:	eb ef                	jmp    c000ab96 <VgaText::updateTitle()+0x18>
c000aba7:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000abaa:	85 c0                	test   eax,eax
c000abac:	74 09                	je     c000abb7 <VgaText::updateTitle()+0x39>
c000abae:	53                   	push   ebx
c000abaf:	53                   	push   ebx
c000abb0:	51                   	push   ecx
c000abb1:	52                   	push   edx
c000abb2:	ff d0                	call   eax
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	83 c4 58             	add    esp,0x58
c000abba:	5b                   	pop    ebx
c000abbb:	c3                   	ret    

c000abbc <VgaText::load()>:
c000abbc:	53                   	push   ebx
c000abbd:	31 c0                	xor    eax,eax
c000abbf:	83 ec 58             	sub    esp,0x58
c000abc2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abc6:	89 e2                	mov    edx,esp
c000abc8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000abcc:	40                   	inc    eax
c000abcd:	83 f8 50             	cmp    eax,0x50
c000abd0:	75 f6                	jne    c000abc8 <VgaText::load()+0xc>
c000abd2:	31 c0                	xor    eax,eax
c000abd4:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000abdb:	84 c9                	test   cl,cl
c000abdd:	74 06                	je     c000abe5 <VgaText::load()+0x29>
c000abdf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000abe2:	40                   	inc    eax
c000abe3:	eb ef                	jmp    c000abd4 <VgaText::load()+0x18>
c000abe5:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000abe8:	85 c0                	test   eax,eax
c000abea:	74 09                	je     c000abf5 <VgaText::load()+0x39>
c000abec:	51                   	push   ecx
c000abed:	51                   	push   ecx
c000abee:	52                   	push   edx
c000abef:	53                   	push   ebx
c000abf0:	ff d0                	call   eax
c000abf2:	83 c4 10             	add    esp,0x10
c000abf5:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000abf8:	85 c0                	test   eax,eax
c000abfa:	74 09                	je     c000ac05 <VgaText::load()+0x49>
c000abfc:	83 ec 0c             	sub    esp,0xc
c000abff:	53                   	push   ebx
c000ac00:	ff d0                	call   eax
c000ac02:	83 c4 10             	add    esp,0x10
c000ac05:	83 c4 58             	add    esp,0x58
c000ac08:	5b                   	pop    ebx
c000ac09:	c3                   	ret    

c000ac0a <VgaText::updateCursor()>:
c000ac0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac0e:	39 05 a4 89 02 c0    	cmp    DWORD PTR ds:0xc00289a4,eax
c000ac14:	75 09                	jne    c000ac1f <VgaText::updateCursor()+0x15>
c000ac16:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ac19:	85 c0                	test   eax,eax
c000ac1b:	74 02                	je     c000ac1f <VgaText::updateCursor()+0x15>
c000ac1d:	ff e0                	jmp    eax
c000ac1f:	c3                   	ret    

c000ac20 <VgaText::doANSI_SGR(int)>:
c000ac20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac28:	85 d2                	test   edx,edx
c000ac2a:	75 0b                	jne    c000ac37 <VgaText::doANSI_SGR(int)+0x17>
c000ac2c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ac2f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac32:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ac35:	eb 59                	jmp    c000ac90 <VgaText::doANSI_SGR(int)+0x70>
c000ac37:	83 fa 07             	cmp    edx,0x7
c000ac3a:	75 0b                	jne    c000ac47 <VgaText::doANSI_SGR(int)+0x27>
c000ac3c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000ac3f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000ac42:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000ac45:	eb 49                	jmp    c000ac90 <VgaText::doANSI_SGR(int)+0x70>
c000ac47:	83 fa 1b             	cmp    edx,0x1b
c000ac4a:	74 e0                	je     c000ac2c <VgaText::doANSI_SGR(int)+0xc>
c000ac4c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ac4f:	83 f9 07             	cmp    ecx,0x7
c000ac52:	77 09                	ja     c000ac5d <VgaText::doANSI_SGR(int)+0x3d>
c000ac54:	8b 14 8d 20 7d 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd82e0]
c000ac5b:	eb 20                	jmp    c000ac7d <VgaText::doANSI_SGR(int)+0x5d>
c000ac5d:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ac60:	83 f9 07             	cmp    ecx,0x7
c000ac63:	77 09                	ja     c000ac6e <VgaText::doANSI_SGR(int)+0x4e>
c000ac65:	8b 14 8d 20 7d 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd82e0]
c000ac6c:	eb 22                	jmp    c000ac90 <VgaText::doANSI_SGR(int)+0x70>
c000ac6e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000ac71:	83 f9 07             	cmp    ecx,0x7
c000ac74:	77 0b                	ja     c000ac81 <VgaText::doANSI_SGR(int)+0x61>
c000ac76:	8b 14 95 d8 7b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8428]
c000ac7d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac80:	c3                   	ret    
c000ac81:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ac84:	83 f9 07             	cmp    ecx,0x7
c000ac87:	77 0a                	ja     c000ac93 <VgaText::doANSI_SGR(int)+0x73>
c000ac89:	8b 14 95 b0 7b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8450]
c000ac90:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ac93:	c3                   	ret    

c000ac94 <VgaText::setDefaultBgColour(VgaColour)>:
c000ac94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac9c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ac9f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000aca2:	c3                   	ret    
c000aca3:	90                   	nop

c000aca4 <VgaText::setDefaultFgColour(VgaColour)>:
c000aca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000acaf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000acb2:	c3                   	ret    
c000acb3:	90                   	nop

c000acb4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000acb4:	53                   	push   ebx
c000acb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000acb9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000acbd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acc1:	51                   	push   ecx
c000acc2:	e8 cd ff ff ff       	call   c000ac94 <VgaText::setDefaultBgColour(VgaColour)>
c000acc7:	58                   	pop    eax
c000acc8:	5a                   	pop    edx
c000acc9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000accd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000acd1:	5b                   	pop    ebx
c000acd2:	eb d0                	jmp    c000aca4 <VgaText::setDefaultFgColour(VgaColour)>

c000acd4 <VgaText::setTitleTextColour(VgaColour)>:
c000acd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acdc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000acdf:	e9 9a fe ff ff       	jmp    c000ab7e <VgaText::updateTitle()>

c000ace4 <VgaText::setTitleColour(VgaColour)>:
c000ace4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ace8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000acef:	e9 8a fe ff ff       	jmp    c000ab7e <VgaText::updateTitle()>

c000acf4 <VgaText::setTitle(char*)>:
c000acf4:	53                   	push   ebx
c000acf5:	83 ec 10             	sub    esp,0x10
c000acf8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000acfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad00:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ad06:	50                   	push   eax
c000ad07:	e8 34 5a ff ff       	call   c0000740 <strcpy>
c000ad0c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad10:	83 c4 18             	add    esp,0x18
c000ad13:	5b                   	pop    ebx
c000ad14:	e9 65 fe ff ff       	jmp    c000ab7e <VgaText::updateTitle()>
c000ad19:	90                   	nop

c000ad1a <VgaText::combineColours(unsigned char, unsigned char)>:
c000ad1a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ad1e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ad23:	83 e0 0f             	and    eax,0xf
c000ad26:	c1 e2 04             	shl    edx,0x4
c000ad29:	09 d0                	or     eax,edx
c000ad2b:	c3                   	ret    

c000ad2c <VgaText::scrollScreen()>:
c000ad2c:	55                   	push   ebp
c000ad2d:	b9 01 00 00 00       	mov    ecx,0x1
c000ad32:	57                   	push   edi
c000ad33:	56                   	push   esi
c000ad34:	53                   	push   ebx
c000ad35:	83 ec 0c             	sub    esp,0xc
c000ad38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ad3c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ad42:	31 ff                	xor    edi,edi
c000ad44:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ad47:	83 f9 17             	cmp    ecx,0x17
c000ad4a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000ad4d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000ad54:	75 27                	jne    c000ad7d <VgaText::scrollScreen()+0x51>
c000ad56:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000ad59:	01 f5                	add    ebp,esi
c000ad5b:	f7 c7 01 00 00 00    	test   edi,0x1
c000ad61:	74 16                	je     c000ad79 <VgaText::scrollScreen()+0x4d>
c000ad63:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000ad67:	50                   	push   eax
c000ad68:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000ad6c:	50                   	push   eax
c000ad6d:	e8 a8 ff ff ff       	call   c000ad1a <VgaText::combineColours(unsigned char, unsigned char)>
c000ad72:	5a                   	pop    edx
c000ad73:	5a                   	pop    edx
c000ad74:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000ad77:	eb 04                	jmp    c000ad7d <VgaText::scrollScreen()+0x51>
c000ad79:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000ad7d:	47                   	inc    edi
c000ad7e:	46                   	inc    esi
c000ad7f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ad85:	75 bd                	jne    c000ad44 <VgaText::scrollScreen()+0x18>
c000ad87:	41                   	inc    ecx
c000ad88:	83 f9 18             	cmp    ecx,0x18
c000ad8b:	75 af                	jne    c000ad3c <VgaText::scrollScreen()+0x10>
c000ad8d:	39 1d a4 89 02 c0    	cmp    DWORD PTR ds:0xc00289a4,ebx
c000ad93:	75 1b                	jne    c000adb0 <VgaText::scrollScreen()+0x84>
c000ad95:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ad99:	74 05                	je     c000ada0 <VgaText::scrollScreen()+0x74>
c000ad9b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000ad9e:	eb 10                	jmp    c000adb0 <VgaText::scrollScreen()+0x84>
c000ada0:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000ada3:	85 c0                	test   eax,eax
c000ada5:	74 09                	je     c000adb0 <VgaText::scrollScreen()+0x84>
c000ada7:	83 ec 0c             	sub    esp,0xc
c000adaa:	53                   	push   ebx
c000adab:	ff d0                	call   eax
c000adad:	83 c4 10             	add    esp,0x10
c000adb0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000adb4:	83 c4 0c             	add    esp,0xc
c000adb7:	5b                   	pop    ebx
c000adb8:	5e                   	pop    esi
c000adb9:	5f                   	pop    edi
c000adba:	5d                   	pop    ebp
c000adbb:	e9 4a fe ff ff       	jmp    c000ac0a <VgaText::updateCursor()>

c000adc0 <VgaText::combineCharAndColour(char, unsigned char)>:
c000adc0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000adc5:	c1 e0 08             	shl    eax,0x8
c000adc8:	89 c2                	mov    edx,eax
c000adca:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000adcf:	09 d0                	or     eax,edx
c000add1:	c3                   	ret    

c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000add2:	56                   	push   esi
c000add3:	53                   	push   ebx
c000add4:	51                   	push   ecx
c000add5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000add9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000adde:	50                   	push   eax
c000addf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ade4:	50                   	push   eax
c000ade5:	e8 30 ff ff ff       	call   c000ad1a <VgaText::combineColours(unsigned char, unsigned char)>
c000adea:	5b                   	pop    ebx
c000adeb:	0f b6 c0             	movzx  eax,al
c000adee:	5e                   	pop    esi
c000adef:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000adf4:	50                   	push   eax
c000adf5:	53                   	push   ebx
c000adf6:	e8 c5 ff ff ff       	call   c000adc0 <VgaText::combineCharAndColour(char, unsigned char)>
c000adfb:	5a                   	pop    edx
c000adfc:	5e                   	pop    esi
c000adfd:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ae00:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ae06:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ae0a:	0f b7 d2             	movzx  edx,dx
c000ae0d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ae11:	39 0d a4 89 02 c0    	cmp    DWORD PTR ds:0xc00289a4,ecx
c000ae17:	75 10                	jne    c000ae29 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae19:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ae1c:	85 c0                	test   eax,eax
c000ae1e:	74 09                	je     c000ae29 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae20:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ae24:	5a                   	pop    edx
c000ae25:	5b                   	pop    ebx
c000ae26:	5e                   	pop    esi
c000ae27:	ff e0                	jmp    eax
c000ae29:	58                   	pop    eax
c000ae2a:	5b                   	pop    ebx
c000ae2b:	5e                   	pop    esi
c000ae2c:	c3                   	ret    
c000ae2d:	90                   	nop

c000ae2e <VgaText::getCursorX()>:
c000ae2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae32:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000ae35:	c3                   	ret    

c000ae36 <VgaText::getCursorY()>:
c000ae36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae3a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000ae3d:	c3                   	ret    

c000ae3e <VgaText::setCursor(int, int)>:
c000ae3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae46:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ae49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae4d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ae50:	e9 b5 fd ff ff       	jmp    c000ac0a <VgaText::updateCursor()>

c000ae55 <setActiveTerminal(VgaText*)>:
c000ae55:	53                   	push   ebx
c000ae56:	83 ec 08             	sub    esp,0x8
c000ae59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae5d:	85 db                	test   ebx,ebx
c000ae5f:	75 11                	jne    c000ae72 <setActiveTerminal(VgaText*)+0x1d>
c000ae61:	c7 44 24 10 48 4a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024a48
c000ae69:	83 c4 08             	add    esp,0x8
c000ae6c:	5b                   	pop    ebx
c000ae6d:	e9 53 a2 00 00       	jmp    c00150c5 <Krnl::panic(char const*)>
c000ae72:	a1 a4 89 02 c0       	mov    eax,ds:0xc00289a4
c000ae77:	85 c0                	test   eax,eax
c000ae79:	74 0c                	je     c000ae87 <setActiveTerminal(VgaText*)+0x32>
c000ae7b:	83 ec 0c             	sub    esp,0xc
c000ae7e:	50                   	push   eax
c000ae7f:	e8 86 fd ff ff       	call   c000ac0a <VgaText::updateCursor()>
c000ae84:	83 c4 10             	add    esp,0x10
c000ae87:	89 1d a4 89 02 c0    	mov    DWORD PTR ds:0xc00289a4,ebx
c000ae8d:	51                   	push   ecx
c000ae8e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae91:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae94:	53                   	push   ebx
c000ae95:	e8 a4 ff ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000ae9a:	83 c4 10             	add    esp,0x10
c000ae9d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aea1:	75 07                	jne    c000aeaa <setActiveTerminal(VgaText*)+0x55>
c000aea3:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000aeaa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aeae:	83 c4 08             	add    esp,0x8
c000aeb1:	5b                   	pop    ebx
c000aeb2:	e9 05 fd ff ff       	jmp    c000abbc <VgaText::load()>

c000aeb7 <doTerminalCycle()>:
c000aeb7:	83 ec 18             	sub    esp,0x18
c000aeba:	a1 a0 89 02 c0       	mov    eax,ds:0xc00289a0
c000aebf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000aec2:	50                   	push   eax
c000aec3:	a3 a0 89 02 c0       	mov    ds:0xc00289a0,eax
c000aec8:	e8 88 ff ff ff       	call   c000ae55 <setActiveTerminal(VgaText*)>
c000aecd:	83 c4 1c             	add    esp,0x1c
c000aed0:	c3                   	ret    
c000aed1:	90                   	nop

c000aed2 <VgaText::setCursorX(int)>:
c000aed2:	83 ec 10             	sub    esp,0x10
c000aed5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000aedc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee0:	50                   	push   eax
c000aee1:	e8 58 ff ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000aee6:	83 c4 1c             	add    esp,0x1c
c000aee9:	c3                   	ret    

c000aeea <VgaText::setCursorY(int)>:
c000aeea:	83 ec 10             	sub    esp,0x10
c000aeed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aef1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aef5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000aef8:	50                   	push   eax
c000aef9:	e8 40 ff ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000aefe:	83 c4 1c             	add    esp,0x1c
c000af01:	c3                   	ret    

c000af02 <VgaText::incrementCursor(bool)>:
c000af02:	56                   	push   esi
c000af03:	53                   	push   ebx
c000af04:	51                   	push   ecx
c000af05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af09:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af0d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000af10:	40                   	inc    eax
c000af11:	83 f8 50             	cmp    eax,0x50
c000af14:	74 05                	je     c000af1b <VgaText::incrementCursor(bool)+0x19>
c000af16:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000af19:	eb 24                	jmp    c000af3f <VgaText::incrementCursor(bool)+0x3d>
c000af1b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af1e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af25:	8d 50 01             	lea    edx,[eax+0x1]
c000af28:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af2b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af2e:	75 0f                	jne    c000af3f <VgaText::incrementCursor(bool)+0x3d>
c000af30:	83 ec 0c             	sub    esp,0xc
c000af33:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af36:	53                   	push   ebx
c000af37:	e8 f0 fd ff ff       	call   c000ad2c <VgaText::scrollScreen()>
c000af3c:	83 c4 10             	add    esp,0x10
c000af3f:	89 f0                	mov    eax,esi
c000af41:	84 c0                	test   al,al
c000af43:	74 0c                	je     c000af51 <VgaText::incrementCursor(bool)+0x4f>
c000af45:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af49:	5a                   	pop    edx
c000af4a:	5b                   	pop    ebx
c000af4b:	5e                   	pop    esi
c000af4c:	e9 b9 fc ff ff       	jmp    c000ac0a <VgaText::updateCursor()>
c000af51:	58                   	pop    eax
c000af52:	5b                   	pop    ebx
c000af53:	5e                   	pop    esi
c000af54:	c3                   	ret    
c000af55:	90                   	nop

c000af56 <VgaText::decrementCursor(bool)>:
c000af56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000af5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000af5e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000af61:	85 c0                	test   eax,eax
c000af63:	74 04                	je     c000af69 <VgaText::decrementCursor(bool)+0x13>
c000af65:	48                   	dec    eax
c000af66:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000af69:	84 c9                	test   cl,cl
c000af6b:	74 09                	je     c000af76 <VgaText::decrementCursor(bool)+0x20>
c000af6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000af71:	e9 94 fc ff ff       	jmp    c000ac0a <VgaText::updateCursor()>
c000af76:	c3                   	ret    
c000af77:	90                   	nop

c000af78 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000af78:	53                   	push   ebx
c000af79:	83 ec 08             	sub    esp,0x8
c000af7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af84:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af88:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af8c:	3c 07                	cmp    al,0x7
c000af8e:	75 2a                	jne    c000afba <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000af90:	a1 58 8a 02 c0       	mov    eax,ds:0xc0028a58
c000af95:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000af9d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000afa5:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000afad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afb1:	83 c4 08             	add    esp,0x8
c000afb4:	5b                   	pop    ebx
c000afb5:	e9 d4 2f 00 00       	jmp    c000df8e <Buzzer::beep(int, int, bool)>
c000afba:	3c 0d                	cmp    al,0xd
c000afbc:	75 09                	jne    c000afc7 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000afbe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afc5:	eb 2c                	jmp    c000aff3 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000afc7:	3c 0a                	cmp    al,0xa
c000afc9:	75 31                	jne    c000affc <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000afcb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000afce:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afd5:	8d 50 01             	lea    edx,[eax+0x1]
c000afd8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000afdb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000afde:	75 0f                	jne    c000afef <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000afe6:	53                   	push   ebx
c000afe7:	e8 40 fd ff ff       	call   c000ad2c <VgaText::scrollScreen()>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aff3:	83 c4 08             	add    esp,0x8
c000aff6:	5b                   	pop    ebx
c000aff7:	e9 0e fc ff ff       	jmp    c000ac0a <VgaText::updateCursor()>
c000affc:	3c 08                	cmp    al,0x8
c000affe:	75 25                	jne    c000b025 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000b000:	50                   	push   eax
c000b001:	50                   	push   eax
c000b002:	6a 01                	push   0x1
c000b004:	53                   	push   ebx
c000b005:	e8 4c ff ff ff       	call   c000af56 <VgaText::decrementCursor(bool)>
c000b00a:	5a                   	pop    edx
c000b00b:	59                   	pop    ecx
c000b00c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b00f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b012:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b015:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b018:	6a 20                	push   0x20
c000b01a:	53                   	push   ebx
c000b01b:	e8 b2 fd ff ff       	call   c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b020:	83 c4 28             	add    esp,0x28
c000b023:	5b                   	pop    ebx
c000b024:	c3                   	ret    
c000b025:	83 ec 08             	sub    esp,0x8
c000b028:	0f be c0             	movsx  eax,al
c000b02b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b02e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b031:	51                   	push   ecx
c000b032:	52                   	push   edx
c000b033:	50                   	push   eax
c000b034:	53                   	push   ebx
c000b035:	e8 98 fd ff ff       	call   c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b03a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000b03e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000b046:	83 c4 28             	add    esp,0x28
c000b049:	5b                   	pop    ebx
c000b04a:	e9 b3 fe ff ff       	jmp    c000af02 <VgaText::incrementCursor(bool)>
c000b04f:	90                   	nop

c000b050 <VgaText::doUpdate()>:
c000b050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b054:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000b057:	85 c0                	test   eax,eax
c000b059:	74 02                	je     c000b05d <VgaText::doUpdate()+0xd>
c000b05b:	ff e0                	jmp    eax
c000b05d:	c3                   	ret    

c000b05e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000b05e:	55                   	push   ebp
c000b05f:	31 ed                	xor    ebp,ebp
c000b061:	57                   	push   edi
c000b062:	56                   	push   esi
c000b063:	53                   	push   ebx
c000b064:	83 ec 1c             	sub    esp,0x1c
c000b067:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b06b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b070:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b077:	50                   	push   eax
c000b078:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b07d:	50                   	push   eax
c000b07e:	e8 97 fc ff ff       	call   c000ad1a <VgaText::combineColours(unsigned char, unsigned char)>
c000b083:	59                   	pop    ecx
c000b084:	0f b6 c0             	movzx  eax,al
c000b087:	5e                   	pop    esi
c000b088:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b08d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b091:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b094:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b098:	0f b7 f6             	movzx  esi,si
c000b09b:	01 f6                	add    esi,esi
c000b09d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0a0:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b0a3:	84 c0                	test   al,al
c000b0a5:	0f 84 fd 00 00 00    	je     c000b1a8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b0ab:	3c 0d                	cmp    al,0xd
c000b0ad:	75 0c                	jne    c000b0bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b0af:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b0b6:	e9 e7 00 00 00       	jmp    c000b1a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b0bb:	3c 0a                	cmp    al,0xa
c000b0bd:	75 47                	jne    c000b106 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b0bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b0c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b0c9:	8d 48 01             	lea    ecx,[eax+0x1]
c000b0cc:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b0cf:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b0d2:	75 0f                	jne    c000b0e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b0d4:	83 ec 0c             	sub    esp,0xc
c000b0d7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b0da:	53                   	push   ebx
c000b0db:	e8 4c fc ff ff       	call   c000ad2c <VgaText::scrollScreen()>
c000b0e0:	83 c4 10             	add    esp,0x10
c000b0e3:	83 ec 0c             	sub    esp,0xc
c000b0e6:	31 ed                	xor    ebp,ebp
c000b0e8:	53                   	push   ebx
c000b0e9:	e8 1c fb ff ff       	call   c000ac0a <VgaText::updateCursor()>
c000b0ee:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0f3:	83 c4 10             	add    esp,0x10
c000b0f6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b0f9:	0f b7 f6             	movzx  esi,si
c000b0fc:	01 f6                	add    esi,esi
c000b0fe:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b101:	e9 9c 00 00 00       	jmp    c000b1a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b106:	3c 08                	cmp    al,0x8
c000b108:	75 35                	jne    c000b13f <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b10a:	56                   	push   esi
c000b10b:	56                   	push   esi
c000b10c:	6a 01                	push   0x1
c000b10e:	53                   	push   ebx
c000b10f:	e8 42 fe ff ff       	call   c000af56 <VgaText::decrementCursor(bool)>
c000b114:	58                   	pop    eax
c000b115:	5a                   	pop    edx
c000b116:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b119:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b11c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b11f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b122:	6a 20                	push   0x20
c000b124:	53                   	push   ebx
c000b125:	e8 a8 fc ff ff       	call   c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b12a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b135:	0f b7 f6             	movzx  esi,si
c000b138:	01 f6                	add    esi,esi
c000b13a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b13d:	eb 63                	jmp    c000b1a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b13f:	51                   	push   ecx
c000b140:	51                   	push   ecx
c000b141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b145:	50                   	push   eax
c000b146:	e8 75 fc ff ff       	call   c000adc0 <VgaText::combineCharAndColour(char, unsigned char)>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	66 89 06             	mov    WORD PTR [esi],ax
c000b151:	39 1d a4 89 02 c0    	cmp    DWORD PTR ds:0xc00289a4,ebx
c000b157:	75 21                	jne    c000b17a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b159:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b15c:	85 c0                	test   eax,eax
c000b15e:	74 1a                	je     c000b17a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b160:	52                   	push   edx
c000b161:	52                   	push   edx
c000b162:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b165:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b168:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b16c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b170:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b173:	51                   	push   ecx
c000b174:	53                   	push   ebx
c000b175:	ff d0                	call   eax
c000b177:	83 c4 20             	add    esp,0x20
c000b17a:	83 c6 02             	add    esi,0x2
c000b17d:	50                   	push   eax
c000b17e:	50                   	push   eax
c000b17f:	6a 00                	push   0x0
c000b181:	53                   	push   ebx
c000b182:	e8 7b fd ff ff       	call   c000af02 <VgaText::incrementCursor(bool)>
c000b187:	83 c4 10             	add    esp,0x10
c000b18a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b18e:	75 0d                	jne    c000b19d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b190:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b195:	0f b7 f6             	movzx  esi,si
c000b198:	01 f6                	add    esi,esi
c000b19a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b19d:	bd 01 00 00 00       	mov    ebp,0x1
c000b1a2:	47                   	inc    edi
c000b1a3:	e9 f8 fe ff ff       	jmp    c000b0a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b1a8:	83 ec 0c             	sub    esp,0xc
c000b1ab:	53                   	push   ebx
c000b1ac:	e8 59 fa ff ff       	call   c000ac0a <VgaText::updateCursor()>
c000b1b1:	83 c4 10             	add    esp,0x10
c000b1b4:	89 e8                	mov    eax,ebp
c000b1b6:	84 c0                	test   al,al
c000b1b8:	74 0c                	je     c000b1c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b1ba:	83 ec 0c             	sub    esp,0xc
c000b1bd:	53                   	push   ebx
c000b1be:	e8 8d fe ff ff       	call   c000b050 <VgaText::doUpdate()>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b1cd:	83 c4 1c             	add    esp,0x1c
c000b1d0:	5b                   	pop    ebx
c000b1d1:	5e                   	pop    esi
c000b1d2:	5f                   	pop    edi
c000b1d3:	5d                   	pop    ebp
c000b1d4:	c3                   	ret    
c000b1d5:	90                   	nop

c000b1d6 <VgaText::clearScreen()>:
c000b1d6:	57                   	push   edi
c000b1d7:	56                   	push   esi
c000b1d8:	31 f6                	xor    esi,esi
c000b1da:	53                   	push   ebx
c000b1db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b1df:	52                   	push   edx
c000b1e0:	6a 00                	push   0x0
c000b1e2:	6a 00                	push   0x0
c000b1e4:	53                   	push   ebx
c000b1e5:	e8 54 fc ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000b1ea:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b1f1:	83 c4 10             	add    esp,0x10
c000b1f4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b1f7:	7e 20                	jle    c000b219 <VgaText::clearScreen()+0x43>
c000b1f9:	31 ff                	xor    edi,edi
c000b1fb:	50                   	push   eax
c000b1fc:	50                   	push   eax
c000b1fd:	56                   	push   esi
c000b1fe:	57                   	push   edi
c000b1ff:	47                   	inc    edi
c000b200:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b203:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b206:	6a 20                	push   0x20
c000b208:	53                   	push   ebx
c000b209:	e8 c4 fb ff ff       	call   c000add2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b20e:	83 c4 20             	add    esp,0x20
c000b211:	83 ff 50             	cmp    edi,0x50
c000b214:	75 e5                	jne    c000b1fb <VgaText::clearScreen()+0x25>
c000b216:	46                   	inc    esi
c000b217:	eb db                	jmp    c000b1f4 <VgaText::clearScreen()+0x1e>
c000b219:	83 ec 0c             	sub    esp,0xc
c000b21c:	53                   	push   ebx
c000b21d:	e8 2e fe ff ff       	call   c000b050 <VgaText::doUpdate()>
c000b222:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b229:	83 c4 10             	add    esp,0x10
c000b22c:	5b                   	pop    ebx
c000b22d:	5e                   	pop    esi
c000b22e:	5f                   	pop    edi
c000b22f:	c3                   	ret    

c000b230 <VgaText::putchar(char)>:
c000b230:	56                   	push   esi
c000b231:	53                   	push   ebx
c000b232:	83 ec 14             	sub    esp,0x14
c000b235:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b239:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b23d:	3c 5b                	cmp    al,0x5b
c000b23f:	75 18                	jne    c000b259 <VgaText::putchar(char)+0x29>
c000b241:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b245:	74 1f                	je     c000b266 <VgaText::putchar(char)+0x36>
c000b247:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b24d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b254:	e9 bd 00 00 00       	jmp    c000b316 <VgaText::putchar(char)+0xe6>
c000b259:	3c 1b                	cmp    al,0x1b
c000b25b:	75 09                	jne    c000b266 <VgaText::putchar(char)+0x36>
c000b25d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b261:	e9 b0 00 00 00       	jmp    c000b316 <VgaText::putchar(char)+0xe6>
c000b266:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b269:	84 c9                	test   cl,cl
c000b26b:	0f 84 92 00 00 00    	je     c000b303 <VgaText::putchar(char)+0xd3>
c000b271:	8d 50 c0             	lea    edx,[eax-0x40]
c000b274:	80 fa 3e             	cmp    dl,0x3e
c000b277:	77 76                	ja     c000b2ef <VgaText::putchar(char)+0xbf>
c000b279:	3c 6d                	cmp    al,0x6d
c000b27b:	75 47                	jne    c000b2c4 <VgaText::putchar(char)+0x94>
c000b27d:	31 f6                	xor    esi,esi
c000b27f:	31 d2                	xor    edx,edx
c000b281:	31 c0                	xor    eax,eax
c000b283:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b286:	7e 2d                	jle    c000b2b5 <VgaText::putchar(char)+0x85>
c000b288:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b28d:	80 fa 3b             	cmp    dl,0x3b
c000b290:	75 17                	jne    c000b2a9 <VgaText::putchar(char)+0x79>
c000b292:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b296:	50                   	push   eax
c000b297:	53                   	push   ebx
c000b298:	e8 83 f9 ff ff       	call   c000ac20 <VgaText::doANSI_SGR(int)>
c000b29d:	59                   	pop    ecx
c000b29e:	31 d2                	xor    edx,edx
c000b2a0:	58                   	pop    eax
c000b2a1:	31 c0                	xor    eax,eax
c000b2a3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b2a7:	eb 09                	jmp    c000b2b2 <VgaText::putchar(char)+0x82>
c000b2a9:	6b c0 0a             	imul   eax,eax,0xa
c000b2ac:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b2b0:	88 ca                	mov    dl,cl
c000b2b2:	46                   	inc    esi
c000b2b3:	eb ce                	jmp    c000b283 <VgaText::putchar(char)+0x53>
c000b2b5:	84 d2                	test   dl,dl
c000b2b7:	74 2e                	je     c000b2e7 <VgaText::putchar(char)+0xb7>
c000b2b9:	50                   	push   eax
c000b2ba:	53                   	push   ebx
c000b2bb:	e8 60 f9 ff ff       	call   c000ac20 <VgaText::doANSI_SGR(int)>
c000b2c0:	58                   	pop    eax
c000b2c1:	5a                   	pop    edx
c000b2c2:	eb 23                	jmp    c000b2e7 <VgaText::putchar(char)+0xb7>
c000b2c4:	3c 4a                	cmp    al,0x4a
c000b2c6:	75 1f                	jne    c000b2e7 <VgaText::putchar(char)+0xb7>
c000b2c8:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b2cc:	75 19                	jne    c000b2e7 <VgaText::putchar(char)+0xb7>
c000b2ce:	83 ec 0c             	sub    esp,0xc
c000b2d1:	53                   	push   ebx
c000b2d2:	e8 ff fe ff ff       	call   c000b1d6 <VgaText::clearScreen()>
c000b2d7:	83 c4 0c             	add    esp,0xc
c000b2da:	6a 00                	push   0x0
c000b2dc:	6a 00                	push   0x0
c000b2de:	53                   	push   ebx
c000b2df:	e8 5a fb ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000b2e4:	83 c4 10             	add    esp,0x10
c000b2e7:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b2ed:	eb 27                	jmp    c000b316 <VgaText::putchar(char)+0xe6>
c000b2ef:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b2f2:	83 fa 0e             	cmp    edx,0xe
c000b2f5:	7f 1f                	jg     c000b316 <VgaText::putchar(char)+0xe6>
c000b2f7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b2fa:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b2fd:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b301:	eb 13                	jmp    c000b316 <VgaText::putchar(char)+0xe6>
c000b303:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b306:	0f be c0             	movsx  eax,al
c000b309:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b30c:	50                   	push   eax
c000b30d:	53                   	push   ebx
c000b30e:	e8 65 fc ff ff       	call   c000af78 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b313:	83 c4 10             	add    esp,0x10
c000b316:	83 c4 14             	add    esp,0x14
c000b319:	5b                   	pop    ebx
c000b31a:	5e                   	pop    esi
c000b31b:	c3                   	ret    

c000b31c <VgaText::putx(unsigned int)>:
c000b31c:	57                   	push   edi
c000b31d:	b9 11 00 00 00       	mov    ecx,0x11
c000b322:	56                   	push   esi
c000b323:	be 56 4a 02 c0       	mov    esi,0xc0024a56
c000b328:	53                   	push   ebx
c000b329:	83 ec 20             	sub    esp,0x20
c000b32c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b330:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b334:	fc                   	cld    
c000b335:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b337:	be 08 00 00 00       	mov    esi,0x8
c000b33c:	50                   	push   eax
c000b33d:	50                   	push   eax
c000b33e:	89 d8                	mov    eax,ebx
c000b340:	c1 e3 04             	shl    ebx,0x4
c000b343:	c1 e8 1c             	shr    eax,0x1c
c000b346:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b34b:	50                   	push   eax
c000b34c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b350:	e8 db fe ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b355:	83 c4 10             	add    esp,0x10
c000b358:	4e                   	dec    esi
c000b359:	75 e1                	jne    c000b33c <VgaText::putx(unsigned int)+0x20>
c000b35b:	83 c4 20             	add    esp,0x20
c000b35e:	5b                   	pop    ebx
c000b35f:	5e                   	pop    esi
c000b360:	5f                   	pop    edi
c000b361:	c3                   	ret    

c000b362 <VgaText::puts(char const*)>:
c000b362:	53                   	push   ebx
c000b363:	83 ec 08             	sub    esp,0x8
c000b366:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b36a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b36d:	84 c0                	test   al,al
c000b36f:	74 12                	je     c000b383 <VgaText::puts(char const*)+0x21>
c000b371:	43                   	inc    ebx
c000b372:	51                   	push   ecx
c000b373:	51                   	push   ecx
c000b374:	50                   	push   eax
c000b375:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b379:	e8 b2 fe ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	eb e7                	jmp    c000b36a <VgaText::puts(char const*)+0x8>
c000b383:	83 c4 08             	add    esp,0x8
c000b386:	5b                   	pop    ebx
c000b387:	c3                   	ret    

c000b388 <VgaText::VgaText(char const*)>:
c000b388:	57                   	push   edi
c000b389:	56                   	push   esi
c000b38a:	53                   	push   ebx
c000b38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b38f:	83 ec 08             	sub    esp,0x8
c000b392:	6a 00                	push   0x0
c000b394:	50                   	push   eax
c000b395:	e8 44 05 00 00       	call   c000b8de <UnixFile::UnixFile(int)>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	ba bc 4a 02 c0       	mov    edx,0xc0024abc
c000b3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a6:	89 10                	mov    DWORD PTR [eax],edx
c000b3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ac:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ca:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b3d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3dd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3fe:	8d 50 60             	lea    edx,[eax+0x60]
c000b401:	bb 80 89 02 c0       	mov    ebx,0xc0028980
c000b406:	b8 08 00 00 00       	mov    eax,0x8
c000b40b:	fc                   	cld    
c000b40c:	89 d7                	mov    edi,edx
c000b40e:	89 de                	mov    esi,ebx
c000b410:	89 c1                	mov    ecx,eax
c000b412:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b418:	05 82 00 00 00       	add    eax,0x82
c000b41d:	83 ec 08             	sub    esp,0x8
c000b420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b424:	50                   	push   eax
c000b425:	e8 16 53 ff ff       	call   c0000740 <strcpy>
c000b42a:	83 c4 10             	add    esp,0x10
c000b42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b431:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b438:	83 ec 0c             	sub    esp,0xc
c000b43b:	6a 01                	push   0x1
c000b43d:	e8 df 08 00 00       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	89 c2                	mov    edx,eax
c000b447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b44e:	8b 1d 50 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a50
c000b454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b458:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b45b:	89 c6                	mov    esi,eax
c000b45d:	e8 b0 ef ff ff       	call   c000a412 <Phys::allocatePage()>
c000b462:	68 05 0c 00 00       	push   0xc05
c000b467:	56                   	push   esi
c000b468:	50                   	push   eax
c000b469:	53                   	push   ebx
c000b46a:	e8 59 0f 00 00       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b46f:	83 c4 10             	add    esp,0x10
c000b472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b476:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b479:	83 ec 04             	sub    esp,0x4
c000b47c:	68 00 0f 00 00       	push   0xf00
c000b481:	6a 00                	push   0x0
c000b483:	50                   	push   eax
c000b484:	e8 fb 51 ff ff       	call   c0000684 <memset>
c000b489:	83 c4 10             	add    esp,0x10
c000b48c:	83 ec 04             	sub    esp,0x4
c000b48f:	6a 00                	push   0x0
c000b491:	6a 07                	push   0x7
c000b493:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b497:	e8 18 f8 ff ff       	call   c000acb4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b49c:	83 c4 10             	add    esp,0x10
c000b49f:	83 ec 04             	sub    esp,0x4
c000b4a2:	6a 00                	push   0x0
c000b4a4:	6a 00                	push   0x0
c000b4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4aa:	e8 8f f9 ff ff       	call   c000ae3e <VgaText::setCursor(int, int)>
c000b4af:	83 c4 10             	add    esp,0x10
c000b4b2:	83 ec 0c             	sub    esp,0xc
c000b4b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b9:	e8 18 fd ff ff       	call   c000b1d6 <VgaText::clearScreen()>
c000b4be:	83 c4 10             	add    esp,0x10
c000b4c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c5:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4cd:	05 02 01 00 00       	add    eax,0x102
c000b4d2:	83 ec 04             	sub    esp,0x4
c000b4d5:	6a 30                	push   0x30
c000b4d7:	6a 00                	push   0x0
c000b4d9:	50                   	push   eax
c000b4da:	e8 a5 51 ff ff       	call   c0000684 <memset>
c000b4df:	83 c4 10             	add    esp,0x10
c000b4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e6:	05 32 01 00 00       	add    eax,0x132
c000b4eb:	83 ec 04             	sub    esp,0x4
c000b4ee:	68 80 00 00 00       	push   0x80
c000b4f3:	6a 00                	push   0x0
c000b4f5:	50                   	push   eax
c000b4f6:	e8 89 51 ff ff       	call   c0000684 <memset>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	90                   	nop
c000b4ff:	5b                   	pop    ebx
c000b500:	5e                   	pop    esi
c000b501:	5f                   	pop    edi
c000b502:	c3                   	ret    
c000b503:	90                   	nop

c000b504 <VgaText::receiveKey(unsigned char)>:
c000b504:	55                   	push   ebp
c000b505:	57                   	push   edi
c000b506:	56                   	push   esi
c000b507:	53                   	push   ebx
c000b508:	83 ec 1c             	sub    esp,0x1c
c000b50b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b50f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b513:	84 db                	test   bl,bl
c000b515:	0f 84 c6 00 00 00    	je     c000b5e1 <VgaText::receiveKey(unsigned char)+0xdd>
c000b51b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b521:	80 fb 08             	cmp    bl,0x8
c000b524:	75 2c                	jne    c000b552 <VgaText::receiveKey(unsigned char)+0x4e>
c000b526:	83 ec 0c             	sub    esp,0xc
c000b529:	57                   	push   edi
c000b52a:	e8 71 51 ff ff       	call   c00006a0 <strlen>
c000b52f:	83 c4 10             	add    esp,0x10
c000b532:	85 c0                	test   eax,eax
c000b534:	74 41                	je     c000b577 <VgaText::receiveKey(unsigned char)+0x73>
c000b536:	50                   	push   eax
c000b537:	50                   	push   eax
c000b538:	6a 08                	push   0x8
c000b53a:	56                   	push   esi
c000b53b:	e8 f0 fc ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b540:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b543:	e8 58 51 ff ff       	call   c00006a0 <strlen>
c000b548:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b550:	eb 22                	jmp    c000b574 <VgaText::receiveKey(unsigned char)+0x70>
c000b552:	0f be c3             	movsx  eax,bl
c000b555:	52                   	push   edx
c000b556:	52                   	push   edx
c000b557:	50                   	push   eax
c000b558:	56                   	push   esi
c000b559:	e8 d2 fc ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b55e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b562:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b567:	59                   	pop    ecx
c000b568:	5d                   	pop    ebp
c000b569:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b56d:	50                   	push   eax
c000b56e:	57                   	push   edi
c000b56f:	e8 0c 53 ff ff       	call   c0000880 <strcat>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b57e:	75 05                	jne    c000b585 <VgaText::receiveKey(unsigned char)+0x81>
c000b580:	80 fb 0a             	cmp    bl,0xa
c000b583:	75 50                	jne    c000b5d5 <VgaText::receiveKey(unsigned char)+0xd1>
c000b585:	83 ec 0c             	sub    esp,0xc
c000b588:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b58e:	53                   	push   ebx
c000b58f:	e8 0c 51 ff ff       	call   c00006a0 <strlen>
c000b594:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b597:	89 c5                	mov    ebp,eax
c000b599:	e8 02 51 ff ff       	call   c00006a0 <strlen>
c000b59e:	83 c4 10             	add    esp,0x10
c000b5a1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b5a5:	3d 80 00 00 00       	cmp    eax,0x80
c000b5aa:	76 10                	jbe    c000b5bc <VgaText::receiveKey(unsigned char)+0xb8>
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	68 67 4a 02 c0       	push   0xc0024a67
c000b5b4:	e8 0c 9b 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	50                   	push   eax
c000b5bd:	50                   	push   eax
c000b5be:	57                   	push   edi
c000b5bf:	53                   	push   ebx
c000b5c0:	e8 bb 52 ff ff       	call   c0000880 <strcat>
c000b5c5:	83 c4 0c             	add    esp,0xc
c000b5c8:	6a 30                	push   0x30
c000b5ca:	6a 00                	push   0x0
c000b5cc:	57                   	push   edi
c000b5cd:	e8 b2 50 ff ff       	call   c0000684 <memset>
c000b5d2:	83 c4 10             	add    esp,0x10
c000b5d5:	83 ec 0c             	sub    esp,0xc
c000b5d8:	56                   	push   esi
c000b5d9:	e8 72 fa ff ff       	call   c000b050 <VgaText::doUpdate()>
c000b5de:	83 c4 10             	add    esp,0x10
c000b5e1:	83 c4 1c             	add    esp,0x1c
c000b5e4:	5b                   	pop    ebx
c000b5e5:	5e                   	pop    esi
c000b5e6:	5f                   	pop    edi
c000b5e7:	5d                   	pop    ebp
c000b5e8:	c3                   	ret    
c000b5e9:	90                   	nop

c000b5ea <VgaText::write(unsigned long long, void*, int*)>:
c000b5ea:	55                   	push   ebp
c000b5eb:	57                   	push   edi
c000b5ec:	56                   	push   esi
c000b5ed:	53                   	push   ebx
c000b5ee:	83 ec 0c             	sub    esp,0xc
c000b5f1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b5f5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b5f9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b5fd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b604:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b607:	39 eb                	cmp    ebx,ebp
c000b609:	74 13                	je     c000b61e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b60b:	43                   	inc    ebx
c000b60c:	50                   	push   eax
c000b60d:	50                   	push   eax
c000b60e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b612:	50                   	push   eax
c000b613:	56                   	push   esi
c000b614:	e8 17 fc ff ff       	call   c000b230 <VgaText::putchar(char)>
c000b619:	83 c4 10             	add    esp,0x10
c000b61c:	eb e9                	jmp    c000b607 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b61e:	83 ec 0c             	sub    esp,0xc
c000b621:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b628:	56                   	push   esi
c000b629:	e8 22 fa ff ff       	call   c000b050 <VgaText::doUpdate()>
c000b62e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b632:	89 38                	mov    DWORD PTR [eax],edi
c000b634:	83 c4 1c             	add    esp,0x1c
c000b637:	31 c0                	xor    eax,eax
c000b639:	5b                   	pop    ebx
c000b63a:	5e                   	pop    esi
c000b63b:	5f                   	pop    edi
c000b63c:	5d                   	pop    ebp
c000b63d:	c3                   	ret    

c000b63e <newTerminal(char*)>:
c000b63e:	83 ec 28             	sub    esp,0x28
c000b641:	68 b4 01 00 00       	push   0x1b4
c000b646:	e8 10 e7 ff ff       	call   c0009d5b <malloc>
c000b64b:	5a                   	pop    edx
c000b64c:	59                   	pop    ecx
c000b64d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b651:	50                   	push   eax
c000b652:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b656:	e8 2d fd ff ff       	call   c000b388 <VgaText::VgaText(char const*)>
c000b65b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b65f:	83 c4 2c             	add    esp,0x2c
c000b662:	c3                   	ret    
c000b663:	90                   	nop

c000b664 <TSS::TSS()>:
c000b664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b668:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b66f:	90                   	nop
c000b670:	c3                   	ret    
c000b671:	90                   	nop
c000b672:	66 90                	xchg   ax,ax

c000b674 <TSS::setESP(unsigned long)>:
c000b674:	55                   	push   ebp
c000b675:	89 e5                	mov    ebp,esp
c000b677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b67a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b67d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b680:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b683:	90                   	nop
c000b684:	5d                   	pop    ebp
c000b685:	c3                   	ret    
c000b686:	66 90                	xchg   ax,ax

c000b688 <TSS::flush()>:
c000b688:	55                   	push   ebp
c000b689:	89 e5                	mov    ebp,esp
c000b68b:	83 ec 10             	sub    esp,0x10
c000b68e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b691:	8b 00                	mov    eax,DWORD PTR [eax]
c000b693:	83 c8 03             	or     eax,0x3
c000b696:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b69a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b69e:	66 89 d0             	mov    ax,dx
c000b6a1:	0f 00 d8             	ltr    ax
c000b6a4:	90                   	nop
c000b6a5:	c9                   	leave  
c000b6a6:	c3                   	ret    
c000b6a7:	90                   	nop

c000b6a8 <TSS::setup(unsigned long, unsigned long)>:
c000b6a8:	55                   	push   ebp
c000b6a9:	89 e5                	mov    ebp,esp
c000b6ab:	83 ec 18             	sub    esp,0x18
c000b6ae:	83 ec 0c             	sub    esp,0xc
c000b6b1:	6a 68                	push   0x68
c000b6b3:	e8 a3 e6 ff ff       	call   c0009d5b <malloc>
c000b6b8:	83 c4 10             	add    esp,0x10
c000b6bb:	89 c2                	mov    edx,eax
c000b6bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6c9:	83 ec 04             	sub    esp,0x4
c000b6cc:	6a 68                	push   0x68
c000b6ce:	6a 00                	push   0x0
c000b6d0:	50                   	push   eax
c000b6d1:	e8 ae 4f ff ff       	call   c0000684 <memset>
c000b6d6:	83 c4 10             	add    esp,0x10
c000b6d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6df:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b6e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6eb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b6f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b6fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b700:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b703:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b70c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b70f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b718:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b71b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b724:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b727:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b72d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b730:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b733:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b73c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b73f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b74b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b74e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b754:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b757:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b75a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b75d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b760:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b763:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b76a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b76d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b770:	0f 20 da             	mov    edx,cr3
c000b773:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b776:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b779:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b77c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b77f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b782:	83 ec 08             	sub    esp,0x8
c000b785:	50                   	push   eax
c000b786:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b789:	50                   	push   eax
c000b78a:	e8 27 de ff ff       	call   c00095b6 <GDTEntry::setBase(unsigned int)>
c000b78f:	83 c4 10             	add    esp,0x10
c000b792:	83 ec 08             	sub    esp,0x8
c000b795:	6a 68                	push   0x68
c000b797:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b79a:	50                   	push   eax
c000b79b:	e8 32 de ff ff       	call   c00095d2 <GDTEntry::setLimit(unsigned int)>
c000b7a0:	83 c4 10             	add    esp,0x10
c000b7a3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b7a7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b7aa:	83 e0 0f             	and    eax,0xf
c000b7ad:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b7b0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b7b3:	83 c8 40             	or     eax,0x40
c000b7b6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b7b9:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000b7be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7c4:	05 78 01 00 00       	add    eax,0x178
c000b7c9:	83 ec 04             	sub    esp,0x4
c000b7cc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b7cf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b7d2:	50                   	push   eax
c000b7d3:	e8 2e de ff ff       	call   c0009606 <GDT::addEntry(GDTEntry)>
c000b7d8:	83 c4 10             	add    esp,0x10
c000b7db:	89 c2                	mov    edx,eax
c000b7dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7e0:	89 10                	mov    DWORD PTR [eax],edx
c000b7e2:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000b7e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7ed:	05 78 01 00 00       	add    eax,0x178
c000b7f2:	83 ec 0c             	sub    esp,0xc
c000b7f5:	50                   	push   eax
c000b7f6:	e8 35 de ff ff       	call   c0009630 <GDT::flush()>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b801:	8b 00                	mov    eax,DWORD PTR [eax]
c000b803:	c9                   	leave  
c000b804:	c3                   	ret    
c000b805:	90                   	nop

c000b806 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b80a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b811:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b816:	75 08                	jne    c000b820 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b818:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b81e:	eb 38                	jmp    c000b858 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b820:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b825:	75 17                	jne    c000b83e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b82c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b82f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b835:	8b 10                	mov    edx,DWORD PTR [eax]
c000b837:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b83b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b83e:	89 c1                	mov    ecx,eax
c000b840:	83 e1 fd             	and    ecx,0xfffffffd
c000b843:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b849:	74 cd                	je     c000b818 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b84b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b850:	83 e0 ef             	and    eax,0xffffffef
c000b853:	83 f8 08             	cmp    eax,0x8
c000b856:	76 c0                	jbe    c000b818 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b858:	31 c0                	xor    eax,eax
c000b85a:	c3                   	ret    
c000b85b:	90                   	nop

c000b85c <ReservedFilename::isAtty()>:
c000b85c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b860:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b863:	31 c0                	xor    eax,eax
c000b865:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b86b:	74 09                	je     c000b876 <ReservedFilename::isAtty()+0x1a>
c000b86d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b873:	0f 94 c0             	sete   al
c000b876:	c3                   	ret    
c000b877:	90                   	nop

c000b878 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b87c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b880:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b883:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b887:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b88c:	75 08                	jne    c000b896 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b88e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b894:	eb 3d                	jmp    c000b8d3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b896:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b89b:	75 17                	jne    c000b8b4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b89d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b8a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b8a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b8ab:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8b1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b8b4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b8b9:	75 04                	jne    c000b8bf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b8bb:	89 0a                	mov    DWORD PTR [edx],ecx
c000b8bd:	eb 14                	jmp    c000b8d3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b8bf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b8c4:	74 c8                	je     c000b88e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8c6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b8cb:	83 e0 ef             	and    eax,0xffffffef
c000b8ce:	83 f8 08             	cmp    eax,0x8
c000b8d1:	76 bb                	jbe    c000b88e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8d3:	31 c0                	xor    eax,eax
c000b8d5:	c3                   	ret    

c000b8d6 <UnixFile::getFileDescriptor()>:
c000b8d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8dd:	c3                   	ret    

c000b8de <UnixFile::UnixFile(int)>:
c000b8de:	53                   	push   ebx
c000b8df:	83 ec 28             	sub    esp,0x28
c000b8e2:	ba 84 4b 02 c0       	mov    edx,0xc0024b84
c000b8e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8eb:	89 10                	mov    DWORD PTR [eax],edx
c000b8ed:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b8f5:	0f 8f 8c 01 00 00    	jg     c000ba87 <UnixFile::UnixFile(int)+0x1a9>
c000b8fb:	a1 60 7d 02 c0       	mov    eax,ds:0xc0027d60
c000b900:	8d 50 01             	lea    edx,[eax+0x1]
c000b903:	89 15 60 7d 02 c0    	mov    DWORD PTR ds:0xc0027d60,edx
c000b909:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b90d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b910:	83 ec 08             	sub    esp,0x8
c000b913:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b917:	68 38 8a 02 c0       	push   0xc0028a38
c000b91c:	e8 17 77 01 00       	call   c0023038 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b921:	83 c4 10             	add    esp,0x10
c000b924:	a0 34 8a 02 c0       	mov    al,ds:0xc0028a34
c000b929:	83 f0 01             	xor    eax,0x1
c000b92c:	84 c0                	test   al,al
c000b92e:	0f 84 54 01 00 00    	je     c000ba88 <UnixFile::UnixFile(int)+0x1aa>
c000b934:	c6 05 34 8a 02 c0 01 	mov    BYTE PTR ds:0xc0028a34,0x1
c000b93b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b943:	83 ec 0c             	sub    esp,0xc
c000b946:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b94a:	e8 0c e4 ff ff       	call   c0009d5b <malloc>
c000b94f:	83 c4 10             	add    esp,0x10
c000b952:	89 c3                	mov    ebx,eax
c000b954:	83 ec 08             	sub    esp,0x8
c000b957:	68 03 ff ff 0f       	push   0xfffff03
c000b95c:	53                   	push   ebx
c000b95d:	e8 2c 01 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000b962:	83 c4 10             	add    esp,0x10
c000b965:	89 1d 2c 8a 02 c0    	mov    DWORD PTR ds:0xc0028a2c,ebx
c000b96b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b973:	83 ec 0c             	sub    esp,0xc
c000b976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b97a:	e8 dc e3 ff ff       	call   c0009d5b <malloc>
c000b97f:	83 c4 10             	add    esp,0x10
c000b982:	89 c3                	mov    ebx,eax
c000b984:	83 ec 08             	sub    esp,0x8
c000b987:	68 01 ff ff 0f       	push   0xfffff01
c000b98c:	53                   	push   ebx
c000b98d:	e8 fc 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000b992:	83 c4 10             	add    esp,0x10
c000b995:	89 1d 30 8a 02 c0    	mov    DWORD PTR ds:0xc0028a30,ebx
c000b99b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b9a3:	83 ec 0c             	sub    esp,0xc
c000b9a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9aa:	e8 ac e3 ff ff       	call   c0009d5b <malloc>
c000b9af:	83 c4 10             	add    esp,0x10
c000b9b2:	89 c3                	mov    ebx,eax
c000b9b4:	83 ec 08             	sub    esp,0x8
c000b9b7:	68 00 ff ff 0f       	push   0xfffff00
c000b9bc:	53                   	push   ebx
c000b9bd:	e8 cc 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000b9c2:	83 c4 10             	add    esp,0x10
c000b9c5:	89 1d 24 8a 02 c0    	mov    DWORD PTR ds:0xc0028a24,ebx
c000b9cb:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b9d3:	83 ec 0c             	sub    esp,0xc
c000b9d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9da:	e8 7c e3 ff ff       	call   c0009d5b <malloc>
c000b9df:	83 c4 10             	add    esp,0x10
c000b9e2:	89 c3                	mov    ebx,eax
c000b9e4:	83 ec 08             	sub    esp,0x8
c000b9e7:	68 02 ff ff 0f       	push   0xfffff02
c000b9ec:	53                   	push   ebx
c000b9ed:	e8 9c 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000b9f2:	83 c4 10             	add    esp,0x10
c000b9f5:	89 1d 28 8a 02 c0    	mov    DWORD PTR ds:0xc0028a28,ebx
c000b9fb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ba03:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000ba08:	7f 7e                	jg     c000ba88 <UnixFile::UnixFile(int)+0x1aa>
c000ba0a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000ba12:	83 ec 0c             	sub    esp,0xc
c000ba15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba19:	e8 3d e3 ff ff       	call   c0009d5b <malloc>
c000ba1e:	83 c4 10             	add    esp,0x10
c000ba21:	89 c3                	mov    ebx,eax
c000ba23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba27:	05 10 ff ff 0f       	add    eax,0xfffff10
c000ba2c:	83 ec 08             	sub    esp,0x8
c000ba2f:	50                   	push   eax
c000ba30:	53                   	push   ebx
c000ba31:	e8 58 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba3d:	89 1c 85 00 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7600],ebx
c000ba44:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000ba4c:	83 ec 0c             	sub    esp,0xc
c000ba4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba53:	e8 03 e3 ff ff       	call   c0009d5b <malloc>
c000ba58:	83 c4 10             	add    esp,0x10
c000ba5b:	89 c3                	mov    ebx,eax
c000ba5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba61:	05 20 ff ff 0f       	add    eax,0xfffff20
c000ba66:	83 ec 08             	sub    esp,0x8
c000ba69:	50                   	push   eax
c000ba6a:	53                   	push   ebx
c000ba6b:	e8 1e 00 00 00       	call   c000ba8e <ReservedFilename::ReservedFilename(int)>
c000ba70:	83 c4 10             	add    esp,0x10
c000ba73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba77:	89 1c 85 c0 89 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7640],ebx
c000ba7e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ba82:	e9 7c ff ff ff       	jmp    c000ba03 <UnixFile::UnixFile(int)+0x125>
c000ba87:	90                   	nop
c000ba88:	83 c4 28             	add    esp,0x28
c000ba8b:	5b                   	pop    ebx
c000ba8c:	c3                   	ret    
c000ba8d:	90                   	nop

c000ba8e <ReservedFilename::ReservedFilename(int)>:
c000ba8e:	83 ec 0c             	sub    esp,0xc
c000ba91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba95:	83 ec 08             	sub    esp,0x8
c000ba98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba9c:	50                   	push   eax
c000ba9d:	e8 3c fe ff ff       	call   c000b8de <UnixFile::UnixFile(int)>
c000baa2:	83 c4 10             	add    esp,0x10
c000baa5:	ba a0 4b 02 c0       	mov    edx,0xc0024ba0
c000baaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baae:	89 10                	mov    DWORD PTR [eax],edx
c000bab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bab4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bab8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000babb:	90                   	nop
c000babc:	83 c4 0c             	add    esp,0xc
c000babf:	c3                   	ret    

c000bac0 <UnixFile::~UnixFile()>:
c000bac0:	83 ec 1c             	sub    esp,0x1c
c000bac3:	ba 84 4b 02 c0       	mov    edx,0xc0024b84
c000bac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bacc:	89 10                	mov    DWORD PTR [eax],edx
c000bace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bad5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000bada:	7f 73                	jg     c000bb4f <UnixFile::~UnixFile()+0x8f>
c000badc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bae4:	83 ec 0c             	sub    esp,0xc
c000bae7:	68 38 8a 02 c0       	push   0xc0028a38
c000baec:	e8 1b 76 01 00       	call   c002310c <LinkedList<UnixFile>::getFirstElement()>
c000baf1:	83 c4 10             	add    esp,0x10
c000baf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000baf8:	83 ec 0c             	sub    esp,0xc
c000bafb:	68 38 8a 02 c0       	push   0xc0028a38
c000bb00:	e8 0f 76 01 00       	call   c0023114 <LinkedList<UnixFile>::removeFirst()>
c000bb05:	83 c4 10             	add    esp,0x10
c000bb08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb0c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000bb10:	74 40                	je     c000bb52 <UnixFile::~UnixFile()+0x92>
c000bb12:	83 ec 08             	sub    esp,0x8
c000bb15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb19:	68 38 8a 02 c0       	push   0xc0028a38
c000bb1e:	e8 15 75 01 00       	call   c0023038 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000bb23:	83 c4 10             	add    esp,0x10
c000bb26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb2a:	8d 50 01             	lea    edx,[eax+0x1]
c000bb2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb31:	3d 88 13 00 00       	cmp    eax,0x1388
c000bb36:	0f 94 c0             	sete   al
c000bb39:	84 c0                	test   al,al
c000bb3b:	74 a7                	je     c000bae4 <UnixFile::~UnixFile()+0x24>
c000bb3d:	83 ec 0c             	sub    esp,0xc
c000bb40:	68 5c 4b 02 c0       	push   0xc0024b5c
c000bb45:	e8 7b 95 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	eb 95                	jmp    c000bae4 <UnixFile::~UnixFile()+0x24>
c000bb4f:	90                   	nop
c000bb50:	eb 01                	jmp    c000bb53 <UnixFile::~UnixFile()+0x93>
c000bb52:	90                   	nop
c000bb53:	90                   	nop
c000bb54:	83 c4 1c             	add    esp,0x1c
c000bb57:	c3                   	ret    

c000bb58 <UnixFile::~UnixFile()>:
c000bb58:	83 ec 0c             	sub    esp,0xc
c000bb5b:	83 ec 0c             	sub    esp,0xc
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	e8 59 ff ff ff       	call   c000bac0 <UnixFile::~UnixFile()>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	83 ec 08             	sub    esp,0x8
c000bb6d:	6a 0c                	push   0xc
c000bb6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb73:	e8 ee 13 00 00       	call   c000cf66 <operator delete(void*, unsigned long)>
c000bb78:	83 c4 10             	add    esp,0x10
c000bb7b:	83 c4 0c             	add    esp,0xc
c000bb7e:	c3                   	ret    
c000bb7f:	90                   	nop

c000bb80 <ReservedFilename::~ReservedFilename()>:
c000bb80:	83 ec 0c             	sub    esp,0xc
c000bb83:	ba a0 4b 02 c0       	mov    edx,0xc0024ba0
c000bb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb8c:	89 10                	mov    DWORD PTR [eax],edx
c000bb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb92:	83 ec 0c             	sub    esp,0xc
c000bb95:	50                   	push   eax
c000bb96:	e8 25 ff ff ff       	call   c000bac0 <UnixFile::~UnixFile()>
c000bb9b:	83 c4 10             	add    esp,0x10
c000bb9e:	90                   	nop
c000bb9f:	83 c4 0c             	add    esp,0xc
c000bba2:	c3                   	ret    
c000bba3:	90                   	nop

c000bba4 <ReservedFilename::~ReservedFilename()>:
c000bba4:	83 ec 0c             	sub    esp,0xc
c000bba7:	83 ec 0c             	sub    esp,0xc
c000bbaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbae:	e8 cd ff ff ff       	call   c000bb80 <ReservedFilename::~ReservedFilename()>
c000bbb3:	83 c4 10             	add    esp,0x10
c000bbb6:	83 ec 08             	sub    esp,0x8
c000bbb9:	6a 0c                	push   0xc
c000bbbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbbf:	e8 a2 13 00 00       	call   c000cf66 <operator delete(void*, unsigned long)>
c000bbc4:	83 c4 10             	add    esp,0x10
c000bbc7:	83 c4 0c             	add    esp,0xc
c000bbca:	c3                   	ret    

c000bbcb <getFromFileDescriptor(int)>:
c000bbcb:	53                   	push   ebx
c000bbcc:	83 ec 08             	sub    esp,0x8
c000bbcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbd3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bbd9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bbdf:	7f 2c                	jg     c000bc0d <getFromFileDescriptor(int)+0x42>
c000bbe1:	83 ec 0c             	sub    esp,0xc
c000bbe4:	68 38 8a 02 c0       	push   0xc0028a38
c000bbe9:	e8 1e 75 01 00       	call   c002310c <LinkedList<UnixFile>::getFirstElement()>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	85 c0                	test   eax,eax
c000bbf3:	75 04                	jne    c000bbf9 <getFromFileDescriptor(int)+0x2e>
c000bbf5:	31 c0                	xor    eax,eax
c000bbf7:	eb 6e                	jmp    c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bbf9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bbfc:	74 69                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bbfe:	52                   	push   edx
c000bbff:	52                   	push   edx
c000bc00:	50                   	push   eax
c000bc01:	68 38 8a 02 c0       	push   0xc0028a38
c000bc06:	e8 ab 75 01 00       	call   c00231b6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bc0b:	eb e1                	jmp    c000bbee <getFromFileDescriptor(int)+0x23>
c000bc0d:	a1 2c 8a 02 c0       	mov    eax,ds:0xc0028a2c
c000bc12:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bc18:	74 4d                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc1a:	a1 30 8a 02 c0       	mov    eax,ds:0xc0028a30
c000bc1f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bc25:	74 40                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc27:	a1 28 8a 02 c0       	mov    eax,ds:0xc0028a28
c000bc2c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bc32:	74 33                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc34:	a1 24 8a 02 c0       	mov    eax,ds:0xc0028a24
c000bc39:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bc3f:	74 26                	je     c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc41:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bc47:	83 f8 08             	cmp    eax,0x8
c000bc4a:	77 09                	ja     c000bc55 <getFromFileDescriptor(int)+0x8a>
c000bc4c:	8b 04 85 00 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7600]
c000bc53:	eb 12                	jmp    c000bc67 <getFromFileDescriptor(int)+0x9c>
c000bc55:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bc5b:	83 fb 08             	cmp    ebx,0x8
c000bc5e:	77 95                	ja     c000bbf5 <getFromFileDescriptor(int)+0x2a>
c000bc60:	8b 04 9d c0 89 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7640]
c000bc67:	83 c4 08             	add    esp,0x8
c000bc6a:	5b                   	pop    ebx
c000bc6b:	c3                   	ret    

c000bc6c <__static_initialization_and_destruction_0(int, int)>:
c000bc6c:	83 ec 0c             	sub    esp,0xc
c000bc6f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bc74:	75 34                	jne    c000bcaa <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc76:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bc7e:	75 2a                	jne    c000bcaa <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc80:	83 ec 0c             	sub    esp,0xc
c000bc83:	68 38 8a 02 c0       	push   0xc0028a38
c000bc88:	e8 69 73 01 00       	call   c0022ff6 <LinkedList<UnixFile>::LinkedList()>
c000bc8d:	83 c4 10             	add    esp,0x10
c000bc90:	83 ec 04             	sub    esp,0x4
c000bc93:	68 88 7b 02 c0       	push   0xc0027b88
c000bc98:	68 38 8a 02 c0       	push   0xc0028a38
c000bc9d:	68 f4 2f 02 c0       	push   0xc0022ff4
c000bca2:	e8 39 12 00 00       	call   c000cee0 <__cxa_atexit>
c000bca7:	83 c4 10             	add    esp,0x10
c000bcaa:	90                   	nop
c000bcab:	83 c4 0c             	add    esp,0xc
c000bcae:	c3                   	ret    

c000bcaf <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bcaf:	83 ec 0c             	sub    esp,0xc
c000bcb2:	83 ec 08             	sub    esp,0x8
c000bcb5:	68 ff ff 00 00       	push   0xffff
c000bcba:	6a 01                	push   0x1
c000bcbc:	e8 ab ff ff ff       	call   c000bc6c <__static_initialization_and_destruction_0(int, int)>
c000bcc1:	83 c4 10             	add    esp,0x10
c000bcc4:	83 c4 0c             	add    esp,0xc
c000bcc7:	c3                   	ret    

c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bcc8:	53                   	push   ebx
c000bcc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bccd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcd1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bcd7:	89 c8                	mov    eax,ecx
c000bcd9:	d1 e8                	shr    eax,1
c000bcdb:	03 05 68 7d 02 c0    	add    eax,DWORD PTR ds:0xc0027d68
c000bce1:	83 e1 01             	and    ecx,0x1
c000bce4:	8a 10                	mov    dl,BYTE PTR [eax]
c000bce6:	75 09                	jne    c000bcf1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bce8:	83 e2 f0             	and    edx,0xfffffff0
c000bceb:	09 da                	or     edx,ebx
c000bced:	88 10                	mov    BYTE PTR [eax],dl
c000bcef:	5b                   	pop    ebx
c000bcf0:	c3                   	ret    
c000bcf1:	c1 e3 04             	shl    ebx,0x4
c000bcf4:	83 e2 0f             	and    edx,0xf
c000bcf7:	09 da                	or     edx,ebx
c000bcf9:	88 10                	mov    BYTE PTR [eax],dl
c000bcfb:	5b                   	pop    ebx
c000bcfc:	c3                   	ret    

c000bcfd <Virt::getPageState(unsigned long)>:
c000bcfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd01:	8b 0d 68 7d 02 c0    	mov    ecx,DWORD PTR ds:0xc0027d68
c000bd07:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bd0d:	89 d0                	mov    eax,edx
c000bd0f:	d1 e8                	shr    eax,1
c000bd11:	83 e2 01             	and    edx,0x1
c000bd14:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bd17:	75 04                	jne    c000bd1d <Virt::getPageState(unsigned long)+0x20>
c000bd19:	83 e0 0f             	and    eax,0xf
c000bd1c:	c3                   	ret    
c000bd1d:	c0 e8 04             	shr    al,0x4
c000bd20:	c3                   	ret    

c000bd21 <Virt::allocateKernelVirtualPages(int)>:
c000bd21:	55                   	push   ebp
c000bd22:	31 ed                	xor    ebp,ebp
c000bd24:	57                   	push   edi
c000bd25:	56                   	push   esi
c000bd26:	53                   	push   ebx
c000bd27:	31 db                	xor    ebx,ebx
c000bd29:	83 ec 1c             	sub    esp,0x1c
c000bd2c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bd30:	8b 3d 64 7d 02 c0    	mov    edi,DWORD PTR ds:0xc0027d64
c000bd36:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bd3b:	57                   	push   edi
c000bd3c:	e8 bc ff ff ff       	call   c000bcfd <Virt::getPageState(unsigned long)>
c000bd41:	5a                   	pop    edx
c000bd42:	84 c0                	test   al,al
c000bd44:	75 3a                	jne    c000bd80 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bd46:	85 db                	test   ebx,ebx
c000bd48:	75 02                	jne    c000bd4c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bd4a:	89 fd                	mov    ebp,edi
c000bd4c:	43                   	inc    ebx
c000bd4d:	39 f3                	cmp    ebx,esi
c000bd4f:	74 5a                	je     c000bdab <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bd51:	47                   	inc    edi
c000bd52:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd58:	76 31                	jbe    c000bd8b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bd5a:	c7 05 64 7d 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027d64,0xc8000
c000bd64:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bd69:	75 28                	jne    c000bd93 <Virt::allocateKernelVirtualPages(int)+0x72>
c000bd6b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bd70:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bd75:	57                   	push   edi
c000bd76:	e8 82 ff ff ff       	call   c000bcfd <Virt::getPageState(unsigned long)>
c000bd7b:	5a                   	pop    edx
c000bd7c:	84 c0                	test   al,al
c000bd7e:	74 c6                	je     c000bd46 <Virt::allocateKernelVirtualPages(int)+0x25>
c000bd80:	31 db                	xor    ebx,ebx
c000bd82:	47                   	inc    edi
c000bd83:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd89:	77 cf                	ja     c000bd5a <Virt::allocateKernelVirtualPages(int)+0x39>
c000bd8b:	89 3d 64 7d 02 c0    	mov    DWORD PTR ds:0xc0027d64,edi
c000bd91:	eb a8                	jmp    c000bd3b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bd93:	83 ec 0c             	sub    esp,0xc
c000bd96:	68 b4 4b 02 c0       	push   0xc0024bb4
c000bd9b:	e8 25 93 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000bda0:	8b 3d 64 7d 02 c0    	mov    edi,DWORD PTR ds:0xc0027d64
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	eb 90                	jmp    c000bd3b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bdab:	89 2d 64 7d 02 c0    	mov    DWORD PTR ds:0xc0027d64,ebp
c000bdb1:	4b                   	dec    ebx
c000bdb2:	74 5f                	je     c000be13 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bdb4:	85 f6                	test   esi,esi
c000bdb6:	74 3d                	je     c000bdf5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bdb8:	89 e8                	mov    eax,ebp
c000bdba:	31 db                	xor    ebx,ebx
c000bdbc:	8d 7e ff             	lea    edi,[esi-0x1]
c000bdbf:	eb 14                	jmp    c000bdd5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bdc1:	6a 01                	push   0x1
c000bdc3:	43                   	inc    ebx
c000bdc4:	50                   	push   eax
c000bdc5:	e8 fe fe ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdca:	58                   	pop    eax
c000bdcb:	39 f3                	cmp    ebx,esi
c000bdcd:	5a                   	pop    edx
c000bdce:	74 25                	je     c000bdf5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bdd0:	a1 64 7d 02 c0       	mov    eax,ds:0xc0027d64
c000bdd5:	8d 50 01             	lea    edx,[eax+0x1]
c000bdd8:	85 db                	test   ebx,ebx
c000bdda:	89 15 64 7d 02 c0    	mov    DWORD PTR ds:0xc0027d64,edx
c000bde0:	74 20                	je     c000be02 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bde2:	39 df                	cmp    edi,ebx
c000bde4:	75 db                	jne    c000bdc1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bde6:	6a 03                	push   0x3
c000bde8:	43                   	inc    ebx
c000bde9:	50                   	push   eax
c000bdea:	e8 d9 fe ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdef:	59                   	pop    ecx
c000bdf0:	39 f3                	cmp    ebx,esi
c000bdf2:	58                   	pop    eax
c000bdf3:	75 db                	jne    c000bdd0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bdf5:	83 c4 1c             	add    esp,0x1c
c000bdf8:	89 e8                	mov    eax,ebp
c000bdfa:	5b                   	pop    ebx
c000bdfb:	c1 e0 0c             	shl    eax,0xc
c000bdfe:	5e                   	pop    esi
c000bdff:	5f                   	pop    edi
c000be00:	5d                   	pop    ebp
c000be01:	c3                   	ret    
c000be02:	6a 02                	push   0x2
c000be04:	bb 01 00 00 00       	mov    ebx,0x1
c000be09:	50                   	push   eax
c000be0a:	e8 b9 fe ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be0f:	58                   	pop    eax
c000be10:	5a                   	pop    edx
c000be11:	eb bd                	jmp    c000bdd0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be13:	6a 04                	push   0x4
c000be15:	8d 45 01             	lea    eax,[ebp+0x1]
c000be18:	55                   	push   ebp
c000be19:	a3 64 7d 02 c0       	mov    ds:0xc0027d64,eax
c000be1e:	e8 a5 fe ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be23:	59                   	pop    ecx
c000be24:	89 e8                	mov    eax,ebp
c000be26:	5b                   	pop    ebx
c000be27:	c1 e0 0c             	shl    eax,0xc
c000be2a:	83 c4 1c             	add    esp,0x1c
c000be2d:	5b                   	pop    ebx
c000be2e:	5e                   	pop    esi
c000be2f:	5f                   	pop    edi
c000be30:	5d                   	pop    ebp
c000be31:	c3                   	ret    

c000be32 <Virt::freeSwapfilePage(unsigned long)>:
c000be32:	53                   	push   ebx
c000be33:	8b 15 4c 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a4c
c000be39:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be3d:	b8 01 00 00 00       	mov    eax,0x1
c000be42:	89 cb                	mov    ebx,ecx
c000be44:	d3 e0                	shl    eax,cl
c000be46:	c1 eb 05             	shr    ebx,0x5
c000be49:	f7 d0                	not    eax
c000be4b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000be4e:	5b                   	pop    ebx
c000be4f:	c3                   	ret    

c000be50 <Virt::swapIDToSector(unsigned long)>:
c000be50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be54:	0f af 05 6c 7d 02 c0 	imul   eax,DWORD PTR ds:0xc0027d6c
c000be5b:	03 05 74 7d 02 c0    	add    eax,DWORD PTR ds:0xc0027d74
c000be61:	c3                   	ret    

c000be62 <Virt::allocateSwapfilePage()>:
c000be62:	55                   	push   ebp
c000be63:	31 d2                	xor    edx,edx
c000be65:	57                   	push   edi
c000be66:	56                   	push   esi
c000be67:	53                   	push   ebx
c000be68:	83 ec 0c             	sub    esp,0xc
c000be6b:	8b 0d 6c 7d 02 c0    	mov    ecx,DWORD PTR ds:0xc0027d6c
c000be71:	a1 70 7d 02 c0       	mov    eax,ds:0xc0027d70
c000be76:	f7 f1                	div    ecx
c000be78:	39 0d 70 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d70,ecx
c000be7e:	72 2d                	jb     c000bead <Virt::allocateSwapfilePage()+0x4b>
c000be80:	8b 35 4c 8a 02 c0    	mov    esi,DWORD PTR ds:0xc0028a4c
c000be86:	8b 16                	mov    edx,DWORD PTR [esi]
c000be88:	f6 c2 01             	test   dl,0x1
c000be8b:	74 3c                	je     c000bec9 <Virt::allocateSwapfilePage()+0x67>
c000be8d:	31 c9                	xor    ecx,ecx
c000be8f:	bf 01 00 00 00       	mov    edi,0x1
c000be94:	eb 12                	jmp    c000bea8 <Virt::allocateSwapfilePage()+0x46>
c000be96:	89 fd                	mov    ebp,edi
c000be98:	89 ca                	mov    edx,ecx
c000be9a:	d3 e5                	shl    ebp,cl
c000be9c:	c1 ea 05             	shr    edx,0x5
c000be9f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bea2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bea4:	85 ea                	test   edx,ebp
c000bea6:	74 2a                	je     c000bed2 <Virt::allocateSwapfilePage()+0x70>
c000bea8:	41                   	inc    ecx
c000bea9:	39 c8                	cmp    eax,ecx
c000beab:	77 e9                	ja     c000be96 <Virt::allocateSwapfilePage()+0x34>
c000bead:	83 ec 0c             	sub    esp,0xc
c000beb0:	68 6c 4d 02 c0       	push   0xc0024d6c
c000beb5:	e8 0b 92 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000beba:	83 c4 10             	add    esp,0x10
c000bebd:	31 c9                	xor    ecx,ecx
c000bebf:	83 c4 0c             	add    esp,0xc
c000bec2:	89 c8                	mov    eax,ecx
c000bec4:	5b                   	pop    ebx
c000bec5:	5e                   	pop    esi
c000bec6:	5f                   	pop    edi
c000bec7:	5d                   	pop    ebp
c000bec8:	c3                   	ret    
c000bec9:	89 f3                	mov    ebx,esi
c000becb:	bd 01 00 00 00       	mov    ebp,0x1
c000bed0:	31 c9                	xor    ecx,ecx
c000bed2:	09 ea                	or     edx,ebp
c000bed4:	89 c8                	mov    eax,ecx
c000bed6:	89 13                	mov    DWORD PTR [ebx],edx
c000bed8:	83 c4 0c             	add    esp,0xc
c000bedb:	5b                   	pop    ebx
c000bedc:	5e                   	pop    esi
c000bedd:	5f                   	pop    edi
c000bede:	5d                   	pop    ebp
c000bedf:	c3                   	ret    

c000bee0 <Virt::virtualMemorySetup()>:
c000bee0:	53                   	push   ebx
c000bee1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bee6:	6a 0f                	push   0xf
c000bee8:	53                   	push   ebx
c000bee9:	43                   	inc    ebx
c000beea:	e8 d9 fd ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000beef:	58                   	pop    eax
c000bef0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bef6:	5a                   	pop    edx
c000bef7:	75 ed                	jne    c000bee6 <Virt::virtualMemorySetup()+0x6>
c000bef9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000befe:	6a 00                	push   0x0
c000bf00:	53                   	push   ebx
c000bf01:	43                   	inc    ebx
c000bf02:	e8 c1 fd ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf07:	59                   	pop    ecx
c000bf08:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf0e:	58                   	pop    eax
c000bf0f:	75 ed                	jne    c000befe <Virt::virtualMemorySetup()+0x1e>
c000bf11:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bf16:	6a 0f                	push   0xf
c000bf18:	53                   	push   ebx
c000bf19:	43                   	inc    ebx
c000bf1a:	e8 a9 fd ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf1f:	58                   	pop    eax
c000bf20:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bf26:	5a                   	pop    edx
c000bf27:	75 ed                	jne    c000bf16 <Virt::virtualMemorySetup()+0x36>
c000bf29:	5b                   	pop    ebx
c000bf2a:	c3                   	ret    

c000bf2b <Virt::setupPageSwapping(int)>:
c000bf2b:	53                   	push   ebx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bf33:	a1 e8 8e 02 c0       	mov    eax,ds:0xc0028ee8
c000bf38:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bf3e:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf40:	53                   	push   ebx
c000bf41:	c1 e3 0b             	shl    ebx,0xb
c000bf44:	68 83 4d 02 c0       	push   0xc0024d83
c000bf49:	50                   	push   eax
c000bf4a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bf4d:	89 1d 70 7d 02 c0    	mov    DWORD PTR ds:0xc0027d70,ebx
c000bf53:	c6 05 78 7d 02 c0 43 	mov    BYTE PTR ds:0xc0027d78,0x43
c000bf5a:	c1 eb 08             	shr    ebx,0x8
c000bf5d:	a3 74 7d 02 c0       	mov    ds:0xc0027d74,eax
c000bf62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bf65:	c7 05 6c 7d 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0027d6c,0x8
c000bf6f:	e8 e7 dd ff ff       	call   c0009d5b <malloc>
c000bf74:	83 c4 0c             	add    esp,0xc
c000bf77:	89 c1                	mov    ecx,eax
c000bf79:	a3 4c 8a 02 c0       	mov    ds:0xc0028a4c,eax
c000bf7e:	31 d2                	xor    edx,edx
c000bf80:	a1 70 7d 02 c0       	mov    eax,ds:0xc0027d70
c000bf85:	f7 35 6c 7d 02 c0    	div    DWORD PTR ds:0xc0027d6c
c000bf8b:	c1 e8 05             	shr    eax,0x5
c000bf8e:	50                   	push   eax
c000bf8f:	6a 00                	push   0x0
c000bf91:	51                   	push   ecx
c000bf92:	e8 ed 46 ff ff       	call   c0000684 <memset>
c000bf97:	83 c4 18             	add    esp,0x18
c000bf9a:	5b                   	pop    ebx
c000bf9b:	c3                   	ret    

c000bf9c <VAS::VAS()>:
c000bf9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfa0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bfb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfb6:	a3 50 8a 02 c0       	mov    ds:0xc0028a50,eax
c000bfbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfbf:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bfc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfc7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bfca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfce:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bfd5:	90                   	nop
c000bfd6:	c3                   	ret    
c000bfd7:	90                   	nop

c000bfd8 <VAS::VAS(VAS*)>:
c000bfd8:	83 ec 0c             	sub    esp,0xc
c000bfdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfea:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bff1:	83 ec 0c             	sub    esp,0xc
c000bff4:	68 d4 4b 02 c0       	push   0xc0024bd4
c000bff9:	e8 c7 90 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000bffe:	83 c4 10             	add    esp,0x10
c000c001:	90                   	nop
c000c002:	83 c4 0c             	add    esp,0xc
c000c005:	c3                   	ret    

c000c006 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000c006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c00a:	89 c2                	mov    edx,eax
c000c00c:	c1 e8 0a             	shr    eax,0xa
c000c00f:	c1 ea 16             	shr    edx,0x16
c000c012:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c017:	19 c9                	sbb    ecx,ecx
c000c019:	c1 e2 0c             	shl    edx,0xc
c000c01c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000c022:	25 fc 0f 00 00       	and    eax,0xffc
c000c027:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000c02e:	01 d0                	add    eax,edx
c000c030:	c3                   	ret    
c000c031:	90                   	nop

c000c032 <VAS::getPageTableEntry(unsigned long)>:
c000c032:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c036:	89 ca                	mov    edx,ecx
c000c038:	c1 e9 0a             	shr    ecx,0xa
c000c03b:	c1 ea 16             	shr    edx,0x16
c000c03e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000c044:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000c04a:	c1 e0 0c             	shl    eax,0xc
c000c04d:	8d 04 08             	lea    eax,[eax+ecx*1]
c000c050:	c3                   	ret    

c000c051 <Virt::freeKernelVirtualPages(unsigned long)>:
c000c051:	57                   	push   edi
c000c052:	56                   	push   esi
c000c053:	be 01 00 00 00       	mov    esi,0x1
c000c058:	53                   	push   ebx
c000c059:	83 ec 10             	sub    esp,0x10
c000c05c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c060:	c1 eb 0c             	shr    ebx,0xc
c000c063:	eb 3f                	jmp    c000c0a4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000c065:	83 ec 08             	sub    esp,0x8
c000c068:	57                   	push   edi
c000c069:	ff 35 50 8a 02 c0    	push   DWORD PTR ds:0xc0028a50
c000c06f:	e8 be ff ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000c074:	83 c4 10             	add    esp,0x10
c000c077:	8b 00                	mov    eax,DWORD PTR [eax]
c000c079:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c07d:	f6 c4 04             	test   ah,0x4
c000c080:	75 5f                	jne    c000c0e1 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000c082:	80 fa 04             	cmp    dl,0x4
c000c085:	74 78                	je     c000c0ff <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000c087:	80 fa 02             	cmp    dl,0x2
c000c08a:	0f 84 88 00 00 00    	je     c000c118 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000c090:	80 fa 03             	cmp    dl,0x3
c000c093:	0f 84 ad 00 00 00    	je     c000c146 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000c099:	fe ca                	dec    dl
c000c09b:	0f 84 92 00 00 00    	je     c000c133 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c0a1:	43                   	inc    ebx
c000c0a2:	31 f6                	xor    esi,esi
c000c0a4:	53                   	push   ebx
c000c0a5:	89 df                	mov    edi,ebx
c000c0a7:	e8 51 fc ff ff       	call   c000bcfd <Virt::getPageState(unsigned long)>
c000c0ac:	c1 e7 0c             	shl    edi,0xc
c000c0af:	59                   	pop    ecx
c000c0b0:	84 c0                	test   al,al
c000c0b2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c0b6:	75 ad                	jne    c000c065 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c0b8:	83 ec 0c             	sub    esp,0xc
c000c0bb:	68 9a 4d 02 c0       	push   0xc0024d9a
c000c0c0:	e8 00 90 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000c0c5:	58                   	pop    eax
c000c0c6:	5a                   	pop    edx
c000c0c7:	57                   	push   edi
c000c0c8:	ff 35 50 8a 02 c0    	push   DWORD PTR ds:0xc0028a50
c000c0ce:	e8 5f ff ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0d8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0dc:	f6 c4 04             	test   ah,0x4
c000c0df:	74 c0                	je     c000c0a1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c0e1:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c0e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0ea:	83 ec 0c             	sub    esp,0xc
c000c0ed:	50                   	push   eax
c000c0ee:	e8 9c e2 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000c0f3:	83 c4 10             	add    esp,0x10
c000c0f6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0fa:	80 fa 04             	cmp    dl,0x4
c000c0fd:	75 88                	jne    c000c087 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c0ff:	89 f0                	mov    eax,esi
c000c101:	84 c0                	test   al,al
c000c103:	75 47                	jne    c000c14c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c105:	c7 44 24 20 f8 4b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024bf8
c000c10d:	83 c4 10             	add    esp,0x10
c000c110:	5b                   	pop    ebx
c000c111:	5e                   	pop    esi
c000c112:	5f                   	pop    edi
c000c113:	e9 ad 8f 00 00       	jmp    c00150c5 <Krnl::panic(char const*)>
c000c118:	89 f0                	mov    eax,esi
c000c11a:	84 c0                	test   al,al
c000c11c:	75 15                	jne    c000c133 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c11e:	83 ec 0c             	sub    esp,0xc
c000c121:	68 b6 4d 02 c0       	push   0xc0024db6
c000c126:	e8 9a 8f 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000c12b:	83 c4 10             	add    esp,0x10
c000c12e:	e9 6e ff ff ff       	jmp    c000c0a1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c133:	83 ec 08             	sub    esp,0x8
c000c136:	6a 00                	push   0x0
c000c138:	53                   	push   ebx
c000c139:	e8 8a fb ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c13e:	83 c4 10             	add    esp,0x10
c000c141:	e9 5b ff ff ff       	jmp    c000c0a1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c146:	89 f0                	mov    eax,esi
c000c148:	84 c0                	test   al,al
c000c14a:	75 15                	jne    c000c161 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c14c:	83 ec 08             	sub    esp,0x8
c000c14f:	6a 00                	push   0x0
c000c151:	53                   	push   ebx
c000c152:	e8 71 fb ff ff       	call   c000bcc8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c157:	83 c4 10             	add    esp,0x10
c000c15a:	83 c4 10             	add    esp,0x10
c000c15d:	5b                   	pop    ebx
c000c15e:	5e                   	pop    esi
c000c15f:	5f                   	pop    edi
c000c160:	c3                   	ret    
c000c161:	c7 44 24 20 d2 4d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024dd2
c000c169:	83 c4 10             	add    esp,0x10
c000c16c:	5b                   	pop    ebx
c000c16d:	5e                   	pop    esi
c000c16e:	5f                   	pop    edi
c000c16f:	e9 51 8f 00 00       	jmp    c00150c5 <Krnl::panic(char const*)>

c000c174 <VAS::freeAllocatedPages(unsigned long)>:
c000c174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c178:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c17c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c180:	74 09                	je     c000c18b <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c182:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c186:	e9 c6 fe ff ff       	jmp    c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c000c18b:	c7 44 24 04 1c 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c1c
c000c193:	e9 af 0e 00 00       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>

c000c198 <VAS::virtualToPhysical(unsigned long)>:
c000c198:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c19c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c1a0:	e8 8d fe ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000c1a5:	5a                   	pop    edx
c000c1a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1a8:	59                   	pop    ecx
c000c1a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c1ae:	c3                   	ret    
c000c1af:	90                   	nop

c000c1b0 <VAS::reflagRange(unsigned long, int, int, int)>:
c000c1b0:	55                   	push   ebp
c000c1b1:	57                   	push   edi
c000c1b2:	56                   	push   esi
c000c1b3:	53                   	push   ebx
c000c1b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1b8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c1bc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c1c0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c1c4:	85 db                	test   ebx,ebx
c000c1c6:	7e 22                	jle    c000c1ea <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c1c8:	c1 e3 0c             	shl    ebx,0xc
c000c1cb:	01 f3                	add    ebx,esi
c000c1cd:	56                   	push   esi
c000c1ce:	81 c6 00 10 00 00    	add    esi,0x1000
c000c1d4:	55                   	push   ebp
c000c1d5:	e8 58 fe ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000c1da:	5a                   	pop    edx
c000c1db:	59                   	pop    ecx
c000c1dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1de:	21 f9                	and    ecx,edi
c000c1e0:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c1e4:	39 f3                	cmp    ebx,esi
c000c1e6:	89 08                	mov    DWORD PTR [eax],ecx
c000c1e8:	75 e3                	jne    c000c1cd <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c1ea:	5b                   	pop    ebx
c000c1eb:	5e                   	pop    esi
c000c1ec:	5f                   	pop    edi
c000c1ed:	5d                   	pop    ebp
c000c1ee:	c3                   	ret    
c000c1ef:	90                   	nop

c000c1f0 <VAS::setToWriteCombining(unsigned long, int)>:
c000c1f0:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000c1f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c1fb:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c202:	75 01                	jne    c000c205 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c204:	c3                   	ret    
c000c205:	68 80 00 00 00       	push   0x80
c000c20a:	6a ff                	push   0xffffffff
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	e8 93 ff ff ff       	call   c000c1b0 <VAS::reflagRange(unsigned long, int, int, int)>
c000c21d:	83 c4 14             	add    esp,0x14
c000c220:	c3                   	ret    
c000c221:	90                   	nop

c000c222 <VAS::mapOtherVASIn(bool, VAS*)>:
c000c222:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c227:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c22b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c22e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c232:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c235:	19 c0                	sbb    eax,eax
c000c237:	83 ca 03             	or     edx,0x3
c000c23a:	83 e0 fc             	and    eax,0xfffffffc
c000c23d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c244:	0f 20 d8             	mov    eax,cr3
c000c247:	0f 22 d8             	mov    cr3,eax
c000c24a:	c3                   	ret    
c000c24b:	90                   	nop

c000c24c <VAS::~VAS()>:
c000c24c:	83 ec 2c             	sub    esp,0x2c
c000c24f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c257:	fa                   	cli    
c000c258:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000c25d:	40                   	inc    eax
c000c25e:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000c263:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c268:	8b 00                	mov    eax,DWORD PTR [eax]
c000c26a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c26d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c273:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c277:	6a 01                	push   0x1
c000c279:	50                   	push   eax
c000c27a:	e8 a3 ff ff ff       	call   c000c222 <VAS::mapOtherVASIn(bool, VAS*)>
c000c27f:	83 c4 0c             	add    esp,0xc
c000c282:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c28a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c292:	0f 8f d4 00 00 00    	jg     c000c36c <VAS::~VAS()+0x120>
c000c298:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c29c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c29f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2a3:	c1 e2 02             	shl    edx,0x2
c000c2a6:	01 d0                	add    eax,edx
c000c2a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2b2:	83 e0 01             	and    eax,0x1
c000c2b5:	0f 84 a8 00 00 00    	je     c000c363 <VAS::~VAS()+0x117>
c000c2bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c2c3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c2cb:	7f 72                	jg     c000c33f <VAS::~VAS()+0xf3>
c000c2cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2d1:	c1 e0 0a             	shl    eax,0xa
c000c2d4:	89 c2                	mov    edx,eax
c000c2d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c2da:	01 d0                	add    eax,edx
c000c2dc:	c1 e0 0c             	shl    eax,0xc
c000c2df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c2e3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c2e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c2ed:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c2f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2f7:	6a 01                	push   0x1
c000c2f9:	50                   	push   eax
c000c2fa:	e8 07 fd ff ff       	call   c000c006 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c2ff:	83 c4 0c             	add    esp,0xc
c000c302:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c306:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c30a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c30c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c314:	25 01 04 00 00       	and    eax,0x401
c000c319:	3d 01 04 00 00       	cmp    eax,0x401
c000c31e:	75 19                	jne    c000c339 <VAS::~VAS()+0xed>
c000c320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c324:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c329:	83 ec 0c             	sub    esp,0xc
c000c32c:	50                   	push   eax
c000c32d:	e8 5d e0 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000c332:	83 c4 10             	add    esp,0x10
c000c335:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c339:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c33d:	eb 84                	jmp    c000c2c3 <VAS::~VAS()+0x77>
c000c33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c343:	25 00 04 00 00       	and    eax,0x400
c000c348:	74 19                	je     c000c363 <VAS::~VAS()+0x117>
c000c34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c353:	83 ec 0c             	sub    esp,0xc
c000c356:	50                   	push   eax
c000c357:	e8 33 e0 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000c35c:	83 c4 10             	add    esp,0x10
c000c35f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c363:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c367:	e9 1e ff ff ff       	jmp    c000c28a <VAS::~VAS()+0x3e>
c000c36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c370:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c373:	83 ec 0c             	sub    esp,0xc
c000c376:	50                   	push   eax
c000c377:	e8 d5 fc ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c000c37c:	83 c4 10             	add    esp,0x10
c000c37f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c383:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c386:	83 ec 0c             	sub    esp,0xc
c000c389:	50                   	push   eax
c000c38a:	e8 00 e0 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000c38f:	83 c4 10             	add    esp,0x10
c000c392:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c396:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c39a:	c1 e0 02             	shl    eax,0x2
c000c39d:	83 ec 08             	sub    esp,0x8
c000c3a0:	50                   	push   eax
c000c3a1:	68 40 4c 02 c0       	push   0xc0024c40
c000c3a6:	e8 9c 0c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000c3ab:	83 c4 10             	add    esp,0x10
c000c3ae:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000c3b3:	48                   	dec    eax
c000c3b4:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000c3b9:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000c3be:	85 c0                	test   eax,eax
c000c3c0:	75 01                	jne    c000c3c3 <VAS::~VAS()+0x177>
c000c3c2:	fb                   	sti    
c000c3c3:	90                   	nop
c000c3c4:	83 c4 2c             	add    esp,0x2c
c000c3c7:	c3                   	ret    

c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c3c8:	55                   	push   ebp
c000c3c9:	57                   	push   edi
c000c3ca:	56                   	push   esi
c000c3cb:	53                   	push   ebx
c000c3cc:	83 ec 1c             	sub    esp,0x1c
c000c3cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c3d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c3d7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c3dd:	77 08                	ja     c000c3e7 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c3df:	0f 20 d8             	mov    eax,cr3
c000c3e2:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c3e5:	75 47                	jne    c000c42e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c3e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c3eb:	09 d8                	or     eax,ebx
c000c3ed:	a9 ff 0f 00 00       	test   eax,0xfff
c000c3f2:	75 57                	jne    c000c44b <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c3f4:	89 de                	mov    esi,ebx
c000c3f6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c3f9:	c1 ee 16             	shr    esi,0x16
c000c3fc:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c403:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c407:	74 54                	je     c000c45d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c409:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c40d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c413:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c417:	c1 e6 0c             	shl    esi,0xc
c000c41a:	c1 eb 0a             	shr    ebx,0xa
c000c41d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c423:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c426:	83 c4 1c             	add    esp,0x1c
c000c429:	5b                   	pop    ebx
c000c42a:	5e                   	pop    esi
c000c42b:	5f                   	pop    edi
c000c42c:	5d                   	pop    ebp
c000c42d:	c3                   	ret    
c000c42e:	83 ec 0c             	sub    esp,0xc
c000c431:	68 60 4c 02 c0       	push   0xc0024c60
c000c436:	e8 0c 0c 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000c43b:	83 c4 10             	add    esp,0x10
c000c43e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c442:	09 d8                	or     eax,ebx
c000c444:	a9 ff 0f 00 00       	test   eax,0xfff
c000c449:	74 a9                	je     c000c3f4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c44b:	83 ec 0c             	sub    esp,0xc
c000c44e:	68 c8 4c 02 c0       	push   0xc0024cc8
c000c453:	e8 6d 8c 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000c458:	83 c4 10             	add    esp,0x10
c000c45b:	eb 97                	jmp    c000c3f4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c461:	e8 ac df ff ff       	call   c000a412 <Phys::allocatePage()>
c000c466:	83 ec 0c             	sub    esp,0xc
c000c469:	89 c5                	mov    ebp,eax
c000c46b:	8b 0d 50 8a 02 c0    	mov    ecx,DWORD PTR ds:0xc0028a50
c000c471:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c475:	6a 01                	push   0x1
c000c477:	e8 a5 f8 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000c47c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c483:	6a 01                	push   0x1
c000c485:	50                   	push   eax
c000c486:	55                   	push   ebp
c000c487:	81 cd 07 04 00 00    	or     ebp,0x407
c000c48d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c491:	51                   	push   ecx
c000c492:	e8 27 02 00 00       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c497:	83 c4 1c             	add    esp,0x1c
c000c49a:	68 00 10 00 00       	push   0x1000
c000c49f:	6a 00                	push   0x0
c000c4a1:	50                   	push   eax
c000c4a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4a6:	e8 d9 41 ff ff       	call   c0000684 <memset>
c000c4ab:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c4af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c4b2:	e8 9a fb ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c000c4b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4bb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c4be:	83 c4 10             	add    esp,0x10
c000c4c1:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c4c4:	e9 40 ff ff ff       	jmp    c000c409 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c4c9:	90                   	nop

c000c4ca <VAS::allocatePages(int, int)>:
c000c4ca:	55                   	push   ebp
c000c4cb:	57                   	push   edi
c000c4cc:	56                   	push   esi
c000c4cd:	53                   	push   ebx
c000c4ce:	83 ec 1c             	sub    esp,0x1c
c000c4d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c4d5:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000c4da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c4e0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c4e6:	83 e0 01             	and    eax,0x1
c000c4e9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c4ed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c4f1:	0f 85 cc 00 00 00    	jne    c000c5c3 <VAS::allocatePages(int, int)+0xf9>
c000c4f7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c4fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c4fe:	85 c0                	test   eax,eax
c000c500:	0f 84 a1 00 00 00    	je     c000c5a7 <VAS::allocatePages(int, int)+0xdd>
c000c506:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c50a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c50e:	c1 e6 0c             	shl    esi,0xc
c000c511:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c515:	85 c0                	test   eax,eax
c000c517:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c51a:	7e 33                	jle    c000c54f <VAS::allocatePages(int, int)+0x85>
c000c51c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c520:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c524:	81 cd 00 04 00 00    	or     ebp,0x400
c000c52a:	e8 e3 de ff ff       	call   c000a412 <Phys::allocatePage()>
c000c52f:	55                   	push   ebp
c000c530:	53                   	push   ebx
c000c531:	50                   	push   eax
c000c532:	57                   	push   edi
c000c533:	e8 90 fe ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c538:	83 c4 10             	add    esp,0x10
c000c53b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c540:	74 03                	je     c000c545 <VAS::allocatePages(int, int)+0x7b>
c000c542:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c545:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c54b:	39 de                	cmp    esi,ebx
c000c54d:	75 db                	jne    c000c52a <VAS::allocatePages(int, int)+0x60>
c000c54f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c554:	75 12                	jne    c000c568 <VAS::allocatePages(int, int)+0x9e>
c000c556:	0f 20 d8             	mov    eax,cr3
c000c559:	0f 22 d8             	mov    cr3,eax
c000c55c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c560:	83 c4 1c             	add    esp,0x1c
c000c563:	5b                   	pop    ebx
c000c564:	5e                   	pop    esi
c000c565:	5f                   	pop    edi
c000c566:	5d                   	pop    ebp
c000c567:	c3                   	ret    
c000c568:	c1 ee 0a             	shr    esi,0xa
c000c56b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c56f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c575:	c1 eb 0a             	shr    ebx,0xa
c000c578:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c57e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c584:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c58a:	39 c3                	cmp    ebx,eax
c000c58c:	77 ce                	ja     c000c55c <VAS::allocatePages(int, int)+0x92>
c000c58e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c591:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c597:	39 d8                	cmp    eax,ebx
c000c599:	73 f3                	jae    c000c58e <VAS::allocatePages(int, int)+0xc4>
c000c59b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c59f:	83 c4 1c             	add    esp,0x1c
c000c5a2:	5b                   	pop    ebx
c000c5a3:	5e                   	pop    esi
c000c5a4:	5f                   	pop    edi
c000c5a5:	5d                   	pop    ebp
c000c5a6:	c3                   	ret    
c000c5a7:	83 ec 0c             	sub    esp,0xc
c000c5aa:	68 ec 4c 02 c0       	push   0xc0024cec
c000c5af:	e8 11 8b 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000c5b4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c5b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5bb:	83 c4 10             	add    esp,0x10
c000c5be:	e9 43 ff ff ff       	jmp    c000c506 <VAS::allocatePages(int, int)+0x3c>
c000c5c3:	83 ec 0c             	sub    esp,0xc
c000c5c6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c5ca:	e8 52 f7 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000c5cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5d3:	83 c4 10             	add    esp,0x10
c000c5d6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c5db:	0f 87 9b 00 00 00    	ja     c000c67c <VAS::allocatePages(int, int)+0x1b2>
c000c5e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c5e5:	85 d2                	test   edx,edx
c000c5e7:	7e 3c                	jle    c000c625 <VAS::allocatePages(int, int)+0x15b>
c000c5e9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c5ed:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c5f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c5f5:	c1 e5 0c             	shl    ebp,0xc
c000c5f8:	81 ce 00 04 00 00    	or     esi,0x400
c000c5fe:	01 dd                	add    ebp,ebx
c000c600:	e8 0d de ff ff       	call   c000a412 <Phys::allocatePage()>
c000c605:	56                   	push   esi
c000c606:	53                   	push   ebx
c000c607:	50                   	push   eax
c000c608:	57                   	push   edi
c000c609:	e8 ba fd ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c60e:	83 c4 10             	add    esp,0x10
c000c611:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c616:	74 03                	je     c000c61b <VAS::allocatePages(int, int)+0x151>
c000c618:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c61b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c621:	39 dd                	cmp    ebp,ebx
c000c623:	75 db                	jne    c000c600 <VAS::allocatePages(int, int)+0x136>
c000c625:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c62a:	0f 84 26 ff ff ff    	je     c000c556 <VAS::allocatePages(int, int)+0x8c>
c000c630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c634:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c638:	89 d3                	mov    ebx,edx
c000c63a:	c1 e0 0c             	shl    eax,0xc
c000c63d:	c1 eb 0a             	shr    ebx,0xa
c000c640:	01 d0                	add    eax,edx
c000c642:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c648:	c1 e8 0a             	shr    eax,0xa
c000c64b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c651:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c656:	2d 00 00 40 00       	sub    eax,0x400000
c000c65b:	39 c3                	cmp    ebx,eax
c000c65d:	0f 87 f9 fe ff ff    	ja     c000c55c <VAS::allocatePages(int, int)+0x92>
c000c663:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c666:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c66c:	39 d8                	cmp    eax,ebx
c000c66e:	73 f3                	jae    c000c663 <VAS::allocatePages(int, int)+0x199>
c000c670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c674:	83 c4 1c             	add    esp,0x1c
c000c677:	5b                   	pop    ebx
c000c678:	5e                   	pop    esi
c000c679:	5f                   	pop    edi
c000c67a:	5d                   	pop    ebp
c000c67b:	c3                   	ret    
c000c67c:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000c681:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c687:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c68e:	0f 84 4d ff ff ff    	je     c000c5e1 <VAS::allocatePages(int, int)+0x117>
c000c694:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c69c:	e9 40 ff ff ff       	jmp    c000c5e1 <VAS::allocatePages(int, int)+0x117>
c000c6a1:	90                   	nop

c000c6a2 <VAS::setCPUSpecific(unsigned long)>:
c000c6a2:	83 ec 0c             	sub    esp,0xc
c000c6a5:	6a 05                	push   0x5
c000c6a7:	68 00 00 40 c2       	push   0xc2400000
c000c6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6b4:	e8 0f fd ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c6b9:	83 c4 1c             	add    esp,0x1c
c000c6bc:	c3                   	ret    
c000c6bd:	90                   	nop

c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c6be:	55                   	push   ebp
c000c6bf:	57                   	push   edi
c000c6c0:	56                   	push   esi
c000c6c1:	53                   	push   ebx
c000c6c2:	83 ec 1c             	sub    esp,0x1c
c000c6c5:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000c6ca:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c6ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6d4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c6d8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c6de:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c6e2:	83 e0 01             	and    eax,0x1
c000c6e5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c6e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6ed:	85 c0                	test   eax,eax
c000c6ef:	7e 39                	jle    c000c72a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c6f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6f5:	89 f3                	mov    ebx,esi
c000c6f7:	c1 e0 0c             	shl    eax,0xc
c000c6fa:	01 f0                	add    eax,esi
c000c6fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c700:	55                   	push   ebp
c000c701:	53                   	push   ebx
c000c702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c706:	29 f0                	sub    eax,esi
c000c708:	01 d8                	add    eax,ebx
c000c70a:	50                   	push   eax
c000c70b:	57                   	push   edi
c000c70c:	e8 b7 fc ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c711:	83 c4 10             	add    esp,0x10
c000c714:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c719:	74 03                	je     c000c71e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c71b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c71e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c724:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c728:	75 d6                	jne    c000c700 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c72a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c72f:	75 10                	jne    c000c741 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c731:	0f 20 d8             	mov    eax,cr3
c000c734:	0f 22 d8             	mov    cr3,eax
c000c737:	83 c4 1c             	add    esp,0x1c
c000c73a:	89 f0                	mov    eax,esi
c000c73c:	5b                   	pop    ebx
c000c73d:	5e                   	pop    esi
c000c73e:	5f                   	pop    edi
c000c73f:	5d                   	pop    ebp
c000c740:	c3                   	ret    
c000c741:	89 f3                	mov    ebx,esi
c000c743:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c747:	c1 eb 0a             	shr    ebx,0xa
c000c74a:	c1 e0 0c             	shl    eax,0xc
c000c74d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c753:	01 f0                	add    eax,esi
c000c755:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c75b:	c1 e8 0a             	shr    eax,0xa
c000c75e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c763:	2d 00 00 40 00       	sub    eax,0x400000
c000c768:	39 c3                	cmp    ebx,eax
c000c76a:	77 cb                	ja     c000c737 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c76c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c76f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c775:	39 d8                	cmp    eax,ebx
c000c777:	73 f3                	jae    c000c76c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c779:	83 c4 1c             	add    esp,0x1c
c000c77c:	89 f0                	mov    eax,esi
c000c77e:	5b                   	pop    ebx
c000c77f:	5e                   	pop    esi
c000c780:	5f                   	pop    edi
c000c781:	5d                   	pop    ebp
c000c782:	c3                   	ret    
c000c783:	90                   	nop

c000c784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c784:	55                   	push   ebp
c000c785:	57                   	push   edi
c000c786:	56                   	push   esi
c000c787:	53                   	push   ebx
c000c788:	83 ec 1c             	sub    esp,0x1c
c000c78b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c78f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c793:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c797:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c79b:	a9 ff 0f 00 00       	test   eax,0xfff
c000c7a0:	75 4a                	jne    c000c7ec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c7a2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c7a6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c7a9:	c1 eb 16             	shr    ebx,0x16
c000c7ac:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c7b3:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c7b7:	74 4d                	je     c000c806 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c7b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7bd:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c7c1:	c1 e8 0a             	shr    eax,0xa
c000c7c4:	80 fa 01             	cmp    dl,0x1
c000c7c7:	19 d2                	sbb    edx,edx
c000c7c9:	c1 e3 0c             	shl    ebx,0xc
c000c7cc:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c7d0:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c7d6:	25 fc 0f 00 00       	and    eax,0xffc
c000c7db:	01 d8                	add    eax,ebx
c000c7dd:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c7e4:	83 c4 1c             	add    esp,0x1c
c000c7e7:	5b                   	pop    ebx
c000c7e8:	5e                   	pop    esi
c000c7e9:	5f                   	pop    edi
c000c7ea:	5d                   	pop    ebp
c000c7eb:	c3                   	ret    
c000c7ec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	68 18 4d 02 c0       	push   0xc0024d18
c000c7f8:	e8 c8 88 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000c7fd:	83 c4 10             	add    esp,0x10
c000c800:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c804:	eb 9c                	jmp    c000c7a2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c806:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c80a:	e8 03 dc ff ff       	call   c000a412 <Phys::allocatePage()>
c000c80f:	83 ec 0c             	sub    esp,0xc
c000c812:	89 c5                	mov    ebp,eax
c000c814:	8b 0d 50 8a 02 c0    	mov    ecx,DWORD PTR ds:0xc0028a50
c000c81a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c81e:	6a 01                	push   0x1
c000c820:	e8 fc f4 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000c825:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c82c:	6a 01                	push   0x1
c000c82e:	50                   	push   eax
c000c82f:	55                   	push   ebp
c000c830:	81 cd 07 04 00 00    	or     ebp,0x407
c000c836:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c83a:	51                   	push   ecx
c000c83b:	e8 7e fe ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c840:	83 c4 1c             	add    esp,0x1c
c000c843:	68 00 10 00 00       	push   0x1000
c000c848:	6a 00                	push   0x0
c000c84a:	50                   	push   eax
c000c84b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c84f:	e8 30 3e ff ff       	call   c0000684 <memset>
c000c854:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c858:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c85b:	e8 f1 f7 ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c000c860:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c863:	83 c4 10             	add    esp,0x10
c000c866:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c869:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c86d:	e9 47 ff ff ff       	jmp    c000c7b9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c872 <VAS::VAS(bool)>:
c000c872:	53                   	push   ebx
c000c873:	83 ec 28             	sub    esp,0x28
c000c876:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c87a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c87e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c882:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c889:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c88d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c894:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c898:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c89c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c89f:	e8 6e db ff ff       	call   c000a412 <Phys::allocatePage()>
c000c8a4:	89 c2                	mov    edx,eax
c000c8a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8aa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c8ad:	8b 1d 50 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a50
c000c8b3:	83 ec 0c             	sub    esp,0xc
c000c8b6:	6a 01                	push   0x1
c000c8b8:	e8 64 f4 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c000c8bd:	83 c4 10             	add    esp,0x10
c000c8c0:	89 c2                	mov    edx,eax
c000c8c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c8c9:	83 ec 0c             	sub    esp,0xc
c000c8cc:	6a 03                	push   0x3
c000c8ce:	6a 01                	push   0x1
c000c8d0:	52                   	push   edx
c000c8d1:	50                   	push   eax
c000c8d2:	53                   	push   ebx
c000c8d3:	e8 e6 fd ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8d8:	83 c4 20             	add    esp,0x20
c000c8db:	89 c2                	mov    edx,eax
c000c8dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c8e4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c8ec:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c8f4:	7f 1c                	jg     c000c912 <VAS::VAS(bool)+0xa0>
c000c8f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c901:	c1 e2 02             	shl    edx,0x2
c000c904:	01 d0                	add    eax,edx
c000c906:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c90c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c910:	eb da                	jmp    c000c8ec <VAS::VAS(bool)+0x7a>
c000c912:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c91a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c922:	7f 7a                	jg     c000c99e <VAS::VAS(bool)+0x12c>
c000c924:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c928:	2d 00 02 00 00       	sub    eax,0x200
c000c92d:	c1 e0 0c             	shl    eax,0xc
c000c930:	83 c8 03             	or     eax,0x3
c000c933:	89 c2                	mov    edx,eax
c000c935:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000c93a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c940:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c946:	83 e0 10             	and    eax,0x10
c000c949:	84 c0                	test   al,al
c000c94b:	74 07                	je     c000c954 <VAS::VAS(bool)+0xe2>
c000c94d:	b8 00 01 00 00       	mov    eax,0x100
c000c952:	eb 05                	jmp    c000c959 <VAS::VAS(bool)+0xe7>
c000c954:	b8 00 00 00 00       	mov    eax,0x0
c000c959:	09 d0                	or     eax,edx
c000c95b:	89 c1                	mov    ecx,eax
c000c95d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c961:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c964:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c968:	c1 e2 02             	shl    edx,0x2
c000c96b:	01 d0                	add    eax,edx
c000c96d:	89 ca                	mov    edx,ecx
c000c96f:	89 10                	mov    DWORD PTR [eax],edx
c000c971:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c975:	2d 40 03 00 00       	sub    eax,0x340
c000c97a:	83 f8 7f             	cmp    eax,0x7f
c000c97d:	77 16                	ja     c000c995 <VAS::VAS(bool)+0x123>
c000c97f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c983:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c986:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c98a:	c1 e2 02             	shl    edx,0x2
c000c98d:	01 d0                	add    eax,edx
c000c98f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c995:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c999:	e9 7c ff ff ff       	jmp    c000c91a <VAS::VAS(bool)+0xa8>
c000c99e:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000c9a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9a9:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c9af:	83 e0 10             	and    eax,0x10
c000c9b2:	84 c0                	test   al,al
c000c9b4:	74 07                	je     c000c9bd <VAS::VAS(bool)+0x14b>
c000c9b6:	b8 03 41 00 00       	mov    eax,0x4103
c000c9bb:	eb 05                	jmp    c000c9c2 <VAS::VAS(bool)+0x150>
c000c9bd:	b8 03 40 00 00       	mov    eax,0x4003
c000c9c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9c6:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c9c9:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c9cf:	89 02                	mov    DWORD PTR [edx],eax
c000c9d1:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000c9d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9dc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c9e2:	83 ec 08             	sub    esp,0x8
c000c9e5:	50                   	push   eax
c000c9e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9ea:	e8 b3 fc ff ff       	call   c000c6a2 <VAS::setCPUSpecific(unsigned long)>
c000c9ef:	83 c4 10             	add    esp,0x10
c000c9f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9f6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c9f9:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000c9fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca04:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca0a:	83 e0 10             	and    eax,0x10
c000ca0d:	84 c0                	test   al,al
c000ca0f:	74 07                	je     c000ca18 <VAS::VAS(bool)+0x1a6>
c000ca11:	b8 00 01 00 00       	mov    eax,0x100
c000ca16:	eb 05                	jmp    c000ca1d <VAS::VAS(bool)+0x1ab>
c000ca18:	b8 00 00 00 00       	mov    eax,0x0
c000ca1d:	09 c2                	or     edx,eax
c000ca1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca26:	05 fc 0f 00 00       	add    eax,0xffc
c000ca2b:	83 ca 03             	or     edx,0x3
c000ca2e:	89 10                	mov    DWORD PTR [eax],edx
c000ca30:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000ca35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca3b:	83 ec 0c             	sub    esp,0xc
c000ca3e:	50                   	push   eax
c000ca3f:	e8 76 1e 00 00       	call   c000e8ba <Device::getName()>
c000ca44:	83 c4 10             	add    esp,0x10
c000ca47:	83 ec 08             	sub    esp,0x8
c000ca4a:	68 ec 4d 02 c0       	push   0xc0024dec
c000ca4f:	50                   	push   eax
c000ca50:	e8 77 3d ff ff       	call   c00007cc <strcmp>
c000ca55:	83 c4 10             	add    esp,0x10
c000ca58:	85 c0                	test   eax,eax
c000ca5a:	0f 94 c0             	sete   al
c000ca5d:	84 c0                	test   al,al
c000ca5f:	0f 84 87 00 00 00    	je     c000caec <VAS::VAS(bool)+0x27a>
c000ca65:	fa                   	cli    
c000ca66:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000ca6b:	40                   	inc    eax
c000ca6c:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000ca71:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000ca76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca7c:	05 7c 09 00 00       	add    eax,0x97c
c000ca81:	83 ec 0c             	sub    esp,0xc
c000ca84:	50                   	push   eax
c000ca85:	e8 c0 cd ff ff       	call   c000984a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ca8a:	83 c4 10             	add    esp,0x10
c000ca8d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca92:	89 c3                	mov    ebx,eax
c000ca94:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000ca99:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca9f:	05 7c 09 00 00       	add    eax,0x97c
c000caa4:	83 ec 0c             	sub    esp,0xc
c000caa7:	50                   	push   eax
c000caa8:	e8 9d cd ff ff       	call   c000984a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000caad:	83 c4 10             	add    esp,0x10
c000cab0:	83 ec 08             	sub    esp,0x8
c000cab3:	50                   	push   eax
c000cab4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cab8:	e8 75 f5 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000cabd:	83 c4 10             	add    esp,0x10
c000cac0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cac2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cac7:	6a 11                	push   0x11
c000cac9:	53                   	push   ebx
c000caca:	50                   	push   eax
c000cacb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cacf:	e8 f4 f8 ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000cad4:	83 c4 10             	add    esp,0x10
c000cad7:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000cadc:	48                   	dec    eax
c000cadd:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000cae2:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000cae7:	85 c0                	test   eax,eax
c000cae9:	75 01                	jne    c000caec <VAS::VAS(bool)+0x27a>
c000caeb:	fb                   	sti    
c000caec:	90                   	nop
c000caed:	83 c4 28             	add    esp,0x28
c000caf0:	5b                   	pop    ebx
c000caf1:	c3                   	ret    

c000caf2 <VAS::evict(unsigned long)>:
c000caf2:	55                   	push   ebp
c000caf3:	57                   	push   edi
c000caf4:	56                   	push   esi
c000caf5:	53                   	push   ebx
c000caf6:	83 ec 1c             	sub    esp,0x1c
c000caf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cafd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cb01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb05:	e8 58 f3 ff ff       	call   c000be62 <Virt::allocateSwapfilePage()>
c000cb0a:	89 c7                	mov    edi,eax
c000cb0c:	a1 6c 7d 02 c0       	mov    eax,ds:0xc0027d6c
c000cb11:	85 c0                	test   eax,eax
c000cb13:	7e 3d                	jle    c000cb52 <VAS::evict(unsigned long)+0x60>
c000cb15:	89 ee                	mov    esi,ebp
c000cb17:	31 db                	xor    ebx,ebx
c000cb19:	83 ec 0c             	sub    esp,0xc
c000cb1c:	57                   	push   edi
c000cb1d:	e8 2e f3 ff ff       	call   c000be50 <Virt::swapIDToSector(unsigned long)>
c000cb22:	89 34 24             	mov    DWORD PTR [esp],esi
c000cb25:	01 d8                	add    eax,ebx
c000cb27:	6a 01                	push   0x1
c000cb29:	31 d2                	xor    edx,edx
c000cb2b:	43                   	inc    ebx
c000cb2c:	52                   	push   edx
c000cb2d:	81 c6 00 02 00 00    	add    esi,0x200
c000cb33:	50                   	push   eax
c000cb34:	0f be 05 78 7d 02 c0 	movsx  eax,BYTE PTR ds:0xc0027d78
c000cb3b:	ff 34 85 dc 8d 02 c0 	push   DWORD PTR [eax*4-0x3ffd7224]
c000cb42:	e8 8b 3e 00 00       	call   c00109d2 <LogicalDisk::write(unsigned long long, int, void*)>
c000cb47:	83 c4 20             	add    esp,0x20
c000cb4a:	39 1d 6c 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d6c,ebx
c000cb50:	7f c7                	jg     c000cb19 <VAS::evict(unsigned long)+0x27>
c000cb52:	83 ec 08             	sub    esp,0x8
c000cb55:	c1 e7 0b             	shl    edi,0xb
c000cb58:	55                   	push   ebp
c000cb59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb5d:	e8 d0 f4 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000cb62:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb64:	89 d3                	mov    ebx,edx
c000cb66:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cb6c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cb72:	09 d7                	or     edi,edx
c000cb74:	89 38                	mov    DWORD PTR [eax],edi
c000cb76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cb79:	ff 05 48 8a 02 c0    	inc    DWORD PTR ds:0xc0028a48
c000cb7f:	e8 0b d8 ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c000cb84:	0f 20 d8             	mov    eax,cr3
c000cb87:	0f 22 d8             	mov    cr3,eax
c000cb8a:	ff 35 48 8a 02 c0    	push   DWORD PTR ds:0xc0028a48
c000cb90:	55                   	push   ebp
c000cb91:	53                   	push   ebx
c000cb92:	68 3c 4d 02 c0       	push   0xc0024d3c
c000cb97:	e8 ab 04 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cb9c:	a1 44 8a 02 c0       	mov    eax,ds:0xc0028a44
c000cba1:	c7 44 24 50 fa 4d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0024dfa
c000cba9:	8d 50 01             	lea    edx,[eax+0x1]
c000cbac:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cbb0:	89 15 44 8a 02 c0    	mov    DWORD PTR ds:0xc0028a44,edx
c000cbb6:	83 c4 3c             	add    esp,0x3c
c000cbb9:	5b                   	pop    ebx
c000cbba:	5e                   	pop    esi
c000cbbb:	5f                   	pop    edi
c000cbbc:	5d                   	pop    ebp
c000cbbd:	e9 85 04 00 00       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>

c000cbc2 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cbc2:	55                   	push   ebp
c000cbc3:	57                   	push   edi
c000cbc4:	56                   	push   esi
c000cbc5:	53                   	push   ebx
c000cbc6:	83 ec 14             	sub    esp,0x14
c000cbc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcd:	68 0b 4e 02 c0       	push   0xc0024e0b
c000cbd2:	e8 70 04 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cbd7:	83 c4 10             	add    esp,0x10
c000cbda:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cbde:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cbe4:	74 20                	je     c000cc06 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbe6:	83 ec 08             	sub    esp,0x8
c000cbe9:	55                   	push   ebp
c000cbea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbee:	e8 3f f4 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000cbf3:	83 c4 10             	add    esp,0x10
c000cbf6:	89 c3                	mov    ebx,eax
c000cbf8:	85 c0                	test   eax,eax
c000cbfa:	74 0a                	je     c000cc06 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbfc:	8b 38                	mov    edi,DWORD PTR [eax]
c000cbfe:	f7 c7 01 00 00 00    	test   edi,0x1
c000cc04:	74 0a                	je     c000cc10 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cc06:	31 c0                	xor    eax,eax
c000cc08:	83 c4 0c             	add    esp,0xc
c000cc0b:	5b                   	pop    ebx
c000cc0c:	5e                   	pop    esi
c000cc0d:	5f                   	pop    edi
c000cc0e:	5d                   	pop    ebp
c000cc0f:	c3                   	ret    
c000cc10:	e8 fd d7 ff ff       	call   c000a412 <Phys::allocatePage()>
c000cc15:	c1 ef 0b             	shr    edi,0xb
c000cc18:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc1a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cc20:	09 c2                	or     edx,eax
c000cc22:	81 ca 01 08 00 00    	or     edx,0x801
c000cc28:	89 13                	mov    DWORD PTR [ebx],edx
c000cc2a:	8b 0d 6c 7d 02 c0    	mov    ecx,DWORD PTR ds:0xc0027d6c
c000cc30:	85 c9                	test   ecx,ecx
c000cc32:	7e 3d                	jle    c000cc71 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cc34:	89 ee                	mov    esi,ebp
c000cc36:	31 db                	xor    ebx,ebx
c000cc38:	83 ec 0c             	sub    esp,0xc
c000cc3b:	57                   	push   edi
c000cc3c:	e8 0f f2 ff ff       	call   c000be50 <Virt::swapIDToSector(unsigned long)>
c000cc41:	89 34 24             	mov    DWORD PTR [esp],esi
c000cc44:	01 d8                	add    eax,ebx
c000cc46:	6a 01                	push   0x1
c000cc48:	31 d2                	xor    edx,edx
c000cc4a:	43                   	inc    ebx
c000cc4b:	52                   	push   edx
c000cc4c:	81 c6 00 02 00 00    	add    esi,0x200
c000cc52:	50                   	push   eax
c000cc53:	0f be 05 78 7d 02 c0 	movsx  eax,BYTE PTR ds:0xc0027d78
c000cc5a:	ff 34 85 dc 8d 02 c0 	push   DWORD PTR [eax*4-0x3ffd7224]
c000cc61:	e8 00 3d 00 00       	call   c0010966 <LogicalDisk::read(unsigned long long, int, void*)>
c000cc66:	83 c4 20             	add    esp,0x20
c000cc69:	39 1d 6c 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d6c,ebx
c000cc6f:	7f c7                	jg     c000cc38 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cc71:	a1 48 8a 02 c0       	mov    eax,ds:0xc0028a48
c000cc76:	48                   	dec    eax
c000cc77:	52                   	push   edx
c000cc78:	a3 48 8a 02 c0       	mov    ds:0xc0028a48,eax
c000cc7d:	50                   	push   eax
c000cc7e:	55                   	push   ebp
c000cc7f:	68 1e 4e 02 c0       	push   0xc0024e1e
c000cc84:	e8 be 03 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cc89:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cc8c:	e8 a1 f1 ff ff       	call   c000be32 <Virt::freeSwapfilePage(unsigned long)>
c000cc91:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	48                   	dec    eax
c000cc9a:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000cc9f:	85 c0                	test   eax,eax
c000cca1:	74 1d                	je     c000ccc0 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cca7:	25 ff 0f 00 00       	and    eax,0xfff
c000ccac:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000ccb1:	77 10                	ja     c000ccc3 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000ccb3:	0f 20 d8             	mov    eax,cr3
c000ccb6:	0f 22 d8             	mov    cr3,eax
c000ccb9:	b0 01                	mov    al,0x1
c000ccbb:	e9 48 ff ff ff       	jmp    c000cc08 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000ccc0:	fb                   	sti    
c000ccc1:	eb e0                	jmp    c000cca3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000ccc3:	83 ec 0c             	sub    esp,0xc
c000ccc6:	68 33 4e 02 c0       	push   0xc0024e33
c000cccb:	e8 77 03 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ccd0:	83 c4 10             	add    esp,0x10
c000ccd3:	eb de                	jmp    c000ccb3 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000ccd5:	90                   	nop

c000ccd6 <VAS::scanForEviction()>:
c000ccd6:	57                   	push   edi
c000ccd7:	31 ff                	xor    edi,edi
c000ccd9:	56                   	push   esi
c000ccda:	53                   	push   ebx
c000ccdb:	83 ec 10             	sub    esp,0x10
c000ccde:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cce2:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cce5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cceb:	75 0e                	jne    c000ccfb <VAS::scanForEviction()+0x25>
c000cced:	89 da                	mov    edx,ebx
c000ccef:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccf2:	c1 ea 16             	shr    edx,0x16
c000ccf5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ccf9:	74 4e                	je     c000cd49 <VAS::scanForEviction()+0x73>
c000ccfb:	53                   	push   ebx
c000ccfc:	56                   	push   esi
c000ccfd:	e8 30 f3 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000cd02:	5a                   	pop    edx
c000cd03:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd05:	59                   	pop    ecx
c000cd06:	89 d1                	mov    ecx,edx
c000cd08:	81 e1 01 08 00 00    	and    ecx,0x801
c000cd0e:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cd14:	74 3e                	je     c000cd54 <VAS::scanForEviction()+0x7e>
c000cd16:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cd1c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cd22:	76 2b                	jbe    c000cd4f <VAS::scanForEviction()+0x79>
c000cd24:	47                   	inc    edi
c000cd25:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000cd2c:	83 ff 03             	cmp    edi,0x3
c000cd2f:	74 32                	je     c000cd63 <VAS::scanForEviction()+0x8d>
c000cd31:	31 db                	xor    ebx,ebx
c000cd33:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cd39:	75 c0                	jne    c000ccfb <VAS::scanForEviction()+0x25>
c000cd3b:	89 da                	mov    edx,ebx
c000cd3d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cd40:	c1 ea 16             	shr    edx,0x16
c000cd43:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cd47:	75 b2                	jne    c000ccfb <VAS::scanForEviction()+0x25>
c000cd49:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cd4f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000cd52:	eb 91                	jmp    c000cce5 <VAS::scanForEviction()+0xf>
c000cd54:	f6 c2 20             	test   dl,0x20
c000cd57:	74 13                	je     c000cd6c <VAS::scanForEviction()+0x96>
c000cd59:	83 e2 df             	and    edx,0xffffffdf
c000cd5c:	89 10                	mov    DWORD PTR [eax],edx
c000cd5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cd61:	eb b3                	jmp    c000cd16 <VAS::scanForEviction()+0x40>
c000cd63:	83 c4 10             	add    esp,0x10
c000cd66:	31 c0                	xor    eax,eax
c000cd68:	5b                   	pop    ebx
c000cd69:	5e                   	pop    esi
c000cd6a:	5f                   	pop    edi
c000cd6b:	c3                   	ret    
c000cd6c:	83 ec 08             	sub    esp,0x8
c000cd6f:	89 d0                	mov    eax,edx
c000cd71:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cd76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd7a:	53                   	push   ebx
c000cd7b:	68 43 4e 02 c0       	push   0xc0024e43
c000cd80:	e8 c2 02 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cd85:	58                   	pop    eax
c000cd86:	5a                   	pop    edx
c000cd87:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd8a:	56                   	push   esi
c000cd8b:	e8 62 fd ff ff       	call   c000caf2 <VAS::evict(unsigned long)>
c000cd90:	59                   	pop    ecx
c000cd91:	5b                   	pop    ebx
c000cd92:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd95:	68 57 4e 02 c0       	push   0xc0024e57
c000cd9a:	e8 a8 02 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cd9f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cda6:	83 c4 10             	add    esp,0x10
c000cda9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cdad:	83 c4 10             	add    esp,0x10
c000cdb0:	5b                   	pop    ebx
c000cdb1:	5e                   	pop    esi
c000cdb2:	5f                   	pop    edi
c000cdb3:	c3                   	ret    

c000cdb4 <mapVASFirstTime>:
c000cdb4:	55                   	push   ebp
c000cdb5:	57                   	push   edi
c000cdb6:	56                   	push   esi
c000cdb7:	53                   	push   ebx
c000cdb8:	83 ec 0c             	sub    esp,0xc
c000cdbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cdc0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cdc3:	4a                   	dec    edx
c000cdc4:	0f 84 fe 00 00 00    	je     c000cec8 <mapVASFirstTime+0x114>
c000cdca:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cdcd:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cdd0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cdd5:	c1 e5 15             	shl    ebp,0x15
c000cdd8:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cddd:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cde3:	29 eb                	sub    ebx,ebp
c000cde5:	29 ef                	sub    edi,ebp
c000cde7:	83 ec 08             	sub    esp,0x8
c000cdea:	53                   	push   ebx
c000cdeb:	68 83 4e 02 c0       	push   0xc0024e83
c000cdf0:	e8 52 02 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cdf5:	e8 18 d6 ff ff       	call   c000a412 <Phys::allocatePage()>
c000cdfa:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000ce01:	6a 01                	push   0x1
c000ce03:	53                   	push   ebx
c000ce04:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce0a:	50                   	push   eax
c000ce0b:	56                   	push   esi
c000ce0c:	e8 ad f8 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce11:	83 c4 20             	add    esp,0x20
c000ce14:	39 fb                	cmp    ebx,edi
c000ce16:	75 cf                	jne    c000cde7 <mapVASFirstTime+0x33>
c000ce18:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ce1d:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ce22:	29 eb                	sub    ebx,ebp
c000ce24:	29 ef                	sub    edi,ebp
c000ce26:	83 ec 08             	sub    esp,0x8
c000ce29:	53                   	push   ebx
c000ce2a:	68 9f 4e 02 c0       	push   0xc0024e9f
c000ce2f:	e8 13 02 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ce34:	58                   	pop    eax
c000ce35:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce39:	5a                   	pop    edx
c000ce3a:	19 c0                	sbb    eax,eax
c000ce3c:	83 e0 04             	and    eax,0x4
c000ce3f:	05 03 04 00 00       	add    eax,0x403
c000ce44:	50                   	push   eax
c000ce45:	68 b3 4e 02 c0       	push   0xc0024eb3
c000ce4a:	e8 f8 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ce4f:	e8 be d5 ff ff       	call   c000a412 <Phys::allocatePage()>
c000ce54:	59                   	pop    ecx
c000ce55:	89 c5                	mov    ebp,eax
c000ce57:	58                   	pop    eax
c000ce58:	55                   	push   ebp
c000ce59:	68 c1 4e 02 c0       	push   0xc0024ec1
c000ce5e:	e8 e4 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ce63:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce67:	19 d2                	sbb    edx,edx
c000ce69:	83 e2 04             	and    edx,0x4
c000ce6c:	81 c2 03 04 00 00    	add    edx,0x403
c000ce72:	89 14 24             	mov    DWORD PTR [esp],edx
c000ce75:	6a 01                	push   0x1
c000ce77:	53                   	push   ebx
c000ce78:	55                   	push   ebp
c000ce79:	56                   	push   esi
c000ce7a:	e8 3f f8 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce7f:	83 c4 18             	add    esp,0x18
c000ce82:	53                   	push   ebx
c000ce83:	56                   	push   esi
c000ce84:	e8 a9 f1 ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c000ce89:	5a                   	pop    edx
c000ce8a:	59                   	pop    ecx
c000ce8b:	ff 30                	push   DWORD PTR [eax]
c000ce8d:	68 dd 4e 02 c0       	push   0xc0024edd
c000ce92:	e8 b0 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ce97:	0f 20 d8             	mov    eax,cr3
c000ce9a:	83 c4 0c             	add    esp,0xc
c000ce9d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cea3:	56                   	push   esi
c000cea4:	50                   	push   eax
c000cea5:	68 e8 4e 02 c0       	push   0xc0024ee8
c000ceaa:	e8 98 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ceaf:	83 c4 10             	add    esp,0x10
c000ceb2:	39 df                	cmp    edi,ebx
c000ceb4:	0f 85 6c ff ff ff    	jne    c000ce26 <mapVASFirstTime+0x72>
c000ceba:	0f 20 d8             	mov    eax,cr3
c000cebd:	0f 22 d8             	mov    cr3,eax
c000cec0:	83 c4 0c             	add    esp,0xc
c000cec3:	5b                   	pop    ebx
c000cec4:	5e                   	pop    esi
c000cec5:	5f                   	pop    edi
c000cec6:	5d                   	pop    ebp
c000cec7:	c3                   	ret    
c000cec8:	83 ec 0c             	sub    esp,0xc
c000cecb:	68 6a 4e 02 c0       	push   0xc0024e6a
c000ced0:	e8 72 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	83 c4 0c             	add    esp,0xc
c000cedb:	5b                   	pop    ebx
c000cedc:	5e                   	pop    esi
c000cedd:	5f                   	pop    edi
c000cede:	5d                   	pop    ebp
c000cedf:	c3                   	ret    

c000cee0 <__cxa_atexit>:
c000cee0:	31 c0                	xor    eax,eax
c000cee2:	c3                   	ret    

c000cee3 <__cxa_finalize>:
c000cee3:	c3                   	ret    

c000cee4 <__stack_chk_fail>:
c000cee4:	55                   	push   ebp
c000cee5:	89 e5                	mov    ebp,esp
c000cee7:	83 ec 14             	sub    esp,0x14
c000ceea:	68 00 4f 02 c0       	push   0xc0024f00
c000ceef:	e8 53 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cef4:	58                   	pop    eax
c000cef5:	5a                   	pop    edx
c000cef6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cef9:	68 50 4f 02 c0       	push   0xc0024f50
c000cefe:	e8 44 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cf03:	59                   	pop    ecx
c000cf04:	58                   	pop    eax
c000cf05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf08:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf0b:	68 50 4f 02 c0       	push   0xc0024f50
c000cf10:	e8 32 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cf15:	5a                   	pop    edx
c000cf16:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf19:	59                   	pop    ecx
c000cf1a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf1c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf1f:	68 50 4f 02 c0       	push   0xc0024f50
c000cf24:	e8 1e 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cf29:	5a                   	pop    edx
c000cf2a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf2d:	59                   	pop    ecx
c000cf2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf30:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf32:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf35:	68 50 4f 02 c0       	push   0xc0024f50
c000cf3a:	e8 08 01 00 00       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000cf3f:	c7 04 24 58 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f58
c000cf46:	e8 7a 81 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000cf4b:	83 c4 10             	add    esp,0x10
c000cf4e:	c9                   	leave  
c000cf4f:	c3                   	ret    

c000cf50 <__cxa_pure_virtual>:
c000cf50:	83 ec 18             	sub    esp,0x18
c000cf53:	68 70 4f 02 c0       	push   0xc0024f70
c000cf58:	e8 68 81 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000cf5d:	83 c4 1c             	add    esp,0x1c
c000cf60:	c3                   	ret    

c000cf61 <operator new[](unsigned long)>:
c000cf61:	e9 f5 cd ff ff       	jmp    c0009d5b <malloc>

c000cf66 <operator delete(void*, unsigned long)>:
c000cf66:	e9 10 ce ff ff       	jmp    c0009d7b <rfree>

c000cf6b <operator delete[](void*)>:
c000cf6b:	e9 0b ce ff ff       	jmp    c0009d7b <rfree>

c000cf70 <operator delete[](void*, unsigned long)>:
c000cf70:	e9 06 ce ff ff       	jmp    c0009d7b <rfree>

c000cf75 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cf75:	55                   	push   ebp
c000cf76:	b9 11 00 00 00       	mov    ecx,0x11
c000cf7b:	57                   	push   edi
c000cf7c:	56                   	push   esi
c000cf7d:	be 56 4a 02 c0       	mov    esi,0xc0024a56
c000cf82:	53                   	push   ebx
c000cf83:	83 ec 20             	sub    esp,0x20
c000cf86:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cf8a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cf8e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cf92:	fc                   	cld    
c000cf93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf95:	89 ee                	mov    esi,ebp
c000cf97:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cf9b:	eb 02                	jmp    c000cf9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cf9d:	89 c6                	mov    esi,eax
c000cf9f:	31 d2                	xor    edx,edx
c000cfa1:	41                   	inc    ecx
c000cfa2:	89 f0                	mov    eax,esi
c000cfa4:	f7 f3                	div    ebx
c000cfa6:	39 de                	cmp    esi,ebx
c000cfa8:	73 f3                	jae    c000cf9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cfaa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cfad:	eb 02                	jmp    c000cfb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cfaf:	89 c5                	mov    ebp,eax
c000cfb1:	31 d2                	xor    edx,edx
c000cfb3:	49                   	dec    ecx
c000cfb4:	89 e8                	mov    eax,ebp
c000cfb6:	f7 f3                	div    ebx
c000cfb8:	39 dd                	cmp    ebp,ebx
c000cfba:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cfbe:	88 11                	mov    BYTE PTR [ecx],dl
c000cfc0:	73 ed                	jae    c000cfaf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cfc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfc6:	83 c4 20             	add    esp,0x20
c000cfc9:	5b                   	pop    ebx
c000cfca:	5e                   	pop    esi
c000cfcb:	5f                   	pop    edi
c000cfcc:	5d                   	pop    ebp
c000cfcd:	c3                   	ret    

c000cfce <Dbg::logc(char)>:
c000cfce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cfd2:	f6 05 40 89 02 c0 10 	test   BYTE PTR ds:0xc0028940,0x10
c000cfd9:	75 12                	jne    c000cfed <Dbg::logc(char)+0x1f>
c000cfdb:	ba fd 03 00 00       	mov    edx,0x3fd
c000cfe0:	ec                   	in     al,dx
c000cfe1:	a8 20                	test   al,0x20
c000cfe3:	74 fb                	je     c000cfe0 <Dbg::logc(char)+0x12>
c000cfe5:	ba f8 03 00 00       	mov    edx,0x3f8
c000cfea:	88 c8                	mov    al,cl
c000cfec:	ee                   	out    dx,al
c000cfed:	c3                   	ret    

c000cfee <Dbg::logs(char*)>:
c000cfee:	53                   	push   ebx
c000cfef:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cff3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cff6:	84 c0                	test   al,al
c000cff8:	74 0f                	je     c000d009 <Dbg::logs(char*)+0x1b>
c000cffa:	50                   	push   eax
c000cffb:	43                   	inc    ebx
c000cffc:	e8 cd ff ff ff       	call   c000cfce <Dbg::logc(char)>
c000d001:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d004:	5a                   	pop    edx
c000d005:	84 c0                	test   al,al
c000d007:	75 f1                	jne    c000cffa <Dbg::logs(char*)+0xc>
c000d009:	5b                   	pop    ebx
c000d00a:	c3                   	ret    

c000d00b <Dbg::logWriteInt(unsigned int)>:
c000d00b:	83 ec 10             	sub    esp,0x10
c000d00e:	6a 0a                	push   0xa
c000d010:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d014:	50                   	push   eax
c000d015:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d019:	e8 57 ff ff ff       	call   c000cf75 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d01e:	50                   	push   eax
c000d01f:	e8 ca ff ff ff       	call   c000cfee <Dbg::logs(char*)>
c000d024:	83 c4 20             	add    esp,0x20
c000d027:	c3                   	ret    

c000d028 <Dbg::logWriteIntBase(unsigned int, int)>:
c000d028:	83 ec 10             	sub    esp,0x10
c000d02b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d02f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d033:	50                   	push   eax
c000d034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d038:	e8 38 ff ff ff       	call   c000cf75 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d03d:	50                   	push   eax
c000d03e:	e8 ab ff ff ff       	call   c000cfee <Dbg::logs(char*)>
c000d043:	83 c4 20             	add    esp,0x20
c000d046:	c3                   	ret    

c000d047 <Dbg::kprintf(char const*, ...)>:
c000d047:	55                   	push   ebp
c000d048:	57                   	push   edi
c000d049:	56                   	push   esi
c000d04a:	53                   	push   ebx
c000d04b:	83 ec 0c             	sub    esp,0xc
c000d04e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d052:	f6 05 40 89 02 c0 10 	test   BYTE PTR ds:0xc0028940,0x10
c000d059:	74 08                	je     c000d063 <Dbg::kprintf(char const*, ...)+0x1c>
c000d05b:	83 c4 0c             	add    esp,0xc
c000d05e:	5b                   	pop    ebx
c000d05f:	5e                   	pop    esi
c000d060:	5f                   	pop    edi
c000d061:	5d                   	pop    ebp
c000d062:	c3                   	ret    
c000d063:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d067:	31 db                	xor    ebx,ebx
c000d069:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d06d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d070:	84 c0                	test   al,al
c000d072:	74 e7                	je     c000d05b <Dbg::kprintf(char const*, ...)+0x14>
c000d074:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d077:	3c 25                	cmp    al,0x25
c000d079:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d07c:	75 44                	jne    c000d0c2 <Dbg::kprintf(char const*, ...)+0x7b>
c000d07e:	83 c3 02             	add    ebx,0x2
c000d081:	8a 07                	mov    al,BYTE PTR [edi]
c000d083:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d086:	83 e8 25             	sub    eax,0x25
c000d089:	3c 53                	cmp    al,0x53
c000d08b:	0f 87 c9 00 00 00    	ja     c000d15a <Dbg::kprintf(char const*, ...)+0x113>
c000d091:	0f b6 c0             	movzx  eax,al
c000d094:	ff 24 85 84 4f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb07c]
c000d09b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d09f:	89 c8                	mov    eax,ecx
c000d0a1:	83 c1 04             	add    ecx,0x4
c000d0a4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0a8:	ff 30                	push   DWORD PTR [eax]
c000d0aa:	e8 5c ff ff ff       	call   c000d00b <Dbg::logWriteInt(unsigned int)>
c000d0af:	5f                   	pop    edi
c000d0b0:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d0b4:	84 c0                	test   al,al
c000d0b6:	74 a3                	je     c000d05b <Dbg::kprintf(char const*, ...)+0x14>
c000d0b8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d0bb:	3c 25                	cmp    al,0x25
c000d0bd:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d0c0:	74 bc                	je     c000d07e <Dbg::kprintf(char const*, ...)+0x37>
c000d0c2:	50                   	push   eax
c000d0c3:	89 eb                	mov    ebx,ebp
c000d0c5:	e8 04 ff ff ff       	call   c000cfce <Dbg::logc(char)>
c000d0ca:	89 fd                	mov    ebp,edi
c000d0cc:	58                   	pop    eax
c000d0cd:	eb e1                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d0cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0d3:	89 c8                	mov    eax,ecx
c000d0d5:	83 c1 04             	add    ecx,0x4
c000d0d8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0dc:	ff 30                	push   DWORD PTR [eax]
c000d0de:	e8 0b ff ff ff       	call   c000cfee <Dbg::logs(char*)>
c000d0e3:	58                   	pop    eax
c000d0e4:	eb ca                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d0e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0ea:	89 d0                	mov    eax,edx
c000d0ec:	83 c2 04             	add    edx,0x4
c000d0ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0f3:	ff 30                	push   DWORD PTR [eax]
c000d0f5:	e8 11 ff ff ff       	call   c000d00b <Dbg::logWriteInt(unsigned int)>
c000d0fa:	58                   	pop    eax
c000d0fb:	eb b3                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d0fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d101:	89 d0                	mov    eax,edx
c000d103:	83 c2 04             	add    edx,0x4
c000d106:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d109:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d10d:	50                   	push   eax
c000d10e:	e8 bb fe ff ff       	call   c000cfce <Dbg::logc(char)>
c000d113:	58                   	pop    eax
c000d114:	eb 9a                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d116:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d11a:	89 c8                	mov    eax,ecx
c000d11c:	83 c1 04             	add    ecx,0x4
c000d11f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d123:	6a 10                	push   0x10
c000d125:	ff 30                	push   DWORD PTR [eax]
c000d127:	e8 fc fe ff ff       	call   c000d028 <Dbg::logWriteIntBase(unsigned int, int)>
c000d12c:	59                   	pop    ecx
c000d12d:	5f                   	pop    edi
c000d12e:	eb 80                	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d130:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d134:	89 d0                	mov    eax,edx
c000d136:	83 c2 08             	add    edx,0x8
c000d139:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d13d:	6a 10                	push   0x10
c000d13f:	ff 30                	push   DWORD PTR [eax]
c000d141:	e8 e2 fe ff ff       	call   c000d028 <Dbg::logWriteIntBase(unsigned int, int)>
c000d146:	58                   	pop    eax
c000d147:	5a                   	pop    edx
c000d148:	e9 63 ff ff ff       	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d14d:	6a 25                	push   0x25
c000d14f:	e8 7a fe ff ff       	call   c000cfce <Dbg::logc(char)>
c000d154:	58                   	pop    eax
c000d155:	e9 56 ff ff ff       	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d15a:	6a 25                	push   0x25
c000d15c:	e8 6d fe ff ff       	call   c000cfce <Dbg::logc(char)>
c000d161:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d164:	50                   	push   eax
c000d165:	e8 64 fe ff ff       	call   c000cfce <Dbg::logc(char)>
c000d16a:	5a                   	pop    edx
c000d16b:	59                   	pop    ecx
c000d16c:	e9 3f ff ff ff       	jmp    c000d0b0 <Dbg::kprintf(char const*, ...)+0x69>
c000d171:	90                   	nop

c000d172 <File::read(unsigned long long, void*, int*)>:
c000d172:	53                   	push   ebx
c000d173:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d177:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d17b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d182:	3c 19                	cmp    al,0x19
c000d184:	77 35                	ja     c000d1bb <File::read(unsigned long long, void*, int*)+0x49>
c000d186:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c000d18d:	85 c0                	test   eax,eax
c000d18f:	74 2a                	je     c000d1bb <File::read(unsigned long long, void*, int*)+0x49>
c000d191:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d197:	85 c0                	test   eax,eax
c000d199:	74 20                	je     c000d1bb <File::read(unsigned long long, void*, int*)+0x49>
c000d19b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d19f:	74 21                	je     c000d1c2 <File::read(unsigned long long, void*, int*)+0x50>
c000d1a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1a3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1a7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1b5:	5b                   	pop    ebx
c000d1b6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d1b9:	ff e0                	jmp    eax
c000d1bb:	b8 0b 00 00 00       	mov    eax,0xb
c000d1c0:	eb 05                	jmp    c000d1c7 <File::read(unsigned long long, void*, int*)+0x55>
c000d1c2:	b8 05 00 00 00       	mov    eax,0x5
c000d1c7:	5b                   	pop    ebx
c000d1c8:	c3                   	ret    
c000d1c9:	90                   	nop

c000d1ca <File::write(unsigned long long, void*, int*)>:
c000d1ca:	53                   	push   ebx
c000d1cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1d3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1da:	3c 19                	cmp    al,0x19
c000d1dc:	77 35                	ja     c000d213 <File::write(unsigned long long, void*, int*)+0x49>
c000d1de:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c000d1e5:	85 c0                	test   eax,eax
c000d1e7:	74 2a                	je     c000d213 <File::write(unsigned long long, void*, int*)+0x49>
c000d1e9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1ef:	85 c0                	test   eax,eax
c000d1f1:	74 20                	je     c000d213 <File::write(unsigned long long, void*, int*)+0x49>
c000d1f3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1f7:	74 21                	je     c000d21a <File::write(unsigned long long, void*, int*)+0x50>
c000d1f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1ff:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d205:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d209:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d20d:	5b                   	pop    ebx
c000d20e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d211:	ff e0                	jmp    eax
c000d213:	b8 0b 00 00 00       	mov    eax,0xb
c000d218:	eb 05                	jmp    c000d21f <File::write(unsigned long long, void*, int*)+0x55>
c000d21a:	b8 05 00 00 00       	mov    eax,0x5
c000d21f:	5b                   	pop    ebx
c000d220:	c3                   	ret    
c000d221:	90                   	nop

c000d222 <Directory::read(unsigned long long, void*, int*)>:
c000d222:	53                   	push   ebx
c000d223:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d227:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d22b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d232:	3c 19                	cmp    al,0x19
c000d234:	77 35                	ja     c000d26b <Directory::read(unsigned long long, void*, int*)+0x49>
c000d236:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c000d23d:	85 c0                	test   eax,eax
c000d23f:	74 2a                	je     c000d26b <Directory::read(unsigned long long, void*, int*)+0x49>
c000d241:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d247:	85 c0                	test   eax,eax
c000d249:	74 20                	je     c000d26b <Directory::read(unsigned long long, void*, int*)+0x49>
c000d24b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d24f:	74 21                	je     c000d272 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d251:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d253:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d257:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d265:	5b                   	pop    ebx
c000d266:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d269:	ff e0                	jmp    eax
c000d26b:	b8 0b 00 00 00       	mov    eax,0xb
c000d270:	eb 05                	jmp    c000d277 <Directory::read(unsigned long long, void*, int*)+0x55>
c000d272:	b8 05 00 00 00       	mov    eax,0x5
c000d277:	5b                   	pop    ebx
c000d278:	c3                   	ret    
c000d279:	90                   	nop

c000d27a <Directory::write(unsigned long long, void*, int*)>:
c000d27a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d27e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d285:	b8 0b 00 00 00       	mov    eax,0xb
c000d28a:	80 fa 19             	cmp    dl,0x19
c000d28d:	77 18                	ja     c000d2a7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d28f:	8b 14 95 e0 8e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7120]
c000d296:	85 d2                	test   edx,edx
c000d298:	74 0d                	je     c000d2a7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d29a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d2a1:	19 c0                	sbb    eax,eax
c000d2a3:	83 e0 0a             	and    eax,0xa
c000d2a6:	40                   	inc    eax
c000d2a7:	c3                   	ret    

c000d2a8 <File::isAtty()>:
c000d2a8:	31 c0                	xor    eax,eax
c000d2aa:	c3                   	ret    
c000d2ab:	90                   	nop

c000d2ac <Directory::isAtty()>:
c000d2ac:	31 c0                	xor    eax,eax
c000d2ae:	c3                   	ret    
c000d2af:	90                   	nop

c000d2b0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d2b0:	b8 0a 00 00 00       	mov    eax,0xa
c000d2b5:	c3                   	ret    

c000d2b6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d2b6:	b8 0a 00 00 00       	mov    eax,0xa
c000d2bb:	c3                   	ret    

c000d2bc <Filesystem::allocateSwapfile(char const*, int)>:
c000d2bc:	31 c0                	xor    eax,eax
c000d2be:	31 d2                	xor    edx,edx
c000d2c0:	c3                   	ret    
c000d2c1:	90                   	nop

c000d2c2 <File::~File()>:
c000d2c2:	83 ec 0c             	sub    esp,0xc
c000d2c5:	ba c0 51 02 c0       	mov    edx,0xc00251c0
c000d2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ce:	89 10                	mov    DWORD PTR [eax],edx
c000d2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d4:	83 ec 0c             	sub    esp,0xc
c000d2d7:	50                   	push   eax
c000d2d8:	e8 e3 e7 ff ff       	call   c000bac0 <UnixFile::~UnixFile()>
c000d2dd:	83 c4 10             	add    esp,0x10
c000d2e0:	90                   	nop
c000d2e1:	83 c4 0c             	add    esp,0xc
c000d2e4:	c3                   	ret    
c000d2e5:	90                   	nop

c000d2e6 <File::~File()>:
c000d2e6:	83 ec 0c             	sub    esp,0xc
c000d2e9:	83 ec 0c             	sub    esp,0xc
c000d2ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f0:	e8 cd ff ff ff       	call   c000d2c2 <File::~File()>
c000d2f5:	83 c4 10             	add    esp,0x10
c000d2f8:	83 ec 08             	sub    esp,0x8
c000d2fb:	68 14 01 00 00       	push   0x114
c000d300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d304:	e8 5d fc ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000d309:	83 c4 10             	add    esp,0x10
c000d30c:	83 c4 0c             	add    esp,0xc
c000d30f:	c3                   	ret    

c000d310 <Directory::~Directory()>:
c000d310:	83 ec 0c             	sub    esp,0xc
c000d313:	ba dc 51 02 c0       	mov    edx,0xc00251dc
c000d318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31c:	89 10                	mov    DWORD PTR [eax],edx
c000d31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d322:	83 ec 0c             	sub    esp,0xc
c000d325:	50                   	push   eax
c000d326:	e8 95 e7 ff ff       	call   c000bac0 <UnixFile::~UnixFile()>
c000d32b:	83 c4 10             	add    esp,0x10
c000d32e:	90                   	nop
c000d32f:	83 c4 0c             	add    esp,0xc
c000d332:	c3                   	ret    
c000d333:	90                   	nop

c000d334 <Directory::~Directory()>:
c000d334:	83 ec 0c             	sub    esp,0xc
c000d337:	83 ec 0c             	sub    esp,0xc
c000d33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d33e:	e8 cd ff ff ff       	call   c000d310 <Directory::~Directory()>
c000d343:	83 c4 10             	add    esp,0x10
c000d346:	83 ec 08             	sub    esp,0x8
c000d349:	68 14 01 00 00       	push   0x114
c000d34e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d352:	e8 0f fc ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000d357:	83 c4 10             	add    esp,0x10
c000d35a:	83 c4 0c             	add    esp,0xc
c000d35d:	c3                   	ret    

c000d35e <Filesystem::Filesystem()>:
c000d35e:	ba 58 51 02 c0       	mov    edx,0xc0025158
c000d363:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d367:	89 10                	mov    DWORD PTR [eax],edx
c000d369:	8b 15 54 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a54
c000d36f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d373:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d37a:	a3 54 8a 02 c0       	mov    ds:0xc0028a54,eax
c000d37f:	90                   	nop
c000d380:	c3                   	ret    
c000d381:	90                   	nop

c000d382 <Filesystem::~Filesystem()>:
c000d382:	ba 58 51 02 c0       	mov    edx,0xc0025158
c000d387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d38b:	89 10                	mov    DWORD PTR [eax],edx
c000d38d:	90                   	nop
c000d38e:	c3                   	ret    
c000d38f:	90                   	nop

c000d390 <Filesystem::~Filesystem()>:
c000d390:	83 ec 0c             	sub    esp,0xc
c000d393:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d397:	e8 e6 ff ff ff       	call   c000d382 <Filesystem::~Filesystem()>
c000d39c:	83 c4 04             	add    esp,0x4
c000d39f:	83 ec 08             	sub    esp,0x8
c000d3a2:	6a 08                	push   0x8
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	e8 b9 fb ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000d3ad:	83 c4 10             	add    esp,0x10
c000d3b0:	83 c4 0c             	add    esp,0xc
c000d3b3:	c3                   	ret    

c000d3b4 <Fs::getcwd(Process*, char*, int)>:
c000d3b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d3b8:	31 c0                	xor    eax,eax
c000d3ba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d3bd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d3c1:	7d 15                	jge    c000d3d8 <Fs::getcwd(Process*, char*, int)+0x24>
c000d3c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d3c7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d3ce:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d3d1:	84 c9                	test   cl,cl
c000d3d3:	74 06                	je     c000d3db <Fs::getcwd(Process*, char*, int)+0x27>
c000d3d5:	40                   	inc    eax
c000d3d6:	eb e2                	jmp    c000d3ba <Fs::getcwd(Process*, char*, int)+0x6>
c000d3d8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d3db:	31 c0                	xor    eax,eax
c000d3dd:	c3                   	ret    

c000d3de <Fs::initVFS()>:
c000d3de:	83 ec 18             	sub    esp,0x18
c000d3e1:	6a 08                	push   0x8
c000d3e3:	e8 73 c9 ff ff       	call   c0009d5b <malloc>
c000d3e8:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3eb:	e8 1c ec 00 00       	call   c001c00c <FAT::FAT()>
c000d3f0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d3f7:	e8 5f c9 ff ff       	call   c0009d5b <malloc>
c000d3fc:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3ff:	e8 98 fe 00 00       	call   c001d29c <ISO9660::ISO9660()>
c000d404:	83 c4 1c             	add    esp,0x1c
c000d407:	c3                   	ret    

c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d408:	55                   	push   ebp
c000d409:	57                   	push   edi
c000d40a:	56                   	push   esi
c000d40b:	53                   	push   ebx
c000d40c:	81 ec 10 04 00 00    	sub    esp,0x410
c000d412:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d419:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d420:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d427:	68 00 04 00 00       	push   0x400
c000d42c:	6a 00                	push   0x0
c000d42e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d432:	56                   	push   esi
c000d433:	e8 4c 32 ff ff       	call   c0000684 <memset>
c000d438:	83 c4 10             	add    esp,0x10
c000d43b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d43f:	75 0b                	jne    c000d44c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d441:	50                   	push   eax
c000d442:	50                   	push   eax
c000d443:	57                   	push   edi
c000d444:	56                   	push   esi
c000d445:	e8 f6 32 ff ff       	call   c0000740 <strcpy>
c000d44a:	eb 41                	jmp    c000d48d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d44c:	8a 07                	mov    al,BYTE PTR [edi]
c000d44e:	3c 5c                	cmp    al,0x5c
c000d450:	74 04                	je     c000d456 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d452:	3c 2f                	cmp    al,0x2f
c000d454:	75 18                	jne    c000d46e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d456:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d459:	3c 60                	cmp    al,0x60
c000d45b:	7e 03                	jle    c000d460 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d45d:	83 e8 20             	sub    eax,0x20
c000d460:	88 04 24             	mov    BYTE PTR [esp],al
c000d463:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d46a:	50                   	push   eax
c000d46b:	50                   	push   eax
c000d46c:	eb 18                	jmp    c000d486 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d46e:	50                   	push   eax
c000d46f:	50                   	push   eax
c000d470:	55                   	push   ebp
c000d471:	56                   	push   esi
c000d472:	e8 c9 32 ff ff       	call   c0000740 <strcpy>
c000d477:	5a                   	pop    edx
c000d478:	59                   	pop    ecx
c000d479:	68 5a 6a 02 c0       	push   0xc0026a5a
c000d47e:	56                   	push   esi
c000d47f:	e8 fc 33 ff ff       	call   c0000880 <strcat>
c000d484:	5d                   	pop    ebp
c000d485:	58                   	pop    eax
c000d486:	57                   	push   edi
c000d487:	56                   	push   esi
c000d488:	e8 f3 33 ff ff       	call   c0000880 <strcat>
c000d48d:	83 c4 10             	add    esp,0x10
c000d490:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d493:	3c 60                	cmp    al,0x60
c000d495:	7e 03                	jle    c000d49a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d497:	83 e8 20             	sub    eax,0x20
c000d49a:	88 04 24             	mov    BYTE PTR [esp],al
c000d49d:	88 03                	mov    BYTE PTR [ebx],al
c000d49f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d4a6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d4ac:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d4b0:	bf 03 00 00 00       	mov    edi,0x3
c000d4b5:	b8 03 00 00 00       	mov    eax,0x3
c000d4ba:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d4bd:	84 d2                	test   dl,dl
c000d4bf:	0f 84 91 00 00 00    	je     c000d556 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d4c5:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d4c8:	80 fa 5c             	cmp    dl,0x5c
c000d4cb:	74 05                	je     c000d4d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d4cd:	80 fa 2f             	cmp    dl,0x2f
c000d4d0:	75 12                	jne    c000d4e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4d2:	89 c5                	mov    ebp,eax
c000d4d4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d4d9:	74 09                	je     c000d4e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4db:	40                   	inc    eax
c000d4dc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d4e0:	89 cf                	mov    edi,ecx
c000d4e2:	eb d6                	jmp    c000d4ba <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d4e4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d4e9:	75 5b                	jne    c000d546 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4eb:	80 fa 2e             	cmp    dl,0x2e
c000d4ee:	75 56                	jne    c000d546 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4f0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d4f4:	74 19                	je     c000d50f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d4f6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d4fb:	74 53                	je     c000d550 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d4fd:	89 f9                	mov    ecx,edi
c000d4ff:	41                   	inc    ecx
c000d500:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d503:	80 fa 2f             	cmp    dl,0x2f
c000d506:	74 f7                	je     c000d4ff <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d508:	80 fa 5c             	cmp    dl,0x5c
c000d50b:	74 f2                	je     c000d4ff <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d50d:	eb d1                	jmp    c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d50f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d514:	74 3a                	je     c000d550 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d516:	83 f8 03             	cmp    eax,0x3
c000d519:	74 c5                	je     c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d51b:	41                   	inc    ecx
c000d51c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d51f:	80 fa 2f             	cmp    dl,0x2f
c000d522:	74 f7                	je     c000d51b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d524:	80 fa 5c             	cmp    dl,0x5c
c000d527:	74 f2                	je     c000d51b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d529:	48                   	dec    eax
c000d52a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d52e:	75 06                	jne    c000d536 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d530:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d534:	eb f3                	jmp    c000d529 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d536:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d53a:	74 07                	je     c000d543 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d53c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d540:	48                   	dec    eax
c000d541:	eb f3                	jmp    c000d536 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d543:	40                   	inc    eax
c000d544:	eb 9a                	jmp    c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d546:	80 fa 2f             	cmp    dl,0x2f
c000d549:	74 95                	je     c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d54b:	80 fa 5c             	cmp    dl,0x5c
c000d54e:	74 90                	je     c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d550:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d553:	40                   	inc    eax
c000d554:	eb 8a                	jmp    c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d556:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d55a:	83 ec 0c             	sub    esp,0xc
c000d55d:	53                   	push   ebx
c000d55e:	e8 3d 31 ff ff       	call   c00006a0 <strlen>
c000d563:	83 c4 10             	add    esp,0x10
c000d566:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d56b:	75 26                	jne    c000d593 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d56d:	83 ec 0c             	sub    esp,0xc
c000d570:	53                   	push   ebx
c000d571:	e8 2a 31 ff ff       	call   c00006a0 <strlen>
c000d576:	83 c4 10             	add    esp,0x10
c000d579:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d57e:	74 26                	je     c000d5a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d580:	83 ec 0c             	sub    esp,0xc
c000d583:	53                   	push   ebx
c000d584:	e8 17 31 ff ff       	call   c00006a0 <strlen>
c000d589:	83 c4 10             	add    esp,0x10
c000d58c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d591:	eb c7                	jmp    c000d55a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d593:	83 ec 0c             	sub    esp,0xc
c000d596:	53                   	push   ebx
c000d597:	e8 04 31 ff ff       	call   c00006a0 <strlen>
c000d59c:	83 c4 10             	add    esp,0x10
c000d59f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d5a4:	74 c7                	je     c000d56d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d5a6:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d5ac:	5b                   	pop    ebx
c000d5ad:	5e                   	pop    esi
c000d5ae:	5f                   	pop    edi
c000d5af:	5d                   	pop    ebp
c000d5b0:	c3                   	ret    
c000d5b1:	90                   	nop

c000d5b2 <File::File(char const*, Process*)>:
c000d5b2:	83 ec 0c             	sub    esp,0xc
c000d5b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5b9:	83 ec 08             	sub    esp,0x8
c000d5bc:	6a 00                	push   0x0
c000d5be:	50                   	push   eax
c000d5bf:	e8 1a e3 ff ff       	call   c000b8de <UnixFile::UnixFile(int)>
c000d5c4:	83 c4 10             	add    esp,0x10
c000d5c7:	ba c0 51 02 c0       	mov    edx,0xc00251c0
c000d5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d0:	89 10                	mov    DWORD PTR [eax],edx
c000d5d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e0:	83 c0 0d             	add    eax,0xd
c000d5e3:	83 ec 04             	sub    esp,0x4
c000d5e6:	52                   	push   edx
c000d5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5eb:	50                   	push   eax
c000d5ec:	e8 17 fe ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d5f1:	83 c4 10             	add    esp,0x10
c000d5f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d5fb:	8d 50 bf             	lea    edx,[eax-0x41]
c000d5fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d602:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d60c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d614:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d61a:	0f b6 c0             	movzx  eax,al
c000d61d:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c000d624:	85 c0                	test   eax,eax
c000d626:	74 5e                	je     c000d686 <File::File(char const*, Process*)+0xd4>
c000d628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d62c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d632:	0f b6 c0             	movzx  eax,al
c000d635:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c000d63c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d642:	85 c0                	test   eax,eax
c000d644:	75 40                	jne    c000d686 <File::File(char const*, Process*)+0xd4>
c000d646:	83 ec 0c             	sub    esp,0xc
c000d649:	68 fc 50 02 c0       	push   0xc00250fc
c000d64e:	e8 f4 f9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000d653:	83 c4 10             	add    esp,0x10
c000d656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d65a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d660:	0f b6 c0             	movzx  eax,al
c000d663:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c000d66a:	83 ec 0c             	sub    esp,0xc
c000d66d:	50                   	push   eax
c000d66e:	e8 f1 31 00 00       	call   c0010864 <LogicalDisk::mount()>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	83 ec 0c             	sub    esp,0xc
c000d679:	68 49 74 02 c0       	push   0xc0027449
c000d67e:	e8 c4 f9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000d683:	83 c4 10             	add    esp,0x10
c000d686:	90                   	nop
c000d687:	83 c4 0c             	add    esp,0xc
c000d68a:	c3                   	ret    
c000d68b:	90                   	nop

c000d68c <File::open(FileOpenMode)>:
c000d68c:	53                   	push   ebx
c000d68d:	b8 0b 00 00 00       	mov    eax,0xb
c000d692:	83 ec 08             	sub    esp,0x8
c000d695:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d699:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d6a0:	80 fa 19             	cmp    dl,0x19
c000d6a3:	77 40                	ja     c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6a5:	8b 14 95 e0 8e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7120]
c000d6ac:	85 d2                	test   edx,edx
c000d6ae:	74 35                	je     c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6b0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d6b6:	85 d2                	test   edx,edx
c000d6b8:	74 2b                	je     c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6ba:	b8 06 00 00 00       	mov    eax,0x6
c000d6bf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d6c3:	75 20                	jne    c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6c5:	8b 02                	mov    eax,DWORD PTR [edx]
c000d6c7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d6cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6d1:	51                   	push   ecx
c000d6d2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d6d5:	51                   	push   ecx
c000d6d6:	52                   	push   edx
c000d6d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d6da:	83 c4 10             	add    esp,0x10
c000d6dd:	85 c0                	test   eax,eax
c000d6df:	75 04                	jne    c000d6e5 <File::open(FileOpenMode)+0x59>
c000d6e1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d6e5:	83 c4 08             	add    esp,0x8
c000d6e8:	5b                   	pop    ebx
c000d6e9:	c3                   	ret    

c000d6ea <File::close()>:
c000d6ea:	53                   	push   ebx
c000d6eb:	b8 0b 00 00 00       	mov    eax,0xb
c000d6f0:	83 ec 08             	sub    esp,0x8
c000d6f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d6f7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d6fe:	80 fa 19             	cmp    dl,0x19
c000d701:	77 41                	ja     c000d744 <File::close()+0x5a>
c000d703:	8b 1c 95 e0 8e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7120]
c000d70a:	85 db                	test   ebx,ebx
c000d70c:	74 36                	je     c000d744 <File::close()+0x5a>
c000d70e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d715:	74 2d                	je     c000d744 <File::close()+0x5a>
c000d717:	b8 05 00 00 00       	mov    eax,0x5
c000d71c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d720:	74 22                	je     c000d744 <File::close()+0x5a>
c000d722:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d726:	8b 04 95 e0 8e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7120]
c000d72d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d733:	53                   	push   ebx
c000d734:	53                   	push   ebx
c000d735:	8b 10                	mov    edx,DWORD PTR [eax]
c000d737:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d73d:	50                   	push   eax
c000d73e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d741:	83 c4 10             	add    esp,0x10
c000d744:	83 c4 08             	add    esp,0x8
c000d747:	5b                   	pop    ebx
c000d748:	c3                   	ret    
c000d749:	90                   	nop

c000d74a <File::seek(unsigned long long)>:
c000d74a:	56                   	push   esi
c000d74b:	53                   	push   ebx
c000d74c:	b8 0b 00 00 00       	mov    eax,0xb
c000d751:	51                   	push   ecx
c000d752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d756:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d75a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d761:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d765:	80 fa 19             	cmp    dl,0x19
c000d768:	77 31                	ja     c000d79b <File::seek(unsigned long long)+0x51>
c000d76a:	8b 14 95 e0 8e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7120]
c000d771:	85 d2                	test   edx,edx
c000d773:	74 26                	je     c000d79b <File::seek(unsigned long long)+0x51>
c000d775:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d77b:	85 d2                	test   edx,edx
c000d77d:	74 1c                	je     c000d79b <File::seek(unsigned long long)+0x51>
c000d77f:	b8 05 00 00 00       	mov    eax,0x5
c000d784:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d788:	74 11                	je     c000d79b <File::seek(unsigned long long)+0x51>
c000d78a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d78c:	53                   	push   ebx
c000d78d:	51                   	push   ecx
c000d78e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d794:	52                   	push   edx
c000d795:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d798:	83 c4 10             	add    esp,0x10
c000d79b:	5a                   	pop    edx
c000d79c:	5b                   	pop    ebx
c000d79d:	5e                   	pop    esi
c000d79e:	c3                   	ret    
c000d79f:	90                   	nop

c000d7a0 <File::tell(unsigned long long*)>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	b8 0b 00 00 00       	mov    eax,0xb
c000d7a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7ac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d7b3:	80 fa 19             	cmp    dl,0x19
c000d7b6:	77 34                	ja     c000d7ec <File::tell(unsigned long long*)+0x4c>
c000d7b8:	8b 14 95 e0 8e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7120]
c000d7bf:	85 d2                	test   edx,edx
c000d7c1:	74 29                	je     c000d7ec <File::tell(unsigned long long*)+0x4c>
c000d7c3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d7c9:	85 d2                	test   edx,edx
c000d7cb:	74 1f                	je     c000d7ec <File::tell(unsigned long long*)+0x4c>
c000d7cd:	b8 05 00 00 00       	mov    eax,0x5
c000d7d2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7d6:	74 14                	je     c000d7ec <File::tell(unsigned long long*)+0x4c>
c000d7d8:	50                   	push   eax
c000d7d9:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7df:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d7e5:	52                   	push   edx
c000d7e6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d7e9:	83 c4 10             	add    esp,0x10
c000d7ec:	83 c4 0c             	add    esp,0xc
c000d7ef:	c3                   	ret    

c000d7f0 <File::rewind()>:
c000d7f0:	83 ec 10             	sub    esp,0x10
c000d7f3:	6a 00                	push   0x0
c000d7f5:	6a 00                	push   0x0
c000d7f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7fb:	e8 4a ff ff ff       	call   c000d74a <File::seek(unsigned long long)>
c000d800:	83 c4 1c             	add    esp,0x1c
c000d803:	c3                   	ret    

c000d804 <File::unlink()>:
c000d804:	83 ec 0c             	sub    esp,0xc
c000d807:	b8 0b 00 00 00       	mov    eax,0xb
c000d80c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d810:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d817:	80 f9 19             	cmp    cl,0x19
c000d81a:	77 2f                	ja     c000d84b <File::unlink()+0x47>
c000d81c:	8b 0c 8d e0 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7120]
c000d823:	85 c9                	test   ecx,ecx
c000d825:	74 24                	je     c000d84b <File::unlink()+0x47>
c000d827:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d82d:	85 c9                	test   ecx,ecx
c000d82f:	74 1a                	je     c000d84b <File::unlink()+0x47>
c000d831:	b8 06 00 00 00       	mov    eax,0x6
c000d836:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d83a:	75 0f                	jne    c000d84b <File::unlink()+0x47>
c000d83c:	83 c2 0d             	add    edx,0xd
c000d83f:	50                   	push   eax
c000d840:	50                   	push   eax
c000d841:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d843:	52                   	push   edx
c000d844:	51                   	push   ecx
c000d845:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d848:	83 c4 10             	add    esp,0x10
c000d84b:	83 c4 0c             	add    esp,0xc
c000d84e:	c3                   	ret    
c000d84f:	90                   	nop

c000d850 <File::rename(char const*)>:
c000d850:	83 ec 0c             	sub    esp,0xc
c000d853:	b8 0b 00 00 00       	mov    eax,0xb
c000d858:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d85c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d863:	80 f9 19             	cmp    cl,0x19
c000d866:	77 32                	ja     c000d89a <File::rename(char const*)+0x4a>
c000d868:	8b 0c 8d e0 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7120]
c000d86f:	85 c9                	test   ecx,ecx
c000d871:	74 27                	je     c000d89a <File::rename(char const*)+0x4a>
c000d873:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d879:	85 c9                	test   ecx,ecx
c000d87b:	74 1d                	je     c000d89a <File::rename(char const*)+0x4a>
c000d87d:	b8 06 00 00 00       	mov    eax,0x6
c000d882:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d886:	75 12                	jne    c000d89a <File::rename(char const*)+0x4a>
c000d888:	83 c2 0d             	add    edx,0xd
c000d88b:	50                   	push   eax
c000d88c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d892:	52                   	push   edx
c000d893:	51                   	push   ecx
c000d894:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d897:	83 c4 10             	add    esp,0x10
c000d89a:	83 c4 0c             	add    esp,0xc
c000d89d:	c3                   	ret    

c000d89e <File::chfatattr(unsigned char, unsigned char)>:
c000d89e:	57                   	push   edi
c000d89f:	b8 0b 00 00 00       	mov    eax,0xb
c000d8a4:	56                   	push   esi
c000d8a5:	53                   	push   ebx
c000d8a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8b5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d8b9:	80 f9 19             	cmp    cl,0x19
c000d8bc:	77 37                	ja     c000d8f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8be:	8b 0c 8d e0 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7120]
c000d8c5:	85 c9                	test   ecx,ecx
c000d8c7:	74 2c                	je     c000d8f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8cf:	85 c9                	test   ecx,ecx
c000d8d1:	74 22                	je     c000d8f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8d3:	b8 06 00 00 00       	mov    eax,0x6
c000d8d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8dc:	75 17                	jne    c000d8f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8de:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d8e0:	89 f0                	mov    eax,esi
c000d8e2:	83 c2 0d             	add    edx,0xd
c000d8e5:	0f b6 f0             	movzx  esi,al
c000d8e8:	0f b6 db             	movzx  ebx,bl
c000d8eb:	56                   	push   esi
c000d8ec:	53                   	push   ebx
c000d8ed:	52                   	push   edx
c000d8ee:	51                   	push   ecx
c000d8ef:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d8f2:	83 c4 10             	add    esp,0x10
c000d8f5:	5b                   	pop    ebx
c000d8f6:	5e                   	pop    esi
c000d8f7:	5f                   	pop    edi
c000d8f8:	c3                   	ret    
c000d8f9:	90                   	nop

c000d8fa <File::exists()>:
c000d8fa:	83 ec 0c             	sub    esp,0xc
c000d8fd:	31 c0                	xor    eax,eax
c000d8ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d903:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d90a:	80 f9 19             	cmp    cl,0x19
c000d90d:	77 24                	ja     c000d933 <File::exists()+0x39>
c000d90f:	8b 0c 8d e0 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7120]
c000d916:	85 c9                	test   ecx,ecx
c000d918:	74 19                	je     c000d933 <File::exists()+0x39>
c000d91a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d920:	85 c9                	test   ecx,ecx
c000d922:	74 0f                	je     c000d933 <File::exists()+0x39>
c000d924:	83 c2 0d             	add    edx,0xd
c000d927:	50                   	push   eax
c000d928:	50                   	push   eax
c000d929:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d92b:	52                   	push   edx
c000d92c:	51                   	push   ecx
c000d92d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	83 c4 0c             	add    esp,0xc
c000d936:	c3                   	ret    
c000d937:	90                   	nop

c000d938 <File::stat(unsigned long long*, bool*)>:
c000d938:	56                   	push   esi
c000d939:	53                   	push   ebx
c000d93a:	50                   	push   eax
c000d93b:	b8 0b 00 00 00       	mov    eax,0xb
c000d940:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d944:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d948:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d94f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d953:	80 f9 19             	cmp    cl,0x19
c000d956:	77 3d                	ja     c000d995 <File::stat(unsigned long long*, bool*)+0x5d>
c000d958:	8b 0c 8d e0 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7120]
c000d95f:	85 c9                	test   ecx,ecx
c000d961:	74 32                	je     c000d995 <File::stat(unsigned long long*, bool*)+0x5d>
c000d963:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d969:	85 c9                	test   ecx,ecx
c000d96b:	74 28                	je     c000d995 <File::stat(unsigned long long*, bool*)+0x5d>
c000d96d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d96f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d973:	74 13                	je     c000d988 <File::stat(unsigned long long*, bool*)+0x50>
c000d975:	83 ec 04             	sub    esp,0x4
c000d978:	56                   	push   esi
c000d979:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d97f:	51                   	push   ecx
c000d980:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d983:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d986:	eb 0a                	jmp    c000d992 <File::stat(unsigned long long*, bool*)+0x5a>
c000d988:	53                   	push   ebx
c000d989:	83 c2 0d             	add    edx,0xd
c000d98c:	56                   	push   esi
c000d98d:	52                   	push   edx
c000d98e:	51                   	push   ecx
c000d98f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d992:	83 c4 10             	add    esp,0x10
c000d995:	5a                   	pop    edx
c000d996:	5b                   	pop    ebx
c000d997:	5e                   	pop    esi
c000d998:	c3                   	ret    

c000d999 <Fs::setcwd(Process*, char*)>:
c000d999:	55                   	push   ebp
c000d99a:	57                   	push   edi
c000d99b:	56                   	push   esi
c000d99c:	53                   	push   ebx
c000d99d:	81 ec 20 02 00 00    	sub    esp,0x220
c000d9a3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d9aa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d9b0:	57                   	push   edi
c000d9b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d9b8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d9bc:	56                   	push   esi
c000d9bd:	e8 46 fa ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d9c2:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9c5:	e8 d6 2c ff ff       	call   c00006a0 <strlen>
c000d9ca:	83 c4 10             	add    esp,0x10
c000d9cd:	83 f8 02             	cmp    eax,0x2
c000d9d0:	77 15                	ja     c000d9e7 <Fs::setcwd(Process*, char*)+0x4e>
c000d9d2:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d9d7:	83 eb 41             	sub    ebx,0x41
c000d9da:	8b 04 9d e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7120]
c000d9e1:	85 c0                	test   eax,eax
c000d9e3:	75 1c                	jne    c000da01 <Fs::setcwd(Process*, char*)+0x68>
c000d9e5:	eb 4c                	jmp    c000da33 <Fs::setcwd(Process*, char*)+0x9a>
c000d9e7:	83 ec 0c             	sub    esp,0xc
c000d9ea:	56                   	push   esi
c000d9eb:	e8 b0 2c ff ff       	call   c00006a0 <strlen>
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	83 f8 03             	cmp    eax,0x3
c000d9f6:	75 74                	jne    c000da6c <Fs::setcwd(Process*, char*)+0xd3>
c000d9f8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d9fd:	75 6d                	jne    c000da6c <Fs::setcwd(Process*, char*)+0xd3>
c000d9ff:	eb d1                	jmp    c000d9d2 <Fs::setcwd(Process*, char*)+0x39>
c000da01:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000da08:	75 29                	jne    c000da33 <Fs::setcwd(Process*, char*)+0x9a>
c000da0a:	83 ec 0c             	sub    esp,0xc
c000da0d:	68 d4 50 02 c0       	push   0xc00250d4
c000da12:	e8 30 f6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000da17:	5a                   	pop    edx
c000da18:	ff 34 9d e0 8e 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7120]
c000da1f:	e8 40 2e 00 00       	call   c0010864 <LogicalDisk::mount()>
c000da24:	c7 04 24 49 74 02 c0 	mov    DWORD PTR [esp],0xc0027449
c000da2b:	e8 17 f6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000da30:	83 c4 10             	add    esp,0x10
c000da33:	b8 03 00 00 00       	mov    eax,0x3
c000da38:	83 fb 19             	cmp    ebx,0x19
c000da3b:	0f 87 c6 00 00 00    	ja     c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000da41:	8b 14 9d e0 8e 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7120]
c000da48:	b8 05 00 00 00       	mov    eax,0x5
c000da4d:	85 d2                	test   edx,edx
c000da4f:	0f 84 b2 00 00 00    	je     c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000da55:	b8 06 00 00 00       	mov    eax,0x6
c000da5a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da61:	0f 85 92 00 00 00    	jne    c000daf9 <Fs::setcwd(Process*, char*)+0x160>
c000da67:	e9 9b 00 00 00       	jmp    c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000da6c:	83 ec 0c             	sub    esp,0xc
c000da6f:	68 14 01 00 00       	push   0x114
c000da74:	e8 e2 c2 ff ff       	call   c0009d5b <malloc>
c000da79:	83 c4 0c             	add    esp,0xc
c000da7c:	89 c3                	mov    ebx,eax
c000da7e:	55                   	push   ebp
c000da7f:	56                   	push   esi
c000da80:	50                   	push   eax
c000da81:	e8 2c fb ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c000da86:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000da8b:	83 c4 0c             	add    esp,0xc
c000da8e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000da92:	50                   	push   eax
c000da93:	8d 44 24 10          	lea    eax,[esp+0x10]
c000da97:	50                   	push   eax
c000da98:	53                   	push   ebx
c000da99:	e8 9a fe ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c000da9e:	83 c4 10             	add    esp,0x10
c000daa1:	83 f8 02             	cmp    eax,0x2
c000daa4:	74 04                	je     c000daaa <Fs::setcwd(Process*, char*)+0x111>
c000daa6:	85 c0                	test   eax,eax
c000daa8:	74 1c                	je     c000dac6 <Fs::setcwd(Process*, char*)+0x12d>
c000daaa:	b8 01 00 00 00       	mov    eax,0x1
c000daaf:	85 db                	test   ebx,ebx
c000dab1:	74 54                	je     c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000dab3:	83 ec 0c             	sub    esp,0xc
c000dab6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dab8:	53                   	push   ebx
c000dab9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dabc:	83 c4 10             	add    esp,0x10
c000dabf:	b8 01 00 00 00       	mov    eax,0x1
c000dac4:	eb 41                	jmp    c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000dac6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000dacb:	75 1c                	jne    c000dae9 <Fs::setcwd(Process*, char*)+0x150>
c000dacd:	b8 02 00 00 00       	mov    eax,0x2
c000dad2:	85 db                	test   ebx,ebx
c000dad4:	74 31                	je     c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000dad6:	83 ec 0c             	sub    esp,0xc
c000dad9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dadb:	53                   	push   ebx
c000dadc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dadf:	83 c4 10             	add    esp,0x10
c000dae2:	b8 02 00 00 00       	mov    eax,0x2
c000dae7:	eb 1e                	jmp    c000db07 <Fs::setcwd(Process*, char*)+0x16e>
c000dae9:	85 db                	test   ebx,ebx
c000daeb:	74 0c                	je     c000daf9 <Fs::setcwd(Process*, char*)+0x160>
c000daed:	83 ec 0c             	sub    esp,0xc
c000daf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000daf2:	53                   	push   ebx
c000daf3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000daf6:	83 c4 10             	add    esp,0x10
c000daf9:	50                   	push   eax
c000dafa:	50                   	push   eax
c000dafb:	56                   	push   esi
c000dafc:	57                   	push   edi
c000dafd:	e8 3e 2c ff ff       	call   c0000740 <strcpy>
c000db02:	83 c4 10             	add    esp,0x10
c000db05:	31 c0                	xor    eax,eax
c000db07:	81 c4 1c 02 00 00    	add    esp,0x21c
c000db0d:	5b                   	pop    ebx
c000db0e:	5e                   	pop    esi
c000db0f:	5f                   	pop    edi
c000db10:	5d                   	pop    ebp
c000db11:	c3                   	ret    

c000db12 <Directory::Directory(char const*, Process*)>:
c000db12:	83 ec 0c             	sub    esp,0xc
c000db15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db19:	83 ec 08             	sub    esp,0x8
c000db1c:	6a 00                	push   0x0
c000db1e:	50                   	push   eax
c000db1f:	e8 ba dd ff ff       	call   c000b8de <UnixFile::UnixFile(int)>
c000db24:	83 c4 10             	add    esp,0x10
c000db27:	ba dc 51 02 c0       	mov    edx,0xc00251dc
c000db2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db30:	89 10                	mov    DWORD PTR [eax],edx
c000db32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000db36:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000db3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db40:	83 c0 0d             	add    eax,0xd
c000db43:	83 ec 04             	sub    esp,0x4
c000db46:	52                   	push   edx
c000db47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4b:	50                   	push   eax
c000db4c:	e8 b7 f8 ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c000db51:	83 c4 10             	add    esp,0x10
c000db54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db58:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000db5b:	8d 50 bf             	lea    edx,[eax-0x41]
c000db5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db62:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000db68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000db70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db74:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db7a:	0f b6 c0             	movzx  eax,al
c000db7d:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c000db84:	85 c0                	test   eax,eax
c000db86:	74 5e                	je     c000dbe6 <Directory::Directory(char const*, Process*)+0xd4>
c000db88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db8c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db92:	0f b6 c0             	movzx  eax,al
c000db95:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c000db9c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dba2:	85 c0                	test   eax,eax
c000dba4:	75 40                	jne    c000dbe6 <Directory::Directory(char const*, Process*)+0xd4>
c000dba6:	83 ec 0c             	sub    esp,0xc
c000dba9:	68 24 51 02 c0       	push   0xc0025124
c000dbae:	e8 94 f4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000dbb3:	83 c4 10             	add    esp,0x10
c000dbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbba:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dbc0:	0f b6 c0             	movzx  eax,al
c000dbc3:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c000dbca:	83 ec 0c             	sub    esp,0xc
c000dbcd:	50                   	push   eax
c000dbce:	e8 91 2c 00 00       	call   c0010864 <LogicalDisk::mount()>
c000dbd3:	83 c4 10             	add    esp,0x10
c000dbd6:	83 ec 0c             	sub    esp,0xc
c000dbd9:	68 49 74 02 c0       	push   0xc0027449
c000dbde:	e8 64 f4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000dbe3:	83 c4 10             	add    esp,0x10
c000dbe6:	90                   	nop
c000dbe7:	83 c4 0c             	add    esp,0xc
c000dbea:	c3                   	ret    
c000dbeb:	90                   	nop

c000dbec <Directory::open()>:
c000dbec:	53                   	push   ebx
c000dbed:	b8 0b 00 00 00       	mov    eax,0xb
c000dbf2:	83 ec 08             	sub    esp,0x8
c000dbf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbf9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dc00:	80 fa 19             	cmp    dl,0x19
c000dc03:	77 3d                	ja     c000dc42 <Directory::open()+0x56>
c000dc05:	8b 14 95 e0 8e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7120]
c000dc0c:	85 d2                	test   edx,edx
c000dc0e:	74 32                	je     c000dc42 <Directory::open()+0x56>
c000dc10:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dc16:	85 d2                	test   edx,edx
c000dc18:	74 28                	je     c000dc42 <Directory::open()+0x56>
c000dc1a:	b8 06 00 00 00       	mov    eax,0x6
c000dc1f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dc23:	75 1d                	jne    c000dc42 <Directory::open()+0x56>
c000dc25:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dc2b:	50                   	push   eax
c000dc2c:	8b 02                	mov    eax,DWORD PTR [edx]
c000dc2e:	51                   	push   ecx
c000dc2f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dc32:	51                   	push   ecx
c000dc33:	52                   	push   edx
c000dc34:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	85 c0                	test   eax,eax
c000dc3c:	75 04                	jne    c000dc42 <Directory::open()+0x56>
c000dc3e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dc42:	83 c4 08             	add    esp,0x8
c000dc45:	5b                   	pop    ebx
c000dc46:	c3                   	ret    
c000dc47:	90                   	nop

c000dc48 <Directory::close()>:
c000dc48:	53                   	push   ebx
c000dc49:	b8 0b 00 00 00       	mov    eax,0xb
c000dc4e:	83 ec 08             	sub    esp,0x8
c000dc51:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dc55:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dc5c:	80 fa 19             	cmp    dl,0x19
c000dc5f:	77 41                	ja     c000dca2 <Directory::close()+0x5a>
c000dc61:	8b 1c 95 e0 8e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7120]
c000dc68:	85 db                	test   ebx,ebx
c000dc6a:	74 36                	je     c000dca2 <Directory::close()+0x5a>
c000dc6c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dc73:	74 2d                	je     c000dca2 <Directory::close()+0x5a>
c000dc75:	b8 05 00 00 00       	mov    eax,0x5
c000dc7a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dc7e:	74 22                	je     c000dca2 <Directory::close()+0x5a>
c000dc80:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc84:	8b 04 95 e0 8e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7120]
c000dc8b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc91:	53                   	push   ebx
c000dc92:	53                   	push   ebx
c000dc93:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc95:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dc9b:	50                   	push   eax
c000dc9c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dc9f:	83 c4 10             	add    esp,0x10
c000dca2:	83 c4 08             	add    esp,0x8
c000dca5:	5b                   	pop    ebx
c000dca6:	c3                   	ret    
c000dca7:	90                   	nop

c000dca8 <Directory::unlink()>:
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	b8 0b 00 00 00       	mov    eax,0xb
c000dcb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcb4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcbb:	80 f9 19             	cmp    cl,0x19
c000dcbe:	77 2f                	ja     c000dcef <Directory::unlink()+0x47>
c000dcc0:	8b 0c 8d e0 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7120]
c000dcc7:	85 c9                	test   ecx,ecx
c000dcc9:	74 24                	je     c000dcef <Directory::unlink()+0x47>
c000dccb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dcd1:	85 c9                	test   ecx,ecx
c000dcd3:	74 1a                	je     c000dcef <Directory::unlink()+0x47>
c000dcd5:	b8 06 00 00 00       	mov    eax,0x6
c000dcda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dcde:	75 0f                	jne    c000dcef <Directory::unlink()+0x47>
c000dce0:	83 c2 0d             	add    edx,0xd
c000dce3:	50                   	push   eax
c000dce4:	50                   	push   eax
c000dce5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dce7:	52                   	push   edx
c000dce8:	51                   	push   ecx
c000dce9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dcec:	83 c4 10             	add    esp,0x10
c000dcef:	83 c4 0c             	add    esp,0xc
c000dcf2:	c3                   	ret    
c000dcf3:	90                   	nop

c000dcf4 <Directory::rename(char const*)>:
c000dcf4:	83 ec 0c             	sub    esp,0xc
c000dcf7:	b8 0b 00 00 00       	mov    eax,0xb
c000dcfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd07:	80 f9 19             	cmp    cl,0x19
c000dd0a:	77 32                	ja     c000dd3e <Directory::rename(char const*)+0x4a>
c000dd0c:	8b 0c 8d e0 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7120]
c000dd13:	85 c9                	test   ecx,ecx
c000dd15:	74 27                	je     c000dd3e <Directory::rename(char const*)+0x4a>
c000dd17:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd1d:	85 c9                	test   ecx,ecx
c000dd1f:	74 1d                	je     c000dd3e <Directory::rename(char const*)+0x4a>
c000dd21:	b8 06 00 00 00       	mov    eax,0x6
c000dd26:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd2a:	75 12                	jne    c000dd3e <Directory::rename(char const*)+0x4a>
c000dd2c:	83 c2 0d             	add    edx,0xd
c000dd2f:	50                   	push   eax
c000dd30:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd36:	52                   	push   edx
c000dd37:	51                   	push   ecx
c000dd38:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dd3b:	83 c4 10             	add    esp,0x10
c000dd3e:	83 c4 0c             	add    esp,0xc
c000dd41:	c3                   	ret    

c000dd42 <Directory::exists()>:
c000dd42:	83 ec 0c             	sub    esp,0xc
c000dd45:	31 c0                	xor    eax,eax
c000dd47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd4b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd52:	80 f9 19             	cmp    cl,0x19
c000dd55:	77 24                	ja     c000dd7b <Directory::exists()+0x39>
c000dd57:	8b 0c 8d e0 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7120]
c000dd5e:	85 c9                	test   ecx,ecx
c000dd60:	74 19                	je     c000dd7b <Directory::exists()+0x39>
c000dd62:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd68:	85 c9                	test   ecx,ecx
c000dd6a:	74 0f                	je     c000dd7b <Directory::exists()+0x39>
c000dd6c:	83 c2 0d             	add    edx,0xd
c000dd6f:	50                   	push   eax
c000dd70:	50                   	push   eax
c000dd71:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd73:	52                   	push   edx
c000dd74:	51                   	push   ecx
c000dd75:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dd78:	83 c4 10             	add    esp,0x10
c000dd7b:	83 c4 0c             	add    esp,0xc
c000dd7e:	c3                   	ret    
c000dd7f:	90                   	nop

c000dd80 <Directory::read(dirent*)>:
c000dd80:	83 ec 1c             	sub    esp,0x1c
c000dd83:	b8 0b 00 00 00       	mov    eax,0xb
c000dd88:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd8c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd93:	80 fa 19             	cmp    dl,0x19
c000dd96:	77 30                	ja     c000ddc8 <Directory::read(dirent*)+0x48>
c000dd98:	8b 14 95 e0 8e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7120]
c000dd9f:	85 d2                	test   edx,edx
c000dda1:	74 25                	je     c000ddc8 <Directory::read(dirent*)+0x48>
c000dda3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000ddaa:	74 1c                	je     c000ddc8 <Directory::read(dirent*)+0x48>
c000ddac:	83 ec 0c             	sub    esp,0xc
c000ddaf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddb1:	8d 54 24 18          	lea    edx,[esp+0x18]
c000ddb5:	52                   	push   edx
c000ddb6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddba:	6a 00                	push   0x0
c000ddbc:	68 10 01 00 00       	push   0x110
c000ddc1:	51                   	push   ecx
c000ddc2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ddc5:	83 c4 20             	add    esp,0x20
c000ddc8:	83 c4 1c             	add    esp,0x1c
c000ddcb:	c3                   	ret    

c000ddcc <Directory::create()>:
c000ddcc:	83 ec 0c             	sub    esp,0xc
c000ddcf:	b8 0b 00 00 00       	mov    eax,0xb
c000ddd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddd8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dddf:	80 f9 19             	cmp    cl,0x19
c000dde2:	77 2f                	ja     c000de13 <Directory::create()+0x47>
c000dde4:	8b 0c 8d e0 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7120]
c000ddeb:	85 c9                	test   ecx,ecx
c000dded:	74 24                	je     c000de13 <Directory::create()+0x47>
c000ddef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ddf5:	85 c9                	test   ecx,ecx
c000ddf7:	74 1a                	je     c000de13 <Directory::create()+0x47>
c000ddf9:	b8 06 00 00 00       	mov    eax,0x6
c000ddfe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000de02:	75 0f                	jne    c000de13 <Directory::create()+0x47>
c000de04:	83 c2 0d             	add    edx,0xd
c000de07:	50                   	push   eax
c000de08:	50                   	push   eax
c000de09:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de0b:	52                   	push   edx
c000de0c:	51                   	push   ecx
c000de0d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000de10:	83 c4 10             	add    esp,0x10
c000de13:	83 c4 0c             	add    esp,0xc
c000de16:	c3                   	ret    
c000de17:	90                   	nop

c000de18 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000de18:	b8 0a 00 00 00       	mov    eax,0xa
c000de1d:	c3                   	ret    
c000de1e:	66 90                	xchg   ax,ax

c000de20 <Bus::Bus(char const*)>:
c000de20:	83 ec 0c             	sub    esp,0xc
c000de23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de27:	83 ec 08             	sub    esp,0x8
c000de2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2e:	50                   	push   eax
c000de2f:	e8 8a 09 00 00       	call   c000e7be <Device::Device(char const*)>
c000de34:	83 c4 10             	add    esp,0x10
c000de37:	ba f8 51 02 c0       	mov    edx,0xc00251f8
c000de3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de40:	89 10                	mov    DWORD PTR [eax],edx
c000de42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de46:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000de50:	90                   	nop
c000de51:	83 c4 0c             	add    esp,0xc
c000de54:	c3                   	ret    
c000de55:	90                   	nop
c000de56:	66 90                	xchg   ax,ax

c000de58 <Bus::~Bus()>:
c000de58:	83 ec 0c             	sub    esp,0xc
c000de5b:	ba f8 51 02 c0       	mov    edx,0xc00251f8
c000de60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de64:	89 10                	mov    DWORD PTR [eax],edx
c000de66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de6a:	83 ec 0c             	sub    esp,0xc
c000de6d:	50                   	push   eax
c000de6e:	e8 15 06 00 00       	call   c000e488 <Device::~Device()>
c000de73:	83 c4 10             	add    esp,0x10
c000de76:	90                   	nop
c000de77:	83 c4 0c             	add    esp,0xc
c000de7a:	c3                   	ret    
c000de7b:	90                   	nop

c000de7c <Bus::~Bus()>:
c000de7c:	83 ec 0c             	sub    esp,0xc
c000de7f:	83 ec 0c             	sub    esp,0xc
c000de82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de86:	e8 cd ff ff ff       	call   c000de58 <Bus::~Bus()>
c000de8b:	83 c4 10             	add    esp,0x10
c000de8e:	83 ec 08             	sub    esp,0x8
c000de91:	68 58 01 00 00       	push   0x158
c000de96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de9a:	e8 c7 f0 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000de9f:	83 c4 10             	add    esp,0x10
c000dea2:	83 c4 0c             	add    esp,0xc
c000dea5:	c3                   	ret    
c000dea6:	66 90                	xchg   ax,ax

c000dea8 <Buzzer::Buzzer(char const*)>:
c000dea8:	83 ec 0c             	sub    esp,0xc
c000deab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deaf:	83 ec 08             	sub    esp,0x8
c000deb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deb6:	50                   	push   eax
c000deb7:	e8 02 09 00 00       	call   c000e7be <Device::Device(char const*)>
c000debc:	83 c4 10             	add    esp,0x10
c000debf:	ba 24 52 02 c0       	mov    edx,0xc0025224
c000dec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec8:	89 10                	mov    DWORD PTR [eax],edx
c000deca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dece:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ded8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dedc:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000dee6:	90                   	nop
c000dee7:	83 c4 0c             	add    esp,0xc
c000deea:	c3                   	ret    
c000deeb:	90                   	nop

c000deec <Buzzer::~Buzzer()>:
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	ba 24 52 02 c0       	mov    edx,0xc0025224
c000def4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def8:	89 10                	mov    DWORD PTR [eax],edx
c000defa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defe:	83 ec 0c             	sub    esp,0xc
c000df01:	50                   	push   eax
c000df02:	e8 81 05 00 00       	call   c000e488 <Device::~Device()>
c000df07:	83 c4 10             	add    esp,0x10
c000df0a:	90                   	nop
c000df0b:	83 c4 0c             	add    esp,0xc
c000df0e:	c3                   	ret    
c000df0f:	90                   	nop

c000df10 <Buzzer::~Buzzer()>:
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	83 ec 0c             	sub    esp,0xc
c000df16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1a:	e8 cd ff ff ff       	call   c000deec <Buzzer::~Buzzer()>
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	83 ec 08             	sub    esp,0x8
c000df25:	68 5c 01 00 00       	push   0x15c
c000df2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2e:	e8 33 f0 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	83 c4 0c             	add    esp,0xc
c000df39:	c3                   	ret    

c000df3a <Buzzer::stop()>:
c000df3a:	83 ec 14             	sub    esp,0x14
c000df3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df41:	8b 10                	mov    edx,DWORD PTR [eax]
c000df43:	6a 00                	push   0x0
c000df45:	50                   	push   eax
c000df46:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000df49:	83 c4 1c             	add    esp,0x1c
c000df4c:	c3                   	ret    

c000df4d <beepThread(void*)>:
c000df4d:	53                   	push   ebx
c000df4e:	83 ec 08             	sub    esp,0x8
c000df51:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000df56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df5a:	48                   	dec    eax
c000df5b:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000df60:	75 02                	jne    c000df64 <beepThread(void*)+0x17>
c000df62:	fb                   	sti    
c000df63:	90                   	nop
c000df64:	83 ec 0c             	sub    esp,0xc
c000df67:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000df6e:	50                   	push   eax
c000df6f:	e8 54 b0 00 00       	call   c0018fc8 <milliTenthSleep(unsigned int)>
c000df74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000df77:	e8 be ff ff ff       	call   c000df3a <Buzzer::stop()>
c000df7c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000df84:	83 c4 18             	add    esp,0x18
c000df87:	5b                   	pop    ebx
c000df88:	e9 3b af 00 00       	jmp    c0018ec8 <blockTask(TaskState)>
c000df8d:	90                   	nop

c000df8e <Buzzer::beep(int, int, bool)>:
c000df8e:	57                   	push   edi
c000df8f:	56                   	push   esi
c000df90:	53                   	push   ebx
c000df91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df95:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df99:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000df9d:	50                   	push   eax
c000df9e:	50                   	push   eax
c000df9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa5:	53                   	push   ebx
c000dfa6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfa9:	83 c4 10             	add    esp,0x10
c000dfac:	89 f8                	mov    eax,edi
c000dfae:	84 c0                	test   al,al
c000dfb0:	74 1e                	je     c000dfd0 <Buzzer::beep(int, int, bool)+0x42>
c000dfb2:	83 ec 0c             	sub    esp,0xc
c000dfb5:	6b f6 0a             	imul   esi,esi,0xa
c000dfb8:	56                   	push   esi
c000dfb9:	e8 0a b0 00 00       	call   c0018fc8 <milliTenthSleep(unsigned int)>
c000dfbe:	83 c4 10             	add    esp,0x10
c000dfc1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dfc5:	5b                   	pop    ebx
c000dfc6:	5e                   	pop    esi
c000dfc7:	5f                   	pop    edi
c000dfc8:	e9 6d ff ff ff       	jmp    c000df3a <Buzzer::stop()>
c000dfcd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfd0:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dfd6:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000dfdb:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dfe3:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dfe7:	c7 44 24 14 4d df 00 c0 	mov    DWORD PTR [esp+0x14],0xc000df4d
c000dfef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff3:	5b                   	pop    ebx
c000dff4:	5e                   	pop    esi
c000dff5:	5f                   	pop    edi
c000dff6:	e9 b9 aa 00 00       	jmp    c0018ab4 <Process::createThread(void (*)(void*), void*, int)>
c000dffb:	90                   	nop

c000dffc <User::loadClockSettings(int)>:
c000dffc:	53                   	push   ebx
c000dffd:	83 ec 14             	sub    esp,0x14
c000e000:	68 14 01 00 00       	push   0x114
c000e005:	e8 51 bd ff ff       	call   c0009d5b <malloc>
c000e00a:	83 c4 0c             	add    esp,0xc
c000e00d:	89 c3                	mov    ebx,eax
c000e00f:	ff 35 70 9e 02 c0    	push   DWORD PTR ds:0xc0029e70
c000e015:	68 4c 52 02 c0       	push   0xc002524c
c000e01a:	50                   	push   eax
c000e01b:	e8 92 f5 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c000e020:	58                   	pop    eax
c000e021:	5a                   	pop    edx
c000e022:	6a 01                	push   0x1
c000e024:	53                   	push   ebx
c000e025:	e8 62 f6 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c000e02a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e02d:	e8 b8 f6 ff ff       	call   c000d6ea <File::close()>
c000e032:	83 c4 10             	add    esp,0x10
c000e035:	85 db                	test   ebx,ebx
c000e037:	74 0f                	je     c000e048 <User::loadClockSettings(int)+0x4c>
c000e039:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e03b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e03f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e042:	83 c4 08             	add    esp,0x8
c000e045:	5b                   	pop    ebx
c000e046:	ff e0                	jmp    eax
c000e048:	83 c4 08             	add    esp,0x8
c000e04b:	5b                   	pop    ebx
c000e04c:	c3                   	ret    
c000e04d:	90                   	nop

c000e04e <Clock::Clock(char const*)>:
c000e04e:	83 ec 0c             	sub    esp,0xc
c000e051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e055:	83 ec 08             	sub    esp,0x8
c000e058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05c:	50                   	push   eax
c000e05d:	e8 5c 07 00 00       	call   c000e7be <Device::Device(char const*)>
c000e062:	83 c4 10             	add    esp,0x10
c000e065:	ba 74 52 02 c0       	mov    edx,0xc0025274
c000e06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06e:	89 10                	mov    DWORD PTR [eax],edx
c000e070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e074:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000e07e:	90                   	nop
c000e07f:	83 c4 0c             	add    esp,0xc
c000e082:	c3                   	ret    
c000e083:	90                   	nop

c000e084 <Clock::~Clock()>:
c000e084:	83 ec 0c             	sub    esp,0xc
c000e087:	ba 74 52 02 c0       	mov    edx,0xc0025274
c000e08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e090:	89 10                	mov    DWORD PTR [eax],edx
c000e092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e096:	83 ec 0c             	sub    esp,0xc
c000e099:	50                   	push   eax
c000e09a:	e8 e9 03 00 00       	call   c000e488 <Device::~Device()>
c000e09f:	83 c4 10             	add    esp,0x10
c000e0a2:	90                   	nop
c000e0a3:	83 c4 0c             	add    esp,0xc
c000e0a6:	c3                   	ret    
c000e0a7:	90                   	nop

c000e0a8 <Clock::~Clock()>:
c000e0a8:	83 ec 0c             	sub    esp,0xc
c000e0ab:	83 ec 0c             	sub    esp,0xc
c000e0ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b2:	e8 cd ff ff ff       	call   c000e084 <Clock::~Clock()>
c000e0b7:	83 c4 10             	add    esp,0x10
c000e0ba:	83 ec 08             	sub    esp,0x8
c000e0bd:	68 58 01 00 00       	push   0x158
c000e0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0c6:	e8 9b ee ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	83 c4 0c             	add    esp,0xc
c000e0d1:	c3                   	ret    

c000e0d2 <Clock::timeInSecondsLocal()>:
c000e0d2:	53                   	push   ebx
c000e0d3:	83 ec 14             	sub    esp,0x14
c000e0d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e0da:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0dc:	50                   	push   eax
c000e0dd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e0e0:	0f b6 0d 5c 8a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028a5c
c000e0e7:	03 0d 60 8a 02 c0    	add    ecx,DWORD PTR ds:0xc0028a60
c000e0ed:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e0f3:	89 cb                	mov    ebx,ecx
c000e0f5:	c1 fb 1f             	sar    ebx,0x1f
c000e0f8:	01 c8                	add    eax,ecx
c000e0fa:	11 da                	adc    edx,ebx
c000e0fc:	83 c4 10             	add    esp,0x10
c000e0ff:	31 c9                	xor    ecx,ecx
c000e101:	80 3d 5d 8a 02 c0 00 	cmp    BYTE PTR ds:0xc0028a5d,0x0
c000e108:	74 05                	je     c000e10f <Clock::timeInSecondsLocal()+0x3d>
c000e10a:	b9 08 07 00 00       	mov    ecx,0x708
c000e10f:	31 db                	xor    ebx,ebx
c000e111:	01 c8                	add    eax,ecx
c000e113:	11 da                	adc    edx,ebx
c000e115:	83 c4 08             	add    esp,0x8
c000e118:	5b                   	pop    ebx
c000e119:	c3                   	ret    

c000e11a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e11a:	57                   	push   edi
c000e11b:	56                   	push   esi
c000e11c:	53                   	push   ebx
c000e11d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e121:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e125:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e127:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e12b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e12e:	0f b6 05 5c 8a 02 c0 	movzx  eax,BYTE PTR ds:0xc0028a5c
c000e135:	03 05 60 8a 02 c0    	add    eax,DWORD PTR ds:0xc0028a60
c000e13b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e141:	99                   	cdq    
c000e142:	29 c6                	sub    esi,eax
c000e144:	19 d7                	sbb    edi,edx
c000e146:	89 f0                	mov    eax,esi
c000e148:	89 fa                	mov    edx,edi
c000e14a:	31 f6                	xor    esi,esi
c000e14c:	80 3d 5d 8a 02 c0 00 	cmp    BYTE PTR ds:0xc0028a5d,0x0
c000e153:	74 05                	je     c000e15a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e155:	be 08 07 00 00       	mov    esi,0x708
c000e15a:	31 ff                	xor    edi,edi
c000e15c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e160:	29 f0                	sub    eax,esi
c000e162:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e166:	19 fa                	sbb    edx,edi
c000e168:	89 d8                	mov    eax,ebx
c000e16a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e16e:	5b                   	pop    ebx
c000e16f:	5e                   	pop    esi
c000e170:	5f                   	pop    edi
c000e171:	ff e0                	jmp    eax

c000e173 <datetimeToSeconds(datetime_t)>:
c000e173:	55                   	push   ebp
c000e174:	57                   	push   edi
c000e175:	56                   	push   esi
c000e176:	53                   	push   ebx
c000e177:	83 ec 14             	sub    esp,0x14
c000e17a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e17e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e182:	89 d3                	mov    ebx,edx
c000e184:	0f b6 c6             	movzx  eax,dh
c000e187:	c1 eb 10             	shr    ebx,0x10
c000e18a:	48                   	dec    eax
c000e18b:	66 81 eb 6c 07       	sub    bx,0x76c
c000e190:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e194:	0f b6 f5             	movzx  esi,ch
c000e197:	89 cf                	mov    edi,ecx
c000e199:	6b f6 3c             	imul   esi,esi,0x3c
c000e19c:	c1 ef 10             	shr    edi,0x10
c000e19f:	0f b6 c9             	movzx  ecx,cl
c000e1a2:	89 f8                	mov    eax,edi
c000e1a4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e1aa:	0f b6 f8             	movzx  edi,al
c000e1ad:	0f b6 d2             	movzx  edx,dl
c000e1b0:	01 fe                	add    esi,edi
c000e1b2:	01 f1                	add    ecx,esi
c000e1b4:	0f b7 f3             	movzx  esi,bx
c000e1b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e1bb:	c1 f9 1f             	sar    ecx,0x1f
c000e1be:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e1c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e1c7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e1cc:	8b 0c 8d c0 52 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdad40]
c000e1d3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e1d7:	76 29                	jbe    c000e202 <datetimeToSeconds(datetime_t)+0x8f>
c000e1d9:	f6 c3 03             	test   bl,0x3
c000e1dc:	75 24                	jne    c000e202 <datetimeToSeconds(datetime_t)+0x8f>
c000e1de:	31 d2                	xor    edx,edx
c000e1e0:	bf 64 00 00 00       	mov    edi,0x64
c000e1e5:	89 d8                	mov    eax,ebx
c000e1e7:	66 f7 f7             	div    di
c000e1ea:	66 85 d2             	test   dx,dx
c000e1ed:	75 12                	jne    c000e201 <datetimeToSeconds(datetime_t)+0x8e>
c000e1ef:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e1f5:	bf 90 01 00 00       	mov    edi,0x190
c000e1fa:	99                   	cdq    
c000e1fb:	f7 ff                	idiv   edi
c000e1fd:	85 d2                	test   edx,edx
c000e1ff:	75 01                	jne    c000e202 <datetimeToSeconds(datetime_t)+0x8f>
c000e201:	41                   	inc    ecx
c000e202:	66 83 fb 46          	cmp    bx,0x46
c000e206:	76 45                	jbe    c000e24d <datetimeToSeconds(datetime_t)+0xda>
c000e208:	bb 46 00 00 00       	mov    ebx,0x46
c000e20d:	bf 64 00 00 00       	mov    edi,0x64
c000e212:	bd 90 01 00 00       	mov    ebp,0x190
c000e217:	b8 6d 01 00 00       	mov    eax,0x16d
c000e21c:	f6 c3 03             	test   bl,0x3
c000e21f:	75 23                	jne    c000e244 <datetimeToSeconds(datetime_t)+0xd1>
c000e221:	89 d8                	mov    eax,ebx
c000e223:	99                   	cdq    
c000e224:	f7 ff                	idiv   edi
c000e226:	b8 6e 01 00 00       	mov    eax,0x16e
c000e22b:	85 d2                	test   edx,edx
c000e22d:	75 15                	jne    c000e244 <datetimeToSeconds(datetime_t)+0xd1>
c000e22f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e235:	99                   	cdq    
c000e236:	f7 fd                	idiv   ebp
c000e238:	83 fa 01             	cmp    edx,0x1
c000e23b:	19 c0                	sbb    eax,eax
c000e23d:	f7 d0                	not    eax
c000e23f:	05 6e 01 00 00       	add    eax,0x16e
c000e244:	01 c1                	add    ecx,eax
c000e246:	43                   	inc    ebx
c000e247:	39 f3                	cmp    ebx,esi
c000e249:	7c cc                	jl     c000e217 <datetimeToSeconds(datetime_t)+0xa4>
c000e24b:	eb 35                	jmp    c000e282 <datetimeToSeconds(datetime_t)+0x10f>
c000e24d:	74 33                	je     c000e282 <datetimeToSeconds(datetime_t)+0x10f>
c000e24f:	b8 45 00 00 00       	mov    eax,0x45
c000e254:	89 c2                	mov    edx,eax
c000e256:	83 e2 03             	and    edx,0x3
c000e259:	39 f0                	cmp    eax,esi
c000e25b:	7e 0f                	jle    c000e26c <datetimeToSeconds(datetime_t)+0xf9>
c000e25d:	83 fa 01             	cmp    edx,0x1
c000e260:	19 d2                	sbb    edx,edx
c000e262:	48                   	dec    eax
c000e263:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e26a:	eb e8                	jmp    c000e254 <datetimeToSeconds(datetime_t)+0xe1>
c000e26c:	b8 6d 01 00 00       	mov    eax,0x16d
c000e271:	85 d2                	test   edx,edx
c000e273:	75 0b                	jne    c000e280 <datetimeToSeconds(datetime_t)+0x10d>
c000e275:	66 83 fb 01          	cmp    bx,0x1
c000e279:	19 c0                	sbb    eax,eax
c000e27b:	05 6e 01 00 00       	add    eax,0x16e
c000e280:	29 c1                	sub    ecx,eax
c000e282:	b8 80 51 01 00       	mov    eax,0x15180
c000e287:	f7 e9                	imul   ecx
c000e289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e28d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e291:	83 c4 14             	add    esp,0x14
c000e294:	5b                   	pop    ebx
c000e295:	5e                   	pop    esi
c000e296:	5f                   	pop    edi
c000e297:	5d                   	pop    ebp
c000e298:	c3                   	ret    
c000e299:	90                   	nop

c000e29a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e29a:	57                   	push   edi
c000e29b:	56                   	push   esi
c000e29c:	53                   	push   ebx
c000e29d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2a1:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2a3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e2a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2ae:	e8 c0 fe ff ff       	call   c000e173 <datetimeToSeconds(datetime_t)>
c000e2b3:	59                   	pop    ecx
c000e2b4:	0f b6 0d 5c 8a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028a5c
c000e2bb:	5b                   	pop    ebx
c000e2bc:	03 0d 60 8a 02 c0    	add    ecx,DWORD PTR ds:0xc0028a60
c000e2c2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e2c8:	89 cb                	mov    ebx,ecx
c000e2ca:	c1 fb 1f             	sar    ebx,0x1f
c000e2cd:	29 c8                	sub    eax,ecx
c000e2cf:	19 da                	sbb    edx,ebx
c000e2d1:	31 c9                	xor    ecx,ecx
c000e2d3:	80 3d 5d 8a 02 c0 00 	cmp    BYTE PTR ds:0xc0028a5d,0x0
c000e2da:	74 05                	je     c000e2e1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e2dc:	b9 08 07 00 00       	mov    ecx,0x708
c000e2e1:	31 db                	xor    ebx,ebx
c000e2e3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e2e7:	29 c8                	sub    eax,ecx
c000e2e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e2ed:	19 da                	sbb    edx,ebx
c000e2ef:	89 f8                	mov    eax,edi
c000e2f1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e2f5:	5b                   	pop    ebx
c000e2f6:	5e                   	pop    esi
c000e2f7:	5f                   	pop    edi
c000e2f8:	ff e0                	jmp    eax

c000e2fa <secondsToDatetime(unsigned long long)>:
c000e2fa:	55                   	push   ebp
c000e2fb:	57                   	push   edi
c000e2fc:	56                   	push   esi
c000e2fd:	53                   	push   ebx
c000e2fe:	83 ec 1c             	sub    esp,0x1c
c000e301:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e305:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e309:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e30d:	6a 00                	push   0x0
c000e30f:	68 80 51 01 00       	push   0x15180
c000e314:	55                   	push   ebp
c000e315:	57                   	push   edi
c000e316:	e8 35 4a 01 00       	call   c0022d50 <__udivdi3>
c000e31b:	83 c4 10             	add    esp,0x10
c000e31e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e324:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e328:	6a 00                	push   0x0
c000e32a:	68 80 51 01 00       	push   0x15180
c000e32f:	55                   	push   ebp
c000e330:	57                   	push   edi
c000e331:	bf 10 0e 00 00       	mov    edi,0xe10
c000e336:	e8 15 4b 01 00       	call   c0022e50 <__umoddi3>
c000e33b:	83 c4 10             	add    esp,0x10
c000e33e:	99                   	cdq    
c000e33f:	f7 ff                	idiv   edi
c000e341:	bf 3c 00 00 00       	mov    edi,0x3c
c000e346:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e349:	89 d0                	mov    eax,edx
c000e34b:	99                   	cdq    
c000e34c:	f7 ff                	idiv   edi
c000e34e:	85 db                	test   ebx,ebx
c000e350:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e353:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e356:	79 11                	jns    c000e369 <secondsToDatetime(unsigned long long)+0x6f>
c000e358:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e35c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e362:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e367:	eb 07                	jmp    c000e370 <secondsToDatetime(unsigned long long)+0x76>
c000e369:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e36e:	89 d8                	mov    eax,ebx
c000e370:	bf b4 05 00 00       	mov    edi,0x5b4
c000e375:	99                   	cdq    
c000e376:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e37b:	f7 f9                	idiv   ecx
c000e37d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e382:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e386:	31 d2                	xor    edx,edx
c000e388:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e390:	01 c3                	add    ebx,eax
c000e392:	89 d8                	mov    eax,ebx
c000e394:	f7 f1                	div    ecx
c000e396:	31 d2                	xor    edx,edx
c000e398:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e39b:	89 d8                	mov    eax,ebx
c000e39d:	f7 f7                	div    edi
c000e39f:	31 d2                	xor    edx,edx
c000e3a1:	29 c1                	sub    ecx,eax
c000e3a3:	89 d8                	mov    eax,ebx
c000e3a5:	f7 f5                	div    ebp
c000e3a7:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e3ac:	29 c1                	sub    ecx,eax
c000e3ae:	31 d2                	xor    edx,edx
c000e3b0:	89 c8                	mov    eax,ecx
c000e3b2:	f7 f5                	div    ebp
c000e3b4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e3b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3bd:	31 d2                	xor    edx,edx
c000e3bf:	89 c8                	mov    eax,ecx
c000e3c1:	f7 f5                	div    ebp
c000e3c3:	31 d2                	xor    edx,edx
c000e3c5:	01 c3                	add    ebx,eax
c000e3c7:	89 c8                	mov    eax,ecx
c000e3c9:	f7 f7                	div    edi
c000e3cb:	bf 99 00 00 00       	mov    edi,0x99
c000e3d0:	29 c3                	sub    ebx,eax
c000e3d2:	31 d2                	xor    edx,edx
c000e3d4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e3dc:	29 c3                	sub    ebx,eax
c000e3de:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e3e1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e3e4:	bb 05 00 00 00       	mov    ebx,0x5
c000e3e9:	83 c1 02             	add    ecx,0x2
c000e3ec:	89 c8                	mov    eax,ecx
c000e3ee:	f7 f7                	div    edi
c000e3f0:	31 d2                	xor    edx,edx
c000e3f2:	89 c7                	mov    edi,eax
c000e3f4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e3fa:	83 c0 02             	add    eax,0x2
c000e3fd:	f7 f3                	div    ebx
c000e3ff:	89 eb                	mov    ebx,ebp
c000e401:	29 c3                	sub    ebx,eax
c000e403:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e409:	88 1e                	mov    BYTE PTR [esi],bl
c000e40b:	19 c0                	sbb    eax,eax
c000e40d:	31 d2                	xor    edx,edx
c000e40f:	83 e0 0c             	and    eax,0xc
c000e412:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e416:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e41e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e422:	83 f9 01             	cmp    ecx,0x1
c000e425:	0f 96 c2             	setbe  dl
c000e428:	41                   	inc    ecx
c000e429:	01 d0                	add    eax,edx
c000e42b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e42e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e432:	83 c4 1c             	add    esp,0x1c
c000e435:	89 f0                	mov    eax,esi
c000e437:	5b                   	pop    ebx
c000e438:	5e                   	pop    esi
c000e439:	5f                   	pop    edi
c000e43a:	5d                   	pop    ebp
c000e43b:	c2 04 00             	ret    0x4

c000e43e <Clock::timeInDatetimeLocal()>:
c000e43e:	53                   	push   ebx
c000e43f:	83 ec 14             	sub    esp,0x14
c000e442:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e446:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e44a:	e8 83 fc ff ff       	call   c000e0d2 <Clock::timeInSecondsLocal()>
c000e44f:	83 c4 0c             	add    esp,0xc
c000e452:	52                   	push   edx
c000e453:	50                   	push   eax
c000e454:	53                   	push   ebx
c000e455:	e8 a0 fe ff ff       	call   c000e2fa <secondsToDatetime(unsigned long long)>
c000e45a:	89 d8                	mov    eax,ebx
c000e45c:	83 c4 14             	add    esp,0x14
c000e45f:	5b                   	pop    ebx
c000e460:	c2 04 00             	ret    0x4
c000e463:	90                   	nop

c000e464 <Device::hibernate()>:
c000e464:	c3                   	ret    
c000e465:	90                   	nop

c000e466 <Device::wake()>:
c000e466:	c3                   	ret    
c000e467:	90                   	nop

c000e468 <Device::detect()>:
c000e468:	c3                   	ret    
c000e469:	90                   	nop

c000e46a <Device::disableLegacy()>:
c000e46a:	c3                   	ret    
c000e46b:	90                   	nop

c000e46c <Device::powerSaving(PowerSavingLevel)>:
c000e46c:	c3                   	ret    
c000e46d:	90                   	nop

c000e46e <DriverlessDevice::close(int, int, void*)>:
c000e46e:	31 c0                	xor    eax,eax
c000e470:	c3                   	ret    
c000e471:	90                   	nop

c000e472 <DriverlessDevice::detect()>:
c000e472:	c3                   	ret    
c000e473:	90                   	nop

c000e474 <DriverlessDevice::open(int, int, void*)>:
c000e474:	83 ec 18             	sub    esp,0x18
c000e477:	68 f0 52 02 c0       	push   0xc00252f0
c000e47c:	e8 44 6c 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000e481:	83 c8 ff             	or     eax,0xffffffff
c000e484:	83 c4 1c             	add    esp,0x1c
c000e487:	c3                   	ret    

c000e488 <Device::~Device()>:
c000e488:	ba 50 53 02 c0       	mov    edx,0xc0025350
c000e48d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e491:	89 10                	mov    DWORD PTR [eax],edx
c000e493:	90                   	nop
c000e494:	c3                   	ret    
c000e495:	90                   	nop

c000e496 <Device::~Device()>:
c000e496:	83 ec 0c             	sub    esp,0xc
c000e499:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e49d:	e8 e6 ff ff ff       	call   c000e488 <Device::~Device()>
c000e4a2:	83 c4 04             	add    esp,0x4
c000e4a5:	83 ec 08             	sub    esp,0x8
c000e4a8:	68 58 01 00 00       	push   0x158
c000e4ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b1:	e8 b0 ea ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000e4b6:	83 c4 10             	add    esp,0x10
c000e4b9:	83 c4 0c             	add    esp,0xc
c000e4bc:	c3                   	ret    
c000e4bd:	90                   	nop

c000e4be <Device::findAndLoadDriver()>:
c000e4be:	c7 44 24 04 0e 53 02 c0 	mov    DWORD PTR [esp+0x4],0xc002530e
c000e4c6:	e9 7c eb ff ff       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>
c000e4cb:	90                   	nop

c000e4cc <Device::preOpenPCI(PCIDeviceInfo)>:
c000e4cc:	57                   	push   edi
c000e4cd:	b9 09 00 00 00       	mov    ecx,0x9
c000e4d2:	56                   	push   esi
c000e4d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e4d7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e4db:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e4e5:	81 c7 18 01 00 00    	add    edi,0x118
c000e4eb:	fc                   	cld    
c000e4ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e4ee:	5e                   	pop    esi
c000e4ef:	5f                   	pop    edi
c000e4f0:	c3                   	ret    
c000e4f1:	90                   	nop

c000e4f2 <Device::preOpenACPI(void*, char*, char*)>:
c000e4f2:	57                   	push   edi
c000e4f3:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e4f8:	56                   	push   esi
c000e4f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e501:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e50b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e511:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e517:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e51b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e51d:	b9 0e 00 00 00       	mov    ecx,0xe
c000e522:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e528:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e52c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e52e:	5e                   	pop    esi
c000e52f:	5f                   	pop    edi
c000e530:	c3                   	ret    
c000e531:	90                   	nop

c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e536:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e53b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e542:	75 0b                	jne    c000e54f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e544:	8b 00                	mov    eax,DWORD PTR [eax]
c000e546:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e54a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e54d:	eb 1e                	jmp    c000e56d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e54f:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000e554:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e55a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e560:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e562:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e566:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e56a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e56d:	ff e0                	jmp    eax
c000e56f:	90                   	nop

c000e570 <Device::getParent()>:
c000e570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e574:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e57a:	c3                   	ret    
c000e57b:	90                   	nop

c000e57c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e57c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e580:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e585:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e58c:	75 0b                	jne    c000e599 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e58e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e590:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e594:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e597:	eb 1e                	jmp    c000e5b7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e599:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000e59e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e5a4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e5aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e5ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5b4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e5b7:	ff e0                	jmp    eax
c000e5b9:	90                   	nop

c000e5ba <Device::addChild(Device*)>:
c000e5ba:	53                   	push   ebx
c000e5bb:	83 ec 08             	sub    esp,0x8
c000e5be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e5c6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e5cc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e5d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e5d4:	85 d2                	test   edx,edx
c000e5d6:	74 04                	je     c000e5dc <Device::addChild(Device*)+0x22>
c000e5d8:	89 d3                	mov    ebx,edx
c000e5da:	eb f6                	jmp    c000e5d2 <Device::addChild(Device*)+0x18>
c000e5dc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e5df:	83 ec 0c             	sub    esp,0xc
c000e5e2:	6a 08                	push   0x8
c000e5e4:	e8 72 b7 ff ff       	call   c0009d5b <malloc>
c000e5e9:	89 03                	mov    DWORD PTR [ebx],eax
c000e5eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e5f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e5f8:	83 c4 18             	add    esp,0x18
c000e5fb:	5b                   	pop    ebx
c000e5fc:	c3                   	ret    
c000e5fd:	90                   	nop

c000e5fe <Device::removeAllChildren()>:
c000e5fe:	56                   	push   esi
c000e5ff:	53                   	push   ebx
c000e600:	52                   	push   edx
c000e601:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e605:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e60b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e60e:	74 17                	je     c000e627 <Device::removeAllChildren()+0x29>
c000e610:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e613:	85 c0                	test   eax,eax
c000e615:	74 0c                	je     c000e623 <Device::removeAllChildren()+0x25>
c000e617:	83 ec 0c             	sub    esp,0xc
c000e61a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e61c:	50                   	push   eax
c000e61d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e620:	83 c4 10             	add    esp,0x10
c000e623:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e625:	eb e4                	jmp    c000e60b <Device::removeAllChildren()+0xd>
c000e627:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e62d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e633:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e639:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e640:	58                   	pop    eax
c000e641:	5b                   	pop    ebx
c000e642:	5e                   	pop    esi
c000e643:	c3                   	ret    

c000e644 <Device::hibernateAll()>:
c000e644:	53                   	push   ebx
c000e645:	83 ec 14             	sub    esp,0x14
c000e648:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e64c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e64e:	53                   	push   ebx
c000e64f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e652:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e658:	83 c4 10             	add    esp,0x10
c000e65b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e65e:	74 0f                	je     c000e66f <Device::hibernateAll()+0x2b>
c000e660:	83 ec 0c             	sub    esp,0xc
c000e663:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e666:	e8 d9 ff ff ff       	call   c000e644 <Device::hibernateAll()>
c000e66b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e66d:	eb e9                	jmp    c000e658 <Device::hibernateAll()+0x14>
c000e66f:	83 c4 08             	add    esp,0x8
c000e672:	5b                   	pop    ebx
c000e673:	c3                   	ret    

c000e674 <Device::wakeAll()>:
c000e674:	53                   	push   ebx
c000e675:	83 ec 14             	sub    esp,0x14
c000e678:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e67c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e67e:	53                   	push   ebx
c000e67f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e682:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e688:	83 c4 10             	add    esp,0x10
c000e68b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e68e:	74 0f                	je     c000e69f <Device::wakeAll()+0x2b>
c000e690:	83 ec 0c             	sub    esp,0xc
c000e693:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e696:	e8 d9 ff ff ff       	call   c000e674 <Device::wakeAll()>
c000e69b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e69d:	eb e9                	jmp    c000e688 <Device::wakeAll()+0x14>
c000e69f:	83 c4 08             	add    esp,0x8
c000e6a2:	5b                   	pop    ebx
c000e6a3:	c3                   	ret    

c000e6a4 <Device::detectAll()>:
c000e6a4:	53                   	push   ebx
c000e6a5:	83 ec 14             	sub    esp,0x14
c000e6a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6ae:	53                   	push   ebx
c000e6af:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e6b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6b8:	83 c4 10             	add    esp,0x10
c000e6bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6be:	74 0f                	je     c000e6cf <Device::detectAll()+0x2b>
c000e6c0:	83 ec 0c             	sub    esp,0xc
c000e6c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6c6:	e8 d9 ff ff ff       	call   c000e6a4 <Device::detectAll()>
c000e6cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6cd:	eb e9                	jmp    c000e6b8 <Device::detectAll()+0x14>
c000e6cf:	83 c4 08             	add    esp,0x8
c000e6d2:	5b                   	pop    ebx
c000e6d3:	c3                   	ret    

c000e6d4 <Device::disableLegacyAll()>:
c000e6d4:	53                   	push   ebx
c000e6d5:	83 ec 14             	sub    esp,0x14
c000e6d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6de:	53                   	push   ebx
c000e6df:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e6e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6e8:	83 c4 10             	add    esp,0x10
c000e6eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6ee:	74 0f                	je     c000e6ff <Device::disableLegacyAll()+0x2b>
c000e6f0:	83 ec 0c             	sub    esp,0xc
c000e6f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6f6:	e8 d9 ff ff ff       	call   c000e6d4 <Device::disableLegacyAll()>
c000e6fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6fd:	eb e9                	jmp    c000e6e8 <Device::disableLegacyAll()+0x14>
c000e6ff:	83 c4 08             	add    esp,0x8
c000e702:	5b                   	pop    ebx
c000e703:	c3                   	ret    

c000e704 <Device::loadDriversForAll()>:
c000e704:	53                   	push   ebx
c000e705:	83 ec 08             	sub    esp,0x8
c000e708:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e70c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e713:	75 0c                	jne    c000e721 <Device::loadDriversForAll()+0x1d>
c000e715:	83 ec 0c             	sub    esp,0xc
c000e718:	53                   	push   ebx
c000e719:	e8 a0 fd ff ff       	call   c000e4be <Device::findAndLoadDriver()>
c000e71e:	83 c4 10             	add    esp,0x10
c000e721:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e727:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e72a:	74 12                	je     c000e73e <Device::loadDriversForAll()+0x3a>
c000e72c:	83 ec 0c             	sub    esp,0xc
c000e72f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e732:	e8 cd ff ff ff       	call   c000e704 <Device::loadDriversForAll()>
c000e737:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e739:	83 c4 10             	add    esp,0x10
c000e73c:	eb e9                	jmp    c000e727 <Device::loadDriversForAll()+0x23>
c000e73e:	83 c4 08             	add    esp,0x8
c000e741:	5b                   	pop    ebx
c000e742:	c3                   	ret    
c000e743:	90                   	nop

c000e744 <Device::closeAll()>:
c000e744:	53                   	push   ebx
c000e745:	83 ec 08             	sub    esp,0x8
c000e748:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e74c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e74e:	6a 00                	push   0x0
c000e750:	6a 00                	push   0x0
c000e752:	6a 00                	push   0x0
c000e754:	53                   	push   ebx
c000e755:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e758:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e75e:	83 c4 10             	add    esp,0x10
c000e761:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e764:	74 0f                	je     c000e775 <Device::closeAll()+0x31>
c000e766:	83 ec 0c             	sub    esp,0xc
c000e769:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e76c:	e8 d3 ff ff ff       	call   c000e744 <Device::closeAll()>
c000e771:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e773:	eb e9                	jmp    c000e75e <Device::closeAll()+0x1a>
c000e775:	83 c4 08             	add    esp,0x8
c000e778:	5b                   	pop    ebx
c000e779:	c3                   	ret    

c000e77a <Device::powerSavingAll(PowerSavingLevel)>:
c000e77a:	56                   	push   esi
c000e77b:	53                   	push   ebx
c000e77c:	83 ec 0c             	sub    esp,0xc
c000e77f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e783:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e787:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e789:	56                   	push   esi
c000e78a:	53                   	push   ebx
c000e78b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e78e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e794:	83 c4 10             	add    esp,0x10
c000e797:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e79a:	74 0f                	je     c000e7ab <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e79c:	52                   	push   edx
c000e79d:	52                   	push   edx
c000e79e:	56                   	push   esi
c000e79f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7a2:	e8 d3 ff ff ff       	call   c000e77a <Device::powerSavingAll(PowerSavingLevel)>
c000e7a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7a9:	eb e9                	jmp    c000e794 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e7ab:	58                   	pop    eax
c000e7ac:	5b                   	pop    ebx
c000e7ad:	5e                   	pop    esi
c000e7ae:	c3                   	ret    
c000e7af:	90                   	nop

c000e7b0 <Device::setName(char const*)>:
c000e7b0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e7b8:	e9 83 1f ff ff       	jmp    c0000740 <strcpy>
c000e7bd:	90                   	nop

c000e7be <Device::Device(char const*)>:
c000e7be:	83 ec 1c             	sub    esp,0x1c
c000e7c1:	ba 50 53 02 c0       	mov    edx,0xc0025350
c000e7c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ca:	89 10                	mov    DWORD PTR [eax],edx
c000e7cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e7da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7de:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e7e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e7f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7fa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e804:	83 ec 08             	sub    esp,0x8
c000e807:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e80b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e80f:	e8 9c ff ff ff       	call   c000e7b0 <Device::setName(char const*)>
c000e814:	83 c4 10             	add    esp,0x10
c000e817:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e81f:	83 ec 0c             	sub    esp,0xc
c000e822:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e826:	e8 30 b5 ff ff       	call   c0009d5b <malloc>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e834:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e83b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e83f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e849:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e84f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e859:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e85f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e86a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e871:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e875:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e87c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e880:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e88a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e88e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e89c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e8a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8aa:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e8b4:	90                   	nop
c000e8b5:	83 c4 1c             	add    esp,0x1c
c000e8b8:	c3                   	ret    
c000e8b9:	90                   	nop

c000e8ba <Device::getName()>:
c000e8ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8be:	05 d0 00 00 00       	add    eax,0xd0
c000e8c3:	c3                   	ret    

c000e8c4 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e8c4:	83 ec 0c             	sub    esp,0xc
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	83 ec 08             	sub    esp,0x8
c000e8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d2:	50                   	push   eax
c000e8d3:	e8 e6 fe ff ff       	call   c000e7be <Device::Device(char const*)>
c000e8d8:	83 c4 10             	add    esp,0x10
c000e8db:	ba 7c 53 02 c0       	mov    edx,0xc002537c
c000e8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e4:	89 10                	mov    DWORD PTR [eax],edx
c000e8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ea:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e8f4:	90                   	nop
c000e8f5:	83 c4 0c             	add    esp,0xc
c000e8f8:	c3                   	ret    
c000e8f9:	90                   	nop

c000e8fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e8fa:	57                   	push   edi
c000e8fb:	56                   	push   esi
c000e8fc:	53                   	push   ebx
c000e8fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e901:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e905:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e909:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e90f:	75 0c                	jne    c000e91d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e911:	52                   	push   edx
c000e912:	52                   	push   edx
c000e913:	53                   	push   ebx
c000e914:	56                   	push   esi
c000e915:	e8 e8 48 01 00       	call   c0023202 <LinkedList<Device>::addElement(Device*)>
c000e91a:	83 c4 10             	add    esp,0x10
c000e91d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e923:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e926:	74 12                	je     c000e93a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e928:	50                   	push   eax
c000e929:	57                   	push   edi
c000e92a:	56                   	push   esi
c000e92b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e92e:	e8 c7 ff ff ff       	call   c000e8fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e933:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e935:	83 c4 10             	add    esp,0x10
c000e938:	eb e9                	jmp    c000e923 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e93a:	5b                   	pop    ebx
c000e93b:	5e                   	pop    esi
c000e93c:	5f                   	pop    edi
c000e93d:	c3                   	ret    

c000e93e <getDevicesOfType(DeviceType)>:
c000e93e:	53                   	push   ebx
c000e93f:	83 ec 14             	sub    esp,0x14
c000e942:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e946:	53                   	push   ebx
c000e947:	e8 92 49 01 00       	call   c00232de <LinkedList<Device>::LinkedList()>
c000e94c:	83 c4 0c             	add    esp,0xc
c000e94f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e953:	53                   	push   ebx
c000e954:	ff 35 28 89 02 c0    	push   DWORD PTR ds:0xc0028928
c000e95a:	e8 9b ff ff ff       	call   c000e8fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e95f:	89 d8                	mov    eax,ebx
c000e961:	83 c4 18             	add    esp,0x18
c000e964:	5b                   	pop    ebx
c000e965:	c2 04 00             	ret    0x4

c000e968 <HardDiskController::HardDiskController(char const*)>:
c000e968:	83 ec 0c             	sub    esp,0xc
c000e96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e96f:	83 ec 08             	sub    esp,0x8
c000e972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e976:	50                   	push   eax
c000e977:	e8 42 fe ff ff       	call   c000e7be <Device::Device(char const*)>
c000e97c:	83 c4 10             	add    esp,0x10
c000e97f:	ba a8 53 02 c0       	mov    edx,0xc00253a8
c000e984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e988:	89 10                	mov    DWORD PTR [eax],edx
c000e98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e98e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e998:	90                   	nop
c000e999:	83 c4 0c             	add    esp,0xc
c000e99c:	c3                   	ret    
c000e99d:	90                   	nop
c000e99e:	66 90                	xchg   ax,ax

c000e9a0 <HardDiskController::~HardDiskController()>:
c000e9a0:	83 ec 0c             	sub    esp,0xc
c000e9a3:	ba a8 53 02 c0       	mov    edx,0xc00253a8
c000e9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9ac:	89 10                	mov    DWORD PTR [eax],edx
c000e9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9b2:	83 ec 0c             	sub    esp,0xc
c000e9b5:	50                   	push   eax
c000e9b6:	e8 cd fa ff ff       	call   c000e488 <Device::~Device()>
c000e9bb:	83 c4 10             	add    esp,0x10
c000e9be:	90                   	nop
c000e9bf:	83 c4 0c             	add    esp,0xc
c000e9c2:	c3                   	ret    
c000e9c3:	90                   	nop

c000e9c4 <HardDiskController::~HardDiskController()>:
c000e9c4:	83 ec 0c             	sub    esp,0xc
c000e9c7:	83 ec 0c             	sub    esp,0xc
c000e9ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9ce:	e8 cd ff ff ff       	call   c000e9a0 <HardDiskController::~HardDiskController()>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 ec 08             	sub    esp,0x8
c000e9d9:	68 58 01 00 00       	push   0x158
c000e9de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9e2:	e8 7f e5 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000e9e7:	83 c4 10             	add    esp,0x10
c000e9ea:	83 c4 0c             	add    esp,0xc
c000e9ed:	c3                   	ret    

c000e9ee <PhysicalDisk::eject()>:
c000e9ee:	83 c8 ff             	or     eax,0xffffffff
c000e9f1:	c3                   	ret    

c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e9f2:	83 ec 0c             	sub    esp,0xc
c000e9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9f9:	83 ec 08             	sub    esp,0x8
c000e9fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea00:	50                   	push   eax
c000ea01:	e8 b8 fd ff ff       	call   c000e7be <Device::Device(char const*)>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c000ea0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea12:	89 10                	mov    DWORD PTR [eax],edx
c000ea14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea18:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ea1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea23:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ea2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea2e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ea38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea40:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ea46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ea54:	90                   	nop
c000ea55:	83 c4 0c             	add    esp,0xc
c000ea58:	c3                   	ret    
c000ea59:	90                   	nop

c000ea5a <PhysicalDisk::startCache()>:
c000ea5a:	56                   	push   esi
c000ea5b:	53                   	push   ebx
c000ea5c:	83 ec 10             	sub    esp,0x10
c000ea5f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ea63:	6a 44                	push   0x44
c000ea65:	e8 f1 b2 ff ff       	call   c0009d5b <malloc>
c000ea6a:	89 c6                	mov    esi,eax
c000ea6c:	58                   	pop    eax
c000ea6d:	5a                   	pop    edx
c000ea6e:	53                   	push   ebx
c000ea6f:	56                   	push   esi
c000ea70:	e8 07 27 00 00       	call   c001117c <VCache::VCache(PhysicalDisk*)>
c000ea75:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ea7b:	83 c4 14             	add    esp,0x14
c000ea7e:	5b                   	pop    ebx
c000ea7f:	5e                   	pop    esi
c000ea80:	c3                   	ret    
c000ea81:	90                   	nop

c000ea82 <PhysicalDisk::~PhysicalDisk()>:
c000ea82:	83 ec 0c             	sub    esp,0xc
c000ea85:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c000ea8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea8e:	89 10                	mov    DWORD PTR [eax],edx
c000ea90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea94:	83 ec 0c             	sub    esp,0xc
c000ea97:	50                   	push   eax
c000ea98:	e8 eb f9 ff ff       	call   c000e488 <Device::~Device()>
c000ea9d:	83 c4 10             	add    esp,0x10
c000eaa0:	90                   	nop
c000eaa1:	83 c4 0c             	add    esp,0xc
c000eaa4:	c3                   	ret    
c000eaa5:	90                   	nop

c000eaa6 <PhysicalDisk::~PhysicalDisk()>:
c000eaa6:	83 ec 0c             	sub    esp,0xc
c000eaa9:	83 ec 0c             	sub    esp,0xc
c000eaac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eab0:	e8 cd ff ff ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c000eab5:	83 c4 10             	add    esp,0x10
c000eab8:	83 ec 08             	sub    esp,0x8
c000eabb:	68 6c 01 00 00       	push   0x16c
c000eac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eac4:	e8 9d e4 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000eac9:	83 c4 10             	add    esp,0x10
c000eacc:	83 c4 0c             	add    esp,0xc
c000eacf:	c3                   	ret    

c000ead0 <FPU::FPU(char const*)>:
c000ead0:	83 ec 0c             	sub    esp,0xc
c000ead3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead7:	83 ec 08             	sub    esp,0x8
c000eada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eade:	50                   	push   eax
c000eadf:	e8 da fc ff ff       	call   c000e7be <Device::Device(char const*)>
c000eae4:	83 c4 10             	add    esp,0x10
c000eae7:	ba 34 54 02 c0       	mov    edx,0xc0025434
c000eaec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf0:	89 10                	mov    DWORD PTR [eax],edx
c000eaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000eb00:	90                   	nop
c000eb01:	83 c4 0c             	add    esp,0xc
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop
c000eb06:	66 90                	xchg   ax,ax

c000eb08 <FPU::~FPU()>:
c000eb08:	83 ec 0c             	sub    esp,0xc
c000eb0b:	ba 34 54 02 c0       	mov    edx,0xc0025434
c000eb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb14:	89 10                	mov    DWORD PTR [eax],edx
c000eb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1a:	83 ec 0c             	sub    esp,0xc
c000eb1d:	50                   	push   eax
c000eb1e:	e8 65 f9 ff ff       	call   c000e488 <Device::~Device()>
c000eb23:	83 c4 10             	add    esp,0x10
c000eb26:	90                   	nop
c000eb27:	83 c4 0c             	add    esp,0xc
c000eb2a:	c3                   	ret    
c000eb2b:	90                   	nop

c000eb2c <FPU::~FPU()>:
c000eb2c:	83 ec 0c             	sub    esp,0xc
c000eb2f:	83 ec 0c             	sub    esp,0xc
c000eb32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb36:	e8 cd ff ff ff       	call   c000eb08 <FPU::~FPU()>
c000eb3b:	83 c4 10             	add    esp,0x10
c000eb3e:	83 ec 08             	sub    esp,0x8
c000eb41:	68 58 01 00 00       	push   0x158
c000eb46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb4a:	e8 17 e4 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000eb4f:	83 c4 10             	add    esp,0x10
c000eb52:	83 c4 0c             	add    esp,0xc
c000eb55:	c3                   	ret    

c000eb56 <setupFPU()>:
c000eb56:	83 ec 28             	sub    esp,0x28
c000eb59:	68 04 54 02 c0       	push   0xc0025404
c000eb5e:	e8 e4 e4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000eb63:	8b 15 28 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028928
c000eb69:	83 c4 10             	add    esp,0x10
c000eb6c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000eb72:	a8 10                	test   al,0x10
c000eb74:	74 2e                	je     c000eba4 <setupFPU()+0x4e>
c000eb76:	83 ec 0c             	sub    esp,0xc
c000eb79:	68 17 54 02 c0       	push   0xc0025417
c000eb7e:	e8 c4 e4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000eb83:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c000eb8a:	e8 cc b1 ff ff       	call   c0009d5b <malloc>
c000eb8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eb96:	e8 13 2f 01 00       	call   c0021aae <x87::x87()>
c000eb9b:	83 c4 10             	add    esp,0x10
c000eb9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eba2:	eb 24                	jmp    c000ebc8 <setupFPU()+0x72>
c000eba4:	83 e0 ef             	and    eax,0xffffffef
c000eba7:	83 ec 0c             	sub    esp,0xc
c000ebaa:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000ebb0:	68 21 54 02 c0       	push   0xc0025421
c000ebb5:	e8 8d e4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000ebba:	0f 20 c0             	mov    eax,cr0
c000ebbd:	83 c8 04             	or     eax,0x4
c000ebc0:	0f 22 c0             	mov    cr0,eax
c000ebc3:	31 c0                	xor    eax,eax
c000ebc5:	83 c4 10             	add    esp,0x10
c000ebc8:	83 c4 1c             	add    esp,0x1c
c000ebcb:	c3                   	ret    

c000ebcc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ebcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebd0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebd4:	c1 e0 04             	shl    eax,0x4
c000ebd7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000ebdb:	8d 50 10             	lea    edx,[eax+0x10]
c000ebde:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000ebe4:	74 08                	je     c000ebee <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000ebe6:	83 c0 04             	add    eax,0x4
c000ebe9:	39 d0                	cmp    eax,edx
c000ebeb:	75 f1                	jne    c000ebde <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000ebed:	c3                   	ret    
c000ebee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ebf8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ec02:	eb e2                	jmp    c000ebe6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ec04 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ec04:	57                   	push   edi
c000ec05:	31 c0                	xor    eax,eax
c000ec07:	56                   	push   esi
c000ec08:	53                   	push   ebx
c000ec09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ec0d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec11:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec15:	89 da                	mov    edx,ebx
c000ec17:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec1b:	c1 e2 04             	shl    edx,0x4
c000ec1e:	01 ca                	add    edx,ecx
c000ec20:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000ec28:	74 16                	je     c000ec40 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000ec2a:	40                   	inc    eax
c000ec2b:	83 f8 04             	cmp    eax,0x4
c000ec2e:	75 f0                	jne    c000ec20 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ec30:	c7 44 24 10 64 54 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025464
c000ec38:	5b                   	pop    ebx
c000ec39:	5e                   	pop    esi
c000ec3a:	5f                   	pop    edi
c000ec3b:	e9 85 64 00 00       	jmp    c00150c5 <Krnl::panic(char const*)>
c000ec40:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ec43:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ec46:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ec4c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ec52:	5b                   	pop    ebx
c000ec53:	5e                   	pop    esi
c000ec54:	5f                   	pop    edi
c000ec55:	c3                   	ret    

c000ec56 <doubleFault(regs*, void*)>:
c000ec56:	55                   	push   ebp
c000ec57:	89 e5                	mov    ebp,esp
c000ec59:	83 ec 08             	sub    esp,0x8
c000ec5c:	83 ec 0c             	sub    esp,0xc
c000ec5f:	68 71 54 02 c0       	push   0xc0025471
c000ec64:	e8 5c 64 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000ec69:	83 c4 10             	add    esp,0x10
c000ec6c:	90                   	nop
c000ec6d:	c9                   	leave  
c000ec6e:	c3                   	ret    
c000ec6f:	90                   	nop

c000ec70 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ec70:	56                   	push   esi
c000ec71:	53                   	push   ebx
c000ec72:	50                   	push   eax
c000ec73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ec77:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec7b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ec80:	75 35                	jne    c000ecb7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ec82:	8d 43 20             	lea    eax,[ebx+0x20]
c000ec85:	31 d2                	xor    edx,edx
c000ec87:	89 c1                	mov    ecx,eax
c000ec89:	c1 e1 04             	shl    ecx,0x4
c000ec8c:	01 f1                	add    ecx,esi
c000ec8e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000ec96:	74 3e                	je     c000ecd6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000ec98:	42                   	inc    edx
c000ec99:	83 fa 04             	cmp    edx,0x4
c000ec9c:	75 f0                	jne    c000ec8e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ec9e:	83 ec 0c             	sub    esp,0xc
c000eca1:	68 8b 54 02 c0       	push   0xc002548b
c000eca6:	e8 1a 64 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000ecab:	83 c4 10             	add    esp,0x10
c000ecae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecb3:	5a                   	pop    edx
c000ecb4:	5b                   	pop    ebx
c000ecb5:	5e                   	pop    esi
c000ecb6:	c3                   	ret    
c000ecb7:	83 ec 0c             	sub    esp,0xc
c000ecba:	56                   	push   esi
c000ecbb:	e8 fa fb ff ff       	call   c000e8ba <Device::getName()>
c000ecc0:	83 c4 10             	add    esp,0x10
c000ecc3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ecc6:	75 ba                	jne    c000ec82 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ecc8:	83 fb 0f             	cmp    ebx,0xf
c000eccb:	7f 29                	jg     c000ecf6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000eccd:	0f b6 9b 20 80 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd7fe0]
c000ecd4:	eb ac                	jmp    c000ec82 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ecd6:	8d 04 82             	lea    eax,[edx+eax*4]
c000ecd9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecdd:	8d 04 86             	lea    eax,[esi+eax*4]
c000ece0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000ece6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ecea:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000ecf0:	89 d8                	mov    eax,ebx
c000ecf2:	5a                   	pop    edx
c000ecf3:	5b                   	pop    ebx
c000ecf4:	5e                   	pop    esi
c000ecf5:	c3                   	ret    
c000ecf6:	83 ec 0c             	sub    esp,0xc
c000ecf9:	68 7e 54 02 c0       	push   0xc002547e
c000ecfe:	e8 c2 63 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000ed03:	83 c4 10             	add    esp,0x10
c000ed06:	e9 77 ff ff ff       	jmp    c000ec82 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ed0b:	90                   	nop

c000ed0c <InterruptController::clearAllHandlers(int, bool)>:
c000ed0c:	56                   	push   esi
c000ed0d:	53                   	push   ebx
c000ed0e:	52                   	push   edx
c000ed0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed17:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ed1c:	75 61                	jne    c000ed7f <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ed1e:	8d 46 20             	lea    eax,[esi+0x20]
c000ed21:	c1 e6 04             	shl    esi,0x4
c000ed24:	c1 e0 04             	shl    eax,0x4
c000ed27:	01 de                	add    esi,ebx
c000ed29:	01 d8                	add    eax,ebx
c000ed2b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ed35:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ed3f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ed49:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed53:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ed5d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ed67:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ed71:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ed7b:	58                   	pop    eax
c000ed7c:	5b                   	pop    ebx
c000ed7d:	5e                   	pop    esi
c000ed7e:	c3                   	ret    
c000ed7f:	83 ec 0c             	sub    esp,0xc
c000ed82:	53                   	push   ebx
c000ed83:	e8 32 fb ff ff       	call   c000e8ba <Device::getName()>
c000ed88:	83 c4 10             	add    esp,0x10
c000ed8b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ed8e:	75 8e                	jne    c000ed1e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ed90:	83 fe 0f             	cmp    esi,0xf
c000ed93:	7f 09                	jg     c000ed9e <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ed95:	0f b6 b6 20 80 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd7fe0]
c000ed9c:	eb 80                	jmp    c000ed1e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ed9e:	83 ec 0c             	sub    esp,0xc
c000eda1:	68 98 54 02 c0       	push   0xc0025498
c000eda6:	e8 1a 63 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000edab:	83 c4 10             	add    esp,0x10
c000edae:	e9 6b ff ff ff       	jmp    c000ed1e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000edb3:	90                   	nop

c000edb4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000edb4:	56                   	push   esi
c000edb5:	53                   	push   ebx
c000edb6:	52                   	push   edx
c000edb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000edbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000edbf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000edc4:	75 3a                	jne    c000ee00 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000edc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000edca:	8d 50 20             	lea    edx,[eax+0x20]
c000edcd:	c1 e2 04             	shl    edx,0x4
c000edd0:	8d 04 16             	lea    eax,[esi+edx*1]
c000edd3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000edd7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000eddd:	74 0b                	je     c000edea <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000eddf:	83 c0 04             	add    eax,0x4
c000ede2:	39 d0                	cmp    eax,edx
c000ede4:	75 f1                	jne    c000edd7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000ede6:	58                   	pop    eax
c000ede7:	5b                   	pop    ebx
c000ede8:	5e                   	pop    esi
c000ede9:	c3                   	ret    
c000edea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000edf4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000edfe:	eb df                	jmp    c000eddf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ee00:	83 ec 0c             	sub    esp,0xc
c000ee03:	56                   	push   esi
c000ee04:	e8 b1 fa ff ff       	call   c000e8ba <Device::getName()>
c000ee09:	83 c4 10             	add    esp,0x10
c000ee0c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ee0f:	75 b5                	jne    c000edc6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ee11:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ee16:	7f 11                	jg     c000ee29 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ee18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee1c:	0f b6 80 20 80 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7fe0]
c000ee23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ee27:	eb 9d                	jmp    c000edc6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ee29:	83 ec 0c             	sub    esp,0xc
c000ee2c:	68 a5 54 02 c0       	push   0xc00254a5
c000ee31:	e8 8f 62 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000ee36:	83 c4 10             	add    esp,0x10
c000ee39:	eb 8b                	jmp    c000edc6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ee3b <nmiHandler(regs*, void*)>:
c000ee3b:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000ee40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee44:	e9 db a6 ff ff       	jmp    c0009524 <Computer::handleNMI()>

c000ee49 <int_handler>:
c000ee49:	55                   	push   ebp
c000ee4a:	57                   	push   edi
c000ee4b:	56                   	push   esi
c000ee4c:	53                   	push   ebx
c000ee4d:	83 ec 0c             	sub    esp,0xc
c000ee50:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ee54:	80 3d 04 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029404,0x0
c000ee5b:	74 0b                	je     c000ee68 <int_handler+0x1f>
c000ee5d:	fa                   	cli    
c000ee5e:	f4                   	hlt    
c000ee5f:	80 3d 04 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029404,0x0
c000ee66:	75 f5                	jne    c000ee5d <int_handler+0x14>
c000ee68:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000ee6d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ee70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ee76:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ee7c:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ee7f:	83 f8 17             	cmp    eax,0x17
c000ee82:	77 13                	ja     c000ee97 <int_handler+0x4e>
c000ee84:	83 ec 08             	sub    esp,0x8
c000ee87:	8b 17                	mov    edx,DWORD PTR [edi]
c000ee89:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ee8c:	0f b6 c0             	movzx  eax,al
c000ee8f:	50                   	push   eax
c000ee90:	57                   	push   edi
c000ee91:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000ee94:	83 c4 10             	add    esp,0x10
c000ee97:	83 c3 15             	add    ebx,0x15
c000ee9a:	c1 e3 04             	shl    ebx,0x4
c000ee9d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000eea1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000eea8:	31 db                	xor    ebx,ebx
c000eeaa:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000eeae:	85 c0                	test   eax,eax
c000eeb0:	74 13                	je     c000eec5 <int_handler+0x7c>
c000eeb2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000eeb5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000eeb9:	74 1c                	je     c000eed7 <int_handler+0x8e>
c000eebb:	83 ec 08             	sub    esp,0x8
c000eebe:	52                   	push   edx
c000eebf:	56                   	push   esi
c000eec0:	ff d0                	call   eax
c000eec2:	83 c4 10             	add    esp,0x10
c000eec5:	43                   	inc    ebx
c000eec6:	83 fb 04             	cmp    ebx,0x4
c000eec9:	75 df                	jne    c000eeaa <int_handler+0x61>
c000eecb:	83 c4 0c             	add    esp,0xc
c000eece:	31 c0                	xor    eax,eax
c000eed0:	5b                   	pop    ebx
c000eed1:	31 d2                	xor    edx,edx
c000eed3:	5e                   	pop    esi
c000eed4:	5f                   	pop    edi
c000eed5:	5d                   	pop    ebp
c000eed6:	c3                   	ret    
c000eed7:	83 ec 08             	sub    esp,0x8
c000eeda:	52                   	push   edx
c000eedb:	56                   	push   esi
c000eedc:	ff d0                	call   eax
c000eede:	83 c4 10             	add    esp,0x10
c000eee1:	83 c4 0c             	add    esp,0xc
c000eee4:	5b                   	pop    ebx
c000eee5:	5e                   	pop    esi
c000eee6:	5f                   	pop    edi
c000eee7:	5d                   	pop    ebp
c000eee8:	c3                   	ret    
c000eee9:	90                   	nop

c000eeea <InterruptController::InterruptController(char const*)>:
c000eeea:	83 ec 1c             	sub    esp,0x1c
c000eeed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef1:	83 ec 08             	sub    esp,0x8
c000eef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eef8:	50                   	push   eax
c000eef9:	e8 c0 f8 ff ff       	call   c000e7be <Device::Device(char const*)>
c000eefe:	83 c4 10             	add    esp,0x10
c000ef01:	ba dc 57 02 c0       	mov    edx,0xc00257dc
c000ef06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef0a:	89 10                	mov    DWORD PTR [eax],edx
c000ef0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef10:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ef1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ef22:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ef2a:	7f 5e                	jg     c000ef8a <InterruptController::InterruptController(char const*)+0xa0>
c000ef2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ef34:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ef39:	7f 49                	jg     c000ef84 <InterruptController::InterruptController(char const*)+0x9a>
c000ef3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef43:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ef4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef4e:	01 ca                	add    edx,ecx
c000ef50:	83 c2 54             	add    edx,0x54
c000ef53:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ef5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef63:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ef6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef6e:	01 ca                	add    edx,ecx
c000ef70:	81 c2 54 04 00 00    	add    edx,0x454
c000ef76:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ef7e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ef82:	eb b0                	jmp    c000ef34 <InterruptController::InterruptController(char const*)+0x4a>
c000ef84:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ef88:	eb 98                	jmp    c000ef22 <InterruptController::InterruptController(char const*)+0x38>
c000ef8a:	90                   	nop
c000ef8b:	83 c4 1c             	add    esp,0x1c
c000ef8e:	c3                   	ret    
c000ef8f:	90                   	nop

c000ef90 <InterruptController::~InterruptController()>:
c000ef90:	83 ec 0c             	sub    esp,0xc
c000ef93:	ba dc 57 02 c0       	mov    edx,0xc00257dc
c000ef98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef9c:	89 10                	mov    DWORD PTR [eax],edx
c000ef9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efa2:	83 ec 0c             	sub    esp,0xc
c000efa5:	50                   	push   eax
c000efa6:	e8 dd f4 ff ff       	call   c000e488 <Device::~Device()>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	90                   	nop
c000efaf:	83 c4 0c             	add    esp,0xc
c000efb2:	c3                   	ret    
c000efb3:	90                   	nop

c000efb4 <InterruptController::~InterruptController()>:
c000efb4:	83 ec 0c             	sub    esp,0xc
c000efb7:	83 ec 0c             	sub    esp,0xc
c000efba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efbe:	e8 cd ff ff ff       	call   c000ef90 <InterruptController::~InterruptController()>
c000efc3:	83 c4 10             	add    esp,0x10
c000efc6:	83 ec 08             	sub    esp,0x8
c000efc9:	68 58 21 00 00       	push   0x2158
c000efce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efd2:	e8 8f df ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c000efd7:	83 c4 10             	add    esp,0x10
c000efda:	83 c4 0c             	add    esp,0xc
c000efdd:	c3                   	ret    

c000efde <displayDebugInfo(regs*)>:
c000efde:	55                   	push   ebp
c000efdf:	57                   	push   edi
c000efe0:	56                   	push   esi
c000efe1:	53                   	push   ebx
c000efe2:	83 ec 24             	sub    esp,0x24
c000efe5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000efe9:	0f 20 c2             	mov    edx,cr0
c000efec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000eff0:	0f 20 d7             	mov    edi,cr2
c000eff3:	0f 20 de             	mov    esi,cr3
c000eff6:	0f 20 e5             	mov    ebp,cr4
c000eff9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000effc:	68 b2 54 02 c0       	push   0xc00254b2
c000f001:	e8 41 e0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f006:	59                   	pop    ecx
c000f007:	58                   	pop    eax
c000f008:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f00b:	68 bd 54 02 c0       	push   0xc00254bd
c000f010:	e8 32 e0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f015:	58                   	pop    eax
c000f016:	5a                   	pop    edx
c000f017:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f01a:	68 c8 54 02 c0       	push   0xc00254c8
c000f01f:	e8 23 e0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f024:	59                   	pop    ecx
c000f025:	58                   	pop    eax
c000f026:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f029:	68 d3 54 02 c0       	push   0xc00254d3
c000f02e:	e8 14 e0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f033:	58                   	pop    eax
c000f034:	5a                   	pop    edx
c000f035:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000f038:	68 de 54 02 c0       	push   0xc00254de
c000f03d:	e8 05 e0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f042:	59                   	pop    ecx
c000f043:	58                   	pop    eax
c000f044:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000f047:	68 e9 54 02 c0       	push   0xc00254e9
c000f04c:	e8 f6 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f051:	58                   	pop    eax
c000f052:	5a                   	pop    edx
c000f053:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f056:	68 f4 54 02 c0       	push   0xc00254f4
c000f05b:	e8 e7 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f060:	59                   	pop    ecx
c000f061:	58                   	pop    eax
c000f062:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000f065:	68 ff 54 02 c0       	push   0xc00254ff
c000f06a:	e8 d8 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f06f:	58                   	pop    eax
c000f070:	5a                   	pop    edx
c000f071:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f074:	68 0a 55 02 c0       	push   0xc002550a
c000f079:	e8 c9 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f07e:	59                   	pop    ecx
c000f07f:	58                   	pop    eax
c000f080:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f083:	68 19 55 02 c0       	push   0xc0025519
c000f088:	e8 ba df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f08d:	58                   	pop    eax
c000f08e:	5a                   	pop    edx
c000f08f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f092:	68 24 55 02 c0       	push   0xc0025524
c000f097:	e8 ab df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f09c:	59                   	pop    ecx
c000f09d:	58                   	pop    eax
c000f09e:	57                   	push   edi
c000f09f:	68 2f 55 02 c0       	push   0xc002552f
c000f0a4:	e8 9e df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f0a9:	58                   	pop    eax
c000f0aa:	5a                   	pop    edx
c000f0ab:	56                   	push   esi
c000f0ac:	68 3a 55 02 c0       	push   0xc002553a
c000f0b1:	e8 91 df ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f0b6:	59                   	pop    ecx
c000f0b7:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f0bc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0c2:	e8 8e bd ff ff       	call   c000ae55 <setActiveTerminal(VgaText*)>
c000f0c7:	58                   	pop    eax
c000f0c8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f0cb:	5a                   	pop    edx
c000f0cc:	c1 e0 05             	shl    eax,0x5
c000f0cf:	05 80 7d 02 c0       	add    eax,0xc0027d80
c000f0d4:	50                   	push   eax
c000f0d5:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f0da:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0e0:	e8 7d c2 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f0e5:	59                   	pop    ecx
c000f0e6:	58                   	pop    eax
c000f0e7:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f0ec:	68 45 55 02 c0       	push   0xc0025545
c000f0f1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0f7:	e8 66 c2 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f0fc:	58                   	pop    eax
c000f0fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f102:	5a                   	pop    edx
c000f103:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f106:	83 c0 0c             	add    eax,0xc
c000f109:	50                   	push   eax
c000f10a:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f10f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f115:	e8 48 c2 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f11a:	59                   	pop    ecx
c000f11b:	58                   	pop    eax
c000f11c:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f121:	68 4e 55 02 c0       	push   0xc002554e
c000f126:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f12c:	e8 31 c2 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f131:	58                   	pop    eax
c000f132:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f137:	5a                   	pop    edx
c000f138:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f13b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f141:	e8 d6 c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f146:	59                   	pop    ecx
c000f147:	58                   	pop    eax
c000f148:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f14d:	68 56 55 02 c0       	push   0xc0025556
c000f152:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f158:	e8 05 c2 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f15d:	58                   	pop    eax
c000f15e:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f163:	5a                   	pop    edx
c000f164:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f167:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f16d:	e8 aa c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f172:	59                   	pop    ecx
c000f173:	58                   	pop    eax
c000f174:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f179:	68 5e 55 02 c0       	push   0xc002555e
c000f17e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f184:	e8 d9 c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f189:	58                   	pop    eax
c000f18a:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f18f:	5a                   	pop    edx
c000f190:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f193:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f199:	e8 7e c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f19e:	59                   	pop    ecx
c000f19f:	58                   	pop    eax
c000f1a0:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f1a5:	68 66 55 02 c0       	push   0xc0025566
c000f1aa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1b0:	e8 ad c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f1b5:	58                   	pop    eax
c000f1b6:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f1bb:	5a                   	pop    edx
c000f1bc:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000f1bf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1c5:	e8 52 c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f1ca:	59                   	pop    ecx
c000f1cb:	58                   	pop    eax
c000f1cc:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f1d1:	68 6e 55 02 c0       	push   0xc002556e
c000f1d6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1dc:	e8 81 c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f1e1:	58                   	pop    eax
c000f1e2:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f1e7:	5a                   	pop    edx
c000f1e8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f1eb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1f1:	e8 26 c1 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f1f6:	59                   	pop    ecx
c000f1f7:	58                   	pop    eax
c000f1f8:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f1fd:	68 76 55 02 c0       	push   0xc0025576
c000f202:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f208:	e8 55 c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f20d:	58                   	pop    eax
c000f20e:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f213:	5a                   	pop    edx
c000f214:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f217:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f21d:	e8 fa c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f222:	59                   	pop    ecx
c000f223:	58                   	pop    eax
c000f224:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f229:	68 7e 55 02 c0       	push   0xc002557e
c000f22e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f234:	e8 29 c1 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f239:	58                   	pop    eax
c000f23a:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f23f:	5a                   	pop    edx
c000f240:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f244:	52                   	push   edx
c000f245:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f24b:	e8 cc c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f250:	59                   	pop    ecx
c000f251:	58                   	pop    eax
c000f252:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f257:	68 87 55 02 c0       	push   0xc0025587
c000f25c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f262:	e8 fb c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f267:	58                   	pop    eax
c000f268:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f26d:	5a                   	pop    edx
c000f26e:	57                   	push   edi
c000f26f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f275:	e8 a2 c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f27a:	59                   	pop    ecx
c000f27b:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f280:	5f                   	pop    edi
c000f281:	68 8f 55 02 c0       	push   0xc002558f
c000f286:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f28c:	e8 d1 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f291:	58                   	pop    eax
c000f292:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f297:	5a                   	pop    edx
c000f298:	56                   	push   esi
c000f299:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f29f:	e8 78 c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f2a4:	59                   	pop    ecx
c000f2a5:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f2aa:	5e                   	pop    esi
c000f2ab:	68 97 55 02 c0       	push   0xc0025597
c000f2b0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2b6:	e8 a7 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f2bb:	5f                   	pop    edi
c000f2bc:	58                   	pop    eax
c000f2bd:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f2c2:	55                   	push   ebp
c000f2c3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2c9:	e8 4e c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f2ce:	58                   	pop    eax
c000f2cf:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f2d4:	5a                   	pop    edx
c000f2d5:	68 9f 55 02 c0       	push   0xc002559f
c000f2da:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2e0:	e8 7d c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f2e5:	0f 21 c0             	mov    eax,db0
c000f2e8:	59                   	pop    ecx
c000f2e9:	5e                   	pop    esi
c000f2ea:	50                   	push   eax
c000f2eb:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f2f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2f6:	e8 21 c0 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f2fb:	5f                   	pop    edi
c000f2fc:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f301:	5d                   	pop    ebp
c000f302:	68 a8 55 02 c0       	push   0xc00255a8
c000f307:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f30d:	e8 50 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f312:	0f 21 c8             	mov    eax,db1
c000f315:	5a                   	pop    edx
c000f316:	59                   	pop    ecx
c000f317:	50                   	push   eax
c000f318:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f31d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f323:	e8 f4 bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f328:	5e                   	pop    esi
c000f329:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f32e:	5f                   	pop    edi
c000f32f:	68 b0 55 02 c0       	push   0xc00255b0
c000f334:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f33a:	e8 23 c0 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f33f:	0f 21 d0             	mov    eax,db2
c000f342:	5d                   	pop    ebp
c000f343:	5a                   	pop    edx
c000f344:	50                   	push   eax
c000f345:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f34a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f350:	e8 c7 bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f355:	59                   	pop    ecx
c000f356:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f35b:	5e                   	pop    esi
c000f35c:	68 b8 55 02 c0       	push   0xc00255b8
c000f361:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f367:	e8 f6 bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f36c:	0f 21 d8             	mov    eax,db3
c000f36f:	5f                   	pop    edi
c000f370:	5d                   	pop    ebp
c000f371:	50                   	push   eax
c000f372:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f377:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f37d:	e8 9a bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f382:	58                   	pop    eax
c000f383:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f388:	5a                   	pop    edx
c000f389:	68 c0 55 02 c0       	push   0xc00255c0
c000f38e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f394:	e8 c9 bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f399:	0f 21 f0             	mov    eax,db6
c000f39c:	59                   	pop    ecx
c000f39d:	5e                   	pop    esi
c000f39e:	50                   	push   eax
c000f39f:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f3a4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3aa:	e8 6d bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f3af:	5f                   	pop    edi
c000f3b0:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f3b5:	5d                   	pop    ebp
c000f3b6:	68 c8 55 02 c0       	push   0xc00255c8
c000f3bb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3c1:	e8 9c bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f3c6:	0f 21 f8             	mov    eax,db7
c000f3c9:	5a                   	pop    edx
c000f3ca:	59                   	pop    ecx
c000f3cb:	50                   	push   eax
c000f3cc:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f3d1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3d7:	e8 40 bf ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f3dc:	5e                   	pop    esi
c000f3dd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f3e0:	e8 b4 8e 00 00       	call   c0018299 <Thr::getDriverNameFromAddress(unsigned long)>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	85 c0                	test   eax,eax
c000f3ea:	74 7d                	je     c000f469 <displayDebugInfo(regs*)+0x48b>
c000f3ec:	89 c6                	mov    esi,eax
c000f3ee:	50                   	push   eax
c000f3ef:	50                   	push   eax
c000f3f0:	56                   	push   esi
c000f3f1:	68 d0 55 02 c0       	push   0xc00255d0
c000f3f6:	e8 4c dc ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f3fb:	5a                   	pop    edx
c000f3fc:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f401:	59                   	pop    ecx
c000f402:	68 de 55 02 c0       	push   0xc00255de
c000f407:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f40d:	e8 50 bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f412:	5f                   	pop    edi
c000f413:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f418:	5d                   	pop    ebp
c000f419:	56                   	push   esi
c000f41a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f420:	e8 3d bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f425:	58                   	pop    eax
c000f426:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f42b:	5a                   	pop    edx
c000f42c:	68 ea 55 02 c0       	push   0xc00255ea
c000f431:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f437:	e8 26 bf ff ff       	call   c000b362 <VgaText::puts(char const*)>
c000f43c:	59                   	pop    ecx
c000f43d:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c000f442:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f448:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f44b:	e8 80 8e 00 00       	call   c00182d0 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f450:	5b                   	pop    ebx
c000f451:	5d                   	pop    ebp
c000f452:	50                   	push   eax
c000f453:	57                   	push   edi
c000f454:	e8 c3 be ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c000f459:	58                   	pop    eax
c000f45a:	5a                   	pop    edx
c000f45b:	56                   	push   esi
c000f45c:	68 f6 55 02 c0       	push   0xc00255f6
c000f461:	e8 e1 db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f466:	83 c4 10             	add    esp,0x10
c000f469:	fa                   	cli    
c000f46a:	f4                   	hlt    
c000f46b:	eb fe                	jmp    c000f46b <displayDebugInfo(regs*)+0x48d>

c000f46d <x87EmulHandler(regs*, void*)>:
c000f46d:	53                   	push   ebx
c000f46e:	83 ec 14             	sub    esp,0x14
c000f471:	68 06 56 02 c0       	push   0xc0025606
c000f476:	e8 cc db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f47b:	0f 20 c2             	mov    edx,cr0
c000f47e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f483:	83 c4 10             	add    esp,0x10
c000f486:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f48a:	0f 85 ff 00 00 00    	jne    c000f58f <x87EmulHandler(regs*, void*)+0x122>
c000f490:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000f495:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f49b:	85 c0                	test   eax,eax
c000f49d:	74 05                	je     c000f4a4 <x87EmulHandler(regs*, void*)+0x37>
c000f49f:	83 e2 08             	and    edx,0x8
c000f4a2:	75 1c                	jne    c000f4c0 <x87EmulHandler(regs*, void*)+0x53>
c000f4a4:	83 ec 0c             	sub    esp,0xc
c000f4a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4ab:	e8 4e b3 00 00       	call   c001a7fe <Vm::x87Handler(regs*)>
c000f4b0:	83 c4 10             	add    esp,0x10
c000f4b3:	84 c0                	test   al,al
c000f4b5:	0f 84 d4 00 00 00    	je     c000f58f <x87EmulHandler(regs*, void*)+0x122>
c000f4bb:	83 c4 08             	add    esp,0x8
c000f4be:	5b                   	pop    ebx
c000f4bf:	c3                   	ret    
c000f4c0:	83 ec 0c             	sub    esp,0xc
c000f4c3:	68 36 56 02 c0       	push   0xc0025636
c000f4c8:	e8 7a db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f4cd:	0f 06                	clts   
c000f4cf:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000f4d4:	83 c4 10             	add    esp,0x10
c000f4d7:	85 c0                	test   eax,eax
c000f4d9:	74 33                	je     c000f50e <x87EmulHandler(regs*, void*)+0xa1>
c000f4db:	83 ec 0c             	sub    esp,0xc
c000f4de:	68 43 56 02 c0       	push   0xc0025643
c000f4e3:	e8 5f db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f4e8:	59                   	pop    ecx
c000f4e9:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000f4ee:	5b                   	pop    ebx
c000f4ef:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f4f2:	8b 15 28 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028928
c000f4f8:	83 c0 3f             	add    eax,0x3f
c000f4fb:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f501:	83 e0 c0             	and    eax,0xffffffc0
c000f504:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f506:	50                   	push   eax
c000f507:	52                   	push   edx
c000f508:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000f50b:	83 c4 10             	add    esp,0x10
c000f50e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f513:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f516:	85 c0                	test   eax,eax
c000f518:	74 4e                	je     c000f568 <x87EmulHandler(regs*, void*)+0xfb>
c000f51a:	83 ec 0c             	sub    esp,0xc
c000f51d:	68 6f 56 02 c0       	push   0xc002566f
c000f522:	e8 20 db ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f527:	59                   	pop    ecx
c000f528:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f52d:	5b                   	pop    ebx
c000f52e:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f531:	8b 15 28 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028928
c000f537:	83 c0 3f             	add    eax,0x3f
c000f53a:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f540:	83 e0 c0             	and    eax,0xffffffc0
c000f543:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f545:	50                   	push   eax
c000f546:	52                   	push   edx
c000f547:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000f54a:	c7 04 24 85 56 02 c0 	mov    DWORD PTR [esp],0xc0025685
c000f551:	e8 f1 da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f556:	83 c4 10             	add    esp,0x10
c000f559:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f55e:	a3 68 8a 02 c0       	mov    ds:0xc0028a68,eax
c000f563:	83 c4 08             	add    esp,0x8
c000f566:	5b                   	pop    ebx
c000f567:	c3                   	ret    
c000f568:	83 ec 0c             	sub    esp,0xc
c000f56b:	68 56 56 02 c0       	push   0xc0025656
c000f570:	e8 d2 da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f575:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c000f57b:	c7 04 24 00 02 00 00 	mov    DWORD PTR [esp],0x200
c000f582:	e8 d4 a7 ff ff       	call   c0009d5b <malloc>
c000f587:	83 c4 10             	add    esp,0x10
c000f58a:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c000f58d:	eb ca                	jmp    c000f559 <x87EmulHandler(regs*, void*)+0xec>
c000f58f:	83 ec 0c             	sub    esp,0xc
c000f592:	68 20 56 02 c0       	push   0xc0025620
c000f597:	e8 ab da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f59c:	58                   	pop    eax
c000f59d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a1:	e8 38 fa ff ff       	call   c000efde <displayDebugInfo(regs*)>

c000f5a6 <gpFault(regs*, void*)>:
c000f5a6:	53                   	push   ebx
c000f5a7:	83 ec 14             	sub    esp,0x14
c000f5aa:	c7 05 64 8a 02 c0 bb 9c 01 c0 	mov    DWORD PTR ds:0xc0028a64,0xc0019cbb
c000f5b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f5b8:	53                   	push   ebx
c000f5b9:	e8 fd a6 00 00       	call   c0019cbb <Vm::faultHandler(regs*)>
c000f5be:	83 c4 10             	add    esp,0x10
c000f5c1:	84 c0                	test   al,al
c000f5c3:	74 05                	je     c000f5ca <gpFault(regs*, void*)+0x24>
c000f5c5:	83 c4 08             	add    esp,0x8
c000f5c8:	5b                   	pop    ebx
c000f5c9:	c3                   	ret    
c000f5ca:	83 ec 0c             	sub    esp,0xc
c000f5cd:	68 9a 56 02 c0       	push   0xc002569a
c000f5d2:	e8 70 da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f5d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f5da:	e8 ff f9 ff ff       	call   c000efde <displayDebugInfo(regs*)>

c000f5df <pgFault(regs*, void*)>:
c000f5df:	53                   	push   ebx
c000f5e0:	83 ec 10             	sub    esp,0x10
c000f5e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f5e7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f5ea:	68 b5 56 02 c0       	push   0xc00256b5
c000f5ef:	e8 53 da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f5f4:	0f 20 d0             	mov    eax,cr2
c000f5f7:	5a                   	pop    edx
c000f5f8:	59                   	pop    ecx
c000f5f9:	50                   	push   eax
c000f5fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f602:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f608:	e8 b5 d5 ff ff       	call   c000cbc2 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f60d:	83 c4 10             	add    esp,0x10
c000f610:	84 c0                	test   al,al
c000f612:	74 05                	je     c000f619 <pgFault(regs*, void*)+0x3a>
c000f614:	83 c4 08             	add    esp,0x8
c000f617:	5b                   	pop    ebx
c000f618:	c3                   	ret    
c000f619:	83 ec 0c             	sub    esp,0xc
c000f61c:	68 ca 56 02 c0       	push   0xc00256ca
c000f621:	e8 21 da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f626:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f629:	e8 b0 f9 ff ff       	call   c000efde <displayDebugInfo(regs*)>

c000f62e <otherISRHandler(regs*, void*)>:
c000f62e:	53                   	push   ebx
c000f62f:	83 ec 0c             	sub    esp,0xc
c000f632:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f636:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f639:	50                   	push   eax
c000f63a:	50                   	push   eax
c000f63b:	68 d7 56 02 c0       	push   0xc00256d7
c000f640:	e8 02 da ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f645:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f648:	e8 91 f9 ff ff       	call   c000efde <displayDebugInfo(regs*)>

c000f64d <opcodeFault(regs*, void*)>:
c000f64d:	55                   	push   ebp
c000f64e:	89 e5                	mov    ebp,esp
c000f650:	56                   	push   esi
c000f651:	53                   	push   ebx
c000f652:	83 ec 30             	sub    esp,0x30
c000f655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f658:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f65b:	83 ec 08             	sub    esp,0x8
c000f65e:	50                   	push   eax
c000f65f:	68 f4 56 02 c0       	push   0xc00256f4
c000f664:	e8 de d9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f669:	83 c4 10             	add    esp,0x10
c000f66c:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000f671:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f677:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f67d:	84 c0                	test   al,al
c000f67f:	74 24                	je     c000f6a5 <opcodeFault(regs*, void*)+0x58>
c000f681:	83 ec 0c             	sub    esp,0xc
c000f684:	68 04 57 02 c0       	push   0xc0025704
c000f689:	e8 b9 d9 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f68e:	83 c4 10             	add    esp,0x10
c000f691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f694:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f697:	8d 50 19             	lea    edx,[eax+0x19]
c000f69a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f69d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f6a0:	e9 7b 03 00 00       	jmp    c000fa20 <opcodeFault(regs*, void*)+0x3d3>
c000f6a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f6ae:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f6b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6b5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6b8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f6bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6be:	8a 00                	mov    al,BYTE PTR [eax]
c000f6c0:	3c f0                	cmp    al,0xf0
c000f6c2:	75 17                	jne    c000f6db <opcodeFault(regs*, void*)+0x8e>
c000f6c4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f6c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6cd:	8d 50 01             	lea    edx,[eax+0x1]
c000f6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6d3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f6d6:	e9 d6 00 00 00       	jmp    c000f7b1 <opcodeFault(regs*, void*)+0x164>
c000f6db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6de:	8a 00                	mov    al,BYTE PTR [eax]
c000f6e0:	3c f2                	cmp    al,0xf2
c000f6e2:	74 09                	je     c000f6ed <opcodeFault(regs*, void*)+0xa0>
c000f6e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6e7:	8a 00                	mov    al,BYTE PTR [eax]
c000f6e9:	3c f3                	cmp    al,0xf3
c000f6eb:	75 1b                	jne    c000f708 <opcodeFault(regs*, void*)+0xbb>
c000f6ed:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f6f1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f6f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6fa:	8d 50 01             	lea    edx,[eax+0x1]
c000f6fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f700:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f703:	e9 a9 00 00 00       	jmp    c000f7b1 <opcodeFault(regs*, void*)+0x164>
c000f708:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f70b:	8a 00                	mov    al,BYTE PTR [eax]
c000f70d:	3c 66                	cmp    al,0x66
c000f70f:	75 1b                	jne    c000f72c <opcodeFault(regs*, void*)+0xdf>
c000f711:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f715:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f71b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f71e:	8d 50 01             	lea    edx,[eax+0x1]
c000f721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f724:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f727:	e9 85 00 00 00       	jmp    c000f7b1 <opcodeFault(regs*, void*)+0x164>
c000f72c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f72f:	8a 00                	mov    al,BYTE PTR [eax]
c000f731:	3c 67                	cmp    al,0x67
c000f733:	75 18                	jne    c000f74d <opcodeFault(regs*, void*)+0x100>
c000f735:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f739:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f73c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f73f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f742:	8d 50 01             	lea    edx,[eax+0x1]
c000f745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f748:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f74b:	eb 64                	jmp    c000f7b1 <opcodeFault(regs*, void*)+0x164>
c000f74d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f750:	8a 00                	mov    al,BYTE PTR [eax]
c000f752:	3c 2e                	cmp    al,0x2e
c000f754:	74 09                	je     c000f75f <opcodeFault(regs*, void*)+0x112>
c000f756:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f759:	8a 00                	mov    al,BYTE PTR [eax]
c000f75b:	3c 3e                	cmp    al,0x3e
c000f75d:	75 18                	jne    c000f777 <opcodeFault(regs*, void*)+0x12a>
c000f75f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f763:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f766:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f769:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f76c:	8d 50 01             	lea    edx,[eax+0x1]
c000f76f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f772:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f775:	eb 3a                	jmp    c000f7b1 <opcodeFault(regs*, void*)+0x164>
c000f777:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f77a:	8a 00                	mov    al,BYTE PTR [eax]
c000f77c:	3c 36                	cmp    al,0x36
c000f77e:	74 1b                	je     c000f79b <opcodeFault(regs*, void*)+0x14e>
c000f780:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f783:	8a 00                	mov    al,BYTE PTR [eax]
c000f785:	3c 26                	cmp    al,0x26
c000f787:	74 12                	je     c000f79b <opcodeFault(regs*, void*)+0x14e>
c000f789:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f78c:	8a 00                	mov    al,BYTE PTR [eax]
c000f78e:	3c 64                	cmp    al,0x64
c000f790:	74 09                	je     c000f79b <opcodeFault(regs*, void*)+0x14e>
c000f792:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f795:	8a 00                	mov    al,BYTE PTR [eax]
c000f797:	3c 65                	cmp    al,0x65
c000f799:	75 16                	jne    c000f7b1 <opcodeFault(regs*, void*)+0x164>
c000f79b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f79f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f7a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7a8:	8d 50 01             	lea    edx,[eax+0x1]
c000f7ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7b4:	8a 00                	mov    al,BYTE PTR [eax]
c000f7b6:	3c 0f                	cmp    al,0xf
c000f7b8:	0f 85 8d 01 00 00    	jne    c000f94b <opcodeFault(regs*, void*)+0x2fe>
c000f7be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7c1:	40                   	inc    eax
c000f7c2:	8a 00                	mov    al,BYTE PTR [eax]
c000f7c4:	3c c7                	cmp    al,0xc7
c000f7c6:	0f 85 7f 01 00 00    	jne    c000f94b <opcodeFault(regs*, void*)+0x2fe>
c000f7cc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f7cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7d5:	8d 50 01             	lea    edx,[eax+0x1]
c000f7d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7db:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7de:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f7e1:	50                   	push   eax
c000f7e2:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f7e5:	50                   	push   eax
c000f7e6:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f7e9:	50                   	push   eax
c000f7ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f7ed:	e8 ec 4f 00 00       	call   c00147de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f7f2:	83 c4 10             	add    esp,0x10
c000f7f5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f7f8:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f7fb:	83 f0 01             	xor    eax,0x1
c000f7fe:	84 c0                	test   al,al
c000f800:	0f 84 45 01 00 00    	je     c000f94b <opcodeFault(regs*, void*)+0x2fe>
c000f806:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f809:	3c 01                	cmp    al,0x1
c000f80b:	0f 85 3a 01 00 00    	jne    c000f94b <opcodeFault(regs*, void*)+0x2fe>
c000f811:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f814:	83 f0 01             	xor    eax,0x1
c000f817:	84 c0                	test   al,al
c000f819:	0f 84 2c 01 00 00    	je     c000f94b <opcodeFault(regs*, void*)+0x2fe>
c000f81f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f822:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f825:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f828:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f82f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f832:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f835:	89 c2                	mov    edx,eax
c000f837:	b8 00 00 00 00       	mov    eax,0x0
c000f83c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f83f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f845:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f848:	ba 00 00 00 00       	mov    edx,0x0
c000f84d:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f850:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f856:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f859:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f85c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f863:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f866:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f869:	89 c2                	mov    edx,eax
c000f86b:	b8 00 00 00 00       	mov    eax,0x0
c000f870:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f873:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f879:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f87c:	ba 00 00 00 00       	mov    edx,0x0
c000f881:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f884:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f887:	fa                   	cli    
c000f888:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000f88d:	40                   	inc    eax
c000f88e:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000f893:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f896:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f899:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89b:	89 c1                	mov    ecx,eax
c000f89d:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f8a0:	89 cb                	mov    ebx,ecx
c000f8a2:	89 d0                	mov    eax,edx
c000f8a4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f8a7:	89 c6                	mov    esi,eax
c000f8a9:	89 f0                	mov    eax,esi
c000f8ab:	09 d8                	or     eax,ebx
c000f8ad:	85 c0                	test   eax,eax
c000f8af:	75 21                	jne    c000f8d2 <opcodeFault(regs*, void*)+0x285>
c000f8b1:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f8b4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f8b7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f8ba:	89 01                	mov    DWORD PTR [ecx],eax
c000f8bc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f8bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f8c5:	83 c8 40             	or     eax,0x40
c000f8c8:	89 c2                	mov    edx,eax
c000f8ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8cd:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f8d0:	eb 3e                	jmp    c000f910 <opcodeFault(regs*, void*)+0x2c3>
c000f8d2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f8d5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f8d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8da:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f8dd:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f8e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f8e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8e6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f8e9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f8ec:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f8ef:	89 d0                	mov    eax,edx
c000f8f1:	31 d2                	xor    edx,edx
c000f8f3:	89 c3                	mov    ebx,eax
c000f8f5:	89 d6                	mov    esi,edx
c000f8f7:	89 da                	mov    edx,ebx
c000f8f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8fc:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f8ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f902:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f905:	83 e0 bf             	and    eax,0xffffffbf
c000f908:	89 c2                	mov    edx,eax
c000f90a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f90d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f910:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000f915:	48                   	dec    eax
c000f916:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000f91b:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000f920:	85 c0                	test   eax,eax
c000f922:	75 01                	jne    c000f925 <opcodeFault(regs*, void*)+0x2d8>
c000f924:	fb                   	sti    
c000f925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f928:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f92b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f92e:	01 c2                	add    edx,eax
c000f930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f933:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f936:	83 ec 0c             	sub    esp,0xc
c000f939:	68 27 57 02 c0       	push   0xc0025727
c000f93e:	e8 04 d7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f943:	83 c4 10             	add    esp,0x10
c000f946:	e9 d5 00 00 00       	jmp    c000fa20 <opcodeFault(regs*, void*)+0x3d3>
c000f94b:	83 ec 0c             	sub    esp,0xc
c000f94e:	68 3a 57 02 c0       	push   0xc002573a
c000f953:	e8 ef d6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f958:	83 c4 10             	add    esp,0x10
c000f95b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f95e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f964:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f967:	c1 e0 04             	shl    eax,0x4
c000f96a:	01 d0                	add    eax,edx
c000f96c:	83 c0 03             	add    eax,0x3
c000f96f:	8a 00                	mov    al,BYTE PTR [eax]
c000f971:	0f b6 d8             	movzx  ebx,al
c000f974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f977:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f97a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f97d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f980:	c1 e0 04             	shl    eax,0x4
c000f983:	01 d0                	add    eax,edx
c000f985:	83 c0 02             	add    eax,0x2
c000f988:	8a 00                	mov    al,BYTE PTR [eax]
c000f98a:	0f b6 c8             	movzx  ecx,al
c000f98d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f990:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f996:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f999:	c1 e0 04             	shl    eax,0x4
c000f99c:	01 d0                	add    eax,edx
c000f99e:	40                   	inc    eax
c000f99f:	8a 00                	mov    al,BYTE PTR [eax]
c000f9a1:	0f b6 d0             	movzx  edx,al
c000f9a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a7:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f9aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f9b0:	c1 e0 04             	shl    eax,0x4
c000f9b3:	01 f0                	add    eax,esi
c000f9b5:	8a 00                	mov    al,BYTE PTR [eax]
c000f9b7:	0f b6 c0             	movzx  eax,al
c000f9ba:	83 ec 0c             	sub    esp,0xc
c000f9bd:	53                   	push   ebx
c000f9be:	51                   	push   ecx
c000f9bf:	52                   	push   edx
c000f9c0:	50                   	push   eax
c000f9c1:	68 4c 57 02 c0       	push   0xc002574c
c000f9c6:	e8 7c d6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000f9cb:	83 c4 20             	add    esp,0x20
c000f9ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9d1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f9d4:	83 c0 03             	add    eax,0x3
c000f9d7:	8a 00                	mov    al,BYTE PTR [eax]
c000f9d9:	0f b6 d8             	movzx  ebx,al
c000f9dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f9e2:	83 c0 02             	add    eax,0x2
c000f9e5:	8a 00                	mov    al,BYTE PTR [eax]
c000f9e7:	0f b6 c8             	movzx  ecx,al
c000f9ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f9f0:	40                   	inc    eax
c000f9f1:	8a 00                	mov    al,BYTE PTR [eax]
c000f9f3:	0f b6 d0             	movzx  edx,al
c000f9f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f9fc:	8a 00                	mov    al,BYTE PTR [eax]
c000f9fe:	0f b6 c0             	movzx  eax,al
c000fa01:	83 ec 0c             	sub    esp,0xc
c000fa04:	53                   	push   ebx
c000fa05:	51                   	push   ecx
c000fa06:	52                   	push   edx
c000fa07:	50                   	push   eax
c000fa08:	68 74 57 02 c0       	push   0xc0025774
c000fa0d:	e8 35 d6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c000fa12:	83 c4 20             	add    esp,0x20
c000fa15:	83 ec 0c             	sub    esp,0xc
c000fa18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fa1b:	e8 be f5 ff ff       	call   c000efde <displayDebugInfo(regs*)>
c000fa20:	8d 65 f8             	lea    esp,[ebp-0x8]
c000fa23:	5b                   	pop    ebx
c000fa24:	5e                   	pop    esi
c000fa25:	5d                   	pop    ebp
c000fa26:	c3                   	ret    

c000fa27 <displayProgramFault(char const*)>:
c000fa27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000fa35:	85 c0                	test   eax,eax
c000fa37:	74 15                	je     c000fa4e <displayProgramFault(char const*)+0x27>
c000fa39:	83 ec 0c             	sub    esp,0xc
c000fa3c:	6a 04                	push   0x4
c000fa3e:	6a 0f                	push   0xf
c000fa40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa44:	50                   	push   eax
c000fa45:	e8 14 b6 ff ff       	call   c000b05e <VgaText::puts(char const*, VgaColour, VgaColour)>
c000fa4a:	83 c4 1c             	add    esp,0x1c
c000fa4d:	c3                   	ret    
c000fa4e:	c3                   	ret    

c000fa4f <setupInterruptController()>:
c000fa4f:	55                   	push   ebp
c000fa50:	89 e5                	mov    ebp,esp
c000fa52:	53                   	push   ebx
c000fa53:	83 ec 24             	sub    esp,0x24
c000fa56:	b8 00 00 00 00       	mov    eax,0x0
c000fa5b:	85 c0                	test   eax,eax
c000fa5d:	0f 95 c0             	setne  al
c000fa60:	84 c0                	test   al,al
c000fa62:	74 5b                	je     c000fabf <setupInterruptController()+0x70>
c000fa64:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000fa6b:	83 ec 0c             	sub    esp,0xc
c000fa6e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fa71:	e8 e5 a2 ff ff       	call   c0009d5b <malloc>
c000fa76:	83 c4 10             	add    esp,0x10
c000fa79:	89 c3                	mov    ebx,eax
c000fa7b:	83 ec 0c             	sub    esp,0xc
c000fa7e:	53                   	push   ebx
c000fa7f:	e8 68 22 01 00       	call   c0021cec <APIC::APIC()>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fa8a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000fa8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fa90:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa92:	83 c0 08             	add    eax,0x8
c000fa95:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa97:	6a 00                	push   0x0
c000fa99:	6a 00                	push   0x0
c000fa9b:	6a 00                	push   0x0
c000fa9d:	52                   	push   edx
c000fa9e:	ff d0                	call   eax
c000faa0:	83 c4 10             	add    esp,0x10
c000faa3:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000faa8:	83 ec 08             	sub    esp,0x8
c000faab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000faae:	50                   	push   eax
c000faaf:	e8 06 eb ff ff       	call   c000e5ba <Device::addChild(Device*)>
c000fab4:	83 c4 10             	add    esp,0x10
c000fab7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000faba:	e9 79 03 00 00       	jmp    c000fe38 <setupInterruptController()+0x3e9>
c000fabf:	a0 40 92 02 c0       	mov    al,ds:0xc0029240
c000fac4:	84 c0                	test   al,al
c000fac6:	75 14                	jne    c000fadc <setupInterruptController()+0x8d>
c000fac8:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000facd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000fad3:	83 e2 fe             	and    edx,0xfffffffe
c000fad6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000fadc:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000fae1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fae7:	83 e0 01             	and    eax,0x1
c000faea:	84 c0                	test   al,al
c000faec:	0f 95 c0             	setne  al
c000faef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000faf2:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000faf9:	83 ec 0c             	sub    esp,0xc
c000fafc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000faff:	e8 57 a2 ff ff       	call   c0009d5b <malloc>
c000fb04:	83 c4 10             	add    esp,0x10
c000fb07:	89 c3                	mov    ebx,eax
c000fb09:	83 ec 0c             	sub    esp,0xc
c000fb0c:	53                   	push   ebx
c000fb0d:	e8 32 27 01 00       	call   c0022244 <PIC::PIC()>
c000fb12:	83 c4 10             	add    esp,0x10
c000fb15:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fb18:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fb1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb20:	83 c0 08             	add    eax,0x8
c000fb23:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb25:	6a 00                	push   0x0
c000fb27:	6a 00                	push   0x0
c000fb29:	6a 00                	push   0x0
c000fb2b:	52                   	push   edx
c000fb2c:	ff d0                	call   eax
c000fb2e:	83 c4 10             	add    esp,0x10
c000fb31:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000fb35:	74 73                	je     c000fbaa <setupInterruptController()+0x15b>
c000fb37:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fb3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb3d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb3f:	83 c0 0c             	add    eax,0xc
c000fb42:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb44:	6a 00                	push   0x0
c000fb46:	6a 00                	push   0x0
c000fb48:	6a 00                	push   0x0
c000fb4a:	52                   	push   edx
c000fb4b:	ff d0                	call   eax
c000fb4d:	83 c4 10             	add    esp,0x10
c000fb50:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fb54:	74 15                	je     c000fb6b <setupInterruptController()+0x11c>
c000fb56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb59:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb5b:	83 c0 04             	add    eax,0x4
c000fb5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb60:	83 ec 0c             	sub    esp,0xc
c000fb63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb66:	ff d0                	call   eax
c000fb68:	83 c4 10             	add    esp,0x10
c000fb6b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000fb72:	83 ec 0c             	sub    esp,0xc
c000fb75:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fb78:	e8 de a1 ff ff       	call   c0009d5b <malloc>
c000fb7d:	83 c4 10             	add    esp,0x10
c000fb80:	89 c3                	mov    ebx,eax
c000fb82:	83 ec 0c             	sub    esp,0xc
c000fb85:	53                   	push   ebx
c000fb86:	e8 61 21 01 00       	call   c0021cec <APIC::APIC()>
c000fb8b:	83 c4 10             	add    esp,0x10
c000fb8e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fb91:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fb94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb97:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb99:	83 c0 08             	add    eax,0x8
c000fb9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb9e:	6a 00                	push   0x0
c000fba0:	6a 00                	push   0x0
c000fba2:	6a 00                	push   0x0
c000fba4:	52                   	push   edx
c000fba5:	ff d0                	call   eax
c000fba7:	83 c4 10             	add    esp,0x10
c000fbaa:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000fbaf:	83 ec 08             	sub    esp,0x8
c000fbb2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbb5:	50                   	push   eax
c000fbb6:	e8 ff e9 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c000fbbb:	83 c4 10             	add    esp,0x10
c000fbbe:	c7 05 68 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a68,0x0
c000fbc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbcb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbcd:	83 c0 24             	add    eax,0x24
c000fbd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbd2:	6a 00                	push   0x0
c000fbd4:	68 2e f6 00 c0       	push   0xc000f62e
c000fbd9:	6a 00                	push   0x0
c000fbdb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbde:	ff d0                	call   eax
c000fbe0:	83 c4 10             	add    esp,0x10
c000fbe3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbe6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbe8:	83 c0 24             	add    eax,0x24
c000fbeb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbed:	6a 00                	push   0x0
c000fbef:	68 2e f6 00 c0       	push   0xc000f62e
c000fbf4:	6a 01                	push   0x1
c000fbf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbf9:	ff d0                	call   eax
c000fbfb:	83 c4 10             	add    esp,0x10
c000fbfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc01:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc03:	83 c0 24             	add    eax,0x24
c000fc06:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc08:	6a 00                	push   0x0
c000fc0a:	68 3b ee 00 c0       	push   0xc000ee3b
c000fc0f:	6a 02                	push   0x2
c000fc11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc14:	ff d0                	call   eax
c000fc16:	83 c4 10             	add    esp,0x10
c000fc19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc1e:	83 c0 24             	add    eax,0x24
c000fc21:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc23:	6a 00                	push   0x0
c000fc25:	68 2e f6 00 c0       	push   0xc000f62e
c000fc2a:	6a 03                	push   0x3
c000fc2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc2f:	ff d0                	call   eax
c000fc31:	83 c4 10             	add    esp,0x10
c000fc34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc37:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc39:	83 c0 24             	add    eax,0x24
c000fc3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc3e:	6a 00                	push   0x0
c000fc40:	68 2e f6 00 c0       	push   0xc000f62e
c000fc45:	6a 04                	push   0x4
c000fc47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc4a:	ff d0                	call   eax
c000fc4c:	83 c4 10             	add    esp,0x10
c000fc4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc52:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc54:	83 c0 24             	add    eax,0x24
c000fc57:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc59:	6a 00                	push   0x0
c000fc5b:	68 2e f6 00 c0       	push   0xc000f62e
c000fc60:	6a 05                	push   0x5
c000fc62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc65:	ff d0                	call   eax
c000fc67:	83 c4 10             	add    esp,0x10
c000fc6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc6f:	83 c0 24             	add    eax,0x24
c000fc72:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc74:	6a 00                	push   0x0
c000fc76:	68 4d f6 00 c0       	push   0xc000f64d
c000fc7b:	6a 06                	push   0x6
c000fc7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc80:	ff d0                	call   eax
c000fc82:	83 c4 10             	add    esp,0x10
c000fc85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc8a:	83 c0 24             	add    eax,0x24
c000fc8d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc8f:	6a 00                	push   0x0
c000fc91:	68 6d f4 00 c0       	push   0xc000f46d
c000fc96:	6a 07                	push   0x7
c000fc98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc9b:	ff d0                	call   eax
c000fc9d:	83 c4 10             	add    esp,0x10
c000fca0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fca3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca5:	83 c0 24             	add    eax,0x24
c000fca8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcaa:	6a 00                	push   0x0
c000fcac:	68 56 ec 00 c0       	push   0xc000ec56
c000fcb1:	6a 08                	push   0x8
c000fcb3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcb6:	ff d0                	call   eax
c000fcb8:	83 c4 10             	add    esp,0x10
c000fcbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcc0:	83 c0 24             	add    eax,0x24
c000fcc3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcc5:	6a 00                	push   0x0
c000fcc7:	68 2e f6 00 c0       	push   0xc000f62e
c000fccc:	6a 09                	push   0x9
c000fcce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcd1:	ff d0                	call   eax
c000fcd3:	83 c4 10             	add    esp,0x10
c000fcd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcdb:	83 c0 24             	add    eax,0x24
c000fcde:	8b 00                	mov    eax,DWORD PTR [eax]
c000fce0:	6a 00                	push   0x0
c000fce2:	68 2e f6 00 c0       	push   0xc000f62e
c000fce7:	6a 0a                	push   0xa
c000fce9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcec:	ff d0                	call   eax
c000fcee:	83 c4 10             	add    esp,0x10
c000fcf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcf4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf6:	83 c0 24             	add    eax,0x24
c000fcf9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcfb:	6a 00                	push   0x0
c000fcfd:	68 2e f6 00 c0       	push   0xc000f62e
c000fd02:	6a 0b                	push   0xb
c000fd04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd07:	ff d0                	call   eax
c000fd09:	83 c4 10             	add    esp,0x10
c000fd0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd11:	83 c0 24             	add    eax,0x24
c000fd14:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd16:	6a 00                	push   0x0
c000fd18:	68 2e f6 00 c0       	push   0xc000f62e
c000fd1d:	6a 0c                	push   0xc
c000fd1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd22:	ff d0                	call   eax
c000fd24:	83 c4 10             	add    esp,0x10
c000fd27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd2c:	83 c0 24             	add    eax,0x24
c000fd2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd31:	6a 00                	push   0x0
c000fd33:	68 a6 f5 00 c0       	push   0xc000f5a6
c000fd38:	6a 0d                	push   0xd
c000fd3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd3d:	ff d0                	call   eax
c000fd3f:	83 c4 10             	add    esp,0x10
c000fd42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd45:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd47:	83 c0 24             	add    eax,0x24
c000fd4a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd4c:	6a 00                	push   0x0
c000fd4e:	68 df f5 00 c0       	push   0xc000f5df
c000fd53:	6a 0e                	push   0xe
c000fd55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd58:	ff d0                	call   eax
c000fd5a:	83 c4 10             	add    esp,0x10
c000fd5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd60:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd62:	83 c0 24             	add    eax,0x24
c000fd65:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd67:	6a 00                	push   0x0
c000fd69:	68 2e f6 00 c0       	push   0xc000f62e
c000fd6e:	6a 0f                	push   0xf
c000fd70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd73:	ff d0                	call   eax
c000fd75:	83 c4 10             	add    esp,0x10
c000fd78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd7d:	83 c0 24             	add    eax,0x24
c000fd80:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd82:	6a 00                	push   0x0
c000fd84:	68 2e f6 00 c0       	push   0xc000f62e
c000fd89:	6a 10                	push   0x10
c000fd8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd8e:	ff d0                	call   eax
c000fd90:	83 c4 10             	add    esp,0x10
c000fd93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd96:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd98:	83 c0 24             	add    eax,0x24
c000fd9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd9d:	6a 00                	push   0x0
c000fd9f:	68 2e f6 00 c0       	push   0xc000f62e
c000fda4:	6a 11                	push   0x11
c000fda6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fda9:	ff d0                	call   eax
c000fdab:	83 c4 10             	add    esp,0x10
c000fdae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdb1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb3:	83 c0 24             	add    eax,0x24
c000fdb6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb8:	6a 00                	push   0x0
c000fdba:	68 2e f6 00 c0       	push   0xc000f62e
c000fdbf:	6a 12                	push   0x12
c000fdc1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdc4:	ff d0                	call   eax
c000fdc6:	83 c4 10             	add    esp,0x10
c000fdc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdcc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdce:	83 c0 24             	add    eax,0x24
c000fdd1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdd3:	6a 00                	push   0x0
c000fdd5:	68 2e f6 00 c0       	push   0xc000f62e
c000fdda:	6a 13                	push   0x13
c000fddc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fddf:	ff d0                	call   eax
c000fde1:	83 c4 10             	add    esp,0x10
c000fde4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fde7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde9:	83 c0 24             	add    eax,0x24
c000fdec:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdee:	6a 00                	push   0x0
c000fdf0:	68 2e f6 00 c0       	push   0xc000f62e
c000fdf5:	6a 14                	push   0x14
c000fdf7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdfa:	ff d0                	call   eax
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe02:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe04:	83 c0 24             	add    eax,0x24
c000fe07:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe09:	6a 00                	push   0x0
c000fe0b:	68 2e f6 00 c0       	push   0xc000f62e
c000fe10:	6a 1e                	push   0x1e
c000fe12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe15:	ff d0                	call   eax
c000fe17:	83 c4 10             	add    esp,0x10
c000fe1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe1f:	83 c0 24             	add    eax,0x24
c000fe22:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe24:	6a 00                	push   0x0
c000fe26:	68 0f 73 01 c0       	push   0xc001730f
c000fe2b:	6a 60                	push   0x60
c000fe2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe30:	ff d0                	call   eax
c000fe32:	83 c4 10             	add    esp,0x10
c000fe35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe38:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fe3b:	c9                   	leave  
c000fe3c:	c3                   	ret    
c000fe3d:	90                   	nop

c000fe3e <InterruptController::convertLegacyIRQNumber(int)>:
c000fe3e:	55                   	push   ebp
c000fe3f:	89 e5                	mov    ebp,esp
c000fe41:	83 ec 08             	sub    esp,0x8
c000fe44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe47:	83 ec 0c             	sub    esp,0xc
c000fe4a:	50                   	push   eax
c000fe4b:	e8 6a ea ff ff       	call   c000e8ba <Device::getName()>
c000fe50:	83 c4 10             	add    esp,0x10
c000fe53:	8a 00                	mov    al,BYTE PTR [eax]
c000fe55:	3c 41                	cmp    al,0x41
c000fe57:	0f 94 c0             	sete   al
c000fe5a:	84 c0                	test   al,al
c000fe5c:	74 28                	je     c000fe86 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fe5e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fe62:	7f 12                	jg     c000fe76 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fe64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fe67:	05 20 80 02 c0       	add    eax,0xc0028020
c000fe6c:	8a 00                	mov    al,BYTE PTR [eax]
c000fe6e:	0f b6 c0             	movzx  eax,al
c000fe71:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fe74:	eb 10                	jmp    c000fe86 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fe76:	83 ec 0c             	sub    esp,0xc
c000fe79:	68 9c 57 02 c0       	push   0xc002579c
c000fe7e:	e8 42 52 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c000fe83:	83 c4 10             	add    esp,0x10
c000fe86:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fe89:	c9                   	leave  
c000fe8a:	c3                   	ret    
c000fe8b:	90                   	nop

c000fe8c <startGUI(void*)>:
c000fe8c:	55                   	push   ebp
c000fe8d:	89 e5                	mov    ebp,esp
c000fe8f:	53                   	push   ebx
c000fe90:	83 ec 04             	sub    esp,0x4
c000fe93:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000fe98:	48                   	dec    eax
c000fe99:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000fe9e:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000fea3:	85 c0                	test   eax,eax
c000fea5:	75 01                	jne    c000fea8 <startGUI(void*)+0x1c>
c000fea7:	fb                   	sti    
c000fea8:	8b 1d 28 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028928
c000feae:	83 ec 08             	sub    esp,0x8
c000feb1:	6a 01                	push   0x1
c000feb3:	68 1c 58 02 c0       	push   0xc002581c
c000feb8:	e8 2d 84 00 00       	call   c00182ea <Thr::loadDLL(char const*, bool)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	83 ec 08             	sub    esp,0x8
c000fec3:	53                   	push   ebx
c000fec4:	50                   	push   eax
c000fec5:	e8 51 86 00 00       	call   c001851b <Thr::executeDLL(unsigned long, void*)>
c000feca:	83 c4 10             	add    esp,0x10
c000fecd:	8b 1d 28 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028928
c000fed3:	83 ec 08             	sub    esp,0x8
c000fed6:	6a 01                	push   0x1
c000fed8:	68 36 58 02 c0       	push   0xc0025836
c000fedd:	e8 08 84 00 00       	call   c00182ea <Thr::loadDLL(char const*, bool)>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	83 ec 08             	sub    esp,0x8
c000fee8:	53                   	push   ebx
c000fee9:	50                   	push   eax
c000feea:	e8 2c 86 00 00       	call   c001851b <Thr::executeDLL(unsigned long, void*)>
c000feef:	83 c4 10             	add    esp,0x10
c000fef2:	90                   	nop
c000fef3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fef6:	c9                   	leave  
c000fef7:	c3                   	ret    

c000fef8 <startGUIVESA(void*)>:
c000fef8:	55                   	push   ebp
c000fef9:	89 e5                	mov    ebp,esp
c000fefb:	53                   	push   ebx
c000fefc:	83 ec 04             	sub    esp,0x4
c000feff:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000ff04:	48                   	dec    eax
c000ff05:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000ff0a:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000ff0f:	85 c0                	test   eax,eax
c000ff11:	75 01                	jne    c000ff14 <startGUIVESA(void*)+0x1c>
c000ff13:	fb                   	sti    
c000ff14:	8b 1d 28 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028928
c000ff1a:	83 ec 08             	sub    esp,0x8
c000ff1d:	6a 01                	push   0x1
c000ff1f:	68 54 58 02 c0       	push   0xc0025854
c000ff24:	e8 c1 83 00 00       	call   c00182ea <Thr::loadDLL(char const*, bool)>
c000ff29:	83 c4 10             	add    esp,0x10
c000ff2c:	83 ec 08             	sub    esp,0x8
c000ff2f:	53                   	push   ebx
c000ff30:	50                   	push   eax
c000ff31:	e8 e5 85 00 00       	call   c001851b <Thr::executeDLL(unsigned long, void*)>
c000ff36:	83 c4 10             	add    esp,0x10
c000ff39:	8b 1d 28 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028928
c000ff3f:	83 ec 08             	sub    esp,0x8
c000ff42:	6a 01                	push   0x1
c000ff44:	68 36 58 02 c0       	push   0xc0025836
c000ff49:	e8 9c 83 00 00       	call   c00182ea <Thr::loadDLL(char const*, bool)>
c000ff4e:	83 c4 10             	add    esp,0x10
c000ff51:	83 ec 08             	sub    esp,0x8
c000ff54:	53                   	push   ebx
c000ff55:	50                   	push   eax
c000ff56:	e8 c0 85 00 00       	call   c001851b <Thr::executeDLL(unsigned long, void*)>
c000ff5b:	83 c4 10             	add    esp,0x10
c000ff5e:	90                   	nop
c000ff5f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ff62:	c9                   	leave  
c000ff63:	c3                   	ret    

c000ff64 <sendKeyToTerminal(unsigned char)>:
c000ff64:	55                   	push   ebp
c000ff65:	89 e5                	mov    ebp,esp
c000ff67:	83 ec 28             	sub    esp,0x28
c000ff6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff6d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000ff70:	a1 a4 89 02 c0       	mov    eax,ds:0xc00289a4
c000ff75:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000ff79:	83 ec 08             	sub    esp,0x8
c000ff7c:	52                   	push   edx
c000ff7d:	50                   	push   eax
c000ff7e:	e8 81 b5 ff ff       	call   c000b504 <VgaText::receiveKey(unsigned char)>
c000ff83:	83 c4 10             	add    esp,0x10
c000ff86:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000ff8a:	0f 85 8f 00 00 00    	jne    c001001f <sendKeyToTerminal(unsigned char)+0xbb>
c000ff90:	fa                   	cli    
c000ff91:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c000ff96:	40                   	inc    eax
c000ff97:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c000ff9c:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c000ffa1:	40                   	inc    eax
c000ffa2:	a3 44 9e 02 c0       	mov    ds:0xc0029e44,eax
c000ffa7:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c000ffac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ffaf:	c7 05 80 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a80,0x0
c000ffb9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000ffbd:	74 1f                	je     c000ffde <sendKeyToTerminal(unsigned char)+0x7a>
c000ffbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ffc2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000ffc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ffc8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ffcb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ffce:	83 ec 0c             	sub    esp,0xc
c000ffd1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ffd4:	e8 b3 91 00 00       	call   c001918c <unblockTask(ThreadControlBlock*)>
c000ffd9:	83 c4 10             	add    esp,0x10
c000ffdc:	eb db                	jmp    c000ffb9 <sendKeyToTerminal(unsigned char)+0x55>
c000ffde:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c000ffe3:	48                   	dec    eax
c000ffe4:	a3 44 9e 02 c0       	mov    ds:0xc0029e44,eax
c000ffe9:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c000ffee:	85 c0                	test   eax,eax
c000fff0:	75 18                	jne    c001000a <sendKeyToTerminal(unsigned char)+0xa6>
c000fff2:	a1 40 9e 02 c0       	mov    eax,ds:0xc0029e40
c000fff7:	85 c0                	test   eax,eax
c000fff9:	74 0f                	je     c001000a <sendKeyToTerminal(unsigned char)+0xa6>
c000fffb:	c7 05 40 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x0
c0010005:	e8 c6 8c 00 00       	call   c0018cd0 <schedule()>
c001000a:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c001000f:	48                   	dec    eax
c0010010:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0010015:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c001001a:	85 c0                	test   eax,eax
c001001c:	75 01                	jne    c001001f <sendKeyToTerminal(unsigned char)+0xbb>
c001001e:	fb                   	sti    
c001001f:	90                   	nop
c0010020:	c9                   	leave  
c0010021:	c3                   	ret    

c0010022 <sendKeyboardToken(KeyboardToken)>:
c0010022:	55                   	push   ebp
c0010023:	89 e5                	mov    ebp,esp
c0010025:	83 ec 18             	sub    esp,0x18
c0010028:	e8 71 53 00 00       	call   c001539e <Krnl::userIOReceived()>
c001002d:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0010030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010033:	0f b7 c0             	movzx  eax,ax
c0010036:	83 f2 01             	xor    edx,0x1
c0010039:	88 90 a0 8a 02 c0    	mov    BYTE PTR [eax-0x3ffd7560],dl
c001003f:	a1 88 8a 02 c0       	mov    eax,ds:0xc0028a88
c0010044:	85 c0                	test   eax,eax
c0010046:	74 24                	je     c001006c <sendKeyboardToken(KeyboardToken)+0x4a>
c0010048:	8b 0d 88 8a 02 c0    	mov    ecx,DWORD PTR ds:0xc0028a88
c001004e:	83 ec 04             	sub    esp,0x4
c0010051:	68 a0 8a 02 c0       	push   0xc0028aa0
c0010056:	83 ec 08             	sub    esp,0x8
c0010059:	89 e2                	mov    edx,esp
c001005b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001005e:	89 02                	mov    DWORD PTR [edx],eax
c0010060:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010063:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0010067:	ff d1                	call   ecx
c0010069:	83 c4 10             	add    esp,0x10
c001006c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001006f:	66 3d 03 02          	cmp    ax,0x203
c0010073:	75 07                	jne    c001007c <sendKeyboardToken(KeyboardToken)+0x5a>
c0010075:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001007a:	84 c0                	test   al,al
c001007c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0010080:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0010083:	a0 a8 8e 02 c0       	mov    al,ds:0xc0028ea8
c0010088:	38 c2                	cmp    dl,al
c001008a:	74 1c                	je     c00100a8 <sendKeyboardToken(KeyboardToken)+0x86>
c001008c:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001008f:	a2 a8 8e 02 c0       	mov    ds:0xc0028ea8,al
c0010094:	a0 a8 8e 02 c0       	mov    al,ds:0xc0028ea8
c0010099:	0f b6 c0             	movzx  eax,al
c001009c:	83 ec 0c             	sub    esp,0xc
c001009f:	50                   	push   eax
c00100a0:	e8 a1 aa ff ff       	call   c000ab46 <setTerminalScrollLock(bool)>
c00100a5:	83 c4 10             	add    esp,0x10
c00100a8:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00100ab:	84 c0                	test   al,al
c00100ad:	0f 84 ae 00 00 00    	je     c0010161 <sendKeyboardToken(KeyboardToken)+0x13f>
c00100b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100b6:	66 3d 10 03          	cmp    ax,0x310
c00100ba:	75 06                	jne    c00100c2 <sendKeyboardToken(KeyboardToken)+0xa0>
c00100bc:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00100c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100c5:	66 3d 11 03          	cmp    ax,0x311
c00100c9:	75 06                	jne    c00100d1 <sendKeyboardToken(KeyboardToken)+0xaf>
c00100cb:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00100d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100d4:	66 3d 12 03          	cmp    ax,0x312
c00100d8:	75 06                	jne    c00100e0 <sendKeyboardToken(KeyboardToken)+0xbe>
c00100da:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00100e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100e3:	66 3d 13 03          	cmp    ax,0x313
c00100e7:	75 06                	jne    c00100ef <sendKeyboardToken(KeyboardToken)+0xcd>
c00100e9:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00100ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100f2:	66 3d 14 03          	cmp    ax,0x314
c00100f6:	75 06                	jne    c00100fe <sendKeyboardToken(KeyboardToken)+0xdc>
c00100f8:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00100fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010101:	66 3d 15 03          	cmp    ax,0x315
c0010105:	75 06                	jne    c001010d <sendKeyboardToken(KeyboardToken)+0xeb>
c0010107:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010110:	66 3d 16 03          	cmp    ax,0x316
c0010114:	75 06                	jne    c001011c <sendKeyboardToken(KeyboardToken)+0xfa>
c0010116:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001011c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001011f:	66 3d 17 03          	cmp    ax,0x317
c0010123:	75 06                	jne    c001012b <sendKeyboardToken(KeyboardToken)+0x109>
c0010125:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001012b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001012e:	66 3d 18 03          	cmp    ax,0x318
c0010132:	75 06                	jne    c001013a <sendKeyboardToken(KeyboardToken)+0x118>
c0010134:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001013a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001013d:	66 3d 19 03          	cmp    ax,0x319
c0010141:	75 06                	jne    c0010149 <sendKeyboardToken(KeyboardToken)+0x127>
c0010143:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0010149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001014c:	66 3d 1a 03          	cmp    ax,0x31a
c0010150:	0f 85 c9 00 00 00    	jne    c001021f <sendKeyboardToken(KeyboardToken)+0x1fd>
c0010156:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001015c:	e9 be 00 00 00       	jmp    c001021f <sendKeyboardToken(KeyboardToken)+0x1fd>
c0010161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010164:	66 3d 10 03          	cmp    ax,0x310
c0010168:	75 0a                	jne    c0010174 <sendKeyboardToken(KeyboardToken)+0x152>
c001016a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0010170:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010177:	66 3d 11 03          	cmp    ax,0x311
c001017b:	75 0a                	jne    c0010187 <sendKeyboardToken(KeyboardToken)+0x165>
c001017d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0010183:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001018a:	66 3d 12 03          	cmp    ax,0x312
c001018e:	75 0a                	jne    c001019a <sendKeyboardToken(KeyboardToken)+0x178>
c0010190:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0010196:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001019a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001019d:	66 3d 13 03          	cmp    ax,0x313
c00101a1:	75 0a                	jne    c00101ad <sendKeyboardToken(KeyboardToken)+0x18b>
c00101a3:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00101a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101b0:	66 3d 14 03          	cmp    ax,0x314
c00101b4:	75 0a                	jne    c00101c0 <sendKeyboardToken(KeyboardToken)+0x19e>
c00101b6:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00101bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101c3:	66 3d 15 03          	cmp    ax,0x315
c00101c7:	75 0a                	jne    c00101d3 <sendKeyboardToken(KeyboardToken)+0x1b1>
c00101c9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00101cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101d6:	66 3d 16 03          	cmp    ax,0x316
c00101da:	75 0a                	jne    c00101e6 <sendKeyboardToken(KeyboardToken)+0x1c4>
c00101dc:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00101e2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101e9:	66 3d 17 03          	cmp    ax,0x317
c00101ed:	75 0a                	jne    c00101f9 <sendKeyboardToken(KeyboardToken)+0x1d7>
c00101ef:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00101f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101fc:	66 3d 18 03          	cmp    ax,0x318
c0010200:	75 0a                	jne    c001020c <sendKeyboardToken(KeyboardToken)+0x1ea>
c0010202:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0010208:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001020c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001020f:	66 3d 19 03          	cmp    ax,0x319
c0010213:	75 0a                	jne    c001021f <sendKeyboardToken(KeyboardToken)+0x1fd>
c0010215:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001021b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001021f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010222:	66 3d 00 02          	cmp    ax,0x200
c0010226:	75 2c                	jne    c0010254 <sendKeyboardToken(KeyboardToken)+0x232>
c0010228:	a0 a0 8e 02 c0       	mov    al,ds:0xc0028ea0
c001022d:	83 f0 01             	xor    eax,0x1
c0010230:	84 c0                	test   al,al
c0010232:	74 20                	je     c0010254 <sendKeyboardToken(KeyboardToken)+0x232>
c0010234:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c0010239:	6a 01                	push   0x1
c001023b:	6a 00                	push   0x0
c001023d:	68 8c fe 00 c0       	push   0xc000fe8c
c0010242:	50                   	push   eax
c0010243:	e8 6c 88 00 00       	call   c0018ab4 <Process::createThread(void (*)(void*), void*, int)>
c0010248:	83 c4 10             	add    esp,0x10
c001024b:	c6 05 a0 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028ea0,0x1
c0010252:	eb 33                	jmp    c0010287 <sendKeyboardToken(KeyboardToken)+0x265>
c0010254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010257:	66 3d 01 02          	cmp    ax,0x201
c001025b:	75 2a                	jne    c0010287 <sendKeyboardToken(KeyboardToken)+0x265>
c001025d:	a0 a0 8e 02 c0       	mov    al,ds:0xc0028ea0
c0010262:	83 f0 01             	xor    eax,0x1
c0010265:	84 c0                	test   al,al
c0010267:	74 1e                	je     c0010287 <sendKeyboardToken(KeyboardToken)+0x265>
c0010269:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c001026e:	6a 01                	push   0x1
c0010270:	6a 00                	push   0x0
c0010272:	68 f8 fe 00 c0       	push   0xc000fef8
c0010277:	50                   	push   eax
c0010278:	e8 37 88 00 00       	call   c0018ab4 <Process::createThread(void (*)(void*), void*, int)>
c001027d:	83 c4 10             	add    esp,0x10
c0010280:	c6 05 a0 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028ea0,0x1
c0010287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001028a:	66 3d 1d 03          	cmp    ax,0x31d
c001028e:	75 06                	jne    c0010296 <sendKeyboardToken(KeyboardToken)+0x274>
c0010290:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0010296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010299:	66 3d 1c 03          	cmp    ax,0x31c
c001029d:	75 06                	jne    c00102a5 <sendKeyboardToken(KeyboardToken)+0x283>
c001029f:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00102a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102a8:	66 3d 1b 03          	cmp    ax,0x31b
c00102ac:	75 06                	jne    c00102b4 <sendKeyboardToken(KeyboardToken)+0x292>
c00102ae:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00102b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102b7:	66 3d 1e 03          	cmp    ax,0x31e
c00102bb:	75 06                	jne    c00102c3 <sendKeyboardToken(KeyboardToken)+0x2a1>
c00102bd:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00102c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102c6:	66 3d 1f 03          	cmp    ax,0x31f
c00102ca:	75 06                	jne    c00102d2 <sendKeyboardToken(KeyboardToken)+0x2b0>
c00102cc:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00102d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102d5:	66 3d 1a 03          	cmp    ax,0x31a
c00102d9:	75 06                	jne    c00102e1 <sendKeyboardToken(KeyboardToken)+0x2bf>
c00102db:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00102e1:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00102e5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00102e8:	83 f0 01             	xor    eax,0x1
c00102eb:	84 c0                	test   al,al
c00102ed:	74 77                	je     c0010366 <sendKeyboardToken(KeyboardToken)+0x344>
c00102ef:	a0 a1 8b 02 c0       	mov    al,ds:0xc0028ba1
c00102f4:	84 c0                	test   al,al
c00102f6:	74 41                	je     c0010339 <sendKeyboardToken(KeyboardToken)+0x317>
c00102f8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00102fc:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0010300:	74 2b                	je     c001032d <sendKeyboardToken(KeyboardToken)+0x30b>
c0010302:	8b 15 a4 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028ea4
c0010308:	89 d0                	mov    eax,edx
c001030a:	c1 e0 02             	shl    eax,0x2
c001030d:	01 d0                	add    eax,edx
c001030f:	01 c0                	add    eax,eax
c0010311:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0010316:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010319:	0f b7 c0             	movzx  eax,ax
c001031c:	8d 50 d0             	lea    edx,[eax-0x30]
c001031f:	a1 a4 8e 02 c0       	mov    eax,ds:0xc0028ea4
c0010324:	01 d0                	add    eax,edx
c0010326:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c001032b:	eb 6d                	jmp    c001039a <sendKeyboardToken(KeyboardToken)+0x378>
c001032d:	c7 05 a4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ea4,0x0
c0010337:	eb 61                	jmp    c001039a <sendKeyboardToken(KeyboardToken)+0x378>
c0010339:	a1 a4 8e 02 c0       	mov    eax,ds:0xc0028ea4
c001033e:	85 c0                	test   eax,eax
c0010340:	74 18                	je     c001035a <sendKeyboardToken(KeyboardToken)+0x338>
c0010342:	a1 a4 8e 02 c0       	mov    eax,ds:0xc0028ea4
c0010347:	0f b6 c0             	movzx  eax,al
c001034a:	83 ec 0c             	sub    esp,0xc
c001034d:	50                   	push   eax
c001034e:	e8 11 fc ff ff       	call   c000ff64 <sendKeyToTerminal(unsigned char)>
c0010353:	83 c4 10             	add    esp,0x10
c0010356:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001035a:	c7 05 a4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ea4,0x0
c0010364:	eb 34                	jmp    c001039a <sendKeyboardToken(KeyboardToken)+0x378>
c0010366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010369:	66 3d 01 01          	cmp    ax,0x101
c001036d:	75 2b                	jne    c001039a <sendKeyboardToken(KeyboardToken)+0x378>
c001036f:	a1 a4 8e 02 c0       	mov    eax,ds:0xc0028ea4
c0010374:	85 c0                	test   eax,eax
c0010376:	74 18                	je     c0010390 <sendKeyboardToken(KeyboardToken)+0x36e>
c0010378:	a1 a4 8e 02 c0       	mov    eax,ds:0xc0028ea4
c001037d:	0f b6 c0             	movzx  eax,al
c0010380:	83 ec 0c             	sub    esp,0xc
c0010383:	50                   	push   eax
c0010384:	e8 db fb ff ff       	call   c000ff64 <sendKeyToTerminal(unsigned char)>
c0010389:	83 c4 10             	add    esp,0x10
c001038c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010390:	c7 05 a4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ea4,0x0
c001039a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001039d:	83 f0 01             	xor    eax,0x1
c00103a0:	84 c0                	test   al,al
c00103a2:	74 4c                	je     c00103f0 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00103a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00103a7:	83 f0 01             	xor    eax,0x1
c00103aa:	84 c0                	test   al,al
c00103ac:	74 42                	je     c00103f0 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00103ae:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c00103b3:	83 f0 01             	xor    eax,0x1
c00103b6:	84 c0                	test   al,al
c00103b8:	74 36                	je     c00103f0 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00103ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103bd:	66 83 f8 1f          	cmp    ax,0x1f
c00103c1:	76 09                	jbe    c00103cc <sendKeyboardToken(KeyboardToken)+0x3aa>
c00103c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103c6:	66 83 f8 7e          	cmp    ax,0x7e
c00103ca:	76 12                	jbe    c00103de <sendKeyboardToken(KeyboardToken)+0x3bc>
c00103cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103cf:	66 83 f8 0a          	cmp    ax,0xa
c00103d3:	74 09                	je     c00103de <sendKeyboardToken(KeyboardToken)+0x3bc>
c00103d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103d8:	66 83 f8 08          	cmp    ax,0x8
c00103dc:	75 12                	jne    c00103f0 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00103de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103e1:	0f b6 c0             	movzx  eax,al
c00103e4:	83 ec 0c             	sub    esp,0xc
c00103e7:	50                   	push   eax
c00103e8:	e8 77 fb ff ff       	call   c000ff64 <sendKeyToTerminal(unsigned char)>
c00103ed:	83 c4 10             	add    esp,0x10
c00103f0:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00103f3:	83 f0 01             	xor    eax,0x1
c00103f6:	84 c0                	test   al,al
c00103f8:	74 4f                	je     c0010449 <sendKeyboardToken(KeyboardToken)+0x427>
c00103fa:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00103fd:	83 f0 01             	xor    eax,0x1
c0010400:	84 c0                	test   al,al
c0010402:	74 45                	je     c0010449 <sendKeyboardToken(KeyboardToken)+0x427>
c0010404:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c0010409:	84 c0                	test   al,al
c001040b:	74 3c                	je     c0010449 <sendKeyboardToken(KeyboardToken)+0x427>
c001040d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010410:	66 83 f8 3f          	cmp    ax,0x3f
c0010414:	76 33                	jbe    c0010449 <sendKeyboardToken(KeyboardToken)+0x427>
c0010416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010419:	66 83 f8 7f          	cmp    ax,0x7f
c001041d:	77 2a                	ja     c0010449 <sendKeyboardToken(KeyboardToken)+0x427>
c001041f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010422:	88 c2                	mov    dl,al
c0010424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010427:	66 83 f8 5f          	cmp    ax,0x5f
c001042b:	76 04                	jbe    c0010431 <sendKeyboardToken(KeyboardToken)+0x40f>
c001042d:	b0 20                	mov    al,0x20
c001042f:	eb 02                	jmp    c0010433 <sendKeyboardToken(KeyboardToken)+0x411>
c0010431:	b0 00                	mov    al,0x0
c0010433:	29 c2                	sub    edx,eax
c0010435:	88 d0                	mov    al,dl
c0010437:	83 e8 40             	sub    eax,0x40
c001043a:	0f b6 c0             	movzx  eax,al
c001043d:	83 ec 0c             	sub    esp,0xc
c0010440:	50                   	push   eax
c0010441:	e8 1e fb ff ff       	call   c000ff64 <sendKeyToTerminal(unsigned char)>
c0010446:	83 c4 10             	add    esp,0x10
c0010449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001044c:	66 3d 00 03          	cmp    ax,0x300
c0010450:	75 0f                	jne    c0010461 <sendKeyboardToken(KeyboardToken)+0x43f>
c0010452:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010455:	83 f0 01             	xor    eax,0x1
c0010458:	84 c0                	test   al,al
c001045a:	74 05                	je     c0010461 <sendKeyboardToken(KeyboardToken)+0x43f>
c001045c:	e8 56 aa ff ff       	call   c000aeb7 <doTerminalCycle()>
c0010461:	90                   	nop
c0010462:	c9                   	leave  
c0010463:	c3                   	ret    

c0010464 <clearInternalKeybuffer(VgaText*)>:
c0010464:	55                   	push   ebp
c0010465:	89 e5                	mov    ebp,esp
c0010467:	83 ec 08             	sub    esp,0x8
c001046a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001046d:	05 32 01 00 00       	add    eax,0x132
c0010472:	83 ec 0c             	sub    esp,0xc
c0010475:	50                   	push   eax
c0010476:	e8 25 02 ff ff       	call   c00006a0 <strlen>
c001047b:	83 c4 10             	add    esp,0x10
c001047e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010481:	81 c2 32 01 00 00    	add    edx,0x132
c0010487:	83 ec 04             	sub    esp,0x4
c001048a:	50                   	push   eax
c001048b:	6a 00                	push   0x0
c001048d:	52                   	push   edx
c001048e:	e8 f1 01 ff ff       	call   c0000684 <memset>
c0010493:	83 c4 10             	add    esp,0x10
c0010496:	90                   	nop
c0010497:	c9                   	leave  
c0010498:	c3                   	ret    

c0010499 <readKeyboard(VgaText*, char*, unsigned long)>:
c0010499:	55                   	push   ebp
c001049a:	89 e5                	mov    ebp,esp
c001049c:	83 ec 18             	sub    esp,0x18
c001049f:	a1 88 8a 02 c0       	mov    eax,ds:0xc0028a88
c00104a4:	85 c0                	test   eax,eax
c00104a6:	74 2a                	je     c00104d2 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00104a8:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00104ae:	8b 0d 88 8a 02 c0    	mov    ecx,DWORD PTR ds:0xc0028a88
c00104b4:	83 ec 04             	sub    esp,0x4
c00104b7:	68 a0 8a 02 c0       	push   0xc0028aa0
c00104bc:	83 ec 08             	sub    esp,0x8
c00104bf:	89 e2                	mov    edx,esp
c00104c1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00104c4:	89 02                	mov    DWORD PTR [edx],eax
c00104c6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00104c9:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00104cd:	ff d1                	call   ecx
c00104cf:	83 c4 10             	add    esp,0x10
c00104d2:	fb                   	sti    
c00104d3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00104da:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00104de:	0f 84 a1 00 00 00    	je     c0010585 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c00104e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104e7:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c00104ed:	84 c0                	test   al,al
c00104ef:	75 28                	jne    c0010519 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c00104f1:	fa                   	cli    
c00104f2:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c00104f7:	40                   	inc    eax
c00104f8:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c00104fd:	e8 ce 87 00 00       	call   c0018cd0 <schedule()>
c0010502:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0010507:	48                   	dec    eax
c0010508:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c001050d:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0010512:	85 c0                	test   eax,eax
c0010514:	75 ce                	jne    c00104e4 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010516:	fb                   	sti    
c0010517:	eb cb                	jmp    c00104e4 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010519:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001051c:	8d 50 01             	lea    edx,[eax+0x1]
c001051f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010522:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010525:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c001052b:	88 10                	mov    BYTE PTR [eax],dl
c001052d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010530:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010536:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0010539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001053c:	05 32 01 00 00       	add    eax,0x132
c0010541:	83 ec 0c             	sub    esp,0xc
c0010544:	50                   	push   eax
c0010545:	e8 56 01 ff ff       	call   c00006a0 <strlen>
c001054a:	83 c4 10             	add    esp,0x10
c001054d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010550:	81 c2 32 01 00 00    	add    edx,0x132
c0010556:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010559:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001055c:	81 c2 32 01 00 00    	add    edx,0x132
c0010562:	83 ec 04             	sub    esp,0x4
c0010565:	50                   	push   eax
c0010566:	51                   	push   ecx
c0010567:	52                   	push   edx
c0010568:	e8 4f 00 ff ff       	call   c00005bc <memmove>
c001056d:	83 c4 10             	add    esp,0x10
c0010570:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0010573:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0010576:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001057a:	0f 85 5a ff ff ff    	jne    c00104da <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0010580:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010583:	eb 03                	jmp    c0010588 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0010585:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010588:	c9                   	leave  
c0010589:	c3                   	ret    

c001058a <Keyboard::Keyboard(char const*)>:
c001058a:	83 ec 0c             	sub    esp,0xc
c001058d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010591:	83 ec 08             	sub    esp,0x8
c0010594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010598:	50                   	push   eax
c0010599:	e8 20 e2 ff ff       	call   c000e7be <Device::Device(char const*)>
c001059e:	83 c4 10             	add    esp,0x10
c00105a1:	ba 78 58 02 c0       	mov    edx,0xc0025878
c00105a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105aa:	89 10                	mov    DWORD PTR [eax],edx
c00105ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00105ba:	c6 05 84 8a 02 c0 01 	mov    BYTE PTR ds:0xc0028a84,0x1
c00105c1:	90                   	nop
c00105c2:	83 c4 0c             	add    esp,0xc
c00105c5:	c3                   	ret    

c00105c6 <Keyboard::~Keyboard()>:
c00105c6:	83 ec 0c             	sub    esp,0xc
c00105c9:	ba 78 58 02 c0       	mov    edx,0xc0025878
c00105ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d2:	89 10                	mov    DWORD PTR [eax],edx
c00105d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d8:	83 ec 0c             	sub    esp,0xc
c00105db:	50                   	push   eax
c00105dc:	e8 a7 de ff ff       	call   c000e488 <Device::~Device()>
c00105e1:	83 c4 10             	add    esp,0x10
c00105e4:	90                   	nop
c00105e5:	83 c4 0c             	add    esp,0xc
c00105e8:	c3                   	ret    
c00105e9:	90                   	nop

c00105ea <Keyboard::~Keyboard()>:
c00105ea:	83 ec 0c             	sub    esp,0xc
c00105ed:	83 ec 0c             	sub    esp,0xc
c00105f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f4:	e8 cd ff ff ff       	call   c00105c6 <Keyboard::~Keyboard()>
c00105f9:	83 c4 10             	add    esp,0x10
c00105fc:	83 ec 08             	sub    esp,0x8
c00105ff:	68 5c 01 00 00       	push   0x15c
c0010604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010608:	e8 59 c9 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001060d:	83 c4 10             	add    esp,0x10
c0010610:	83 c4 0c             	add    esp,0xc
c0010613:	c3                   	ret    

c0010614 <LogicalDisk::close(int, int, void*)>:
c0010614:	83 c8 ff             	or     eax,0xffffffff
c0010617:	c3                   	ret    

c0010618 <LogicalDisk::~LogicalDisk()>:
c0010618:	83 ec 0c             	sub    esp,0xc
c001061b:	ba 48 59 02 c0       	mov    edx,0xc0025948
c0010620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010624:	89 10                	mov    DWORD PTR [eax],edx
c0010626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001062a:	83 ec 0c             	sub    esp,0xc
c001062d:	50                   	push   eax
c001062e:	e8 55 de ff ff       	call   c000e488 <Device::~Device()>
c0010633:	83 c4 10             	add    esp,0x10
c0010636:	90                   	nop
c0010637:	83 c4 0c             	add    esp,0xc
c001063a:	c3                   	ret    
c001063b:	90                   	nop

c001063c <LogicalDisk::~LogicalDisk()>:
c001063c:	83 ec 0c             	sub    esp,0xc
c001063f:	83 ec 0c             	sub    esp,0xc
c0010642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010646:	e8 cd ff ff ff       	call   c0010618 <LogicalDisk::~LogicalDisk()>
c001064b:	83 c4 10             	add    esp,0x10
c001064e:	83 ec 08             	sub    esp,0x8
c0010651:	68 74 01 00 00       	push   0x174
c0010656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001065a:	e8 07 c9 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001065f:	83 c4 10             	add    esp,0x10
c0010662:	83 c4 0c             	add    esp,0xc
c0010665:	c3                   	ret    

c0010666 <LogicalDisk::open(int, int, void*)>:
c0010666:	83 ec 18             	sub    esp,0x18
c0010669:	68 a4 58 02 c0       	push   0xc00258a4
c001066e:	e8 52 4a 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c0010673:	83 c8 ff             	or     eax,0xffffffff
c0010676:	83 c4 1c             	add    esp,0x1c
c0010679:	c3                   	ret    

c001067a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001067a:	53                   	push   ebx
c001067b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001067f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010683:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010687:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001068d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0010693:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0010699:	77 10                	ja     c00106ab <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001069b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00106a1:	89 d3                	mov    ebx,edx
c00106a3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00106a9:	72 05                	jb     c00106b0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00106ab:	83 c8 ff             	or     eax,0xffffffff
c00106ae:	89 c2                	mov    edx,eax
c00106b0:	5b                   	pop    ebx
c00106b1:	c3                   	ret    

c00106b2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00106b2:	56                   	push   esi
c00106b3:	83 c8 ff             	or     eax,0xffffffff
c00106b6:	53                   	push   ebx
c00106b7:	89 c2                	mov    edx,eax
c00106b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00106bd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00106c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00106c5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00106cb:	77 27                	ja     c00106f4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00106cd:	89 d8                	mov    eax,ebx
c00106cf:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00106d5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00106db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106e0:	89 c2                	mov    edx,eax
c00106e2:	73 10                	jae    c00106f4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00106e4:	89 c8                	mov    eax,ecx
c00106e6:	89 da                	mov    edx,ebx
c00106e8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00106ee:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00106f4:	5b                   	pop    ebx
c00106f5:	5e                   	pop    esi
c00106f6:	c3                   	ret    
c00106f7:	90                   	nop

c00106f8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00106f8:	83 ec 1c             	sub    esp,0x1c
c00106fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010703:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010707:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001070b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001070f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010712:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010716:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001071a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001071e:	83 ec 08             	sub    esp,0x8
c0010721:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010725:	50                   	push   eax
c0010726:	e8 93 e0 ff ff       	call   c000e7be <Device::Device(char const*)>
c001072b:	83 c4 10             	add    esp,0x10
c001072e:	ba 48 59 02 c0       	mov    edx,0xc0025948
c0010733:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010737:	89 10                	mov    DWORD PTR [eax],edx
c0010739:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001073d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010748:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001074f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010753:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001075d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010765:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010769:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001076f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0010775:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010779:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001077c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010780:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0010786:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001078c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010790:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010794:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001079a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001079e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00107a8:	90                   	nop
c00107a9:	83 c4 1c             	add    esp,0x1c
c00107ac:	c3                   	ret    
c00107ad:	90                   	nop

c00107ae <LogicalDisk::assignDriveLetter()>:
c00107ae:	55                   	push   ebp
c00107af:	57                   	push   edi
c00107b0:	56                   	push   esi
c00107b1:	53                   	push   ebx
c00107b2:	83 ec 14             	sub    esp,0x14
c00107b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00107b9:	8b 3d c0 8e 02 c0    	mov    edi,DWORD PTR ds:0xc0028ec0
c00107bf:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00107c5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00107c9:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00107cf:	8b 3d c4 8e 02 c0    	mov    edi,DWORD PTR ds:0xc0028ec4
c00107d5:	3c 01                	cmp    al,0x1
c00107d7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00107db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00107df:	19 c0                	sbb    eax,eax
c00107e1:	83 e0 02             	and    eax,0x2
c00107e4:	83 c0 41             	add    eax,0x41
c00107e7:	0f be e8             	movsx  ebp,al
c00107ea:	3c 43                	cmp    al,0x43
c00107ec:	75 10                	jne    c00107fe <LogicalDisk::assignDriveLetter()+0x50>
c00107ee:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00107f5:	75 5d                	jne    c0010854 <LogicalDisk::assignDriveLetter()+0xa6>
c00107f7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00107fc:	75 56                	jne    c0010854 <LogicalDisk::assignDriveLetter()+0xa6>
c00107fe:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010801:	ba 01 00 00 00       	mov    edx,0x1
c0010806:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001080a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001080e:	d3 e2                	shl    edx,cl
c0010810:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010814:	89 d7                	mov    edi,edx
c0010816:	89 d6                	mov    esi,edx
c0010818:	c1 ff 1f             	sar    edi,0x1f
c001081b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001081f:	21 f9                	and    ecx,edi
c0010821:	09 d1                	or     ecx,edx
c0010823:	75 2f                	jne    c0010854 <LogicalDisk::assignDriveLetter()+0xa6>
c0010825:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010829:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001082d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010833:	09 f2                	or     edx,esi
c0010835:	89 15 c0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ec0,edx
c001083b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001083f:	09 fa                	or     edx,edi
c0010841:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010845:	89 15 c4 8e 02 c0    	mov    DWORD PTR ds:0xc0028ec4,edx
c001084b:	89 1c bd e0 8e 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7120],ebx
c0010852:	eb 08                	jmp    c001085c <LogicalDisk::assignDriveLetter()+0xae>
c0010854:	45                   	inc    ebp
c0010855:	40                   	inc    eax
c0010856:	3c 5b                	cmp    al,0x5b
c0010858:	75 90                	jne    c00107ea <LogicalDisk::assignDriveLetter()+0x3c>
c001085a:	31 c0                	xor    eax,eax
c001085c:	83 c4 14             	add    esp,0x14
c001085f:	5b                   	pop    ebx
c0010860:	5e                   	pop    esi
c0010861:	5f                   	pop    edi
c0010862:	5d                   	pop    ebp
c0010863:	c3                   	ret    

c0010864 <LogicalDisk::mount()>:
c0010864:	56                   	push   esi
c0010865:	53                   	push   ebx
c0010866:	83 ec 1c             	sub    esp,0x1c
c0010869:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001086d:	8b 1d 54 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a54
c0010873:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001087a:	50                   	push   eax
c001087b:	68 c8 58 02 c0       	push   0xc00258c8
c0010880:	e8 c2 c7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0010885:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001088f:	83 c4 10             	add    esp,0x10
c0010892:	85 db                	test   ebx,ebx
c0010894:	74 4e                	je     c00108e4 <LogicalDisk::mount()+0x80>
c0010896:	83 ec 0c             	sub    esp,0xc
c0010899:	68 e9 58 02 c0       	push   0xc00258e9
c001089e:	e8 a4 c7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00108a3:	83 c4 0c             	add    esp,0xc
c00108a6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00108ad:	8b 13                	mov    edx,DWORD PTR [ebx]
c00108af:	83 e8 41             	sub    eax,0x41
c00108b2:	50                   	push   eax
c00108b3:	56                   	push   esi
c00108b4:	53                   	push   ebx
c00108b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00108b8:	83 c4 10             	add    esp,0x10
c00108bb:	84 c0                	test   al,al
c00108bd:	74 20                	je     c00108df <LogicalDisk::mount()+0x7b>
c00108bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00108c3:	83 ec 0c             	sub    esp,0xc
c00108c6:	68 05 59 02 c0       	push   0xc0025905
c00108cb:	e8 77 c7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00108d0:	83 c4 10             	add    esp,0x10
c00108d3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00108d9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00108dd:	eb 07                	jmp    c00108e6 <LogicalDisk::mount()+0x82>
c00108df:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00108e2:	eb ae                	jmp    c0010892 <LogicalDisk::mount()+0x2e>
c00108e4:	31 c0                	xor    eax,eax
c00108e6:	83 c4 14             	add    esp,0x14
c00108e9:	5b                   	pop    ebx
c00108ea:	5e                   	pop    esi
c00108eb:	c3                   	ret    

c00108ec <LogicalDisk::unmount()>:
c00108ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108f0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00108fa:	c3                   	ret    
c00108fb:	90                   	nop

c00108fc <LogicalDisk::eject()>:
c00108fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010900:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010906:	8b 10                	mov    edx,DWORD PTR [eax]
c0010908:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001090c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001090f:	90                   	nop

c0010910 <LogicalDisk::unassignDriveLetter()>:
c0010910:	57                   	push   edi
c0010911:	56                   	push   esi
c0010912:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010916:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001091d:	84 c9                	test   cl,cl
c001091f:	75 0f                	jne    c0010930 <LogicalDisk::unassignDriveLetter()+0x20>
c0010921:	c7 44 24 0c 1e 59 02 c0 	mov    DWORD PTR [esp+0xc],0xc002591e
c0010929:	5e                   	pop    esi
c001092a:	5f                   	pop    edi
c001092b:	e9 95 47 00 00       	jmp    c00150c5 <Krnl::panic(char const*)>
c0010930:	83 e9 41             	sub    ecx,0x41
c0010933:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001093a:	b8 01 00 00 00       	mov    eax,0x1
c001093f:	c7 04 8d e0 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7120],0x0
c001094a:	d3 e0                	shl    eax,cl
c001094c:	89 c7                	mov    edi,eax
c001094e:	f7 d0                	not    eax
c0010950:	c1 ff 1f             	sar    edi,0x1f
c0010953:	21 05 c0 8e 02 c0    	and    DWORD PTR ds:0xc0028ec0,eax
c0010959:	89 fe                	mov    esi,edi
c001095b:	f7 d6                	not    esi
c001095d:	21 35 c4 8e 02 c0    	and    DWORD PTR ds:0xc0028ec4,esi
c0010963:	5e                   	pop    esi
c0010964:	5f                   	pop    edi
c0010965:	c3                   	ret    

c0010966 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010966:	57                   	push   edi
c0010967:	56                   	push   esi
c0010968:	53                   	push   ebx
c0010969:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001096d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010971:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010975:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010979:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001097f:	77 41                	ja     c00109c2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010981:	99                   	cdq    
c0010982:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010988:	01 c8                	add    eax,ecx
c001098a:	11 da                	adc    edx,ebx
c001098c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010992:	19 d7                	sbb    edi,edx
c0010994:	72 33                	jb     c00109c9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010996:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001099c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00109a2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00109a6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00109aa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00109b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00109b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109ba:	5b                   	pop    ebx
c00109bb:	5e                   	pop    esi
c00109bc:	5f                   	pop    edi
c00109bd:	e9 f4 0a 00 00       	jmp    c00114b6 <VCache::read(unsigned long long, int, void*)>
c00109c2:	b8 05 00 00 00       	mov    eax,0x5
c00109c7:	eb 05                	jmp    c00109ce <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00109c9:	b8 07 00 00 00       	mov    eax,0x7
c00109ce:	5b                   	pop    ebx
c00109cf:	5e                   	pop    esi
c00109d0:	5f                   	pop    edi
c00109d1:	c3                   	ret    

c00109d2 <LogicalDisk::write(unsigned long long, int, void*)>:
c00109d2:	57                   	push   edi
c00109d3:	56                   	push   esi
c00109d4:	53                   	push   ebx
c00109d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00109d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109dd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00109e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109e5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00109eb:	77 41                	ja     c0010a2e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00109ed:	99                   	cdq    
c00109ee:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00109f4:	01 c8                	add    eax,ecx
c00109f6:	11 da                	adc    edx,ebx
c00109f8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00109fe:	19 d7                	sbb    edi,edx
c0010a00:	72 33                	jb     c0010a35 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010a02:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010a08:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010a0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010a12:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010a16:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010a1c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010a22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010a26:	5b                   	pop    ebx
c0010a27:	5e                   	pop    esi
c0010a28:	5f                   	pop    edi
c0010a29:	e9 8e 09 00 00       	jmp    c00113bc <VCache::write(unsigned long long, int, void*)>
c0010a2e:	b8 05 00 00 00       	mov    eax,0x5
c0010a33:	eb 05                	jmp    c0010a3a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010a35:	b8 07 00 00 00       	mov    eax,0x7
c0010a3a:	5b                   	pop    ebx
c0010a3b:	5e                   	pop    esi
c0010a3c:	5f                   	pop    edi
c0010a3d:	c3                   	ret    
c0010a3e:	66 90                	xchg   ax,ax

c0010a40 <Mouse::Mouse(char const*)>:
c0010a40:	83 ec 0c             	sub    esp,0xc
c0010a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a47:	83 ec 08             	sub    esp,0x8
c0010a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a4e:	50                   	push   eax
c0010a4f:	e8 6a dd ff ff       	call   c000e7be <Device::Device(char const*)>
c0010a54:	83 c4 10             	add    esp,0x10
c0010a57:	ba 74 59 02 c0       	mov    edx,0xc0025974
c0010a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a60:	89 10                	mov    DWORD PTR [eax],edx
c0010a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a66:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010a70:	90                   	nop
c0010a71:	83 c4 0c             	add    esp,0xc
c0010a74:	c3                   	ret    
c0010a75:	90                   	nop
c0010a76:	66 90                	xchg   ax,ax

c0010a78 <Mouse::~Mouse()>:
c0010a78:	83 ec 0c             	sub    esp,0xc
c0010a7b:	ba 74 59 02 c0       	mov    edx,0xc0025974
c0010a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a84:	89 10                	mov    DWORD PTR [eax],edx
c0010a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a8a:	83 ec 0c             	sub    esp,0xc
c0010a8d:	50                   	push   eax
c0010a8e:	e8 f5 d9 ff ff       	call   c000e488 <Device::~Device()>
c0010a93:	83 c4 10             	add    esp,0x10
c0010a96:	90                   	nop
c0010a97:	83 c4 0c             	add    esp,0xc
c0010a9a:	c3                   	ret    
c0010a9b:	90                   	nop

c0010a9c <Mouse::~Mouse()>:
c0010a9c:	83 ec 0c             	sub    esp,0xc
c0010a9f:	83 ec 0c             	sub    esp,0xc
c0010aa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aa6:	e8 cd ff ff ff       	call   c0010a78 <Mouse::~Mouse()>
c0010aab:	83 c4 10             	add    esp,0x10
c0010aae:	83 ec 08             	sub    esp,0x8
c0010ab1:	68 58 01 00 00       	push   0x158
c0010ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aba:	e8 a7 c4 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0010abf:	83 c4 10             	add    esp,0x10
c0010ac2:	83 c4 0c             	add    esp,0xc
c0010ac5:	c3                   	ret    

c0010ac6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010ac6:	55                   	push   ebp
c0010ac7:	57                   	push   edi
c0010ac8:	56                   	push   esi
c0010ac9:	53                   	push   ebx
c0010aca:	81 ec 28 01 00 00    	sub    esp,0x128
c0010ad0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010ad7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010ade:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010ae5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010aec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010af0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010af4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010afb:	e8 ba dd ff ff       	call   c000e8ba <Device::getName()>
c0010b00:	5a                   	pop    edx
c0010b01:	59                   	pop    ecx
c0010b02:	50                   	push   eax
c0010b03:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010b07:	55                   	push   ebp
c0010b08:	e8 33 fc fe ff       	call   c0000740 <strcpy>
c0010b0d:	5b                   	pop    ebx
c0010b0e:	58                   	pop    eax
c0010b0f:	68 98 59 02 c0       	push   0xc0025998
c0010b14:	55                   	push   ebp
c0010b15:	e8 66 fd fe ff       	call   c0000880 <strcat>
c0010b1a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010b21:	e8 35 92 ff ff       	call   c0009d5b <malloc>
c0010b26:	83 c4 0c             	add    esp,0xc
c0010b29:	89 c3                	mov    ebx,eax
c0010b2b:	57                   	push   edi
c0010b2c:	56                   	push   esi
c0010b2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010b31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010b35:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010b3c:	55                   	push   ebp
c0010b3d:	50                   	push   eax
c0010b3e:	e8 b5 fb ff ff       	call   c00106f8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010b43:	83 c4 14             	add    esp,0x14
c0010b46:	53                   	push   ebx
c0010b47:	e8 62 fc ff ff       	call   c00107ae <LogicalDisk::assignDriveLetter()>
c0010b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b4f:	e8 10 fd ff ff       	call   c0010864 <LogicalDisk::mount()>
c0010b54:	58                   	pop    eax
c0010b55:	5a                   	pop    edx
c0010b56:	53                   	push   ebx
c0010b57:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010b5e:	e8 57 da ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0010b63:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010b69:	5b                   	pop    ebx
c0010b6a:	5e                   	pop    esi
c0010b6b:	5f                   	pop    edi
c0010b6c:	5d                   	pop    ebp
c0010b6d:	c3                   	ret    

c0010b6e <createPartitionsForDisk(PhysicalDisk*)>:
c0010b6e:	55                   	push   ebp
c0010b6f:	57                   	push   edi
c0010b70:	56                   	push   esi
c0010b71:	53                   	push   ebx
c0010b72:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010b78:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010b7f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010b85:	3d 00 02 00 00       	cmp    eax,0x200
c0010b8a:	74 27                	je     c0010bb3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010b8c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010b92:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010b98:	83 ec 10             	sub    esp,0x10
c0010b9b:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010b9f:	99                   	cdq    
c0010ba0:	c1 e6 0a             	shl    esi,0xa
c0010ba3:	52                   	push   edx
c0010ba4:	89 fd                	mov    ebp,edi
c0010ba6:	50                   	push   eax
c0010ba7:	55                   	push   ebp
c0010ba8:	56                   	push   esi
c0010ba9:	e8 a2 21 01 00       	call   c0022d50 <__udivdi3>
c0010bae:	e9 b1 00 00 00       	jmp    c0010c64 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010bb3:	83 ec 0c             	sub    esp,0xc
c0010bb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bb8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010bbc:	56                   	push   esi
c0010bbd:	6a 01                	push   0x1
c0010bbf:	6a 00                	push   0x0
c0010bc1:	6a 00                	push   0x0
c0010bc3:	53                   	push   ebx
c0010bc4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010bc7:	83 c4 20             	add    esp,0x20
c0010bca:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010bd2:	75 0a                	jne    c0010bde <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010bd4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010bdc:	74 2c                	je     c0010c0a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010bde:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010be4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010bea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010bf0:	83 ec 10             	sub    esp,0x10
c0010bf3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010bf7:	89 f7                	mov    edi,esi
c0010bf9:	c1 e0 0a             	shl    eax,0xa
c0010bfc:	c1 ff 1f             	sar    edi,0x1f
c0010bff:	57                   	push   edi
c0010c00:	56                   	push   esi
c0010c01:	52                   	push   edx
c0010c02:	50                   	push   eax
c0010c03:	e8 48 21 01 00       	call   c0022d50 <__udivdi3>
c0010c08:	eb 5a                	jmp    c0010c64 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010c0a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010c11:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010c18:	83 e1 7f             	and    ecx,0x7f
c0010c1b:	83 e0 7f             	and    eax,0x7f
c0010c1e:	01 c1                	add    ecx,eax
c0010c20:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010c27:	83 e0 7f             	and    eax,0x7f
c0010c2a:	01 c1                	add    ecx,eax
c0010c2c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010c33:	83 e0 7f             	and    eax,0x7f
c0010c36:	00 c1                	add    cl,al
c0010c38:	74 41                	je     c0010c7b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010c3a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010c40:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010c46:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010c4c:	83 ec 10             	sub    esp,0x10
c0010c4f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010c53:	89 f7                	mov    edi,esi
c0010c55:	c1 e0 0a             	shl    eax,0xa
c0010c58:	c1 ff 1f             	sar    edi,0x1f
c0010c5b:	57                   	push   edi
c0010c5c:	56                   	push   esi
c0010c5d:	52                   	push   edx
c0010c5e:	50                   	push   eax
c0010c5f:	e8 ec 20 01 00       	call   c0022d50 <__udivdi3>
c0010c64:	83 c4 14             	add    esp,0x14
c0010c67:	52                   	push   edx
c0010c68:	50                   	push   eax
c0010c69:	6a 00                	push   0x0
c0010c6b:	6a 00                	push   0x0
c0010c6d:	53                   	push   ebx
c0010c6e:	e8 53 fe ff ff       	call   c0010ac6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010c73:	83 c4 20             	add    esp,0x20
c0010c76:	e9 79 01 00 00       	jmp    c0010df4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010c7b:	89 f0                	mov    eax,esi
c0010c7d:	31 f6                	xor    esi,esi
c0010c7f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010c86:	75 02                	jne    c0010c8a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010c88:	89 f1                	mov    ecx,esi
c0010c8a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010c91:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010c98:	c1 e2 08             	shl    edx,0x8
c0010c9b:	c1 e7 10             	shl    edi,0x10
c0010c9e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010ca6:	09 fa                	or     edx,edi
c0010ca8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010cb0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010cb7:	83 c0 10             	add    eax,0x10
c0010cba:	09 fa                	or     edx,edi
c0010cbc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010cc3:	c1 e7 18             	shl    edi,0x18
c0010cc6:	09 fa                	or     edx,edi
c0010cc8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010ccf:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010cd3:	c1 e7 10             	shl    edi,0x10
c0010cd6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010cdd:	c1 e2 08             	shl    edx,0x8
c0010ce0:	09 fa                	or     edx,edi
c0010ce2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010ce9:	09 fa                	or     edx,edi
c0010ceb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010cf2:	c1 e7 18             	shl    edi,0x18
c0010cf5:	09 fa                	or     edx,edi
c0010cf7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010cfb:	46                   	inc    esi
c0010cfc:	83 fe 04             	cmp    esi,0x4
c0010cff:	0f 85 7a ff ff ff    	jne    c0010c7f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d09:	83 f0 01             	xor    eax,0x1
c0010d0c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010d10:	75 57                	jne    c0010d69 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010d12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d16:	83 f0 01             	xor    eax,0x1
c0010d19:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010d1d:	75 4a                	jne    c0010d69 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010d1f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d23:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010d2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010d33:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010d39:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010d3f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010d45:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010d49:	89 f7                	mov    edi,esi
c0010d4b:	c1 e0 0a             	shl    eax,0xa
c0010d4e:	c1 ff 1f             	sar    edi,0x1f
c0010d51:	57                   	push   edi
c0010d52:	56                   	push   esi
c0010d53:	52                   	push   edx
c0010d54:	50                   	push   eax
c0010d55:	e8 f6 1f 01 00       	call   c0022d50 <__udivdi3>
c0010d5a:	83 c4 10             	add    esp,0x10
c0010d5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010d61:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010d65:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010d69:	84 c9                	test   cl,cl
c0010d6b:	74 53                	je     c0010dc0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010d6d:	0f b6 c9             	movzx  ecx,cl
c0010d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d78:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010d7c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010d88:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010d8c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010d90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010d94:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010da0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010da4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010da8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010dac:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010db0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010db4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010db8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010dbc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010dc0:	31 ed                	xor    ebp,ebp
c0010dc2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010dc6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010dca:	89 f8                	mov    eax,edi
c0010dcc:	09 f0                	or     eax,esi
c0010dce:	74 1e                	je     c0010dee <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010dd0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010dd4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010dd8:	89 d1                	mov    ecx,edx
c0010dda:	09 c1                	or     ecx,eax
c0010ddc:	74 10                	je     c0010dee <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010dde:	83 ec 0c             	sub    esp,0xc
c0010de1:	57                   	push   edi
c0010de2:	56                   	push   esi
c0010de3:	52                   	push   edx
c0010de4:	50                   	push   eax
c0010de5:	53                   	push   ebx
c0010de6:	e8 db fc ff ff       	call   c0010ac6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010deb:	83 c4 20             	add    esp,0x20
c0010dee:	45                   	inc    ebp
c0010def:	83 fd 04             	cmp    ebp,0x4
c0010df2:	75 ce                	jne    c0010dc2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010df4:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010dfa:	5b                   	pop    ebx
c0010dfb:	5e                   	pop    esi
c0010dfc:	5f                   	pop    edi
c0010dfd:	5d                   	pop    ebp
c0010dfe:	c3                   	ret    
c0010dff:	90                   	nop

c0010e00 <Serial::Serial(char const*)>:
c0010e00:	83 ec 0c             	sub    esp,0xc
c0010e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e07:	83 ec 08             	sub    esp,0x8
c0010e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e0e:	50                   	push   eax
c0010e0f:	e8 aa d9 ff ff       	call   c000e7be <Device::Device(char const*)>
c0010e14:	83 c4 10             	add    esp,0x10
c0010e17:	ba ac 59 02 c0       	mov    edx,0xc00259ac
c0010e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e20:	89 10                	mov    DWORD PTR [eax],edx
c0010e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e26:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010e30:	90                   	nop
c0010e31:	83 c4 0c             	add    esp,0xc
c0010e34:	c3                   	ret    
c0010e35:	90                   	nop
c0010e36:	66 90                	xchg   ax,ax

c0010e38 <Serial::~Serial()>:
c0010e38:	83 ec 0c             	sub    esp,0xc
c0010e3b:	ba ac 59 02 c0       	mov    edx,0xc00259ac
c0010e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e44:	89 10                	mov    DWORD PTR [eax],edx
c0010e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e4a:	83 ec 0c             	sub    esp,0xc
c0010e4d:	50                   	push   eax
c0010e4e:	e8 35 d6 ff ff       	call   c000e488 <Device::~Device()>
c0010e53:	83 c4 10             	add    esp,0x10
c0010e56:	90                   	nop
c0010e57:	83 c4 0c             	add    esp,0xc
c0010e5a:	c3                   	ret    
c0010e5b:	90                   	nop

c0010e5c <Serial::~Serial()>:
c0010e5c:	83 ec 0c             	sub    esp,0xc
c0010e5f:	83 ec 0c             	sub    esp,0xc
c0010e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e66:	e8 cd ff ff ff       	call   c0010e38 <Serial::~Serial()>
c0010e6b:	83 c4 10             	add    esp,0x10
c0010e6e:	83 ec 08             	sub    esp,0x8
c0010e71:	68 58 01 00 00       	push   0x158
c0010e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e7a:	e8 e7 c0 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0010e7f:	83 c4 10             	add    esp,0x10
c0010e82:	83 c4 0c             	add    esp,0xc
c0010e85:	c3                   	ret    
c0010e86:	66 90                	xchg   ax,ax

c0010e88 <Timer::Timer(char const*)>:
c0010e88:	83 ec 0c             	sub    esp,0xc
c0010e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e8f:	83 ec 08             	sub    esp,0x8
c0010e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e96:	50                   	push   eax
c0010e97:	e8 22 d9 ff ff       	call   c000e7be <Device::Device(char const*)>
c0010e9c:	83 c4 10             	add    esp,0x10
c0010e9f:	ba f0 59 02 c0       	mov    edx,0xc00259f0
c0010ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ea8:	89 10                	mov    DWORD PTR [eax],edx
c0010eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eae:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010eb8:	90                   	nop
c0010eb9:	83 c4 0c             	add    esp,0xc
c0010ebc:	c3                   	ret    
c0010ebd:	90                   	nop
c0010ebe:	66 90                	xchg   ax,ax

c0010ec0 <Timer::~Timer()>:
c0010ec0:	83 ec 0c             	sub    esp,0xc
c0010ec3:	ba f0 59 02 c0       	mov    edx,0xc00259f0
c0010ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ecc:	89 10                	mov    DWORD PTR [eax],edx
c0010ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ed2:	83 ec 0c             	sub    esp,0xc
c0010ed5:	50                   	push   eax
c0010ed6:	e8 ad d5 ff ff       	call   c000e488 <Device::~Device()>
c0010edb:	83 c4 10             	add    esp,0x10
c0010ede:	90                   	nop
c0010edf:	83 c4 0c             	add    esp,0xc
c0010ee2:	c3                   	ret    
c0010ee3:	90                   	nop

c0010ee4 <Timer::~Timer()>:
c0010ee4:	83 ec 0c             	sub    esp,0xc
c0010ee7:	83 ec 0c             	sub    esp,0xc
c0010eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eee:	e8 cd ff ff ff       	call   c0010ec0 <Timer::~Timer()>
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	83 ec 08             	sub    esp,0x8
c0010ef9:	68 5c 01 00 00       	push   0x15c
c0010efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f02:	e8 5f c0 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0010f07:	83 c4 10             	add    esp,0x10
c0010f0a:	83 c4 0c             	add    esp,0xc
c0010f0d:	c3                   	ret    

c0010f0e <Timer::read()>:
c0010f0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f12:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010f18:	c3                   	ret    

c0010f19 <timerHandler(unsigned int)>:
c0010f19:	56                   	push   esi
c0010f1a:	53                   	push   ebx
c0010f1b:	51                   	push   ecx
c0010f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f20:	01 05 4c 8f 02 c0    	add    DWORD PTR ds:0xc0028f4c,eax
c0010f26:	80 3d 2d 89 02 c0 00 	cmp    BYTE PTR ds:0xc002892d,0x0
c0010f2d:	0f 84 49 01 00 00    	je     c001107c <timerHandler(unsigned int)+0x163>
c0010f33:	fa                   	cli    
c0010f34:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	ff 05 44 9e 02 c0    	inc    DWORD PTR ds:0xc0029e44
c0010f43:	68 58 9e 02 c0       	push   0xc0029e58
c0010f48:	e8 d3 23 01 00       	call   c0023320 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010f4d:	83 c4 10             	add    esp,0x10
c0010f50:	84 c0                	test   al,al
c0010f52:	0f 85 a0 00 00 00    	jne    c0010ff8 <timerHandler(unsigned int)+0xdf>
c0010f58:	83 ec 0c             	sub    esp,0xc
c0010f5b:	68 58 9e 02 c0       	push   0xc0029e58
c0010f60:	e8 d7 23 01 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010f65:	83 c4 10             	add    esp,0x10
c0010f68:	89 c6                	mov    esi,eax
c0010f6a:	66 90                	xchg   ax,ax
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	68 58 9e 02 c0       	push   0xc0029e58
c0010f74:	e8 c3 23 01 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010f79:	c7 04 24 58 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e58
c0010f80:	89 c3                	mov    ebx,eax
c0010f82:	e8 bd 23 01 00       	call   c0023344 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010f87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010f8a:	83 c4 10             	add    esp,0x10
c0010f8d:	3b 05 4c 8f 02 c0    	cmp    eax,DWORD PTR ds:0xc0028f4c
c0010f93:	77 23                	ja     c0010fb8 <timerHandler(unsigned int)+0x9f>
c0010f95:	83 ec 0c             	sub    esp,0xc
c0010f98:	53                   	push   ebx
c0010f99:	e8 ee 81 00 00       	call   c001918c <unblockTask(ThreadControlBlock*)>
c0010f9e:	83 c4 10             	add    esp,0x10
c0010fa1:	39 de                	cmp    esi,ebx
c0010fa3:	75 27                	jne    c0010fcc <timerHandler(unsigned int)+0xb3>
c0010fa5:	83 ec 0c             	sub    esp,0xc
c0010fa8:	68 58 9e 02 c0       	push   0xc0029e58
c0010fad:	e8 8a 23 01 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010fb2:	89 c6                	mov    esi,eax
c0010fb4:	eb 12                	jmp    c0010fc8 <timerHandler(unsigned int)+0xaf>
c0010fb6:	66 90                	xchg   ax,ax
c0010fb8:	52                   	push   edx
c0010fb9:	52                   	push   edx
c0010fba:	53                   	push   ebx
c0010fbb:	68 58 9e 02 c0       	push   0xc0029e58
c0010fc0:	e8 37 24 01 00       	call   c00233fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fc8:	83 c4 10             	add    esp,0x10
c0010fcb:	90                   	nop
c0010fcc:	83 ec 0c             	sub    esp,0xc
c0010fcf:	68 58 9e 02 c0       	push   0xc0029e58
c0010fd4:	e8 47 23 01 00       	call   c0023320 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010fd9:	83 c4 10             	add    esp,0x10
c0010fdc:	84 c0                	test   al,al
c0010fde:	75 18                	jne    c0010ff8 <timerHandler(unsigned int)+0xdf>
c0010fe0:	83 ec 0c             	sub    esp,0xc
c0010fe3:	68 58 9e 02 c0       	push   0xc0029e58
c0010fe8:	e8 4f 23 01 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	39 f0                	cmp    eax,esi
c0010ff2:	0f 85 74 ff ff ff    	jne    c0010f6c <timerHandler(unsigned int)+0x53>
c0010ff8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ffd:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0011001:	74 41                	je     c0011044 <timerHandler(unsigned int)+0x12b>
c0011003:	80 3d 2c 89 02 c0 00 	cmp    BYTE PTR ds:0xc002892c,0x0
c001100a:	74 38                	je     c0011044 <timerHandler(unsigned int)+0x12b>
c001100c:	fa                   	cli    
c001100d:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0011013:	a1 4c 8f 02 c0       	mov    eax,ds:0xc0028f4c
c0011018:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001101e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0011021:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011027:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c001102a:	72 08                	jb     c0011034 <timerHandler(unsigned int)+0x11b>
c001102c:	e8 9f 7c 00 00       	call   c0018cd0 <schedule()>
c0011031:	8d 76 00             	lea    esi,[esi+0x0]
c0011034:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0011039:	48                   	dec    eax
c001103a:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c001103f:	75 03                	jne    c0011044 <timerHandler(unsigned int)+0x12b>
c0011041:	fb                   	sti    
c0011042:	66 90                	xchg   ax,ax
c0011044:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c0011049:	48                   	dec    eax
c001104a:	a3 44 9e 02 c0       	mov    ds:0xc0029e44,eax
c001104f:	75 1b                	jne    c001106c <timerHandler(unsigned int)+0x153>
c0011051:	83 3d 40 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029e40,0x0
c0011058:	74 12                	je     c001106c <timerHandler(unsigned int)+0x153>
c001105a:	c7 05 40 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x0
c0011064:	e8 67 7c 00 00       	call   c0018cd0 <schedule()>
c0011069:	8d 76 00             	lea    esi,[esi+0x0]
c001106c:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0011071:	48                   	dec    eax
c0011072:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0011077:	75 03                	jne    c001107c <timerHandler(unsigned int)+0x163>
c0011079:	fb                   	sti    
c001107a:	66 90                	xchg   ax,ax
c001107c:	58                   	pop    eax
c001107d:	5b                   	pop    ebx
c001107e:	5e                   	pop    esi
c001107f:	c3                   	ret    

c0011080 <setupTimer(int)>:
c0011080:	57                   	push   edi
c0011081:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0011086:	56                   	push   esi
c0011087:	53                   	push   ebx
c0011088:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001108c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011092:	83 ec 0c             	sub    esp,0xc
c0011095:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001109b:	e8 1a d8 ff ff       	call   c000e8ba <Device::getName()>
c00110a0:	83 c4 10             	add    esp,0x10
c00110a3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00110a6:	0f 85 94 00 00 00    	jne    c0011140 <setupTimer(int)+0xc0>
c00110ac:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c00110b1:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00110b8:	0f 84 82 00 00 00    	je     c0011140 <setupTimer(int)+0xc0>
c00110be:	83 ec 0c             	sub    esp,0xc
c00110c1:	68 5c 01 00 00       	push   0x15c
c00110c6:	e8 90 8c ff ff       	call   c0009d5b <malloc>
c00110cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00110ce:	89 c3                	mov    ebx,eax
c00110d0:	e8 57 18 01 00       	call   c002292c <PIT::PIT()>
c00110d5:	59                   	pop    ecx
c00110d6:	5f                   	pop    edi
c00110d7:	53                   	push   ebx
c00110d8:	ff 35 28 89 02 c0    	push   DWORD PTR ds:0xc0028928
c00110de:	e8 d7 d4 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c00110e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110e5:	6a 00                	push   0x0
c00110e7:	6a 00                	push   0x0
c00110e9:	56                   	push   esi
c00110ea:	53                   	push   ebx
c00110eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00110ee:	83 c4 14             	add    esp,0x14
c00110f1:	68 60 01 00 00       	push   0x160
c00110f6:	e8 60 8c ff ff       	call   c0009d5b <malloc>
c00110fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00110fe:	89 c7                	mov    edi,eax
c0011100:	e8 db 16 01 00       	call   c00227e0 <APICTimer::APICTimer()>
c0011105:	6a 00                	push   0x0
c0011107:	6a 00                	push   0x0
c0011109:	56                   	push   esi
c001110a:	57                   	push   edi
c001110b:	e8 d0 15 01 00       	call   c00226e0 <APICTimer::open(int, int, void*)>
c0011110:	83 c4 20             	add    esp,0x20
c0011113:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011115:	6a 00                	push   0x0
c0011117:	6a 00                	push   0x0
c0011119:	6a 00                	push   0x0
c001111b:	53                   	push   ebx
c001111c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001111f:	58                   	pop    eax
c0011120:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0011125:	5a                   	pop    edx
c0011126:	57                   	push   edi
c0011127:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001112d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0011133:	e8 82 d4 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0011138:	83 c4 10             	add    esp,0x10
c001113b:	eb 37                	jmp    c0011174 <setupTimer(int)+0xf4>
c001113d:	8d 76 00             	lea    esi,[esi+0x0]
c0011140:	83 ec 0c             	sub    esp,0xc
c0011143:	68 5c 01 00 00       	push   0x15c
c0011148:	e8 0e 8c ff ff       	call   c0009d5b <malloc>
c001114d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011150:	89 c3                	mov    ebx,eax
c0011152:	e8 d5 17 01 00       	call   c002292c <PIT::PIT()>
c0011157:	58                   	pop    eax
c0011158:	5a                   	pop    edx
c0011159:	53                   	push   ebx
c001115a:	ff 35 28 89 02 c0    	push   DWORD PTR ds:0xc0028928
c0011160:	e8 55 d4 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0011165:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011167:	6a 00                	push   0x0
c0011169:	6a 00                	push   0x0
c001116b:	56                   	push   esi
c001116c:	53                   	push   ebx
c001116d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011170:	83 c4 20             	add    esp,0x20
c0011173:	90                   	nop
c0011174:	89 d8                	mov    eax,ebx
c0011176:	5b                   	pop    ebx
c0011177:	5e                   	pop    esi
c0011178:	5f                   	pop    edi
c0011179:	c3                   	ret    
c001117a:	66 90                	xchg   ax,ax

c001117c <VCache::VCache(PhysicalDisk*)>:
c001117c:	53                   	push   ebx
c001117d:	83 ec 18             	sub    esp,0x18
c0011180:	ba 20 5a 02 c0       	mov    edx,0xc0025a20
c0011185:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011189:	89 10                	mov    DWORD PTR [eax],edx
c001118b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001118f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0011196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001119a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00111a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111a5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00111ac:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00111b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111b7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00111be:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00111c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111c9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00111d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111d4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00111d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111dc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00111e3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00111ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111ee:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00111f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111f6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00111fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111fe:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0011202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011206:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001120d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0011215:	83 ec 0c             	sub    esp,0xc
c0011218:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001121c:	e8 3a 8b ff ff       	call   c0009d5b <malloc>
c0011221:	83 c4 10             	add    esp,0x10
c0011224:	89 c3                	mov    ebx,eax
c0011226:	83 ec 0c             	sub    esp,0xc
c0011229:	53                   	push   ebx
c001122a:	e8 71 78 00 00       	call   c0018aa0 <Mutex::Mutex()>
c001122f:	83 c4 10             	add    esp,0x10
c0011232:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011236:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0011239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001123d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011241:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011248:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001124f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011253:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0011259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001125d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011260:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011264:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001126a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011270:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011274:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0011277:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001127a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001127e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0011282:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011286:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001128c:	05 00 01 00 00       	add    eax,0x100
c0011291:	c1 e0 04             	shl    eax,0x4
c0011294:	83 ec 0c             	sub    esp,0xc
c0011297:	50                   	push   eax
c0011298:	e8 be 8a ff ff       	call   c0009d5b <malloc>
c001129d:	83 c4 10             	add    esp,0x10
c00112a0:	89 c2                	mov    edx,eax
c00112a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112a6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00112a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112ad:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00112b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112b8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00112bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00112c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00112c6:	c1 e0 06             	shl    eax,0x6
c00112c9:	83 ec 0c             	sub    esp,0xc
c00112cc:	50                   	push   eax
c00112cd:	e8 89 8a ff ff       	call   c0009d5b <malloc>
c00112d2:	83 c4 10             	add    esp,0x10
c00112d5:	89 c2                	mov    edx,eax
c00112d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112db:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00112de:	90                   	nop
c00112df:	83 c4 18             	add    esp,0x18
c00112e2:	5b                   	pop    ebx
c00112e3:	c3                   	ret    

c00112e4 <VCache::invalidateReadBuffer()>:
c00112e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112e8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00112ee:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00112f2:	c3                   	ret    
c00112f3:	90                   	nop

c00112f4 <VCache::writeWriteBuffer()>:
c00112f4:	53                   	push   ebx
c00112f5:	83 ec 08             	sub    esp,0x8
c00112f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112fc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011300:	74 1e                	je     c0011320 <VCache::writeWriteBuffer()+0x2c>
c0011302:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011305:	83 ec 0c             	sub    esp,0xc
c0011308:	8b 10                	mov    edx,DWORD PTR [eax]
c001130a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001130d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011310:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011313:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011316:	50                   	push   eax
c0011317:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001131a:	83 c4 20             	add    esp,0x20
c001131d:	8d 76 00             	lea    esi,[esi+0x0]
c0011320:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0011327:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001132e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0011332:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0011339:	83 c4 08             	add    esp,0x8
c001133c:	5b                   	pop    ebx
c001133d:	c3                   	ret    
c001133e:	66 90                	xchg   ax,ax

c0011340 <VCache::~VCache()>:
c0011340:	83 ec 0c             	sub    esp,0xc
c0011343:	ba 20 5a 02 c0       	mov    edx,0xc0025a20
c0011348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001134c:	89 10                	mov    DWORD PTR [eax],edx
c001134e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011352:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0011355:	84 c0                	test   al,al
c0011357:	74 0f                	je     c0011368 <VCache::~VCache()+0x28>
c0011359:	83 ec 0c             	sub    esp,0xc
c001135c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011360:	e8 8f ff ff ff       	call   c00112f4 <VCache::writeWriteBuffer()>
c0011365:	83 c4 10             	add    esp,0x10
c0011368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001136c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001136f:	83 ec 0c             	sub    esp,0xc
c0011372:	50                   	push   eax
c0011373:	e8 f3 89 ff ff       	call   c0009d6b <free>
c0011378:	83 c4 10             	add    esp,0x10
c001137b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001137f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011382:	83 ec 0c             	sub    esp,0xc
c0011385:	50                   	push   eax
c0011386:	e8 e0 89 ff ff       	call   c0009d6b <free>
c001138b:	83 c4 10             	add    esp,0x10
c001138e:	90                   	nop
c001138f:	83 c4 0c             	add    esp,0xc
c0011392:	c3                   	ret    
c0011393:	90                   	nop

c0011394 <VCache::~VCache()>:
c0011394:	83 ec 0c             	sub    esp,0xc
c0011397:	83 ec 0c             	sub    esp,0xc
c001139a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001139e:	e8 9d ff ff ff       	call   c0011340 <VCache::~VCache()>
c00113a3:	83 c4 10             	add    esp,0x10
c00113a6:	83 ec 08             	sub    esp,0x8
c00113a9:	6a 44                	push   0x44
c00113ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113af:	e8 b2 bb ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	83 c4 0c             	add    esp,0xc
c00113ba:	c3                   	ret    
c00113bb:	90                   	nop

c00113bc <VCache::write(unsigned long long, int, void*)>:
c00113bc:	55                   	push   ebp
c00113bd:	31 c0                	xor    eax,eax
c00113bf:	57                   	push   edi
c00113c0:	56                   	push   esi
c00113c1:	53                   	push   ebx
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113c9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00113cd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00113d1:	8d 76 00             	lea    esi,[esi+0x0]
c00113d4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00113d8:	7d 1a                	jge    c00113f4 <VCache::write(unsigned long long, int, void*)+0x38>
c00113da:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00113dd:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00113e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00113e7:	0f af c8             	imul   ecx,eax
c00113ea:	01 ca                	add    edx,ecx
c00113ec:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00113ee:	40                   	inc    eax
c00113ef:	eb e3                	jmp    c00113d4 <VCache::write(unsigned long long, int, void*)+0x18>
c00113f1:	8d 76 00             	lea    esi,[esi+0x0]
c00113f4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00113f8:	74 0a                	je     c0011404 <VCache::write(unsigned long long, int, void*)+0x48>
c00113fa:	53                   	push   ebx
c00113fb:	e8 e4 fe ff ff       	call   c00112e4 <VCache::invalidateReadBuffer()>
c0011400:	58                   	pop    eax
c0011401:	8d 76 00             	lea    esi,[esi+0x0]
c0011404:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011408:	74 5e                	je     c0011468 <VCache::write(unsigned long long, int, void*)+0xac>
c001140a:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001140d:	89 e8                	mov    eax,ebp
c001140f:	99                   	cdq    
c0011410:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0011413:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0011416:	89 c1                	mov    ecx,eax
c0011418:	89 d0                	mov    eax,edx
c001141a:	31 f1                	xor    ecx,esi
c001141c:	31 f8                	xor    eax,edi
c001141e:	09 c1                	or     ecx,eax
c0011420:	75 3a                	jne    c001145c <VCache::write(unsigned long long, int, void*)+0xa0>
c0011422:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0011427:	75 33                	jne    c001145c <VCache::write(unsigned long long, int, void*)+0xa0>
c0011429:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001142c:	89 ef                	mov    edi,ebp
c001142e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011434:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011438:	0f af f9             	imul   edi,ecx
c001143b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001143e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011440:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011443:	40                   	inc    eax
c0011444:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0011447:	83 f8 40             	cmp    eax,0x40
c001144a:	75 60                	jne    c00114ac <VCache::write(unsigned long long, int, void*)+0xf0>
c001144c:	83 ec 0c             	sub    esp,0xc
c001144f:	53                   	push   ebx
c0011450:	e8 9f fe ff ff       	call   c00112f4 <VCache::writeWriteBuffer()>
c0011455:	83 c4 10             	add    esp,0x10
c0011458:	eb 52                	jmp    c00114ac <VCache::write(unsigned long long, int, void*)+0xf0>
c001145a:	66 90                	xchg   ax,ax
c001145c:	83 ec 0c             	sub    esp,0xc
c001145f:	53                   	push   ebx
c0011460:	e8 8f fe ff ff       	call   c00112f4 <VCache::writeWriteBuffer()>
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001146b:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0011470:	7f 22                	jg     c0011494 <VCache::write(unsigned long long, int, void*)+0xd8>
c0011472:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0011475:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0011478:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001147c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0011480:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0011483:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0011486:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001148c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011490:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011492:	eb 18                	jmp    c00114ac <VCache::write(unsigned long long, int, void*)+0xf0>
c0011494:	83 ec 0c             	sub    esp,0xc
c0011497:	8b 10                	mov    edx,DWORD PTR [eax]
c0011499:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001149d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00114a1:	57                   	push   edi
c00114a2:	56                   	push   esi
c00114a3:	50                   	push   eax
c00114a4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00114a7:	83 c4 20             	add    esp,0x20
c00114aa:	66 90                	xchg   ax,ax
c00114ac:	83 c4 0c             	add    esp,0xc
c00114af:	31 c0                	xor    eax,eax
c00114b1:	5b                   	pop    ebx
c00114b2:	5e                   	pop    esi
c00114b3:	5f                   	pop    edi
c00114b4:	5d                   	pop    ebp
c00114b5:	c3                   	ret    

c00114b6 <VCache::read(unsigned long long, int, void*)>:
c00114b6:	55                   	push   ebp
c00114b7:	31 c0                	xor    eax,eax
c00114b9:	57                   	push   edi
c00114ba:	56                   	push   esi
c00114bb:	53                   	push   ebx
c00114bc:	83 ec 1c             	sub    esp,0x1c
c00114bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00114c3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00114c7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00114cb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00114cf:	90                   	nop
c00114d0:	39 e8                	cmp    eax,ebp
c00114d2:	7d 18                	jge    c00114ec <VCache::read(unsigned long long, int, void*)+0x36>
c00114d4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00114d7:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00114dd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00114e1:	0f af c8             	imul   ecx,eax
c00114e4:	01 ca                	add    edx,ecx
c00114e6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00114e8:	40                   	inc    eax
c00114e9:	eb e5                	jmp    c00114d0 <VCache::read(unsigned long long, int, void*)+0x1a>
c00114eb:	90                   	nop
c00114ec:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00114f0:	74 0e                	je     c0011500 <VCache::read(unsigned long long, int, void*)+0x4a>
c00114f2:	83 ec 0c             	sub    esp,0xc
c00114f5:	53                   	push   ebx
c00114f6:	e8 f9 fd ff ff       	call   c00112f4 <VCache::writeWriteBuffer()>
c00114fb:	83 c4 10             	add    esp,0x10
c00114fe:	66 90                	xchg   ax,ax
c0011500:	83 fd 01             	cmp    ebp,0x1
c0011503:	0f 85 87 00 00 00    	jne    c0011590 <VCache::read(unsigned long long, int, void*)+0xda>
c0011509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001150c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011510:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0011517:	75 77                	jne    c0011590 <VCache::read(unsigned long long, int, void*)+0xda>
c0011519:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001151c:	89 e9                	mov    ecx,ebp
c001151e:	f7 d9                	neg    ecx
c0011520:	89 c8                	mov    eax,ecx
c0011522:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011526:	c1 f8 1f             	sar    eax,0x1f
c0011529:	21 f1                	and    ecx,esi
c001152b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001152f:	89 c8                	mov    eax,ecx
c0011531:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011535:	21 f9                	and    ecx,edi
c0011537:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001153b:	89 ca                	mov    edx,ecx
c001153d:	74 0d                	je     c001154c <VCache::read(unsigned long long, int, void*)+0x96>
c001153f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0011542:	75 08                	jne    c001154c <VCache::read(unsigned long long, int, void*)+0x96>
c0011544:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0011547:	74 27                	je     c0011570 <VCache::read(unsigned long long, int, void*)+0xba>
c0011549:	8d 76 00             	lea    esi,[esi+0x0]
c001154c:	83 ec 0c             	sub    esp,0xc
c001154f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0011553:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011557:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001155a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001155d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001155f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011562:	55                   	push   ebp
c0011563:	52                   	push   edx
c0011564:	50                   	push   eax
c0011565:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011569:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001156c:	83 c4 20             	add    esp,0x20
c001156f:	90                   	nop
c0011570:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011573:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011577:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001157d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0011580:	48                   	dec    eax
c0011581:	21 c6                	and    esi,eax
c0011583:	0f af f1             	imul   esi,ecx
c0011586:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0011589:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001158b:	eb 23                	jmp    c00115b0 <VCache::read(unsigned long long, int, void*)+0xfa>
c001158d:	8d 76 00             	lea    esi,[esi+0x0]
c0011590:	83 ec 0c             	sub    esp,0xc
c0011593:	53                   	push   ebx
c0011594:	e8 4b fd ff ff       	call   c00112e4 <VCache::invalidateReadBuffer()>
c0011599:	5a                   	pop    edx
c001159a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001159d:	8b 10                	mov    edx,DWORD PTR [eax]
c001159f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00115a3:	55                   	push   ebp
c00115a4:	57                   	push   edi
c00115a5:	56                   	push   esi
c00115a6:	50                   	push   eax
c00115a7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00115aa:	83 c4 20             	add    esp,0x20
c00115ad:	8d 76 00             	lea    esi,[esi+0x0]
c00115b0:	83 c4 1c             	add    esp,0x1c
c00115b3:	31 c0                	xor    eax,eax
c00115b5:	5b                   	pop    ebx
c00115b6:	5e                   	pop    esi
c00115b7:	5f                   	pop    edi
c00115b8:	5d                   	pop    ebp
c00115b9:	c3                   	ret    

c00115ba <Video::putrect(int, int, int, int, unsigned int)>:
c00115ba:	55                   	push   ebp
c00115bb:	57                   	push   edi
c00115bc:	56                   	push   esi
c00115bd:	53                   	push   ebx
c00115be:	83 ec 1c             	sub    esp,0x1c
c00115c1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00115c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115c9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00115cd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00115d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00115d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00115d9:	01 df                	add    edi,ebx
c00115db:	39 fb                	cmp    ebx,edi
c00115dd:	7d 1f                	jge    c00115fe <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00115df:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00115e3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00115e7:	7d 12                	jge    c00115fb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00115e9:	8b 16                	mov    edx,DWORD PTR [esi]
c00115eb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00115ef:	53                   	push   ebx
c00115f0:	55                   	push   ebp
c00115f1:	45                   	inc    ebp
c00115f2:	56                   	push   esi
c00115f3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00115f6:	83 c4 10             	add    esp,0x10
c00115f9:	eb e8                	jmp    c00115e3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00115fb:	43                   	inc    ebx
c00115fc:	eb dd                	jmp    c00115db <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00115fe:	83 c4 1c             	add    esp,0x1c
c0011601:	5b                   	pop    ebx
c0011602:	5e                   	pop    esi
c0011603:	5f                   	pop    edi
c0011604:	5d                   	pop    ebp
c0011605:	c3                   	ret    

c0011606 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0011606:	55                   	push   ebp
c0011607:	57                   	push   edi
c0011608:	31 ff                	xor    edi,edi
c001160a:	56                   	push   esi
c001160b:	53                   	push   ebx
c001160c:	83 ec 1c             	sub    esp,0x1c
c001160f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0011613:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011617:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001161e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0011623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011627:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001162b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001162f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011632:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011636:	01 f9                	add    ecx,edi
c0011638:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001163c:	7d 2f                	jge    c001166d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001163e:	31 f6                	xor    esi,esi
c0011640:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011644:	01 f2                	add    edx,esi
c0011646:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001164a:	7d 1a                	jge    c0011666 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001164c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001164f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0011652:	46                   	inc    esi
c0011653:	51                   	push   ecx
c0011654:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011658:	52                   	push   edx
c0011659:	55                   	push   ebp
c001165a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001165d:	83 c4 10             	add    esp,0x10
c0011660:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011664:	eb da                	jmp    c0011640 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0011666:	47                   	inc    edi
c0011667:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001166b:	eb c5                	jmp    c0011632 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001166d:	83 c4 1c             	add    esp,0x1c
c0011670:	5b                   	pop    ebx
c0011671:	5e                   	pop    esi
c0011672:	5f                   	pop    edi
c0011673:	5d                   	pop    ebp
c0011674:	c3                   	ret    
c0011675:	90                   	nop

c0011676 <Video::blit(unsigned int*, int, int, int, int)>:
c0011676:	55                   	push   ebp
c0011677:	57                   	push   edi
c0011678:	56                   	push   esi
c0011679:	53                   	push   ebx
c001167a:	83 ec 1c             	sub    esp,0x1c
c001167d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011681:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011685:	85 c0                	test   eax,eax
c0011687:	79 02                	jns    c001168b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0011689:	31 c0                	xor    eax,eax
c001168b:	c1 e0 02             	shl    eax,0x2
c001168e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0011692:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011696:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001169a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001169e:	39 d8                	cmp    eax,ebx
c00116a0:	7e 49                	jle    c00116eb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00116a2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00116a8:	7c 41                	jl     c00116eb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00116aa:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00116ae:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00116b2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00116b6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00116ba:	39 f9                	cmp    ecx,edi
c00116bc:	7e 22                	jle    c00116e0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00116be:	83 c5 04             	add    ebp,0x4
c00116c1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00116c7:	7c 14                	jl     c00116dd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00116c9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00116cb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00116ce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00116d2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00116d6:	56                   	push   esi
c00116d7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00116da:	83 c4 10             	add    esp,0x10
c00116dd:	47                   	inc    edi
c00116de:	eb d2                	jmp    c00116b2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00116e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116e4:	43                   	inc    ebx
c00116e5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00116e9:	eb ab                	jmp    c0011696 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00116eb:	83 c4 1c             	add    esp,0x1c
c00116ee:	5b                   	pop    ebx
c00116ef:	5e                   	pop    esi
c00116f0:	5f                   	pop    edi
c00116f1:	5d                   	pop    ebp
c00116f2:	c3                   	ret    
c00116f3:	90                   	nop

c00116f4 <Video::clearScreen(unsigned int)>:
c00116f4:	57                   	push   edi
c00116f5:	56                   	push   esi
c00116f6:	53                   	push   ebx
c00116f7:	31 db                	xor    ebx,ebx
c00116f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00116fd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011703:	7e 1f                	jle    c0011724 <Video::clearScreen(unsigned int)+0x30>
c0011705:	31 ff                	xor    edi,edi
c0011707:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001170d:	7e 12                	jle    c0011721 <Video::clearScreen(unsigned int)+0x2d>
c001170f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011715:	53                   	push   ebx
c0011716:	57                   	push   edi
c0011717:	47                   	inc    edi
c0011718:	56                   	push   esi
c0011719:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001171c:	83 c4 10             	add    esp,0x10
c001171f:	eb e6                	jmp    c0011707 <Video::clearScreen(unsigned int)+0x13>
c0011721:	43                   	inc    ebx
c0011722:	eb d9                	jmp    c00116fd <Video::clearScreen(unsigned int)+0x9>
c0011724:	5b                   	pop    ebx
c0011725:	5e                   	pop    esi
c0011726:	5f                   	pop    edi
c0011727:	c3                   	ret    

c0011728 <Video::putpixel(int, int, unsigned int)>:
c0011728:	c7 44 24 04 28 5a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025a28
c0011730:	e9 90 39 00 00       	jmp    c00150c5 <Krnl::panic(char const*)>
c0011735:	90                   	nop

c0011736 <Video::Video(char const*)>:
c0011736:	83 ec 0c             	sub    esp,0xc
c0011739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001173d:	83 ec 08             	sub    esp,0x8
c0011740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011744:	50                   	push   eax
c0011745:	e8 74 d0 ff ff       	call   c000e7be <Device::Device(char const*)>
c001174a:	83 c4 10             	add    esp,0x10
c001174d:	ba 98 5a 02 c0       	mov    edx,0xc0025a98
c0011752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011756:	89 10                	mov    DWORD PTR [eax],edx
c0011758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001175c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011766:	90                   	nop
c0011767:	83 c4 0c             	add    esp,0xc
c001176a:	c3                   	ret    
c001176b:	90                   	nop

c001176c <Video::~Video()>:
c001176c:	83 ec 0c             	sub    esp,0xc
c001176f:	ba 98 5a 02 c0       	mov    edx,0xc0025a98
c0011774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011778:	89 10                	mov    DWORD PTR [eax],edx
c001177a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001177e:	83 ec 0c             	sub    esp,0xc
c0011781:	50                   	push   eax
c0011782:	e8 01 cd ff ff       	call   c000e488 <Device::~Device()>
c0011787:	83 c4 10             	add    esp,0x10
c001178a:	90                   	nop
c001178b:	83 c4 0c             	add    esp,0xc
c001178e:	c3                   	ret    
c001178f:	90                   	nop

c0011790 <Video::~Video()>:
c0011790:	83 ec 0c             	sub    esp,0xc
c0011793:	83 ec 0c             	sub    esp,0xc
c0011796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001179a:	e8 cd ff ff ff       	call   c001176c <Video::~Video()>
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	83 ec 08             	sub    esp,0x8
c00117a5:	68 64 01 00 00       	push   0x164
c00117aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117ae:	e8 b3 b7 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00117b3:	83 c4 10             	add    esp,0x10
c00117b6:	83 c4 0c             	add    esp,0xc
c00117b9:	c3                   	ret    

c00117ba <Video::isMonochrome()>:
c00117ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117be:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00117c4:	c3                   	ret    
c00117c5:	90                   	nop

c00117c6 <Video::getWidth()>:
c00117c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00117d0:	c3                   	ret    
c00117d1:	90                   	nop

c00117d2 <Video::getHeight()>:
c00117d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117d6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00117dc:	c3                   	ret    
c00117dd:	90                   	nop

c00117de <Video::drawCursor(int, int, unsigned char*, int)>:
c00117de:	55                   	push   ebp
c00117df:	57                   	push   edi
c00117e0:	56                   	push   esi
c00117e1:	53                   	push   ebx
c00117e2:	83 ec 2c             	sub    esp,0x2c
c00117e5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00117e9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00117ed:	83 f8 01             	cmp    eax,0x1
c00117f0:	19 c9                	sbb    ecx,ecx
c00117f2:	31 db                	xor    ebx,ebx
c00117f4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00117f8:	89 cd                	mov    ebp,ecx
c00117fa:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011802:	f7 d5                	not    ebp
c0011804:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001180a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001180e:	01 d8                	add    eax,ebx
c0011810:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011814:	56                   	push   esi
c0011815:	e8 b8 ff ff ff       	call   c00117d2 <Video::getHeight()>
c001181a:	59                   	pop    ecx
c001181b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001181f:	7e 70                	jle    c0011891 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011821:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011825:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011829:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001182c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011830:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011834:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001183b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001183f:	89 f8                	mov    eax,edi
c0011841:	83 c0 20             	add    eax,0x20
c0011844:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011848:	56                   	push   esi
c0011849:	e8 78 ff ff ff       	call   c00117c6 <Video::getWidth()>
c001184e:	5a                   	pop    edx
c001184f:	39 c7                	cmp    edi,eax
c0011851:	7d 34                	jge    c0011887 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011853:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011858:	74 05                	je     c001185f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001185a:	8b 06                	mov    eax,DWORD PTR [esi]
c001185c:	55                   	push   ebp
c001185d:	eb 0d                	jmp    c001186c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001185f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011864:	74 12                	je     c0011878 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011866:	8b 06                	mov    eax,DWORD PTR [esi]
c0011868:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001186c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011870:	57                   	push   edi
c0011871:	56                   	push   esi
c0011872:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011875:	83 c4 10             	add    esp,0x10
c0011878:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001187c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011880:	47                   	inc    edi
c0011881:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011885:	75 c1                	jne    c0011848 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011887:	43                   	inc    ebx
c0011888:	83 fb 20             	cmp    ebx,0x20
c001188b:	0f 85 79 ff ff ff    	jne    c001180a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011891:	83 c4 2c             	add    esp,0x2c
c0011894:	5b                   	pop    ebx
c0011895:	5e                   	pop    esi
c0011896:	5f                   	pop    edi
c0011897:	5d                   	pop    ebp
c0011898:	c3                   	ret    
c0011899:	90                   	nop

c001189a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001189a:	55                   	push   ebp
c001189b:	57                   	push   edi
c001189c:	56                   	push   esi
c001189d:	53                   	push   ebx
c001189e:	83 ec 28             	sub    esp,0x28
c00118a1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00118a5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00118a9:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00118ad:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00118b1:	c1 e6 08             	shl    esi,0x8
c00118b4:	01 c6                	add    esi,eax
c00118b6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00118ba:	c1 e0 08             	shl    eax,0x8
c00118bd:	01 d0                	add    eax,edx
c00118bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118c7:	0f af c6             	imul   eax,esi
c00118ca:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00118d1:	50                   	push   eax
c00118d2:	e8 84 84 ff ff       	call   c0009d5b <malloc>
c00118d7:	83 c4 10             	add    esp,0x10
c00118da:	89 c7                	mov    edi,eax
c00118dc:	85 c0                	test   eax,eax
c00118de:	75 10                	jne    c00118f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00118e0:	83 ec 0c             	sub    esp,0xc
c00118e3:	68 49 5a 02 c0       	push   0xc0025a49
c00118e8:	e8 d8 37 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c00118ed:	83 c4 10             	add    esp,0x10
c00118f0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00118f3:	ba 12 00 00 00       	mov    edx,0x12
c00118f8:	84 c0                	test   al,al
c00118fa:	74 11                	je     c001190d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00118fc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011900:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011904:	c1 fa 03             	sar    edx,0x3
c0011907:	0f af d1             	imul   edx,ecx
c001190a:	83 c2 12             	add    edx,0x12
c001190d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011911:	74 04                	je     c0011917 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011913:	85 f6                	test   esi,esi
c0011915:	75 12                	jne    c0011929 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011917:	83 ec 0c             	sub    esp,0xc
c001191a:	68 59 5a 02 c0       	push   0xc0025a59
c001191f:	e8 23 b7 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0011924:	e9 b8 00 00 00       	jmp    c00119e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011929:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001192d:	80 f9 02             	cmp    cl,0x2
c0011930:	0f 85 96 00 00 00    	jne    c00119cc <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011936:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001193b:	75 0e                	jne    c001194b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001193d:	84 c0                	test   al,al
c001193f:	75 0a                	jne    c001194b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011941:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011944:	83 e8 18             	sub    eax,0x18
c0011947:	a8 f7                	test   al,0xf7
c0011949:	74 0a                	je     c0011955 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001194b:	83 ec 0c             	sub    esp,0xc
c001194e:	68 6e 5a 02 c0       	push   0xc0025a6e
c0011953:	eb 7f                	jmp    c00119d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011955:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001195d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011965:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011969:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011971:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011975:	75 0c                	jne    c0011983 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011977:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001197c:	c1 e0 18             	shl    eax,0x18
c001197f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011983:	45                   	inc    ebp
c0011984:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011989:	c1 e1 10             	shl    ecx,0x10
c001198c:	89 c8                	mov    eax,ecx
c001198e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011993:	c1 e1 08             	shl    ecx,0x8
c0011996:	09 c1                	or     ecx,eax
c0011998:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c001199c:	09 c1                	or     ecx,eax
c001199e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00119a2:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00119a6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00119aa:	c1 f8 03             	sar    eax,0x3
c00119ad:	01 c2                	add    edx,eax
c00119af:	89 e8                	mov    eax,ebp
c00119b1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00119b5:	39 c6                	cmp    esi,eax
c00119b7:	7f b0                	jg     c0011969 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00119b9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00119bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00119c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00119c4:	7e 22                	jle    c00119e8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00119c6:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00119ca:	eb 99                	jmp    c0011965 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00119cc:	50                   	push   eax
c00119cd:	50                   	push   eax
c00119ce:	51                   	push   ecx
c00119cf:	68 7c 5a 02 c0       	push   0xc0025a7c
c00119d4:	e8 6e b6 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00119d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119dc:	e8 8a 83 ff ff       	call   c0009d6b <free>
c00119e1:	83 c4 10             	add    esp,0x10
c00119e4:	31 ff                	xor    edi,edi
c00119e6:	eb 0f                	jmp    c00119f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00119e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119ec:	89 30                	mov    DWORD PTR [eax],esi
c00119ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00119f2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00119f5:	89 30                	mov    DWORD PTR [eax],esi
c00119f7:	83 c4 1c             	add    esp,0x1c
c00119fa:	89 f8                	mov    eax,edi
c00119fc:	5b                   	pop    ebx
c00119fd:	5e                   	pop    esi
c00119fe:	5f                   	pop    edi
c00119ff:	5d                   	pop    ebp
c0011a00:	c3                   	ret    
c0011a01:	90                   	nop

c0011a02 <Video::putTGA(int, int, unsigned char*, int)>:
c0011a02:	55                   	push   ebp
c0011a03:	57                   	push   edi
c0011a04:	56                   	push   esi
c0011a05:	53                   	push   ebx
c0011a06:	83 ec 28             	sub    esp,0x28
c0011a09:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011a0d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011a11:	50                   	push   eax
c0011a12:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011a16:	50                   	push   eax
c0011a17:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011a1b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011a1f:	56                   	push   esi
c0011a20:	e8 75 fe ff ff       	call   c001189a <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011a25:	83 c4 20             	add    esp,0x20
c0011a28:	85 c0                	test   eax,eax
c0011a2a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011a2e:	74 35                	je     c0011a65 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011a30:	89 c7                	mov    edi,eax
c0011a32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011a36:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011a3a:	39 d8                	cmp    eax,ebx
c0011a3c:	7e 27                	jle    c0011a65 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011a3e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011a42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a46:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011a4a:	39 e8                	cmp    eax,ebp
c0011a4c:	7e 14                	jle    c0011a62 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011a4e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a50:	83 c7 04             	add    edi,0x4
c0011a53:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011a56:	53                   	push   ebx
c0011a57:	55                   	push   ebp
c0011a58:	45                   	inc    ebp
c0011a59:	56                   	push   esi
c0011a5a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011a5d:	83 c4 10             	add    esp,0x10
c0011a60:	eb e0                	jmp    c0011a42 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011a62:	43                   	inc    ebx
c0011a63:	eb cd                	jmp    c0011a32 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011a65:	83 c4 1c             	add    esp,0x1c
c0011a68:	5b                   	pop    ebx
c0011a69:	5e                   	pop    esi
c0011a6a:	5f                   	pop    edi
c0011a6b:	5d                   	pop    ebp
c0011a6c:	c3                   	ret    
c0011a6d:	66 90                	xchg   ax,ax
c0011a6f:	90                   	nop

c0011a70 <ACPI::close(int, int, void*)>:
c0011a70:	83 ec 1c             	sub    esp,0x1c
c0011a73:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011a7b:	74 0b                	je     c0011a88 <ACPI::close(int, int, void*)+0x18>
c0011a7d:	b8 00 00 00 00       	mov    eax,0x0
c0011a82:	e9 99 00 00 00       	jmp    c0011b20 <ACPI::close(int, int, void*)+0xb0>
c0011a87:	90                   	nop
c0011a88:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011a8d:	75 29                	jne    c0011ab8 <ACPI::close(int, int, void*)+0x48>
c0011a8f:	a1 68 8f 02 c0       	mov    eax,ds:0xc0028f68
c0011a94:	85 c0                	test   eax,eax
c0011a96:	74 08                	je     c0011aa0 <ACPI::close(int, int, void*)+0x30>
c0011a98:	a1 68 8f 02 c0       	mov    eax,ds:0xc0028f68
c0011a9d:	ff d0                	call   eax
c0011a9f:	90                   	nop
c0011aa0:	83 ec 0c             	sub    esp,0xc
c0011aa3:	68 d8 5a 02 c0       	push   0xc0025ad8
c0011aa8:	e8 18 36 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c0011aad:	83 c4 10             	add    esp,0x10
c0011ab0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ab5:	eb 69                	jmp    c0011b20 <ACPI::close(int, int, void*)+0xb0>
c0011ab7:	90                   	nop
c0011ab8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011abd:	75 59                	jne    c0011b18 <ACPI::close(int, int, void*)+0xa8>
c0011abf:	a1 64 8f 02 c0       	mov    eax,ds:0xc0028f64
c0011ac4:	85 c0                	test   eax,eax
c0011ac6:	74 08                	je     c0011ad0 <ACPI::close(int, int, void*)+0x60>
c0011ac8:	a1 64 8f 02 c0       	mov    eax,ds:0xc0028f64
c0011acd:	ff d0                	call   eax
c0011acf:	90                   	nop
c0011ad0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0011ad8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011add:	83 e0 02             	and    eax,0x2
c0011ae0:	74 1e                	je     c0011b00 <ACPI::close(int, int, void*)+0x90>
c0011ae2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011ae9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011aed:	89 c2                	mov    edx,eax
c0011aef:	ec                   	in     al,dx
c0011af0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011af4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011af8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011afc:	eb da                	jmp    c0011ad8 <ACPI::close(int, int, void*)+0x68>
c0011afe:	66 90                	xchg   ax,ax
c0011b00:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011b07:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011b0c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011b10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b14:	ee                   	out    dx,al
c0011b15:	8d 76 00             	lea    esi,[esi+0x0]
c0011b18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0011b20:	83 c4 1c             	add    esp,0x1c
c0011b23:	c3                   	ret    

c0011b24 <findRSDP()>:
c0011b24:	83 ec 1c             	sub    esp,0x1c
c0011b27:	83 ec 0c             	sub    esp,0xc
c0011b2a:	68 fb 5b 02 c0       	push   0xc0025bfb
c0011b2f:	e8 81 82 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011b34:	83 c4 10             	add    esp,0x10
c0011b37:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0011b3c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b42:	83 e0 04             	and    eax,0x4
c0011b45:	84 c0                	test   al,al
c0011b47:	75 0b                	jne    c0011b54 <findRSDP()+0x30>
c0011b49:	b8 00 00 00 00       	mov    eax,0x0
c0011b4e:	e9 a1 00 00 00       	jmp    c0011bf4 <findRSDP()+0xd0>
c0011b53:	90                   	nop
c0011b54:	a1 58 89 02 c0       	mov    eax,ds:0xc0028958
c0011b59:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011b5e:	7f 1c                	jg     c0011b7c <findRSDP()+0x58>
c0011b60:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0011b65:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011b6b:	83 e2 fb             	and    edx,0xfffffffb
c0011b6e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011b74:	b8 00 00 00 00       	mov    eax,0x0
c0011b79:	eb 79                	jmp    c0011bf4 <findRSDP()+0xd0>
c0011b7b:	90                   	nop
c0011b7c:	83 ec 0c             	sub    esp,0xc
c0011b7f:	68 0b 5c 02 c0       	push   0xc0025c0b
c0011b84:	e8 2c 82 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011b89:	83 c4 10             	add    esp,0x10
c0011b8c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011b94:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011b9c:	77 3e                	ja     c0011bdc <findRSDP()+0xb8>
c0011b9e:	83 ec 04             	sub    esp,0x4
c0011ba1:	6a 08                	push   0x8
c0011ba3:	68 24 5c 02 c0       	push   0xc0025c24
c0011ba8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011bac:	e8 cf e9 fe ff       	call   c0000580 <memcmp>
c0011bb1:	83 c4 10             	add    esp,0x10
c0011bb4:	85 c0                	test   eax,eax
c0011bb6:	0f 94 c0             	sete   al
c0011bb9:	84 c0                	test   al,al
c0011bbb:	74 17                	je     c0011bd4 <findRSDP()+0xb0>
c0011bbd:	83 ec 0c             	sub    esp,0xc
c0011bc0:	68 2d 5c 02 c0       	push   0xc0025c2d
c0011bc5:	e8 eb 81 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011bca:	83 c4 10             	add    esp,0x10
c0011bcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bd1:	eb 21                	jmp    c0011bf4 <findRSDP()+0xd0>
c0011bd3:	90                   	nop
c0011bd4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011bd9:	eb b9                	jmp    c0011b94 <findRSDP()+0x70>
c0011bdb:	90                   	nop
c0011bdc:	83 ec 0c             	sub    esp,0xc
c0011bdf:	68 3b 5c 02 c0       	push   0xc0025c3b
c0011be4:	e8 cc 81 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011be9:	83 c4 10             	add    esp,0x10
c0011bec:	b8 00 00 00 00       	mov    eax,0x0
c0011bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0011bf4:	83 c4 1c             	add    esp,0x1c
c0011bf7:	c3                   	ret    

c0011bf8 <loadACPITables(unsigned char*)>:
c0011bf8:	57                   	push   edi
c0011bf9:	56                   	push   esi
c0011bfa:	53                   	push   ebx
c0011bfb:	83 ec 60             	sub    esp,0x60
c0011bfe:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0011c03:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c09:	83 e0 04             	and    eax,0x4
c0011c0c:	84 c0                	test   al,al
c0011c0e:	0f 84 3c 02 00 00    	je     c0011e50 <loadACPITables(unsigned char*)+0x258>
c0011c14:	a0 80 91 02 c0       	mov    al,ds:0xc0029180
c0011c19:	84 c0                	test   al,al
c0011c1b:	74 77                	je     c0011c94 <loadACPITables(unsigned char*)+0x9c>
c0011c1d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011c21:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011c25:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011c29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c2c:	83 e8 24             	sub    eax,0x24
c0011c2f:	c1 e8 03             	shr    eax,0x3
c0011c32:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011c36:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011c3e:	66 90                	xchg   ax,ax
c0011c40:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011c44:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011c48:	0f 8d b6 00 00 00    	jge    c0011d04 <loadACPITables(unsigned char*)+0x10c>
c0011c4e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011c52:	83 c0 24             	add    eax,0x24
c0011c55:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011c59:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011c5d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011c61:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011c65:	c1 e0 03             	shl    eax,0x3
c0011c68:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011c6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011c70:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c75:	89 c1                	mov    ecx,eax
c0011c77:	a1 6c 8f 02 c0       	mov    eax,ds:0xc0028f6c
c0011c7c:	8d 50 01             	lea    edx,[eax+0x1]
c0011c7f:	89 15 6c 8f 02 c0    	mov    DWORD PTR ds:0xc0028f6c,edx
c0011c85:	89 ca                	mov    edx,ecx
c0011c87:	89 14 c5 84 8f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd707c],edx
c0011c8e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011c92:	eb ac                	jmp    c0011c40 <loadACPITables(unsigned char*)+0x48>
c0011c94:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011c98:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011c9c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ca3:	83 e8 24             	sub    eax,0x24
c0011ca6:	c1 e8 02             	shr    eax,0x2
c0011ca9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011cad:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0011cb8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011cbc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011cc0:	7d 42                	jge    c0011d04 <loadACPITables(unsigned char*)+0x10c>
c0011cc2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011cc6:	83 c0 24             	add    eax,0x24
c0011cc9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011ccd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011cd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011cd5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011cd9:	c1 e0 02             	shl    eax,0x2
c0011cdc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011ce0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ce4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ce6:	a1 6c 8f 02 c0       	mov    eax,ds:0xc0028f6c
c0011ceb:	8d 50 01             	lea    edx,[eax+0x1]
c0011cee:	89 15 6c 8f 02 c0    	mov    DWORD PTR ds:0xc0028f6c,edx
c0011cf4:	89 ca                	mov    edx,ecx
c0011cf6:	89 14 c5 84 8f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd707c],edx
c0011cfd:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011d01:	eb b5                	jmp    c0011cb8 <loadACPITables(unsigned char*)+0xc0>
c0011d03:	90                   	nop
c0011d04:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011d0c:	a1 6c 8f 02 c0       	mov    eax,ds:0xc0028f6c
c0011d11:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011d15:	0f 8d 39 01 00 00    	jge    c0011e54 <loadACPITables(unsigned char*)+0x25c>
c0011d1b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011d1f:	8b 04 c5 84 8f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd707c]
c0011d26:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011d2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d2e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011d32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d36:	25 ff 0f 00 00       	and    eax,0xfff
c0011d3b:	89 c6                	mov    esi,eax
c0011d3d:	8b 1d 50 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a50
c0011d43:	83 ec 0c             	sub    esp,0xc
c0011d46:	6a 01                	push   0x1
c0011d48:	e8 d4 9f ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0011d4d:	83 c4 10             	add    esp,0x10
c0011d50:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d54:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011d5a:	83 ec 0c             	sub    esp,0xc
c0011d5d:	6a 01                	push   0x1
c0011d5f:	6a 01                	push   0x1
c0011d61:	50                   	push   eax
c0011d62:	52                   	push   edx
c0011d63:	53                   	push   ebx
c0011d64:	e8 55 a9 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d69:	83 c4 20             	add    esp,0x20
c0011d6c:	09 f0                	or     eax,esi
c0011d6e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011d72:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011d76:	c1 e0 03             	shl    eax,0x3
c0011d79:	05 80 8f 02 c0       	add    eax,0xc0028f80
c0011d7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d8a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011d92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011da2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011da6:	89 c6                	mov    esi,eax
c0011da8:	89 d7                	mov    edi,edx
c0011daa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011dac:	89 c8                	mov    eax,ecx
c0011dae:	89 fa                	mov    edx,edi
c0011db0:	89 f3                	mov    ebx,esi
c0011db2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011db6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011dba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011dbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011dc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011dc5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dcd:	05 00 10 00 00       	add    eax,0x1000
c0011dd2:	c1 e8 0c             	shr    eax,0xc
c0011dd5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011dd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ddd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011de1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011de5:	25 ff 0f 00 00       	and    eax,0xfff
c0011dea:	89 c6                	mov    esi,eax
c0011dec:	8b 1d 50 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a50
c0011df2:	83 ec 0c             	sub    esp,0xc
c0011df5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011df9:	e8 23 9f ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0011dfe:	83 c4 10             	add    esp,0x10
c0011e01:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011e05:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011e0b:	83 ec 0c             	sub    esp,0xc
c0011e0e:	6a 01                	push   0x1
c0011e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e14:	50                   	push   eax
c0011e15:	52                   	push   edx
c0011e16:	53                   	push   ebx
c0011e17:	e8 a2 a8 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e1c:	83 c4 20             	add    esp,0x20
c0011e1f:	09 f0                	or     eax,esi
c0011e21:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011e25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e29:	83 ec 0c             	sub    esp,0xc
c0011e2c:	50                   	push   eax
c0011e2d:	e8 1f a2 ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e32:	83 c4 10             	add    esp,0x10
c0011e35:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011e39:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011e3d:	89 14 c5 84 8f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd707c],edx
c0011e44:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011e48:	e9 bf fe ff ff       	jmp    c0011d0c <loadACPITables(unsigned char*)+0x114>
c0011e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0011e50:	90                   	nop
c0011e51:	8d 76 00             	lea    esi,[esi+0x0]
c0011e54:	83 c4 60             	add    esp,0x60
c0011e57:	5b                   	pop    ebx
c0011e58:	5e                   	pop    esi
c0011e59:	5f                   	pop    edi
c0011e5a:	c3                   	ret    
c0011e5b:	90                   	nop

c0011e5c <findRSDT(unsigned char*)>:
c0011e5c:	57                   	push   edi
c0011e5d:	56                   	push   esi
c0011e5e:	53                   	push   ebx
c0011e5f:	83 ec 50             	sub    esp,0x50
c0011e62:	83 ec 0c             	sub    esp,0xc
c0011e65:	68 4f 5c 02 c0       	push   0xc0025c4f
c0011e6a:	e8 46 7f ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011e6f:	83 c4 10             	add    esp,0x10
c0011e72:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0011e77:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011e7d:	83 e0 04             	and    eax,0x4
c0011e80:	84 c0                	test   al,al
c0011e82:	75 0c                	jne    c0011e90 <findRSDT(unsigned char*)+0x34>
c0011e84:	b8 00 00 00 00       	mov    eax,0x0
c0011e89:	e9 86 01 00 00       	jmp    c0012014 <findRSDT(unsigned char*)+0x1b8>
c0011e8e:	66 90                	xchg   ax,ax
c0011e90:	83 ec 0c             	sub    esp,0xc
c0011e93:	68 61 5c 02 c0       	push   0xc0025c61
c0011e98:	e8 18 7f ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	89 e0                	mov    eax,esp
c0011ea2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011ea6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011eaa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011eae:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011eb6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011eba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011ebe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011ec2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011ec6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011eca:	89 c6                	mov    esi,eax
c0011ecc:	89 d7                	mov    edi,edx
c0011ece:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ed0:	89 c8                	mov    eax,ecx
c0011ed2:	89 fa                	mov    edx,edi
c0011ed4:	89 f3                	mov    ebx,esi
c0011ed6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011eda:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011ede:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011ee2:	83 ec 0c             	sub    esp,0xc
c0011ee5:	68 73 5c 02 c0       	push   0xc0025c73
c0011eea:	e8 c6 7e ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011eef:	83 c4 10             	add    esp,0x10
c0011ef2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011ef6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011efa:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011f02:	83 ec 0c             	sub    esp,0xc
c0011f05:	68 85 5c 02 c0       	push   0xc0025c85
c0011f0a:	e8 a6 7e ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0011f0f:	83 c4 10             	add    esp,0x10
c0011f12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f1a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f22:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011f26:	83 ec 04             	sub    esp,0x4
c0011f29:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011f2d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011f31:	68 fc 5a 02 c0       	push   0xc0025afc
c0011f36:	e8 0c b1 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0011f3b:	83 c4 10             	add    esp,0x10
c0011f3e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011f42:	25 ff 0f 00 00       	and    eax,0xfff
c0011f47:	89 c6                	mov    esi,eax
c0011f49:	8b 1d 50 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a50
c0011f4f:	83 ec 0c             	sub    esp,0xc
c0011f52:	6a 02                	push   0x2
c0011f54:	e8 c8 9d ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011f60:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011f66:	83 ec 0c             	sub    esp,0xc
c0011f69:	6a 01                	push   0x1
c0011f6b:	6a 02                	push   0x2
c0011f6d:	50                   	push   eax
c0011f6e:	52                   	push   edx
c0011f6f:	53                   	push   ebx
c0011f70:	e8 49 a7 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f75:	83 c4 20             	add    esp,0x20
c0011f78:	09 f0                	or     eax,esi
c0011f7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011f7e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f82:	25 ff 0f 00 00       	and    eax,0xfff
c0011f87:	89 c6                	mov    esi,eax
c0011f89:	8b 1d 50 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a50
c0011f8f:	83 ec 0c             	sub    esp,0xc
c0011f92:	6a 02                	push   0x2
c0011f94:	e8 88 9d ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0011f99:	83 c4 10             	add    esp,0x10
c0011f9c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011fa0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011fa6:	83 ec 0c             	sub    esp,0xc
c0011fa9:	6a 01                	push   0x1
c0011fab:	6a 02                	push   0x2
c0011fad:	50                   	push   eax
c0011fae:	52                   	push   edx
c0011faf:	53                   	push   ebx
c0011fb0:	e8 09 a7 ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011fb5:	83 c4 20             	add    esp,0x20
c0011fb8:	09 f0                	or     eax,esi
c0011fba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011fbe:	83 ec 04             	sub    esp,0x4
c0011fc1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011fc5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011fc9:	68 1c 5b 02 c0       	push   0xc0025b1c
c0011fce:	e8 74 b0 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0011fd3:	83 c4 10             	add    esp,0x10
c0011fd6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011fdb:	75 13                	jne    c0011ff0 <findRSDT(unsigned char*)+0x194>
c0011fdd:	c6 05 80 91 02 c0 00 	mov    BYTE PTR ds:0xc0029180,0x0
c0011fe4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011fe8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011fec:	eb 22                	jmp    c0012010 <findRSDT(unsigned char*)+0x1b4>
c0011fee:	66 90                	xchg   ax,ax
c0011ff0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011ff5:	75 11                	jne    c0012008 <findRSDT(unsigned char*)+0x1ac>
c0011ff7:	c6 05 80 91 02 c0 01 	mov    BYTE PTR ds:0xc0029180,0x1
c0011ffe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0012002:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0012006:	eb 08                	jmp    c0012010 <findRSDT(unsigned char*)+0x1b4>
c0012008:	b8 00 00 00 00       	mov    eax,0x0
c001200d:	eb 05                	jmp    c0012014 <findRSDT(unsigned char*)+0x1b8>
c001200f:	90                   	nop
c0012010:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012014:	83 c4 50             	add    esp,0x50
c0012017:	5b                   	pop    ebx
c0012018:	5e                   	pop    esi
c0012019:	5f                   	pop    edi
c001201a:	c3                   	ret    
c001201b:	90                   	nop

c001201c <findDataTable(unsigned char*, char*)>:
c001201c:	83 ec 1c             	sub    esp,0x1c
c001201f:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0012024:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001202a:	83 e0 04             	and    eax,0x4
c001202d:	84 c0                	test   al,al
c001202f:	75 07                	jne    c0012038 <findDataTable(unsigned char*, char*)+0x1c>
c0012031:	b8 00 00 00 00       	mov    eax,0x0
c0012036:	eb 58                	jmp    c0012090 <findDataTable(unsigned char*, char*)+0x74>
c0012038:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012040:	a1 6c 8f 02 c0       	mov    eax,ds:0xc0028f6c
c0012045:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0012049:	7d 3d                	jge    c0012088 <findDataTable(unsigned char*, char*)+0x6c>
c001204b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001204f:	c1 e0 03             	shl    eax,0x3
c0012052:	05 80 8f 02 c0       	add    eax,0xc0028f80
c0012057:	83 ec 04             	sub    esp,0x4
c001205a:	6a 04                	push   0x4
c001205c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012060:	50                   	push   eax
c0012061:	e8 1a e5 fe ff       	call   c0000580 <memcmp>
c0012066:	83 c4 10             	add    esp,0x10
c0012069:	85 c0                	test   eax,eax
c001206b:	0f 94 c0             	sete   al
c001206e:	84 c0                	test   al,al
c0012070:	74 0e                	je     c0012080 <findDataTable(unsigned char*, char*)+0x64>
c0012072:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012076:	8b 04 c5 84 8f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd707c]
c001207d:	eb 11                	jmp    c0012090 <findDataTable(unsigned char*, char*)+0x74>
c001207f:	90                   	nop
c0012080:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0012084:	eb ba                	jmp    c0012040 <findDataTable(unsigned char*, char*)+0x24>
c0012086:	66 90                	xchg   ax,ax
c0012088:	b8 00 00 00 00       	mov    eax,0x0
c001208d:	8d 76 00             	lea    esi,[esi+0x0]
c0012090:	83 c4 1c             	add    esp,0x1c
c0012093:	c3                   	ret    

c0012094 <scanMADT()>:
c0012094:	53                   	push   ebx
c0012095:	83 ec 38             	sub    esp,0x38
c0012098:	83 ec 0c             	sub    esp,0xc
c001209b:	68 97 5c 02 c0       	push   0xc0025c97
c00120a0:	e8 10 7d ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00120a5:	83 c4 10             	add    esp,0x10
c00120a8:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c00120ad:	25 00 04 00 00       	and    eax,0x400
c00120b2:	74 14                	je     c00120c8 <scanMADT()+0x34>
c00120b4:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c00120b9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00120bf:	83 e2 fb             	and    edx,0xfffffffb
c00120c2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00120c8:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c00120cd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00120d3:	83 e0 04             	and    eax,0x4
c00120d6:	84 c0                	test   al,al
c00120d8:	0f 84 82 04 00 00    	je     c0012560 <scanMADT()+0x4cc>
c00120de:	83 ec 0c             	sub    esp,0xc
c00120e1:	68 a4 5c 02 c0       	push   0xc0025ca4
c00120e6:	e8 ca 7c ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00120eb:	83 c4 10             	add    esp,0x10
c00120ee:	e8 31 fa ff ff       	call   c0011b24 <findRSDP()>
c00120f3:	a3 8c 91 02 c0       	mov    ds:0xc002918c,eax
c00120f8:	a1 8c 91 02 c0       	mov    eax,ds:0xc002918c
c00120fd:	85 c0                	test   eax,eax
c00120ff:	75 1b                	jne    c001211c <scanMADT()+0x88>
c0012101:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0012106:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001210c:	83 e2 fb             	and    edx,0xfffffffb
c001210f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012115:	e9 4e 04 00 00       	jmp    c0012568 <scanMADT()+0x4d4>
c001211a:	66 90                	xchg   ax,ax
c001211c:	83 ec 0c             	sub    esp,0xc
c001211f:	68 b6 5c 02 c0       	push   0xc0025cb6
c0012124:	e8 8c 7c ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012129:	83 c4 10             	add    esp,0x10
c001212c:	a1 8c 91 02 c0       	mov    eax,ds:0xc002918c
c0012131:	83 ec 0c             	sub    esp,0xc
c0012134:	50                   	push   eax
c0012135:	e8 22 fd ff ff       	call   c0011e5c <findRSDT(unsigned char*)>
c001213a:	83 c4 10             	add    esp,0x10
c001213d:	a3 88 91 02 c0       	mov    ds:0xc0029188,eax
c0012142:	a1 88 91 02 c0       	mov    eax,ds:0xc0029188
c0012147:	85 c0                	test   eax,eax
c0012149:	75 19                	jne    c0012164 <scanMADT()+0xd0>
c001214b:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0012150:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012156:	83 e2 fb             	and    edx,0xfffffffb
c0012159:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001215f:	e9 04 04 00 00       	jmp    c0012568 <scanMADT()+0x4d4>
c0012164:	83 ec 0c             	sub    esp,0xc
c0012167:	68 c6 5c 02 c0       	push   0xc0025cc6
c001216c:	e8 44 7c ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012171:	83 c4 10             	add    esp,0x10
c0012174:	a1 88 91 02 c0       	mov    eax,ds:0xc0029188
c0012179:	83 ec 0c             	sub    esp,0xc
c001217c:	50                   	push   eax
c001217d:	e8 76 fa ff ff       	call   c0011bf8 <loadACPITables(unsigned char*)>
c0012182:	83 c4 10             	add    esp,0x10
c0012185:	a1 88 91 02 c0       	mov    eax,ds:0xc0029188
c001218a:	83 ec 08             	sub    esp,0x8
c001218d:	68 de 5c 02 c0       	push   0xc0025cde
c0012192:	50                   	push   eax
c0012193:	e8 84 fe ff ff       	call   c001201c <findDataTable(unsigned char*, char*)>
c0012198:	83 c4 10             	add    esp,0x10
c001219b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001219f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00121a4:	75 1a                	jne    c00121c0 <scanMADT()+0x12c>
c00121a6:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c00121ab:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00121b1:	83 e2 fe             	and    edx,0xfffffffe
c00121b4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00121ba:	e9 a9 03 00 00       	jmp    c0012568 <scanMADT()+0x4d4>
c00121bf:	90                   	nop
c00121c0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00121c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00121cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00121cf:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00121d3:	0f 87 8f 03 00 00    	ja     c0012568 <scanMADT()+0x4d4>
c00121d9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00121e1:	0f 87 81 03 00 00    	ja     c0012568 <scanMADT()+0x4d4>
c00121e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121eb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00121ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121f3:	8d 50 01             	lea    edx,[eax+0x1]
c00121f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00121fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00121fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012202:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0012206:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001220a:	8d 50 01             	lea    edx,[eax+0x1]
c001220d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012211:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012215:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012219:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001221d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0012222:	0f 86 3c 03 00 00    	jbe    c0012564 <scanMADT()+0x4d0>
c0012228:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001222d:	75 59                	jne    c0012288 <scanMADT()+0x1f4>
c001222f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012233:	8d 50 01             	lea    edx,[eax+0x1]
c0012236:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001223a:	8a 15 80 93 02 c0    	mov    dl,BYTE PTR ds:0xc0029380
c0012240:	0f b6 d2             	movzx  edx,dl
c0012243:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012247:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001224b:	88 82 c0 93 02 c0    	mov    BYTE PTR [edx-0x3ffd6c40],al
c0012251:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012255:	8d 50 01             	lea    edx,[eax+0x1]
c0012258:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001225c:	8a 15 80 93 02 c0    	mov    dl,BYTE PTR ds:0xc0029380
c0012262:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012265:	88 0d 80 93 02 c0    	mov    BYTE PTR ds:0xc0029380,cl
c001226b:	0f b6 d2             	movzx  edx,dl
c001226e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012272:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012276:	88 82 a0 93 02 c0    	mov    BYTE PTR [edx-0x3ffd6c60],al
c001227c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012281:	e9 c6 02 00 00       	jmp    c001254c <scanMADT()+0x4b8>
c0012286:	66 90                	xchg   ax,ax
c0012288:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001228d:	0f 85 15 01 00 00    	jne    c00123a8 <scanMADT()+0x314>
c0012293:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012297:	8d 50 01             	lea    edx,[eax+0x1]
c001229a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001229e:	8a 15 40 92 02 c0    	mov    dl,BYTE PTR ds:0xc0029240
c00122a4:	0f b6 d2             	movzx  edx,dl
c00122a7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00122ab:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00122af:	88 82 60 92 02 c0    	mov    BYTE PTR [edx-0x3ffd6da0],al
c00122b5:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00122b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00122bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122c1:	01 d0                	add    eax,edx
c00122c3:	83 c0 2c             	add    eax,0x2c
c00122c6:	8a 00                	mov    al,BYTE PTR [eax]
c00122c8:	0f b6 d0             	movzx  edx,al
c00122cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122cf:	8d 48 01             	lea    ecx,[eax+0x1]
c00122d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00122d6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00122da:	0f b6 c0             	movzx  eax,al
c00122dd:	c1 e0 08             	shl    eax,0x8
c00122e0:	89 d1                	mov    ecx,edx
c00122e2:	09 c1                	or     ecx,eax
c00122e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122e8:	8d 50 02             	lea    edx,[eax+0x2]
c00122eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00122ef:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00122f3:	0f b6 c0             	movzx  eax,al
c00122f6:	c1 e0 10             	shl    eax,0x10
c00122f9:	09 c1                	or     ecx,eax
c00122fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122ff:	8d 50 03             	lea    edx,[eax+0x3]
c0012302:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012306:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001230a:	0f b6 c0             	movzx  eax,al
c001230d:	c1 e0 18             	shl    eax,0x18
c0012310:	09 c1                	or     ecx,eax
c0012312:	89 ca                	mov    edx,ecx
c0012314:	a0 40 92 02 c0       	mov    al,ds:0xc0029240
c0012319:	0f b6 c0             	movzx  eax,al
c001231c:	89 14 85 80 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d80],edx
c0012323:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012328:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001232c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012330:	01 d0                	add    eax,edx
c0012332:	83 c0 2c             	add    eax,0x2c
c0012335:	8a 00                	mov    al,BYTE PTR [eax]
c0012337:	0f b6 d0             	movzx  edx,al
c001233a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001233e:	8d 48 01             	lea    ecx,[eax+0x1]
c0012341:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012345:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012349:	0f b6 c0             	movzx  eax,al
c001234c:	c1 e0 08             	shl    eax,0x8
c001234f:	89 d1                	mov    ecx,edx
c0012351:	09 c1                	or     ecx,eax
c0012353:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012357:	8d 50 02             	lea    edx,[eax+0x2]
c001235a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001235e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012362:	0f b6 c0             	movzx  eax,al
c0012365:	c1 e0 10             	shl    eax,0x10
c0012368:	09 c1                	or     ecx,eax
c001236a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001236e:	8d 50 03             	lea    edx,[eax+0x3]
c0012371:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012375:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012379:	0f b6 c0             	movzx  eax,al
c001237c:	c1 e0 18             	shl    eax,0x18
c001237f:	09 c1                	or     ecx,eax
c0012381:	89 ca                	mov    edx,ecx
c0012383:	a0 40 92 02 c0       	mov    al,ds:0xc0029240
c0012388:	0f b6 c0             	movzx  eax,al
c001238b:	89 14 85 00 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d00],edx
c0012392:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012397:	a0 40 92 02 c0       	mov    al,ds:0xc0029240
c001239c:	40                   	inc    eax
c001239d:	a2 40 92 02 c0       	mov    ds:0xc0029240,al
c00123a2:	e9 a5 01 00 00       	jmp    c001254c <scanMADT()+0x4b8>
c00123a7:	90                   	nop
c00123a8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00123ad:	0f 85 e9 00 00 00    	jne    c001249c <scanMADT()+0x408>
c00123b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123b7:	8d 50 01             	lea    edx,[eax+0x1]
c00123ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00123be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00123c6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00123ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123ce:	8d 50 01             	lea    edx,[eax+0x1]
c00123d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00123d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00123dd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00123e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123e9:	01 d0                	add    eax,edx
c00123eb:	83 c0 2c             	add    eax,0x2c
c00123ee:	8a 00                	mov    al,BYTE PTR [eax]
c00123f0:	0f b6 d0             	movzx  edx,al
c00123f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123f7:	8d 48 01             	lea    ecx,[eax+0x1]
c00123fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123fe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012402:	0f b6 c0             	movzx  eax,al
c0012405:	c1 e0 08             	shl    eax,0x8
c0012408:	89 d1                	mov    ecx,edx
c001240a:	09 c1                	or     ecx,eax
c001240c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012410:	8d 50 02             	lea    edx,[eax+0x2]
c0012413:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012417:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001241b:	0f b6 c0             	movzx  eax,al
c001241e:	c1 e0 10             	shl    eax,0x10
c0012421:	09 c1                	or     ecx,eax
c0012423:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012427:	8d 50 03             	lea    edx,[eax+0x3]
c001242a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001242e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012432:	0f b6 c0             	movzx  eax,al
c0012435:	c1 e0 18             	shl    eax,0x18
c0012438:	09 c8                	or     eax,ecx
c001243a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001243e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012443:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012447:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001244b:	01 d0                	add    eax,edx
c001244d:	83 c0 2c             	add    eax,0x2c
c0012450:	8a 00                	mov    al,BYTE PTR [eax]
c0012452:	0f b6 c0             	movzx  eax,al
c0012455:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012459:	8d 4a 01             	lea    ecx,[edx+0x1]
c001245c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012460:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0012464:	0f b6 d2             	movzx  edx,dl
c0012467:	c1 e2 08             	shl    edx,0x8
c001246a:	09 d0                	or     eax,edx
c001246c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0012471:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012476:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001247b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001247f:	88 90 20 80 02 c0    	mov    BYTE PTR [eax-0x3ffd7fe0],dl
c0012485:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001248a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001248f:	66 89 84 12 20 92 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6de0],ax
c0012497:	e9 b0 00 00 00       	jmp    c001254c <scanMADT()+0x4b8>
c001249c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00124a1:	0f 85 99 00 00 00    	jne    c0012540 <scanMADT()+0x4ac>
c00124a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124ab:	8d 50 01             	lea    edx,[eax+0x1]
c00124ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00124b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124b6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00124ba:	0f b6 c0             	movzx  eax,al
c00124bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124c9:	01 d0                	add    eax,edx
c00124cb:	83 c0 2c             	add    eax,0x2c
c00124ce:	8a 00                	mov    al,BYTE PTR [eax]
c00124d0:	0f b6 d0             	movzx  edx,al
c00124d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00124da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124de:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00124e2:	0f b6 c0             	movzx  eax,al
c00124e5:	c1 e0 08             	shl    eax,0x8
c00124e8:	09 d0                	or     eax,edx
c00124ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124ee:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00124f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124f7:	8d 50 01             	lea    edx,[eax+0x1]
c00124fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00124fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012502:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012506:	0f b6 c0             	movzx  eax,al
c0012509:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001250d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012511:	c1 e0 08             	shl    eax,0x8
c0012514:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012518:	89 c1                	mov    ecx,eax
c001251a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001251e:	c1 e0 18             	shl    eax,0x18
c0012521:	89 c3                	mov    ebx,eax
c0012523:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0012528:	8d 50 01             	lea    edx,[eax+0x1]
c001252b:	89 15 90 91 02 c0    	mov    DWORD PTR ds:0xc0029190,edx
c0012531:	09 d9                	or     ecx,ebx
c0012533:	89 ca                	mov    edx,ecx
c0012535:	89 14 85 a0 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6e60],edx
c001253c:	eb 0e                	jmp    c001254c <scanMADT()+0x4b8>
c001253e:	66 90                	xchg   ax,ax
c0012540:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012545:	75 05                	jne    c001254c <scanMADT()+0x4b8>
c0012547:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001254c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0012551:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012555:	01 d0                	add    eax,edx
c0012557:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001255b:	e9 68 fc ff ff       	jmp    c00121c8 <scanMADT()+0x134>
c0012560:	90                   	nop
c0012561:	eb 05                	jmp    c0012568 <scanMADT()+0x4d4>
c0012563:	90                   	nop
c0012564:	90                   	nop
c0012565:	8d 76 00             	lea    esi,[esi+0x0]
c0012568:	83 c4 38             	add    esp,0x38
c001256b:	5b                   	pop    ebx
c001256c:	c3                   	ret    
c001256d:	90                   	nop
c001256e:	66 90                	xchg   ax,ax

c0012570 <ACPI::ACPI()>:
c0012570:	83 ec 0c             	sub    esp,0xc
c0012573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012577:	83 ec 08             	sub    esp,0x8
c001257a:	68 e3 5c 02 c0       	push   0xc0025ce3
c001257f:	50                   	push   eax
c0012580:	e8 39 c2 ff ff       	call   c000e7be <Device::Device(char const*)>
c0012585:	83 c4 10             	add    esp,0x10
c0012588:	ba a4 5e 02 c0       	mov    edx,0xc0025ea4
c001258d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012591:	89 10                	mov    DWORD PTR [eax],edx
c0012593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012597:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001259e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125a2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00125ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125b0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00125ba:	83 ec 0c             	sub    esp,0xc
c00125bd:	68 e8 5c 02 c0       	push   0xc0025ce8
c00125c2:	e8 ee 77 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00125c7:	83 c4 10             	add    esp,0x10
c00125ca:	e8 c5 fa ff ff       	call   c0012094 <scanMADT()>
c00125cf:	90                   	nop
c00125d0:	83 c4 0c             	add    esp,0xc
c00125d3:	c3                   	ret    

c00125d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00125d4:	83 ec 2c             	sub    esp,0x2c
c00125d7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00125db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125df:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00125e3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00125e7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00125ec:	88 d0                	mov    al,dl
c00125ee:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00125f2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00125f7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00125ff:	90                   	nop
c0012600:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012604:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001260a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001260e:	0f 8d 9c 00 00 00    	jge    c00126b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0012614:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012618:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001261c:	83 c2 2a             	add    edx,0x2a
c001261f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0012623:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012628:	75 7a                	jne    c00126a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001262a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001262e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012632:	83 c2 2a             	add    edx,0x2a
c0012635:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012639:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001263d:	75 65                	jne    c00126a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001263f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012644:	74 3a                	je     c0012680 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0012646:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001264a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001264e:	83 c2 2a             	add    edx,0x2a
c0012651:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012655:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012659:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001265c:	39 c2                	cmp    edx,eax
c001265e:	74 10                	je     c0012670 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012660:	83 ec 0c             	sub    esp,0xc
c0012663:	68 3c 5b 02 c0       	push   0xc0025b3c
c0012668:	e8 58 2a 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c001266d:	83 c4 10             	add    esp,0x10
c0012670:	83 ec 0c             	sub    esp,0xc
c0012673:	68 f6 5c 02 c0       	push   0xc0025cf6
c0012678:	e8 48 2a 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c001267d:	83 c4 10             	add    esp,0x10
c0012680:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012684:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012688:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001268c:	83 c2 2a             	add    edx,0x2a
c001268f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0012693:	8b 02                	mov    eax,DWORD PTR [edx]
c0012695:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012698:	89 01                	mov    DWORD PTR [ecx],eax
c001269a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001269d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00126a2:	66 90                	xchg   ax,ax
c00126a4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00126a8:	e9 53 ff ff ff       	jmp    c0012600 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00126ad:	8d 76 00             	lea    esi,[esi+0x0]
c00126b0:	90                   	nop
c00126b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126b5:	83 c4 2c             	add    esp,0x2c
c00126b8:	c2 04 00             	ret    0x4
c00126bb:	90                   	nop

c00126bc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00126bc:	83 ec 1c             	sub    esp,0x1c
c00126bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126c3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00126c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00126cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00126d0:	88 c8                	mov    al,cl
c00126d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00126d6:	88 d0                	mov    al,dl
c00126d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00126dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126e0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00126e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126ea:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00126ed:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00126f1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00126f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126f9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00126ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012703:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0012706:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001270a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001270f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012713:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012719:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001271d:	8d 48 01             	lea    ecx,[eax+0x1]
c0012720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012724:	83 c2 2a             	add    edx,0x2a
c0012727:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001272b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001272f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012739:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001273c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012740:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012748:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001274e:	8d 50 01             	lea    edx,[eax+0x1]
c0012751:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012755:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001275b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001275f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012765:	3d 00 02 00 00       	cmp    eax,0x200
c001276a:	75 10                	jne    c001277c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001276c:	83 ec 0c             	sub    esp,0xc
c001276f:	68 05 5d 02 c0       	push   0xc0025d05
c0012774:	e8 4c 29 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c0012779:	83 c4 10             	add    esp,0x10
c001277c:	90                   	nop
c001277d:	83 c4 1c             	add    esp,0x1c
c0012780:	c3                   	ret    
c0012781:	90                   	nop
c0012782:	66 90                	xchg   ax,ax

c0012784 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012784:	b8 00 00 00 00       	mov    eax,0x0
c0012789:	c3                   	ret    
c001278a:	66 90                	xchg   ax,ax

c001278c <ACPI::detectPCI()>:
c001278c:	53                   	push   ebx
c001278d:	83 ec 68             	sub    esp,0x68
c0012790:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0012795:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c001279a:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c001279f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00127a5:	83 e0 04             	and    eax,0x4
c00127a8:	84 c0                	test   al,al
c00127aa:	74 2c                	je     c00127d8 <ACPI::detectPCI()+0x4c>
c00127ac:	a1 88 91 02 c0       	mov    eax,ds:0xc0029188
c00127b1:	83 ec 08             	sub    esp,0x8
c00127b4:	68 22 5d 02 c0       	push   0xc0025d22
c00127b9:	50                   	push   eax
c00127ba:	e8 5d f8 ff ff       	call   c001201c <findDataTable(unsigned char*, char*)>
c00127bf:	83 c4 10             	add    esp,0x10
c00127c2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00127c6:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00127cb:	74 0b                	je     c00127d8 <ACPI::detectPCI()+0x4c>
c00127cd:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00127d2:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00127d7:	90                   	nop
c00127d8:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00127e0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00127e4:	8a 00                	mov    al,BYTE PTR [eax]
c00127e6:	3c 01                	cmp    al,0x1
c00127e8:	75 0e                	jne    c00127f8 <ACPI::detectPCI()+0x6c>
c00127ea:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00127ef:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00127f4:	eb 2a                	jmp    c0012820 <ACPI::detectPCI()+0x94>
c00127f6:	66 90                	xchg   ax,ax
c00127f8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00127fc:	8a 00                	mov    al,BYTE PTR [eax]
c00127fe:	3c 02                	cmp    al,0x2
c0012800:	75 1e                	jne    c0012820 <ACPI::detectPCI()+0x94>
c0012802:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012807:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c001280c:	74 12                	je     c0012820 <ACPI::detectPCI()+0x94>
c001280e:	83 ec 0c             	sub    esp,0xc
c0012811:	68 6c 5b 02 c0       	push   0xc0025b6c
c0012816:	e8 aa 28 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c001281b:	83 c4 10             	add    esp,0x10
c001281e:	66 90                	xchg   ax,ax
c0012820:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012824:	83 f0 01             	xor    eax,0x1
c0012827:	84 c0                	test   al,al
c0012829:	74 41                	je     c001286c <ACPI::detectPCI()+0xe0>
c001282b:	e8 20 d9 fe ff       	call   c0000150 <manualPCIProbe>
c0012830:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012834:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012839:	75 0d                	jne    c0012848 <ACPI::detectPCI()+0xbc>
c001283b:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012840:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012845:	eb 25                	jmp    c001286c <ACPI::detectPCI()+0xe0>
c0012847:	90                   	nop
c0012848:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c001284d:	75 1d                	jne    c001286c <ACPI::detectPCI()+0xe0>
c001284f:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012854:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012859:	74 11                	je     c001286c <ACPI::detectPCI()+0xe0>
c001285b:	83 ec 0c             	sub    esp,0xc
c001285e:	68 6c 5b 02 c0       	push   0xc0025b6c
c0012863:	e8 5d 28 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c0012868:	83 c4 10             	add    esp,0x10
c001286b:	90                   	nop
c001286c:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012871:	0f 84 49 03 00 00    	je     c0012bc0 <ACPI::detectPCI()+0x434>
c0012877:	83 ec 0c             	sub    esp,0xc
c001287a:	68 27 5d 02 c0       	push   0xc0025d27
c001287f:	e8 31 75 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012884:	83 c4 10             	add    esp,0x10
c0012887:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c001288c:	0f 84 8e 00 00 00    	je     c0012920 <ACPI::detectPCI()+0x194>
c0012892:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c0012897:	25 00 08 00 00       	and    eax,0x800
c001289c:	0f 84 16 01 00 00    	je     c00129b8 <ACPI::detectPCI()+0x22c>
c00128a2:	83 ec 0c             	sub    esp,0xc
c00128a5:	68 94 5b 02 c0       	push   0xc0025b94
c00128aa:	e8 06 75 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00128af:	83 c4 10             	add    esp,0x10
c00128b2:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c00128b7:	25 80 00 00 00       	and    eax,0x80
c00128bc:	0f 85 f6 00 00 00    	jne    c00129b8 <ACPI::detectPCI()+0x22c>
c00128c2:	66 90                	xchg   ax,ax
c00128c4:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00128cb:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00128d0:	89 c2                	mov    edx,eax
c00128d2:	ec                   	in     al,dx
c00128d3:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00128d7:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00128db:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00128df:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00128e4:	74 0a                	je     c00128f0 <ACPI::detectPCI()+0x164>
c00128e6:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c00128eb:	74 03                	je     c00128f0 <ACPI::detectPCI()+0x164>
c00128ed:	eb d5                	jmp    c00128c4 <ACPI::detectPCI()+0x138>
c00128ef:	90                   	nop
c00128f0:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00128f7:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00128fc:	89 c2                	mov    edx,eax
c00128fe:	ec                   	in     al,dx
c00128ff:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c0012903:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0012907:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c001290b:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0012910:	74 de                	je     c00128f0 <ACPI::detectPCI()+0x164>
c0012912:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0012917:	0f 85 93 00 00 00    	jne    c00129b0 <ACPI::detectPCI()+0x224>
c001291d:	eb d1                	jmp    c00128f0 <ACPI::detectPCI()+0x164>
c001291f:	90                   	nop
c0012920:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012924:	83 f0 01             	xor    eax,0x1
c0012927:	84 c0                	test   al,al
c0012929:	0f 84 89 00 00 00    	je     c00129b8 <ACPI::detectPCI()+0x22c>
c001292f:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c0012934:	25 00 08 00 00       	and    eax,0x800
c0012939:	74 7d                	je     c00129b8 <ACPI::detectPCI()+0x22c>
c001293b:	83 ec 0c             	sub    esp,0xc
c001293e:	68 b8 5b 02 c0       	push   0xc0025bb8
c0012943:	e8 6d 74 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012948:	83 c4 10             	add    esp,0x10
c001294b:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c0012950:	25 80 00 00 00       	and    eax,0x80
c0012955:	75 61                	jne    c00129b8 <ACPI::detectPCI()+0x22c>
c0012957:	90                   	nop
c0012958:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c001295f:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012964:	89 c2                	mov    edx,eax
c0012966:	ec                   	in     al,dx
c0012967:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001296b:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001296f:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0012973:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012978:	74 0a                	je     c0012984 <ACPI::detectPCI()+0x1f8>
c001297a:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c001297f:	74 03                	je     c0012984 <ACPI::detectPCI()+0x1f8>
c0012981:	eb d5                	jmp    c0012958 <ACPI::detectPCI()+0x1cc>
c0012983:	90                   	nop
c0012984:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c001298b:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012990:	89 c2                	mov    edx,eax
c0012992:	ec                   	in     al,dx
c0012993:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0012997:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c001299b:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001299f:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c00129a4:	74 de                	je     c0012984 <ACPI::detectPCI()+0x1f8>
c00129a6:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c00129ab:	75 07                	jne    c00129b4 <ACPI::detectPCI()+0x228>
c00129ad:	eb d5                	jmp    c0012984 <ACPI::detectPCI()+0x1f8>
c00129af:	90                   	nop
c00129b0:	90                   	nop
c00129b1:	eb 05                	jmp    c00129b8 <ACPI::detectPCI()+0x22c>
c00129b3:	90                   	nop
c00129b4:	90                   	nop
c00129b5:	8d 76 00             	lea    esi,[esi+0x0]
c00129b8:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c00129c0:	83 ec 0c             	sub    esp,0xc
c00129c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00129c7:	e8 8f 73 ff ff       	call   c0009d5b <malloc>
c00129cc:	83 c4 10             	add    esp,0x10
c00129cf:	89 c3                	mov    ebx,eax
c00129d1:	83 ec 0c             	sub    esp,0xc
c00129d4:	53                   	push   ebx
c00129d5:	e8 9c af 00 00       	call   c001d976 <PCI::PCI()>
c00129da:	83 c4 10             	add    esp,0x10
c00129dd:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c00129e1:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c00129e6:	25 00 08 00 00       	and    eax,0x800
c00129eb:	74 7b                	je     c0012a68 <ACPI::detectPCI()+0x2dc>
c00129ed:	83 ec 0c             	sub    esp,0xc
c00129f0:	68 3f 5d 02 c0       	push   0xc0025d3f
c00129f5:	e8 bb 73 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00129fa:	83 c4 10             	add    esp,0x10
c00129fd:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c0012a02:	25 80 00 00 00       	and    eax,0x80
c0012a07:	75 5f                	jne    c0012a68 <ACPI::detectPCI()+0x2dc>
c0012a09:	8d 76 00             	lea    esi,[esi+0x0]
c0012a0c:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0012a13:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012a18:	89 c2                	mov    edx,eax
c0012a1a:	ec                   	in     al,dx
c0012a1b:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0012a1f:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012a23:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012a27:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012a2c:	74 0a                	je     c0012a38 <ACPI::detectPCI()+0x2ac>
c0012a2e:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012a33:	74 03                	je     c0012a38 <ACPI::detectPCI()+0x2ac>
c0012a35:	eb d5                	jmp    c0012a0c <ACPI::detectPCI()+0x280>
c0012a37:	90                   	nop
c0012a38:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012a3f:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012a44:	89 c2                	mov    edx,eax
c0012a46:	ec                   	in     al,dx
c0012a47:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012a4b:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0012a4f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012a53:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012a58:	74 de                	je     c0012a38 <ACPI::detectPCI()+0x2ac>
c0012a5a:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012a5f:	75 03                	jne    c0012a64 <ACPI::detectPCI()+0x2d8>
c0012a61:	eb d5                	jmp    c0012a38 <ACPI::detectPCI()+0x2ac>
c0012a63:	90                   	nop
c0012a64:	90                   	nop
c0012a65:	8d 76 00             	lea    esi,[esi+0x0]
c0012a68:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012a6c:	83 ec 08             	sub    esp,0x8
c0012a6f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012a73:	50                   	push   eax
c0012a74:	e8 41 bb ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0012a79:	83 c4 10             	add    esp,0x10
c0012a7c:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c0012a81:	25 00 08 00 00       	and    eax,0x800
c0012a86:	74 78                	je     c0012b00 <ACPI::detectPCI()+0x374>
c0012a88:	83 ec 0c             	sub    esp,0xc
c0012a8b:	68 45 5d 02 c0       	push   0xc0025d45
c0012a90:	e8 20 73 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012a95:	83 c4 10             	add    esp,0x10
c0012a98:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c0012a9d:	25 80 00 00 00       	and    eax,0x80
c0012aa2:	75 5c                	jne    c0012b00 <ACPI::detectPCI()+0x374>
c0012aa4:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012aab:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012ab0:	89 c2                	mov    edx,eax
c0012ab2:	ec                   	in     al,dx
c0012ab3:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012ab7:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012abb:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012abf:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012ac4:	74 0a                	je     c0012ad0 <ACPI::detectPCI()+0x344>
c0012ac6:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012acb:	74 03                	je     c0012ad0 <ACPI::detectPCI()+0x344>
c0012acd:	eb d5                	jmp    c0012aa4 <ACPI::detectPCI()+0x318>
c0012acf:	90                   	nop
c0012ad0:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012ad7:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012adc:	89 c2                	mov    edx,eax
c0012ade:	ec                   	in     al,dx
c0012adf:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012ae3:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012ae7:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012aeb:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012af0:	74 de                	je     c0012ad0 <ACPI::detectPCI()+0x344>
c0012af2:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012af7:	75 03                	jne    c0012afc <ACPI::detectPCI()+0x370>
c0012af9:	eb d5                	jmp    c0012ad0 <ACPI::detectPCI()+0x344>
c0012afb:	90                   	nop
c0012afc:	90                   	nop
c0012afd:	8d 76 00             	lea    esi,[esi+0x0]
c0012b00:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b06:	83 c0 08             	add    eax,0x8
c0012b09:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b0b:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012b10:	74 0a                	je     c0012b1c <ACPI::detectPCI()+0x390>
c0012b12:	ba 01 00 00 00       	mov    edx,0x1
c0012b17:	eb 0b                	jmp    c0012b24 <ACPI::detectPCI()+0x398>
c0012b19:	8d 76 00             	lea    esi,[esi+0x0]
c0012b1c:	ba 02 00 00 00       	mov    edx,0x2
c0012b21:	8d 76 00             	lea    esi,[esi+0x0]
c0012b24:	6a 00                	push   0x0
c0012b26:	6a 00                	push   0x0
c0012b28:	52                   	push   edx
c0012b29:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012b2d:	ff d0                	call   eax
c0012b2f:	83 c4 10             	add    esp,0x10
c0012b32:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c0012b37:	25 00 08 00 00       	and    eax,0x800
c0012b3c:	0f 84 26 01 00 00    	je     c0012c68 <ACPI::detectPCI()+0x4dc>
c0012b42:	83 ec 0c             	sub    esp,0xc
c0012b45:	68 4b 5d 02 c0       	push   0xc0025d4b
c0012b4a:	e8 66 72 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012b4f:	83 c4 10             	add    esp,0x10
c0012b52:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c0012b57:	25 80 00 00 00       	and    eax,0x80
c0012b5c:	0f 85 06 01 00 00    	jne    c0012c68 <ACPI::detectPCI()+0x4dc>
c0012b62:	66 90                	xchg   ax,ax
c0012b64:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012b6b:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012b70:	89 c2                	mov    edx,eax
c0012b72:	ec                   	in     al,dx
c0012b73:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012b77:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012b7b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012b7f:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012b84:	74 0a                	je     c0012b90 <ACPI::detectPCI()+0x404>
c0012b86:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012b8b:	74 03                	je     c0012b90 <ACPI::detectPCI()+0x404>
c0012b8d:	eb d5                	jmp    c0012b64 <ACPI::detectPCI()+0x3d8>
c0012b8f:	90                   	nop
c0012b90:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012b97:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012b9c:	89 c2                	mov    edx,eax
c0012b9e:	ec                   	in     al,dx
c0012b9f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012ba3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012ba7:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012bab:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012bb0:	74 de                	je     c0012b90 <ACPI::detectPCI()+0x404>
c0012bb2:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012bb7:	0f 85 a7 00 00 00    	jne    c0012c64 <ACPI::detectPCI()+0x4d8>
c0012bbd:	eb d1                	jmp    c0012b90 <ACPI::detectPCI()+0x404>
c0012bbf:	90                   	nop
c0012bc0:	83 ec 0c             	sub    esp,0xc
c0012bc3:	68 51 5d 02 c0       	push   0xc0025d51
c0012bc8:	e8 7a a4 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0012bcd:	83 c4 10             	add    esp,0x10
c0012bd0:	83 ec 0c             	sub    esp,0xc
c0012bd3:	68 5c 5d 02 c0       	push   0xc0025d5c
c0012bd8:	e8 d8 71 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012be8:	83 ec 0c             	sub    esp,0xc
c0012beb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012bef:	e8 67 71 ff ff       	call   c0009d5b <malloc>
c0012bf4:	83 c4 10             	add    esp,0x10
c0012bf7:	89 c3                	mov    ebx,eax
c0012bf9:	83 ec 0c             	sub    esp,0xc
c0012bfc:	53                   	push   ebx
c0012bfd:	e8 de be 00 00       	call   c001eae0 <IDE::IDE()>
c0012c02:	83 c4 10             	add    esp,0x10
c0012c05:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012c09:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012c0d:	83 ec 08             	sub    esp,0x8
c0012c10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012c14:	50                   	push   eax
c0012c15:	e8 a0 b9 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c0012c1a:	83 c4 10             	add    esp,0x10
c0012c1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012c21:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012c2b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012c2f:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012c38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012c3c:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012c45:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c4b:	83 c0 08             	add    eax,0x8
c0012c4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c50:	6a 00                	push   0x0
c0012c52:	6a 00                	push   0x0
c0012c54:	6a 00                	push   0x0
c0012c56:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012c5a:	ff d0                	call   eax
c0012c5c:	83 c4 10             	add    esp,0x10
c0012c5f:	eb 07                	jmp    c0012c68 <ACPI::detectPCI()+0x4dc>
c0012c61:	8d 76 00             	lea    esi,[esi+0x0]
c0012c64:	90                   	nop
c0012c65:	8d 76 00             	lea    esi,[esi+0x0]
c0012c68:	90                   	nop
c0012c69:	83 c4 68             	add    esp,0x68
c0012c6c:	5b                   	pop    ebx
c0012c6d:	c3                   	ret    
c0012c6e:	66 90                	xchg   ax,ax

c0012c70 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012c70:	83 ec 1c             	sub    esp,0x1c
c0012c73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c77:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012c7a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012c7e:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0012c83:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012c88:	83 ec 08             	sub    esp,0x8
c0012c8b:	52                   	push   edx
c0012c8c:	50                   	push   eax
c0012c8d:	e8 90 66 ff ff       	call   c0009322 <Computer::readCMOS(unsigned char)>
c0012c92:	83 c4 10             	add    esp,0x10
c0012c95:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012c99:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0012c9e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012ca3:	83 ec 04             	sub    esp,0x4
c0012ca6:	6a 01                	push   0x1
c0012ca8:	52                   	push   edx
c0012ca9:	50                   	push   eax
c0012caa:	e8 57 68 ff ff       	call   c0009506 <Computer::writeCMOS(unsigned char, unsigned char)>
c0012caf:	83 c4 10             	add    esp,0x10
c0012cb2:	90                   	nop
c0012cb3:	83 c4 1c             	add    esp,0x1c
c0012cb6:	c3                   	ret    
c0012cb7:	90                   	nop

c0012cb8 <ACPI::sleep()>:
c0012cb8:	83 ec 0c             	sub    esp,0xc
c0012cbb:	83 ec 0c             	sub    esp,0xc
c0012cbe:	68 71 5d 02 c0       	push   0xc0025d71
c0012cc3:	e8 7f a3 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0012cc8:	83 c4 10             	add    esp,0x10
c0012ccb:	a1 60 8f 02 c0       	mov    eax,ds:0xc0028f60
c0012cd0:	85 c0                	test   eax,eax
c0012cd2:	74 18                	je     c0012cec <ACPI::sleep()+0x34>
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	68 7e 5d 02 c0       	push   0xc0025d7e
c0012cdc:	e8 66 a3 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0012ce1:	83 c4 10             	add    esp,0x10
c0012ce4:	a1 60 8f 02 c0       	mov    eax,ds:0xc0028f60
c0012ce9:	ff d0                	call   eax
c0012ceb:	90                   	nop
c0012cec:	90                   	nop
c0012ced:	83 c4 0c             	add    esp,0xc
c0012cf0:	c3                   	ret    
c0012cf1:	90                   	nop
c0012cf2:	66 90                	xchg   ax,ax

c0012cf4 <ACPI::open(int, int, void*)>:
c0012cf4:	57                   	push   edi
c0012cf5:	56                   	push   esi
c0012cf6:	53                   	push   ebx
c0012cf7:	81 ec 70 01 00 00    	sub    esp,0x170
c0012cfd:	83 ec 0c             	sub    esp,0xc
c0012d00:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012d07:	e8 80 fa ff ff       	call   c001278c <ACPI::detectPCI()>
c0012d0c:	83 c4 10             	add    esp,0x10
c0012d0f:	83 ec 0c             	sub    esp,0xc
c0012d12:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012d17:	e8 99 70 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012d1c:	83 c4 10             	add    esp,0x10
c0012d1f:	83 ec 0c             	sub    esp,0xc
c0012d22:	68 98 5d 02 c0       	push   0xc0025d98
c0012d27:	e8 47 4b 00 00       	call   c0017873 <Thr::loadKernelSymbolTable(char const*)>
c0012d2c:	83 c4 10             	add    esp,0x10
c0012d2f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012d37:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012d42:	83 ec 0c             	sub    esp,0xc
c0012d45:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012d4c:	e8 0a 70 ff ff       	call   c0009d5b <malloc>
c0012d51:	83 c4 10             	add    esp,0x10
c0012d54:	89 c3                	mov    ebx,eax
c0012d56:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c0012d5b:	83 ec 04             	sub    esp,0x4
c0012d5e:	50                   	push   eax
c0012d5f:	68 b6 5d 02 c0       	push   0xc0025db6
c0012d64:	53                   	push   ebx
c0012d65:	e8 48 a8 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0012d6a:	83 c4 10             	add    esp,0x10
c0012d6d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012d74:	83 ec 08             	sub    esp,0x8
c0012d77:	6a 01                	push   0x1
c0012d79:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012d80:	e8 07 a9 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0012d85:	83 c4 10             	add    esp,0x10
c0012d88:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012d8f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012d97:	75 17                	jne    c0012db0 <ACPI::open(int, int, void*)+0xbc>
c0012d99:	83 ec 0c             	sub    esp,0xc
c0012d9c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012da3:	e8 42 a9 ff ff       	call   c000d6ea <File::close()>
c0012da8:	83 c4 10             	add    esp,0x10
c0012dab:	eb 0b                	jmp    c0012db8 <ACPI::open(int, int, void*)+0xc4>
c0012dad:	8d 76 00             	lea    esi,[esi+0x0]
c0012db0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012db8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012dc0:	74 1e                	je     c0012de0 <ACPI::open(int, int, void*)+0xec>
c0012dc2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012dc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dcb:	83 c0 08             	add    eax,0x8
c0012dce:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dd0:	83 ec 0c             	sub    esp,0xc
c0012dd3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012dda:	ff d0                	call   eax
c0012ddc:	83 c4 10             	add    esp,0x10
c0012ddf:	90                   	nop
c0012de0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012de7:	83 f0 01             	xor    eax,0x1
c0012dea:	84 c0                	test   al,al
c0012dec:	74 42                	je     c0012e30 <ACPI::open(int, int, void*)+0x13c>
c0012dee:	83 ec 0c             	sub    esp,0xc
c0012df1:	68 d4 5d 02 c0       	push   0xc0025dd4
c0012df6:	e8 ba 6f ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012dfb:	83 c4 10             	add    esp,0x10
c0012dfe:	83 ec 04             	sub    esp,0x4
c0012e01:	6a 0c                	push   0xc
c0012e03:	68 ef 5d 02 c0       	push   0xc0025def
c0012e08:	68 00 5e 02 c0       	push   0xc0025e00
c0012e0d:	e8 cb 30 00 00       	call   c0015edd <Reg::readIntWithDefault(char*, char*, int)>
c0012e12:	83 c4 10             	add    esp,0x10
c0012e15:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012e1c:	83 ec 0c             	sub    esp,0xc
c0012e1f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012e26:	e8 00 91 ff ff       	call   c000bf2b <Virt::setupPageSwapping(int)>
c0012e2b:	83 c4 10             	add    esp,0x10
c0012e2e:	66 90                	xchg   ax,ax
c0012e30:	83 ec 0c             	sub    esp,0xc
c0012e33:	68 46 43 02 c0       	push   0xc0024346
c0012e38:	e8 78 6f ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0012e3d:	83 c4 10             	add    esp,0x10
c0012e40:	8b 1d 28 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028928
c0012e46:	83 ec 08             	sub    esp,0x8
c0012e49:	6a 01                	push   0x1
c0012e4b:	68 07 5e 02 c0       	push   0xc0025e07
c0012e50:	e8 95 54 00 00       	call   c00182ea <Thr::loadDLL(char const*, bool)>
c0012e55:	83 c4 10             	add    esp,0x10
c0012e58:	83 ec 08             	sub    esp,0x8
c0012e5b:	53                   	push   ebx
c0012e5c:	50                   	push   eax
c0012e5d:	e8 b9 56 00 00       	call   c001851b <Thr::executeDLL(unsigned long, void*)>
c0012e62:	83 c4 10             	add    esp,0x10
c0012e65:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012e6c:	83 ec 08             	sub    esp,0x8
c0012e6f:	6a 12                	push   0x12
c0012e71:	50                   	push   eax
c0012e72:	e8 c7 ba ff ff       	call   c000e93e <getDevicesOfType(DeviceType)>
c0012e77:	83 c4 0c             	add    esp,0xc
c0012e7a:	66 90                	xchg   ax,ax
c0012e7c:	83 ec 0c             	sub    esp,0xc
c0012e7f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012e86:	50                   	push   eax
c0012e87:	e8 a0 06 01 00       	call   c002352c <LinkedList<Device>::isEmpty()>
c0012e8c:	83 c4 10             	add    esp,0x10
c0012e8f:	83 f0 01             	xor    eax,0x1
c0012e92:	84 c0                	test   al,al
c0012e94:	0f 84 46 01 00 00    	je     c0012fe0 <ACPI::open(int, int, void*)+0x2ec>
c0012e9a:	83 ec 0c             	sub    esp,0xc
c0012e9d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012ea4:	50                   	push   eax
c0012ea5:	e8 9e 06 01 00       	call   c0023548 <LinkedList<Device>::getFirstElement()>
c0012eaa:	83 c4 10             	add    esp,0x10
c0012ead:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012eb4:	83 ec 0c             	sub    esp,0xc
c0012eb7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012ebe:	50                   	push   eax
c0012ebf:	e8 8c 06 01 00       	call   c0023550 <LinkedList<Device>::removeFirst()>
c0012ec4:	83 c4 10             	add    esp,0x10
c0012ec7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012ece:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012ed5:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012edc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ee0:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012ee6:	ba 09 00 00 00       	mov    edx,0x9
c0012eeb:	fc                   	cld    
c0012eec:	89 c7                	mov    edi,eax
c0012eee:	89 de                	mov    esi,ebx
c0012ef0:	89 d1                	mov    ecx,edx
c0012ef2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012ef4:	83 ec 08             	sub    esp,0x8
c0012ef7:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012efb:	50                   	push   eax
c0012efc:	83 ec 24             	sub    esp,0x24
c0012eff:	89 e0                	mov    eax,esp
c0012f01:	89 c3                	mov    ebx,eax
c0012f03:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012f07:	ba 09 00 00 00       	mov    edx,0x9
c0012f0c:	89 df                	mov    edi,ebx
c0012f0e:	89 c6                	mov    esi,eax
c0012f10:	89 d1                	mov    ecx,edx
c0012f12:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012f14:	e8 3b af 00 00       	call   c001de54 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012f19:	83 c4 30             	add    esp,0x30
c0012f1c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012f23:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012f2b:	0f 84 4b ff ff ff    	je     c0012e7c <ACPI::open(int, int, void*)+0x188>
c0012f31:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012f3c:	83 ec 0c             	sub    esp,0xc
c0012f3f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012f46:	e8 10 6e ff ff       	call   c0009d5b <malloc>
c0012f4b:	83 c4 10             	add    esp,0x10
c0012f4e:	89 c3                	mov    ebx,eax
c0012f50:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c0012f55:	83 ec 04             	sub    esp,0x4
c0012f58:	50                   	push   eax
c0012f59:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012f60:	53                   	push   ebx
c0012f61:	e8 4c a6 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0012f66:	83 c4 10             	add    esp,0x10
c0012f69:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012f70:	83 ec 0c             	sub    esp,0xc
c0012f73:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012f7a:	e8 7b a9 ff ff       	call   c000d8fa <File::exists()>
c0012f7f:	83 c4 10             	add    esp,0x10
c0012f82:	84 c0                	test   al,al
c0012f84:	74 2a                	je     c0012fb0 <ACPI::open(int, int, void*)+0x2bc>
c0012f86:	83 ec 08             	sub    esp,0x8
c0012f89:	6a 01                	push   0x1
c0012f8b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012f92:	e8 53 53 00 00       	call   c00182ea <Thr::loadDLL(char const*, bool)>
c0012f97:	83 c4 10             	add    esp,0x10
c0012f9a:	83 ec 08             	sub    esp,0x8
c0012f9d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012fa4:	50                   	push   eax
c0012fa5:	e8 71 55 00 00       	call   c001851b <Thr::executeDLL(unsigned long, void*)>
c0012faa:	83 c4 10             	add    esp,0x10
c0012fad:	8d 76 00             	lea    esi,[esi+0x0]
c0012fb0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012fb8:	0f 84 be fe ff ff    	je     c0012e7c <ACPI::open(int, int, void*)+0x188>
c0012fbe:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012fc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012fc7:	83 c0 08             	add    eax,0x8
c0012fca:	8b 00                	mov    eax,DWORD PTR [eax]
c0012fcc:	83 ec 0c             	sub    esp,0xc
c0012fcf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012fd6:	ff d0                	call   eax
c0012fd8:	83 c4 10             	add    esp,0x10
c0012fdb:	e9 9c fe ff ff       	jmp    c0012e7c <ACPI::open(int, int, void*)+0x188>
c0012fe0:	83 ec 0c             	sub    esp,0xc
c0012fe3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012fea:	50                   	push   eax
c0012feb:	e8 38 05 01 00       	call   c0023528 <LinkedList<Device>::~LinkedList()>
c0012ff0:	83 c4 10             	add    esp,0x10
c0012ff3:	8b 1d 28 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028928
c0012ff9:	83 ec 08             	sub    esp,0x8
c0012ffc:	6a 01                	push   0x1
c0012ffe:	68 22 5e 02 c0       	push   0xc0025e22
c0013003:	e8 e2 52 00 00       	call   c00182ea <Thr::loadDLL(char const*, bool)>
c0013008:	83 c4 10             	add    esp,0x10
c001300b:	83 ec 08             	sub    esp,0x8
c001300e:	53                   	push   ebx
c001300f:	50                   	push   eax
c0013010:	e8 06 55 00 00       	call   c001851b <Thr::executeDLL(unsigned long, void*)>
c0013015:	83 c4 10             	add    esp,0x10
c0013018:	8b 1d 28 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028928
c001301e:	83 ec 08             	sub    esp,0x8
c0013021:	6a 01                	push   0x1
c0013023:	68 3f 5e 02 c0       	push   0xc0025e3f
c0013028:	e8 bd 52 00 00       	call   c00182ea <Thr::loadDLL(char const*, bool)>
c001302d:	83 c4 10             	add    esp,0x10
c0013030:	83 ec 08             	sub    esp,0x8
c0013033:	53                   	push   ebx
c0013034:	50                   	push   eax
c0013035:	e8 e1 54 00 00       	call   c001851b <Thr::executeDLL(unsigned long, void*)>
c001303a:	83 c4 10             	add    esp,0x10
c001303d:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0013042:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013048:	83 e0 04             	and    eax,0x4
c001304b:	84 c0                	test   al,al
c001304d:	0f 84 15 01 00 00    	je     c0013168 <ACPI::open(int, int, void*)+0x474>
c0013053:	83 ec 0c             	sub    esp,0xc
c0013056:	68 5c 5e 02 c0       	push   0xc0025e5c
c001305b:	e8 55 6d ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0013060:	83 c4 10             	add    esp,0x10
c0013063:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001306e:	83 ec 0c             	sub    esp,0xc
c0013071:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0013078:	e8 de 6c ff ff       	call   c0009d5b <malloc>
c001307d:	83 c4 10             	add    esp,0x10
c0013080:	89 c3                	mov    ebx,eax
c0013082:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c0013087:	83 ec 04             	sub    esp,0x4
c001308a:	50                   	push   eax
c001308b:	68 79 5e 02 c0       	push   0xc0025e79
c0013090:	53                   	push   ebx
c0013091:	e8 1c a5 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0013096:	83 c4 10             	add    esp,0x10
c0013099:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00130a0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00130a8:	74 1a                	je     c00130c4 <ACPI::open(int, int, void*)+0x3d0>
c00130aa:	83 ec 0c             	sub    esp,0xc
c00130ad:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00130b4:	e8 41 a8 ff ff       	call   c000d8fa <File::exists()>
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	84 c0                	test   al,al
c00130be:	74 04                	je     c00130c4 <ACPI::open(int, int, void*)+0x3d0>
c00130c0:	b0 01                	mov    al,0x1
c00130c2:	eb 04                	jmp    c00130c8 <ACPI::open(int, int, void*)+0x3d4>
c00130c4:	b0 00                	mov    al,0x0
c00130c6:	66 90                	xchg   ax,ax
c00130c8:	84 c0                	test   al,al
c00130ca:	74 28                	je     c00130f4 <ACPI::open(int, int, void*)+0x400>
c00130cc:	83 ec 08             	sub    esp,0x8
c00130cf:	6a 01                	push   0x1
c00130d1:	68 79 5e 02 c0       	push   0xc0025e79
c00130d6:	e8 0f 52 00 00       	call   c00182ea <Thr::loadDLL(char const*, bool)>
c00130db:	83 c4 10             	add    esp,0x10
c00130de:	83 ec 08             	sub    esp,0x8
c00130e1:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c00130e8:	50                   	push   eax
c00130e9:	e8 2d 54 00 00       	call   c001851b <Thr::executeDLL(unsigned long, void*)>
c00130ee:	83 c4 10             	add    esp,0x10
c00130f1:	8d 76 00             	lea    esi,[esi+0x0]
c00130f4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00130fc:	74 2a                	je     c0013128 <ACPI::open(int, int, void*)+0x434>
c00130fe:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013106:	74 20                	je     c0013128 <ACPI::open(int, int, void*)+0x434>
c0013108:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001310f:	8b 00                	mov    eax,DWORD PTR [eax]
c0013111:	83 c0 08             	add    eax,0x8
c0013114:	8b 00                	mov    eax,DWORD PTR [eax]
c0013116:	83 ec 0c             	sub    esp,0xc
c0013119:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013120:	ff d0                	call   eax
c0013122:	83 c4 10             	add    esp,0x10
c0013125:	8d 76 00             	lea    esi,[esi+0x0]
c0013128:	a1 88 91 02 c0       	mov    eax,ds:0xc0029188
c001312d:	83 ec 08             	sub    esp,0x8
c0013130:	68 96 5e 02 c0       	push   0xc0025e96
c0013135:	50                   	push   eax
c0013136:	e8 e1 ee ff ff       	call   c001201c <findDataTable(unsigned char*, char*)>
c001313b:	83 c4 10             	add    esp,0x10
c001313e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0013145:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001314d:	74 19                	je     c0013168 <ACPI::open(int, int, void*)+0x474>
c001314f:	83 ec 08             	sub    esp,0x8
c0013152:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0013159:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0013160:	e8 0b fb ff ff       	call   c0012c70 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013165:	83 c4 10             	add    esp,0x10
c0013168:	b8 00 00 00 00       	mov    eax,0x0
c001316d:	81 c4 70 01 00 00    	add    esp,0x170
c0013173:	5b                   	pop    ebx
c0013174:	5e                   	pop    esi
c0013175:	5f                   	pop    edi
c0013176:	c3                   	ret    
c0013177:	90                   	nop

c0013178 <CPU::close(int, int, void*)>:
c0013178:	31 c0                	xor    eax,eax
c001317a:	c3                   	ret    
c001317b:	90                   	nop

c001317c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001317c:	55                   	push   ebp
c001317d:	57                   	push   edi
c001317e:	56                   	push   esi
c001317f:	53                   	push   ebx
c0013180:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013184:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013188:	89 ce                	mov    esi,ecx
c001318a:	89 d5                	mov    ebp,edx
c001318c:	80 f9 04             	cmp    cl,0x4
c001318f:	75 28                	jne    c00131b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0013191:	8d 42 f9             	lea    eax,[edx-0x7]
c0013194:	3c 03                	cmp    al,0x3
c0013196:	0f 86 63 01 00 00    	jbe    c00132ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001319c:	80 fa 03             	cmp    dl,0x3
c001319f:	0f 84 5a 01 00 00    	je     c00132ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00131a5:	8d 7a f2             	lea    edi,[edx-0xe]
c00131a8:	b8 f0 81 02 c0       	mov    eax,0xc00281f0
c00131ad:	89 fb                	mov    ebx,edi
c00131af:	80 fb 01             	cmp    bl,0x1
c00131b2:	77 4e                	ja     c0013202 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00131b4:	e9 52 01 00 00       	jmp    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131b9:	80 f9 05             	cmp    cl,0x5
c00131bc:	75 4d                	jne    c001320b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00131be:	b8 00 82 02 c0       	mov    eax,0xc0028200
c00131c3:	80 fa 03             	cmp    dl,0x3
c00131c6:	0f 86 3f 01 00 00    	jbe    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131cc:	8d 7a fa             	lea    edi,[edx-0x6]
c00131cf:	b8 10 82 02 c0       	mov    eax,0xc0028210
c00131d4:	89 fb                	mov    ebx,edi
c00131d6:	80 fb 01             	cmp    bl,0x1
c00131d9:	0f 86 2c 01 00 00    	jbe    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131df:	b8 20 82 02 c0       	mov    eax,0xc0028220
c00131e4:	80 fa 08             	cmp    dl,0x8
c00131e7:	0f 84 1e 01 00 00    	je     c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131ed:	89 d7                	mov    edi,edx
c00131ef:	b8 30 82 02 c0       	mov    eax,0xc0028230
c00131f4:	83 e7 fb             	and    edi,0xfffffffb
c00131f7:	89 fb                	mov    ebx,edi
c00131f9:	80 fb 09             	cmp    bl,0x9
c00131fc:	0f 84 09 01 00 00    	je     c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013202:	31 c0                	xor    eax,eax
c0013204:	89 eb                	mov    ebx,ebp
c0013206:	0f b6 fb             	movzx  edi,bl
c0013209:	eb 30                	jmp    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001320b:	31 c0                	xor    eax,eax
c001320d:	80 f9 06             	cmp    cl,0x6
c0013210:	75 f2                	jne    c0013204 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013212:	80 fa 0a             	cmp    dl,0xa
c0013215:	77 ed                	ja     c0013204 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013217:	bf de 05 00 00       	mov    edi,0x5de
c001321c:	0f a3 d7             	bt     edi,edx
c001321f:	73 e3                	jae    c0013204 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013221:	b8 40 82 02 c0       	mov    eax,0xc0028240
c0013226:	e9 e0 00 00 00       	jmp    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001322b:	39 c7                	cmp    edi,eax
c001322d:	0f 84 d3 00 00 00    	je     c0013306 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0013233:	40                   	inc    eax
c0013234:	3d d0 00 00 00       	cmp    eax,0xd0
c0013239:	74 09                	je     c0013244 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001323b:	89 f3                	mov    ebx,esi
c001323d:	80 fb 0f             	cmp    bl,0xf
c0013240:	75 f1                	jne    c0013233 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0013242:	eb e7                	jmp    c001322b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0013244:	80 f9 10             	cmp    cl,0x10
c0013247:	75 14                	jne    c001325d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0013249:	8d 42 fc             	lea    eax,[edx-0x4]
c001324c:	83 e0 fb             	and    eax,0xfffffffb
c001324f:	3c 02                	cmp    al,0x2
c0013251:	76 34                	jbe    c0013287 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0013253:	b8 d1 61 02 c0       	mov    eax,0xc00261d1
c0013258:	80 fa 02             	cmp    dl,0x2
c001325b:	eb 24                	jmp    c0013281 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001325d:	80 f9 11             	cmp    cl,0x11
c0013260:	75 13                	jne    c0013275 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0013262:	b8 d1 61 02 c0       	mov    eax,0xc00261d1
c0013267:	80 fa 03             	cmp    dl,0x3
c001326a:	0f 85 9b 00 00 00    	jne    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013270:	e9 91 00 00 00       	jmp    c0013306 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0013275:	80 f9 12             	cmp    cl,0x12
c0013278:	75 14                	jne    c001328e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001327a:	b8 d1 61 02 c0       	mov    eax,0xc00261d1
c001327f:	fe ca                	dec    dl
c0013281:	0f 85 84 00 00 00    	jne    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013287:	b8 60 82 02 c0       	mov    eax,0xc0028260
c001328c:	eb 7d                	jmp    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001328e:	80 f9 14             	cmp    cl,0x14
c0013291:	75 12                	jne    c00132a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0013293:	4a                   	dec    edx
c0013294:	b8 d1 61 02 c0       	mov    eax,0xc00261d1
c0013299:	80 fa 01             	cmp    dl,0x1
c001329c:	77 6d                	ja     c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001329e:	b8 70 82 02 c0       	mov    eax,0xc0028270
c00132a3:	eb 66                	jmp    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132a5:	80 f9 15             	cmp    cl,0x15
c00132a8:	75 31                	jne    c00132db <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00132aa:	b8 80 82 02 c0       	mov    eax,0xc0028280
c00132af:	80 fa 01             	cmp    dl,0x1
c00132b2:	74 57                	je     c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132b4:	b8 d1 61 02 c0       	mov    eax,0xc00261d1
c00132b9:	80 fa 13             	cmp    dl,0x13
c00132bc:	76 0c                	jbe    c00132ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00132be:	80 fa 30             	cmp    dl,0x30
c00132c1:	75 48                	jne    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132c3:	b8 a0 82 02 c0       	mov    eax,0xc00282a0
c00132c8:	eb 41                	jmp    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132ca:	b9 04 00 09 00       	mov    ecx,0x90004
c00132cf:	0f a3 d1             	bt     ecx,edx
c00132d2:	73 37                	jae    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132d4:	b8 90 82 02 c0       	mov    eax,0xc0028290
c00132d9:	eb 30                	jmp    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132db:	b8 d1 61 02 c0       	mov    eax,0xc00261d1
c00132e0:	80 f9 16             	cmp    cl,0x16
c00132e3:	75 26                	jne    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132e5:	b8 b0 82 02 c0       	mov    eax,0xc00282b0
c00132ea:	84 d2                	test   dl,dl
c00132ec:	74 1d                	je     c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132ee:	b8 d1 61 02 c0       	mov    eax,0xc00261d1
c00132f3:	80 fa 30             	cmp    dl,0x30
c00132f6:	75 13                	jne    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132f8:	b8 c0 82 02 c0       	mov    eax,0xc00282c0
c00132fd:	eb 0c                	jmp    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132ff:	b8 e0 81 02 c0       	mov    eax,0xc00281e0
c0013304:	eb 05                	jmp    c001330b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013306:	b8 50 82 02 c0       	mov    eax,0xc0028250
c001330b:	5b                   	pop    ebx
c001330c:	5e                   	pop    esi
c001330d:	5f                   	pop    edi
c001330e:	5d                   	pop    ebp
c001330f:	c3                   	ret    

c0013310 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0013310:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013314:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013318:	80 f9 04             	cmp    cl,0x4
c001331b:	75 6b                	jne    c0013388 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001331d:	b8 40 80 02 c0       	mov    eax,0xc0028040
c0013322:	80 fa 01             	cmp    dl,0x1
c0013325:	0f 86 92 02 00 00    	jbe    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001332b:	b8 50 80 02 c0       	mov    eax,0xc0028050
c0013330:	80 fa 02             	cmp    dl,0x2
c0013333:	0f 84 84 02 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013339:	b8 60 80 02 c0       	mov    eax,0xc0028060
c001333e:	80 fa 03             	cmp    dl,0x3
c0013341:	0f 84 76 02 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013347:	b8 70 80 02 c0       	mov    eax,0xc0028070
c001334c:	80 fa 04             	cmp    dl,0x4
c001334f:	0f 84 68 02 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013355:	b8 80 80 02 c0       	mov    eax,0xc0028080
c001335a:	80 fa 05             	cmp    dl,0x5
c001335d:	0f 84 5a 02 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013363:	b8 60 80 02 c0       	mov    eax,0xc0028060
c0013368:	80 fa 07             	cmp    dl,0x7
c001336b:	0f 84 4c 02 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013371:	83 ea 08             	sub    edx,0x8
c0013374:	b8 d1 61 02 c0       	mov    eax,0xc00261d1
c0013379:	80 fa 01             	cmp    dl,0x1
c001337c:	0f 87 3b 02 00 00    	ja     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013382:	b8 90 80 02 c0       	mov    eax,0xc0028090
c0013387:	c3                   	ret    
c0013388:	80 f9 05             	cmp    cl,0x5
c001338b:	75 45                	jne    c00133d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001338d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013390:	b8 a0 80 02 c0       	mov    eax,0xc00280a0
c0013395:	80 f9 02             	cmp    cl,0x2
c0013398:	0f 86 1f 02 00 00    	jbe    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001339e:	80 fa 04             	cmp    dl,0x4
c00133a1:	0f 84 f3 01 00 00    	je     c001359a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00133a7:	80 fa 07             	cmp    dl,0x7
c00133aa:	0f 84 0d 02 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133b0:	b8 b0 80 02 c0       	mov    eax,0xc00280b0
c00133b5:	80 fa 08             	cmp    dl,0x8
c00133b8:	0f 84 ff 01 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133be:	b8 d1 61 02 c0       	mov    eax,0xc00261d1
c00133c3:	80 fa 09             	cmp    dl,0x9
c00133c6:	0f 85 f1 01 00 00    	jne    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133cc:	b8 c0 80 02 c0       	mov    eax,0xc00280c0
c00133d1:	c3                   	ret    
c00133d2:	80 f9 06             	cmp    cl,0x6
c00133d5:	0f 85 85 01 00 00    	jne    c0013560 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00133db:	b8 d0 80 02 c0       	mov    eax,0xc00280d0
c00133e0:	80 fa 01             	cmp    dl,0x1
c00133e3:	0f 84 d4 01 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133e9:	8d 42 fb             	lea    eax,[edx-0x5]
c00133ec:	3c 01                	cmp    al,0x1
c00133ee:	0f 86 ac 01 00 00    	jbe    c00135a0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00133f4:	80 fa 03             	cmp    dl,0x3
c00133f7:	0f 84 a3 01 00 00    	je     c00135a0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00133fd:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013400:	b8 f0 80 02 c0       	mov    eax,0xc00280f0
c0013405:	80 f9 01             	cmp    cl,0x1
c0013408:	0f 86 af 01 00 00    	jbe    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001340e:	80 fa 09             	cmp    dl,0x9
c0013411:	0f 84 8f 01 00 00    	je     c00135a6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0013417:	8d 4a f6             	lea    ecx,[edx-0xa]
c001341a:	80 f9 01             	cmp    cl,0x1
c001341d:	0f 86 9a 01 00 00    	jbe    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013423:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0013428:	80 fa 0d             	cmp    dl,0xd
c001342b:	0f 84 8c 01 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013431:	b8 10 81 02 c0       	mov    eax,0xc0028110
c0013436:	80 fa 0e             	cmp    dl,0xe
c0013439:	0f 84 7e 01 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001343f:	b8 20 81 02 c0       	mov    eax,0xc0028120
c0013444:	80 fa 0f             	cmp    dl,0xf
c0013447:	0f 84 70 01 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001344d:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0013452:	80 fa 15             	cmp    dl,0x15
c0013455:	0f 84 62 01 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001345b:	8d 4a ea             	lea    ecx,[edx-0x16]
c001345e:	b8 20 81 02 c0       	mov    eax,0xc0028120
c0013463:	80 f9 01             	cmp    cl,0x1
c0013466:	0f 86 51 01 00 00    	jbe    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001346c:	80 fa 1a             	cmp    dl,0x1a
c001346f:	0f 84 37 01 00 00    	je     c00135ac <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0013475:	80 fa 1c             	cmp    dl,0x1c
c0013478:	0f 84 34 01 00 00    	je     c00135b2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001347e:	80 fa 1d             	cmp    dl,0x1d
c0013481:	0f 84 36 01 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013487:	b8 50 81 02 c0       	mov    eax,0xc0028150
c001348c:	80 fa 25             	cmp    dl,0x25
c001348f:	0f 84 28 01 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013495:	8d 4a da             	lea    ecx,[edx-0x26]
c0013498:	b8 40 81 02 c0       	mov    eax,0xc0028140
c001349d:	80 f9 01             	cmp    cl,0x1
c00134a0:	0f 86 17 01 00 00    	jbe    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134a6:	b8 60 81 02 c0       	mov    eax,0xc0028160
c00134ab:	80 fa 2a             	cmp    dl,0x2a
c00134ae:	0f 84 09 01 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134b4:	b8 50 81 02 c0       	mov    eax,0xc0028150
c00134b9:	80 fa 2c             	cmp    dl,0x2c
c00134bc:	0f 84 fb 00 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134c2:	b8 60 81 02 c0       	mov    eax,0xc0028160
c00134c7:	80 fa 2d             	cmp    dl,0x2d
c00134ca:	0f 84 ed 00 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134d0:	b8 30 81 02 c0       	mov    eax,0xc0028130
c00134d5:	80 fa 2e             	cmp    dl,0x2e
c00134d8:	0f 84 df 00 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134de:	b8 50 81 02 c0       	mov    eax,0xc0028150
c00134e3:	80 fa 2f             	cmp    dl,0x2f
c00134e6:	0f 84 d1 00 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134ec:	8d 4a cb             	lea    ecx,[edx-0x35]
c00134ef:	b8 40 81 02 c0       	mov    eax,0xc0028140
c00134f4:	80 f9 01             	cmp    cl,0x1
c00134f7:	0f 86 c0 00 00 00    	jbe    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134fd:	b8 70 81 02 c0       	mov    eax,0xc0028170
c0013502:	80 fa 37             	cmp    dl,0x37
c0013505:	0f 84 b2 00 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001350b:	b8 80 81 02 c0       	mov    eax,0xc0028180
c0013510:	80 fa 3a             	cmp    dl,0x3a
c0013513:	0f 84 a4 00 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013519:	b8 90 81 02 c0       	mov    eax,0xc0028190
c001351e:	80 fa 3c             	cmp    dl,0x3c
c0013521:	0f 84 96 00 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013527:	b8 a0 81 02 c0       	mov    eax,0xc00281a0
c001352c:	80 fa 3d             	cmp    dl,0x3d
c001352f:	0f 84 88 00 00 00    	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013535:	b8 80 81 02 c0       	mov    eax,0xc0028180
c001353a:	80 fa 3e             	cmp    dl,0x3e
c001353d:	74 7e                	je     c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001353f:	8d 42 bb             	lea    eax,[edx-0x45]
c0013542:	3c 01                	cmp    al,0x1
c0013544:	76 72                	jbe    c00135b8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013546:	80 fa 3f             	cmp    dl,0x3f
c0013549:	74 6d                	je     c00135b8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001354b:	80 fa 4a             	cmp    dl,0x4a
c001354e:	74 0a                	je     c001355a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0013550:	b8 d1 61 02 c0       	mov    eax,0xc00261d1
c0013555:	80 fa 4d             	cmp    dl,0x4d
c0013558:	75 63                	jne    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001355a:	b8 70 81 02 c0       	mov    eax,0xc0028170
c001355f:	c3                   	ret    
c0013560:	b8 d1 61 02 c0       	mov    eax,0xc00261d1
c0013565:	80 f9 0b             	cmp    cl,0xb
c0013568:	75 0a                	jne    c0013574 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001356a:	fe ca                	dec    dl
c001356c:	75 4f                	jne    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001356e:	b8 b0 81 02 c0       	mov    eax,0xc00281b0
c0013573:	c3                   	ret    
c0013574:	80 f9 0f             	cmp    cl,0xf
c0013577:	75 44                	jne    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013579:	b8 c0 81 02 c0       	mov    eax,0xc00281c0
c001357e:	80 fa 02             	cmp    dl,0x2
c0013581:	76 3a                	jbe    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013583:	8d 42 fd             	lea    eax,[edx-0x3]
c0013586:	3c 01                	cmp    al,0x1
c0013588:	76 0a                	jbe    c0013594 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001358a:	b8 d1 61 02 c0       	mov    eax,0xc00261d1
c001358f:	80 fa 06             	cmp    dl,0x6
c0013592:	75 29                	jne    c00135bd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013594:	b8 d0 81 02 c0       	mov    eax,0xc00281d0
c0013599:	c3                   	ret    
c001359a:	b8 b0 80 02 c0       	mov    eax,0xc00280b0
c001359f:	c3                   	ret    
c00135a0:	b8 e0 80 02 c0       	mov    eax,0xc00280e0
c00135a5:	c3                   	ret    
c00135a6:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00135ab:	c3                   	ret    
c00135ac:	b8 30 81 02 c0       	mov    eax,0xc0028130
c00135b1:	c3                   	ret    
c00135b2:	b8 40 81 02 c0       	mov    eax,0xc0028140
c00135b7:	c3                   	ret    
c00135b8:	b8 90 81 02 c0       	mov    eax,0xc0028190
c00135bd:	c3                   	ret    

c00135be <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00135be:	60                   	pusha  
c00135bf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00135c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00135cb:	9c                   	pushf  
c00135cc:	fa                   	cli    
c00135cd:	0f 09                	wbinvd 
c00135cf:	0f 30                	wrmsr  
c00135d1:	9d                   	popf   
c00135d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135d6:	89 02                	mov    DWORD PTR [edx],eax
c00135d8:	61                   	popa   
c00135d9:	c3                   	ret    

c00135da <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00135da:	60                   	pusha  
c00135db:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00135df:	9c                   	pushf  
c00135e0:	fa                   	cli    
c00135e1:	0f 09                	wbinvd 
c00135e3:	31 c0                	xor    eax,eax
c00135e5:	31 d2                	xor    edx,edx
c00135e7:	0f 32                	rdmsr  
c00135e9:	9d                   	popf   
c00135ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135ee:	89 02                	mov    DWORD PTR [edx],eax
c00135f0:	61                   	popa   
c00135f1:	c3                   	ret    

c00135f2 <CPU::AMD_K6_writeback(int, int, int)>:
c00135f2:	56                   	push   esi
c00135f3:	53                   	push   ebx
c00135f4:	83 ec 10             	sub    esp,0x10
c00135f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135fb:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013600:	75 5d                	jne    c001365f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013602:	83 f8 08             	cmp    eax,0x8
c0013605:	75 09                	jne    c0013610 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0013607:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001360c:	7e 13                	jle    c0013621 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001360e:	eb 30                	jmp    c0013640 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013610:	83 f8 06             	cmp    eax,0x6
c0013613:	7c 4a                	jl     c001365f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013615:	83 f8 07             	cmp    eax,0x7
c0013618:	7e 07                	jle    c0013621 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001361a:	83 f8 09             	cmp    eax,0x9
c001361d:	74 21                	je     c0013640 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001361f:	eb 3e                	jmp    c001365f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013621:	89 e6                	mov    esi,esp
c0013623:	8b 1d 4c 89 02 c0    	mov    ebx,DWORD PTR ds:0xc002894c
c0013629:	56                   	push   esi
c001362a:	c1 eb 15             	shr    ebx,0x15
c001362d:	68 82 00 00 c0       	push   0xc0000082
c0013632:	83 e3 7e             	and    ebx,0x7e
c0013635:	e8 a0 ff ff ff       	call   c00135da <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001363a:	56                   	push   esi
c001363b:	6a 00                	push   0x0
c001363d:	53                   	push   ebx
c001363e:	eb 12                	jmp    c0013652 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013640:	89 e3                	mov    ebx,esp
c0013642:	53                   	push   ebx
c0013643:	68 82 00 00 c0       	push   0xc0000082
c0013648:	e8 8d ff ff ff       	call   c00135da <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001364d:	53                   	push   ebx
c001364e:	6a 00                	push   0x0
c0013650:	6a 00                	push   0x0
c0013652:	68 82 00 00 c0       	push   0xc0000082
c0013657:	e8 62 ff ff ff       	call   c00135be <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001365c:	83 c4 18             	add    esp,0x18
c001365f:	83 c4 10             	add    esp,0x10
c0013662:	5b                   	pop    ebx
c0013663:	5e                   	pop    esi
c0013664:	c3                   	ret    
c0013665:	90                   	nop

c0013666 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013666:	55                   	push   ebp
c0013667:	57                   	push   edi
c0013668:	56                   	push   esi
c0013669:	53                   	push   ebx
c001366a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001366e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013672:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013676:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001367a:	39 05 e0 82 02 c0    	cmp    DWORD PTR ds:0xc00282e0,eax
c0013680:	75 23                	jne    c00136a5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013682:	a1 ec 93 02 c0       	mov    eax,ds:0xc00293ec
c0013687:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001368b:	89 06                	mov    DWORD PTR [esi],eax
c001368d:	a1 e8 93 02 c0       	mov    eax,ds:0xc00293e8
c0013692:	89 07                	mov    DWORD PTR [edi],eax
c0013694:	a1 e4 93 02 c0       	mov    eax,ds:0xc00293e4
c0013699:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001369c:	a1 e0 93 02 c0       	mov    eax,ds:0xc00293e0
c00136a1:	89 02                	mov    DWORD PTR [edx],eax
c00136a3:	eb 3f                	jmp    c00136e4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00136a5:	31 c9                	xor    ecx,ecx
c00136a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136ab:	0f a2                	cpuid  
c00136ad:	89 06                	mov    DWORD PTR [esi],eax
c00136af:	89 1f                	mov    DWORD PTR [edi],ebx
c00136b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00136b5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00136b8:	89 10                	mov    DWORD PTR [eax],edx
c00136ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136be:	a3 e0 82 02 c0       	mov    ds:0xc00282e0,eax
c00136c3:	8b 06                	mov    eax,DWORD PTR [esi]
c00136c5:	a3 ec 93 02 c0       	mov    ds:0xc00293ec,eax
c00136ca:	8b 07                	mov    eax,DWORD PTR [edi]
c00136cc:	a3 e8 93 02 c0       	mov    ds:0xc00293e8,eax
c00136d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00136d4:	a3 e4 93 02 c0       	mov    ds:0xc00293e4,eax
c00136d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00136dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00136df:	a3 e0 93 02 c0       	mov    ds:0xc00293e0,eax
c00136e4:	5b                   	pop    ebx
c00136e5:	5e                   	pop    esi
c00136e6:	5f                   	pop    edi
c00136e7:	5d                   	pop    ebp
c00136e8:	c3                   	ret    
c00136e9:	90                   	nop

c00136ea <CPU::cpuidCheckEDX(unsigned int)>:
c00136ea:	83 ec 10             	sub    esp,0x10
c00136ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136f1:	50                   	push   eax
c00136f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136f6:	50                   	push   eax
c00136f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136fb:	50                   	push   eax
c00136fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013700:	50                   	push   eax
c0013701:	6a 01                	push   0x1
c0013703:	e8 5e ff ff ff       	call   c0013666 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013708:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001370c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013710:	0f 95 c0             	setne  al
c0013713:	83 c4 24             	add    esp,0x24
c0013716:	c3                   	ret    
c0013717:	90                   	nop

c0013718 <CPU::cpuidCheckECX(unsigned int)>:
c0013718:	83 ec 10             	sub    esp,0x10
c001371b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001371f:	50                   	push   eax
c0013720:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013724:	50                   	push   eax
c0013725:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013729:	50                   	push   eax
c001372a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001372e:	50                   	push   eax
c001372f:	6a 01                	push   0x1
c0013731:	e8 30 ff ff ff       	call   c0013666 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013736:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001373a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001373e:	0f 95 c0             	setne  al
c0013741:	83 c4 24             	add    esp,0x24
c0013744:	c3                   	ret    
c0013745:	90                   	nop

c0013746 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0013746:	83 ec 10             	sub    esp,0x10
c0013749:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001374d:	50                   	push   eax
c001374e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013752:	50                   	push   eax
c0013753:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013757:	50                   	push   eax
c0013758:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001375c:	50                   	push   eax
c001375d:	6a 07                	push   0x7
c001375f:	e8 02 ff ff ff       	call   c0013666 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013764:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013768:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001376c:	0f 95 c0             	setne  al
c001376f:	83 c4 24             	add    esp,0x24
c0013772:	c3                   	ret    
c0013773:	90                   	nop

c0013774 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0013774:	83 ec 10             	sub    esp,0x10
c0013777:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001377b:	50                   	push   eax
c001377c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013780:	50                   	push   eax
c0013781:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013785:	50                   	push   eax
c0013786:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001378a:	50                   	push   eax
c001378b:	6a 07                	push   0x7
c001378d:	e8 d4 fe ff ff       	call   c0013666 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013792:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013796:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001379a:	0f 95 c0             	setne  al
c001379d:	83 c4 24             	add    esp,0x24
c00137a0:	c3                   	ret    
c00137a1:	90                   	nop

c00137a2 <CPU::CPU()>:
c00137a2:	83 ec 0c             	sub    esp,0xc
c00137a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a9:	83 ec 08             	sub    esp,0x8
c00137ac:	68 d1 61 02 c0       	push   0xc00261d1
c00137b1:	50                   	push   eax
c00137b2:	e8 07 b0 ff ff       	call   c000e7be <Device::Device(char const*)>
c00137b7:	83 c4 10             	add    esp,0x10
c00137ba:	ba 34 64 02 c0       	mov    edx,0xc0026434
c00137bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c3:	89 10                	mov    DWORD PTR [eax],edx
c00137c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00137d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d7:	05 78 01 00 00       	add    eax,0x178
c00137dc:	83 ec 0c             	sub    esp,0xc
c00137df:	50                   	push   eax
c00137e0:	e8 0b 5e ff ff       	call   c00095f0 <GDT::GDT()>
c00137e5:	83 c4 10             	add    esp,0x10
c00137e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ec:	05 7c 09 00 00       	add    eax,0x97c
c00137f1:	83 ec 0c             	sub    esp,0xc
c00137f4:	50                   	push   eax
c00137f5:	e8 4e 60 ff ff       	call   c0009848 <IDT::IDT()>
c00137fa:	83 c4 10             	add    esp,0x10
c00137fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013801:	05 7c 11 00 00       	add    eax,0x117c
c0013806:	83 ec 0c             	sub    esp,0xc
c0013809:	50                   	push   eax
c001380a:	e8 55 7e ff ff       	call   c000b664 <TSS::TSS()>
c001380f:	83 c4 10             	add    esp,0x10
c0013812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013816:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001381d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013821:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001382b:	90                   	nop
c001382c:	83 c4 0c             	add    esp,0xc
c001382f:	c3                   	ret    

c0013830 <CPU::displayFeatures()>:
c0013830:	53                   	push   ebx
c0013831:	83 ec 10             	sub    esp,0x10
c0013834:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013838:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001383e:	68 c8 5e 02 c0       	push   0xc0025ec8
c0013843:	e8 ff 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013848:	58                   	pop    eax
c0013849:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001384f:	5a                   	pop    edx
c0013850:	50                   	push   eax
c0013851:	68 d9 5e 02 c0       	push   0xc0025ed9
c0013856:	e8 ec 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001385b:	59                   	pop    ecx
c001385c:	58                   	pop    eax
c001385d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013863:	c1 e8 0e             	shr    eax,0xe
c0013866:	0f b6 c0             	movzx  eax,al
c0013869:	50                   	push   eax
c001386a:	68 ea 5e 02 c0       	push   0xc0025eea
c001386f:	e8 d3 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013874:	58                   	pop    eax
c0013875:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001387b:	5a                   	pop    edx
c001387c:	66 c1 e8 06          	shr    ax,0x6
c0013880:	0f b6 c0             	movzx  eax,al
c0013883:	50                   	push   eax
c0013884:	68 fb 5e 02 c0       	push   0xc0025efb
c0013889:	e8 b9 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001388e:	c7 04 24 fb 64 02 c0 	mov    DWORD PTR [esp],0xc00264fb
c0013895:	e8 ad 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001389a:	83 c4 10             	add    esp,0x10
c001389d:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c00138a2:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00138a9:	74 05                	je     c00138b0 <CPU::displayFeatures()+0x80>
c00138ab:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c00138b0:	51                   	push   ecx
c00138b1:	51                   	push   ecx
c00138b2:	50                   	push   eax
c00138b3:	68 0c 5f 02 c0       	push   0xc0025f0c
c00138b8:	e8 8a 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00138bd:	83 c4 10             	add    esp,0x10
c00138c0:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c00138c5:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00138cc:	78 05                	js     c00138d3 <CPU::displayFeatures()+0xa3>
c00138ce:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c00138d3:	52                   	push   edx
c00138d4:	52                   	push   edx
c00138d5:	50                   	push   eax
c00138d6:	68 23 5f 02 c0       	push   0xc0025f23
c00138db:	e8 67 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c00138e8:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00138ef:	75 05                	jne    c00138f6 <CPU::displayFeatures()+0xc6>
c00138f1:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c00138f6:	51                   	push   ecx
c00138f7:	51                   	push   ecx
c00138f8:	50                   	push   eax
c00138f9:	68 3a 5f 02 c0       	push   0xc0025f3a
c00138fe:	e8 44 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013903:	83 c4 10             	add    esp,0x10
c0013906:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c001390b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0013912:	75 05                	jne    c0013919 <CPU::displayFeatures()+0xe9>
c0013914:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0013919:	52                   	push   edx
c001391a:	52                   	push   edx
c001391b:	50                   	push   eax
c001391c:	68 51 5f 02 c0       	push   0xc0025f51
c0013921:	e8 21 97 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013926:	83 c4 10             	add    esp,0x10
c0013929:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c001392e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013935:	75 05                	jne    c001393c <CPU::displayFeatures()+0x10c>
c0013937:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c001393c:	51                   	push   ecx
c001393d:	51                   	push   ecx
c001393e:	50                   	push   eax
c001393f:	68 68 5f 02 c0       	push   0xc0025f68
c0013944:	e8 fe 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013949:	83 c4 10             	add    esp,0x10
c001394c:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0013951:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013958:	75 05                	jne    c001395f <CPU::displayFeatures()+0x12f>
c001395a:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c001395f:	52                   	push   edx
c0013960:	52                   	push   edx
c0013961:	50                   	push   eax
c0013962:	68 7f 5f 02 c0       	push   0xc0025f7f
c0013967:	e8 db 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001396c:	83 c4 10             	add    esp,0x10
c001396f:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0013974:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001397b:	75 05                	jne    c0013982 <CPU::displayFeatures()+0x152>
c001397d:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0013982:	51                   	push   ecx
c0013983:	51                   	push   ecx
c0013984:	50                   	push   eax
c0013985:	68 96 5f 02 c0       	push   0xc0025f96
c001398a:	e8 b8 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001398f:	83 c4 10             	add    esp,0x10
c0013992:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0013997:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001399e:	75 05                	jne    c00139a5 <CPU::displayFeatures()+0x175>
c00139a0:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c00139a5:	52                   	push   edx
c00139a6:	52                   	push   edx
c00139a7:	50                   	push   eax
c00139a8:	68 ad 5f 02 c0       	push   0xc0025fad
c00139ad:	e8 95 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00139b2:	83 c4 10             	add    esp,0x10
c00139b5:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c00139ba:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00139c1:	75 05                	jne    c00139c8 <CPU::displayFeatures()+0x198>
c00139c3:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c00139c8:	51                   	push   ecx
c00139c9:	51                   	push   ecx
c00139ca:	50                   	push   eax
c00139cb:	68 c4 5f 02 c0       	push   0xc0025fc4
c00139d0:	e8 72 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00139d5:	83 c4 10             	add    esp,0x10
c00139d8:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c00139dd:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00139e4:	75 05                	jne    c00139eb <CPU::displayFeatures()+0x1bb>
c00139e6:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c00139eb:	52                   	push   edx
c00139ec:	52                   	push   edx
c00139ed:	50                   	push   eax
c00139ee:	68 db 5f 02 c0       	push   0xc0025fdb
c00139f3:	e8 4f 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00139f8:	83 c4 10             	add    esp,0x10
c00139fb:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0013a00:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013a07:	75 05                	jne    c0013a0e <CPU::displayFeatures()+0x1de>
c0013a09:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0013a0e:	51                   	push   ecx
c0013a0f:	51                   	push   ecx
c0013a10:	50                   	push   eax
c0013a11:	68 f2 5f 02 c0       	push   0xc0025ff2
c0013a16:	e8 2c 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013a1b:	83 c4 10             	add    esp,0x10
c0013a1e:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0013a23:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0013a2a:	75 05                	jne    c0013a31 <CPU::displayFeatures()+0x201>
c0013a2c:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0013a31:	52                   	push   edx
c0013a32:	52                   	push   edx
c0013a33:	50                   	push   eax
c0013a34:	68 09 60 02 c0       	push   0xc0026009
c0013a39:	e8 09 96 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013a3e:	83 c4 10             	add    esp,0x10
c0013a41:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0013a46:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0013a4d:	75 05                	jne    c0013a54 <CPU::displayFeatures()+0x224>
c0013a4f:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0013a54:	51                   	push   ecx
c0013a55:	51                   	push   ecx
c0013a56:	50                   	push   eax
c0013a57:	68 20 60 02 c0       	push   0xc0026020
c0013a5c:	e8 e6 95 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013a61:	83 c4 10             	add    esp,0x10
c0013a64:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0013a69:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0013a70:	78 05                	js     c0013a77 <CPU::displayFeatures()+0x247>
c0013a72:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0013a77:	52                   	push   edx
c0013a78:	52                   	push   edx
c0013a79:	50                   	push   eax
c0013a7a:	68 37 60 02 c0       	push   0xc0026037
c0013a7f:	e8 c3 95 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013a84:	83 c4 10             	add    esp,0x10
c0013a87:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0013a8c:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0013a93:	75 05                	jne    c0013a9a <CPU::displayFeatures()+0x26a>
c0013a95:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0013a9a:	51                   	push   ecx
c0013a9b:	51                   	push   ecx
c0013a9c:	50                   	push   eax
c0013a9d:	68 4e 60 02 c0       	push   0xc002604e
c0013aa2:	e8 a0 95 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013aa7:	83 c4 10             	add    esp,0x10
c0013aaa:	b8 c1 43 02 c0       	mov    eax,0xc00243c1
c0013aaf:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0013ab6:	75 05                	jne    c0013abd <CPU::displayFeatures()+0x28d>
c0013ab8:	b8 c5 43 02 c0       	mov    eax,0xc00243c5
c0013abd:	52                   	push   edx
c0013abe:	52                   	push   edx
c0013abf:	50                   	push   eax
c0013ac0:	68 65 60 02 c0       	push   0xc0026065
c0013ac5:	e8 7d 95 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0013aca:	83 c4 18             	add    esp,0x18
c0013acd:	5b                   	pop    ebx
c0013ace:	c3                   	ret    
c0013acf:	90                   	nop

c0013ad0 <CPU::detectFeatures()>:
c0013ad0:	55                   	push   ebp
c0013ad1:	57                   	push   edi
c0013ad2:	56                   	push   esi
c0013ad3:	53                   	push   ebx
c0013ad4:	83 ec 50             	sub    esp,0x50
c0013ad7:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013adb:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013ae5:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013aec:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013af2:	6a 0d                	push   0xd
c0013af4:	6a 00                	push   0x0
c0013af6:	55                   	push   ebp
c0013af7:	e8 88 cb fe ff       	call   c0000684 <memset>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0013b04:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013b0b:	0f 84 22 09 00 00    	je     c0014433 <CPU::detectFeatures()+0x963>
c0013b11:	83 ec 0c             	sub    esp,0xc
c0013b14:	89 ef                	mov    edi,ebp
c0013b16:	6a 10                	push   0x10
c0013b18:	e8 cd fb ff ff       	call   c00136ea <CPU::cpuidCheckEDX(unsigned int)>
c0013b1d:	83 e0 01             	and    eax,0x1
c0013b20:	8d 14 00             	lea    edx,[eax+eax*1]
c0013b23:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b29:	83 e0 fd             	and    eax,0xfffffffd
c0013b2c:	09 d0                	or     eax,edx
c0013b2e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b34:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013b3b:	e8 aa fb ff ff       	call   c00136ea <CPU::cpuidCheckEDX(unsigned int)>
c0013b40:	83 e0 01             	and    eax,0x1
c0013b43:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013b4a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b50:	83 e0 fb             	and    eax,0xfffffffb
c0013b53:	09 d0                	or     eax,edx
c0013b55:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b5b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013b62:	e8 83 fb ff ff       	call   c00136ea <CPU::cpuidCheckEDX(unsigned int)>
c0013b67:	83 e0 01             	and    eax,0x1
c0013b6a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013b71:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b77:	83 e0 f7             	and    eax,0xfffffff7
c0013b7a:	09 d0                	or     eax,edx
c0013b7c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b82:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013b89:	e8 5c fb ff ff       	call   c00136ea <CPU::cpuidCheckEDX(unsigned int)>
c0013b8e:	83 e0 01             	and    eax,0x1
c0013b91:	c1 e0 04             	shl    eax,0x4
c0013b94:	88 c2                	mov    dl,al
c0013b96:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b9c:	83 e0 ef             	and    eax,0xffffffef
c0013b9f:	09 d0                	or     eax,edx
c0013ba1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ba7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013bae:	e8 37 fb ff ff       	call   c00136ea <CPU::cpuidCheckEDX(unsigned int)>
c0013bb3:	83 e0 01             	and    eax,0x1
c0013bb6:	c1 e0 05             	shl    eax,0x5
c0013bb9:	88 c2                	mov    dl,al
c0013bbb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013bc1:	83 e0 df             	and    eax,0xffffffdf
c0013bc4:	09 d0                	or     eax,edx
c0013bc6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013bcc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013bd3:	e8 12 fb ff ff       	call   c00136ea <CPU::cpuidCheckEDX(unsigned int)>
c0013bd8:	83 e0 01             	and    eax,0x1
c0013bdb:	8d 14 00             	lea    edx,[eax+eax*1]
c0013bde:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013be4:	83 e0 fd             	and    eax,0xfffffffd
c0013be7:	09 d0                	or     eax,edx
c0013be9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013bef:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013bf6:	e8 ef fa ff ff       	call   c00136ea <CPU::cpuidCheckEDX(unsigned int)>
c0013bfb:	83 e0 01             	and    eax,0x1
c0013bfe:	c1 e0 06             	shl    eax,0x6
c0013c01:	88 c2                	mov    dl,al
c0013c03:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013c09:	83 e0 bf             	and    eax,0xffffffbf
c0013c0c:	09 d0                	or     eax,edx
c0013c0e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013c14:	58                   	pop    eax
c0013c15:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c19:	50                   	push   eax
c0013c1a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c1e:	50                   	push   eax
c0013c1f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013c23:	56                   	push   esi
c0013c24:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c28:	50                   	push   eax
c0013c29:	6a 00                	push   0x0
c0013c2b:	e8 36 fa ff ff       	call   c0013666 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c30:	b8 04 00 00 00       	mov    eax,0x4
c0013c35:	89 c1                	mov    ecx,eax
c0013c37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c39:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013c3f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013c43:	89 c1                	mov    ecx,eax
c0013c45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c47:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013c4d:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013c51:	89 c1                	mov    ecx,eax
c0013c53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c55:	83 c4 18             	add    esp,0x18
c0013c58:	68 7c 60 02 c0       	push   0xc002607c
c0013c5d:	55                   	push   ebp
c0013c5e:	e8 69 cb fe ff       	call   c00007cc <strcmp>
c0013c63:	83 c4 10             	add    esp,0x10
c0013c66:	85 c0                	test   eax,eax
c0013c68:	75 0f                	jne    c0013c79 <CPU::detectFeatures()+0x1a9>
c0013c6a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013c74:	e9 22 02 00 00       	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013c79:	50                   	push   eax
c0013c7a:	50                   	push   eax
c0013c7b:	68 89 60 02 c0       	push   0xc0026089
c0013c80:	55                   	push   ebp
c0013c81:	e8 46 cb fe ff       	call   c00007cc <strcmp>
c0013c86:	83 c4 10             	add    esp,0x10
c0013c89:	85 c0                	test   eax,eax
c0013c8b:	74 dd                	je     c0013c6a <CPU::detectFeatures()+0x19a>
c0013c8d:	50                   	push   eax
c0013c8e:	50                   	push   eax
c0013c8f:	68 96 60 02 c0       	push   0xc0026096
c0013c94:	55                   	push   ebp
c0013c95:	e8 32 cb fe ff       	call   c00007cc <strcmp>
c0013c9a:	83 c4 10             	add    esp,0x10
c0013c9d:	85 c0                	test   eax,eax
c0013c9f:	74 2a                	je     c0013ccb <CPU::detectFeatures()+0x1fb>
c0013ca1:	50                   	push   eax
c0013ca2:	50                   	push   eax
c0013ca3:	68 a3 60 02 c0       	push   0xc00260a3
c0013ca8:	55                   	push   ebp
c0013ca9:	e8 1e cb fe ff       	call   c00007cc <strcmp>
c0013cae:	83 c4 10             	add    esp,0x10
c0013cb1:	85 c0                	test   eax,eax
c0013cb3:	74 16                	je     c0013ccb <CPU::detectFeatures()+0x1fb>
c0013cb5:	50                   	push   eax
c0013cb6:	50                   	push   eax
c0013cb7:	68 b0 60 02 c0       	push   0xc00260b0
c0013cbc:	55                   	push   ebp
c0013cbd:	e8 0a cb fe ff       	call   c00007cc <strcmp>
c0013cc2:	83 c4 10             	add    esp,0x10
c0013cc5:	85 c0                	test   eax,eax
c0013cc7:	74 48                	je     c0013d11 <CPU::detectFeatures()+0x241>
c0013cc9:	eb 0f                	jmp    c0013cda <CPU::detectFeatures()+0x20a>
c0013ccb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013cd5:	e9 c1 01 00 00       	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013cda:	50                   	push   eax
c0013cdb:	50                   	push   eax
c0013cdc:	68 bd 60 02 c0       	push   0xc00260bd
c0013ce1:	55                   	push   ebp
c0013ce2:	e8 e5 ca fe ff       	call   c00007cc <strcmp>
c0013ce7:	83 c4 10             	add    esp,0x10
c0013cea:	85 c0                	test   eax,eax
c0013cec:	74 23                	je     c0013d11 <CPU::detectFeatures()+0x241>
c0013cee:	57                   	push   edi
c0013cef:	57                   	push   edi
c0013cf0:	68 ca 60 02 c0       	push   0xc00260ca
c0013cf5:	55                   	push   ebp
c0013cf6:	e8 d1 ca fe ff       	call   c00007cc <strcmp>
c0013cfb:	83 c4 10             	add    esp,0x10
c0013cfe:	85 c0                	test   eax,eax
c0013d00:	75 1e                	jne    c0013d20 <CPU::detectFeatures()+0x250>
c0013d02:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013d0c:	e9 8a 01 00 00       	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013d11:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013d1b:	e9 7b 01 00 00       	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013d20:	56                   	push   esi
c0013d21:	56                   	push   esi
c0013d22:	68 d7 60 02 c0       	push   0xc00260d7
c0013d27:	55                   	push   ebp
c0013d28:	e8 9f ca fe ff       	call   c00007cc <strcmp>
c0013d2d:	83 c4 10             	add    esp,0x10
c0013d30:	85 c0                	test   eax,eax
c0013d32:	75 0f                	jne    c0013d43 <CPU::detectFeatures()+0x273>
c0013d34:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013d3e:	e9 58 01 00 00       	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013d43:	51                   	push   ecx
c0013d44:	51                   	push   ecx
c0013d45:	68 96 60 02 c0       	push   0xc0026096
c0013d4a:	55                   	push   ebp
c0013d4b:	e8 7c ca fe ff       	call   c00007cc <strcmp>
c0013d50:	83 c4 10             	add    esp,0x10
c0013d53:	85 c0                	test   eax,eax
c0013d55:	75 0f                	jne    c0013d66 <CPU::detectFeatures()+0x296>
c0013d57:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013d61:	e9 35 01 00 00       	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013d66:	52                   	push   edx
c0013d67:	52                   	push   edx
c0013d68:	68 e4 60 02 c0       	push   0xc00260e4
c0013d6d:	55                   	push   ebp
c0013d6e:	e8 59 ca fe ff       	call   c00007cc <strcmp>
c0013d73:	83 c4 10             	add    esp,0x10
c0013d76:	85 c0                	test   eax,eax
c0013d78:	75 0f                	jne    c0013d89 <CPU::detectFeatures()+0x2b9>
c0013d7a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013d84:	e9 12 01 00 00       	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013d89:	50                   	push   eax
c0013d8a:	50                   	push   eax
c0013d8b:	68 f1 60 02 c0       	push   0xc00260f1
c0013d90:	55                   	push   ebp
c0013d91:	e8 36 ca fe ff       	call   c00007cc <strcmp>
c0013d96:	83 c4 10             	add    esp,0x10
c0013d99:	85 c0                	test   eax,eax
c0013d9b:	75 0f                	jne    c0013dac <CPU::detectFeatures()+0x2dc>
c0013d9d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013da7:	e9 ef 00 00 00       	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013dac:	50                   	push   eax
c0013dad:	50                   	push   eax
c0013dae:	68 fe 60 02 c0       	push   0xc00260fe
c0013db3:	55                   	push   ebp
c0013db4:	e8 13 ca fe ff       	call   c00007cc <strcmp>
c0013db9:	83 c4 10             	add    esp,0x10
c0013dbc:	85 c0                	test   eax,eax
c0013dbe:	75 0f                	jne    c0013dcf <CPU::detectFeatures()+0x2ff>
c0013dc0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013dca:	e9 cc 00 00 00       	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013dcf:	50                   	push   eax
c0013dd0:	50                   	push   eax
c0013dd1:	68 0b 61 02 c0       	push   0xc002610b
c0013dd6:	55                   	push   ebp
c0013dd7:	e8 f0 c9 fe ff       	call   c00007cc <strcmp>
c0013ddc:	83 c4 10             	add    esp,0x10
c0013ddf:	85 c0                	test   eax,eax
c0013de1:	75 0f                	jne    c0013df2 <CPU::detectFeatures()+0x322>
c0013de3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013ded:	e9 a9 00 00 00       	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013df2:	50                   	push   eax
c0013df3:	50                   	push   eax
c0013df4:	68 18 61 02 c0       	push   0xc0026118
c0013df9:	55                   	push   ebp
c0013dfa:	e8 cd c9 fe ff       	call   c00007cc <strcmp>
c0013dff:	83 c4 10             	add    esp,0x10
c0013e02:	85 c0                	test   eax,eax
c0013e04:	75 0f                	jne    c0013e15 <CPU::detectFeatures()+0x345>
c0013e06:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013e10:	e9 86 00 00 00       	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013e15:	50                   	push   eax
c0013e16:	50                   	push   eax
c0013e17:	68 25 61 02 c0       	push   0xc0026125
c0013e1c:	55                   	push   ebp
c0013e1d:	e8 aa c9 fe ff       	call   c00007cc <strcmp>
c0013e22:	83 c4 10             	add    esp,0x10
c0013e25:	85 c0                	test   eax,eax
c0013e27:	75 0c                	jne    c0013e35 <CPU::detectFeatures()+0x365>
c0013e29:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013e33:	eb 66                	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013e35:	50                   	push   eax
c0013e36:	50                   	push   eax
c0013e37:	68 32 61 02 c0       	push   0xc0026132
c0013e3c:	55                   	push   ebp
c0013e3d:	e8 8a c9 fe ff       	call   c00007cc <strcmp>
c0013e42:	83 c4 10             	add    esp,0x10
c0013e45:	85 c0                	test   eax,eax
c0013e47:	75 0c                	jne    c0013e55 <CPU::detectFeatures()+0x385>
c0013e49:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013e53:	eb 46                	jmp    c0013e9b <CPU::detectFeatures()+0x3cb>
c0013e55:	57                   	push   edi
c0013e56:	57                   	push   edi
c0013e57:	68 3f 61 02 c0       	push   0xc002613f
c0013e5c:	55                   	push   ebp
c0013e5d:	e8 6a c9 fe ff       	call   c00007cc <strcmp>
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	85 c0                	test   eax,eax
c0013e67:	74 e0                	je     c0013e49 <CPU::detectFeatures()+0x379>
c0013e69:	56                   	push   esi
c0013e6a:	56                   	push   esi
c0013e6b:	68 4c 61 02 c0       	push   0xc002614c
c0013e70:	55                   	push   ebp
c0013e71:	e8 56 c9 fe ff       	call   c00007cc <strcmp>
c0013e76:	83 c4 10             	add    esp,0x10
c0013e79:	85 c0                	test   eax,eax
c0013e7b:	74 cc                	je     c0013e49 <CPU::detectFeatures()+0x379>
c0013e7d:	51                   	push   ecx
c0013e7e:	51                   	push   ecx
c0013e7f:	68 59 61 02 c0       	push   0xc0026159
c0013e84:	55                   	push   ebp
c0013e85:	e8 42 c9 fe ff       	call   c00007cc <strcmp>
c0013e8a:	83 c4 10             	add    esp,0x10
c0013e8d:	85 c0                	test   eax,eax
c0013e8f:	74 b8                	je     c0013e49 <CPU::detectFeatures()+0x379>
c0013e91:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013e9b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013ea0:	0f 86 be 00 00 00    	jbe    c0013f64 <CPU::detectFeatures()+0x494>
c0013ea6:	83 ec 0c             	sub    esp,0xc
c0013ea9:	68 80 00 00 00       	push   0x80
c0013eae:	e8 93 f8 ff ff       	call   c0013746 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013eb3:	83 e0 01             	and    eax,0x1
c0013eb6:	c1 e0 06             	shl    eax,0x6
c0013eb9:	88 c2                	mov    dl,al
c0013ebb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013ec1:	83 e0 bf             	and    eax,0xffffffbf
c0013ec4:	09 d0                	or     eax,edx
c0013ec6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ecc:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013ed3:	e8 6e f8 ff ff       	call   c0013746 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013ed8:	83 e0 01             	and    eax,0x1
c0013edb:	c1 e0 04             	shl    eax,0x4
c0013ede:	88 c2                	mov    dl,al
c0013ee0:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013ee6:	83 e0 ef             	and    eax,0xffffffef
c0013ee9:	09 d0                	or     eax,edx
c0013eeb:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013ef1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013ef8:	e8 49 f8 ff ff       	call   c0013746 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013efd:	c1 e0 07             	shl    eax,0x7
c0013f00:	88 c2                	mov    dl,al
c0013f02:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013f08:	83 e0 7f             	and    eax,0x7f
c0013f0b:	09 d0                	or     eax,edx
c0013f0d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013f13:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f1a:	e8 55 f8 ff ff       	call   c0013774 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013f1f:	83 e0 01             	and    eax,0x1
c0013f22:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013f29:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013f2f:	83 e0 f7             	and    eax,0xfffffff7
c0013f32:	09 d0                	or     eax,edx
c0013f34:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013f3a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013f41:	e8 2e f8 ff ff       	call   c0013774 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013f46:	83 c4 10             	add    esp,0x10
c0013f49:	83 e0 01             	and    eax,0x1
c0013f4c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013f53:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013f59:	83 e0 fb             	and    eax,0xfffffffb
c0013f5c:	09 d0                	or     eax,edx
c0013f5e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013f6b:	50                   	push   eax
c0013f6c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013f70:	50                   	push   eax
c0013f71:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013f75:	56                   	push   esi
c0013f76:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013f7a:	50                   	push   eax
c0013f7b:	6a 01                	push   0x1
c0013f7d:	e8 e4 f6 ff ff       	call   c0013666 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f82:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013f86:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013f8c:	88 ca                	mov    dl,cl
c0013f8e:	83 e0 f0             	and    eax,0xfffffff0
c0013f91:	83 e2 0f             	and    edx,0xf
c0013f94:	09 d0                	or     eax,edx
c0013f96:	88 ca                	mov    dl,cl
c0013f98:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013f9e:	c0 ea 04             	shr    dl,0x4
c0013fa1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013fa5:	0f b6 c2             	movzx  eax,dl
c0013fa8:	83 c4 20             	add    esp,0x20
c0013fab:	c1 e0 06             	shl    eax,0x6
c0013fae:	89 c7                	mov    edi,eax
c0013fb0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013fb6:	66 25 3f c0          	and    ax,0xc03f
c0013fba:	09 f8                	or     eax,edi
c0013fbc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013fc3:	89 c8                	mov    eax,ecx
c0013fc5:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013fcc:	c1 e8 08             	shr    eax,0x8
c0013fcf:	83 e5 3f             	and    ebp,0x3f
c0013fd2:	83 e0 0f             	and    eax,0xf
c0013fd5:	89 c7                	mov    edi,eax
c0013fd7:	c1 e7 06             	shl    edi,0x6
c0013fda:	09 ef                	or     edi,ebp
c0013fdc:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013fe3:	89 fa                	mov    edx,edi
c0013fe5:	83 e5 c0             	and    ebp,0xffffffc0
c0013fe8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013fee:	88 c2                	mov    dl,al
c0013ff0:	c0 ea 02             	shr    dl,0x2
c0013ff3:	89 d7                	mov    edi,edx
c0013ff5:	09 ef                	or     edi,ebp
c0013ff7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013ffd:	89 fa                	mov    edx,edi
c0013fff:	83 e5 cf             	and    ebp,0xffffffcf
c0014002:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014008:	89 cf                	mov    edi,ecx
c001400a:	c1 ef 0c             	shr    edi,0xc
c001400d:	83 e7 03             	and    edi,0x3
c0014010:	c1 e7 04             	shl    edi,0x4
c0014013:	09 ef                	or     edi,ebp
c0014015:	3c 06                	cmp    al,0x6
c0014017:	89 fa                	mov    edx,edi
c0014019:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001401f:	74 04                	je     c0014025 <CPU::detectFeatures()+0x555>
c0014021:	3c 0f                	cmp    al,0xf
c0014023:	75 5c                	jne    c0014081 <CPU::detectFeatures()+0x5b1>
c0014025:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014029:	89 cf                	mov    edi,ecx
c001402b:	c1 ef 10             	shr    edi,0x10
c001402e:	c1 e7 04             	shl    edi,0x4
c0014031:	09 fa                	or     edx,edi
c0014033:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0014039:	0f b6 d2             	movzx  edx,dl
c001403c:	66 81 e7 3f c0       	and    di,0xc03f
c0014041:	c1 e2 06             	shl    edx,0x6
c0014044:	09 fa                	or     edx,edi
c0014046:	3c 0f                	cmp    al,0xf
c0014048:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001404f:	75 30                	jne    c0014081 <CPU::detectFeatures()+0x5b1>
c0014051:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0014057:	c1 e9 14             	shr    ecx,0x14
c001405a:	83 e0 3f             	and    eax,0x3f
c001405d:	83 c1 0f             	add    ecx,0xf
c0014060:	88 ca                	mov    dl,cl
c0014062:	c0 e9 02             	shr    cl,0x2
c0014065:	c1 e2 06             	shl    edx,0x6
c0014068:	09 d0                	or     eax,edx
c001406a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0014070:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0014076:	83 e0 c0             	and    eax,0xffffffc0
c0014079:	09 c1                	or     ecx,eax
c001407b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014081:	83 ec 0c             	sub    esp,0xc
c0014084:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001408b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001408f:	50                   	push   eax
c0014090:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014094:	55                   	push   ebp
c0014095:	56                   	push   esi
c0014096:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001409a:	57                   	push   edi
c001409b:	68 00 00 00 80       	push   0x80000000
c00140a0:	e8 c1 f5 ff ff       	call   c0013666 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00140a5:	83 c4 20             	add    esp,0x20
c00140a8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00140b0:	76 22                	jbe    c00140d4 <CPU::detectFeatures()+0x604>
c00140b2:	83 ec 0c             	sub    esp,0xc
c00140b5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00140b9:	50                   	push   eax
c00140ba:	55                   	push   ebp
c00140bb:	56                   	push   esi
c00140bc:	57                   	push   edi
c00140bd:	68 01 00 00 80       	push   0x80000001
c00140c2:	e8 9f f5 ff ff       	call   c0013666 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00140c7:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00140d1:	83 c4 20             	add    esp,0x20
c00140d4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00140da:	83 f8 01             	cmp    eax,0x1
c00140dd:	75 6f                	jne    c001414e <CPU::detectFeatures()+0x67e>
c00140df:	51                   	push   ecx
c00140e0:	51                   	push   ecx
c00140e1:	68 65 61 02 c0       	push   0xc0026165
c00140e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00140ea:	56                   	push   esi
c00140eb:	e8 50 c6 fe ff       	call   c0000740 <strcpy>
c00140f0:	5f                   	pop    edi
c00140f1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00140f7:	5d                   	pop    ebp
c00140f8:	66 c1 e8 06          	shr    ax,0x6
c00140fc:	0f b6 c0             	movzx  eax,al
c00140ff:	50                   	push   eax
c0014100:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014106:	c1 e8 0e             	shr    eax,0xe
c0014109:	0f b6 c0             	movzx  eax,al
c001410c:	50                   	push   eax
c001410d:	e8 fe f1 ff ff       	call   c0013310 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0014112:	5a                   	pop    edx
c0014113:	59                   	pop    ecx
c0014114:	50                   	push   eax
c0014115:	56                   	push   esi
c0014116:	e8 65 c7 fe ff       	call   c0000880 <strcat>
c001411b:	5f                   	pop    edi
c001411c:	5d                   	pop    ebp
c001411d:	56                   	push   esi
c001411e:	53                   	push   ebx
c001411f:	e8 8c a6 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c0014124:	58                   	pop    eax
c0014125:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001412b:	5a                   	pop    edx
c001412c:	68 6c 61 02 c0       	push   0xc002616c
c0014131:	50                   	push   eax
c0014132:	e8 95 c6 fe ff       	call   c00007cc <strcmp>
c0014137:	83 c4 10             	add    esp,0x10
c001413a:	85 c0                	test   eax,eax
c001413c:	0f 85 71 03 00 00    	jne    c00144b3 <CPU::detectFeatures()+0x9e3>
c0014142:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014149:	e9 65 03 00 00       	jmp    c00144b3 <CPU::detectFeatures()+0x9e3>
c001414e:	83 f8 02             	cmp    eax,0x2
c0014151:	0f 85 b5 00 00 00    	jne    c001420c <CPU::detectFeatures()+0x73c>
c0014157:	57                   	push   edi
c0014158:	57                   	push   edi
c0014159:	68 7e 61 02 c0       	push   0xc002617e
c001415e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014162:	56                   	push   esi
c0014163:	e8 d8 c5 fe ff       	call   c0000740 <strcpy>
c0014168:	5d                   	pop    ebp
c0014169:	58                   	pop    eax
c001416a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014170:	66 c1 e8 06          	shr    ax,0x6
c0014174:	0f b6 c0             	movzx  eax,al
c0014177:	50                   	push   eax
c0014178:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001417e:	c1 e8 0e             	shr    eax,0xe
c0014181:	0f b6 c0             	movzx  eax,al
c0014184:	50                   	push   eax
c0014185:	e8 f2 ef ff ff       	call   c001317c <CPU::lookupAMDName(unsigned char, unsigned char)>
c001418a:	5a                   	pop    edx
c001418b:	59                   	pop    ecx
c001418c:	50                   	push   eax
c001418d:	56                   	push   esi
c001418e:	e8 ed c6 fe ff       	call   c0000880 <strcat>
c0014193:	5f                   	pop    edi
c0014194:	5d                   	pop    ebp
c0014195:	56                   	push   esi
c0014196:	53                   	push   ebx
c0014197:	e8 14 a6 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c001419c:	58                   	pop    eax
c001419d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00141a3:	5a                   	pop    edx
c00141a4:	68 83 61 02 c0       	push   0xc0026183
c00141a9:	50                   	push   eax
c00141aa:	e8 1d c6 fe ff       	call   c00007cc <strcmp>
c00141af:	83 c4 10             	add    esp,0x10
c00141b2:	85 c0                	test   eax,eax
c00141b4:	75 20                	jne    c00141d6 <CPU::detectFeatures()+0x706>
c00141b6:	8b 15 28 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028928
c00141bc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00141c2:	a8 01                	test   al,0x1
c00141c4:	74 10                	je     c00141d6 <CPU::detectFeatures()+0x706>
c00141c6:	83 e0 fe             	and    eax,0xfffffffe
c00141c9:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00141cf:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00141d6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141dc:	c1 e8 0e             	shr    eax,0xe
c00141df:	3c 05                	cmp    al,0x5
c00141e1:	0f 85 cc 02 00 00    	jne    c00144b3 <CPU::detectFeatures()+0x9e3>
c00141e7:	56                   	push   esi
c00141e8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00141ee:	83 e0 0f             	and    eax,0xf
c00141f1:	50                   	push   eax
c00141f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141f8:	66 c1 e8 06          	shr    ax,0x6
c00141fc:	0f b6 c0             	movzx  eax,al
c00141ff:	50                   	push   eax
c0014200:	6a 05                	push   0x5
c0014202:	e8 eb f3 ff ff       	call   c00135f2 <CPU::AMD_K6_writeback(int, int, int)>
c0014207:	e9 1f 02 00 00       	jmp    c001442b <CPU::detectFeatures()+0x95b>
c001420c:	8d 50 fd             	lea    edx,[eax-0x3]
c001420f:	83 fa 01             	cmp    edx,0x1
c0014212:	76 09                	jbe    c001421d <CPU::detectFeatures()+0x74d>
c0014214:	83 f8 06             	cmp    eax,0x6
c0014217:	0f 85 91 01 00 00    	jne    c00143ae <CPU::detectFeatures()+0x8de>
c001421d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014223:	c1 ea 0e             	shr    edx,0xe
c0014226:	80 fa 05             	cmp    dl,0x5
c0014229:	75 7b                	jne    c00142a6 <CPU::detectFeatures()+0x7d6>
c001422b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014231:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014236:	66 81 fa 00 01       	cmp    dx,0x100
c001423b:	75 0c                	jne    c0014249 <CPU::detectFeatures()+0x779>
c001423d:	51                   	push   ecx
c001423e:	51                   	push   ecx
c001423f:	68 8a 61 02 c0       	push   0xc002618a
c0014244:	e9 dc 01 00 00       	jmp    c0014425 <CPU::detectFeatures()+0x955>
c0014249:	66 81 fa 00 02       	cmp    dx,0x200
c001424e:	75 0c                	jne    c001425c <CPU::detectFeatures()+0x78c>
c0014250:	52                   	push   edx
c0014251:	52                   	push   edx
c0014252:	68 9d 61 02 c0       	push   0xc002619d
c0014257:	e9 c9 01 00 00       	jmp    c0014425 <CPU::detectFeatures()+0x955>
c001425c:	66 81 fa 40 02       	cmp    dx,0x240
c0014261:	75 0c                	jne    c001426f <CPU::detectFeatures()+0x79f>
c0014263:	50                   	push   eax
c0014264:	50                   	push   eax
c0014265:	68 af 61 02 c0       	push   0xc00261af
c001426a:	e9 b6 01 00 00       	jmp    c0014425 <CPU::detectFeatures()+0x955>
c001426f:	83 f8 06             	cmp    eax,0x6
c0014272:	75 0c                	jne    c0014280 <CPU::detectFeatures()+0x7b0>
c0014274:	50                   	push   eax
c0014275:	50                   	push   eax
c0014276:	68 c1 61 02 c0       	push   0xc00261c1
c001427b:	e9 a5 01 00 00       	jmp    c0014425 <CPU::detectFeatures()+0x955>
c0014280:	83 f8 04             	cmp    eax,0x4
c0014283:	75 0c                	jne    c0014291 <CPU::detectFeatures()+0x7c1>
c0014285:	50                   	push   eax
c0014286:	50                   	push   eax
c0014287:	68 cd 61 02 c0       	push   0xc00261cd
c001428c:	e9 94 01 00 00       	jmp    c0014425 <CPU::detectFeatures()+0x955>
c0014291:	83 f8 03             	cmp    eax,0x3
c0014294:	0f 85 19 02 00 00    	jne    c00144b3 <CPU::detectFeatures()+0x9e3>
c001429a:	50                   	push   eax
c001429b:	50                   	push   eax
c001429c:	68 d5 61 02 c0       	push   0xc00261d5
c00142a1:	e9 7f 01 00 00       	jmp    c0014425 <CPU::detectFeatures()+0x955>
c00142a6:	80 fa 06             	cmp    dl,0x6
c00142a9:	0f 85 db 00 00 00    	jne    c001438a <CPU::detectFeatures()+0x8ba>
c00142af:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00142b5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00142ba:	66 81 fa 80 01       	cmp    dx,0x180
c00142bf:	75 0c                	jne    c00142cd <CPU::detectFeatures()+0x7fd>
c00142c1:	50                   	push   eax
c00142c2:	50                   	push   eax
c00142c3:	68 e0 61 02 c0       	push   0xc00261e0
c00142c8:	e9 58 01 00 00       	jmp    c0014425 <CPU::detectFeatures()+0x955>
c00142cd:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00142d3:	66 f7 c1 80 ff       	test   cx,0xff80
c00142d8:	75 0c                	jne    c00142e6 <CPU::detectFeatures()+0x816>
c00142da:	50                   	push   eax
c00142db:	50                   	push   eax
c00142dc:	68 f0 61 02 c0       	push   0xc00261f0
c00142e1:	e9 3f 01 00 00       	jmp    c0014425 <CPU::detectFeatures()+0x955>
c00142e6:	66 81 fa 40 02       	cmp    dx,0x240
c00142eb:	75 0c                	jne    c00142f9 <CPU::detectFeatures()+0x829>
c00142ed:	55                   	push   ebp
c00142ee:	55                   	push   ebp
c00142ef:	68 f7 61 02 c0       	push   0xc00261f7
c00142f4:	e9 2c 01 00 00       	jmp    c0014425 <CPU::detectFeatures()+0x955>
c00142f9:	66 81 fa 80 02       	cmp    dx,0x280
c00142fe:	75 0c                	jne    c001430c <CPU::detectFeatures()+0x83c>
c0014300:	57                   	push   edi
c0014301:	57                   	push   edi
c0014302:	68 00 62 02 c0       	push   0xc0026200
c0014307:	e9 19 01 00 00       	jmp    c0014425 <CPU::detectFeatures()+0x955>
c001430c:	66 81 fa 40 03       	cmp    dx,0x340
c0014311:	74 ed                	je     c0014300 <CPU::detectFeatures()+0x830>
c0014313:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014318:	75 0c                	jne    c0014326 <CPU::detectFeatures()+0x856>
c001431a:	56                   	push   esi
c001431b:	56                   	push   esi
c001431c:	68 07 62 02 c0       	push   0xc0026207
c0014321:	e9 ff 00 00 00       	jmp    c0014425 <CPU::detectFeatures()+0x955>
c0014326:	83 f8 06             	cmp    eax,0x6
c0014329:	0f 84 45 ff ff ff    	je     c0014274 <CPU::detectFeatures()+0x7a4>
c001432f:	83 f8 04             	cmp    eax,0x4
c0014332:	0f 84 4d ff ff ff    	je     c0014285 <CPU::detectFeatures()+0x7b5>
c0014338:	83 f8 03             	cmp    eax,0x3
c001433b:	0f 85 72 01 00 00    	jne    c00144b3 <CPU::detectFeatures()+0x9e3>
c0014341:	51                   	push   ecx
c0014342:	51                   	push   ecx
c0014343:	68 10 62 02 c0       	push   0xc0026210
c0014348:	53                   	push   ebx
c0014349:	e8 62 a4 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c001434e:	b1 c1                	mov    cl,0xc1
c0014350:	88 c8                	mov    al,cl
c0014352:	e6 22                	out    0x22,al
c0014354:	e4 23                	in     al,0x23
c0014356:	88 c2                	mov    dl,al
c0014358:	88 c8                	mov    al,cl
c001435a:	e6 22                	out    0x22,al
c001435c:	88 d0                	mov    al,dl
c001435e:	83 c8 10             	or     eax,0x10
c0014361:	e6 23                	out    0x23,al
c0014363:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001436a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001436d:	89 d0                	mov    eax,edx
c001436f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014375:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014379:	40                   	inc    eax
c001437a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014380:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014385:	e9 a1 00 00 00       	jmp    c001442b <CPU::detectFeatures()+0x95b>
c001438a:	83 f8 06             	cmp    eax,0x6
c001438d:	0f 84 e1 fe ff ff    	je     c0014274 <CPU::detectFeatures()+0x7a4>
c0014393:	83 f8 04             	cmp    eax,0x4
c0014396:	0f 84 e9 fe ff ff    	je     c0014285 <CPU::detectFeatures()+0x7b5>
c001439c:	83 f8 03             	cmp    eax,0x3
c001439f:	0f 85 0e 01 00 00    	jne    c00144b3 <CPU::detectFeatures()+0x9e3>
c00143a5:	52                   	push   edx
c00143a6:	52                   	push   edx
c00143a7:	68 1b 62 02 c0       	push   0xc002621b
c00143ac:	eb 77                	jmp    c0014425 <CPU::detectFeatures()+0x955>
c00143ae:	83 f8 07             	cmp    eax,0x7
c00143b1:	75 09                	jne    c00143bc <CPU::detectFeatures()+0x8ec>
c00143b3:	50                   	push   eax
c00143b4:	50                   	push   eax
c00143b5:	68 25 62 02 c0       	push   0xc0026225
c00143ba:	eb 69                	jmp    c0014425 <CPU::detectFeatures()+0x955>
c00143bc:	83 f8 0a             	cmp    eax,0xa
c00143bf:	75 09                	jne    c00143ca <CPU::detectFeatures()+0x8fa>
c00143c1:	50                   	push   eax
c00143c2:	50                   	push   eax
c00143c3:	68 30 62 02 c0       	push   0xc0026230
c00143c8:	eb 5b                	jmp    c0014425 <CPU::detectFeatures()+0x955>
c00143ca:	83 f8 0b             	cmp    eax,0xb
c00143cd:	75 09                	jne    c00143d8 <CPU::detectFeatures()+0x908>
c00143cf:	50                   	push   eax
c00143d0:	50                   	push   eax
c00143d1:	68 38 62 02 c0       	push   0xc0026238
c00143d6:	eb 4d                	jmp    c0014425 <CPU::detectFeatures()+0x955>
c00143d8:	83 f8 08             	cmp    eax,0x8
c00143db:	75 09                	jne    c00143e6 <CPU::detectFeatures()+0x916>
c00143dd:	50                   	push   eax
c00143de:	50                   	push   eax
c00143df:	68 41 62 02 c0       	push   0xc0026241
c00143e4:	eb 3f                	jmp    c0014425 <CPU::detectFeatures()+0x955>
c00143e6:	83 f8 09             	cmp    eax,0x9
c00143e9:	75 09                	jne    c00143f4 <CPU::detectFeatures()+0x924>
c00143eb:	50                   	push   eax
c00143ec:	50                   	push   eax
c00143ed:	68 49 62 02 c0       	push   0xc0026249
c00143f2:	eb 31                	jmp    c0014425 <CPU::detectFeatures()+0x955>
c00143f4:	83 f8 05             	cmp    eax,0x5
c00143f7:	75 09                	jne    c0014402 <CPU::detectFeatures()+0x932>
c00143f9:	50                   	push   eax
c00143fa:	50                   	push   eax
c00143fb:	68 51 62 02 c0       	push   0xc0026251
c0014400:	eb 23                	jmp    c0014425 <CPU::detectFeatures()+0x955>
c0014402:	83 f8 0c             	cmp    eax,0xc
c0014405:	75 09                	jne    c0014410 <CPU::detectFeatures()+0x940>
c0014407:	55                   	push   ebp
c0014408:	55                   	push   ebp
c0014409:	68 5f 62 02 c0       	push   0xc002625f
c001440e:	eb 15                	jmp    c0014425 <CPU::detectFeatures()+0x955>
c0014410:	83 f8 0d             	cmp    eax,0xd
c0014413:	75 09                	jne    c001441e <CPU::detectFeatures()+0x94e>
c0014415:	57                   	push   edi
c0014416:	57                   	push   edi
c0014417:	68 6a 62 02 c0       	push   0xc002626a
c001441c:	eb 07                	jmp    c0014425 <CPU::detectFeatures()+0x955>
c001441e:	56                   	push   esi
c001441f:	56                   	push   esi
c0014420:	68 7e 62 02 c0       	push   0xc002627e
c0014425:	53                   	push   ebx
c0014426:	e8 85 a3 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c001442b:	83 c4 10             	add    esp,0x10
c001442e:	e9 80 00 00 00       	jmp    c00144b3 <CPU::detectFeatures()+0x9e3>
c0014433:	51                   	push   ecx
c0014434:	51                   	push   ecx
c0014435:	68 ca 60 02 c0       	push   0xc00260ca
c001443a:	55                   	push   ebp
c001443b:	e8 00 c3 fe ff       	call   c0000740 <strcpy>
c0014440:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001444a:	e8 94 bd fe ff       	call   c00001e3 <is486>
c001444f:	83 c4 10             	add    esp,0x10
c0014452:	85 c0                	test   eax,eax
c0014454:	74 2b                	je     c0014481 <CPU::detectFeatures()+0x9b1>
c0014456:	52                   	push   edx
c0014457:	52                   	push   edx
c0014458:	68 8a 62 02 c0       	push   0xc002628a
c001445d:	53                   	push   ebx
c001445e:	e8 4d a3 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c0014463:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001446a:	0f 20 c0             	mov    eax,cr0
c001446d:	83 e0 14             	and    eax,0x14
c0014470:	83 c4 10             	add    esp,0x10
c0014473:	83 f8 04             	cmp    eax,0x4
c0014476:	75 1f                	jne    c0014497 <CPU::detectFeatures()+0x9c7>
c0014478:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001447f:	eb 32                	jmp    c00144b3 <CPU::detectFeatures()+0x9e3>
c0014481:	50                   	push   eax
c0014482:	50                   	push   eax
c0014483:	68 95 62 02 c0       	push   0xc0026295
c0014488:	53                   	push   ebx
c0014489:	e8 22 a3 ff ff       	call   c000e7b0 <Device::setName(char const*)>
c001448e:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0014495:	eb d3                	jmp    c001446a <CPU::detectFeatures()+0x99a>
c0014497:	e8 22 bd fe ff       	call   c00001be <hasLegacyFPU>
c001449c:	83 e0 01             	and    eax,0x1
c001449f:	8d 14 00             	lea    edx,[eax+eax*1]
c00144a2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00144a8:	83 e0 fd             	and    eax,0xfffffffd
c00144ab:	09 d0                	or     eax,edx
c00144ad:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00144b3:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c00144ba:	74 0e                	je     c00144ca <CPU::detectFeatures()+0x9fa>
c00144bc:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c00144c1:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c00144c8:	eb 20                	jmp    c00144ea <CPU::detectFeatures()+0xa1a>
c00144ca:	e8 ef bc fe ff       	call   c00001be <hasLegacyFPU>
c00144cf:	83 e0 01             	and    eax,0x1
c00144d2:	8d 14 00             	lea    edx,[eax+eax*1]
c00144d5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00144db:	83 e0 fd             	and    eax,0xfffffffd
c00144de:	09 d0                	or     eax,edx
c00144e0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00144e6:	a8 02                	test   al,0x2
c00144e8:	75 d2                	jne    c00144bc <CPU::detectFeatures()+0x9ec>
c00144ea:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00144f1:	83 c4 4c             	add    esp,0x4c
c00144f4:	5b                   	pop    ebx
c00144f5:	5e                   	pop    esi
c00144f6:	5f                   	pop    edi
c00144f7:	5d                   	pop    ebp
c00144f8:	c3                   	ret    
c00144f9:	90                   	nop

c00144fa <CPU::setupSMEP()>:
c00144fa:	0f 20 e0             	mov    eax,cr4
c00144fd:	0d 00 00 10 00       	or     eax,0x100000
c0014502:	0f 22 e0             	mov    cr4,eax
c0014505:	c3                   	ret    

c0014506 <CPU::setupUMIP()>:
c0014506:	0f 20 e0             	mov    eax,cr4
c0014509:	80 cc 08             	or     ah,0x8
c001450c:	0f 22 e0             	mov    cr4,eax
c001450f:	c3                   	ret    

c0014510 <CPU::setupTSC()>:
c0014510:	0f 20 e0             	mov    eax,cr4
c0014513:	83 c8 04             	or     eax,0x4
c0014516:	0f 22 e0             	mov    cr4,eax
c0014519:	c3                   	ret    

c001451a <CPU::setupLargePages()>:
c001451a:	0f 20 e0             	mov    eax,cr4
c001451d:	83 c8 10             	or     eax,0x10
c0014520:	0f 22 e0             	mov    cr4,eax
c0014523:	c3                   	ret    

c0014524 <CPU::setupPAT()>:
c0014524:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0014529:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014530:	74 2c                	je     c001455e <CPU::setupPAT()+0x3a>
c0014532:	53                   	push   ebx
c0014533:	83 ec 10             	sub    esp,0x10
c0014536:	68 77 02 00 00       	push   0x277
c001453b:	50                   	push   eax
c001453c:	e8 2d 4d ff ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0014541:	83 e2 f8             	and    edx,0xfffffff8
c0014544:	83 ca 01             	or     edx,0x1
c0014547:	52                   	push   edx
c0014548:	50                   	push   eax
c0014549:	68 77 02 00 00       	push   0x277
c001454e:	ff 35 28 89 02 c0    	push   DWORD PTR ds:0xc0028928
c0014554:	e8 41 4d ff ff       	call   c000929a <Computer::wrmsr(unsigned int, unsigned long long)>
c0014559:	83 c4 28             	add    esp,0x28
c001455c:	5b                   	pop    ebx
c001455d:	c3                   	ret    
c001455e:	c3                   	ret    
c001455f:	90                   	nop

c0014560 <CPU::setupMTRR()>:
c0014560:	c3                   	ret    
c0014561:	90                   	nop

c0014562 <CPU::setupGlobalPages()>:
c0014562:	0f 20 e0             	mov    eax,cr4
c0014565:	0c 80                	or     al,0x80
c0014567:	0f 22 e0             	mov    cr4,eax
c001456a:	c3                   	ret    
c001456b:	90                   	nop

c001456c <CPU::allowUsermodeDataAccess()>:
c001456c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014570:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014577:	74 03                	je     c001457c <CPU::allowUsermodeDataAccess()+0x10>
c0014579:	0f 01 cb             	stac   
c001457c:	c3                   	ret    
c001457d:	90                   	nop

c001457e <CPU::prohibitUsermodeDataAccess()>:
c001457e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014582:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014589:	74 03                	je     c001458e <CPU::prohibitUsermodeDataAccess()+0x10>
c001458b:	0f 01 ca             	clac   
c001458e:	c3                   	ret    
c001458f:	90                   	nop

c0014590 <CPU::setupSMAP()>:
c0014590:	0f 20 e0             	mov    eax,cr4
c0014593:	0d 00 00 20 00       	or     eax,0x200000
c0014598:	0f 22 e0             	mov    cr4,eax
c001459b:	eb e1                	jmp    c001457e <CPU::prohibitUsermodeDataAccess()>
c001459d:	90                   	nop

c001459e <CPU::setupFeatures()>:
c001459e:	53                   	push   ebx
c001459f:	83 ec 08             	sub    esp,0x8
c00145a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145a6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00145ad:	74 18                	je     c00145c7 <CPU::setupFeatures()+0x29>
c00145af:	83 ec 0c             	sub    esp,0xc
c00145b2:	68 a0 62 02 c0       	push   0xc00262a0
c00145b7:	e8 8b 8a ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00145bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145bf:	e8 42 ff ff ff       	call   c0014506 <CPU::setupUMIP()>
c00145c4:	83 c4 10             	add    esp,0x10
c00145c7:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00145ce:	74 18                	je     c00145e8 <CPU::setupFeatures()+0x4a>
c00145d0:	83 ec 0c             	sub    esp,0xc
c00145d3:	68 aa 62 02 c0       	push   0xc00262aa
c00145d8:	e8 6a 8a ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00145dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145e0:	e8 2b ff ff ff       	call   c0014510 <CPU::setupTSC()>
c00145e5:	83 c4 10             	add    esp,0x10
c00145e8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00145ef:	74 18                	je     c0014609 <CPU::setupFeatures()+0x6b>
c00145f1:	83 ec 0c             	sub    esp,0xc
c00145f4:	68 b3 62 02 c0       	push   0xc00262b3
c00145f9:	e8 49 8a ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00145fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014601:	e8 14 ff ff ff       	call   c001451a <CPU::setupLargePages()>
c0014606:	83 c4 10             	add    esp,0x10
c0014609:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014610:	74 18                	je     c001462a <CPU::setupFeatures()+0x8c>
c0014612:	83 ec 0c             	sub    esp,0xc
c0014615:	68 bc 62 02 c0       	push   0xc00262bc
c001461a:	e8 28 8a ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001461f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014622:	e8 3b ff ff ff       	call   c0014562 <CPU::setupGlobalPages()>
c0014627:	83 c4 10             	add    esp,0x10
c001462a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014631:	74 18                	je     c001464b <CPU::setupFeatures()+0xad>
c0014633:	83 ec 0c             	sub    esp,0xc
c0014636:	68 ce 62 02 c0       	push   0xc00262ce
c001463b:	e8 07 8a ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0014640:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014643:	e8 dc fe ff ff       	call   c0014524 <CPU::setupPAT()>
c0014648:	83 c4 10             	add    esp,0x10
c001464b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014652:	74 11                	je     c0014665 <CPU::setupFeatures()+0xc7>
c0014654:	c7 44 24 10 d7 62 02 c0 	mov    DWORD PTR [esp+0x10],0xc00262d7
c001465c:	83 c4 08             	add    esp,0x8
c001465f:	5b                   	pop    ebx
c0014660:	e9 e2 89 ff ff       	jmp    c000d047 <Dbg::kprintf(char const*, ...)>
c0014665:	83 c4 08             	add    esp,0x8
c0014668:	5b                   	pop    ebx
c0014669:	c3                   	ret    

c001466a <CPU::open(int, int, void*)>:
c001466a:	57                   	push   edi
c001466b:	56                   	push   esi
c001466c:	53                   	push   ebx
c001466d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014671:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014675:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001467b:	83 ec 0c             	sub    esp,0xc
c001467e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014684:	68 e1 62 02 c0       	push   0xc00262e1
c0014689:	e8 27 57 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001468e:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014694:	89 04 24             	mov    DWORD PTR [esp],eax
c0014697:	e8 b6 4f ff ff       	call   c0009652 <GDT::setup()>
c001469c:	c7 04 24 f3 62 02 c0 	mov    DWORD PTR [esp],0xc00262f3
c00146a3:	e8 0d 57 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00146a8:	83 c4 0c             	add    esp,0xc
c00146ab:	6a 00                	push   0x0
c00146ad:	68 ef be ad de       	push   0xdeadbeef
c00146b2:	57                   	push   edi
c00146b3:	e8 f0 6f ff ff       	call   c000b6a8 <TSS::setup(unsigned long, unsigned long)>
c00146b8:	c7 04 24 05 63 02 c0 	mov    DWORD PTR [esp],0xc0026305
c00146bf:	e8 f1 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00146c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00146c7:	e8 bc 6f ff ff       	call   c000b688 <TSS::flush()>
c00146cc:	c7 04 24 19 63 02 c0 	mov    DWORD PTR [esp],0xc0026319
c00146d3:	e8 dd 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00146d8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00146de:	89 04 24             	mov    DWORD PTR [esp],eax
c00146e1:	e8 d8 51 ff ff       	call   c00098be <IDT::setup()>
c00146e6:	c7 04 24 2b 63 02 c0 	mov    DWORD PTR [esp],0xc002632b
c00146ed:	e8 c3 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00146f2:	b8 00 04 00 00       	mov    eax,0x400
c00146f7:	0f 23 f8             	mov    db7,eax
c00146fa:	c7 04 24 49 63 02 c0 	mov    DWORD PTR [esp],0xc0026349
c0014701:	e8 af 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0014706:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014710:	e8 fd 5c ff ff       	call   c000a412 <Phys::allocatePage()>
c0014715:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001471b:	89 30                	mov    DWORD PTR [eax],esi
c001471d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014726:	c7 04 24 6b 63 02 c0 	mov    DWORD PTR [esp],0xc002636b
c001472d:	e8 83 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0014732:	58                   	pop    eax
c0014733:	5a                   	pop    edx
c0014734:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001473a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001473e:	e8 5f 7f ff ff       	call   c000c6a2 <VAS::setCPUSpecific(unsigned long)>
c0014743:	c7 04 24 93 63 02 c0 	mov    DWORD PTR [esp],0xc0026393
c001474a:	e8 66 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001474f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014752:	e8 79 f3 ff ff       	call   c0013ad0 <CPU::detectFeatures()>
c0014757:	c7 04 24 b6 63 02 c0 	mov    DWORD PTR [esp],0xc00263b6
c001475e:	e8 52 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0014763:	e8 e7 b2 ff ff       	call   c000fa4f <setupInterruptController()>
c0014768:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001476e:	c7 04 24 da 63 02 c0 	mov    DWORD PTR [esp],0xc00263da
c0014775:	e8 3b 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001477a:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c001477f:	83 e0 10             	and    eax,0x10
c0014782:	83 f8 01             	cmp    eax,0x1
c0014785:	19 c0                	sbb    eax,eax
c0014787:	83 e0 46             	and    eax,0x46
c001478a:	83 c0 1e             	add    eax,0x1e
c001478d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014790:	e8 eb c8 ff ff       	call   c0011080 <setupTimer(int)>
c0014795:	83 c4 10             	add    esp,0x10
c0014798:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001479e:	f6 05 40 89 02 c0 20 	test   BYTE PTR ds:0xc0028940,0x20
c00147a5:	74 18                	je     c00147bf <CPU::open(int, int, void*)+0x155>
c00147a7:	83 ec 0c             	sub    esp,0xc
c00147aa:	68 f5 63 02 c0       	push   0xc00263f5
c00147af:	e8 01 56 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00147b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147b7:	e8 e2 fd ff ff       	call   c001459e <CPU::setupFeatures()>
c00147bc:	83 c4 10             	add    esp,0x10
c00147bf:	83 ec 0c             	sub    esp,0xc
c00147c2:	68 10 64 02 c0       	push   0xc0026410
c00147c7:	e8 e9 55 ff ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00147cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147cf:	e8 5c f0 ff ff       	call   c0013830 <CPU::displayFeatures()>
c00147d4:	83 c4 10             	add    esp,0x10
c00147d7:	31 c0                	xor    eax,eax
c00147d9:	5b                   	pop    ebx
c00147da:	5e                   	pop    esi
c00147db:	5f                   	pop    edi
c00147dc:	c3                   	ret    
c00147dd:	90                   	nop

c00147de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00147de:	57                   	push   edi
c00147df:	56                   	push   esi
c00147e0:	53                   	push   ebx
c00147e1:	51                   	push   ecx
c00147e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00147e6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00147e9:	0f 02 c0             	lar    eax,ax
c00147ec:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00147ef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00147f3:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00147f6:	88 ca                	mov    dl,cl
c00147f8:	c0 ea 06             	shr    dl,0x6
c00147fb:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00147ff:	89 ca                	mov    edx,ecx
c0014801:	66 c1 ea 03          	shr    dx,0x3
c0014805:	83 e2 07             	and    edx,0x7
c0014808:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001480d:	88 17                	mov    BYTE PTR [edi],dl
c001480f:	0f 84 a6 01 00 00    	je     c00149bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014815:	83 e1 07             	and    ecx,0x7
c0014818:	80 f9 04             	cmp    cl,0x4
c001481b:	0f 84 98 00 00 00    	je     c00148b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014821:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014826:	0f 95 c0             	setne  al
c0014829:	80 f9 05             	cmp    cl,0x5
c001482c:	0f 95 c2             	setne  dl
c001482f:	08 c2                	or     dl,al
c0014831:	74 79                	je     c00148ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014833:	84 c9                	test   cl,cl
c0014835:	75 05                	jne    c001483c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014837:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001483a:	eb 3c                	jmp    c0014878 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001483c:	80 f9 01             	cmp    cl,0x1
c001483f:	75 05                	jne    c0014846 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0014841:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014844:	eb 32                	jmp    c0014878 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014846:	80 f9 02             	cmp    cl,0x2
c0014849:	75 05                	jne    c0014850 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001484b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001484e:	eb 28                	jmp    c0014878 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014850:	31 c0                	xor    eax,eax
c0014852:	80 f9 03             	cmp    cl,0x3
c0014855:	75 05                	jne    c001485c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014857:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001485a:	eb 1c                	jmp    c0014878 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001485c:	80 f9 05             	cmp    cl,0x5
c001485f:	75 05                	jne    c0014866 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0014861:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014864:	eb 12                	jmp    c0014878 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014866:	80 f9 06             	cmp    cl,0x6
c0014869:	75 05                	jne    c0014870 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001486b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001486e:	eb 08                	jmp    c0014878 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014870:	80 f9 07             	cmp    cl,0x7
c0014873:	75 03                	jne    c0014878 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014875:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014878:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001487d:	75 10                	jne    c001488f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001487f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0014883:	b9 03 00 00 00       	mov    ecx,0x3
c0014888:	01 d0                	add    eax,edx
c001488a:	e9 37 01 00 00       	jmp    c00149c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001488f:	b9 02 00 00 00       	mov    ecx,0x2
c0014894:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0014899:	0f 85 27 01 00 00    	jne    c00149c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001489f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00148a2:	b9 06 00 00 00       	mov    ecx,0x6
c00148a7:	e9 1a 01 00 00       	jmp    c00149c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00148ac:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00148af:	b9 06 00 00 00       	mov    ecx,0x6
c00148b4:	e9 0f 01 00 00       	jmp    c00149c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00148b9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00148bc:	88 ca                	mov    dl,cl
c00148be:	c0 ea 06             	shr    dl,0x6
c00148c1:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00148c5:	89 ca                	mov    edx,ecx
c00148c7:	66 c1 ea 03          	shr    dx,0x3
c00148cb:	83 e2 07             	and    edx,0x7
c00148ce:	80 e1 07             	and    cl,0x7
c00148d1:	75 05                	jne    c00148d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00148d3:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00148d6:	eb 4c                	jmp    c0014924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00148d8:	80 f9 01             	cmp    cl,0x1
c00148db:	75 05                	jne    c00148e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00148dd:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00148e0:	eb 42                	jmp    c0014924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00148e2:	80 f9 02             	cmp    cl,0x2
c00148e5:	75 05                	jne    c00148ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00148e7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00148ea:	eb 38                	jmp    c0014924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00148ec:	80 f9 03             	cmp    cl,0x3
c00148ef:	75 05                	jne    c00148f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00148f1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00148f4:	eb 2e                	jmp    c0014924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00148f6:	80 f9 04             	cmp    cl,0x4
c00148f9:	75 12                	jne    c001490d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00148fb:	f6 c4 60             	test   ah,0x60
c00148fe:	75 08                	jne    c0014908 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0014900:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0014903:	8d 78 14             	lea    edi,[eax+0x14]
c0014906:	eb 1c                	jmp    c0014924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014908:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001490b:	eb 17                	jmp    c0014924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001490d:	80 f9 05             	cmp    cl,0x5
c0014910:	75 05                	jne    c0014917 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0014912:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014915:	eb 0d                	jmp    c0014924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014917:	80 f9 06             	cmp    cl,0x6
c001491a:	75 05                	jne    c0014921 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001491c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001491f:	eb 03                	jmp    c0014924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014921:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014924:	84 d2                	test   dl,dl
c0014926:	75 05                	jne    c001492d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014928:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001492b:	eb 3c                	jmp    c0014969 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001492d:	80 fa 01             	cmp    dl,0x1
c0014930:	75 05                	jne    c0014937 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014932:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014935:	eb 32                	jmp    c0014969 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014937:	80 fa 02             	cmp    dl,0x2
c001493a:	75 05                	jne    c0014941 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001493c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001493f:	eb 28                	jmp    c0014969 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014941:	80 fa 03             	cmp    dl,0x3
c0014944:	75 05                	jne    c001494b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014946:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014949:	eb 1e                	jmp    c0014969 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001494b:	31 c0                	xor    eax,eax
c001494d:	80 fa 04             	cmp    dl,0x4
c0014950:	74 17                	je     c0014969 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014952:	80 fa 05             	cmp    dl,0x5
c0014955:	75 05                	jne    c001495c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014957:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001495a:	eb 0d                	jmp    c0014969 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001495c:	80 fa 06             	cmp    dl,0x6
c001495f:	75 05                	jne    c0014966 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0014961:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014964:	eb 03                	jmp    c0014969 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014966:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014969:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001496e:	0f 94 c2             	sete   dl
c0014971:	80 f9 05             	cmp    cl,0x5
c0014974:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014978:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001497d:	d3 e0                	shl    eax,cl
c001497f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0014983:	74 0a                	je     c001498f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0014985:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014988:	b9 07 00 00 00       	mov    ecx,0x7
c001498d:	eb 37                	jmp    c00149c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001498f:	01 f8                	add    eax,edi
c0014991:	b9 03 00 00 00       	mov    ecx,0x3
c0014996:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001499b:	74 2b                	je     c00149c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001499d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00149a2:	75 0d                	jne    c00149b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00149a4:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00149a8:	01 c8                	add    eax,ecx
c00149aa:	b9 04 00 00 00       	mov    ecx,0x4
c00149af:	eb 17                	jmp    c00149c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00149b1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00149b4:	b9 07 00 00 00       	mov    ecx,0x7
c00149b9:	eb 0d                	jmp    c00149c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00149bb:	b9 02 00 00 00       	mov    ecx,0x2
c00149c0:	b2 01                	mov    dl,0x1
c00149c2:	31 c0                	xor    eax,eax
c00149c4:	eb 02                	jmp    c00149c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00149c6:	31 d2                	xor    edx,edx
c00149c8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00149cc:	89 0b                	mov    DWORD PTR [ebx],ecx
c00149ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00149d2:	88 11                	mov    BYTE PTR [ecx],dl
c00149d4:	5a                   	pop    edx
c00149d5:	5b                   	pop    ebx
c00149d6:	5e                   	pop    esi
c00149d7:	5f                   	pop    edi
c00149d8:	c3                   	ret    

c00149d9 <Krnl::smpEntry()>:
c00149d9:	eb fe                	jmp    c00149d9 <Krnl::smpEntry()>

c00149db <Krnl::startCPU(int)>:
c00149db:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c00149e0:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00149e7:	0f 84 36 01 00 00    	je     c0014b23 <Krnl::startCPU(int)+0x148>
c00149ed:	53                   	push   ebx
c00149ee:	83 ec 10             	sub    esp,0x10
c00149f1:	fa                   	cli    
c00149f2:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c00149f8:	6a 1b                	push   0x1b
c00149fa:	ff 35 28 89 02 c0    	push   DWORD PTR ds:0xc0028928
c0014a00:	e8 69 48 ff ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0014a05:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a0a:	89 c3                	mov    ebx,eax
c0014a0c:	58                   	pop    eax
c0014a0d:	5a                   	pop    edx
c0014a0e:	53                   	push   ebx
c0014a0f:	68 58 64 02 c0       	push   0xc0026458
c0014a14:	e8 2e 86 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0014a19:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a27:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014a31:	c1 e0 18             	shl    eax,0x18
c0014a34:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014a3a:	83 c4 10             	add    esp,0x10
c0014a3d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014a43:	09 c2                	or     edx,eax
c0014a45:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014a4b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014a51:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014a57:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014a5d:	80 cd c5             	or     ch,0xc5
c0014a60:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014a66:	f3 90                	pause  
c0014a68:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014a6a:	0f ba e1 0c          	bt     ecx,0xc
c0014a6e:	72 f6                	jb     c0014a66 <Krnl::startCPU(int)+0x8b>
c0014a70:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014a76:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014a7c:	09 c1                	or     ecx,eax
c0014a7e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014a84:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014a8a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014a90:	80 cd 85             	or     ch,0x85
c0014a93:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014a99:	f3 90                	pause  
c0014a9b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014a9d:	0f ba e1 0c          	bt     ecx,0xc
c0014aa1:	72 f6                	jb     c0014a99 <Krnl::startCPU(int)+0xbe>
c0014aa3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014aad:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014ab3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014ab9:	09 c1                	or     ecx,eax
c0014abb:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014ac1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014ac7:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014acd:	81 c9 02 06 00 00    	or     ecx,0x602
c0014ad3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014ad9:	f3 90                	pause  
c0014adb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014add:	0f ba e1 0c          	bt     ecx,0xc
c0014ae1:	72 f6                	jb     c0014ad9 <Krnl::startCPU(int)+0xfe>
c0014ae3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014aed:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014af3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014af9:	09 c8                	or     eax,ecx
c0014afb:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014b01:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014b07:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014b0c:	0d 02 06 00 00       	or     eax,0x602
c0014b11:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014b17:	f3 90                	pause  
c0014b19:	8b 02                	mov    eax,DWORD PTR [edx]
c0014b1b:	0f ba e0 0c          	bt     eax,0xc
c0014b1f:	72 f6                	jb     c0014b17 <Krnl::startCPU(int)+0x13c>
c0014b21:	eb fe                	jmp    c0014b21 <Krnl::startCPU(int)+0x146>
c0014b23:	c3                   	ret    

c0014b24 <Krnl::startCPUs()>:
c0014b24:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0014b29:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014b2f:	88 c2                	mov    dl,al
c0014b31:	83 e2 0a             	and    edx,0xa
c0014b34:	80 fa 0a             	cmp    dl,0xa
c0014b37:	75 09                	jne    c0014b42 <Krnl::startCPUs()+0x1e>
c0014b39:	a8 01                	test   al,0x1
c0014b3b:	74 05                	je     c0014b42 <Krnl::startCPUs()+0x1e>
c0014b3d:	e9 59 b6 fe ff       	jmp    c000019b <prepareTramp>
c0014b42:	c3                   	ret    
c0014b43:	90                   	nop

c0014b44 <EnvVarContainer::getEnv(char const*)>:
c0014b44:	57                   	push   edi
c0014b45:	56                   	push   esi
c0014b46:	53                   	push   ebx
c0014b47:	31 db                	xor    ebx,ebx
c0014b49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b4d:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014b4f:	7e 2b                	jle    c0014b7c <EnvVarContainer::getEnv(char const*)+0x38>
c0014b51:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014b58:	50                   	push   eax
c0014b59:	50                   	push   eax
c0014b5a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b5d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014b60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b64:	e8 63 bc fe ff       	call   c00007cc <strcmp>
c0014b69:	83 c4 10             	add    esp,0x10
c0014b6c:	85 c0                	test   eax,eax
c0014b6e:	75 09                	jne    c0014b79 <EnvVarContainer::getEnv(char const*)+0x35>
c0014b70:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b73:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014b77:	eb 05                	jmp    c0014b7e <EnvVarContainer::getEnv(char const*)+0x3a>
c0014b79:	43                   	inc    ebx
c0014b7a:	eb d1                	jmp    c0014b4d <EnvVarContainer::getEnv(char const*)+0x9>
c0014b7c:	31 c0                	xor    eax,eax
c0014b7e:	5b                   	pop    ebx
c0014b7f:	5e                   	pop    esi
c0014b80:	5f                   	pop    edi
c0014b81:	c3                   	ret    

c0014b82 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014b82:	55                   	push   ebp
c0014b83:	57                   	push   edi
c0014b84:	56                   	push   esi
c0014b85:	53                   	push   ebx
c0014b86:	83 ec 28             	sub    esp,0x28
c0014b89:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014b8d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014b91:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014b95:	56                   	push   esi
c0014b96:	e8 05 bb fe ff       	call   c00006a0 <strlen>
c0014b9b:	40                   	inc    eax
c0014b9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b9f:	e8 b7 51 ff ff       	call   c0009d5b <malloc>
c0014ba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ba7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bab:	e8 f0 ba fe ff       	call   c00006a0 <strlen>
c0014bb0:	40                   	inc    eax
c0014bb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0014bb4:	e8 a2 51 ff ff       	call   c0009d5b <malloc>
c0014bb9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bbc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bc0:	e8 db ba fe ff       	call   c00006a0 <strlen>
c0014bc5:	83 c4 0c             	add    esp,0xc
c0014bc8:	40                   	inc    eax
c0014bc9:	50                   	push   eax
c0014bca:	6a 00                	push   0x0
c0014bcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014bd0:	e8 af ba fe ff       	call   c0000684 <memset>
c0014bd5:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bd8:	e8 c3 ba fe ff       	call   c00006a0 <strlen>
c0014bdd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014be1:	8d 48 01             	lea    ecx,[eax+0x1]
c0014be4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014be6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014be9:	89 de                	mov    esi,ebx
c0014beb:	e8 b0 ba fe ff       	call   c00006a0 <strlen>
c0014bf0:	83 c4 0c             	add    esp,0xc
c0014bf3:	40                   	inc    eax
c0014bf4:	50                   	push   eax
c0014bf5:	6a 00                	push   0x0
c0014bf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bfb:	e8 84 ba fe ff       	call   c0000684 <memset>
c0014c00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c03:	e8 98 ba fe ff       	call   c00006a0 <strlen>
c0014c08:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014c0c:	8d 48 01             	lea    ecx,[eax+0x1]
c0014c0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c11:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c14:	40                   	inc    eax
c0014c15:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014c18:	c1 e0 03             	shl    eax,0x3
c0014c1b:	5a                   	pop    edx
c0014c1c:	59                   	pop    ecx
c0014c1d:	50                   	push   eax
c0014c1e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014c21:	e8 21 51 ff ff       	call   c0009d47 <realloc>
c0014c26:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014c2a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014c2d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014c30:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014c34:	b9 08 00 00 00       	mov    ecx,0x8
c0014c39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c3b:	83 c4 2c             	add    esp,0x2c
c0014c3e:	5b                   	pop    ebx
c0014c3f:	5e                   	pop    esi
c0014c40:	5f                   	pop    edi
c0014c41:	5d                   	pop    ebp
c0014c42:	c3                   	ret    
c0014c43:	90                   	nop

c0014c44 <EnvVarContainer::deleteEnv(char const*)>:
c0014c44:	c3                   	ret    
c0014c45:	90                   	nop

c0014c46 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014c46:	55                   	push   ebp
c0014c47:	57                   	push   edi
c0014c48:	56                   	push   esi
c0014c49:	53                   	push   ebx
c0014c4a:	81 ec 38 01 00 00    	sub    esp,0x138
c0014c50:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014c57:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014c5e:	68 14 01 00 00       	push   0x114
c0014c63:	e8 f3 50 ff ff       	call   c0009d5b <malloc>
c0014c68:	83 c4 0c             	add    esp,0xc
c0014c6b:	89 c3                	mov    ebx,eax
c0014c6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014c70:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014c77:	50                   	push   eax
c0014c78:	e8 35 89 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0014c7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c80:	e8 75 8c ff ff       	call   c000d8fa <File::exists()>
c0014c85:	83 c4 10             	add    esp,0x10
c0014c88:	84 c0                	test   al,al
c0014c8a:	75 31                	jne    c0014cbd <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014c8c:	50                   	push   eax
c0014c8d:	50                   	push   eax
c0014c8e:	6a 12                	push   0x12
c0014c90:	53                   	push   ebx
c0014c91:	e8 f6 89 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0014c96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c98:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c9e:	e8 fd b9 fe ff       	call   c00006a0 <strlen>
c0014ca3:	5a                   	pop    edx
c0014ca4:	31 d2                	xor    edx,edx
c0014ca6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014caa:	51                   	push   ecx
c0014cab:	56                   	push   esi
c0014cac:	52                   	push   edx
c0014cad:	50                   	push   eax
c0014cae:	53                   	push   ebx
c0014caf:	ff d7                	call   edi
c0014cb1:	83 c4 14             	add    esp,0x14
c0014cb4:	53                   	push   ebx
c0014cb5:	e8 30 8a ff ff       	call   c000d6ea <File::close()>
c0014cba:	83 c4 10             	add    esp,0x10
c0014cbd:	56                   	push   esi
c0014cbe:	31 f6                	xor    esi,esi
c0014cc0:	68 00 01 00 00       	push   0x100
c0014cc5:	6a 00                	push   0x0
c0014cc7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014ccb:	50                   	push   eax
c0014ccc:	e8 b3 b9 fe ff       	call   c0000684 <memset>
c0014cd1:	5f                   	pop    edi
c0014cd2:	58                   	pop    eax
c0014cd3:	6a 01                	push   0x1
c0014cd5:	53                   	push   ebx
c0014cd6:	e8 b1 89 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0014cdb:	83 c4 10             	add    esp,0x10
c0014cde:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ce6:	83 ec 0c             	sub    esp,0xc
c0014ce9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ceb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014cef:	51                   	push   ecx
c0014cf0:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014cf4:	52                   	push   edx
c0014cf5:	6a 00                	push   0x0
c0014cf7:	6a 01                	push   0x1
c0014cf9:	53                   	push   ebx
c0014cfa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cfd:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014d01:	83 c4 20             	add    esp,0x20
c0014d04:	3c 0d                	cmp    al,0xd
c0014d06:	0f 84 09 01 00 00    	je     c0014e15 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014d0c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014d11:	0f 84 ef 00 00 00    	je     c0014e06 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014d17:	3c 0a                	cmp    al,0xa
c0014d19:	74 13                	je     c0014d2e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014d1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d20:	74 0c                	je     c0014d2e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014d22:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014d28:	0f 8e d8 00 00 00    	jle    c0014e06 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014d2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014d32:	83 ec 0c             	sub    esp,0xc
c0014d35:	8d 78 01             	lea    edi,[eax+0x1]
c0014d38:	57                   	push   edi
c0014d39:	e8 1d 50 ff ff       	call   c0009d5b <malloc>
c0014d3e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014d42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d46:	8d 56 04             	lea    edx,[esi+0x4]
c0014d49:	89 14 24             	mov    DWORD PTR [esp],edx
c0014d4c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014d50:	e8 06 50 ff ff       	call   c0009d5b <malloc>
c0014d55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014d59:	83 c4 0c             	add    esp,0xc
c0014d5c:	57                   	push   edi
c0014d5d:	6a 00                	push   0x0
c0014d5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d63:	e8 1c b9 fe ff       	call   c0000684 <memset>
c0014d68:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014d6c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014d70:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014d74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d76:	83 c4 0c             	add    esp,0xc
c0014d79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014d7d:	52                   	push   edx
c0014d7e:	6a 00                	push   0x0
c0014d80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014d84:	e8 fb b8 fe ff       	call   c0000684 <memset>
c0014d89:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014d8d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014d91:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d94:	e8 07 b9 fe ff       	call   c00006a0 <strlen>
c0014d99:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014d9d:	89 c1                	mov    ecx,eax
c0014d9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014da1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014da4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014da7:	40                   	inc    eax
c0014da8:	83 c4 10             	add    esp,0x10
c0014dab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014dae:	85 d2                	test   edx,edx
c0014db0:	75 0c                	jne    c0014dbe <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014db2:	83 ec 0c             	sub    esp,0xc
c0014db5:	6a 08                	push   0x8
c0014db7:	e8 9f 4f ff ff       	call   c0009d5b <malloc>
c0014dbc:	eb 0c                	jmp    c0014dca <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014dbe:	c1 e0 03             	shl    eax,0x3
c0014dc1:	51                   	push   ecx
c0014dc2:	51                   	push   ecx
c0014dc3:	50                   	push   eax
c0014dc4:	52                   	push   edx
c0014dc5:	e8 7d 4f ff ff       	call   c0009d47 <realloc>
c0014dca:	83 c4 10             	add    esp,0x10
c0014dcd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014dd0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014dd3:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014dd6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014dda:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014dde:	b9 08 00 00 00       	mov    ecx,0x8
c0014de3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014de5:	31 f6                	xor    esi,esi
c0014de7:	50                   	push   eax
c0014de8:	68 00 01 00 00       	push   0x100
c0014ded:	6a 00                	push   0x0
c0014def:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014df3:	50                   	push   eax
c0014df4:	e8 8b b8 fe ff       	call   c0000684 <memset>
c0014df9:	83 c4 10             	add    esp,0x10
c0014dfc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014e04:	eb 0f                	jmp    c0014e15 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014e06:	3c 3d                	cmp    al,0x3d
c0014e08:	74 07                	je     c0014e11 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014e0a:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014e0e:	46                   	inc    esi
c0014e0f:	eb 04                	jmp    c0014e15 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014e11:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014e15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e1a:	0f 85 c6 fe ff ff    	jne    c0014ce6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014e20:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014e26:	5b                   	pop    ebx
c0014e27:	5e                   	pop    esi
c0014e28:	5f                   	pop    edi
c0014e29:	5d                   	pop    ebp
c0014e2a:	c3                   	ret    
c0014e2b:	90                   	nop

c0014e2c <EnvVarContainer::__loadSystem()>:
c0014e2c:	83 ec 10             	sub    esp,0x10
c0014e2f:	68 00 83 02 c0       	push   0xc0028300
c0014e34:	68 69 64 02 c0       	push   0xc0026469
c0014e39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e3d:	e8 04 fe ff ff       	call   c0014c46 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014e42:	83 c4 1c             	add    esp,0x1c
c0014e45:	c3                   	ret    

c0014e46 <EnvVarContainer::__loadUser()>:
c0014e46:	c3                   	ret    
c0014e47:	90                   	nop

c0014e48 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e5a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014e5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014e68:	90                   	nop
c0014e69:	c3                   	ret    

c0014e6a <EnvVarContainer::~EnvVarContainer()>:
c0014e6a:	83 ec 0c             	sub    esp,0xc
c0014e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e74:	85 c0                	test   eax,eax
c0014e76:	74 1d                	je     c0014e95 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e7e:	85 c0                	test   eax,eax
c0014e80:	74 13                	je     c0014e95 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e89:	83 ec 0c             	sub    esp,0xc
c0014e8c:	50                   	push   eax
c0014e8d:	e8 d9 4e ff ff       	call   c0009d6b <free>
c0014e92:	83 c4 10             	add    esp,0x10
c0014e95:	90                   	nop
c0014e96:	83 c4 0c             	add    esp,0xc
c0014e99:	c3                   	ret    

c0014e9a <Krnl::getEnv(Process*, char const*)>:
c0014e9a:	53                   	push   ebx
c0014e9b:	83 ec 08             	sub    esp,0x8
c0014e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ea2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ea6:	39 05 70 9e 02 c0    	cmp    DWORD PTR ds:0xc0029e70,eax
c0014eac:	74 04                	je     c0014eb2 <Krnl::getEnv(Process*, char const*)+0x18>
c0014eae:	85 c0                	test   eax,eax
c0014eb0:	75 0b                	jne    c0014ebd <Krnl::getEnv(Process*, char const*)+0x23>
c0014eb2:	a1 f4 93 02 c0       	mov    eax,ds:0xc00293f4
c0014eb7:	85 c0                	test   eax,eax
c0014eb9:	75 19                	jne    c0014ed4 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014ebb:	eb 27                	jmp    c0014ee4 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014ebd:	52                   	push   edx
c0014ebe:	52                   	push   edx
c0014ebf:	53                   	push   ebx
c0014ec0:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014ec6:	e8 79 fc ff ff       	call   c0014b44 <EnvVarContainer::getEnv(char const*)>
c0014ecb:	83 c4 10             	add    esp,0x10
c0014ece:	85 c0                	test   eax,eax
c0014ed0:	75 28                	jne    c0014efa <Krnl::getEnv(Process*, char const*)+0x60>
c0014ed2:	eb de                	jmp    c0014eb2 <Krnl::getEnv(Process*, char const*)+0x18>
c0014ed4:	52                   	push   edx
c0014ed5:	52                   	push   edx
c0014ed6:	53                   	push   ebx
c0014ed7:	50                   	push   eax
c0014ed8:	e8 67 fc ff ff       	call   c0014b44 <EnvVarContainer::getEnv(char const*)>
c0014edd:	83 c4 10             	add    esp,0x10
c0014ee0:	85 c0                	test   eax,eax
c0014ee2:	75 16                	jne    c0014efa <Krnl::getEnv(Process*, char const*)+0x60>
c0014ee4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014ee8:	a1 f8 93 02 c0       	mov    eax,ds:0xc00293f8
c0014eed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ef1:	83 c4 08             	add    esp,0x8
c0014ef4:	5b                   	pop    ebx
c0014ef5:	e9 4a fc ff ff       	jmp    c0014b44 <EnvVarContainer::getEnv(char const*)>
c0014efa:	83 c4 08             	add    esp,0x8
c0014efd:	5b                   	pop    ebx
c0014efe:	c3                   	ret    

c0014eff <Krnl::setEnvSystem(char const*, char const*)>:
c0014eff:	83 ec 10             	sub    esp,0x10
c0014f02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f0a:	ff 35 f8 93 02 c0    	push   DWORD PTR ds:0xc00293f8
c0014f10:	e8 6d fc ff ff       	call   c0014b82 <EnvVarContainer::setEnv(char const*, char const*)>
c0014f15:	83 c4 1c             	add    esp,0x1c
c0014f18:	c3                   	ret    

c0014f19 <Krnl::setEnvUser(char const*, char const*)>:
c0014f19:	a1 f4 93 02 c0       	mov    eax,ds:0xc00293f4
c0014f1e:	85 c0                	test   eax,eax
c0014f20:	74 15                	je     c0014f37 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014f22:	83 ec 10             	sub    esp,0x10
c0014f25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f2d:	50                   	push   eax
c0014f2e:	e8 4f fc ff ff       	call   c0014b82 <EnvVarContainer::setEnv(char const*, char const*)>
c0014f33:	83 c4 1c             	add    esp,0x1c
c0014f36:	c3                   	ret    
c0014f37:	c3                   	ret    

c0014f38 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f3c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014f42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f46:	e9 37 fc ff ff       	jmp    c0014b82 <EnvVarContainer::setEnv(char const*, char const*)>

c0014f4b <Krnl::deleteEnvSystem(char const*)>:
c0014f4b:	c3                   	ret    

c0014f4c <Krnl::deleteEnvUser(char const*)>:
c0014f4c:	c3                   	ret    

c0014f4d <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014f4d:	c3                   	ret    

c0014f4e <Krnl::newProcessEnv(Process*)>:
c0014f4e:	83 ec 28             	sub    esp,0x28
c0014f51:	6a 0c                	push   0xc
c0014f53:	e8 03 4e ff ff       	call   c0009d5b <malloc>
c0014f58:	5a                   	pop    edx
c0014f59:	59                   	pop    ecx
c0014f5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014f5e:	50                   	push   eax
c0014f5f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f63:	e8 e0 fe ff ff       	call   c0014e48 <EnvVarContainer::EnvVarContainer(Process*)>
c0014f68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f6c:	83 c4 2c             	add    esp,0x2c
c0014f6f:	c3                   	ret    

c0014f70 <Krnl::copyProcessEnv(Process*, Process*)>:
c0014f70:	57                   	push   edi
c0014f71:	56                   	push   esi
c0014f72:	53                   	push   ebx
c0014f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f77:	83 ec 0c             	sub    esp,0xc
c0014f7a:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014f80:	6a 0c                	push   0xc
c0014f82:	e8 d4 4d ff ff       	call   c0009d5b <malloc>
c0014f87:	89 c3                	mov    ebx,eax
c0014f89:	58                   	pop    eax
c0014f8a:	5a                   	pop    edx
c0014f8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f8f:	53                   	push   ebx
c0014f90:	e8 b3 fe ff ff       	call   c0014e48 <EnvVarContainer::EnvVarContainer(Process*)>
c0014f95:	8b 07                	mov    eax,DWORD PTR [edi]
c0014f97:	89 03                	mov    DWORD PTR [ebx],eax
c0014f99:	c1 e0 03             	shl    eax,0x3
c0014f9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f9f:	e8 b7 4d ff ff       	call   c0009d5b <malloc>
c0014fa4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014fa7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014fa9:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014fac:	c1 e1 03             	shl    ecx,0x3
c0014faf:	89 c7                	mov    edi,eax
c0014fb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014fb3:	83 c4 10             	add    esp,0x10
c0014fb6:	89 d8                	mov    eax,ebx
c0014fb8:	5b                   	pop    ebx
c0014fb9:	5e                   	pop    esi
c0014fba:	5f                   	pop    edi
c0014fbb:	c3                   	ret    

c0014fbc <Krnl::loadSystemEnv()>:
c0014fbc:	53                   	push   ebx
c0014fbd:	83 ec 14             	sub    esp,0x14
c0014fc0:	6a 0c                	push   0xc
c0014fc2:	e8 94 4d ff ff       	call   c0009d5b <malloc>
c0014fc7:	89 c3                	mov    ebx,eax
c0014fc9:	58                   	pop    eax
c0014fca:	5a                   	pop    edx
c0014fcb:	ff 35 70 9e 02 c0    	push   DWORD PTR ds:0xc0029e70
c0014fd1:	53                   	push   ebx
c0014fd2:	e8 71 fe ff ff       	call   c0014e48 <EnvVarContainer::EnvVarContainer(Process*)>
c0014fd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014fda:	89 1d f8 93 02 c0    	mov    DWORD PTR ds:0xc00293f8,ebx
c0014fe0:	e8 47 fe ff ff       	call   c0014e2c <EnvVarContainer::__loadSystem()>
c0014fe5:	83 c4 18             	add    esp,0x18
c0014fe8:	5b                   	pop    ebx
c0014fe9:	c3                   	ret    

c0014fea <Krnl::loadUserEnv()>:
c0014fea:	53                   	push   ebx
c0014feb:	83 ec 14             	sub    esp,0x14
c0014fee:	6a 0c                	push   0xc
c0014ff0:	e8 66 4d ff ff       	call   c0009d5b <malloc>
c0014ff5:	89 c3                	mov    ebx,eax
c0014ff7:	58                   	pop    eax
c0014ff8:	5a                   	pop    edx
c0014ff9:	ff 35 70 9e 02 c0    	push   DWORD PTR ds:0xc0029e70
c0014fff:	53                   	push   ebx
c0015000:	e8 43 fe ff ff       	call   c0014e48 <EnvVarContainer::EnvVarContainer(Process*)>
c0015005:	89 1d f4 93 02 c0    	mov    DWORD PTR ds:0xc00293f4,ebx
c001500b:	83 c4 18             	add    esp,0x18
c001500e:	5b                   	pop    ebx
c001500f:	c3                   	ret    

c0015010 <Krnl::flushEnv()>:
c0015010:	c3                   	ret    

c0015011 <Krnl::getProcessTotalEnvCount(Process*)>:
c0015011:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015015:	8b 15 f4 93 02 c0    	mov    edx,DWORD PTR ds:0xc00293f4
c001501b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0015021:	a1 f8 93 02 c0       	mov    eax,ds:0xc00293f8
c0015026:	8b 00                	mov    eax,DWORD PTR [eax]
c0015028:	03 01                	add    eax,DWORD PTR [ecx]
c001502a:	85 d2                	test   edx,edx
c001502c:	74 02                	je     c0015030 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001502e:	03 02                	add    eax,DWORD PTR [edx]
c0015030:	c3                   	ret    

c0015031 <Krnl::getProcessEnvPair(Process*, int)>:
c0015031:	57                   	push   edi
c0015032:	56                   	push   esi
c0015033:	8b 35 f4 93 02 c0    	mov    esi,DWORD PTR ds:0xc00293f4
c0015039:	53                   	push   ebx
c001503a:	85 f6                	test   esi,esi
c001503c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015040:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015044:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001504a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001504e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015050:	75 16                	jne    c0015068 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0015052:	39 c2                	cmp    edx,eax
c0015054:	7c 16                	jl     c001506c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0015056:	8b 0d f8 93 02 c0    	mov    ecx,DWORD PTR ds:0xc00293f8
c001505c:	8b 31                	mov    esi,DWORD PTR [ecx]
c001505e:	01 c6                	add    esi,eax
c0015060:	39 d6                	cmp    esi,edx
c0015062:	7e 3c                	jle    c00150a0 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0015064:	29 c2                	sub    edx,eax
c0015066:	eb 04                	jmp    c001506c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0015068:	39 c2                	cmp    edx,eax
c001506a:	7d 05                	jge    c0015071 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001506c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001506f:	eb 20                	jmp    c0015091 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0015071:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015073:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0015076:	39 d1                	cmp    ecx,edx
c0015078:	7e 04                	jle    c001507e <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001507a:	29 c2                	sub    edx,eax
c001507c:	eb 10                	jmp    c001508e <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001507e:	8b 35 f8 93 02 c0    	mov    esi,DWORD PTR ds:0xc00293f8
c0015084:	03 0e                	add    ecx,DWORD PTR [esi]
c0015086:	39 d1                	cmp    ecx,edx
c0015088:	7e 16                	jle    c00150a0 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001508a:	29 c2                	sub    edx,eax
c001508c:	29 fa                	sub    edx,edi
c001508e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015091:	8d 14 d0             	lea    edx,[eax+edx*8]
c0015094:	8b 02                	mov    eax,DWORD PTR [edx]
c0015096:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015099:	89 03                	mov    DWORD PTR [ebx],eax
c001509b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001509e:	eb 1d                	jmp    c00150bd <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00150a0:	83 ec 0c             	sub    esp,0xc
c00150a3:	68 8b 64 02 c0       	push   0xc002648b
c00150a8:	e8 18 00 00 00       	call   c00150c5 <Krnl::panic(char const*)>
c00150ad:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00150b3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00150ba:	83 c4 10             	add    esp,0x10
c00150bd:	89 d8                	mov    eax,ebx
c00150bf:	5b                   	pop    ebx
c00150c0:	5e                   	pop    esi
c00150c1:	5f                   	pop    edi
c00150c2:	c2 04 00             	ret    0x4

c00150c5 <Krnl::panic(char const*)>:
c00150c5:	53                   	push   ebx
c00150c6:	83 ec 10             	sub    esp,0x10
c00150c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00150cd:	fa                   	cli    
c00150ce:	c6 05 04 94 02 c0 01 	mov    BYTE PTR ds:0xc0029404,0x1
c00150d5:	53                   	push   ebx
c00150d6:	68 a5 64 02 c0       	push   0xc00264a5
c00150db:	e8 67 7f ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00150e0:	83 c4 0c             	add    esp,0xc
c00150e3:	6a 01                	push   0x1
c00150e5:	6a 0f                	push   0xf
c00150e7:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c00150ed:	e8 c2 5b ff ff       	call   c000acb4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00150f2:	59                   	pop    ecx
c00150f3:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c00150f9:	e8 d8 60 ff ff       	call   c000b1d6 <VgaText::clearScreen()>
c00150fe:	58                   	pop    eax
c00150ff:	5a                   	pop    edx
c0015100:	68 fc 64 02 c0       	push   0xc00264fc
c0015105:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c001510b:	e8 e4 5b ff ff       	call   c000acf4 <VgaText::setTitle(char*)>
c0015110:	83 c4 0c             	add    esp,0xc
c0015113:	6a 01                	push   0x1
c0015115:	6a 0f                	push   0xf
c0015117:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c001511d:	e8 92 5b ff ff       	call   c000acb4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015122:	59                   	pop    ecx
c0015123:	58                   	pop    eax
c0015124:	68 be 64 02 c0       	push   0xc00264be
c0015129:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c001512f:	e8 2e 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015134:	58                   	pop    eax
c0015135:	5a                   	pop    edx
c0015136:	68 48 65 02 c0       	push   0xc0026548
c001513b:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c0015141:	e8 1c 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015146:	59                   	pop    ecx
c0015147:	58                   	pop    eax
c0015148:	68 da 64 02 c0       	push   0xc00264da
c001514d:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c0015153:	e8 0a 62 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015158:	58                   	pop    eax
c0015159:	5a                   	pop    edx
c001515a:	53                   	push   ebx
c001515b:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c0015161:	e8 fc 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015166:	59                   	pop    ecx
c0015167:	5b                   	pop    ebx
c0015168:	68 fa 64 02 c0       	push   0xc00264fa
c001516d:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c0015173:	e8 ea 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015178:	58                   	pop    eax
c0015179:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001517d:	e8 17 31 00 00       	call   c0018299 <Thr::getDriverNameFromAddress(unsigned long)>
c0015182:	83 c4 10             	add    esp,0x10
c0015185:	85 c0                	test   eax,eax
c0015187:	0f 84 36 01 00 00    	je     c00152c3 <Krnl::panic(char const*)+0x1fe>
c001518d:	83 ec 08             	sub    esp,0x8
c0015190:	89 c3                	mov    ebx,eax
c0015192:	68 84 65 02 c0       	push   0xc0026584
c0015197:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c001519d:	e8 c0 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151a2:	59                   	pop    ecx
c00151a3:	58                   	pop    eax
c00151a4:	68 da 64 02 c0       	push   0xc00264da
c00151a9:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c00151af:	e8 ae 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151b4:	58                   	pop    eax
c00151b5:	5a                   	pop    edx
c00151b6:	53                   	push   ebx
c00151b7:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c00151bd:	e8 a0 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151c2:	83 c4 10             	add    esp,0x10
c00151c5:	83 ec 08             	sub    esp,0x8
c00151c8:	68 f9 64 02 c0       	push   0xc00264f9
c00151cd:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c00151d3:	e8 8a 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151d8:	58                   	pop    eax
c00151d9:	5a                   	pop    edx
c00151da:	68 dc 65 02 c0       	push   0xc00265dc
c00151df:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c00151e5:	e8 78 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151ea:	59                   	pop    ecx
c00151eb:	5b                   	pop    ebx
c00151ec:	68 1c 66 02 c0       	push   0xc002661c
c00151f1:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c00151f7:	e8 66 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00151fc:	58                   	pop    eax
c00151fd:	5a                   	pop    edx
c00151fe:	68 e5 64 02 c0       	push   0xc00264e5
c0015203:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c0015209:	e8 54 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c001520e:	59                   	pop    ecx
c001520f:	5b                   	pop    ebx
c0015210:	68 60 66 02 c0       	push   0xc0026660
c0015215:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c001521b:	e8 42 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015220:	58                   	pop    eax
c0015221:	5a                   	pop    edx
c0015222:	68 fd 64 02 c0       	push   0xc00264fd
c0015227:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c001522d:	e8 30 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015232:	0f 20 c0             	mov    eax,cr0
c0015235:	59                   	pop    ecx
c0015236:	5b                   	pop    ebx
c0015237:	50                   	push   eax
c0015238:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c001523e:	e8 d9 60 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c0015243:	58                   	pop    eax
c0015244:	5a                   	pop    edx
c0015245:	68 07 65 02 c0       	push   0xc0026507
c001524a:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c0015250:	e8 0d 61 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015255:	0f 20 d0             	mov    eax,cr2
c0015258:	59                   	pop    ecx
c0015259:	5b                   	pop    ebx
c001525a:	50                   	push   eax
c001525b:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c0015261:	e8 b6 60 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c0015266:	58                   	pop    eax
c0015267:	5a                   	pop    edx
c0015268:	68 11 65 02 c0       	push   0xc0026511
c001526d:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c0015273:	e8 ea 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015278:	0f 20 d8             	mov    eax,cr3
c001527b:	59                   	pop    ecx
c001527c:	5b                   	pop    ebx
c001527d:	50                   	push   eax
c001527e:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c0015284:	e8 93 60 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c0015289:	58                   	pop    eax
c001528a:	5a                   	pop    edx
c001528b:	68 24 65 02 c0       	push   0xc0026524
c0015290:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c0015296:	e8 c7 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c001529b:	0f 20 e0             	mov    eax,cr4
c001529e:	59                   	pop    ecx
c001529f:	5b                   	pop    ebx
c00152a0:	50                   	push   eax
c00152a1:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c00152a7:	e8 70 60 ff ff       	call   c000b31c <VgaText::putx(unsigned int)>
c00152ac:	58                   	pop    eax
c00152ad:	5a                   	pop    edx
c00152ae:	68 2e 65 02 c0       	push   0xc002652e
c00152b3:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c00152b9:	e8 a4 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00152be:	83 c4 10             	add    esp,0x10
c00152c1:	eb fe                	jmp    c00152c1 <Krnl::panic(char const*)+0x1fc>
c00152c3:	51                   	push   ecx
c00152c4:	51                   	push   ecx
c00152c5:	68 b0 65 02 c0       	push   0xc00265b0
c00152ca:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c00152d0:	e8 8d 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00152d5:	5b                   	pop    ebx
c00152d6:	58                   	pop    eax
c00152d7:	68 da 64 02 c0       	push   0xc00264da
c00152dc:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c00152e2:	e8 7b 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c00152e7:	58                   	pop    eax
c00152e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152ed:	5a                   	pop    edx
c00152ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152f1:	83 c0 0c             	add    eax,0xc
c00152f4:	50                   	push   eax
c00152f5:	ff 35 a4 89 02 c0    	push   DWORD PTR ds:0xc00289a4
c00152fb:	e8 62 60 ff ff       	call   c000b362 <VgaText::puts(char const*)>
c0015300:	83 c4 10             	add    esp,0x10
c0015303:	e9 bd fe ff ff       	jmp    c00151c5 <Krnl::panic(char const*)+0x100>

c0015308 <Krnl::powerThread(void*)>:
c0015308:	53                   	push   ebx
c0015309:	83 ec 08             	sub    esp,0x8
c001530c:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0015311:	48                   	dec    eax
c0015312:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0015317:	75 01                	jne    c001531a <Krnl::powerThread(void*)+0x12>
c0015319:	fb                   	sti    
c001531a:	52                   	push   edx
c001531b:	52                   	push   edx
c001531c:	ff 35 64 94 02 c0    	push   DWORD PTR ds:0xc0029464
c0015322:	68 86 66 02 c0       	push   0xc0026686
c0015327:	e8 1b 7d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001532c:	59                   	pop    ecx
c001532d:	8b 1d 54 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029454
c0015333:	58                   	pop    eax
c0015334:	c6 05 20 94 02 c0 00 	mov    BYTE PTR ds:0xc0029420,0x0
c001533b:	53                   	push   ebx
c001533c:	68 90 66 02 c0       	push   0xc0026690
c0015341:	e8 01 7d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0015346:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001534d:	e8 86 3c 00 00       	call   c0018fd8 <sleep(unsigned int)>
c0015352:	a1 64 94 02 c0       	mov    eax,ds:0xc0029464
c0015357:	83 c4 10             	add    esp,0x10
c001535a:	83 c0 0a             	add    eax,0xa
c001535d:	85 db                	test   ebx,ebx
c001535f:	a3 64 94 02 c0       	mov    ds:0xc0029464,eax
c0015364:	74 b4                	je     c001531a <Krnl::powerThread(void*)+0x12>
c0015366:	39 d8                	cmp    eax,ebx
c0015368:	7e b0                	jle    c001531a <Krnl::powerThread(void*)+0x12>
c001536a:	83 ec 0c             	sub    esp,0xc
c001536d:	68 a8 66 02 c0       	push   0xc00266a8
c0015372:	e8 d0 7c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0015377:	58                   	pop    eax
c0015378:	ff 35 28 89 02 c0    	push   DWORD PTR ds:0xc0028928
c001537e:	e8 7f 3f ff ff       	call   c0009302 <Computer::sleep()>
c0015383:	83 c4 10             	add    esp,0x10
c0015386:	eb 92                	jmp    c001531a <Krnl::powerThread(void*)+0x12>

c0015388 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0015388:	57                   	push   edi
c0015389:	b9 09 00 00 00       	mov    ecx,0x9
c001538e:	56                   	push   esi
c001538f:	bf 40 94 02 c0       	mov    edi,0xc0029440
c0015394:	fc                   	cld    
c0015395:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015399:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001539b:	5e                   	pop    esi
c001539c:	5f                   	pop    edi
c001539d:	c3                   	ret    

c001539e <Krnl::userIOReceived()>:
c001539e:	c7 05 64 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029464,0x0
c00153a8:	c3                   	ret    

c00153a9 <Krnl::handlePowerButton()>:
c00153a9:	83 ec 0c             	sub    esp,0xc
c00153ac:	a1 40 94 02 c0       	mov    eax,ds:0xc0029440
c00153b1:	83 f8 02             	cmp    eax,0x2
c00153b4:	75 10                	jne    c00153c6 <Krnl::handlePowerButton()+0x1d>
c00153b6:	83 ec 0c             	sub    esp,0xc
c00153b9:	ff 35 28 89 02 c0    	push   DWORD PTR ds:0xc0028928
c00153bf:	e8 0e 3f ff ff       	call   c00092d2 <Computer::shutdown()>
c00153c4:	eb 11                	jmp    c00153d7 <Krnl::handlePowerButton()+0x2e>
c00153c6:	48                   	dec    eax
c00153c7:	75 11                	jne    c00153da <Krnl::handlePowerButton()+0x31>
c00153c9:	83 ec 0c             	sub    esp,0xc
c00153cc:	ff 35 28 89 02 c0    	push   DWORD PTR ds:0xc0028928
c00153d2:	e8 2b 3f ff ff       	call   c0009302 <Computer::sleep()>
c00153d7:	83 c4 10             	add    esp,0x10
c00153da:	83 c4 0c             	add    esp,0xc
c00153dd:	c3                   	ret    

c00153de <Krnl::handleSleepButton()>:
c00153de:	83 ec 0c             	sub    esp,0xc
c00153e1:	a1 44 94 02 c0       	mov    eax,ds:0xc0029444
c00153e6:	83 f8 02             	cmp    eax,0x2
c00153e9:	75 10                	jne    c00153fb <Krnl::handleSleepButton()+0x1d>
c00153eb:	83 ec 0c             	sub    esp,0xc
c00153ee:	ff 35 28 89 02 c0    	push   DWORD PTR ds:0xc0028928
c00153f4:	e8 d9 3e ff ff       	call   c00092d2 <Computer::shutdown()>
c00153f9:	eb 11                	jmp    c001540c <Krnl::handleSleepButton()+0x2e>
c00153fb:	48                   	dec    eax
c00153fc:	75 11                	jne    c001540f <Krnl::handleSleepButton()+0x31>
c00153fe:	83 ec 0c             	sub    esp,0xc
c0015401:	ff 35 28 89 02 c0    	push   DWORD PTR ds:0xc0028928
c0015407:	e8 f6 3e ff ff       	call   c0009302 <Computer::sleep()>
c001540c:	83 c4 10             	add    esp,0x10
c001540f:	83 c4 0c             	add    esp,0xc
c0015412:	c3                   	ret    

c0015413 <Krnl::setupPowerManager()>:
c0015413:	83 ec 0c             	sub    esp,0xc
c0015416:	c7 05 64 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029464,0x0
c0015420:	68 f0 00 00 00       	push   0xf0
c0015425:	c6 05 20 94 02 c0 00 	mov    BYTE PTR ds:0xc0029420,0x0
c001542c:	6a 00                	push   0x0
c001542e:	68 08 53 01 c0       	push   0xc0015308
c0015433:	ff 35 70 9e 02 c0    	push   DWORD PTR ds:0xc0029e70
c0015439:	e8 76 36 00 00       	call   c0018ab4 <Process::createThread(void (*)(void*), void*, int)>
c001543e:	c7 05 40 94 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029440,0x2
c0015448:	c7 05 44 94 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029444,0x1
c0015452:	c7 05 48 94 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029448,0x3
c001545c:	c7 05 4c 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002944c,0x0
c0015466:	c7 05 58 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029458,0x0
c0015470:	c7 05 50 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029450,0x0
c001547a:	c7 05 5c 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002945c,0x0
c0015484:	c7 05 54 94 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029454,0x3c
c001548e:	c7 05 60 94 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029460,0x3c
c0015498:	83 c4 1c             	add    esp,0x1c
c001549b:	c3                   	ret    

c001549c <Net::switchEndian16(unsigned short)>:
c001549c:	83 ec 04             	sub    esp,0x4
c001549f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00154a3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00154a7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00154ab:	c1 f8 08             	sar    eax,0x8
c00154ae:	89 c2                	mov    edx,eax
c00154b0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00154b4:	c1 e0 08             	shl    eax,0x8
c00154b7:	09 d0                	or     eax,edx
c00154b9:	83 c4 04             	add    esp,0x4
c00154bc:	c3                   	ret    
c00154bd:	8d 76 00             	lea    esi,[esi+0x0]

c00154c0 <Net::switchEndian32(unsigned int)>:
c00154c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154c4:	c1 e8 18             	shr    eax,0x18
c00154c7:	89 c2                	mov    edx,eax
c00154c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154cd:	c1 e0 08             	shl    eax,0x8
c00154d0:	25 00 00 ff 00       	and    eax,0xff0000
c00154d5:	09 c2                	or     edx,eax
c00154d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154db:	c1 e8 08             	shr    eax,0x8
c00154de:	25 00 ff 00 00       	and    eax,0xff00
c00154e3:	09 c2                	or     edx,eax
c00154e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154e9:	c1 e0 18             	shl    eax,0x18
c00154ec:	09 d0                	or     eax,edx
c00154ee:	c3                   	ret    
c00154ef:	90                   	nop

c00154f0 <Net::crc32Calc(unsigned char*, int)>:
c00154f0:	83 ec 10             	sub    esp,0x10
c00154f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00154f8:	75 0a                	jne    c0015504 <Net::crc32Calc(unsigned char*, int)+0x14>
c00154fa:	b8 00 00 00 00       	mov    eax,0x0
c00154ff:	e9 8c 00 00 00       	jmp    c0015590 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015504:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015509:	7f 09                	jg     c0015514 <Net::crc32Calc(unsigned char*, int)+0x24>
c001550b:	b8 00 00 00 00       	mov    eax,0x0
c0015510:	eb 7e                	jmp    c0015590 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015512:	66 90                	xchg   ax,ax
c0015514:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001551c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015528:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001552c:	7d 5a                	jge    c0015588 <Net::crc32Calc(unsigned char*, int)+0x98>
c001552e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015532:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015536:	01 d0                	add    eax,edx
c0015538:	8a 00                	mov    al,BYTE PTR [eax]
c001553a:	0f b6 c0             	movzx  eax,al
c001553d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0015541:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015549:	8d 76 00             	lea    esi,[esi+0x0]
c001554c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0015551:	7f 2d                	jg     c0015580 <Net::crc32Calc(unsigned char*, int)+0x90>
c0015553:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015557:	83 e0 01             	and    eax,0x1
c001555a:	74 10                	je     c001556c <Net::crc32Calc(unsigned char*, int)+0x7c>
c001555c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015560:	d1 e8                	shr    eax,1
c0015562:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0015567:	eb 0b                	jmp    c0015574 <Net::crc32Calc(unsigned char*, int)+0x84>
c0015569:	8d 76 00             	lea    esi,[esi+0x0]
c001556c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015570:	d1 e8                	shr    eax,1
c0015572:	66 90                	xchg   ax,ax
c0015574:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015578:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001557c:	eb ce                	jmp    c001554c <Net::crc32Calc(unsigned char*, int)+0x5c>
c001557e:	66 90                	xchg   ax,ax
c0015580:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015584:	eb 9e                	jmp    c0015524 <Net::crc32Calc(unsigned char*, int)+0x34>
c0015586:	66 90                	xchg   ax,ax
c0015588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001558c:	f7 d0                	not    eax
c001558e:	66 90                	xchg   ax,ax
c0015590:	83 c4 10             	add    esp,0x10
c0015593:	c3                   	ret    

c0015594 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0015594:	57                   	push   edi
c0015595:	56                   	push   esi
c0015596:	53                   	push   ebx
c0015597:	83 ec 60             	sub    esp,0x60
c001559a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00155a1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00155a5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00155ad:	8d 76 00             	lea    esi,[esi+0x0]
c00155b0:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00155b5:	7f 1d                	jg     c00155d4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00155b7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00155be:	8d 50 01             	lea    edx,[eax+0x1]
c00155c1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00155c8:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c00155cb:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00155cf:	eb df                	jmp    c00155b0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c00155d1:	8d 76 00             	lea    esi,[esi+0x0]
c00155d4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00155db:	8d 50 01             	lea    edx,[eax+0x1]
c00155de:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00155e5:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c00155e8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00155ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00155f3:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c00155f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00155fb:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0015603:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015607:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001560b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001560f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015613:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015617:	89 c6                	mov    esi,eax
c0015619:	89 d7                	mov    edi,edx
c001561b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001561d:	89 c8                	mov    eax,ecx
c001561f:	89 fa                	mov    edx,edi
c0015621:	89 f3                	mov    ebx,esi
c0015623:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015627:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001562b:	89 04 24             	mov    DWORD PTR [esp],eax
c001562e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015636:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001563d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015641:	8d 44 24 78          	lea    eax,[esp+0x78]
c0015645:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015649:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015651:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015655:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015659:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001565d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015661:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015665:	89 c6                	mov    esi,eax
c0015667:	89 d7                	mov    edi,edx
c0015669:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001566b:	89 c8                	mov    eax,ecx
c001566d:	89 fa                	mov    edx,edi
c001566f:	89 f3                	mov    ebx,esi
c0015671:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015675:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015679:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001567d:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015685:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001568c:	0f b7 c0             	movzx  eax,ax
c001568f:	c1 f8 08             	sar    eax,0x8
c0015692:	89 c1                	mov    ecx,eax
c0015694:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001569b:	8d 50 01             	lea    edx,[eax+0x1]
c001569e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00156a5:	88 ca                	mov    dl,cl
c00156a7:	88 10                	mov    BYTE PTR [eax],dl
c00156a9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00156b0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00156b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00156ba:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00156c1:	88 10                	mov    BYTE PTR [eax],dl
c00156c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00156c7:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00156cb:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00156d2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c00156d6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00156da:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00156de:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00156e2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00156e6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00156ea:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00156ee:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00156f2:	89 c6                	mov    esi,eax
c00156f4:	89 d7                	mov    edi,edx
c00156f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00156f8:	89 c8                	mov    eax,ecx
c00156fa:	89 fa                	mov    edx,edi
c00156fc:	89 f3                	mov    ebx,esi
c00156fe:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015702:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015706:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001570a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001570e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015715:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001571c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0015720:	50                   	push   eax
c0015721:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015725:	e8 c6 fd ff ff       	call   c00154f0 <Net::crc32Calc(unsigned char*, int)>
c001572a:	83 c4 08             	add    esp,0x8
c001572d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015731:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015735:	c1 e8 18             	shr    eax,0x18
c0015738:	89 c1                	mov    ecx,eax
c001573a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015741:	8d 50 01             	lea    edx,[eax+0x1]
c0015744:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001574b:	88 ca                	mov    dl,cl
c001574d:	88 10                	mov    BYTE PTR [eax],dl
c001574f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015753:	c1 e8 10             	shr    eax,0x10
c0015756:	89 c1                	mov    ecx,eax
c0015758:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001575f:	8d 50 01             	lea    edx,[eax+0x1]
c0015762:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015769:	88 ca                	mov    dl,cl
c001576b:	88 10                	mov    BYTE PTR [eax],dl
c001576d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015771:	c1 e8 08             	shr    eax,0x8
c0015774:	89 c1                	mov    ecx,eax
c0015776:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001577d:	8d 50 01             	lea    edx,[eax+0x1]
c0015780:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015787:	88 ca                	mov    dl,cl
c0015789:	88 10                	mov    BYTE PTR [eax],dl
c001578b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015792:	8d 50 01             	lea    edx,[eax+0x1]
c0015795:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001579c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00157a0:	88 10                	mov    BYTE PTR [eax],dl
c00157a2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00157a6:	83 c4 60             	add    esp,0x60
c00157a9:	5b                   	pop    ebx
c00157aa:	5e                   	pop    esi
c00157ab:	5f                   	pop    edi
c00157ac:	c3                   	ret    
c00157ad:	8d 76 00             	lea    esi,[esi+0x0]

c00157b0 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00157b0:	57                   	push   edi
c00157b1:	56                   	push   esi
c00157b2:	53                   	push   ebx
c00157b3:	83 ec 70             	sub    esp,0x70
c00157b6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00157bd:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00157c1:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00157c9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00157d0:	83 c0 0e             	add    eax,0xe
c00157d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00157d7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00157de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00157e2:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00157ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00157ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00157f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00157fa:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00157fe:	89 c6                	mov    esi,eax
c0015800:	89 d7                	mov    edi,edx
c0015802:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015804:	89 c8                	mov    eax,ecx
c0015806:	89 fa                	mov    edx,edi
c0015808:	89 f3                	mov    ebx,esi
c001580a:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001580e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015812:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015816:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001581e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015825:	83 c0 08             	add    eax,0x8
c0015828:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001582c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015833:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015837:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001583f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015843:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015847:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001584b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001584f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015853:	89 c6                	mov    esi,eax
c0015855:	89 d7                	mov    edi,edx
c0015857:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015859:	89 c8                	mov    eax,ecx
c001585b:	89 fa                	mov    edx,edi
c001585d:	89 f3                	mov    ebx,esi
c001585f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015863:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015867:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001586b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015873:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001587a:	8d 50 01             	lea    edx,[eax+0x1]
c001587d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015884:	8a 00                	mov    al,BYTE PTR [eax]
c0015886:	0f b6 c0             	movzx  eax,al
c0015889:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001588e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015895:	8d 50 01             	lea    edx,[eax+0x1]
c0015898:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001589f:	8a 00                	mov    al,BYTE PTR [eax]
c00158a1:	0f b6 c0             	movzx  eax,al
c00158a4:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c00158a9:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c00158ae:	c1 e0 08             	shl    eax,0x8
c00158b1:	89 c2                	mov    edx,eax
c00158b3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00158b7:	09 d0                	or     eax,edx
c00158b9:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00158c0:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c00158c4:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c00158cc:	75 46                	jne    c0015914 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c00158ce:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00158d5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00158d8:	66 3d dc 05          	cmp    ax,0x5dc
c00158dc:	77 16                	ja     c00158f4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c00158de:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00158e5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00158e8:	0f b7 c0             	movzx  eax,ax
c00158eb:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c00158f2:	eb 20                	jmp    c0015914 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c00158f4:	83 ec 0c             	sub    esp,0xc
c00158f7:	68 b8 66 02 c0       	push   0xc00266b8
c00158fc:	e8 46 77 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0015901:	83 c4 10             	add    esp,0x10
c0015904:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001590b:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001590f:	e9 18 01 00 00       	jmp    c0015a2c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015914:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001591b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015922:	8b 12                	mov    edx,DWORD PTR [edx]
c0015924:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015928:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001592f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015933:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015937:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001593b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001593f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015943:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015947:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001594b:	89 c6                	mov    esi,eax
c001594d:	89 d7                	mov    edi,edx
c001594f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015951:	89 c8                	mov    eax,ecx
c0015953:	89 fa                	mov    edx,edi
c0015955:	89 f3                	mov    ebx,esi
c0015957:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001595b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001595f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015962:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015969:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0015970:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015977:	8d 50 01             	lea    edx,[eax+0x1]
c001597a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015981:	8a 00                	mov    al,BYTE PTR [eax]
c0015983:	0f b6 c0             	movzx  eax,al
c0015986:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001598a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015991:	8d 50 01             	lea    edx,[eax+0x1]
c0015994:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001599b:	8a 00                	mov    al,BYTE PTR [eax]
c001599d:	0f b6 c0             	movzx  eax,al
c00159a0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00159a4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00159ab:	8d 50 01             	lea    edx,[eax+0x1]
c00159ae:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00159b5:	8a 00                	mov    al,BYTE PTR [eax]
c00159b7:	0f b6 c0             	movzx  eax,al
c00159ba:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00159be:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00159c5:	8d 50 01             	lea    edx,[eax+0x1]
c00159c8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00159cf:	8a 00                	mov    al,BYTE PTR [eax]
c00159d1:	0f b6 c0             	movzx  eax,al
c00159d4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00159d8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00159dc:	c1 e0 18             	shl    eax,0x18
c00159df:	89 c2                	mov    edx,eax
c00159e1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00159e5:	c1 e0 10             	shl    eax,0x10
c00159e8:	09 c2                	or     edx,eax
c00159ea:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00159ee:	c1 e0 08             	shl    eax,0x8
c00159f1:	09 d0                	or     eax,edx
c00159f3:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c00159f7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00159fb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a02:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015a06:	83 e8 04             	sub    eax,0x4
c0015a09:	83 ec 08             	sub    esp,0x8
c0015a0c:	50                   	push   eax
c0015a0d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015a11:	e8 da fa ff ff       	call   c00154f0 <Net::crc32Calc(unsigned char*, int)>
c0015a16:	83 c4 10             	add    esp,0x10
c0015a19:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015a1d:	0f 94 c2             	sete   dl
c0015a20:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015a27:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015a2a:	90                   	nop
c0015a2b:	90                   	nop
c0015a2c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015a33:	83 c4 70             	add    esp,0x70
c0015a36:	5b                   	pop    ebx
c0015a37:	5e                   	pop    esi
c0015a38:	5f                   	pop    edi
c0015a39:	c2 04 00             	ret    0x4

c0015a3c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015a3c:	55                   	push   ebp
c0015a3d:	57                   	push   edi
c0015a3e:	56                   	push   esi
c0015a3f:	53                   	push   ebx
c0015a40:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015a46:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015a4d:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015a4f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015a52:	80 fb 40             	cmp    bl,0x40
c0015a55:	75 1b                	jne    c0015a72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015a57:	8a 16                	mov    dl,BYTE PTR [esi]
c0015a59:	84 d2                	test   dl,dl
c0015a5b:	0f 84 f1 00 00 00    	je     c0015b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015a61:	8d 46 01             	lea    eax,[esi+0x1]
c0015a64:	80 fa 3a             	cmp    dl,0x3a
c0015a67:	74 04                	je     c0015a6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015a69:	89 c6                	mov    esi,eax
c0015a6b:	eb ea                	jmp    c0015a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015a6d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015a70:	89 c6                	mov    esi,eax
c0015a72:	50                   	push   eax
c0015a73:	6a 40                	push   0x40
c0015a75:	6a 00                	push   0x0
c0015a77:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015a7b:	50                   	push   eax
c0015a7c:	e8 03 ac fe ff       	call   c0000684 <memset>
c0015a81:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015a88:	31 c0                	xor    eax,eax
c0015a8a:	83 c4 10             	add    esp,0x10
c0015a8d:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015a8f:	84 c9                	test   cl,cl
c0015a91:	0f 84 bb 00 00 00    	je     c0015b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015a97:	3d c7 00 00 00       	cmp    eax,0xc7
c0015a9c:	0f 8f b0 00 00 00    	jg     c0015b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015aa2:	80 f9 0a             	cmp    cl,0xa
c0015aa5:	0f 85 98 00 00 00    	jne    c0015b43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015aab:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015ab0:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015ab4:	a8 df                	test   al,0xdf
c0015ab6:	0f 94 c1             	sete   cl
c0015ab9:	3c 23                	cmp    al,0x23
c0015abb:	0f 94 c2             	sete   dl
c0015abe:	08 d1                	or     cl,dl
c0015ac0:	75 4a                	jne    c0015b0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015ac2:	8d 50 f7             	lea    edx,[eax-0x9]
c0015ac5:	80 fa 01             	cmp    dl,0x1
c0015ac8:	76 42                	jbe    c0015b0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015aca:	3c 5b                	cmp    al,0x5b
c0015acc:	75 42                	jne    c0015b10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015ace:	80 fb 40             	cmp    bl,0x40
c0015ad1:	75 39                	jne    c0015b0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015ad3:	83 ec 0c             	sub    esp,0xc
c0015ad6:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015ada:	52                   	push   edx
c0015adb:	e8 c0 ab fe ff       	call   c00006a0 <strlen>
c0015ae0:	83 c4 10             	add    esp,0x10
c0015ae3:	83 f8 3f             	cmp    eax,0x3f
c0015ae6:	77 6a                	ja     c0015b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015ae8:	50                   	push   eax
c0015ae9:	50                   	push   eax
c0015aea:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015aee:	52                   	push   edx
c0015aef:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015af3:	52                   	push   edx
c0015af4:	e8 47 ac fe ff       	call   c0000740 <strcpy>
c0015af9:	58                   	pop    eax
c0015afa:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015afe:	52                   	push   edx
c0015aff:	e8 9c ab fe ff       	call   c00006a0 <strlen>
c0015b04:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015b09:	83 c4 10             	add    esp,0x10
c0015b0c:	31 d2                	xor    edx,edx
c0015b0e:	eb 3a                	jmp    c0015b4a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015b10:	80 fb 40             	cmp    bl,0x40
c0015b13:	74 06                	je     c0015b1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015b15:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015b19:	eb 20                	jmp    c0015b3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015b1b:	50                   	push   eax
c0015b1c:	50                   	push   eax
c0015b1d:	55                   	push   ebp
c0015b1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015b22:	50                   	push   eax
c0015b23:	e8 a4 ac fe ff       	call   c00007cc <strcmp>
c0015b28:	83 c4 10             	add    esp,0x10
c0015b2b:	85 c0                	test   eax,eax
c0015b2d:	75 dd                	jne    c0015b0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015b2f:	eb e4                	jmp    c0015b15 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015b31:	8d 50 01             	lea    edx,[eax+0x1]
c0015b34:	80 f9 3d             	cmp    cl,0x3d
c0015b37:	74 1d                	je     c0015b56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015b39:	89 d0                	mov    eax,edx
c0015b3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0015b3d:	84 c9                	test   cl,cl
c0015b3f:	75 f0                	jne    c0015b31 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015b41:	eb 0f                	jmp    c0015b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015b43:	8d 50 01             	lea    edx,[eax+0x1]
c0015b46:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015b4a:	47                   	inc    edi
c0015b4b:	89 d0                	mov    eax,edx
c0015b4d:	e9 3b ff ff ff       	jmp    c0015a8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015b52:	31 c0                	xor    eax,eax
c0015b54:	eb 33                	jmp    c0015b89 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015b56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015b5a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015b5d:	50                   	push   eax
c0015b5e:	50                   	push   eax
c0015b5f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015b63:	50                   	push   eax
c0015b64:	56                   	push   esi
c0015b65:	e8 62 ac fe ff       	call   c00007cc <strcmp>
c0015b6a:	83 c4 10             	add    esp,0x10
c0015b6d:	85 c0                	test   eax,eax
c0015b6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015b73:	75 97                	jne    c0015b0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015b75:	51                   	push   ecx
c0015b76:	51                   	push   ecx
c0015b77:	52                   	push   edx
c0015b78:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015b7f:	e8 bc ab fe ff       	call   c0000740 <strcpy>
c0015b84:	83 c4 10             	add    esp,0x10
c0015b87:	b0 01                	mov    al,0x1
c0015b89:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015b8f:	5b                   	pop    ebx
c0015b90:	5e                   	pop    esi
c0015b91:	5f                   	pop    edi
c0015b92:	5d                   	pop    ebp
c0015b93:	c3                   	ret    

c0015b94 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015b94:	57                   	push   edi
c0015b95:	56                   	push   esi
c0015b96:	53                   	push   ebx
c0015b97:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015b9d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015ba4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015bab:	53                   	push   ebx
c0015bac:	e8 ef aa fe ff       	call   c00006a0 <strlen>
c0015bb1:	89 34 24             	mov    DWORD PTR [esp],esi
c0015bb4:	89 c7                	mov    edi,eax
c0015bb6:	e8 e5 aa fe ff       	call   c00006a0 <strlen>
c0015bbb:	83 c4 10             	add    esp,0x10
c0015bbe:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015bc2:	3d ff 00 00 00       	cmp    eax,0xff
c0015bc7:	0f 87 d3 00 00 00    	ja     c0015ca0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015bcd:	57                   	push   edi
c0015bce:	57                   	push   edi
c0015bcf:	56                   	push   esi
c0015bd0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015bd4:	56                   	push   esi
c0015bd5:	e8 66 ab fe ff       	call   c0000740 <strcpy>
c0015bda:	58                   	pop    eax
c0015bdb:	5a                   	pop    edx
c0015bdc:	68 5a 6a 02 c0       	push   0xc0026a5a
c0015be1:	56                   	push   esi
c0015be2:	e8 99 ac fe ff       	call   c0000880 <strcat>
c0015be7:	59                   	pop    ecx
c0015be8:	5f                   	pop    edi
c0015be9:	53                   	push   ebx
c0015bea:	56                   	push   esi
c0015beb:	e8 90 ac fe ff       	call   c0000880 <strcat>
c0015bf0:	58                   	pop    eax
c0015bf1:	5a                   	pop    edx
c0015bf2:	68 04 67 02 c0       	push   0xc0026704
c0015bf7:	56                   	push   esi
c0015bf8:	e8 83 ac fe ff       	call   c0000880 <strcat>
c0015bfd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015c04:	e8 52 41 ff ff       	call   c0009d5b <malloc>
c0015c09:	83 c4 0c             	add    esp,0xc
c0015c0c:	89 c3                	mov    ebx,eax
c0015c0e:	ff 35 70 9e 02 c0    	push   DWORD PTR ds:0xc0029e70
c0015c14:	56                   	push   esi
c0015c15:	50                   	push   eax
c0015c16:	e8 97 79 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0015c1b:	83 c4 10             	add    esp,0x10
c0015c1e:	85 db                	test   ebx,ebx
c0015c20:	74 7e                	je     c0015ca0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015c22:	51                   	push   ecx
c0015c23:	51                   	push   ecx
c0015c24:	6a 01                	push   0x1
c0015c26:	53                   	push   ebx
c0015c27:	e8 60 7a ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0015c2c:	83 c4 10             	add    esp,0x10
c0015c2f:	85 c0                	test   eax,eax
c0015c31:	74 08                	je     c0015c3b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015c33:	83 ec 0c             	sub    esp,0xc
c0015c36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c38:	53                   	push   ebx
c0015c39:	eb 5f                	jmp    c0015c9a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015c3b:	52                   	push   edx
c0015c3c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015c40:	50                   	push   eax
c0015c41:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015c45:	50                   	push   eax
c0015c46:	53                   	push   ebx
c0015c47:	e8 ec 7c ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c0015c4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015c50:	83 c4 10             	add    esp,0x10
c0015c53:	89 c1                	mov    ecx,eax
c0015c55:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015c59:	74 31                	je     c0015c8c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015c5b:	83 ec 0c             	sub    esp,0xc
c0015c5e:	50                   	push   eax
c0015c5f:	e8 f7 40 ff ff       	call   c0009d5b <malloc>
c0015c64:	89 c6                	mov    esi,eax
c0015c66:	58                   	pop    eax
c0015c67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c69:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015c6d:	52                   	push   edx
c0015c6e:	56                   	push   esi
c0015c6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015c73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015c77:	53                   	push   ebx
c0015c78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c7b:	83 c4 20             	add    esp,0x20
c0015c7e:	85 c0                	test   eax,eax
c0015c80:	75 0a                	jne    c0015c8c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015c82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c86:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015c8a:	74 18                	je     c0015ca4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015c8c:	83 ec 0c             	sub    esp,0xc
c0015c8f:	53                   	push   ebx
c0015c90:	e8 55 7a ff ff       	call   c000d6ea <File::close()>
c0015c95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c9d:	83 c4 10             	add    esp,0x10
c0015ca0:	31 c0                	xor    eax,eax
c0015ca2:	eb 3b                	jmp    c0015cdf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015ca4:	83 ec 0c             	sub    esp,0xc
c0015ca7:	53                   	push   ebx
c0015ca8:	e8 3d 7a ff ff       	call   c000d6ea <File::close()>
c0015cad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015caf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015cb5:	83 c4 0c             	add    esp,0xc
c0015cb8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015cbf:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015cc6:	56                   	push   esi
c0015cc7:	e8 70 fd ff ff       	call   c0015a3c <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015ccc:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ccf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015cd3:	e8 93 40 ff ff       	call   c0009d6b <free>
c0015cd8:	83 c4 10             	add    esp,0x10
c0015cdb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015cdf:	81 c4 20 01 00 00    	add    esp,0x120
c0015ce5:	5b                   	pop    ebx
c0015ce6:	5e                   	pop    esi
c0015ce7:	5f                   	pop    edi
c0015ce8:	c3                   	ret    

c0015ce9 <Reg::getLine(char*, char*, char*)>:
c0015ce9:	57                   	push   edi
c0015cea:	56                   	push   esi
c0015ceb:	53                   	push   ebx
c0015cec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015cf0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015cf4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015cf8:	57                   	push   edi
c0015cf9:	56                   	push   esi
c0015cfa:	53                   	push   ebx
c0015cfb:	68 09 67 02 c0       	push   0xc0026709
c0015d00:	e8 8f fe ff ff       	call   c0015b94 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015d05:	83 c4 10             	add    esp,0x10
c0015d08:	84 c0                	test   al,al
c0015d0a:	75 10                	jne    c0015d1c <Reg::getLine(char*, char*, char*)+0x33>
c0015d0c:	57                   	push   edi
c0015d0d:	56                   	push   esi
c0015d0e:	53                   	push   ebx
c0015d0f:	68 2e 67 02 c0       	push   0xc002672e
c0015d14:	e8 7b fe ff ff       	call   c0015b94 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015d19:	83 c4 10             	add    esp,0x10
c0015d1c:	5b                   	pop    ebx
c0015d1d:	5e                   	pop    esi
c0015d1e:	5f                   	pop    edi
c0015d1f:	c3                   	ret    

c0015d20 <Reg::readInt(char*, char*, int*)>:
c0015d20:	55                   	push   ebp
c0015d21:	57                   	push   edi
c0015d22:	56                   	push   esi
c0015d23:	53                   	push   ebx
c0015d24:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015d2a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015d2e:	57                   	push   edi
c0015d2f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015d36:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015d3d:	e8 a7 ff ff ff       	call   c0015ce9 <Reg::getLine(char*, char*, char*)>
c0015d42:	83 c4 10             	add    esp,0x10
c0015d45:	84 c0                	test   al,al
c0015d47:	0f 84 b3 00 00 00    	je     c0015e00 <Reg::readInt(char*, char*, int*)+0xe0>
c0015d4d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015d51:	80 fa 2b             	cmp    dl,0x2b
c0015d54:	74 0c                	je     c0015d62 <Reg::readInt(char*, char*, int*)+0x42>
c0015d56:	80 fa 2d             	cmp    dl,0x2d
c0015d59:	75 0e                	jne    c0015d69 <Reg::readInt(char*, char*, int*)+0x49>
c0015d5b:	ba 01 00 00 00       	mov    edx,0x1
c0015d60:	eb 0b                	jmp    c0015d6d <Reg::readInt(char*, char*, int*)+0x4d>
c0015d62:	ba 01 00 00 00       	mov    edx,0x1
c0015d67:	eb 02                	jmp    c0015d6b <Reg::readInt(char*, char*, int*)+0x4b>
c0015d69:	31 d2                	xor    edx,edx
c0015d6b:	31 c0                	xor    eax,eax
c0015d6d:	be 0a 00 00 00       	mov    esi,0xa
c0015d72:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015d77:	75 20                	jne    c0015d99 <Reg::readInt(char*, char*, int*)+0x79>
c0015d79:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015d7d:	80 f9 78             	cmp    cl,0x78
c0015d80:	75 0a                	jne    c0015d8c <Reg::readInt(char*, char*, int*)+0x6c>
c0015d82:	83 c2 02             	add    edx,0x2
c0015d85:	be 10 00 00 00       	mov    esi,0x10
c0015d8a:	eb 0d                	jmp    c0015d99 <Reg::readInt(char*, char*, int*)+0x79>
c0015d8c:	80 f9 62             	cmp    cl,0x62
c0015d8f:	75 08                	jne    c0015d99 <Reg::readInt(char*, char*, int*)+0x79>
c0015d91:	83 c2 02             	add    edx,0x2
c0015d94:	be 02 00 00 00       	mov    esi,0x2
c0015d99:	01 d7                	add    edi,edx
c0015d9b:	31 d2                	xor    edx,edx
c0015d9d:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015d9f:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015da3:	80 fb 0d             	cmp    bl,0xd
c0015da6:	0f 94 c3             	sete   bl
c0015da9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015dae:	0f 94 c1             	sete   cl
c0015db1:	08 cb                	or     bl,cl
c0015db3:	75 3a                	jne    c0015def <Reg::readInt(char*, char*, int*)+0xcf>
c0015db5:	0f af d6             	imul   edx,esi
c0015db8:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015dbd:	83 fe 10             	cmp    esi,0x10
c0015dc0:	75 26                	jne    c0015de8 <Reg::readInt(char*, char*, int*)+0xc8>
c0015dc2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015dc6:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015dc9:	89 e9                	mov    ecx,ebp
c0015dcb:	80 f9 05             	cmp    cl,0x5
c0015dce:	77 06                	ja     c0015dd6 <Reg::readInt(char*, char*, int*)+0xb6>
c0015dd0:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015dd4:	eb 16                	jmp    c0015dec <Reg::readInt(char*, char*, int*)+0xcc>
c0015dd6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015dda:	83 e9 61             	sub    ecx,0x61
c0015ddd:	80 f9 05             	cmp    cl,0x5
c0015de0:	77 06                	ja     c0015de8 <Reg::readInt(char*, char*, int*)+0xc8>
c0015de2:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015de6:	eb 04                	jmp    c0015dec <Reg::readInt(char*, char*, int*)+0xcc>
c0015de8:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015dec:	47                   	inc    edi
c0015ded:	eb ae                	jmp    c0015d9d <Reg::readInt(char*, char*, int*)+0x7d>
c0015def:	84 c0                	test   al,al
c0015df1:	74 02                	je     c0015df5 <Reg::readInt(char*, char*, int*)+0xd5>
c0015df3:	f7 da                	neg    edx
c0015df5:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015dfc:	89 10                	mov    DWORD PTR [eax],edx
c0015dfe:	88 d8                	mov    al,bl
c0015e00:	81 c4 ec 00 00 00    	add    esp,0xec
c0015e06:	5b                   	pop    ebx
c0015e07:	5e                   	pop    esi
c0015e08:	5f                   	pop    edi
c0015e09:	5d                   	pop    ebp
c0015e0a:	c3                   	ret    

c0015e0b <Reg::readString(char*, char*, char*, int)>:
c0015e0b:	57                   	push   edi
c0015e0c:	56                   	push   esi
c0015e0d:	53                   	push   ebx
c0015e0e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015e14:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015e1b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015e1f:	57                   	push   edi
c0015e20:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015e27:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015e2e:	e8 b6 fe ff ff       	call   c0015ce9 <Reg::getLine(char*, char*, char*)>
c0015e33:	83 c4 10             	add    esp,0x10
c0015e36:	89 c6                	mov    esi,eax
c0015e38:	84 c0                	test   al,al
c0015e3a:	74 44                	je     c0015e80 <Reg::readString(char*, char*, char*, int)+0x75>
c0015e3c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015e43:	31 c0                	xor    eax,eax
c0015e45:	4a                   	dec    edx
c0015e46:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015e49:	84 c9                	test   cl,cl
c0015e4b:	74 0f                	je     c0015e5c <Reg::readString(char*, char*, char*, int)+0x51>
c0015e4d:	39 c2                	cmp    edx,eax
c0015e4f:	7e 0b                	jle    c0015e5c <Reg::readString(char*, char*, char*, int)+0x51>
c0015e51:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015e54:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015e59:	40                   	inc    eax
c0015e5a:	eb ea                	jmp    c0015e46 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015e5c:	83 ec 0c             	sub    esp,0xc
c0015e5f:	53                   	push   ebx
c0015e60:	e8 3b a8 fe ff       	call   c00006a0 <strlen>
c0015e65:	83 c4 10             	add    esp,0x10
c0015e68:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015e6d:	75 11                	jne    c0015e80 <Reg::readString(char*, char*, char*, int)+0x75>
c0015e6f:	83 ec 0c             	sub    esp,0xc
c0015e72:	53                   	push   ebx
c0015e73:	e8 28 a8 fe ff       	call   c00006a0 <strlen>
c0015e78:	83 c4 10             	add    esp,0x10
c0015e7b:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015e80:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015e86:	89 f0                	mov    eax,esi
c0015e88:	5b                   	pop    ebx
c0015e89:	5e                   	pop    esi
c0015e8a:	5f                   	pop    edi
c0015e8b:	c3                   	ret    

c0015e8c <Reg::readBool(char*, char*, bool*)>:
c0015e8c:	83 ec 20             	sub    esp,0x20
c0015e8f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015e93:	50                   	push   eax
c0015e94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e9c:	e8 7f fe ff ff       	call   c0015d20 <Reg::readInt(char*, char*, int*)>
c0015ea1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015ea6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015eaa:	0f 95 02             	setne  BYTE PTR [edx]
c0015ead:	83 c4 2c             	add    esp,0x2c
c0015eb0:	c3                   	ret    

c0015eb1 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015eb1:	53                   	push   ebx
c0015eb2:	83 ec 1c             	sub    esp,0x1c
c0015eb5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015eb9:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015ebd:	50                   	push   eax
c0015ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ec6:	e8 c1 ff ff ff       	call   c0015e8c <Reg::readBool(char*, char*, bool*)>
c0015ecb:	83 c4 10             	add    esp,0x10
c0015ece:	84 c0                	test   al,al
c0015ed0:	74 04                	je     c0015ed6 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015ed2:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015ed6:	88 d8                	mov    al,bl
c0015ed8:	83 c4 18             	add    esp,0x18
c0015edb:	5b                   	pop    ebx
c0015edc:	c3                   	ret    

c0015edd <Reg::readIntWithDefault(char*, char*, int)>:
c0015edd:	53                   	push   ebx
c0015ede:	83 ec 1c             	sub    esp,0x1c
c0015ee1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015ee5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015ee9:	50                   	push   eax
c0015eea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015eee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ef2:	e8 29 fe ff ff       	call   c0015d20 <Reg::readInt(char*, char*, int*)>
c0015ef7:	83 c4 10             	add    esp,0x10
c0015efa:	84 c0                	test   al,al
c0015efc:	74 04                	je     c0015f02 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015efe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015f02:	89 d8                	mov    eax,ebx
c0015f04:	83 c4 18             	add    esp,0x18
c0015f07:	5b                   	pop    ebx
c0015f08:	c3                   	ret    

c0015f09 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015f09:	57                   	push   edi
c0015f0a:	56                   	push   esi
c0015f0b:	56                   	push   esi
c0015f0c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015f14:	56                   	push   esi
c0015f15:	57                   	push   edi
c0015f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f1e:	e8 e8 fe ff ff       	call   c0015e0b <Reg::readString(char*, char*, char*, int)>
c0015f23:	83 c4 10             	add    esp,0x10
c0015f26:	84 c0                	test   al,al
c0015f28:	75 1a                	jne    c0015f44 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015f2a:	51                   	push   ecx
c0015f2b:	56                   	push   esi
c0015f2c:	6a 00                	push   0x0
c0015f2e:	57                   	push   edi
c0015f2f:	e8 50 a7 fe ff       	call   c0000684 <memset>
c0015f34:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015f37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015f3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015f3d:	83 c4 10             	add    esp,0x10
c0015f40:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015f44:	89 f8                	mov    eax,edi
c0015f46:	5a                   	pop    edx
c0015f47:	5e                   	pop    esi
c0015f48:	5f                   	pop    edi
c0015f49:	c3                   	ret    

c0015f4a <Sys::eject(regs*)>:
c0015f4a:	83 ec 0c             	sub    esp,0xc
c0015f4d:	83 ca ff             	or     edx,0xffffffff
c0015f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f54:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015f57:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015f5c:	83 e9 41             	sub    ecx,0x41
c0015f5f:	83 f9 19             	cmp    ecx,0x19
c0015f62:	77 18                	ja     c0015f7c <Sys::eject(regs*)+0x32>
c0015f64:	8b 0c 8d e0 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7120]
c0015f6b:	85 c9                	test   ecx,ecx
c0015f6d:	74 0d                	je     c0015f7c <Sys::eject(regs*)+0x32>
c0015f6f:	83 ec 0c             	sub    esp,0xc
c0015f72:	51                   	push   ecx
c0015f73:	e8 84 a9 ff ff       	call   c00108fc <LogicalDisk::eject()>
c0015f78:	83 c4 10             	add    esp,0x10
c0015f7b:	99                   	cdq    
c0015f7c:	83 c4 0c             	add    esp,0xc
c0015f7f:	c3                   	ret    

c0015f80 <Sys::exit(regs*)>:
c0015f80:	83 ec 18             	sub    esp,0x18
c0015f83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f87:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015f8a:	e8 59 36 00 00       	call   c00195e8 <terminateTask(int)>
c0015f8f:	83 c8 ff             	or     eax,0xffffffff
c0015f92:	83 c4 1c             	add    esp,0x1c
c0015f95:	89 c2                	mov    edx,eax
c0015f97:	c3                   	ret    

c0015f98 <Sys::getCwd(regs*)>:
c0015f98:	83 ec 10             	sub    esp,0x10
c0015f9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f9f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015fa2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015fa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015faa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015fad:	e8 02 74 ff ff       	call   c000d3b4 <Fs::getcwd(Process*, char*, int)>
c0015fb2:	83 c4 1c             	add    esp,0x1c
c0015fb5:	99                   	cdq    
c0015fb6:	c3                   	ret    

c0015fb7 <Sys::getPID(regs*)>:
c0015fb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015fc1:	99                   	cdq    
c0015fc2:	c3                   	ret    

c0015fc3 <Sys::getRAMData(regs*)>:
c0015fc3:	8b 0d 58 89 02 c0    	mov    ecx,DWORD PTR ds:0xc0028958
c0015fc9:	69 05 54 89 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028954,0xc8
c0015fd3:	99                   	cdq    
c0015fd4:	f7 f9                	idiv   ecx
c0015fd6:	c1 e0 18             	shl    eax,0x18
c0015fd9:	09 c8                	or     eax,ecx
c0015fdb:	99                   	cdq    
c0015fdc:	c3                   	ret    

c0015fdd <Sys::getVGAPtr(regs*)>:
c0015fdd:	55                   	push   ebp
c0015fde:	57                   	push   edi
c0015fdf:	56                   	push   esi
c0015fe0:	53                   	push   ebx
c0015fe1:	83 ec 18             	sub    esp,0x18
c0015fe4:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015fe8:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015feb:	e8 fc 30 00 00       	call   c00190ec <Thr::processFromPID(int)>
c0015ff0:	83 c4 10             	add    esp,0x10
c0015ff3:	89 c1                	mov    ecx,eax
c0015ff5:	b8 01 00 00 00       	mov    eax,0x1
c0015ffa:	85 c9                	test   ecx,ecx
c0015ffc:	74 59                	je     c0016057 <Sys::getVGAPtr(regs*)+0x7a>
c0015ffe:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0016004:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0016008:	74 0c                	je     c0016016 <Sys::getVGAPtr(regs*)+0x39>
c001600a:	83 ec 0c             	sub    esp,0xc
c001600d:	53                   	push   ebx
c001600e:	e8 42 4e ff ff       	call   c000ae55 <setActiveTerminal(VgaText*)>
c0016013:	83 c4 10             	add    esp,0x10
c0016016:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016019:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001601c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0016021:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016023:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0016026:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016029:	81 c3 82 00 00 00    	add    ebx,0x82
c001602f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0016035:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016038:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001603b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0016041:	50                   	push   eax
c0016042:	50                   	push   eax
c0016043:	53                   	push   ebx
c0016044:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016047:	05 a8 0f 00 00       	add    eax,0xfa8
c001604c:	50                   	push   eax
c001604d:	e8 ee a6 fe ff       	call   c0000740 <strcpy>
c0016052:	83 c4 10             	add    esp,0x10
c0016055:	31 c0                	xor    eax,eax
c0016057:	83 c4 0c             	add    esp,0xc
c001605a:	31 d2                	xor    edx,edx
c001605c:	5b                   	pop    ebx
c001605d:	5e                   	pop    esi
c001605e:	5f                   	pop    edi
c001605f:	5d                   	pop    ebp
c0016060:	c3                   	ret    

c0016061 <Sys::loadDLL(regs*)>:
c0016061:	56                   	push   esi
c0016062:	53                   	push   ebx
c0016063:	31 d2                	xor    edx,edx
c0016065:	51                   	push   ecx
c0016066:	b8 01 00 00 00       	mov    eax,0x1
c001606b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001606f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0016073:	0f 84 8c 00 00 00    	je     c0016105 <Sys::loadDLL(regs*)+0xa4>
c0016079:	83 ec 0c             	sub    esp,0xc
c001607c:	68 14 01 00 00       	push   0x114
c0016081:	e8 d5 3c ff ff       	call   c0009d5b <malloc>
c0016086:	83 c4 0c             	add    esp,0xc
c0016089:	89 c3                	mov    ebx,eax
c001608b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016090:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016093:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016096:	53                   	push   ebx
c0016097:	e8 16 75 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001609c:	83 c4 10             	add    esp,0x10
c001609f:	31 d2                	xor    edx,edx
c00160a1:	b8 02 00 00 00       	mov    eax,0x2
c00160a6:	85 db                	test   ebx,ebx
c00160a8:	74 5b                	je     c0016105 <Sys::loadDLL(regs*)+0xa4>
c00160aa:	83 ec 0c             	sub    esp,0xc
c00160ad:	53                   	push   ebx
c00160ae:	e8 47 78 ff ff       	call   c000d8fa <File::exists()>
c00160b3:	83 c4 10             	add    esp,0x10
c00160b6:	84 c0                	test   al,al
c00160b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160ba:	75 11                	jne    c00160cd <Sys::loadDLL(regs*)+0x6c>
c00160bc:	83 ec 0c             	sub    esp,0xc
c00160bf:	53                   	push   ebx
c00160c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160c3:	83 c4 10             	add    esp,0x10
c00160c6:	b8 03 00 00 00       	mov    eax,0x3
c00160cb:	eb 36                	jmp    c0016103 <Sys::loadDLL(regs*)+0xa2>
c00160cd:	83 ec 0c             	sub    esp,0xc
c00160d0:	53                   	push   ebx
c00160d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160d4:	58                   	pop    eax
c00160d5:	5a                   	pop    edx
c00160d6:	6a 00                	push   0x0
c00160d8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00160db:	e8 0a 22 00 00       	call   c00182ea <Thr::loadDLL(char const*, bool)>
c00160e0:	83 c4 10             	add    esp,0x10
c00160e3:	89 c1                	mov    ecx,eax
c00160e5:	31 d2                	xor    edx,edx
c00160e7:	b8 04 00 00 00       	mov    eax,0x4
c00160ec:	85 c9                	test   ecx,ecx
c00160ee:	74 15                	je     c0016105 <Sys::loadDLL(regs*)+0xa4>
c00160f0:	53                   	push   ebx
c00160f1:	53                   	push   ebx
c00160f2:	ff 35 28 89 02 c0    	push   DWORD PTR ds:0xc0028928
c00160f8:	51                   	push   ecx
c00160f9:	e8 1d 24 00 00       	call   c001851b <Thr::executeDLL(unsigned long, void*)>
c00160fe:	83 c4 10             	add    esp,0x10
c0016101:	31 c0                	xor    eax,eax
c0016103:	31 d2                	xor    edx,edx
c0016105:	59                   	pop    ecx
c0016106:	5b                   	pop    ebx
c0016107:	5e                   	pop    esi
c0016108:	c3                   	ret    

c0016109 <Sys::read(regs*)>:
c0016109:	57                   	push   edi
c001610a:	56                   	push   esi
c001610b:	53                   	push   ebx
c001610c:	83 ec 10             	sub    esp,0x10
c001610f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016113:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016116:	83 f8 02             	cmp    eax,0x2
c0016119:	77 10                	ja     c001612b <Sys::read(regs*)+0x22>
c001611b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016120:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016123:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016129:	eb 0e                	jmp    c0016139 <Sys::read(regs*)+0x30>
c001612b:	83 ec 0c             	sub    esp,0xc
c001612e:	50                   	push   eax
c001612f:	e8 97 5a ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016134:	83 c4 10             	add    esp,0x10
c0016137:	89 c1                	mov    ecx,eax
c0016139:	83 c8 ff             	or     eax,0xffffffff
c001613c:	85 c9                	test   ecx,ecx
c001613e:	89 c2                	mov    edx,eax
c0016140:	74 28                	je     c001616a <Sys::read(regs*)+0x61>
c0016142:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001614a:	31 ff                	xor    edi,edi
c001614c:	83 ec 0c             	sub    esp,0xc
c001614f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016151:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016155:	52                   	push   edx
c0016156:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016159:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001615c:	57                   	push   edi
c001615d:	56                   	push   esi
c001615e:	51                   	push   ecx
c001615f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016162:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016166:	83 c4 20             	add    esp,0x20
c0016169:	99                   	cdq    
c001616a:	83 c4 10             	add    esp,0x10
c001616d:	5b                   	pop    ebx
c001616e:	5e                   	pop    esi
c001616f:	5f                   	pop    edi
c0016170:	c3                   	ret    

c0016171 <Sys::sbrk(regs*)>:
c0016171:	56                   	push   esi
c0016172:	53                   	push   ebx
c0016173:	50                   	push   eax
c0016174:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016179:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001617d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016180:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0016183:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0016189:	85 db                	test   ebx,ebx
c001618b:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001618e:	74 02                	je     c0016192 <Sys::sbrk(regs*)+0x21>
c0016190:	79 06                	jns    c0016198 <Sys::sbrk(regs*)+0x27>
c0016192:	89 f0                	mov    eax,esi
c0016194:	31 d2                	xor    edx,edx
c0016196:	eb 2a                	jmp    c00161c2 <Sys::sbrk(regs*)+0x51>
c0016198:	83 c8 ff             	or     eax,0xffffffff
c001619b:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00161a1:	89 c2                	mov    edx,eax
c00161a3:	77 1d                	ja     c00161c2 <Sys::sbrk(regs*)+0x51>
c00161a5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00161ab:	50                   	push   eax
c00161ac:	c1 ea 0c             	shr    edx,0xc
c00161af:	68 07 0c 00 00       	push   0xc07
c00161b4:	52                   	push   edx
c00161b5:	51                   	push   ecx
c00161b6:	e8 0f 63 ff ff       	call   c000c4ca <VAS::allocatePages(int, int)>
c00161bb:	89 f0                	mov    eax,esi
c00161bd:	31 d2                	xor    edx,edx
c00161bf:	83 c4 10             	add    esp,0x10
c00161c2:	59                   	pop    ecx
c00161c3:	5b                   	pop    ebx
c00161c4:	5e                   	pop    esi
c00161c5:	c3                   	ret    

c00161c6 <Sys::setCwd(regs*)>:
c00161c6:	83 ec 14             	sub    esp,0x14
c00161c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00161cd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00161d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161d5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00161d8:	e8 bc 77 ff ff       	call   c000d999 <Fs::setcwd(Process*, char*)>
c00161dd:	83 c4 1c             	add    esp,0x1c
c00161e0:	99                   	cdq    
c00161e1:	c3                   	ret    

c00161e2 <Sys::setTime(regs*)>:
c00161e2:	55                   	push   ebp
c00161e3:	31 c9                	xor    ecx,ecx
c00161e5:	57                   	push   edi
c00161e6:	bd 0c 00 00 00       	mov    ebp,0xc
c00161eb:	56                   	push   esi
c00161ec:	53                   	push   ebx
c00161ed:	31 db                	xor    ebx,ebx
c00161ef:	83 ec 10             	sub    esp,0x10
c00161f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00161f6:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00161f9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00161fc:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00161ff:	89 c2                	mov    edx,eax
c0016201:	66 81 ef 6c 07       	sub    di,0x76c
c0016206:	83 e2 1f             	and    edx,0x1f
c0016209:	c1 e7 10             	shl    edi,0x10
c001620c:	42                   	inc    edx
c001620d:	c1 e8 05             	shr    eax,0x5
c0016210:	88 d1                	mov    cl,dl
c0016212:	31 d2                	xor    edx,edx
c0016214:	f7 f5                	div    ebp
c0016216:	89 dd                	mov    ebp,ebx
c0016218:	88 d5                	mov    ch,dl
c001621a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0016220:	0f b7 c1             	movzx  eax,cx
c0016223:	31 d2                	xor    edx,edx
c0016225:	09 f8                	or     eax,edi
c0016227:	bf 3c 00 00 00       	mov    edi,0x3c
c001622c:	89 c1                	mov    ecx,eax
c001622e:	89 f0                	mov    eax,esi
c0016230:	f7 f7                	div    edi
c0016232:	c1 e2 10             	shl    edx,0x10
c0016235:	09 d5                	or     ebp,edx
c0016237:	31 d2                	xor    edx,edx
c0016239:	89 eb                	mov    ebx,ebp
c001623b:	f7 f7                	div    edi
c001623d:	bf 10 0e 00 00       	mov    edi,0xe10
c0016242:	88 d7                	mov    bh,dl
c0016244:	89 f0                	mov    eax,esi
c0016246:	31 d2                	xor    edx,edx
c0016248:	f7 f7                	div    edi
c001624a:	bf 18 00 00 00       	mov    edi,0x18
c001624f:	31 d2                	xor    edx,edx
c0016251:	f7 f7                	div    edi
c0016253:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0016258:	88 d3                	mov    bl,dl
c001625a:	53                   	push   ebx
c001625b:	51                   	push   ecx
c001625c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016262:	e8 33 80 ff ff       	call   c000e29a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0016267:	83 c4 1c             	add    esp,0x1c
c001626a:	83 f0 01             	xor    eax,0x1
c001626d:	5b                   	pop    ebx
c001626e:	0f b6 c0             	movzx  eax,al
c0016271:	5e                   	pop    esi
c0016272:	31 d2                	xor    edx,edx
c0016274:	5f                   	pop    edi
c0016275:	5d                   	pop    ebp
c0016276:	c3                   	ret    

c0016277 <Sys::timezone(regs*)>:
c0016277:	53                   	push   ebx
c0016278:	83 ec 08             	sub    esp,0x8
c001627b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001627f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0016283:	75 17                	jne    c001629c <Sys::timezone(regs*)+0x25>
c0016285:	83 ec 0c             	sub    esp,0xc
c0016288:	68 49 67 02 c0       	push   0xc0026749
c001628d:	e8 b5 6d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0016292:	83 c8 ff             	or     eax,0xffffffff
c0016295:	83 c4 10             	add    esp,0x10
c0016298:	89 c2                	mov    edx,eax
c001629a:	eb 20                	jmp    c00162bc <Sys::timezone(regs*)+0x45>
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	68 5e 67 02 c0       	push   0xc002675e
c00162a4:	e8 9e 6d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00162a9:	58                   	pop    eax
c00162aa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00162ad:	e8 4a 7d ff ff       	call   c000dffc <User::loadClockSettings(int)>
c00162b2:	83 c4 10             	add    esp,0x10
c00162b5:	b8 01 00 00 00       	mov    eax,0x1
c00162ba:	31 d2                	xor    edx,edx
c00162bc:	83 c4 08             	add    esp,0x8
c00162bf:	5b                   	pop    ebx
c00162c0:	c3                   	ret    

c00162c1 <Sys::write(regs*)>:
c00162c1:	57                   	push   edi
c00162c2:	56                   	push   esi
c00162c3:	53                   	push   ebx
c00162c4:	83 ec 10             	sub    esp,0x10
c00162c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00162cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00162ce:	83 f8 02             	cmp    eax,0x2
c00162d1:	77 10                	ja     c00162e3 <Sys::write(regs*)+0x22>
c00162d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00162db:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00162e1:	eb 0e                	jmp    c00162f1 <Sys::write(regs*)+0x30>
c00162e3:	83 ec 0c             	sub    esp,0xc
c00162e6:	50                   	push   eax
c00162e7:	e8 df 58 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c00162ec:	83 c4 10             	add    esp,0x10
c00162ef:	89 c1                	mov    ecx,eax
c00162f1:	83 c8 ff             	or     eax,0xffffffff
c00162f4:	85 c9                	test   ecx,ecx
c00162f6:	89 c2                	mov    edx,eax
c00162f8:	74 28                	je     c0016322 <Sys::write(regs*)+0x61>
c00162fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016302:	31 ff                	xor    edi,edi
c0016304:	83 ec 0c             	sub    esp,0xc
c0016307:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016309:	8d 54 24 18          	lea    edx,[esp+0x18]
c001630d:	52                   	push   edx
c001630e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016311:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016314:	57                   	push   edi
c0016315:	56                   	push   esi
c0016316:	51                   	push   ecx
c0016317:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001631a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001631e:	83 c4 20             	add    esp,0x20
c0016321:	99                   	cdq    
c0016322:	83 c4 10             	add    esp,0x10
c0016325:	5b                   	pop    ebx
c0016326:	5e                   	pop    esi
c0016327:	5f                   	pop    edi
c0016328:	c3                   	ret    

c0016329 <Sys::wsbe(regs*)>:
c0016329:	57                   	push   edi
c001632a:	b9 0b 00 00 00       	mov    ecx,0xb
c001632f:	56                   	push   esi
c0016330:	be 9d 67 02 c0       	mov    esi,0xc002679d
c0016335:	53                   	push   ebx
c0016336:	83 ec 30             	sub    esp,0x30
c0016339:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001633d:	fc                   	cld    
c001633e:	83 ec 0c             	sub    esp,0xc
c0016341:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0016343:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0016347:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001634c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001634f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0016355:	8b 06                	mov    eax,DWORD PTR [esi]
c0016357:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001635a:	57                   	push   edi
c001635b:	e8 40 a3 fe ff       	call   c00006a0 <strlen>
c0016360:	5a                   	pop    edx
c0016361:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0016365:	52                   	push   edx
c0016366:	31 d2                	xor    edx,edx
c0016368:	57                   	push   edi
c0016369:	52                   	push   edx
c001636a:	50                   	push   eax
c001636b:	56                   	push   esi
c001636c:	ff d3                	call   ebx
c001636e:	83 c4 14             	add    esp,0x14
c0016371:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016375:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016378:	e8 6b 32 00 00       	call   c00195e8 <terminateTask(int)>
c001637d:	83 c4 40             	add    esp,0x40
c0016380:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016385:	5b                   	pop    ebx
c0016386:	31 d2                	xor    edx,edx
c0016388:	5e                   	pop    esi
c0016389:	5f                   	pop    edi
c001638a:	c3                   	ret    

c001638b <Sys::yield(regs*)>:
c001638b:	83 ec 0c             	sub    esp,0xc
c001638e:	fa                   	cli    
c001638f:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0016395:	e8 36 29 00 00       	call   c0018cd0 <schedule()>
c001639a:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c001639f:	48                   	dec    eax
c00163a0:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c00163a5:	75 01                	jne    c00163a8 <Sys::yield(regs*)+0x1d>
c00163a7:	fb                   	sti    
c00163a8:	8b 15 4c 8f 02 c0    	mov    edx,DWORD PTR ds:0xc0028f4c
c00163ae:	83 c4 0c             	add    esp,0xc
c00163b1:	89 d0                	mov    eax,edx
c00163b3:	c1 ea 11             	shr    edx,0x11
c00163b6:	c1 e0 07             	shl    eax,0x7
c00163b9:	25 80 30 0f 00       	and    eax,0xf3080
c00163be:	31 d0                	xor    eax,edx
c00163c0:	31 d2                	xor    edx,edx
c00163c2:	c3                   	ret    

c00163c3 <sysCallSeekDir(regs*)>:
c00163c3:	31 c0                	xor    eax,eax
c00163c5:	31 d2                	xor    edx,edx
c00163c7:	c3                   	ret    

c00163c8 <sysCallTellDir(regs*)>:
c00163c8:	31 c0                	xor    eax,eax
c00163ca:	31 d2                	xor    edx,edx
c00163cc:	c3                   	ret    

c00163cd <sysCallVerify(regs*)>:
c00163cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163d1:	31 d2                	xor    edx,edx
c00163d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00163d6:	c3                   	ret    

c00163d7 <sysCallGetArgc(regs*)>:
c00163d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00163df:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00163e5:	99                   	cdq    
c00163e6:	c3                   	ret    

c00163e7 <sysFormatDisk(regs*)>:
c00163e7:	56                   	push   esi
c00163e8:	53                   	push   ebx
c00163e9:	53                   	push   ebx
c00163ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163ee:	8b 1d 54 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a54
c00163f4:	eb 25                	jmp    c001641b <sysFormatDisk(regs*)+0x34>
c00163f6:	83 ec 0c             	sub    esp,0xc
c00163f9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00163fc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00163fe:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016401:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016404:	50                   	push   eax
c0016405:	ff 34 85 e0 8e 02 c0 	push   DWORD PTR [eax*4-0x3ffd7120]
c001640c:	53                   	push   ebx
c001640d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016410:	83 c4 20             	add    esp,0x20
c0016413:	83 f8 08             	cmp    eax,0x8
c0016416:	75 12                	jne    c001642a <sysFormatDisk(regs*)+0x43>
c0016418:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001641b:	85 db                	test   ebx,ebx
c001641d:	75 d7                	jne    c00163f6 <sysFormatDisk(regs*)+0xf>
c001641f:	59                   	pop    ecx
c0016420:	b8 03 00 00 00       	mov    eax,0x3
c0016425:	31 d2                	xor    edx,edx
c0016427:	5b                   	pop    ebx
c0016428:	5e                   	pop    esi
c0016429:	c3                   	ret    
c001642a:	85 c0                	test   eax,eax
c001642c:	74 1b                	je     c0016449 <sysFormatDisk(regs*)+0x62>
c001642e:	83 f8 09             	cmp    eax,0x9
c0016431:	74 0b                	je     c001643e <sysFormatDisk(regs*)+0x57>
c0016433:	59                   	pop    ecx
c0016434:	b8 02 00 00 00       	mov    eax,0x2
c0016439:	31 d2                	xor    edx,edx
c001643b:	5b                   	pop    ebx
c001643c:	5e                   	pop    esi
c001643d:	c3                   	ret    
c001643e:	59                   	pop    ecx
c001643f:	b8 01 00 00 00       	mov    eax,0x1
c0016444:	31 d2                	xor    edx,edx
c0016446:	5b                   	pop    ebx
c0016447:	5e                   	pop    esi
c0016448:	c3                   	ret    
c0016449:	59                   	pop    ecx
c001644a:	31 c0                	xor    eax,eax
c001644c:	31 d2                	xor    edx,edx
c001644e:	5b                   	pop    ebx
c001644f:	5e                   	pop    esi
c0016450:	c3                   	ret    

c0016451 <sysSetDiskVolumeLabel(regs*)>:
c0016451:	56                   	push   esi
c0016452:	53                   	push   ebx
c0016453:	53                   	push   ebx
c0016454:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016458:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001645b:	83 f8 19             	cmp    eax,0x19
c001645e:	77 2d                	ja     c001648d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016460:	8b 0c 85 e0 8e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7120]
c0016467:	85 c9                	test   ecx,ecx
c0016469:	74 22                	je     c001648d <sysSetDiskVolumeLabel(regs*)+0x3c>
c001646b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001646e:	85 db                	test   ebx,ebx
c0016470:	74 1b                	je     c001648d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016472:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0016478:	85 d2                	test   edx,edx
c001647a:	74 11                	je     c001648d <sysSetDiskVolumeLabel(regs*)+0x3c>
c001647c:	8b 32                	mov    esi,DWORD PTR [edx]
c001647e:	53                   	push   ebx
c001647f:	50                   	push   eax
c0016480:	51                   	push   ecx
c0016481:	52                   	push   edx
c0016482:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016485:	83 c4 10             	add    esp,0x10
c0016488:	99                   	cdq    
c0016489:	59                   	pop    ecx
c001648a:	5b                   	pop    ebx
c001648b:	5e                   	pop    esi
c001648c:	c3                   	ret    
c001648d:	59                   	pop    ecx
c001648e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016493:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016498:	5b                   	pop    ebx
c0016499:	5e                   	pop    esi
c001649a:	c3                   	ret    

c001649b <sysGetDiskVolumeLabel(regs*)>:
c001649b:	57                   	push   edi
c001649c:	56                   	push   esi
c001649d:	53                   	push   ebx
c001649e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00164a5:	83 fa 19             	cmp    edx,0x19
c00164a8:	77 38                	ja     c00164e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00164aa:	8b 0c 95 e0 8e 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7120]
c00164b1:	85 c9                	test   ecx,ecx
c00164b3:	74 2d                	je     c00164e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00164b5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00164b8:	85 db                	test   ebx,ebx
c00164ba:	74 26                	je     c00164e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00164bc:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00164bf:	85 f6                	test   esi,esi
c00164c1:	74 1f                	je     c00164e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00164c3:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00164c9:	85 c0                	test   eax,eax
c00164cb:	74 15                	je     c00164e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00164cd:	83 ec 0c             	sub    esp,0xc
c00164d0:	8b 38                	mov    edi,DWORD PTR [eax]
c00164d2:	56                   	push   esi
c00164d3:	53                   	push   ebx
c00164d4:	52                   	push   edx
c00164d5:	51                   	push   ecx
c00164d6:	50                   	push   eax
c00164d7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00164da:	83 c4 20             	add    esp,0x20
c00164dd:	99                   	cdq    
c00164de:	5b                   	pop    ebx
c00164df:	5e                   	pop    esi
c00164e0:	5f                   	pop    edi
c00164e1:	c3                   	ret    
c00164e2:	5b                   	pop    ebx
c00164e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00164e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00164ed:	5e                   	pop    esi
c00164ee:	5f                   	pop    edi
c00164ef:	c3                   	ret    

c00164f0 <sysShutdown(regs*)>:
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164fa:	85 c0                	test   eax,eax
c00164fc:	74 18                	je     c0016516 <sysShutdown(regs*)+0x26>
c00164fe:	83 f8 01             	cmp    eax,0x1
c0016501:	74 38                	je     c001653b <sysShutdown(regs*)+0x4b>
c0016503:	83 f8 02             	cmp    eax,0x2
c0016506:	74 24                	je     c001652c <sysShutdown(regs*)+0x3c>
c0016508:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001650d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016512:	83 c4 0c             	add    esp,0xc
c0016515:	c3                   	ret    
c0016516:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c001651b:	8b 10                	mov    edx,DWORD PTR [eax]
c001651d:	6a 00                	push   0x0
c001651f:	6a 00                	push   0x0
c0016521:	6a 00                	push   0x0
c0016523:	50                   	push   eax
c0016524:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016527:	83 c4 10             	add    esp,0x10
c001652a:	eb dc                	jmp    c0016508 <sysShutdown(regs*)+0x18>
c001652c:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0016531:	8b 10                	mov    edx,DWORD PTR [eax]
c0016533:	6a 00                	push   0x0
c0016535:	6a 00                	push   0x0
c0016537:	6a 01                	push   0x1
c0016539:	eb e8                	jmp    c0016523 <sysShutdown(regs*)+0x33>
c001653b:	a1 60 8f 02 c0       	mov    eax,ds:0xc0028f60
c0016540:	85 c0                	test   eax,eax
c0016542:	74 02                	je     c0016546 <sysShutdown(regs*)+0x56>
c0016544:	ff d0                	call   eax
c0016546:	31 c0                	xor    eax,eax
c0016548:	31 d2                	xor    edx,edx
c001654a:	83 c4 0c             	add    esp,0xc
c001654d:	c3                   	ret    

c001654e <sysCallRealpath(regs*)>:
c001654e:	83 ec 0c             	sub    esp,0xc
c0016551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016555:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016558:	85 d2                	test   edx,edx
c001655a:	74 07                	je     c0016563 <sysCallRealpath(regs*)+0x15>
c001655c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001655f:	85 c0                	test   eax,eax
c0016561:	75 0b                	jne    c001656e <sysCallRealpath(regs*)+0x20>
c0016563:	b8 01 00 00 00       	mov    eax,0x1
c0016568:	31 d2                	xor    edx,edx
c001656a:	83 c4 0c             	add    esp,0xc
c001656d:	c3                   	ret    
c001656e:	51                   	push   ecx
c001656f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016575:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016578:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001657e:	51                   	push   ecx
c001657f:	52                   	push   edx
c0016580:	50                   	push   eax
c0016581:	e8 82 6e ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016586:	83 c4 10             	add    esp,0x10
c0016589:	31 c0                	xor    eax,eax
c001658b:	31 d2                	xor    edx,edx
c001658d:	83 c4 0c             	add    esp,0xc
c0016590:	c3                   	ret    

c0016591 <sysCallReadDir(regs*)>:
c0016591:	53                   	push   ebx
c0016592:	83 ec 18             	sub    esp,0x18
c0016595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016599:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001659c:	83 f8 02             	cmp    eax,0x2
c001659f:	76 60                	jbe    c0016601 <sysCallReadDir(regs*)+0x70>
c00165a1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00165a8:	77 48                	ja     c00165f2 <sysCallReadDir(regs*)+0x61>
c00165aa:	83 ec 0c             	sub    esp,0xc
c00165ad:	50                   	push   eax
c00165ae:	e8 18 56 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c00165b3:	83 c4 10             	add    esp,0x10
c00165b6:	85 c0                	test   eax,eax
c00165b8:	74 38                	je     c00165f2 <sysCallReadDir(regs*)+0x61>
c00165ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00165c2:	83 ec 0c             	sub    esp,0xc
c00165c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00165c7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00165cb:	51                   	push   ecx
c00165cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00165cf:	6a 00                	push   0x0
c00165d1:	68 10 01 00 00       	push   0x110
c00165d6:	50                   	push   eax
c00165d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00165da:	83 c4 20             	add    esp,0x20
c00165dd:	85 c0                	test   eax,eax
c00165df:	74 29                	je     c001660a <sysCallReadDir(regs*)+0x79>
c00165e1:	83 f8 07             	cmp    eax,0x7
c00165e4:	74 1b                	je     c0016601 <sysCallReadDir(regs*)+0x70>
c00165e6:	b8 02 00 00 00       	mov    eax,0x2
c00165eb:	31 d2                	xor    edx,edx
c00165ed:	83 c4 18             	add    esp,0x18
c00165f0:	5b                   	pop    ebx
c00165f1:	c3                   	ret    
c00165f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00165fc:	83 c4 18             	add    esp,0x18
c00165ff:	5b                   	pop    ebx
c0016600:	c3                   	ret    
c0016601:	b8 01 00 00 00       	mov    eax,0x1
c0016606:	31 d2                	xor    edx,edx
c0016608:	eb e3                	jmp    c00165ed <sysCallReadDir(regs*)+0x5c>
c001660a:	31 c0                	xor    eax,eax
c001660c:	31 d2                	xor    edx,edx
c001660e:	eb dd                	jmp    c00165ed <sysCallReadDir(regs*)+0x5c>

c0016610 <sysCallIsATTY(regs*)>:
c0016610:	83 ec 0c             	sub    esp,0xc
c0016613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016617:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001661a:	83 f8 02             	cmp    eax,0x2
c001661d:	76 07                	jbe    c0016626 <sysCallIsATTY(regs*)+0x16>
c001661f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016624:	75 26                	jne    c001664c <sysCallIsATTY(regs*)+0x3c>
c0016626:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001662b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001662e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016634:	85 c0                	test   eax,eax
c0016636:	74 24                	je     c001665c <sysCallIsATTY(regs*)+0x4c>
c0016638:	83 ec 0c             	sub    esp,0xc
c001663b:	8b 10                	mov    edx,DWORD PTR [eax]
c001663d:	50                   	push   eax
c001663e:	ff 12                	call   DWORD PTR [edx]
c0016640:	31 d2                	xor    edx,edx
c0016642:	0f b6 c0             	movzx  eax,al
c0016645:	83 c4 10             	add    esp,0x10
c0016648:	83 c4 0c             	add    esp,0xc
c001664b:	c3                   	ret    
c001664c:	83 ec 0c             	sub    esp,0xc
c001664f:	50                   	push   eax
c0016650:	e8 76 55 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016655:	83 c4 10             	add    esp,0x10
c0016658:	85 c0                	test   eax,eax
c001665a:	75 dc                	jne    c0016638 <sysCallIsATTY(regs*)+0x28>
c001665c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016661:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016666:	83 c4 0c             	add    esp,0xc
c0016669:	c3                   	ret    

c001666a <sysCallSeek(regs*)>:
c001666a:	53                   	push   ebx
c001666b:	83 ec 08             	sub    esp,0x8
c001666e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016672:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016675:	8d 50 fd             	lea    edx,[eax-0x3]
c0016678:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001667e:	77 32                	ja     c00166b2 <sysCallSeek(regs*)+0x48>
c0016680:	83 ec 0c             	sub    esp,0xc
c0016683:	50                   	push   eax
c0016684:	e8 42 55 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016689:	83 c4 0c             	add    esp,0xc
c001668c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001668f:	31 db                	xor    ebx,ebx
c0016691:	53                   	push   ebx
c0016692:	51                   	push   ecx
c0016693:	50                   	push   eax
c0016694:	e8 b1 70 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0016699:	83 c4 10             	add    esp,0x10
c001669c:	85 c0                	test   eax,eax
c001669e:	0f 95 c0             	setne  al
c00166a1:	31 d2                	xor    edx,edx
c00166a3:	0f b6 c0             	movzx  eax,al
c00166a6:	f7 d8                	neg    eax
c00166a8:	83 d2 00             	adc    edx,0x0
c00166ab:	83 c4 08             	add    esp,0x8
c00166ae:	f7 da                	neg    edx
c00166b0:	5b                   	pop    ebx
c00166b1:	c3                   	ret    
c00166b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00166b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00166bc:	83 c4 08             	add    esp,0x8
c00166bf:	5b                   	pop    ebx
c00166c0:	c3                   	ret    

c00166c1 <sysCallTell(regs*)>:
c00166c1:	53                   	push   ebx
c00166c2:	83 ec 08             	sub    esp,0x8
c00166c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166c9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00166cc:	83 f8 02             	cmp    eax,0x2
c00166cf:	76 4d                	jbe    c001671e <sysCallTell(regs*)+0x5d>
c00166d1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00166d6:	76 19                	jbe    c00166f1 <sysCallTell(regs*)+0x30>
c00166d8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00166db:	31 d2                	xor    edx,edx
c00166dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00166e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00166ea:	31 c0                	xor    eax,eax
c00166ec:	83 c4 08             	add    esp,0x8
c00166ef:	5b                   	pop    ebx
c00166f0:	c3                   	ret    
c00166f1:	83 ec 0c             	sub    esp,0xc
c00166f4:	50                   	push   eax
c00166f5:	e8 d1 54 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c00166fa:	5a                   	pop    edx
c00166fb:	59                   	pop    ecx
c00166fc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166ff:	50                   	push   eax
c0016700:	e8 9b 70 ff ff       	call   c000d7a0 <File::tell(unsigned long long*)>
c0016705:	83 c4 10             	add    esp,0x10
c0016708:	85 c0                	test   eax,eax
c001670a:	0f 95 c0             	setne  al
c001670d:	31 d2                	xor    edx,edx
c001670f:	0f b6 c0             	movzx  eax,al
c0016712:	f7 d8                	neg    eax
c0016714:	83 d2 00             	adc    edx,0x0
c0016717:	83 c4 08             	add    esp,0x8
c001671a:	f7 da                	neg    edx
c001671c:	5b                   	pop    ebx
c001671d:	c3                   	ret    
c001671e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016723:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016728:	83 c4 08             	add    esp,0x8
c001672b:	5b                   	pop    ebx
c001672c:	c3                   	ret    

c001672d <sysCallSize(regs*)>:
c001672d:	53                   	push   ebx
c001672e:	83 ec 18             	sub    esp,0x18
c0016731:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016735:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016738:	83 f8 02             	cmp    eax,0x2
c001673b:	76 53                	jbe    c0016790 <sysCallSize(regs*)+0x63>
c001673d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016742:	76 19                	jbe    c001675d <sysCallSize(regs*)+0x30>
c0016744:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016747:	31 d2                	xor    edx,edx
c0016749:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001674f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016756:	31 c0                	xor    eax,eax
c0016758:	83 c4 18             	add    esp,0x18
c001675b:	5b                   	pop    ebx
c001675c:	c3                   	ret    
c001675d:	83 ec 0c             	sub    esp,0xc
c0016760:	50                   	push   eax
c0016761:	e8 65 54 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016766:	83 c4 0c             	add    esp,0xc
c0016769:	8d 54 24 13          	lea    edx,[esp+0x13]
c001676d:	52                   	push   edx
c001676e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016771:	50                   	push   eax
c0016772:	e8 c1 71 ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c0016777:	83 c4 10             	add    esp,0x10
c001677a:	85 c0                	test   eax,eax
c001677c:	0f 95 c0             	setne  al
c001677f:	31 d2                	xor    edx,edx
c0016781:	0f b6 c0             	movzx  eax,al
c0016784:	f7 d8                	neg    eax
c0016786:	83 d2 00             	adc    edx,0x0
c0016789:	83 c4 18             	add    esp,0x18
c001678c:	f7 da                	neg    edx
c001678e:	5b                   	pop    ebx
c001678f:	c3                   	ret    
c0016790:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016795:	ba ff ff ff ff       	mov    edx,0xffffffff
c001679a:	83 c4 18             	add    esp,0x18
c001679d:	5b                   	pop    ebx
c001679e:	c3                   	ret    

c001679f <sysCallSizeFromFilename(regs*)>:
c001679f:	57                   	push   edi
c00167a0:	56                   	push   esi
c00167a1:	53                   	push   ebx
c00167a2:	83 ec 20             	sub    esp,0x20
c00167a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00167a9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00167ac:	83 fb 02             	cmp    ebx,0x2
c00167af:	0f 86 88 00 00 00    	jbe    c001683d <sysCallSizeFromFilename(regs*)+0x9e>
c00167b5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00167bb:	76 1b                	jbe    c00167d8 <sysCallSizeFromFilename(regs*)+0x39>
c00167bd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00167c0:	31 d2                	xor    edx,edx
c00167c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00167c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00167cf:	83 c4 20             	add    esp,0x20
c00167d2:	31 c0                	xor    eax,eax
c00167d4:	5b                   	pop    ebx
c00167d5:	5e                   	pop    esi
c00167d6:	5f                   	pop    edi
c00167d7:	c3                   	ret    
c00167d8:	83 ec 0c             	sub    esp,0xc
c00167db:	68 14 01 00 00       	push   0x114
c00167e0:	e8 76 35 ff ff       	call   c0009d5b <malloc>
c00167e5:	83 c4 0c             	add    esp,0xc
c00167e8:	89 c7                	mov    edi,eax
c00167ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ef:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00167f2:	53                   	push   ebx
c00167f3:	57                   	push   edi
c00167f4:	e8 b9 6d ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c00167f9:	83 c4 0c             	add    esp,0xc
c00167fc:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016800:	50                   	push   eax
c0016801:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016804:	57                   	push   edi
c0016805:	e8 2e 71 ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c001680a:	83 c4 10             	add    esp,0x10
c001680d:	85 ff                	test   edi,edi
c001680f:	74 14                	je     c0016825 <sysCallSizeFromFilename(regs*)+0x86>
c0016811:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016815:	8b 17                	mov    edx,DWORD PTR [edi]
c0016817:	83 ec 0c             	sub    esp,0xc
c001681a:	57                   	push   edi
c001681b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001681e:	83 c4 10             	add    esp,0x10
c0016821:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016825:	85 c0                	test   eax,eax
c0016827:	0f 95 c0             	setne  al
c001682a:	31 d2                	xor    edx,edx
c001682c:	0f b6 c0             	movzx  eax,al
c001682f:	f7 d8                	neg    eax
c0016831:	83 d2 00             	adc    edx,0x0
c0016834:	83 c4 20             	add    esp,0x20
c0016837:	f7 da                	neg    edx
c0016839:	5b                   	pop    ebx
c001683a:	5e                   	pop    esi
c001683b:	5f                   	pop    edi
c001683c:	c3                   	ret    
c001683d:	83 c4 20             	add    esp,0x20
c0016840:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016845:	5b                   	pop    ebx
c0016846:	ba ff ff ff ff       	mov    edx,0xffffffff
c001684b:	5e                   	pop    esi
c001684c:	5f                   	pop    edi
c001684d:	c3                   	ret    

c001684e <sysCallClose(regs*)>:
c001684e:	53                   	push   ebx
c001684f:	83 ec 08             	sub    esp,0x8
c0016852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016856:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016859:	83 f8 02             	cmp    eax,0x2
c001685c:	76 41                	jbe    c001689f <sysCallClose(regs*)+0x51>
c001685e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0016864:	83 fa 01             	cmp    edx,0x1
c0016867:	76 2d                	jbe    c0016896 <sysCallClose(regs*)+0x48>
c0016869:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001686e:	77 2f                	ja     c001689f <sysCallClose(regs*)+0x51>
c0016870:	83 ec 0c             	sub    esp,0xc
c0016873:	50                   	push   eax
c0016874:	e8 52 53 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016879:	89 c3                	mov    ebx,eax
c001687b:	89 04 24             	mov    DWORD PTR [esp],eax
c001687e:	e8 67 6e ff ff       	call   c000d6ea <File::close()>
c0016883:	83 c4 10             	add    esp,0x10
c0016886:	85 db                	test   ebx,ebx
c0016888:	74 0c                	je     c0016896 <sysCallClose(regs*)+0x48>
c001688a:	83 ec 0c             	sub    esp,0xc
c001688d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001688f:	53                   	push   ebx
c0016890:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	31 c0                	xor    eax,eax
c0016898:	31 d2                	xor    edx,edx
c001689a:	83 c4 08             	add    esp,0x8
c001689d:	5b                   	pop    ebx
c001689e:	c3                   	ret    
c001689f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168a9:	83 c4 08             	add    esp,0x8
c00168ac:	5b                   	pop    ebx
c00168ad:	c3                   	ret    

c00168ae <sysCallOpenDir(regs*)>:
c00168ae:	56                   	push   esi
c00168af:	53                   	push   ebx
c00168b0:	53                   	push   ebx
c00168b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168b5:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00168b8:	85 f6                	test   esi,esi
c00168ba:	74 59                	je     c0016915 <sysCallOpenDir(regs*)+0x67>
c00168bc:	83 ec 0c             	sub    esp,0xc
c00168bf:	68 14 01 00 00       	push   0x114
c00168c4:	e8 92 34 ff ff       	call   c0009d5b <malloc>
c00168c9:	83 c4 0c             	add    esp,0xc
c00168cc:	89 c6                	mov    esi,eax
c00168ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168d3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00168d6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168d9:	56                   	push   esi
c00168da:	e8 33 72 ff ff       	call   c000db12 <Directory::Directory(char const*, Process*)>
c00168df:	83 c4 10             	add    esp,0x10
c00168e2:	85 f6                	test   esi,esi
c00168e4:	74 2f                	je     c0016915 <sysCallOpenDir(regs*)+0x67>
c00168e6:	83 ec 0c             	sub    esp,0xc
c00168e9:	56                   	push   esi
c00168ea:	e8 fd 72 ff ff       	call   c000dbec <Directory::open()>
c00168ef:	83 c4 10             	add    esp,0x10
c00168f2:	85 c0                	test   eax,eax
c00168f4:	75 1f                	jne    c0016915 <sysCallOpenDir(regs*)+0x67>
c00168f6:	83 ec 0c             	sub    esp,0xc
c00168f9:	56                   	push   esi
c00168fa:	e8 d7 4f ff ff       	call   c000b8d6 <UnixFile::getFileDescriptor()>
c00168ff:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016902:	83 c4 10             	add    esp,0x10
c0016905:	89 02                	mov    DWORD PTR [edx],eax
c0016907:	c1 f8 1f             	sar    eax,0x1f
c001690a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001690d:	31 c0                	xor    eax,eax
c001690f:	59                   	pop    ecx
c0016910:	31 d2                	xor    edx,edx
c0016912:	5b                   	pop    ebx
c0016913:	5e                   	pop    esi
c0016914:	c3                   	ret    
c0016915:	59                   	pop    ecx
c0016916:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001691b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016920:	5b                   	pop    ebx
c0016921:	5e                   	pop    esi
c0016922:	c3                   	ret    

c0016923 <sysCallCloseDir(regs*)>:
c0016923:	53                   	push   ebx
c0016924:	83 ec 08             	sub    esp,0x8
c0016927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001692b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001692e:	8d 50 fd             	lea    edx,[eax-0x3]
c0016931:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016937:	77 2f                	ja     c0016968 <sysCallCloseDir(regs*)+0x45>
c0016939:	83 ec 0c             	sub    esp,0xc
c001693c:	50                   	push   eax
c001693d:	e8 89 52 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016942:	89 c3                	mov    ebx,eax
c0016944:	89 04 24             	mov    DWORD PTR [esp],eax
c0016947:	e8 fc 72 ff ff       	call   c000dc48 <Directory::close()>
c001694c:	83 c4 10             	add    esp,0x10
c001694f:	85 db                	test   ebx,ebx
c0016951:	74 0c                	je     c001695f <sysCallCloseDir(regs*)+0x3c>
c0016953:	83 ec 0c             	sub    esp,0xc
c0016956:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016958:	53                   	push   ebx
c0016959:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001695c:	83 c4 10             	add    esp,0x10
c001695f:	31 c0                	xor    eax,eax
c0016961:	31 d2                	xor    edx,edx
c0016963:	83 c4 08             	add    esp,0x8
c0016966:	5b                   	pop    ebx
c0016967:	c3                   	ret    
c0016968:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001696d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016972:	83 c4 08             	add    esp,0x8
c0016975:	5b                   	pop    ebx
c0016976:	c3                   	ret    

c0016977 <sysCallMakeDir(regs*)>:
c0016977:	56                   	push   esi
c0016978:	53                   	push   ebx
c0016979:	83 ec 10             	sub    esp,0x10
c001697c:	68 14 01 00 00       	push   0x114
c0016981:	e8 d5 33 ff ff       	call   c0009d5b <malloc>
c0016986:	83 c4 0c             	add    esp,0xc
c0016989:	89 c3                	mov    ebx,eax
c001698b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016990:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016993:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016997:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001699a:	53                   	push   ebx
c001699b:	e8 72 71 ff ff       	call   c000db12 <Directory::Directory(char const*, Process*)>
c00169a0:	83 c4 10             	add    esp,0x10
c00169a3:	85 db                	test   ebx,ebx
c00169a5:	74 32                	je     c00169d9 <sysCallMakeDir(regs*)+0x62>
c00169a7:	83 ec 0c             	sub    esp,0xc
c00169aa:	53                   	push   ebx
c00169ab:	e8 1c 74 ff ff       	call   c000ddcc <Directory::create()>
c00169b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169b3:	89 c6                	mov    esi,eax
c00169b5:	e8 8e 72 ff ff       	call   c000dc48 <Directory::close()>
c00169ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169c2:	83 c4 10             	add    esp,0x10
c00169c5:	31 c0                	xor    eax,eax
c00169c7:	59                   	pop    ecx
c00169c8:	85 f6                	test   esi,esi
c00169ca:	5b                   	pop    ebx
c00169cb:	0f 95 c0             	setne  al
c00169ce:	5e                   	pop    esi
c00169cf:	31 d2                	xor    edx,edx
c00169d1:	f7 d8                	neg    eax
c00169d3:	83 d2 00             	adc    edx,0x0
c00169d6:	f7 da                	neg    edx
c00169d8:	c3                   	ret    
c00169d9:	59                   	pop    ecx
c00169da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00169df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00169e4:	5b                   	pop    ebx
c00169e5:	5e                   	pop    esi
c00169e6:	c3                   	ret    

c00169e7 <sysCallWait(regs*)>:
c00169e7:	83 ec 10             	sub    esp,0x10
c00169ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00169ee:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00169f1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00169f4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00169f7:	e8 fc 24 00 00       	call   c0018ef8 <waitTask(int, int*, int)>
c00169fc:	83 c4 1c             	add    esp,0x1c
c00169ff:	99                   	cdq    
c0016a00:	c3                   	ret    

c0016a01 <sysCallNotImpl(regs*)>:
c0016a01:	83 ec 18             	sub    esp,0x18
c0016a04:	68 c9 67 02 c0       	push   0xc00267c9
c0016a09:	e8 b7 e6 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0016a0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016a13:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016a18:	83 c4 1c             	add    esp,0x1c
c0016a1b:	c3                   	ret    

c0016a1c <sysPanic(regs*)>:
c0016a1c:	83 ec 18             	sub    esp,0x18
c0016a1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a23:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016a26:	e8 9a e6 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0016a2b:	b8 01 00 00 00       	mov    eax,0x1
c0016a30:	31 d2                	xor    edx,edx
c0016a32:	83 c4 1c             	add    esp,0x1c
c0016a35:	c3                   	ret    

c0016a36 <sysCallRmdir(regs*)>:
c0016a36:	56                   	push   esi
c0016a37:	53                   	push   ebx
c0016a38:	83 ec 20             	sub    esp,0x20
c0016a3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016a3f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016a42:	68 14 01 00 00       	push   0x114
c0016a47:	e8 0f 33 ff ff       	call   c0009d5b <malloc>
c0016a4c:	83 c4 0c             	add    esp,0xc
c0016a4f:	89 c3                	mov    ebx,eax
c0016a51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a56:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016a59:	56                   	push   esi
c0016a5a:	53                   	push   ebx
c0016a5b:	e8 52 6b ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0016a60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a63:	e8 9c 6d ff ff       	call   c000d804 <File::unlink()>
c0016a68:	83 c4 10             	add    esp,0x10
c0016a6b:	85 db                	test   ebx,ebx
c0016a6d:	74 14                	je     c0016a83 <sysCallRmdir(regs*)+0x4d>
c0016a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a73:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016a75:	83 ec 0c             	sub    esp,0xc
c0016a78:	53                   	push   ebx
c0016a79:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016a7c:	83 c4 10             	add    esp,0x10
c0016a7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a83:	85 c0                	test   eax,eax
c0016a85:	0f 95 c0             	setne  al
c0016a88:	31 d2                	xor    edx,edx
c0016a8a:	0f b6 c0             	movzx  eax,al
c0016a8d:	f7 d8                	neg    eax
c0016a8f:	83 d2 00             	adc    edx,0x0
c0016a92:	83 c4 14             	add    esp,0x14
c0016a95:	f7 da                	neg    edx
c0016a97:	5b                   	pop    ebx
c0016a98:	5e                   	pop    esi
c0016a99:	c3                   	ret    

c0016a9a <sysCallUnlink(regs*)>:
c0016a9a:	56                   	push   esi
c0016a9b:	53                   	push   ebx
c0016a9c:	83 ec 20             	sub    esp,0x20
c0016a9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016aa3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016aa6:	68 14 01 00 00       	push   0x114
c0016aab:	e8 ab 32 ff ff       	call   c0009d5b <malloc>
c0016ab0:	83 c4 0c             	add    esp,0xc
c0016ab3:	89 c3                	mov    ebx,eax
c0016ab5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aba:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016abd:	56                   	push   esi
c0016abe:	53                   	push   ebx
c0016abf:	e8 ee 6a ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0016ac4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ac7:	e8 38 6d ff ff       	call   c000d804 <File::unlink()>
c0016acc:	83 c4 10             	add    esp,0x10
c0016acf:	85 db                	test   ebx,ebx
c0016ad1:	74 14                	je     c0016ae7 <sysCallUnlink(regs*)+0x4d>
c0016ad3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ad7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016ad9:	83 ec 0c             	sub    esp,0xc
c0016adc:	53                   	push   ebx
c0016add:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016ae0:	83 c4 10             	add    esp,0x10
c0016ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ae7:	85 c0                	test   eax,eax
c0016ae9:	0f 95 c0             	setne  al
c0016aec:	31 d2                	xor    edx,edx
c0016aee:	0f b6 c0             	movzx  eax,al
c0016af1:	f7 d8                	neg    eax
c0016af3:	83 d2 00             	adc    edx,0x0
c0016af6:	83 c4 14             	add    esp,0x14
c0016af9:	f7 da                	neg    edx
c0016afb:	5b                   	pop    ebx
c0016afc:	5e                   	pop    esi
c0016afd:	c3                   	ret    

c0016afe <sysCallGetArgv(regs*)>:
c0016afe:	83 ec 0c             	sub    esp,0xc
c0016b01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b05:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016b08:	85 c0                	test   eax,eax
c0016b0a:	78 2b                	js     c0016b37 <sysCallGetArgv(regs*)+0x39>
c0016b0c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016b12:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016b15:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016b1b:	7d 1a                	jge    c0016b37 <sysCallGetArgv(regs*)+0x39>
c0016b1d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016b24:	85 c0                	test   eax,eax
c0016b26:	74 17                	je     c0016b3f <sysCallGetArgv(regs*)+0x41>
c0016b28:	83 ec 08             	sub    esp,0x8
c0016b2b:	50                   	push   eax
c0016b2c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016b2f:	e8 0c 9c fe ff       	call   c0000740 <strcpy>
c0016b34:	83 c4 10             	add    esp,0x10
c0016b37:	31 c0                	xor    eax,eax
c0016b39:	31 d2                	xor    edx,edx
c0016b3b:	83 c4 0c             	add    esp,0xc
c0016b3e:	c3                   	ret    
c0016b3f:	b8 01 00 00 00       	mov    eax,0x1
c0016b44:	31 d2                	xor    edx,edx
c0016b46:	83 c4 0c             	add    esp,0xc
c0016b49:	c3                   	ret    

c0016b4a <sysCallTTYName(regs*)>:
c0016b4a:	56                   	push   esi
c0016b4b:	53                   	push   ebx
c0016b4c:	53                   	push   ebx
c0016b4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b51:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016b54:	85 c0                	test   eax,eax
c0016b56:	74 5f                	je     c0016bb7 <sysCallTTYName(regs*)+0x6d>
c0016b58:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016b5b:	83 f8 02             	cmp    eax,0x2
c0016b5e:	77 3e                	ja     c0016b9e <sysCallTTYName(regs*)+0x54>
c0016b60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b68:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016b6e:	85 db                	test   ebx,ebx
c0016b70:	74 45                	je     c0016bb7 <sysCallTTYName(regs*)+0x6d>
c0016b72:	83 ec 0c             	sub    esp,0xc
c0016b75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b77:	53                   	push   ebx
c0016b78:	ff 10                	call   DWORD PTR [eax]
c0016b7a:	83 c4 10             	add    esp,0x10
c0016b7d:	84 c0                	test   al,al
c0016b7f:	74 41                	je     c0016bc2 <sysCallTTYName(regs*)+0x78>
c0016b81:	83 ec 08             	sub    esp,0x8
c0016b84:	81 c3 82 00 00 00    	add    ebx,0x82
c0016b8a:	53                   	push   ebx
c0016b8b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016b8e:	e8 ad 9b fe ff       	call   c0000740 <strcpy>
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	31 c0                	xor    eax,eax
c0016b98:	59                   	pop    ecx
c0016b99:	31 d2                	xor    edx,edx
c0016b9b:	5b                   	pop    ebx
c0016b9c:	5e                   	pop    esi
c0016b9d:	c3                   	ret    
c0016b9e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016ba3:	74 bb                	je     c0016b60 <sysCallTTYName(regs*)+0x16>
c0016ba5:	83 ec 0c             	sub    esp,0xc
c0016ba8:	50                   	push   eax
c0016ba9:	e8 1d 50 ff ff       	call   c000bbcb <getFromFileDescriptor(int)>
c0016bae:	83 c4 10             	add    esp,0x10
c0016bb1:	89 c3                	mov    ebx,eax
c0016bb3:	85 db                	test   ebx,ebx
c0016bb5:	75 bb                	jne    c0016b72 <sysCallTTYName(regs*)+0x28>
c0016bb7:	59                   	pop    ecx
c0016bb8:	b8 01 00 00 00       	mov    eax,0x1
c0016bbd:	31 d2                	xor    edx,edx
c0016bbf:	5b                   	pop    ebx
c0016bc0:	5e                   	pop    esi
c0016bc1:	c3                   	ret    
c0016bc2:	59                   	pop    ecx
c0016bc3:	b8 02 00 00 00       	mov    eax,0x2
c0016bc8:	31 d2                	xor    edx,edx
c0016bca:	5b                   	pop    ebx
c0016bcb:	5e                   	pop    esi
c0016bcc:	c3                   	ret    

c0016bcd <sysCallUSleep(regs*)>:
c0016bcd:	83 ec 1c             	sub    esp,0x1c
c0016bd0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016bd4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016bd7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016bda:	6a 00                	push   0x0
c0016bdc:	6a 64                	push   0x64
c0016bde:	52                   	push   edx
c0016bdf:	50                   	push   eax
c0016be0:	e8 6b c1 00 00       	call   c0022d50 <__udivdi3>
c0016be5:	83 c4 14             	add    esp,0x14
c0016be8:	50                   	push   eax
c0016be9:	e8 da 23 00 00       	call   c0018fc8 <milliTenthSleep(unsigned int)>
c0016bee:	31 c0                	xor    eax,eax
c0016bf0:	31 d2                	xor    edx,edx
c0016bf2:	83 c4 1c             	add    esp,0x1c
c0016bf5:	c3                   	ret    

c0016bf6 <sysCallSpawn(regs*)>:
c0016bf6:	56                   	push   esi
c0016bf7:	53                   	push   ebx
c0016bf8:	50                   	push   eax
c0016bf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016bfd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016c00:	85 c0                	test   eax,eax
c0016c02:	75 08                	jne    c0016c0c <sysCallSpawn(regs*)+0x16>
c0016c04:	59                   	pop    ecx
c0016c05:	31 c0                	xor    eax,eax
c0016c07:	31 d2                	xor    edx,edx
c0016c09:	5b                   	pop    ebx
c0016c0a:	5e                   	pop    esi
c0016c0b:	c3                   	ret    
c0016c0c:	83 ec 0c             	sub    esp,0xc
c0016c0f:	68 1f 07 00 00       	push   0x71f
c0016c14:	e8 42 31 ff ff       	call   c0009d5b <malloc>
c0016c19:	83 c4 10             	add    esp,0x10
c0016c1c:	89 c6                	mov    esi,eax
c0016c1e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016c21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016c24:	85 c0                	test   eax,eax
c0016c26:	75 32                	jne    c0016c5a <sysCallSpawn(regs*)+0x64>
c0016c28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c30:	52                   	push   edx
c0016c31:	50                   	push   eax
c0016c32:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c35:	56                   	push   esi
c0016c36:	e8 85 1a 00 00       	call   c00186c0 <Process::Process(char const*, Process*, char**)>
c0016c3b:	83 c4 10             	add    esp,0x10
c0016c3e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016c45:	75 bd                	jne    c0016c04 <sysCallSpawn(regs*)+0xe>
c0016c47:	83 ec 0c             	sub    esp,0xc
c0016c4a:	56                   	push   esi
c0016c4b:	e8 5c 1f 00 00       	call   c0018bac <Process::createUserThread()>
c0016c50:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c52:	83 c4 10             	add    esp,0x10
c0016c55:	99                   	cdq    
c0016c56:	59                   	pop    ecx
c0016c57:	5b                   	pop    ebx
c0016c58:	5e                   	pop    esi
c0016c59:	c3                   	ret    
c0016c5a:	31 c0                	xor    eax,eax
c0016c5c:	eb d2                	jmp    c0016c30 <sysCallSpawn(regs*)+0x3a>

c0016c5e <sysCallGetEnv(regs*)>:
c0016c5e:	57                   	push   edi
c0016c5f:	56                   	push   esi
c0016c60:	53                   	push   ebx
c0016c61:	83 ec 1c             	sub    esp,0x1c
c0016c64:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016c68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c6d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016c70:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016c73:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016c76:	e8 96 e3 ff ff       	call   c0015011 <Krnl::getProcessTotalEnvCount(Process*)>
c0016c7b:	83 c4 10             	add    esp,0x10
c0016c7e:	39 c7                	cmp    edi,eax
c0016c80:	7c 14                	jl     c0016c96 <sysCallGetEnv(regs*)+0x38>
c0016c82:	85 f6                	test   esi,esi
c0016c84:	75 0b                	jne    c0016c91 <sysCallGetEnv(regs*)+0x33>
c0016c86:	83 c4 10             	add    esp,0x10
c0016c89:	31 c0                	xor    eax,eax
c0016c8b:	5b                   	pop    ebx
c0016c8c:	31 d2                	xor    edx,edx
c0016c8e:	5e                   	pop    esi
c0016c8f:	5f                   	pop    edi
c0016c90:	c3                   	ret    
c0016c91:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016c94:	eb f0                	jmp    c0016c86 <sysCallGetEnv(regs*)+0x28>
c0016c96:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c9a:	52                   	push   edx
c0016c9b:	57                   	push   edi
c0016c9c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ca2:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016ca5:	50                   	push   eax
c0016ca6:	e8 86 e3 ff ff       	call   c0015031 <Krnl::getProcessEnvPair(Process*, int)>
c0016cab:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016cae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cb2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016cb6:	83 c4 0c             	add    esp,0xc
c0016cb9:	85 c9                	test   ecx,ecx
c0016cbb:	75 23                	jne    c0016ce0 <sysCallGetEnv(regs*)+0x82>
c0016cbd:	83 ec 0c             	sub    esp,0xc
c0016cc0:	50                   	push   eax
c0016cc1:	e8 da 99 fe ff       	call   c00006a0 <strlen>
c0016cc6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016cc9:	89 c3                	mov    ebx,eax
c0016ccb:	e8 d0 99 fe ff       	call   c00006a0 <strlen>
c0016cd0:	83 c4 10             	add    esp,0x10
c0016cd3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	31 d2                	xor    edx,edx
c0016cdc:	5b                   	pop    ebx
c0016cdd:	5e                   	pop    esi
c0016cde:	5f                   	pop    edi
c0016cdf:	c3                   	ret    
c0016ce0:	83 ec 08             	sub    esp,0x8
c0016ce3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016ce6:	50                   	push   eax
c0016ce7:	56                   	push   esi
c0016ce8:	e8 53 9a fe ff       	call   c0000740 <strcpy>
c0016ced:	58                   	pop    eax
c0016cee:	5a                   	pop    edx
c0016cef:	68 e3 67 02 c0       	push   0xc00267e3
c0016cf4:	56                   	push   esi
c0016cf5:	e8 86 9b fe ff       	call   c0000880 <strcat>
c0016cfa:	59                   	pop    ecx
c0016cfb:	5b                   	pop    ebx
c0016cfc:	57                   	push   edi
c0016cfd:	56                   	push   esi
c0016cfe:	e8 7d 9b fe ff       	call   c0000880 <strcat>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	e9 7b ff ff ff       	jmp    c0016c86 <sysCallGetEnv(regs*)+0x28>

c0016d0b <sysAppSettings(regs*)>:
c0016d0b:	57                   	push   edi
c0016d0c:	56                   	push   esi
c0016d0d:	56                   	push   esi
c0016d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d12:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016d15:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016d1b:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016d20:	66 3d c0 09          	cmp    ax,0x9c0
c0016d24:	75 2e                	jne    c0016d54 <sysAppSettings(regs*)+0x49>
c0016d26:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016d2c:	83 e0 1f             	and    eax,0x1f
c0016d2f:	3c 01                	cmp    al,0x1
c0016d31:	74 2c                	je     c0016d5f <sysAppSettings(regs*)+0x54>
c0016d33:	3c 07                	cmp    al,0x7
c0016d35:	0f 84 b3 00 00 00    	je     c0016dee <sysAppSettings(regs*)+0xe3>
c0016d3b:	84 c0                	test   al,al
c0016d3d:	0f 84 d2 00 00 00    	je     c0016e15 <sysAppSettings(regs*)+0x10a>
c0016d43:	3c 08                	cmp    al,0x8
c0016d45:	74 63                	je     c0016daa <sysAppSettings(regs*)+0x9f>
c0016d47:	59                   	pop    ecx
c0016d48:	0f b6 c0             	movzx  eax,al
c0016d4b:	5e                   	pop    esi
c0016d4c:	05 e8 03 00 00       	add    eax,0x3e8
c0016d51:	5f                   	pop    edi
c0016d52:	99                   	cdq    
c0016d53:	c3                   	ret    
c0016d54:	b8 01 00 00 00       	mov    eax,0x1
c0016d59:	59                   	pop    ecx
c0016d5a:	31 d2                	xor    edx,edx
c0016d5c:	5e                   	pop    esi
c0016d5d:	5f                   	pop    edi
c0016d5e:	c3                   	ret    
c0016d5f:	50                   	push   eax
c0016d60:	68 00 01 00 00       	push   0x100
c0016d65:	6a 00                	push   0x0
c0016d67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d6f:	83 c0 0c             	add    eax,0xc
c0016d72:	50                   	push   eax
c0016d73:	e8 0c 99 fe ff       	call   c0000684 <memset>
c0016d78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d7d:	b9 ff 00 00 00       	mov    ecx,0xff
c0016d82:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016d85:	83 c7 0c             	add    edi,0xc
c0016d88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d8f:	5a                   	pop    edx
c0016d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d93:	59                   	pop    ecx
c0016d94:	8d 50 0c             	lea    edx,[eax+0xc]
c0016d97:	52                   	push   edx
c0016d98:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016d9e:	e8 51 3f ff ff       	call   c000acf4 <VgaText::setTitle(char*)>
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	31 c0                	xor    eax,eax
c0016da8:	eb af                	jmp    c0016d59 <sysAppSettings(regs*)+0x4e>
c0016daa:	83 ec 08             	sub    esp,0x8
c0016dad:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016db3:	83 e0 0f             	and    eax,0xf
c0016db6:	50                   	push   eax
c0016db7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016dbf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016dc5:	e8 1a 3f ff ff       	call   c000ace4 <VgaText::setTitleColour(VgaColour)>
c0016dca:	5f                   	pop    edi
c0016dcb:	58                   	pop    eax
c0016dcc:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016dd2:	c1 e8 04             	shr    eax,0x4
c0016dd5:	83 e0 0f             	and    eax,0xf
c0016dd8:	50                   	push   eax
c0016dd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dde:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016de1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016de7:	e8 e8 3e ff ff       	call   c000acd4 <VgaText::setTitleTextColour(VgaColour)>
c0016dec:	eb b5                	jmp    c0016da3 <sysAppSettings(regs*)+0x98>
c0016dee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016df3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016df6:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016dfc:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016e02:	c0 e8 06             	shr    al,0x6
c0016e05:	83 e0 01             	and    eax,0x1
c0016e08:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016e0e:	31 c0                	xor    eax,eax
c0016e10:	e9 44 ff ff ff       	jmp    c0016d59 <sysAppSettings(regs*)+0x4e>
c0016e15:	b8 02 00 00 00       	mov    eax,0x2
c0016e1a:	e9 3a ff ff ff       	jmp    c0016d59 <sysAppSettings(regs*)+0x4e>

c0016e1f <sysSetFatAttrib(regs*)>:
c0016e1f:	57                   	push   edi
c0016e20:	56                   	push   esi
c0016e21:	53                   	push   ebx
c0016e22:	83 ec 1c             	sub    esp,0x1c
c0016e25:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016e29:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016e2c:	68 14 01 00 00       	push   0x114
c0016e31:	e8 25 2f ff ff       	call   c0009d5b <malloc>
c0016e36:	83 c4 0c             	add    esp,0xc
c0016e39:	89 c3                	mov    ebx,eax
c0016e3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e40:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016e43:	57                   	push   edi
c0016e44:	53                   	push   ebx
c0016e45:	e8 68 67 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0016e4a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016e4d:	83 c4 0c             	add    esp,0xc
c0016e50:	0f b6 d4             	movzx  edx,ah
c0016e53:	0f b6 c0             	movzx  eax,al
c0016e56:	52                   	push   edx
c0016e57:	50                   	push   eax
c0016e58:	53                   	push   ebx
c0016e59:	e8 40 6a ff ff       	call   c000d89e <File::chfatattr(unsigned char, unsigned char)>
c0016e5e:	83 c4 10             	add    esp,0x10
c0016e61:	85 db                	test   ebx,ebx
c0016e63:	74 14                	je     c0016e79 <sysSetFatAttrib(regs*)+0x5a>
c0016e65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e69:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016e6b:	83 ec 0c             	sub    esp,0xc
c0016e6e:	53                   	push   ebx
c0016e6f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016e72:	83 c4 10             	add    esp,0x10
c0016e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e79:	85 c0                	test   eax,eax
c0016e7b:	0f 95 c0             	setne  al
c0016e7e:	31 d2                	xor    edx,edx
c0016e80:	0f b6 c0             	movzx  eax,al
c0016e83:	f7 d8                	neg    eax
c0016e85:	83 d2 00             	adc    edx,0x0
c0016e88:	83 c4 10             	add    esp,0x10
c0016e8b:	f7 da                	neg    edx
c0016e8d:	5b                   	pop    ebx
c0016e8e:	5e                   	pop    esi
c0016e8f:	5f                   	pop    edi
c0016e90:	c3                   	ret    

c0016e91 <sysPipe(regs*)>:
c0016e91:	57                   	push   edi
c0016e92:	56                   	push   esi
c0016e93:	53                   	push   ebx
c0016e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e98:	83 ec 0c             	sub    esp,0xc
c0016e9b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016e9e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016ea1:	6a 20                	push   0x20
c0016ea3:	e8 b3 2e ff ff       	call   c0009d5b <malloc>
c0016ea8:	89 c3                	mov    ebx,eax
c0016eaa:	58                   	pop    eax
c0016eab:	5a                   	pop    edx
c0016eac:	68 00 50 00 00       	push   0x5000
c0016eb1:	53                   	push   ebx
c0016eb2:	e8 b5 3b ff ff       	call   c000aa6c <Pipe::Pipe(int)>
c0016eb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016eba:	e8 17 4a ff ff       	call   c000b8d6 <UnixFile::getFileDescriptor()>
c0016ebf:	89 07                	mov    DWORD PTR [edi],eax
c0016ec1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ec4:	e8 0d 4a ff ff       	call   c000b8d6 <UnixFile::getFileDescriptor()>
c0016ec9:	83 c4 10             	add    esp,0x10
c0016ecc:	89 06                	mov    DWORD PTR [esi],eax
c0016ece:	31 d2                	xor    edx,edx
c0016ed0:	5b                   	pop    ebx
c0016ed1:	31 c0                	xor    eax,eax
c0016ed3:	5e                   	pop    esi
c0016ed4:	5f                   	pop    edi
c0016ed5:	c3                   	ret    

c0016ed6 <sysGetUnixTime(regs*)>:
c0016ed6:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0016edb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ee1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ee5:	e9 e8 71 ff ff       	jmp    c000e0d2 <Clock::timeInSecondsLocal()>

c0016eea <string_ends_with(char const*, char const*)>:
c0016eea:	57                   	push   edi
c0016eeb:	56                   	push   esi
c0016eec:	53                   	push   ebx
c0016eed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ef1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016ef5:	83 ec 0c             	sub    esp,0xc
c0016ef8:	53                   	push   ebx
c0016ef9:	e8 a2 97 fe ff       	call   c00006a0 <strlen>
c0016efe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f01:	89 c6                	mov    esi,eax
c0016f03:	e8 98 97 fe ff       	call   c00006a0 <strlen>
c0016f08:	83 c4 10             	add    esp,0x10
c0016f0b:	39 c6                	cmp    esi,eax
c0016f0d:	7d 06                	jge    c0016f15 <string_ends_with(char const*, char const*)+0x2b>
c0016f0f:	5b                   	pop    ebx
c0016f10:	31 c0                	xor    eax,eax
c0016f12:	5e                   	pop    esi
c0016f13:	5f                   	pop    edi
c0016f14:	c3                   	ret    
c0016f15:	83 ec 08             	sub    esp,0x8
c0016f18:	29 c6                	sub    esi,eax
c0016f1a:	57                   	push   edi
c0016f1b:	01 f3                	add    ebx,esi
c0016f1d:	53                   	push   ebx
c0016f1e:	e8 a9 98 fe ff       	call   c00007cc <strcmp>
c0016f23:	83 c4 10             	add    esp,0x10
c0016f26:	85 c0                	test   eax,eax
c0016f28:	5b                   	pop    ebx
c0016f29:	0f 94 c0             	sete   al
c0016f2c:	5e                   	pop    esi
c0016f2d:	0f b6 c0             	movzx  eax,al
c0016f30:	5f                   	pop    edi
c0016f31:	c3                   	ret    

c0016f32 <sysCallOpen(regs*)>:
c0016f32:	56                   	push   esi
c0016f33:	53                   	push   ebx
c0016f34:	81 ec 04 01 00 00    	sub    esp,0x104
c0016f3a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016f41:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016f44:	85 c9                	test   ecx,ecx
c0016f46:	0f 84 ad 01 00 00    	je     c00170f9 <sysCallOpen(regs*)+0x1c7>
c0016f4c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016f4f:	85 c0                	test   eax,eax
c0016f51:	0f 84 a2 01 00 00    	je     c00170f9 <sysCallOpen(regs*)+0x1c7>
c0016f57:	52                   	push   edx
c0016f58:	68 e5 67 02 c0       	push   0xc00267e5
c0016f5d:	50                   	push   eax
c0016f5e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016f62:	56                   	push   esi
c0016f63:	e8 a0 64 ff ff       	call   c000d408 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016f68:	89 34 24             	mov    DWORD PTR [esp],esi
c0016f6b:	e8 30 97 fe ff       	call   c00006a0 <strlen>
c0016f70:	83 c4 10             	add    esp,0x10
c0016f73:	48                   	dec    eax
c0016f74:	74 1d                	je     c0016f93 <sysCallOpen(regs*)+0x61>
c0016f76:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016f79:	eb 0f                	jmp    c0016f8a <sysCallOpen(regs*)+0x58>
c0016f7b:	80 fa 3a             	cmp    dl,0x3a
c0016f7e:	74 0f                	je     c0016f8f <sysCallOpen(regs*)+0x5d>
c0016f80:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016f84:	48                   	dec    eax
c0016f85:	74 0c                	je     c0016f93 <sysCallOpen(regs*)+0x61>
c0016f87:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016f8a:	80 fa 2e             	cmp    dl,0x2e
c0016f8d:	75 ec                	jne    c0016f7b <sysCallOpen(regs*)+0x49>
c0016f8f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016f93:	83 ec 08             	sub    esp,0x8
c0016f96:	68 e9 67 02 c0       	push   0xc00267e9
c0016f9b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f9e:	e8 47 ff ff ff       	call   c0016eea <string_ends_with(char const*, char const*)>
c0016fa3:	83 c4 10             	add    esp,0x10
c0016fa6:	85 c0                	test   eax,eax
c0016fa8:	74 1d                	je     c0016fc7 <sysCallOpen(regs*)+0x95>
c0016faa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016fad:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016fb3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016fba:	81 c4 04 01 00 00    	add    esp,0x104
c0016fc0:	31 c0                	xor    eax,eax
c0016fc2:	31 d2                	xor    edx,edx
c0016fc4:	5b                   	pop    ebx
c0016fc5:	5e                   	pop    esi
c0016fc6:	c3                   	ret    
c0016fc7:	83 ec 08             	sub    esp,0x8
c0016fca:	68 ee 67 02 c0       	push   0xc00267ee
c0016fcf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fd2:	e8 13 ff ff ff       	call   c0016eea <string_ends_with(char const*, char const*)>
c0016fd7:	83 c4 10             	add    esp,0x10
c0016fda:	85 c0                	test   eax,eax
c0016fdc:	75 cc                	jne    c0016faa <sysCallOpen(regs*)+0x78>
c0016fde:	83 ec 08             	sub    esp,0x8
c0016fe1:	68 ea 67 02 c0       	push   0xc00267ea
c0016fe6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fe9:	e8 de 97 fe ff       	call   c00007cc <strcmp>
c0016fee:	83 c4 10             	add    esp,0x10
c0016ff1:	85 c0                	test   eax,eax
c0016ff3:	74 b5                	je     c0016faa <sysCallOpen(regs*)+0x78>
c0016ff5:	83 ec 08             	sub    esp,0x8
c0016ff8:	68 e9 67 02 c0       	push   0xc00267e9
c0016ffd:	56                   	push   esi
c0016ffe:	e8 e7 fe ff ff       	call   c0016eea <string_ends_with(char const*, char const*)>
c0017003:	83 c4 10             	add    esp,0x10
c0017006:	85 c0                	test   eax,eax
c0017008:	75 a0                	jne    c0016faa <sysCallOpen(regs*)+0x78>
c001700a:	83 ec 08             	sub    esp,0x8
c001700d:	68 f3 67 02 c0       	push   0xc00267f3
c0017012:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017015:	e8 d0 fe ff ff       	call   c0016eea <string_ends_with(char const*, char const*)>
c001701a:	83 c4 10             	add    esp,0x10
c001701d:	85 c0                	test   eax,eax
c001701f:	0f 85 e7 00 00 00    	jne    c001710c <sysCallOpen(regs*)+0x1da>
c0017025:	83 ec 08             	sub    esp,0x8
c0017028:	68 f8 67 02 c0       	push   0xc00267f8
c001702d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017030:	e8 b5 fe ff ff       	call   c0016eea <string_ends_with(char const*, char const*)>
c0017035:	83 c4 10             	add    esp,0x10
c0017038:	85 c0                	test   eax,eax
c001703a:	0f 85 cc 00 00 00    	jne    c001710c <sysCallOpen(regs*)+0x1da>
c0017040:	83 ec 08             	sub    esp,0x8
c0017043:	68 f4 67 02 c0       	push   0xc00267f4
c0017048:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001704b:	e8 7c 97 fe ff       	call   c00007cc <strcmp>
c0017050:	83 c4 10             	add    esp,0x10
c0017053:	85 c0                	test   eax,eax
c0017055:	0f 84 b1 00 00 00    	je     c001710c <sysCallOpen(regs*)+0x1da>
c001705b:	83 ec 08             	sub    esp,0x8
c001705e:	68 f3 67 02 c0       	push   0xc00267f3
c0017063:	56                   	push   esi
c0017064:	e8 81 fe ff ff       	call   c0016eea <string_ends_with(char const*, char const*)>
c0017069:	83 c4 10             	add    esp,0x10
c001706c:	85 c0                	test   eax,eax
c001706e:	0f 85 98 00 00 00    	jne    c001710c <sysCallOpen(regs*)+0x1da>
c0017074:	83 ec 0c             	sub    esp,0xc
c0017077:	68 14 01 00 00       	push   0x114
c001707c:	e8 da 2c ff ff       	call   c0009d5b <malloc>
c0017081:	83 c4 0c             	add    esp,0xc
c0017084:	89 c6                	mov    esi,eax
c0017086:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001708b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001708e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017091:	56                   	push   esi
c0017092:	e8 1b 65 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0017097:	83 c4 10             	add    esp,0x10
c001709a:	85 f6                	test   esi,esi
c001709c:	74 5b                	je     c00170f9 <sysCallOpen(regs*)+0x1c7>
c001709e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00170a1:	0f b6 c2             	movzx  eax,dl
c00170a4:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00170a7:	89 d0                	mov    eax,edx
c00170a9:	83 e0 01             	and    eax,0x1
c00170ac:	f6 c2 02             	test   dl,0x2
c00170af:	74 03                	je     c00170b4 <sysCallOpen(regs*)+0x182>
c00170b1:	83 c8 02             	or     eax,0x2
c00170b4:	f6 c2 04             	test   dl,0x4
c00170b7:	74 03                	je     c00170bc <sysCallOpen(regs*)+0x18a>
c00170b9:	83 c8 04             	or     eax,0x4
c00170bc:	f6 c2 08             	test   dl,0x8
c00170bf:	74 03                	je     c00170c4 <sysCallOpen(regs*)+0x192>
c00170c1:	83 c8 0a             	or     eax,0xa
c00170c4:	83 e2 10             	and    edx,0x10
c00170c7:	74 03                	je     c00170cc <sysCallOpen(regs*)+0x19a>
c00170c9:	83 c8 12             	or     eax,0x12
c00170cc:	83 ec 08             	sub    esp,0x8
c00170cf:	50                   	push   eax
c00170d0:	56                   	push   esi
c00170d1:	e8 b6 65 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c00170d6:	83 c4 10             	add    esp,0x10
c00170d9:	85 c0                	test   eax,eax
c00170db:	75 1c                	jne    c00170f9 <sysCallOpen(regs*)+0x1c7>
c00170dd:	83 ec 0c             	sub    esp,0xc
c00170e0:	56                   	push   esi
c00170e1:	e8 f0 47 ff ff       	call   c000b8d6 <UnixFile::getFileDescriptor()>
c00170e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00170e9:	83 c4 10             	add    esp,0x10
c00170ec:	89 02                	mov    DWORD PTR [edx],eax
c00170ee:	c1 f8 1f             	sar    eax,0x1f
c00170f1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00170f4:	e9 c1 fe ff ff       	jmp    c0016fba <sysCallOpen(regs*)+0x88>
c00170f9:	81 c4 04 01 00 00    	add    esp,0x104
c00170ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017104:	ba ff ff ff ff       	mov    edx,0xffffffff
c0017109:	5b                   	pop    ebx
c001710a:	5e                   	pop    esi
c001710b:	c3                   	ret    
c001710c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001710f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017115:	e9 99 fe ff ff       	jmp    c0016fb3 <sysCallOpen(regs*)+0x81>

c001711a <Sys::loadSyscalls()>:
c001711a:	c7 05 80 94 02 c0 8b 63 01 c0 	mov    DWORD PTR ds:0xc0029480,0xc001638b
c0017124:	c7 05 84 94 02 c0 80 5f 01 c0 	mov    DWORD PTR ds:0xc0029484,0xc0015f80
c001712e:	c7 05 88 94 02 c0 71 61 01 c0 	mov    DWORD PTR ds:0xc0029488,0xc0016171
c0017138:	c7 05 8c 94 02 c0 c1 62 01 c0 	mov    DWORD PTR ds:0xc002948c,0xc00162c1
c0017142:	c7 05 90 94 02 c0 09 61 01 c0 	mov    DWORD PTR ds:0xc0029490,0xc0016109
c001714c:	c7 05 94 94 02 c0 b7 5f 01 c0 	mov    DWORD PTR ds:0xc0029494,0xc0015fb7
c0017156:	c7 05 98 94 02 c0 98 5f 01 c0 	mov    DWORD PTR ds:0xc0029498,0xc0015f98
c0017160:	c7 05 9c 94 02 c0 c6 61 01 c0 	mov    DWORD PTR ds:0xc002949c,0xc00161c6
c001716a:	c7 05 a4 94 02 c0 4e 68 01 c0 	mov    DWORD PTR ds:0xc00294a4,0xc001684e
c0017174:	c7 05 a0 94 02 c0 32 6f 01 c0 	mov    DWORD PTR ds:0xc00294a0,0xc0016f32
c001717e:	c7 05 a8 94 02 c0 ae 68 01 c0 	mov    DWORD PTR ds:0xc00294a8,0xc00168ae
c0017188:	c7 05 ac 94 02 c0 91 65 01 c0 	mov    DWORD PTR ds:0xc00294ac,0xc0016591
c0017192:	c7 05 b0 94 02 c0 c3 63 01 c0 	mov    DWORD PTR ds:0xc00294b0,0xc00163c3
c001719c:	c7 05 b4 94 02 c0 c8 63 01 c0 	mov    DWORD PTR ds:0xc00294b4,0xc00163c8
c00171a6:	c7 05 b8 94 02 c0 77 69 01 c0 	mov    DWORD PTR ds:0xc00294b8,0xc0016977
c00171b0:	c7 05 bc 94 02 c0 23 69 01 c0 	mov    DWORD PTR ds:0xc00294bc,0xc0016923
c00171ba:	c7 05 c0 94 02 c0 6a 66 01 c0 	mov    DWORD PTR ds:0xc00294c0,0xc001666a
c00171c4:	c7 05 c4 94 02 c0 c1 66 01 c0 	mov    DWORD PTR ds:0xc00294c4,0xc00166c1
c00171ce:	c7 05 c8 94 02 c0 2d 67 01 c0 	mov    DWORD PTR ds:0xc00294c8,0xc001672d
c00171d8:	c7 05 cc 94 02 c0 cd 63 01 c0 	mov    DWORD PTR ds:0xc00294cc,0xc00163cd
c00171e2:	c7 05 d0 94 02 c0 e7 69 01 c0 	mov    DWORD PTR ds:0xc00294d0,0xc00169e7
c00171ec:	c7 05 d4 94 02 c0 01 6a 01 c0 	mov    DWORD PTR ds:0xc00294d4,0xc0016a01
c00171f6:	c7 05 d8 94 02 c0 01 6a 01 c0 	mov    DWORD PTR ds:0xc00294d8,0xc0016a01
c0017200:	c7 05 dc 94 02 c0 36 6a 01 c0 	mov    DWORD PTR ds:0xc00294dc,0xc0016a36
c001720a:	c7 05 e0 94 02 c0 9a 6a 01 c0 	mov    DWORD PTR ds:0xc00294e0,0xc0016a9a
c0017214:	c7 05 e4 94 02 c0 d7 63 01 c0 	mov    DWORD PTR ds:0xc00294e4,0xc00163d7
c001721e:	c7 05 e8 94 02 c0 fe 6a 01 c0 	mov    DWORD PTR ds:0xc00294e8,0xc0016afe
c0017228:	c7 05 ec 94 02 c0 4e 65 01 c0 	mov    DWORD PTR ds:0xc00294ec,0xc001654e
c0017232:	c7 05 f0 94 02 c0 4a 6b 01 c0 	mov    DWORD PTR ds:0xc00294f0,0xc0016b4a
c001723c:	c7 05 f4 94 02 c0 10 66 01 c0 	mov    DWORD PTR ds:0xc00294f4,0xc0016610
c0017246:	c7 05 f8 94 02 c0 cd 6b 01 c0 	mov    DWORD PTR ds:0xc00294f8,0xc0016bcd
c0017250:	c7 05 fc 94 02 c0 9f 67 01 c0 	mov    DWORD PTR ds:0xc00294fc,0xc001679f
c001725a:	c7 05 00 95 02 c0 f6 6b 01 c0 	mov    DWORD PTR ds:0xc0029500,0xc0016bf6
c0017264:	c7 05 04 95 02 c0 5e 6c 01 c0 	mov    DWORD PTR ds:0xc0029504,0xc0016c5e
c001726e:	c7 05 08 95 02 c0 0b 6d 01 c0 	mov    DWORD PTR ds:0xc0029508,0xc0016d0b
c0017278:	c7 05 0c 95 02 c0 e7 63 01 c0 	mov    DWORD PTR ds:0xc002950c,0xc00163e7
c0017282:	c7 05 10 95 02 c0 51 64 01 c0 	mov    DWORD PTR ds:0xc0029510,0xc0016451
c001728c:	c7 05 14 95 02 c0 9b 64 01 c0 	mov    DWORD PTR ds:0xc0029514,0xc001649b
c0017296:	c7 05 18 95 02 c0 1f 6e 01 c0 	mov    DWORD PTR ds:0xc0029518,0xc0016e1f
c00172a0:	c7 05 1c 95 02 c0 1c 6a 01 c0 	mov    DWORD PTR ds:0xc002951c,0xc0016a1c
c00172aa:	c7 05 20 95 02 c0 f0 64 01 c0 	mov    DWORD PTR ds:0xc0029520,0xc00164f0
c00172b4:	c7 05 24 95 02 c0 91 6e 01 c0 	mov    DWORD PTR ds:0xc0029524,0xc0016e91
c00172be:	c7 05 28 95 02 c0 d6 6e 01 c0 	mov    DWORD PTR ds:0xc0029528,0xc0016ed6
c00172c8:	c7 05 2c 95 02 c0 61 60 01 c0 	mov    DWORD PTR ds:0xc002952c,0xc0016061
c00172d2:	c7 05 30 95 02 c0 e2 61 01 c0 	mov    DWORD PTR ds:0xc0029530,0xc00161e2
c00172dc:	c7 05 34 95 02 c0 77 62 01 c0 	mov    DWORD PTR ds:0xc0029534,0xc0016277
c00172e6:	c7 05 38 95 02 c0 4a 5f 01 c0 	mov    DWORD PTR ds:0xc0029538,0xc0015f4a
c00172f0:	c7 05 3c 95 02 c0 29 63 01 c0 	mov    DWORD PTR ds:0xc002953c,0xc0016329
c00172fa:	c7 05 40 95 02 c0 c3 5f 01 c0 	mov    DWORD PTR ds:0xc0029540,0xc0015fc3
c0017304:	c7 05 44 95 02 c0 dd 5f 01 c0 	mov    DWORD PTR ds:0xc0029544,0xc0015fdd
c001730e:	c3                   	ret    

c001730f <Sys::systemCall(regs*, void*)>:
c001730f:	53                   	push   ebx
c0017310:	83 ec 08             	sub    esp,0x8
c0017313:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017317:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001731a:	83 f8 7f             	cmp    eax,0x7f
c001731d:	77 16                	ja     c0017335 <Sys::systemCall(regs*, void*)+0x26>
c001731f:	8b 14 85 80 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b80]
c0017326:	85 d2                	test   edx,edx
c0017328:	74 0b                	je     c0017335 <Sys::systemCall(regs*, void*)+0x26>
c001732a:	83 ec 0c             	sub    esp,0xc
c001732d:	53                   	push   ebx
c001732e:	ff d2                	call   edx
c0017330:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017333:	eb 0d                	jmp    c0017342 <Sys::systemCall(regs*, void*)+0x33>
c0017335:	52                   	push   edx
c0017336:	52                   	push   edx
c0017337:	50                   	push   eax
c0017338:	68 fd 67 02 c0       	push   0xc00267fd
c001733d:	e8 05 5d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0017342:	83 c4 10             	add    esp,0x10
c0017345:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001734a:	31 d2                	xor    edx,edx
c001734c:	83 c4 08             	add    esp,0x8
c001734f:	5b                   	pop    ebx
c0017350:	c3                   	ret    

c0017351 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017351:	55                   	push   ebp
c0017352:	57                   	push   edi
c0017353:	56                   	push   esi
c0017354:	53                   	push   ebx
c0017355:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001735b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0017362:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0017369:	85 c0                	test   eax,eax
c001736b:	0f 95 c1             	setne  cl
c001736e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0017376:	0f 94 c2             	sete   dl
c0017379:	84 d1                	test   cl,dl
c001737b:	74 23                	je     c00173a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001737d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0017383:	74 1b                	je     c00173a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0017385:	81 c3 00 10 00 00    	add    ebx,0x1000
c001738b:	89 da                	mov    edx,ebx
c001738d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0017393:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0017399:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00173a0:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00173a7:	05 ff 0f 00 00       	add    eax,0xfff
c00173ac:	83 ec 0c             	sub    esp,0xc
c00173af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00173b3:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00173b9:	c1 e8 0c             	shr    eax,0xc
c00173bc:	89 fe                	mov    esi,edi
c00173be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00173c2:	c1 ee 0c             	shr    esi,0xc
c00173c5:	6a 01                	push   0x1
c00173c7:	e8 55 49 ff ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c00173cc:	89 c5                	mov    ebp,eax
c00173ce:	58                   	pop    eax
c00173cf:	5a                   	pop    edx
c00173d0:	56                   	push   esi
c00173d1:	68 11 68 02 c0       	push   0xc0026811
c00173d6:	e8 6c 5c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00173db:	59                   	pop    ecx
c00173dc:	58                   	pop    eax
c00173dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00173e1:	68 23 68 02 c0       	push   0xc0026823
c00173e6:	e8 5c 5c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00173eb:	83 c4 10             	add    esp,0x10
c00173ee:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c00173f4:	0f 86 31 01 00 00    	jbe    c001752b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c00173fa:	c1 e6 0c             	shl    esi,0xc
c00173fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017400:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0017403:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017407:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001740e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017411:	01 df                	add    edi,ebx
c0017413:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0017416:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001741a:	0f 84 08 01 00 00    	je     c0017528 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0017420:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0017426:	76 05                	jbe    c001742d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0017428:	bf 00 10 00 00       	mov    edi,0x1000
c001742d:	83 ec 0c             	sub    esp,0xc
c0017430:	31 d2                	xor    edx,edx
c0017432:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0017439:	8b 08                	mov    ecx,DWORD PTR [eax]
c001743b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001743f:	50                   	push   eax
c0017440:	8d 74 24 30          	lea    esi,[esp+0x30]
c0017444:	56                   	push   esi
c0017445:	52                   	push   edx
c0017446:	57                   	push   edi
c0017447:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001744e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017451:	83 c4 20             	add    esp,0x20
c0017454:	85 c0                	test   eax,eax
c0017456:	74 0a                	je     c0017462 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0017458:	53                   	push   ebx
c0017459:	53                   	push   ebx
c001745a:	50                   	push   eax
c001745b:	68 35 68 02 c0       	push   0xc0026835
c0017460:	eb 0f                	jmp    c0017471 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0017462:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017466:	74 20                	je     c0017488 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0017468:	51                   	push   ecx
c0017469:	51                   	push   ecx
c001746a:	6a 00                	push   0x0
c001746c:	68 60 68 02 c0       	push   0xc0026860
c0017471:	e8 d1 5b ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0017476:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017479:	e8 d3 4b ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c001747e:	83 c4 10             	add    esp,0x10
c0017481:	31 c0                	xor    eax,eax
c0017483:	e9 68 01 00 00       	jmp    c00175f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0017488:	fa                   	cli    
c0017489:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c001748f:	e8 7e 2f ff ff       	call   c000a412 <Phys::allocatePage()>
c0017494:	6a 07                	push   0x7
c0017496:	89 c7                	mov    edi,eax
c0017498:	55                   	push   ebp
c0017499:	50                   	push   eax
c001749a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001749f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00174a2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174a8:	e8 1b 4f ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00174ad:	83 c4 0c             	add    esp,0xc
c00174b0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00174b7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174bd:	6a 00                	push   0x0
c00174bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00174c7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174cd:	e8 50 4d ff ff       	call   c000c222 <VAS::mapOtherVASIn(bool, VAS*)>
c00174d2:	58                   	pop    eax
c00174d3:	5a                   	pop    edx
c00174d4:	68 07 0c 00 00       	push   0xc07
c00174d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00174dd:	57                   	push   edi
c00174de:	89 ef                	mov    edi,ebp
c00174e0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00174e7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174ed:	6a 00                	push   0x0
c00174ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00174f7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174fd:	e8 82 52 ff ff       	call   c000c784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017502:	b9 00 10 00 00       	mov    ecx,0x1000
c0017507:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017509:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c001750e:	83 c4 20             	add    esp,0x20
c0017511:	48                   	dec    eax
c0017512:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0017517:	85 c0                	test   eax,eax
c0017519:	75 01                	jne    c001751c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001751b:	fb                   	sti    
c001751c:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0017523:	e9 df fe ff ff       	jmp    c0017407 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0017528:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001752b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0017533:	0f 86 a9 00 00 00    	jbe    c00175e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017539:	fa                   	cli    
c001753a:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0017540:	51                   	push   ecx
c0017541:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0017548:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001754e:	6a 00                	push   0x0
c0017550:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017555:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017558:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001755e:	e8 bf 4c ff ff       	call   c000c222 <VAS::mapOtherVASIn(bool, VAS*)>
c0017563:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017567:	c1 e6 0c             	shl    esi,0xc
c001756a:	01 de                	add    esi,ebx
c001756c:	83 c4 10             	add    esp,0x10
c001756f:	39 de                	cmp    esi,ebx
c0017571:	74 61                	je     c00175d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0017573:	e8 9a 2e ff ff       	call   c000a412 <Phys::allocatePage()>
c0017578:	6a 07                	push   0x7
c001757a:	89 c7                	mov    edi,eax
c001757c:	55                   	push   ebp
c001757d:	50                   	push   eax
c001757e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017583:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017586:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001758c:	e8 37 4e ff ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017591:	58                   	pop    eax
c0017592:	5a                   	pop    edx
c0017593:	68 07 0c 00 00       	push   0xc07
c0017598:	53                   	push   ebx
c0017599:	81 c3 00 10 00 00    	add    ebx,0x1000
c001759f:	57                   	push   edi
c00175a0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00175a7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00175ad:	6a 00                	push   0x0
c00175af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00175b7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00175bd:	e8 c2 51 ff ff       	call   c000c784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00175c2:	83 c4 1c             	add    esp,0x1c
c00175c5:	68 00 10 00 00       	push   0x1000
c00175ca:	6a 00                	push   0x0
c00175cc:	55                   	push   ebp
c00175cd:	e8 b2 90 fe ff       	call   c0000684 <memset>
c00175d2:	eb 98                	jmp    c001756c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c00175d4:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c00175d9:	48                   	dec    eax
c00175da:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c00175df:	75 01                	jne    c00175e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00175e1:	fb                   	sti    
c00175e2:	83 ec 0c             	sub    esp,0xc
c00175e5:	55                   	push   ebp
c00175e6:	e8 66 4a ff ff       	call   c000c051 <Virt::freeKernelVirtualPages(unsigned long)>
c00175eb:	83 c4 10             	add    esp,0x10
c00175ee:	b0 01                	mov    al,0x1
c00175f0:	81 c4 2c 10 00 00    	add    esp,0x102c
c00175f6:	5b                   	pop    ebx
c00175f7:	5e                   	pop    esi
c00175f8:	5f                   	pop    edi
c00175f9:	5d                   	pop    ebp
c00175fa:	c3                   	ret    

c00175fb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00175fb:	55                   	push   ebp
c00175fc:	57                   	push   edi
c00175fd:	56                   	push   esi
c00175fe:	53                   	push   ebx
c00175ff:	83 ec 48             	sub    esp,0x48
c0017602:	68 14 01 00 00       	push   0x114
c0017607:	e8 4f 27 ff ff       	call   c0009d5b <malloc>
c001760c:	83 c4 0c             	add    esp,0xc
c001760f:	89 c6                	mov    esi,eax
c0017611:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017615:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017619:	50                   	push   eax
c001761a:	e8 93 5f ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001761f:	58                   	pop    eax
c0017620:	5a                   	pop    edx
c0017621:	6a 01                	push   0x1
c0017623:	56                   	push   esi
c0017624:	e8 63 60 ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0017629:	83 c4 10             	add    esp,0x10
c001762c:	85 c0                	test   eax,eax
c001762e:	0f 85 47 01 00 00    	jne    c001777b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017634:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001763c:	83 ec 0c             	sub    esp,0xc
c001763f:	6a 34                	push   0x34
c0017641:	e8 15 27 ff ff       	call   c0009d5b <malloc>
c0017646:	89 c3                	mov    ebx,eax
c0017648:	58                   	pop    eax
c0017649:	8b 06                	mov    eax,DWORD PTR [esi]
c001764b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001764f:	57                   	push   edi
c0017650:	53                   	push   ebx
c0017651:	6a 00                	push   0x0
c0017653:	6a 34                	push   0x34
c0017655:	56                   	push   esi
c0017656:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017659:	83 c4 20             	add    esp,0x20
c001765c:	85 c0                	test   eax,eax
c001765e:	0f 85 17 01 00 00    	jne    c001777b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017664:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001766a:	0f 85 0b 01 00 00    	jne    c001777b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017670:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017673:	85 c0                	test   eax,eax
c0017675:	0f 84 00 01 00 00    	je     c001777b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001767b:	31 d2                	xor    edx,edx
c001767d:	55                   	push   ebp
c001767e:	52                   	push   edx
c001767f:	50                   	push   eax
c0017680:	56                   	push   esi
c0017681:	e8 c4 60 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017686:	83 c4 10             	add    esp,0x10
c0017689:	85 c0                	test   eax,eax
c001768b:	0f 85 ea 00 00 00    	jne    c001777b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017691:	83 ec 0c             	sub    esp,0xc
c0017694:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017697:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001769b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001769f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00176a3:	0f af c2             	imul   eax,edx
c00176a6:	50                   	push   eax
c00176a7:	e8 af 26 ff ff       	call   c0009d5b <malloc>
c00176ac:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00176ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00176b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00176b9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00176bd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00176c1:	0f af c2             	imul   eax,edx
c00176c4:	99                   	cdq    
c00176c5:	52                   	push   edx
c00176c6:	50                   	push   eax
c00176c7:	56                   	push   esi
c00176c8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176cb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00176ce:	83 c4 20             	add    esp,0x20
c00176d1:	85 c0                	test   eax,eax
c00176d3:	0f 84 a2 00 00 00    	je     c001777b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176d9:	31 d2                	xor    edx,edx
c00176db:	51                   	push   ecx
c00176dc:	52                   	push   edx
c00176dd:	50                   	push   eax
c00176de:	56                   	push   esi
c00176df:	e8 66 60 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c00176e4:	83 c4 10             	add    esp,0x10
c00176e7:	85 c0                	test   eax,eax
c00176e9:	0f 85 8c 00 00 00    	jne    c001777b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176ef:	83 ec 0c             	sub    esp,0xc
c00176f2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00176f6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00176fa:	31 ed                	xor    ebp,ebp
c00176fc:	0f af c2             	imul   eax,edx
c00176ff:	50                   	push   eax
c0017700:	e8 56 26 ff ff       	call   c0009d5b <malloc>
c0017705:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017707:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001770b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001770e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017712:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017716:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001771a:	0f af c2             	imul   eax,edx
c001771d:	99                   	cdq    
c001771e:	52                   	push   edx
c001771f:	50                   	push   eax
c0017720:	56                   	push   esi
c0017721:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017724:	83 c4 20             	add    esp,0x20
c0017727:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001772f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017733:	0f 86 80 00 00 00    	jbe    c00177b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017739:	0f b7 fd             	movzx  edi,bp
c001773c:	c1 e7 05             	shl    edi,0x5
c001773f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017743:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017746:	75 6b                	jne    c00177b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017748:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001774b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001774f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017752:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017756:	52                   	push   edx
c0017757:	31 d2                	xor    edx,edx
c0017759:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001775c:	52                   	push   edx
c001775d:	50                   	push   eax
c001775e:	56                   	push   esi
c001775f:	e8 e6 5f ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017764:	83 c4 10             	add    esp,0x10
c0017767:	85 c0                	test   eax,eax
c0017769:	74 17                	je     c0017782 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001776b:	83 ec 0c             	sub    esp,0xc
c001776e:	68 8c 68 02 c0       	push   0xc002688c
c0017773:	e8 cf 58 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0017778:	83 c4 10             	add    esp,0x10
c001777b:	31 c0                	xor    eax,eax
c001777d:	e9 87 00 00 00       	jmp    c0017809 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017782:	83 ec 0c             	sub    esp,0xc
c0017785:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017788:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001778b:	50                   	push   eax
c001778c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017790:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017794:	56                   	push   esi
c0017795:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017799:	e8 b3 fb ff ff       	call   c0017351 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001779e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177a2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00177a6:	83 c4 20             	add    esp,0x20
c00177a9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00177ad:	73 04                	jae    c00177b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00177af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177b3:	45                   	inc    ebp
c00177b4:	e9 76 ff ff ff       	jmp    c001772f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00177b9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00177bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177c5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00177cb:	83 ec 0c             	sub    esp,0xc
c00177ce:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00177d4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00177d9:	05 00 10 00 00       	add    eax,0x1000
c00177de:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00177e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177e5:	e8 81 25 ff ff       	call   c0009d6b <free>
c00177ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00177ed:	e8 79 25 ff ff       	call   c0009d6b <free>
c00177f2:	58                   	pop    eax
c00177f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177f7:	e8 6f 25 ff ff       	call   c0009d6b <free>
c00177fc:	89 34 24             	mov    DWORD PTR [esp],esi
c00177ff:	e8 e6 5e ff ff       	call   c000d6ea <File::close()>
c0017804:	83 c4 10             	add    esp,0x10
c0017807:	b0 01                	mov    al,0x1
c0017809:	83 c4 3c             	add    esp,0x3c
c001780c:	5b                   	pop    ebx
c001780d:	5e                   	pop    esi
c001780e:	5f                   	pop    edi
c001780f:	5d                   	pop    ebp
c0017810:	c3                   	ret    

c0017811 <Thr::runtimeReferenceHelper()>:
c0017811:	83 ec 18             	sub    esp,0x18
c0017814:	68 94 68 02 c0       	push   0xc0026894
c0017819:	e8 29 58 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001781e:	fa                   	cli    
c001781f:	83 c4 10             	add    esp,0x10
c0017822:	eb fe                	jmp    c0017822 <Thr::runtimeReferenceHelper()+0x11>

c0017824 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017824:	57                   	push   edi
c0017825:	56                   	push   esi
c0017826:	53                   	push   ebx
c0017827:	31 db                	xor    ebx,ebx
c0017829:	39 1d 20 9e 02 c0    	cmp    DWORD PTR ds:0xc0029e20,ebx
c001782f:	7e 3c                	jle    c001786d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017831:	8b 34 9d a0 9d 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6260]
c0017838:	31 ff                	xor    edi,edi
c001783a:	39 3c 9d a0 9c 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6360],edi
c0017841:	7e 27                	jle    c001786a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017843:	50                   	push   eax
c0017844:	50                   	push   eax
c0017845:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017849:	8b 06                	mov    eax,DWORD PTR [esi]
c001784b:	03 04 9d 20 9d 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd62e0]
c0017852:	50                   	push   eax
c0017853:	e8 74 8f fe ff       	call   c00007cc <strcmp>
c0017858:	83 c4 10             	add    esp,0x10
c001785b:	85 c0                	test   eax,eax
c001785d:	75 05                	jne    c0017864 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001785f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017862:	eb 0b                	jmp    c001786f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017864:	83 c6 10             	add    esi,0x10
c0017867:	47                   	inc    edi
c0017868:	eb d0                	jmp    c001783a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001786a:	43                   	inc    ebx
c001786b:	eb bc                	jmp    c0017829 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001786d:	31 c0                	xor    eax,eax
c001786f:	5b                   	pop    ebx
c0017870:	5e                   	pop    esi
c0017871:	5f                   	pop    edi
c0017872:	c3                   	ret    

c0017873 <Thr::loadKernelSymbolTable(char const*)>:
c0017873:	55                   	push   ebp
c0017874:	57                   	push   edi
c0017875:	56                   	push   esi
c0017876:	53                   	push   ebx
c0017877:	83 ec 68             	sub    esp,0x68
c001787a:	8b 35 70 9e 02 c0    	mov    esi,DWORD PTR ds:0xc0029e70
c0017880:	68 14 01 00 00       	push   0x114
c0017885:	e8 d1 24 ff ff       	call   c0009d5b <malloc>
c001788a:	83 c4 0c             	add    esp,0xc
c001788d:	89 c3                	mov    ebx,eax
c001788f:	56                   	push   esi
c0017890:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017894:	50                   	push   eax
c0017895:	e8 18 5d ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001789a:	5e                   	pop    esi
c001789b:	5f                   	pop    edi
c001789c:	6a 01                	push   0x1
c001789e:	53                   	push   ebx
c001789f:	e8 e8 5d ff ff       	call   c000d68c <File::open(FileOpenMode)>
c00178a4:	83 c4 10             	add    esp,0x10
c00178a7:	85 c0                	test   eax,eax
c00178a9:	74 0a                	je     c00178b5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00178ab:	83 ec 0c             	sub    esp,0xc
c00178ae:	68 b6 68 02 c0       	push   0xc00268b6
c00178b3:	eb 34                	jmp    c00178e9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00178b5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00178bd:	83 ec 0c             	sub    esp,0xc
c00178c0:	6a 34                	push   0x34
c00178c2:	e8 94 24 ff ff       	call   c0009d5b <malloc>
c00178c7:	59                   	pop    ecx
c00178c8:	89 c7                	mov    edi,eax
c00178ca:	8d 74 24 34          	lea    esi,[esp+0x34]
c00178ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00178d0:	56                   	push   esi
c00178d1:	57                   	push   edi
c00178d2:	6a 00                	push   0x0
c00178d4:	6a 34                	push   0x34
c00178d6:	53                   	push   ebx
c00178d7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00178da:	83 c4 20             	add    esp,0x20
c00178dd:	85 c0                	test   eax,eax
c00178df:	74 17                	je     c00178f8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00178e1:	83 ec 0c             	sub    esp,0xc
c00178e4:	68 cd 68 02 c0       	push   0xc00268cd
c00178e9:	e8 d7 d7 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00178ee:	83 c4 10             	add    esp,0x10
c00178f1:	31 c0                	xor    eax,eax
c00178f3:	e9 31 02 00 00       	jmp    c0017b29 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00178f8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00178fe:	75 e1                	jne    c00178e1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017900:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017903:	85 c0                	test   eax,eax
c0017905:	74 da                	je     c00178e1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017907:	52                   	push   edx
c0017908:	31 d2                	xor    edx,edx
c001790a:	52                   	push   edx
c001790b:	50                   	push   eax
c001790c:	53                   	push   ebx
c001790d:	e8 38 5e ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017912:	83 c4 10             	add    esp,0x10
c0017915:	85 c0                	test   eax,eax
c0017917:	75 c8                	jne    c00178e1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017919:	83 ec 0c             	sub    esp,0xc
c001791c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017920:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017924:	31 ed                	xor    ebp,ebp
c0017926:	0f af c2             	imul   eax,edx
c0017929:	50                   	push   eax
c001792a:	e8 2c 24 ff ff       	call   c0009d5b <malloc>
c001792f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017931:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017935:	89 34 24             	mov    DWORD PTR [esp],esi
c0017938:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001793c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017940:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017944:	0f af c2             	imul   eax,edx
c0017947:	99                   	cdq    
c0017948:	52                   	push   edx
c0017949:	50                   	push   eax
c001794a:	53                   	push   ebx
c001794b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001794e:	83 c4 20             	add    esp,0x20
c0017951:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017959:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017961:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017969:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017971:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017975:	0f 86 aa 00 00 00    	jbe    c0017a25 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001797b:	0f b7 f5             	movzx  esi,bp
c001797e:	6b f6 28             	imul   esi,esi,0x28
c0017981:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017985:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017988:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001798c:	50                   	push   eax
c001798d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017991:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017995:	8b 16                	mov    edx,DWORD PTR [esi]
c0017997:	6b c0 28             	imul   eax,eax,0x28
c001799a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001799e:	89 d0                	mov    eax,edx
c00179a0:	31 d2                	xor    edx,edx
c00179a2:	52                   	push   edx
c00179a3:	50                   	push   eax
c00179a4:	53                   	push   ebx
c00179a5:	e8 a0 5d ff ff       	call   c000d74a <File::seek(unsigned long long)>
c00179aa:	83 c4 0c             	add    esp,0xc
c00179ad:	6a 20                	push   0x20
c00179af:	6a 00                	push   0x0
c00179b1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00179b5:	52                   	push   edx
c00179b6:	e8 c9 8c fe ff       	call   c0000684 <memset>
c00179bb:	58                   	pop    eax
c00179bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179be:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00179c2:	51                   	push   ecx
c00179c3:	8d 54 24 40          	lea    edx,[esp+0x40]
c00179c7:	52                   	push   edx
c00179c8:	6a 00                	push   0x0
c00179ca:	6a 1f                	push   0x1f
c00179cc:	53                   	push   ebx
c00179cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179d0:	83 c4 18             	add    esp,0x18
c00179d3:	68 e4 68 02 c0       	push   0xc00268e4
c00179d8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00179dc:	52                   	push   edx
c00179dd:	e8 ea 8d fe ff       	call   c00007cc <strcmp>
c00179e2:	83 c4 10             	add    esp,0x10
c00179e5:	85 c0                	test   eax,eax
c00179e7:	75 0f                	jne    c00179f8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00179e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00179ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179f8:	50                   	push   eax
c00179f9:	50                   	push   eax
c00179fa:	68 ec 68 02 c0       	push   0xc00268ec
c00179ff:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017a03:	50                   	push   eax
c0017a04:	e8 c3 8d fe ff       	call   c00007cc <strcmp>
c0017a09:	83 c4 10             	add    esp,0x10
c0017a0c:	85 c0                	test   eax,eax
c0017a0e:	75 0f                	jne    c0017a1f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017a10:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017a13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a1f:	45                   	inc    ebp
c0017a20:	e9 4c ff ff ff       	jmp    c0017971 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017a25:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017a2a:	75 10                	jne    c0017a3c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017a2c:	83 ec 0c             	sub    esp,0xc
c0017a2f:	68 f4 68 02 c0       	push   0xc00268f4
c0017a34:	e8 8c d6 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0017a39:	83 c4 10             	add    esp,0x10
c0017a3c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017a41:	75 10                	jne    c0017a53 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017a43:	83 ec 0c             	sub    esp,0xc
c0017a46:	68 f4 68 02 c0       	push   0xc00268f4
c0017a4b:	e8 75 d6 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0017a50:	83 c4 10             	add    esp,0x10
c0017a53:	31 d2                	xor    edx,edx
c0017a55:	50                   	push   eax
c0017a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a5a:	52                   	push   edx
c0017a5b:	50                   	push   eax
c0017a5c:	53                   	push   ebx
c0017a5d:	e8 e8 5c ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017a62:	5a                   	pop    edx
c0017a63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a67:	e8 ef 22 ff ff       	call   c0009d5b <malloc>
c0017a6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017a70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a74:	31 c9                	xor    ecx,ecx
c0017a76:	5e                   	pop    esi
c0017a77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a79:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017a7d:	55                   	push   ebp
c0017a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a82:	51                   	push   ecx
c0017a83:	52                   	push   edx
c0017a84:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017a88:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017a8c:	53                   	push   ebx
c0017a8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017a90:	83 c4 14             	add    esp,0x14
c0017a93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a97:	e8 bf 22 ff ff       	call   c0009d5b <malloc>
c0017a9c:	89 c6                	mov    esi,eax
c0017a9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017aa0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017aa3:	56                   	push   esi
c0017aa4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017aa8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017aac:	51                   	push   ecx
c0017aad:	52                   	push   edx
c0017aae:	53                   	push   ebx
c0017aaf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ab2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ab6:	8b 15 20 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029e20
c0017abc:	83 c4 1c             	add    esp,0x1c
c0017abf:	c1 e8 04             	shr    eax,0x4
c0017ac2:	89 04 95 a0 9c 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6360],eax
c0017ac9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017acd:	31 d2                	xor    edx,edx
c0017acf:	52                   	push   edx
c0017ad0:	50                   	push   eax
c0017ad1:	53                   	push   ebx
c0017ad2:	e8 73 5c ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017ad7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017ad9:	31 d2                	xor    edx,edx
c0017adb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ade:	56                   	push   esi
c0017adf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ae3:	52                   	push   edx
c0017ae4:	50                   	push   eax
c0017ae5:	53                   	push   ebx
c0017ae6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ae9:	83 c4 14             	add    esp,0x14
c0017aec:	53                   	push   ebx
c0017aed:	e8 f8 5b ff ff       	call   c000d6ea <File::close()>
c0017af2:	5d                   	pop    ebp
c0017af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017af7:	e8 6f 22 ff ff       	call   c0009d6b <free>
c0017afc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017aff:	e8 67 22 ff ff       	call   c0009d6b <free>
c0017b04:	a1 20 9e 02 c0       	mov    eax,ds:0xc0029e20
c0017b09:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017b0d:	8d 50 01             	lea    edx,[eax+0x1]
c0017b10:	89 0c 85 a0 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6260],ecx
c0017b17:	89 34 85 20 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd62e0],esi
c0017b1e:	89 15 20 9e 02 c0    	mov    DWORD PTR ds:0xc0029e20,edx
c0017b24:	83 c4 10             	add    esp,0x10
c0017b27:	b0 01                	mov    al,0x1
c0017b29:	83 c4 5c             	add    esp,0x5c
c0017b2c:	5b                   	pop    ebx
c0017b2d:	5e                   	pop    esi
c0017b2e:	5f                   	pop    edi
c0017b2f:	5d                   	pop    ebp
c0017b30:	c3                   	ret    

c0017b31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017b31:	55                   	push   ebp
c0017b32:	57                   	push   edi
c0017b33:	56                   	push   esi
c0017b34:	53                   	push   ebx
c0017b35:	81 ec 68 03 00 00    	sub    esp,0x368
c0017b3b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017b42:	8b 1d 70 9e 02 c0    	mov    ebx,DWORD PTR ds:0xc0029e70
c0017b48:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017b4c:	68 14 01 00 00       	push   0x114
c0017b51:	e8 05 22 ff ff       	call   c0009d5b <malloc>
c0017b56:	83 c4 0c             	add    esp,0xc
c0017b59:	89 c5                	mov    ebp,eax
c0017b5b:	53                   	push   ebx
c0017b5c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017b63:	50                   	push   eax
c0017b64:	e8 49 5a ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0017b69:	5e                   	pop    esi
c0017b6a:	5f                   	pop    edi
c0017b6b:	6a 01                	push   0x1
c0017b6d:	55                   	push   ebp
c0017b6e:	e8 19 5b ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0017b73:	83 c4 10             	add    esp,0x10
c0017b76:	85 c0                	test   eax,eax
c0017b78:	0f 85 a7 06 00 00    	jne    c0018225 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017b7e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017b86:	83 ec 0c             	sub    esp,0xc
c0017b89:	6a 34                	push   0x34
c0017b8b:	e8 cb 21 ff ff       	call   c0009d5b <malloc>
c0017b90:	5b                   	pop    ebx
c0017b91:	89 c7                	mov    edi,eax
c0017b93:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017b97:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017b9a:	53                   	push   ebx
c0017b9b:	57                   	push   edi
c0017b9c:	6a 00                	push   0x0
c0017b9e:	6a 34                	push   0x34
c0017ba0:	55                   	push   ebp
c0017ba1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ba4:	83 c4 20             	add    esp,0x20
c0017ba7:	85 c0                	test   eax,eax
c0017ba9:	0f 85 76 06 00 00    	jne    c0018225 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017baf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017bb5:	0f 85 6a 06 00 00    	jne    c0018225 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017bbb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017bbe:	85 c0                	test   eax,eax
c0017bc0:	0f 84 5f 06 00 00    	je     c0018225 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017bc6:	31 d2                	xor    edx,edx
c0017bc8:	51                   	push   ecx
c0017bc9:	52                   	push   edx
c0017bca:	50                   	push   eax
c0017bcb:	55                   	push   ebp
c0017bcc:	e8 79 5b ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017bd1:	83 c4 10             	add    esp,0x10
c0017bd4:	85 c0                	test   eax,eax
c0017bd6:	0f 85 49 06 00 00    	jne    c0018225 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017bdc:	83 ec 0c             	sub    esp,0xc
c0017bdf:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017be2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017be6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017bee:	0f af c2             	imul   eax,edx
c0017bf1:	50                   	push   eax
c0017bf2:	e8 64 21 ff ff       	call   c0009d5b <malloc>
c0017bf7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017bfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c05:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017c09:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017c0d:	0f af c2             	imul   eax,edx
c0017c10:	99                   	cdq    
c0017c11:	52                   	push   edx
c0017c12:	50                   	push   eax
c0017c13:	55                   	push   ebp
c0017c14:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c17:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017c1a:	83 c4 20             	add    esp,0x20
c0017c1d:	85 c0                	test   eax,eax
c0017c1f:	0f 84 00 06 00 00    	je     c0018225 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017c25:	52                   	push   edx
c0017c26:	31 d2                	xor    edx,edx
c0017c28:	52                   	push   edx
c0017c29:	50                   	push   eax
c0017c2a:	55                   	push   ebp
c0017c2b:	e8 1a 5b ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017c30:	83 c4 10             	add    esp,0x10
c0017c33:	85 c0                	test   eax,eax
c0017c35:	0f 85 ea 05 00 00    	jne    c0018225 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017c3b:	83 ec 0c             	sub    esp,0xc
c0017c3e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017c42:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017c46:	31 f6                	xor    esi,esi
c0017c48:	0f af c2             	imul   eax,edx
c0017c4b:	50                   	push   eax
c0017c4c:	e8 0a 21 ff ff       	call   c0009d5b <malloc>
c0017c51:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017c54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c5b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017c5f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017c63:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017c67:	0f af c2             	imul   eax,edx
c0017c6a:	99                   	cdq    
c0017c6b:	52                   	push   edx
c0017c6c:	50                   	push   eax
c0017c6d:	55                   	push   ebp
c0017c6e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c71:	83 c4 20             	add    esp,0x20
c0017c74:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017c78:	0f 86 8a 00 00 00    	jbe    c0017d08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017c7e:	0f b7 de             	movzx  ebx,si
c0017c81:	c1 e3 05             	shl    ebx,0x5
c0017c84:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017c88:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017c8b:	75 75                	jne    c0017d02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017c8d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017c90:	31 d2                	xor    edx,edx
c0017c92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017c99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c9d:	50                   	push   eax
c0017c9e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017ca1:	52                   	push   edx
c0017ca2:	50                   	push   eax
c0017ca3:	55                   	push   ebp
c0017ca4:	e8 a1 5a ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017ca9:	83 c4 10             	add    esp,0x10
c0017cac:	85 c0                	test   eax,eax
c0017cae:	0f 85 71 05 00 00    	jne    c0018225 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017cb4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017cbb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017cbe:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017cc2:	31 d2                	xor    edx,edx
c0017cc4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017cc8:	83 ec 0c             	sub    esp,0xc
c0017ccb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ccf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017cd6:	50                   	push   eax
c0017cd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cdf:	52                   	push   edx
c0017ce0:	50                   	push   eax
c0017ce1:	55                   	push   ebp
c0017ce2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ce5:	83 c4 1c             	add    esp,0x1c
c0017ce8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017ceb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017cee:	50                   	push   eax
c0017cef:	6a 00                	push   0x0
c0017cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cf5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017cf9:	50                   	push   eax
c0017cfa:	e8 85 89 fe ff       	call   c0000684 <memset>
c0017cff:	83 c4 10             	add    esp,0x10
c0017d02:	46                   	inc    esi
c0017d03:	e9 6c ff ff ff       	jmp    c0017c74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017d08:	53                   	push   ebx
c0017d09:	31 db                	xor    ebx,ebx
c0017d0b:	68 00 01 00 00       	push   0x100
c0017d10:	6a 00                	push   0x0
c0017d12:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017d16:	50                   	push   eax
c0017d17:	e8 68 89 fe ff       	call   c0000684 <memset>
c0017d1c:	83 c4 0c             	add    esp,0xc
c0017d1f:	68 00 01 00 00       	push   0x100
c0017d24:	6a 00                	push   0x0
c0017d26:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017d2d:	50                   	push   eax
c0017d2e:	e8 51 89 fe ff       	call   c0000684 <memset>
c0017d33:	83 c4 10             	add    esp,0x10
c0017d36:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017d3e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017d46:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0017d4e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017d56:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d5e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017d62:	0f 86 30 01 00 00    	jbe    c0017e98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017d68:	0f b7 f3             	movzx  esi,bx
c0017d6b:	6b f6 28             	imul   esi,esi,0x28
c0017d6e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017d72:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017d75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d79:	52                   	push   edx
c0017d7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017d7e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017d82:	8b 06                	mov    eax,DWORD PTR [esi]
c0017d84:	6b d2 28             	imul   edx,edx,0x28
c0017d87:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017d8b:	31 d2                	xor    edx,edx
c0017d8d:	52                   	push   edx
c0017d8e:	50                   	push   eax
c0017d8f:	55                   	push   ebp
c0017d90:	e8 b5 59 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017d95:	83 c4 0c             	add    esp,0xc
c0017d98:	6a 20                	push   0x20
c0017d9a:	6a 00                	push   0x0
c0017d9c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017da3:	51                   	push   ecx
c0017da4:	e8 db 88 fe ff       	call   c0000684 <memset>
c0017da9:	59                   	pop    ecx
c0017daa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017dad:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017db1:	52                   	push   edx
c0017db2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017db9:	51                   	push   ecx
c0017dba:	6a 00                	push   0x0
c0017dbc:	6a 1f                	push   0x1f
c0017dbe:	55                   	push   ebp
c0017dbf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017dc2:	83 c4 1c             	add    esp,0x1c
c0017dc5:	6a 09                	push   0x9
c0017dc7:	68 0e 69 02 c0       	push   0xc002690e
c0017dcc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017dd3:	51                   	push   ecx
c0017dd4:	e8 a7 87 fe ff       	call   c0000580 <memcmp>
c0017dd9:	83 c4 10             	add    esp,0x10
c0017ddc:	85 c0                	test   eax,eax
c0017dde:	75 21                	jne    c0017e01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017de4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017de8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017dec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017df0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017df3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017dfa:	89 d0                	mov    eax,edx
c0017dfc:	40                   	inc    eax
c0017dfd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e01:	50                   	push   eax
c0017e02:	6a 09                	push   0x9
c0017e04:	68 18 69 02 c0       	push   0xc0026918
c0017e09:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e10:	50                   	push   eax
c0017e11:	e8 6a 87 fe ff       	call   c0000580 <memcmp>
c0017e16:	83 c4 10             	add    esp,0x10
c0017e19:	85 c0                	test   eax,eax
c0017e1b:	75 21                	jne    c0017e3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017e1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e25:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017e29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017e2d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e30:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017e37:	89 d0                	mov    eax,edx
c0017e39:	40                   	inc    eax
c0017e3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e3e:	50                   	push   eax
c0017e3f:	50                   	push   eax
c0017e40:	68 e4 68 02 c0       	push   0xc00268e4
c0017e45:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e4c:	50                   	push   eax
c0017e4d:	e8 7a 89 fe ff       	call   c00007cc <strcmp>
c0017e52:	83 c4 10             	add    esp,0x10
c0017e55:	85 c0                	test   eax,eax
c0017e57:	75 0f                	jne    c0017e68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017e59:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e68:	50                   	push   eax
c0017e69:	50                   	push   eax
c0017e6a:	68 ec 68 02 c0       	push   0xc00268ec
c0017e6f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e76:	50                   	push   eax
c0017e77:	e8 50 89 fe ff       	call   c00007cc <strcmp>
c0017e7c:	83 c4 10             	add    esp,0x10
c0017e7f:	85 c0                	test   eax,eax
c0017e81:	75 0f                	jne    c0017e92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017e83:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e8e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e92:	43                   	inc    ebx
c0017e93:	e9 c6 fe ff ff       	jmp    c0017d5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017e98:	31 d2                	xor    edx,edx
c0017e9a:	50                   	push   eax
c0017e9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e9f:	52                   	push   edx
c0017ea0:	50                   	push   eax
c0017ea1:	55                   	push   ebp
c0017ea2:	e8 a3 58 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017ea7:	58                   	pop    eax
c0017ea8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017eac:	e8 aa 1e ff ff       	call   c0009d5b <malloc>
c0017eb1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017eb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017eb8:	31 d2                	xor    edx,edx
c0017eba:	58                   	pop    eax
c0017ebb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ebf:	53                   	push   ebx
c0017ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017ec4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ec8:	52                   	push   edx
c0017ec9:	50                   	push   eax
c0017eca:	55                   	push   ebp
c0017ecb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ece:	83 c4 14             	add    esp,0x14
c0017ed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ed5:	e8 81 1e ff ff       	call   c0009d5b <malloc>
c0017eda:	31 d2                	xor    edx,edx
c0017edc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ee0:	83 c4 0c             	add    esp,0xc
c0017ee3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ee7:	52                   	push   edx
c0017ee8:	50                   	push   eax
c0017ee9:	55                   	push   ebp
c0017eea:	e8 5b 58 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017eef:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017ef2:	31 d2                	xor    edx,edx
c0017ef4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ef7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017efb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017eff:	52                   	push   edx
c0017f00:	50                   	push   eax
c0017f01:	55                   	push   ebp
c0017f02:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f05:	83 c4 20             	add    esp,0x20
c0017f08:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017f10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017f14:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017f18:	0f 84 0b 03 00 00    	je     c0018229 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0017f1e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017f25:	31 d2                	xor    edx,edx
c0017f27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f2b:	c1 e8 03             	shr    eax,0x3
c0017f2e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017f32:	51                   	push   ecx
c0017f33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f37:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017f3b:	52                   	push   edx
c0017f3c:	50                   	push   eax
c0017f3d:	55                   	push   ebp
c0017f3e:	e8 07 58 ff ff       	call   c000d74a <File::seek(unsigned long long)>
c0017f43:	5b                   	pop    ebx
c0017f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f48:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017f4f:	e8 07 1e ff ff       	call   c0009d5b <malloc>
c0017f54:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017f57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017f5b:	31 d2                	xor    edx,edx
c0017f5d:	5e                   	pop    esi
c0017f5e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017f62:	50                   	push   eax
c0017f63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f6b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017f72:	52                   	push   edx
c0017f73:	50                   	push   eax
c0017f74:	55                   	push   ebp
c0017f75:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f78:	83 c4 20             	add    esp,0x20
c0017f7b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f83:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017f87:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017f8b:	0f 8d 7c 02 00 00    	jge    c001820d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017f91:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017f95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f99:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0017f9e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017fa1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fa9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017fad:	89 d8                	mov    eax,ebx
c0017faf:	c1 e8 08             	shr    eax,0x8
c0017fb2:	89 c6                	mov    esi,eax
c0017fb4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017fb8:	c1 e6 04             	shl    esi,0x4
c0017fbb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017fbf:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017fc2:	85 d2                	test   edx,edx
c0017fc4:	0f 85 bf 00 00 00    	jne    c0018089 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017fca:	83 ec 0c             	sub    esp,0xc
c0017fcd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017fd1:	03 06                	add    eax,DWORD PTR [esi]
c0017fd3:	50                   	push   eax
c0017fd4:	e8 4b f8 ff ff       	call   c0017824 <Thr::getAddressOfKernelSymbol(char const*)>
c0017fd9:	83 c4 10             	add    esp,0x10
c0017fdc:	89 c2                	mov    edx,eax
c0017fde:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017fe3:	85 c0                	test   eax,eax
c0017fe5:	0f 85 9e 00 00 00    	jne    c0018089 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017feb:	83 ec 0c             	sub    esp,0xc
c0017fee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ff2:	03 06                	add    eax,DWORD PTR [esi]
c0017ff4:	50                   	push   eax
c0017ff5:	e8 16 09 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017ffa:	83 c4 10             	add    esp,0x10
c0017ffd:	89 c2                	mov    edx,eax
c0017fff:	85 c0                	test   eax,eax
c0018001:	0f 85 82 00 00 00    	jne    c0018089 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0018007:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001800b:	50                   	push   eax
c001800c:	50                   	push   eax
c001800d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018011:	03 06                	add    eax,DWORD PTR [esi]
c0018013:	50                   	push   eax
c0018014:	68 22 69 02 c0       	push   0xc0026922
c0018019:	e8 29 50 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001801e:	58                   	pop    eax
c001801f:	5a                   	pop    edx
c0018020:	68 3c 69 02 c0       	push   0xc002693c
c0018025:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001802c:	50                   	push   eax
c001802d:	e8 0e 87 fe ff       	call   c0000740 <strcpy>
c0018032:	59                   	pop    ecx
c0018033:	58                   	pop    eax
c0018034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018038:	03 06                	add    eax,DWORD PTR [esi]
c001803a:	50                   	push   eax
c001803b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018042:	50                   	push   eax
c0018043:	e8 38 88 fe ff       	call   c0000880 <strcat>
c0018048:	58                   	pop    eax
c0018049:	5a                   	pop    edx
c001804a:	68 d2 69 02 c0       	push   0xc00269d2
c001804f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018056:	50                   	push   eax
c0018057:	e8 24 88 fe ff       	call   c0000880 <strcat>
c001805c:	83 c4 10             	add    esp,0x10
c001805f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018064:	0f 84 5d 01 00 00    	je     c00181c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001806a:	83 ec 0c             	sub    esp,0xc
c001806d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018074:	50                   	push   eax
c0018075:	e8 4b d0 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001807a:	83 c4 10             	add    esp,0x10
c001807d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018081:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018085:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018089:	80 fb 01             	cmp    bl,0x1
c001808c:	0f 85 88 00 00 00    	jne    c001811a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0018092:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018099:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001809d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00180a1:	01 ce                	add    esi,ecx
c00180a3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00180a9:	0f 94 c0             	sete   al
c00180ac:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00180b2:	0f 94 c3             	sete   bl
c00180b5:	09 c3                	or     ebx,eax
c00180b7:	8b 06                	mov    eax,DWORD PTR [esi]
c00180b9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00180be:	74 41                	je     c0018101 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00180c0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00180c3:	84 db                	test   bl,bl
c00180c5:	75 15                	jne    c00180dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00180c7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00180cb:	66 83 f8 0c          	cmp    ax,0xc
c00180cf:	76 05                	jbe    c00180d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00180d1:	b8 0c 00 00 00       	mov    eax,0xc
c00180d6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00180da:	76 37                	jbe    c0018113 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00180dc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00180e0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00180e5:	0f 84 dc 00 00 00    	je     c00181c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00180eb:	83 ec 0c             	sub    esp,0xc
c00180ee:	68 53 69 02 c0       	push   0xc0026953
c00180f3:	e8 cd cf ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00180f8:	83 c4 10             	add    esp,0x10
c00180fb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00180ff:	eb 12                	jmp    c0018113 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018101:	01 c1                	add    ecx,eax
c0018103:	84 db                	test   bl,bl
c0018105:	75 0c                	jne    c0018113 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018107:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001810b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001810f:	77 02                	ja     c0018113 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018111:	01 d1                	add    ecx,edx
c0018113:	89 0e                	mov    DWORD PTR [esi],ecx
c0018115:	e9 ea 00 00 00       	jmp    c0018204 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001811a:	80 fb 02             	cmp    bl,0x2
c001811d:	75 7c                	jne    c001819b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001811f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0018126:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001812a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001812e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0018134:	74 20                	je     c0018156 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0018136:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001813c:	74 18                	je     c0018156 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001813e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0018142:	b9 0a 00 00 00       	mov    ecx,0xa
c0018147:	66 83 f8 0e          	cmp    ax,0xe
c001814b:	77 03                	ja     c0018150 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001814d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0018150:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0018154:	76 1f                	jbe    c0018175 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0018156:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001815a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001815f:	74 66                	je     c00181c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018161:	83 ec 0c             	sub    esp,0xc
c0018164:	68 6f 69 02 c0       	push   0xc002696f
c0018169:	e8 57 cf ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001816e:	83 c4 10             	add    esp,0x10
c0018171:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018175:	8b 06                	mov    eax,DWORD PTR [esi]
c0018177:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001817c:	74 13                	je     c0018191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001817e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018182:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0018189:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001818d:	01 c8                	add    eax,ecx
c001818f:	eb 04                	jmp    c0018195 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0018191:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0018195:	01 c2                	add    edx,eax
c0018197:	89 16                	mov    DWORD PTR [esi],edx
c0018199:	eb 69                	jmp    c0018204 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001819b:	0f b6 db             	movzx  ebx,bl
c001819e:	50                   	push   eax
c001819f:	50                   	push   eax
c00181a0:	53                   	push   ebx
c00181a1:	68 8b 69 02 c0       	push   0xc002698b
c00181a6:	e8 9c 4e ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00181ab:	83 c4 10             	add    esp,0x10
c00181ae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00181b3:	74 12                	je     c00181c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00181b5:	83 ec 0c             	sub    esp,0xc
c00181b8:	68 96 69 02 c0       	push   0xc0026996
c00181bd:	e8 03 cf ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00181c2:	83 c4 10             	add    esp,0x10
c00181c5:	eb 3d                	jmp    c0018204 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00181c7:	83 ec 0c             	sub    esp,0xc
c00181ca:	55                   	push   ebp
c00181cb:	e8 1a 55 ff ff       	call   c000d6ea <File::close()>
c00181d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00181d3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00181d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00181d9:	59                   	pop    ecx
c00181da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00181de:	e8 88 1b ff ff       	call   c0009d6b <free>
c00181e3:	5b                   	pop    ebx
c00181e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181e8:	e8 7e 1b ff ff       	call   c0009d6b <free>
c00181ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00181f0:	e8 76 1b ff ff       	call   c0009d6b <free>
c00181f5:	5e                   	pop    esi
c00181f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181fa:	e8 6c 1b ff ff       	call   c0009d6b <free>
c00181ff:	83 c4 10             	add    esp,0x10
c0018202:	eb 21                	jmp    c0018225 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0018204:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0018208:	e9 76 fd ff ff       	jmp    c0017f83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001820d:	83 ec 0c             	sub    esp,0xc
c0018210:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018214:	e8 52 1b ff ff       	call   c0009d6b <free>
c0018219:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001821d:	83 c4 10             	add    esp,0x10
c0018220:	e9 eb fc ff ff       	jmp    c0017f10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0018225:	31 c0                	xor    eax,eax
c0018227:	eb 33                	jmp    c001825c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0018229:	83 ec 0c             	sub    esp,0xc
c001822c:	55                   	push   ebp
c001822d:	e8 b8 54 ff ff       	call   c000d6ea <File::close()>
c0018232:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018235:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018238:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001823b:	58                   	pop    eax
c001823c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018240:	e8 26 1b ff ff       	call   c0009d6b <free>
c0018245:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018248:	e8 1e 1b ff ff       	call   c0009d6b <free>
c001824d:	5a                   	pop    edx
c001824e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018252:	e8 14 1b ff ff       	call   c0009d6b <free>
c0018257:	83 c4 10             	add    esp,0x10
c001825a:	b0 01                	mov    al,0x1
c001825c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0018262:	5b                   	pop    ebx
c0018263:	5e                   	pop    esi
c0018264:	5f                   	pop    edi
c0018265:	5d                   	pop    ebp
c0018266:	c3                   	ret    

c0018267 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0018267:	56                   	push   esi
c0018268:	31 d2                	xor    edx,edx
c001826a:	53                   	push   ebx
c001826b:	8b 1d 80 96 02 c0    	mov    ebx,DWORD PTR ds:0xc0029680
c0018271:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018275:	39 d3                	cmp    ebx,edx
c0018277:	7e 1b                	jle    c0018294 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0018279:	8b 04 95 a0 98 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6760]
c0018280:	39 c8                	cmp    eax,ecx
c0018282:	77 0d                	ja     c0018291 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0018284:	8b 34 95 a0 96 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6960]
c001828b:	01 c6                	add    esi,eax
c001828d:	39 ce                	cmp    esi,ecx
c001828f:	77 05                	ja     c0018296 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0018291:	42                   	inc    edx
c0018292:	eb e1                	jmp    c0018275 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0018294:	31 c0                	xor    eax,eax
c0018296:	5b                   	pop    ebx
c0018297:	5e                   	pop    esi
c0018298:	c3                   	ret    

c0018299 <Thr::getDriverNameFromAddress(unsigned long)>:
c0018299:	53                   	push   ebx
c001829a:	31 c0                	xor    eax,eax
c001829c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00182a0:	8b 1d 80 96 02 c0    	mov    ebx,DWORD PTR ds:0xc0029680
c00182a6:	39 c3                	cmp    ebx,eax
c00182a8:	7e 22                	jle    c00182cc <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00182aa:	8b 14 85 a0 98 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6760]
c00182b1:	39 ca                	cmp    edx,ecx
c00182b3:	77 14                	ja     c00182c9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00182b5:	03 14 85 a0 96 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6960]
c00182bc:	39 ca                	cmp    edx,ecx
c00182be:	76 09                	jbe    c00182c9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00182c0:	8b 04 85 a0 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6560]
c00182c7:	eb 05                	jmp    c00182ce <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00182c9:	40                   	inc    eax
c00182ca:	eb da                	jmp    c00182a6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00182cc:	31 c0                	xor    eax,eax
c00182ce:	5b                   	pop    ebx
c00182cf:	c3                   	ret    

c00182d0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00182d0:	53                   	push   ebx
c00182d1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00182d5:	53                   	push   ebx
c00182d6:	e8 8c ff ff ff       	call   c0018267 <Thr::getDriverBaseFromAddress(unsigned long)>
c00182db:	5a                   	pop    edx
c00182dc:	31 d2                	xor    edx,edx
c00182de:	85 c0                	test   eax,eax
c00182e0:	74 04                	je     c00182e6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00182e2:	89 da                	mov    edx,ebx
c00182e4:	29 c2                	sub    edx,eax
c00182e6:	89 d0                	mov    eax,edx
c00182e8:	5b                   	pop    ebx
c00182e9:	c3                   	ret    

c00182ea <Thr::loadDLL(char const*, bool)>:
c00182ea:	55                   	push   ebp
c00182eb:	57                   	push   edi
c00182ec:	56                   	push   esi
c00182ed:	53                   	push   ebx
c00182ee:	81 ec 34 01 00 00    	sub    esp,0x134
c00182f4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00182fb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0018302:	56                   	push   esi
c0018303:	68 ae 69 02 c0       	push   0xc00269ae
c0018308:	e8 3a 4d ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001830d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018314:	e8 42 1a ff ff       	call   c0009d5b <malloc>
c0018319:	83 c4 0c             	add    esp,0xc
c001831c:	89 c3                	mov    ebx,eax
c001831e:	ff 35 70 9e 02 c0    	push   DWORD PTR ds:0xc0029e70
c0018324:	56                   	push   esi
c0018325:	50                   	push   eax
c0018326:	e8 87 52 ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	85 db                	test   ebx,ebx
c0018330:	75 3c                	jne    c001836e <Thr::loadDLL(char const*, bool)+0x84>
c0018332:	89 f8                	mov    eax,edi
c0018334:	84 c0                	test   al,al
c0018336:	0f 84 d2 01 00 00    	je     c001850e <Thr::loadDLL(char const*, bool)+0x224>
c001833c:	55                   	push   ebp
c001833d:	55                   	push   ebp
c001833e:	68 bf 69 02 c0       	push   0xc00269bf
c0018343:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0018347:	55                   	push   ebp
c0018348:	e8 f3 83 fe ff       	call   c0000740 <strcpy>
c001834d:	58                   	pop    eax
c001834e:	5a                   	pop    edx
c001834f:	56                   	push   esi
c0018350:	55                   	push   ebp
c0018351:	e8 2a 85 fe ff       	call   c0000880 <strcat>
c0018356:	59                   	pop    ecx
c0018357:	58                   	pop    eax
c0018358:	68 d2 69 02 c0       	push   0xc00269d2
c001835d:	55                   	push   ebp
c001835e:	e8 1d 85 fe ff       	call   c0000880 <strcat>
c0018363:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018366:	e8 5a cd ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001836b:	83 c4 10             	add    esp,0x10
c001836e:	51                   	push   ecx
c001836f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0018373:	50                   	push   eax
c0018374:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018378:	50                   	push   eax
c0018379:	53                   	push   ebx
c001837a:	e8 b9 55 ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c001837f:	83 c4 10             	add    esp,0x10
c0018382:	85 db                	test   ebx,ebx
c0018384:	74 0c                	je     c0018392 <Thr::loadDLL(char const*, bool)+0xa8>
c0018386:	83 ec 0c             	sub    esp,0xc
c0018389:	8b 03                	mov    eax,DWORD PTR [ebx]
c001838b:	53                   	push   ebx
c001838c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001838f:	83 c4 10             	add    esp,0x10
c0018392:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0018397:	75 0a                	jne    c00183a3 <Thr::loadDLL(char const*, bool)+0xb9>
c0018399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001839d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00183a1:	75 3c                	jne    c00183df <Thr::loadDLL(char const*, bool)+0xf5>
c00183a3:	89 f8                	mov    eax,edi
c00183a5:	84 c0                	test   al,al
c00183a7:	0f 84 49 01 00 00    	je     c00184f6 <Thr::loadDLL(char const*, bool)+0x20c>
c00183ad:	51                   	push   ecx
c00183ae:	51                   	push   ecx
c00183af:	68 bf 69 02 c0       	push   0xc00269bf
c00183b4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00183b8:	53                   	push   ebx
c00183b9:	e8 82 83 fe ff       	call   c0000740 <strcpy>
c00183be:	5d                   	pop    ebp
c00183bf:	58                   	pop    eax
c00183c0:	56                   	push   esi
c00183c1:	53                   	push   ebx
c00183c2:	e8 b9 84 fe ff       	call   c0000880 <strcat>
c00183c7:	58                   	pop    eax
c00183c8:	5a                   	pop    edx
c00183c9:	68 d2 69 02 c0       	push   0xc00269d2
c00183ce:	53                   	push   ebx
c00183cf:	e8 ac 84 fe ff       	call   c0000880 <strcat>
c00183d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183d7:	e8 e9 cc ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00183dc:	83 c4 10             	add    esp,0x10
c00183df:	52                   	push   edx
c00183e0:	6a 03                	push   0x3
c00183e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183e6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183ea:	05 ff 0f 00 00       	add    eax,0xfff
c00183ef:	83 d2 00             	adc    edx,0x0
c00183f2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00183f6:	50                   	push   eax
c00183f7:	ff 35 50 8a 02 c0    	push   DWORD PTR ds:0xc0028a50
c00183fd:	e8 c8 40 ff ff       	call   c000c4ca <VAS::allocatePages(int, int)>
c0018402:	59                   	pop    ecx
c0018403:	89 c3                	mov    ebx,eax
c0018405:	5d                   	pop    ebp
c0018406:	50                   	push   eax
c0018407:	68 ee 48 02 c0       	push   0xc00248ee
c001840c:	e8 36 4c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0018411:	89 34 24             	mov    DWORD PTR [esp],esi
c0018414:	e8 87 82 fe ff       	call   c00006a0 <strlen>
c0018419:	8b 2d 80 96 02 c0    	mov    ebp,DWORD PTR ds:0xc0029680
c001841f:	40                   	inc    eax
c0018420:	89 04 24             	mov    DWORD PTR [esp],eax
c0018423:	e8 33 19 ff ff       	call   c0009d5b <malloc>
c0018428:	89 04 ad a0 9a 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6560],eax
c001842f:	58                   	pop    eax
c0018430:	a1 80 96 02 c0       	mov    eax,ds:0xc0029680
c0018435:	5a                   	pop    edx
c0018436:	56                   	push   esi
c0018437:	ff 34 85 a0 9a 02 c0 	push   DWORD PTR [eax*4-0x3ffd6560]
c001843e:	e8 fd 82 fe ff       	call   c0000740 <strcpy>
c0018443:	a1 80 96 02 c0       	mov    eax,ds:0xc0029680
c0018448:	8d 50 01             	lea    edx,[eax+0x1]
c001844b:	89 1c 85 a0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6760],ebx
c0018452:	89 15 80 96 02 c0    	mov    DWORD PTR ds:0xc0029680,edx
c0018458:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001845c:	83 c4 0c             	add    esp,0xc
c001845f:	89 14 85 a0 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6960],edx
c0018466:	6a 01                	push   0x1
c0018468:	53                   	push   ebx
c0018469:	56                   	push   esi
c001846a:	e8 c2 f6 ff ff       	call   c0017b31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001846f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018473:	83 c4 10             	add    esp,0x10
c0018476:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001847b:	0f 85 89 00 00 00    	jne    c001850a <Thr::loadDLL(char const*, bool)+0x220>
c0018481:	89 f8                	mov    eax,edi
c0018483:	84 c0                	test   al,al
c0018485:	74 73                	je     c00184fa <Thr::loadDLL(char const*, bool)+0x210>
c0018487:	83 ec 0c             	sub    esp,0xc
c001848a:	68 d4 69 02 c0       	push   0xc00269d4
c001848f:	e8 31 cc ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0018494:	83 c4 10             	add    esp,0x10
c0018497:	eb 61                	jmp    c00184fa <Thr::loadDLL(char const*, bool)+0x210>
c0018499:	50                   	push   eax
c001849a:	50                   	push   eax
c001849b:	89 e8                	mov    eax,ebp
c001849d:	c1 e0 0c             	shl    eax,0xc
c00184a0:	01 d8                	add    eax,ebx
c00184a2:	50                   	push   eax
c00184a3:	ff 35 50 8a 02 c0    	push   DWORD PTR ds:0xc0028a50
c00184a9:	e8 84 3b ff ff       	call   c000c032 <VAS::getPageTableEntry(unsigned long)>
c00184ae:	83 c4 10             	add    esp,0x10
c00184b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00184b3:	a8 60                	test   al,0x60
c00184b5:	75 11                	jne    c00184c8 <Thr::loadDLL(char const*, bool)+0x1de>
c00184b7:	83 ec 0c             	sub    esp,0xc
c00184ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c00184bf:	50                   	push   eax
c00184c0:	e8 ca 1e ff ff       	call   c000a38f <Phys::freePage(unsigned long)>
c00184c5:	83 c4 10             	add    esp,0x10
c00184c8:	45                   	inc    ebp
c00184c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184d1:	05 ff 0f 00 00       	add    eax,0xfff
c00184d6:	bf 00 00 00 00       	mov    edi,0x0
c00184db:	83 d2 00             	adc    edx,0x0
c00184de:	0f ac d0 0c          	shrd   eax,edx,0xc
c00184e2:	c1 ea 0c             	shr    edx,0xc
c00184e5:	39 c5                	cmp    ebp,eax
c00184e7:	89 d1                	mov    ecx,edx
c00184e9:	89 f8                	mov    eax,edi
c00184eb:	19 c8                	sbb    eax,ecx
c00184ed:	72 aa                	jb     c0018499 <Thr::loadDLL(char const*, bool)+0x1af>
c00184ef:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00184f4:	75 18                	jne    c001850e <Thr::loadDLL(char const*, bool)+0x224>
c00184f6:	31 db                	xor    ebx,ebx
c00184f8:	eb 14                	jmp    c001850e <Thr::loadDLL(char const*, bool)+0x224>
c00184fa:	83 ec 0c             	sub    esp,0xc
c00184fd:	68 f3 69 02 c0       	push   0xc00269f3
c0018502:	e8 be cb ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0018507:	83 c4 10             	add    esp,0x10
c001850a:	31 ed                	xor    ebp,ebp
c001850c:	eb bb                	jmp    c00184c9 <Thr::loadDLL(char const*, bool)+0x1df>
c001850e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018514:	89 d8                	mov    eax,ebx
c0018516:	5b                   	pop    ebx
c0018517:	5e                   	pop    esi
c0018518:	5f                   	pop    edi
c0018519:	5d                   	pop    ebp
c001851a:	c3                   	ret    

c001851b <Thr::executeDLL(unsigned long, void*)>:
c001851b:	56                   	push   esi
c001851c:	53                   	push   ebx
c001851d:	52                   	push   edx
c001851e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018522:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018526:	85 db                	test   ebx,ebx
c0018528:	75 10                	jne    c001853a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001852a:	83 ec 0c             	sub    esp,0xc
c001852d:	68 0f 6a 02 c0       	push   0xc0026a0f
c0018532:	e8 8e cb ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0018537:	83 c4 10             	add    esp,0x10
c001853a:	50                   	push   eax
c001853b:	50                   	push   eax
c001853c:	53                   	push   ebx
c001853d:	68 39 6a 02 c0       	push   0xc0026a39
c0018542:	e8 00 4b ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0018547:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001854b:	89 d8                	mov    eax,ebx
c001854d:	83 c4 14             	add    esp,0x14
c0018550:	5b                   	pop    ebx
c0018551:	5e                   	pop    esi
c0018552:	ff e0                	jmp    eax

c0018554 <userModeEntryPoint(void*)>:
c0018554:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0018559:	48                   	dec    eax
c001855a:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c001855f:	75 03                	jne    c0018564 <userModeEntryPoint(void*)+0x10>
c0018561:	fb                   	sti    
c0018562:	66 90                	xchg   ax,ax
c0018564:	fb                   	sti    
c0018565:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001856a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001856d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0018573:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018577:	e9 e3 7c fe ff       	jmp    c000025f <goToUsermode>

c001857c <changeTSS>:
c001857c:	83 ec 14             	sub    esp,0x14
c001857f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018584:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0018587:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001858c:	c1 e2 15             	shl    edx,0x15
c001858f:	29 d0                	sub    eax,edx
c0018591:	50                   	push   eax
c0018592:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0018597:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001859d:	05 7c 11 00 00       	add    eax,0x117c
c00185a2:	50                   	push   eax
c00185a3:	e8 cc 30 ff ff       	call   c000b674 <TSS::setESP(unsigned long)>
c00185a8:	83 c4 1c             	add    esp,0x1c
c00185ab:	c3                   	ret    

c00185ac <switchToThread(ThreadControlBlock*)>:
c00185ac:	57                   	push   edi
c00185ad:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c00185b2:	56                   	push   esi
c00185b3:	85 c0                	test   eax,eax
c00185b5:	53                   	push   ebx
c00185b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185ba:	0f 85 90 00 00 00    	jne    c0018650 <switchToThread(ThreadControlBlock*)+0xa4>
c00185c0:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c00185c3:	3c ff                	cmp    al,0xff
c00185c5:	0f 84 81 00 00 00    	je     c001864c <switchToThread(ThreadControlBlock*)+0xa0>
c00185cb:	0f b6 d0             	movzx  edx,al
c00185ce:	b8 00 04 00 00       	mov    eax,0x400
c00185d3:	29 d0                	sub    eax,edx
c00185d5:	d1 f8                	sar    eax,1
c00185d7:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c00185da:	66 90                	xchg   ax,ax
c00185dc:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c00185df:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c00185e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00185ea:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00185f1:	74 4d                	je     c0018640 <switchToThread(ThreadControlBlock*)+0x94>
c00185f3:	0f 31                	rdtsc  
c00185f5:	a3 88 9e 02 c0       	mov    ds:0xc0029e88,eax
c00185fa:	89 c6                	mov    esi,eax
c00185fc:	89 d7                	mov    edi,edx
c00185fe:	2b 35 78 9e 02 c0    	sub    esi,DWORD PTR ds:0xc0029e78
c0018604:	89 15 8c 9e 02 c0    	mov    DWORD PTR ds:0xc0029e8c,edx
c001860a:	1b 3d 7c 9e 02 c0    	sbb    edi,DWORD PTR ds:0xc0029e7c
c0018610:	89 35 80 9e 02 c0    	mov    DWORD PTR ds:0xc0029e80,esi
c0018616:	a3 78 9e 02 c0       	mov    ds:0xc0029e78,eax
c001861b:	89 3d 84 9e 02 c0    	mov    DWORD PTR ds:0xc0029e84,edi
c0018621:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018627:	89 15 7c 9e 02 c0    	mov    DWORD PTR ds:0xc0029e7c,edx
c001862d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018630:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0018633:	01 c6                	add    esi,eax
c0018635:	11 d7                	adc    edi,edx
c0018637:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001863a:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001863d:	8d 76 00             	lea    esi,[esi+0x0]
c0018640:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0018644:	5b                   	pop    ebx
c0018645:	5e                   	pop    esi
c0018646:	5f                   	pop    edi
c0018647:	e9 4b 7c fe ff       	jmp    c0000297 <switchToThreadASM>
c001864c:	31 c0                	xor    eax,eax
c001864e:	eb 8c                	jmp    c00185dc <switchToThread(ThreadControlBlock*)+0x30>
c0018650:	5b                   	pop    ebx
c0018651:	c7 05 40 9e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x1
c001865b:	5e                   	pop    esi
c001865c:	5f                   	pop    edi
c001865d:	c3                   	ret    
c001865e:	66 90                	xchg   ax,ax

c0018660 <Process::addArgs(char**)>:
c0018660:	57                   	push   edi
c0018661:	56                   	push   esi
c0018662:	53                   	push   ebx
c0018663:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018667:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001866b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0018675:	85 ff                	test   edi,edi
c0018677:	74 43                	je     c00186bc <Process::addArgs(char**)+0x5c>
c0018679:	8b 07                	mov    eax,DWORD PTR [edi]
c001867b:	85 c0                	test   eax,eax
c001867d:	74 3d                	je     c00186bc <Process::addArgs(char**)+0x5c>
c001867f:	31 db                	xor    ebx,ebx
c0018681:	8d 76 00             	lea    esi,[esi+0x0]
c0018684:	83 ec 0c             	sub    esp,0xc
c0018687:	50                   	push   eax
c0018688:	e8 13 80 fe ff       	call   c00006a0 <strlen>
c001868d:	40                   	inc    eax
c001868e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018691:	e8 c5 16 ff ff       	call   c0009d5b <malloc>
c0018696:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001869d:	5a                   	pop    edx
c001869e:	59                   	pop    ecx
c001869f:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00186a2:	43                   	inc    ebx
c00186a3:	50                   	push   eax
c00186a4:	e8 97 80 fe ff       	call   c0000740 <strcpy>
c00186a9:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00186af:	83 c4 10             	add    esp,0x10
c00186b2:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00186b5:	85 c0                	test   eax,eax
c00186b7:	75 cb                	jne    c0018684 <Process::addArgs(char**)+0x24>
c00186b9:	8d 76 00             	lea    esi,[esi+0x0]
c00186bc:	5b                   	pop    ebx
c00186bd:	5e                   	pop    esi
c00186be:	5f                   	pop    edi
c00186bf:	c3                   	ret    

c00186c0 <Process::Process(char const*, Process*, char**)>:
c00186c0:	56                   	push   esi
c00186c1:	53                   	push   ebx
c00186c2:	83 ec 14             	sub    esp,0x14
c00186c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186c9:	05 0c 02 00 00       	add    eax,0x20c
c00186ce:	bb 07 00 00 00       	mov    ebx,0x7
c00186d3:	89 c6                	mov    esi,eax
c00186d5:	8d 76 00             	lea    esi,[esi+0x0]
c00186d8:	85 db                	test   ebx,ebx
c00186da:	78 14                	js     c00186f0 <Process::Process(char const*, Process*, char**)+0x30>
c00186dc:	83 ec 0c             	sub    esp,0xc
c00186df:	56                   	push   esi
c00186e0:	e8 77 af 00 00       	call   c002365c <ThreadControlBlock::ThreadControlBlock()>
c00186e5:	83 c4 10             	add    esp,0x10
c00186e8:	83 c6 5f             	add    esi,0x5f
c00186eb:	4b                   	dec    ebx
c00186ec:	eb ea                	jmp    c00186d8 <Process::Process(char const*, Process*, char**)+0x18>
c00186ee:	66 90                	xchg   ax,ax
c00186f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186f4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00186fb:	83 ec 0c             	sub    esp,0xc
c00186fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018702:	e8 47 c8 ff ff       	call   c0014f4e <Krnl::newProcessEnv(Process*)>
c0018707:	83 c4 10             	add    esp,0x10
c001870a:	89 c2                	mov    edx,eax
c001870c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018710:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001871a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018723:	a1 50 83 02 c0       	mov    eax,ds:0xc0028350
c0018728:	8d 50 01             	lea    edx,[eax+0x1]
c001872b:	89 15 50 83 02 c0    	mov    DWORD PTR ds:0xc0028350,edx
c0018731:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018735:	89 02                	mov    DWORD PTR [edx],eax
c0018737:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001873f:	83 ec 0c             	sub    esp,0xc
c0018742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018746:	e8 10 16 ff ff       	call   c0009d5b <malloc>
c001874b:	83 c4 10             	add    esp,0x10
c001874e:	89 c3                	mov    ebx,eax
c0018750:	83 ec 08             	sub    esp,0x8
c0018753:	6a 00                	push   0x0
c0018755:	53                   	push   ebx
c0018756:	e8 17 41 ff ff       	call   c000c872 <VAS::VAS(bool)>
c001875b:	83 c4 10             	add    esp,0x10
c001875e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018762:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001876c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001877a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001877e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018788:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001878e:	85 c0                	test   eax,eax
c0018790:	74 42                	je     c00187d4 <Process::Process(char const*, Process*, char**)+0x114>
c0018792:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018796:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001879c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00187a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00187ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187b0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00187b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00187bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187c0:	05 0c 01 00 00       	add    eax,0x10c
c00187c5:	83 ec 08             	sub    esp,0x8
c00187c8:	52                   	push   edx
c00187c9:	50                   	push   eax
c00187ca:	e8 71 7f fe ff       	call   c0000740 <strcpy>
c00187cf:	83 c4 10             	add    esp,0x10
c00187d2:	eb 64                	jmp    c0018838 <Process::Process(char const*, Process*, char**)+0x178>
c00187d4:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c00187dc:	83 ec 0c             	sub    esp,0xc
c00187df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187e3:	e8 73 15 ff ff       	call   c0009d5b <malloc>
c00187e8:	83 c4 10             	add    esp,0x10
c00187eb:	89 c3                	mov    ebx,eax
c00187ed:	83 ec 08             	sub    esp,0x8
c00187f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187f4:	53                   	push   ebx
c00187f5:	e8 8e 2b ff ff       	call   c000b388 <VgaText::VgaText(char const*)>
c00187fa:	83 c4 10             	add    esp,0x10
c00187fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018801:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001880b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018811:	83 ec 0c             	sub    esp,0xc
c0018814:	50                   	push   eax
c0018815:	e8 2d 23 ff ff       	call   c000ab47 <addToTerminalCycle(VgaText*)>
c001881a:	83 c4 10             	add    esp,0x10
c001881d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018821:	05 0c 01 00 00       	add    eax,0x10c
c0018826:	83 ec 08             	sub    esp,0x8
c0018829:	68 58 6a 02 c0       	push   0xc0026a58
c001882e:	50                   	push   eax
c001882f:	e8 0c 7f fe ff       	call   c0000740 <strcpy>
c0018834:	83 c4 10             	add    esp,0x10
c0018837:	90                   	nop
c0018838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001883c:	83 c0 0c             	add    eax,0xc
c001883f:	83 ec 08             	sub    esp,0x8
c0018842:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018846:	50                   	push   eax
c0018847:	e8 f4 7e fe ff       	call   c0000740 <strcpy>
c001884c:	83 c4 10             	add    esp,0x10
c001884f:	83 ec 08             	sub    esp,0x8
c0018852:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018856:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001885a:	e8 01 fe ff ff       	call   c0018660 <Process::addArgs(char**)>
c001885f:	83 c4 10             	add    esp,0x10
c0018862:	83 ec 08             	sub    esp,0x8
c0018865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018869:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001886d:	e8 89 ed ff ff       	call   c00175fb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018872:	83 c4 10             	add    esp,0x10
c0018875:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018879:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001887d:	83 f0 01             	xor    eax,0x1
c0018880:	88 c2                	mov    dl,al
c0018882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018886:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001888c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018891:	83 ec 08             	sub    esp,0x8
c0018894:	50                   	push   eax
c0018895:	68 b0 6a 02 c0       	push   0xc0026ab0
c001889a:	e8 a8 47 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001889f:	83 c4 10             	add    esp,0x10
c00188a2:	90                   	nop
c00188a3:	83 c4 14             	add    esp,0x14
c00188a6:	5b                   	pop    ebx
c00188a7:	5e                   	pop    esi
c00188a8:	c3                   	ret    
c00188a9:	90                   	nop
c00188aa:	66 90                	xchg   ax,ax

c00188ac <Process::Process(bool, char const*, Process*, char**)>:
c00188ac:	56                   	push   esi
c00188ad:	53                   	push   ebx
c00188ae:	83 ec 24             	sub    esp,0x24
c00188b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00188b5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188bd:	05 0c 02 00 00       	add    eax,0x20c
c00188c2:	bb 07 00 00 00       	mov    ebx,0x7
c00188c7:	89 c6                	mov    esi,eax
c00188c9:	8d 76 00             	lea    esi,[esi+0x0]
c00188cc:	85 db                	test   ebx,ebx
c00188ce:	78 14                	js     c00188e4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00188d0:	83 ec 0c             	sub    esp,0xc
c00188d3:	56                   	push   esi
c00188d4:	e8 83 ad 00 00       	call   c002365c <ThreadControlBlock::ThreadControlBlock()>
c00188d9:	83 c4 10             	add    esp,0x10
c00188dc:	83 c6 5f             	add    esi,0x5f
c00188df:	4b                   	dec    ebx
c00188e0:	eb ea                	jmp    c00188cc <Process::Process(bool, char const*, Process*, char**)+0x20>
c00188e2:	66 90                	xchg   ax,ax
c00188e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188e8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00188ef:	83 ec 0c             	sub    esp,0xc
c00188f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00188f6:	e8 53 c6 ff ff       	call   c0014f4e <Krnl::newProcessEnv(Process*)>
c00188fb:	83 c4 10             	add    esp,0x10
c00188fe:	89 c2                	mov    edx,eax
c0018900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018904:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001890a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001890e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018917:	a1 50 83 02 c0       	mov    eax,ds:0xc0028350
c001891c:	8d 50 01             	lea    edx,[eax+0x1]
c001891f:	89 15 50 83 02 c0    	mov    DWORD PTR ds:0xc0028350,edx
c0018925:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018929:	89 02                	mov    DWORD PTR [edx],eax
c001892b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018933:	83 ec 0c             	sub    esp,0xc
c0018936:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001893a:	e8 1c 14 ff ff       	call   c0009d5b <malloc>
c001893f:	83 c4 10             	add    esp,0x10
c0018942:	89 c3                	mov    ebx,eax
c0018944:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018949:	83 ec 08             	sub    esp,0x8
c001894c:	50                   	push   eax
c001894d:	53                   	push   ebx
c001894e:	e8 1f 3f ff ff       	call   c000c872 <VAS::VAS(bool)>
c0018953:	83 c4 10             	add    esp,0x10
c0018956:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001895a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018960:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018964:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001896e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018972:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018976:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001897c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018980:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018986:	85 c0                	test   eax,eax
c0018988:	74 42                	je     c00189cc <Process::Process(bool, char const*, Process*, char**)+0x120>
c001898a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001898e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018994:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001899a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001899e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00189a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189a8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189ae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00189b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189b8:	05 0c 01 00 00       	add    eax,0x10c
c00189bd:	83 ec 08             	sub    esp,0x8
c00189c0:	52                   	push   edx
c00189c1:	50                   	push   eax
c00189c2:	e8 79 7d fe ff       	call   c0000740 <strcpy>
c00189c7:	83 c4 10             	add    esp,0x10
c00189ca:	eb 64                	jmp    c0018a30 <Process::Process(bool, char const*, Process*, char**)+0x184>
c00189cc:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c00189d4:	83 ec 0c             	sub    esp,0xc
c00189d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00189db:	e8 7b 13 ff ff       	call   c0009d5b <malloc>
c00189e0:	83 c4 10             	add    esp,0x10
c00189e3:	89 c3                	mov    ebx,eax
c00189e5:	83 ec 08             	sub    esp,0x8
c00189e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00189ec:	53                   	push   ebx
c00189ed:	e8 96 29 ff ff       	call   c000b388 <VgaText::VgaText(char const*)>
c00189f2:	83 c4 10             	add    esp,0x10
c00189f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189f9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00189ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a09:	83 ec 0c             	sub    esp,0xc
c0018a0c:	50                   	push   eax
c0018a0d:	e8 35 21 ff ff       	call   c000ab47 <addToTerminalCycle(VgaText*)>
c0018a12:	83 c4 10             	add    esp,0x10
c0018a15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a19:	05 0c 01 00 00       	add    eax,0x10c
c0018a1e:	83 ec 08             	sub    esp,0x8
c0018a21:	68 58 6a 02 c0       	push   0xc0026a58
c0018a26:	50                   	push   eax
c0018a27:	e8 14 7d fe ff       	call   c0000740 <strcpy>
c0018a2c:	83 c4 10             	add    esp,0x10
c0018a2f:	90                   	nop
c0018a30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a34:	83 c0 0c             	add    eax,0xc
c0018a37:	83 ec 08             	sub    esp,0x8
c0018a3a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018a3e:	50                   	push   eax
c0018a3f:	e8 fc 7c fe ff       	call   c0000740 <strcpy>
c0018a44:	83 c4 10             	add    esp,0x10
c0018a47:	83 ec 08             	sub    esp,0x8
c0018a4a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018a4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018a52:	e8 09 fc ff ff       	call   c0018660 <Process::addArgs(char**)>
c0018a57:	83 c4 10             	add    esp,0x10
c0018a5a:	90                   	nop
c0018a5b:	83 c4 24             	add    esp,0x24
c0018a5e:	5b                   	pop    ebx
c0018a5f:	5e                   	pop    esi
c0018a60:	c3                   	ret    
c0018a61:	8d 76 00             	lea    esi,[esi+0x0]

c0018a64 <taskStartupFunction>:
c0018a64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a69:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018a6c:	c3                   	ret    
c0018a6d:	90                   	nop
c0018a6e:	66 90                	xchg   ax,ax

c0018a70 <Semaphore::Semaphore(int)>:
c0018a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a78:	89 10                	mov    DWORD PTR [eax],edx
c0018a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a7e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018a85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018a90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018a9b:	90                   	nop
c0018a9c:	c3                   	ret    
c0018a9d:	90                   	nop
c0018a9e:	66 90                	xchg   ax,ax

c0018aa0 <Mutex::Mutex()>:
c0018aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018aa4:	6a 01                	push   0x1
c0018aa6:	50                   	push   eax
c0018aa7:	e8 c4 ff ff ff       	call   c0018a70 <Semaphore::Semaphore(int)>
c0018aac:	83 c4 08             	add    esp,0x8
c0018aaf:	90                   	nop
c0018ab0:	c3                   	ret    
c0018ab1:	90                   	nop
c0018ab2:	66 90                	xchg   ax,ax

c0018ab4 <Process::createThread(void (*)(void*), void*, int)>:
c0018ab4:	57                   	push   edi
c0018ab5:	31 c9                	xor    ecx,ecx
c0018ab7:	56                   	push   esi
c0018ab8:	53                   	push   ebx
c0018ab9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018abd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018ac4:	89 f2                	mov    edx,esi
c0018ac6:	66 90                	xchg   ax,ax
c0018ac8:	0f b7 c2             	movzx  eax,dx
c0018acb:	83 e2 01             	and    edx,0x1
c0018ace:	74 14                	je     c0018ae4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018ad0:	d1 f8                	sar    eax,1
c0018ad2:	41                   	inc    ecx
c0018ad3:	89 c2                	mov    edx,eax
c0018ad5:	83 f9 10             	cmp    ecx,0x10
c0018ad8:	75 ee                	jne    c0018ac8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0018ada:	31 db                	xor    ebx,ebx
c0018adc:	89 d8                	mov    eax,ebx
c0018ade:	5b                   	pop    ebx
c0018adf:	5e                   	pop    esi
c0018ae0:	5f                   	pop    edi
c0018ae1:	c3                   	ret    
c0018ae2:	66 90                	xchg   ax,ax
c0018ae4:	b8 01 00 00 00       	mov    eax,0x1
c0018ae9:	d3 e0                	shl    eax,cl
c0018aeb:	09 c6                	or     esi,eax
c0018aed:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018af0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018af7:	01 c0                	add    eax,eax
c0018af9:	01 c8                	add    eax,ecx
c0018afb:	8d 04 80             	lea    eax,[eax+eax*4]
c0018afe:	01 d8                	add    eax,ebx
c0018b00:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018b07:	75 0b                	jne    c0018b14 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018b09:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018b13:	90                   	nop
c0018b14:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018b1a:	83 ec 08             	sub    esp,0x8
c0018b1d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018b20:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018b23:	01 c0                	add    eax,eax
c0018b25:	01 c8                	add    eax,ecx
c0018b27:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018b2a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018b2d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018b33:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018b39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018b3d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018b43:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018b49:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018b50:	89 ca                	mov    edx,ecx
c0018b52:	f7 da                	neg    edx
c0018b54:	c1 e2 15             	shl    edx,0x15
c0018b57:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018b5d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018b63:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018b67:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018b71:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018b77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018b7b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018b81:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018b8b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018b95:	53                   	push   ebx
c0018b96:	68 64 9e 02 c0       	push   0xc0029e64
c0018b9b:	e8 5c a8 00 00       	call   c00233fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ba0:	83 c4 10             	add    esp,0x10
c0018ba3:	89 d8                	mov    eax,ebx
c0018ba5:	5b                   	pop    ebx
c0018ba6:	5e                   	pop    esi
c0018ba7:	5f                   	pop    edi
c0018ba8:	c3                   	ret    
c0018ba9:	90                   	nop
c0018baa:	66 90                	xchg   ax,ax

c0018bac <Process::createUserThread()>:
c0018bac:	83 ec 0c             	sub    esp,0xc
c0018baf:	68 80 00 00 00       	push   0x80
c0018bb4:	6a 00                	push   0x0
c0018bb6:	68 54 85 01 c0       	push   0xc0018554
c0018bbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018bbf:	e8 f0 fe ff ff       	call   c0018ab4 <Process::createThread(void (*)(void*), void*, int)>
c0018bc4:	83 c4 1c             	add    esp,0x1c
c0018bc7:	c3                   	ret    

c0018bc8 <setupMultitasking(void (*)())>:
c0018bc8:	56                   	push   esi
c0018bc9:	53                   	push   ebx
c0018bca:	51                   	push   ecx
c0018bcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018bcf:	eb 13                	jmp    c0018be4 <setupMultitasking(void (*)())+0x1c>
c0018bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bd4:	83 ec 0c             	sub    esp,0xc
c0018bd7:	68 64 9e 02 c0       	push   0xc0029e64
c0018bdc:	e8 63 a7 00 00       	call   c0023344 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018be1:	83 c4 10             	add    esp,0x10
c0018be4:	83 ec 0c             	sub    esp,0xc
c0018be7:	68 64 9e 02 c0       	push   0xc0029e64
c0018bec:	e8 2f a7 00 00       	call   c0023320 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018bf1:	83 c4 10             	add    esp,0x10
c0018bf4:	84 c0                	test   al,al
c0018bf6:	74 dc                	je     c0018bd4 <setupMultitasking(void (*)())+0xc>
c0018bf8:	83 ec 0c             	sub    esp,0xc
c0018bfb:	68 1f 07 00 00       	push   0x71f
c0018c00:	e8 56 11 ff ff       	call   c0009d5b <malloc>
c0018c05:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018c0c:	89 c3                	mov    ebx,eax
c0018c0e:	6a 00                	push   0x0
c0018c10:	68 5c 6a 02 c0       	push   0xc0026a5c
c0018c15:	6a 01                	push   0x1
c0018c17:	50                   	push   eax
c0018c18:	e8 8f fc ff ff       	call   c00188ac <Process::Process(bool, char const*, Process*, char**)>
c0018c1d:	83 c4 14             	add    esp,0x14
c0018c20:	89 1d 70 9e 02 c0    	mov    DWORD PTR ds:0xc0029e70,ebx
c0018c26:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018c2c:	e8 24 22 ff ff       	call   c000ae55 <setActiveTerminal(VgaText*)>
c0018c31:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018c39:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018c43:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018c49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018c4c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018c56:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018c5c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018c62:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018c6c:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018c76:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018c80:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018c86:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018c90:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018c96:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018ca0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018ca6:	58                   	pop    eax
c0018ca7:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018cad:	5a                   	pop    edx
c0018cae:	68 58 6a 02 c0       	push   0xc0026a58
c0018cb3:	50                   	push   eax
c0018cb4:	e8 87 7a fe ff       	call   c0000740 <strcpy>
c0018cb9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018cc0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018cc4:	83 c4 14             	add    esp,0x14
c0018cc7:	5b                   	pop    ebx
c0018cc8:	5e                   	pop    esi
c0018cc9:	e9 bb 75 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0018cce:	66 90                	xchg   ax,ax

c0018cd0 <schedule()>:
c0018cd0:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c0018cd5:	85 c0                	test   eax,eax
c0018cd7:	74 0b                	je     c0018ce4 <schedule()+0x14>
c0018cd9:	c7 05 40 9e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x1
c0018ce3:	c3                   	ret    
c0018ce4:	53                   	push   ebx
c0018ce5:	83 ec 14             	sub    esp,0x14
c0018ce8:	68 64 9e 02 c0       	push   0xc0029e64
c0018ced:	e8 2e a6 00 00       	call   c0023320 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018cf2:	83 c4 10             	add    esp,0x10
c0018cf5:	84 c0                	test   al,al
c0018cf7:	75 3b                	jne    c0018d34 <schedule()+0x64>
c0018cf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cfe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018d01:	4a                   	dec    edx
c0018d02:	74 38                	je     c0018d3c <schedule()+0x6c>
c0018d04:	83 ec 0c             	sub    esp,0xc
c0018d07:	68 64 9e 02 c0       	push   0xc0029e64
c0018d0c:	e8 2b a6 00 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018d11:	c7 04 24 64 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e64
c0018d18:	89 c3                	mov    ebx,eax
c0018d1a:	e8 25 a6 00 00       	call   c0023344 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018d1f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018d26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018d29:	e8 7e f8 ff ff       	call   c00185ac <switchToThread(ThreadControlBlock*)>
c0018d2e:	83 c4 10             	add    esp,0x10
c0018d31:	8d 76 00             	lea    esi,[esi+0x0]
c0018d34:	83 c4 08             	add    esp,0x8
c0018d37:	5b                   	pop    ebx
c0018d38:	c3                   	ret    
c0018d39:	8d 76 00             	lea    esi,[esi+0x0]
c0018d3c:	83 ec 08             	sub    esp,0x8
c0018d3f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018d46:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018d4c:	68 64 9e 02 c0       	push   0xc0029e64
c0018d51:	e8 a6 a6 00 00       	call   c00233fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018d56:	83 c4 10             	add    esp,0x10
c0018d59:	eb a9                	jmp    c0018d04 <schedule()+0x34>
c0018d5b:	90                   	nop

c0018d5c <Semaphore::tryAcquire()>:
c0018d5c:	53                   	push   ebx
c0018d5d:	83 ec 08             	sub    esp,0x8
c0018d60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d64:	fa                   	cli    
c0018d65:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0018d6a:	8d 50 01             	lea    edx,[eax+0x1]
c0018d6d:	89 15 48 9e 02 c0    	mov    DWORD PTR ds:0xc0029e48,edx
c0018d73:	8b 15 44 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029e44
c0018d79:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018d7c:	89 1d 44 9e 02 c0    	mov    DWORD PTR ds:0xc0029e44,ebx
c0018d82:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018d85:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0018d87:	7c 33                	jl     c0018dbc <Semaphore::tryAcquire()+0x60>
c0018d89:	89 15 44 9e 02 c0    	mov    DWORD PTR ds:0xc0029e44,edx
c0018d8f:	85 d2                	test   edx,edx
c0018d91:	75 0d                	jne    c0018da0 <Semaphore::tryAcquire()+0x44>
c0018d93:	8b 15 40 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029e40
c0018d99:	85 d2                	test   edx,edx
c0018d9b:	75 6b                	jne    c0018e08 <Semaphore::tryAcquire()+0xac>
c0018d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018da0:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0018da5:	85 c0                	test   eax,eax
c0018da7:	74 0b                	je     c0018db4 <Semaphore::tryAcquire()+0x58>
c0018da9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dac:	31 c0                	xor    eax,eax
c0018dae:	83 c4 08             	add    esp,0x8
c0018db1:	5b                   	pop    ebx
c0018db2:	c3                   	ret    
c0018db3:	90                   	nop
c0018db4:	fb                   	sti    
c0018db5:	83 c4 08             	add    esp,0x8
c0018db8:	5b                   	pop    ebx
c0018db9:	c3                   	ret    
c0018dba:	66 90                	xchg   ax,ax
c0018dbc:	43                   	inc    ebx
c0018dbd:	89 15 44 9e 02 c0    	mov    DWORD PTR ds:0xc0029e44,edx
c0018dc3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0018dc6:	85 d2                	test   edx,edx
c0018dc8:	75 22                	jne    c0018dec <Semaphore::tryAcquire()+0x90>
c0018dca:	8b 0d 40 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029e40
c0018dd0:	85 c9                	test   ecx,ecx
c0018dd2:	74 18                	je     c0018dec <Semaphore::tryAcquire()+0x90>
c0018dd4:	c7 05 40 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x0
c0018dde:	e8 ed fe ff ff       	call   c0018cd0 <schedule()>
c0018de3:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0018de8:	48                   	dec    eax
c0018de9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dec:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0018df1:	85 c0                	test   eax,eax
c0018df3:	75 0b                	jne    c0018e00 <Semaphore::tryAcquire()+0xa4>
c0018df5:	fb                   	sti    
c0018df6:	b0 01                	mov    al,0x1
c0018df8:	83 c4 08             	add    esp,0x8
c0018dfb:	5b                   	pop    ebx
c0018dfc:	c3                   	ret    
c0018dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0018e00:	b0 01                	mov    al,0x1
c0018e02:	83 c4 08             	add    esp,0x8
c0018e05:	5b                   	pop    ebx
c0018e06:	c3                   	ret    
c0018e07:	90                   	nop
c0018e08:	c7 05 40 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x0
c0018e12:	e8 b9 fe ff ff       	call   c0018cd0 <schedule()>
c0018e17:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0018e1c:	48                   	dec    eax
c0018e1d:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0018e22:	85 c0                	test   eax,eax
c0018e24:	75 86                	jne    c0018dac <Semaphore::tryAcquire()+0x50>
c0018e26:	eb 8c                	jmp    c0018db4 <Semaphore::tryAcquire()+0x58>

c0018e28 <Semaphore::assertLocked(char const*)>:
c0018e28:	83 ec 0c             	sub    esp,0xc
c0018e2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e2f:	fa                   	cli    
c0018e30:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0018e36:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c0018e3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0018e3e:	89 0d 44 9e 02 c0    	mov    DWORD PTR ds:0xc0029e44,ecx
c0018e44:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018e46:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018e49:	7c 29                	jl     c0018e74 <Semaphore::assertLocked(char const*)+0x4c>
c0018e4b:	90                   	nop
c0018e4c:	a3 44 9e 02 c0       	mov    ds:0xc0029e44,eax
c0018e51:	85 c0                	test   eax,eax
c0018e53:	75 0b                	jne    c0018e60 <Semaphore::assertLocked(char const*)+0x38>
c0018e55:	a1 40 9e 02 c0       	mov    eax,ds:0xc0029e40
c0018e5a:	85 c0                	test   eax,eax
c0018e5c:	75 2e                	jne    c0018e8c <Semaphore::assertLocked(char const*)+0x64>
c0018e5e:	66 90                	xchg   ax,ax
c0018e60:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0018e65:	48                   	dec    eax
c0018e66:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0018e6b:	75 03                	jne    c0018e70 <Semaphore::assertLocked(char const*)+0x48>
c0018e6d:	fb                   	sti    
c0018e6e:	66 90                	xchg   ax,ax
c0018e70:	83 c4 0c             	add    esp,0xc
c0018e73:	c3                   	ret    
c0018e74:	83 ec 0c             	sub    esp,0xc
c0018e77:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018e7b:	e8 45 c2 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0018e80:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c0018e85:	83 c4 10             	add    esp,0x10
c0018e88:	48                   	dec    eax
c0018e89:	eb c1                	jmp    c0018e4c <Semaphore::assertLocked(char const*)+0x24>
c0018e8b:	90                   	nop
c0018e8c:	c7 05 40 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x0
c0018e96:	e8 35 fe ff ff       	call   c0018cd0 <schedule()>
c0018e9b:	eb c3                	jmp    c0018e60 <Semaphore::assertLocked(char const*)+0x38>
c0018e9d:	8d 76 00             	lea    esi,[esi+0x0]

c0018ea0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018ea0:	83 ec 0c             	sub    esp,0xc
c0018ea3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ea8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018eac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018eaf:	e8 1c fe ff ff       	call   c0018cd0 <schedule()>
c0018eb4:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0018eb9:	48                   	dec    eax
c0018eba:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0018ebf:	75 03                	jne    c0018ec4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018ec1:	fb                   	sti    
c0018ec2:	66 90                	xchg   ax,ax
c0018ec4:	83 c4 0c             	add    esp,0xc
c0018ec7:	c3                   	ret    

c0018ec8 <blockTask(TaskState)>:
c0018ec8:	83 ec 0c             	sub    esp,0xc
c0018ecb:	fa                   	cli    
c0018ecc:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0018ed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ed6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018edb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ede:	e8 ed fd ff ff       	call   c0018cd0 <schedule()>
c0018ee3:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0018ee8:	48                   	dec    eax
c0018ee9:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0018eee:	75 04                	jne    c0018ef4 <blockTask(TaskState)+0x2c>
c0018ef0:	fb                   	sti    
c0018ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ef4:	83 c4 0c             	add    esp,0xc
c0018ef7:	c3                   	ret    

c0018ef8 <waitTask(int, int*, int)>:
c0018ef8:	83 ec 18             	sub    esp,0x18
c0018efb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f04:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018f07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f10:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018f13:	6a 07                	push   0x7
c0018f15:	e8 ae ff ff ff       	call   c0018ec8 <blockTask(TaskState)>
c0018f1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f1f:	83 c4 10             	add    esp,0x10
c0018f22:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018f25:	85 d2                	test   edx,edx
c0018f27:	74 0b                	je     c0018f34 <waitTask(int, int*, int)+0x3c>
c0018f29:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018f2c:	89 02                	mov    DWORD PTR [edx],eax
c0018f2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f33:	90                   	nop
c0018f34:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018f37:	83 c4 0c             	add    esp,0xc
c0018f3a:	c3                   	ret    
c0018f3b:	90                   	nop

c0018f3c <milliTenthSleepUntil(unsigned int)>:
c0018f3c:	83 ec 0c             	sub    esp,0xc
c0018f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f43:	39 05 4c 8f 02 c0    	cmp    DWORD PTR ds:0xc0028f4c,eax
c0018f49:	76 05                	jbe    c0018f50 <milliTenthSleepUntil(unsigned int)+0x14>
c0018f4b:	90                   	nop
c0018f4c:	83 c4 0c             	add    esp,0xc
c0018f4f:	c3                   	ret    
c0018f50:	fa                   	cli    
c0018f51:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0018f57:	83 ec 08             	sub    esp,0x8
c0018f5a:	ff 05 44 9e 02 c0    	inc    DWORD PTR ds:0xc0029e44
c0018f60:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f66:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018f69:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018f6f:	68 58 9e 02 c0       	push   0xc0029e58
c0018f74:	e8 83 a4 00 00       	call   c00233fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018f79:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018f80:	e8 43 ff ff ff       	call   c0018ec8 <blockTask(TaskState)>
c0018f85:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c0018f8a:	83 c4 10             	add    esp,0x10
c0018f8d:	48                   	dec    eax
c0018f8e:	a3 44 9e 02 c0       	mov    ds:0xc0029e44,eax
c0018f93:	85 c0                	test   eax,eax
c0018f95:	75 09                	jne    c0018fa0 <milliTenthSleepUntil(unsigned int)+0x64>
c0018f97:	a1 40 9e 02 c0       	mov    eax,ds:0xc0029e40
c0018f9c:	85 c0                	test   eax,eax
c0018f9e:	75 14                	jne    c0018fb4 <milliTenthSleepUntil(unsigned int)+0x78>
c0018fa0:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0018fa5:	48                   	dec    eax
c0018fa6:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0018fab:	75 9f                	jne    c0018f4c <milliTenthSleepUntil(unsigned int)+0x10>
c0018fad:	fb                   	sti    
c0018fae:	83 c4 0c             	add    esp,0xc
c0018fb1:	c3                   	ret    
c0018fb2:	66 90                	xchg   ax,ax
c0018fb4:	c7 05 40 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x0
c0018fbe:	e8 0d fd ff ff       	call   c0018cd0 <schedule()>
c0018fc3:	eb db                	jmp    c0018fa0 <milliTenthSleepUntil(unsigned int)+0x64>
c0018fc5:	8d 76 00             	lea    esi,[esi+0x0]

c0018fc8 <milliTenthSleep(unsigned int)>:
c0018fc8:	a1 4c 8f 02 c0       	mov    eax,ds:0xc0028f4c
c0018fcd:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018fd1:	e9 66 ff ff ff       	jmp    c0018f3c <milliTenthSleepUntil(unsigned int)>
c0018fd6:	66 90                	xchg   ax,ax

c0018fd8 <sleep(unsigned int)>:
c0018fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fdc:	8d 04 80             	lea    eax,[eax+eax*4]
c0018fdf:	8d 04 80             	lea    eax,[eax+eax*4]
c0018fe2:	8d 04 80             	lea    eax,[eax+eax*4]
c0018fe5:	8d 04 80             	lea    eax,[eax+eax*4]
c0018fe8:	c1 e0 04             	shl    eax,0x4
c0018feb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fef:	eb d7                	jmp    c0018fc8 <milliTenthSleep(unsigned int)>
c0018ff1:	90                   	nop
c0018ff2:	66 90                	xchg   ax,ax

c0018ff4 <Semaphore::acquire()>:
c0018ff4:	83 ec 0c             	sub    esp,0xc
c0018ff7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ffb:	fa                   	cli    
c0018ffc:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c0019001:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0019007:	8d 48 01             	lea    ecx,[eax+0x1]
c001900a:	89 0d 44 9e 02 c0    	mov    DWORD PTR ds:0xc0029e44,ecx
c0019010:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019013:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0019015:	7d 2d                	jge    c0019044 <Semaphore::acquire()+0x50>
c0019017:	41                   	inc    ecx
c0019018:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001901b:	90                   	nop
c001901c:	a3 44 9e 02 c0       	mov    ds:0xc0029e44,eax
c0019021:	85 c0                	test   eax,eax
c0019023:	75 0b                	jne    c0019030 <Semaphore::acquire()+0x3c>
c0019025:	a1 40 9e 02 c0       	mov    eax,ds:0xc0029e40
c001902a:	85 c0                	test   eax,eax
c001902c:	75 62                	jne    c0019090 <Semaphore::acquire()+0x9c>
c001902e:	66 90                	xchg   ax,ax
c0019030:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019035:	48                   	dec    eax
c0019036:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c001903b:	75 03                	jne    c0019040 <Semaphore::acquire()+0x4c>
c001903d:	fb                   	sti    
c001903e:	66 90                	xchg   ax,ax
c0019040:	83 c4 0c             	add    esp,0xc
c0019043:	c3                   	ret    
c0019044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019049:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0019050:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0019053:	85 c9                	test   ecx,ecx
c0019055:	74 4d                	je     c00190a4 <Semaphore::acquire()+0xb0>
c0019057:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001905a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019060:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0019063:	90                   	nop
c0019064:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019069:	83 ec 0c             	sub    esp,0xc
c001906c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001906f:	68 d8 6a 02 c0       	push   0xc0026ad8
c0019074:	e8 ce 3f ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0019079:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0019080:	e8 43 fe ff ff       	call   c0018ec8 <blockTask(TaskState)>
c0019085:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c001908a:	83 c4 10             	add    esp,0x10
c001908d:	48                   	dec    eax
c001908e:	eb 8c                	jmp    c001901c <Semaphore::acquire()+0x28>
c0019090:	c7 05 40 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x0
c001909a:	e8 31 fc ff ff       	call   c0018cd0 <schedule()>
c001909f:	eb 8f                	jmp    c0019030 <Semaphore::acquire()+0x3c>
c00190a1:	8d 76 00             	lea    esi,[esi+0x0]
c00190a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00190a9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00190ac:	eb b6                	jmp    c0019064 <Semaphore::acquire()+0x70>
c00190ae:	66 90                	xchg   ax,ax

c00190b0 <taskReturned>:
c00190b0:	83 ec 18             	sub    esp,0x18
c00190b3:	68 f8 6a 02 c0       	push   0xc0026af8
c00190b8:	e8 08 c0 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00190bd:	83 c4 10             	add    esp,0x10
c00190c0:	83 ec 0c             	sub    esp,0xc
c00190c3:	6a 02                	push   0x2
c00190c5:	e8 fe fd ff ff       	call   c0018ec8 <blockTask(TaskState)>
c00190ca:	fa                   	cli    
c00190cb:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c00190d1:	e8 fa fb ff ff       	call   c0018cd0 <schedule()>
c00190d6:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c00190db:	83 c4 10             	add    esp,0x10
c00190de:	48                   	dec    eax
c00190df:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c00190e4:	85 c0                	test   eax,eax
c00190e6:	75 d8                	jne    c00190c0 <taskReturned+0x10>
c00190e8:	fb                   	sti    
c00190e9:	eb d5                	jmp    c00190c0 <taskReturned+0x10>
c00190eb:	90                   	nop

c00190ec <Thr::processFromPID(int)>:
c00190ec:	57                   	push   edi
c00190ed:	56                   	push   esi
c00190ee:	53                   	push   ebx
c00190ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00190f3:	fa                   	cli    
c00190f4:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c00190fa:	83 ec 0c             	sub    esp,0xc
c00190fd:	68 64 9e 02 c0       	push   0xc0029e64
c0019102:	e8 35 a2 00 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019107:	83 c4 10             	add    esp,0x10
c001910a:	89 c7                	mov    edi,eax
c001910c:	eb 16                	jmp    c0019124 <Thr::processFromPID(int)+0x38>
c001910e:	66 90                	xchg   ax,ax
c0019110:	83 ec 0c             	sub    esp,0xc
c0019113:	68 64 9e 02 c0       	push   0xc0029e64
c0019118:	e8 1f a2 00 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001911d:	83 c4 10             	add    esp,0x10
c0019120:	39 f8                	cmp    eax,edi
c0019122:	74 4c                	je     c0019170 <Thr::processFromPID(int)+0x84>
c0019124:	83 ec 0c             	sub    esp,0xc
c0019127:	68 64 9e 02 c0       	push   0xc0029e64
c001912c:	e8 0b a2 00 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019131:	c7 04 24 64 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e64
c0019138:	89 c3                	mov    ebx,eax
c001913a:	e8 05 a2 00 00       	call   c0023344 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001913f:	58                   	pop    eax
c0019140:	5a                   	pop    edx
c0019141:	53                   	push   ebx
c0019142:	68 64 9e 02 c0       	push   0xc0029e64
c0019147:	e8 b0 a2 00 00       	call   c00233fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001914c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001914f:	83 c4 10             	add    esp,0x10
c0019152:	39 30                	cmp    DWORD PTR [eax],esi
c0019154:	75 ba                	jne    c0019110 <Thr::processFromPID(int)+0x24>
c0019156:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c001915b:	48                   	dec    eax
c001915c:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0019161:	74 09                	je     c001916c <Thr::processFromPID(int)+0x80>
c0019163:	90                   	nop
c0019164:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019167:	5b                   	pop    ebx
c0019168:	5e                   	pop    esi
c0019169:	5f                   	pop    edi
c001916a:	c3                   	ret    
c001916b:	90                   	nop
c001916c:	fb                   	sti    
c001916d:	eb f5                	jmp    c0019164 <Thr::processFromPID(int)+0x78>
c001916f:	90                   	nop
c0019170:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019175:	48                   	dec    eax
c0019176:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c001917b:	75 07                	jne    c0019184 <Thr::processFromPID(int)+0x98>
c001917d:	fb                   	sti    
c001917e:	5b                   	pop    ebx
c001917f:	5e                   	pop    esi
c0019180:	5f                   	pop    edi
c0019181:	c3                   	ret    
c0019182:	66 90                	xchg   ax,ax
c0019184:	5b                   	pop    ebx
c0019185:	31 c0                	xor    eax,eax
c0019187:	5e                   	pop    esi
c0019188:	5f                   	pop    edi
c0019189:	c3                   	ret    
c001918a:	66 90                	xchg   ax,ax

c001918c <unblockTask(ThreadControlBlock*)>:
c001918c:	53                   	push   ebx
c001918d:	83 ec 08             	sub    esp,0x8
c0019190:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019194:	fa                   	cli    
c0019195:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c001919b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001919e:	85 c0                	test   eax,eax
c00191a0:	74 66                	je     c0019208 <unblockTask(ThreadControlBlock*)+0x7c>
c00191a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00191a5:	48                   	dec    eax
c00191a6:	74 38                	je     c00191e0 <unblockTask(ThreadControlBlock*)+0x54>
c00191a8:	83 ec 0c             	sub    esp,0xc
c00191ab:	68 64 9e 02 c0       	push   0xc0029e64
c00191b0:	e8 87 a1 00 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00191b5:	83 c4 10             	add    esp,0x10
c00191b8:	85 c0                	test   eax,eax
c00191ba:	75 1c                	jne    c00191d8 <unblockTask(ThreadControlBlock*)+0x4c>
c00191bc:	eb 5e                	jmp    c001921c <unblockTask(ThreadControlBlock*)+0x90>
c00191be:	66 90                	xchg   ax,ax
c00191c0:	83 ec 08             	sub    esp,0x8
c00191c3:	50                   	push   eax
c00191c4:	68 64 9e 02 c0       	push   0xc0029e64
c00191c9:	e8 1e a5 00 00       	call   c00236ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00191ce:	83 c4 10             	add    esp,0x10
c00191d1:	85 c0                	test   eax,eax
c00191d3:	74 47                	je     c001921c <unblockTask(ThreadControlBlock*)+0x90>
c00191d5:	8d 76 00             	lea    esi,[esi+0x0]
c00191d8:	39 c3                	cmp    ebx,eax
c00191da:	75 e4                	jne    c00191c0 <unblockTask(ThreadControlBlock*)+0x34>
c00191dc:	eb 12                	jmp    c00191f0 <unblockTask(ThreadControlBlock*)+0x64>
c00191de:	66 90                	xchg   ax,ax
c00191e0:	83 ec 0c             	sub    esp,0xc
c00191e3:	68 7a 6a 02 c0       	push   0xc0026a7a
c00191e8:	e8 5a 3e ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00191ed:	83 c4 10             	add    esp,0x10
c00191f0:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c00191f5:	48                   	dec    eax
c00191f6:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c00191fb:	75 03                	jne    c0019200 <unblockTask(ThreadControlBlock*)+0x74>
c00191fd:	fb                   	sti    
c00191fe:	66 90                	xchg   ax,ax
c0019200:	83 c4 08             	add    esp,0x8
c0019203:	5b                   	pop    ebx
c0019204:	c3                   	ret    
c0019205:	8d 76 00             	lea    esi,[esi+0x0]
c0019208:	83 ec 0c             	sub    esp,0xc
c001920b:	68 63 6a 02 c0       	push   0xc0026a63
c0019210:	e8 32 3e ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0019215:	83 c4 10             	add    esp,0x10
c0019218:	eb d6                	jmp    c00191f0 <unblockTask(ThreadControlBlock*)+0x64>
c001921a:	66 90                	xchg   ax,ax
c001921c:	83 ec 08             	sub    esp,0x8
c001921f:	53                   	push   ebx
c0019220:	68 64 9e 02 c0       	push   0xc0029e64
c0019225:	e8 d2 a1 00 00       	call   c00233fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001922a:	83 c4 10             	add    esp,0x10
c001922d:	eb c1                	jmp    c00191f0 <unblockTask(ThreadControlBlock*)+0x64>
c001922f:	90                   	nop

c0019230 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019230:	55                   	push   ebp
c0019231:	57                   	push   edi
c0019232:	56                   	push   esi
c0019233:	53                   	push   ebx
c0019234:	83 ec 1c             	sub    esp,0x1c
c0019237:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001923b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001923e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0019244:	85 ff                	test   edi,edi
c0019246:	7e 24                	jle    c001926c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0019248:	31 f6                	xor    esi,esi
c001924a:	66 90                	xchg   ax,ax
c001924c:	83 ec 0c             	sub    esp,0xc
c001924f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0019256:	46                   	inc    esi
c0019257:	e8 0f 0b ff ff       	call   c0009d6b <free>
c001925c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001925f:	83 c4 10             	add    esp,0x10
c0019262:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0019268:	7f e2                	jg     c001924c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001926a:	66 90                	xchg   ax,ax
c001926c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0019276:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001927b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001927e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0019281:	d3 c0                	rol    eax,cl
c0019283:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001928a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001928d:	89 f7                	mov    edi,esi
c001928f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0019297:	0f 85 73 01 00 00    	jne    c0019410 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001929d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00192a3:	85 ed                	test   ebp,ebp
c00192a5:	74 1d                	je     c00192c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00192a7:	83 ec 0c             	sub    esp,0xc
c00192aa:	55                   	push   ebp
c00192ab:	e8 ba bb ff ff       	call   c0014e6a <EnvVarContainer::~EnvVarContainer()>
c00192b0:	59                   	pop    ecx
c00192b1:	5e                   	pop    esi
c00192b2:	6a 0c                	push   0xc
c00192b4:	55                   	push   ebp
c00192b5:	e8 ac 3c ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00192ba:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00192bd:	83 c4 10             	add    esp,0x10
c00192c0:	89 f7                	mov    edi,esi
c00192c2:	66 90                	xchg   ax,ax
c00192c4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00192ca:	85 c0                	test   eax,eax
c00192cc:	0f 84 b2 00 00 00    	je     c0019384 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00192d2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00192d5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00192d9:	31 c9                	xor    ecx,ecx
c00192db:	eb 17                	jmp    c00192f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00192dd:	8d 76 00             	lea    esi,[esi+0x0]
c00192e0:	41                   	inc    ecx
c00192e1:	83 f9 10             	cmp    ecx,0x10
c00192e4:	0f 84 9a 00 00 00    	je     c0019384 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00192ea:	66 90                	xchg   ax,ax
c00192ec:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00192f2:	66 90                	xchg   ax,ax
c00192f4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00192fb:	d3 fa                	sar    edx,cl
c00192fd:	83 e2 01             	and    edx,0x1
c0019300:	74 de                	je     c00192e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019302:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0019305:	01 d2                	add    edx,edx
c0019307:	01 ca                	add    edx,ecx
c0019309:	8d 14 92             	lea    edx,[edx+edx*4]
c001930c:	01 d0                	add    eax,edx
c001930e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0019314:	83 fd 07             	cmp    ebp,0x7
c0019317:	75 c7                	jne    c00192e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019319:	05 40 02 00 00       	add    eax,0x240
c001931e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0019321:	83 fd ff             	cmp    ebp,0xffffffff
c0019324:	0f 8c ee 00 00 00    	jl     c0019418 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001932a:	0f 84 ac 01 00 00    	je     c00194dc <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0019330:	85 ed                	test   ebp,ebp
c0019332:	0f 84 90 01 00 00    	je     c00194c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0019338:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001933a:	75 a4                	jne    c00192e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001933c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0019342:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019346:	01 d0                	add    eax,edx
c0019348:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001934c:	83 ec 0c             	sub    esp,0xc
c001934f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0019355:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019358:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001935e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019365:	50                   	push   eax
c0019366:	e8 21 fe ff ff       	call   c001918c <unblockTask(ThreadControlBlock*)>
c001936b:	83 c4 10             	add    esp,0x10
c001936e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019371:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019375:	89 f7                	mov    edi,esi
c0019377:	41                   	inc    ecx
c0019378:	83 f9 10             	cmp    ecx,0x10
c001937b:	0f 85 6b ff ff ff    	jne    c00192ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0019381:	8d 76 00             	lea    esi,[esi+0x0]
c0019384:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001938a:	85 c0                	test   eax,eax
c001938c:	74 62                	je     c00193f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001938e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0019394:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001939a:	74 54                	je     c00193f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001939c:	83 ec 0c             	sub    esp,0xc
c001939f:	68 64 9e 02 c0       	push   0xc0029e64
c00193a4:	e8 93 9f 00 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193a9:	c7 04 24 64 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e64
c00193b0:	89 c7                	mov    edi,eax
c00193b2:	e8 69 9f 00 00       	call   c0023320 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00193b7:	83 c4 10             	add    esp,0x10
c00193ba:	84 c0                	test   al,al
c00193bc:	0f 84 ce 00 00 00    	je     c0019490 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00193c2:	66 90                	xchg   ax,ax
c00193c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193c7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00193cd:	85 d2                	test   edx,edx
c00193cf:	74 0f                	je     c00193e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c00193d1:	83 ec 0c             	sub    esp,0xc
c00193d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00193d6:	52                   	push   edx
c00193d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00193da:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193dd:	83 c4 10             	add    esp,0x10
c00193e0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00193ea:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00193ed:	8d 76 00             	lea    esi,[esi+0x0]
c00193f0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00193f6:	85 db                	test   ebx,ebx
c00193f8:	74 16                	je     c0019410 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00193fa:	83 ec 0c             	sub    esp,0xc
c00193fd:	53                   	push   ebx
c00193fe:	e8 49 2e ff ff       	call   c000c24c <VAS::~VAS()>
c0019403:	58                   	pop    eax
c0019404:	5a                   	pop    edx
c0019405:	6a 14                	push   0x14
c0019407:	53                   	push   ebx
c0019408:	e8 59 3b ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001940d:	83 c4 10             	add    esp,0x10
c0019410:	83 c4 1c             	add    esp,0x1c
c0019413:	5b                   	pop    ebx
c0019414:	5e                   	pop    esi
c0019415:	5f                   	pop    edi
c0019416:	5d                   	pop    ebp
c0019417:	c3                   	ret    
c0019418:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001941c:	83 ec 0c             	sub    esp,0xc
c001941f:	68 2c 6b 02 c0       	push   0xc0026b2c
c0019424:	e8 9c bc ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0019429:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001942c:	83 c4 10             	add    esp,0x10
c001942f:	89 f7                	mov    edi,esi
c0019431:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019435:	e9 a6 fe ff ff       	jmp    c00192e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001943a:	66 90                	xchg   ax,ax
c001943c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019442:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0019448:	75 1e                	jne    c0019468 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001944a:	83 ec 0c             	sub    esp,0xc
c001944d:	68 94 6b 02 c0       	push   0xc0026b94
c0019452:	e8 f0 3b ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0019457:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001945e:	e8 65 fa ff ff       	call   c0018ec8 <blockTask(TaskState)>
c0019463:	83 c4 10             	add    esp,0x10
c0019466:	66 90                	xchg   ax,ax
c0019468:	83 ec 08             	sub    esp,0x8
c001946b:	56                   	push   esi
c001946c:	68 64 9e 02 c0       	push   0xc0029e64
c0019471:	e8 86 9f 00 00       	call   c00233fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019476:	c7 04 24 64 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e64
c001947d:	e8 ba 9e 00 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019482:	83 c4 10             	add    esp,0x10
c0019485:	39 f8                	cmp    eax,edi
c0019487:	0f 84 37 ff ff ff    	je     c00193c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c001948d:	8d 76 00             	lea    esi,[esi+0x0]
c0019490:	83 ec 0c             	sub    esp,0xc
c0019493:	68 64 9e 02 c0       	push   0xc0029e64
c0019498:	e8 9f 9e 00 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001949d:	c7 04 24 64 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e64
c00194a4:	89 c6                	mov    esi,eax
c00194a6:	e8 99 9e 00 00       	call   c0023344 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00194ab:	83 c4 10             	add    esp,0x10
c00194ae:	39 f3                	cmp    ebx,esi
c00194b0:	74 b6                	je     c0019468 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00194b2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00194b5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00194b8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00194be:	75 a8                	jne    c0019468 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00194c0:	e9 77 ff ff ff       	jmp    c001943c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00194c5:	8d 76 00             	lea    esi,[esi+0x0]
c00194c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00194cc:	83 ec 0c             	sub    esp,0xc
c00194cf:	68 60 6b 02 c0       	push   0xc0026b60
c00194d4:	e9 4b ff ff ff       	jmp    c0019424 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00194d9:	8d 76 00             	lea    esi,[esi+0x0]
c00194dc:	8b 36                	mov    esi,DWORD PTR [esi]
c00194de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00194e2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00194e5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00194e8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00194ee:	01 d7                	add    edi,edx
c00194f0:	89 f8                	mov    eax,edi
c00194f2:	e9 51 fe ff ff       	jmp    c0019348 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c00194f7:	90                   	nop

c00194f8 <cleanerTaskFunction(void*)>:
c00194f8:	53                   	push   ebx
c00194f9:	83 ec 08             	sub    esp,0x8
c00194fc:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019501:	48                   	dec    eax
c0019502:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0019507:	75 03                	jne    c001950c <cleanerTaskFunction(void*)+0x14>
c0019509:	fb                   	sti    
c001950a:	66 90                	xchg   ax,ax
c001950c:	fa                   	cli    
c001950d:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019512:	80 3d 2c 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029e2c,0x0
c0019519:	8d 50 01             	lea    edx,[eax+0x1]
c001951c:	89 15 48 9e 02 c0    	mov    DWORD PTR ds:0xc0029e48,edx
c0019522:	0f 84 ac 00 00 00    	je     c00195d4 <cleanerTaskFunction(void*)+0xdc>
c0019528:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c001952d:	85 c0                	test   eax,eax
c001952f:	75 03                	jne    c0019534 <cleanerTaskFunction(void*)+0x3c>
c0019531:	fb                   	sti    
c0019532:	66 90                	xchg   ax,ax
c0019534:	c6 05 2c 9e 02 c0 00 	mov    BYTE PTR ds:0xc0029e2c,0x0
c001953b:	fa                   	cli    
c001953c:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0019542:	ff 05 44 9e 02 c0    	inc    DWORD PTR ds:0xc0029e44
c0019548:	fa                   	cli    
c0019549:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c001954f:	eb 2b                	jmp    c001957c <cleanerTaskFunction(void*)+0x84>
c0019551:	8d 76 00             	lea    esi,[esi+0x0]
c0019554:	83 ec 0c             	sub    esp,0xc
c0019557:	68 4c 9e 02 c0       	push   0xc0029e4c
c001955c:	e8 db 9d 00 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019561:	c7 04 24 4c 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e4c
c0019568:	89 c3                	mov    ebx,eax
c001956a:	e8 d5 9d 00 00       	call   c0023344 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001956f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019572:	e8 b9 fc ff ff       	call   c0019230 <cleanupTerminatedTask(ThreadControlBlock*)>
c0019577:	83 c4 10             	add    esp,0x10
c001957a:	66 90                	xchg   ax,ax
c001957c:	83 ec 0c             	sub    esp,0xc
c001957f:	68 4c 9e 02 c0       	push   0xc0029e4c
c0019584:	e8 97 9d 00 00       	call   c0023320 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019589:	83 c4 10             	add    esp,0x10
c001958c:	84 c0                	test   al,al
c001958e:	74 c4                	je     c0019554 <cleanerTaskFunction(void*)+0x5c>
c0019590:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019595:	48                   	dec    eax
c0019596:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c001959b:	75 03                	jne    c00195a0 <cleanerTaskFunction(void*)+0xa8>
c001959d:	fb                   	sti    
c001959e:	66 90                	xchg   ax,ax
c00195a0:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c00195a5:	48                   	dec    eax
c00195a6:	a3 44 9e 02 c0       	mov    ds:0xc0029e44,eax
c00195ab:	0f 85 4b ff ff ff    	jne    c00194fc <cleanerTaskFunction(void*)+0x4>
c00195b1:	a1 40 9e 02 c0       	mov    eax,ds:0xc0029e40
c00195b6:	85 c0                	test   eax,eax
c00195b8:	0f 84 3e ff ff ff    	je     c00194fc <cleanerTaskFunction(void*)+0x4>
c00195be:	c7 05 40 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x0
c00195c8:	e8 03 f7 ff ff       	call   c0018cd0 <schedule()>
c00195cd:	e9 2a ff ff ff       	jmp    c00194fc <cleanerTaskFunction(void*)+0x4>
c00195d2:	66 90                	xchg   ax,ax
c00195d4:	83 ec 0c             	sub    esp,0xc
c00195d7:	6a 02                	push   0x2
c00195d9:	e8 c2 f8 ff ff       	call   c0018ea0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00195de:	83 c4 10             	add    esp,0x10
c00195e1:	e9 4e ff ff ff       	jmp    c0019534 <cleanerTaskFunction(void*)+0x3c>
c00195e6:	66 90                	xchg   ax,ax

c00195e8 <terminateTask(int)>:
c00195e8:	83 ec 14             	sub    esp,0x14
c00195eb:	fa                   	cli    
c00195ec:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c00195f2:	ff 05 44 9e 02 c0    	inc    DWORD PTR ds:0xc0029e44
c00195f8:	fa                   	cli    
c00195f9:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c00195ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019603:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019608:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001960b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019610:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019613:	50                   	push   eax
c0019614:	68 4c 9e 02 c0       	push   0xc0029e4c
c0019619:	e8 de 9d 00 00       	call   c00233fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001961e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019623:	83 c4 10             	add    esp,0x10
c0019626:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001962d:	a1 28 9e 02 c0       	mov    eax,ds:0xc0029e28
c0019632:	85 c0                	test   eax,eax
c0019634:	74 5e                	je     c0019694 <terminateTask(int)+0xac>
c0019636:	83 ec 0c             	sub    esp,0xc
c0019639:	c6 05 2c 9e 02 c0 01 	mov    BYTE PTR ds:0xc0029e2c,0x1
c0019640:	50                   	push   eax
c0019641:	e8 46 fb ff ff       	call   c001918c <unblockTask(ThreadControlBlock*)>
c0019646:	83 c4 10             	add    esp,0x10
c0019649:	8d 76 00             	lea    esi,[esi+0x0]
c001964c:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019651:	48                   	dec    eax
c0019652:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0019657:	75 03                	jne    c001965c <terminateTask(int)+0x74>
c0019659:	fb                   	sti    
c001965a:	66 90                	xchg   ax,ax
c001965c:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c0019661:	48                   	dec    eax
c0019662:	a3 44 9e 02 c0       	mov    ds:0xc0029e44,eax
c0019667:	75 0b                	jne    c0019674 <terminateTask(int)+0x8c>
c0019669:	83 3d 40 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029e40,0x0
c0019670:	75 36                	jne    c00196a8 <terminateTask(int)+0xc0>
c0019672:	66 90                	xchg   ax,ax
c0019674:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019679:	48                   	dec    eax
c001967a:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c001967f:	75 03                	jne    c0019684 <terminateTask(int)+0x9c>
c0019681:	fb                   	sti    
c0019682:	66 90                	xchg   ax,ax
c0019684:	fa                   	cli    
c0019685:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c001968b:	90                   	nop
c001968c:	e8 3f f6 ff ff       	call   c0018cd0 <schedule()>
c0019691:	eb e1                	jmp    c0019674 <terminateTask(int)+0x8c>
c0019693:	90                   	nop
c0019694:	83 ec 0c             	sub    esp,0xc
c0019697:	68 91 6a 02 c0       	push   0xc0026a91
c001969c:	e8 a6 39 ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00196a1:	83 c4 10             	add    esp,0x10
c00196a4:	eb a6                	jmp    c001964c <terminateTask(int)+0x64>
c00196a6:	66 90                	xchg   ax,ax
c00196a8:	c7 05 40 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x0
c00196b2:	eb d8                	jmp    c001968c <terminateTask(int)+0xa4>

c00196b4 <Thr::terminateFromIRQ(int)>:
c00196b4:	83 ec 18             	sub    esp,0x18
c00196b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196bb:	e8 28 ff ff ff       	call   c00195e8 <terminateTask(int)>

c00196c0 <Semaphore::release()>:
c00196c0:	83 ec 0c             	sub    esp,0xc
c00196c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196c7:	fa                   	cli    
c00196c8:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c00196cd:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c00196d3:	8d 48 01             	lea    ecx,[eax+0x1]
c00196d6:	89 0d 44 9e 02 c0    	mov    DWORD PTR ds:0xc0029e44,ecx
c00196dc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00196df:	85 c9                	test   ecx,ecx
c00196e1:	74 41                	je     c0019724 <Semaphore::release()+0x64>
c00196e3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00196e6:	83 ec 0c             	sub    esp,0xc
c00196e9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00196ec:	51                   	push   ecx
c00196ed:	e8 9a fa ff ff       	call   c001918c <unblockTask(ThreadControlBlock*)>
c00196f2:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c00196f7:	83 c4 10             	add    esp,0x10
c00196fa:	48                   	dec    eax
c00196fb:	90                   	nop
c00196fc:	a3 44 9e 02 c0       	mov    ds:0xc0029e44,eax
c0019701:	85 c0                	test   eax,eax
c0019703:	75 0b                	jne    c0019710 <Semaphore::release()+0x50>
c0019705:	a1 40 9e 02 c0       	mov    eax,ds:0xc0029e40
c001970a:	85 c0                	test   eax,eax
c001970c:	75 1e                	jne    c001972c <Semaphore::release()+0x6c>
c001970e:	66 90                	xchg   ax,ax
c0019710:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019715:	48                   	dec    eax
c0019716:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c001971b:	75 03                	jne    c0019720 <Semaphore::release()+0x60>
c001971d:	fb                   	sti    
c001971e:	66 90                	xchg   ax,ax
c0019720:	83 c4 0c             	add    esp,0xc
c0019723:	c3                   	ret    
c0019724:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0019727:	eb d3                	jmp    c00196fc <Semaphore::release()+0x3c>
c0019729:	8d 76 00             	lea    esi,[esi+0x0]
c001972c:	c7 05 40 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029e40,0x0
c0019736:	e8 95 f5 ff ff       	call   c0018cd0 <schedule()>
c001973b:	eb d3                	jmp    c0019710 <Semaphore::release()+0x50>
c001973d:	8d 76 00             	lea    esi,[esi+0x0]

c0019740 <__static_initialization_and_destruction_0(int, int)>:
c0019740:	83 ec 0c             	sub    esp,0xc
c0019743:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019748:	0f 85 8e 00 00 00    	jne    c00197dc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001974e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019756:	0f 85 80 00 00 00    	jne    c00197dc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001975c:	83 ec 0c             	sub    esp,0xc
c001975f:	68 64 9e 02 c0       	push   0xc0029e64
c0019764:	e8 3f 9f 00 00       	call   c00236a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019769:	83 c4 10             	add    esp,0x10
c001976c:	83 ec 04             	sub    esp,0x4
c001976f:	68 88 7b 02 c0       	push   0xc0027b88
c0019774:	68 64 9e 02 c0       	push   0xc0029e64
c0019779:	68 58 36 02 c0       	push   0xc0023658
c001977e:	e8 5d 37 ff ff       	call   c000cee0 <__cxa_atexit>
c0019783:	83 c4 10             	add    esp,0x10
c0019786:	83 ec 0c             	sub    esp,0xc
c0019789:	68 58 9e 02 c0       	push   0xc0029e58
c001978e:	e8 15 9f 00 00       	call   c00236a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019793:	83 c4 10             	add    esp,0x10
c0019796:	83 ec 04             	sub    esp,0x4
c0019799:	68 88 7b 02 c0       	push   0xc0027b88
c001979e:	68 58 9e 02 c0       	push   0xc0029e58
c00197a3:	68 58 36 02 c0       	push   0xc0023658
c00197a8:	e8 33 37 ff ff       	call   c000cee0 <__cxa_atexit>
c00197ad:	83 c4 10             	add    esp,0x10
c00197b0:	83 ec 0c             	sub    esp,0xc
c00197b3:	68 4c 9e 02 c0       	push   0xc0029e4c
c00197b8:	e8 eb 9e 00 00       	call   c00236a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00197bd:	83 c4 10             	add    esp,0x10
c00197c0:	83 ec 04             	sub    esp,0x4
c00197c3:	68 88 7b 02 c0       	push   0xc0027b88
c00197c8:	68 4c 9e 02 c0       	push   0xc0029e4c
c00197cd:	68 58 36 02 c0       	push   0xc0023658
c00197d2:	e8 09 37 ff ff       	call   c000cee0 <__cxa_atexit>
c00197d7:	83 c4 10             	add    esp,0x10
c00197da:	66 90                	xchg   ax,ax
c00197dc:	90                   	nop
c00197dd:	83 c4 0c             	add    esp,0xc
c00197e0:	c3                   	ret    
c00197e1:	8d 76 00             	lea    esi,[esi+0x0]

c00197e4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00197e4:	83 ec 0c             	sub    esp,0xc
c00197e7:	83 ec 08             	sub    esp,0x8
c00197ea:	68 ff ff 00 00       	push   0xffff
c00197ef:	6a 01                	push   0x1
c00197f1:	e8 4a ff ff ff       	call   c0019740 <__static_initialization_and_destruction_0(int, int)>
c00197f6:	83 c4 10             	add    esp,0x10
c00197f9:	83 c4 0c             	add    esp,0xc
c00197fc:	c3                   	ret    

c00197fd <Vm::inbv(unsigned short)>:
c00197fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019801:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019806:	75 06                	jne    c001980e <Vm::inbv(unsigned short)+0x11>
c0019808:	a0 ac 9e 02 c0       	mov    al,ds:0xc0029eac
c001980d:	c3                   	ret    
c001980e:	ec                   	in     al,dx
c001980f:	c3                   	ret    

c0019810 <Vm::outbv(unsigned short, unsigned char)>:
c0019810:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019814:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019818:	66 81 fa fe fe       	cmp    dx,0xfefe
c001981d:	75 25                	jne    c0019844 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001981f:	8b 0d ac 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029eac
c0019825:	8d 51 01             	lea    edx,[ecx+0x1]
c0019828:	88 81 c0 9e 02 c0    	mov    BYTE PTR [ecx-0x3ffd6140],al
c001982e:	89 15 ac 9e 02 c0    	mov    DWORD PTR ds:0xc0029eac,edx
c0019834:	83 fa 20             	cmp    edx,0x20
c0019837:	75 0c                	jne    c0019845 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019839:	c7 05 ac 9e 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0029eac,0x1f
c0019843:	c3                   	ret    
c0019844:	ee                   	out    dx,al
c0019845:	c3                   	ret    

c0019846 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019846:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001984b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019850:	c1 e0 04             	shl    eax,0x4
c0019853:	01 d0                	add    eax,edx
c0019855:	c3                   	ret    

c0019856 <Vm::getSegment(unsigned int)>:
c0019856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001985a:	c1 e8 10             	shr    eax,0x10
c001985d:	c3                   	ret    

c001985e <Vm::getOffset(unsigned int)>:
c001985e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019862:	c3                   	ret    

c0019863 <Vm::mainloop2()>:
c0019863:	83 ec 18             	sub    esp,0x18
c0019866:	fa                   	cli    
c0019867:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c001986d:	6a 02                	push   0x2
c001986f:	c6 05 a5 9e 02 c0 01 	mov    BYTE PTR ds:0xc0029ea5,0x1
c0019876:	e8 25 f6 ff ff       	call   c0018ea0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001987b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019880:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019884:	52                   	push   edx
c0019885:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0019889:	52                   	push   edx
c001988a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001988e:	52                   	push   edx
c001988f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0019893:	50                   	push   eax
c0019894:	e8 96 69 fe ff       	call   c000022f <goToVM86>
c0019899:	83 c4 2c             	add    esp,0x2c
c001989c:	c3                   	ret    

c001989d <Vm::mainVm8086Loop(void*)>:
c001989d:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c00198a2:	48                   	dec    eax
c00198a3:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c00198a8:	75 01                	jne    c00198ab <Vm::mainVm8086Loop(void*)+0xe>
c00198aa:	fb                   	sti    
c00198ab:	eb b6                	jmp    c0019863 <Vm::mainloop2()>

c00198ad <Vm::mainloop3(unsigned long)>:
c00198ad:	83 ec 18             	sub    esp,0x18
c00198b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00198b4:	fa                   	cli    
c00198b5:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c00198bb:	6a 02                	push   0x2
c00198bd:	c6 05 a4 9e 02 c0 01 	mov    BYTE PTR ds:0xc0029ea4,0x1
c00198c4:	a3 a0 9e 02 c0       	mov    ds:0xc0029ea0,eax
c00198c9:	e8 d2 f5 ff ff       	call   c0018ea0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00198ce:	83 c4 1c             	add    esp,0x1c
c00198d1:	eb 90                	jmp    c0019863 <Vm::mainloop2()>

c00198d3 <Vm::initialise8086()>:
c00198d3:	83 ec 0c             	sub    esp,0xc
c00198d6:	68 80 00 00 00       	push   0x80
c00198db:	6a 00                	push   0x0
c00198dd:	68 9d 98 01 c0       	push   0xc001989d
c00198e2:	ff 35 70 9e 02 c0    	push   DWORD PTR ds:0xc0029e70
c00198e8:	e8 c7 f1 ff ff       	call   c0018ab4 <Process::createThread(void (*)(void*), void*, int)>
c00198ed:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00198f4:	a3 a8 9e 02 c0       	mov    ds:0xc0029ea8,eax
c00198f9:	68 00 01 00 00       	push   0x100
c00198fe:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c0019903:	6a 00                	push   0x0
c0019905:	6a 00                	push   0x0
c0019907:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001990d:	e8 ac 2d ff ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019912:	83 c4 2c             	add    esp,0x2c
c0019915:	c3                   	ret    

c0019916 <Vm::finish8086()>:
c0019916:	53                   	push   ebx
c0019917:	83 ec 08             	sub    esp,0x8
c001991a:	fa                   	cli    
c001991b:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0019921:	80 3d a4 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029ea4,0x0
c0019928:	75 15                	jne    c001993f <Vm::finish8086()+0x29>
c001992a:	e8 a1 f3 ff ff       	call   c0018cd0 <schedule()>
c001992f:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019934:	48                   	dec    eax
c0019935:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c001993a:	75 de                	jne    c001991a <Vm::finish8086()+0x4>
c001993c:	fb                   	sti    
c001993d:	eb db                	jmp    c001991a <Vm::finish8086()+0x4>
c001993f:	83 ec 0c             	sub    esp,0xc
c0019942:	8b 1d a0 9e 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ea0
c0019948:	ff 35 a8 9e 02 c0    	push   DWORD PTR ds:0xc0029ea8
c001994e:	c6 05 a4 9e 02 c0 00 	mov    BYTE PTR ds:0xc0029ea4,0x0
c0019955:	e8 32 f8 ff ff       	call   c001918c <unblockTask(ThreadControlBlock*)>
c001995a:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c001995f:	83 c4 10             	add    esp,0x10
c0019962:	8d 50 ff             	lea    edx,[eax-0x1]
c0019965:	89 15 48 9e 02 c0    	mov    DWORD PTR ds:0xc0029e48,edx
c001996b:	85 d2                	test   edx,edx
c001996d:	75 01                	jne    c0019970 <Vm::finish8086()+0x5a>
c001996f:	fb                   	sti    
c0019970:	89 d8                	mov    eax,ebx
c0019972:	83 c4 08             	add    esp,0x8
c0019975:	5b                   	pop    ebx
c0019976:	c3                   	ret    

c0019977 <Vm::getOutput8086(unsigned char*)>:
c0019977:	57                   	push   edi
c0019978:	8b 0d ac 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029eac
c001997e:	56                   	push   esi
c001997f:	be c0 9e 02 c0       	mov    esi,0xc0029ec0
c0019984:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019988:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001998a:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c001998f:	5e                   	pop    esi
c0019990:	c7 05 ac 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eac,0x0
c001999a:	5f                   	pop    edi
c001999b:	c3                   	ret    

c001999c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001999c:	55                   	push   ebp
c001999d:	57                   	push   edi
c001999e:	56                   	push   esi
c001999f:	53                   	push   ebx
c00199a0:	83 ec 0c             	sub    esp,0xc
c00199a3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00199a7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00199ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00199af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00199b3:	fa                   	cli    
c00199b4:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c00199ba:	80 3d a5 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029ea5,0x0
c00199c1:	75 15                	jne    c00199d8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00199c3:	e8 08 f3 ff ff       	call   c0018cd0 <schedule()>
c00199c8:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c00199cd:	48                   	dec    eax
c00199ce:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c00199d3:	75 de                	jne    c00199b3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00199d5:	fb                   	sti    
c00199d6:	eb db                	jmp    c00199b3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00199d8:	a1 a8 9e 02 c0       	mov    eax,ds:0xc0029ea8
c00199dd:	c7 05 ac 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eac,0x0
c00199e7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00199eb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00199ef:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00199f3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00199f7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00199fb:	0f b7 ff             	movzx  edi,di
c00199fe:	0f b7 f6             	movzx  esi,si
c0019a01:	50                   	push   eax
c0019a02:	6a 20                	push   0x20
c0019a04:	6a 00                	push   0x0
c0019a06:	68 c0 9e 02 c0       	push   0xc0029ec0
c0019a0b:	e8 74 6c fe ff       	call   c0000684 <memset>
c0019a10:	5a                   	pop    edx
c0019a11:	59                   	pop    ecx
c0019a12:	57                   	push   edi
c0019a13:	56                   	push   esi
c0019a14:	e8 2d fe ff ff       	call   c0019846 <Vm::realToLinear(unsigned short, unsigned short)>
c0019a19:	83 c4 10             	add    esp,0x10
c0019a1c:	89 c7                	mov    edi,eax
c0019a1e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019a22:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019a26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a28:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019a2d:	c6 05 a5 9e 02 c0 00 	mov    BYTE PTR ds:0xc0029ea5,0x0
c0019a34:	48                   	dec    eax
c0019a35:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0019a3a:	75 01                	jne    c0019a3d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0019a3c:	fb                   	sti    
c0019a3d:	83 ec 0c             	sub    esp,0xc
c0019a40:	ff 35 a8 9e 02 c0    	push   DWORD PTR ds:0xc0029ea8
c0019a46:	e8 41 f7 ff ff       	call   c001918c <unblockTask(ThreadControlBlock*)>
c0019a4b:	83 c4 1c             	add    esp,0x1c
c0019a4e:	b0 01                	mov    al,0x1
c0019a50:	5b                   	pop    ebx
c0019a51:	5e                   	pop    esi
c0019a52:	5f                   	pop    edi
c0019a53:	5d                   	pop    ebp
c0019a54:	c3                   	ret    

c0019a55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019a55:	55                   	push   ebp
c0019a56:	57                   	push   edi
c0019a57:	56                   	push   esi
c0019a58:	53                   	push   ebx
c0019a59:	83 ec 2c             	sub    esp,0x2c
c0019a5c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019a60:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019a64:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019a68:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019a6c:	fa                   	cli    
c0019a6d:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0019a73:	0f b6 35 a5 9e 02 c0 	movzx  esi,BYTE PTR ds:0xc0029ea5
c0019a7a:	89 f0                	mov    eax,esi
c0019a7c:	84 c0                	test   al,al
c0019a7e:	75 1d                	jne    c0019a9d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019a80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019a84:	e8 47 f2 ff ff       	call   c0018cd0 <schedule()>
c0019a89:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019a8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a92:	48                   	dec    eax
c0019a93:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0019a98:	75 d2                	jne    c0019a6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019a9a:	fb                   	sti    
c0019a9b:	eb cf                	jmp    c0019a6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019a9d:	a1 a8 9e 02 c0       	mov    eax,ds:0xc0029ea8
c0019aa2:	c7 05 ac 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eac,0x0
c0019aac:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019ab0:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019ab4:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019ab8:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019abc:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019ac0:	50                   	push   eax
c0019ac1:	6a 20                	push   0x20
c0019ac3:	6a 00                	push   0x0
c0019ac5:	68 c0 9e 02 c0       	push   0xc0029ec0
c0019aca:	e8 b5 6b fe ff       	call   c0000684 <memset>
c0019acf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019ad6:	e8 80 02 ff ff       	call   c0009d5b <malloc>
c0019adb:	83 c4 0c             	add    esp,0xc
c0019ade:	89 c3                	mov    ebx,eax
c0019ae0:	ff 35 70 9e 02 c0    	push   DWORD PTR ds:0xc0029e70
c0019ae6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019aea:	50                   	push   eax
c0019aeb:	e8 c2 3a ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c0019af0:	83 c4 10             	add    esp,0x10
c0019af3:	85 db                	test   ebx,ebx
c0019af5:	75 0a                	jne    c0019b01 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019af7:	83 ec 0c             	sub    esp,0xc
c0019afa:	68 bc 6b 02 c0       	push   0xc0026bbc
c0019aff:	eb 3e                	jmp    c0019b3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019b01:	50                   	push   eax
c0019b02:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019b06:	50                   	push   eax
c0019b07:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b0b:	50                   	push   eax
c0019b0c:	53                   	push   ebx
c0019b0d:	e8 26 3e ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c0019b12:	83 c4 10             	add    esp,0x10
c0019b15:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019b1a:	74 0a                	je     c0019b26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019b1c:	83 ec 0c             	sub    esp,0xc
c0019b1f:	68 d0 6b 02 c0       	push   0xc0026bd0
c0019b24:	eb 19                	jmp    c0019b3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019b26:	51                   	push   ecx
c0019b27:	51                   	push   ecx
c0019b28:	6a 01                	push   0x1
c0019b2a:	53                   	push   ebx
c0019b2b:	e8 5c 3b ff ff       	call   c000d68c <File::open(FileOpenMode)>
c0019b30:	83 c4 10             	add    esp,0x10
c0019b33:	85 c0                	test   eax,eax
c0019b35:	74 24                	je     c0019b5b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019b37:	83 ec 0c             	sub    esp,0xc
c0019b3a:	68 e9 6b 02 c0       	push   0xc0026be9
c0019b3f:	e8 81 b5 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0019b44:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019b49:	83 c4 10             	add    esp,0x10
c0019b4c:	48                   	dec    eax
c0019b4d:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0019b52:	85 c0                	test   eax,eax
c0019b54:	75 01                	jne    c0019b57 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019b56:	fb                   	sti    
c0019b57:	31 f6                	xor    esi,esi
c0019b59:	eb 58                	jmp    c0019bb3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019b5b:	0f b7 ed             	movzx  ebp,bp
c0019b5e:	50                   	push   eax
c0019b5f:	0f b7 ff             	movzx  edi,di
c0019b62:	50                   	push   eax
c0019b63:	55                   	push   ebp
c0019b64:	57                   	push   edi
c0019b65:	e8 dc fc ff ff       	call   c0019846 <Vm::realToLinear(unsigned short, unsigned short)>
c0019b6a:	5a                   	pop    edx
c0019b6b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019b6d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019b71:	51                   	push   ecx
c0019b72:	50                   	push   eax
c0019b73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b7b:	53                   	push   ebx
c0019b7c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019b7f:	83 c4 14             	add    esp,0x14
c0019b82:	53                   	push   ebx
c0019b83:	e8 62 3b ff ff       	call   c000d6ea <File::close()>
c0019b88:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0019b8d:	83 c4 10             	add    esp,0x10
c0019b90:	48                   	dec    eax
c0019b91:	c6 05 a5 9e 02 c0 00 	mov    BYTE PTR ds:0xc0029ea5,0x0
c0019b98:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0019b9d:	85 c0                	test   eax,eax
c0019b9f:	75 01                	jne    c0019ba2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019ba1:	fb                   	sti    
c0019ba2:	83 ec 0c             	sub    esp,0xc
c0019ba5:	ff 35 a8 9e 02 c0    	push   DWORD PTR ds:0xc0029ea8
c0019bab:	e8 dc f5 ff ff       	call   c001918c <unblockTask(ThreadControlBlock*)>
c0019bb0:	83 c4 10             	add    esp,0x10
c0019bb3:	83 c4 2c             	add    esp,0x2c
c0019bb6:	89 f0                	mov    eax,esi
c0019bb8:	5b                   	pop    ebx
c0019bb9:	5e                   	pop    esi
c0019bba:	5f                   	pop    edi
c0019bbb:	5d                   	pop    ebp
c0019bbc:	c3                   	ret    

c0019bbd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019bbd:	57                   	push   edi
c0019bbe:	56                   	push   esi
c0019bbf:	53                   	push   ebx
c0019bc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bc8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019bcc:	83 e8 06             	sub    eax,0x6
c0019bcf:	0f b7 c0             	movzx  eax,ax
c0019bd2:	50                   	push   eax
c0019bd3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019bd8:	50                   	push   eax
c0019bd9:	e8 68 fc ff ff       	call   c0019846 <Vm::realToLinear(unsigned short, unsigned short)>
c0019bde:	5a                   	pop    edx
c0019bdf:	5e                   	pop    esi
c0019be0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019be3:	8d 56 fa             	lea    edx,[esi-0x6]
c0019be6:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019bec:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019bef:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019bf2:	83 c2 02             	add    edx,0x2
c0019bf5:	66 89 10             	mov    WORD PTR [eax],dx
c0019bf8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019bfb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019bff:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019c02:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019c06:	89 d6                	mov    esi,edx
c0019c08:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019c0e:	66 81 e6 ff fd       	and    si,0xfdff
c0019c13:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019c17:	74 07                	je     c0019c20 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019c19:	89 d6                	mov    esi,edx
c0019c1b:	66 81 ce 00 02       	or     si,0x200
c0019c20:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019c24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c29:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019c2d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019c35:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019c38:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019c40:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019c43:	5b                   	pop    ebx
c0019c44:	5e                   	pop    esi
c0019c45:	5f                   	pop    edi
c0019c46:	c3                   	ret    

c0019c47 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019c47:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019c4c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019c51:	c1 e0 04             	shl    eax,0x4
c0019c54:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019c57:	c3                   	ret    

c0019c58 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019c58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019c5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019c62:	c1 e0 04             	shl    eax,0x4
c0019c65:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019c69:	c3                   	ret    

c0019c6a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019c6a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019c6f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019c74:	c1 e0 04             	shl    eax,0x4
c0019c77:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019c7a:	c3                   	ret    

c0019c7b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019c7b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019c80:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019c85:	c1 e0 04             	shl    eax,0x4
c0019c88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019c8c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019c8f:	c3                   	ret    

c0019c90 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019c90:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019c95:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019c9a:	c1 e0 04             	shl    eax,0x4
c0019c9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ca1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019ca5:	c3                   	ret    

c0019ca6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019ca6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019cab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019cb0:	c1 e0 04             	shl    eax,0x4
c0019cb3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019cb7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019cba:	c3                   	ret    

c0019cbb <Vm::faultHandler(regs*)>:
c0019cbb:	55                   	push   ebp
c0019cbc:	57                   	push   edi
c0019cbd:	56                   	push   esi
c0019cbe:	53                   	push   ebx
c0019cbf:	83 ec 1c             	sub    esp,0x1c
c0019cc2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019cc6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019cc9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019ccd:	0f b7 f8             	movzx  edi,ax
c0019cd0:	52                   	push   edx
c0019cd1:	0f b7 c0             	movzx  eax,ax
c0019cd4:	50                   	push   eax
c0019cd5:	e8 6c fb ff ff       	call   c0019846 <Vm::realToLinear(unsigned short, unsigned short)>
c0019cda:	5a                   	pop    edx
c0019cdb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019cde:	59                   	pop    ecx
c0019cdf:	89 c1                	mov    ecx,eax
c0019ce1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019ce4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ce8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ced:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019cf1:	0f b7 c5             	movzx  eax,bp
c0019cf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019cf8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019cfc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019d00:	e8 41 fb ff ff       	call   c0019846 <Vm::realToLinear(unsigned short, unsigned short)>
c0019d05:	5e                   	pop    esi
c0019d06:	be 06 00 00 00       	mov    esi,0x6
c0019d0b:	5a                   	pop    edx
c0019d0c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019d11:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019d16:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019d19:	80 fa 9d             	cmp    dl,0x9d
c0019d1c:	0f 84 2c 02 00 00    	je     c0019f4e <Vm::faultHandler(regs*)+0x293>
c0019d22:	0f 87 91 00 00 00    	ja     c0019db9 <Vm::faultHandler(regs*)+0xfe>
c0019d28:	80 fa 66             	cmp    dl,0x66
c0019d2b:	0f 84 98 01 00 00    	je     c0019ec9 <Vm::faultHandler(regs*)+0x20e>
c0019d31:	77 47                	ja     c0019d7a <Vm::faultHandler(regs*)+0xbf>
c0019d33:	80 fa 36             	cmp    dl,0x36
c0019d36:	0f 84 80 01 00 00    	je     c0019ebc <Vm::faultHandler(regs*)+0x201>
c0019d3c:	77 1a                	ja     c0019d58 <Vm::faultHandler(regs*)+0x9d>
c0019d3e:	80 fa 26             	cmp    dl,0x26
c0019d41:	0f 84 4e 01 00 00    	je     c0019e95 <Vm::faultHandler(regs*)+0x1da>
c0019d47:	80 fa 2e             	cmp    dl,0x2e
c0019d4a:	0f 85 e2 05 00 00    	jne    c001a332 <Vm::faultHandler(regs*)+0x677>
c0019d50:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019d53:	31 f6                	xor    esi,esi
c0019d55:	41                   	inc    ecx
c0019d56:	eb be                	jmp    c0019d16 <Vm::faultHandler(regs*)+0x5b>
c0019d58:	80 fa 64             	cmp    dl,0x64
c0019d5b:	0f 84 41 01 00 00    	je     c0019ea2 <Vm::faultHandler(regs*)+0x1e7>
c0019d61:	0f 87 48 01 00 00    	ja     c0019eaf <Vm::faultHandler(regs*)+0x1f4>
c0019d67:	80 fa 3e             	cmp    dl,0x3e
c0019d6a:	0f 85 c2 05 00 00    	jne    c001a332 <Vm::faultHandler(regs*)+0x677>
c0019d70:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019d73:	be 01 00 00 00       	mov    esi,0x1
c0019d78:	eb db                	jmp    c0019d55 <Vm::faultHandler(regs*)+0x9a>
c0019d7a:	80 fa 6d             	cmp    dl,0x6d
c0019d7d:	0f 84 ec 02 00 00    	je     c001a06f <Vm::faultHandler(regs*)+0x3b4>
c0019d83:	77 17                	ja     c0019d9c <Vm::faultHandler(regs*)+0xe1>
c0019d85:	80 fa 67             	cmp    dl,0x67
c0019d88:	0f 84 48 01 00 00    	je     c0019ed6 <Vm::faultHandler(regs*)+0x21b>
c0019d8e:	80 fa 6c             	cmp    dl,0x6c
c0019d91:	0f 84 69 02 00 00    	je     c001a000 <Vm::faultHandler(regs*)+0x345>
c0019d97:	e9 96 05 00 00       	jmp    c001a332 <Vm::faultHandler(regs*)+0x677>
c0019d9c:	80 fa 6f             	cmp    dl,0x6f
c0019d9f:	0f 84 f4 03 00 00    	je     c001a199 <Vm::faultHandler(regs*)+0x4de>
c0019da5:	0f 82 59 03 00 00    	jb     c001a104 <Vm::faultHandler(regs*)+0x449>
c0019dab:	80 fa 9c             	cmp    dl,0x9c
c0019dae:	0f 84 2f 01 00 00    	je     c0019ee3 <Vm::faultHandler(regs*)+0x228>
c0019db4:	e9 79 05 00 00       	jmp    c001a332 <Vm::faultHandler(regs*)+0x677>
c0019db9:	80 fa ec             	cmp    dl,0xec
c0019dbc:	0f 84 14 05 00 00    	je     c001a2d6 <Vm::faultHandler(regs*)+0x61b>
c0019dc2:	77 7b                	ja     c0019e3f <Vm::faultHandler(regs*)+0x184>
c0019dc4:	80 fa e4             	cmp    dl,0xe4
c0019dc7:	0f 84 93 04 00 00    	je     c001a260 <Vm::faultHandler(regs*)+0x5a5>
c0019dcd:	77 53                	ja     c0019e22 <Vm::faultHandler(regs*)+0x167>
c0019dcf:	80 fa cd             	cmp    dl,0xcd
c0019dd2:	0f 84 d9 01 00 00    	je     c0019fb1 <Vm::faultHandler(regs*)+0x2f6>
c0019dd8:	80 fa cf             	cmp    dl,0xcf
c0019ddb:	0f 85 51 05 00 00    	jne    c001a332 <Vm::faultHandler(regs*)+0x677>
c0019de1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019de4:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019de7:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019deb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019dee:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019df2:	81 ca 00 02 02 00    	or     edx,0x20200
c0019df8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019dfb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019dff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019e05:	66 c1 e8 09          	shr    ax,0x9
c0019e09:	83 e0 01             	and    eax,0x1
c0019e0c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019e0f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019e12:	83 c0 06             	add    eax,0x6
c0019e15:	25 ff ff 00 00       	and    eax,0xffff
c0019e1a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019e1d:	e9 0c 05 00 00       	jmp    c001a32e <Vm::faultHandler(regs*)+0x673>
c0019e22:	80 fa e6             	cmp    dl,0xe6
c0019e25:	0f 84 7f 04 00 00    	je     c001a2aa <Vm::faultHandler(regs*)+0x5ef>
c0019e2b:	0f 82 4b 04 00 00    	jb     c001a27c <Vm::faultHandler(regs*)+0x5c1>
c0019e31:	80 fa e7             	cmp    dl,0xe7
c0019e34:	0f 84 87 04 00 00    	je     c001a2c1 <Vm::faultHandler(regs*)+0x606>
c0019e3a:	e9 f3 04 00 00       	jmp    c001a332 <Vm::faultHandler(regs*)+0x677>
c0019e3f:	80 fa ef             	cmp    dl,0xef
c0019e42:	0f 84 d1 04 00 00    	je     c001a319 <Vm::faultHandler(regs*)+0x65e>
c0019e48:	77 28                	ja     c0019e72 <Vm::faultHandler(regs*)+0x1b7>
c0019e4a:	80 fa ed             	cmp    dl,0xed
c0019e4d:	0f 84 9f 04 00 00    	je     c001a2f2 <Vm::faultHandler(regs*)+0x637>
c0019e53:	80 fa ee             	cmp    dl,0xee
c0019e56:	0f 85 d6 04 00 00    	jne    c001a332 <Vm::faultHandler(regs*)+0x677>
c0019e5c:	50                   	push   eax
c0019e5d:	50                   	push   eax
c0019e5e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019e62:	50                   	push   eax
c0019e63:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019e67:	50                   	push   eax
c0019e68:	e8 a3 f9 ff ff       	call   c0019810 <Vm::outbv(unsigned short, unsigned char)>
c0019e6d:	e9 9f 04 00 00       	jmp    c001a311 <Vm::faultHandler(regs*)+0x656>
c0019e72:	80 fa fa             	cmp    dl,0xfa
c0019e75:	0f 84 69 01 00 00    	je     c0019fe4 <Vm::faultHandler(regs*)+0x329>
c0019e7b:	80 fa fb             	cmp    dl,0xfb
c0019e7e:	0f 84 6e 01 00 00    	je     c0019ff2 <Vm::faultHandler(regs*)+0x337>
c0019e84:	80 fa f3             	cmp    dl,0xf3
c0019e87:	0f 85 a5 04 00 00    	jne    c001a332 <Vm::faultHandler(regs*)+0x677>
c0019e8d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019e90:	e9 c0 fe ff ff       	jmp    c0019d55 <Vm::faultHandler(regs*)+0x9a>
c0019e95:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019e98:	be 02 00 00 00       	mov    esi,0x2
c0019e9d:	e9 b3 fe ff ff       	jmp    c0019d55 <Vm::faultHandler(regs*)+0x9a>
c0019ea2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ea5:	be 03 00 00 00       	mov    esi,0x3
c0019eaa:	e9 a6 fe ff ff       	jmp    c0019d55 <Vm::faultHandler(regs*)+0x9a>
c0019eaf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019eb2:	be 04 00 00 00       	mov    esi,0x4
c0019eb7:	e9 99 fe ff ff       	jmp    c0019d55 <Vm::faultHandler(regs*)+0x9a>
c0019ebc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ebf:	be 05 00 00 00       	mov    esi,0x5
c0019ec4:	e9 8c fe ff ff       	jmp    c0019d55 <Vm::faultHandler(regs*)+0x9a>
c0019ec9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ecc:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019ed1:	e9 7f fe ff ff       	jmp    c0019d55 <Vm::faultHandler(regs*)+0x9a>
c0019ed6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ed9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019ede:	e9 72 fe ff ff       	jmp    c0019d55 <Vm::faultHandler(regs*)+0x9a>
c0019ee3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019eea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019eef:	74 30                	je     c0019f21 <Vm::faultHandler(regs*)+0x266>
c0019ef1:	83 e9 04             	sub    ecx,0x4
c0019ef4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019efa:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019f00:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019f03:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019f06:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019f0c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019f10:	0f 84 15 04 00 00    	je     c001a32b <Vm::faultHandler(regs*)+0x670>
c0019f16:	80 ce 02             	or     dh,0x2
c0019f19:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019f1c:	e9 0a 04 00 00       	jmp    c001a32b <Vm::faultHandler(regs*)+0x670>
c0019f21:	83 e9 02             	sub    ecx,0x2
c0019f24:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019f2a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019f2d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019f31:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019f37:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019f3b:	74 05                	je     c0019f42 <Vm::faultHandler(regs*)+0x287>
c0019f3d:	80 ce 02             	or     dh,0x2
c0019f40:	eb 03                	jmp    c0019f45 <Vm::faultHandler(regs*)+0x28a>
c0019f42:	80 e6 fd             	and    dh,0xfd
c0019f45:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019f49:	e9 dd 03 00 00       	jmp    c001a32b <Vm::faultHandler(regs*)+0x670>
c0019f4e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019f53:	74 2a                	je     c0019f7f <Vm::faultHandler(regs*)+0x2c4>
c0019f55:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f57:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019f5d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019f63:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019f66:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f68:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019f6e:	c1 e8 09             	shr    eax,0x9
c0019f71:	83 e0 01             	and    eax,0x1
c0019f74:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019f77:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019f7a:	83 c0 04             	add    eax,0x4
c0019f7d:	eb 25                	jmp    c0019fa4 <Vm::faultHandler(regs*)+0x2e9>
c0019f7f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019f82:	81 ca 00 02 02 00    	or     edx,0x20200
c0019f88:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019f8b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019f8e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019f94:	66 c1 e8 09          	shr    ax,0x9
c0019f98:	83 e0 01             	and    eax,0x1
c0019f9b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019f9e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019fa1:	83 c0 02             	add    eax,0x2
c0019fa4:	25 ff ff 00 00       	and    eax,0xffff
c0019fa9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019fac:	e9 7a 03 00 00       	jmp    c001a32b <Vm::faultHandler(regs*)+0x670>
c0019fb1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019fb5:	3c ee                	cmp    al,0xee
c0019fb7:	75 10                	jne    c0019fc9 <Vm::faultHandler(regs*)+0x30e>
c0019fb9:	83 ec 0c             	sub    esp,0xc
c0019fbc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019fbf:	e8 e9 f8 ff ff       	call   c00198ad <Vm::mainloop3(unsigned long)>
c0019fc4:	e9 4b 03 00 00       	jmp    c001a314 <Vm::faultHandler(regs*)+0x659>
c0019fc9:	83 ec 0c             	sub    esp,0xc
c0019fcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fd4:	51                   	push   ecx
c0019fd5:	50                   	push   eax
c0019fd6:	53                   	push   ebx
c0019fd7:	e8 e1 fb ff ff       	call   c0019bbd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019fdc:	83 c4 20             	add    esp,0x20
c0019fdf:	e9 4a 03 00 00       	jmp    c001a32e <Vm::faultHandler(regs*)+0x673>
c0019fe4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019fe9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019fed:	e9 39 03 00 00       	jmp    c001a32b <Vm::faultHandler(regs*)+0x670>
c0019ff2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ff7:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0019ffb:	e9 2b 03 00 00       	jmp    c001a32b <Vm::faultHandler(regs*)+0x670>
c001a000:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a003:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a008:	74 2b                	je     c001a035 <Vm::faultHandler(regs*)+0x37a>
c001a00a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001a011:	76 22                	jbe    c001a035 <Vm::faultHandler(regs*)+0x37a>
c001a013:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a017:	50                   	push   eax
c001a018:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a01c:	50                   	push   eax
c001a01d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a021:	50                   	push   eax
c001a022:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a026:	50                   	push   eax
c001a027:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a02b:	50                   	push   eax
c001a02c:	6a 6c                	push   0x6c
c001a02e:	6a 6c                	push   0x6c
c001a030:	e9 b9 01 00 00       	jmp    c001a1ee <Vm::faultHandler(regs*)+0x533>
c001a035:	83 ec 0c             	sub    esp,0xc
c001a038:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a03c:	0f b7 f6             	movzx  esi,si
c001a03f:	50                   	push   eax
c001a040:	e8 b8 f7 ff ff       	call   c00197fd <Vm::inbv(unsigned short)>
c001a045:	83 c4 0c             	add    esp,0xc
c001a048:	0f b6 c0             	movzx  eax,al
c001a04b:	50                   	push   eax
c001a04c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001a050:	50                   	push   eax
c001a051:	56                   	push   esi
c001a052:	e8 24 fc ff ff       	call   c0019c7b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001a057:	83 c4 10             	add    esp,0x10
c001a05a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a05d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a061:	74 03                	je     c001a066 <Vm::faultHandler(regs*)+0x3ab>
c001a063:	48                   	dec    eax
c001a064:	eb 01                	jmp    c001a067 <Vm::faultHandler(regs*)+0x3ac>
c001a066:	40                   	inc    eax
c001a067:	0f b7 c0             	movzx  eax,ax
c001a06a:	e9 8d 00 00 00       	jmp    c001a0fc <Vm::faultHandler(regs*)+0x441>
c001a06f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a072:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a075:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a07a:	74 29                	je     c001a0a5 <Vm::faultHandler(regs*)+0x3ea>
c001a07c:	3d ff ff 00 00       	cmp    eax,0xffff
c001a081:	76 22                	jbe    c001a0a5 <Vm::faultHandler(regs*)+0x3ea>
c001a083:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a087:	50                   	push   eax
c001a088:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a08c:	50                   	push   eax
c001a08d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a091:	50                   	push   eax
c001a092:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a096:	50                   	push   eax
c001a097:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a09b:	50                   	push   eax
c001a09c:	6a 6d                	push   0x6d
c001a09e:	6a 6d                	push   0x6d
c001a0a0:	e9 49 01 00 00       	jmp    c001a1ee <Vm::faultHandler(regs*)+0x533>
c001a0a5:	0f b7 c8             	movzx  ecx,ax
c001a0a8:	0f b7 f6             	movzx  esi,si
c001a0ab:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a0ae:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a0b3:	74 20                	je     c001a0d5 <Vm::faultHandler(regs*)+0x41a>
c001a0b5:	ed                   	in     eax,dx
c001a0b6:	55                   	push   ebp
c001a0b7:	50                   	push   eax
c001a0b8:	51                   	push   ecx
c001a0b9:	56                   	push   esi
c001a0ba:	e8 e7 fb ff ff       	call   c0019ca6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001a0bf:	83 c4 10             	add    esp,0x10
c001a0c2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a0c5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a0c9:	74 05                	je     c001a0d0 <Vm::faultHandler(regs*)+0x415>
c001a0cb:	83 e8 04             	sub    eax,0x4
c001a0ce:	eb 27                	jmp    c001a0f7 <Vm::faultHandler(regs*)+0x43c>
c001a0d0:	83 c0 04             	add    eax,0x4
c001a0d3:	eb 22                	jmp    c001a0f7 <Vm::faultHandler(regs*)+0x43c>
c001a0d5:	66 ed                	in     ax,dx
c001a0d7:	0f b7 c0             	movzx  eax,ax
c001a0da:	57                   	push   edi
c001a0db:	50                   	push   eax
c001a0dc:	51                   	push   ecx
c001a0dd:	56                   	push   esi
c001a0de:	e8 ad fb ff ff       	call   c0019c90 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001a0e3:	83 c4 10             	add    esp,0x10
c001a0e6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a0e9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a0ed:	74 05                	je     c001a0f4 <Vm::faultHandler(regs*)+0x439>
c001a0ef:	83 e8 02             	sub    eax,0x2
c001a0f2:	eb 03                	jmp    c001a0f7 <Vm::faultHandler(regs*)+0x43c>
c001a0f4:	83 c0 02             	add    eax,0x2
c001a0f7:	25 ff ff 00 00       	and    eax,0xffff
c001a0fc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001a0ff:	e9 27 02 00 00       	jmp    c001a32b <Vm::faultHandler(regs*)+0x670>
c001a104:	8d 46 ff             	lea    eax,[esi-0x1]
c001a107:	3c 05                	cmp    al,0x5
c001a109:	77 24                	ja     c001a12f <Vm::faultHandler(regs*)+0x474>
c001a10b:	0f b6 c0             	movzx  eax,al
c001a10e:	ff 24 85 5c 6c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd93a4]
c001a115:	0f b7 fd             	movzx  edi,bp
c001a118:	eb 15                	jmp    c001a12f <Vm::faultHandler(regs*)+0x474>
c001a11a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001a11e:	eb 0f                	jmp    c001a12f <Vm::faultHandler(regs*)+0x474>
c001a120:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001a124:	eb 09                	jmp    c001a12f <Vm::faultHandler(regs*)+0x474>
c001a126:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001a12a:	eb 03                	jmp    c001a12f <Vm::faultHandler(regs*)+0x474>
c001a12c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001a12f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a132:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a137:	74 29                	je     c001a162 <Vm::faultHandler(regs*)+0x4a7>
c001a139:	3d ff ff 00 00       	cmp    eax,0xffff
c001a13e:	76 22                	jbe    c001a162 <Vm::faultHandler(regs*)+0x4a7>
c001a140:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a144:	50                   	push   eax
c001a145:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a149:	50                   	push   eax
c001a14a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a14e:	50                   	push   eax
c001a14f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a153:	50                   	push   eax
c001a154:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a158:	50                   	push   eax
c001a159:	6a 6e                	push   0x6e
c001a15b:	6a 6e                	push   0x6e
c001a15d:	e9 8c 00 00 00       	jmp    c001a1ee <Vm::faultHandler(regs*)+0x533>
c001a162:	0f b7 c0             	movzx  eax,ax
c001a165:	52                   	push   edx
c001a166:	52                   	push   edx
c001a167:	50                   	push   eax
c001a168:	57                   	push   edi
c001a169:	e8 d9 fa ff ff       	call   c0019c47 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001a16e:	59                   	pop    ecx
c001a16f:	0f b6 c0             	movzx  eax,al
c001a172:	5e                   	pop    esi
c001a173:	50                   	push   eax
c001a174:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a178:	50                   	push   eax
c001a179:	e8 92 f6 ff ff       	call   c0019810 <Vm::outbv(unsigned short, unsigned char)>
c001a17e:	83 c4 10             	add    esp,0x10
c001a181:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a184:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a188:	74 03                	je     c001a18d <Vm::faultHandler(regs*)+0x4d2>
c001a18a:	48                   	dec    eax
c001a18b:	eb 01                	jmp    c001a18e <Vm::faultHandler(regs*)+0x4d3>
c001a18d:	40                   	inc    eax
c001a18e:	0f b7 c0             	movzx  eax,ax
c001a191:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a194:	e9 92 01 00 00       	jmp    c001a32b <Vm::faultHandler(regs*)+0x670>
c001a199:	8d 46 ff             	lea    eax,[esi-0x1]
c001a19c:	3c 05                	cmp    al,0x5
c001a19e:	77 1f                	ja     c001a1bf <Vm::faultHandler(regs*)+0x504>
c001a1a0:	0f b6 c0             	movzx  eax,al
c001a1a3:	ff 24 85 74 6c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd938c]
c001a1aa:	89 ef                	mov    edi,ebp
c001a1ac:	eb 11                	jmp    c001a1bf <Vm::faultHandler(regs*)+0x504>
c001a1ae:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001a1b1:	eb 0c                	jmp    c001a1bf <Vm::faultHandler(regs*)+0x504>
c001a1b3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001a1b6:	eb 07                	jmp    c001a1bf <Vm::faultHandler(regs*)+0x504>
c001a1b8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001a1bb:	eb 02                	jmp    c001a1bf <Vm::faultHandler(regs*)+0x504>
c001a1bd:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001a1bf:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a1c2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a1c7:	74 37                	je     c001a200 <Vm::faultHandler(regs*)+0x545>
c001a1c9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001a1cf:	76 2f                	jbe    c001a200 <Vm::faultHandler(regs*)+0x545>
c001a1d1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a1d5:	50                   	push   eax
c001a1d6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a1da:	50                   	push   eax
c001a1db:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a1df:	50                   	push   eax
c001a1e0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a1e4:	50                   	push   eax
c001a1e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a1e9:	50                   	push   eax
c001a1ea:	6a 6f                	push   0x6f
c001a1ec:	6a 6f                	push   0x6f
c001a1ee:	68 02 6c 02 c0       	push   0xc0026c02
c001a1f3:	e8 4f 2e ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001a1f8:	83 c4 20             	add    esp,0x20
c001a1fb:	e9 86 01 00 00       	jmp    c001a386 <Vm::faultHandler(regs*)+0x6cb>
c001a200:	0f b7 d7             	movzx  edx,di
c001a203:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001a206:	0f b7 c6             	movzx  eax,si
c001a209:	81 e1 00 04 00 00    	and    ecx,0x400
c001a20f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001a212:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a217:	74 1d                	je     c001a236 <Vm::faultHandler(regs*)+0x57b>
c001a219:	55                   	push   ebp
c001a21a:	55                   	push   ebp
c001a21b:	50                   	push   eax
c001a21c:	52                   	push   edx
c001a21d:	e8 48 fa ff ff       	call   c0019c6a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001a222:	83 c4 10             	add    esp,0x10
c001a225:	89 fa                	mov    edx,edi
c001a227:	ef                   	out    dx,eax
c001a228:	85 c9                	test   ecx,ecx
c001a22a:	74 05                	je     c001a231 <Vm::faultHandler(regs*)+0x576>
c001a22c:	83 ee 04             	sub    esi,0x4
c001a22f:	eb 21                	jmp    c001a252 <Vm::faultHandler(regs*)+0x597>
c001a231:	83 c6 04             	add    esi,0x4
c001a234:	eb 1c                	jmp    c001a252 <Vm::faultHandler(regs*)+0x597>
c001a236:	55                   	push   ebp
c001a237:	55                   	push   ebp
c001a238:	50                   	push   eax
c001a239:	52                   	push   edx
c001a23a:	e8 19 fa ff ff       	call   c0019c58 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001a23f:	83 c4 10             	add    esp,0x10
c001a242:	89 fa                	mov    edx,edi
c001a244:	66 ef                	out    dx,ax
c001a246:	85 c9                	test   ecx,ecx
c001a248:	74 05                	je     c001a24f <Vm::faultHandler(regs*)+0x594>
c001a24a:	83 ee 02             	sub    esi,0x2
c001a24d:	eb 03                	jmp    c001a252 <Vm::faultHandler(regs*)+0x597>
c001a24f:	83 c6 02             	add    esi,0x2
c001a252:	81 e6 ff ff 00 00    	and    esi,0xffff
c001a258:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001a25b:	e9 cb 00 00 00       	jmp    c001a32b <Vm::faultHandler(regs*)+0x670>
c001a260:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a267:	83 ec 0c             	sub    esp,0xc
c001a26a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a26e:	50                   	push   eax
c001a26f:	e8 89 f5 ff ff       	call   c00197fd <Vm::inbv(unsigned short)>
c001a274:	0f b6 c0             	movzx  eax,al
c001a277:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a27a:	eb 3f                	jmp    c001a2bb <Vm::faultHandler(regs*)+0x600>
c001a27c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a281:	74 07                	je     c001a28a <Vm::faultHandler(regs*)+0x5cf>
c001a283:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a287:	ed                   	in     eax,dx
c001a288:	eb 14                	jmp    c001a29e <Vm::faultHandler(regs*)+0x5e3>
c001a28a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001a28d:	66 31 f6             	xor    si,si
c001a290:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001a293:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a297:	66 ed                	in     ax,dx
c001a299:	0f b7 c0             	movzx  eax,ax
c001a29c:	09 f0                	or     eax,esi
c001a29e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a2a1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a2a5:	e9 84 00 00 00       	jmp    c001a32e <Vm::faultHandler(regs*)+0x673>
c001a2aa:	52                   	push   edx
c001a2ab:	52                   	push   edx
c001a2ac:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a2b0:	50                   	push   eax
c001a2b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a2b5:	50                   	push   eax
c001a2b6:	e8 55 f5 ff ff       	call   c0019810 <Vm::outbv(unsigned short, unsigned char)>
c001a2bb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a2bf:	eb 53                	jmp    c001a314 <Vm::faultHandler(regs*)+0x659>
c001a2c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a2c4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a2c8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a2cd:	74 03                	je     c001a2d2 <Vm::faultHandler(regs*)+0x617>
c001a2cf:	ef                   	out    dx,eax
c001a2d0:	eb cf                	jmp    c001a2a1 <Vm::faultHandler(regs*)+0x5e6>
c001a2d2:	66 ef                	out    dx,ax
c001a2d4:	eb cb                	jmp    c001a2a1 <Vm::faultHandler(regs*)+0x5e6>
c001a2d6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a2dd:	83 ec 0c             	sub    esp,0xc
c001a2e0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a2e4:	50                   	push   eax
c001a2e5:	e8 13 f5 ff ff       	call   c00197fd <Vm::inbv(unsigned short)>
c001a2ea:	0f b6 c0             	movzx  eax,al
c001a2ed:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a2f0:	eb 1f                	jmp    c001a311 <Vm::faultHandler(regs*)+0x656>
c001a2f2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a2f5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a2fa:	74 03                	je     c001a2ff <Vm::faultHandler(regs*)+0x644>
c001a2fc:	ed                   	in     eax,dx
c001a2fd:	eb 0d                	jmp    c001a30c <Vm::faultHandler(regs*)+0x651>
c001a2ff:	66 ed                	in     ax,dx
c001a301:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001a304:	0f b7 c0             	movzx  eax,ax
c001a307:	66 31 d2             	xor    dx,dx
c001a30a:	09 d0                	or     eax,edx
c001a30c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a30f:	eb 1a                	jmp    c001a32b <Vm::faultHandler(regs*)+0x670>
c001a311:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a314:	83 c4 10             	add    esp,0x10
c001a317:	eb 15                	jmp    c001a32e <Vm::faultHandler(regs*)+0x673>
c001a319:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a31c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a31f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a324:	74 03                	je     c001a329 <Vm::faultHandler(regs*)+0x66e>
c001a326:	ef                   	out    dx,eax
c001a327:	eb 02                	jmp    c001a32b <Vm::faultHandler(regs*)+0x670>
c001a329:	66 ef                	out    dx,ax
c001a32b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a32e:	b0 01                	mov    al,0x1
c001a330:	eb 56                	jmp    c001a388 <Vm::faultHandler(regs*)+0x6cd>
c001a332:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a336:	50                   	push   eax
c001a337:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a33b:	50                   	push   eax
c001a33c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a340:	50                   	push   eax
c001a341:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a345:	50                   	push   eax
c001a346:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a34a:	50                   	push   eax
c001a34b:	52                   	push   edx
c001a34c:	52                   	push   edx
c001a34d:	68 2f 6c 02 c0       	push   0xc0026c2f
c001a352:	e8 f0 2c ff ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001a357:	83 c4 20             	add    esp,0x20
c001a35a:	83 ec 0c             	sub    esp,0xc
c001a35d:	6a 60                	push   0x60
c001a35f:	e8 99 f4 ff ff       	call   c00197fd <Vm::inbv(unsigned short)>
c001a364:	83 c4 10             	add    esp,0x10
c001a367:	3c 1c                	cmp    al,0x1c
c001a369:	74 04                	je     c001a36f <Vm::faultHandler(regs*)+0x6b4>
c001a36b:	3c 5a                	cmp    al,0x5a
c001a36d:	75 eb                	jne    c001a35a <Vm::faultHandler(regs*)+0x69f>
c001a36f:	3c 5a                	cmp    al,0x5a
c001a371:	74 04                	je     c001a377 <Vm::faultHandler(regs*)+0x6bc>
c001a373:	3c 1c                	cmp    al,0x1c
c001a375:	75 0f                	jne    c001a386 <Vm::faultHandler(regs*)+0x6cb>
c001a377:	83 ec 0c             	sub    esp,0xc
c001a37a:	6a 60                	push   0x60
c001a37c:	e8 7c f4 ff ff       	call   c00197fd <Vm::inbv(unsigned short)>
c001a381:	83 c4 10             	add    esp,0x10
c001a384:	eb e9                	jmp    c001a36f <Vm::faultHandler(regs*)+0x6b4>
c001a386:	31 c0                	xor    eax,eax
c001a388:	83 c4 1c             	add    esp,0x1c
c001a38b:	5b                   	pop    ebx
c001a38c:	5e                   	pop    esi
c001a38d:	5f                   	pop    edi
c001a38e:	5d                   	pop    ebp
c001a38f:	c3                   	ret    

c001a390 <Vm::fpuInternalTo32(unsigned long long)>:
c001a390:	57                   	push   edi
c001a391:	56                   	push   esi
c001a392:	53                   	push   ebx
c001a393:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a39b:	89 d6                	mov    esi,edx
c001a39d:	89 d7                	mov    edi,edx
c001a39f:	89 c1                	mov    ecx,eax
c001a3a1:	c1 ef 14             	shr    edi,0x14
c001a3a4:	89 d3                	mov    ebx,edx
c001a3a6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a3ac:	31 d2                	xor    edx,edx
c001a3ae:	89 f8                	mov    eax,edi
c001a3b0:	81 e6 00 00 00 80    	and    esi,0x80000000
c001a3b6:	bf ff 00 00 00       	mov    edi,0xff
c001a3bb:	05 80 fc ff ff       	add    eax,0xfffffc80
c001a3c0:	83 d2 ff             	adc    edx,0xffffffff
c001a3c3:	39 c7                	cmp    edi,eax
c001a3c5:	bf 00 00 00 00       	mov    edi,0x0
c001a3ca:	19 d7                	sbb    edi,edx
c001a3cc:	72 16                	jb     c001a3e4 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001a3ce:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001a3d2:	c1 e0 17             	shl    eax,0x17
c001a3d5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001a3db:	09 f1                	or     ecx,esi
c001a3dd:	09 c1                	or     ecx,eax
c001a3df:	89 cf                	mov    edi,ecx
c001a3e1:	eb 05                	jmp    c001a3e8 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001a3e3:	90                   	nop
c001a3e4:	31 ff                	xor    edi,edi
c001a3e6:	66 90                	xchg   ax,ax
c001a3e8:	89 f8                	mov    eax,edi
c001a3ea:	5b                   	pop    ebx
c001a3eb:	5e                   	pop    esi
c001a3ec:	5f                   	pop    edi
c001a3ed:	c3                   	ret    

c001a3ee <Vm::fpuInternalTo64(unsigned long long)>:
c001a3ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3f6:	c3                   	ret    

c001a3f7 <Vm::fpu32ToInternal(unsigned int)>:
c001a3f7:	57                   	push   edi
c001a3f8:	31 ff                	xor    edi,edi
c001a3fa:	56                   	push   esi
c001a3fb:	53                   	push   ebx
c001a3fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a400:	89 cb                	mov    ebx,ecx
c001a402:	89 ce                	mov    esi,ecx
c001a404:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001a40a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001a410:	c1 e9 17             	shr    ecx,0x17
c001a413:	89 f0                	mov    eax,esi
c001a415:	0f b6 d1             	movzx  edx,cl
c001a418:	81 c2 80 03 00 00    	add    edx,0x380
c001a41e:	89 d1                	mov    ecx,edx
c001a420:	89 fa                	mov    edx,edi
c001a422:	c1 e1 14             	shl    ecx,0x14
c001a425:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001a429:	c1 e0 1d             	shl    eax,0x1d
c001a42c:	89 d7                	mov    edi,edx
c001a42e:	89 c6                	mov    esi,eax
c001a430:	89 ca                	mov    edx,ecx
c001a432:	89 f0                	mov    eax,esi
c001a434:	09 fa                	or     edx,edi
c001a436:	09 da                	or     edx,ebx
c001a438:	5b                   	pop    ebx
c001a439:	5e                   	pop    esi
c001a43a:	5f                   	pop    edi
c001a43b:	c3                   	ret    

c001a43c <Vm::fpu64ToInternal(unsigned long long)>:
c001a43c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a440:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a444:	c3                   	ret    

c001a445 <Vm::fpuFloatToLong(unsigned long long)>:
c001a445:	57                   	push   edi
c001a446:	31 c0                	xor    eax,eax
c001a448:	56                   	push   esi
c001a449:	31 d2                	xor    edx,edx
c001a44b:	53                   	push   ebx
c001a44c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a450:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a454:	89 d9                	mov    ecx,ebx
c001a456:	c1 e9 14             	shr    ecx,0x14
c001a459:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a45f:	89 cf                	mov    edi,ecx
c001a461:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001a467:	78 37                	js     c001a4a0 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a469:	89 d9                	mov    ecx,ebx
c001a46b:	89 f0                	mov    eax,esi
c001a46d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a473:	81 c9 00 00 10 00    	or     ecx,0x100000
c001a479:	89 ca                	mov    edx,ecx
c001a47b:	b9 34 00 00 00       	mov    ecx,0x34
c001a480:	29 f9                	sub    ecx,edi
c001a482:	0f ad d0             	shrd   eax,edx,cl
c001a485:	d3 fa                	sar    edx,cl
c001a487:	f6 c1 20             	test   cl,0x20
c001a48a:	74 08                	je     c001a494 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001a48c:	89 d0                	mov    eax,edx
c001a48e:	c1 fa 1f             	sar    edx,0x1f
c001a491:	8d 76 00             	lea    esi,[esi+0x0]
c001a494:	85 db                	test   ebx,ebx
c001a496:	79 08                	jns    c001a4a0 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a498:	f7 d8                	neg    eax
c001a49a:	83 d2 00             	adc    edx,0x0
c001a49d:	f7 da                	neg    edx
c001a49f:	90                   	nop
c001a4a0:	5b                   	pop    ebx
c001a4a1:	5e                   	pop    esi
c001a4a2:	5f                   	pop    edi
c001a4a3:	c3                   	ret    

c001a4a4 <Vm::fpuULongToFloat(unsigned long long)>:
c001a4a4:	57                   	push   edi
c001a4a5:	31 c9                	xor    ecx,ecx
c001a4a7:	56                   	push   esi
c001a4a8:	53                   	push   ebx
c001a4a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4ad:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4b4:	0f ba e7 14          	bt     edi,0x14
c001a4b8:	72 0a                	jb     c001a4c4 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001a4ba:	01 f6                	add    esi,esi
c001a4bc:	11 ff                	adc    edi,edi
c001a4be:	41                   	inc    ecx
c001a4bf:	eb f3                	jmp    c001a4b4 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001a4c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4c4:	89 fa                	mov    edx,edi
c001a4c6:	89 f0                	mov    eax,esi
c001a4c8:	bb 33 04 00 00       	mov    ebx,0x433
c001a4cd:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001a4d3:	29 cb                	sub    ebx,ecx
c001a4d5:	89 d9                	mov    ecx,ebx
c001a4d7:	5b                   	pop    ebx
c001a4d8:	c1 e1 14             	shl    ecx,0x14
c001a4db:	5e                   	pop    esi
c001a4dc:	09 ca                	or     edx,ecx
c001a4de:	5f                   	pop    edi
c001a4df:	c3                   	ret    

c001a4e0 <Vm::fpuLongToFloat(long long)>:
c001a4e0:	56                   	push   esi
c001a4e1:	31 c0                	xor    eax,eax
c001a4e3:	53                   	push   ebx
c001a4e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a4e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a4ec:	39 c8                	cmp    eax,ecx
c001a4ee:	19 d8                	sbb    eax,ebx
c001a4f0:	7d 06                	jge    c001a4f8 <Vm::fpuLongToFloat(long long)+0x18>
c001a4f2:	31 f6                	xor    esi,esi
c001a4f4:	eb 0e                	jmp    c001a504 <Vm::fpuLongToFloat(long long)+0x24>
c001a4f6:	66 90                	xchg   ax,ax
c001a4f8:	f7 d9                	neg    ecx
c001a4fa:	be 01 00 00 00       	mov    esi,0x1
c001a4ff:	83 d3 00             	adc    ebx,0x0
c001a502:	f7 db                	neg    ebx
c001a504:	31 c0                	xor    eax,eax
c001a506:	66 90                	xchg   ax,ax
c001a508:	0f ba e3 14          	bt     ebx,0x14
c001a50c:	72 0a                	jb     c001a518 <Vm::fpuLongToFloat(long long)+0x38>
c001a50e:	01 c9                	add    ecx,ecx
c001a510:	11 db                	adc    ebx,ebx
c001a512:	40                   	inc    eax
c001a513:	eb f3                	jmp    c001a508 <Vm::fpuLongToFloat(long long)+0x28>
c001a515:	8d 76 00             	lea    esi,[esi+0x0]
c001a518:	ba 33 04 00 00       	mov    edx,0x433
c001a51d:	29 c2                	sub    edx,eax
c001a51f:	89 c8                	mov    eax,ecx
c001a521:	c1 e2 14             	shl    edx,0x14
c001a524:	89 d9                	mov    ecx,ebx
c001a526:	89 f3                	mov    ebx,esi
c001a528:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a52e:	09 ca                	or     edx,ecx
c001a530:	84 db                	test   bl,bl
c001a532:	74 08                	je     c001a53c <Vm::fpuLongToFloat(long long)+0x5c>
c001a534:	81 ca 00 00 00 80    	or     edx,0x80000000
c001a53a:	66 90                	xchg   ax,ax
c001a53c:	5b                   	pop    ebx
c001a53d:	5e                   	pop    esi
c001a53e:	c3                   	ret    

c001a53f <Vm::fpuGet0()>:
c001a53f:	31 c0                	xor    eax,eax
c001a541:	31 d2                	xor    edx,edx
c001a543:	c3                   	ret    

c001a544 <Vm::fpuGet1()>:
c001a544:	b8 01 00 00 00       	mov    eax,0x1
c001a549:	31 d2                	xor    edx,edx
c001a54b:	c3                   	ret    

c001a54c <Vm::fpuGetPi()>:
c001a54c:	b8 03 00 00 00       	mov    eax,0x3
c001a551:	31 d2                	xor    edx,edx
c001a553:	c3                   	ret    

c001a554 <Vm::fpuGetLog2E()>:
c001a554:	83 ec 18             	sub    esp,0x18
c001a557:	68 8c 6c 02 c0       	push   0xc0026c8c
c001a55c:	e8 64 ab ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001a561:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a566:	31 d2                	xor    edx,edx
c001a568:	83 c4 1c             	add    esp,0x1c
c001a56b:	c3                   	ret    

c001a56c <Vm::fpuGetLogE2()>:
c001a56c:	83 ec 18             	sub    esp,0x18
c001a56f:	68 98 6c 02 c0       	push   0xc0026c98
c001a574:	e8 4c ab ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001a579:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a57e:	31 d2                	xor    edx,edx
c001a580:	83 c4 1c             	add    esp,0x1c
c001a583:	c3                   	ret    

c001a584 <Vm::fpuGetLog210()>:
c001a584:	83 ec 18             	sub    esp,0x18
c001a587:	68 a4 6c 02 c0       	push   0xc0026ca4
c001a58c:	e8 34 ab ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001a591:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a596:	31 d2                	xor    edx,edx
c001a598:	83 c4 1c             	add    esp,0x1c
c001a59b:	c3                   	ret    

c001a59c <Vm::fpuGetLog102()>:
c001a59c:	83 ec 18             	sub    esp,0x18
c001a59f:	68 b1 6c 02 c0       	push   0xc0026cb1
c001a5a4:	e8 1c ab ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001a5a9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a5ae:	31 d2                	xor    edx,edx
c001a5b0:	83 c4 1c             	add    esp,0x1c
c001a5b3:	c3                   	ret    

c001a5b4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001a5b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5b8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a5bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5c0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001a5c4:	0f 92 c0             	setb   al
c001a5c7:	c3                   	ret    

c001a5c8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001a5c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5d0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001a5d4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001a5d8:	09 c2                	or     edx,eax
c001a5da:	0f 94 c0             	sete   al
c001a5dd:	c3                   	ret    

c001a5de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001a5de:	57                   	push   edi
c001a5df:	56                   	push   esi
c001a5e0:	53                   	push   ebx
c001a5e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a5e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5ed:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a5f1:	57                   	push   edi
c001a5f2:	56                   	push   esi
c001a5f3:	53                   	push   ebx
c001a5f4:	51                   	push   ecx
c001a5f5:	e8 ce ff ff ff       	call   c001a5c8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001a5fa:	83 c4 10             	add    esp,0x10
c001a5fd:	88 c2                	mov    dl,al
c001a5ff:	31 c0                	xor    eax,eax
c001a601:	84 d2                	test   dl,dl
c001a603:	75 0f                	jne    c001a614 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001a605:	57                   	push   edi
c001a606:	56                   	push   esi
c001a607:	53                   	push   ebx
c001a608:	51                   	push   ecx
c001a609:	e8 a6 ff ff ff       	call   c001a5b4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001a60e:	83 c4 10             	add    esp,0x10
c001a611:	8d 76 00             	lea    esi,[esi+0x0]
c001a614:	83 e0 01             	and    eax,0x1
c001a617:	5b                   	pop    ebx
c001a618:	88 c1                	mov    cl,al
c001a61a:	83 e2 01             	and    edx,0x1
c001a61d:	a0 e1 9e 02 c0       	mov    al,ds:0xc0029ee1
c001a622:	c1 e2 06             	shl    edx,0x6
c001a625:	83 e0 ba             	and    eax,0xffffffba
c001a628:	5e                   	pop    esi
c001a629:	09 c8                	or     eax,ecx
c001a62b:	5f                   	pop    edi
c001a62c:	09 d0                	or     eax,edx
c001a62e:	a2 e1 9e 02 c0       	mov    ds:0xc0029ee1,al
c001a633:	c3                   	ret    

c001a634 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a634:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a638:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a63c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a640:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a644:	c3                   	ret    

c001a645 <Vm::fpuAbs(unsigned long long)>:
c001a645:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a649:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a64d:	c3                   	ret    

c001a64e <Vm::fpuChs(unsigned long long)>:
c001a64e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a652:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a656:	f7 d8                	neg    eax
c001a658:	83 d2 00             	adc    edx,0x0
c001a65b:	f7 da                	neg    edx
c001a65d:	c3                   	ret    

c001a65e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a65e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a662:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a667:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a66b:	eb c7                	jmp    c001a634 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a66d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a66d:	53                   	push   ebx
c001a66e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a676:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a67a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a67e:	0f af ca             	imul   ecx,edx
c001a681:	0f af d8             	imul   ebx,eax
c001a684:	f7 e2                	mul    edx
c001a686:	01 d9                	add    ecx,ebx
c001a688:	5b                   	pop    ebx
c001a689:	01 ca                	add    edx,ecx
c001a68b:	c3                   	ret    

c001a68c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a68c:	83 ec 0c             	sub    esp,0xc
c001a68f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a693:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a697:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a69b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a69f:	e8 ac 86 00 00       	call   c0022d50 <__udivdi3>
c001a6a4:	83 c4 1c             	add    esp,0x1c
c001a6a7:	c3                   	ret    

c001a6a8 <Vm::fpuSquare(unsigned long long)>:
c001a6a8:	50                   	push   eax
c001a6a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a6b1:	52                   	push   edx
c001a6b2:	50                   	push   eax
c001a6b3:	52                   	push   edx
c001a6b4:	50                   	push   eax
c001a6b5:	e8 b3 ff ff ff       	call   c001a66d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a6ba:	83 c4 14             	add    esp,0x14
c001a6bd:	c3                   	ret    

c001a6be <Vm::fpuGetReg(int)>:
c001a6be:	83 ec 0c             	sub    esp,0xc
c001a6c1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a6c6:	76 10                	jbe    c001a6d8 <Vm::fpuGetReg(int)+0x1a>
c001a6c8:	83 ec 0c             	sub    esp,0xc
c001a6cb:	68 be 6c 02 c0       	push   0xc0026cbe
c001a6d0:	e8 f0 a9 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001a6d5:	83 c4 10             	add    esp,0x10
c001a6d8:	a0 e1 9e 02 c0       	mov    al,ds:0xc0029ee1
c001a6dd:	b9 08 00 00 00       	mov    ecx,0x8
c001a6e2:	c0 e8 03             	shr    al,0x3
c001a6e5:	83 e0 07             	and    eax,0x7
c001a6e8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a6ec:	99                   	cdq    
c001a6ed:	f7 f9                	idiv   ecx
c001a6ef:	8b 04 d5 e4 9e 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd611c]
c001a6f6:	8b 14 d5 e8 9e 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6118]
c001a6fd:	83 c4 0c             	add    esp,0xc
c001a700:	c3                   	ret    

c001a701 <Vm::fpuSetReg(int, unsigned long long)>:
c001a701:	57                   	push   edi
c001a702:	56                   	push   esi
c001a703:	52                   	push   edx
c001a704:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a708:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a70c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a711:	76 11                	jbe    c001a724 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a713:	83 ec 0c             	sub    esp,0xc
c001a716:	68 d1 6c 02 c0       	push   0xc0026cd1
c001a71b:	e8 a5 a9 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001a720:	83 c4 10             	add    esp,0x10
c001a723:	90                   	nop
c001a724:	a0 e1 9e 02 c0       	mov    al,ds:0xc0029ee1
c001a729:	b9 08 00 00 00       	mov    ecx,0x8
c001a72e:	c0 e8 03             	shr    al,0x3
c001a731:	83 e0 07             	and    eax,0x7
c001a734:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a738:	99                   	cdq    
c001a739:	f7 f9                	idiv   ecx
c001a73b:	89 34 d5 e4 9e 02 c0 	mov    DWORD PTR [edx*8-0x3ffd611c],esi
c001a742:	89 3c d5 e8 9e 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6118],edi
c001a749:	58                   	pop    eax
c001a74a:	5e                   	pop    esi
c001a74b:	5f                   	pop    edi
c001a74c:	c3                   	ret    

c001a74d <Vm::fpuPush(unsigned long long)>:
c001a74d:	a0 e1 9e 02 c0       	mov    al,ds:0xc0029ee1
c001a752:	c0 e8 03             	shr    al,0x3
c001a755:	83 e0 07             	and    eax,0x7
c001a758:	83 c0 07             	add    eax,0x7
c001a75b:	88 c2                	mov    dl,al
c001a75d:	83 e0 07             	and    eax,0x7
c001a760:	83 e2 07             	and    edx,0x7
c001a763:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a76a:	8a 15 e1 9e 02 c0    	mov    dl,BYTE PTR ds:0xc0029ee1
c001a770:	83 e2 c7             	and    edx,0xffffffc7
c001a773:	09 ca                	or     edx,ecx
c001a775:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a779:	88 15 e1 9e 02 c0    	mov    BYTE PTR ds:0xc0029ee1,dl
c001a77f:	89 0c c5 e8 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6118],ecx
c001a786:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a78a:	89 14 c5 e4 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd611c],edx
c001a791:	a1 24 9f 02 c0       	mov    eax,ds:0xc0029f24
c001a796:	83 f8 08             	cmp    eax,0x8
c001a799:	75 09                	jne    c001a7a4 <Vm::fpuPush(unsigned long long)+0x57>
c001a79b:	80 0d e0 9e 02 c0 40 	or     BYTE PTR ds:0xc0029ee0,0x40
c001a7a2:	c3                   	ret    
c001a7a3:	90                   	nop
c001a7a4:	40                   	inc    eax
c001a7a5:	a3 24 9f 02 c0       	mov    ds:0xc0029f24,eax
c001a7aa:	c3                   	ret    

c001a7ab <Vm::fpuPop()>:
c001a7ab:	8a 0d e1 9e 02 c0    	mov    cl,BYTE PTR ds:0xc0029ee1
c001a7b1:	53                   	push   ebx
c001a7b2:	c0 e9 03             	shr    cl,0x3
c001a7b5:	8a 1d e1 9e 02 c0    	mov    bl,BYTE PTR ds:0xc0029ee1
c001a7bb:	83 e1 07             	and    ecx,0x7
c001a7be:	83 e3 c7             	and    ebx,0xffffffc7
c001a7c1:	8b 04 cd e4 9e 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd611c]
c001a7c8:	8b 14 cd e8 9e 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6118]
c001a7cf:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a7d6:	83 e1 38             	and    ecx,0x38
c001a7d9:	09 d9                	or     ecx,ebx
c001a7db:	88 0d e1 9e 02 c0    	mov    BYTE PTR ds:0xc0029ee1,cl
c001a7e1:	8b 0d 24 9f 02 c0    	mov    ecx,DWORD PTR ds:0xc0029f24
c001a7e7:	85 c9                	test   ecx,ecx
c001a7e9:	74 09                	je     c001a7f4 <Vm::fpuPop()+0x49>
c001a7eb:	49                   	dec    ecx
c001a7ec:	89 0d 24 9f 02 c0    	mov    DWORD PTR ds:0xc0029f24,ecx
c001a7f2:	eb 08                	jmp    c001a7fc <Vm::fpuPop()+0x51>
c001a7f4:	80 0d e0 9e 02 c0 40 	or     BYTE PTR ds:0xc0029ee0,0x40
c001a7fb:	90                   	nop
c001a7fc:	5b                   	pop    ebx
c001a7fd:	c3                   	ret    

c001a7fe <Vm::x87Handler(regs*)>:
c001a7fe:	55                   	push   ebp
c001a7ff:	57                   	push   edi
c001a800:	56                   	push   esi
c001a801:	53                   	push   ebx
c001a802:	83 ec 1c             	sub    esp,0x1c
c001a805:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a809:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a80e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a811:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a819:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a81d:	50                   	push   eax
c001a81e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a822:	50                   	push   eax
c001a823:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a827:	50                   	push   eax
c001a828:	53                   	push   ebx
c001a829:	e8 b0 9f ff ff       	call   c00147de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a82e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a831:	83 c4 10             	add    esp,0x10
c001a834:	89 c6                	mov    esi,eax
c001a836:	80 fa d9             	cmp    dl,0xd9
c001a839:	0f 85 79 01 00 00    	jne    c001a9b8 <Vm::x87Handler(regs*)+0x1ba>
c001a83f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a843:	8d 50 20             	lea    edx,[eax+0x20]
c001a846:	80 fa 0e             	cmp    dl,0xe
c001a849:	0f 87 a5 00 00 00    	ja     c001a8f4 <Vm::x87Handler(regs*)+0xf6>
c001a84f:	0f b6 d2             	movzx  edx,dl
c001a852:	ff 24 95 e4 6c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd931c]
c001a859:	8d 76 00             	lea    esi,[esi+0x0]
c001a85c:	e8 de fc ff ff       	call   c001a53f <Vm::fpuGet0()>
c001a861:	eb 09                	jmp    c001a86c <Vm::x87Handler(regs*)+0x6e>
c001a863:	90                   	nop
c001a864:	e8 db fc ff ff       	call   c001a544 <Vm::fpuGet1()>
c001a869:	8d 76 00             	lea    esi,[esi+0x0]
c001a86c:	57                   	push   edi
c001a86d:	57                   	push   edi
c001a86e:	66 90                	xchg   ax,ax
c001a870:	52                   	push   edx
c001a871:	50                   	push   eax
c001a872:	e8 d6 fe ff ff       	call   c001a74d <Vm::fpuPush(unsigned long long)>
c001a877:	90                   	nop
c001a878:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a87c:	83 c4 10             	add    esp,0x10
c001a87f:	90                   	nop
c001a880:	b0 01                	mov    al,0x1
c001a882:	e9 89 0a 00 00       	jmp    c001b310 <Vm::x87Handler(regs*)+0xb12>
c001a887:	90                   	nop
c001a888:	83 ec 0c             	sub    esp,0xc
c001a88b:	6a 00                	push   0x0
c001a88d:	e8 2c fe ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001a892:	59                   	pop    ecx
c001a893:	5e                   	pop    esi
c001a894:	52                   	push   edx
c001a895:	50                   	push   eax
c001a896:	e8 b3 fd ff ff       	call   c001a64e <Vm::fpuChs(unsigned long long)>
c001a89b:	eb 17                	jmp    c001a8b4 <Vm::x87Handler(regs*)+0xb6>
c001a89d:	8d 76 00             	lea    esi,[esi+0x0]
c001a8a0:	83 ec 0c             	sub    esp,0xc
c001a8a3:	6a 00                	push   0x0
c001a8a5:	e8 14 fe ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001a8aa:	5f                   	pop    edi
c001a8ab:	5d                   	pop    ebp
c001a8ac:	52                   	push   edx
c001a8ad:	50                   	push   eax
c001a8ae:	e8 92 fd ff ff       	call   c001a645 <Vm::fpuAbs(unsigned long long)>
c001a8b3:	90                   	nop
c001a8b4:	83 c4 0c             	add    esp,0xc
c001a8b7:	90                   	nop
c001a8b8:	52                   	push   edx
c001a8b9:	50                   	push   eax
c001a8ba:	66 90                	xchg   ax,ax
c001a8bc:	6a 00                	push   0x0
c001a8be:	66 90                	xchg   ax,ax
c001a8c0:	e8 3c fe ff ff       	call   c001a701 <Vm::fpuSetReg(int, unsigned long long)>
c001a8c5:	eb b1                	jmp    c001a878 <Vm::x87Handler(regs*)+0x7a>
c001a8c7:	90                   	nop
c001a8c8:	e8 b7 fc ff ff       	call   c001a584 <Vm::fpuGetLog210()>
c001a8cd:	eb 9d                	jmp    c001a86c <Vm::x87Handler(regs*)+0x6e>
c001a8cf:	90                   	nop
c001a8d0:	e8 7f fc ff ff       	call   c001a554 <Vm::fpuGetLog2E()>
c001a8d5:	eb 95                	jmp    c001a86c <Vm::x87Handler(regs*)+0x6e>
c001a8d7:	90                   	nop
c001a8d8:	e8 6f fc ff ff       	call   c001a54c <Vm::fpuGetPi()>
c001a8dd:	eb 8d                	jmp    c001a86c <Vm::x87Handler(regs*)+0x6e>
c001a8df:	90                   	nop
c001a8e0:	e8 b7 fc ff ff       	call   c001a59c <Vm::fpuGetLog102()>
c001a8e5:	eb 85                	jmp    c001a86c <Vm::x87Handler(regs*)+0x6e>
c001a8e7:	90                   	nop
c001a8e8:	e8 7f fc ff ff       	call   c001a56c <Vm::fpuGetLogE2()>
c001a8ed:	e9 7a ff ff ff       	jmp    c001a86c <Vm::x87Handler(regs*)+0x6e>
c001a8f2:	66 90                	xchg   ax,ax
c001a8f4:	8d 50 40             	lea    edx,[eax+0x40]
c001a8f7:	80 fa 07             	cmp    dl,0x7
c001a8fa:	77 18                	ja     c001a914 <Vm::x87Handler(regs*)+0x116>
c001a8fc:	83 ec 0c             	sub    esp,0xc
c001a8ff:	2d c0 00 00 00       	sub    eax,0xc0
c001a904:	50                   	push   eax
c001a905:	e8 b4 fd ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001a90a:	59                   	pop    ecx
c001a90b:	5e                   	pop    esi
c001a90c:	e9 5f ff ff ff       	jmp    c001a870 <Vm::x87Handler(regs*)+0x72>
c001a911:	8d 76 00             	lea    esi,[esi+0x0]
c001a914:	8d 50 38             	lea    edx,[eax+0x38]
c001a917:	80 fa 07             	cmp    dl,0x7
c001a91a:	77 3c                	ja     c001a958 <Vm::x87Handler(regs*)+0x15a>
c001a91c:	83 ec 0c             	sub    esp,0xc
c001a91f:	2d c8 00 00 00       	sub    eax,0xc8
c001a924:	50                   	push   eax
c001a925:	e8 94 fd ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001a92a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a931:	89 c6                	mov    esi,eax
c001a933:	89 d7                	mov    edi,edx
c001a935:	e8 84 fd ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001a93a:	83 c4 0c             	add    esp,0xc
c001a93d:	52                   	push   edx
c001a93e:	50                   	push   eax
c001a93f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a943:	2d c8 00 00 00       	sub    eax,0xc8
c001a948:	50                   	push   eax
c001a949:	e8 b3 fd ff ff       	call   c001a701 <Vm::fpuSetReg(int, unsigned long long)>
c001a94e:	83 c4 0c             	add    esp,0xc
c001a951:	57                   	push   edi
c001a952:	56                   	push   esi
c001a953:	e9 64 ff ff ff       	jmp    c001a8bc <Vm::x87Handler(regs*)+0xbe>
c001a958:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a95c:	84 d2                	test   dl,dl
c001a95e:	75 10                	jne    c001a970 <Vm::x87Handler(regs*)+0x172>
c001a960:	83 ec 0c             	sub    esp,0xc
c001a963:	ff 36                	push   DWORD PTR [esi]
c001a965:	e8 8d fa ff ff       	call   c001a3f7 <Vm::fpu32ToInternal(unsigned int)>
c001a96a:	e9 c9 00 00 00       	jmp    c001aa38 <Vm::x87Handler(regs*)+0x23a>
c001a96f:	90                   	nop
c001a970:	80 fa 03             	cmp    dl,0x3
c001a973:	75 13                	jne    c001a988 <Vm::x87Handler(regs*)+0x18a>
c001a975:	e8 31 fe ff ff       	call   c001a7ab <Vm::fpuPop()>
c001a97a:	55                   	push   ebp
c001a97b:	55                   	push   ebp
c001a97c:	52                   	push   edx
c001a97d:	50                   	push   eax
c001a97e:	e8 0d fa ff ff       	call   c001a390 <Vm::fpuInternalTo32(unsigned long long)>
c001a983:	e9 90 00 00 00       	jmp    c001aa18 <Vm::x87Handler(regs*)+0x21a>
c001a988:	80 fa 05             	cmp    dl,0x5
c001a98b:	75 0f                	jne    c001a99c <Vm::x87Handler(regs*)+0x19e>
c001a98d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a990:	66 a3 e2 9e 02 c0    	mov    ds:0xc0029ee2,ax
c001a996:	e9 ed 00 00 00       	jmp    c001aa88 <Vm::x87Handler(regs*)+0x28a>
c001a99b:	90                   	nop
c001a99c:	31 c0                	xor    eax,eax
c001a99e:	80 fa 07             	cmp    dl,0x7
c001a9a1:	0f 85 69 09 00 00    	jne    c001b310 <Vm::x87Handler(regs*)+0xb12>
c001a9a7:	66 a1 e2 9e 02 c0    	mov    ax,ds:0xc0029ee2
c001a9ad:	66 89 06             	mov    WORD PTR [esi],ax
c001a9b0:	e9 d3 00 00 00       	jmp    c001aa88 <Vm::x87Handler(regs*)+0x28a>
c001a9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9b8:	80 fa d8             	cmp    dl,0xd8
c001a9bb:	0f 84 d3 00 00 00    	je     c001aa94 <Vm::x87Handler(regs*)+0x296>
c001a9c1:	80 fa dc             	cmp    dl,0xdc
c001a9c4:	0f 84 2a 02 00 00    	je     c001abf4 <Vm::x87Handler(regs*)+0x3f6>
c001a9ca:	80 fa de             	cmp    dl,0xde
c001a9cd:	0f 84 f1 02 00 00    	je     c001acc4 <Vm::x87Handler(regs*)+0x4c6>
c001a9d3:	80 fa dd             	cmp    dl,0xdd
c001a9d6:	0f 84 94 04 00 00    	je     c001ae70 <Vm::x87Handler(regs*)+0x672>
c001a9dc:	80 fa da             	cmp    dl,0xda
c001a9df:	0f 84 5f 05 00 00    	je     c001af44 <Vm::x87Handler(regs*)+0x746>
c001a9e5:	80 fa df             	cmp    dl,0xdf
c001a9e8:	0f 84 aa 05 00 00    	je     c001af98 <Vm::x87Handler(regs*)+0x79a>
c001a9ee:	31 c0                	xor    eax,eax
c001a9f0:	80 fa db             	cmp    dl,0xdb
c001a9f3:	0f 85 17 09 00 00    	jne    c001b310 <Vm::x87Handler(regs*)+0xb12>
c001a9f9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a9fd:	80 fa 03             	cmp    dl,0x3
c001aa00:	0f 85 c2 06 00 00    	jne    c001b0c8 <Vm::x87Handler(regs*)+0x8ca>
c001aa06:	e8 a0 fd ff ff       	call   c001a7ab <Vm::fpuPop()>
c001aa0b:	55                   	push   ebp
c001aa0c:	55                   	push   ebp
c001aa0d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa10:	52                   	push   edx
c001aa11:	50                   	push   eax
c001aa12:	e8 2e fa ff ff       	call   c001a445 <Vm::fpuFloatToLong(unsigned long long)>
c001aa17:	90                   	nop
c001aa18:	83 c4 10             	add    esp,0x10
c001aa1b:	89 06                	mov    DWORD PTR [esi],eax
c001aa1d:	eb 69                	jmp    c001aa88 <Vm::x87Handler(regs*)+0x28a>
c001aa1f:	90                   	nop
c001aa20:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa24:	84 d2                	test   dl,dl
c001aa26:	0f 85 2c 06 00 00    	jne    c001b058 <Vm::x87Handler(regs*)+0x85a>
c001aa2c:	57                   	push   edi
c001aa2d:	57                   	push   edi
c001aa2e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa31:	ff 36                	push   DWORD PTR [esi]
c001aa33:	e8 04 fa ff ff       	call   c001a43c <Vm::fpu64ToInternal(unsigned long long)>
c001aa38:	5e                   	pop    esi
c001aa39:	5f                   	pop    edi
c001aa3a:	52                   	push   edx
c001aa3b:	50                   	push   eax
c001aa3c:	e8 0c fd ff ff       	call   c001a74d <Vm::fpuPush(unsigned long long)>
c001aa41:	8d 76 00             	lea    esi,[esi+0x0]
c001aa44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa48:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001aa4b:	e9 2c fe ff ff       	jmp    c001a87c <Vm::x87Handler(regs*)+0x7e>
c001aa50:	80 fa 03             	cmp    dl,0x3
c001aa53:	0f 85 2b 07 00 00    	jne    c001b184 <Vm::x87Handler(regs*)+0x986>
c001aa59:	57                   	push   edi
c001aa5a:	57                   	push   edi
c001aa5b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa5e:	ff 36                	push   DWORD PTR [esi]
c001aa60:	e8 d7 f9 ff ff       	call   c001a43c <Vm::fpu64ToInternal(unsigned long long)>
c001aa65:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aa6c:	89 c6                	mov    esi,eax
c001aa6e:	89 d7                	mov    edi,edx
c001aa70:	e8 49 fc ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001aa75:	57                   	push   edi
c001aa76:	56                   	push   esi
c001aa77:	52                   	push   edx
c001aa78:	50                   	push   eax
c001aa79:	e8 60 fb ff ff       	call   c001a5de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001aa7e:	83 c4 20             	add    esp,0x20
c001aa81:	e8 25 fd ff ff       	call   c001a7ab <Vm::fpuPop()>
c001aa86:	66 90                	xchg   ax,ax
c001aa88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa8c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001aa8f:	e9 ec fd ff ff       	jmp    c001a880 <Vm::x87Handler(regs*)+0x82>
c001aa94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aa98:	8d 50 40             	lea    edx,[eax+0x40]
c001aa9b:	80 fa 07             	cmp    dl,0x7
c001aa9e:	77 2c                	ja     c001aacc <Vm::x87Handler(regs*)+0x2ce>
c001aaa0:	83 ec 0c             	sub    esp,0xc
c001aaa3:	2d c0 00 00 00       	sub    eax,0xc0
c001aaa8:	50                   	push   eax
c001aaa9:	e8 10 fc ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001aaae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aab5:	89 c6                	mov    esi,eax
c001aab7:	89 d7                	mov    edi,edx
c001aab9:	e8 00 fc ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001aabe:	57                   	push   edi
c001aabf:	56                   	push   esi
c001aac0:	52                   	push   edx
c001aac1:	50                   	push   eax
c001aac2:	e8 6d fb ff ff       	call   c001a634 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001aac7:	eb 33                	jmp    c001aafc <Vm::x87Handler(regs*)+0x2fe>
c001aac9:	8d 76 00             	lea    esi,[esi+0x0]
c001aacc:	8d 50 38             	lea    edx,[eax+0x38]
c001aacf:	80 fa 07             	cmp    dl,0x7
c001aad2:	77 30                	ja     c001ab04 <Vm::x87Handler(regs*)+0x306>
c001aad4:	83 ec 0c             	sub    esp,0xc
c001aad7:	2d c8 00 00 00       	sub    eax,0xc8
c001aadc:	50                   	push   eax
c001aadd:	e8 dc fb ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001aae2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aae9:	89 c6                	mov    esi,eax
c001aaeb:	89 d7                	mov    edi,edx
c001aaed:	e8 cc fb ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001aaf2:	57                   	push   edi
c001aaf3:	56                   	push   esi
c001aaf4:	52                   	push   edx
c001aaf5:	50                   	push   eax
c001aaf6:	e8 72 fb ff ff       	call   c001a66d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001aafb:	90                   	nop
c001aafc:	83 c4 1c             	add    esp,0x1c
c001aaff:	e9 b4 fd ff ff       	jmp    c001a8b8 <Vm::x87Handler(regs*)+0xba>
c001ab04:	8d 50 30             	lea    edx,[eax+0x30]
c001ab07:	80 fa 07             	cmp    dl,0x7
c001ab0a:	77 10                	ja     c001ab1c <Vm::x87Handler(regs*)+0x31e>
c001ab0c:	83 ec 0c             	sub    esp,0xc
c001ab0f:	2d d0 00 00 00       	sub    eax,0xd0
c001ab14:	e9 c3 03 00 00       	jmp    c001aedc <Vm::x87Handler(regs*)+0x6de>
c001ab19:	8d 76 00             	lea    esi,[esi+0x0]
c001ab1c:	8d 50 28             	lea    edx,[eax+0x28]
c001ab1f:	80 fa 07             	cmp    dl,0x7
c001ab22:	77 10                	ja     c001ab34 <Vm::x87Handler(regs*)+0x336>
c001ab24:	83 ec 0c             	sub    esp,0xc
c001ab27:	2d d8 00 00 00       	sub    eax,0xd8
c001ab2c:	e9 e7 03 00 00       	jmp    c001af18 <Vm::x87Handler(regs*)+0x71a>
c001ab31:	8d 76 00             	lea    esi,[esi+0x0]
c001ab34:	8d 50 20             	lea    edx,[eax+0x20]
c001ab37:	80 fa 07             	cmp    dl,0x7
c001ab3a:	77 1c                	ja     c001ab58 <Vm::x87Handler(regs*)+0x35a>
c001ab3c:	83 ec 0c             	sub    esp,0xc
c001ab3f:	2d e0 00 00 00       	sub    eax,0xe0
c001ab44:	50                   	push   eax
c001ab45:	e8 74 fb ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ab4a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab51:	89 c6                	mov    esi,eax
c001ab53:	89 d7                	mov    edi,edx
c001ab55:	eb 25                	jmp    c001ab7c <Vm::x87Handler(regs*)+0x37e>
c001ab57:	90                   	nop
c001ab58:	8d 50 18             	lea    edx,[eax+0x18]
c001ab5b:	80 fa 07             	cmp    dl,0x7
c001ab5e:	77 30                	ja     c001ab90 <Vm::x87Handler(regs*)+0x392>
c001ab60:	83 ec 0c             	sub    esp,0xc
c001ab63:	6a 00                	push   0x0
c001ab65:	e8 54 fb ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ab6a:	89 c6                	mov    esi,eax
c001ab6c:	89 d7                	mov    edi,edx
c001ab6e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ab72:	2d e8 00 00 00       	sub    eax,0xe8
c001ab77:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab7a:	66 90                	xchg   ax,ax
c001ab7c:	e8 3d fb ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ab81:	57                   	push   edi
c001ab82:	56                   	push   esi
c001ab83:	52                   	push   edx
c001ab84:	50                   	push   eax
c001ab85:	e8 d4 fa ff ff       	call   c001a65e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ab8a:	e9 6d ff ff ff       	jmp    c001aafc <Vm::x87Handler(regs*)+0x2fe>
c001ab8f:	90                   	nop
c001ab90:	8d 50 10             	lea    edx,[eax+0x10]
c001ab93:	80 fa 07             	cmp    dl,0x7
c001ab96:	77 1c                	ja     c001abb4 <Vm::x87Handler(regs*)+0x3b6>
c001ab98:	83 ec 0c             	sub    esp,0xc
c001ab9b:	2d f0 00 00 00       	sub    eax,0xf0
c001aba0:	50                   	push   eax
c001aba1:	e8 18 fb ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001aba6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001abad:	89 c6                	mov    esi,eax
c001abaf:	89 d7                	mov    edi,edx
c001abb1:	eb 25                	jmp    c001abd8 <Vm::x87Handler(regs*)+0x3da>
c001abb3:	90                   	nop
c001abb4:	3c f7                	cmp    al,0xf7
c001abb6:	0f 86 00 04 00 00    	jbe    c001afbc <Vm::x87Handler(regs*)+0x7be>
c001abbc:	83 ec 0c             	sub    esp,0xc
c001abbf:	6a 00                	push   0x0
c001abc1:	e8 f8 fa ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001abc6:	89 c6                	mov    esi,eax
c001abc8:	89 d7                	mov    edi,edx
c001abca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001abce:	2d f8 00 00 00       	sub    eax,0xf8
c001abd3:	89 04 24             	mov    DWORD PTR [esp],eax
c001abd6:	66 90                	xchg   ax,ax
c001abd8:	e8 e1 fa ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001abdd:	57                   	push   edi
c001abde:	56                   	push   esi
c001abdf:	52                   	push   edx
c001abe0:	50                   	push   eax
c001abe1:	e8 a6 fa ff ff       	call   c001a68c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001abe6:	83 c4 1c             	add    esp,0x1c
c001abe9:	52                   	push   edx
c001abea:	50                   	push   eax
c001abeb:	6a 00                	push   0x0
c001abed:	e9 6a 02 00 00       	jmp    c001ae5c <Vm::x87Handler(regs*)+0x65e>
c001abf2:	66 90                	xchg   ax,ax
c001abf4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001abf8:	8d 50 40             	lea    edx,[eax+0x40]
c001abfb:	80 fa 07             	cmp    dl,0x7
c001abfe:	77 38                	ja     c001ac38 <Vm::x87Handler(regs*)+0x43a>
c001ac00:	83 ec 0c             	sub    esp,0xc
c001ac03:	2d c0 00 00 00       	sub    eax,0xc0
c001ac08:	50                   	push   eax
c001ac09:	e8 b0 fa ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ac0e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac15:	89 c6                	mov    esi,eax
c001ac17:	89 d7                	mov    edi,edx
c001ac19:	e8 a0 fa ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ac1e:	57                   	push   edi
c001ac1f:	56                   	push   esi
c001ac20:	52                   	push   edx
c001ac21:	50                   	push   eax
c001ac22:	e8 0d fa ff ff       	call   c001a634 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ac27:	83 c4 1c             	add    esp,0x1c
c001ac2a:	52                   	push   edx
c001ac2b:	50                   	push   eax
c001ac2c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac30:	2d c0 00 00 00       	sub    eax,0xc0
c001ac35:	eb 41                	jmp    c001ac78 <Vm::x87Handler(regs*)+0x47a>
c001ac37:	90                   	nop
c001ac38:	8d 50 38             	lea    edx,[eax+0x38]
c001ac3b:	80 fa 07             	cmp    dl,0x7
c001ac3e:	77 40                	ja     c001ac80 <Vm::x87Handler(regs*)+0x482>
c001ac40:	83 ec 0c             	sub    esp,0xc
c001ac43:	2d c8 00 00 00       	sub    eax,0xc8
c001ac48:	50                   	push   eax
c001ac49:	e8 70 fa ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ac4e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac55:	89 c6                	mov    esi,eax
c001ac57:	89 d7                	mov    edi,edx
c001ac59:	e8 60 fa ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ac5e:	57                   	push   edi
c001ac5f:	56                   	push   esi
c001ac60:	52                   	push   edx
c001ac61:	50                   	push   eax
c001ac62:	e8 06 fa ff ff       	call   c001a66d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ac67:	83 c4 1c             	add    esp,0x1c
c001ac6a:	52                   	push   edx
c001ac6b:	50                   	push   eax
c001ac6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac70:	2d c8 00 00 00       	sub    eax,0xc8
c001ac75:	8d 76 00             	lea    esi,[esi+0x0]
c001ac78:	50                   	push   eax
c001ac79:	e9 42 fc ff ff       	jmp    c001a8c0 <Vm::x87Handler(regs*)+0xc2>
c001ac7e:	66 90                	xchg   ax,ax
c001ac80:	83 c0 18             	add    eax,0x18
c001ac83:	3c 07                	cmp    al,0x7
c001ac85:	0f 87 6d 04 00 00    	ja     c001b0f8 <Vm::x87Handler(regs*)+0x8fa>
c001ac8b:	83 ec 0c             	sub    esp,0xc
c001ac8e:	6a 00                	push   0x0
c001ac90:	e8 29 fa ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ac95:	89 c6                	mov    esi,eax
c001ac97:	89 d7                	mov    edi,edx
c001ac99:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac9d:	2d e8 00 00 00       	sub    eax,0xe8
c001aca2:	89 04 24             	mov    DWORD PTR [esp],eax
c001aca5:	e8 14 fa ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001acaa:	57                   	push   edi
c001acab:	56                   	push   esi
c001acac:	52                   	push   edx
c001acad:	50                   	push   eax
c001acae:	e8 ab f9 ff ff       	call   c001a65e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001acb3:	83 c4 1c             	add    esp,0x1c
c001acb6:	52                   	push   edx
c001acb7:	50                   	push   eax
c001acb8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001acbc:	2d e8 00 00 00       	sub    eax,0xe8
c001acc1:	eb b5                	jmp    c001ac78 <Vm::x87Handler(regs*)+0x47a>
c001acc3:	90                   	nop
c001acc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001acc8:	8d 50 40             	lea    edx,[eax+0x40]
c001accb:	80 fa 07             	cmp    dl,0x7
c001acce:	77 3c                	ja     c001ad0c <Vm::x87Handler(regs*)+0x50e>
c001acd0:	83 ec 0c             	sub    esp,0xc
c001acd3:	2d c0 00 00 00       	sub    eax,0xc0
c001acd8:	50                   	push   eax
c001acd9:	e8 e0 f9 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001acde:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ace5:	89 c6                	mov    esi,eax
c001ace7:	89 d7                	mov    edi,edx
c001ace9:	e8 d0 f9 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001acee:	57                   	push   edi
c001acef:	56                   	push   esi
c001acf0:	52                   	push   edx
c001acf1:	50                   	push   eax
c001acf2:	e8 3d f9 ff ff       	call   c001a634 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001acf7:	83 c4 1c             	add    esp,0x1c
c001acfa:	52                   	push   edx
c001acfb:	50                   	push   eax
c001acfc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad00:	2d c0 00 00 00       	sub    eax,0xc0
c001ad05:	e9 b2 01 00 00       	jmp    c001aebc <Vm::x87Handler(regs*)+0x6be>
c001ad0a:	66 90                	xchg   ax,ax
c001ad0c:	8d 50 20             	lea    edx,[eax+0x20]
c001ad0f:	80 fa 07             	cmp    dl,0x7
c001ad12:	77 3c                	ja     c001ad50 <Vm::x87Handler(regs*)+0x552>
c001ad14:	83 ec 0c             	sub    esp,0xc
c001ad17:	2d e0 00 00 00       	sub    eax,0xe0
c001ad1c:	50                   	push   eax
c001ad1d:	e8 9c f9 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ad22:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad29:	89 c6                	mov    esi,eax
c001ad2b:	89 d7                	mov    edi,edx
c001ad2d:	e8 8c f9 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ad32:	57                   	push   edi
c001ad33:	56                   	push   esi
c001ad34:	52                   	push   edx
c001ad35:	50                   	push   eax
c001ad36:	e8 23 f9 ff ff       	call   c001a65e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ad3b:	83 c4 1c             	add    esp,0x1c
c001ad3e:	52                   	push   edx
c001ad3f:	50                   	push   eax
c001ad40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad44:	2d e0 00 00 00       	sub    eax,0xe0
c001ad49:	e9 6e 01 00 00       	jmp    c001aebc <Vm::x87Handler(regs*)+0x6be>
c001ad4e:	66 90                	xchg   ax,ax
c001ad50:	8d 50 18             	lea    edx,[eax+0x18]
c001ad53:	80 fa 07             	cmp    dl,0x7
c001ad56:	77 3c                	ja     c001ad94 <Vm::x87Handler(regs*)+0x596>
c001ad58:	83 ec 0c             	sub    esp,0xc
c001ad5b:	6a 00                	push   0x0
c001ad5d:	e8 5c f9 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ad62:	89 c6                	mov    esi,eax
c001ad64:	89 d7                	mov    edi,edx
c001ad66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad6a:	2d e8 00 00 00       	sub    eax,0xe8
c001ad6f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad72:	e8 47 f9 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ad77:	57                   	push   edi
c001ad78:	56                   	push   esi
c001ad79:	52                   	push   edx
c001ad7a:	50                   	push   eax
c001ad7b:	e8 de f8 ff ff       	call   c001a65e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ad80:	83 c4 1c             	add    esp,0x1c
c001ad83:	52                   	push   edx
c001ad84:	50                   	push   eax
c001ad85:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad89:	2d e8 00 00 00       	sub    eax,0xe8
c001ad8e:	e9 29 01 00 00       	jmp    c001aebc <Vm::x87Handler(regs*)+0x6be>
c001ad93:	90                   	nop
c001ad94:	8d 50 38             	lea    edx,[eax+0x38]
c001ad97:	80 fa 07             	cmp    dl,0x7
c001ad9a:	77 3c                	ja     c001add8 <Vm::x87Handler(regs*)+0x5da>
c001ad9c:	83 ec 0c             	sub    esp,0xc
c001ad9f:	2d c8 00 00 00       	sub    eax,0xc8
c001ada4:	50                   	push   eax
c001ada5:	e8 14 f9 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001adaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001adb1:	89 c6                	mov    esi,eax
c001adb3:	89 d7                	mov    edi,edx
c001adb5:	e8 04 f9 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001adba:	57                   	push   edi
c001adbb:	56                   	push   esi
c001adbc:	52                   	push   edx
c001adbd:	50                   	push   eax
c001adbe:	e8 aa f8 ff ff       	call   c001a66d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001adc3:	83 c4 1c             	add    esp,0x1c
c001adc6:	52                   	push   edx
c001adc7:	50                   	push   eax
c001adc8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001adcc:	2d c8 00 00 00       	sub    eax,0xc8
c001add1:	e9 82 00 00 00       	jmp    c001ae58 <Vm::x87Handler(regs*)+0x65a>
c001add6:	66 90                	xchg   ax,ax
c001add8:	3c f7                	cmp    al,0xf7
c001adda:	76 38                	jbe    c001ae14 <Vm::x87Handler(regs*)+0x616>
c001addc:	83 ec 0c             	sub    esp,0xc
c001addf:	6a 00                	push   0x0
c001ade1:	e8 d8 f8 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ade6:	89 c6                	mov    esi,eax
c001ade8:	89 d7                	mov    edi,edx
c001adea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001adee:	2d f8 00 00 00       	sub    eax,0xf8
c001adf3:	89 04 24             	mov    DWORD PTR [esp],eax
c001adf6:	e8 c3 f8 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001adfb:	57                   	push   edi
c001adfc:	56                   	push   esi
c001adfd:	52                   	push   edx
c001adfe:	50                   	push   eax
c001adff:	e8 88 f8 ff ff       	call   c001a68c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ae04:	83 c4 1c             	add    esp,0x1c
c001ae07:	52                   	push   edx
c001ae08:	50                   	push   eax
c001ae09:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae0d:	2d f8 00 00 00       	sub    eax,0xf8
c001ae12:	eb 44                	jmp    c001ae58 <Vm::x87Handler(regs*)+0x65a>
c001ae14:	8d 50 10             	lea    edx,[eax+0x10]
c001ae17:	80 fa 07             	cmp    dl,0x7
c001ae1a:	0f 87 6c 01 00 00    	ja     c001af8c <Vm::x87Handler(regs*)+0x78e>
c001ae20:	83 ec 0c             	sub    esp,0xc
c001ae23:	2d f0 00 00 00       	sub    eax,0xf0
c001ae28:	50                   	push   eax
c001ae29:	e8 90 f8 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ae2e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae35:	89 c6                	mov    esi,eax
c001ae37:	89 d7                	mov    edi,edx
c001ae39:	e8 80 f8 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ae3e:	57                   	push   edi
c001ae3f:	56                   	push   esi
c001ae40:	52                   	push   edx
c001ae41:	50                   	push   eax
c001ae42:	e8 45 f8 ff ff       	call   c001a68c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ae47:	83 c4 1c             	add    esp,0x1c
c001ae4a:	52                   	push   edx
c001ae4b:	50                   	push   eax
c001ae4c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae50:	2d f0 00 00 00       	sub    eax,0xf0
c001ae55:	8d 76 00             	lea    esi,[esi+0x0]
c001ae58:	50                   	push   eax
c001ae59:	8d 76 00             	lea    esi,[esi+0x0]
c001ae5c:	e8 a0 f8 ff ff       	call   c001a701 <Vm::fpuSetReg(int, unsigned long long)>
c001ae61:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ae65:	e8 41 f9 ff ff       	call   c001a7ab <Vm::fpuPop()>
c001ae6a:	e9 0d fa ff ff       	jmp    c001a87c <Vm::x87Handler(regs*)+0x7e>
c001ae6f:	90                   	nop
c001ae70:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae74:	8d 50 30             	lea    edx,[eax+0x30]
c001ae77:	80 fa 07             	cmp    dl,0x7
c001ae7a:	77 20                	ja     c001ae9c <Vm::x87Handler(regs*)+0x69e>
c001ae7c:	83 ec 0c             	sub    esp,0xc
c001ae7f:	6a 00                	push   0x0
c001ae81:	e8 38 f8 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001ae86:	83 c4 0c             	add    esp,0xc
c001ae89:	52                   	push   edx
c001ae8a:	50                   	push   eax
c001ae8b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae8f:	2d d0 00 00 00       	sub    eax,0xd0
c001ae94:	e9 df fd ff ff       	jmp    c001ac78 <Vm::x87Handler(regs*)+0x47a>
c001ae99:	8d 76 00             	lea    esi,[esi+0x0]
c001ae9c:	8d 50 28             	lea    edx,[eax+0x28]
c001ae9f:	80 fa 07             	cmp    dl,0x7
c001aea2:	77 28                	ja     c001aecc <Vm::x87Handler(regs*)+0x6ce>
c001aea4:	83 ec 0c             	sub    esp,0xc
c001aea7:	6a 00                	push   0x0
c001aea9:	e8 10 f8 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001aeae:	83 c4 0c             	add    esp,0xc
c001aeb1:	52                   	push   edx
c001aeb2:	50                   	push   eax
c001aeb3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aeb7:	2d d8 00 00 00       	sub    eax,0xd8
c001aebc:	50                   	push   eax
c001aebd:	e8 3f f8 ff ff       	call   c001a701 <Vm::fpuSetReg(int, unsigned long long)>
c001aec2:	e8 e4 f8 ff ff       	call   c001a7ab <Vm::fpuPop()>
c001aec7:	e9 ac f9 ff ff       	jmp    c001a878 <Vm::x87Handler(regs*)+0x7a>
c001aecc:	8d 50 20             	lea    edx,[eax+0x20]
c001aecf:	80 fa 07             	cmp    dl,0x7
c001aed2:	77 30                	ja     c001af04 <Vm::x87Handler(regs*)+0x706>
c001aed4:	83 ec 0c             	sub    esp,0xc
c001aed7:	2d e0 00 00 00       	sub    eax,0xe0
c001aedc:	50                   	push   eax
c001aedd:	e8 dc f7 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001aee2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aee9:	89 c6                	mov    esi,eax
c001aeeb:	89 d7                	mov    edi,edx
c001aeed:	e8 cc f7 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001aef2:	57                   	push   edi
c001aef3:	56                   	push   esi
c001aef4:	52                   	push   edx
c001aef5:	50                   	push   eax
c001aef6:	e8 e3 f6 ff ff       	call   c001a5de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001aefb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001aeff:	e9 78 02 00 00       	jmp    c001b17c <Vm::x87Handler(regs*)+0x97e>
c001af04:	8d 50 18             	lea    edx,[eax+0x18]
c001af07:	80 fa 07             	cmp    dl,0x7
c001af0a:	0f 87 10 fb ff ff    	ja     c001aa20 <Vm::x87Handler(regs*)+0x222>
c001af10:	83 ec 0c             	sub    esp,0xc
c001af13:	2d e8 00 00 00       	sub    eax,0xe8
c001af18:	50                   	push   eax
c001af19:	e8 a0 f7 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001af1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af25:	89 c6                	mov    esi,eax
c001af27:	89 d7                	mov    edi,edx
c001af29:	e8 90 f7 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001af2e:	57                   	push   edi
c001af2f:	56                   	push   esi
c001af30:	52                   	push   edx
c001af31:	50                   	push   eax
c001af32:	e8 a7 f6 ff ff       	call   c001a5de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001af37:	83 c4 20             	add    esp,0x20
c001af3a:	e8 6c f8 ff ff       	call   c001a7ab <Vm::fpuPop()>
c001af3f:	eb 6f                	jmp    c001afb0 <Vm::x87Handler(regs*)+0x7b2>
c001af41:	8d 76 00             	lea    esi,[esi+0x0]
c001af44:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001af48:	0f 85 22 01 00 00    	jne    c001b070 <Vm::x87Handler(regs*)+0x872>
c001af4e:	66 90                	xchg   ax,ax
c001af50:	83 ec 0c             	sub    esp,0xc
c001af53:	6a 01                	push   0x1
c001af55:	e8 64 f7 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001af5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af61:	89 c6                	mov    esi,eax
c001af63:	89 d7                	mov    edi,edx
c001af65:	e8 54 f7 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001af6a:	57                   	push   edi
c001af6b:	56                   	push   esi
c001af6c:	52                   	push   edx
c001af6d:	50                   	push   eax
c001af6e:	e8 6b f6 ff ff       	call   c001a5de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001af73:	83 c4 20             	add    esp,0x20
c001af76:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001af7a:	e8 2c f8 ff ff       	call   c001a7ab <Vm::fpuPop()>
c001af7f:	e8 27 f8 ff ff       	call   c001a7ab <Vm::fpuPop()>
c001af84:	e9 f7 f8 ff ff       	jmp    c001a880 <Vm::x87Handler(regs*)+0x82>
c001af89:	8d 76 00             	lea    esi,[esi+0x0]
c001af8c:	3c d9                	cmp    al,0xd9
c001af8e:	0f 85 e8 02 00 00    	jne    c001b27c <Vm::x87Handler(regs*)+0xa7e>
c001af94:	eb ba                	jmp    c001af50 <Vm::x87Handler(regs*)+0x752>
c001af96:	66 90                	xchg   ax,ax
c001af98:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001af9c:	0f 85 2a 03 00 00    	jne    c001b2cc <Vm::x87Handler(regs*)+0xace>
c001afa2:	0f b7 05 e0 9e 02 c0 	movzx  eax,WORD PTR ds:0xc0029ee0
c001afa9:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001afad:	8d 76 00             	lea    esi,[esi+0x0]
c001afb0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001afb4:	e9 c7 f8 ff ff       	jmp    c001a880 <Vm::x87Handler(regs*)+0x82>
c001afb9:	8d 76 00             	lea    esi,[esi+0x0]
c001afbc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001afc0:	84 d2                	test   dl,dl
c001afc2:	75 10                	jne    c001afd4 <Vm::x87Handler(regs*)+0x7d6>
c001afc4:	83 ec 0c             	sub    esp,0xc
c001afc7:	ff 36                	push   DWORD PTR [esi]
c001afc9:	e8 29 f4 ff ff       	call   c001a3f7 <Vm::fpu32ToInternal(unsigned int)>
c001afce:	e9 39 01 00 00       	jmp    c001b10c <Vm::x87Handler(regs*)+0x90e>
c001afd3:	90                   	nop
c001afd4:	80 fa 01             	cmp    dl,0x1
c001afd7:	75 0f                	jne    c001afe8 <Vm::x87Handler(regs*)+0x7ea>
c001afd9:	83 ec 0c             	sub    esp,0xc
c001afdc:	ff 36                	push   DWORD PTR [esi]
c001afde:	e8 14 f4 ff ff       	call   c001a3f7 <Vm::fpu32ToInternal(unsigned int)>
c001afe3:	e9 b4 02 00 00       	jmp    c001b29c <Vm::x87Handler(regs*)+0xa9e>
c001afe8:	80 fa 04             	cmp    dl,0x4
c001afeb:	75 0f                	jne    c001affc <Vm::x87Handler(regs*)+0x7fe>
c001afed:	83 ec 0c             	sub    esp,0xc
c001aff0:	ff 36                	push   DWORD PTR [esi]
c001aff2:	e8 00 f4 ff ff       	call   c001a3f7 <Vm::fpu32ToInternal(unsigned int)>
c001aff7:	e9 9c 01 00 00       	jmp    c001b198 <Vm::x87Handler(regs*)+0x99a>
c001affc:	80 fa 05             	cmp    dl,0x5
c001afff:	75 1b                	jne    c001b01c <Vm::x87Handler(regs*)+0x81e>
c001b001:	83 ec 0c             	sub    esp,0xc
c001b004:	6a 00                	push   0x0
c001b006:	e8 b3 f6 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001b00b:	89 c7                	mov    edi,eax
c001b00d:	89 d5                	mov    ebp,edx
c001b00f:	58                   	pop    eax
c001b010:	ff 36                	push   DWORD PTR [esi]
c001b012:	e8 e0 f3 ff ff       	call   c001a3f7 <Vm::fpu32ToInternal(unsigned int)>
c001b017:	e9 bc 01 00 00       	jmp    c001b1d8 <Vm::x87Handler(regs*)+0x9da>
c001b01c:	80 fa 06             	cmp    dl,0x6
c001b01f:	75 0f                	jne    c001b030 <Vm::x87Handler(regs*)+0x832>
c001b021:	83 ec 0c             	sub    esp,0xc
c001b024:	ff 36                	push   DWORD PTR [esi]
c001b026:	e8 cc f3 ff ff       	call   c001a3f7 <Vm::fpu32ToInternal(unsigned int)>
c001b02b:	e9 cc 01 00 00       	jmp    c001b1fc <Vm::x87Handler(regs*)+0x9fe>
c001b030:	31 c0                	xor    eax,eax
c001b032:	80 fa 07             	cmp    dl,0x7
c001b035:	0f 85 d5 02 00 00    	jne    c001b310 <Vm::x87Handler(regs*)+0xb12>
c001b03b:	83 ec 0c             	sub    esp,0xc
c001b03e:	6a 00                	push   0x0
c001b040:	e8 79 f6 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001b045:	89 c7                	mov    edi,eax
c001b047:	89 d5                	mov    ebp,edx
c001b049:	58                   	pop    eax
c001b04a:	ff 36                	push   DWORD PTR [esi]
c001b04c:	e8 a6 f3 ff ff       	call   c001a3f7 <Vm::fpu32ToInternal(unsigned int)>
c001b051:	e9 ee 01 00 00       	jmp    c001b244 <Vm::x87Handler(regs*)+0xa46>
c001b056:	66 90                	xchg   ax,ax
c001b058:	80 fa 03             	cmp    dl,0x3
c001b05b:	0f 85 f7 01 00 00    	jne    c001b258 <Vm::x87Handler(regs*)+0xa5a>
c001b061:	e8 45 f7 ff ff       	call   c001a7ab <Vm::fpuPop()>
c001b066:	51                   	push   ecx
c001b067:	51                   	push   ecx
c001b068:	e9 03 02 00 00       	jmp    c001b270 <Vm::x87Handler(regs*)+0xa72>
c001b06d:	8d 76 00             	lea    esi,[esi+0x0]
c001b070:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b074:	80 fa 01             	cmp    dl,0x1
c001b077:	75 0b                	jne    c001b084 <Vm::x87Handler(regs*)+0x886>
c001b079:	57                   	push   edi
c001b07a:	57                   	push   edi
c001b07b:	8b 06                	mov    eax,DWORD PTR [esi]
c001b07d:	e9 0e 02 00 00       	jmp    c001b290 <Vm::x87Handler(regs*)+0xa92>
c001b082:	66 90                	xchg   ax,ax
c001b084:	80 fa 04             	cmp    dl,0x4
c001b087:	75 13                	jne    c001b09c <Vm::x87Handler(regs*)+0x89e>
c001b089:	31 d2                	xor    edx,edx
c001b08b:	51                   	push   ecx
c001b08c:	51                   	push   ecx
c001b08d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b08f:	52                   	push   edx
c001b090:	50                   	push   eax
c001b091:	e8 4a f4 ff ff       	call   c001a4e0 <Vm::fpuLongToFloat(long long)>
c001b096:	e9 fd 00 00 00       	jmp    c001b198 <Vm::x87Handler(regs*)+0x99a>
c001b09b:	90                   	nop
c001b09c:	31 c0                	xor    eax,eax
c001b09e:	80 fa 07             	cmp    dl,0x7
c001b0a1:	0f 85 69 02 00 00    	jne    c001b310 <Vm::x87Handler(regs*)+0xb12>
c001b0a7:	83 ec 0c             	sub    esp,0xc
c001b0aa:	6a 00                	push   0x0
c001b0ac:	e8 0d f6 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001b0b1:	89 c7                	mov    edi,eax
c001b0b3:	89 d5                	mov    ebp,edx
c001b0b5:	58                   	pop    eax
c001b0b6:	8b 06                	mov    eax,DWORD PTR [esi]
c001b0b8:	5a                   	pop    edx
c001b0b9:	31 d2                	xor    edx,edx
c001b0bb:	52                   	push   edx
c001b0bc:	50                   	push   eax
c001b0bd:	e8 1e f4 ff ff       	call   c001a4e0 <Vm::fpuLongToFloat(long long)>
c001b0c2:	e9 7d 01 00 00       	jmp    c001b244 <Vm::x87Handler(regs*)+0xa46>
c001b0c7:	90                   	nop
c001b0c8:	84 d2                	test   dl,dl
c001b0ca:	75 10                	jne    c001b0dc <Vm::x87Handler(regs*)+0x8de>
c001b0cc:	31 d2                	xor    edx,edx
c001b0ce:	55                   	push   ebp
c001b0cf:	55                   	push   ebp
c001b0d0:	8b 06                	mov    eax,DWORD PTR [esi]
c001b0d2:	52                   	push   edx
c001b0d3:	50                   	push   eax
c001b0d4:	e9 03 02 00 00       	jmp    c001b2dc <Vm::x87Handler(regs*)+0xade>
c001b0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0dc:	31 c0                	xor    eax,eax
c001b0de:	80 fa 02             	cmp    dl,0x2
c001b0e1:	0f 85 29 02 00 00    	jne    c001b310 <Vm::x87Handler(regs*)+0xb12>
c001b0e7:	83 ec 0c             	sub    esp,0xc
c001b0ea:	6a 00                	push   0x0
c001b0ec:	e8 cd f5 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001b0f1:	59                   	pop    ecx
c001b0f2:	5f                   	pop    edi
c001b0f3:	e9 18 f9 ff ff       	jmp    c001aa10 <Vm::x87Handler(regs*)+0x212>
c001b0f8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b0fc:	84 d2                	test   dl,dl
c001b0fe:	75 2c                	jne    c001b12c <Vm::x87Handler(regs*)+0x92e>
c001b100:	50                   	push   eax
c001b101:	50                   	push   eax
c001b102:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b105:	ff 36                	push   DWORD PTR [esi]
c001b107:	e8 30 f3 ff ff       	call   c001a43c <Vm::fpu64ToInternal(unsigned long long)>
c001b10c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b113:	89 c6                	mov    esi,eax
c001b115:	89 d7                	mov    edi,edx
c001b117:	e8 a2 f5 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001b11c:	57                   	push   edi
c001b11d:	56                   	push   esi
c001b11e:	52                   	push   edx
c001b11f:	50                   	push   eax
c001b120:	e8 0f f5 ff ff       	call   c001a634 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001b125:	e9 8e 01 00 00       	jmp    c001b2b8 <Vm::x87Handler(regs*)+0xaba>
c001b12a:	66 90                	xchg   ax,ax
c001b12c:	80 fa 01             	cmp    dl,0x1
c001b12f:	75 13                	jne    c001b144 <Vm::x87Handler(regs*)+0x946>
c001b131:	50                   	push   eax
c001b132:	50                   	push   eax
c001b133:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b136:	ff 36                	push   DWORD PTR [esi]
c001b138:	e8 ff f2 ff ff       	call   c001a43c <Vm::fpu64ToInternal(unsigned long long)>
c001b13d:	e9 5a 01 00 00       	jmp    c001b29c <Vm::x87Handler(regs*)+0xa9e>
c001b142:	66 90                	xchg   ax,ax
c001b144:	80 fa 02             	cmp    dl,0x2
c001b147:	0f 85 03 f9 ff ff    	jne    c001aa50 <Vm::x87Handler(regs*)+0x252>
c001b14d:	55                   	push   ebp
c001b14e:	55                   	push   ebp
c001b14f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b152:	ff 36                	push   DWORD PTR [esi]
c001b154:	e8 e3 f2 ff ff       	call   c001a43c <Vm::fpu64ToInternal(unsigned long long)>
c001b159:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b160:	89 c6                	mov    esi,eax
c001b162:	89 d7                	mov    edi,edx
c001b164:	e8 55 f5 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001b169:	57                   	push   edi
c001b16a:	56                   	push   esi
c001b16b:	52                   	push   edx
c001b16c:	50                   	push   eax
c001b16d:	e8 6c f4 ff ff       	call   c001a5de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b172:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b176:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001b179:	8d 76 00             	lea    esi,[esi+0x0]
c001b17c:	83 c4 20             	add    esp,0x20
c001b17f:	e9 fc f6 ff ff       	jmp    c001a880 <Vm::x87Handler(regs*)+0x82>
c001b184:	80 fa 04             	cmp    dl,0x4
c001b187:	75 2f                	jne    c001b1b8 <Vm::x87Handler(regs*)+0x9ba>
c001b189:	51                   	push   ecx
c001b18a:	51                   	push   ecx
c001b18b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b18e:	ff 36                	push   DWORD PTR [esi]
c001b190:	e8 a7 f2 ff ff       	call   c001a43c <Vm::fpu64ToInternal(unsigned long long)>
c001b195:	8d 76 00             	lea    esi,[esi+0x0]
c001b198:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b19f:	89 c6                	mov    esi,eax
c001b1a1:	89 d7                	mov    edi,edx
c001b1a3:	e8 16 f5 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001b1a8:	57                   	push   edi
c001b1a9:	56                   	push   esi
c001b1aa:	52                   	push   edx
c001b1ab:	50                   	push   eax
c001b1ac:	e8 ad f4 ff ff       	call   c001a65e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b1b1:	e9 02 01 00 00       	jmp    c001b2b8 <Vm::x87Handler(regs*)+0xaba>
c001b1b6:	66 90                	xchg   ax,ax
c001b1b8:	80 fa 05             	cmp    dl,0x5
c001b1bb:	75 2b                	jne    c001b1e8 <Vm::x87Handler(regs*)+0x9ea>
c001b1bd:	83 ec 0c             	sub    esp,0xc
c001b1c0:	6a 00                	push   0x0
c001b1c2:	e8 f7 f4 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001b1c7:	89 c7                	mov    edi,eax
c001b1c9:	89 d5                	mov    ebp,edx
c001b1cb:	58                   	pop    eax
c001b1cc:	5a                   	pop    edx
c001b1cd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b1d0:	ff 36                	push   DWORD PTR [esi]
c001b1d2:	e8 65 f2 ff ff       	call   c001a43c <Vm::fpu64ToInternal(unsigned long long)>
c001b1d7:	90                   	nop
c001b1d8:	83 c4 10             	add    esp,0x10
c001b1db:	55                   	push   ebp
c001b1dc:	57                   	push   edi
c001b1dd:	52                   	push   edx
c001b1de:	50                   	push   eax
c001b1df:	e8 7a f4 ff ff       	call   c001a65e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b1e4:	eb 6a                	jmp    c001b250 <Vm::x87Handler(regs*)+0xa52>
c001b1e6:	66 90                	xchg   ax,ax
c001b1e8:	80 fa 06             	cmp    dl,0x6
c001b1eb:	75 2f                	jne    c001b21c <Vm::x87Handler(regs*)+0xa1e>
c001b1ed:	51                   	push   ecx
c001b1ee:	51                   	push   ecx
c001b1ef:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b1f2:	ff 36                	push   DWORD PTR [esi]
c001b1f4:	e8 43 f2 ff ff       	call   c001a43c <Vm::fpu64ToInternal(unsigned long long)>
c001b1f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b203:	89 c6                	mov    esi,eax
c001b205:	89 d7                	mov    edi,edx
c001b207:	e8 b2 f4 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001b20c:	57                   	push   edi
c001b20d:	56                   	push   esi
c001b20e:	52                   	push   edx
c001b20f:	50                   	push   eax
c001b210:	e8 77 f4 ff ff       	call   c001a68c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b215:	e9 9e 00 00 00       	jmp    c001b2b8 <Vm::x87Handler(regs*)+0xaba>
c001b21a:	66 90                	xchg   ax,ax
c001b21c:	31 c0                	xor    eax,eax
c001b21e:	80 fa 07             	cmp    dl,0x7
c001b221:	0f 85 e9 00 00 00    	jne    c001b310 <Vm::x87Handler(regs*)+0xb12>
c001b227:	83 ec 0c             	sub    esp,0xc
c001b22a:	6a 00                	push   0x0
c001b22c:	e8 8d f4 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001b231:	89 c7                	mov    edi,eax
c001b233:	89 d5                	mov    ebp,edx
c001b235:	58                   	pop    eax
c001b236:	5a                   	pop    edx
c001b237:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b23a:	ff 36                	push   DWORD PTR [esi]
c001b23c:	e8 fb f1 ff ff       	call   c001a43c <Vm::fpu64ToInternal(unsigned long long)>
c001b241:	8d 76 00             	lea    esi,[esi+0x0]
c001b244:	83 c4 10             	add    esp,0x10
c001b247:	55                   	push   ebp
c001b248:	57                   	push   edi
c001b249:	52                   	push   edx
c001b24a:	50                   	push   eax
c001b24b:	e8 3c f4 ff ff       	call   c001a68c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b250:	83 c4 0c             	add    esp,0xc
c001b253:	eb 67                	jmp    c001b2bc <Vm::x87Handler(regs*)+0xabe>
c001b255:	8d 76 00             	lea    esi,[esi+0x0]
c001b258:	31 c0                	xor    eax,eax
c001b25a:	80 fa 02             	cmp    dl,0x2
c001b25d:	0f 85 ad 00 00 00    	jne    c001b310 <Vm::x87Handler(regs*)+0xb12>
c001b263:	83 ec 0c             	sub    esp,0xc
c001b266:	6a 00                	push   0x0
c001b268:	e8 51 f4 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001b26d:	59                   	pop    ecx
c001b26e:	5f                   	pop    edi
c001b26f:	90                   	nop
c001b270:	52                   	push   edx
c001b271:	50                   	push   eax
c001b272:	e8 77 f1 ff ff       	call   c001a3ee <Vm::fpuInternalTo64(unsigned long long)>
c001b277:	e9 84 00 00 00       	jmp    c001b300 <Vm::x87Handler(regs*)+0xb02>
c001b27c:	31 c0                	xor    eax,eax
c001b27e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b283:	0f 85 87 00 00 00    	jne    c001b310 <Vm::x87Handler(regs*)+0xb12>
c001b289:	50                   	push   eax
c001b28a:	50                   	push   eax
c001b28b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001b28e:	66 90                	xchg   ax,ax
c001b290:	31 d2                	xor    edx,edx
c001b292:	52                   	push   edx
c001b293:	50                   	push   eax
c001b294:	e8 47 f2 ff ff       	call   c001a4e0 <Vm::fpuLongToFloat(long long)>
c001b299:	8d 76 00             	lea    esi,[esi+0x0]
c001b29c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b2a3:	89 c6                	mov    esi,eax
c001b2a5:	89 d7                	mov    edi,edx
c001b2a7:	e8 12 f4 ff ff       	call   c001a6be <Vm::fpuGetReg(int)>
c001b2ac:	57                   	push   edi
c001b2ad:	56                   	push   esi
c001b2ae:	52                   	push   edx
c001b2af:	50                   	push   eax
c001b2b0:	e8 b8 f3 ff ff       	call   c001a66d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b2b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b2b8:	83 c4 1c             	add    esp,0x1c
c001b2bb:	90                   	nop
c001b2bc:	52                   	push   edx
c001b2bd:	50                   	push   eax
c001b2be:	6a 00                	push   0x0
c001b2c0:	e8 3c f4 ff ff       	call   c001a701 <Vm::fpuSetReg(int, unsigned long long)>
c001b2c5:	e9 7a f7 ff ff       	jmp    c001aa44 <Vm::x87Handler(regs*)+0x246>
c001b2ca:	66 90                	xchg   ax,ax
c001b2cc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b2d0:	80 fa 05             	cmp    dl,0x5
c001b2d3:	75 13                	jne    c001b2e8 <Vm::x87Handler(regs*)+0xaea>
c001b2d5:	55                   	push   ebp
c001b2d6:	55                   	push   ebp
c001b2d7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b2da:	ff 36                	push   DWORD PTR [esi]
c001b2dc:	e8 c3 f1 ff ff       	call   c001a4a4 <Vm::fpuULongToFloat(unsigned long long)>
c001b2e1:	e9 52 f7 ff ff       	jmp    c001aa38 <Vm::x87Handler(regs*)+0x23a>
c001b2e6:	66 90                	xchg   ax,ax
c001b2e8:	31 c0                	xor    eax,eax
c001b2ea:	80 fa 07             	cmp    dl,0x7
c001b2ed:	75 21                	jne    c001b310 <Vm::x87Handler(regs*)+0xb12>
c001b2ef:	e8 b7 f4 ff ff       	call   c001a7ab <Vm::fpuPop()>
c001b2f4:	51                   	push   ecx
c001b2f5:	51                   	push   ecx
c001b2f6:	52                   	push   edx
c001b2f7:	50                   	push   eax
c001b2f8:	e8 48 f1 ff ff       	call   c001a445 <Vm::fpuFloatToLong(unsigned long long)>
c001b2fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b300:	83 c4 10             	add    esp,0x10
c001b303:	89 06                	mov    DWORD PTR [esi],eax
c001b305:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001b308:	e9 7b f7 ff ff       	jmp    c001aa88 <Vm::x87Handler(regs*)+0x28a>
c001b30d:	8d 76 00             	lea    esi,[esi+0x0]
c001b310:	83 c4 1c             	add    esp,0x1c
c001b313:	5b                   	pop    ebx
c001b314:	5e                   	pop    esi
c001b315:	5f                   	pop    edi
c001b316:	5d                   	pop    ebp
c001b317:	c3                   	ret    

c001b318 <__static_initialization_and_destruction_0(int, int)>:
c001b318:	83 ec 0c             	sub    esp,0xc
c001b31b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001b320:	75 1a                	jne    c001b33c <__static_initialization_and_destruction_0(int, int)+0x24>
c001b322:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001b32a:	75 10                	jne    c001b33c <__static_initialization_and_destruction_0(int, int)+0x24>
c001b32c:	83 ec 0c             	sub    esp,0xc
c001b32f:	68 e0 9e 02 c0       	push   0xc0029ee0
c001b334:	e8 bb 83 00 00       	call   c00236f4 <Vm::_FPUState::_FPUState()>
c001b339:	83 c4 10             	add    esp,0x10
c001b33c:	90                   	nop
c001b33d:	83 c4 0c             	add    esp,0xc
c001b340:	c3                   	ret    
c001b341:	8d 76 00             	lea    esi,[esi+0x0]

c001b344 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001b344:	83 ec 0c             	sub    esp,0xc
c001b347:	83 ec 08             	sub    esp,0x8
c001b34a:	68 ff ff 00 00       	push   0xffff
c001b34f:	6a 01                	push   0x1
c001b351:	e8 c2 ff ff ff       	call   c001b318 <__static_initialization_and_destruction_0(int, int)>
c001b356:	83 c4 10             	add    esp,0x10
c001b359:	83 c4 0c             	add    esp,0xc
c001b35c:	c3                   	ret    
c001b35d:	66 90                	xchg   ax,ax
c001b35f:	90                   	nop

c001b360 <FAT::getName()>:
c001b360:	b8 20 6d 02 c0       	mov    eax,0xc0026d20
c001b365:	c3                   	ret    
c001b366:	66 90                	xchg   ax,ax

c001b368 <FAT::tell(void*, unsigned long long*)>:
c001b368:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b36d:	75 09                	jne    c001b378 <FAT::tell(void*, unsigned long long*)+0x10>
c001b36f:	b8 04 00 00 00       	mov    eax,0x4
c001b374:	c3                   	ret    
c001b375:	8d 76 00             	lea    esi,[esi+0x0]
c001b378:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b37d:	75 09                	jne    c001b388 <FAT::tell(void*, unsigned long long*)+0x20>
c001b37f:	b8 04 00 00 00       	mov    eax,0x4
c001b384:	c3                   	ret    
c001b385:	8d 76 00             	lea    esi,[esi+0x0]
c001b388:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b38c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001b38f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001b392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b396:	89 01                	mov    DWORD PTR [ecx],eax
c001b398:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b39b:	b8 00 00 00 00       	mov    eax,0x0
c001b3a0:	c3                   	ret    
c001b3a1:	90                   	nop
c001b3a2:	66 90                	xchg   ax,ax

c001b3a4 <FAT::stat(void*, unsigned long long*)>:
c001b3a4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b3a9:	75 09                	jne    c001b3b4 <FAT::stat(void*, unsigned long long*)+0x10>
c001b3ab:	b8 04 00 00 00       	mov    eax,0x4
c001b3b0:	c3                   	ret    
c001b3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b3b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b3b9:	75 09                	jne    c001b3c4 <FAT::stat(void*, unsigned long long*)+0x20>
c001b3bb:	b8 04 00 00 00       	mov    eax,0x4
c001b3c0:	c3                   	ret    
c001b3c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b3c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3c8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b3cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b3ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b3d2:	89 01                	mov    DWORD PTR [ecx],eax
c001b3d4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b3d7:	b8 00 00 00 00       	mov    eax,0x0
c001b3dc:	c3                   	ret    
c001b3dd:	90                   	nop
c001b3de:	66 90                	xchg   ax,ax

c001b3e0 <FAT::~FAT()>:
c001b3e0:	83 ec 0c             	sub    esp,0xc
c001b3e3:	ba 6c 6d 02 c0       	mov    edx,0xc0026d6c
c001b3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3ec:	89 10                	mov    DWORD PTR [eax],edx
c001b3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3f2:	83 ec 0c             	sub    esp,0xc
c001b3f5:	50                   	push   eax
c001b3f6:	e8 87 1f ff ff       	call   c000d382 <Filesystem::~Filesystem()>
c001b3fb:	83 c4 10             	add    esp,0x10
c001b3fe:	90                   	nop
c001b3ff:	83 c4 0c             	add    esp,0xc
c001b402:	c3                   	ret    
c001b403:	90                   	nop

c001b404 <FAT::~FAT()>:
c001b404:	83 ec 0c             	sub    esp,0xc
c001b407:	83 ec 0c             	sub    esp,0xc
c001b40a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b40e:	e8 cd ff ff ff       	call   c001b3e0 <FAT::~FAT()>
c001b413:	83 c4 10             	add    esp,0x10
c001b416:	83 ec 08             	sub    esp,0x8
c001b419:	6a 08                	push   0x8
c001b41b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b41f:	e8 42 1b ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001b424:	83 c4 10             	add    esp,0x10
c001b427:	83 c4 0c             	add    esp,0xc
c001b42a:	c3                   	ret    
c001b42b:	90                   	nop

c001b42c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b42c:	83 ec 1c             	sub    esp,0x1c
c001b42f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b436:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b43b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b43f:	8b 04 85 60 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd60a0]
c001b446:	83 f8 ff             	cmp    eax,0xffffffff
c001b449:	75 35                	jne    c001b480 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b44b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b44f:	88 c2                	mov    dl,al
c001b451:	a1 40 9f 02 c0       	mov    eax,ds:0xc0029f40
c001b456:	01 d0                	add    eax,edx
c001b458:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b45c:	8b 15 40 9f 02 c0    	mov    edx,DWORD PTR ds:0xc0029f40
c001b462:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b466:	89 14 85 60 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd60a0],edx
c001b46d:	a1 40 9f 02 c0       	mov    eax,ds:0xc0029f40
c001b472:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b476:	89 14 85 e0 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6020],edx
c001b47d:	eb 19                	jmp    c001b498 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b47f:	90                   	nop
c001b480:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b484:	88 c2                	mov    dl,al
c001b486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b48a:	8b 04 85 60 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd60a0]
c001b491:	01 d0                	add    eax,edx
c001b493:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b497:	90                   	nop
c001b498:	83 ec 04             	sub    esp,0x4
c001b49b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b49f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b4a3:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b4a7:	50                   	push   eax
c001b4a8:	e8 85 b7 fe ff       	call   c0006c32 <f_getlabel>
c001b4ad:	83 c4 10             	add    esp,0x10
c001b4b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b4b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b4b9:	75 09                	jne    c001b4c4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b4bb:	b8 00 00 00 00       	mov    eax,0x0
c001b4c0:	eb 0a                	jmp    c001b4cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b4c2:	66 90                	xchg   ax,ax
c001b4c4:	b8 01 00 00 00       	mov    eax,0x1
c001b4c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4cc:	83 c4 1c             	add    esp,0x1c
c001b4cf:	c3                   	ret    

c001b4d0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b4d0:	57                   	push   edi
c001b4d1:	83 ec 58             	sub    esp,0x58
c001b4d4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b4dc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b4e0:	b9 0f 00 00 00       	mov    ecx,0xf
c001b4e5:	b8 00 00 00 00       	mov    eax,0x0
c001b4ea:	fc                   	cld    
c001b4eb:	89 d7                	mov    edi,edx
c001b4ed:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b4ef:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b4f3:	8b 04 85 60 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd60a0]
c001b4fa:	83 f8 ff             	cmp    eax,0xffffffff
c001b4fd:	75 35                	jne    c001b534 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b4ff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b503:	88 c2                	mov    dl,al
c001b505:	a1 40 9f 02 c0       	mov    eax,ds:0xc0029f40
c001b50a:	01 d0                	add    eax,edx
c001b50c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b510:	8b 15 40 9f 02 c0    	mov    edx,DWORD PTR ds:0xc0029f40
c001b516:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b51a:	89 14 85 60 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd60a0],edx
c001b521:	a1 40 9f 02 c0       	mov    eax,ds:0xc0029f40
c001b526:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b52a:	89 14 85 e0 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6020],edx
c001b531:	eb 19                	jmp    c001b54c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b533:	90                   	nop
c001b534:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b538:	88 c2                	mov    dl,al
c001b53a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b53e:	8b 04 85 60 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd60a0]
c001b545:	01 d0                	add    eax,edx
c001b547:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b54b:	90                   	nop
c001b54c:	83 ec 08             	sub    esp,0x8
c001b54f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b553:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b557:	50                   	push   eax
c001b558:	e8 23 53 fe ff       	call   c0000880 <strcat>
c001b55d:	83 c4 10             	add    esp,0x10
c001b560:	83 ec 0c             	sub    esp,0xc
c001b563:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b567:	50                   	push   eax
c001b568:	e8 b3 b8 fe ff       	call   c0006e20 <f_setlabel>
c001b56d:	83 c4 10             	add    esp,0x10
c001b570:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b574:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b579:	75 09                	jne    c001b584 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b57b:	b8 00 00 00 00       	mov    eax,0x0
c001b580:	eb 0a                	jmp    c001b58c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b582:	66 90                	xchg   ax,ax
c001b584:	b8 01 00 00 00       	mov    eax,0x1
c001b589:	8d 76 00             	lea    esi,[esi+0x0]
c001b58c:	83 c4 58             	add    esp,0x58
c001b58f:	5f                   	pop    edi
c001b590:	c3                   	ret    
c001b591:	90                   	nop
c001b592:	66 90                	xchg   ax,ax

c001b594 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b594:	83 ec 2c             	sub    esp,0x2c
c001b597:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b59f:	83 ec 08             	sub    esp,0x8
c001b5a2:	68 44 6d 02 c0       	push   0xc0026d44
c001b5a7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b5ab:	e8 1c 52 fe ff       	call   c00007cc <strcmp>
c001b5b0:	83 c4 10             	add    esp,0x10
c001b5b3:	85 c0                	test   eax,eax
c001b5b5:	0f 94 c0             	sete   al
c001b5b8:	84 c0                	test   al,al
c001b5ba:	74 10                	je     c001b5cc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b5bc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b5c4:	e9 b3 00 00 00       	jmp    c001b67c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b5c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5cc:	83 ec 08             	sub    esp,0x8
c001b5cf:	68 36 6d 02 c0       	push   0xc0026d36
c001b5d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b5d8:	e8 ef 51 fe ff       	call   c00007cc <strcmp>
c001b5dd:	83 c4 10             	add    esp,0x10
c001b5e0:	85 c0                	test   eax,eax
c001b5e2:	0f 94 c0             	sete   al
c001b5e5:	84 c0                	test   al,al
c001b5e7:	74 0f                	je     c001b5f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b5e9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b5f1:	e9 86 00 00 00       	jmp    c001b67c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b5f6:	66 90                	xchg   ax,ax
c001b5f8:	83 ec 08             	sub    esp,0x8
c001b5fb:	68 3c 6d 02 c0       	push   0xc0026d3c
c001b600:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b604:	e8 c3 51 fe ff       	call   c00007cc <strcmp>
c001b609:	83 c4 10             	add    esp,0x10
c001b60c:	85 c0                	test   eax,eax
c001b60e:	0f 94 c0             	sete   al
c001b611:	84 c0                	test   al,al
c001b613:	74 0b                	je     c001b620 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b615:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b61d:	eb 5d                	jmp    c001b67c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b61f:	90                   	nop
c001b620:	83 ec 08             	sub    esp,0x8
c001b623:	68 6c 3e 02 c0       	push   0xc0023e6c
c001b628:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b62c:	e8 9b 51 fe ff       	call   c00007cc <strcmp>
c001b631:	83 c4 10             	add    esp,0x10
c001b634:	85 c0                	test   eax,eax
c001b636:	0f 94 c0             	sete   al
c001b639:	84 c0                	test   al,al
c001b63b:	74 0b                	je     c001b648 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b63d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b645:	eb 35                	jmp    c001b67c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b647:	90                   	nop
c001b648:	83 ec 08             	sub    esp,0x8
c001b64b:	68 42 6d 02 c0       	push   0xc0026d42
c001b650:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b654:	e8 73 51 fe ff       	call   c00007cc <strcmp>
c001b659:	83 c4 10             	add    esp,0x10
c001b65c:	85 c0                	test   eax,eax
c001b65e:	0f 94 c0             	sete   al
c001b661:	84 c0                	test   al,al
c001b663:	74 0b                	je     c001b670 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b665:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b66d:	eb 0d                	jmp    c001b67c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b66f:	90                   	nop
c001b670:	b8 08 00 00 00       	mov    eax,0x8
c001b675:	e9 ea 00 00 00       	jmp    c001b764 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b67a:	66 90                	xchg   ax,ax
c001b67c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b683:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b688:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b68c:	8b 04 85 60 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd60a0]
c001b693:	83 f8 ff             	cmp    eax,0xffffffff
c001b696:	75 34                	jne    c001b6cc <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b698:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b69c:	88 c2                	mov    dl,al
c001b69e:	a1 40 9f 02 c0       	mov    eax,ds:0xc0029f40
c001b6a3:	01 d0                	add    eax,edx
c001b6a5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b6a9:	8b 15 40 9f 02 c0    	mov    edx,DWORD PTR ds:0xc0029f40
c001b6af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b6b3:	89 14 85 60 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd60a0],edx
c001b6ba:	a1 40 9f 02 c0       	mov    eax,ds:0xc0029f40
c001b6bf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b6c3:	89 14 85 e0 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6020],edx
c001b6ca:	eb 18                	jmp    c001b6e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b6cc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b6d0:	88 c2                	mov    dl,al
c001b6d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b6d6:	8b 04 85 60 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd60a0]
c001b6dd:	01 d0                	add    eax,edx
c001b6df:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b6e3:	90                   	nop
c001b6e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b6e8:	88 04 24             	mov    BYTE PTR [esp],al
c001b6eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b6ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6f3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b6fb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b700:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b708:	83 ec 0c             	sub    esp,0xc
c001b70b:	68 00 20 00 00       	push   0x2000
c001b710:	e8 46 e6 fe ff       	call   c0009d5b <malloc>
c001b715:	83 c4 10             	add    esp,0x10
c001b718:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b71c:	68 00 20 00 00       	push   0x2000
c001b721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b725:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b729:	50                   	push   eax
c001b72a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b72e:	50                   	push   eax
c001b72f:	e8 6d bd fe ff       	call   c00074a1 <f_mkfs>
c001b734:	83 c4 10             	add    esp,0x10
c001b737:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b73b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b740:	75 0a                	jne    c001b74c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b742:	b8 00 00 00 00       	mov    eax,0x0
c001b747:	eb 1b                	jmp    c001b764 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b749:	8d 76 00             	lea    esi,[esi+0x0]
c001b74c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b751:	75 09                	jne    c001b75c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b753:	b8 09 00 00 00       	mov    eax,0x9
c001b758:	eb 0a                	jmp    c001b764 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b75a:	66 90                	xchg   ax,ax
c001b75c:	b8 01 00 00 00       	mov    eax,0x1
c001b761:	8d 76 00             	lea    esi,[esi+0x0]
c001b764:	83 c4 2c             	add    esp,0x2c
c001b767:	c3                   	ret    

c001b768 <FAT::tryMount(LogicalDisk*, int)>:
c001b768:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b76e:	a1 40 9f 02 c0       	mov    eax,ds:0xc0029f40
c001b773:	83 f8 14             	cmp    eax,0x14
c001b776:	75 18                	jne    c001b790 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b778:	83 ec 0c             	sub    esp,0xc
c001b77b:	68 48 6d 02 c0       	push   0xc0026d48
c001b780:	e8 40 99 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001b785:	83 c4 10             	add    esp,0x10
c001b788:	b0 00                	mov    al,0x0
c001b78a:	e9 e9 01 00 00       	jmp    c001b978 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b78f:	90                   	nop
c001b790:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b797:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b79d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b7a3:	3d 00 02 00 00       	cmp    eax,0x200
c001b7a8:	74 0a                	je     c001b7b4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b7aa:	b0 00                	mov    al,0x0
c001b7ac:	e9 c7 01 00 00       	jmp    c001b978 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b7b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b4:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b7bc:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b7c3:	8b 04 85 60 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd60a0]
c001b7ca:	83 f8 ff             	cmp    eax,0xffffffff
c001b7cd:	74 09                	je     c001b7d8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b7cf:	b0 01                	mov    al,0x1
c001b7d1:	e9 a2 01 00 00       	jmp    c001b978 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b7d6:	66 90                	xchg   ax,ax
c001b7d8:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b7e2:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b7ea:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b7f1:	88 c2                	mov    dl,al
c001b7f3:	a1 40 9f 02 c0       	mov    eax,ds:0xc0029f40
c001b7f8:	01 d0                	add    eax,edx
c001b7fa:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b801:	8b 15 40 9f 02 c0    	mov    edx,DWORD PTR ds:0xc0029f40
c001b807:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b80e:	89 14 85 60 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd60a0],edx
c001b815:	a1 40 9f 02 c0       	mov    eax,ds:0xc0029f40
c001b81a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b821:	89 14 85 e0 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6020],edx
c001b828:	83 ec 0c             	sub    esp,0xc
c001b82b:	68 54 02 00 00       	push   0x254
c001b830:	e8 26 e5 fe ff       	call   c0009d5b <malloc>
c001b835:	83 c4 10             	add    esp,0x10
c001b838:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b83f:	83 ec 04             	sub    esp,0x4
c001b842:	6a 00                	push   0x0
c001b844:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b84b:	50                   	push   eax
c001b84c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b853:	e8 d1 95 fe ff       	call   c0004e29 <f_mount>
c001b858:	83 c4 10             	add    esp,0x10
c001b85b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b862:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b86a:	74 1c                	je     c001b888 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b86c:	83 ec 0c             	sub    esp,0xc
c001b86f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b876:	e8 00 e5 fe ff       	call   c0009d7b <rfree>
c001b87b:	83 c4 10             	add    esp,0x10
c001b87e:	b0 00                	mov    al,0x0
c001b880:	e9 f3 00 00 00       	jmp    c001b978 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b885:	8d 76 00             	lea    esi,[esi+0x0]
c001b888:	83 ec 04             	sub    esp,0x4
c001b88b:	68 00 01 00 00       	push   0x100
c001b890:	6a 00                	push   0x0
c001b892:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b899:	50                   	push   eax
c001b89a:	e8 e5 4d fe ff       	call   c0000684 <memset>
c001b89f:	83 c4 10             	add    esp,0x10
c001b8a2:	83 ec 08             	sub    esp,0x8
c001b8a5:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b8ac:	50                   	push   eax
c001b8ad:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b8b4:	50                   	push   eax
c001b8b5:	e8 c6 4f fe ff       	call   c0000880 <strcat>
c001b8ba:	83 c4 10             	add    esp,0x10
c001b8bd:	83 ec 08             	sub    esp,0x8
c001b8c0:	68 56 6d 02 c0       	push   0xc0026d56
c001b8c5:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b8cc:	50                   	push   eax
c001b8cd:	e8 ae 4f fe ff       	call   c0000880 <strcat>
c001b8d2:	83 c4 10             	add    esp,0x10
c001b8d5:	83 ec 04             	sub    esp,0x4
c001b8d8:	6a 01                	push   0x1
c001b8da:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b8e1:	50                   	push   eax
c001b8e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b8e6:	50                   	push   eax
c001b8e7:	e8 9f 95 fe ff       	call   c0004e8b <f_open>
c001b8ec:	83 c4 10             	add    esp,0x10
c001b8ef:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b8f6:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b8fd:	85 c0                	test   eax,eax
c001b8ff:	74 0b                	je     c001b90c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b901:	78 31                	js     c001b934 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b903:	83 e8 04             	sub    eax,0x4
c001b906:	83 f8 01             	cmp    eax,0x1
c001b909:	77 29                	ja     c001b934 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b90b:	90                   	nop
c001b90c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b914:	83 ec 0c             	sub    esp,0xc
c001b917:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b91b:	50                   	push   eax
c001b91c:	e8 bc a0 fe ff       	call   c00059dd <f_close>
c001b921:	83 c4 10             	add    esp,0x10
c001b924:	90                   	nop
c001b925:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b92d:	74 41                	je     c001b970 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b92f:	eb 33                	jmp    c001b964 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b931:	8d 76 00             	lea    esi,[esi+0x0]
c001b934:	83 ec 0c             	sub    esp,0xc
c001b937:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b93e:	e8 38 e4 fe ff       	call   c0009d7b <rfree>
c001b943:	83 c4 10             	add    esp,0x10
c001b946:	83 ec 04             	sub    esp,0x4
c001b949:	6a 00                	push   0x0
c001b94b:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b952:	50                   	push   eax
c001b953:	6a 00                	push   0x0
c001b955:	e8 cf 94 fe ff       	call   c0004e29 <f_mount>
c001b95a:	83 c4 10             	add    esp,0x10
c001b95d:	b0 00                	mov    al,0x0
c001b95f:	eb 17                	jmp    c001b978 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b961:	8d 76 00             	lea    esi,[esi+0x0]
c001b964:	a1 40 9f 02 c0       	mov    eax,ds:0xc0029f40
c001b969:	40                   	inc    eax
c001b96a:	a3 40 9f 02 c0       	mov    ds:0xc0029f40,eax
c001b96f:	90                   	nop
c001b970:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b977:	90                   	nop
c001b978:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b97e:	c3                   	ret    
c001b97f:	90                   	nop

c001b980 <FAT::allocateSwapfile(char const*, int)>:
c001b980:	55                   	push   ebp
c001b981:	57                   	push   edi
c001b982:	56                   	push   esi
c001b983:	53                   	push   ebx
c001b984:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b98a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b995:	83 ec 0c             	sub    esp,0xc
c001b998:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b99f:	e8 b7 e3 fe ff       	call   c0009d5b <malloc>
c001b9a4:	83 c4 10             	add    esp,0x10
c001b9a7:	89 c7                	mov    edi,eax
c001b9a9:	a1 70 9e 02 c0       	mov    eax,ds:0xc0029e70
c001b9ae:	83 ec 04             	sub    esp,0x4
c001b9b1:	50                   	push   eax
c001b9b2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b9b9:	57                   	push   edi
c001b9ba:	e8 f3 1b ff ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001b9bf:	83 c4 10             	add    esp,0x10
c001b9c2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b9c9:	83 ec 04             	sub    esp,0x4
c001b9cc:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b9d0:	50                   	push   eax
c001b9d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b9d5:	50                   	push   eax
c001b9d6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b9dd:	e8 56 1f ff ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c001b9e2:	83 c4 10             	add    esp,0x10
c001b9e5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b9ec:	c1 e0 14             	shl    eax,0x14
c001b9ef:	89 c7                	mov    edi,eax
c001b9f1:	89 c5                	mov    ebp,eax
c001b9f3:	c1 fd 1f             	sar    ebp,0x1f
c001b9f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9fe:	89 f9                	mov    ecx,edi
c001ba00:	31 c1                	xor    ecx,eax
c001ba02:	89 cb                	mov    ebx,ecx
c001ba04:	89 e9                	mov    ecx,ebp
c001ba06:	31 d1                	xor    ecx,edx
c001ba08:	89 ce                	mov    esi,ecx
c001ba0a:	89 f0                	mov    eax,esi
c001ba0c:	09 d8                	or     eax,ebx
c001ba0e:	0f 84 98 00 00 00    	je     c001baac <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ba14:	83 ec 0c             	sub    esp,0xc
c001ba17:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ba1e:	e8 e1 1d ff ff       	call   c000d804 <File::unlink()>
c001ba23:	83 c4 10             	add    esp,0x10
c001ba26:	83 ec 08             	sub    esp,0x8
c001ba29:	6a 12                	push   0x12
c001ba2b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ba32:	e8 55 1c ff ff       	call   c000d68c <File::open(FileOpenMode)>
c001ba37:	83 c4 10             	add    esp,0x10
c001ba3a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ba41:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ba47:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ba4e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ba55:	c1 e0 14             	shl    eax,0x14
c001ba58:	99                   	cdq    
c001ba59:	6a 01                	push   0x1
c001ba5b:	52                   	push   edx
c001ba5c:	50                   	push   eax
c001ba5d:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001ba64:	e8 24 b6 fe ff       	call   c000708d <f_expand>
c001ba69:	83 c4 10             	add    esp,0x10
c001ba6c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ba73:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba75:	83 c0 10             	add    eax,0x10
c001ba78:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba7a:	83 ec 0c             	sub    esp,0xc
c001ba7d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ba81:	52                   	push   edx
c001ba82:	8d 54 24 30          	lea    edx,[esp+0x30]
c001ba86:	52                   	push   edx
c001ba87:	6a 00                	push   0x0
c001ba89:	68 00 04 00 00       	push   0x400
c001ba8e:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ba95:	ff d0                	call   eax
c001ba97:	83 c4 20             	add    esp,0x20
c001ba9a:	83 ec 0c             	sub    esp,0xc
c001ba9d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001baa4:	e8 41 1c ff ff       	call   c000d6ea <File::close()>
c001baa9:	83 c4 10             	add    esp,0x10
c001baac:	83 ec 08             	sub    esp,0x8
c001baaf:	6a 01                	push   0x1
c001bab1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bab8:	e8 cf 1b ff ff       	call   c000d68c <File::open(FileOpenMode)>
c001babd:	83 c4 10             	add    esp,0x10
c001bac0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bac7:	8b 00                	mov    eax,DWORD PTR [eax]
c001bac9:	83 c0 0c             	add    eax,0xc
c001bacc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bace:	83 ec 0c             	sub    esp,0xc
c001bad1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bad5:	52                   	push   edx
c001bad6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bada:	52                   	push   edx
c001badb:	6a 00                	push   0x0
c001badd:	6a 04                	push   0x4
c001badf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bae6:	ff d0                	call   eax
c001bae8:	83 c4 20             	add    esp,0x20
c001baeb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001baf2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001baf8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001baff:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bb06:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bb09:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bb0c:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bb13:	83 ec 0c             	sub    esp,0xc
c001bb16:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bb1d:	e8 c8 1b ff ff       	call   c000d6ea <File::close()>
c001bb22:	83 c4 10             	add    esp,0x10
c001bb25:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bb2c:	ba 00 00 00 00       	mov    edx,0x0
c001bb31:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bb37:	5b                   	pop    ebx
c001bb38:	5e                   	pop    esi
c001bb39:	5f                   	pop    edi
c001bb3a:	5d                   	pop    ebp
c001bb3b:	c3                   	ret    

c001bb3c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bb3c:	57                   	push   edi
c001bb3d:	56                   	push   esi
c001bb3e:	53                   	push   ebx
c001bb3f:	81 ec 50 02 00 00    	sub    esp,0x250
c001bb45:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001bb4d:	74 0d                	je     c001bb5c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001bb4f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001bb57:	75 0f                	jne    c001bb68 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001bb59:	8d 76 00             	lea    esi,[esi+0x0]
c001bb5c:	b8 04 00 00 00       	mov    eax,0x4
c001bb61:	e9 36 01 00 00       	jmp    c001bc9c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bb66:	66 90                	xchg   ax,ax
c001bb68:	83 ec 08             	sub    esp,0x8
c001bb6b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bb72:	50                   	push   eax
c001bb73:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001bb7a:	e8 68 a4 fe ff       	call   c0005fe7 <f_readdir>
c001bb7f:	83 c4 10             	add    esp,0x10
c001bb82:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001bb89:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001bb90:	83 ec 0c             	sub    esp,0xc
c001bb93:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bb9a:	83 c0 1a             	add    eax,0x1a
c001bb9d:	50                   	push   eax
c001bb9e:	e8 fd 4a fe ff       	call   c00006a0 <strlen>
c001bba3:	83 c4 10             	add    esp,0x10
c001bba6:	ba 00 00 00 00       	mov    edx,0x0
c001bbab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bbb3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001bbba:	0f b6 c0             	movzx  eax,al
c001bbbd:	83 e0 10             	and    eax,0x10
c001bbc0:	74 0a                	je     c001bbcc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001bbc2:	b8 02 00 00 00       	mov    eax,0x2
c001bbc7:	eb 0b                	jmp    c001bbd4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001bbc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbcc:	b8 01 00 00 00       	mov    eax,0x1
c001bbd1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bbd8:	83 ec 08             	sub    esp,0x8
c001bbdb:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bbe2:	83 c0 1a             	add    eax,0x1a
c001bbe5:	50                   	push   eax
c001bbe6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bbea:	83 c0 10             	add    eax,0x10
c001bbed:	50                   	push   eax
c001bbee:	e8 4d 4b fe ff       	call   c0000740 <strcpy>
c001bbf3:	83 c4 10             	add    esp,0x10
c001bbf6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001bbfd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bc04:	8d 44 24 04          	lea    eax,[esp+0x4]
c001bc08:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bc0f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001bc16:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bc1d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bc24:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001bc2b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001bc32:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bc39:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bc40:	89 c6                	mov    esi,eax
c001bc42:	89 d7                	mov    edi,edx
c001bc44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc46:	89 c8                	mov    eax,ecx
c001bc48:	89 fa                	mov    edx,edi
c001bc4a:	89 f3                	mov    ebx,esi
c001bc4c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bc53:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bc5a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bc61:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bc68:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bc6e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bc75:	84 c0                	test   al,al
c001bc77:	75 07                	jne    c001bc80 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001bc79:	b8 07 00 00 00       	mov    eax,0x7
c001bc7e:	eb 1c                	jmp    c001bc9c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bc80:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bc87:	85 c0                	test   eax,eax
c001bc89:	75 09                	jne    c001bc94 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001bc8b:	b8 00 00 00 00       	mov    eax,0x0
c001bc90:	eb 0a                	jmp    c001bc9c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bc92:	66 90                	xchg   ax,ax
c001bc94:	b8 01 00 00 00       	mov    eax,0x1
c001bc99:	8d 76 00             	lea    esi,[esi+0x0]
c001bc9c:	81 c4 50 02 00 00    	add    esp,0x250
c001bca2:	5b                   	pop    ebx
c001bca3:	5e                   	pop    esi
c001bca4:	5f                   	pop    edi
c001bca5:	c3                   	ret    
c001bca6:	66 90                	xchg   ax,ax

c001bca8 <FAT::read(void*, unsigned long, void*, int*)>:
c001bca8:	83 ec 1c             	sub    esp,0x1c
c001bcab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bcb0:	74 0a                	je     c001bcbc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bcb2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bcb7:	75 0b                	jne    c001bcc4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bcb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bcbc:	b8 04 00 00 00       	mov    eax,0x4
c001bcc1:	eb 41                	jmp    c001bd04 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bcc3:	90                   	nop
c001bcc4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bcc8:	50                   	push   eax
c001bcc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bccd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bcd1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bcd5:	e8 ed 95 fe ff       	call   c00052c7 <f_read>
c001bcda:	83 c4 10             	add    esp,0x10
c001bcdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bce1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bce5:	89 c2                	mov    edx,eax
c001bce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bceb:	89 10                	mov    DWORD PTR [eax],edx
c001bced:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcf1:	85 c0                	test   eax,eax
c001bcf3:	75 07                	jne    c001bcfc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bcf5:	b8 00 00 00 00       	mov    eax,0x0
c001bcfa:	eb 08                	jmp    c001bd04 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bcfc:	b8 01 00 00 00       	mov    eax,0x1
c001bd01:	8d 76 00             	lea    esi,[esi+0x0]
c001bd04:	83 c4 1c             	add    esp,0x1c
c001bd07:	c3                   	ret    

c001bd08 <FAT::write(void*, unsigned long, void*, int*)>:
c001bd08:	83 ec 1c             	sub    esp,0x1c
c001bd0b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bd10:	74 0a                	je     c001bd1c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bd12:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bd17:	75 0b                	jne    c001bd24 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bd19:	8d 76 00             	lea    esi,[esi+0x0]
c001bd1c:	b8 04 00 00 00       	mov    eax,0x4
c001bd21:	eb 41                	jmp    c001bd64 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bd23:	90                   	nop
c001bd24:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd28:	50                   	push   eax
c001bd29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bd31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bd35:	e8 0d 98 fe ff       	call   c0005547 <f_write>
c001bd3a:	83 c4 10             	add    esp,0x10
c001bd3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd45:	89 c2                	mov    edx,eax
c001bd47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd4b:	89 10                	mov    DWORD PTR [eax],edx
c001bd4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd51:	85 c0                	test   eax,eax
c001bd53:	75 07                	jne    c001bd5c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bd55:	b8 00 00 00 00       	mov    eax,0x0
c001bd5a:	eb 08                	jmp    c001bd64 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bd5c:	b8 01 00 00 00       	mov    eax,0x1
c001bd61:	8d 76 00             	lea    esi,[esi+0x0]
c001bd64:	83 c4 1c             	add    esp,0x1c
c001bd67:	c3                   	ret    

c001bd68 <FAT::close(void*)>:
c001bd68:	83 ec 1c             	sub    esp,0x1c
c001bd6b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bd70:	75 0a                	jne    c001bd7c <FAT::close(void*)+0x14>
c001bd72:	b8 04 00 00 00       	mov    eax,0x4
c001bd77:	eb 3f                	jmp    c001bdb8 <FAT::close(void*)+0x50>
c001bd79:	8d 76 00             	lea    esi,[esi+0x0]
c001bd7c:	83 ec 0c             	sub    esp,0xc
c001bd7f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bd83:	e8 55 9c fe ff       	call   c00059dd <f_close>
c001bd88:	83 c4 10             	add    esp,0x10
c001bd8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd8f:	83 ec 0c             	sub    esp,0xc
c001bd92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bd96:	e8 d0 df fe ff       	call   c0009d6b <free>
c001bd9b:	83 c4 10             	add    esp,0x10
c001bd9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bda2:	85 c0                	test   eax,eax
c001bda4:	75 0a                	jne    c001bdb0 <FAT::close(void*)+0x48>
c001bda6:	b8 00 00 00 00       	mov    eax,0x0
c001bdab:	eb 0b                	jmp    c001bdb8 <FAT::close(void*)+0x50>
c001bdad:	8d 76 00             	lea    esi,[esi+0x0]
c001bdb0:	b8 01 00 00 00       	mov    eax,0x1
c001bdb5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdb8:	83 c4 1c             	add    esp,0x1c
c001bdbb:	c3                   	ret    

c001bdbc <FAT::closeDir(void*)>:
c001bdbc:	83 ec 1c             	sub    esp,0x1c
c001bdbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bdc4:	75 0a                	jne    c001bdd0 <FAT::closeDir(void*)+0x14>
c001bdc6:	b8 04 00 00 00       	mov    eax,0x4
c001bdcb:	eb 3f                	jmp    c001be0c <FAT::closeDir(void*)+0x50>
c001bdcd:	8d 76 00             	lea    esi,[esi+0x0]
c001bdd0:	83 ec 0c             	sub    esp,0xc
c001bdd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bdd7:	e8 e9 a1 fe ff       	call   c0005fc5 <f_closedir>
c001bddc:	83 c4 10             	add    esp,0x10
c001bddf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bde3:	83 ec 0c             	sub    esp,0xc
c001bde6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bdea:	e8 7c df fe ff       	call   c0009d6b <free>
c001bdef:	83 c4 10             	add    esp,0x10
c001bdf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdf6:	85 c0                	test   eax,eax
c001bdf8:	75 0a                	jne    c001be04 <FAT::closeDir(void*)+0x48>
c001bdfa:	b8 00 00 00 00       	mov    eax,0x0
c001bdff:	eb 0b                	jmp    c001be0c <FAT::closeDir(void*)+0x50>
c001be01:	8d 76 00             	lea    esi,[esi+0x0]
c001be04:	b8 01 00 00 00       	mov    eax,0x1
c001be09:	8d 76 00             	lea    esi,[esi+0x0]
c001be0c:	83 c4 1c             	add    esp,0x1c
c001be0f:	c3                   	ret    

c001be10 <FAT::seek(void*, unsigned long long)>:
c001be10:	83 ec 2c             	sub    esp,0x2c
c001be13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be1b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be23:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001be28:	75 0a                	jne    c001be34 <FAT::seek(void*, unsigned long long)+0x24>
c001be2a:	b8 04 00 00 00       	mov    eax,0x4
c001be2f:	eb 37                	jmp    c001be68 <FAT::seek(void*, unsigned long long)+0x58>
c001be31:	8d 76 00             	lea    esi,[esi+0x0]
c001be34:	83 ec 04             	sub    esp,0x4
c001be37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001be3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001be3f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001be43:	e8 c4 9b fe ff       	call   c0005a0c <f_lseek>
c001be48:	83 c4 10             	add    esp,0x10
c001be4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be53:	85 c0                	test   eax,eax
c001be55:	75 09                	jne    c001be60 <FAT::seek(void*, unsigned long long)+0x50>
c001be57:	b8 00 00 00 00       	mov    eax,0x0
c001be5c:	eb 0a                	jmp    c001be68 <FAT::seek(void*, unsigned long long)+0x58>
c001be5e:	66 90                	xchg   ax,ax
c001be60:	b8 01 00 00 00       	mov    eax,0x1
c001be65:	8d 76 00             	lea    esi,[esi+0x0]
c001be68:	83 c4 2c             	add    esp,0x2c
c001be6b:	c3                   	ret    

c001be6c <fatWrapperReadDisk>:
c001be6c:	83 ec 1c             	sub    esp,0x1c
c001be6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001be77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001be7b:	89 04 24             	mov    DWORD PTR [esp],eax
c001be7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be86:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be8b:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c001be92:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001be96:	83 ec 0c             	sub    esp,0xc
c001be99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be9d:	52                   	push   edx
c001be9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bea2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bea6:	50                   	push   eax
c001bea7:	e8 ba 4a ff ff       	call   c0010966 <LogicalDisk::read(unsigned long long, int, void*)>
c001beac:	83 c4 20             	add    esp,0x20
c001beaf:	83 c4 1c             	add    esp,0x1c
c001beb2:	c3                   	ret    
c001beb3:	90                   	nop

c001beb4 <fatWrapperWriteDisk>:
c001beb4:	83 ec 1c             	sub    esp,0x1c
c001beb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bebb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bebf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bec3:	89 04 24             	mov    DWORD PTR [esp],eax
c001bec6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001beca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bece:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bed3:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c001beda:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bede:	83 ec 0c             	sub    esp,0xc
c001bee1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bee5:	52                   	push   edx
c001bee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001beea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001beee:	50                   	push   eax
c001beef:	e8 de 4a ff ff       	call   c00109d2 <LogicalDisk::write(unsigned long long, int, void*)>
c001bef4:	83 c4 20             	add    esp,0x20
c001bef7:	83 c4 1c             	add    esp,0x1c
c001befa:	c3                   	ret    
c001befb:	90                   	nop

c001befc <fatWrapperIoctl>:
c001befc:	53                   	push   ebx
c001befd:	83 ec 28             	sub    esp,0x28
c001bf00:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bf04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bf08:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bf0c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf10:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001bf15:	75 31                	jne    c001bf48 <fatWrapperIoctl+0x4c>
c001bf17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bf1f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf24:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c001bf2b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bf31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bf37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf3b:	66 89 02             	mov    WORD PTR [edx],ax
c001bf3e:	b8 00 00 00 00       	mov    eax,0x0
c001bf43:	e9 bc 00 00 00       	jmp    c001c004 <fatWrapperIoctl+0x108>
c001bf48:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001bf4d:	75 6d                	jne    c001bfbc <fatWrapperIoctl+0xc0>
c001bf4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bf57:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf5c:	8b 04 85 e0 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7120]
c001bf63:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bf69:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001bf6f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001bf75:	89 c8                	mov    eax,ecx
c001bf77:	89 da                	mov    edx,ebx
c001bf79:	0f a4 c2 0a          	shld   edx,eax,0xa
c001bf7d:	c1 e0 0a             	shl    eax,0xa
c001bf80:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bf85:	8b 0c 8d e0 8e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7120]
c001bf8c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001bf92:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001bf98:	89 cb                	mov    ebx,ecx
c001bf9a:	c1 fb 1f             	sar    ebx,0x1f
c001bf9d:	53                   	push   ebx
c001bf9e:	51                   	push   ecx
c001bf9f:	52                   	push   edx
c001bfa0:	50                   	push   eax
c001bfa1:	e8 aa 6d 00 00       	call   c0022d50 <__udivdi3>
c001bfa6:	83 c4 10             	add    esp,0x10
c001bfa9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bfad:	89 01                	mov    DWORD PTR [ecx],eax
c001bfaf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bfb2:	b8 00 00 00 00       	mov    eax,0x0
c001bfb7:	eb 4b                	jmp    c001c004 <fatWrapperIoctl+0x108>
c001bfb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfbc:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001bfc1:	75 09                	jne    c001bfcc <fatWrapperIoctl+0xd0>
c001bfc3:	b8 00 00 00 00       	mov    eax,0x0
c001bfc8:	eb 3a                	jmp    c001c004 <fatWrapperIoctl+0x108>
c001bfca:	66 90                	xchg   ax,ax
c001bfcc:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001bfd1:	75 19                	jne    c001bfec <fatWrapperIoctl+0xf0>
c001bfd3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bfd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bfdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bfdf:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001bfe5:	b8 00 00 00 00       	mov    eax,0x0
c001bfea:	eb 18                	jmp    c001c004 <fatWrapperIoctl+0x108>
c001bfec:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001bff1:	75 09                	jne    c001bffc <fatWrapperIoctl+0x100>
c001bff3:	b8 00 00 00 00       	mov    eax,0x0
c001bff8:	eb 0a                	jmp    c001c004 <fatWrapperIoctl+0x108>
c001bffa:	66 90                	xchg   ax,ax
c001bffc:	b8 04 00 00 00       	mov    eax,0x4
c001c001:	8d 76 00             	lea    esi,[esi+0x0]
c001c004:	83 c4 28             	add    esp,0x28
c001c007:	5b                   	pop    ebx
c001c008:	c3                   	ret    
c001c009:	90                   	nop
c001c00a:	66 90                	xchg   ax,ax

c001c00c <FAT::FAT()>:
c001c00c:	83 ec 1c             	sub    esp,0x1c
c001c00f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c013:	83 ec 0c             	sub    esp,0xc
c001c016:	50                   	push   eax
c001c017:	e8 42 13 ff ff       	call   c000d35e <Filesystem::Filesystem()>
c001c01c:	83 c4 10             	add    esp,0x10
c001c01f:	ba 6c 6d 02 c0       	mov    edx,0xc0026d6c
c001c024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c028:	89 10                	mov    DWORD PTR [eax],edx
c001c02a:	c7 05 40 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f40,0x0
c001c034:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c03c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c041:	7f 15                	jg     c001c058 <FAT::FAT()+0x4c>
c001c043:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c047:	c7 04 85 60 9f 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd60a0],0xffffffff
c001c052:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c056:	eb e4                	jmp    c001c03c <FAT::FAT()+0x30>
c001c058:	90                   	nop
c001c059:	83 c4 1c             	add    esp,0x1c
c001c05c:	c3                   	ret    
c001c05d:	90                   	nop
c001c05e:	66 90                	xchg   ax,ax

c001c060 <FAT::fixFilepath(char*)>:
c001c060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c064:	8a 00                	mov    al,BYTE PTR [eax]
c001c066:	3c 40                	cmp    al,0x40
c001c068:	7e 2e                	jle    c001c098 <FAT::fixFilepath(char*)+0x38>
c001c06a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c06e:	8a 00                	mov    al,BYTE PTR [eax]
c001c070:	83 e8 41             	sub    eax,0x41
c001c073:	88 c2                	mov    dl,al
c001c075:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c079:	88 10                	mov    BYTE PTR [eax],dl
c001c07b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c07f:	8a 00                	mov    al,BYTE PTR [eax]
c001c081:	0f be c0             	movsx  eax,al
c001c084:	8b 04 85 60 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd60a0]
c001c08b:	83 c0 30             	add    eax,0x30
c001c08e:	88 c2                	mov    dl,al
c001c090:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c094:	88 10                	mov    BYTE PTR [eax],dl
c001c096:	66 90                	xchg   ax,ax
c001c098:	90                   	nop
c001c099:	c3                   	ret    
c001c09a:	66 90                	xchg   ax,ax

c001c09c <FAT::open(char const*, void**, FileOpenMode)>:
c001c09c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c0a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c0aa:	74 0c                	je     c001c0b8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c0ac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c0b4:	75 0e                	jne    c001c0c4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c0b6:	66 90                	xchg   ax,ax
c001c0b8:	b8 04 00 00 00       	mov    eax,0x4
c001c0bd:	e9 06 01 00 00       	jmp    c001c1c8 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c0c2:	66 90                	xchg   ax,ax
c001c0c4:	83 ec 08             	sub    esp,0x8
c001c0c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c0ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c0d2:	50                   	push   eax
c001c0d3:	e8 68 46 fe ff       	call   c0000740 <strcpy>
c001c0d8:	83 c4 10             	add    esp,0x10
c001c0db:	83 ec 08             	sub    esp,0x8
c001c0de:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c0e2:	50                   	push   eax
c001c0e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c0ea:	e8 71 ff ff ff       	call   c001c060 <FAT::fixFilepath(char*)>
c001c0ef:	83 c4 10             	add    esp,0x10
c001c0f2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c0fa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c101:	83 e0 01             	and    eax,0x1
c001c104:	74 0a                	je     c001c110 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001c106:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001c10e:	66 90                	xchg   ax,ax
c001c110:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c117:	83 e0 04             	and    eax,0x4
c001c11a:	74 10                	je     c001c12c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001c11c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001c124:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c12c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c133:	83 e0 02             	and    eax,0x2
c001c136:	74 08                	je     c001c140 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001c138:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c140:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c147:	83 e0 08             	and    eax,0x8
c001c14a:	74 08                	je     c001c154 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001c14c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001c154:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c15b:	83 e0 10             	and    eax,0x10
c001c15e:	74 08                	je     c001c168 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c160:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001c168:	83 ec 0c             	sub    esp,0xc
c001c16b:	68 50 02 00 00       	push   0x250
c001c170:	e8 e6 db fe ff       	call   c0009d5b <malloc>
c001c175:	83 c4 10             	add    esp,0x10
c001c178:	89 c2                	mov    edx,eax
c001c17a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c181:	89 10                	mov    DWORD PTR [eax],edx
c001c183:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c18b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c192:	8b 00                	mov    eax,DWORD PTR [eax]
c001c194:	83 ec 04             	sub    esp,0x4
c001c197:	52                   	push   edx
c001c198:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c19c:	52                   	push   edx
c001c19d:	50                   	push   eax
c001c19e:	e8 e8 8c fe ff       	call   c0004e8b <f_open>
c001c1a3:	83 c4 10             	add    esp,0x10
c001c1a6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c1ad:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c1b5:	74 09                	je     c001c1c0 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001c1b7:	b8 01 00 00 00       	mov    eax,0x1
c001c1bc:	eb 0a                	jmp    c001c1c8 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c1be:	66 90                	xchg   ax,ax
c001c1c0:	b8 00 00 00 00       	mov    eax,0x0
c001c1c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c1ce:	c3                   	ret    
c001c1cf:	90                   	nop

c001c1d0 <FAT::openDir(char const*, void**)>:
c001c1d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c1d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c1de:	74 0c                	je     c001c1ec <FAT::openDir(char const*, void**)+0x1c>
c001c1e0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c1e8:	75 0e                	jne    c001c1f8 <FAT::openDir(char const*, void**)+0x28>
c001c1ea:	66 90                	xchg   ax,ax
c001c1ec:	b8 04 00 00 00       	mov    eax,0x4
c001c1f1:	e9 82 00 00 00       	jmp    c001c278 <FAT::openDir(char const*, void**)+0xa8>
c001c1f6:	66 90                	xchg   ax,ax
c001c1f8:	83 ec 08             	sub    esp,0x8
c001c1fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c202:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c206:	50                   	push   eax
c001c207:	e8 34 45 fe ff       	call   c0000740 <strcpy>
c001c20c:	83 c4 10             	add    esp,0x10
c001c20f:	83 ec 08             	sub    esp,0x8
c001c212:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c216:	50                   	push   eax
c001c217:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c21e:	e8 3d fe ff ff       	call   c001c060 <FAT::fixFilepath(char*)>
c001c223:	83 c4 10             	add    esp,0x10
c001c226:	83 ec 0c             	sub    esp,0xc
c001c229:	6a 4c                	push   0x4c
c001c22b:	e8 2b db fe ff       	call   c0009d5b <malloc>
c001c230:	83 c4 10             	add    esp,0x10
c001c233:	89 c2                	mov    edx,eax
c001c235:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c23c:	89 10                	mov    DWORD PTR [eax],edx
c001c23e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c245:	8b 00                	mov    eax,DWORD PTR [eax]
c001c247:	83 ec 08             	sub    esp,0x8
c001c24a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c24e:	52                   	push   edx
c001c24f:	50                   	push   eax
c001c250:	e8 6e 9c fe ff       	call   c0005ec3 <f_opendir>
c001c255:	83 c4 10             	add    esp,0x10
c001c258:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c25f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c267:	74 07                	je     c001c270 <FAT::openDir(char const*, void**)+0xa0>
c001c269:	b8 01 00 00 00       	mov    eax,0x1
c001c26e:	eb 08                	jmp    c001c278 <FAT::openDir(char const*, void**)+0xa8>
c001c270:	b8 00 00 00 00       	mov    eax,0x0
c001c275:	8d 76 00             	lea    esi,[esi+0x0]
c001c278:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c27e:	c3                   	ret    
c001c27f:	90                   	nop

c001c280 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c280:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c286:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c28e:	75 0c                	jne    c001c29c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c290:	b8 04 00 00 00       	mov    eax,0x4
c001c295:	e9 d2 00 00 00       	jmp    c001c36c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c29a:	66 90                	xchg   ax,ax
c001c29c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c2a4:	75 0a                	jne    c001c2b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c2a6:	b8 04 00 00 00       	mov    eax,0x4
c001c2ab:	e9 bc 00 00 00       	jmp    c001c36c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c2b0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c2b8:	75 0a                	jne    c001c2c4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c2ba:	b8 04 00 00 00       	mov    eax,0x4
c001c2bf:	e9 a8 00 00 00       	jmp    c001c36c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c2c4:	83 ec 08             	sub    esp,0x8
c001c2c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c2ce:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c2d5:	50                   	push   eax
c001c2d6:	e8 65 44 fe ff       	call   c0000740 <strcpy>
c001c2db:	83 c4 10             	add    esp,0x10
c001c2de:	83 ec 08             	sub    esp,0x8
c001c2e1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c2e8:	50                   	push   eax
c001c2e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c2f0:	e8 6b fd ff ff       	call   c001c060 <FAT::fixFilepath(char*)>
c001c2f5:	83 c4 10             	add    esp,0x10
c001c2f8:	83 ec 08             	sub    esp,0x8
c001c2fb:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c2ff:	50                   	push   eax
c001c300:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c307:	50                   	push   eax
c001c308:	e8 75 9d fe ff       	call   c0006082 <f_stat>
c001c30d:	83 c4 10             	add    esp,0x10
c001c310:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c317:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c31e:	85 c0                	test   eax,eax
c001c320:	74 0a                	je     c001c32c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c322:	83 f8 04             	cmp    eax,0x4
c001c325:	74 35                	je     c001c35c <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001c327:	eb 3b                	jmp    c001c364 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001c329:	8d 76 00             	lea    esi,[esi+0x0]
c001c32c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c330:	0f b6 c0             	movzx  eax,al
c001c333:	83 e0 10             	and    eax,0x10
c001c336:	0f 95 c2             	setne  dl
c001c339:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c340:	88 10                	mov    BYTE PTR [eax],dl
c001c342:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c345:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c349:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c350:	89 01                	mov    DWORD PTR [ecx],eax
c001c352:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c355:	b8 00 00 00 00       	mov    eax,0x0
c001c35a:	eb 10                	jmp    c001c36c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c35c:	b8 02 00 00 00       	mov    eax,0x2
c001c361:	eb 09                	jmp    c001c36c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c363:	90                   	nop
c001c364:	b8 01 00 00 00       	mov    eax,0x1
c001c369:	8d 76 00             	lea    esi,[esi+0x0]
c001c36c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c372:	c3                   	ret    
c001c373:	90                   	nop

c001c374 <FAT::unlink(char const*)>:
c001c374:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c37a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c382:	75 08                	jne    c001c38c <FAT::unlink(char const*)+0x18>
c001c384:	b8 04 00 00 00       	mov    eax,0x4
c001c389:	eb 61                	jmp    c001c3ec <FAT::unlink(char const*)+0x78>
c001c38b:	90                   	nop
c001c38c:	83 ec 08             	sub    esp,0x8
c001c38f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c396:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c39a:	50                   	push   eax
c001c39b:	e8 a0 43 fe ff       	call   c0000740 <strcpy>
c001c3a0:	83 c4 10             	add    esp,0x10
c001c3a3:	83 ec 08             	sub    esp,0x8
c001c3a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c3aa:	50                   	push   eax
c001c3ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c3b2:	e8 a9 fc ff ff       	call   c001c060 <FAT::fixFilepath(char*)>
c001c3b7:	83 c4 10             	add    esp,0x10
c001c3ba:	83 ec 0c             	sub    esp,0xc
c001c3bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3c1:	50                   	push   eax
c001c3c2:	e8 0d a0 fe ff       	call   c00063d4 <f_unlink>
c001c3c7:	83 c4 10             	add    esp,0x10
c001c3ca:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c3d1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c3d8:	85 c0                	test   eax,eax
c001c3da:	75 08                	jne    c001c3e4 <FAT::unlink(char const*)+0x70>
c001c3dc:	b8 00 00 00 00       	mov    eax,0x0
c001c3e1:	eb 09                	jmp    c001c3ec <FAT::unlink(char const*)+0x78>
c001c3e3:	90                   	nop
c001c3e4:	b8 01 00 00 00       	mov    eax,0x1
c001c3e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c3ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c3f2:	c3                   	ret    
c001c3f3:	90                   	nop

c001c3f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c3f4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c3fa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c401:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c408:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c40c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c410:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c418:	75 0a                	jne    c001c424 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c41a:	b8 04 00 00 00       	mov    eax,0x4
c001c41f:	e9 30 01 00 00       	jmp    c001c554 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c424:	83 ec 08             	sub    esp,0x8
c001c427:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c42e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c432:	50                   	push   eax
c001c433:	e8 08 43 fe ff       	call   c0000740 <strcpy>
c001c438:	83 c4 10             	add    esp,0x10
c001c43b:	83 ec 08             	sub    esp,0x8
c001c43e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c442:	50                   	push   eax
c001c443:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c44a:	e8 11 fc ff ff       	call   c001c060 <FAT::fixFilepath(char*)>
c001c44f:	83 c4 10             	add    esp,0x10
c001c452:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c45a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c462:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c467:	83 e0 01             	and    eax,0x1
c001c46a:	74 08                	je     c001c474 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c46c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c474:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c479:	83 e0 02             	and    eax,0x2
c001c47c:	74 0a                	je     c001c488 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c47e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c486:	66 90                	xchg   ax,ax
c001c488:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c48d:	83 e0 04             	and    eax,0x4
c001c490:	74 0a                	je     c001c49c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c492:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c49a:	66 90                	xchg   ax,ax
c001c49c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4a1:	83 e0 08             	and    eax,0x8
c001c4a4:	74 0a                	je     c001c4b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c4a6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c4ae:	66 90                	xchg   ax,ax
c001c4b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4b5:	83 e0 01             	and    eax,0x1
c001c4b8:	74 0a                	je     c001c4c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c4ba:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c4c2:	66 90                	xchg   ax,ax
c001c4c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4c9:	83 e0 02             	and    eax,0x2
c001c4cc:	74 0a                	je     c001c4d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c4ce:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c4d6:	66 90                	xchg   ax,ax
c001c4d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4dd:	83 e0 04             	and    eax,0x4
c001c4e0:	74 0a                	je     c001c4ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c4e2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c4ea:	66 90                	xchg   ax,ax
c001c4ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4f1:	83 e0 08             	and    eax,0x8
c001c4f4:	74 0a                	je     c001c500 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c4f6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c4fe:	66 90                	xchg   ax,ax
c001c500:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c507:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c50e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c516:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c51e:	83 ec 04             	sub    esp,0x4
c001c521:	52                   	push   edx
c001c522:	50                   	push   eax
c001c523:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c527:	50                   	push   eax
c001c528:	e8 49 a5 fe ff       	call   c0006a76 <f_chmod>
c001c52d:	83 c4 10             	add    esp,0x10
c001c530:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c537:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c53e:	85 c0                	test   eax,eax
c001c540:	75 0a                	jne    c001c54c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c542:	b8 00 00 00 00       	mov    eax,0x0
c001c547:	eb 0b                	jmp    c001c554 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c549:	8d 76 00             	lea    esi,[esi+0x0]
c001c54c:	b8 01 00 00 00       	mov    eax,0x1
c001c551:	8d 76 00             	lea    esi,[esi+0x0]
c001c554:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c55a:	c3                   	ret    
c001c55b:	90                   	nop

c001c55c <FAT::rename(char const*, char const*)>:
c001c55c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c562:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c56a:	74 0c                	je     c001c578 <FAT::rename(char const*, char const*)+0x1c>
c001c56c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c574:	75 0e                	jne    c001c584 <FAT::rename(char const*, char const*)+0x28>
c001c576:	66 90                	xchg   ax,ax
c001c578:	b8 04 00 00 00       	mov    eax,0x4
c001c57d:	e9 9e 00 00 00       	jmp    c001c620 <FAT::rename(char const*, char const*)+0xc4>
c001c582:	66 90                	xchg   ax,ax
c001c584:	83 ec 08             	sub    esp,0x8
c001c587:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c58e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c595:	50                   	push   eax
c001c596:	e8 a5 41 fe ff       	call   c0000740 <strcpy>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	83 ec 08             	sub    esp,0x8
c001c5a1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c5a8:	50                   	push   eax
c001c5a9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c5b0:	e8 ab fa ff ff       	call   c001c060 <FAT::fixFilepath(char*)>
c001c5b5:	83 c4 10             	add    esp,0x10
c001c5b8:	83 ec 08             	sub    esp,0x8
c001c5bb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c5c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c5c6:	50                   	push   eax
c001c5c7:	e8 74 41 fe ff       	call   c0000740 <strcpy>
c001c5cc:	83 c4 10             	add    esp,0x10
c001c5cf:	83 ec 08             	sub    esp,0x8
c001c5d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5d6:	50                   	push   eax
c001c5d7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c5de:	e8 7d fa ff ff       	call   c001c060 <FAT::fixFilepath(char*)>
c001c5e3:	83 c4 10             	add    esp,0x10
c001c5e6:	83 ec 08             	sub    esp,0x8
c001c5e9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5ed:	50                   	push   eax
c001c5ee:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c5f5:	50                   	push   eax
c001c5f6:	e8 88 a1 fe ff       	call   c0006783 <f_rename>
c001c5fb:	83 c4 10             	add    esp,0x10
c001c5fe:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c605:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c60c:	85 c0                	test   eax,eax
c001c60e:	75 08                	jne    c001c618 <FAT::rename(char const*, char const*)+0xbc>
c001c610:	b8 00 00 00 00       	mov    eax,0x0
c001c615:	eb 09                	jmp    c001c620 <FAT::rename(char const*, char const*)+0xc4>
c001c617:	90                   	nop
c001c618:	b8 01 00 00 00       	mov    eax,0x1
c001c61d:	8d 76 00             	lea    esi,[esi+0x0]
c001c620:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c626:	c3                   	ret    
c001c627:	90                   	nop

c001c628 <FAT::mkdir(char const*)>:
c001c628:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c62e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c636:	75 08                	jne    c001c640 <FAT::mkdir(char const*)+0x18>
c001c638:	b8 04 00 00 00       	mov    eax,0x4
c001c63d:	eb 61                	jmp    c001c6a0 <FAT::mkdir(char const*)+0x78>
c001c63f:	90                   	nop
c001c640:	83 ec 08             	sub    esp,0x8
c001c643:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c64a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c64e:	50                   	push   eax
c001c64f:	e8 ec 40 fe ff       	call   c0000740 <strcpy>
c001c654:	83 c4 10             	add    esp,0x10
c001c657:	83 ec 08             	sub    esp,0x8
c001c65a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c65e:	50                   	push   eax
c001c65f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c666:	e8 f5 f9 ff ff       	call   c001c060 <FAT::fixFilepath(char*)>
c001c66b:	83 c4 10             	add    esp,0x10
c001c66e:	83 ec 0c             	sub    esp,0xc
c001c671:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c675:	50                   	push   eax
c001c676:	e8 dc 9e fe ff       	call   c0006557 <f_mkdir>
c001c67b:	83 c4 10             	add    esp,0x10
c001c67e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c685:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c68c:	85 c0                	test   eax,eax
c001c68e:	75 08                	jne    c001c698 <FAT::mkdir(char const*)+0x70>
c001c690:	b8 00 00 00 00       	mov    eax,0x0
c001c695:	eb 09                	jmp    c001c6a0 <FAT::mkdir(char const*)+0x78>
c001c697:	90                   	nop
c001c698:	b8 01 00 00 00       	mov    eax,0x1
c001c69d:	8d 76 00             	lea    esi,[esi+0x0]
c001c6a0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c6a6:	c3                   	ret    
c001c6a7:	90                   	nop

c001c6a8 <FAT::exists(char const*)>:
c001c6a8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c6ae:	83 ec 08             	sub    esp,0x8
c001c6b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c6b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c6bc:	50                   	push   eax
c001c6bd:	e8 7e 40 fe ff       	call   c0000740 <strcpy>
c001c6c2:	83 c4 10             	add    esp,0x10
c001c6c5:	83 ec 08             	sub    esp,0x8
c001c6c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c6cc:	50                   	push   eax
c001c6cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c6d4:	e8 87 f9 ff ff       	call   c001c060 <FAT::fixFilepath(char*)>
c001c6d9:	83 c4 10             	add    esp,0x10
c001c6dc:	83 ec 08             	sub    esp,0x8
c001c6df:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c6e6:	50                   	push   eax
c001c6e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c6eb:	50                   	push   eax
c001c6ec:	e8 91 99 fe ff       	call   c0006082 <f_stat>
c001c6f1:	83 c4 10             	add    esp,0x10
c001c6f4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c6fb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c702:	85 c0                	test   eax,eax
c001c704:	75 06                	jne    c001c70c <FAT::exists(char const*)+0x64>
c001c706:	b0 01                	mov    al,0x1
c001c708:	eb 06                	jmp    c001c710 <FAT::exists(char const*)+0x68>
c001c70a:	66 90                	xchg   ax,ax
c001c70c:	b0 00                	mov    al,0x0
c001c70e:	66 90                	xchg   ax,ax
c001c710:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c716:	c3                   	ret    
c001c717:	90                   	nop

c001c718 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c718:	b8 08 00 00 00       	mov    eax,0x8
c001c71d:	c3                   	ret    

c001c71e <ISO9660::seek(void*, unsigned long long)>:
c001c71e:	53                   	push   ebx
c001c71f:	b8 04 00 00 00       	mov    eax,0x4
c001c724:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c728:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c72c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c730:	85 d2                	test   edx,edx
c001c732:	74 17                	je     c001c74b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c734:	89 c8                	mov    eax,ecx
c001c736:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c739:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c73c:	b8 01 00 00 00       	mov    eax,0x1
c001c741:	73 08                	jae    c001c74b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c743:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c746:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c749:	31 c0                	xor    eax,eax
c001c74b:	5b                   	pop    ebx
c001c74c:	c3                   	ret    
c001c74d:	90                   	nop

c001c74e <ISO9660::tell(void*, unsigned long long*)>:
c001c74e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c752:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c756:	85 d2                	test   edx,edx
c001c758:	74 12                	je     c001c76c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c75a:	85 c0                	test   eax,eax
c001c75c:	74 0e                	je     c001c76c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c75e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c761:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c764:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c767:	89 10                	mov    DWORD PTR [eax],edx
c001c769:	31 c0                	xor    eax,eax
c001c76b:	c3                   	ret    
c001c76c:	b8 04 00 00 00       	mov    eax,0x4
c001c771:	c3                   	ret    

c001c772 <ISO9660::getName()>:
c001c772:	b8 cc 6d 02 c0       	mov    eax,0xc0026dcc
c001c777:	c3                   	ret    

c001c778 <ISO9660::stat(void*, unsigned long long*)>:
c001c778:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c780:	85 d2                	test   edx,edx
c001c782:	74 12                	je     c001c796 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c784:	85 c0                	test   eax,eax
c001c786:	74 0e                	je     c001c796 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c788:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c78b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c78e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c791:	89 10                	mov    DWORD PTR [eax],edx
c001c793:	31 c0                	xor    eax,eax
c001c795:	c3                   	ret    
c001c796:	b8 04 00 00 00       	mov    eax,0x4
c001c79b:	c3                   	ret    

c001c79c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c79c:	b8 01 00 00 00       	mov    eax,0x1
c001c7a1:	c3                   	ret    

c001c7a2 <ISO9660::unlink(char const*)>:
c001c7a2:	b8 01 00 00 00       	mov    eax,0x1
c001c7a7:	c3                   	ret    

c001c7a8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c7a8:	b8 01 00 00 00       	mov    eax,0x1
c001c7ad:	c3                   	ret    

c001c7ae <ISO9660::rename(char const*, char const*)>:
c001c7ae:	b8 01 00 00 00       	mov    eax,0x1
c001c7b3:	c3                   	ret    

c001c7b4 <ISO9660::mkdir(char const*)>:
c001c7b4:	b8 01 00 00 00       	mov    eax,0x1
c001c7b9:	c3                   	ret    

c001c7ba <ISO9660::close(void*)>:
c001c7ba:	83 ec 0c             	sub    esp,0xc
c001c7bd:	b8 04 00 00 00       	mov    eax,0x4
c001c7c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7c6:	85 d2                	test   edx,edx
c001c7c8:	74 0e                	je     c001c7d8 <ISO9660::close(void*)+0x1e>
c001c7ca:	83 ec 0c             	sub    esp,0xc
c001c7cd:	52                   	push   edx
c001c7ce:	e8 98 d5 fe ff       	call   c0009d6b <free>
c001c7d3:	83 c4 10             	add    esp,0x10
c001c7d6:	31 c0                	xor    eax,eax
c001c7d8:	83 c4 0c             	add    esp,0xc
c001c7db:	c3                   	ret    

c001c7dc <ISO9660::closeDir(void*)>:
c001c7dc:	83 ec 0c             	sub    esp,0xc
c001c7df:	b8 04 00 00 00       	mov    eax,0x4
c001c7e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7e8:	85 d2                	test   edx,edx
c001c7ea:	74 0e                	je     c001c7fa <ISO9660::closeDir(void*)+0x1e>
c001c7ec:	83 ec 0c             	sub    esp,0xc
c001c7ef:	52                   	push   edx
c001c7f0:	e8 76 d5 fe ff       	call   c0009d6b <free>
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	31 c0                	xor    eax,eax
c001c7fa:	83 c4 0c             	add    esp,0xc
c001c7fd:	c3                   	ret    

c001c7fe <ISO9660::~ISO9660()>:
c001c7fe:	83 ec 0c             	sub    esp,0xc
c001c801:	ba f0 6d 02 c0       	mov    edx,0xc0026df0
c001c806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80a:	89 10                	mov    DWORD PTR [eax],edx
c001c80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c810:	83 ec 0c             	sub    esp,0xc
c001c813:	50                   	push   eax
c001c814:	e8 69 0b ff ff       	call   c000d382 <Filesystem::~Filesystem()>
c001c819:	83 c4 10             	add    esp,0x10
c001c81c:	90                   	nop
c001c81d:	83 c4 0c             	add    esp,0xc
c001c820:	c3                   	ret    
c001c821:	90                   	nop

c001c822 <ISO9660::~ISO9660()>:
c001c822:	83 ec 0c             	sub    esp,0xc
c001c825:	83 ec 0c             	sub    esp,0xc
c001c828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c82c:	e8 cd ff ff ff       	call   c001c7fe <ISO9660::~ISO9660()>
c001c831:	83 c4 10             	add    esp,0x10
c001c834:	83 ec 08             	sub    esp,0x8
c001c837:	6a 08                	push   0x8
c001c839:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c83d:	e8 24 07 ff ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001c842:	83 c4 10             	add    esp,0x10
c001c845:	83 c4 0c             	add    esp,0xc
c001c848:	c3                   	ret    

c001c849 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c849:	55                   	push   ebp
c001c84a:	31 c9                	xor    ecx,ecx
c001c84c:	57                   	push   edi
c001c84d:	56                   	push   esi
c001c84e:	53                   	push   ebx
c001c84f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c853:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c857:	89 eb                	mov    ebx,ebp
c001c859:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c85d:	39 ce                	cmp    esi,ecx
c001c85f:	7e 17                	jle    c001c878 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c861:	31 d2                	xor    edx,edx
c001c863:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c867:	7d 13                	jge    c001c87c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c869:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c86d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c870:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c873:	75 0d                	jne    c001c882 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c875:	42                   	inc    edx
c001c876:	eb eb                	jmp    c001c863 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c878:	31 c0                	xor    eax,eax
c001c87a:	eb 0a                	jmp    c001c886 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c87c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c880:	eb 04                	jmp    c001c886 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c882:	41                   	inc    ecx
c001c883:	43                   	inc    ebx
c001c884:	eb d7                	jmp    c001c85d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c886:	5b                   	pop    ebx
c001c887:	5e                   	pop    esi
c001c888:	5f                   	pop    edi
c001c889:	5d                   	pop    ebp
c001c88a:	c3                   	ret    

c001c88b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c88b:	57                   	push   edi
c001c88c:	56                   	push   esi
c001c88d:	53                   	push   ebx
c001c88e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c892:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c896:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c89a:	39 35 40 a0 02 c0    	cmp    DWORD PTR ds:0xc002a040,esi
c001c8a0:	75 08                	jne    c001c8aa <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c8a2:	38 1d 54 83 02 c0    	cmp    BYTE PTR ds:0xc0028354,bl
c001c8a8:	74 4a                	je     c001c8f4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c8aa:	83 ec 0c             	sub    esp,0xc
c001c8ad:	31 d2                	xor    edx,edx
c001c8af:	68 60 a0 02 c0       	push   0xc002a060
c001c8b4:	0f be c3             	movsx  eax,bl
c001c8b7:	6a 01                	push   0x1
c001c8b9:	52                   	push   edx
c001c8ba:	56                   	push   esi
c001c8bb:	ff 34 85 dc 8d 02 c0 	push   DWORD PTR [eax*4-0x3ffd7224]
c001c8c2:	e8 9f 40 ff ff       	call   c0010966 <LogicalDisk::read(unsigned long long, int, void*)>
c001c8c7:	83 c4 20             	add    esp,0x20
c001c8ca:	85 c0                	test   eax,eax
c001c8cc:	75 0e                	jne    c001c8dc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c8ce:	89 35 40 a0 02 c0    	mov    DWORD PTR ds:0xc002a040,esi
c001c8d4:	88 1d 54 83 02 c0    	mov    BYTE PTR ds:0xc0028354,bl
c001c8da:	eb 18                	jmp    c001c8f4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c8dc:	50                   	push   eax
c001c8dd:	68 00 08 00 00       	push   0x800
c001c8e2:	6a 00                	push   0x0
c001c8e4:	57                   	push   edi
c001c8e5:	e8 9a 3d fe ff       	call   c0000684 <memset>
c001c8ea:	83 c4 10             	add    esp,0x10
c001c8ed:	b8 01 00 00 00       	mov    eax,0x1
c001c8f2:	eb 0e                	jmp    c001c902 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c8f4:	be 60 a0 02 c0       	mov    esi,0xc002a060
c001c8f9:	b9 00 08 00 00       	mov    ecx,0x800
c001c8fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c900:	31 c0                	xor    eax,eax
c001c902:	5b                   	pop    ebx
c001c903:	5e                   	pop    esi
c001c904:	5f                   	pop    edi
c001c905:	c3                   	ret    

c001c906 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c906:	81 ec 10 08 00 00    	sub    esp,0x810
c001c90c:	c7 05 40 a0 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a040,0xdeadbeef
c001c916:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c91d:	83 c0 41             	add    eax,0x41
c001c920:	0f be c0             	movsx  eax,al
c001c923:	50                   	push   eax
c001c924:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c928:	50                   	push   eax
c001c929:	6a 10                	push   0x10
c001c92b:	e8 5b ff ff ff       	call   c001c88b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c930:	83 c4 10             	add    esp,0x10
c001c933:	31 d2                	xor    edx,edx
c001c935:	85 c0                	test   eax,eax
c001c937:	75 24                	jne    c001c95d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c939:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c93e:	75 1d                	jne    c001c95d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c940:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c945:	75 16                	jne    c001c95d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c947:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c94c:	75 0f                	jne    c001c95d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c94e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c953:	75 08                	jne    c001c95d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c955:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c95a:	0f 94 c2             	sete   dl
c001c95d:	88 d0                	mov    al,dl
c001c95f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c965:	c3                   	ret    

c001c966 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c966:	55                   	push   ebp
c001c967:	57                   	push   edi
c001c968:	56                   	push   esi
c001c969:	53                   	push   ebx
c001c96a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c970:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c977:	85 ed                	test   ebp,ebp
c001c979:	0f 84 da 01 00 00    	je     c001cb59 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c97f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c987:	0f 84 cc 01 00 00    	je     c001cb59 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c98d:	b8 01 00 00 00       	mov    eax,0x1
c001c992:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c996:	0f 85 c2 01 00 00    	jne    c001cb5e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c99c:	31 d2                	xor    edx,edx
c001c99e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c9a5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c9a8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c9ab:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c9ae:	89 04 24             	mov    DWORD PTR [esp],eax
c001c9b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c9b5:	01 c8                	add    eax,ecx
c001c9b7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c9ba:	11 da                	adc    edx,ebx
c001c9bc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c9c0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c9c4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c9c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c9cc:	19 d7                	sbb    edi,edx
c001c9ce:	72 11                	jb     c001c9e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c9d0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c9d3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c9d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c9db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c9df:	eb 0c                	jmp    c001c9ed <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c9e1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c9e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c9e9:	29 ce                	sub    esi,ecx
c001c9eb:	19 df                	sbb    edi,ebx
c001c9ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c9f0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c9f3:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c9f7:	c1 e0 0b             	shl    eax,0xb
c001c9fa:	01 c8                	add    eax,ecx
c001c9fc:	11 da                	adc    edx,ebx
c001c9fe:	89 04 24             	mov    DWORD PTR [esp],eax
c001ca01:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ca05:	51                   	push   ecx
c001ca06:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ca0a:	50                   	push   eax
c001ca0b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001ca0f:	53                   	push   ebx
c001ca10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca18:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ca1c:	50                   	push   eax
c001ca1d:	e8 69 fe ff ff       	call   c001c88b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ca22:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001ca25:	b8 00 08 00 00       	mov    eax,0x800
c001ca2a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001ca30:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001ca34:	29 d0                	sub    eax,edx
c001ca36:	83 c4 10             	add    esp,0x10
c001ca39:	89 f9                	mov    ecx,edi
c001ca3b:	39 c6                	cmp    esi,eax
c001ca3d:	83 d9 00             	sbb    ecx,0x0
c001ca40:	7d 1b                	jge    c001ca5d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001ca42:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ca47:	75 12                	jne    c001ca5b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001ca49:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ca50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca56:	e9 fa 00 00 00       	jmp    c001cb55 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001ca5b:	89 f0                	mov    eax,esi
c001ca5d:	01 d3                	add    ebx,edx
c001ca5f:	31 d2                	xor    edx,edx
c001ca61:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001ca65:	39 c2                	cmp    edx,eax
c001ca67:	7d 14                	jge    c001ca7d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001ca69:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001ca70:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ca74:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001ca77:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001ca7a:	42                   	inc    edx
c001ca7b:	eb e8                	jmp    c001ca65 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001ca7d:	89 c2                	mov    edx,eax
c001ca7f:	85 c0                	test   eax,eax
c001ca81:	79 02                	jns    c001ca85 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001ca83:	31 d2                	xor    edx,edx
c001ca85:	01 c2                	add    edx,eax
c001ca87:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001ca8a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001ca91:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001ca95:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ca99:	99                   	cdq    
c001ca9a:	01 c1                	add    ecx,eax
c001ca9c:	11 d3                	adc    ebx,edx
c001ca9e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001caa2:	29 c6                	sub    esi,eax
c001caa4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001caa8:	19 d7                	sbb    edi,edx
c001caaa:	89 34 24             	mov    DWORD PTR [esp],esi
c001caad:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001cab1:	b8 ff 07 00 00       	mov    eax,0x7ff
c001cab6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001cab9:	b8 00 00 00 00       	mov    eax,0x0
c001cabe:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001cac2:	7d 43                	jge    c001cb07 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001cac4:	52                   	push   edx
c001cac5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cac9:	50                   	push   eax
c001caca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cace:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cad2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cad6:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cada:	50                   	push   eax
c001cadb:	e8 ab fd ff ff       	call   c001c88b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cae0:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001cae8:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001caed:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001caf5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001cafd:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001cb02:	83 c4 10             	add    esp,0x10
c001cb05:	eb aa                	jmp    c001cab1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001cb07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb0b:	0b 04 24             	or     eax,DWORD PTR [esp]
c001cb0e:	74 2a                	je     c001cb3a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001cb10:	50                   	push   eax
c001cb11:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cb15:	50                   	push   eax
c001cb16:	8d 74 24 28          	lea    esi,[esp+0x28]
c001cb1a:	56                   	push   esi
c001cb1b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cb1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb23:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001cb27:	51                   	push   ecx
c001cb28:	e8 5e fd ff ff       	call   c001c88b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cb2d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cb31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb37:	83 c4 10             	add    esp,0x10
c001cb3a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cb41:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cb45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb49:	89 18                	mov    DWORD PTR [eax],ebx
c001cb4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb4f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cb52:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cb55:	31 c0                	xor    eax,eax
c001cb57:	eb 05                	jmp    c001cb5e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cb59:	b8 04 00 00 00       	mov    eax,0x4
c001cb5e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001cb64:	5b                   	pop    ebx
c001cb65:	5e                   	pop    esi
c001cb66:	5f                   	pop    edi
c001cb67:	5d                   	pop    ebp
c001cb68:	c3                   	ret    
c001cb69:	90                   	nop

c001cb6a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001cb6a:	55                   	push   ebp
c001cb6b:	57                   	push   edi
c001cb6c:	56                   	push   esi
c001cb6d:	53                   	push   ebx
c001cb6e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001cb74:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001cb7b:	85 ed                	test   ebp,ebp
c001cb7d:	0f 84 51 02 00 00    	je     c001cdd4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cb83:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001cb8b:	0f 84 43 02 00 00    	je     c001cdd4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cb91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cb94:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001cb97:	75 0a                	jne    c001cba3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001cb99:	b8 07 00 00 00       	mov    eax,0x7
c001cb9e:	e9 36 02 00 00       	jmp    c001cdd9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001cba3:	50                   	push   eax
c001cba4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cba8:	50                   	push   eax
c001cba9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cbb0:	53                   	push   ebx
c001cbb1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cbb4:	c1 e0 0b             	shl    eax,0xb
c001cbb7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001cbba:	c1 e8 0b             	shr    eax,0xb
c001cbbd:	50                   	push   eax
c001cbbe:	e8 c8 fc ff ff       	call   c001c88b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cbc3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cbc6:	83 c4 10             	add    esp,0x10
c001cbc9:	89 c1                	mov    ecx,eax
c001cbcb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001cbce:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001cbd4:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001cbd7:	84 db                	test   bl,bl
c001cbd9:	0f 85 8b 00 00 00    	jne    c001cc6a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001cbdf:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001cbe5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001cbe8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001cbee:	29 c6                	sub    esi,eax
c001cbf0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001cbf4:	89 f3                	mov    ebx,esi
c001cbf6:	89 f1                	mov    ecx,esi
c001cbf8:	c1 fb 1f             	sar    ebx,0x1f
c001cbfb:	01 f0                	add    eax,esi
c001cbfd:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001cc00:	11 da                	adc    edx,ebx
c001cc02:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc05:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cc09:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cc0c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cc0f:	89 d8                	mov    eax,ebx
c001cc11:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001cc15:	ba 00 00 00 00       	mov    edx,0x0
c001cc1a:	19 f8                	sbb    eax,edi
c001cc1c:	b8 00 00 00 00       	mov    eax,0x0
c001cc21:	73 08                	jae    c001cc2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001cc23:	89 f0                	mov    eax,esi
c001cc25:	89 fa                	mov    edx,edi
c001cc27:	29 c8                	sub    eax,ecx
c001cc29:	19 da                	sbb    edx,ebx
c001cc2b:	89 d7                	mov    edi,edx
c001cc2d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001cc30:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001cc33:	09 c7                	or     edi,eax
c001cc35:	0f 84 5e ff ff ff    	je     c001cb99 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001cc3b:	57                   	push   edi
c001cc3c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cc40:	50                   	push   eax
c001cc41:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cc48:	53                   	push   ebx
c001cc49:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc4c:	c1 e0 0b             	shl    eax,0xb
c001cc4f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001cc53:	c1 e8 0b             	shr    eax,0xb
c001cc56:	50                   	push   eax
c001cc57:	e8 2f fc ff ff       	call   c001c88b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cc5c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cc5f:	83 c4 10             	add    esp,0x10
c001cc62:	25 ff 07 00 00       	and    eax,0x7ff
c001cc67:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001cc6a:	31 ff                	xor    edi,edi
c001cc6c:	56                   	push   esi
c001cc6d:	6a 28                	push   0x28
c001cc6f:	6a 00                	push   0x0
c001cc71:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cc75:	50                   	push   eax
c001cc76:	e8 09 3a fe ff       	call   c0000684 <memset>
c001cc7b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cc7e:	25 ff 07 00 00       	and    eax,0x7ff
c001cc83:	89 c6                	mov    esi,eax
c001cc85:	83 c6 21             	add    esi,0x21
c001cc88:	83 d7 00             	adc    edi,0x0
c001cc8b:	83 c4 10             	add    esp,0x10
c001cc8e:	31 c9                	xor    ecx,ecx
c001cc90:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001cc97:	83 f9 28             	cmp    ecx,0x28
c001cc9a:	88 04 24             	mov    BYTE PTR [esp],al
c001cc9d:	0f 94 c2             	sete   dl
c001cca0:	88 d0                	mov    al,dl
c001cca2:	ba ff 07 00 00       	mov    edx,0x7ff
c001cca7:	39 f2                	cmp    edx,esi
c001cca9:	ba 00 00 00 00       	mov    edx,0x0
c001ccae:	19 fa                	sbb    edx,edi
c001ccb0:	0f 92 c2             	setb   dl
c001ccb3:	09 c2                	or     edx,eax
c001ccb5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001ccb9:	0f 94 c0             	sete   al
c001ccbc:	08 d0                	or     al,dl
c001ccbe:	75 16                	jne    c001ccd6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001ccc0:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001ccc4:	74 10                	je     c001ccd6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001ccc6:	8a 04 24             	mov    al,BYTE PTR [esp]
c001ccc9:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001cccd:	41                   	inc    ecx
c001ccce:	83 c6 01             	add    esi,0x1
c001ccd1:	83 d7 00             	adc    edi,0x0
c001ccd4:	eb ba                	jmp    c001cc90 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001ccd6:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001ccdd:	83 ec 0c             	sub    esp,0xc
c001cce0:	8d 74 24 24          	lea    esi,[esp+0x24]
c001cce4:	56                   	push   esi
c001cce5:	e8 b6 39 fe ff       	call   c00006a0 <strlen>
c001ccea:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001ccf1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ccf5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001ccfd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cd00:	5a                   	pop    edx
c001cd01:	25 ff 07 00 00       	and    eax,0x7ff
c001cd06:	59                   	pop    ecx
c001cd07:	01 f8                	add    eax,edi
c001cd09:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001cd0f:	83 e0 02             	and    eax,0x2
c001cd12:	3c 01                	cmp    al,0x1
c001cd14:	19 c0                	sbb    eax,eax
c001cd16:	83 c0 02             	add    eax,0x2
c001cd19:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cd1d:	56                   	push   esi
c001cd1e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cd22:	50                   	push   eax
c001cd23:	e8 18 3a fe ff       	call   c0000740 <strcpy>
c001cd28:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001cd2c:	83 c4 10             	add    esp,0x10
c001cd2f:	84 c0                	test   al,al
c001cd31:	75 21                	jne    c001cd54 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001cd33:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001cd3b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cd43:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cd4b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001cd52:	eb 28                	jmp    c001cd7c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cd54:	fe c8                	dec    al
c001cd56:	75 24                	jne    c001cd7c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cd58:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001cd60:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cd68:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cd70:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001cd77:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001cd7c:	8d 74 24 40          	lea    esi,[esp+0x40]
c001cd80:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001cd87:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001cd8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd90:	0f b6 f3             	movzx  esi,bl
c001cd93:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001cd9a:	31 db                	xor    ebx,ebx
c001cd9c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001cda2:	89 df                	mov    edi,ebx
c001cda4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001cda7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cdaa:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001cdad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001cdb0:	39 c6                	cmp    esi,eax
c001cdb2:	19 d7                	sbb    edi,edx
c001cdb4:	72 10                	jb     c001cdc6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001cdb6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001cdbd:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001cdc4:	eb 0a                	jmp    c001cdd0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001cdc6:	29 f0                	sub    eax,esi
c001cdc8:	19 da                	sbb    edx,ebx
c001cdca:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001cdcd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001cdd0:	31 c0                	xor    eax,eax
c001cdd2:	eb 05                	jmp    c001cdd9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001cdd4:	b8 04 00 00 00       	mov    eax,0x4
c001cdd9:	81 c4 5c 09 00 00    	add    esp,0x95c
c001cddf:	5b                   	pop    ebx
c001cde0:	5e                   	pop    esi
c001cde1:	5f                   	pop    edi
c001cde2:	5d                   	pop    ebp
c001cde3:	c3                   	ret    

c001cde4 <readRoot(unsigned int*, unsigned int*, char)>:
c001cde4:	57                   	push   edi
c001cde5:	56                   	push   esi
c001cde6:	81 ec 38 08 00 00    	sub    esp,0x838
c001cdec:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001cdf4:	50                   	push   eax
c001cdf5:	8d 44 24 38          	lea    eax,[esp+0x38]
c001cdf9:	50                   	push   eax
c001cdfa:	6a 10                	push   0x10
c001cdfc:	e8 8a fa ff ff       	call   c001c88b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce01:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001ce08:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001ce0c:	b9 22 00 00 00       	mov    ecx,0x22
c001ce11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ce13:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ce1a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ce1e:	89 10                	mov    DWORD PTR [eax],edx
c001ce20:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001ce27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ce2b:	89 10                	mov    DWORD PTR [eax],edx
c001ce2d:	81 c4 44 08 00 00    	add    esp,0x844
c001ce33:	b0 01                	mov    al,0x1
c001ce35:	5e                   	pop    esi
c001ce36:	5f                   	pop    edi
c001ce37:	c3                   	ret    

c001ce38 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001ce38:	55                   	push   ebp
c001ce39:	57                   	push   edi
c001ce3a:	56                   	push   esi
c001ce3b:	53                   	push   ebx
c001ce3c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ce42:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001ce49:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001ce50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce54:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001ce58:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ce5c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ce60:	75 03                	jne    c001ce65 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ce62:	83 c3 02             	add    ebx,0x2
c001ce65:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001ce68:	75 03                	jne    c001ce6d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001ce6a:	43                   	inc    ebx
c001ce6b:	eb f8                	jmp    c001ce65 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ce6d:	52                   	push   edx
c001ce6e:	68 00 01 00 00       	push   0x100
c001ce73:	6a 00                	push   0x0
c001ce75:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce79:	50                   	push   eax
c001ce7a:	e8 05 38 fe ff       	call   c0000684 <memset>
c001ce7f:	83 c4 10             	add    esp,0x10
c001ce82:	31 d2                	xor    edx,edx
c001ce84:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ce87:	84 c0                	test   al,al
c001ce89:	74 21                	je     c001ceac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001ce8b:	3c 2f                	cmp    al,0x2f
c001ce8d:	75 0b                	jne    c001ce9a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001ce8f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001ce93:	bd 01 00 00 00       	mov    ebp,0x1
c001ce98:	eb 14                	jmp    c001ceae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001ce9a:	8d 48 9f             	lea    ecx,[eax-0x61]
c001ce9d:	80 f9 19             	cmp    cl,0x19
c001cea0:	77 03                	ja     c001cea5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001cea2:	83 e8 20             	sub    eax,0x20
c001cea5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001cea9:	42                   	inc    edx
c001ceaa:	eb d8                	jmp    c001ce84 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001ceac:	31 ed                	xor    ebp,ebp
c001ceae:	83 ec 0c             	sub    esp,0xc
c001ceb1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001ceb8:	e8 9e ce fe ff       	call   c0009d5b <malloc>
c001cebd:	89 c6                	mov    esi,eax
c001cebf:	89 c2                	mov    edx,eax
c001cec1:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001cec8:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001cece:	c1 ef 0b             	shr    edi,0xb
c001ced1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001ced8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001cedc:	83 c4 10             	add    esp,0x10
c001cedf:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001cee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cee8:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001ceef:	74 29                	je     c001cf1a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001cef1:	50                   	push   eax
c001cef2:	57                   	push   edi
c001cef3:	52                   	push   edx
c001cef4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cef8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ceff:	e8 87 f9 ff ff       	call   c001c88b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cf04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf08:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001cf0f:	81 c2 00 08 00 00    	add    edx,0x800
c001cf15:	83 c4 10             	add    esp,0x10
c001cf18:	eb ca                	jmp    c001cee4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001cf1a:	83 ec 0c             	sub    esp,0xc
c001cf1d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001cf21:	57                   	push   edi
c001cf22:	e8 79 37 fe ff       	call   c00006a0 <strlen>
c001cf27:	50                   	push   eax
c001cf28:	57                   	push   edi
c001cf29:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001cf30:	56                   	push   esi
c001cf31:	e8 13 f9 ff ff       	call   c001c849 <__memmem(unsigned char*, int, unsigned char*, int)>
c001cf36:	83 c4 20             	add    esp,0x20
c001cf39:	85 c0                	test   eax,eax
c001cf3b:	75 13                	jne    c001cf50 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001cf3d:	83 ec 0c             	sub    esp,0xc
c001cf40:	56                   	push   esi
c001cf41:	e8 25 ce fe ff       	call   c0009d6b <free>
c001cf46:	83 c4 10             	add    esp,0x10
c001cf49:	31 c0                	xor    eax,eax
c001cf4b:	e9 b3 00 00 00       	jmp    c001d003 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001cf50:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001cf54:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001cf58:	c1 e7 08             	shl    edi,0x8
c001cf5b:	c1 e2 10             	shl    edx,0x10
c001cf5e:	09 d7                	or     edi,edx
c001cf60:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001cf64:	09 d7                	or     edi,edx
c001cf66:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001cf6a:	c1 e2 18             	shl    edx,0x18
c001cf6d:	09 d7                	or     edi,edx
c001cf6f:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001cf73:	89 d1                	mov    ecx,edx
c001cf75:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001cf79:	c1 e1 08             	shl    ecx,0x8
c001cf7c:	c1 e2 10             	shl    edx,0x10
c001cf7f:	09 ca                	or     edx,ecx
c001cf81:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001cf85:	09 ca                	or     edx,ecx
c001cf87:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001cf8b:	c1 e1 18             	shl    ecx,0x18
c001cf8e:	09 ca                	or     edx,ecx
c001cf90:	89 e9                	mov    ecx,ebp
c001cf92:	84 c9                	test   cl,cl
c001cf94:	74 3c                	je     c001cfd2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001cf96:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cf9a:	83 ec 0c             	sub    esp,0xc
c001cf9d:	56                   	push   esi
c001cf9e:	e8 c8 cd fe ff       	call   c0009d6b <free>
c001cfa3:	83 c4 0c             	add    esp,0xc
c001cfa6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cfad:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001cfb2:	50                   	push   eax
c001cfb3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cfba:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cfc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cfc5:	52                   	push   edx
c001cfc6:	57                   	push   edi
c001cfc7:	53                   	push   ebx
c001cfc8:	e8 6b fe ff ff       	call   c001ce38 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001cfcd:	83 c4 20             	add    esp,0x20
c001cfd0:	eb 31                	jmp    c001d003 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001cfd2:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001cfd5:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001cfdc:	d0 e8                	shr    al,1
c001cfde:	89 3b                	mov    DWORD PTR [ebx],edi
c001cfe0:	83 e0 01             	and    eax,0x1
c001cfe3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001cfea:	83 ec 0c             	sub    esp,0xc
c001cfed:	89 13                	mov    DWORD PTR [ebx],edx
c001cfef:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001cff6:	89 03                	mov    DWORD PTR [ebx],eax
c001cff8:	56                   	push   esi
c001cff9:	e8 6d cd fe ff       	call   c0009d6b <free>
c001cffe:	83 c4 10             	add    esp,0x10
c001d001:	b0 01                	mov    al,0x1
c001d003:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d009:	5b                   	pop    ebx
c001d00a:	5e                   	pop    esi
c001d00b:	5f                   	pop    edi
c001d00c:	5d                   	pop    ebp
c001d00d:	c3                   	ret    

c001d00e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001d00e:	55                   	push   ebp
c001d00f:	57                   	push   edi
c001d010:	56                   	push   esi
c001d011:	53                   	push   ebx
c001d012:	83 ec 20             	sub    esp,0x20
c001d015:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d019:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d01d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d021:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d029:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d031:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001d036:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001d03c:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001d042:	57                   	push   edi
c001d043:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d047:	50                   	push   eax
c001d048:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d04c:	50                   	push   eax
c001d04d:	e8 92 fd ff ff       	call   c001cde4 <readRoot(unsigned int*, unsigned int*, char)>
c001d052:	5a                   	pop    edx
c001d053:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d057:	e8 44 36 fe ff       	call   c00006a0 <strlen>
c001d05c:	83 c4 10             	add    esp,0x10
c001d05f:	83 f8 03             	cmp    eax,0x3
c001d062:	77 17                	ja     c001d07b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d068:	89 03                	mov    DWORD PTR [ebx],eax
c001d06a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d06e:	89 06                	mov    DWORD PTR [esi],eax
c001d070:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001d077:	b0 01                	mov    al,0x1
c001d079:	eb 19                	jmp    c001d094 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001d07b:	50                   	push   eax
c001d07c:	55                   	push   ebp
c001d07d:	57                   	push   edi
c001d07e:	56                   	push   esi
c001d07f:	53                   	push   ebx
c001d080:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d084:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d088:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d08c:	e8 a7 fd ff ff       	call   c001ce38 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d091:	83 c4 20             	add    esp,0x20
c001d094:	83 c4 1c             	add    esp,0x1c
c001d097:	5b                   	pop    ebx
c001d098:	5e                   	pop    esi
c001d099:	5f                   	pop    edi
c001d09a:	5d                   	pop    ebp
c001d09b:	c3                   	ret    

c001d09c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d09c:	57                   	push   edi
c001d09d:	56                   	push   esi
c001d09e:	53                   	push   ebx
c001d09f:	83 ec 10             	sub    esp,0x10
c001d0a2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d0a6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d0aa:	85 ff                	test   edi,edi
c001d0ac:	0f 84 8b 00 00 00    	je     c001d13d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d0b2:	85 f6                	test   esi,esi
c001d0b4:	0f 84 83 00 00 00    	je     c001d13d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d0ba:	b8 03 00 00 00       	mov    eax,0x3
c001d0bf:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001d0c4:	75 7c                	jne    c001d142 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d0c6:	83 ec 0c             	sub    esp,0xc
c001d0c9:	6a 1c                	push   0x1c
c001d0cb:	e8 8b cc fe ff       	call   c0009d5b <malloc>
c001d0d0:	89 07                	mov    DWORD PTR [edi],eax
c001d0d2:	89 c3                	mov    ebx,eax
c001d0d4:	58                   	pop    eax
c001d0d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d0d9:	50                   	push   eax
c001d0da:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d0dd:	50                   	push   eax
c001d0de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d0e2:	50                   	push   eax
c001d0e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d0e7:	50                   	push   eax
c001d0e8:	56                   	push   esi
c001d0e9:	e8 20 ff ff ff       	call   c001d00e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d0ee:	83 c4 20             	add    esp,0x20
c001d0f1:	84 c0                	test   al,al
c001d0f3:	74 07                	je     c001d0fc <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001d0f5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d0fa:	74 0b                	je     c001d107 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001d0fc:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d100:	b8 01 00 00 00       	mov    eax,0x1
c001d105:	eb 3b                	jmp    c001d142 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d107:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d10b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d10f:	89 03                	mov    DWORD PTR [ebx],eax
c001d111:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d11c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d123:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d12a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d12d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d134:	8a 06                	mov    al,BYTE PTR [esi]
c001d136:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d139:	31 c0                	xor    eax,eax
c001d13b:	eb 05                	jmp    c001d142 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d13d:	b8 04 00 00 00       	mov    eax,0x4
c001d142:	83 c4 10             	add    esp,0x10
c001d145:	5b                   	pop    ebx
c001d146:	5e                   	pop    esi
c001d147:	5f                   	pop    edi
c001d148:	c3                   	ret    
c001d149:	90                   	nop

c001d14a <ISO9660::exists(char const*)>:
c001d14a:	83 ec 28             	sub    esp,0x28
c001d14d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d151:	8d 54 24 18          	lea    edx,[esp+0x18]
c001d155:	52                   	push   edx
c001d156:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001d159:	52                   	push   edx
c001d15a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d15e:	52                   	push   edx
c001d15f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d163:	52                   	push   edx
c001d164:	50                   	push   eax
c001d165:	e8 a4 fe ff ff       	call   c001d00e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d16a:	83 c4 3c             	add    esp,0x3c
c001d16d:	c3                   	ret    

c001d16e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d16e:	56                   	push   esi
c001d16f:	53                   	push   ebx
c001d170:	83 ec 14             	sub    esp,0x14
c001d173:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d177:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d17b:	85 db                	test   ebx,ebx
c001d17d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d181:	0f 94 c2             	sete   dl
c001d184:	85 f6                	test   esi,esi
c001d186:	0f 94 c0             	sete   al
c001d189:	08 c2                	or     dl,al
c001d18b:	75 68                	jne    c001d1f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d18d:	85 c9                	test   ecx,ecx
c001d18f:	74 64                	je     c001d1f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d191:	83 ec 0c             	sub    esp,0xc
c001d194:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d197:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d19b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d1a1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d1a8:	50                   	push   eax
c001d1a9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001d1ac:	50                   	push   eax
c001d1ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d1b1:	50                   	push   eax
c001d1b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d1b6:	50                   	push   eax
c001d1b7:	51                   	push   ecx
c001d1b8:	e8 51 fe ff ff       	call   c001d00e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d1bd:	83 c4 20             	add    esp,0x20
c001d1c0:	ba 01 00 00 00       	mov    edx,0x1
c001d1c5:	84 c0                	test   al,al
c001d1c7:	74 31                	je     c001d1fa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d1c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1cd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d1d4:	89 03                	mov    DWORD PTR [ebx],eax
c001d1d6:	ba 00 00 00 00       	mov    edx,0x0
c001d1db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1df:	85 c0                	test   eax,eax
c001d1e1:	0f 95 06             	setne  BYTE PTR [esi]
c001d1e4:	74 14                	je     c001d1fa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d1e6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d1ec:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d1f3:	eb 05                	jmp    c001d1fa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d1f5:	ba 04 00 00 00       	mov    edx,0x4
c001d1fa:	83 c4 14             	add    esp,0x14
c001d1fd:	89 d0                	mov    eax,edx
c001d1ff:	5b                   	pop    ebx
c001d200:	5e                   	pop    esi
c001d201:	c3                   	ret    

c001d202 <ISO9660::openDir(char const*, void**)>:
c001d202:	57                   	push   edi
c001d203:	56                   	push   esi
c001d204:	53                   	push   ebx
c001d205:	83 ec 10             	sub    esp,0x10
c001d208:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d20c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d210:	85 ff                	test   edi,edi
c001d212:	74 7b                	je     c001d28f <ISO9660::openDir(char const*, void**)+0x8d>
c001d214:	85 f6                	test   esi,esi
c001d216:	74 77                	je     c001d28f <ISO9660::openDir(char const*, void**)+0x8d>
c001d218:	83 ec 0c             	sub    esp,0xc
c001d21b:	6a 1c                	push   0x1c
c001d21d:	e8 39 cb fe ff       	call   c0009d5b <malloc>
c001d222:	89 07                	mov    DWORD PTR [edi],eax
c001d224:	89 c3                	mov    ebx,eax
c001d226:	58                   	pop    eax
c001d227:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d22b:	50                   	push   eax
c001d22c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d22f:	50                   	push   eax
c001d230:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d234:	50                   	push   eax
c001d235:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d239:	50                   	push   eax
c001d23a:	56                   	push   esi
c001d23b:	e8 ce fd ff ff       	call   c001d00e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d240:	83 c4 20             	add    esp,0x20
c001d243:	84 c0                	test   al,al
c001d245:	74 07                	je     c001d24e <ISO9660::openDir(char const*, void**)+0x4c>
c001d247:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d24c:	75 0b                	jne    c001d259 <ISO9660::openDir(char const*, void**)+0x57>
c001d24e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d252:	b8 01 00 00 00       	mov    eax,0x1
c001d257:	eb 3b                	jmp    c001d294 <ISO9660::openDir(char const*, void**)+0x92>
c001d259:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d25d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d261:	89 03                	mov    DWORD PTR [ebx],eax
c001d263:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d26a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d26e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d275:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d27c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d27f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d286:	8a 06                	mov    al,BYTE PTR [esi]
c001d288:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d28b:	31 c0                	xor    eax,eax
c001d28d:	eb 05                	jmp    c001d294 <ISO9660::openDir(char const*, void**)+0x92>
c001d28f:	b8 04 00 00 00       	mov    eax,0x4
c001d294:	83 c4 10             	add    esp,0x10
c001d297:	5b                   	pop    ebx
c001d298:	5e                   	pop    esi
c001d299:	5f                   	pop    edi
c001d29a:	c3                   	ret    
c001d29b:	90                   	nop

c001d29c <ISO9660::ISO9660()>:
c001d29c:	83 ec 0c             	sub    esp,0xc
c001d29f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2a3:	83 ec 0c             	sub    esp,0xc
c001d2a6:	50                   	push   eax
c001d2a7:	e8 b2 00 ff ff       	call   c000d35e <Filesystem::Filesystem()>
c001d2ac:	83 c4 10             	add    esp,0x10
c001d2af:	ba f0 6d 02 c0       	mov    edx,0xc0026df0
c001d2b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b8:	89 10                	mov    DWORD PTR [eax],edx
c001d2ba:	90                   	nop
c001d2bb:	83 c4 0c             	add    esp,0xc
c001d2be:	c3                   	ret    
c001d2bf:	90                   	nop

c001d2c0 <SoundCard::beginPlayback()>:
c001d2c0:	c7 44 24 04 50 6e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026e50
c001d2c8:	e9 f8 7d ff ff       	jmp    c00150c5 <Krnl::panic(char const*)>
c001d2cd:	90                   	nop

c001d2ce <SoundCard::stopPlayback()>:
c001d2ce:	c7 44 24 04 84 6e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026e84
c001d2d6:	e9 ea 7d ff ff       	jmp    c00150c5 <Krnl::panic(char const*)>
c001d2db:	90                   	nop

c001d2dc <SoundCard::SoundCard(char const*)>:
c001d2dc:	83 ec 1c             	sub    esp,0x1c
c001d2df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2e3:	83 ec 08             	sub    esp,0x8
c001d2e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2ea:	50                   	push   eax
c001d2eb:	e8 ce 14 ff ff       	call   c000e7be <Device::Device(char const*)>
c001d2f0:	83 c4 10             	add    esp,0x10
c001d2f3:	ba 1c 6f 02 c0       	mov    edx,0xc0026f1c
c001d2f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2fc:	89 10                	mov    DWORD PTR [eax],edx
c001d2fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d302:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d309:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d30d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d317:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d31b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d329:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d333:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d337:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d341:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d349:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d34e:	7f 19                	jg     c001d369 <SoundCard::SoundCard(char const*)+0x8d>
c001d350:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d354:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d358:	83 c2 54             	add    edx,0x54
c001d35b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d363:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d367:	eb e0                	jmp    c001d349 <SoundCard::SoundCard(char const*)+0x6d>
c001d369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d36d:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d374:	90                   	nop
c001d375:	83 c4 1c             	add    esp,0x1c
c001d378:	c3                   	ret    
c001d379:	90                   	nop

c001d37a <SoundCard::~SoundCard()>:
c001d37a:	83 ec 0c             	sub    esp,0xc
c001d37d:	ba 1c 6f 02 c0       	mov    edx,0xc0026f1c
c001d382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d386:	89 10                	mov    DWORD PTR [eax],edx
c001d388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d38c:	83 ec 0c             	sub    esp,0xc
c001d38f:	50                   	push   eax
c001d390:	e8 f3 10 ff ff       	call   c000e488 <Device::~Device()>
c001d395:	83 c4 10             	add    esp,0x10
c001d398:	90                   	nop
c001d399:	83 c4 0c             	add    esp,0xc
c001d39c:	c3                   	ret    
c001d39d:	90                   	nop

c001d39e <SoundCard::~SoundCard()>:
c001d39e:	83 ec 0c             	sub    esp,0xc
c001d3a1:	83 ec 0c             	sub    esp,0xc
c001d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3a8:	e8 cd ff ff ff       	call   c001d37a <SoundCard::~SoundCard()>
c001d3ad:	83 c4 10             	add    esp,0x10
c001d3b0:	83 ec 08             	sub    esp,0x8
c001d3b3:	68 e8 01 00 00       	push   0x1e8
c001d3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3bc:	e8 a5 fb fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c001d3c1:	83 c4 10             	add    esp,0x10
c001d3c4:	83 c4 0c             	add    esp,0xc
c001d3c7:	c3                   	ret    

c001d3c8 <SoundCard::configureRates(int, int, int)>:
c001d3c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d3cc:	31 c0                	xor    eax,eax
c001d3ce:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d3d5:	75 20                	jne    c001d3f7 <SoundCard::configureRates(int, int, int)+0x2f>
c001d3d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3db:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d3e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3e5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d3eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ef:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d3f5:	b0 01                	mov    al,0x1
c001d3f7:	c3                   	ret    

c001d3f8 <SoundCard::getSamples16(int, short*)>:
c001d3f8:	55                   	push   ebp
c001d3f9:	57                   	push   edi
c001d3fa:	31 ff                	xor    edi,edi
c001d3fc:	56                   	push   esi
c001d3fd:	53                   	push   ebx
c001d3fe:	31 db                	xor    ebx,ebx
c001d400:	83 ec 18             	sub    esp,0x18
c001d403:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d407:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d40b:	68 b7 6e 02 c0       	push   0xc0026eb7
c001d410:	e8 32 fc fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d415:	83 c4 0c             	add    esp,0xc
c001d418:	8d 04 36             	lea    eax,[esi+esi*1]
c001d41b:	50                   	push   eax
c001d41c:	6a 00                	push   0x0
c001d41e:	55                   	push   ebp
c001d41f:	e8 60 32 fe ff       	call   c0000684 <memset>
c001d424:	83 c4 10             	add    esp,0x10
c001d427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d42b:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d432:	85 c0                	test   eax,eax
c001d434:	74 1b                	je     c001d451 <SoundCard::getSamples16(int, short*)+0x59>
c001d436:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d43a:	75 15                	jne    c001d451 <SoundCard::getSamples16(int, short*)+0x59>
c001d43c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d440:	55                   	push   ebp
c001d441:	56                   	push   esi
c001d442:	50                   	push   eax
c001d443:	e8 58 03 00 00       	call   c001d7a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d448:	83 c4 10             	add    esp,0x10
c001d44b:	39 c7                	cmp    edi,eax
c001d44d:	7d 02                	jge    c001d451 <SoundCard::getSamples16(int, short*)+0x59>
c001d44f:	89 c7                	mov    edi,eax
c001d451:	43                   	inc    ebx
c001d452:	83 fb 20             	cmp    ebx,0x20
c001d455:	75 d0                	jne    c001d427 <SoundCard::getSamples16(int, short*)+0x2f>
c001d457:	83 c4 0c             	add    esp,0xc
c001d45a:	89 f8                	mov    eax,edi
c001d45c:	5b                   	pop    ebx
c001d45d:	5e                   	pop    esi
c001d45e:	5f                   	pop    edi
c001d45f:	5d                   	pop    ebp
c001d460:	c3                   	ret    
c001d461:	90                   	nop

c001d462 <SoundCard::getSamples32(int, int*)>:
c001d462:	55                   	push   ebp
c001d463:	57                   	push   edi
c001d464:	31 ff                	xor    edi,edi
c001d466:	56                   	push   esi
c001d467:	31 f6                	xor    esi,esi
c001d469:	53                   	push   ebx
c001d46a:	83 ec 10             	sub    esp,0x10
c001d46d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d471:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d475:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d479:	c1 e0 02             	shl    eax,0x2
c001d47c:	50                   	push   eax
c001d47d:	6a 00                	push   0x0
c001d47f:	55                   	push   ebp
c001d480:	e8 ff 31 fe ff       	call   c0000684 <memset>
c001d485:	83 c4 10             	add    esp,0x10
c001d488:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d48f:	85 c0                	test   eax,eax
c001d491:	74 1b                	je     c001d4ae <SoundCard::getSamples32(int, int*)+0x4c>
c001d493:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d497:	75 15                	jne    c001d4ae <SoundCard::getSamples32(int, int*)+0x4c>
c001d499:	53                   	push   ebx
c001d49a:	55                   	push   ebp
c001d49b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d49f:	50                   	push   eax
c001d4a0:	e8 f7 03 00 00       	call   c001d89c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d4a5:	83 c4 10             	add    esp,0x10
c001d4a8:	39 c6                	cmp    esi,eax
c001d4aa:	7d 02                	jge    c001d4ae <SoundCard::getSamples32(int, int*)+0x4c>
c001d4ac:	89 c6                	mov    esi,eax
c001d4ae:	47                   	inc    edi
c001d4af:	83 ff 20             	cmp    edi,0x20
c001d4b2:	75 d4                	jne    c001d488 <SoundCard::getSamples32(int, int*)+0x26>
c001d4b4:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d4ba:	85 f6                	test   esi,esi
c001d4bc:	75 0f                	jne    c001d4cd <SoundCard::getSamples32(int, int*)+0x6b>
c001d4be:	84 c0                	test   al,al
c001d4c0:	74 1b                	je     c001d4dd <SoundCard::getSamples32(int, int*)+0x7b>
c001d4c2:	83 ec 0c             	sub    esp,0xc
c001d4c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d4c7:	53                   	push   ebx
c001d4c8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d4cb:	eb 0d                	jmp    c001d4da <SoundCard::getSamples32(int, int*)+0x78>
c001d4cd:	84 c0                	test   al,al
c001d4cf:	75 0c                	jne    c001d4dd <SoundCard::getSamples32(int, int*)+0x7b>
c001d4d1:	83 ec 0c             	sub    esp,0xc
c001d4d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d4d6:	53                   	push   ebx
c001d4d7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d4da:	83 c4 10             	add    esp,0x10
c001d4dd:	83 c4 0c             	add    esp,0xc
c001d4e0:	89 f0                	mov    eax,esi
c001d4e2:	5b                   	pop    ebx
c001d4e3:	5e                   	pop    esi
c001d4e4:	5f                   	pop    edi
c001d4e5:	5d                   	pop    ebp
c001d4e6:	c3                   	ret    
c001d4e7:	90                   	nop

c001d4e8 <SoundCard::addChannel(SoundPort*)>:
c001d4e8:	56                   	push   esi
c001d4e9:	53                   	push   ebx
c001d4ea:	53                   	push   ebx
c001d4eb:	31 db                	xor    ebx,ebx
c001d4ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4f1:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d4f9:	74 27                	je     c001d522 <SoundCard::addChannel(SoundPort*)+0x3a>
c001d4fb:	43                   	inc    ebx
c001d4fc:	83 fb 20             	cmp    ebx,0x20
c001d4ff:	75 f0                	jne    c001d4f1 <SoundCard::addChannel(SoundPort*)+0x9>
c001d501:	83 ec 0c             	sub    esp,0xc
c001d504:	83 cb ff             	or     ebx,0xffffffff
c001d507:	68 dd 6e 02 c0       	push   0xc0026edd
c001d50c:	e8 36 fb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d511:	c7 04 24 d6 6e 02 c0 	mov    DWORD PTR [esp],0xc0026ed6
c001d518:	e8 a8 7b ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001d51d:	83 c4 10             	add    esp,0x10
c001d520:	eb 1b                	jmp    c001d53d <SoundCard::addChannel(SoundPort*)+0x55>
c001d522:	51                   	push   ecx
c001d523:	51                   	push   ecx
c001d524:	53                   	push   ebx
c001d525:	68 f5 6e 02 c0       	push   0xc0026ef5
c001d52a:	e8 18 fb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d52f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d533:	83 c4 10             	add    esp,0x10
c001d536:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d53d:	89 d8                	mov    eax,ebx
c001d53f:	5a                   	pop    edx
c001d540:	5b                   	pop    ebx
c001d541:	5e                   	pop    esi
c001d542:	c3                   	ret    
c001d543:	90                   	nop

c001d544 <SoundCard::removeChannel(int)>:
c001d544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d548:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d54c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d557:	c3                   	ret    

c001d558 <SoundPort::SoundPort(int, int, int, int)>:
c001d558:	83 ec 0c             	sub    esp,0xc
c001d55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d55f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d56a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d572:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d576:	89 10                	mov    DWORD PTR [eax],edx
c001d578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d57c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d580:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d587:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d58b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d58e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d593:	75 13                	jne    c001d5a8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d599:	8b 00                	mov    eax,DWORD PTR [eax]
c001d59b:	05 a0 0f 00 00       	add    eax,0xfa0
c001d5a0:	01 c0                	add    eax,eax
c001d5a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d5a6:	66 90                	xchg   ax,ax
c001d5a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d5b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d5b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d5c5:	c1 e0 02             	shl    eax,0x2
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	50                   	push   eax
c001d5cc:	e8 8a c7 fe ff       	call   c0009d5b <malloc>
c001d5d1:	83 c4 10             	add    esp,0x10
c001d5d4:	89 c2                	mov    edx,eax
c001d5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5da:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d5dd:	90                   	nop
c001d5de:	83 c4 0c             	add    esp,0xc
c001d5e1:	c3                   	ret    
c001d5e2:	66 90                	xchg   ax,ax

c001d5e4 <SoundPort::~SoundPort()>:
c001d5e4:	83 ec 0c             	sub    esp,0xc
c001d5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d5ee:	85 c0                	test   eax,eax
c001d5f0:	74 1e                	je     c001d610 <SoundPort::~SoundPort()+0x2c>
c001d5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d5f9:	83 ec 0c             	sub    esp,0xc
c001d5fc:	50                   	push   eax
c001d5fd:	e8 69 c7 fe ff       	call   c0009d6b <free>
c001d602:	83 c4 10             	add    esp,0x10
c001d605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d609:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d610:	90                   	nop
c001d611:	83 c4 0c             	add    esp,0xc
c001d614:	c3                   	ret    
c001d615:	90                   	nop
c001d616:	66 90                	xchg   ax,ax

c001d618 <SoundPort::unpause()>:
c001d618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d61c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d620:	c3                   	ret    
c001d621:	90                   	nop
c001d622:	66 90                	xchg   ax,ax

c001d624 <SoundPort::pause()>:
c001d624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d628:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d62c:	c3                   	ret    
c001d62d:	90                   	nop
c001d62e:	66 90                	xchg   ax,ax

c001d630 <SoundPort::getBufferUsed()>:
c001d630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d634:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d637:	c3                   	ret    

c001d638 <SoundPort::getBufferSize()>:
c001d638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d63c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d63f:	c3                   	ret    

c001d640 <SoundPort::buffer16(short*, int)>:
c001d640:	55                   	push   ebp
c001d641:	57                   	push   edi
c001d642:	56                   	push   esi
c001d643:	53                   	push   ebx
c001d644:	83 ec 1c             	sub    esp,0x1c
c001d647:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d64b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d64f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d652:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d655:	0f 84 85 00 00 00    	je     c001d6e0 <SoundPort::buffer16(short*, int)+0xa0>
c001d65b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d65f:	85 c9                	test   ecx,ecx
c001d661:	7e 7d                	jle    c001d6e0 <SoundPort::buffer16(short*, int)+0xa0>
c001d663:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d667:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d66a:	c1 e1 0f             	shl    ecx,0xf
c001d66d:	8d 70 01             	lea    esi,[eax+0x1]
c001d670:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d673:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d676:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d679:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d67c:	74 6e                	je     c001d6ec <SoundPort::buffer16(short*, int)+0xac>
c001d67e:	31 f6                	xor    esi,esi
c001d680:	eb 22                	jmp    c001d6a4 <SoundPort::buffer16(short*, int)+0x64>
c001d682:	66 90                	xchg   ax,ax
c001d684:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d689:	8d 79 01             	lea    edi,[ecx+0x1]
c001d68c:	c1 e3 0f             	shl    ebx,0xf
c001d68f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d692:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d695:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d698:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d69b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d69e:	74 1c                	je     c001d6bc <SoundPort::buffer16(short*, int)+0x7c>
c001d6a0:	89 c6                	mov    esi,eax
c001d6a2:	66 90                	xchg   ax,ax
c001d6a4:	8d 46 01             	lea    eax,[esi+0x1]
c001d6a7:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d6ab:	75 d7                	jne    c001d684 <SoundPort::buffer16(short*, int)+0x44>
c001d6ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d6b1:	83 c4 1c             	add    esp,0x1c
c001d6b4:	5b                   	pop    ebx
c001d6b5:	5e                   	pop    esi
c001d6b6:	5f                   	pop    edi
c001d6b7:	5d                   	pop    ebp
c001d6b8:	c3                   	ret    
c001d6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d6bc:	8d 46 02             	lea    eax,[esi+0x2]
c001d6bf:	90                   	nop
c001d6c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6c4:	83 ec 0c             	sub    esp,0xc
c001d6c7:	68 48 6f 02 c0       	push   0xc0026f48
c001d6cc:	e8 76 f9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d6d1:	83 c4 10             	add    esp,0x10
c001d6d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6d8:	83 c4 1c             	add    esp,0x1c
c001d6db:	5b                   	pop    ebx
c001d6dc:	5e                   	pop    esi
c001d6dd:	5f                   	pop    edi
c001d6de:	5d                   	pop    ebp
c001d6df:	c3                   	ret    
c001d6e0:	83 c4 1c             	add    esp,0x1c
c001d6e3:	31 c0                	xor    eax,eax
c001d6e5:	5b                   	pop    ebx
c001d6e6:	5e                   	pop    esi
c001d6e7:	5f                   	pop    edi
c001d6e8:	5d                   	pop    ebp
c001d6e9:	c3                   	ret    
c001d6ea:	66 90                	xchg   ax,ax
c001d6ec:	b8 01 00 00 00       	mov    eax,0x1
c001d6f1:	eb cd                	jmp    c001d6c0 <SoundPort::buffer16(short*, int)+0x80>
c001d6f3:	90                   	nop

c001d6f4 <SoundPort::buffer32(int*, int)>:
c001d6f4:	55                   	push   ebp
c001d6f5:	57                   	push   edi
c001d6f6:	56                   	push   esi
c001d6f7:	53                   	push   ebx
c001d6f8:	83 ec 1c             	sub    esp,0x1c
c001d6fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d703:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d706:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d70a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d70e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d711:	74 79                	je     c001d78c <SoundPort::buffer32(int*, int)+0x98>
c001d713:	85 c0                	test   eax,eax
c001d715:	7e 75                	jle    c001d78c <SoundPort::buffer32(int*, int)+0x98>
c001d717:	8d 71 01             	lea    esi,[ecx+0x1]
c001d71a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d71d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d720:	8b 37                	mov    esi,DWORD PTR [edi]
c001d722:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d725:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d728:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d72b:	74 6b                	je     c001d798 <SoundPort::buffer32(int*, int)+0xa4>
c001d72d:	31 f6                	xor    esi,esi
c001d72f:	eb 1f                	jmp    c001d750 <SoundPort::buffer32(int*, int)+0x5c>
c001d731:	8d 76 00             	lea    esi,[esi+0x0]
c001d734:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d737:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d73a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d73d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d740:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d744:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d747:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d74a:	74 1c                	je     c001d768 <SoundPort::buffer32(int*, int)+0x74>
c001d74c:	89 de                	mov    esi,ebx
c001d74e:	66 90                	xchg   ax,ax
c001d750:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d753:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d757:	75 db                	jne    c001d734 <SoundPort::buffer32(int*, int)+0x40>
c001d759:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d75d:	83 c4 1c             	add    esp,0x1c
c001d760:	5b                   	pop    ebx
c001d761:	5e                   	pop    esi
c001d762:	5f                   	pop    edi
c001d763:	5d                   	pop    ebp
c001d764:	c3                   	ret    
c001d765:	8d 76 00             	lea    esi,[esi+0x0]
c001d768:	8d 46 02             	lea    eax,[esi+0x2]
c001d76b:	90                   	nop
c001d76c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d770:	83 ec 0c             	sub    esp,0xc
c001d773:	68 63 6f 02 c0       	push   0xc0026f63
c001d778:	e8 ca f8 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d77d:	83 c4 10             	add    esp,0x10
c001d780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d784:	83 c4 1c             	add    esp,0x1c
c001d787:	5b                   	pop    ebx
c001d788:	5e                   	pop    esi
c001d789:	5f                   	pop    edi
c001d78a:	5d                   	pop    ebp
c001d78b:	c3                   	ret    
c001d78c:	83 c4 1c             	add    esp,0x1c
c001d78f:	31 c0                	xor    eax,eax
c001d791:	5b                   	pop    ebx
c001d792:	5e                   	pop    esi
c001d793:	5f                   	pop    edi
c001d794:	5d                   	pop    ebp
c001d795:	c3                   	ret    
c001d796:	66 90                	xchg   ax,ax
c001d798:	b8 01 00 00 00       	mov    eax,0x1
c001d79d:	eb cd                	jmp    c001d76c <SoundPort::buffer32(int*, int)+0x78>
c001d79f:	90                   	nop

c001d7a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d7a0:	57                   	push   edi
c001d7a1:	56                   	push   esi
c001d7a2:	53                   	push   ebx
c001d7a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7a7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d7ab:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d7b1:	39 03                	cmp    DWORD PTR [ebx],eax
c001d7b3:	74 13                	je     c001d7c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d7b5:	83 ec 0c             	sub    esp,0xc
c001d7b8:	68 b8 6f 02 c0       	push   0xc0026fb8
c001d7bd:	e8 03 79 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001d7c2:	83 c4 10             	add    esp,0x10
c001d7c5:	8d 76 00             	lea    esi,[esi+0x0]
c001d7c8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d7ce:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d7d1:	74 11                	je     c001d7e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d7d3:	83 ec 0c             	sub    esp,0xc
c001d7d6:	68 7e 6f 02 c0       	push   0xc0026f7e
c001d7db:	e8 e5 78 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001d7e0:	83 c4 10             	add    esp,0x10
c001d7e3:	90                   	nop
c001d7e4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d7ea:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d7ed:	74 11                	je     c001d800 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d7ef:	83 ec 0c             	sub    esp,0xc
c001d7f2:	68 7e 6f 02 c0       	push   0xc0026f7e
c001d7f7:	e8 c9 78 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001d7fc:	83 c4 10             	add    esp,0x10
c001d7ff:	90                   	nop
c001d800:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d803:	89 c6                	mov    esi,eax
c001d805:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d809:	7e 05                	jle    c001d810 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d80b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d80f:	90                   	nop
c001d810:	85 f6                	test   esi,esi
c001d812:	7e 30                	jle    c001d844 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d814:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d818:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d81b:	31 c9                	xor    ecx,ecx
c001d81d:	01 d7                	add    edi,edx
c001d81f:	90                   	nop
c001d820:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d823:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d826:	85 c0                	test   eax,eax
c001d828:	79 06                	jns    c001d830 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d82a:	05 ff 7f 00 00       	add    eax,0x7fff
c001d82f:	90                   	nop
c001d830:	c1 f8 0f             	sar    eax,0xf
c001d833:	83 c1 04             	add    ecx,0x4
c001d836:	66 01 02             	add    WORD PTR [edx],ax
c001d839:	83 c2 02             	add    edx,0x2
c001d83c:	39 d7                	cmp    edi,edx
c001d83e:	75 e0                	jne    c001d820 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d840:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d843:	90                   	nop
c001d844:	56                   	push   esi
c001d845:	89 c2                	mov    edx,eax
c001d847:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d84e:	29 f2                	sub    edx,esi
c001d850:	52                   	push   edx
c001d851:	50                   	push   eax
c001d852:	68 d8 6f 02 c0       	push   0xc0026fd8
c001d857:	e8 eb f7 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d85c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d85f:	50                   	push   eax
c001d860:	01 f8                	add    eax,edi
c001d862:	50                   	push   eax
c001d863:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d866:	29 f0                	sub    eax,esi
c001d868:	c1 e0 02             	shl    eax,0x2
c001d86b:	50                   	push   eax
c001d86c:	68 08 70 02 c0       	push   0xc0027008
c001d871:	e8 d1 f7 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001d876:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d879:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d87c:	83 c4 1c             	add    esp,0x1c
c001d87f:	01 d7                	add    edi,edx
c001d881:	29 f0                	sub    eax,esi
c001d883:	c1 e0 02             	shl    eax,0x2
c001d886:	50                   	push   eax
c001d887:	57                   	push   edi
c001d888:	52                   	push   edx
c001d889:	e8 2e 2d fe ff       	call   c00005bc <memmove>
c001d88e:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d891:	83 c4 10             	add    esp,0x10
c001d894:	89 f0                	mov    eax,esi
c001d896:	5b                   	pop    ebx
c001d897:	5e                   	pop    esi
c001d898:	5f                   	pop    edi
c001d899:	c3                   	ret    
c001d89a:	66 90                	xchg   ax,ax

c001d89c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d89c:	57                   	push   edi
c001d89d:	56                   	push   esi
c001d89e:	53                   	push   ebx
c001d89f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d8a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d8ab:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d8b1:	39 06                	cmp    DWORD PTR [esi],eax
c001d8b3:	74 13                	je     c001d8c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d8b5:	83 ec 0c             	sub    esp,0xc
c001d8b8:	68 2c 70 02 c0       	push   0xc002702c
c001d8bd:	e8 03 78 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001d8c2:	83 c4 10             	add    esp,0x10
c001d8c5:	8d 76 00             	lea    esi,[esi+0x0]
c001d8c8:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d8ce:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d8d1:	74 11                	je     c001d8e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d8d3:	83 ec 0c             	sub    esp,0xc
c001d8d6:	68 9a 6f 02 c0       	push   0xc0026f9a
c001d8db:	e8 e5 77 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001d8e0:	83 c4 10             	add    esp,0x10
c001d8e3:	90                   	nop
c001d8e4:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d8ea:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d8ed:	74 11                	je     c001d900 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d8ef:	83 ec 0c             	sub    esp,0xc
c001d8f2:	68 9a 6f 02 c0       	push   0xc0026f9a
c001d8f7:	e8 c9 77 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001d8fc:	83 c4 10             	add    esp,0x10
c001d8ff:	90                   	nop
c001d900:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d903:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d907:	7e 07                	jle    c001d910 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d909:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d90d:	8d 76 00             	lea    esi,[esi+0x0]
c001d910:	85 ff                	test   edi,edi
c001d912:	7e 1c                	jle    c001d930 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d914:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d91b:	31 c0                	xor    eax,eax
c001d91d:	8d 76 00             	lea    esi,[esi+0x0]
c001d920:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d923:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d926:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d929:	83 c0 04             	add    eax,0x4
c001d92c:	39 c1                	cmp    ecx,eax
c001d92e:	75 f0                	jne    c001d920 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d930:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d933:	50                   	push   eax
c001d934:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d937:	29 f8                	sub    eax,edi
c001d939:	c1 e0 02             	shl    eax,0x2
c001d93c:	50                   	push   eax
c001d93d:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d940:	50                   	push   eax
c001d941:	52                   	push   edx
c001d942:	e8 75 2c fe ff       	call   c00005bc <memmove>
c001d947:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d94a:	83 c4 10             	add    esp,0x10
c001d94d:	89 f8                	mov    eax,edi
c001d94f:	5b                   	pop    ebx
c001d950:	5e                   	pop    esi
c001d951:	5f                   	pop    edi
c001d952:	c3                   	ret    
c001d953:	90                   	nop

c001d954 <PCI::open(int, int, void*)>:
c001d954:	83 ec 18             	sub    esp,0x18
c001d957:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d95b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d95f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d965:	8b 10                	mov    edx,DWORD PTR [eax]
c001d967:	50                   	push   eax
c001d968:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d96b:	31 c0                	xor    eax,eax
c001d96d:	83 c4 1c             	add    esp,0x1c
c001d970:	c3                   	ret    
c001d971:	90                   	nop

c001d972 <PCI::close(int, int, void*)>:
c001d972:	31 c0                	xor    eax,eax
c001d974:	c3                   	ret    
c001d975:	90                   	nop

c001d976 <PCI::PCI()>:
c001d976:	83 ec 0c             	sub    esp,0xc
c001d979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d97d:	83 ec 08             	sub    esp,0x8
c001d980:	68 4b 70 02 c0       	push   0xc002704b
c001d985:	50                   	push   eax
c001d986:	e8 95 04 ff ff       	call   c000de20 <Bus::Bus(char const*)>
c001d98b:	83 c4 10             	add    esp,0x10
c001d98e:	ba 20 72 02 c0       	mov    edx,0xc0027220
c001d993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d997:	89 10                	mov    DWORD PTR [eax],edx
c001d999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d99d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9ab:	a3 60 a8 02 c0       	mov    ds:0xc002a860,eax
c001d9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d9ba:	0f b6 d0             	movzx  edx,al
c001d9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9c1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d9d2:	0f b6 d0             	movzx  edx,al
c001d9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9d9:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d9e8:	8d 50 01             	lea    edx,[eax+0x1]
c001d9eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d9ef:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d9f5:	0f b6 d0             	movzx  edx,al
c001d9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9fc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001da00:	83 c9 c0             	or     ecx,0xffffffc0
c001da03:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001da07:	90                   	nop
c001da08:	83 c4 0c             	add    esp,0xc
c001da0b:	c3                   	ret    

c001da0c <PCI::readBAR8(unsigned int, int)>:
c001da0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da14:	f6 c2 01             	test   dl,0x1
c001da17:	74 07                	je     c001da20 <PCI::readBAR8(unsigned int, int)+0x14>
c001da19:	83 e2 fc             	and    edx,0xfffffffc
c001da1c:	01 c2                	add    edx,eax
c001da1e:	ec                   	in     al,dx
c001da1f:	c3                   	ret    
c001da20:	83 e2 f0             	and    edx,0xfffffff0
c001da23:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001da26:	c3                   	ret    
c001da27:	90                   	nop

c001da28 <PCI::readBAR16(unsigned int, int)>:
c001da28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da30:	f6 c2 01             	test   dl,0x1
c001da33:	74 08                	je     c001da3d <PCI::readBAR16(unsigned int, int)+0x15>
c001da35:	83 e2 fc             	and    edx,0xfffffffc
c001da38:	01 c2                	add    edx,eax
c001da3a:	66 ed                	in     ax,dx
c001da3c:	c3                   	ret    
c001da3d:	83 e2 f0             	and    edx,0xfffffff0
c001da40:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001da44:	c3                   	ret    
c001da45:	90                   	nop

c001da46 <PCI::readBAR32(unsigned int, int)>:
c001da46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da4e:	f6 c2 01             	test   dl,0x1
c001da51:	74 07                	je     c001da5a <PCI::readBAR32(unsigned int, int)+0x14>
c001da53:	83 e2 fc             	and    edx,0xfffffffc
c001da56:	01 c2                	add    edx,eax
c001da58:	ed                   	in     eax,dx
c001da59:	c3                   	ret    
c001da5a:	83 e2 f0             	and    edx,0xfffffff0
c001da5d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001da60:	c3                   	ret    
c001da61:	90                   	nop

c001da62 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001da62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da6e:	f6 c2 01             	test   dl,0x1
c001da71:	74 07                	je     c001da7a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001da73:	83 e2 fc             	and    edx,0xfffffffc
c001da76:	01 ca                	add    edx,ecx
c001da78:	ee                   	out    dx,al
c001da79:	c3                   	ret    
c001da7a:	83 e2 f0             	and    edx,0xfffffff0
c001da7d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001da80:	c3                   	ret    
c001da81:	90                   	nop

c001da82 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001da82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da8a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da8e:	f6 c2 01             	test   dl,0x1
c001da91:	74 08                	je     c001da9b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001da93:	83 e2 fc             	and    edx,0xfffffffc
c001da96:	01 ca                	add    edx,ecx
c001da98:	66 ef                	out    dx,ax
c001da9a:	c3                   	ret    
c001da9b:	83 e2 f0             	and    edx,0xfffffff0
c001da9e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001daa2:	c3                   	ret    
c001daa3:	90                   	nop

c001daa4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001daa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001daa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001daac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dab0:	f6 c2 01             	test   dl,0x1
c001dab3:	74 07                	je     c001dabc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dab5:	83 e2 fc             	and    edx,0xfffffffc
c001dab8:	01 ca                	add    edx,ecx
c001daba:	ef                   	out    dx,eax
c001dabb:	c3                   	ret    
c001dabc:	83 e2 f0             	and    edx,0xfffffff0
c001dabf:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dac2:	c3                   	ret    
c001dac3:	90                   	nop

c001dac4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dac4:	55                   	push   ebp
c001dac5:	57                   	push   edi
c001dac6:	56                   	push   esi
c001dac7:	53                   	push   ebx
c001dac8:	83 ec 0c             	sub    esp,0xc
c001dacb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dacf:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dad3:	89 f0                	mov    eax,esi
c001dad5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dad9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dadd:	3c 07                	cmp    al,0x7
c001dadf:	76 10                	jbe    c001daf1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001dae1:	83 ec 0c             	sub    esp,0xc
c001dae4:	68 53 70 02 c0       	push   0xc0027053
c001dae9:	e8 d7 75 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001daee:	83 c4 10             	add    esp,0x10
c001daf1:	80 fb 0f             	cmp    bl,0xf
c001daf4:	76 10                	jbe    c001db06 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001daf6:	83 ec 0c             	sub    esp,0xc
c001daf9:	68 83 70 02 c0       	push   0xc0027083
c001dafe:	e8 c2 75 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001db03:	83 c4 10             	add    esp,0x10
c001db06:	8d 04 36             	lea    eax,[esi+esi*1]
c001db09:	ba f8 0c 00 00       	mov    edx,0xcf8
c001db0e:	83 c8 f0             	or     eax,0xfffffff0
c001db11:	ee                   	out    dx,al
c001db12:	ba fa 0c 00 00       	mov    edx,0xcfa
c001db17:	89 e8                	mov    eax,ebp
c001db19:	ee                   	out    dx,al
c001db1a:	83 c4 0c             	add    esp,0xc
c001db1d:	89 d8                	mov    eax,ebx
c001db1f:	66 81 e7 fc 00       	and    di,0xfc
c001db24:	5b                   	pop    ebx
c001db25:	c1 e0 08             	shl    eax,0x8
c001db28:	5e                   	pop    esi
c001db29:	09 f8                	or     eax,edi
c001db2b:	5f                   	pop    edi
c001db2c:	66 0d 00 c0          	or     ax,0xc000
c001db30:	5d                   	pop    ebp
c001db31:	c3                   	ret    

c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001db32:	57                   	push   edi
c001db33:	56                   	push   esi
c001db34:	53                   	push   ebx
c001db35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db3d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001db43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db47:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001db4b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001db4f:	83 ff 01             	cmp    edi,0x1
c001db52:	75 3e                	jne    c001db92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001db54:	89 de                	mov    esi,ebx
c001db56:	0f b6 c0             	movzx  eax,al
c001db59:	81 e6 fc 00 00 00    	and    esi,0xfc
c001db5f:	c1 e0 10             	shl    eax,0x10
c001db62:	0f b6 c9             	movzx  ecx,cl
c001db65:	09 f0                	or     eax,esi
c001db67:	c1 e1 08             	shl    ecx,0x8
c001db6a:	0f b6 d2             	movzx  edx,dl
c001db6d:	09 c8                	or     eax,ecx
c001db6f:	c1 e2 0b             	shl    edx,0xb
c001db72:	09 d0                	or     eax,edx
c001db74:	ba f8 0c 00 00       	mov    edx,0xcf8
c001db79:	0d 00 00 00 80       	or     eax,0x80000000
c001db7e:	ef                   	out    dx,eax
c001db7f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001db84:	ed                   	in     eax,dx
c001db85:	83 e3 02             	and    ebx,0x2
c001db88:	0f b6 cb             	movzx  ecx,bl
c001db8b:	c1 e1 03             	shl    ecx,0x3
c001db8e:	d3 e8                	shr    eax,cl
c001db90:	eb 43                	jmp    c001dbd5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001db92:	83 ff 02             	cmp    edi,0x2
c001db95:	75 2c                	jne    c001dbc3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001db97:	83 ec 0c             	sub    esp,0xc
c001db9a:	0f b6 c9             	movzx  ecx,cl
c001db9d:	0f b6 d2             	movzx  edx,dl
c001dba0:	0f b6 fb             	movzx  edi,bl
c001dba3:	0f b6 c0             	movzx  eax,al
c001dba6:	57                   	push   edi
c001dba7:	51                   	push   ecx
c001dba8:	52                   	push   edx
c001dba9:	50                   	push   eax
c001dbaa:	56                   	push   esi
c001dbab:	e8 14 ff ff ff       	call   c001dac4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dbb0:	89 c2                	mov    edx,eax
c001dbb2:	ed                   	in     eax,dx
c001dbb3:	83 e3 02             	and    ebx,0x2
c001dbb6:	83 c4 20             	add    esp,0x20
c001dbb9:	0f b6 cb             	movzx  ecx,bl
c001dbbc:	c1 e1 03             	shl    ecx,0x3
c001dbbf:	d3 e8                	shr    eax,cl
c001dbc1:	eb 12                	jmp    c001dbd5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001dbc3:	83 ec 0c             	sub    esp,0xc
c001dbc6:	68 b3 70 02 c0       	push   0xc00270b3
c001dbcb:	e8 f5 74 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001dbd0:	83 c4 10             	add    esp,0x10
c001dbd3:	31 c0                	xor    eax,eax
c001dbd5:	5b                   	pop    ebx
c001dbd6:	5e                   	pop    esi
c001dbd7:	5f                   	pop    edi
c001dbd8:	c3                   	ret    
c001dbd9:	90                   	nop

c001dbda <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001dbda:	83 ec 18             	sub    esp,0x18
c001dbdd:	6a 00                	push   0x0
c001dbdf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dbe4:	50                   	push   eax
c001dbe5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dbea:	50                   	push   eax
c001dbeb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dbf0:	50                   	push   eax
c001dbf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbf5:	e8 38 ff ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dbfa:	83 c4 2c             	add    esp,0x2c
c001dbfd:	c3                   	ret    

c001dbfe <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001dbfe:	83 ec 18             	sub    esp,0x18
c001dc01:	6a 0e                	push   0xe
c001dc03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc08:	50                   	push   eax
c001dc09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc0e:	50                   	push   eax
c001dc0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc14:	50                   	push   eax
c001dc15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc19:	e8 14 ff ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc1e:	83 c4 2c             	add    esp,0x2c
c001dc21:	0f b6 c0             	movzx  eax,al
c001dc24:	c3                   	ret    
c001dc25:	90                   	nop

c001dc26 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001dc26:	55                   	push   ebp
c001dc27:	57                   	push   edi
c001dc28:	56                   	push   esi
c001dc29:	53                   	push   ebx
c001dc2a:	83 ec 18             	sub    esp,0x18
c001dc2d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001dc32:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001dc37:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001dc3c:	6a 0a                	push   0xa
c001dc3e:	56                   	push   esi
c001dc3f:	55                   	push   ebp
c001dc40:	57                   	push   edi
c001dc41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc45:	e8 e8 fe ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc4a:	83 c4 14             	add    esp,0x14
c001dc4d:	89 c3                	mov    ebx,eax
c001dc4f:	6a 0a                	push   0xa
c001dc51:	0f b6 db             	movzx  ebx,bl
c001dc54:	56                   	push   esi
c001dc55:	55                   	push   ebp
c001dc56:	57                   	push   edi
c001dc57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc5b:	e8 d2 fe ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc60:	83 c4 2c             	add    esp,0x2c
c001dc63:	25 00 ff 00 00       	and    eax,0xff00
c001dc68:	09 d8                	or     eax,ebx
c001dc6a:	5b                   	pop    ebx
c001dc6b:	5e                   	pop    esi
c001dc6c:	5f                   	pop    edi
c001dc6d:	5d                   	pop    ebp
c001dc6e:	c3                   	ret    
c001dc6f:	90                   	nop

c001dc70 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001dc70:	83 ec 18             	sub    esp,0x18
c001dc73:	6a 08                	push   0x8
c001dc75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc7a:	50                   	push   eax
c001dc7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc80:	50                   	push   eax
c001dc81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc86:	50                   	push   eax
c001dc87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc8b:	e8 a2 fe ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc90:	83 c4 2c             	add    esp,0x2c
c001dc93:	0f b6 c4             	movzx  eax,ah
c001dc96:	c3                   	ret    
c001dc97:	90                   	nop

c001dc98 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001dc98:	83 ec 18             	sub    esp,0x18
c001dc9b:	6a 08                	push   0x8
c001dc9d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dca2:	50                   	push   eax
c001dca3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dca8:	50                   	push   eax
c001dca9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcae:	50                   	push   eax
c001dcaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcb3:	e8 7a fe ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcb8:	83 c4 2c             	add    esp,0x2c
c001dcbb:	c3                   	ret    

c001dcbc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001dcbc:	83 ec 18             	sub    esp,0x18
c001dcbf:	6a 3c                	push   0x3c
c001dcc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcc6:	50                   	push   eax
c001dcc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dccc:	50                   	push   eax
c001dccd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcd2:	50                   	push   eax
c001dcd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcd7:	e8 56 fe ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcdc:	83 c4 2c             	add    esp,0x2c
c001dcdf:	c3                   	ret    

c001dce0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001dce0:	83 ec 18             	sub    esp,0x18
c001dce3:	6a 18                	push   0x18
c001dce5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcea:	50                   	push   eax
c001dceb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcf0:	50                   	push   eax
c001dcf1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcf6:	50                   	push   eax
c001dcf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcfb:	e8 32 fe ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd00:	83 c4 2c             	add    esp,0x2c
c001dd03:	0f b6 c4             	movzx  eax,ah
c001dd06:	c3                   	ret    
c001dd07:	90                   	nop

c001dd08 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd08:	55                   	push   ebp
c001dd09:	57                   	push   edi
c001dd0a:	56                   	push   esi
c001dd0b:	53                   	push   ebx
c001dd0c:	83 ec 28             	sub    esp,0x28
c001dd0f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dd13:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001dd18:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001dd1d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001dd22:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001dd29:	8d 43 12             	lea    eax,[ebx+0x12]
c001dd2c:	83 c3 10             	add    ebx,0x10
c001dd2f:	0f b6 c0             	movzx  eax,al
c001dd32:	0f b6 db             	movzx  ebx,bl
c001dd35:	50                   	push   eax
c001dd36:	51                   	push   ecx
c001dd37:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001dd3b:	57                   	push   edi
c001dd3c:	55                   	push   ebp
c001dd3d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dd41:	e8 ec fd ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd46:	83 c4 14             	add    esp,0x14
c001dd49:	89 c6                	mov    esi,eax
c001dd4b:	53                   	push   ebx
c001dd4c:	c1 e6 10             	shl    esi,0x10
c001dd4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd53:	51                   	push   ecx
c001dd54:	57                   	push   edi
c001dd55:	55                   	push   ebp
c001dd56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dd5a:	e8 d3 fd ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd5f:	83 c4 3c             	add    esp,0x3c
c001dd62:	0f b7 c0             	movzx  eax,ax
c001dd65:	5b                   	pop    ebx
c001dd66:	09 f0                	or     eax,esi
c001dd68:	5e                   	pop    esi
c001dd69:	5f                   	pop    edi
c001dd6a:	5d                   	pop    ebp
c001dd6b:	c3                   	ret    

c001dd6c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001dd6c:	55                   	push   ebp
c001dd6d:	57                   	push   edi
c001dd6e:	56                   	push   esi
c001dd6f:	53                   	push   ebx
c001dd70:	83 ec 0c             	sub    esp,0xc
c001dd73:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dd77:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001dd7b:	89 f5                	mov    ebp,esi
c001dd7d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001dd83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dd87:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dd8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dd8f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dd93:	83 f9 01             	cmp    ecx,0x1
c001dd96:	75 5d                	jne    c001ddf5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001dd98:	0f b6 c8             	movzx  ecx,al
c001dd9b:	0f b6 d2             	movzx  edx,dl
c001dd9e:	c1 e1 10             	shl    ecx,0x10
c001dda1:	c1 e2 0b             	shl    edx,0xb
c001dda4:	89 f0                	mov    eax,esi
c001dda6:	25 fc 00 00 00       	and    eax,0xfc
c001ddab:	09 c1                	or     ecx,eax
c001ddad:	89 e8                	mov    eax,ebp
c001ddaf:	0f b6 c0             	movzx  eax,al
c001ddb2:	c1 e0 08             	shl    eax,0x8
c001ddb5:	09 c1                	or     ecx,eax
c001ddb7:	09 d1                	or     ecx,edx
c001ddb9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ddbe:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001ddc4:	89 c8                	mov    eax,ecx
c001ddc6:	ef                   	out    dx,eax
c001ddc7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ddcc:	ed                   	in     eax,dx
c001ddcd:	0f b7 db             	movzx  ebx,bx
c001ddd0:	83 e6 02             	and    esi,0x2
c001ddd3:	74 0a                	je     c001dddf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001ddd5:	0f b7 d0             	movzx  edx,ax
c001ddd8:	c1 e3 10             	shl    ebx,0x10
c001dddb:	09 d3                	or     ebx,edx
c001dddd:	eb 05                	jmp    c001dde4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001dddf:	66 31 c0             	xor    ax,ax
c001dde2:	09 c3                	or     ebx,eax
c001dde4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dde9:	89 c8                	mov    eax,ecx
c001ddeb:	ef                   	out    dx,eax
c001ddec:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ddf1:	89 d8                	mov    eax,ebx
c001ddf3:	eb 41                	jmp    c001de36 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001ddf5:	83 f9 02             	cmp    ecx,0x2
c001ddf8:	75 45                	jne    c001de3f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001ddfa:	83 ec 0c             	sub    esp,0xc
c001ddfd:	0f b6 d2             	movzx  edx,dl
c001de00:	89 f1                	mov    ecx,esi
c001de02:	0f b6 c0             	movzx  eax,al
c001de05:	0f b6 f1             	movzx  esi,cl
c001de08:	89 e9                	mov    ecx,ebp
c001de0a:	56                   	push   esi
c001de0b:	0f b6 c9             	movzx  ecx,cl
c001de0e:	51                   	push   ecx
c001de0f:	52                   	push   edx
c001de10:	50                   	push   eax
c001de11:	57                   	push   edi
c001de12:	e8 ad fc ff ff       	call   c001dac4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de17:	89 c2                	mov    edx,eax
c001de19:	ed                   	in     eax,dx
c001de1a:	83 c4 20             	add    esp,0x20
c001de1d:	0f b7 db             	movzx  ebx,bx
c001de20:	f6 c2 02             	test   dl,0x2
c001de23:	74 0c                	je     c001de31 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001de25:	0f b7 c8             	movzx  ecx,ax
c001de28:	89 d8                	mov    eax,ebx
c001de2a:	c1 e0 10             	shl    eax,0x10
c001de2d:	09 c8                	or     eax,ecx
c001de2f:	eb 05                	jmp    c001de36 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001de31:	66 31 c0             	xor    ax,ax
c001de34:	09 d8                	or     eax,ebx
c001de36:	ef                   	out    dx,eax
c001de37:	83 c4 0c             	add    esp,0xc
c001de3a:	5b                   	pop    ebx
c001de3b:	5e                   	pop    esi
c001de3c:	5f                   	pop    edi
c001de3d:	5d                   	pop    ebp
c001de3e:	c3                   	ret    
c001de3f:	c7 44 24 20 b3 70 02 c0 	mov    DWORD PTR [esp+0x20],0xc00270b3
c001de47:	83 c4 0c             	add    esp,0xc
c001de4a:	5b                   	pop    ebx
c001de4b:	5e                   	pop    esi
c001de4c:	5f                   	pop    edi
c001de4d:	5d                   	pop    ebp
c001de4e:	e9 72 72 ff ff       	jmp    c00150c5 <Krnl::panic(char const*)>
c001de53:	90                   	nop

c001de54 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001de54:	55                   	push   ebp
c001de55:	57                   	push   edi
c001de56:	56                   	push   esi
c001de57:	53                   	push   ebx
c001de58:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001de5e:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001de65:	75 0f                	jne    c001de76 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001de67:	80 3d 6c a8 02 c0 00 	cmp    BYTE PTR ds:0xc002a86c,0x0
c001de6e:	0f 85 fa 00 00 00    	jne    c001df6e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001de74:	eb 2f                	jmp    c001dea5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001de76:	83 ec 0c             	sub    esp,0xc
c001de79:	68 b9 70 02 c0       	push   0xc00270b9
c001de7e:	e8 32 bf fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001de83:	83 c4 10             	add    esp,0x10
c001de86:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001de8d:	75 d8                	jne    c001de67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001de8f:	e4 60                	in     al,0x60
c001de91:	3c 1c                	cmp    al,0x1c
c001de93:	74 04                	je     c001de99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001de95:	3c 5a                	cmp    al,0x5a
c001de97:	75 f6                	jne    c001de8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001de99:	e4 60                	in     al,0x60
c001de9b:	3c 5a                	cmp    al,0x5a
c001de9d:	74 fa                	je     c001de99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001de9f:	3c 1c                	cmp    al,0x1c
c001dea1:	74 f6                	je     c001de99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001dea3:	eb c2                	jmp    c001de67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001dea5:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001deac:	0f 85 86 00 00 00    	jne    c001df38 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001deb2:	83 ec 0c             	sub    esp,0xc
c001deb5:	68 14 01 00 00       	push   0x114
c001deba:	e8 9c be fe ff       	call   c0009d5b <malloc>
c001debf:	83 c4 0c             	add    esp,0xc
c001dec2:	89 c3                	mov    ebx,eax
c001dec4:	ff 35 70 9e 02 c0    	push   DWORD PTR ds:0xc0029e70
c001deca:	68 d3 70 02 c0       	push   0xc00270d3
c001decf:	50                   	push   eax
c001ded0:	e8 dd f6 fe ff       	call   c000d5b2 <File::File(char const*, Process*)>
c001ded5:	5a                   	pop    edx
c001ded6:	59                   	pop    ecx
c001ded7:	6a 01                	push   0x1
c001ded9:	53                   	push   ebx
c001deda:	e8 ad f7 fe ff       	call   c000d68c <File::open(FileOpenMode)>
c001dedf:	83 c4 0c             	add    esp,0xc
c001dee2:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001dee6:	50                   	push   eax
c001dee7:	8d 44 24 28          	lea    eax,[esp+0x28]
c001deeb:	50                   	push   eax
c001deec:	53                   	push   ebx
c001deed:	e8 46 fa fe ff       	call   c000d938 <File::stat(unsigned long long*, bool*)>
c001def2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001def6:	40                   	inc    eax
c001def7:	89 04 24             	mov    DWORD PTR [esp],eax
c001defa:	e8 5c be fe ff       	call   c0009d5b <malloc>
c001deff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001df03:	a3 68 a8 02 c0       	mov    ds:0xc002a868,eax
c001df08:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001df0c:	5e                   	pop    esi
c001df0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001df0f:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001df13:	51                   	push   ecx
c001df14:	50                   	push   eax
c001df15:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001df19:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001df1d:	53                   	push   ebx
c001df1e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001df21:	83 c4 14             	add    esp,0x14
c001df24:	53                   	push   ebx
c001df25:	e8 c0 f7 fe ff       	call   c000d6ea <File::close()>
c001df2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df2e:	83 c4 10             	add    esp,0x10
c001df31:	a3 64 a8 02 c0       	mov    ds:0xc002a864,eax
c001df36:	eb 36                	jmp    c001df6e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001df38:	83 ec 0c             	sub    esp,0xc
c001df3b:	68 ec 70 02 c0       	push   0xc00270ec
c001df40:	e8 70 be fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001df45:	83 c4 10             	add    esp,0x10
c001df48:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001df4f:	0f 85 5d ff ff ff    	jne    c001deb2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001df55:	e4 60                	in     al,0x60
c001df57:	3c 1c                	cmp    al,0x1c
c001df59:	74 04                	je     c001df5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001df5b:	3c 5a                	cmp    al,0x5a
c001df5d:	75 f6                	jne    c001df55 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001df5f:	e4 60                	in     al,0x60
c001df61:	3c 5a                	cmp    al,0x5a
c001df63:	74 fa                	je     c001df5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001df65:	3c 1c                	cmp    al,0x1c
c001df67:	74 f6                	je     c001df5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001df69:	e9 44 ff ff ff       	jmp    c001deb2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001df6e:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001df75:	75 0b                	jne    c001df82 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001df77:	31 f6                	xor    esi,esi
c001df79:	31 db                	xor    ebx,ebx
c001df7b:	31 ed                	xor    ebp,ebp
c001df7d:	e9 a3 01 00 00       	jmp    c001e125 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001df82:	83 ec 0c             	sub    esp,0xc
c001df85:	68 fe 70 02 c0       	push   0xc00270fe
c001df8a:	e8 26 be fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001df8f:	8b 15 40 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028940
c001df95:	83 c4 10             	add    esp,0x10
c001df98:	f6 c2 80             	test   dl,0x80
c001df9b:	74 0c                	je     c001dfa9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001df9d:	0f ba e2 0b          	bt     edx,0xb
c001dfa1:	72 1a                	jb     c001dfbd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001dfa3:	eb d2                	jmp    c001df77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001dfa5:	3c 5a                	cmp    al,0x5a
c001dfa7:	74 0c                	je     c001dfb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001dfa9:	e4 60                	in     al,0x60
c001dfab:	3c 1c                	cmp    al,0x1c
c001dfad:	75 f6                	jne    c001dfa5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001dfaf:	eb 04                	jmp    c001dfb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001dfb1:	3c 1c                	cmp    al,0x1c
c001dfb3:	75 e8                	jne    c001df9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001dfb5:	e4 60                	in     al,0x60
c001dfb7:	3c 5a                	cmp    al,0x5a
c001dfb9:	74 fa                	je     c001dfb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001dfbb:	eb f4                	jmp    c001dfb1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001dfbd:	83 ec 0c             	sub    esp,0xc
c001dfc0:	68 03 71 02 c0       	push   0xc0027103
c001dfc5:	e8 eb bd fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001dfca:	83 c4 10             	add    esp,0x10
c001dfcd:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001dfd4:	75 a1                	jne    c001df77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001dfd6:	e4 60                	in     al,0x60
c001dfd8:	3c 5a                	cmp    al,0x5a
c001dfda:	74 04                	je     c001dfe0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001dfdc:	3c 1c                	cmp    al,0x1c
c001dfde:	75 f6                	jne    c001dfd6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001dfe0:	e4 60                	in     al,0x60
c001dfe2:	3c 5a                	cmp    al,0x5a
c001dfe4:	74 fa                	je     c001dfe0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001dfe6:	3c 1c                	cmp    al,0x1c
c001dfe8:	74 f6                	je     c001dfe0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001dfea:	eb 8b                	jmp    c001df77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001dfec:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001dff3:	0f 85 3d 01 00 00    	jne    c001e136 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001dff9:	a1 68 a8 02 c0       	mov    eax,ds:0xc002a868
c001dffe:	8d 7e 01             	lea    edi,[esi+0x1]
c001e001:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001e004:	d4 40                	aam    0x40
c001e006:	d5 39                	aad    0x39
c001e008:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e00f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e013:	0f 85 53 01 00 00    	jne    c001e16c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001e019:	8b 15 68 a8 02 c0    	mov    edx,DWORD PTR ds:0xc002a868
c001e01f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001e022:	d4 40                	aam    0x40
c001e024:	d5 39                	aad    0x39
c001e026:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e02a:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001e02e:	d4 40                	aam    0x40
c001e030:	d5 39                	aad    0x39
c001e032:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e036:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001e03a:	d4 40                	aam    0x40
c001e03c:	d5 39                	aad    0x39
c001e03e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e042:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001e046:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001e04a:	3c 56                	cmp    al,0x56
c001e04c:	74 49                	je     c001e097 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001e04e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001e052:	d4 40                	aam    0x40
c001e054:	d5 39                	aad    0x39
c001e056:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e059:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001e05d:	0f b6 c9             	movzx  ecx,cl
c001e060:	c1 e1 04             	shl    ecx,0x4
c001e063:	d4 40                	aam    0x40
c001e065:	d5 39                	aad    0x39
c001e067:	83 e8 30             	sub    eax,0x30
c001e06a:	0f b6 c0             	movzx  eax,al
c001e06d:	09 c1                	or     ecx,eax
c001e06f:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001e073:	c1 e1 04             	shl    ecx,0x4
c001e076:	d4 40                	aam    0x40
c001e078:	d5 39                	aad    0x39
c001e07a:	83 e8 30             	sub    eax,0x30
c001e07d:	0f b6 c0             	movzx  eax,al
c001e080:	09 c1                	or     ecx,eax
c001e082:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001e086:	c1 e1 04             	shl    ecx,0x4
c001e089:	d4 40                	aam    0x40
c001e08b:	d5 39                	aad    0x39
c001e08d:	83 e8 30             	sub    eax,0x30
c001e090:	0f b6 c0             	movzx  eax,al
c001e093:	09 c8                	or     eax,ecx
c001e095:	89 c5                	mov    ebp,eax
c001e097:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001e09b:	80 f9 44             	cmp    cl,0x44
c001e09e:	74 47                	je     c001e0e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001e0a0:	88 c8                	mov    al,cl
c001e0a2:	d4 40                	aam    0x40
c001e0a4:	d5 39                	aad    0x39
c001e0a6:	83 e8 30             	sub    eax,0x30
c001e0a9:	0f b6 f8             	movzx  edi,al
c001e0ac:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001e0b0:	c1 e7 04             	shl    edi,0x4
c001e0b3:	d4 40                	aam    0x40
c001e0b5:	d5 39                	aad    0x39
c001e0b7:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e0ba:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001e0be:	0f b6 db             	movzx  ebx,bl
c001e0c1:	09 fb                	or     ebx,edi
c001e0c3:	c1 e3 04             	shl    ebx,0x4
c001e0c6:	d4 40                	aam    0x40
c001e0c8:	d5 39                	aad    0x39
c001e0ca:	83 e8 30             	sub    eax,0x30
c001e0cd:	0f b6 f8             	movzx  edi,al
c001e0d0:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001e0d4:	09 fb                	or     ebx,edi
c001e0d6:	89 df                	mov    edi,ebx
c001e0d8:	c1 e7 04             	shl    edi,0x4
c001e0db:	d4 40                	aam    0x40
c001e0dd:	d5 39                	aad    0x39
c001e0df:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e0e2:	0f b6 db             	movzx  ebx,bl
c001e0e5:	09 fb                	or     ebx,edi
c001e0e7:	a1 64 a8 02 c0       	mov    eax,ds:0xc002a864
c001e0ec:	83 c6 10             	add    esi,0x10
c001e0ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e0f3:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001e0f7:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001e0fa:	3c 0a                	cmp    al,0xa
c001e0fc:	0f 85 a0 00 00 00    	jne    c001e1a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001e102:	3c 0a                	cmp    al,0xa
c001e104:	0f 94 c0             	sete   al
c001e107:	0f b6 c0             	movzx  eax,al
c001e10a:	01 c6                	add    esi,eax
c001e10c:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001e111:	0f 84 a2 00 00 00    	je     c001e1b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e117:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001e11f:	0f 84 94 00 00 00    	je     c001e1b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e125:	39 35 64 a8 02 c0    	cmp    DWORD PTR ds:0xc002a864,esi
c001e12b:	0f 8f bb fe ff ff    	jg     c001dfec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001e131:	e9 e8 00 00 00       	jmp    c001e21e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001e136:	83 ec 0c             	sub    esp,0xc
c001e139:	68 0a 71 02 c0       	push   0xc002710a
c001e13e:	e8 72 bc fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e143:	83 c4 10             	add    esp,0x10
c001e146:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e14d:	0f 85 a6 fe ff ff    	jne    c001dff9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e153:	e4 60                	in     al,0x60
c001e155:	3c 5a                	cmp    al,0x5a
c001e157:	74 04                	je     c001e15d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e159:	3c 1c                	cmp    al,0x1c
c001e15b:	75 f6                	jne    c001e153 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001e15d:	e4 60                	in     al,0x60
c001e15f:	3c 5a                	cmp    al,0x5a
c001e161:	74 fa                	je     c001e15d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e163:	3c 1c                	cmp    al,0x1c
c001e165:	74 f6                	je     c001e15d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e167:	e9 8d fe ff ff       	jmp    c001dff9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e16c:	83 ec 0c             	sub    esp,0xc
c001e16f:	68 12 71 02 c0       	push   0xc0027112
c001e174:	e8 3c bc fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e179:	83 c4 10             	add    esp,0x10
c001e17c:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e183:	0f 85 90 fe ff ff    	jne    c001e019 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e189:	e4 60                	in     al,0x60
c001e18b:	3c 5a                	cmp    al,0x5a
c001e18d:	74 04                	je     c001e193 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e18f:	3c 1c                	cmp    al,0x1c
c001e191:	75 f6                	jne    c001e189 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001e193:	e4 60                	in     al,0x60
c001e195:	3c 5a                	cmp    al,0x5a
c001e197:	74 fa                	je     c001e193 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e199:	3c 1c                	cmp    al,0x1c
c001e19b:	74 f6                	je     c001e193 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e19d:	e9 77 fe ff ff       	jmp    c001e019 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e1a2:	47                   	inc    edi
c001e1a3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001e1a7:	0f 84 55 ff ff ff    	je     c001e102 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001e1ad:	46                   	inc    esi
c001e1ae:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001e1b1:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e1b4:	e9 3e ff ff ff       	jmp    c001e0f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001e1b9:	80 f9 44             	cmp    cl,0x44
c001e1bc:	74 0e                	je     c001e1cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001e1be:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001e1c6:	0f 85 59 ff ff ff    	jne    c001e125 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e1cc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e1d0:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001e1d4:	c1 e0 04             	shl    eax,0x4
c001e1d7:	83 ea 30             	sub    edx,0x30
c001e1da:	09 d0                	or     eax,edx
c001e1dc:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001e1e3:	0f 85 3c ff ff ff    	jne    c001e125 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e1e9:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001e1ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e1f1:	c1 e2 04             	shl    edx,0x4
c001e1f4:	83 e8 30             	sub    eax,0x30
c001e1f7:	09 d0                	or     eax,edx
c001e1f9:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001e200:	0f 85 1f ff ff ff    	jne    c001e125 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e206:	50                   	push   eax
c001e207:	50                   	push   eax
c001e208:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e20c:	50                   	push   eax
c001e20d:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001e214:	e8 27 25 fe ff       	call   c0000740 <strcpy>
c001e219:	83 c4 10             	add    esp,0x10
c001e21c:	eb 15                	jmp    c001e233 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001e21e:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e225:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001e230:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001e233:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e23a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001e240:	5b                   	pop    ebx
c001e241:	5e                   	pop    esi
c001e242:	5f                   	pop    edi
c001e243:	5d                   	pop    ebp
c001e244:	c3                   	ret    
c001e245:	90                   	nop

c001e246 <PCI::checkBus(unsigned char)>:
c001e246:	56                   	push   esi
c001e247:	53                   	push   ebx
c001e248:	31 db                	xor    ebx,ebx
c001e24a:	51                   	push   ecx
c001e24b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e250:	52                   	push   edx
c001e251:	53                   	push   ebx
c001e252:	43                   	inc    ebx
c001e253:	56                   	push   esi
c001e254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e258:	e8 bf 07 00 00       	call   c001ea1c <PCI::checkDevice(unsigned char, unsigned char)>
c001e25d:	83 c4 10             	add    esp,0x10
c001e260:	83 fb 20             	cmp    ebx,0x20
c001e263:	75 eb                	jne    c001e250 <PCI::checkBus(unsigned char)+0xa>
c001e265:	58                   	pop    eax
c001e266:	5b                   	pop    ebx
c001e267:	5e                   	pop    esi
c001e268:	c3                   	ret    
c001e269:	90                   	nop

c001e26a <PCI::foundDevice(PCIDeviceInfo)>:
c001e26a:	55                   	push   ebp
c001e26b:	57                   	push   edi
c001e26c:	56                   	push   esi
c001e26d:	53                   	push   ebx
c001e26e:	83 ec 1c             	sub    esp,0x1c
c001e271:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e275:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001e27b:	0f 84 20 04 00 00    	je     c001e6a1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e281:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e288:	75 37                	jne    c001e2c1 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001e28a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e28e:	66 81 f9 06 04       	cmp    cx,0x406
c001e293:	75 5b                	jne    c001e2f0 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001e295:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001e29a:	50                   	push   eax
c001e29b:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001e2a0:	50                   	push   eax
c001e2a1:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001e2a6:	50                   	push   eax
c001e2a7:	53                   	push   ebx
c001e2a8:	e8 33 fa ff ff       	call   c001dce0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e2ad:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001e2b1:	0f b6 c0             	movzx  eax,al
c001e2b4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e2b8:	83 c4 2c             	add    esp,0x2c
c001e2bb:	5b                   	pop    ebx
c001e2bc:	5e                   	pop    esi
c001e2bd:	5f                   	pop    edi
c001e2be:	5d                   	pop    ebp
c001e2bf:	eb 85                	jmp    c001e246 <PCI::checkBus(unsigned char)>
c001e2c1:	83 ec 0c             	sub    esp,0xc
c001e2c4:	68 1b 71 02 c0       	push   0xc002711b
c001e2c9:	e8 e7 ba fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e2ce:	83 c4 10             	add    esp,0x10
c001e2d1:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e2d8:	75 b0                	jne    c001e28a <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e2da:	e4 60                	in     al,0x60
c001e2dc:	3c 5a                	cmp    al,0x5a
c001e2de:	74 04                	je     c001e2e4 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e2e0:	3c 1c                	cmp    al,0x1c
c001e2e2:	75 f6                	jne    c001e2da <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001e2e4:	e4 60                	in     al,0x60
c001e2e6:	3c 5a                	cmp    al,0x5a
c001e2e8:	74 fa                	je     c001e2e4 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e2ea:	3c 1c                	cmp    al,0x1c
c001e2ec:	74 f6                	je     c001e2e4 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e2ee:	eb 9a                	jmp    c001e28a <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e2f0:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e2f6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001e2fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e2fe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e302:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e306:	88 d0                	mov    al,dl
c001e308:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e30d:	74 3b                	je     c001e34a <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001e30f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e313:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e316:	85 d2                	test   edx,edx
c001e318:	74 24                	je     c001e33e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e31a:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e320:	31 ef                	xor    edi,ebp
c001e322:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e328:	75 14                	jne    c001e33e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e32a:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e330:	75 0c                	jne    c001e33e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e332:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001e338:	0f 84 63 03 00 00    	je     c001e6a1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e33e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e342:	8b 12                	mov    edx,DWORD PTR [edx]
c001e344:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e348:	eb be                	jmp    c001e308 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001e34a:	66 81 f9 01 06       	cmp    cx,0x601
c001e34f:	0f 85 81 01 00 00    	jne    c001e4d6 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001e355:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e35c:	75 25                	jne    c001e383 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001e35e:	83 ec 0c             	sub    esp,0xc
c001e361:	68 64 01 00 00       	push   0x164
c001e366:	e8 f0 b9 fe ff       	call   c0009d5b <malloc>
c001e36b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e36e:	89 c5                	mov    ebp,eax
c001e370:	e8 b7 12 00 00       	call   c001f62c <SATABus::SATABus()>
c001e375:	83 c4 10             	add    esp,0x10
c001e378:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e37f:	74 4a                	je     c001e3cb <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e381:	eb 2f                	jmp    c001e3b2 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001e383:	83 ec 0c             	sub    esp,0xc
c001e386:	68 2b 71 02 c0       	push   0xc002712b
c001e38b:	e8 25 ba fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e390:	83 c4 10             	add    esp,0x10
c001e393:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e39a:	75 c2                	jne    c001e35e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e39c:	e4 60                	in     al,0x60
c001e39e:	3c 1c                	cmp    al,0x1c
c001e3a0:	74 04                	je     c001e3a6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e3a2:	3c 5a                	cmp    al,0x5a
c001e3a4:	75 f6                	jne    c001e39c <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001e3a6:	e4 60                	in     al,0x60
c001e3a8:	3c 5a                	cmp    al,0x5a
c001e3aa:	74 fa                	je     c001e3a6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e3ac:	3c 1c                	cmp    al,0x1c
c001e3ae:	74 f6                	je     c001e3a6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e3b0:	eb ac                	jmp    c001e35e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e3b2:	83 ec 0c             	sub    esp,0xc
c001e3b5:	68 31 71 02 c0       	push   0xc0027131
c001e3ba:	e8 f6 b9 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e3bf:	83 c4 10             	add    esp,0x10
c001e3c2:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e3c9:	74 1b                	je     c001e3e6 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001e3cb:	50                   	push   eax
c001e3cc:	50                   	push   eax
c001e3cd:	55                   	push   ebp
c001e3ce:	53                   	push   ebx
c001e3cf:	e8 e6 01 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c001e3d4:	83 c4 10             	add    esp,0x10
c001e3d7:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e3de:	74 33                	je     c001e413 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e3e0:	eb 18                	jmp    c001e3fa <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001e3e2:	3c 1c                	cmp    al,0x1c
c001e3e4:	74 0c                	je     c001e3f2 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e3e6:	e4 60                	in     al,0x60
c001e3e8:	3c 5a                	cmp    al,0x5a
c001e3ea:	75 f6                	jne    c001e3e2 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001e3ec:	eb 04                	jmp    c001e3f2 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e3ee:	3c 1c                	cmp    al,0x1c
c001e3f0:	75 d9                	jne    c001e3cb <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e3f2:	e4 60                	in     al,0x60
c001e3f4:	3c 5a                	cmp    al,0x5a
c001e3f6:	74 fa                	je     c001e3f2 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e3f8:	eb f4                	jmp    c001e3ee <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001e3fa:	83 ec 0c             	sub    esp,0xc
c001e3fd:	68 39 71 02 c0       	push   0xc0027139
c001e402:	e8 ae b9 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e407:	83 c4 10             	add    esp,0x10
c001e40a:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e411:	74 29                	je     c001e43c <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001e413:	83 ec 2c             	sub    esp,0x2c
c001e416:	b9 09 00 00 00       	mov    ecx,0x9
c001e41b:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e41f:	fc                   	cld    
c001e420:	89 e7                	mov    edi,esp
c001e422:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e424:	55                   	push   ebp
c001e425:	e8 a2 00 ff ff       	call   c000e4cc <Device::preOpenPCI(PCIDeviceInfo)>
c001e42a:	83 c4 30             	add    esp,0x30
c001e42d:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e434:	74 33                	je     c001e469 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e436:	eb 18                	jmp    c001e450 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e438:	3c 1c                	cmp    al,0x1c
c001e43a:	74 0c                	je     c001e448 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e43c:	e4 60                	in     al,0x60
c001e43e:	3c 5a                	cmp    al,0x5a
c001e440:	75 f6                	jne    c001e438 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e442:	eb 04                	jmp    c001e448 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e444:	3c 1c                	cmp    al,0x1c
c001e446:	75 cb                	jne    c001e413 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e448:	e4 60                	in     al,0x60
c001e44a:	3c 5a                	cmp    al,0x5a
c001e44c:	74 fa                	je     c001e448 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e44e:	eb f4                	jmp    c001e444 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e450:	83 ec 0c             	sub    esp,0xc
c001e453:	68 41 71 02 c0       	push   0xc0027141
c001e458:	e8 58 b9 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e45d:	83 c4 10             	add    esp,0x10
c001e460:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e467:	74 23                	je     c001e48c <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e469:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e46c:	6a 00                	push   0x0
c001e46e:	6a 00                	push   0x0
c001e470:	6a 00                	push   0x0
c001e472:	55                   	push   ebp
c001e473:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e476:	83 c4 10             	add    esp,0x10
c001e479:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e480:	0f 84 1b 02 00 00    	je     c001e6a1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e486:	eb 18                	jmp    c001e4a0 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e488:	3c 1c                	cmp    al,0x1c
c001e48a:	74 0c                	je     c001e498 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e48c:	e4 60                	in     al,0x60
c001e48e:	3c 5a                	cmp    al,0x5a
c001e490:	75 f6                	jne    c001e488 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e492:	eb 04                	jmp    c001e498 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e494:	3c 1c                	cmp    al,0x1c
c001e496:	75 d1                	jne    c001e469 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e498:	e4 60                	in     al,0x60
c001e49a:	3c 5a                	cmp    al,0x5a
c001e49c:	74 fa                	je     c001e498 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e49e:	eb f4                	jmp    c001e494 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e4a0:	83 ec 0c             	sub    esp,0xc
c001e4a3:	68 49 71 02 c0       	push   0xc0027149
c001e4a8:	e8 08 b9 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e4ad:	83 c4 10             	add    esp,0x10
c001e4b0:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e4b7:	0f 85 e4 01 00 00    	jne    c001e6a1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e4bd:	e4 60                	in     al,0x60
c001e4bf:	3c 5a                	cmp    al,0x5a
c001e4c1:	74 04                	je     c001e4c7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e4c3:	3c 1c                	cmp    al,0x1c
c001e4c5:	75 f6                	jne    c001e4bd <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e4c7:	e4 60                	in     al,0x60
c001e4c9:	3c 5a                	cmp    al,0x5a
c001e4cb:	74 fa                	je     c001e4c7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e4cd:	3c 1c                	cmp    al,0x1c
c001e4cf:	74 f6                	je     c001e4c7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e4d1:	e9 cb 01 00 00       	jmp    c001e6a1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e4d6:	66 81 f9 01 01       	cmp    cx,0x101
c001e4db:	0f 85 7a 01 00 00    	jne    c001e65b <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e4e1:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e4e8:	75 25                	jne    c001e50f <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e4ea:	83 ec 0c             	sub    esp,0xc
c001e4ed:	68 70 02 00 00       	push   0x270
c001e4f2:	e8 64 b8 fe ff       	call   c0009d5b <malloc>
c001e4f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4fa:	89 c5                	mov    ebp,eax
c001e4fc:	e8 df 05 00 00       	call   c001eae0 <IDE::IDE()>
c001e501:	83 c4 10             	add    esp,0x10
c001e504:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e50b:	74 4a                	je     c001e557 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e50d:	eb 2f                	jmp    c001e53e <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e50f:	83 ec 0c             	sub    esp,0xc
c001e512:	68 51 71 02 c0       	push   0xc0027151
c001e517:	e8 99 b8 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e51c:	83 c4 10             	add    esp,0x10
c001e51f:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e526:	75 c2                	jne    c001e4ea <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e528:	e4 60                	in     al,0x60
c001e52a:	3c 5a                	cmp    al,0x5a
c001e52c:	74 04                	je     c001e532 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e52e:	3c 1c                	cmp    al,0x1c
c001e530:	75 f6                	jne    c001e528 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e532:	e4 60                	in     al,0x60
c001e534:	3c 5a                	cmp    al,0x5a
c001e536:	74 fa                	je     c001e532 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e538:	3c 1c                	cmp    al,0x1c
c001e53a:	74 f6                	je     c001e532 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e53c:	eb ac                	jmp    c001e4ea <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e53e:	83 ec 0c             	sub    esp,0xc
c001e541:	68 58 71 02 c0       	push   0xc0027158
c001e546:	e8 6a b8 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e54b:	83 c4 10             	add    esp,0x10
c001e54e:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e555:	74 1b                	je     c001e572 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e557:	57                   	push   edi
c001e558:	57                   	push   edi
c001e559:	55                   	push   ebp
c001e55a:	53                   	push   ebx
c001e55b:	e8 5a 00 ff ff       	call   c000e5ba <Device::addChild(Device*)>
c001e560:	83 c4 10             	add    esp,0x10
c001e563:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e56a:	74 33                	je     c001e59f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e56c:	eb 18                	jmp    c001e586 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e56e:	3c 1c                	cmp    al,0x1c
c001e570:	74 0c                	je     c001e57e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e572:	e4 60                	in     al,0x60
c001e574:	3c 5a                	cmp    al,0x5a
c001e576:	75 f6                	jne    c001e56e <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e578:	eb 04                	jmp    c001e57e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e57a:	3c 1c                	cmp    al,0x1c
c001e57c:	75 d9                	jne    c001e557 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e57e:	e4 60                	in     al,0x60
c001e580:	3c 5a                	cmp    al,0x5a
c001e582:	74 fa                	je     c001e57e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e584:	eb f4                	jmp    c001e57a <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e586:	83 ec 0c             	sub    esp,0xc
c001e589:	68 5f 71 02 c0       	push   0xc002715f
c001e58e:	e8 22 b8 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e593:	83 c4 10             	add    esp,0x10
c001e596:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e59d:	74 29                	je     c001e5c8 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e59f:	83 ec 2c             	sub    esp,0x2c
c001e5a2:	b9 09 00 00 00       	mov    ecx,0x9
c001e5a7:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e5ab:	fc                   	cld    
c001e5ac:	89 e7                	mov    edi,esp
c001e5ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e5b0:	55                   	push   ebp
c001e5b1:	e8 16 ff fe ff       	call   c000e4cc <Device::preOpenPCI(PCIDeviceInfo)>
c001e5b6:	83 c4 30             	add    esp,0x30
c001e5b9:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e5c0:	74 33                	je     c001e5f5 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e5c2:	eb 18                	jmp    c001e5dc <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e5c4:	3c 1c                	cmp    al,0x1c
c001e5c6:	74 0c                	je     c001e5d4 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e5c8:	e4 60                	in     al,0x60
c001e5ca:	3c 5a                	cmp    al,0x5a
c001e5cc:	75 f6                	jne    c001e5c4 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e5ce:	eb 04                	jmp    c001e5d4 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e5d0:	3c 1c                	cmp    al,0x1c
c001e5d2:	75 cb                	jne    c001e59f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e5d4:	e4 60                	in     al,0x60
c001e5d6:	3c 5a                	cmp    al,0x5a
c001e5d8:	74 fa                	je     c001e5d4 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e5da:	eb f4                	jmp    c001e5d0 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e5dc:	83 ec 0c             	sub    esp,0xc
c001e5df:	68 66 71 02 c0       	push   0xc0027166
c001e5e4:	e8 cc b7 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e5e9:	83 c4 10             	add    esp,0x10
c001e5ec:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e5f3:	74 23                	je     c001e618 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e5f5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e5f8:	6a 00                	push   0x0
c001e5fa:	6a 00                	push   0x0
c001e5fc:	6a 00                	push   0x0
c001e5fe:	55                   	push   ebp
c001e5ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e602:	83 c4 10             	add    esp,0x10
c001e605:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e60c:	0f 84 8f 00 00 00    	je     c001e6a1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e612:	eb 18                	jmp    c001e62c <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e614:	3c 1c                	cmp    al,0x1c
c001e616:	74 0c                	je     c001e624 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e618:	e4 60                	in     al,0x60
c001e61a:	3c 5a                	cmp    al,0x5a
c001e61c:	75 f6                	jne    c001e614 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e61e:	eb 04                	jmp    c001e624 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e620:	3c 1c                	cmp    al,0x1c
c001e622:	75 d1                	jne    c001e5f5 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e624:	e4 60                	in     al,0x60
c001e626:	3c 5a                	cmp    al,0x5a
c001e628:	74 fa                	je     c001e624 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e62a:	eb f4                	jmp    c001e620 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e62c:	83 ec 0c             	sub    esp,0xc
c001e62f:	68 6d 71 02 c0       	push   0xc002716d
c001e634:	e8 7c b7 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e639:	83 c4 10             	add    esp,0x10
c001e63c:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e643:	75 5c                	jne    c001e6a1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e645:	e4 60                	in     al,0x60
c001e647:	3c 5a                	cmp    al,0x5a
c001e649:	74 04                	je     c001e64f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e64b:	3c 1c                	cmp    al,0x1c
c001e64d:	75 f6                	jne    c001e645 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e64f:	e4 60                	in     al,0x60
c001e651:	3c 5a                	cmp    al,0x5a
c001e653:	74 fa                	je     c001e64f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e655:	3c 1c                	cmp    al,0x1c
c001e657:	74 f6                	je     c001e64f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e659:	eb 46                	jmp    c001e6a1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e65b:	83 ec 0c             	sub    esp,0xc
c001e65e:	68 58 01 00 00       	push   0x158
c001e663:	e8 f3 b6 fe ff       	call   c0009d5b <malloc>
c001e668:	89 c5                	mov    ebp,eax
c001e66a:	58                   	pop    eax
c001e66b:	5a                   	pop    edx
c001e66c:	68 74 71 02 c0       	push   0xc0027174
c001e671:	55                   	push   ebp
c001e672:	e8 4d 02 ff ff       	call   c000e8c4 <DriverlessDevice::DriverlessDevice(char const*)>
c001e677:	59                   	pop    ecx
c001e678:	5e                   	pop    esi
c001e679:	55                   	push   ebp
c001e67a:	53                   	push   ebx
c001e67b:	e8 3a ff fe ff       	call   c000e5ba <Device::addChild(Device*)>
c001e680:	83 c4 10             	add    esp,0x10
c001e683:	b9 09 00 00 00       	mov    ecx,0x9
c001e688:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e68c:	fc                   	cld    
c001e68d:	89 fe                	mov    esi,edi
c001e68f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e691:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e695:	83 c4 1c             	add    esp,0x1c
c001e698:	5b                   	pop    ebx
c001e699:	5e                   	pop    esi
c001e69a:	5f                   	pop    edi
c001e69b:	5d                   	pop    ebp
c001e69c:	e9 2b fe fe ff       	jmp    c000e4cc <Device::preOpenPCI(PCIDeviceInfo)>
c001e6a1:	83 c4 1c             	add    esp,0x1c
c001e6a4:	5b                   	pop    ebx
c001e6a5:	5e                   	pop    esi
c001e6a6:	5f                   	pop    edi
c001e6a7:	5d                   	pop    ebp
c001e6a8:	c3                   	ret    
c001e6a9:	90                   	nop

c001e6aa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e6aa:	55                   	push   ebp
c001e6ab:	57                   	push   edi
c001e6ac:	56                   	push   esi
c001e6ad:	53                   	push   ebx
c001e6ae:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e6b4:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e6bb:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e6c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e6c6:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e6cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e6d1:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e6d8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e6dc:	68 8e 71 02 c0       	push   0xc002718e
c001e6e1:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e6e5:	53                   	push   ebx
c001e6e6:	e8 55 20 fe ff       	call   c0000740 <strcpy>
c001e6eb:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e6f0:	b2 64                	mov    dl,0x64
c001e6f2:	89 c8                	mov    eax,ecx
c001e6f4:	f6 f2                	div    dl
c001e6f6:	b2 0a                	mov    dl,0xa
c001e6f8:	83 c0 30             	add    eax,0x30
c001e6fb:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e6ff:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e703:	83 c4 10             	add    esp,0x10
c001e706:	89 c8                	mov    eax,ecx
c001e708:	f6 f2                	div    dl
c001e70a:	89 c1                	mov    ecx,eax
c001e70c:	0f b6 c0             	movzx  eax,al
c001e70f:	88 e9                	mov    cl,ch
c001e711:	f6 f2                	div    dl
c001e713:	88 e0                	mov    al,ah
c001e715:	83 c0 30             	add    eax,0x30
c001e718:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e71c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e720:	8d 41 30             	lea    eax,[ecx+0x30]
c001e723:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e727:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e72b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e730:	f6 f2                	div    dl
c001e732:	89 c1                	mov    ecx,eax
c001e734:	0f b6 c0             	movzx  eax,al
c001e737:	88 e9                	mov    cl,ch
c001e739:	f6 f2                	div    dl
c001e73b:	88 e0                	mov    al,ah
c001e73d:	83 c0 30             	add    eax,0x30
c001e740:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e744:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e748:	8d 41 30             	lea    eax,[ecx+0x30]
c001e74b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e74f:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e753:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e758:	f6 f2                	div    dl
c001e75a:	89 c1                	mov    ecx,eax
c001e75c:	0f b6 c0             	movzx  eax,al
c001e75f:	88 e9                	mov    cl,ch
c001e761:	f6 f2                	div    dl
c001e763:	88 e0                	mov    al,ah
c001e765:	83 c0 30             	add    eax,0x30
c001e768:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e76f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e773:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e777:	8d 41 30             	lea    eax,[ecx+0x30]
c001e77a:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e77e:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e782:	74 29                	je     c001e7ad <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e784:	83 ec 0c             	sub    esp,0xc
c001e787:	53                   	push   ebx
c001e788:	e8 28 b6 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e78d:	83 c4 10             	add    esp,0x10
c001e790:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e797:	75 14                	jne    c001e7ad <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e799:	e4 60                	in     al,0x60
c001e79b:	3c 1c                	cmp    al,0x1c
c001e79d:	74 04                	je     c001e7a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e79f:	3c 5a                	cmp    al,0x5a
c001e7a1:	75 f6                	jne    c001e799 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e7a3:	e4 60                	in     al,0x60
c001e7a5:	3c 5a                	cmp    al,0x5a
c001e7a7:	74 fa                	je     c001e7a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e7a9:	3c 1c                	cmp    al,0x1c
c001e7ab:	74 f6                	je     c001e7a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e7ad:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e7b2:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e7b7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e7bc:	83 ec 0c             	sub    esp,0xc
c001e7bf:	6a 0c                	push   0xc
c001e7c1:	56                   	push   esi
c001e7c2:	53                   	push   ebx
c001e7c3:	57                   	push   edi
c001e7c4:	55                   	push   ebp
c001e7c5:	e8 68 f3 ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e7ca:	83 c4 20             	add    esp,0x20
c001e7cd:	56                   	push   esi
c001e7ce:	53                   	push   ebx
c001e7cf:	57                   	push   edi
c001e7d0:	55                   	push   ebp
c001e7d1:	e8 50 f4 ff ff       	call   c001dc26 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e7d6:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e7db:	56                   	push   esi
c001e7dc:	53                   	push   ebx
c001e7dd:	57                   	push   edi
c001e7de:	55                   	push   ebp
c001e7df:	e8 d8 f4 ff ff       	call   c001dcbc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e7e4:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e7e8:	83 c4 14             	add    esp,0x14
c001e7eb:	6a 3c                	push   0x3c
c001e7ed:	56                   	push   esi
c001e7ee:	53                   	push   ebx
c001e7ef:	57                   	push   edi
c001e7f0:	55                   	push   ebp
c001e7f1:	e8 3c f3 ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e7f6:	0f b6 c4             	movzx  eax,ah
c001e7f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e7fd:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e801:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e808:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c001e80d:	83 c4 20             	add    esp,0x20
c001e810:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e816:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e81d:	0f 84 38 01 00 00    	je     c001e95b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e823:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e82b:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c001e830:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e834:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e83a:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e840:	0f 8e 15 01 00 00    	jle    c001e95b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e846:	50                   	push   eax
c001e847:	50                   	push   eax
c001e848:	68 a9 71 02 c0       	push   0xc00271a9
c001e84d:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e851:	50                   	push   eax
c001e852:	e8 e9 1e fe ff       	call   c0000740 <strcpy>
c001e857:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e85b:	b9 0a 00 00 00       	mov    ecx,0xa
c001e860:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e864:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e868:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e86c:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e870:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e874:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e878:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e87c:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e880:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e884:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e888:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e88c:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e890:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e894:	83 c4 10             	add    esp,0x10
c001e897:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e89b:	99                   	cdq    
c001e89c:	f7 f9                	idiv   ecx
c001e89e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e8a2:	99                   	cdq    
c001e8a3:	f7 f9                	idiv   ecx
c001e8a5:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e8a9:	83 c2 30             	add    edx,0x30
c001e8ac:	83 c0 30             	add    eax,0x30
c001e8af:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e8b3:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e8b7:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001e8be:	74 2d                	je     c001e8ed <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e8c0:	83 ec 0c             	sub    esp,0xc
c001e8c3:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e8c7:	50                   	push   eax
c001e8c8:	e8 e8 b4 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001e8cd:	83 c4 10             	add    esp,0x10
c001e8d0:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001e8d7:	75 14                	jne    c001e8ed <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e8d9:	e4 60                	in     al,0x60
c001e8db:	3c 5a                	cmp    al,0x5a
c001e8dd:	74 04                	je     c001e8e3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e8df:	3c 1c                	cmp    al,0x1c
c001e8e1:	75 f6                	jne    c001e8d9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e8e3:	e4 60                	in     al,0x60
c001e8e5:	3c 5a                	cmp    al,0x5a
c001e8e7:	74 fa                	je     c001e8e3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e8e9:	3c 1c                	cmp    al,0x1c
c001e8eb:	74 f6                	je     c001e8e3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e8ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e8f1:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c001e8f6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e8fc:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e8ff:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e906:	39 d3                	cmp    ebx,edx
c001e908:	75 48                	jne    c001e952 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e90a:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e911:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e915:	75 3b                	jne    c001e952 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e917:	83 ec 0c             	sub    esp,0xc
c001e91a:	68 d8 71 02 c0       	push   0xc00271d8
c001e91f:	e8 23 e7 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001e924:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e928:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c001e92d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e933:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e93b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e93f:	50                   	push   eax
c001e940:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e944:	53                   	push   ebx
c001e945:	68 fd 71 02 c0       	push   0xc00271fd
c001e94a:	e8 f8 e6 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001e94f:	83 c4 20             	add    esp,0x20
c001e952:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e956:	e9 d0 fe ff ff       	jmp    c001e82b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e95b:	31 d2                	xor    edx,edx
c001e95d:	83 ec 0c             	sub    esp,0xc
c001e960:	56                   	push   esi
c001e961:	53                   	push   ebx
c001e962:	57                   	push   edi
c001e963:	52                   	push   edx
c001e964:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e968:	55                   	push   ebp
c001e969:	e8 9a f3 ff ff       	call   c001dd08 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e96e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e972:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e979:	42                   	inc    edx
c001e97a:	83 c4 20             	add    esp,0x20
c001e97d:	83 fa 06             	cmp    edx,0x6
c001e980:	75 db                	jne    c001e95d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e982:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e987:	83 ec 0c             	sub    esp,0xc
c001e98a:	86 e0                	xchg   al,ah
c001e98c:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e994:	6a 02                	push   0x2
c001e996:	56                   	push   esi
c001e997:	53                   	push   ebx
c001e998:	57                   	push   edi
c001e999:	55                   	push   ebp
c001e99a:	e8 93 f1 ff ff       	call   c001db32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e99f:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e9a7:	83 c4 20             	add    esp,0x20
c001e9aa:	56                   	push   esi
c001e9ab:	53                   	push   ebx
c001e9ac:	57                   	push   edi
c001e9ad:	55                   	push   ebp
c001e9ae:	e8 bd f2 ff ff       	call   c001dc70 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e9b3:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e9ba:	56                   	push   esi
c001e9bb:	53                   	push   ebx
c001e9bc:	57                   	push   edi
c001e9bd:	55                   	push   ebp
c001e9be:	e8 17 f2 ff ff       	call   c001dbda <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e9c3:	b9 09 00 00 00       	mov    ecx,0x9
c001e9c8:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e9d0:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e9d4:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e9db:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e9df:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e9e6:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e9ea:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e9f1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e9f5:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e9fc:	83 ec 0c             	sub    esp,0xc
c001e9ff:	fc                   	cld    
c001ea00:	89 e7                	mov    edi,esp
c001ea02:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001ea09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ea0b:	55                   	push   ebp
c001ea0c:	e8 59 f8 ff ff       	call   c001e26a <PCI::foundDevice(PCIDeviceInfo)>
c001ea11:	81 c4 dc 00 00 00    	add    esp,0xdc
c001ea17:	5b                   	pop    ebx
c001ea18:	5e                   	pop    esi
c001ea19:	5f                   	pop    edi
c001ea1a:	5d                   	pop    ebp
c001ea1b:	c3                   	ret    

c001ea1c <PCI::checkDevice(unsigned char, unsigned char)>:
c001ea1c:	55                   	push   ebp
c001ea1d:	57                   	push   edi
c001ea1e:	56                   	push   esi
c001ea1f:	53                   	push   ebx
c001ea20:	83 ec 0c             	sub    esp,0xc
c001ea23:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ea27:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ea2c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ea31:	6a 00                	push   0x0
c001ea33:	56                   	push   esi
c001ea34:	57                   	push   edi
c001ea35:	55                   	push   ebp
c001ea36:	e8 9f f1 ff ff       	call   c001dbda <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea3b:	6a 00                	push   0x0
c001ea3d:	56                   	push   esi
c001ea3e:	57                   	push   edi
c001ea3f:	55                   	push   ebp
c001ea40:	e8 65 fc ff ff       	call   c001e6aa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ea45:	83 c4 20             	add    esp,0x20
c001ea48:	6a 00                	push   0x0
c001ea4a:	56                   	push   esi
c001ea4b:	57                   	push   edi
c001ea4c:	55                   	push   ebp
c001ea4d:	e8 ac f1 ff ff       	call   c001dbfe <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ea52:	83 c4 10             	add    esp,0x10
c001ea55:	84 c0                	test   al,al
c001ea57:	79 27                	jns    c001ea80 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ea59:	bb 01 00 00 00       	mov    ebx,0x1
c001ea5e:	53                   	push   ebx
c001ea5f:	56                   	push   esi
c001ea60:	57                   	push   edi
c001ea61:	55                   	push   ebp
c001ea62:	e8 73 f1 ff ff       	call   c001dbda <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea67:	83 c4 10             	add    esp,0x10
c001ea6a:	66 40                	inc    ax
c001ea6c:	74 0c                	je     c001ea7a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001ea6e:	53                   	push   ebx
c001ea6f:	56                   	push   esi
c001ea70:	57                   	push   edi
c001ea71:	55                   	push   ebp
c001ea72:	e8 33 fc ff ff       	call   c001e6aa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ea77:	83 c4 10             	add    esp,0x10
c001ea7a:	43                   	inc    ebx
c001ea7b:	83 fb 08             	cmp    ebx,0x8
c001ea7e:	75 de                	jne    c001ea5e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ea80:	83 c4 0c             	add    esp,0xc
c001ea83:	5b                   	pop    ebx
c001ea84:	5e                   	pop    esi
c001ea85:	5f                   	pop    edi
c001ea86:	5d                   	pop    ebp
c001ea87:	c3                   	ret    

c001ea88 <PCI::detect()>:
c001ea88:	56                   	push   esi
c001ea89:	53                   	push   ebx
c001ea8a:	53                   	push   ebx
c001ea8b:	31 db                	xor    ebx,ebx
c001ea8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ea91:	6a 00                	push   0x0
c001ea93:	6a 00                	push   0x0
c001ea95:	6a 00                	push   0x0
c001ea97:	56                   	push   esi
c001ea98:	e8 61 f1 ff ff       	call   c001dbfe <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ea9d:	83 c4 10             	add    esp,0x10
c001eaa0:	a8 80                	test   al,0x80
c001eaa2:	75 21                	jne    c001eac5 <PCI::detect()+0x3d>
c001eaa4:	51                   	push   ecx
c001eaa5:	51                   	push   ecx
c001eaa6:	6a 00                	push   0x0
c001eaa8:	56                   	push   esi
c001eaa9:	e8 98 f7 ff ff       	call   c001e246 <PCI::checkBus(unsigned char)>
c001eaae:	83 c4 10             	add    esp,0x10
c001eab1:	eb 24                	jmp    c001ead7 <PCI::detect()+0x4f>
c001eab3:	52                   	push   edx
c001eab4:	52                   	push   edx
c001eab5:	53                   	push   ebx
c001eab6:	43                   	inc    ebx
c001eab7:	56                   	push   esi
c001eab8:	e8 89 f7 ff ff       	call   c001e246 <PCI::checkBus(unsigned char)>
c001eabd:	83 c4 10             	add    esp,0x10
c001eac0:	83 fb 08             	cmp    ebx,0x8
c001eac3:	74 12                	je     c001ead7 <PCI::detect()+0x4f>
c001eac5:	53                   	push   ebx
c001eac6:	6a 00                	push   0x0
c001eac8:	6a 00                	push   0x0
c001eaca:	56                   	push   esi
c001eacb:	e8 0a f1 ff ff       	call   c001dbda <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ead0:	83 c4 10             	add    esp,0x10
c001ead3:	66 40                	inc    ax
c001ead5:	74 dc                	je     c001eab3 <PCI::detect()+0x2b>
c001ead7:	58                   	pop    eax
c001ead8:	5b                   	pop    ebx
c001ead9:	5e                   	pop    esi
c001eada:	c3                   	ret    
c001eadb:	90                   	nop

c001eadc <IDE::close(int, int, void*)>:
c001eadc:	83 c8 ff             	or     eax,0xffffffff
c001eadf:	c3                   	ret    

c001eae0 <IDE::IDE()>:
c001eae0:	83 ec 0c             	sub    esp,0xc
c001eae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae7:	83 ec 08             	sub    esp,0x8
c001eaea:	68 44 72 02 c0       	push   0xc0027244
c001eaef:	50                   	push   eax
c001eaf0:	e8 73 fe fe ff       	call   c000e968 <HardDiskController::HardDiskController(char const*)>
c001eaf5:	83 c4 10             	add    esp,0x10
c001eaf8:	ba d4 72 02 c0       	mov    edx,0xc00272d4
c001eafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb01:	89 10                	mov    DWORD PTR [eax],edx
c001eb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb07:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001eb0e:	90                   	nop
c001eb0f:	83 c4 0c             	add    esp,0xc
c001eb12:	c3                   	ret    
c001eb13:	90                   	nop

c001eb14 <IDE::prepareInterrupt(unsigned char)>:
c001eb14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb19:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb1d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001eb25:	c3                   	ret    

c001eb26 <selectDrive(unsigned char, unsigned char)>:
c001eb26:	c3                   	ret    
c001eb27:	90                   	nop

c001eb28 <IDE::getBase(unsigned char)>:
c001eb28:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001eb2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb31:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001eb39:	c3                   	ret    

c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001eb3a:	55                   	push   ebp
c001eb3b:	57                   	push   edi
c001eb3c:	56                   	push   esi
c001eb3d:	53                   	push   ebx
c001eb3e:	83 ec 1c             	sub    esp,0x1c
c001eb41:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001eb45:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eb49:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001eb4c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001eb50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eb54:	80 f9 03             	cmp    cl,0x3
c001eb57:	77 51                	ja     c001ebaa <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001eb59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb5d:	0f b6 f2             	movzx  esi,dl
c001eb60:	0f b6 db             	movzx  ebx,bl
c001eb63:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001eb66:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001eb6a:	83 ca 80             	or     edx,0xffffff80
c001eb6d:	0f b6 d2             	movzx  edx,dl
c001eb70:	52                   	push   edx
c001eb71:	6a 0c                	push   0xc
c001eb73:	56                   	push   esi
c001eb74:	57                   	push   edi
c001eb75:	e8 c0 ff ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb7a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001eb7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb83:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001eb87:	ee                   	out    dx,al
c001eb88:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001eb8d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001eb91:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001eb95:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eb99:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001eba1:	83 c4 2c             	add    esp,0x2c
c001eba4:	5b                   	pop    ebx
c001eba5:	5e                   	pop    esi
c001eba6:	5f                   	pop    edi
c001eba7:	5d                   	pop    ebp
c001eba8:	eb 90                	jmp    c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebaa:	80 fb 07             	cmp    bl,0x7
c001ebad:	77 12                	ja     c001ebc1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001ebaf:	0f b6 d2             	movzx  edx,dl
c001ebb2:	0f b6 db             	movzx  ebx,bl
c001ebb5:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001ebbd:	89 da                	mov    edx,ebx
c001ebbf:	eb 2f                	jmp    c001ebf0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ebc1:	80 fb 0d             	cmp    bl,0xd
c001ebc4:	77 13                	ja     c001ebd9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001ebc6:	0f b6 d2             	movzx  edx,dl
c001ebc9:	0f b6 db             	movzx  ebx,bl
c001ebcc:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ebd3:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ebd7:	eb 17                	jmp    c001ebf0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ebd9:	80 fb 15             	cmp    bl,0x15
c001ebdc:	77 13                	ja     c001ebf1 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ebde:	0f b6 d2             	movzx  edx,dl
c001ebe1:	0f b6 db             	movzx  ebx,bl
c001ebe4:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ebec:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ebf0:	ee                   	out    dx,al
c001ebf1:	83 c4 1c             	add    esp,0x1c
c001ebf4:	5b                   	pop    ebx
c001ebf5:	5e                   	pop    esi
c001ebf6:	5f                   	pop    edi
c001ebf7:	5d                   	pop    ebp
c001ebf8:	c3                   	ret    
c001ebf9:	90                   	nop

c001ebfa <IDE::read(unsigned char, unsigned char)>:
c001ebfa:	55                   	push   ebp
c001ebfb:	57                   	push   edi
c001ebfc:	56                   	push   esi
c001ebfd:	53                   	push   ebx
c001ebfe:	83 ec 1c             	sub    esp,0x1c
c001ec01:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ec05:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ec09:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ec0c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ec10:	3c 03                	cmp    al,0x3
c001ec12:	77 43                	ja     c001ec57 <IDE::read(unsigned char, unsigned char)+0x5d>
c001ec14:	0f b6 f2             	movzx  esi,dl
c001ec17:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ec1a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001ec1e:	83 c8 80             	or     eax,0xffffff80
c001ec21:	0f b6 c0             	movzx  eax,al
c001ec24:	50                   	push   eax
c001ec25:	6a 0c                	push   0xc
c001ec27:	56                   	push   esi
c001ec28:	57                   	push   edi
c001ec29:	e8 0c ff ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec2e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001ec33:	0f b6 c3             	movzx  eax,bl
c001ec36:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001ec3a:	ec                   	in     al,dx
c001ec3b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ec3f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ec44:	52                   	push   edx
c001ec45:	6a 0c                	push   0xc
c001ec47:	56                   	push   esi
c001ec48:	57                   	push   edi
c001ec49:	e8 ec fe ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec4e:	83 c4 20             	add    esp,0x20
c001ec51:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ec55:	eb 49                	jmp    c001eca0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ec57:	80 fb 07             	cmp    bl,0x7
c001ec5a:	77 12                	ja     c001ec6e <IDE::read(unsigned char, unsigned char)+0x74>
c001ec5c:	0f b6 d2             	movzx  edx,dl
c001ec5f:	0f b6 c3             	movzx  eax,bl
c001ec62:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001ec6a:	89 c2                	mov    edx,eax
c001ec6c:	eb 31                	jmp    c001ec9f <IDE::read(unsigned char, unsigned char)+0xa5>
c001ec6e:	80 fb 0d             	cmp    bl,0xd
c001ec71:	77 13                	ja     c001ec86 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ec73:	0f b6 d2             	movzx  edx,dl
c001ec76:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ec7d:	0f b6 d3             	movzx  edx,bl
c001ec80:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ec84:	eb 19                	jmp    c001ec9f <IDE::read(unsigned char, unsigned char)+0xa5>
c001ec86:	31 c0                	xor    eax,eax
c001ec88:	80 fb 15             	cmp    bl,0x15
c001ec8b:	77 13                	ja     c001eca0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ec8d:	0f b6 d2             	movzx  edx,dl
c001ec90:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ec98:	0f b6 d3             	movzx  edx,bl
c001ec9b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ec9f:	ec                   	in     al,dx
c001eca0:	83 c4 1c             	add    esp,0x1c
c001eca3:	5b                   	pop    ebx
c001eca4:	5e                   	pop    esi
c001eca5:	5f                   	pop    edi
c001eca6:	5d                   	pop    ebp
c001eca7:	c3                   	ret    

c001eca8 <IDE::waitInterrupt(unsigned char)>:
c001eca8:	55                   	push   ebp
c001eca9:	57                   	push   edi
c001ecaa:	56                   	push   esi
c001ecab:	53                   	push   ebx
c001ecac:	31 db                	xor    ebx,ebx
c001ecae:	83 ec 0c             	sub    esp,0xc
c001ecb1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ecb5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ecba:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ecc2:	89 e8                	mov    eax,ebp
c001ecc4:	84 c0                	test   al,al
c001ecc6:	75 30                	jne    c001ecf8 <IDE::waitInterrupt(unsigned char)+0x50>
c001ecc8:	50                   	push   eax
c001ecc9:	6a 0c                	push   0xc
c001eccb:	56                   	push   esi
c001eccc:	57                   	push   edi
c001eccd:	e8 28 ff ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001ecd2:	83 c4 10             	add    esp,0x10
c001ecd5:	a8 01                	test   al,0x1
c001ecd7:	75 27                	jne    c001ed00 <IDE::waitInterrupt(unsigned char)+0x58>
c001ecd9:	f6 c3 04             	test   bl,0x4
c001ecdc:	75 12                	jne    c001ecf0 <IDE::waitInterrupt(unsigned char)+0x48>
c001ecde:	83 fb 32             	cmp    ebx,0x32
c001ece1:	7e 0d                	jle    c001ecf0 <IDE::waitInterrupt(unsigned char)+0x48>
c001ece3:	83 ec 0c             	sub    esp,0xc
c001ece6:	6a 64                	push   0x64
c001ece8:	e8 db a2 ff ff       	call   c0018fc8 <milliTenthSleep(unsigned int)>
c001eced:	83 c4 10             	add    esp,0x10
c001ecf0:	83 fb 3c             	cmp    ebx,0x3c
c001ecf3:	74 0b                	je     c001ed00 <IDE::waitInterrupt(unsigned char)+0x58>
c001ecf5:	43                   	inc    ebx
c001ecf6:	eb c2                	jmp    c001ecba <IDE::waitInterrupt(unsigned char)+0x12>
c001ecf8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ed00:	83 c4 0c             	add    esp,0xc
c001ed03:	89 e8                	mov    eax,ebp
c001ed05:	5b                   	pop    ebx
c001ed06:	5e                   	pop    esi
c001ed07:	5f                   	pop    edi
c001ed08:	5d                   	pop    ebp
c001ed09:	c3                   	ret    

c001ed0a <ideChannel0IRQHandler(regs*, void*)>:
c001ed0a:	83 ec 10             	sub    esp,0x10
c001ed0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed11:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ed18:	6a 07                	push   0x7
c001ed1a:	6a 00                	push   0x0
c001ed1c:	50                   	push   eax
c001ed1d:	e8 d8 fe ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001ed22:	83 c4 1c             	add    esp,0x1c
c001ed25:	c3                   	ret    

c001ed26 <ideChannel1IRQHandler(regs*, void*)>:
c001ed26:	83 ec 10             	sub    esp,0x10
c001ed29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed2d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ed34:	6a 07                	push   0x7
c001ed36:	6a 01                	push   0x1
c001ed38:	50                   	push   eax
c001ed39:	e8 bc fe ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001ed3e:	83 c4 1c             	add    esp,0x1c
c001ed41:	c3                   	ret    

c001ed42 <IDE::enableIRQs(unsigned char, bool)>:
c001ed42:	57                   	push   edi
c001ed43:	56                   	push   esi
c001ed44:	be 04 00 00 00       	mov    esi,0x4
c001ed49:	53                   	push   ebx
c001ed4a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ed4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ed53:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ed58:	0f 94 c0             	sete   al
c001ed5b:	d1 e0                	shl    eax,1
c001ed5d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001ed64:	0f b6 c0             	movzx  eax,al
c001ed67:	50                   	push   eax
c001ed68:	6a 0c                	push   0xc
c001ed6a:	57                   	push   edi
c001ed6b:	53                   	push   ebx
c001ed6c:	e8 c9 fd ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed71:	83 c4 10             	add    esp,0x10
c001ed74:	50                   	push   eax
c001ed75:	6a 0c                	push   0xc
c001ed77:	57                   	push   edi
c001ed78:	53                   	push   ebx
c001ed79:	e8 7c fe ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001ed7e:	83 c4 10             	add    esp,0x10
c001ed81:	4e                   	dec    esi
c001ed82:	75 f0                	jne    c001ed74 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001ed84:	5b                   	pop    ebx
c001ed85:	5e                   	pop    esi
c001ed86:	5f                   	pop    edi
c001ed87:	c3                   	ret    

c001ed88 <IDE::open(int, int, void*)>:
c001ed88:	55                   	push   ebp
c001ed89:	57                   	push   edi
c001ed8a:	56                   	push   esi
c001ed8b:	53                   	push   ebx
c001ed8c:	83 ec 1c             	sub    esp,0x1c
c001ed8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ed93:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ed9c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001eda5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001edac:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001edb3:	0f 85 b0 02 00 00    	jne    c001f069 <IDE::open(int, int, void*)+0x2e1>
c001edb9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001edbf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001edc3:	83 e0 7f             	and    eax,0x7f
c001edc6:	3c 05                	cmp    al,0x5
c001edc8:	74 04                	je     c001edce <IDE::open(int, int, void*)+0x46>
c001edca:	3c 0f                	cmp    al,0xf
c001edcc:	75 32                	jne    c001ee00 <IDE::open(int, int, void*)+0x78>
c001edce:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001edd4:	83 e0 fc             	and    eax,0xfffffffc
c001edd7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001edde:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ede4:	83 e0 fc             	and    eax,0xfffffffc
c001ede7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001edee:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001edf4:	83 e0 fc             	and    eax,0xfffffffc
c001edf7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001edfe:	eb 14                	jmp    c001ee14 <IDE::open(int, int, void*)+0x8c>
c001ee00:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ee0a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ee14:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ee1b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ee22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ee26:	89 c6                	mov    esi,eax
c001ee28:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ee2d:	c1 e6 10             	shl    esi,0x10
c001ee30:	89 e8                	mov    eax,ebp
c001ee32:	89 fa                	mov    edx,edi
c001ee34:	c1 e0 0b             	shl    eax,0xb
c001ee37:	09 f0                	or     eax,esi
c001ee39:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ee40:	c1 e6 08             	shl    esi,0x8
c001ee43:	09 c6                	or     esi,eax
c001ee45:	89 f0                	mov    eax,esi
c001ee47:	0d 08 00 00 80       	or     eax,0x80000008
c001ee4c:	ef                   	out    dx,eax
c001ee4d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001ee52:	89 ca                	mov    edx,ecx
c001ee54:	ed                   	in     eax,dx
c001ee55:	c1 e8 10             	shr    eax,0x10
c001ee58:	3d ff ff 00 00       	cmp    eax,0xffff
c001ee5d:	0f 84 f5 00 00 00    	je     c001ef58 <IDE::open(int, int, void*)+0x1d0>
c001ee63:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ee69:	89 fa                	mov    edx,edi
c001ee6b:	89 f0                	mov    eax,esi
c001ee6d:	ef                   	out    dx,eax
c001ee6e:	b0 fe                	mov    al,0xfe
c001ee70:	89 ca                	mov    edx,ecx
c001ee72:	ee                   	out    dx,al
c001ee73:	89 f0                	mov    eax,esi
c001ee75:	89 fa                	mov    edx,edi
c001ee77:	ef                   	out    dx,eax
c001ee78:	89 ca                	mov    edx,ecx
c001ee7a:	ed                   	in     eax,dx
c001ee7b:	3c fe                	cmp    al,0xfe
c001ee7d:	0f 85 a9 00 00 00    	jne    c001ef2c <IDE::open(int, int, void*)+0x1a4>
c001ee83:	8b 15 28 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028928
c001ee89:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001ee90:	74 33                	je     c001eec5 <IDE::open(int, int, void*)+0x13d>
c001ee92:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001ee98:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001ee9c:	40                   	inc    eax
c001ee9d:	83 ec 0c             	sub    esp,0xc
c001eea0:	0f b6 c0             	movzx  eax,al
c001eea3:	50                   	push   eax
c001eea4:	55                   	push   ebp
c001eea5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eea9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001eeaf:	51                   	push   ecx
c001eeb0:	e8 1f 37 ff ff       	call   c00125d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001eeb5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001eeba:	83 c4 1c             	add    esp,0x1c
c001eebd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001eec3:	eb 0a                	jmp    c001eecf <IDE::open(int, int, void*)+0x147>
c001eec5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001eecf:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001eed6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eedd:	c1 e1 10             	shl    ecx,0x10
c001eee0:	c1 e0 08             	shl    eax,0x8
c001eee3:	bf f8 0c 00 00       	mov    edi,0xcf8
c001eee8:	09 c1                	or     ecx,eax
c001eeea:	89 fa                	mov    edx,edi
c001eeec:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eef3:	c1 e0 0b             	shl    eax,0xb
c001eef6:	09 c1                	or     ecx,eax
c001eef8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001eefe:	89 c8                	mov    eax,ecx
c001ef00:	ef                   	out    dx,eax
c001ef01:	be fc 0c 00 00       	mov    esi,0xcfc
c001ef06:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ef0c:	89 f2                	mov    edx,esi
c001ef0e:	ee                   	out    dx,al
c001ef0f:	89 c8                	mov    eax,ecx
c001ef11:	89 fa                	mov    edx,edi
c001ef13:	ef                   	out    dx,eax
c001ef14:	89 f2                	mov    edx,esi
c001ef16:	ed                   	in     eax,dx
c001ef17:	0f b6 c0             	movzx  eax,al
c001ef1a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ef20:	74 46                	je     c001ef68 <IDE::open(int, int, void*)+0x1e0>
c001ef22:	83 ec 0c             	sub    esp,0xc
c001ef25:	68 5c 72 02 c0       	push   0xc002725c
c001ef2a:	eb 34                	jmp    c001ef60 <IDE::open(int, int, void*)+0x1d8>
c001ef2c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ef35:	75 17                	jne    c001ef4e <IDE::open(int, int, void*)+0x1c6>
c001ef37:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001ef3c:	74 07                	je     c001ef45 <IDE::open(int, int, void*)+0x1bd>
c001ef3e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001ef43:	75 09                	jne    c001ef4e <IDE::open(int, int, void*)+0x1c6>
c001ef45:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ef4c:	eb 1a                	jmp    c001ef68 <IDE::open(int, int, void*)+0x1e0>
c001ef4e:	83 ec 0c             	sub    esp,0xc
c001ef51:	68 64 72 02 c0       	push   0xc0027264
c001ef56:	eb 08                	jmp    c001ef60 <IDE::open(int, int, void*)+0x1d8>
c001ef58:	83 ec 0c             	sub    esp,0xc
c001ef5b:	68 95 72 02 c0       	push   0xc0027295
c001ef60:	e8 60 61 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c001ef65:	83 c4 10             	add    esp,0x10
c001ef68:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ef6f:	79 1a                	jns    c001ef8b <IDE::open(int, int, void*)+0x203>
c001ef71:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ef77:	83 e0 fc             	and    eax,0xfffffffc
c001ef7a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ef81:	83 c0 08             	add    eax,0x8
c001ef84:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ef8b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ef91:	89 c2                	mov    edx,eax
c001ef93:	83 e2 0f             	and    edx,0xf
c001ef96:	66 83 fa 08          	cmp    dx,0x8
c001ef9a:	75 0a                	jne    c001efa6 <IDE::open(int, int, void*)+0x21e>
c001ef9c:	83 e8 02             	sub    eax,0x2
c001ef9f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001efa6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001efac:	89 c2                	mov    edx,eax
c001efae:	83 e2 0f             	and    edx,0xf
c001efb1:	66 83 fa 08          	cmp    dx,0x8
c001efb5:	75 0a                	jne    c001efc1 <IDE::open(int, int, void*)+0x239>
c001efb7:	83 e8 02             	sub    eax,0x2
c001efba:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001efc1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001efc8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001efcf:	89 d0                	mov    eax,edx
c001efd1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001efd4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001efd8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001efdc:	8d 4a 01             	lea    ecx,[edx+0x1]
c001efdf:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001efe4:	0f b6 c9             	movzx  ecx,cl
c001efe7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001efee:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001eff1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001eff5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001eff9:	8d 50 02             	lea    edx,[eax+0x2]
c001effc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f001:	0f b6 d2             	movzx  edx,dl
c001f004:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f00a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f00d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f011:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f015:	8d 48 03             	lea    ecx,[eax+0x3]
c001f018:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f01d:	0f b6 c9             	movzx  ecx,cl
c001f020:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f026:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f029:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f02d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f031:	8d 50 04             	lea    edx,[eax+0x4]
c001f034:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f03a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f03f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f046:	66 85 f6             	test   si,si
c001f049:	74 5b                	je     c001f0a6 <IDE::open(int, int, void*)+0x31e>
c001f04b:	0f b6 d2             	movzx  edx,dl
c001f04e:	83 c0 05             	add    eax,0x5
c001f051:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f054:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f058:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f05c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f062:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f067:	eb 3d                	jmp    c001f0a6 <IDE::open(int, int, void*)+0x31e>
c001f069:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f06f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f076:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f07d:	66 05 06 02          	add    ax,0x206
c001f081:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f088:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f08f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f096:	66 05 06 02          	add    ax,0x206
c001f09a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f0a1:	e9 e5 fe ff ff       	jmp    c001ef8b <IDE::open(int, int, void*)+0x203>
c001f0a6:	50                   	push   eax
c001f0a7:	50                   	push   eax
c001f0a8:	6a 00                	push   0x0
c001f0aa:	53                   	push   ebx
c001f0ab:	e8 64 fa ff ff       	call   c001eb14 <IDE::prepareInterrupt(unsigned char)>
c001f0b0:	5a                   	pop    edx
c001f0b1:	59                   	pop    ecx
c001f0b2:	6a 01                	push   0x1
c001f0b4:	53                   	push   ebx
c001f0b5:	e8 5a fa ff ff       	call   c001eb14 <IDE::prepareInterrupt(unsigned char)>
c001f0ba:	83 c4 0c             	add    esp,0xc
c001f0bd:	6a 00                	push   0x0
c001f0bf:	6a 00                	push   0x0
c001f0c1:	53                   	push   ebx
c001f0c2:	e8 7b fc ff ff       	call   c001ed42 <IDE::enableIRQs(unsigned char, bool)>
c001f0c7:	83 c4 0c             	add    esp,0xc
c001f0ca:	6a 00                	push   0x0
c001f0cc:	6a 01                	push   0x1
c001f0ce:	53                   	push   ebx
c001f0cf:	e8 6e fc ff ff       	call   c001ed42 <IDE::enableIRQs(unsigned char, bool)>
c001f0d4:	83 c4 10             	add    esp,0x10
c001f0d7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f0de:	74 34                	je     c001f114 <IDE::open(int, int, void*)+0x38c>
c001f0e0:	83 ec 0c             	sub    esp,0xc
c001f0e3:	53                   	push   ebx
c001f0e4:	6a 01                	push   0x1
c001f0e6:	68 0a ed 01 c0       	push   0xc001ed0a
c001f0eb:	6a 0e                	push   0xe
c001f0ed:	53                   	push   ebx
c001f0ee:	e8 3f f4 fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f0f3:	83 c4 14             	add    esp,0x14
c001f0f6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f0fc:	53                   	push   ebx
c001f0fd:	6a 01                	push   0x1
c001f0ff:	68 26 ed 01 c0       	push   0xc001ed26
c001f104:	6a 0f                	push   0xf
c001f106:	53                   	push   ebx
c001f107:	e8 26 f4 fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f10c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f112:	eb 38                	jmp    c001f14c <IDE::open(int, int, void*)+0x3c4>
c001f114:	83 ec 0c             	sub    esp,0xc
c001f117:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f121:	53                   	push   ebx
c001f122:	6a 00                	push   0x0
c001f124:	68 0a ed 01 c0       	push   0xc001ed0a
c001f129:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f12f:	53                   	push   ebx
c001f130:	e8 fd f3 fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f135:	83 c4 14             	add    esp,0x14
c001f138:	53                   	push   ebx
c001f139:	6a 00                	push   0x0
c001f13b:	68 26 ed 01 c0       	push   0xc001ed26
c001f140:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f146:	53                   	push   ebx
c001f147:	e8 e6 f3 fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f14c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f14e:	83 c4 20             	add    esp,0x20
c001f151:	83 ec 0c             	sub    esp,0xc
c001f154:	53                   	push   ebx
c001f155:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f158:	83 c4 0c             	add    esp,0xc
c001f15b:	6a 07                	push   0x7
c001f15d:	6a 00                	push   0x0
c001f15f:	53                   	push   ebx
c001f160:	e8 95 fa ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f165:	83 c4 0c             	add    esp,0xc
c001f168:	6a 07                	push   0x7
c001f16a:	6a 01                	push   0x1
c001f16c:	53                   	push   ebx
c001f16d:	e8 88 fa ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f172:	83 c4 0c             	add    esp,0xc
c001f175:	6a 01                	push   0x1
c001f177:	6a 00                	push   0x0
c001f179:	53                   	push   ebx
c001f17a:	e8 c3 fb ff ff       	call   c001ed42 <IDE::enableIRQs(unsigned char, bool)>
c001f17f:	83 c4 0c             	add    esp,0xc
c001f182:	6a 01                	push   0x1
c001f184:	6a 01                	push   0x1
c001f186:	53                   	push   ebx
c001f187:	e8 b6 fb ff ff       	call   c001ed42 <IDE::enableIRQs(unsigned char, bool)>
c001f18c:	83 c4 2c             	add    esp,0x2c
c001f18f:	31 c0                	xor    eax,eax
c001f191:	5b                   	pop    ebx
c001f192:	5e                   	pop    esi
c001f193:	5f                   	pop    edi
c001f194:	5d                   	pop    ebp
c001f195:	c3                   	ret    

c001f196 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f196:	55                   	push   ebp
c001f197:	57                   	push   edi
c001f198:	56                   	push   esi
c001f199:	53                   	push   ebx
c001f19a:	83 ec 1c             	sub    esp,0x1c
c001f19d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f1a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f1a5:	8d 50 f8             	lea    edx,[eax-0x8]
c001f1a8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f1b0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f1b4:	80 fa 03             	cmp    dl,0x3
c001f1b7:	77 5d                	ja     c001f216 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001f1b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f1bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f1c1:	0f b6 db             	movzx  ebx,bl
c001f1c4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f1c7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001f1cb:	83 ca 80             	or     edx,0xffffff80
c001f1ce:	0f b6 d2             	movzx  edx,dl
c001f1d1:	52                   	push   edx
c001f1d2:	6a 0c                	push   0xc
c001f1d4:	53                   	push   ebx
c001f1d5:	56                   	push   esi
c001f1d6:	e8 5f f9 ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1db:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f1e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f1e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f1e8:	0f b6 c0             	movzx  eax,al
c001f1eb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001f1ef:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f1f1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f1f6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f1fa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f1fe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f202:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f20a:	83 c4 2c             	add    esp,0x2c
c001f20d:	5b                   	pop    ebx
c001f20e:	5e                   	pop    esi
c001f20f:	5f                   	pop    edi
c001f210:	5d                   	pop    ebp
c001f211:	e9 24 f9 ff ff       	jmp    c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f216:	3c 07                	cmp    al,0x7
c001f218:	77 10                	ja     c001f22a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001f21a:	0f b6 db             	movzx  ebx,bl
c001f21d:	0f b6 d0             	movzx  edx,al
c001f220:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001f228:	eb 2d                	jmp    c001f257 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f22a:	3c 0d                	cmp    al,0xd
c001f22c:	77 13                	ja     c001f241 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001f22e:	0f b6 db             	movzx  ebx,bl
c001f231:	0f b6 c0             	movzx  eax,al
c001f234:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001f23b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001f23f:	eb 16                	jmp    c001f257 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f241:	3c 15                	cmp    al,0x15
c001f243:	77 14                	ja     c001f259 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001f245:	0f b6 db             	movzx  ebx,bl
c001f248:	0f b6 c0             	movzx  eax,al
c001f24b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001f253:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001f257:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f259:	83 c4 1c             	add    esp,0x1c
c001f25c:	5b                   	pop    ebx
c001f25d:	5e                   	pop    esi
c001f25e:	5f                   	pop    edi
c001f25f:	5d                   	pop    ebp
c001f260:	c3                   	ret    
c001f261:	90                   	nop

c001f262 <IDE::detect()>:
c001f262:	55                   	push   ebp
c001f263:	57                   	push   edi
c001f264:	56                   	push   esi
c001f265:	53                   	push   ebx
c001f266:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f26c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001f273:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001f27a:	0f 85 97 02 00 00    	jne    c001f517 <IDE::detect()+0x2b5>
c001f280:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f287:	31 f6                	xor    esi,esi
c001f289:	31 ed                	xor    ebp,ebp
c001f28b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f293:	89 e8                	mov    eax,ebp
c001f295:	c1 e0 06             	shl    eax,0x6
c001f298:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f2a0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f2a4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f2a8:	c1 e0 04             	shl    eax,0x4
c001f2ab:	83 c8 a0             	or     eax,0xffffffa0
c001f2ae:	0f b6 c0             	movzx  eax,al
c001f2b1:	50                   	push   eax
c001f2b2:	6a 06                	push   0x6
c001f2b4:	56                   	push   esi
c001f2b5:	53                   	push   ebx
c001f2b6:	e8 7f f8 ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2bb:	83 c4 0c             	add    esp,0xc
c001f2be:	6a 0c                	push   0xc
c001f2c0:	56                   	push   esi
c001f2c1:	53                   	push   ebx
c001f2c2:	e8 33 f9 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f2c7:	83 c4 0c             	add    esp,0xc
c001f2ca:	6a 0c                	push   0xc
c001f2cc:	56                   	push   esi
c001f2cd:	53                   	push   ebx
c001f2ce:	e8 27 f9 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f2d3:	83 c4 0c             	add    esp,0xc
c001f2d6:	6a 0c                	push   0xc
c001f2d8:	56                   	push   esi
c001f2d9:	53                   	push   ebx
c001f2da:	e8 1b f9 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f2df:	83 c4 0c             	add    esp,0xc
c001f2e2:	6a 0c                	push   0xc
c001f2e4:	56                   	push   esi
c001f2e5:	53                   	push   ebx
c001f2e6:	e8 0f f9 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f2eb:	68 ec 00 00 00       	push   0xec
c001f2f0:	6a 07                	push   0x7
c001f2f2:	56                   	push   esi
c001f2f3:	53                   	push   ebx
c001f2f4:	e8 41 f8 ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2f9:	83 c4 1c             	add    esp,0x1c
c001f2fc:	6a 0c                	push   0xc
c001f2fe:	56                   	push   esi
c001f2ff:	53                   	push   ebx
c001f300:	e8 f5 f8 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f305:	83 c4 0c             	add    esp,0xc
c001f308:	6a 0c                	push   0xc
c001f30a:	56                   	push   esi
c001f30b:	53                   	push   ebx
c001f30c:	e8 e9 f8 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f311:	83 c4 0c             	add    esp,0xc
c001f314:	6a 0c                	push   0xc
c001f316:	56                   	push   esi
c001f317:	53                   	push   ebx
c001f318:	e8 dd f8 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f31d:	83 c4 0c             	add    esp,0xc
c001f320:	6a 0c                	push   0xc
c001f322:	56                   	push   esi
c001f323:	53                   	push   ebx
c001f324:	e8 d1 f8 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f329:	83 c4 0c             	add    esp,0xc
c001f32c:	6a 0c                	push   0xc
c001f32e:	56                   	push   esi
c001f32f:	53                   	push   ebx
c001f330:	e8 c5 f8 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f335:	83 c4 10             	add    esp,0x10
c001f338:	84 c0                	test   al,al
c001f33a:	0f 84 5f 01 00 00    	je     c001f49f <IDE::detect()+0x23d>
c001f340:	31 ff                	xor    edi,edi
c001f342:	50                   	push   eax
c001f343:	6a 0c                	push   0xc
c001f345:	56                   	push   esi
c001f346:	53                   	push   ebx
c001f347:	e8 ae f8 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f34c:	83 c4 10             	add    esp,0x10
c001f34f:	a8 01                	test   al,0x1
c001f351:	0f 85 69 01 00 00    	jne    c001f4c0 <IDE::detect()+0x25e>
c001f357:	84 c0                	test   al,al
c001f359:	78 04                	js     c001f35f <IDE::detect()+0xfd>
c001f35b:	a8 08                	test   al,0x8
c001f35d:	75 23                	jne    c001f382 <IDE::detect()+0x120>
c001f35f:	47                   	inc    edi
c001f360:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f366:	7e da                	jle    c001f342 <IDE::detect()+0xe0>
c001f368:	83 ec 0c             	sub    esp,0xc
c001f36b:	6a 32                	push   0x32
c001f36d:	e8 56 9c ff ff       	call   c0018fc8 <milliTenthSleep(unsigned int)>
c001f372:	83 c4 10             	add    esp,0x10
c001f375:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f37b:	75 c5                	jne    c001f342 <IDE::detect()+0xe0>
c001f37d:	e9 3e 01 00 00       	jmp    c001f4c0 <IDE::detect()+0x25e>
c001f382:	31 c9                	xor    ecx,ecx
c001f384:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f388:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f38c:	83 ec 0c             	sub    esp,0xc
c001f38f:	68 80 00 00 00       	push   0x80
c001f394:	57                   	push   edi
c001f395:	6a 00                	push   0x0
c001f397:	56                   	push   esi
c001f398:	53                   	push   ebx
c001f399:	e8 f8 fd ff ff       	call   c001f196 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f39e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f3a3:	89 e8                	mov    eax,ebp
c001f3a5:	89 d1                	mov    ecx,edx
c001f3a7:	c1 e0 06             	shl    eax,0x6
c001f3aa:	01 d8                	add    eax,ebx
c001f3ac:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f3b3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f3ba:	89 f2                	mov    edx,esi
c001f3bc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f3c2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f3c6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f3cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f3d0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f3d7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f3df:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f3e6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f3ee:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f3f4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f3fb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f401:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f405:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f409:	83 c4 20             	add    esp,0x20
c001f40c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f40f:	83 c0 02             	add    eax,0x2
c001f412:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f418:	83 c7 02             	add    edi,0x2
c001f41b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f41e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f424:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f428:	75 e2                	jne    c001f40c <IDE::detect()+0x1aa>
c001f42a:	89 e8                	mov    eax,ebp
c001f42c:	c1 e0 06             	shl    eax,0x6
c001f42f:	01 d8                	add    eax,ebx
c001f431:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f437:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f43e:	66 c1 ea 09          	shr    dx,0x9
c001f442:	83 e2 01             	and    edx,0x1
c001f445:	84 c9                	test   cl,cl
c001f447:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f44d:	75 22                	jne    c001f471 <IDE::detect()+0x20f>
c001f44f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f456:	74 46                	je     c001f49e <IDE::detect()+0x23c>
c001f458:	83 ec 0c             	sub    esp,0xc
c001f45b:	68 7c 01 00 00       	push   0x17c
c001f460:	e8 f6 a8 fe ff       	call   c0009d5b <malloc>
c001f465:	89 c7                	mov    edi,eax
c001f467:	89 04 24             	mov    DWORD PTR [esp],eax
c001f46a:	e8 35 06 00 00       	call   c001faa4 <ATA::ATA()>
c001f46f:	eb 17                	jmp    c001f488 <IDE::detect()+0x226>
c001f471:	83 ec 0c             	sub    esp,0xc
c001f474:	68 84 01 00 00       	push   0x184
c001f479:	e8 dd a8 fe ff       	call   c0009d5b <malloc>
c001f47e:	89 c7                	mov    edi,eax
c001f480:	89 04 24             	mov    DWORD PTR [esp],eax
c001f483:	e8 a4 0c 00 00       	call   c002012c <ATAPI::ATAPI()>
c001f488:	5a                   	pop    edx
c001f489:	59                   	pop    ecx
c001f48a:	57                   	push   edi
c001f48b:	53                   	push   ebx
c001f48c:	e8 29 f1 fe ff       	call   c000e5ba <Device::addChild(Device*)>
c001f491:	8b 07                	mov    eax,DWORD PTR [edi]
c001f493:	53                   	push   ebx
c001f494:	55                   	push   ebp
c001f495:	6a 00                	push   0x0
c001f497:	57                   	push   edi
c001f498:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f49b:	83 c4 20             	add    esp,0x20
c001f49e:	45                   	inc    ebp
c001f49f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f4a4:	74 0d                	je     c001f4b3 <IDE::detect()+0x251>
c001f4a6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f4ae:	e9 e0 fd ff ff       	jmp    c001f293 <IDE::detect()+0x31>
c001f4b3:	4e                   	dec    esi
c001f4b4:	74 61                	je     c001f517 <IDE::detect()+0x2b5>
c001f4b6:	be 01 00 00 00       	mov    esi,0x1
c001f4bb:	e9 cb fd ff ff       	jmp    c001f28b <IDE::detect()+0x29>
c001f4c0:	50                   	push   eax
c001f4c1:	6a 04                	push   0x4
c001f4c3:	56                   	push   esi
c001f4c4:	53                   	push   ebx
c001f4c5:	e8 30 f7 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f4ca:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f4ce:	83 c4 0c             	add    esp,0xc
c001f4d1:	6a 05                	push   0x5
c001f4d3:	56                   	push   esi
c001f4d4:	53                   	push   ebx
c001f4d5:	e8 20 f7 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f4da:	83 c4 10             	add    esp,0x10
c001f4dd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f4e1:	80 fa 14             	cmp    dl,0x14
c001f4e4:	75 04                	jne    c001f4ea <IDE::detect()+0x288>
c001f4e6:	3c eb                	cmp    al,0xeb
c001f4e8:	eb 07                	jmp    c001f4f1 <IDE::detect()+0x28f>
c001f4ea:	3c 96                	cmp    al,0x96
c001f4ec:	75 b1                	jne    c001f49f <IDE::detect()+0x23d>
c001f4ee:	80 fa 69             	cmp    dl,0x69
c001f4f1:	75 ac                	jne    c001f49f <IDE::detect()+0x23d>
c001f4f3:	68 a1 00 00 00       	push   0xa1
c001f4f8:	6a 07                	push   0x7
c001f4fa:	56                   	push   esi
c001f4fb:	53                   	push   ebx
c001f4fc:	e8 39 f6 ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f501:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f508:	e8 bb 9a ff ff       	call   c0018fc8 <milliTenthSleep(unsigned int)>
c001f50d:	83 c4 10             	add    esp,0x10
c001f510:	b1 01                	mov    cl,0x1
c001f512:	e9 6d fe ff ff       	jmp    c001f384 <IDE::detect()+0x122>
c001f517:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f51d:	5b                   	pop    ebx
c001f51e:	5e                   	pop    esi
c001f51f:	5f                   	pop    edi
c001f520:	5d                   	pop    ebp
c001f521:	c3                   	ret    

c001f522 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f522:	55                   	push   ebp
c001f523:	57                   	push   edi
c001f524:	56                   	push   esi
c001f525:	53                   	push   ebx
c001f526:	83 ec 1c             	sub    esp,0x1c
c001f529:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f52d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f531:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f535:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f539:	88 c3                	mov    bl,al
c001f53b:	84 c0                	test   al,al
c001f53d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f541:	0f 84 81 00 00 00    	je     c001f5c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f547:	83 ec 0c             	sub    esp,0xc
c001f54a:	68 bf 72 02 c0       	push   0xc00272bf
c001f54f:	e8 f3 da fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001f554:	83 c4 10             	add    esp,0x10
c001f557:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f55b:	3c 01                	cmp    al,0x1
c001f55d:	74 63                	je     c001f5c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f55f:	3c 02                	cmp    al,0x2
c001f561:	75 53                	jne    c001f5b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f563:	d1 e6                	shl    esi,1
c001f565:	09 ee                	or     esi,ebp
c001f567:	50                   	push   eax
c001f568:	89 f0                	mov    eax,esi
c001f56a:	6a 01                	push   0x1
c001f56c:	0f b6 f0             	movzx  esi,al
c001f56f:	c1 e6 06             	shl    esi,0x6
c001f572:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f57a:	50                   	push   eax
c001f57b:	57                   	push   edi
c001f57c:	e8 79 f6 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f581:	83 c4 10             	add    esp,0x10
c001f584:	a8 01                	test   al,0x1
c001f586:	74 02                	je     c001f58a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f588:	b3 07                	mov    bl,0x7
c001f58a:	a8 02                	test   al,0x2
c001f58c:	74 02                	je     c001f590 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f58e:	b3 03                	mov    bl,0x3
c001f590:	a8 04                	test   al,0x4
c001f592:	74 02                	je     c001f596 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f594:	b3 14                	mov    bl,0x14
c001f596:	a8 08                	test   al,0x8
c001f598:	74 02                	je     c001f59c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f59a:	b3 03                	mov    bl,0x3
c001f59c:	a8 10                	test   al,0x10
c001f59e:	74 02                	je     c001f5a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f5a0:	b3 15                	mov    bl,0x15
c001f5a2:	a8 20                	test   al,0x20
c001f5a4:	74 02                	je     c001f5a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f5a6:	b3 03                	mov    bl,0x3
c001f5a8:	a8 40                	test   al,0x40
c001f5aa:	74 02                	je     c001f5ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f5ac:	b3 16                	mov    bl,0x16
c001f5ae:	84 c0                	test   al,al
c001f5b0:	79 16                	jns    c001f5c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f5b2:	b3 0d                	mov    bl,0xd
c001f5b4:	eb 12                	jmp    c001f5c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f5b6:	3c 03                	cmp    al,0x3
c001f5b8:	74 0c                	je     c001f5c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f5ba:	3c 04                	cmp    al,0x4
c001f5bc:	75 0a                	jne    c001f5c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f5be:	b3 08                	mov    bl,0x8
c001f5c0:	eb 06                	jmp    c001f5c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f5c2:	b3 13                	mov    bl,0x13
c001f5c4:	eb 02                	jmp    c001f5c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f5c6:	b3 17                	mov    bl,0x17
c001f5c8:	83 c4 1c             	add    esp,0x1c
c001f5cb:	88 d8                	mov    al,bl
c001f5cd:	5b                   	pop    ebx
c001f5ce:	5e                   	pop    esi
c001f5cf:	5f                   	pop    edi
c001f5d0:	5d                   	pop    ebp
c001f5d1:	c3                   	ret    

c001f5d2 <IDE::polling(unsigned char, unsigned int)>:
c001f5d2:	57                   	push   edi
c001f5d3:	56                   	push   esi
c001f5d4:	53                   	push   ebx
c001f5d5:	bb 04 00 00 00       	mov    ebx,0x4
c001f5da:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f5de:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f5e3:	52                   	push   edx
c001f5e4:	6a 0c                	push   0xc
c001f5e6:	56                   	push   esi
c001f5e7:	57                   	push   edi
c001f5e8:	e8 0d f6 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f5ed:	83 c4 10             	add    esp,0x10
c001f5f0:	4b                   	dec    ebx
c001f5f1:	75 f0                	jne    c001f5e3 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f5f3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f5f8:	50                   	push   eax
c001f5f9:	6a 0c                	push   0xc
c001f5fb:	56                   	push   esi
c001f5fc:	57                   	push   edi
c001f5fd:	e8 f8 f5 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001f602:	83 c4 10             	add    esp,0x10
c001f605:	a8 01                	test   al,0x1
c001f607:	75 17                	jne    c001f620 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f609:	a8 20                	test   al,0x20
c001f60b:	75 0f                	jne    c001f61c <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f60d:	4b                   	dec    ebx
c001f60e:	74 10                	je     c001f620 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f610:	84 c0                	test   al,al
c001f612:	78 e4                	js     c001f5f8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f614:	a8 08                	test   al,0x8
c001f616:	74 e0                	je     c001f5f8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f618:	31 c0                	xor    eax,eax
c001f61a:	eb 06                	jmp    c001f622 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f61c:	b0 01                	mov    al,0x1
c001f61e:	eb 02                	jmp    c001f622 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f620:	b0 02                	mov    al,0x2
c001f622:	5b                   	pop    ebx
c001f623:	5e                   	pop    esi
c001f624:	5f                   	pop    edi
c001f625:	c3                   	ret    

c001f626 <SATABus::close(int, int, void*)>:
c001f626:	31 c0                	xor    eax,eax
c001f628:	c3                   	ret    
c001f629:	90                   	nop

c001f62a <SATABus::detect()>:
c001f62a:	c3                   	ret    
c001f62b:	90                   	nop

c001f62c <SATABus::SATABus()>:
c001f62c:	83 ec 0c             	sub    esp,0xc
c001f62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f633:	83 ec 08             	sub    esp,0x8
c001f636:	68 f8 72 02 c0       	push   0xc00272f8
c001f63b:	50                   	push   eax
c001f63c:	e8 27 f3 fe ff       	call   c000e968 <HardDiskController::HardDiskController(char const*)>
c001f641:	83 c4 10             	add    esp,0x10
c001f644:	ba 90 73 02 c0       	mov    edx,0xc0027390
c001f649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64d:	89 10                	mov    DWORD PTR [eax],edx
c001f64f:	83 ec 0c             	sub    esp,0xc
c001f652:	6a 50                	push   0x50
c001f654:	e8 a4 ae fe ff       	call   c000a4fd <Phys::allocateContiguousPages(int)>
c001f659:	83 c4 10             	add    esp,0x10
c001f65c:	89 c2                	mov    edx,eax
c001f65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f662:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f668:	83 ec 0c             	sub    esp,0xc
c001f66b:	6a 50                	push   0x50
c001f66d:	e8 af c6 fe ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c001f672:	83 c4 10             	add    esp,0x10
c001f675:	89 c2                	mov    edx,eax
c001f677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f67b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f681:	a1 50 8a 02 c0       	mov    eax,ds:0xc0028a50
c001f686:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f68a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f690:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f694:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f69a:	83 ec 0c             	sub    esp,0xc
c001f69d:	6a 03                	push   0x3
c001f69f:	6a 50                	push   0x50
c001f6a1:	51                   	push   ecx
c001f6a2:	52                   	push   edx
c001f6a3:	50                   	push   eax
c001f6a4:	e8 15 d0 fe ff       	call   c000c6be <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f6a9:	83 c4 20             	add    esp,0x20
c001f6ac:	90                   	nop
c001f6ad:	83 c4 0c             	add    esp,0xc
c001f6b0:	c3                   	ret    
c001f6b1:	90                   	nop

c001f6b2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f6b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6b6:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f6b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f6bc:	09 c2                	or     edx,eax
c001f6be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f6c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f6ca:	31 c0                	xor    eax,eax
c001f6cc:	c1 e9 08             	shr    ecx,0x8
c001f6cf:	83 e1 0f             	and    ecx,0xf
c001f6d2:	39 c8                	cmp    eax,ecx
c001f6d4:	74 0a                	je     c001f6e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f6d6:	f6 c2 01             	test   dl,0x1
c001f6d9:	74 08                	je     c001f6e3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f6db:	d1 ea                	shr    edx,1
c001f6dd:	40                   	inc    eax
c001f6de:	eb f2                	jmp    c001f6d2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f6e0:	83 c8 ff             	or     eax,0xffffffff
c001f6e3:	c3                   	ret    

c001f6e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f6e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6e8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f6eb:	89 c2                	mov    edx,eax
c001f6ed:	c1 ea 08             	shr    edx,0x8
c001f6f0:	83 e2 0f             	and    edx,0xf
c001f6f3:	fe ca                	dec    dl
c001f6f5:	75 31                	jne    c001f728 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f6f7:	83 e0 0f             	and    eax,0xf
c001f6fa:	3c 03                	cmp    al,0x3
c001f6fc:	75 2a                	jne    c001f728 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f6fe:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f701:	b8 02 00 00 00       	mov    eax,0x2
c001f706:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f70c:	74 1c                	je     c001f72a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f70e:	b8 04 00 00 00       	mov    eax,0x4
c001f713:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f719:	74 0f                	je     c001f72a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f71b:	31 c0                	xor    eax,eax
c001f71d:	83 fa 03             	cmp    edx,0x3
c001f720:	0f 94 c0             	sete   al
c001f723:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f727:	c3                   	ret    
c001f728:	31 c0                	xor    eax,eax
c001f72a:	c3                   	ret    
c001f72b:	90                   	nop

c001f72c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f72c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f730:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f733:	0f ba e2 0f          	bt     edx,0xf
c001f737:	72 f7                	jb     c001f730 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f739:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f73c:	83 ca 10             	or     edx,0x10
c001f73f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f742:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f745:	83 ca 01             	or     edx,0x1
c001f748:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f74b:	c3                   	ret    

c001f74c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f74c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f750:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f753:	83 e2 fe             	and    edx,0xfffffffe
c001f756:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f759:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f75c:	83 e2 ef             	and    edx,0xffffffef
c001f75f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f762:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f765:	0f ba e2 0e          	bt     edx,0xe
c001f769:	72 f7                	jb     c001f762 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f76b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f76e:	0f ba e2 0f          	bt     edx,0xf
c001f772:	72 ee                	jb     c001f762 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f774:	c3                   	ret    
c001f775:	90                   	nop

c001f776 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f776:	55                   	push   ebp
c001f777:	57                   	push   edi
c001f778:	56                   	push   esi
c001f779:	53                   	push   ebx
c001f77a:	83 ec 1c             	sub    esp,0x1c
c001f77d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f781:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f785:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f789:	53                   	push   ebx
c001f78a:	89 fd                	mov    ebp,edi
c001f78c:	56                   	push   esi
c001f78d:	c1 e5 0a             	shl    ebp,0xa
c001f790:	e8 b7 ff ff ff       	call   c001f74c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f795:	83 ec 0c             	sub    esp,0xc
c001f798:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f79e:	01 e8                	add    eax,ebp
c001f7a0:	89 03                	mov    DWORD PTR [ebx],eax
c001f7a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f7a4:	68 00 04 00 00       	push   0x400
c001f7a9:	6a 00                	push   0x0
c001f7ab:	50                   	push   eax
c001f7ac:	e8 d3 0e fe ff       	call   c0000684 <memset>
c001f7b1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f7b7:	89 fa                	mov    edx,edi
c001f7b9:	01 e8                	add    eax,ebp
c001f7bb:	c1 e7 0d             	shl    edi,0xd
c001f7be:	89 03                	mov    DWORD PTR [ebx],eax
c001f7c0:	c1 e2 08             	shl    edx,0x8
c001f7c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f7ca:	81 c2 00 80 00 00    	add    edx,0x8000
c001f7d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f7d4:	89 d0                	mov    eax,edx
c001f7d6:	83 c4 1c             	add    esp,0x1c
c001f7d9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f7df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f7e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f7e5:	68 00 01 00 00       	push   0x100
c001f7ea:	6a 00                	push   0x0
c001f7ec:	50                   	push   eax
c001f7ed:	e8 92 0e fe ff       	call   c0000684 <memset>
c001f7f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f7f6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f7fc:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f802:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f806:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f809:	83 c4 10             	add    esp,0x10
c001f80c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f813:	31 ff                	xor    edi,edi
c001f815:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f81b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f821:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f825:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f82b:	83 c5 20             	add    ebp,0x20
c001f82e:	01 f8                	add    eax,edi
c001f830:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f833:	52                   	push   edx
c001f834:	68 00 01 00 00       	push   0x100
c001f839:	6a 00                	push   0x0
c001f83b:	50                   	push   eax
c001f83c:	e8 43 0e fe ff       	call   c0000684 <memset>
c001f841:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f845:	83 c4 10             	add    esp,0x10
c001f848:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f84e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f855:	01 f8                	add    eax,edi
c001f857:	81 c7 00 01 00 00    	add    edi,0x100
c001f85d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f860:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f866:	75 b3                	jne    c001f81b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f868:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f86c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f870:	83 c4 1c             	add    esp,0x1c
c001f873:	5b                   	pop    ebx
c001f874:	5e                   	pop    esi
c001f875:	5f                   	pop    edi
c001f876:	5d                   	pop    ebp
c001f877:	e9 b0 fe ff ff       	jmp    c001f72c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f87c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f87c:	55                   	push   ebp
c001f87d:	57                   	push   edi
c001f87e:	56                   	push   esi
c001f87f:	53                   	push   ebx
c001f880:	83 ec 0c             	sub    esp,0xc
c001f883:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f887:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001f88e:	74 2d                	je     c001f8bd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f890:	83 ec 0c             	sub    esp,0xc
c001f893:	68 1c 73 02 c0       	push   0xc002731c
c001f898:	e8 18 a5 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f89d:	83 c4 10             	add    esp,0x10
c001f8a0:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001f8a7:	75 14                	jne    c001f8bd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f8a9:	e4 60                	in     al,0x60
c001f8ab:	3c 1c                	cmp    al,0x1c
c001f8ad:	74 04                	je     c001f8b3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f8af:	3c 5a                	cmp    al,0x5a
c001f8b1:	75 f6                	jne    c001f8a9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f8b3:	e4 60                	in     al,0x60
c001f8b5:	3c 5a                	cmp    al,0x5a
c001f8b7:	74 fa                	je     c001f8b3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f8b9:	3c 1c                	cmp    al,0x1c
c001f8bb:	74 f6                	je     c001f8b3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f8bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f8c1:	31 db                	xor    ebx,ebx
c001f8c3:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f8c6:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f8cc:	0f 84 78 01 00 00    	je     c001fa4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f8d2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f8d6:	89 d8                	mov    eax,ebx
c001f8d8:	c1 e0 07             	shl    eax,0x7
c001f8db:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f8e2:	50                   	push   eax
c001f8e3:	50                   	push   eax
c001f8e4:	57                   	push   edi
c001f8e5:	56                   	push   esi
c001f8e6:	e8 f9 fd ff ff       	call   c001f6e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f8eb:	83 c4 10             	add    esp,0x10
c001f8ee:	83 f8 01             	cmp    eax,0x1
c001f8f1:	0f 85 19 01 00 00    	jne    c001fa10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f8f7:	50                   	push   eax
c001f8f8:	53                   	push   ebx
c001f8f9:	57                   	push   edi
c001f8fa:	56                   	push   esi
c001f8fb:	e8 76 fe ff ff       	call   c001f776 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f900:	83 c4 10             	add    esp,0x10
c001f903:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001f90a:	74 2d                	je     c001f939 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f90c:	83 ec 0c             	sub    esp,0xc
c001f90f:	68 31 73 02 c0       	push   0xc0027331
c001f914:	e8 9c a4 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f919:	83 c4 10             	add    esp,0x10
c001f91c:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001f923:	75 14                	jne    c001f939 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f925:	e4 60                	in     al,0x60
c001f927:	3c 1c                	cmp    al,0x1c
c001f929:	74 04                	je     c001f92f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f92b:	3c 5a                	cmp    al,0x5a
c001f92d:	75 f6                	jne    c001f925 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f92f:	e4 60                	in     al,0x60
c001f931:	3c 5a                	cmp    al,0x5a
c001f933:	74 fa                	je     c001f92f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f935:	3c 1c                	cmp    al,0x1c
c001f937:	74 f6                	je     c001f92f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f939:	83 ec 0c             	sub    esp,0xc
c001f93c:	68 7c 01 00 00       	push   0x17c
c001f941:	e8 15 a4 fe ff       	call   c0009d5b <malloc>
c001f946:	89 04 24             	mov    DWORD PTR [esp],eax
c001f949:	89 c7                	mov    edi,eax
c001f94b:	e8 14 10 00 00       	call   c0020964 <SATA::SATA()>
c001f950:	83 c4 10             	add    esp,0x10
c001f953:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001f95a:	74 2d                	je     c001f989 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f95c:	83 ec 0c             	sub    esp,0xc
c001f95f:	68 46 73 02 c0       	push   0xc0027346
c001f964:	e8 4c a4 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f969:	83 c4 10             	add    esp,0x10
c001f96c:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001f973:	75 14                	jne    c001f989 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f975:	e4 60                	in     al,0x60
c001f977:	3c 5a                	cmp    al,0x5a
c001f979:	74 04                	je     c001f97f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f97b:	3c 1c                	cmp    al,0x1c
c001f97d:	75 f6                	jne    c001f975 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f97f:	e4 60                	in     al,0x60
c001f981:	3c 5a                	cmp    al,0x5a
c001f983:	74 fa                	je     c001f97f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f985:	3c 1c                	cmp    al,0x1c
c001f987:	74 f6                	je     c001f97f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f989:	50                   	push   eax
c001f98a:	50                   	push   eax
c001f98b:	57                   	push   edi
c001f98c:	56                   	push   esi
c001f98d:	e8 28 ec fe ff       	call   c000e5ba <Device::addChild(Device*)>
c001f992:	83 c4 10             	add    esp,0x10
c001f995:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001f99c:	74 2d                	je     c001f9cb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f99e:	83 ec 0c             	sub    esp,0xc
c001f9a1:	68 5b 73 02 c0       	push   0xc002735b
c001f9a6:	e8 0a a4 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f9ab:	83 c4 10             	add    esp,0x10
c001f9ae:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001f9b5:	75 14                	jne    c001f9cb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f9b7:	e4 60                	in     al,0x60
c001f9b9:	3c 1c                	cmp    al,0x1c
c001f9bb:	74 04                	je     c001f9c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f9bd:	3c 5a                	cmp    al,0x5a
c001f9bf:	75 f6                	jne    c001f9b7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f9c1:	e4 60                	in     al,0x60
c001f9c3:	3c 5a                	cmp    al,0x5a
c001f9c5:	74 fa                	je     c001f9c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f9c7:	3c 1c                	cmp    al,0x1c
c001f9c9:	74 f6                	je     c001f9c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f9cb:	8b 07                	mov    eax,DWORD PTR [edi]
c001f9cd:	56                   	push   esi
c001f9ce:	6a 00                	push   0x0
c001f9d0:	53                   	push   ebx
c001f9d1:	57                   	push   edi
c001f9d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f9d5:	83 c4 10             	add    esp,0x10
c001f9d8:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c001f9df:	74 69                	je     c001fa4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f9e1:	83 ec 0c             	sub    esp,0xc
c001f9e4:	68 70 73 02 c0       	push   0xc0027370
c001f9e9:	e8 c7 a3 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c001f9ee:	83 c4 10             	add    esp,0x10
c001f9f1:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c001f9f8:	75 50                	jne    c001fa4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f9fa:	e4 60                	in     al,0x60
c001f9fc:	3c 1c                	cmp    al,0x1c
c001f9fe:	74 04                	je     c001fa04 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fa00:	3c 5a                	cmp    al,0x5a
c001fa02:	75 f6                	jne    c001f9fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001fa04:	e4 60                	in     al,0x60
c001fa06:	3c 5a                	cmp    al,0x5a
c001fa08:	74 fa                	je     c001fa04 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fa0a:	3c 1c                	cmp    al,0x1c
c001fa0c:	74 f6                	je     c001fa04 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fa0e:	eb 3a                	jmp    c001fa4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fa10:	83 f8 04             	cmp    eax,0x4
c001fa13:	75 35                	jne    c001fa4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fa15:	50                   	push   eax
c001fa16:	53                   	push   ebx
c001fa17:	57                   	push   edi
c001fa18:	56                   	push   esi
c001fa19:	e8 58 fd ff ff       	call   c001f776 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fa1e:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fa25:	e8 31 a3 fe ff       	call   c0009d5b <malloc>
c001fa2a:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa2d:	89 c7                	mov    edi,eax
c001fa2f:	e8 a6 17 00 00       	call   c00211da <SATAPI::SATAPI()>
c001fa34:	5a                   	pop    edx
c001fa35:	59                   	pop    ecx
c001fa36:	57                   	push   edi
c001fa37:	56                   	push   esi
c001fa38:	e8 7d eb fe ff       	call   c000e5ba <Device::addChild(Device*)>
c001fa3d:	8b 07                	mov    eax,DWORD PTR [edi]
c001fa3f:	56                   	push   esi
c001fa40:	6a 00                	push   0x0
c001fa42:	53                   	push   ebx
c001fa43:	57                   	push   edi
c001fa44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fa47:	83 c4 20             	add    esp,0x20
c001fa4a:	d1 ed                	shr    ebp,1
c001fa4c:	43                   	inc    ebx
c001fa4d:	83 fb 20             	cmp    ebx,0x20
c001fa50:	0f 85 70 fe ff ff    	jne    c001f8c6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001fa56:	83 c4 0c             	add    esp,0xc
c001fa59:	5b                   	pop    ebx
c001fa5a:	5e                   	pop    esi
c001fa5b:	5f                   	pop    edi
c001fa5c:	5d                   	pop    ebp
c001fa5d:	c3                   	ret    

c001fa5e <SATABus::open(int, int, void*)>:
c001fa5e:	83 ec 14             	sub    esp,0x14
c001fa61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fa65:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001fa6b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001fa71:	52                   	push   edx
c001fa72:	50                   	push   eax
c001fa73:	e8 04 fe ff ff       	call   c001f87c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fa78:	31 c0                	xor    eax,eax
c001fa7a:	83 c4 1c             	add    esp,0x1c
c001fa7d:	c3                   	ret    

c001fa7e <ATA::close(int, int, void*)>:
c001fa7e:	83 ec 0c             	sub    esp,0xc
c001fa81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa85:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fa8b:	85 c0                	test   eax,eax
c001fa8d:	74 0c                	je     c001fa9b <ATA::close(int, int, void*)+0x1d>
c001fa8f:	83 ec 0c             	sub    esp,0xc
c001fa92:	8b 10                	mov    edx,DWORD PTR [eax]
c001fa94:	50                   	push   eax
c001fa95:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fa98:	83 c4 10             	add    esp,0x10
c001fa9b:	31 c0                	xor    eax,eax
c001fa9d:	83 c4 0c             	add    esp,0xc
c001faa0:	c3                   	ret    
c001faa1:	90                   	nop

c001faa2 <ATA::powerSaving(PowerSavingLevel)>:
c001faa2:	c3                   	ret    
c001faa3:	90                   	nop

c001faa4 <ATA::ATA()>:
c001faa4:	83 ec 0c             	sub    esp,0xc
c001faa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faab:	83 ec 04             	sub    esp,0x4
c001faae:	68 00 02 00 00       	push   0x200
c001fab3:	68 ff 74 02 c0       	push   0xc00274ff
c001fab8:	50                   	push   eax
c001fab9:	e8 34 ef fe ff       	call   c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fabe:	83 c4 10             	add    esp,0x10
c001fac1:	ba 08 74 02 c0       	mov    edx,0xc0027408
c001fac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faca:	89 10                	mov    DWORD PTR [eax],edx
c001facc:	90                   	nop
c001facd:	83 c4 0c             	add    esp,0xc
c001fad0:	c3                   	ret    
c001fad1:	90                   	nop

c001fad2 <ATA::flush(bool)>:
c001fad2:	53                   	push   ebx
c001fad3:	83 ec 08             	sub    esp,0x8
c001fad6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001fadb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fadf:	19 c0                	sbb    eax,eax
c001fae1:	83 e0 fd             	and    eax,0xfffffffd
c001fae4:	05 ea 00 00 00       	add    eax,0xea
c001fae9:	50                   	push   eax
c001faea:	6a 07                	push   0x7
c001faec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001faf3:	50                   	push   eax
c001faf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fafa:	e8 3b f0 ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001faff:	83 c4 0c             	add    esp,0xc
c001fb02:	6a 00                	push   0x0
c001fb04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb0b:	50                   	push   eax
c001fb0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb12:	e8 bb fa ff ff       	call   c001f5d2 <IDE::polling(unsigned char, unsigned int)>
c001fb17:	83 c4 18             	add    esp,0x18
c001fb1a:	5b                   	pop    ebx
c001fb1b:	c3                   	ret    

c001fb1c <ATA::readyForCommand()>:
c001fb1c:	56                   	push   esi
c001fb1d:	53                   	push   ebx
c001fb1e:	53                   	push   ebx
c001fb1f:	31 db                	xor    ebx,ebx
c001fb21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb25:	51                   	push   ecx
c001fb26:	6a 0c                	push   0xc
c001fb28:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fb2f:	50                   	push   eax
c001fb30:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fb36:	e8 bf f0 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c001fb3b:	83 c4 10             	add    esp,0x10
c001fb3e:	a8 88                	test   al,0x88
c001fb40:	74 1f                	je     c001fb61 <ATA::readyForCommand()+0x45>
c001fb42:	43                   	inc    ebx
c001fb43:	83 fb 63             	cmp    ebx,0x63
c001fb46:	7e dd                	jle    c001fb25 <ATA::readyForCommand()+0x9>
c001fb48:	83 ec 0c             	sub    esp,0xc
c001fb4b:	6a 0a                	push   0xa
c001fb4d:	e8 76 94 ff ff       	call   c0018fc8 <milliTenthSleep(unsigned int)>
c001fb52:	83 c4 10             	add    esp,0x10
c001fb55:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fb5b:	75 c8                	jne    c001fb25 <ATA::readyForCommand()+0x9>
c001fb5d:	31 c0                	xor    eax,eax
c001fb5f:	eb 02                	jmp    c001fb63 <ATA::readyForCommand()+0x47>
c001fb61:	b0 01                	mov    al,0x1
c001fb63:	5a                   	pop    edx
c001fb64:	5b                   	pop    ebx
c001fb65:	5e                   	pop    esi
c001fb66:	c3                   	ret    
c001fb67:	90                   	nop

c001fb68 <ATA::access(unsigned long long, int, void*, bool)>:
c001fb68:	55                   	push   ebp
c001fb69:	57                   	push   edi
c001fb6a:	56                   	push   esi
c001fb6b:	53                   	push   ebx
c001fb6c:	83 ec 38             	sub    esp,0x38
c001fb6f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fb73:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001fb77:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fb7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fb7f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fb83:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fb87:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001fb8b:	68 b4 73 02 c0       	push   0xc00273b4
c001fb90:	e8 b2 d4 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fb95:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fb9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fb9f:	83 c4 10             	add    esp,0x10
c001fba2:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fba8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbac:	c1 e0 06             	shl    eax,0x6
c001fbaf:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fbb7:	74 5d                	je     c001fc16 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001fbb9:	89 fa                	mov    edx,edi
c001fbbb:	89 f0                	mov    eax,esi
c001fbbd:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fbc1:	c1 ea 1c             	shr    edx,0x1c
c001fbc4:	89 d1                	mov    ecx,edx
c001fbc6:	09 c1                	or     ecx,eax
c001fbc8:	74 25                	je     c001fbef <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001fbca:	31 ed                	xor    ebp,ebp
c001fbcc:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fbd3:	89 fa                	mov    edx,edi
c001fbd5:	89 f0                	mov    eax,esi
c001fbd7:	0f ad d0             	shrd   eax,edx,cl
c001fbda:	d3 ea                	shr    edx,cl
c001fbdc:	f6 c1 20             	test   cl,0x20
c001fbdf:	74 02                	je     c001fbe3 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001fbe1:	89 d0                	mov    eax,edx
c001fbe3:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fbe7:	45                   	inc    ebp
c001fbe8:	83 fd 06             	cmp    ebp,0x6
c001fbeb:	75 df                	jne    c001fbcc <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001fbed:	eb 76                	jmp    c001fc65 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001fbef:	89 f0                	mov    eax,esi
c001fbf1:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fbf6:	89 fa                	mov    edx,edi
c001fbf8:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fbff:	0f ac d0 10          	shrd   eax,edx,0x10
c001fc03:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fc08:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fc0c:	c1 ee 18             	shr    esi,0x18
c001fc0f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fc14:	eb 56                	jmp    c001fc6c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fc16:	6a 00                	push   0x0
c001fc18:	6a 3f                	push   0x3f
c001fc1a:	57                   	push   edi
c001fc1b:	56                   	push   esi
c001fc1c:	e8 2f 32 00 00       	call   c0022e50 <__umoddi3>
c001fc21:	83 c4 10             	add    esp,0x10
c001fc24:	40                   	inc    eax
c001fc25:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fc29:	6a 00                	push   0x0
c001fc2b:	68 f0 03 00 00       	push   0x3f0
c001fc30:	57                   	push   edi
c001fc31:	56                   	push   esi
c001fc32:	e8 19 31 00 00       	call   c0022d50 <__udivdi3>
c001fc37:	83 c4 10             	add    esp,0x10
c001fc3a:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fc3f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fc46:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fc4b:	6a 00                	push   0x0
c001fc4d:	6a 3f                	push   0x3f
c001fc4f:	57                   	push   edi
c001fc50:	56                   	push   esi
c001fc51:	e8 fa 30 00 00       	call   c0022d50 <__udivdi3>
c001fc56:	83 c4 10             	add    esp,0x10
c001fc59:	89 c6                	mov    esi,eax
c001fc5b:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fc60:	83 e6 0f             	and    esi,0xf
c001fc63:	eb 07                	jmp    c001fc6c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fc65:	31 f6                	xor    esi,esi
c001fc67:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001fc6c:	bf 01 00 00 00       	mov    edi,0x1
c001fc71:	50                   	push   eax
c001fc72:	6a 00                	push   0x0
c001fc74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc7b:	50                   	push   eax
c001fc7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fc80:	e8 bd f0 ff ff       	call   c001ed42 <IDE::enableIRQs(unsigned char, bool)>
c001fc85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc88:	e8 8f fe ff ff       	call   c001fb1c <ATA::readyForCommand()>
c001fc8d:	83 c4 10             	add    esp,0x10
c001fc90:	84 c0                	test   al,al
c001fc92:	0f 84 bc 02 00 00    	je     c001ff54 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001fc98:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fc9e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fca4:	c1 e0 04             	shl    eax,0x4
c001fca7:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001fcae:	09 c6                	or     esi,eax
c001fcb0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fcb5:	75 05                	jne    c001fcbc <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001fcb7:	83 ce a0             	or     esi,0xffffffa0
c001fcba:	eb 03                	jmp    c001fcbf <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001fcbc:	83 ce e0             	or     esi,0xffffffe0
c001fcbf:	89 f0                	mov    eax,esi
c001fcc1:	0f b6 f0             	movzx  esi,al
c001fcc4:	56                   	push   esi
c001fcc5:	6a 06                	push   0x6
c001fcc7:	51                   	push   ecx
c001fcc8:	52                   	push   edx
c001fcc9:	e8 6c ee ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcce:	83 c4 10             	add    esp,0x10
c001fcd1:	6a 00                	push   0x0
c001fcd3:	6a 01                	push   0x1
c001fcd5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcdc:	50                   	push   eax
c001fcdd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fce3:	e8 52 ee ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fce8:	83 c4 10             	add    esp,0x10
c001fceb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001fcf0:	75 6e                	jne    c001fd60 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001fcf2:	6a 00                	push   0x0
c001fcf4:	6a 08                	push   0x8
c001fcf6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcfd:	50                   	push   eax
c001fcfe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd04:	e8 31 ee ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd09:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fd0e:	50                   	push   eax
c001fd0f:	6a 09                	push   0x9
c001fd11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd18:	50                   	push   eax
c001fd19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd1f:	e8 16 ee ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd24:	83 c4 20             	add    esp,0x20
c001fd27:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fd2c:	50                   	push   eax
c001fd2d:	6a 0a                	push   0xa
c001fd2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd36:	50                   	push   eax
c001fd37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd3d:	e8 f8 ed ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd42:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fd47:	50                   	push   eax
c001fd48:	6a 0b                	push   0xb
c001fd4a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd51:	50                   	push   eax
c001fd52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd58:	e8 dd ed ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd5d:	83 c4 20             	add    esp,0x20
c001fd60:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fd65:	50                   	push   eax
c001fd66:	6a 02                	push   0x2
c001fd68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd6f:	50                   	push   eax
c001fd70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd76:	e8 bf ed ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd7b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fd80:	50                   	push   eax
c001fd81:	6a 03                	push   0x3
c001fd83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd8a:	50                   	push   eax
c001fd8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd91:	e8 a4 ed ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd96:	83 c4 20             	add    esp,0x20
c001fd99:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fd9e:	50                   	push   eax
c001fd9f:	6a 04                	push   0x4
c001fda1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fda8:	50                   	push   eax
c001fda9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdaf:	e8 86 ed ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdb4:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fdb9:	50                   	push   eax
c001fdba:	6a 05                	push   0x5
c001fdbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdc3:	50                   	push   eax
c001fdc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdca:	e8 6b ed ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdcf:	83 c4 20             	add    esp,0x20
c001fdd2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001fdd7:	0f 94 c0             	sete   al
c001fdda:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fddf:	74 09                	je     c001fdea <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001fde1:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001fde8:	eb 07                	jmp    c001fdf1 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001fdea:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001fdf1:	0f b6 c0             	movzx  eax,al
c001fdf4:	50                   	push   eax
c001fdf5:	6a 07                	push   0x7
c001fdf7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdfe:	50                   	push   eax
c001fdff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe05:	e8 30 ed ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe0a:	c7 04 24 c1 73 02 c0 	mov    DWORD PTR [esp],0xc00273c1
c001fe11:	e8 31 d2 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fe16:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001fe1a:	83 c4 10             	add    esp,0x10
c001fe1d:	85 f6                	test   esi,esi
c001fe1f:	0f 84 f7 00 00 00    	je     c001ff1c <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001fe25:	83 ec 0c             	sub    esp,0xc
c001fe28:	68 c4 73 02 c0       	push   0xc00273c4
c001fe2d:	e8 15 d2 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fe32:	83 c4 0c             	add    esp,0xc
c001fe35:	6a 01                	push   0x1
c001fe37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe3e:	50                   	push   eax
c001fe3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe45:	e8 88 f7 ff ff       	call   c001f5d2 <IDE::polling(unsigned char, unsigned int)>
c001fe4a:	c7 04 24 c7 73 02 c0 	mov    DWORD PTR [esp],0xc00273c7
c001fe51:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001fe55:	e8 ed d1 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fe5a:	83 c4 10             	add    esp,0x10
c001fe5d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001fe61:	84 c0                	test   al,al
c001fe63:	74 2b                	je     c001fe90 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001fe65:	0f b6 f8             	movzx  edi,al
c001fe68:	57                   	push   edi
c001fe69:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fe70:	50                   	push   eax
c001fe71:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe78:	50                   	push   eax
c001fe79:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe7f:	e8 9e f6 ff ff       	call   c001f522 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fe84:	c7 04 24 ca 73 02 c0 	mov    DWORD PTR [esp],0xc00273ca
c001fe8b:	e9 bc 00 00 00       	jmp    c001ff4c <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001fe90:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fe95:	74 50                	je     c001fee7 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001fe97:	83 ec 0c             	sub    esp,0xc
c001fe9a:	31 ed                	xor    ebp,ebp
c001fe9c:	68 d5 73 02 c0       	push   0xc00273d5
c001fea1:	e8 a1 d1 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fea6:	83 c4 10             	add    esp,0x10
c001fea9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fead:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001feb1:	50                   	push   eax
c001feb2:	50                   	push   eax
c001feb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001feba:	50                   	push   eax
c001febb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fec1:	e8 62 ec ff ff       	call   c001eb28 <IDE::getBase(unsigned char)>
c001fec6:	89 c2                	mov    edx,eax
c001fec8:	89 f8                	mov    eax,edi
c001feca:	66 ef                	out    dx,ax
c001fecc:	45                   	inc    ebp
c001fecd:	83 c4 10             	add    esp,0x10
c001fed0:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001fed6:	75 d1                	jne    c001fea9 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001fed8:	83 ec 0c             	sub    esp,0xc
c001fedb:	68 d8 73 02 c0       	push   0xc00273d8
c001fee0:	e8 62 d1 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001fee5:	eb 24                	jmp    c001ff0b <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001fee7:	51                   	push   ecx
c001fee8:	51                   	push   ecx
c001fee9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fef0:	50                   	push   eax
c001fef1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fef7:	e8 2c ec ff ff       	call   c001eb28 <IDE::getBase(unsigned char)>
c001fefc:	b9 00 01 00 00       	mov    ecx,0x100
c001ff01:	89 c2                	mov    edx,eax
c001ff03:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ff07:	fc                   	cld    
c001ff08:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ff0b:	83 c4 10             	add    esp,0x10
c001ff0e:	4e                   	dec    esi
c001ff0f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ff17:	e9 01 ff ff ff       	jmp    c001fe1d <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001ff1c:	31 ff                	xor    edi,edi
c001ff1e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ff23:	74 2f                	je     c001ff54 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ff25:	83 ec 0c             	sub    esp,0xc
c001ff28:	68 db 73 02 c0       	push   0xc00273db
c001ff2d:	e8 15 d1 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001ff32:	58                   	pop    eax
c001ff33:	31 c0                	xor    eax,eax
c001ff35:	5a                   	pop    edx
c001ff36:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001ff3b:	0f 94 c0             	sete   al
c001ff3e:	50                   	push   eax
c001ff3f:	53                   	push   ebx
c001ff40:	e8 8d fb ff ff       	call   c001fad2 <ATA::flush(bool)>
c001ff45:	c7 04 24 de 73 02 c0 	mov    DWORD PTR [esp],0xc00273de
c001ff4c:	e8 f6 d0 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001ff51:	83 c4 10             	add    esp,0x10
c001ff54:	83 c4 2c             	add    esp,0x2c
c001ff57:	89 f8                	mov    eax,edi
c001ff59:	5b                   	pop    ebx
c001ff5a:	5e                   	pop    esi
c001ff5b:	5f                   	pop    edi
c001ff5c:	5d                   	pop    ebp
c001ff5d:	c3                   	ret    

c001ff5e <ATA::read(unsigned long long, int, void*)>:
c001ff5e:	57                   	push   edi
c001ff5f:	b8 04 00 00 00       	mov    eax,0x4
c001ff64:	56                   	push   esi
c001ff65:	53                   	push   ebx
c001ff66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ff6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ff6e:	8d 7a ff             	lea    edi,[edx-0x1]
c001ff71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ff75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ff79:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ff7f:	77 25                	ja     c001ffa6 <ATA::read(unsigned long long, int, void*)+0x48>
c001ff81:	b8 06 00 00 00       	mov    eax,0x6
c001ff86:	85 f6                	test   esi,esi
c001ff88:	74 1c                	je     c001ffa6 <ATA::read(unsigned long long, int, void*)+0x48>
c001ff8a:	50                   	push   eax
c001ff8b:	50                   	push   eax
c001ff8c:	6a 00                	push   0x0
c001ff8e:	56                   	push   esi
c001ff8f:	52                   	push   edx
c001ff90:	53                   	push   ebx
c001ff91:	51                   	push   ecx
c001ff92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ff96:	e8 cd fb ff ff       	call   c001fb68 <ATA::access(unsigned long long, int, void*, bool)>
c001ff9b:	83 c4 20             	add    esp,0x20
c001ff9e:	85 c0                	test   eax,eax
c001ffa0:	0f 95 c0             	setne  al
c001ffa3:	0f b6 c0             	movzx  eax,al
c001ffa6:	5b                   	pop    ebx
c001ffa7:	5e                   	pop    esi
c001ffa8:	5f                   	pop    edi
c001ffa9:	c3                   	ret    

c001ffaa <ATA::write(unsigned long long, int, void*)>:
c001ffaa:	55                   	push   ebp
c001ffab:	57                   	push   edi
c001ffac:	56                   	push   esi
c001ffad:	53                   	push   ebx
c001ffae:	83 ec 18             	sub    esp,0x18
c001ffb1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ffb5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ffb9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ffbd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ffc1:	68 e1 73 02 c0       	push   0xc00273e1
c001ffc6:	e8 7c d0 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c001ffcb:	8d 53 ff             	lea    edx,[ebx-0x1]
c001ffce:	83 c4 10             	add    esp,0x10
c001ffd1:	b8 04 00 00 00       	mov    eax,0x4
c001ffd6:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001ffdc:	77 25                	ja     c0020003 <ATA::write(unsigned long long, int, void*)+0x59>
c001ffde:	b8 06 00 00 00       	mov    eax,0x6
c001ffe3:	85 f6                	test   esi,esi
c001ffe5:	74 1c                	je     c0020003 <ATA::write(unsigned long long, int, void*)+0x59>
c001ffe7:	50                   	push   eax
c001ffe8:	50                   	push   eax
c001ffe9:	6a 01                	push   0x1
c001ffeb:	56                   	push   esi
c001ffec:	53                   	push   ebx
c001ffed:	55                   	push   ebp
c001ffee:	57                   	push   edi
c001ffef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fff3:	e8 70 fb ff ff       	call   c001fb68 <ATA::access(unsigned long long, int, void*, bool)>
c001fff8:	83 c4 20             	add    esp,0x20
c001fffb:	85 c0                	test   eax,eax
c001fffd:	0f 95 c0             	setne  al
c0020000:	0f b6 c0             	movzx  eax,al
c0020003:	83 c4 0c             	add    esp,0xc
c0020006:	5b                   	pop    ebx
c0020007:	5e                   	pop    esi
c0020008:	5f                   	pop    edi
c0020009:	5d                   	pop    ebp
c002000a:	c3                   	ret    
c002000b:	90                   	nop

c002000c <ATA::detectCHS()>:
c002000c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020010:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0020016:	c1 e0 06             	shl    eax,0x6
c0020019:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002001f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0020029:	c7 44 24 04 ed 73 02 c0 	mov    DWORD PTR [esp+0x4],0xc00273ed
c0020031:	e9 8f 50 ff ff       	jmp    c00150c5 <Krnl::panic(char const*)>

c0020036 <ATA::open(int, int, void*)>:
c0020036:	53                   	push   ebx
c0020037:	83 ec 08             	sub    esp,0x8
c002003a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002003e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020042:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020046:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002004c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020052:	c1 e0 06             	shl    eax,0x6
c0020055:	01 d0                	add    eax,edx
c0020057:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002005e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0020064:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002006b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020075:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002007b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020082:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0020089:	75 0c                	jne    c0020097 <ATA::open(int, int, void*)+0x61>
c002008b:	83 ec 0c             	sub    esp,0xc
c002008e:	53                   	push   ebx
c002008f:	e8 78 ff ff ff       	call   c002000c <ATA::detectCHS()>
c0020094:	83 c4 10             	add    esp,0x10
c0020097:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002009d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00200a3:	c1 e0 06             	shl    eax,0x6
c00200a6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00200ad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00200b7:	d1 e8                	shr    eax,1
c00200b9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00200bf:	6a 04                	push   0x4
c00200c1:	6a 0c                	push   0xc
c00200c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200ca:	50                   	push   eax
c00200cb:	52                   	push   edx
c00200cc:	e8 69 ea ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200d1:	90                   	nop
c00200d2:	90                   	nop
c00200d3:	6a 00                	push   0x0
c00200d5:	6a 0c                	push   0xc
c00200d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200de:	50                   	push   eax
c00200df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200e5:	e8 50 ea ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200ea:	83 c4 14             	add    esp,0x14
c00200ed:	53                   	push   ebx
c00200ee:	e8 67 e9 fe ff       	call   c000ea5a <PhysicalDisk::startCache()>
c00200f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00200f6:	e8 73 0a ff ff       	call   c0010b6e <createPartitionsForDisk(PhysicalDisk*)>
c00200fb:	31 c0                	xor    eax,eax
c00200fd:	83 c4 18             	add    esp,0x18
c0020100:	5b                   	pop    ebx
c0020101:	c3                   	ret    

c0020102 <ATAPI::write(unsigned long long, int, void*)>:
c0020102:	b8 03 00 00 00       	mov    eax,0x3
c0020107:	c3                   	ret    

c0020108 <ATAPI::close(int, int, void*)>:
c0020108:	83 ec 0c             	sub    esp,0xc
c002010b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020115:	85 c0                	test   eax,eax
c0020117:	74 0c                	je     c0020125 <ATAPI::close(int, int, void*)+0x1d>
c0020119:	83 ec 0c             	sub    esp,0xc
c002011c:	8b 10                	mov    edx,DWORD PTR [eax]
c002011e:	50                   	push   eax
c002011f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020122:	83 c4 10             	add    esp,0x10
c0020125:	31 c0                	xor    eax,eax
c0020127:	83 c4 0c             	add    esp,0xc
c002012a:	c3                   	ret    
c002012b:	90                   	nop

c002012c <ATAPI::ATAPI()>:
c002012c:	83 ec 0c             	sub    esp,0xc
c002012f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020133:	83 ec 04             	sub    esp,0x4
c0020136:	68 00 08 00 00       	push   0x800
c002013b:	68 d9 76 02 c0       	push   0xc00276d9
c0020140:	50                   	push   eax
c0020141:	e8 ac e8 fe ff       	call   c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020146:	83 c4 10             	add    esp,0x10
c0020149:	ba 6c 74 02 c0       	mov    edx,0xc002746c
c002014e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020152:	89 10                	mov    DWORD PTR [eax],edx
c0020154:	90                   	nop
c0020155:	83 c4 0c             	add    esp,0xc
c0020158:	c3                   	ret    
c0020159:	90                   	nop

c002015a <ATAPI::readyForCommand()>:
c002015a:	56                   	push   esi
c002015b:	53                   	push   ebx
c002015c:	53                   	push   ebx
c002015d:	31 db                	xor    ebx,ebx
c002015f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020163:	51                   	push   ecx
c0020164:	6a 0c                	push   0xc
c0020166:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002016d:	50                   	push   eax
c002016e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020174:	e8 81 ea ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c0020179:	83 c4 10             	add    esp,0x10
c002017c:	a8 88                	test   al,0x88
c002017e:	74 25                	je     c00201a5 <ATAPI::readyForCommand()+0x4b>
c0020180:	43                   	inc    ebx
c0020181:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0020187:	7e da                	jle    c0020163 <ATAPI::readyForCommand()+0x9>
c0020189:	83 ec 0c             	sub    esp,0xc
c002018c:	68 5e 01 00 00       	push   0x15e
c0020191:	e8 32 8e ff ff       	call   c0018fc8 <milliTenthSleep(unsigned int)>
c0020196:	83 c4 10             	add    esp,0x10
c0020199:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002019f:	75 c2                	jne    c0020163 <ATAPI::readyForCommand()+0x9>
c00201a1:	31 c0                	xor    eax,eax
c00201a3:	eb 02                	jmp    c00201a7 <ATAPI::readyForCommand()+0x4d>
c00201a5:	b0 01                	mov    al,0x1
c00201a7:	5a                   	pop    edx
c00201a8:	5b                   	pop    ebx
c00201a9:	5e                   	pop    esi
c00201aa:	c3                   	ret    
c00201ab:	90                   	nop

c00201ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00201ac:	55                   	push   ebp
c00201ad:	57                   	push   edi
c00201ae:	56                   	push   esi
c00201af:	53                   	push   ebx
c00201b0:	83 ec 20             	sub    esp,0x20
c00201b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00201b7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00201bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00201bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00201c3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00201c7:	6a 01                	push   0x1
c00201c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201d0:	50                   	push   eax
c00201d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201d7:	e8 66 eb ff ff       	call   c001ed42 <IDE::enableIRQs(unsigned char, bool)>
c00201dc:	5e                   	pop    esi
c00201dd:	58                   	pop    eax
c00201de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201e5:	50                   	push   eax
c00201e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201ec:	e8 23 e9 ff ff       	call   c001eb14 <IDE::prepareInterrupt(unsigned char)>
c00201f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00201f4:	e8 61 ff ff ff       	call   c002015a <ATAPI::readyForCommand()>
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	84 c0                	test   al,al
c00201fe:	75 0a                	jne    c002020a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020200:	bb 01 00 00 00       	mov    ebx,0x1
c0020205:	e9 57 02 00 00       	jmp    c0020461 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002020a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0020210:	c1 e0 04             	shl    eax,0x4
c0020213:	0f b6 c0             	movzx  eax,al
c0020216:	50                   	push   eax
c0020217:	6a 06                	push   0x6
c0020219:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020220:	50                   	push   eax
c0020221:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020227:	e8 0e e9 ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002022c:	6a 00                	push   0x0
c002022e:	6a 01                	push   0x1
c0020230:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020237:	50                   	push   eax
c0020238:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002023e:	e8 f7 e8 ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020243:	83 c4 20             	add    esp,0x20
c0020246:	0f b6 c3             	movzx  eax,bl
c0020249:	0f b6 df             	movzx  ebx,bh
c002024c:	50                   	push   eax
c002024d:	6a 04                	push   0x4
c002024f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020256:	50                   	push   eax
c0020257:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002025d:	e8 d8 e8 ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020262:	53                   	push   ebx
c0020263:	6a 05                	push   0x5
c0020265:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002026c:	50                   	push   eax
c002026d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020273:	e8 c2 e8 ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020278:	83 c4 20             	add    esp,0x20
c002027b:	68 a0 00 00 00       	push   0xa0
c0020280:	6a 07                	push   0x7
c0020282:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020289:	50                   	push   eax
c002028a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020290:	e8 a5 e8 ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020295:	83 c4 0c             	add    esp,0xc
c0020298:	6a 01                	push   0x1
c002029a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202a1:	50                   	push   eax
c00202a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202a8:	e8 25 f3 ff ff       	call   c001f5d2 <IDE::polling(unsigned char, unsigned int)>
c00202ad:	83 c4 10             	add    esp,0x10
c00202b0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00202b6:	84 c0                	test   al,al
c00202b8:	74 23                	je     c00202dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00202ba:	0f b6 d8             	movzx  ebx,al
c00202bd:	0f b6 d2             	movzx  edx,dl
c00202c0:	53                   	push   ebx
c00202c1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00202c8:	50                   	push   eax
c00202c9:	52                   	push   edx
c00202ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202d0:	e8 4d f2 ff ff       	call   c001f522 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00202d5:	83 c4 10             	add    esp,0x10
c00202d8:	e9 84 01 00 00       	jmp    c0020461 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00202dd:	0f b6 d2             	movzx  edx,dl
c00202e0:	53                   	push   ebx
c00202e1:	53                   	push   ebx
c00202e2:	52                   	push   edx
c00202e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202e9:	e8 3a e8 ff ff       	call   c001eb28 <IDE::getBase(unsigned char)>
c00202ee:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00202f2:	b9 06 00 00 00       	mov    ecx,0x6
c00202f7:	89 c2                	mov    edx,eax
c00202f9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00202fc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020300:	83 c4 10             	add    esp,0x10
c0020303:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020309:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020310:	85 db                	test   ebx,ebx
c0020312:	0f 84 ec 00 00 00    	je     c0020404 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0020318:	51                   	push   ecx
c0020319:	51                   	push   ecx
c002031a:	52                   	push   edx
c002031b:	50                   	push   eax
c002031c:	e8 87 e9 ff ff       	call   c001eca8 <IDE::waitInterrupt(unsigned char)>
c0020321:	83 c4 10             	add    esp,0x10
c0020324:	84 c0                	test   al,al
c0020326:	0f 84 d4 fe ff ff    	je     c0020200 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002032c:	56                   	push   esi
c002032d:	56                   	push   esi
c002032e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020335:	50                   	push   eax
c0020336:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002033c:	e8 d3 e7 ff ff       	call   c001eb14 <IDE::prepareInterrupt(unsigned char)>
c0020341:	83 c4 0c             	add    esp,0xc
c0020344:	6a 04                	push   0x4
c0020346:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002034d:	50                   	push   eax
c002034e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020354:	e8 a1 e8 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c0020359:	83 c4 0c             	add    esp,0xc
c002035c:	89 c6                	mov    esi,eax
c002035e:	6a 05                	push   0x5
c0020360:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020367:	50                   	push   eax
c0020368:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002036e:	e8 87 e8 ff ff       	call   c001ebfa <IDE::read(unsigned char, unsigned char)>
c0020373:	89 f1                	mov    ecx,esi
c0020375:	0f b6 c0             	movzx  eax,al
c0020378:	0f b6 f1             	movzx  esi,cl
c002037b:	c1 e0 08             	shl    eax,0x8
c002037e:	09 c6                	or     esi,eax
c0020380:	d1 fe                	sar    esi,1
c0020382:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0020386:	83 c4 10             	add    esp,0x10
c0020389:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002038e:	74 41                	je     c00203d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0020390:	31 c9                	xor    ecx,ecx
c0020392:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020398:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002039f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00203a3:	75 0a                	jne    c00203af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00203a5:	01 c9                	add    ecx,ecx
c00203a7:	01 cd                	add    ebp,ecx
c00203a9:	4b                   	dec    ebx
c00203aa:	e9 54 ff ff ff       	jmp    c0020303 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00203af:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00203b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00203b8:	51                   	push   ecx
c00203b9:	51                   	push   ecx
c00203ba:	52                   	push   edx
c00203bb:	50                   	push   eax
c00203bc:	e8 67 e7 ff ff       	call   c001eb28 <IDE::getBase(unsigned char)>
c00203c1:	89 c2                	mov    edx,eax
c00203c3:	89 f0                	mov    eax,esi
c00203c5:	66 ef                	out    dx,ax
c00203c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00203cb:	83 c4 10             	add    esp,0x10
c00203ce:	41                   	inc    ecx
c00203cf:	eb c1                	jmp    c0020392 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00203d1:	31 f6                	xor    esi,esi
c00203d3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00203d9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00203e0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00203e4:	75 06                	jne    c00203ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00203e6:	01 f6                	add    esi,esi
c00203e8:	01 f5                	add    ebp,esi
c00203ea:	eb bd                	jmp    c00203a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00203ec:	51                   	push   ecx
c00203ed:	51                   	push   ecx
c00203ee:	52                   	push   edx
c00203ef:	50                   	push   eax
c00203f0:	e8 33 e7 ff ff       	call   c001eb28 <IDE::getBase(unsigned char)>
c00203f5:	89 c2                	mov    edx,eax
c00203f7:	66 ed                	in     ax,dx
c00203f9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00203fe:	83 c4 10             	add    esp,0x10
c0020401:	46                   	inc    esi
c0020402:	eb cf                	jmp    c00203d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0020404:	51                   	push   ecx
c0020405:	51                   	push   ecx
c0020406:	52                   	push   edx
c0020407:	50                   	push   eax
c0020408:	e8 9b e8 ff ff       	call   c001eca8 <IDE::waitInterrupt(unsigned char)>
c002040d:	83 c4 10             	add    esp,0x10
c0020410:	84 c0                	test   al,al
c0020412:	0f 84 e8 fd ff ff    	je     c0020200 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020418:	bb a0 86 01 00       	mov    ebx,0x186a0
c002041d:	52                   	push   edx
c002041e:	52                   	push   edx
c002041f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020426:	50                   	push   eax
c0020427:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002042d:	e8 e2 e6 ff ff       	call   c001eb14 <IDE::prepareInterrupt(unsigned char)>
c0020432:	83 c4 10             	add    esp,0x10
c0020435:	50                   	push   eax
c0020436:	50                   	push   eax
c0020437:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002043e:	50                   	push   eax
c002043f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020445:	e8 de e6 ff ff       	call   c001eb28 <IDE::getBase(unsigned char)>
c002044a:	8d 50 07             	lea    edx,[eax+0x7]
c002044d:	ec                   	in     al,dx
c002044e:	83 c4 10             	add    esp,0x10
c0020451:	a8 88                	test   al,0x88
c0020453:	74 0a                	je     c002045f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020455:	4b                   	dec    ebx
c0020456:	75 dd                	jne    c0020435 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020458:	bb 02 00 00 00       	mov    ebx,0x2
c002045d:	eb 02                	jmp    c0020461 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002045f:	31 db                	xor    ebx,ebx
c0020461:	83 c4 1c             	add    esp,0x1c
c0020464:	89 d8                	mov    eax,ebx
c0020466:	5b                   	pop    ebx
c0020467:	5e                   	pop    esi
c0020468:	5f                   	pop    edi
c0020469:	5d                   	pop    ebp
c002046a:	c3                   	ret    
c002046b:	90                   	nop

c002046c <ATAPI::diskRemoved()>:
c002046c:	53                   	push   ebx
c002046d:	83 ec 14             	sub    esp,0x14
c0020470:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020474:	68 e5 76 02 c0       	push   0xc00276e5
c0020479:	e8 c9 cb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002047e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020485:	c7 04 24 38 74 02 c0 	mov    DWORD PTR [esp],0xc0027438
c002048c:	e8 b6 cb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0020491:	58                   	pop    eax
c0020492:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020498:	e8 4f 04 ff ff       	call   c00108ec <LogicalDisk::unmount()>
c002049d:	c7 04 24 47 74 02 c0 	mov    DWORD PTR [esp],0xc0027447
c00204a4:	e8 9e cb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00204a9:	5a                   	pop    edx
c00204aa:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00204b0:	e8 3f 0e ff ff       	call   c00112f4 <VCache::writeWriteBuffer()>
c00204b5:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00204bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00204bf:	83 c4 18             	add    esp,0x18
c00204c2:	5b                   	pop    ebx
c00204c3:	e9 1c 0e ff ff       	jmp    c00112e4 <VCache::invalidateReadBuffer()>

c00204c8 <ATAPI::eject()>:
c00204c8:	57                   	push   edi
c00204c9:	b9 03 00 00 00       	mov    ecx,0x3
c00204ce:	53                   	push   ebx
c00204cf:	83 ec 14             	sub    esp,0x14
c00204d2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00204d6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00204da:	fc                   	cld    
c00204db:	31 c0                	xor    eax,eax
c00204dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00204df:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00204e4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00204e9:	50                   	push   eax
c00204ea:	50                   	push   eax
c00204eb:	6a 00                	push   0x0
c00204ed:	6a 00                	push   0x0
c00204ef:	6a 00                	push   0x0
c00204f1:	6a 02                	push   0x2
c00204f3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00204f7:	50                   	push   eax
c00204f8:	53                   	push   ebx
c00204f9:	e8 ae fc ff ff       	call   c00201ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00204fe:	83 c4 14             	add    esp,0x14
c0020501:	53                   	push   ebx
c0020502:	e8 65 ff ff ff       	call   c002046c <ATAPI::diskRemoved()>
c0020507:	83 c4 24             	add    esp,0x24
c002050a:	31 c0                	xor    eax,eax
c002050c:	5b                   	pop    ebx
c002050d:	5f                   	pop    edi
c002050e:	c3                   	ret    
c002050f:	90                   	nop

c0020510 <ATAPI::diskInserted()>:
c0020510:	83 ec 18             	sub    esp,0x18
c0020513:	68 fc 76 02 c0       	push   0xc00276fc
c0020518:	e8 2a cb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002051d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020521:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020528:	83 c4 1c             	add    esp,0x1c
c002052b:	c3                   	ret    

c002052c <ATAPI::detectMedia()>:
c002052c:	56                   	push   esi
c002052d:	53                   	push   ebx
c002052e:	83 ec 28             	sub    esp,0x28
c0020531:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020535:	6a 0c                	push   0xc
c0020537:	6a 00                	push   0x0
c0020539:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002053d:	56                   	push   esi
c002053e:	e8 41 01 fe ff       	call   c0000684 <memset>
c0020543:	58                   	pop    eax
c0020544:	5a                   	pop    edx
c0020545:	6a 00                	push   0x0
c0020547:	6a 00                	push   0x0
c0020549:	6a 00                	push   0x0
c002054b:	6a 00                	push   0x0
c002054d:	56                   	push   esi
c002054e:	53                   	push   ebx
c002054f:	e8 58 fc ff ff       	call   c00201ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020554:	83 c4 1c             	add    esp,0x1c
c0020557:	6a 0c                	push   0xc
c0020559:	6a 00                	push   0x0
c002055b:	56                   	push   esi
c002055c:	e8 23 01 fe ff       	call   c0000684 <memset>
c0020561:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020566:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002056b:	59                   	pop    ecx
c002056c:	58                   	pop    eax
c002056d:	6a 01                	push   0x1
c002056f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020573:	50                   	push   eax
c0020574:	6a 00                	push   0x0
c0020576:	6a 12                	push   0x12
c0020578:	56                   	push   esi
c0020579:	53                   	push   ebx
c002057a:	e8 2d fc ff ff       	call   c00201ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002057f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020583:	83 c4 20             	add    esp,0x20
c0020586:	83 e0 7f             	and    eax,0x7f
c0020589:	3c 70                	cmp    al,0x70
c002058b:	74 15                	je     c00205a2 <ATAPI::detectMedia()+0x76>
c002058d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020594:	75 0c                	jne    c00205a2 <ATAPI::detectMedia()+0x76>
c0020596:	83 ec 0c             	sub    esp,0xc
c0020599:	53                   	push   ebx
c002059a:	e8 71 ff ff ff       	call   c0020510 <ATAPI::diskInserted()>
c002059f:	83 c4 10             	add    esp,0x10
c00205a2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00205a6:	83 e0 0f             	and    eax,0xf
c00205a9:	3c 02                	cmp    al,0x2
c00205ab:	75 1b                	jne    c00205c8 <ATAPI::detectMedia()+0x9c>
c00205ad:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00205b2:	75 2d                	jne    c00205e1 <ATAPI::detectMedia()+0xb5>
c00205b4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00205bb:	74 24                	je     c00205e1 <ATAPI::detectMedia()+0xb5>
c00205bd:	83 ec 0c             	sub    esp,0xc
c00205c0:	53                   	push   ebx
c00205c1:	e8 a6 fe ff ff       	call   c002046c <ATAPI::diskRemoved()>
c00205c6:	eb 16                	jmp    c00205de <ATAPI::detectMedia()+0xb2>
c00205c8:	84 c0                	test   al,al
c00205ca:	75 15                	jne    c00205e1 <ATAPI::detectMedia()+0xb5>
c00205cc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00205d3:	75 0c                	jne    c00205e1 <ATAPI::detectMedia()+0xb5>
c00205d5:	83 ec 0c             	sub    esp,0xc
c00205d8:	53                   	push   ebx
c00205d9:	e8 32 ff ff ff       	call   c0020510 <ATAPI::diskInserted()>
c00205de:	83 c4 10             	add    esp,0x10
c00205e1:	83 c4 24             	add    esp,0x24
c00205e4:	5b                   	pop    ebx
c00205e5:	5e                   	pop    esi
c00205e6:	c3                   	ret    
c00205e7:	90                   	nop

c00205e8 <ATAPI::open(int, int, void*)>:
c00205e8:	56                   	push   esi
c00205e9:	53                   	push   ebx
c00205ea:	50                   	push   eax
c00205eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00205ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00205f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00205f7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00205fd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020603:	c1 e0 06             	shl    eax,0x6
c0020606:	01 d0                	add    eax,edx
c0020608:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002060f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020615:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002061c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020626:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002062c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020633:	6a 04                	push   0x4
c0020635:	6a 0c                	push   0xc
c0020637:	51                   	push   ecx
c0020638:	52                   	push   edx
c0020639:	e8 fc e4 ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002063e:	90                   	nop
c002063f:	90                   	nop
c0020640:	6a 00                	push   0x0
c0020642:	6a 0c                	push   0xc
c0020644:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002064b:	50                   	push   eax
c002064c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020652:	e8 e3 e4 ff ff       	call   c001eb3a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020657:	83 c4 14             	add    esp,0x14
c002065a:	68 74 01 00 00       	push   0x174
c002065f:	e8 f7 96 fe ff       	call   c0009d5b <malloc>
c0020664:	83 c4 0c             	add    esp,0xc
c0020667:	89 c6                	mov    esi,eax
c0020669:	6a 00                	push   0x0
c002066b:	68 ff ff ff 7f       	push   0x7fffffff
c0020670:	6a 00                	push   0x0
c0020672:	6a 00                	push   0x0
c0020674:	53                   	push   ebx
c0020675:	68 c4 77 02 c0       	push   0xc00277c4
c002067a:	50                   	push   eax
c002067b:	e8 78 00 ff ff       	call   c00106f8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020680:	83 c4 14             	add    esp,0x14
c0020683:	56                   	push   esi
c0020684:	e8 25 01 ff ff       	call   c00107ae <LogicalDisk::assignDriveLetter()>
c0020689:	5a                   	pop    edx
c002068a:	0f be c0             	movsx  eax,al
c002068d:	59                   	pop    ecx
c002068e:	50                   	push   eax
c002068f:	68 55 74 02 c0       	push   0xc0027455
c0020694:	e8 ae c9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0020699:	58                   	pop    eax
c002069a:	5a                   	pop    edx
c002069b:	56                   	push   esi
c002069c:	53                   	push   ebx
c002069d:	e8 18 df fe ff       	call   c000e5ba <Device::addChild(Device*)>
c00206a2:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c00206a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00206ab:	e8 aa e3 fe ff       	call   c000ea5a <PhysicalDisk::startCache()>
c00206b0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00206b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00206ba:	e8 6d fe ff ff       	call   c002052c <ATAPI::detectMedia()>
c00206bf:	83 c4 14             	add    esp,0x14
c00206c2:	31 c0                	xor    eax,eax
c00206c4:	5b                   	pop    ebx
c00206c5:	5e                   	pop    esi
c00206c6:	c3                   	ret    
c00206c7:	90                   	nop

c00206c8 <ATAPI::read(unsigned long long, int, void*)>:
c00206c8:	55                   	push   ebp
c00206c9:	57                   	push   edi
c00206ca:	56                   	push   esi
c00206cb:	53                   	push   ebx
c00206cc:	83 ec 1c             	sub    esp,0x1c
c00206cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00206d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00206d7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00206db:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00206e2:	74 41                	je     c0020725 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00206e4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00206e8:	b9 03 00 00 00       	mov    ecx,0x3
c00206ed:	fc                   	cld    
c00206ee:	31 c0                	xor    eax,eax
c00206f0:	86 fb                	xchg   bl,bh
c00206f2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206f4:	c1 c3 10             	rol    ebx,0x10
c00206f7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00206fc:	89 e8                	mov    eax,ebp
c00206fe:	86 fb                	xchg   bl,bh
c0020700:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020704:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0020708:	50                   	push   eax
c0020709:	50                   	push   eax
c002070a:	55                   	push   ebp
c002070b:	c1 e5 0b             	shl    ebp,0xb
c002070e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020712:	6a 00                	push   0x0
c0020714:	55                   	push   ebp
c0020715:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020719:	50                   	push   eax
c002071a:	56                   	push   esi
c002071b:	e8 8c fa ff ff       	call   c00201ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020720:	83 c4 20             	add    esp,0x20
c0020723:	eb 1a                	jmp    c002073f <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020725:	83 ec 0c             	sub    esp,0xc
c0020728:	56                   	push   esi
c0020729:	e8 fe fd ff ff       	call   c002052c <ATAPI::detectMedia()>
c002072e:	83 c4 10             	add    esp,0x10
c0020731:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020738:	75 aa                	jne    c00206e4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002073a:	b8 02 00 00 00       	mov    eax,0x2
c002073f:	83 c4 1c             	add    esp,0x1c
c0020742:	5b                   	pop    ebx
c0020743:	5e                   	pop    esi
c0020744:	5f                   	pop    edi
c0020745:	5d                   	pop    ebp
c0020746:	c3                   	ret    
c0020747:	90                   	nop

c0020748 <SATA::close(int, int, void*)>:
c0020748:	83 ec 0c             	sub    esp,0xc
c002074b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002074f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020755:	85 c0                	test   eax,eax
c0020757:	74 0c                	je     c0020765 <SATA::close(int, int, void*)+0x1d>
c0020759:	83 ec 0c             	sub    esp,0xc
c002075c:	8b 10                	mov    edx,DWORD PTR [eax]
c002075e:	50                   	push   eax
c002075f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020762:	83 c4 10             	add    esp,0x10
c0020765:	31 c0                	xor    eax,eax
c0020767:	83 c4 0c             	add    esp,0xc
c002076a:	c3                   	ret    
c002076b:	90                   	nop

c002076c <SATA::powerSaving(PowerSavingLevel)>:
c002076c:	c3                   	ret    
c002076d:	90                   	nop

c002076e <SATA::open(int, int, void*)>:
c002076e:	56                   	push   esi
c002076f:	53                   	push   ebx
c0020770:	51                   	push   ecx
c0020771:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020775:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c002077c:	74 2d                	je     c00207ab <SATA::open(int, int, void*)+0x3d>
c002077e:	83 ec 0c             	sub    esp,0xc
c0020781:	68 9c 74 02 c0       	push   0xc002749c
c0020786:	e8 2a 96 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002078b:	83 c4 10             	add    esp,0x10
c002078e:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020795:	75 14                	jne    c00207ab <SATA::open(int, int, void*)+0x3d>
c0020797:	e4 60                	in     al,0x60
c0020799:	3c 5a                	cmp    al,0x5a
c002079b:	74 04                	je     c00207a1 <SATA::open(int, int, void*)+0x33>
c002079d:	3c 1c                	cmp    al,0x1c
c002079f:	75 f6                	jne    c0020797 <SATA::open(int, int, void*)+0x29>
c00207a1:	e4 60                	in     al,0x60
c00207a3:	3c 5a                	cmp    al,0x5a
c00207a5:	74 fa                	je     c00207a1 <SATA::open(int, int, void*)+0x33>
c00207a7:	3c 1c                	cmp    al,0x1c
c00207a9:	74 f6                	je     c00207a1 <SATA::open(int, int, void*)+0x33>
c00207ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207af:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00207b9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00207bf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00207c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207cd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00207d7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00207dd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00207e4:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c00207eb:	74 2d                	je     c002081a <SATA::open(int, int, void*)+0xac>
c00207ed:	83 ec 0c             	sub    esp,0xc
c00207f0:	68 a9 74 02 c0       	push   0xc00274a9
c00207f5:	e8 bb 95 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00207fa:	83 c4 10             	add    esp,0x10
c00207fd:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020804:	75 14                	jne    c002081a <SATA::open(int, int, void*)+0xac>
c0020806:	e4 60                	in     al,0x60
c0020808:	3c 1c                	cmp    al,0x1c
c002080a:	74 04                	je     c0020810 <SATA::open(int, int, void*)+0xa2>
c002080c:	3c 5a                	cmp    al,0x5a
c002080e:	75 f6                	jne    c0020806 <SATA::open(int, int, void*)+0x98>
c0020810:	e4 60                	in     al,0x60
c0020812:	3c 5a                	cmp    al,0x5a
c0020814:	74 fa                	je     c0020810 <SATA::open(int, int, void*)+0xa2>
c0020816:	3c 1c                	cmp    al,0x1c
c0020818:	74 f6                	je     c0020810 <SATA::open(int, int, void*)+0xa2>
c002081a:	e8 f3 9b fe ff       	call   c000a412 <Phys::allocatePage()>
c002081f:	89 c6                	mov    esi,eax
c0020821:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020827:	81 c6 00 10 00 00    	add    esi,0x1000
c002082d:	e8 e0 9b fe ff       	call   c000a412 <Phys::allocatePage()>
c0020832:	39 c6                	cmp    esi,eax
c0020834:	74 10                	je     c0020846 <SATA::open(int, int, void*)+0xd8>
c0020836:	83 ec 0c             	sub    esp,0xc
c0020839:	68 b6 74 02 c0       	push   0xc00274b6
c002083e:	e8 82 48 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0020843:	83 c4 10             	add    esp,0x10
c0020846:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c002084d:	74 2d                	je     c002087c <SATA::open(int, int, void*)+0x10e>
c002084f:	83 ec 0c             	sub    esp,0xc
c0020852:	68 ca 74 02 c0       	push   0xc00274ca
c0020857:	e8 59 95 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002085c:	83 c4 10             	add    esp,0x10
c002085f:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020866:	75 14                	jne    c002087c <SATA::open(int, int, void*)+0x10e>
c0020868:	e4 60                	in     al,0x60
c002086a:	3c 1c                	cmp    al,0x1c
c002086c:	74 04                	je     c0020872 <SATA::open(int, int, void*)+0x104>
c002086e:	3c 5a                	cmp    al,0x5a
c0020870:	75 f6                	jne    c0020868 <SATA::open(int, int, void*)+0xfa>
c0020872:	e4 60                	in     al,0x60
c0020874:	3c 5a                	cmp    al,0x5a
c0020876:	74 fa                	je     c0020872 <SATA::open(int, int, void*)+0x104>
c0020878:	3c 1c                	cmp    al,0x1c
c002087a:	74 f6                	je     c0020872 <SATA::open(int, int, void*)+0x104>
c002087c:	83 ec 0c             	sub    esp,0xc
c002087f:	6a 02                	push   0x2
c0020881:	e8 9b b4 fe ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0020886:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002088c:	6a 03                	push   0x3
c002088e:	50                   	push   eax
c002088f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020895:	ff 35 50 8a 02 c0    	push   DWORD PTR ds:0xc0028a50
c002089b:	e8 28 bb fe ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00208a0:	83 c4 20             	add    esp,0x20
c00208a3:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c00208aa:	74 2d                	je     c00208d9 <SATA::open(int, int, void*)+0x16b>
c00208ac:	83 ec 0c             	sub    esp,0xc
c00208af:	68 d7 74 02 c0       	push   0xc00274d7
c00208b4:	e8 fc 94 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00208b9:	83 c4 10             	add    esp,0x10
c00208bc:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c00208c3:	75 14                	jne    c00208d9 <SATA::open(int, int, void*)+0x16b>
c00208c5:	e4 60                	in     al,0x60
c00208c7:	3c 1c                	cmp    al,0x1c
c00208c9:	74 04                	je     c00208cf <SATA::open(int, int, void*)+0x161>
c00208cb:	3c 5a                	cmp    al,0x5a
c00208cd:	75 f6                	jne    c00208c5 <SATA::open(int, int, void*)+0x157>
c00208cf:	e4 60                	in     al,0x60
c00208d1:	3c 5a                	cmp    al,0x5a
c00208d3:	74 fa                	je     c00208cf <SATA::open(int, int, void*)+0x161>
c00208d5:	3c 1c                	cmp    al,0x1c
c00208d7:	74 f6                	je     c00208cf <SATA::open(int, int, void*)+0x161>
c00208d9:	83 ec 0c             	sub    esp,0xc
c00208dc:	53                   	push   ebx
c00208dd:	e8 78 e1 fe ff       	call   c000ea5a <PhysicalDisk::startCache()>
c00208e2:	83 c4 10             	add    esp,0x10
c00208e5:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c00208ec:	74 2d                	je     c002091b <SATA::open(int, int, void*)+0x1ad>
c00208ee:	83 ec 0c             	sub    esp,0xc
c00208f1:	68 e4 74 02 c0       	push   0xc00274e4
c00208f6:	e8 ba 94 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00208fb:	83 c4 10             	add    esp,0x10
c00208fe:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020905:	75 14                	jne    c002091b <SATA::open(int, int, void*)+0x1ad>
c0020907:	e4 60                	in     al,0x60
c0020909:	3c 1c                	cmp    al,0x1c
c002090b:	74 04                	je     c0020911 <SATA::open(int, int, void*)+0x1a3>
c002090d:	3c 5a                	cmp    al,0x5a
c002090f:	75 f6                	jne    c0020907 <SATA::open(int, int, void*)+0x199>
c0020911:	e4 60                	in     al,0x60
c0020913:	3c 5a                	cmp    al,0x5a
c0020915:	74 fa                	je     c0020911 <SATA::open(int, int, void*)+0x1a3>
c0020917:	3c 1c                	cmp    al,0x1c
c0020919:	74 f6                	je     c0020911 <SATA::open(int, int, void*)+0x1a3>
c002091b:	83 ec 0c             	sub    esp,0xc
c002091e:	53                   	push   ebx
c002091f:	e8 4a 02 ff ff       	call   c0010b6e <createPartitionsForDisk(PhysicalDisk*)>
c0020924:	83 c4 10             	add    esp,0x10
c0020927:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c002092e:	74 2d                	je     c002095d <SATA::open(int, int, void*)+0x1ef>
c0020930:	83 ec 0c             	sub    esp,0xc
c0020933:	68 f1 74 02 c0       	push   0xc00274f1
c0020938:	e8 78 94 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002093d:	83 c4 10             	add    esp,0x10
c0020940:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020947:	75 14                	jne    c002095d <SATA::open(int, int, void*)+0x1ef>
c0020949:	e4 60                	in     al,0x60
c002094b:	3c 1c                	cmp    al,0x1c
c002094d:	74 04                	je     c0020953 <SATA::open(int, int, void*)+0x1e5>
c002094f:	3c 5a                	cmp    al,0x5a
c0020951:	75 f6                	jne    c0020949 <SATA::open(int, int, void*)+0x1db>
c0020953:	e4 60                	in     al,0x60
c0020955:	3c 5a                	cmp    al,0x5a
c0020957:	74 fa                	je     c0020953 <SATA::open(int, int, void*)+0x1e5>
c0020959:	3c 1c                	cmp    al,0x1c
c002095b:	74 f6                	je     c0020953 <SATA::open(int, int, void*)+0x1e5>
c002095d:	5a                   	pop    edx
c002095e:	31 c0                	xor    eax,eax
c0020960:	5b                   	pop    ebx
c0020961:	5e                   	pop    esi
c0020962:	c3                   	ret    
c0020963:	90                   	nop

c0020964 <SATA::SATA()>:
c0020964:	83 ec 0c             	sub    esp,0xc
c0020967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002096b:	83 ec 04             	sub    esp,0x4
c002096e:	68 00 02 00 00       	push   0x200
c0020973:	68 fe 74 02 c0       	push   0xc00274fe
c0020978:	50                   	push   eax
c0020979:	e8 74 e0 fe ff       	call   c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002097e:	83 c4 10             	add    esp,0x10
c0020981:	ba a8 76 02 c0       	mov    edx,0xc00276a8
c0020986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002098a:	89 10                	mov    DWORD PTR [eax],edx
c002098c:	90                   	nop
c002098d:	83 c4 0c             	add    esp,0xc
c0020990:	c3                   	ret    
c0020991:	90                   	nop

c0020992 <SATA::access(unsigned long long, int, void*, bool)>:
c0020992:	55                   	push   ebp
c0020993:	57                   	push   edi
c0020994:	56                   	push   esi
c0020995:	53                   	push   ebx
c0020996:	83 ec 2c             	sub    esp,0x2c
c0020999:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002099d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00209a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209a5:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c00209ac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00209b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00209b4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00209b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209bc:	75 19                	jne    c00209d7 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c00209be:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00209c3:	7e 41                	jle    c0020a06 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00209c5:	83 ec 0c             	sub    esp,0xc
c00209c8:	68 1d 75 02 c0       	push   0xc002751d
c00209cd:	e8 f3 46 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00209d2:	83 c4 10             	add    esp,0x10
c00209d5:	eb 2f                	jmp    c0020a06 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00209d7:	83 ec 0c             	sub    esp,0xc
c00209da:	68 0e 75 02 c0       	push   0xc002750e
c00209df:	e8 d1 93 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00209e4:	83 c4 10             	add    esp,0x10
c00209e7:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c00209ee:	75 ce                	jne    c00209be <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00209f0:	e4 60                	in     al,0x60
c00209f2:	3c 1c                	cmp    al,0x1c
c00209f4:	74 04                	je     c00209fa <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00209f6:	3c 5a                	cmp    al,0x5a
c00209f8:	75 f6                	jne    c00209f0 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c00209fa:	e4 60                	in     al,0x60
c00209fc:	3c 5a                	cmp    al,0x5a
c00209fe:	74 fa                	je     c00209fa <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020a00:	3c 1c                	cmp    al,0x1c
c0020a02:	74 f6                	je     c00209fa <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020a04:	eb b8                	jmp    c00209be <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020a06:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020a0d:	75 29                	jne    c0020a38 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020a0f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020a15:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020a1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020a21:	8d 75 02             	lea    esi,[ebp+0x2]
c0020a24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a28:	c1 e6 07             	shl    esi,0x7
c0020a2b:	01 c6                	add    esi,eax
c0020a2d:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020a34:	74 4a                	je     c0020a80 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020a36:	eb 2f                	jmp    c0020a67 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020a38:	83 ec 0c             	sub    esp,0xc
c0020a3b:	68 56 75 02 c0       	push   0xc0027556
c0020a40:	e8 70 93 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020a45:	83 c4 10             	add    esp,0x10
c0020a48:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020a4f:	75 be                	jne    c0020a0f <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020a51:	e4 60                	in     al,0x60
c0020a53:	3c 1c                	cmp    al,0x1c
c0020a55:	74 04                	je     c0020a5b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020a57:	3c 5a                	cmp    al,0x5a
c0020a59:	75 f6                	jne    c0020a51 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020a5b:	e4 60                	in     al,0x60
c0020a5d:	3c 5a                	cmp    al,0x5a
c0020a5f:	74 fa                	je     c0020a5b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020a61:	3c 1c                	cmp    al,0x1c
c0020a63:	74 f6                	je     c0020a5b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020a65:	eb a8                	jmp    c0020a0f <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020a67:	83 ec 0c             	sub    esp,0xc
c0020a6a:	68 65 75 02 c0       	push   0xc0027565
c0020a6f:	e8 41 93 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020a74:	83 c4 10             	add    esp,0x10
c0020a77:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020a7e:	74 3d                	je     c0020abd <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020a80:	89 e8                	mov    eax,ebp
c0020a82:	c1 e0 07             	shl    eax,0x7
c0020a85:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020a89:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020a93:	52                   	push   edx
c0020a94:	52                   	push   edx
c0020a95:	56                   	push   esi
c0020a96:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020a9c:	e8 11 ec ff ff       	call   c001f6b2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020aa1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020aa5:	83 c4 10             	add    esp,0x10
c0020aa8:	b8 01 00 00 00       	mov    eax,0x1
c0020aad:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020ab2:	75 1d                	jne    c0020ad1 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020ab4:	e9 c8 04 00 00       	jmp    c0020f81 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020ab9:	3c 5a                	cmp    al,0x5a
c0020abb:	74 0c                	je     c0020ac9 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020abd:	e4 60                	in     al,0x60
c0020abf:	3c 1c                	cmp    al,0x1c
c0020ac1:	75 f6                	jne    c0020ab9 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020ac3:	eb 04                	jmp    c0020ac9 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020ac5:	3c 1c                	cmp    al,0x1c
c0020ac7:	75 b7                	jne    c0020a80 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020ac9:	e4 60                	in     al,0x60
c0020acb:	3c 5a                	cmp    al,0x5a
c0020acd:	74 fa                	je     c0020ac9 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020acf:	eb f4                	jmp    c0020ac5 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020ad1:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020ad8:	74 3a                	je     c0020b14 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020ada:	83 ec 0c             	sub    esp,0xc
c0020add:	68 74 75 02 c0       	push   0xc0027574
c0020ae2:	e8 ce 92 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020ae7:	83 c4 10             	add    esp,0x10
c0020aea:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020af1:	74 0d                	je     c0020b00 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020af3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020af8:	74 34                	je     c0020b2e <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020afa:	eb 1f                	jmp    c0020b1b <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020afc:	3c 1c                	cmp    al,0x1c
c0020afe:	74 0c                	je     c0020b0c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020b00:	e4 60                	in     al,0x60
c0020b02:	3c 5a                	cmp    al,0x5a
c0020b04:	75 f6                	jne    c0020afc <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020b06:	eb 04                	jmp    c0020b0c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020b08:	3c 1c                	cmp    al,0x1c
c0020b0a:	75 e7                	jne    c0020af3 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020b0c:	e4 60                	in     al,0x60
c0020b0e:	3c 5a                	cmp    al,0x5a
c0020b10:	74 fa                	je     c0020b0c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020b12:	eb f4                	jmp    c0020b08 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020b14:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020b19:	74 1c                	je     c0020b37 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020b1b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020b1f:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020b25:	c1 e1 09             	shl    ecx,0x9
c0020b28:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020b2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020b2e:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020b35:	75 55                	jne    c0020b8c <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020b37:	8d 45 02             	lea    eax,[ebp+0x2]
c0020b3a:	c1 e0 07             	shl    eax,0x7
c0020b3d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020b41:	8b 38                	mov    edi,DWORD PTR [eax]
c0020b43:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020b49:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020b4f:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b59:	c1 e0 05             	shl    eax,0x5
c0020b5c:	01 c7                	add    edi,eax
c0020b5e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020b62:	83 e0 01             	and    eax,0x1
c0020b65:	c1 e0 06             	shl    eax,0x6
c0020b68:	88 c2                	mov    dl,al
c0020b6a:	8a 07                	mov    al,BYTE PTR [edi]
c0020b6c:	83 e0 bf             	and    eax,0xffffffbf
c0020b6f:	09 d0                	or     eax,edx
c0020b71:	88 07                	mov    BYTE PTR [edi],al
c0020b73:	8b 07                	mov    eax,DWORD PTR [edi]
c0020b75:	25 e0 ff 00 00       	and    eax,0xffe0
c0020b7a:	0d 05 00 01 00       	or     eax,0x10005
c0020b7f:	89 07                	mov    DWORD PTR [edi],eax
c0020b81:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020b88:	74 4d                	je     c0020bd7 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020b8a:	eb 32                	jmp    c0020bbe <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020b8c:	83 ec 0c             	sub    esp,0xc
c0020b8f:	68 83 75 02 c0       	push   0xc0027583
c0020b94:	e8 1c 92 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020b99:	83 c4 10             	add    esp,0x10
c0020b9c:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020ba3:	75 92                	jne    c0020b37 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020ba5:	e4 60                	in     al,0x60
c0020ba7:	3c 1c                	cmp    al,0x1c
c0020ba9:	74 04                	je     c0020baf <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020bab:	3c 5a                	cmp    al,0x5a
c0020bad:	75 f6                	jne    c0020ba5 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020baf:	e4 60                	in     al,0x60
c0020bb1:	3c 5a                	cmp    al,0x5a
c0020bb3:	74 fa                	je     c0020baf <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020bb5:	3c 1c                	cmp    al,0x1c
c0020bb7:	74 f6                	je     c0020baf <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020bb9:	e9 79 ff ff ff       	jmp    c0020b37 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020bbe:	83 ec 0c             	sub    esp,0xc
c0020bc1:	68 92 75 02 c0       	push   0xc0027592
c0020bc6:	e8 ea 91 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020bcb:	83 c4 10             	add    esp,0x10
c0020bce:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020bd5:	74 3b                	je     c0020c12 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020bd7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020bdd:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020be3:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020be9:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020bec:	50                   	push   eax
c0020bed:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020bf1:	83 c0 08             	add    eax,0x8
c0020bf4:	c1 e0 04             	shl    eax,0x4
c0020bf7:	50                   	push   eax
c0020bf8:	6a 00                	push   0x0
c0020bfa:	56                   	push   esi
c0020bfb:	e8 84 fa fd ff       	call   c0000684 <memset>
c0020c00:	83 c4 10             	add    esp,0x10
c0020c03:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020c0a:	74 33                	je     c0020c3f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020c0c:	eb 18                	jmp    c0020c26 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020c0e:	3c 1c                	cmp    al,0x1c
c0020c10:	74 0c                	je     c0020c1e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020c12:	e4 60                	in     al,0x60
c0020c14:	3c 5a                	cmp    al,0x5a
c0020c16:	75 f6                	jne    c0020c0e <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020c18:	eb 04                	jmp    c0020c1e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020c1a:	3c 1c                	cmp    al,0x1c
c0020c1c:	75 b9                	jne    c0020bd7 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020c1e:	e4 60                	in     al,0x60
c0020c20:	3c 5a                	cmp    al,0x5a
c0020c22:	74 fa                	je     c0020c1e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020c24:	eb f4                	jmp    c0020c1a <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020c26:	83 ec 0c             	sub    esp,0xc
c0020c29:	68 a1 75 02 c0       	push   0xc00275a1
c0020c2e:	e8 82 91 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020c33:	83 c4 10             	add    esp,0x10
c0020c36:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020c3d:	74 48                	je     c0020c87 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020c3f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020c45:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020c4b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020c4f:	c1 e0 09             	shl    eax,0x9
c0020c52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020c56:	48                   	dec    eax
c0020c57:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020c5c:	89 c2                	mov    edx,eax
c0020c5e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020c64:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020c69:	09 d0                	or     eax,edx
c0020c6b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020c71:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020c78:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020c7f:	74 33                	je     c0020cb4 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020c81:	eb 18                	jmp    c0020c9b <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020c83:	3c 1c                	cmp    al,0x1c
c0020c85:	74 0c                	je     c0020c93 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020c87:	e4 60                	in     al,0x60
c0020c89:	3c 5a                	cmp    al,0x5a
c0020c8b:	75 f6                	jne    c0020c83 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020c8d:	eb 04                	jmp    c0020c93 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020c8f:	3c 1c                	cmp    al,0x1c
c0020c91:	75 ac                	jne    c0020c3f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020c93:	e4 60                	in     al,0x60
c0020c95:	3c 5a                	cmp    al,0x5a
c0020c97:	74 fa                	je     c0020c93 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020c99:	eb f4                	jmp    c0020c8f <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020c9b:	83 ec 0c             	sub    esp,0xc
c0020c9e:	68 b0 75 02 c0       	push   0xc00275b0
c0020ca3:	e8 0d 91 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020ca8:	83 c4 10             	add    esp,0x10
c0020cab:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020cb2:	74 63                	je     c0020d17 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020cb4:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020cb7:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020cbb:	66 25 00 7f          	and    ax,0x7f00
c0020cbf:	66 0d 27 80          	or     ax,0x8027
c0020cc3:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020cc8:	66 89 06             	mov    WORD PTR [esi],ax
c0020ccb:	19 c0                	sbb    eax,eax
c0020ccd:	83 e0 f0             	and    eax,0xfffffff0
c0020cd0:	83 c0 35             	add    eax,0x35
c0020cd3:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020cd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020cda:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020cde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ce2:	c1 e8 10             	shr    eax,0x10
c0020ce5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020ce8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020cec:	c1 e8 18             	shr    eax,0x18
c0020cef:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020cf6:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020cf9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020cfd:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020d00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d04:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020d07:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020d0b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020d0f:	74 33                	je     c0020d44 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020d11:	eb 18                	jmp    c0020d2b <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020d13:	3c 1c                	cmp    al,0x1c
c0020d15:	74 0c                	je     c0020d23 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020d17:	e4 60                	in     al,0x60
c0020d19:	3c 5a                	cmp    al,0x5a
c0020d1b:	75 f6                	jne    c0020d13 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020d1d:	eb 04                	jmp    c0020d23 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020d1f:	3c 1c                	cmp    al,0x1c
c0020d21:	75 91                	jne    c0020cb4 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020d23:	e4 60                	in     al,0x60
c0020d25:	3c 5a                	cmp    al,0x5a
c0020d27:	74 fa                	je     c0020d23 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020d29:	eb f4                	jmp    c0020d1f <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020d2b:	83 ec 0c             	sub    esp,0xc
c0020d2e:	68 bf 75 02 c0       	push   0xc00275bf
c0020d33:	e8 7d 90 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020d38:	83 c4 10             	add    esp,0x10
c0020d3b:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020d42:	74 11                	je     c0020d55 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020d44:	89 e8                	mov    eax,ebp
c0020d46:	31 f6                	xor    esi,esi
c0020d48:	c1 e0 07             	shl    eax,0x7
c0020d4b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020d4f:	eb 21                	jmp    c0020d72 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020d51:	3c 1c                	cmp    al,0x1c
c0020d53:	74 0c                	je     c0020d61 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020d55:	e4 60                	in     al,0x60
c0020d57:	3c 5a                	cmp    al,0x5a
c0020d59:	75 f6                	jne    c0020d51 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020d5b:	eb 04                	jmp    c0020d61 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020d5d:	3c 1c                	cmp    al,0x1c
c0020d5f:	75 e3                	jne    c0020d44 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020d61:	e4 60                	in     al,0x60
c0020d63:	3c 5a                	cmp    al,0x5a
c0020d65:	74 fa                	je     c0020d61 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020d67:	eb f4                	jmp    c0020d5d <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020d69:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020d6f:	74 0c                	je     c0020d7d <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020d71:	46                   	inc    esi
c0020d72:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020d78:	80 e2 88             	and    dl,0x88
c0020d7b:	75 ec                	jne    c0020d69 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020d7d:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020d84:	74 3d                	je     c0020dc3 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020d86:	83 ec 0c             	sub    esp,0xc
c0020d89:	68 ce 75 02 c0       	push   0xc00275ce
c0020d8e:	e8 22 90 fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020d93:	8b 15 40 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028940
c0020d99:	83 c4 10             	add    esp,0x10
c0020d9c:	f6 c2 80             	test   dl,0x80
c0020d9f:	74 0e                	je     c0020daf <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020da1:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020da7:	75 2f                	jne    c0020dd8 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020da9:	eb 20                	jmp    c0020dcb <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0020dab:	3c 1c                	cmp    al,0x1c
c0020dad:	74 0c                	je     c0020dbb <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020daf:	e4 60                	in     al,0x60
c0020db1:	3c 5a                	cmp    al,0x5a
c0020db3:	75 f6                	jne    c0020dab <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020db5:	eb 04                	jmp    c0020dbb <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020db7:	3c 1c                	cmp    al,0x1c
c0020db9:	75 e6                	jne    c0020da1 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0020dbb:	e4 60                	in     al,0x60
c0020dbd:	3c 5a                	cmp    al,0x5a
c0020dbf:	74 fa                	je     c0020dbb <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020dc1:	eb f4                	jmp    c0020db7 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020dc3:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020dc9:	75 13                	jne    c0020dde <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020dcb:	83 ec 0c             	sub    esp,0xc
c0020dce:	68 de 75 02 c0       	push   0xc00275de
c0020dd3:	e9 d2 00 00 00       	jmp    c0020eaa <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0020dd8:	0f ba e2 0b          	bt     edx,0xb
c0020ddc:	72 25                	jb     c0020e03 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c0020dde:	be 01 00 00 00       	mov    esi,0x1
c0020de3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020de7:	89 e8                	mov    eax,ebp
c0020de9:	d3 e6                	shl    esi,cl
c0020deb:	c1 e0 07             	shl    eax,0x7
c0020dee:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020df2:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020df9:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020dff:	74 4a                	je     c0020e4b <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020e01:	eb 2f                	jmp    c0020e32 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0020e03:	83 ec 0c             	sub    esp,0xc
c0020e06:	68 ec 75 02 c0       	push   0xc00275ec
c0020e0b:	e8 a5 8f fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020e10:	83 c4 10             	add    esp,0x10
c0020e13:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020e1a:	75 c2                	jne    c0020dde <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020e1c:	e4 60                	in     al,0x60
c0020e1e:	3c 5a                	cmp    al,0x5a
c0020e20:	74 04                	je     c0020e26 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020e22:	3c 1c                	cmp    al,0x1c
c0020e24:	75 f6                	jne    c0020e1c <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020e26:	e4 60                	in     al,0x60
c0020e28:	3c 5a                	cmp    al,0x5a
c0020e2a:	74 fa                	je     c0020e26 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020e2c:	3c 1c                	cmp    al,0x1c
c0020e2e:	74 f6                	je     c0020e26 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020e30:	eb ac                	jmp    c0020dde <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020e32:	83 ec 0c             	sub    esp,0xc
c0020e35:	68 fc 75 02 c0       	push   0xc00275fc
c0020e3a:	e8 76 8f fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020e3f:	83 c4 10             	add    esp,0x10
c0020e42:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020e49:	74 0f                	je     c0020e5a <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020e4b:	89 e8                	mov    eax,ebp
c0020e4d:	c1 e0 07             	shl    eax,0x7
c0020e50:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020e54:	eb 24                	jmp    c0020e7a <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020e56:	3c 1c                	cmp    al,0x1c
c0020e58:	74 0c                	je     c0020e66 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020e5a:	e4 60                	in     al,0x60
c0020e5c:	3c 5a                	cmp    al,0x5a
c0020e5e:	75 f6                	jne    c0020e56 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020e60:	eb 04                	jmp    c0020e66 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020e62:	3c 1c                	cmp    al,0x1c
c0020e64:	75 e5                	jne    c0020e4b <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020e66:	e4 60                	in     al,0x60
c0020e68:	3c 5a                	cmp    al,0x5a
c0020e6a:	74 fa                	je     c0020e66 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020e6c:	eb f4                	jmp    c0020e62 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c0020e6e:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020e74:	0f ba e2 1e          	bt     edx,0x1e
c0020e78:	72 28                	jb     c0020ea2 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020e7a:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020e80:	85 d6                	test   esi,edx
c0020e82:	75 ea                	jne    c0020e6e <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020e84:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020e8b:	75 2f                	jne    c0020ebc <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020e8d:	89 e8                	mov    eax,ebp
c0020e8f:	c1 e0 07             	shl    eax,0x7
c0020e92:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020e96:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020e9c:	0f ba e0 1e          	bt     eax,0x1e
c0020ea0:	73 49                	jae    c0020eeb <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020ea2:	83 ec 0c             	sub    esp,0xc
c0020ea5:	68 0c 76 02 c0       	push   0xc002760c
c0020eaa:	e8 16 42 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0020eaf:	83 c4 10             	add    esp,0x10
c0020eb2:	b8 01 00 00 00       	mov    eax,0x1
c0020eb7:	e9 c5 00 00 00       	jmp    c0020f81 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020ebc:	83 ec 0c             	sub    esp,0xc
c0020ebf:	68 1d 76 02 c0       	push   0xc002761d
c0020ec4:	e8 ec 8e fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020ec9:	83 c4 10             	add    esp,0x10
c0020ecc:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020ed3:	75 b8                	jne    c0020e8d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020ed5:	e4 60                	in     al,0x60
c0020ed7:	3c 5a                	cmp    al,0x5a
c0020ed9:	74 04                	je     c0020edf <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020edb:	3c 1c                	cmp    al,0x1c
c0020edd:	75 f6                	jne    c0020ed5 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0020edf:	e4 60                	in     al,0x60
c0020ee1:	3c 5a                	cmp    al,0x5a
c0020ee3:	74 fa                	je     c0020edf <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020ee5:	3c 1c                	cmp    al,0x1c
c0020ee7:	74 f6                	je     c0020edf <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020ee9:	eb a2                	jmp    c0020e8d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020eeb:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020ef2:	74 3a                	je     c0020f2e <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020ef4:	83 ec 0c             	sub    esp,0xc
c0020ef7:	68 2d 76 02 c0       	push   0xc002762d
c0020efc:	e8 b4 8e fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020f01:	83 c4 10             	add    esp,0x10
c0020f04:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020f0b:	74 0d                	je     c0020f1a <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0020f0d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020f12:	75 31                	jne    c0020f45 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020f14:	eb 1f                	jmp    c0020f35 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0020f16:	3c 1c                	cmp    al,0x1c
c0020f18:	74 0c                	je     c0020f26 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020f1a:	e4 60                	in     al,0x60
c0020f1c:	3c 5a                	cmp    al,0x5a
c0020f1e:	75 f6                	jne    c0020f16 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020f20:	eb 04                	jmp    c0020f26 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020f22:	3c 1c                	cmp    al,0x1c
c0020f24:	75 e7                	jne    c0020f0d <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020f26:	e4 60                	in     al,0x60
c0020f28:	3c 5a                	cmp    al,0x5a
c0020f2a:	74 fa                	je     c0020f26 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020f2c:	eb f4                	jmp    c0020f22 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c0020f2e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020f33:	75 19                	jne    c0020f4e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020f35:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020f3b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020f3f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f45:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020f4c:	75 04                	jne    c0020f52 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0020f4e:	31 c0                	xor    eax,eax
c0020f50:	eb 2f                	jmp    c0020f81 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020f52:	83 ec 0c             	sub    esp,0xc
c0020f55:	68 3d 76 02 c0       	push   0xc002763d
c0020f5a:	e8 56 8e fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020f5f:	83 c4 10             	add    esp,0x10
c0020f62:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020f69:	75 e3                	jne    c0020f4e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020f6b:	e4 60                	in     al,0x60
c0020f6d:	3c 1c                	cmp    al,0x1c
c0020f6f:	74 04                	je     c0020f75 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020f71:	3c 5a                	cmp    al,0x5a
c0020f73:	75 f6                	jne    c0020f6b <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020f75:	e4 60                	in     al,0x60
c0020f77:	3c 5a                	cmp    al,0x5a
c0020f79:	74 fa                	je     c0020f75 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020f7b:	3c 1c                	cmp    al,0x1c
c0020f7d:	74 f6                	je     c0020f75 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020f7f:	eb cd                	jmp    c0020f4e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020f81:	83 c4 2c             	add    esp,0x2c
c0020f84:	5b                   	pop    ebx
c0020f85:	5e                   	pop    esi
c0020f86:	5f                   	pop    edi
c0020f87:	5d                   	pop    ebp
c0020f88:	c3                   	ret    
c0020f89:	90                   	nop

c0020f8a <SATA::read(unsigned long long, int, void*)>:
c0020f8a:	55                   	push   ebp
c0020f8b:	57                   	push   edi
c0020f8c:	56                   	push   esi
c0020f8d:	53                   	push   ebx
c0020f8e:	83 ec 0c             	sub    esp,0xc
c0020f91:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020f95:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020f99:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020f9d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020fa1:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020fa8:	74 2d                	je     c0020fd7 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020faa:	83 ec 0c             	sub    esp,0xc
c0020fad:	68 4d 76 02 c0       	push   0xc002764d
c0020fb2:	e8 fe 8d fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0020fb7:	83 c4 10             	add    esp,0x10
c0020fba:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0020fc1:	75 14                	jne    c0020fd7 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020fc3:	e4 60                	in     al,0x60
c0020fc5:	3c 1c                	cmp    al,0x1c
c0020fc7:	74 04                	je     c0020fcd <SATA::read(unsigned long long, int, void*)+0x43>
c0020fc9:	3c 5a                	cmp    al,0x5a
c0020fcb:	75 f6                	jne    c0020fc3 <SATA::read(unsigned long long, int, void*)+0x39>
c0020fcd:	e4 60                	in     al,0x60
c0020fcf:	3c 5a                	cmp    al,0x5a
c0020fd1:	74 fa                	je     c0020fcd <SATA::read(unsigned long long, int, void*)+0x43>
c0020fd3:	3c 1c                	cmp    al,0x1c
c0020fd5:	74 f6                	je     c0020fcd <SATA::read(unsigned long long, int, void*)+0x43>
c0020fd7:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020fda:	b8 04 00 00 00       	mov    eax,0x4
c0020fdf:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020fe5:	0f 87 96 00 00 00    	ja     c0021081 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020feb:	b8 06 00 00 00       	mov    eax,0x6
c0020ff0:	85 ed                	test   ebp,ebp
c0020ff2:	0f 84 89 00 00 00    	je     c0021081 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020ff8:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0020fff:	74 2d                	je     c002102e <SATA::read(unsigned long long, int, void*)+0xa4>
c0021001:	83 ec 0c             	sub    esp,0xc
c0021004:	68 5a 76 02 c0       	push   0xc002765a
c0021009:	e8 a7 8d fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002100e:	83 c4 10             	add    esp,0x10
c0021011:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0021018:	75 14                	jne    c002102e <SATA::read(unsigned long long, int, void*)+0xa4>
c002101a:	e4 60                	in     al,0x60
c002101c:	3c 5a                	cmp    al,0x5a
c002101e:	74 04                	je     c0021024 <SATA::read(unsigned long long, int, void*)+0x9a>
c0021020:	3c 1c                	cmp    al,0x1c
c0021022:	75 f6                	jne    c002101a <SATA::read(unsigned long long, int, void*)+0x90>
c0021024:	e4 60                	in     al,0x60
c0021026:	3c 5a                	cmp    al,0x5a
c0021028:	74 fa                	je     c0021024 <SATA::read(unsigned long long, int, void*)+0x9a>
c002102a:	3c 1c                	cmp    al,0x1c
c002102c:	74 f6                	je     c0021024 <SATA::read(unsigned long long, int, void*)+0x9a>
c002102e:	50                   	push   eax
c002102f:	50                   	push   eax
c0021030:	6a 00                	push   0x0
c0021032:	55                   	push   ebp
c0021033:	53                   	push   ebx
c0021034:	57                   	push   edi
c0021035:	56                   	push   esi
c0021036:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002103a:	e8 53 f9 ff ff       	call   c0020992 <SATA::access(unsigned long long, int, void*, bool)>
c002103f:	83 c4 20             	add    esp,0x20
c0021042:	89 c3                	mov    ebx,eax
c0021044:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c002104b:	74 2d                	je     c002107a <SATA::read(unsigned long long, int, void*)+0xf0>
c002104d:	83 ec 0c             	sub    esp,0xc
c0021050:	68 67 76 02 c0       	push   0xc0027667
c0021055:	e8 5b 8d fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002105a:	83 c4 10             	add    esp,0x10
c002105d:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0021064:	75 14                	jne    c002107a <SATA::read(unsigned long long, int, void*)+0xf0>
c0021066:	e4 60                	in     al,0x60
c0021068:	3c 5a                	cmp    al,0x5a
c002106a:	74 04                	je     c0021070 <SATA::read(unsigned long long, int, void*)+0xe6>
c002106c:	3c 1c                	cmp    al,0x1c
c002106e:	75 f6                	jne    c0021066 <SATA::read(unsigned long long, int, void*)+0xdc>
c0021070:	e4 60                	in     al,0x60
c0021072:	3c 5a                	cmp    al,0x5a
c0021074:	74 fa                	je     c0021070 <SATA::read(unsigned long long, int, void*)+0xe6>
c0021076:	3c 1c                	cmp    al,0x1c
c0021078:	74 f6                	je     c0021070 <SATA::read(unsigned long long, int, void*)+0xe6>
c002107a:	31 c0                	xor    eax,eax
c002107c:	85 db                	test   ebx,ebx
c002107e:	0f 95 c0             	setne  al
c0021081:	83 c4 0c             	add    esp,0xc
c0021084:	5b                   	pop    ebx
c0021085:	5e                   	pop    esi
c0021086:	5f                   	pop    edi
c0021087:	5d                   	pop    ebp
c0021088:	c3                   	ret    
c0021089:	90                   	nop

c002108a <SATA::write(unsigned long long, int, void*)>:
c002108a:	55                   	push   ebp
c002108b:	57                   	push   edi
c002108c:	56                   	push   esi
c002108d:	53                   	push   ebx
c002108e:	83 ec 1c             	sub    esp,0x1c
c0021091:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021095:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021099:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002109d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00210a1:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c00210a8:	74 2d                	je     c00210d7 <SATA::write(unsigned long long, int, void*)+0x4d>
c00210aa:	83 ec 0c             	sub    esp,0xc
c00210ad:	68 74 76 02 c0       	push   0xc0027674
c00210b2:	e8 fe 8c fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c00210b7:	83 c4 10             	add    esp,0x10
c00210ba:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c00210c1:	75 14                	jne    c00210d7 <SATA::write(unsigned long long, int, void*)+0x4d>
c00210c3:	e4 60                	in     al,0x60
c00210c5:	3c 1c                	cmp    al,0x1c
c00210c7:	74 04                	je     c00210cd <SATA::write(unsigned long long, int, void*)+0x43>
c00210c9:	3c 5a                	cmp    al,0x5a
c00210cb:	75 f6                	jne    c00210c3 <SATA::write(unsigned long long, int, void*)+0x39>
c00210cd:	e4 60                	in     al,0x60
c00210cf:	3c 5a                	cmp    al,0x5a
c00210d1:	74 fa                	je     c00210cd <SATA::write(unsigned long long, int, void*)+0x43>
c00210d3:	3c 1c                	cmp    al,0x1c
c00210d5:	74 f6                	je     c00210cd <SATA::write(unsigned long long, int, void*)+0x43>
c00210d7:	8d 55 ff             	lea    edx,[ebp-0x1]
c00210da:	b8 04 00 00 00       	mov    eax,0x4
c00210df:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00210e5:	0f 87 bd 00 00 00    	ja     c00211a8 <SATA::write(unsigned long long, int, void*)+0x11e>
c00210eb:	b8 06 00 00 00       	mov    eax,0x6
c00210f0:	85 db                	test   ebx,ebx
c00210f2:	0f 84 b0 00 00 00    	je     c00211a8 <SATA::write(unsigned long long, int, void*)+0x11e>
c00210f8:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c00210ff:	74 2d                	je     c002112e <SATA::write(unsigned long long, int, void*)+0xa4>
c0021101:	83 ec 0c             	sub    esp,0xc
c0021104:	68 82 76 02 c0       	push   0xc0027682
c0021109:	e8 a7 8c fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c002110e:	83 c4 10             	add    esp,0x10
c0021111:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0021118:	75 14                	jne    c002112e <SATA::write(unsigned long long, int, void*)+0xa4>
c002111a:	e4 60                	in     al,0x60
c002111c:	3c 1c                	cmp    al,0x1c
c002111e:	74 04                	je     c0021124 <SATA::write(unsigned long long, int, void*)+0x9a>
c0021120:	3c 5a                	cmp    al,0x5a
c0021122:	75 f6                	jne    c002111a <SATA::write(unsigned long long, int, void*)+0x90>
c0021124:	e4 60                	in     al,0x60
c0021126:	3c 5a                	cmp    al,0x5a
c0021128:	74 fa                	je     c0021124 <SATA::write(unsigned long long, int, void*)+0x9a>
c002112a:	3c 1c                	cmp    al,0x1c
c002112c:	74 f6                	je     c0021124 <SATA::write(unsigned long long, int, void*)+0x9a>
c002112e:	c1 e5 09             	shl    ebp,0x9
c0021131:	01 dd                	add    ebp,ebx
c0021133:	89 f0                	mov    eax,esi
c0021135:	89 fa                	mov    edx,edi
c0021137:	83 c0 01             	add    eax,0x1
c002113a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002113e:	83 d2 00             	adc    edx,0x0
c0021141:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021145:	50                   	push   eax
c0021146:	50                   	push   eax
c0021147:	6a 01                	push   0x1
c0021149:	53                   	push   ebx
c002114a:	81 c3 00 02 00 00    	add    ebx,0x200
c0021150:	6a 01                	push   0x1
c0021152:	57                   	push   edi
c0021153:	56                   	push   esi
c0021154:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021158:	e8 35 f8 ff ff       	call   c0020992 <SATA::access(unsigned long long, int, void*, bool)>
c002115d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021161:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0021165:	83 c4 20             	add    esp,0x20
c0021168:	39 dd                	cmp    ebp,ebx
c002116a:	75 c7                	jne    c0021133 <SATA::write(unsigned long long, int, void*)+0xa9>
c002116c:	f6 05 41 89 02 c0 08 	test   BYTE PTR ds:0xc0028941,0x8
c0021173:	75 04                	jne    c0021179 <SATA::write(unsigned long long, int, void*)+0xef>
c0021175:	31 c0                	xor    eax,eax
c0021177:	eb 2f                	jmp    c00211a8 <SATA::write(unsigned long long, int, void*)+0x11e>
c0021179:	83 ec 0c             	sub    esp,0xc
c002117c:	68 90 76 02 c0       	push   0xc0027690
c0021181:	e8 2f 8c fe ff       	call   c0009db5 <Krnl::setBootMessage(char const*)>
c0021186:	83 c4 10             	add    esp,0x10
c0021189:	f6 05 40 89 02 c0 80 	test   BYTE PTR ds:0xc0028940,0x80
c0021190:	75 e3                	jne    c0021175 <SATA::write(unsigned long long, int, void*)+0xeb>
c0021192:	e4 60                	in     al,0x60
c0021194:	3c 5a                	cmp    al,0x5a
c0021196:	74 04                	je     c002119c <SATA::write(unsigned long long, int, void*)+0x112>
c0021198:	3c 1c                	cmp    al,0x1c
c002119a:	75 f6                	jne    c0021192 <SATA::write(unsigned long long, int, void*)+0x108>
c002119c:	e4 60                	in     al,0x60
c002119e:	3c 5a                	cmp    al,0x5a
c00211a0:	74 fa                	je     c002119c <SATA::write(unsigned long long, int, void*)+0x112>
c00211a2:	3c 1c                	cmp    al,0x1c
c00211a4:	74 f6                	je     c002119c <SATA::write(unsigned long long, int, void*)+0x112>
c00211a6:	eb cd                	jmp    c0021175 <SATA::write(unsigned long long, int, void*)+0xeb>
c00211a8:	83 c4 1c             	add    esp,0x1c
c00211ab:	5b                   	pop    ebx
c00211ac:	5e                   	pop    esi
c00211ad:	5f                   	pop    edi
c00211ae:	5d                   	pop    ebp
c00211af:	c3                   	ret    

c00211b0 <SATAPI::write(unsigned long long, int, void*)>:
c00211b0:	b8 03 00 00 00       	mov    eax,0x3
c00211b5:	c3                   	ret    

c00211b6 <SATAPI::close(int, int, void*)>:
c00211b6:	83 ec 0c             	sub    esp,0xc
c00211b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211bd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00211c3:	85 c0                	test   eax,eax
c00211c5:	74 0c                	je     c00211d3 <SATAPI::close(int, int, void*)+0x1d>
c00211c7:	83 ec 0c             	sub    esp,0xc
c00211ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00211cc:	50                   	push   eax
c00211cd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00211d0:	83 c4 10             	add    esp,0x10
c00211d3:	31 c0                	xor    eax,eax
c00211d5:	83 c4 0c             	add    esp,0xc
c00211d8:	c3                   	ret    
c00211d9:	90                   	nop

c00211da <SATAPI::SATAPI()>:
c00211da:	83 ec 0c             	sub    esp,0xc
c00211dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211e1:	83 ec 04             	sub    esp,0x4
c00211e4:	68 00 08 00 00       	push   0x800
c00211e9:	68 d8 76 02 c0       	push   0xc00276d8
c00211ee:	50                   	push   eax
c00211ef:	e8 fe d7 fe ff       	call   c000e9f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00211f4:	83 c4 10             	add    esp,0x10
c00211f7:	ba 14 78 02 c0       	mov    edx,0xc0027814
c00211fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021200:	89 10                	mov    DWORD PTR [eax],edx
c0021202:	90                   	nop
c0021203:	83 c4 0c             	add    esp,0xc
c0021206:	c3                   	ret    
c0021207:	90                   	nop

c0021208 <SATAPI::diskRemoved()>:
c0021208:	53                   	push   ebx
c0021209:	83 ec 14             	sub    esp,0x14
c002120c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021210:	68 e4 76 02 c0       	push   0xc00276e4
c0021215:	e8 2d be fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002121a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021221:	c7 04 24 38 74 02 c0 	mov    DWORD PTR [esp],0xc0027438
c0021228:	e8 1a be fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002122d:	58                   	pop    eax
c002122e:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0021234:	e8 b3 f6 fe ff       	call   c00108ec <LogicalDisk::unmount()>
c0021239:	c7 04 24 47 74 02 c0 	mov    DWORD PTR [esp],0xc0027447
c0021240:	e8 02 be fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021245:	5a                   	pop    edx
c0021246:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002124c:	e8 a3 00 ff ff       	call   c00112f4 <VCache::writeWriteBuffer()>
c0021251:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0021257:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002125b:	83 c4 18             	add    esp,0x18
c002125e:	5b                   	pop    ebx
c002125f:	e9 80 00 ff ff       	jmp    c00112e4 <VCache::invalidateReadBuffer()>

c0021264 <SATAPI::diskInserted()>:
c0021264:	83 ec 18             	sub    esp,0x18
c0021267:	68 fb 76 02 c0       	push   0xc00276fb
c002126c:	e8 d6 bd fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021275:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002127c:	83 c4 1c             	add    esp,0x1c
c002127f:	c3                   	ret    

c0021280 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0021280:	55                   	push   ebp
c0021281:	57                   	push   edi
c0021282:	56                   	push   esi
c0021283:	53                   	push   ebx
c0021284:	83 ec 38             	sub    esp,0x38
c0021287:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c002128b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c002128f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0021293:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021297:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002129b:	68 13 77 02 c0       	push   0xc0027713
c00212a0:	e8 a2 bd fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00212a5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00212ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00212b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00212b5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00212bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00212bf:	c1 e0 07             	shl    eax,0x7
c00212c2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00212c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00212ca:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00212d4:	5a                   	pop    edx
c00212d5:	59                   	pop    ecx
c00212d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212da:	8d 58 02             	lea    ebx,[eax+0x2]
c00212dd:	c1 e3 07             	shl    ebx,0x7
c00212e0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00212e4:	53                   	push   ebx
c00212e5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00212eb:	e8 c2 e3 ff ff       	call   c001f6b2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00212f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00212f4:	83 c4 10             	add    esp,0x10
c00212f7:	b8 01 00 00 00       	mov    eax,0x1
c00212fc:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0021301:	0f 84 04 02 00 00    	je     c002150b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0021307:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002130d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002130f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0021315:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002131b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002131f:	c1 e1 05             	shl    ecx,0x5
c0021322:	01 c8                	add    eax,ecx
c0021324:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021326:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002132c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0021332:	89 08                	mov    DWORD PTR [eax],ecx
c0021334:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002133a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0021340:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0021346:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0021349:	8d 7b 40             	lea    edi,[ebx+0x40]
c002134c:	50                   	push   eax
c002134d:	68 90 00 00 00       	push   0x90
c0021352:	6a 00                	push   0x0
c0021354:	53                   	push   ebx
c0021355:	e8 2a f3 fd ff       	call   c0000684 <memset>
c002135a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002135e:	b9 0c 00 00 00       	mov    ecx,0xc
c0021363:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021365:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002136b:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002136f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0021375:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0021379:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002137d:	48                   	dec    eax
c002137e:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021383:	89 c1                	mov    ecx,eax
c0021385:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002138b:	25 00 00 c0 ff       	and    eax,0xffc00000
c0021390:	09 c8                	or     eax,ecx
c0021392:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0021398:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002139b:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00213a2:	66 25 00 7f          	and    ax,0x7f00
c00213a6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00213aa:	66 0d 27 80          	or     ax,0x8027
c00213ae:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00213b2:	66 89 03             	mov    WORD PTR [ebx],ax
c00213b5:	89 d0                	mov    eax,edx
c00213b7:	c1 ea 18             	shr    edx,0x18
c00213ba:	c1 e8 10             	shr    eax,0x10
c00213bd:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00213c0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00213c3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00213c7:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00213ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00213ce:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00213d1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00213d5:	83 c4 10             	add    esp,0x10
c00213d8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00213dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213e0:	31 c0                	xor    eax,eax
c00213e2:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00213e8:	80 e1 88             	and    cl,0x88
c00213eb:	74 0a                	je     c00213f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c00213ed:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00213f2:	74 0a                	je     c00213fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c00213f4:	40                   	inc    eax
c00213f5:	eb eb                	jmp    c00213e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c00213f7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00213fc:	75 0f                	jne    c002140d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18d>
c00213fe:	83 ec 0c             	sub    esp,0xc
c0021401:	68 de 75 02 c0       	push   0xc00275de
c0021406:	e8 ba 3c ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c002140b:	eb 48                	jmp    c0021455 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c002140d:	be 01 00 00 00       	mov    esi,0x1
c0021412:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021416:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002141a:	d3 e6                	shl    esi,cl
c002141c:	c1 e7 07             	shl    edi,0x7
c002141f:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0021425:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c002142a:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002142e:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0021434:	85 c6                	test   esi,eax
c0021436:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002143c:	0f 84 96 00 00 00    	je     c00214d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x258>
c0021442:	0f ba e0 1e          	bt     eax,0x1e
c0021446:	73 1a                	jae    c0021462 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e2>
c0021448:	83 ec 0c             	sub    esp,0xc
c002144b:	68 2d 77 02 c0       	push   0xc002772d
c0021450:	e8 f2 bb fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021455:	83 c4 10             	add    esp,0x10
c0021458:	b8 01 00 00 00       	mov    eax,0x1
c002145d:	e9 a9 00 00 00       	jmp    c002150b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0021462:	83 fb 0d             	cmp    ebx,0xd
c0021465:	77 12                	ja     c0021479 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0021467:	83 ec 0c             	sub    esp,0xc
c002146a:	68 c8 00 00 00       	push   0xc8
c002146f:	e8 54 7b ff ff       	call   c0018fc8 <milliTenthSleep(unsigned int)>
c0021474:	83 c4 10             	add    esp,0x10
c0021477:	eb 2a                	jmp    c00214a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0021479:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c002147f:	83 f8 0d             	cmp    eax,0xd
c0021482:	77 0a                	ja     c002148e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20e>
c0021484:	83 ec 0c             	sub    esp,0xc
c0021487:	68 58 02 00 00       	push   0x258
c002148c:	eb 28                	jmp    c00214b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c002148e:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0021494:	83 f8 0d             	cmp    eax,0xd
c0021497:	77 0a                	ja     c00214a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0021499:	83 ec 0c             	sub    esp,0xc
c002149c:	68 dc 05 00 00       	push   0x5dc
c00214a1:	eb 13                	jmp    c00214b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c00214a3:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c00214a9:	83 f8 0d             	cmp    eax,0xd
c00214ac:	77 10                	ja     c00214be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23e>
c00214ae:	83 ec 0c             	sub    esp,0xc
c00214b1:	68 c4 09 00 00       	push   0x9c4
c00214b6:	e8 0d 7b ff ff       	call   c0018fc8 <milliTenthSleep(unsigned int)>
c00214bb:	83 c4 10             	add    esp,0x10
c00214be:	43                   	inc    ebx
c00214bf:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c00214c5:	0f 85 63 ff ff ff    	jne    c002142e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ae>
c00214cb:	83 ec 0c             	sub    esp,0xc
c00214ce:	68 40 77 02 c0       	push   0xc0027740
c00214d3:	e9 78 ff ff ff       	jmp    c0021450 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c00214d8:	0f ba e0 1e          	bt     eax,0x1e
c00214dc:	73 0d                	jae    c00214eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26b>
c00214de:	83 ec 0c             	sub    esp,0xc
c00214e1:	68 54 77 02 c0       	push   0xc0027754
c00214e6:	e9 65 ff ff ff       	jmp    c0021450 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c00214eb:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00214f0:	74 17                	je     c0021509 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c00214f2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00214f7:	74 10                	je     c0021509 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c00214f9:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00214ff:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021503:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021507:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021509:	31 c0                	xor    eax,eax
c002150b:	83 c4 2c             	add    esp,0x2c
c002150e:	5b                   	pop    ebx
c002150f:	5e                   	pop    esi
c0021510:	5f                   	pop    edi
c0021511:	5d                   	pop    ebp
c0021512:	c3                   	ret    
c0021513:	90                   	nop

c0021514 <SATAPI::eject()>:
c0021514:	57                   	push   edi
c0021515:	b9 03 00 00 00       	mov    ecx,0x3
c002151a:	53                   	push   ebx
c002151b:	83 ec 14             	sub    esp,0x14
c002151e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021522:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021526:	fc                   	cld    
c0021527:	31 c0                	xor    eax,eax
c0021529:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002152b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021530:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021535:	50                   	push   eax
c0021536:	6a 00                	push   0x0
c0021538:	6a 00                	push   0x0
c002153a:	6a 00                	push   0x0
c002153c:	6a 00                	push   0x0
c002153e:	6a 02                	push   0x2
c0021540:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021544:	50                   	push   eax
c0021545:	53                   	push   ebx
c0021546:	e8 35 fd ff ff       	call   c0021280 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002154b:	83 c4 20             	add    esp,0x20
c002154e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021555:	74 0c                	je     c0021563 <SATAPI::eject()+0x4f>
c0021557:	83 ec 0c             	sub    esp,0xc
c002155a:	53                   	push   ebx
c002155b:	e8 a8 fc ff ff       	call   c0021208 <SATAPI::diskRemoved()>
c0021560:	83 c4 10             	add    esp,0x10
c0021563:	83 c4 14             	add    esp,0x14
c0021566:	31 c0                	xor    eax,eax
c0021568:	5b                   	pop    ebx
c0021569:	5f                   	pop    edi
c002156a:	c3                   	ret    
c002156b:	90                   	nop

c002156c <SATAPI::detectMedia()>:
c002156c:	56                   	push   esi
c002156d:	53                   	push   ebx
c002156e:	83 ec 30             	sub    esp,0x30
c0021571:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021575:	68 69 77 02 c0       	push   0xc0027769
c002157a:	e8 c8 ba fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002157f:	83 c4 0c             	add    esp,0xc
c0021582:	6a 0c                	push   0xc
c0021584:	6a 00                	push   0x0
c0021586:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002158a:	56                   	push   esi
c002158b:	e8 f4 f0 fd ff       	call   c0000684 <memset>
c0021590:	83 c4 0c             	add    esp,0xc
c0021593:	6a 00                	push   0x0
c0021595:	6a 00                	push   0x0
c0021597:	6a 00                	push   0x0
c0021599:	6a 00                	push   0x0
c002159b:	6a 00                	push   0x0
c002159d:	56                   	push   esi
c002159e:	53                   	push   ebx
c002159f:	e8 dc fc ff ff       	call   c0021280 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00215a4:	83 c4 20             	add    esp,0x20
c00215a7:	48                   	dec    eax
c00215a8:	75 27                	jne    c00215d1 <SATAPI::detectMedia()+0x65>
c00215aa:	83 ec 0c             	sub    esp,0xc
c00215ad:	68 7d 77 02 c0       	push   0xc002777d
c00215b2:	e8 90 ba fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00215b7:	83 c4 10             	add    esp,0x10
c00215ba:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00215c1:	74 0e                	je     c00215d1 <SATAPI::detectMedia()+0x65>
c00215c3:	83 ec 0c             	sub    esp,0xc
c00215c6:	53                   	push   ebx
c00215c7:	e8 3c fc ff ff       	call   c0021208 <SATAPI::diskRemoved()>
c00215cc:	e9 d1 00 00 00       	jmp    c00216a2 <SATAPI::detectMedia()+0x136>
c00215d1:	50                   	push   eax
c00215d2:	6a 0c                	push   0xc
c00215d4:	6a 00                	push   0x0
c00215d6:	56                   	push   esi
c00215d7:	e8 a8 f0 fd ff       	call   c0000684 <memset>
c00215dc:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00215e1:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00215e6:	83 c4 0c             	add    esp,0xc
c00215e9:	6a 01                	push   0x1
c00215eb:	8d 44 24 16          	lea    eax,[esp+0x16]
c00215ef:	50                   	push   eax
c00215f0:	6a 00                	push   0x0
c00215f2:	6a 00                	push   0x0
c00215f4:	6a 12                	push   0x12
c00215f6:	56                   	push   esi
c00215f7:	53                   	push   ebx
c00215f8:	e8 83 fc ff ff       	call   c0021280 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00215fd:	83 c4 20             	add    esp,0x20
c0021600:	48                   	dec    eax
c0021601:	75 19                	jne    c002161c <SATAPI::detectMedia()+0xb0>
c0021603:	83 ec 0c             	sub    esp,0xc
c0021606:	68 87 77 02 c0       	push   0xc0027787
c002160b:	e8 37 ba fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021610:	83 c4 10             	add    esp,0x10
c0021613:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002161a:	75 a7                	jne    c00215c3 <SATAPI::detectMedia()+0x57>
c002161c:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0021620:	83 e0 7f             	and    eax,0x7f
c0021623:	3c 70                	cmp    al,0x70
c0021625:	74 25                	je     c002164c <SATAPI::detectMedia()+0xe0>
c0021627:	83 ec 0c             	sub    esp,0xc
c002162a:	68 91 77 02 c0       	push   0xc0027791
c002162f:	e8 13 ba fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021634:	83 c4 10             	add    esp,0x10
c0021637:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002163e:	75 0c                	jne    c002164c <SATAPI::detectMedia()+0xe0>
c0021640:	83 ec 0c             	sub    esp,0xc
c0021643:	53                   	push   ebx
c0021644:	e8 1b fc ff ff       	call   c0021264 <SATAPI::diskInserted()>
c0021649:	83 c4 10             	add    esp,0x10
c002164c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021650:	83 e0 0f             	and    eax,0xf
c0021653:	3c 02                	cmp    al,0x2
c0021655:	75 25                	jne    c002167c <SATAPI::detectMedia()+0x110>
c0021657:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002165c:	75 47                	jne    c00216a5 <SATAPI::detectMedia()+0x139>
c002165e:	83 ec 0c             	sub    esp,0xc
c0021661:	68 9a 77 02 c0       	push   0xc002779a
c0021666:	e8 dc b9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002166b:	83 c4 10             	add    esp,0x10
c002166e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021675:	74 2e                	je     c00216a5 <SATAPI::detectMedia()+0x139>
c0021677:	e9 47 ff ff ff       	jmp    c00215c3 <SATAPI::detectMedia()+0x57>
c002167c:	84 c0                	test   al,al
c002167e:	75 25                	jne    c00216a5 <SATAPI::detectMedia()+0x139>
c0021680:	83 ec 0c             	sub    esp,0xc
c0021683:	68 a3 77 02 c0       	push   0xc00277a3
c0021688:	e8 ba b9 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002168d:	83 c4 10             	add    esp,0x10
c0021690:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021697:	75 0c                	jne    c00216a5 <SATAPI::detectMedia()+0x139>
c0021699:	83 ec 0c             	sub    esp,0xc
c002169c:	53                   	push   ebx
c002169d:	e8 c2 fb ff ff       	call   c0021264 <SATAPI::diskInserted()>
c00216a2:	83 c4 10             	add    esp,0x10
c00216a5:	83 c4 24             	add    esp,0x24
c00216a8:	5b                   	pop    ebx
c00216a9:	5e                   	pop    esi
c00216aa:	c3                   	ret    
c00216ab:	90                   	nop

c00216ac <SATAPI::open(int, int, void*)>:
c00216ac:	56                   	push   esi
c00216ad:	53                   	push   ebx
c00216ae:	51                   	push   ecx
c00216af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00216b7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00216c1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00216c7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00216d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00216d5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00216df:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00216e5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00216ec:	e8 21 8d fe ff       	call   c000a412 <Phys::allocatePage()>
c00216f1:	89 c6                	mov    esi,eax
c00216f3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00216f9:	81 c6 00 10 00 00    	add    esi,0x1000
c00216ff:	e8 0e 8d fe ff       	call   c000a412 <Phys::allocatePage()>
c0021704:	39 c6                	cmp    esi,eax
c0021706:	74 10                	je     c0021718 <SATAPI::open(int, int, void*)+0x6c>
c0021708:	83 ec 0c             	sub    esp,0xc
c002170b:	68 ad 77 02 c0       	push   0xc00277ad
c0021710:	e8 b0 39 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0021715:	83 c4 10             	add    esp,0x10
c0021718:	83 ec 0c             	sub    esp,0xc
c002171b:	6a 02                	push   0x2
c002171d:	e8 ff a5 fe ff       	call   c000bd21 <Virt::allocateKernelVirtualPages(int)>
c0021722:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021728:	6a 03                	push   0x3
c002172a:	50                   	push   eax
c002172b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021731:	ff 35 50 8a 02 c0    	push   DWORD PTR ds:0xc0028a50
c0021737:	e8 8c ac fe ff       	call   c000c3c8 <VAS::mapPage(unsigned long, unsigned long, int)>
c002173c:	83 c4 14             	add    esp,0x14
c002173f:	68 74 01 00 00       	push   0x174
c0021744:	e8 12 86 fe ff       	call   c0009d5b <malloc>
c0021749:	83 c4 0c             	add    esp,0xc
c002174c:	89 c6                	mov    esi,eax
c002174e:	6a 00                	push   0x0
c0021750:	68 ff ff ff 7f       	push   0x7fffffff
c0021755:	6a 00                	push   0x0
c0021757:	6a 00                	push   0x0
c0021759:	53                   	push   ebx
c002175a:	68 c3 77 02 c0       	push   0xc00277c3
c002175f:	50                   	push   eax
c0021760:	e8 93 ef fe ff       	call   c00106f8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021765:	83 c4 14             	add    esp,0x14
c0021768:	56                   	push   esi
c0021769:	e8 40 f0 fe ff       	call   c00107ae <LogicalDisk::assignDriveLetter()>
c002176e:	5a                   	pop    edx
c002176f:	0f be c0             	movsx  eax,al
c0021772:	59                   	pop    ecx
c0021773:	50                   	push   eax
c0021774:	68 55 74 02 c0       	push   0xc0027455
c0021779:	e8 c9 b8 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c002177e:	58                   	pop    eax
c002177f:	5a                   	pop    edx
c0021780:	56                   	push   esi
c0021781:	53                   	push   ebx
c0021782:	e8 33 ce fe ff       	call   c000e5ba <Device::addChild(Device*)>
c0021787:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002178d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021790:	e8 c5 d2 fe ff       	call   c000ea5a <PhysicalDisk::startCache()>
c0021795:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002179c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002179f:	e8 c8 fd ff ff       	call   c002156c <SATAPI::detectMedia()>
c00217a4:	83 c4 14             	add    esp,0x14
c00217a7:	31 c0                	xor    eax,eax
c00217a9:	5b                   	pop    ebx
c00217aa:	5e                   	pop    esi
c00217ab:	c3                   	ret    

c00217ac <SATAPI::read(unsigned long long, int, void*)>:
c00217ac:	55                   	push   ebp
c00217ad:	57                   	push   edi
c00217ae:	56                   	push   esi
c00217af:	53                   	push   ebx
c00217b0:	83 ec 48             	sub    esp,0x48
c00217b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00217b7:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00217bb:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00217bf:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00217c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00217c7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00217cb:	68 d1 77 02 c0       	push   0xc00277d1
c00217d0:	e8 72 b8 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00217d5:	83 c4 10             	add    esp,0x10
c00217d8:	83 fb 04             	cmp    ebx,0x4
c00217db:	7e 10                	jle    c00217ed <SATAPI::read(unsigned long long, int, void*)+0x41>
c00217dd:	83 ec 0c             	sub    esp,0xc
c00217e0:	68 e2 77 02 c0       	push   0xc00277e2
c00217e5:	e8 db 38 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00217ea:	83 c4 10             	add    esp,0x10
c00217ed:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00217f1:	31 ed                	xor    ebp,ebp
c00217f3:	b9 03 00 00 00       	mov    ecx,0x3
c00217f8:	fc                   	cld    
c00217f9:	89 e8                	mov    eax,ebp
c00217fb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00217fd:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021802:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0021807:	50                   	push   eax
c0021808:	6a 00                	push   0x0
c002180a:	6a 00                	push   0x0
c002180c:	6a 00                	push   0x0
c002180e:	6a 00                	push   0x0
c0021810:	6a 02                	push   0x2
c0021812:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021816:	50                   	push   eax
c0021817:	56                   	push   esi
c0021818:	e8 63 fa ff ff       	call   c0021280 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002181d:	8d 7c 24 44          	lea    edi,[esp+0x44]
c0021821:	89 e8                	mov    eax,ebp
c0021823:	b9 03 00 00 00       	mov    ecx,0x3
c0021828:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002182a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002182e:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021832:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021837:	86 e0                	xchg   al,ah
c0021839:	c1 c0 10             	rol    eax,0x10
c002183c:	86 e0                	xchg   al,ah
c002183e:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0021842:	83 c4 1c             	add    esp,0x1c
c0021845:	53                   	push   ebx
c0021846:	c1 e3 0b             	shl    ebx,0xb
c0021849:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002184d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021851:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021855:	53                   	push   ebx
c0021856:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002185a:	50                   	push   eax
c002185b:	56                   	push   esi
c002185c:	e8 1f fa ff ff       	call   c0021280 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021861:	83 c4 20             	add    esp,0x20
c0021864:	85 c0                	test   eax,eax
c0021866:	74 14                	je     c002187c <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0021868:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002186c:	83 ec 0c             	sub    esp,0xc
c002186f:	56                   	push   esi
c0021870:	e8 f7 fc ff ff       	call   c002156c <SATAPI::detectMedia()>
c0021875:	83 c4 10             	add    esp,0x10
c0021878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002187c:	83 c4 3c             	add    esp,0x3c
c002187f:	5b                   	pop    ebx
c0021880:	5e                   	pop    esi
c0021881:	5f                   	pop    edi
c0021882:	5d                   	pop    ebp
c0021883:	c3                   	ret    

c0021884 <AVX::open(int, int, void*)>:
c0021884:	83 ec 0c             	sub    esp,0xc
c0021887:	e8 2c 11 00 00       	call   c00229b8 <avxInit>
c002188c:	b8 00 00 00 00       	mov    eax,0x0
c0021891:	83 c4 0c             	add    esp,0xc
c0021894:	c3                   	ret    
c0021895:	90                   	nop
c0021896:	66 90                	xchg   ax,ax

c0021898 <AVX::close(int, int, void*)>:
c0021898:	83 ec 0c             	sub    esp,0xc
c002189b:	e8 19 11 00 00       	call   c00229b9 <avxClose>
c00218a0:	b8 00 00 00 00       	mov    eax,0x0
c00218a5:	83 c4 0c             	add    esp,0xc
c00218a8:	c3                   	ret    
c00218a9:	90                   	nop
c00218aa:	66 90                	xchg   ax,ax

c00218ac <AVX::available()>:
c00218ac:	83 ec 0c             	sub    esp,0xc
c00218af:	e8 fc 10 00 00       	call   c00229b0 <avxDetect>
c00218b4:	85 c0                	test   eax,eax
c00218b6:	0f 95 c0             	setne  al
c00218b9:	83 c4 0c             	add    esp,0xc
c00218bc:	c3                   	ret    
c00218bd:	90                   	nop
c00218be:	66 90                	xchg   ax,ax

c00218c0 <AVX::save(void*)>:
c00218c0:	83 ec 0c             	sub    esp,0xc
c00218c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00218c7:	83 ec 0c             	sub    esp,0xc
c00218ca:	50                   	push   eax
c00218cb:	e8 e6 10 00 00       	call   c00229b6 <avxSave>
c00218d0:	83 c4 10             	add    esp,0x10
c00218d3:	90                   	nop
c00218d4:	83 c4 0c             	add    esp,0xc
c00218d7:	c3                   	ret    

c00218d8 <AVX::load(void*)>:
c00218d8:	83 ec 0c             	sub    esp,0xc
c00218db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00218df:	83 ec 0c             	sub    esp,0xc
c00218e2:	50                   	push   eax
c00218e3:	e8 cf 10 00 00       	call   c00229b7 <avxLoad>
c00218e8:	83 c4 10             	add    esp,0x10
c00218eb:	90                   	nop
c00218ec:	83 c4 0c             	add    esp,0xc
c00218ef:	c3                   	ret    

c00218f0 <AVX::AVX()>:
c00218f0:	83 ec 0c             	sub    esp,0xc
c00218f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f7:	83 ec 08             	sub    esp,0x8
c00218fa:	68 44 78 02 c0       	push   0xc0027844
c00218ff:	50                   	push   eax
c0021900:	e8 cb d1 fe ff       	call   c000ead0 <FPU::FPU(char const*)>
c0021905:	83 c4 10             	add    esp,0x10
c0021908:	ba 54 78 02 c0       	mov    edx,0xc0027854
c002190d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021911:	89 10                	mov    DWORD PTR [eax],edx
c0021913:	90                   	nop
c0021914:	83 c4 0c             	add    esp,0xc
c0021917:	c3                   	ret    

c0021918 <MMX::available()>:
c0021918:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c002191d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021923:	83 e0 20             	and    eax,0x20
c0021926:	84 c0                	test   al,al
c0021928:	0f 95 c0             	setne  al
c002192b:	c3                   	ret    

c002192c <MMX::open(int, int, void*)>:
c002192c:	83 ec 0c             	sub    esp,0xc
c002192f:	e8 0b 11 00 00       	call   c0022a3f <x87Init>
c0021934:	b8 00 00 00 00       	mov    eax,0x0
c0021939:	83 c4 0c             	add    esp,0xc
c002193c:	c3                   	ret    
c002193d:	90                   	nop
c002193e:	66 90                	xchg   ax,ax

c0021940 <MMX::close(int, int, void*)>:
c0021940:	83 ec 0c             	sub    esp,0xc
c0021943:	e8 10 11 00 00       	call   c0022a58 <x87Close>
c0021948:	b8 00 00 00 00       	mov    eax,0x0
c002194d:	83 c4 0c             	add    esp,0xc
c0021950:	c3                   	ret    
c0021951:	90                   	nop
c0021952:	66 90                	xchg   ax,ax

c0021954 <MMX::save(void*)>:
c0021954:	83 ec 0c             	sub    esp,0xc
c0021957:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002195b:	83 ec 0c             	sub    esp,0xc
c002195e:	50                   	push   eax
c002195f:	e8 cd 10 00 00       	call   c0022a31 <x87Save>
c0021964:	83 c4 10             	add    esp,0x10
c0021967:	90                   	nop
c0021968:	83 c4 0c             	add    esp,0xc
c002196b:	c3                   	ret    

c002196c <MMX::load(void*)>:
c002196c:	83 ec 0c             	sub    esp,0xc
c002196f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021973:	83 ec 0c             	sub    esp,0xc
c0021976:	50                   	push   eax
c0021977:	e8 bc 10 00 00       	call   c0022a38 <x87Load>
c002197c:	83 c4 10             	add    esp,0x10
c002197f:	90                   	nop
c0021980:	83 c4 0c             	add    esp,0xc
c0021983:	c3                   	ret    

c0021984 <MMX::MMX()>:
c0021984:	83 ec 0c             	sub    esp,0xc
c0021987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002198b:	83 ec 08             	sub    esp,0x8
c002198e:	68 84 78 02 c0       	push   0xc0027884
c0021993:	50                   	push   eax
c0021994:	e8 37 d1 fe ff       	call   c000ead0 <FPU::FPU(char const*)>
c0021999:	83 c4 10             	add    esp,0x10
c002199c:	ba 94 78 02 c0       	mov    edx,0xc0027894
c00219a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a5:	89 10                	mov    DWORD PTR [eax],edx
c00219a7:	90                   	nop
c00219a8:	83 c4 0c             	add    esp,0xc
c00219ab:	c3                   	ret    

c00219ac <SSE::open(int, int, void*)>:
c00219ac:	83 ec 0c             	sub    esp,0xc
c00219af:	e8 40 10 00 00       	call   c00229f4 <sseInit>
c00219b4:	b8 00 00 00 00       	mov    eax,0x0
c00219b9:	83 c4 0c             	add    esp,0xc
c00219bc:	c3                   	ret    
c00219bd:	90                   	nop
c00219be:	66 90                	xchg   ax,ax

c00219c0 <SSE::close(int, int, void*)>:
c00219c0:	83 ec 0c             	sub    esp,0xc
c00219c3:	e8 3c 10 00 00       	call   c0022a04 <sseClose>
c00219c8:	b8 00 00 00 00       	mov    eax,0x0
c00219cd:	83 c4 0c             	add    esp,0xc
c00219d0:	c3                   	ret    
c00219d1:	90                   	nop
c00219d2:	66 90                	xchg   ax,ax

c00219d4 <SSE::available()>:
c00219d4:	83 ec 1c             	sub    esp,0x1c
c00219d7:	e8 f4 0f 00 00       	call   c00229d0 <absolutelyNoChanceInHell>
c00219dc:	85 c0                	test   eax,eax
c00219de:	0f 95 c0             	setne  al
c00219e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00219e5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00219e9:	83 c4 1c             	add    esp,0x1c
c00219ec:	c3                   	ret    
c00219ed:	90                   	nop
c00219ee:	66 90                	xchg   ax,ax

c00219f0 <SSE::save(void*)>:
c00219f0:	83 ec 0c             	sub    esp,0xc
c00219f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00219f7:	83 ec 0c             	sub    esp,0xc
c00219fa:	50                   	push   eax
c00219fb:	e8 e8 0f 00 00       	call   c00229e8 <sseSave>
c0021a00:	83 c4 10             	add    esp,0x10
c0021a03:	90                   	nop
c0021a04:	83 c4 0c             	add    esp,0xc
c0021a07:	c3                   	ret    

c0021a08 <SSE::load(void*)>:
c0021a08:	83 ec 0c             	sub    esp,0xc
c0021a0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a0f:	83 ec 0c             	sub    esp,0xc
c0021a12:	50                   	push   eax
c0021a13:	e8 d6 0f 00 00       	call   c00229ee <sseLoad>
c0021a18:	83 c4 10             	add    esp,0x10
c0021a1b:	90                   	nop
c0021a1c:	83 c4 0c             	add    esp,0xc
c0021a1f:	c3                   	ret    

c0021a20 <SSE::SSE()>:
c0021a20:	83 ec 0c             	sub    esp,0xc
c0021a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a27:	83 ec 08             	sub    esp,0x8
c0021a2a:	68 c4 78 02 c0       	push   0xc00278c4
c0021a2f:	50                   	push   eax
c0021a30:	e8 9b d0 fe ff       	call   c000ead0 <FPU::FPU(char const*)>
c0021a35:	83 c4 10             	add    esp,0x10
c0021a38:	ba d4 78 02 c0       	mov    edx,0xc00278d4
c0021a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a41:	89 10                	mov    DWORD PTR [eax],edx
c0021a43:	90                   	nop
c0021a44:	83 c4 0c             	add    esp,0xc
c0021a47:	c3                   	ret    

c0021a48 <x87::open(int, int, void*)>:
c0021a48:	55                   	push   ebp
c0021a49:	89 e5                	mov    ebp,esp
c0021a4b:	83 ec 08             	sub    esp,0x8
c0021a4e:	e8 ec 0f 00 00       	call   c0022a3f <x87Init>
c0021a53:	b8 00 00 00 00       	mov    eax,0x0
c0021a58:	c9                   	leave  
c0021a59:	c3                   	ret    

c0021a5a <x87::close(int, int, void*)>:
c0021a5a:	55                   	push   ebp
c0021a5b:	89 e5                	mov    ebp,esp
c0021a5d:	83 ec 08             	sub    esp,0x8
c0021a60:	e8 f3 0f 00 00       	call   c0022a58 <x87Close>
c0021a65:	b8 00 00 00 00       	mov    eax,0x0
c0021a6a:	c9                   	leave  
c0021a6b:	c3                   	ret    

c0021a6c <x87::available()>:
c0021a6c:	55                   	push   ebp
c0021a6d:	89 e5                	mov    ebp,esp
c0021a6f:	83 ec 08             	sub    esp,0x8
c0021a72:	e8 9f 0f 00 00       	call   c0022a16 <x87Detect>
c0021a77:	85 c0                	test   eax,eax
c0021a79:	0f 95 c0             	setne  al
c0021a7c:	c9                   	leave  
c0021a7d:	c3                   	ret    

c0021a7e <x87::save(void*)>:
c0021a7e:	55                   	push   ebp
c0021a7f:	89 e5                	mov    ebp,esp
c0021a81:	83 ec 08             	sub    esp,0x8
c0021a84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a87:	83 ec 0c             	sub    esp,0xc
c0021a8a:	50                   	push   eax
c0021a8b:	e8 a1 0f 00 00       	call   c0022a31 <x87Save>
c0021a90:	83 c4 10             	add    esp,0x10
c0021a93:	90                   	nop
c0021a94:	c9                   	leave  
c0021a95:	c3                   	ret    

c0021a96 <x87::load(void*)>:
c0021a96:	55                   	push   ebp
c0021a97:	89 e5                	mov    ebp,esp
c0021a99:	83 ec 08             	sub    esp,0x8
c0021a9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a9f:	83 ec 0c             	sub    esp,0xc
c0021aa2:	50                   	push   eax
c0021aa3:	e8 90 0f 00 00       	call   c0022a38 <x87Load>
c0021aa8:	83 c4 10             	add    esp,0x10
c0021aab:	90                   	nop
c0021aac:	c9                   	leave  
c0021aad:	c3                   	ret    

c0021aae <x87::x87()>:
c0021aae:	83 ec 0c             	sub    esp,0xc
c0021ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab5:	83 ec 08             	sub    esp,0x8
c0021ab8:	68 04 79 02 c0       	push   0xc0027904
c0021abd:	50                   	push   eax
c0021abe:	e8 0d d0 fe ff       	call   c000ead0 <FPU::FPU(char const*)>
c0021ac3:	83 c4 10             	add    esp,0x10
c0021ac6:	ba 14 79 02 c0       	mov    edx,0xc0027914
c0021acb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021acf:	89 10                	mov    DWORD PTR [eax],edx
c0021ad1:	90                   	nop
c0021ad2:	83 c4 0c             	add    esp,0xc
c0021ad5:	c3                   	ret    

c0021ad6 <APIC::disable()>:
c0021ad6:	90                   	nop
c0021ad7:	c3                   	ret    

c0021ad8 <APIC::close(int, int, void*)>:
c0021ad8:	55                   	push   ebp
c0021ad9:	89 e5                	mov    ebp,esp
c0021adb:	83 ec 08             	sub    esp,0x8
c0021ade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ae1:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ae3:	83 c0 3c             	add    eax,0x3c
c0021ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ae8:	83 ec 0c             	sub    esp,0xc
c0021aeb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021aee:	ff d0                	call   eax
c0021af0:	83 c4 10             	add    esp,0x10
c0021af3:	b8 00 00 00 00       	mov    eax,0x0
c0021af8:	c9                   	leave  
c0021af9:	c3                   	ret    

c0021afa <IOAPIC::close(int, int, void*)>:
c0021afa:	b8 00 00 00 00       	mov    eax,0x0
c0021aff:	c3                   	ret    

c0021b00 <APIC::io_wait()>:
c0021b00:	eb 00                	jmp    c0021b02 <APIC::io_wait()+0x2>
c0021b02:	eb 00                	jmp    c0021b04 <APIC::io_wait()+0x4>
c0021b04:	90                   	nop
c0021b05:	c3                   	ret    

c0021b06 <APIC::getBase()>:
c0021b06:	55                   	push   ebp
c0021b07:	89 e5                	mov    ebp,esp
c0021b09:	83 ec 18             	sub    esp,0x18
c0021b0c:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0021b11:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021b17:	83 e0 08             	and    eax,0x8
c0021b1a:	84 c0                	test   al,al
c0021b1c:	75 07                	jne    c0021b25 <APIC::getBase()+0x1f>
c0021b1e:	b8 00 00 00 00       	mov    eax,0x0
c0021b23:	eb 21                	jmp    c0021b46 <APIC::getBase()+0x40>
c0021b25:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0021b2a:	83 ec 08             	sub    esp,0x8
c0021b2d:	6a 1b                	push   0x1b
c0021b2f:	50                   	push   eax
c0021b30:	e8 39 77 fe ff       	call   c000926e <Computer::rdmsr(unsigned int)>
c0021b35:	83 c4 10             	add    esp,0x10
c0021b38:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021b3b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021b3e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021b41:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021b46:	c9                   	leave  
c0021b47:	c3                   	ret    

c0021b48 <APIC::eoi(unsigned char)>:
c0021b48:	55                   	push   ebp
c0021b49:	89 e5                	mov    ebp,esp
c0021b4b:	83 ec 28             	sub    esp,0x28
c0021b4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b51:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021b54:	83 ec 0c             	sub    esp,0xc
c0021b57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b5a:	e8 a7 ff ff ff       	call   c0021b06 <APIC::getBase()>
c0021b5f:	83 c4 10             	add    esp,0x10
c0021b62:	05 b0 00 00 00       	add    eax,0xb0
c0021b67:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021b6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021b6d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021b73:	90                   	nop
c0021b74:	c9                   	leave  
c0021b75:	c3                   	ret    

c0021b76 <APIC::open(int, int, void*)>:
c0021b76:	55                   	push   ebp
c0021b77:	89 e5                	mov    ebp,esp
c0021b79:	57                   	push   edi
c0021b7a:	56                   	push   esi
c0021b7b:	53                   	push   ebx
c0021b7c:	83 ec 2c             	sub    esp,0x2c
c0021b7f:	83 ec 0c             	sub    esp,0xc
c0021b82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b85:	e8 7c ff ff ff       	call   c0021b06 <APIC::getBase()>
c0021b8a:	83 c4 10             	add    esp,0x10
c0021b8d:	89 c2                	mov    edx,eax
c0021b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b92:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021b98:	0f b6 f8             	movzx  edi,al
c0021b9b:	89 d0                	mov    eax,edx
c0021b9d:	ba 00 00 00 00       	mov    edx,0x0
c0021ba2:	89 c1                	mov    ecx,eax
c0021ba4:	80 e5 ff             	and    ch,0xff
c0021ba7:	89 cb                	mov    ebx,ecx
c0021ba9:	0f b6 f2             	movzx  esi,dl
c0021bac:	89 d8                	mov    eax,ebx
c0021bae:	89 f2                	mov    edx,esi
c0021bb0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021bb3:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021bb6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021bba:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021bbe:	83 e0 00             	and    eax,0x0
c0021bc1:	09 d0                	or     eax,edx
c0021bc3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021bca:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021bd0:	8d 50 01             	lea    edx,[eax+0x1]
c0021bd3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021bd6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021bdc:	0f b6 d0             	movzx  edx,al
c0021bdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021be2:	83 c2 08             	add    edx,0x8
c0021be5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021be9:	0f b6 c9             	movzx  ecx,cl
c0021bec:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021bf2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021bf6:	83 ec 0c             	sub    esp,0xc
c0021bf9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021bfc:	e8 05 ff ff ff       	call   c0021b06 <APIC::getBase()>
c0021c01:	83 c4 10             	add    esp,0x10
c0021c04:	05 f0 00 00 00       	add    eax,0xf0
c0021c09:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021c0c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021c0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c11:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021c14:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021c1b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021c22:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021c25:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021c28:	89 10                	mov    DWORD PTR [eax],edx
c0021c2a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021c31:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0021c36:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021c39:	7d 7c                	jge    c0021cb7 <APIC::open(int, int, void*)+0x141>
c0021c3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021c3e:	8b 04 85 a0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e60]
c0021c45:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021c48:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021c4b:	8b 04 85 a0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e60]
c0021c52:	c1 e8 08             	shr    eax,0x8
c0021c55:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021c59:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021c5c:	8b 04 85 a0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e60]
c0021c63:	c1 e8 18             	shr    eax,0x18
c0021c66:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021c69:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021c6d:	75 40                	jne    c0021caf <APIC::open(int, int, void*)+0x139>
c0021c6f:	83 ec 0c             	sub    esp,0xc
c0021c72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c75:	e8 8c fe ff ff       	call   c0021b06 <APIC::getBase()>
c0021c7a:	83 c4 10             	add    esp,0x10
c0021c7d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021c81:	75 07                	jne    c0021c8a <APIC::open(int, int, void*)+0x114>
c0021c83:	ba 60 03 00 00       	mov    edx,0x360
c0021c88:	eb 05                	jmp    c0021c8f <APIC::open(int, int, void*)+0x119>
c0021c8a:	ba 50 03 00 00       	mov    edx,0x350
c0021c8f:	01 d0                	add    eax,edx
c0021c91:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021c94:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c99:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021c9c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021ca3:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021ca7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021caa:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021cad:	89 10                	mov    DWORD PTR [eax],edx
c0021caf:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021cb2:	e9 7a ff ff ff       	jmp    c0021c31 <APIC::open(int, int, void*)+0xbb>
c0021cb7:	b8 00 00 00 00       	mov    eax,0x0
c0021cbc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021cbf:	5b                   	pop    ebx
c0021cc0:	5e                   	pop    esi
c0021cc1:	5f                   	pop    edi
c0021cc2:	5d                   	pop    ebp
c0021cc3:	c3                   	ret    

c0021cc4 <IOAPIC::IOAPIC()>:
c0021cc4:	83 ec 0c             	sub    esp,0xc
c0021cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ccb:	83 ec 08             	sub    esp,0x8
c0021cce:	68 44 79 02 c0       	push   0xc0027944
c0021cd3:	50                   	push   eax
c0021cd4:	e8 e5 ca fe ff       	call   c000e7be <Device::Device(char const*)>
c0021cd9:	83 c4 10             	add    esp,0x10
c0021cdc:	ba 6c 7a 02 c0       	mov    edx,0xc0027a6c
c0021ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce5:	89 10                	mov    DWORD PTR [eax],edx
c0021ce7:	90                   	nop
c0021ce8:	83 c4 0c             	add    esp,0xc
c0021ceb:	c3                   	ret    

c0021cec <APIC::APIC()>:
c0021cec:	53                   	push   ebx
c0021ced:	83 ec 18             	sub    esp,0x18
c0021cf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cf4:	83 ec 08             	sub    esp,0x8
c0021cf7:	68 4c 79 02 c0       	push   0xc002794c
c0021cfc:	50                   	push   eax
c0021cfd:	e8 e8 d1 fe ff       	call   c000eeea <InterruptController::InterruptController(char const*)>
c0021d02:	83 c4 10             	add    esp,0x10
c0021d05:	ba 24 7a 02 c0       	mov    edx,0xc0027a24
c0021d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d0e:	89 10                	mov    DWORD PTR [eax],edx
c0021d10:	a0 c0 a8 02 c0       	mov    al,ds:0xc002a8c0
c0021d15:	83 f0 01             	xor    eax,0x1
c0021d18:	84 c0                	test   al,al
c0021d1a:	0f 84 a1 00 00 00    	je     c0021dc1 <APIC::APIC()+0xd5>
c0021d20:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021d25:	a0 40 92 02 c0       	mov    al,ds:0xc0029240
c0021d2a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021d2e:	0f 83 86 00 00 00    	jae    c0021dba <APIC::APIC()+0xce>
c0021d34:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021d3c:	83 ec 0c             	sub    esp,0xc
c0021d3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021d43:	e8 13 80 fe ff       	call   c0009d5b <malloc>
c0021d48:	83 c4 10             	add    esp,0x10
c0021d4b:	89 c3                	mov    ebx,eax
c0021d4d:	83 ec 0c             	sub    esp,0xc
c0021d50:	53                   	push   ebx
c0021d51:	e8 6e ff ff ff       	call   c0021cc4 <IOAPIC::IOAPIC()>
c0021d56:	83 c4 10             	add    esp,0x10
c0021d59:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021d5d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021d62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d66:	89 14 85 a0 a8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5760],edx
c0021d6d:	a1 80 a8 02 c0       	mov    eax,ds:0xc002a880
c0021d72:	40                   	inc    eax
c0021d73:	a3 80 a8 02 c0       	mov    ds:0xc002a880,eax
c0021d78:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0021d7d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021d83:	83 ec 08             	sub    esp,0x8
c0021d86:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021d8a:	50                   	push   eax
c0021d8b:	e8 2a c8 fe ff       	call   c000e5ba <Device::addChild(Device*)>
c0021d90:	83 c4 10             	add    esp,0x10
c0021d93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d97:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d99:	83 c0 08             	add    eax,0x8
c0021d9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d9e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021da3:	6a 00                	push   0x0
c0021da5:	6a 00                	push   0x0
c0021da7:	52                   	push   edx
c0021da8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021dac:	ff d0                	call   eax
c0021dae:	83 c4 10             	add    esp,0x10
c0021db1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021db5:	e9 6b ff ff ff       	jmp    c0021d25 <APIC::APIC()+0x39>
c0021dba:	c6 05 c0 a8 02 c0 01 	mov    BYTE PTR ds:0xc002a8c0,0x1
c0021dc1:	90                   	nop
c0021dc2:	83 c4 18             	add    esp,0x18
c0021dc5:	5b                   	pop    ebx
c0021dc6:	c3                   	ret    
c0021dc7:	90                   	nop

c0021dc8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021dc8:	55                   	push   ebp
c0021dc9:	89 e5                	mov    ebp,esp
c0021dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021dce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021dd4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021dd7:	72 1d                	jb     c0021df6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ddc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021de2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021de5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021deb:	01 d0                	add    eax,edx
c0021ded:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021df0:	73 04                	jae    c0021df6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021df2:	b0 01                	mov    al,0x1
c0021df4:	eb 02                	jmp    c0021df8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021df6:	b0 00                	mov    al,0x0
c0021df8:	5d                   	pop    ebp
c0021df9:	c3                   	ret    

c0021dfa <IOAPIC::read(int)>:
c0021dfa:	55                   	push   ebp
c0021dfb:	89 e5                	mov    ebp,esp
c0021dfd:	83 ec 10             	sub    esp,0x10
c0021e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e03:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021e09:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021e0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021e0f:	0f b6 d0             	movzx  edx,al
c0021e12:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021e15:	89 10                	mov    DWORD PTR [eax],edx
c0021e17:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021e1a:	83 c0 10             	add    eax,0x10
c0021e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e1f:	c9                   	leave  
c0021e20:	c3                   	ret    
c0021e21:	90                   	nop

c0021e22 <IOAPIC::open(int, int, void*)>:
c0021e22:	55                   	push   ebp
c0021e23:	89 e5                	mov    ebp,esp
c0021e25:	57                   	push   edi
c0021e26:	56                   	push   esi
c0021e27:	53                   	push   ebx
c0021e28:	83 ec 0c             	sub    esp,0xc
c0021e2b:	83 ec 0c             	sub    esp,0xc
c0021e2e:	68 77 79 02 c0       	push   0xc0027977
c0021e33:	e8 0f b2 fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c0021e38:	83 c4 10             	add    esp,0x10
c0021e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021e41:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e4a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021e50:	8b 14 85 80 92 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6d80]
c0021e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e5a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e63:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021e69:	8b 14 85 00 93 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6d00]
c0021e70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e73:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e7c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e85:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021e8b:	0f b6 f8             	movzx  edi,al
c0021e8e:	89 d0                	mov    eax,edx
c0021e90:	ba 00 00 00 00       	mov    edx,0x0
c0021e95:	89 c1                	mov    ecx,eax
c0021e97:	80 e5 ff             	and    ch,0xff
c0021e9a:	89 cb                	mov    ebx,ecx
c0021e9c:	0f b6 f2             	movzx  esi,dl
c0021e9f:	89 d8                	mov    eax,ebx
c0021ea1:	89 f2                	mov    edx,esi
c0021ea3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021ea6:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021ea9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021ead:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021eb1:	83 e0 00             	and    eax,0x0
c0021eb4:	09 d0                	or     eax,edx
c0021eb6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ebd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021ec3:	8d 50 01             	lea    edx,[eax+0x1]
c0021ec6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021ec9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021ecf:	0f b6 d0             	movzx  edx,al
c0021ed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ed5:	83 c2 08             	add    edx,0x8
c0021ed8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021edc:	0f b6 c9             	movzx  ecx,cl
c0021edf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0021ee5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021ee9:	83 ec 08             	sub    esp,0x8
c0021eec:	6a 01                	push   0x1
c0021eee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ef1:	e8 04 ff ff ff       	call   c0021dfa <IOAPIC::read(int)>
c0021ef6:	83 c4 10             	add    esp,0x10
c0021ef9:	c1 f8 10             	sar    eax,0x10
c0021efc:	0f b6 c0             	movzx  eax,al
c0021eff:	8d 50 01             	lea    edx,[eax+0x1]
c0021f02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f05:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021f0b:	b8 00 00 00 00       	mov    eax,0x0
c0021f10:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021f13:	5b                   	pop    ebx
c0021f14:	5e                   	pop    esi
c0021f15:	5f                   	pop    edi
c0021f16:	5d                   	pop    ebp
c0021f17:	c3                   	ret    

c0021f18 <IOAPIC::write(int, int)>:
c0021f18:	55                   	push   ebp
c0021f19:	89 e5                	mov    ebp,esp
c0021f1b:	83 ec 10             	sub    esp,0x10
c0021f1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f21:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021f27:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021f2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021f2d:	0f b6 d0             	movzx  edx,al
c0021f30:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021f33:	89 10                	mov    DWORD PTR [eax],edx
c0021f35:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021f38:	8d 50 10             	lea    edx,[eax+0x10]
c0021f3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021f3e:	89 02                	mov    DWORD PTR [edx],eax
c0021f40:	90                   	nop
c0021f41:	c9                   	leave  
c0021f42:	c3                   	ret    
c0021f43:	90                   	nop

c0021f44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0021f44:	55                   	push   ebp
c0021f45:	89 e5                	mov    ebp,esp
c0021f47:	53                   	push   ebx
c0021f48:	83 ec 2c             	sub    esp,0x2c
c0021f4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021f4e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021f51:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0021f54:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021f57:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021f5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021f5d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021f60:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021f63:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021f66:	88 d8                	mov    al,bl
c0021f68:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0021f6b:	88 c8                	mov    al,cl
c0021f6d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021f70:	88 d0                	mov    al,dl
c0021f72:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0021f75:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021f79:	83 c0 08             	add    eax,0x8
c0021f7c:	01 c0                	add    eax,eax
c0021f7e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021f81:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021f85:	83 c0 08             	add    eax,0x8
c0021f88:	01 c0                	add    eax,eax
c0021f8a:	40                   	inc    eax
c0021f8b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0021f8e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021f91:	50                   	push   eax
c0021f92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f95:	e8 60 fe ff ff       	call   c0021dfa <IOAPIC::read(int)>
c0021f9a:	83 c4 08             	add    esp,0x8
c0021f9d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021fa0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0021fa7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021faa:	c1 e0 18             	shl    eax,0x18
c0021fad:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0021fb0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021fb3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021fb6:	52                   	push   edx
c0021fb7:	50                   	push   eax
c0021fb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021fbb:	e8 58 ff ff ff       	call   c0021f18 <IOAPIC::write(int, int)>
c0021fc0:	83 c4 0c             	add    esp,0xc
c0021fc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021fc6:	50                   	push   eax
c0021fc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021fca:	e8 2b fe ff ff       	call   c0021dfa <IOAPIC::read(int)>
c0021fcf:	83 c4 08             	add    esp,0x8
c0021fd2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021fd5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0021fdc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0021fe3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0021fea:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021fee:	74 09                	je     c0021ff9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0021ff0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0021ff7:	eb 07                	jmp    c0022000 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0021ff9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0022000:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0022004:	74 09                	je     c002200f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0022006:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002200d:	eb 07                	jmp    c0022016 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002200f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0022016:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002201d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0022021:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022024:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022027:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002202a:	52                   	push   edx
c002202b:	50                   	push   eax
c002202c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002202f:	e8 e4 fe ff ff       	call   c0021f18 <IOAPIC::write(int, int)>
c0022034:	83 c4 0c             	add    esp,0xc
c0022037:	90                   	nop
c0022038:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002203b:	c9                   	leave  
c002203c:	c3                   	ret    
c002203d:	90                   	nop

c002203e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002203e:	55                   	push   ebp
c002203f:	89 e5                	mov    ebp,esp
c0022041:	57                   	push   edi
c0022042:	56                   	push   esi
c0022043:	53                   	push   ebx
c0022044:	83 ec 2c             	sub    esp,0x2c
c0022047:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002204a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002204d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022051:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0022055:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022059:	74 5a                	je     c00220b5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002205b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002205f:	7f 44                	jg     c00220a5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0022061:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022064:	05 20 80 02 c0       	add    eax,0xc0028020
c0022069:	8a 00                	mov    al,BYTE PTR [eax]
c002206b:	0f b6 c0             	movzx  eax,al
c002206e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0022071:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022074:	66 8b 84 00 20 92 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6de0]
c002207c:	0f b7 c0             	movzx  eax,ax
c002207f:	83 e0 02             	and    eax,0x2
c0022082:	85 c0                	test   eax,eax
c0022084:	74 04                	je     c002208a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0022086:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002208a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002208d:	66 8b 84 00 20 92 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6de0]
c0022095:	0f b7 c0             	movzx  eax,ax
c0022098:	83 e0 08             	and    eax,0x8
c002209b:	85 c0                	test   eax,eax
c002209d:	74 16                	je     c00220b5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002209f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00220a3:	eb 10                	jmp    c00220b5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00220a5:	83 ec 0c             	sub    esp,0xc
c00220a8:	68 88 79 02 c0       	push   0xc0027988
c00220ad:	e8 13 30 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00220b2:	83 c4 10             	add    esp,0x10
c00220b5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00220b9:	a1 80 a8 02 c0       	mov    eax,ds:0xc002a880
c00220be:	83 ec 08             	sub    esp,0x8
c00220c1:	50                   	push   eax
c00220c2:	68 c0 79 02 c0       	push   0xc00279c0
c00220c7:	e8 7b af fe ff       	call   c000d047 <Dbg::kprintf(char const*, ...)>
c00220cc:	83 c4 10             	add    esp,0x10
c00220cf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00220d6:	a1 80 a8 02 c0       	mov    eax,ds:0xc002a880
c00220db:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00220de:	7d 67                	jge    c0022147 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00220e0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00220e3:	8b 04 85 a0 a8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5760]
c00220ea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00220ed:	83 ec 08             	sub    esp,0x8
c00220f0:	52                   	push   edx
c00220f1:	50                   	push   eax
c00220f2:	e8 d1 fc ff ff       	call   c0021dc8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00220f7:	83 c4 10             	add    esp,0x10
c00220fa:	84 c0                	test   al,al
c00220fc:	74 44                	je     c0022142 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00220fe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022101:	8b 1c 85 a0 a8 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd5760]
c0022108:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002210c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002210f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0022113:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022116:	83 c0 20             	add    eax,0x20
c0022119:	0f b6 f0             	movzx  esi,al
c002211c:	b8 00 00 00 00       	mov    eax,0x0
c0022121:	99                   	cdq    
c0022122:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022125:	0f b6 c9             	movzx  ecx,cl
c0022128:	83 ec 04             	sub    esp,0x4
c002212b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002212e:	57                   	push   edi
c002212f:	56                   	push   esi
c0022130:	52                   	push   edx
c0022131:	50                   	push   eax
c0022132:	51                   	push   ecx
c0022133:	53                   	push   ebx
c0022134:	e8 0b fe ff ff       	call   c0021f44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022139:	83 c4 20             	add    esp,0x20
c002213c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0022140:	eb 05                	jmp    c0022147 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022142:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0022145:	eb 8f                	jmp    c00220d6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0022147:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002214a:	83 f0 01             	xor    eax,0x1
c002214d:	84 c0                	test   al,al
c002214f:	74 10                	je     c0022161 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0022151:	83 ec 0c             	sub    esp,0xc
c0022154:	68 d7 79 02 c0       	push   0xc00279d7
c0022159:	e8 67 2f ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c002215e:	83 c4 10             	add    esp,0x10
c0022161:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022165:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002216c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0022170:	7f 65                	jg     c00221d7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0022172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022175:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022178:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002217f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022182:	01 ca                	add    edx,ecx
c0022184:	83 c2 54             	add    edx,0x54
c0022187:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002218b:	85 c0                	test   eax,eax
c002218d:	75 43                	jne    c00221d2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002218f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022192:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022195:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002219c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002219f:	01 ca                	add    edx,ecx
c00221a1:	8d 4a 54             	lea    ecx,[edx+0x54]
c00221a4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00221a7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00221ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00221ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00221b1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00221b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00221bb:	01 ca                	add    edx,ecx
c00221bd:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00221c3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00221c6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00221ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00221cd:	83 e8 20             	sub    eax,0x20
c00221d0:	eb 1a                	jmp    c00221ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00221d2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00221d5:	eb 95                	jmp    c002216c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00221d7:	83 ec 0c             	sub    esp,0xc
c00221da:	68 e4 79 02 c0       	push   0xc00279e4
c00221df:	e8 e1 2e ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00221e4:	83 c4 10             	add    esp,0x10
c00221e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00221ec:	8d 65 f4             	lea    esp,[ebp-0xc]
c00221ef:	5b                   	pop    ebx
c00221f0:	5e                   	pop    esi
c00221f1:	5f                   	pop    edi
c00221f2:	5d                   	pop    ebp
c00221f3:	c3                   	ret    

c00221f4 <PIC::disable()>:
c00221f4:	55                   	push   ebp
c00221f5:	89 e5                	mov    ebp,esp
c00221f7:	83 ec 10             	sub    esp,0x10
c00221fa:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022200:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022204:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022207:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002220b:	ee                   	out    dx,al
c002220c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022212:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0022216:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022219:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002221d:	ee                   	out    dx,al
c002221e:	90                   	nop
c002221f:	c9                   	leave  
c0022220:	c3                   	ret    
c0022221:	90                   	nop

c0022222 <PIC::close(int, int, void*)>:
c0022222:	55                   	push   ebp
c0022223:	89 e5                	mov    ebp,esp
c0022225:	83 ec 08             	sub    esp,0x8
c0022228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002222b:	8b 00                	mov    eax,DWORD PTR [eax]
c002222d:	83 c0 3c             	add    eax,0x3c
c0022230:	8b 00                	mov    eax,DWORD PTR [eax]
c0022232:	83 ec 0c             	sub    esp,0xc
c0022235:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022238:	ff d0                	call   eax
c002223a:	83 c4 10             	add    esp,0x10
c002223d:	b8 00 00 00 00       	mov    eax,0x0
c0022242:	c9                   	leave  
c0022243:	c3                   	ret    

c0022244 <PIC::PIC()>:
c0022244:	83 ec 0c             	sub    esp,0xc
c0022247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224b:	83 ec 08             	sub    esp,0x8
c002224e:	68 90 7a 02 c0       	push   0xc0027a90
c0022253:	50                   	push   eax
c0022254:	e8 91 cc fe ff       	call   c000eeea <InterruptController::InterruptController(char const*)>
c0022259:	83 c4 10             	add    esp,0x10
c002225c:	ba bc 7a 02 c0       	mov    edx,0xc0027abc
c0022261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022265:	89 10                	mov    DWORD PTR [eax],edx
c0022267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022271:	0f b6 d0             	movzx  edx,al
c0022274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022278:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002227f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022283:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022289:	0f b6 d0             	movzx  edx,al
c002228c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022290:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022299:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002229f:	8d 50 01             	lea    edx,[eax+0x1]
c00222a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222a6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00222ac:	0f b6 d0             	movzx  edx,al
c00222af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00222b7:	83 e1 3f             	and    ecx,0x3f
c00222ba:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00222be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222c8:	0f b6 d0             	movzx  edx,al
c00222cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222cf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00222d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222e0:	0f b6 d0             	movzx  edx,al
c00222e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00222ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222f6:	8d 50 01             	lea    edx,[eax+0x1]
c00222f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222fd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022303:	0f b6 d0             	movzx  edx,al
c0022306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002230a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002230e:	83 e1 3f             	and    ecx,0x3f
c0022311:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022315:	90                   	nop
c0022316:	83 c4 0c             	add    esp,0xc
c0022319:	c3                   	ret    

c002231a <PIC::ioWait()>:
c002231a:	eb 00                	jmp    c002231c <PIC::ioWait()+0x2>
c002231c:	eb 00                	jmp    c002231e <PIC::ioWait()+0x4>
c002231e:	90                   	nop
c002231f:	c3                   	ret    

c0022320 <PIC::getIRQReg(int)>:
c0022320:	55                   	push   ebp
c0022321:	89 e5                	mov    ebp,esp
c0022323:	83 ec 10             	sub    esp,0x10
c0022326:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022329:	0f b6 c0             	movzx  eax,al
c002232c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022332:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022335:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022338:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002233c:	ee                   	out    dx,al
c002233d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022340:	0f b6 c0             	movzx  eax,al
c0022343:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022349:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002234c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002234f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022353:	ee                   	out    dx,al
c0022354:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002235a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002235e:	89 c2                	mov    edx,eax
c0022360:	ec                   	in     al,dx
c0022361:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022364:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022367:	0f b6 c0             	movzx  eax,al
c002236a:	c1 e0 08             	shl    eax,0x8
c002236d:	89 c1                	mov    ecx,eax
c002236f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022375:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022379:	89 c2                	mov    edx,eax
c002237b:	ec                   	in     al,dx
c002237c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002237f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022382:	0f b6 c0             	movzx  eax,al
c0022385:	09 c8                	or     eax,ecx
c0022387:	c9                   	leave  
c0022388:	c3                   	ret    
c0022389:	90                   	nop

c002238a <PIC::eoi(unsigned char)>:
c002238a:	55                   	push   ebp
c002238b:	89 e5                	mov    ebp,esp
c002238d:	83 ec 14             	sub    esp,0x14
c0022390:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022393:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022396:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002239a:	75 1e                	jne    c00223ba <PIC::eoi(unsigned char)+0x30>
c002239c:	6a 0b                	push   0xb
c002239e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00223a1:	e8 7a ff ff ff       	call   c0022320 <PIC::getIRQReg(int)>
c00223a6:	83 c4 08             	add    esp,0x8
c00223a9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00223ad:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00223b1:	25 80 00 00 00       	and    eax,0x80
c00223b6:	85 c0                	test   eax,eax
c00223b8:	74 5f                	je     c0022419 <PIC::eoi(unsigned char)+0x8f>
c00223ba:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00223be:	75 2d                	jne    c00223ed <PIC::eoi(unsigned char)+0x63>
c00223c0:	6a 0b                	push   0xb
c00223c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00223c5:	e8 56 ff ff ff       	call   c0022320 <PIC::getIRQReg(int)>
c00223ca:	83 c4 08             	add    esp,0x8
c00223cd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00223d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00223d4:	66 85 c0             	test   ax,ax
c00223d7:	78 14                	js     c00223ed <PIC::eoi(unsigned char)+0x63>
c00223d9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00223df:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00223e3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00223e6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00223ea:	ee                   	out    dx,al
c00223eb:	eb 2d                	jmp    c002241a <PIC::eoi(unsigned char)+0x90>
c00223ed:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00223f1:	76 12                	jbe    c0022405 <PIC::eoi(unsigned char)+0x7b>
c00223f3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00223f9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00223fd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022400:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022404:	ee                   	out    dx,al
c0022405:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002240b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002240f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022412:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022416:	ee                   	out    dx,al
c0022417:	eb 01                	jmp    c002241a <PIC::eoi(unsigned char)+0x90>
c0022419:	90                   	nop
c002241a:	c9                   	leave  
c002241b:	c3                   	ret    

c002241c <PIC::remap()>:
c002241c:	55                   	push   ebp
c002241d:	89 e5                	mov    ebp,esp
c002241f:	83 ec 48             	sub    esp,0x48
c0022422:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022429:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022430:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022436:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022439:	89 c2                	mov    edx,eax
c002243b:	ec                   	in     al,dx
c002243c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002243f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022442:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022445:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002244b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002244e:	89 c2                	mov    edx,eax
c0022450:	ec                   	in     al,dx
c0022451:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022454:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022457:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002245a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022460:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022464:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022467:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002246a:	ee                   	out    dx,al
c002246b:	83 ec 0c             	sub    esp,0xc
c002246e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022471:	e8 a4 fe ff ff       	call   c002231a <PIC::ioWait()>
c0022476:	83 c4 10             	add    esp,0x10
c0022479:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002247f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022483:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022486:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022489:	ee                   	out    dx,al
c002248a:	83 ec 0c             	sub    esp,0xc
c002248d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022490:	e8 85 fe ff ff       	call   c002231a <PIC::ioWait()>
c0022495:	83 c4 10             	add    esp,0x10
c0022498:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002249b:	0f b6 c0             	movzx  eax,al
c002249e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00224a4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00224a7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00224aa:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00224ad:	ee                   	out    dx,al
c00224ae:	83 ec 0c             	sub    esp,0xc
c00224b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00224b4:	e8 61 fe ff ff       	call   c002231a <PIC::ioWait()>
c00224b9:	83 c4 10             	add    esp,0x10
c00224bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00224bf:	0f b6 c0             	movzx  eax,al
c00224c2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00224c8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00224cb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00224ce:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00224d1:	ee                   	out    dx,al
c00224d2:	83 ec 0c             	sub    esp,0xc
c00224d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00224d8:	e8 3d fe ff ff       	call   c002231a <PIC::ioWait()>
c00224dd:	83 c4 10             	add    esp,0x10
c00224e0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00224e6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00224ea:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00224ed:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00224f0:	ee                   	out    dx,al
c00224f1:	83 ec 0c             	sub    esp,0xc
c00224f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00224f7:	e8 1e fe ff ff       	call   c002231a <PIC::ioWait()>
c00224fc:	83 c4 10             	add    esp,0x10
c00224ff:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022505:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0022509:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002250c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002250f:	ee                   	out    dx,al
c0022510:	83 ec 0c             	sub    esp,0xc
c0022513:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022516:	e8 ff fd ff ff       	call   c002231a <PIC::ioWait()>
c002251b:	83 c4 10             	add    esp,0x10
c002251e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022524:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022528:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002252b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002252e:	ee                   	out    dx,al
c002252f:	83 ec 0c             	sub    esp,0xc
c0022532:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022535:	e8 e0 fd ff ff       	call   c002231a <PIC::ioWait()>
c002253a:	83 c4 10             	add    esp,0x10
c002253d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022543:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022547:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002254a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002254d:	ee                   	out    dx,al
c002254e:	83 ec 0c             	sub    esp,0xc
c0022551:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022554:	e8 c1 fd ff ff       	call   c002231a <PIC::ioWait()>
c0022559:	83 c4 10             	add    esp,0x10
c002255c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022560:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022566:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022569:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002256c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002256f:	ee                   	out    dx,al
c0022570:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022574:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002257a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002257d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022580:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022583:	ee                   	out    dx,al
c0022584:	90                   	nop
c0022585:	c9                   	leave  
c0022586:	c3                   	ret    
c0022587:	90                   	nop

c0022588 <PIC::open(int, int, void*)>:
c0022588:	55                   	push   ebp
c0022589:	89 e5                	mov    ebp,esp
c002258b:	83 ec 18             	sub    esp,0x18
c002258e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022594:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022598:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002259b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002259f:	ee                   	out    dx,al
c00225a0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00225a6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00225aa:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00225ad:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00225b1:	ee                   	out    dx,al
c00225b2:	83 ec 0c             	sub    esp,0xc
c00225b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225b8:	e8 5f fe ff ff       	call   c002241c <PIC::remap()>
c00225bd:	83 c4 10             	add    esp,0x10
c00225c0:	b8 00 00 00 00       	mov    eax,0x0
c00225c5:	c9                   	leave  
c00225c6:	c3                   	ret    
c00225c7:	90                   	nop

c00225c8 <APICTimer::close(int, int, void*)>:
c00225c8:	b8 00 00 00 00       	mov    eax,0x0
c00225cd:	c3                   	ret    
c00225ce:	66 90                	xchg   ax,ax

c00225d0 <apicTimerHandler(regs*, void*)>:
c00225d0:	83 ec 0c             	sub    esp,0xc
c00225d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00225d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00225d9:	b8 10 27 00 00       	mov    eax,0x2710
c00225de:	ba 00 00 00 00       	mov    edx,0x0
c00225e3:	f7 f1                	div    ecx
c00225e5:	83 ec 0c             	sub    esp,0xc
c00225e8:	50                   	push   eax
c00225e9:	e8 2b e9 fe ff       	call   c0010f19 <timerHandler(unsigned int)>
c00225ee:	83 c4 10             	add    esp,0x10
c00225f1:	90                   	nop
c00225f2:	83 c4 0c             	add    esp,0xc
c00225f5:	c3                   	ret    
c00225f6:	66 90                	xchg   ax,ax

c00225f8 <APICTimer::write(int)>:
c00225f8:	83 ec 1c             	sub    esp,0x1c
c00225fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022603:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022609:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c002260e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022614:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002261a:	83 ec 0c             	sub    esp,0xc
c002261d:	50                   	push   eax
c002261e:	e8 e3 f4 ff ff       	call   c0021b06 <APIC::getBase()>
c0022623:	83 c4 10             	add    esp,0x10
c0022626:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002262a:	a1 4c 8f 02 c0       	mov    eax,ds:0xc0028f4c
c002262f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022633:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022637:	05 e0 03 00 00       	add    eax,0x3e0
c002263c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022642:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022646:	05 80 03 00 00       	add    eax,0x380
c002264b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022651:	fb                   	sti    
c0022652:	66 90                	xchg   ax,ax
c0022654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022658:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c002265e:	a1 4c 8f 02 c0       	mov    eax,ds:0xc0028f4c
c0022663:	39 c2                	cmp    edx,eax
c0022665:	76 05                	jbe    c002266c <APICTimer::write(int)+0x74>
c0022667:	eb eb                	jmp    c0022654 <APICTimer::write(int)+0x5c>
c0022669:	8d 76 00             	lea    esi,[esi+0x0]
c002266c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022670:	05 20 03 00 00       	add    eax,0x320
c0022675:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002267b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002267f:	05 90 03 00 00       	add    eax,0x390
c0022684:	8b 00                	mov    eax,DWORD PTR [eax]
c0022686:	f7 d0                	not    eax
c0022688:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002268c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022694:	ba 00 00 00 00       	mov    edx,0x0
c0022699:	f7 f1                	div    ecx
c002269b:	89 04 24             	mov    DWORD PTR [esp],eax
c002269e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226a2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00226a8:	0d 00 00 02 00       	or     eax,0x20000
c00226ad:	89 c2                	mov    edx,eax
c00226af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00226b3:	05 20 03 00 00       	add    eax,0x320
c00226b8:	89 10                	mov    DWORD PTR [eax],edx
c00226ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00226be:	05 e0 03 00 00       	add    eax,0x3e0
c00226c3:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00226c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00226cd:	05 80 03 00 00       	add    eax,0x380
c00226d2:	89 c2                	mov    edx,eax
c00226d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00226d7:	89 02                	mov    DWORD PTR [edx],eax
c00226d9:	90                   	nop
c00226da:	83 c4 1c             	add    esp,0x1c
c00226dd:	c3                   	ret    
c00226de:	66 90                	xchg   ax,ax

c00226e0 <APICTimer::open(int, int, void*)>:
c00226e0:	57                   	push   edi
c00226e1:	56                   	push   esi
c00226e2:	53                   	push   ebx
c00226e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00226e9:	83 c0 24             	add    eax,0x24
c00226ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00226ee:	83 ec 08             	sub    esp,0x8
c00226f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226f9:	ff d0                	call   eax
c00226fb:	83 c4 10             	add    esp,0x10
c00226fe:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c0022703:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022709:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002270f:	83 ec 0c             	sub    esp,0xc
c0022712:	50                   	push   eax
c0022713:	e8 ee f3 ff ff       	call   c0021b06 <APIC::getBase()>
c0022718:	83 c4 10             	add    esp,0x10
c002271b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022725:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002272b:	0f b6 f8             	movzx  edi,al
c002272e:	89 d0                	mov    eax,edx
c0022730:	ba 00 00 00 00       	mov    edx,0x0
c0022735:	89 c1                	mov    ecx,eax
c0022737:	80 e5 ff             	and    ch,0xff
c002273a:	89 cb                	mov    ebx,ecx
c002273c:	0f b6 f2             	movzx  esi,dl
c002273f:	89 d8                	mov    eax,ebx
c0022741:	89 f2                	mov    edx,esi
c0022743:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022747:	8d 5f 08             	lea    ebx,[edi+0x8]
c002274a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002274e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022752:	83 e0 00             	and    eax,0x0
c0022755:	09 d0                	or     eax,edx
c0022757:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002275b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002275f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022765:	8d 50 01             	lea    edx,[eax+0x1]
c0022768:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002276c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022772:	0f b6 d0             	movzx  edx,al
c0022775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022779:	83 c2 08             	add    edx,0x8
c002277c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022780:	0f b6 c9             	movzx  ecx,cl
c0022783:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022789:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002278d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022791:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022795:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002279b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002279f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00227a3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00227a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00227ad:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00227b3:	83 ec 0c             	sub    esp,0xc
c00227b6:	51                   	push   ecx
c00227b7:	6a 01                	push   0x1
c00227b9:	68 d0 25 02 c0       	push   0xc00225d0
c00227be:	52                   	push   edx
c00227bf:	50                   	push   eax
c00227c0:	e8 6d bd fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00227c5:	83 c4 20             	add    esp,0x20
c00227c8:	89 c2                	mov    edx,eax
c00227ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227ce:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00227d4:	b8 00 00 00 00       	mov    eax,0x0
c00227d9:	5b                   	pop    ebx
c00227da:	5e                   	pop    esi
c00227db:	5f                   	pop    edi
c00227dc:	c3                   	ret    
c00227dd:	90                   	nop
c00227de:	66 90                	xchg   ax,ax

c00227e0 <APICTimer::APICTimer()>:
c00227e0:	83 ec 0c             	sub    esp,0xc
c00227e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e7:	83 ec 08             	sub    esp,0x8
c00227ea:	68 fc 7a 02 c0       	push   0xc0027afc
c00227ef:	50                   	push   eax
c00227f0:	e8 93 e6 fe ff       	call   c0010e88 <Timer::Timer(char const*)>
c00227f5:	83 c4 10             	add    esp,0x10
c00227f8:	ba 10 7b 02 c0       	mov    edx,0xc0027b10
c00227fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022801:	89 10                	mov    DWORD PTR [eax],edx
c0022803:	90                   	nop
c0022804:	83 c4 0c             	add    esp,0xc
c0022807:	c3                   	ret    

c0022808 <PIT::write(int)>:
c0022808:	83 ec 10             	sub    esp,0x10
c002280b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002280f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022813:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022819:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002281d:	a3 c4 a8 02 c0       	mov    ds:0xc002a8c4,eax
c0022822:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022827:	99                   	cdq    
c0022828:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002282c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022830:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022837:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002283c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022840:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022845:	ee                   	out    dx,al
c0022846:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002284a:	0f b6 c0             	movzx  eax,al
c002284d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022854:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022858:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002285c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022861:	ee                   	out    dx,al
c0022862:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022866:	c1 f8 08             	sar    eax,0x8
c0022869:	0f b6 c0             	movzx  eax,al
c002286c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022873:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022877:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002287b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022880:	ee                   	out    dx,al
c0022881:	90                   	nop
c0022882:	83 c4 10             	add    esp,0x10
c0022885:	c3                   	ret    
c0022886:	66 90                	xchg   ax,ax

c0022888 <pitHandler(regs*, void*)>:
c0022888:	83 ec 0c             	sub    esp,0xc
c002288b:	8b 0d c4 a8 02 c0    	mov    ecx,DWORD PTR ds:0xc002a8c4
c0022891:	b8 10 27 00 00       	mov    eax,0x2710
c0022896:	99                   	cdq    
c0022897:	f7 f9                	idiv   ecx
c0022899:	83 ec 0c             	sub    esp,0xc
c002289c:	50                   	push   eax
c002289d:	e8 77 e6 fe ff       	call   c0010f19 <timerHandler(unsigned int)>
c00228a2:	83 c4 10             	add    esp,0x10
c00228a5:	90                   	nop
c00228a6:	83 c4 0c             	add    esp,0xc
c00228a9:	c3                   	ret    
c00228aa:	66 90                	xchg   ax,ax

c00228ac <PIT::open(int, int, void*)>:
c00228ac:	83 ec 0c             	sub    esp,0xc
c00228af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00228b5:	83 c0 24             	add    eax,0x24
c00228b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00228ba:	83 ec 08             	sub    esp,0x8
c00228bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228c5:	ff d0                	call   eax
c00228c7:	83 c4 10             	add    esp,0x10
c00228ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ce:	83 ec 0c             	sub    esp,0xc
c00228d1:	6a 00                	push   0x0
c00228d3:	6a 01                	push   0x1
c00228d5:	68 88 28 02 c0       	push   0xc0022888
c00228da:	6a 00                	push   0x0
c00228dc:	50                   	push   eax
c00228dd:	e8 50 bc fe ff       	call   c000e532 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00228e2:	83 c4 20             	add    esp,0x20
c00228e5:	89 c2                	mov    edx,eax
c00228e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228eb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00228f1:	b8 00 00 00 00       	mov    eax,0x0
c00228f6:	83 c4 0c             	add    esp,0xc
c00228f9:	c3                   	ret    
c00228fa:	66 90                	xchg   ax,ax

c00228fc <PIT::close(int, int, void*)>:
c00228fc:	83 ec 0c             	sub    esp,0xc
c00228ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022903:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002290d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022911:	6a 01                	push   0x1
c0022913:	68 88 28 02 c0       	push   0xc0022888
c0022918:	6a 00                	push   0x0
c002291a:	50                   	push   eax
c002291b:	e8 5c bc fe ff       	call   c000e57c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022920:	83 c4 10             	add    esp,0x10
c0022923:	b8 00 00 00 00       	mov    eax,0x0
c0022928:	83 c4 0c             	add    esp,0xc
c002292b:	c3                   	ret    

c002292c <PIT::PIT()>:
c002292c:	83 ec 0c             	sub    esp,0xc
c002292f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022933:	83 ec 08             	sub    esp,0x8
c0022936:	68 38 7b 02 c0       	push   0xc0027b38
c002293b:	50                   	push   eax
c002293c:	e8 47 e5 fe ff       	call   c0010e88 <Timer::Timer(char const*)>
c0022941:	83 c4 10             	add    esp,0x10
c0022944:	ba 60 7b 02 c0       	mov    edx,0xc0027b60
c0022949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294d:	89 10                	mov    DWORD PTR [eax],edx
c002294f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022953:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022959:	0f b6 d0             	movzx  edx,al
c002295c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022960:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022971:	0f b6 d0             	movzx  edx,al
c0022974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022978:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002297d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022981:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022987:	8d 50 01             	lea    edx,[eax+0x1]
c002298a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002298e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022994:	0f b6 d0             	movzx  edx,al
c0022997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002299f:	83 e1 3f             	and    ecx,0x3f
c00229a2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00229a6:	90                   	nop
c00229a7:	83 c4 0c             	add    esp,0xc
c00229aa:	c3                   	ret    
c00229ab:	66 90                	xchg   ax,ax
c00229ad:	66 90                	xchg   ax,ax
c00229af:	90                   	nop

c00229b0 <avxDetect>:
c00229b0:	b8 00 00 00 00       	mov    eax,0x0
c00229b5:	c3                   	ret    

c00229b6 <avxSave>:
c00229b6:	c3                   	ret    

c00229b7 <avxLoad>:
c00229b7:	c3                   	ret    

c00229b8 <avxInit>:
c00229b8:	c3                   	ret    

c00229b9 <avxClose>:
c00229b9:	c3                   	ret    

c00229ba <wouldSheSayYes>:
c00229ba:	c3                   	ret    
c00229bb:	49                   	dec    ecx
c00229bc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00229c0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00229c4:	75 20                	jne    c00229e6 <sseDetect.noSSE+0x1>
c00229c6:	4e                   	dec    esi
c00229c7:	79 61                	jns    c0022a2a <x87Detect+0x14>
c00229c9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00229ce:	66 90                	xchg   ax,ax

c00229d0 <absolutelyNoChanceInHell>:
c00229d0:	b8 01 00 00 00       	mov    eax,0x1
c00229d5:	0f a2                	cpuid  
c00229d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00229dd:	74 06                	je     c00229e5 <sseDetect.noSSE>
c00229df:	b8 01 00 00 00       	mov    eax,0x1
c00229e4:	c3                   	ret    

c00229e5 <sseDetect.noSSE>:
c00229e5:	31 c0                	xor    eax,eax
c00229e7:	c3                   	ret    

c00229e8 <sseSave>:
c00229e8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00229ed:	c3                   	ret    

c00229ee <sseLoad>:
c00229ee:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00229f3:	c3                   	ret    

c00229f4 <sseInit>:
c00229f4:	e8 46 00 00 00       	call   c0022a3f <x87Init>
c00229f9:	0f 20 e0             	mov    eax,cr4
c00229fc:	66 0d 00 06          	or     ax,0x600
c0022a00:	0f 22 e0             	mov    cr4,eax
c0022a03:	c3                   	ret    

c0022a04 <sseClose>:
c0022a04:	c3                   	ret    
c0022a05:	66 90                	xchg   ax,ax
c0022a07:	66 90                	xchg   ax,ax
c0022a09:	66 90                	xchg   ax,ax
c0022a0b:	66 90                	xchg   ax,ax
c0022a0d:	66 90                	xchg   ax,ax
c0022a0f:	90                   	nop

c0022a10 <value_37F>:
c0022a10:	7f 03                	jg     c0022a15 <value_37A+0x1>

c0022a12 <value_37E>:
c0022a12:	7e 03                	jle    c0022a17 <x87Detect+0x1>

c0022a14 <value_37A>:
c0022a14:	7a 03                	jp     c0022a19 <x87Detect+0x3>

c0022a16 <x87Detect>:
c0022a16:	b8 01 00 00 00       	mov    eax,0x1
c0022a1b:	0f a2                	cpuid  
c0022a1d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022a23:	74 06                	je     c0022a2b <x87Detect.nox87>
c0022a25:	b8 01 00 00 00       	mov    eax,0x1
c0022a2a:	c3                   	ret    

c0022a2b <x87Detect.nox87>:
c0022a2b:	b8 00 00 00 00       	mov    eax,0x0
c0022a30:	c3                   	ret    

c0022a31 <x87Save>:
c0022a31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a35:	dd 30                	fnsave [eax]
c0022a37:	c3                   	ret    

c0022a38 <x87Load>:
c0022a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a3c:	dd 20                	frstor [eax]
c0022a3e:	c3                   	ret    

c0022a3f <x87Init>:
c0022a3f:	0f 20 c0             	mov    eax,cr0
c0022a42:	66 25 fb ff          	and    ax,0xfffb
c0022a46:	66 0d 22 00          	or     ax,0x22
c0022a4a:	0f 22 c0             	mov    cr0,eax
c0022a4d:	db e3                	fninit 
c0022a4f:	0f 06                	clts   
c0022a51:	d9 2d 14 2a 02 c0    	fldcw  WORD PTR ds:0xc0022a14
c0022a57:	c3                   	ret    

c0022a58 <x87Close>:
c0022a58:	c3                   	ret    
c0022a59:	66 90                	xchg   ax,ax
c0022a5b:	90                   	nop

c0022a5c <__do_global_ctors_aux>:
c0022a5c:	a1 f8 3b 02 c0       	mov    eax,ds:0xc0023bf8
c0022a61:	83 f8 ff             	cmp    eax,0xffffffff
c0022a64:	74 1a                	je     c0022a80 <__do_global_ctors_aux+0x24>
c0022a66:	55                   	push   ebp
c0022a67:	89 e5                	mov    ebp,esp
c0022a69:	53                   	push   ebx
c0022a6a:	52                   	push   edx
c0022a6b:	bb f8 3b 02 c0       	mov    ebx,0xc0023bf8
c0022a70:	ff d0                	call   eax
c0022a72:	83 eb 04             	sub    ebx,0x4
c0022a75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022a77:	83 f8 ff             	cmp    eax,0xffffffff
c0022a7a:	75 f4                	jne    c0022a70 <__do_global_ctors_aux+0x14>
c0022a7c:	58                   	pop    eax
c0022a7d:	5b                   	pop    ebx
c0022a7e:	5d                   	pop    ebp
c0022a7f:	c3                   	ret    
c0022a80:	c3                   	ret    
c0022a81:	66 90                	xchg   ax,ax
c0022a83:	90                   	nop

c0022a84 <__divdi3>:
c0022a84:	55                   	push   ebp
c0022a85:	57                   	push   edi
c0022a86:	56                   	push   esi
c0022a87:	53                   	push   ebx
c0022a88:	83 ec 1c             	sub    esp,0x1c
c0022a8b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022a8f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022a93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022a96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022a9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022a9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022aa2:	85 db                	test   ebx,ebx
c0022aa4:	0f 88 8e 00 00 00    	js     c0022b38 <__divdi3+0xb4>
c0022aaa:	89 dd                	mov    ebp,ebx
c0022aac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022ab4:	89 d3                	mov    ebx,edx
c0022ab6:	85 d2                	test   edx,edx
c0022ab8:	79 0d                	jns    c0022ac7 <__divdi3+0x43>
c0022aba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022abe:	f7 d8                	neg    eax
c0022ac0:	83 d2 00             	adc    edx,0x0
c0022ac3:	f7 da                	neg    edx
c0022ac5:	89 d3                	mov    ebx,edx
c0022ac7:	89 c7                	mov    edi,eax
c0022ac9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022acc:	85 db                	test   ebx,ebx
c0022ace:	75 48                	jne    c0022b18 <__divdi3+0x94>
c0022ad0:	39 ef                	cmp    edi,ebp
c0022ad2:	76 24                	jbe    c0022af8 <__divdi3+0x74>
c0022ad4:	89 ea                	mov    edx,ebp
c0022ad6:	f7 f7                	div    edi
c0022ad8:	89 c1                	mov    ecx,eax
c0022ada:	31 f6                	xor    esi,esi
c0022adc:	89 c8                	mov    eax,ecx
c0022ade:	89 f2                	mov    edx,esi
c0022ae0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022ae4:	85 c9                	test   ecx,ecx
c0022ae6:	74 07                	je     c0022aef <__divdi3+0x6b>
c0022ae8:	f7 d8                	neg    eax
c0022aea:	83 d2 00             	adc    edx,0x0
c0022aed:	f7 da                	neg    edx
c0022aef:	83 c4 1c             	add    esp,0x1c
c0022af2:	5b                   	pop    ebx
c0022af3:	5e                   	pop    esi
c0022af4:	5f                   	pop    edi
c0022af5:	5d                   	pop    ebp
c0022af6:	c3                   	ret    
c0022af7:	90                   	nop
c0022af8:	85 ff                	test   edi,edi
c0022afa:	75 0b                	jne    c0022b07 <__divdi3+0x83>
c0022afc:	b8 01 00 00 00       	mov    eax,0x1
c0022b01:	31 d2                	xor    edx,edx
c0022b03:	f7 f3                	div    ebx
c0022b05:	89 c7                	mov    edi,eax
c0022b07:	31 d2                	xor    edx,edx
c0022b09:	89 e8                	mov    eax,ebp
c0022b0b:	f7 f7                	div    edi
c0022b0d:	89 c6                	mov    esi,eax
c0022b0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022b12:	f7 f7                	div    edi
c0022b14:	89 c1                	mov    ecx,eax
c0022b16:	eb c4                	jmp    c0022adc <__divdi3+0x58>
c0022b18:	39 eb                	cmp    ebx,ebp
c0022b1a:	77 3c                	ja     c0022b58 <__divdi3+0xd4>
c0022b1c:	0f bd f3             	bsr    esi,ebx
c0022b1f:	83 f6 1f             	xor    esi,0x1f
c0022b22:	75 40                	jne    c0022b64 <__divdi3+0xe0>
c0022b24:	39 eb                	cmp    ebx,ebp
c0022b26:	72 09                	jb     c0022b31 <__divdi3+0xad>
c0022b28:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022b2b:	0f 87 97 00 00 00    	ja     c0022bc8 <__divdi3+0x144>
c0022b31:	b9 01 00 00 00       	mov    ecx,0x1
c0022b36:	eb a4                	jmp    c0022adc <__divdi3+0x58>
c0022b38:	f7 d9                	neg    ecx
c0022b3a:	83 d3 00             	adc    ebx,0x0
c0022b3d:	f7 db                	neg    ebx
c0022b3f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022b42:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022b46:	89 dd                	mov    ebp,ebx
c0022b48:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022b50:	e9 5f ff ff ff       	jmp    c0022ab4 <__divdi3+0x30>
c0022b55:	8d 76 00             	lea    esi,[esi+0x0]
c0022b58:	31 f6                	xor    esi,esi
c0022b5a:	31 c9                	xor    ecx,ecx
c0022b5c:	e9 7b ff ff ff       	jmp    c0022adc <__divdi3+0x58>
c0022b61:	8d 76 00             	lea    esi,[esi+0x0]
c0022b64:	b8 20 00 00 00       	mov    eax,0x20
c0022b69:	29 f0                	sub    eax,esi
c0022b6b:	89 f1                	mov    ecx,esi
c0022b6d:	d3 e3                	shl    ebx,cl
c0022b6f:	89 fa                	mov    edx,edi
c0022b71:	88 c1                	mov    cl,al
c0022b73:	d3 ea                	shr    edx,cl
c0022b75:	09 da                	or     edx,ebx
c0022b77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b7b:	89 f1                	mov    ecx,esi
c0022b7d:	d3 e7                	shl    edi,cl
c0022b7f:	89 eb                	mov    ebx,ebp
c0022b81:	88 c1                	mov    cl,al
c0022b83:	d3 eb                	shr    ebx,cl
c0022b85:	89 f1                	mov    ecx,esi
c0022b87:	d3 e5                	shl    ebp,cl
c0022b89:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022b8c:	88 c1                	mov    cl,al
c0022b8e:	d3 ea                	shr    edx,cl
c0022b90:	09 d5                	or     ebp,edx
c0022b92:	89 e8                	mov    eax,ebp
c0022b94:	89 da                	mov    edx,ebx
c0022b96:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022b9a:	89 d3                	mov    ebx,edx
c0022b9c:	89 c5                	mov    ebp,eax
c0022b9e:	f7 e7                	mul    edi
c0022ba0:	39 d3                	cmp    ebx,edx
c0022ba2:	72 18                	jb     c0022bbc <__divdi3+0x138>
c0022ba4:	74 0a                	je     c0022bb0 <__divdi3+0x12c>
c0022ba6:	89 e9                	mov    ecx,ebp
c0022ba8:	31 f6                	xor    esi,esi
c0022baa:	e9 2d ff ff ff       	jmp    c0022adc <__divdi3+0x58>
c0022baf:	90                   	nop
c0022bb0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022bb3:	89 f1                	mov    ecx,esi
c0022bb5:	d3 e7                	shl    edi,cl
c0022bb7:	39 c7                	cmp    edi,eax
c0022bb9:	73 eb                	jae    c0022ba6 <__divdi3+0x122>
c0022bbb:	90                   	nop
c0022bbc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022bbf:	31 f6                	xor    esi,esi
c0022bc1:	e9 16 ff ff ff       	jmp    c0022adc <__divdi3+0x58>
c0022bc6:	66 90                	xchg   ax,ax
c0022bc8:	31 c9                	xor    ecx,ecx
c0022bca:	e9 0d ff ff ff       	jmp    c0022adc <__divdi3+0x58>
c0022bcf:	90                   	nop

c0022bd0 <__moddi3>:
c0022bd0:	55                   	push   ebp
c0022bd1:	57                   	push   edi
c0022bd2:	56                   	push   esi
c0022bd3:	53                   	push   ebx
c0022bd4:	83 ec 2c             	sub    esp,0x2c
c0022bd7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022bdb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022bdf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022be3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022be7:	85 db                	test   ebx,ebx
c0022be9:	0f 88 85 00 00 00    	js     c0022c74 <__moddi3+0xa4>
c0022bef:	89 de                	mov    esi,ebx
c0022bf1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022bf9:	89 d7                	mov    edi,edx
c0022bfb:	85 d2                	test   edx,edx
c0022bfd:	79 09                	jns    c0022c08 <__moddi3+0x38>
c0022bff:	f7 d8                	neg    eax
c0022c01:	83 d2 00             	adc    edx,0x0
c0022c04:	f7 da                	neg    edx
c0022c06:	89 d7                	mov    edi,edx
c0022c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022c0c:	89 cd                	mov    ebp,ecx
c0022c0e:	85 ff                	test   edi,edi
c0022c10:	75 52                	jne    c0022c64 <__moddi3+0x94>
c0022c12:	89 c3                	mov    ebx,eax
c0022c14:	39 f0                	cmp    eax,esi
c0022c16:	76 24                	jbe    c0022c3c <__moddi3+0x6c>
c0022c18:	89 c8                	mov    eax,ecx
c0022c1a:	89 f2                	mov    edx,esi
c0022c1c:	f7 f3                	div    ebx
c0022c1e:	89 d6                	mov    esi,edx
c0022c20:	89 f0                	mov    eax,esi
c0022c22:	31 d2                	xor    edx,edx
c0022c24:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022c28:	85 c9                	test   ecx,ecx
c0022c2a:	74 07                	je     c0022c33 <__moddi3+0x63>
c0022c2c:	f7 d8                	neg    eax
c0022c2e:	83 d2 00             	adc    edx,0x0
c0022c31:	f7 da                	neg    edx
c0022c33:	83 c4 2c             	add    esp,0x2c
c0022c36:	5b                   	pop    ebx
c0022c37:	5e                   	pop    esi
c0022c38:	5f                   	pop    edi
c0022c39:	5d                   	pop    ebp
c0022c3a:	c3                   	ret    
c0022c3b:	90                   	nop
c0022c3c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022c40:	85 db                	test   ebx,ebx
c0022c42:	75 0d                	jne    c0022c51 <__moddi3+0x81>
c0022c44:	b8 01 00 00 00       	mov    eax,0x1
c0022c49:	31 d2                	xor    edx,edx
c0022c4b:	f7 f7                	div    edi
c0022c4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022c51:	89 f0                	mov    eax,esi
c0022c53:	31 d2                	xor    edx,edx
c0022c55:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c59:	f7 f7                	div    edi
c0022c5b:	89 e8                	mov    eax,ebp
c0022c5d:	f7 f7                	div    edi
c0022c5f:	89 d6                	mov    esi,edx
c0022c61:	eb bd                	jmp    c0022c20 <__moddi3+0x50>
c0022c63:	90                   	nop
c0022c64:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022c68:	39 f7                	cmp    edi,esi
c0022c6a:	76 20                	jbe    c0022c8c <__moddi3+0xbc>
c0022c6c:	89 c8                	mov    eax,ecx
c0022c6e:	89 f2                	mov    edx,esi
c0022c70:	eb b2                	jmp    c0022c24 <__moddi3+0x54>
c0022c72:	66 90                	xchg   ax,ax
c0022c74:	f7 d9                	neg    ecx
c0022c76:	83 d3 00             	adc    ebx,0x0
c0022c79:	f7 db                	neg    ebx
c0022c7b:	89 de                	mov    esi,ebx
c0022c7d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022c85:	e9 6f ff ff ff       	jmp    c0022bf9 <__moddi3+0x29>
c0022c8a:	66 90                	xchg   ax,ax
c0022c8c:	0f bd c7             	bsr    eax,edi
c0022c8f:	83 f0 1f             	xor    eax,0x1f
c0022c92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c96:	75 24                	jne    c0022cbc <__moddi3+0xec>
c0022c98:	39 f7                	cmp    edi,esi
c0022c9a:	72 06                	jb     c0022ca2 <__moddi3+0xd2>
c0022c9c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022ca0:	77 0c                	ja     c0022cae <__moddi3+0xde>
c0022ca2:	89 e9                	mov    ecx,ebp
c0022ca4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022ca8:	19 fe                	sbb    esi,edi
c0022caa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022cae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022cb2:	89 f2                	mov    edx,esi
c0022cb4:	e9 6b ff ff ff       	jmp    c0022c24 <__moddi3+0x54>
c0022cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0022cbc:	b8 20 00 00 00       	mov    eax,0x20
c0022cc1:	89 c2                	mov    edx,eax
c0022cc3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022cc7:	29 da                	sub    edx,ebx
c0022cc9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022ccd:	88 d9                	mov    cl,bl
c0022ccf:	d3 e7                	shl    edi,cl
c0022cd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022cd5:	88 d1                	mov    cl,dl
c0022cd7:	d3 e8                	shr    eax,cl
c0022cd9:	09 c7                	or     edi,eax
c0022cdb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022cdf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022ce3:	89 d8                	mov    eax,ebx
c0022ce5:	88 d9                	mov    cl,bl
c0022ce7:	d3 e7                	shl    edi,cl
c0022ce9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022ced:	89 f3                	mov    ebx,esi
c0022cef:	88 d1                	mov    cl,dl
c0022cf1:	d3 eb                	shr    ebx,cl
c0022cf3:	89 c7                	mov    edi,eax
c0022cf5:	88 c1                	mov    cl,al
c0022cf7:	d3 e6                	shl    esi,cl
c0022cf9:	89 e8                	mov    eax,ebp
c0022cfb:	88 d1                	mov    cl,dl
c0022cfd:	d3 e8                	shr    eax,cl
c0022cff:	09 f0                	or     eax,esi
c0022d01:	89 f9                	mov    ecx,edi
c0022d03:	d3 e5                	shl    ebp,cl
c0022d05:	89 da                	mov    edx,ebx
c0022d07:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0022d0b:	89 d3                	mov    ebx,edx
c0022d0d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022d11:	89 c6                	mov    esi,eax
c0022d13:	89 d1                	mov    ecx,edx
c0022d15:	39 d3                	cmp    ebx,edx
c0022d17:	72 27                	jb     c0022d40 <__moddi3+0x170>
c0022d19:	74 21                	je     c0022d3c <__moddi3+0x16c>
c0022d1b:	29 f5                	sub    ebp,esi
c0022d1d:	19 cb                	sbb    ebx,ecx
c0022d1f:	89 de                	mov    esi,ebx
c0022d21:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022d25:	d3 e6                	shl    esi,cl
c0022d27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022d2b:	89 f9                	mov    ecx,edi
c0022d2d:	d3 ed                	shr    ebp,cl
c0022d2f:	09 ee                	or     esi,ebp
c0022d31:	89 f0                	mov    eax,esi
c0022d33:	d3 eb                	shr    ebx,cl
c0022d35:	89 da                	mov    edx,ebx
c0022d37:	e9 e8 fe ff ff       	jmp    c0022c24 <__moddi3+0x54>
c0022d3c:	39 c5                	cmp    ebp,eax
c0022d3e:	73 db                	jae    c0022d1b <__moddi3+0x14b>
c0022d40:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022d44:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022d48:	89 d1                	mov    ecx,edx
c0022d4a:	89 c6                	mov    esi,eax
c0022d4c:	eb cd                	jmp    c0022d1b <__moddi3+0x14b>
c0022d4e:	66 90                	xchg   ax,ax

c0022d50 <__udivdi3>:
c0022d50:	55                   	push   ebp
c0022d51:	57                   	push   edi
c0022d52:	56                   	push   esi
c0022d53:	53                   	push   ebx
c0022d54:	83 ec 1c             	sub    esp,0x1c
c0022d57:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022d5b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022d5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022d63:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022d67:	85 d2                	test   edx,edx
c0022d69:	75 41                	jne    c0022dac <__udivdi3+0x5c>
c0022d6b:	39 f7                	cmp    edi,esi
c0022d6d:	76 15                	jbe    c0022d84 <__udivdi3+0x34>
c0022d6f:	89 e8                	mov    eax,ebp
c0022d71:	89 f2                	mov    edx,esi
c0022d73:	f7 f7                	div    edi
c0022d75:	31 db                	xor    ebx,ebx
c0022d77:	89 da                	mov    edx,ebx
c0022d79:	83 c4 1c             	add    esp,0x1c
c0022d7c:	5b                   	pop    ebx
c0022d7d:	5e                   	pop    esi
c0022d7e:	5f                   	pop    edi
c0022d7f:	5d                   	pop    ebp
c0022d80:	c3                   	ret    
c0022d81:	8d 76 00             	lea    esi,[esi+0x0]
c0022d84:	89 f9                	mov    ecx,edi
c0022d86:	85 ff                	test   edi,edi
c0022d88:	75 0b                	jne    c0022d95 <__udivdi3+0x45>
c0022d8a:	b8 01 00 00 00       	mov    eax,0x1
c0022d8f:	31 d2                	xor    edx,edx
c0022d91:	f7 f7                	div    edi
c0022d93:	89 c1                	mov    ecx,eax
c0022d95:	31 d2                	xor    edx,edx
c0022d97:	89 f0                	mov    eax,esi
c0022d99:	f7 f1                	div    ecx
c0022d9b:	89 c3                	mov    ebx,eax
c0022d9d:	89 e8                	mov    eax,ebp
c0022d9f:	f7 f1                	div    ecx
c0022da1:	89 da                	mov    edx,ebx
c0022da3:	83 c4 1c             	add    esp,0x1c
c0022da6:	5b                   	pop    ebx
c0022da7:	5e                   	pop    esi
c0022da8:	5f                   	pop    edi
c0022da9:	5d                   	pop    ebp
c0022daa:	c3                   	ret    
c0022dab:	90                   	nop
c0022dac:	39 f2                	cmp    edx,esi
c0022dae:	77 1c                	ja     c0022dcc <__udivdi3+0x7c>
c0022db0:	0f bd da             	bsr    ebx,edx
c0022db3:	83 f3 1f             	xor    ebx,0x1f
c0022db6:	75 24                	jne    c0022ddc <__udivdi3+0x8c>
c0022db8:	39 f2                	cmp    edx,esi
c0022dba:	72 08                	jb     c0022dc4 <__udivdi3+0x74>
c0022dbc:	39 ef                	cmp    edi,ebp
c0022dbe:	0f 87 84 00 00 00    	ja     c0022e48 <__udivdi3+0xf8>
c0022dc4:	b8 01 00 00 00       	mov    eax,0x1
c0022dc9:	eb ac                	jmp    c0022d77 <__udivdi3+0x27>
c0022dcb:	90                   	nop
c0022dcc:	31 db                	xor    ebx,ebx
c0022dce:	31 c0                	xor    eax,eax
c0022dd0:	89 da                	mov    edx,ebx
c0022dd2:	83 c4 1c             	add    esp,0x1c
c0022dd5:	5b                   	pop    ebx
c0022dd6:	5e                   	pop    esi
c0022dd7:	5f                   	pop    edi
c0022dd8:	5d                   	pop    ebp
c0022dd9:	c3                   	ret    
c0022dda:	66 90                	xchg   ax,ax
c0022ddc:	b8 20 00 00 00       	mov    eax,0x20
c0022de1:	29 d8                	sub    eax,ebx
c0022de3:	88 d9                	mov    cl,bl
c0022de5:	d3 e2                	shl    edx,cl
c0022de7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022deb:	89 fa                	mov    edx,edi
c0022ded:	88 c1                	mov    cl,al
c0022def:	d3 ea                	shr    edx,cl
c0022df1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022df5:	09 d1                	or     ecx,edx
c0022df7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022dfb:	88 d9                	mov    cl,bl
c0022dfd:	d3 e7                	shl    edi,cl
c0022dff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022e03:	89 f7                	mov    edi,esi
c0022e05:	88 c1                	mov    cl,al
c0022e07:	d3 ef                	shr    edi,cl
c0022e09:	88 d9                	mov    cl,bl
c0022e0b:	d3 e6                	shl    esi,cl
c0022e0d:	89 ea                	mov    edx,ebp
c0022e0f:	88 c1                	mov    cl,al
c0022e11:	d3 ea                	shr    edx,cl
c0022e13:	09 d6                	or     esi,edx
c0022e15:	89 f0                	mov    eax,esi
c0022e17:	89 fa                	mov    edx,edi
c0022e19:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022e1d:	89 d7                	mov    edi,edx
c0022e1f:	89 c6                	mov    esi,eax
c0022e21:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022e25:	39 d7                	cmp    edi,edx
c0022e27:	72 13                	jb     c0022e3c <__udivdi3+0xec>
c0022e29:	74 09                	je     c0022e34 <__udivdi3+0xe4>
c0022e2b:	89 f0                	mov    eax,esi
c0022e2d:	31 db                	xor    ebx,ebx
c0022e2f:	e9 43 ff ff ff       	jmp    c0022d77 <__udivdi3+0x27>
c0022e34:	88 d9                	mov    cl,bl
c0022e36:	d3 e5                	shl    ebp,cl
c0022e38:	39 c5                	cmp    ebp,eax
c0022e3a:	73 ef                	jae    c0022e2b <__udivdi3+0xdb>
c0022e3c:	8d 46 ff             	lea    eax,[esi-0x1]
c0022e3f:	31 db                	xor    ebx,ebx
c0022e41:	e9 31 ff ff ff       	jmp    c0022d77 <__udivdi3+0x27>
c0022e46:	66 90                	xchg   ax,ax
c0022e48:	31 c0                	xor    eax,eax
c0022e4a:	e9 28 ff ff ff       	jmp    c0022d77 <__udivdi3+0x27>
c0022e4f:	90                   	nop

c0022e50 <__umoddi3>:
c0022e50:	55                   	push   ebp
c0022e51:	57                   	push   edi
c0022e52:	56                   	push   esi
c0022e53:	53                   	push   ebx
c0022e54:	83 ec 1c             	sub    esp,0x1c
c0022e57:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022e5b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022e5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022e63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022e67:	89 da                	mov    edx,ebx
c0022e69:	85 c0                	test   eax,eax
c0022e6b:	75 37                	jne    c0022ea4 <__umoddi3+0x54>
c0022e6d:	39 df                	cmp    edi,ebx
c0022e6f:	76 13                	jbe    c0022e84 <__umoddi3+0x34>
c0022e71:	89 f0                	mov    eax,esi
c0022e73:	f7 f7                	div    edi
c0022e75:	89 d0                	mov    eax,edx
c0022e77:	31 d2                	xor    edx,edx
c0022e79:	83 c4 1c             	add    esp,0x1c
c0022e7c:	5b                   	pop    ebx
c0022e7d:	5e                   	pop    esi
c0022e7e:	5f                   	pop    edi
c0022e7f:	5d                   	pop    ebp
c0022e80:	c3                   	ret    
c0022e81:	8d 76 00             	lea    esi,[esi+0x0]
c0022e84:	89 fd                	mov    ebp,edi
c0022e86:	85 ff                	test   edi,edi
c0022e88:	75 0b                	jne    c0022e95 <__umoddi3+0x45>
c0022e8a:	b8 01 00 00 00       	mov    eax,0x1
c0022e8f:	31 d2                	xor    edx,edx
c0022e91:	f7 f7                	div    edi
c0022e93:	89 c5                	mov    ebp,eax
c0022e95:	89 d8                	mov    eax,ebx
c0022e97:	31 d2                	xor    edx,edx
c0022e99:	f7 f5                	div    ebp
c0022e9b:	89 f0                	mov    eax,esi
c0022e9d:	f7 f5                	div    ebp
c0022e9f:	89 d0                	mov    eax,edx
c0022ea1:	eb d4                	jmp    c0022e77 <__umoddi3+0x27>
c0022ea3:	90                   	nop
c0022ea4:	89 f1                	mov    ecx,esi
c0022ea6:	39 d8                	cmp    eax,ebx
c0022ea8:	76 0a                	jbe    c0022eb4 <__umoddi3+0x64>
c0022eaa:	89 f0                	mov    eax,esi
c0022eac:	83 c4 1c             	add    esp,0x1c
c0022eaf:	5b                   	pop    ebx
c0022eb0:	5e                   	pop    esi
c0022eb1:	5f                   	pop    edi
c0022eb2:	5d                   	pop    ebp
c0022eb3:	c3                   	ret    
c0022eb4:	0f bd e8             	bsr    ebp,eax
c0022eb7:	83 f5 1f             	xor    ebp,0x1f
c0022eba:	75 1c                	jne    c0022ed8 <__umoddi3+0x88>
c0022ebc:	39 d8                	cmp    eax,ebx
c0022ebe:	72 04                	jb     c0022ec4 <__umoddi3+0x74>
c0022ec0:	39 f7                	cmp    edi,esi
c0022ec2:	77 08                	ja     c0022ecc <__umoddi3+0x7c>
c0022ec4:	89 da                	mov    edx,ebx
c0022ec6:	29 fe                	sub    esi,edi
c0022ec8:	19 c2                	sbb    edx,eax
c0022eca:	89 f1                	mov    ecx,esi
c0022ecc:	89 c8                	mov    eax,ecx
c0022ece:	83 c4 1c             	add    esp,0x1c
c0022ed1:	5b                   	pop    ebx
c0022ed2:	5e                   	pop    esi
c0022ed3:	5f                   	pop    edi
c0022ed4:	5d                   	pop    ebp
c0022ed5:	c3                   	ret    
c0022ed6:	66 90                	xchg   ax,ax
c0022ed8:	ba 20 00 00 00       	mov    edx,0x20
c0022edd:	29 ea                	sub    edx,ebp
c0022edf:	89 e9                	mov    ecx,ebp
c0022ee1:	d3 e0                	shl    eax,cl
c0022ee3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ee7:	89 f8                	mov    eax,edi
c0022ee9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022eed:	88 d1                	mov    cl,dl
c0022eef:	d3 e8                	shr    eax,cl
c0022ef1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022ef5:	09 c1                	or     ecx,eax
c0022ef7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022efb:	89 e9                	mov    ecx,ebp
c0022efd:	d3 e7                	shl    edi,cl
c0022eff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022f03:	89 d8                	mov    eax,ebx
c0022f05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f09:	88 d1                	mov    cl,dl
c0022f0b:	d3 e8                	shr    eax,cl
c0022f0d:	89 c7                	mov    edi,eax
c0022f0f:	89 e9                	mov    ecx,ebp
c0022f11:	d3 e3                	shl    ebx,cl
c0022f13:	89 f0                	mov    eax,esi
c0022f15:	88 d1                	mov    cl,dl
c0022f17:	d3 e8                	shr    eax,cl
c0022f19:	09 d8                	or     eax,ebx
c0022f1b:	89 e9                	mov    ecx,ebp
c0022f1d:	d3 e6                	shl    esi,cl
c0022f1f:	89 f3                	mov    ebx,esi
c0022f21:	89 fa                	mov    edx,edi
c0022f23:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022f27:	89 d1                	mov    ecx,edx
c0022f29:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022f2d:	89 c6                	mov    esi,eax
c0022f2f:	89 d7                	mov    edi,edx
c0022f31:	39 d1                	cmp    ecx,edx
c0022f33:	72 27                	jb     c0022f5c <__umoddi3+0x10c>
c0022f35:	74 21                	je     c0022f58 <__umoddi3+0x108>
c0022f37:	89 ca                	mov    edx,ecx
c0022f39:	29 f3                	sub    ebx,esi
c0022f3b:	19 fa                	sbb    edx,edi
c0022f3d:	89 d0                	mov    eax,edx
c0022f3f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022f43:	d3 e0                	shl    eax,cl
c0022f45:	89 e9                	mov    ecx,ebp
c0022f47:	d3 eb                	shr    ebx,cl
c0022f49:	09 d8                	or     eax,ebx
c0022f4b:	d3 ea                	shr    edx,cl
c0022f4d:	83 c4 1c             	add    esp,0x1c
c0022f50:	5b                   	pop    ebx
c0022f51:	5e                   	pop    esi
c0022f52:	5f                   	pop    edi
c0022f53:	5d                   	pop    ebp
c0022f54:	c3                   	ret    
c0022f55:	8d 76 00             	lea    esi,[esi+0x0]
c0022f58:	39 c3                	cmp    ebx,eax
c0022f5a:	73 db                	jae    c0022f37 <__umoddi3+0xe7>
c0022f5c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022f60:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022f64:	89 d7                	mov    edi,edx
c0022f66:	89 c6                	mov    esi,eax
c0022f68:	eb cd                	jmp    c0022f37 <__umoddi3+0xe7>

Disassembly of section .init:

c0022f6a <_init>:
c0022f6a:	55                   	push   ebp
c0022f6b:	89 e5                	mov    ebp,esp
c0022f6d:	e8 a6 d1 fd ff       	call   c0000118 <frame_dummy>
c0022f72:	e8 e5 fa ff ff       	call   c0022a5c <__do_global_ctors_aux>
c0022f77:	5d                   	pop    ebp
c0022f78:	c3                   	ret    

Disassembly of section .fini:

c0022f79 <_fini>:
c0022f79:	55                   	push   ebp
c0022f7a:	89 e5                	mov    ebp,esp
c0022f7c:	e8 27 d1 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022f81:	5d                   	pop    ebp
c0022f82:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022f84 <Computer::~Computer()>:
c0022f84:	83 ec 0c             	sub    esp,0xc
c0022f87:	ba 00 47 02 c0       	mov    edx,0xc0024700
c0022f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f90:	89 10                	mov    DWORD PTR [eax],edx
c0022f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f96:	83 ec 0c             	sub    esp,0xc
c0022f99:	50                   	push   eax
c0022f9a:	e8 e9 b4 fe ff       	call   c000e488 <Device::~Device()>
c0022f9f:	83 c4 10             	add    esp,0x10
c0022fa2:	90                   	nop
c0022fa3:	83 c4 0c             	add    esp,0xc
c0022fa6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0022fa8 <Computer::~Computer()>:
c0022fa8:	83 ec 0c             	sub    esp,0xc
c0022fab:	83 ec 0c             	sub    esp,0xc
c0022fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fb2:	e8 cd ff ff ff       	call   c0022f84 <Computer::~Computer()>
c0022fb7:	83 c4 10             	add    esp,0x10
c0022fba:	83 ec 08             	sub    esp,0x8
c0022fbd:	68 ec 01 00 00       	push   0x1ec
c0022fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fc6:	e8 9b 9f fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0022fcb:	83 c4 10             	add    esp,0x10
c0022fce:	83 c4 0c             	add    esp,0xc
c0022fd1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022fd2 <idleCommon()>:
c0022fd2:	83 ec 0c             	sub    esp,0xc
c0022fd5:	fa                   	cli    
c0022fd6:	ff 05 48 9e 02 c0    	inc    DWORD PTR ds:0xc0029e48
c0022fdc:	e8 ef 5c ff ff       	call   c0018cd0 <schedule()>
c0022fe1:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c0022fe6:	48                   	dec    eax
c0022fe7:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c0022fec:	75 01                	jne    c0022fef <idleCommon()+0x1d>
c0022fee:	fb                   	sti    
c0022fef:	83 c4 0c             	add    esp,0xc
c0022ff2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022ff4 <LinkedList<UnixFile>::~LinkedList()>:
c0022ff4:	90                   	nop
c0022ff5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0022ff6 <LinkedList<UnixFile>::LinkedList()>:
c0022ff6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ffa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023004:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002300b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002300f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002301a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023024:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002302b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002302f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023036:	90                   	nop
c0023037:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0023038 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0023038:	83 ec 0c             	sub    esp,0xc
c002303b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023040:	75 10                	jne    c0023052 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0023042:	83 ec 0c             	sub    esp,0xc
c0023045:	68 d0 4a 02 c0       	push   0xc0024ad0
c002304a:	e8 76 20 ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c002304f:	83 c4 10             	add    esp,0x10
c0023052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023056:	8b 00                	mov    eax,DWORD PTR [eax]
c0023058:	85 c0                	test   eax,eax
c002305a:	74 34                	je     c0023090 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002305c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023060:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023063:	85 c0                	test   eax,eax
c0023065:	74 29                	je     c0023090 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0023067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002306b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002306e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023072:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023079:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002307d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023087:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002308e:	eb 65                	jmp    c00230f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023094:	8b 00                	mov    eax,DWORD PTR [eax]
c0023096:	85 c0                	test   eax,eax
c0023098:	75 4b                	jne    c00230e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002309a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002309e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00230a1:	85 c0                	test   eax,eax
c00230a3:	75 40                	jne    c00230e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00230a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00230ad:	89 10                	mov    DWORD PTR [eax],edx
c00230af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00230b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00230ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00230c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00230c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00230cf:	85 c0                	test   eax,eax
c00230d1:	74 22                	je     c00230f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00230d3:	83 ec 0c             	sub    esp,0xc
c00230d6:	68 f2 4a 02 c0       	push   0xc0024af2
c00230db:	e8 e5 1f ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00230e0:	83 c4 10             	add    esp,0x10
c00230e3:	eb 10                	jmp    c00230f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00230e5:	83 ec 0c             	sub    esp,0xc
c00230e8:	68 fc 4a 02 c0       	push   0xc0024afc
c00230ed:	e8 d3 1f ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00230f2:	83 c4 10             	add    esp,0x10
c00230f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00230fc:	8d 50 01             	lea    edx,[eax+0x1]
c00230ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023103:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023106:	90                   	nop
c0023107:	83 c4 0c             	add    esp,0xc
c002310a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002310c <LinkedList<UnixFile>::getFirstElement()>:
c002310c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023110:	8b 00                	mov    eax,DWORD PTR [eax]
c0023112:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0023114 <LinkedList<UnixFile>::removeFirst()>:
c0023114:	83 ec 0c             	sub    esp,0xc
c0023117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002311b:	8b 00                	mov    eax,DWORD PTR [eax]
c002311d:	85 c0                	test   eax,eax
c002311f:	75 12                	jne    c0023133 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0023121:	83 ec 0c             	sub    esp,0xc
c0023124:	68 08 4b 02 c0       	push   0xc0024b08
c0023129:	e8 97 1f ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c002312e:	83 c4 10             	add    esp,0x10
c0023131:	eb 7e                	jmp    c00231b1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0023133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023137:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002313a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002313d:	85 c0                	test   eax,eax
c002313f:	74 10                	je     c0023151 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0023141:	83 ec 0c             	sub    esp,0xc
c0023144:	68 53 4b 02 c0       	push   0xc0024b53
c0023149:	e8 77 1f ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c002314e:	83 c4 10             	add    esp,0x10
c0023151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023155:	8b 00                	mov    eax,DWORD PTR [eax]
c0023157:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002315a:	85 c0                	test   eax,eax
c002315c:	75 33                	jne    c0023191 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002315e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023162:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002316c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023177:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002317a:	83 f8 01             	cmp    eax,0x1
c002317d:	74 21                	je     c00231a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002317f:	83 ec 0c             	sub    esp,0xc
c0023182:	68 2c 4b 02 c0       	push   0xc0024b2c
c0023187:	e8 39 1f ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c002318c:	83 c4 10             	add    esp,0x10
c002318f:	eb 0f                	jmp    c00231a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0023191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023195:	8b 00                	mov    eax,DWORD PTR [eax]
c0023197:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002319a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002319e:	89 10                	mov    DWORD PTR [eax],edx
c00231a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00231a7:	8d 50 ff             	lea    edx,[eax-0x1]
c00231aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00231b1:	83 c4 0c             	add    esp,0xc
c00231b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00231b6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00231b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00231ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00231bd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00231be <DriverlessDevice::~DriverlessDevice()>:
c00231be:	ba 7c 53 02 c0       	mov    edx,0xc002537c
c00231c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00231c7:	89 10                	mov    DWORD PTR [eax],edx
c00231c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00231cd:	50                   	push   eax
c00231ce:	e8 b5 b2 fe ff       	call   c000e488 <Device::~Device()>
c00231d3:	83 c4 04             	add    esp,0x4
c00231d6:	90                   	nop
c00231d7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00231d8 <DriverlessDevice::~DriverlessDevice()>:
c00231d8:	83 ec 0c             	sub    esp,0xc
c00231db:	83 ec 0c             	sub    esp,0xc
c00231de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231e2:	e8 d7 ff ff ff       	call   c00231be <DriverlessDevice::~DriverlessDevice()>
c00231e7:	83 c4 10             	add    esp,0x10
c00231ea:	83 ec 08             	sub    esp,0x8
c00231ed:	68 58 01 00 00       	push   0x158
c00231f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231f6:	e8 6b 9d fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00231fb:	83 c4 10             	add    esp,0x10
c00231fe:	83 c4 0c             	add    esp,0xc
c0023201:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0023202 <LinkedList<Device>::addElement(Device*)>:
c0023202:	83 ec 0c             	sub    esp,0xc
c0023205:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002320a:	75 10                	jne    c002321c <LinkedList<Device>::addElement(Device*)+0x1a>
c002320c:	83 ec 0c             	sub    esp,0xc
c002320f:	68 d0 4a 02 c0       	push   0xc0024ad0
c0023214:	e8 ac 1e ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0023219:	83 c4 10             	add    esp,0x10
c002321c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023220:	8b 00                	mov    eax,DWORD PTR [eax]
c0023222:	85 c0                	test   eax,eax
c0023224:	74 3a                	je     c0023260 <LinkedList<Device>::addElement(Device*)+0x5e>
c0023226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002322a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002322d:	85 c0                	test   eax,eax
c002322f:	74 2f                	je     c0023260 <LinkedList<Device>::addElement(Device*)+0x5e>
c0023231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023235:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023238:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002323c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0023242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023246:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002324a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002324d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023251:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023254:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002325e:	eb 68                	jmp    c00232c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023264:	8b 00                	mov    eax,DWORD PTR [eax]
c0023266:	85 c0                	test   eax,eax
c0023268:	75 4e                	jne    c00232b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002326a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002326e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023271:	85 c0                	test   eax,eax
c0023273:	75 43                	jne    c00232b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c0023275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023279:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002327d:	89 10                	mov    DWORD PTR [eax],edx
c002327f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023283:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023287:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002328a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002328e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023291:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002329b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002329f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00232a2:	85 c0                	test   eax,eax
c00232a4:	74 22                	je     c00232c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c00232a6:	83 ec 0c             	sub    esp,0xc
c00232a9:	68 f2 4a 02 c0       	push   0xc0024af2
c00232ae:	e8 12 1e ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00232b3:	83 c4 10             	add    esp,0x10
c00232b6:	eb 10                	jmp    c00232c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c00232b8:	83 ec 0c             	sub    esp,0xc
c00232bb:	68 fc 4a 02 c0       	push   0xc0024afc
c00232c0:	e8 00 1e ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00232c5:	83 c4 10             	add    esp,0x10
c00232c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00232cf:	8d 50 01             	lea    edx,[eax+0x1]
c00232d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00232d9:	90                   	nop
c00232da:	83 c4 0c             	add    esp,0xc
c00232dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00232de <LinkedList<Device>::LinkedList()>:
c00232de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00232e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00232f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00232fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023302:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002330c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023313:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023317:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002331e:	90                   	nop
c002331f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0023320 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0023320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023324:	8b 00                	mov    eax,DWORD PTR [eax]
c0023326:	85 c0                	test   eax,eax
c0023328:	75 0e                	jne    c0023338 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002332a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002332e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023331:	85 c0                	test   eax,eax
c0023333:	75 03                	jne    c0023338 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0023335:	b0 01                	mov    al,0x1
c0023337:	c3                   	ret    
c0023338:	b0 00                	mov    al,0x0
c002333a:	90                   	nop
c002333b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002333c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002333c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023340:	8b 00                	mov    eax,DWORD PTR [eax]
c0023342:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0023344 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0023344:	83 ec 0c             	sub    esp,0xc
c0023347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002334b:	8b 00                	mov    eax,DWORD PTR [eax]
c002334d:	85 c0                	test   eax,eax
c002334f:	75 17                	jne    c0023368 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0023351:	83 ec 0c             	sub    esp,0xc
c0023354:	68 08 4b 02 c0       	push   0xc0024b08
c0023359:	e8 67 1d ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c002335e:	83 c4 10             	add    esp,0x10
c0023361:	e9 92 00 00 00       	jmp    c00233f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0023366:	66 90                	xchg   ax,ax
c0023368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002336c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002336f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023372:	85 c0                	test   eax,eax
c0023374:	0f 95 c0             	setne  al
c0023377:	84 c0                	test   al,al
c0023379:	74 11                	je     c002338c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c002337b:	83 ec 0c             	sub    esp,0xc
c002337e:	68 53 4b 02 c0       	push   0xc0024b53
c0023383:	e8 3d 1d ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0023388:	83 c4 10             	add    esp,0x10
c002338b:	90                   	nop
c002338c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023390:	8b 00                	mov    eax,DWORD PTR [eax]
c0023392:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023395:	85 c0                	test   eax,eax
c0023397:	0f 94 c0             	sete   al
c002339a:	84 c0                	test   al,al
c002339c:	74 36                	je     c00233d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c002339e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00233a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00233b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233ba:	83 f8 01             	cmp    eax,0x1
c00233bd:	74 25                	je     c00233e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00233bf:	83 ec 0c             	sub    esp,0xc
c00233c2:	68 2c 4b 02 c0       	push   0xc0024b2c
c00233c7:	e8 f9 1c ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00233cc:	83 c4 10             	add    esp,0x10
c00233cf:	eb 13                	jmp    c00233e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00233d1:	8d 76 00             	lea    esi,[esi+0x0]
c00233d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00233da:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00233dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233e1:	89 10                	mov    DWORD PTR [eax],edx
c00233e3:	90                   	nop
c00233e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233eb:	8d 50 ff             	lea    edx,[eax-0x1]
c00233ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00233f5:	8d 76 00             	lea    esi,[esi+0x0]
c00233f8:	83 c4 0c             	add    esp,0xc
c00233fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00233fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00233fc:	83 ec 0c             	sub    esp,0xc
c00233ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023404:	75 12                	jne    c0023418 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0023406:	83 ec 0c             	sub    esp,0xc
c0023409:	68 d0 4a 02 c0       	push   0xc0024ad0
c002340e:	e8 b2 1c ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0023413:	83 c4 10             	add    esp,0x10
c0023416:	66 90                	xchg   ax,ax
c0023418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002341c:	8b 00                	mov    eax,DWORD PTR [eax]
c002341e:	85 c0                	test   eax,eax
c0023420:	74 36                	je     c0023458 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0023422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023426:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023429:	85 c0                	test   eax,eax
c002342b:	74 2b                	je     c0023458 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002342d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023431:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023434:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023438:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002343b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002343f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023443:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002344a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002344d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023454:	eb 6a                	jmp    c00234c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0023456:	66 90                	xchg   ax,ax
c0023458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002345c:	8b 00                	mov    eax,DWORD PTR [eax]
c002345e:	85 c0                	test   eax,eax
c0023460:	75 4e                	jne    c00234b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0023462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023469:	85 c0                	test   eax,eax
c002346b:	75 43                	jne    c00234b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002346d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023475:	89 10                	mov    DWORD PTR [eax],edx
c0023477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002347b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002347f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023486:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023489:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023494:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023497:	85 c0                	test   eax,eax
c0023499:	74 25                	je     c00234c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002349b:	83 ec 0c             	sub    esp,0xc
c002349e:	68 f2 4a 02 c0       	push   0xc0024af2
c00234a3:	e8 1d 1c ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00234a8:	83 c4 10             	add    esp,0x10
c00234ab:	eb 13                	jmp    c00234c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00234ad:	8d 76 00             	lea    esi,[esi+0x0]
c00234b0:	83 ec 0c             	sub    esp,0xc
c00234b3:	68 fc 4a 02 c0       	push   0xc0024afc
c00234b8:	e8 08 1c ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00234bd:	83 c4 10             	add    esp,0x10
c00234c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234c7:	8d 50 01             	lea    edx,[eax+0x1]
c00234ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00234d1:	90                   	nop
c00234d2:	83 c4 0c             	add    esp,0xc
c00234d5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00234d8 <ACPI::~ACPI()>:
c00234d8:	83 ec 0c             	sub    esp,0xc
c00234db:	ba a4 5e 02 c0       	mov    edx,0xc0025ea4
c00234e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234e4:	89 10                	mov    DWORD PTR [eax],edx
c00234e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ea:	83 ec 0c             	sub    esp,0xc
c00234ed:	50                   	push   eax
c00234ee:	e8 95 af fe ff       	call   c000e488 <Device::~Device()>
c00234f3:	83 c4 10             	add    esp,0x10
c00234f6:	90                   	nop
c00234f7:	83 c4 0c             	add    esp,0xc
c00234fa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00234fc <ACPI::~ACPI()>:
c00234fc:	83 ec 0c             	sub    esp,0xc
c00234ff:	83 ec 0c             	sub    esp,0xc
c0023502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023506:	e8 cd ff ff ff       	call   c00234d8 <ACPI::~ACPI()>
c002350b:	83 c4 10             	add    esp,0x10
c002350e:	83 ec 08             	sub    esp,0x8
c0023511:	68 64 12 00 00       	push   0x1264
c0023516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002351a:	e8 47 9a fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c002351f:	83 c4 10             	add    esp,0x10
c0023522:	83 c4 0c             	add    esp,0xc
c0023525:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0023528 <LinkedList<Device>::~LinkedList()>:
c0023528:	90                   	nop
c0023529:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002352c <LinkedList<Device>::isEmpty()>:
c002352c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023530:	8b 00                	mov    eax,DWORD PTR [eax]
c0023532:	85 c0                	test   eax,eax
c0023534:	75 0e                	jne    c0023544 <LinkedList<Device>::isEmpty()+0x18>
c0023536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002353a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002353d:	85 c0                	test   eax,eax
c002353f:	75 03                	jne    c0023544 <LinkedList<Device>::isEmpty()+0x18>
c0023541:	b0 01                	mov    al,0x1
c0023543:	c3                   	ret    
c0023544:	b0 00                	mov    al,0x0
c0023546:	90                   	nop
c0023547:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0023548 <LinkedList<Device>::getFirstElement()>:
c0023548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002354c:	8b 00                	mov    eax,DWORD PTR [eax]
c002354e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0023550 <LinkedList<Device>::removeFirst()>:
c0023550:	83 ec 0c             	sub    esp,0xc
c0023553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023557:	8b 00                	mov    eax,DWORD PTR [eax]
c0023559:	85 c0                	test   eax,eax
c002355b:	75 17                	jne    c0023574 <LinkedList<Device>::removeFirst()+0x24>
c002355d:	83 ec 0c             	sub    esp,0xc
c0023560:	68 08 4b 02 c0       	push   0xc0024b08
c0023565:	e8 5b 1b ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c002356a:	83 c4 10             	add    esp,0x10
c002356d:	e9 92 00 00 00       	jmp    c0023604 <LinkedList<Device>::removeFirst()+0xb4>
c0023572:	66 90                	xchg   ax,ax
c0023574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002357b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023581:	85 c0                	test   eax,eax
c0023583:	74 13                	je     c0023598 <LinkedList<Device>::removeFirst()+0x48>
c0023585:	83 ec 0c             	sub    esp,0xc
c0023588:	68 53 4b 02 c0       	push   0xc0024b53
c002358d:	e8 33 1b ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c0023592:	83 c4 10             	add    esp,0x10
c0023595:	8d 76 00             	lea    esi,[esi+0x0]
c0023598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002359c:	8b 00                	mov    eax,DWORD PTR [eax]
c002359e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00235a4:	85 c0                	test   eax,eax
c00235a6:	75 34                	jne    c00235dc <LinkedList<Device>::removeFirst()+0x8c>
c00235a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00235b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00235bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00235c4:	83 f8 01             	cmp    eax,0x1
c00235c7:	74 27                	je     c00235f0 <LinkedList<Device>::removeFirst()+0xa0>
c00235c9:	83 ec 0c             	sub    esp,0xc
c00235cc:	68 2c 4b 02 c0       	push   0xc0024b2c
c00235d1:	e8 ef 1a ff ff       	call   c00150c5 <Krnl::panic(char const*)>
c00235d6:	83 c4 10             	add    esp,0x10
c00235d9:	eb 15                	jmp    c00235f0 <LinkedList<Device>::removeFirst()+0xa0>
c00235db:	90                   	nop
c00235dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00235e2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00235e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ec:	89 10                	mov    DWORD PTR [eax],edx
c00235ee:	66 90                	xchg   ax,ax
c00235f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00235f7:	8d 50 ff             	lea    edx,[eax-0x1]
c00235fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023601:	8d 76 00             	lea    esi,[esi+0x0]
c0023604:	83 c4 0c             	add    esp,0xc
c0023607:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0023608 <CPU::~CPU()>:
c0023608:	83 ec 0c             	sub    esp,0xc
c002360b:	ba 34 64 02 c0       	mov    edx,0xc0026434
c0023610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023614:	89 10                	mov    DWORD PTR [eax],edx
c0023616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002361a:	83 ec 0c             	sub    esp,0xc
c002361d:	50                   	push   eax
c002361e:	e8 65 ae fe ff       	call   c000e488 <Device::~Device()>
c0023623:	83 c4 10             	add    esp,0x10
c0023626:	90                   	nop
c0023627:	83 c4 0c             	add    esp,0xc
c002362a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002362c <CPU::~CPU()>:
c002362c:	83 ec 0c             	sub    esp,0xc
c002362f:	83 ec 0c             	sub    esp,0xc
c0023632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023636:	e8 cd ff ff ff       	call   c0023608 <CPU::~CPU()>
c002363b:	83 c4 10             	add    esp,0x10
c002363e:	83 ec 08             	sub    esp,0x8
c0023641:	68 98 11 00 00       	push   0x1198
c0023646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002364a:	e8 17 99 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c002364f:	83 c4 10             	add    esp,0x10
c0023652:	83 c4 0c             	add    esp,0xc
c0023655:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0023658 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0023658:	90                   	nop
c0023659:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002365c <ThreadControlBlock::ThreadControlBlock()>:
c002365c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023660:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023667:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002366b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0023672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023676:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002367d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023681:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0023688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002368c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0023693:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023697:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002369b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002369f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00236a3:	90                   	nop
c00236a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00236a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00236a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00236ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00236b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00236b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00236bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00236c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00236c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00236cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00236d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00236d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00236dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00236e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00236e8:	90                   	nop
c00236e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00236ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00236ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00236f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00236f3:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00236f4 <Vm::_FPUState::_FPUState()>:
c00236f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00236f8:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00236ff:	90                   	nop
c0023700:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023702 <PCI::~PCI()>:
c0023702:	83 ec 0c             	sub    esp,0xc
c0023705:	ba 20 72 02 c0       	mov    edx,0xc0027220
c002370a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002370e:	89 10                	mov    DWORD PTR [eax],edx
c0023710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023714:	83 ec 0c             	sub    esp,0xc
c0023717:	50                   	push   eax
c0023718:	e8 3b a7 fe ff       	call   c000de58 <Bus::~Bus()>
c002371d:	83 c4 10             	add    esp,0x10
c0023720:	90                   	nop
c0023721:	83 c4 0c             	add    esp,0xc
c0023724:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0023726 <PCI::~PCI()>:
c0023726:	83 ec 0c             	sub    esp,0xc
c0023729:	83 ec 0c             	sub    esp,0xc
c002372c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023730:	e8 cd ff ff ff       	call   c0023702 <PCI::~PCI()>
c0023735:	83 c4 10             	add    esp,0x10
c0023738:	83 ec 08             	sub    esp,0x8
c002373b:	68 5c 01 00 00       	push   0x15c
c0023740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023744:	e8 1d 98 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023749:	83 c4 10             	add    esp,0x10
c002374c:	83 c4 0c             	add    esp,0xc
c002374f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0023750 <IDE::~IDE()>:
c0023750:	83 ec 0c             	sub    esp,0xc
c0023753:	ba d4 72 02 c0       	mov    edx,0xc00272d4
c0023758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002375c:	89 10                	mov    DWORD PTR [eax],edx
c002375e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023762:	83 ec 0c             	sub    esp,0xc
c0023765:	50                   	push   eax
c0023766:	e8 35 b2 fe ff       	call   c000e9a0 <HardDiskController::~HardDiskController()>
c002376b:	83 c4 10             	add    esp,0x10
c002376e:	90                   	nop
c002376f:	83 c4 0c             	add    esp,0xc
c0023772:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023774 <IDE::~IDE()>:
c0023774:	83 ec 0c             	sub    esp,0xc
c0023777:	83 ec 0c             	sub    esp,0xc
c002377a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002377e:	e8 cd ff ff ff       	call   c0023750 <IDE::~IDE()>
c0023783:	83 c4 10             	add    esp,0x10
c0023786:	83 ec 08             	sub    esp,0x8
c0023789:	68 70 02 00 00       	push   0x270
c002378e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023792:	e8 cf 97 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023797:	83 c4 10             	add    esp,0x10
c002379a:	83 c4 0c             	add    esp,0xc
c002379d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002379e <SATABus::~SATABus()>:
c002379e:	83 ec 0c             	sub    esp,0xc
c00237a1:	ba 90 73 02 c0       	mov    edx,0xc0027390
c00237a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237aa:	89 10                	mov    DWORD PTR [eax],edx
c00237ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237b0:	83 ec 0c             	sub    esp,0xc
c00237b3:	50                   	push   eax
c00237b4:	e8 e7 b1 fe ff       	call   c000e9a0 <HardDiskController::~HardDiskController()>
c00237b9:	83 c4 10             	add    esp,0x10
c00237bc:	90                   	nop
c00237bd:	83 c4 0c             	add    esp,0xc
c00237c0:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00237c2 <SATABus::~SATABus()>:
c00237c2:	83 ec 0c             	sub    esp,0xc
c00237c5:	83 ec 0c             	sub    esp,0xc
c00237c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237cc:	e8 cd ff ff ff       	call   c002379e <SATABus::~SATABus()>
c00237d1:	83 c4 10             	add    esp,0x10
c00237d4:	83 ec 08             	sub    esp,0x8
c00237d7:	68 64 01 00 00       	push   0x164
c00237dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237e0:	e8 81 97 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00237e5:	83 c4 10             	add    esp,0x10
c00237e8:	83 c4 0c             	add    esp,0xc
c00237eb:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00237ec <ATA::~ATA()>:
c00237ec:	83 ec 0c             	sub    esp,0xc
c00237ef:	ba 08 74 02 c0       	mov    edx,0xc0027408
c00237f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237f8:	89 10                	mov    DWORD PTR [eax],edx
c00237fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237fe:	83 ec 0c             	sub    esp,0xc
c0023801:	50                   	push   eax
c0023802:	e8 7b b2 fe ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c0023807:	83 c4 10             	add    esp,0x10
c002380a:	90                   	nop
c002380b:	83 c4 0c             	add    esp,0xc
c002380e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023810 <ATA::~ATA()>:
c0023810:	83 ec 0c             	sub    esp,0xc
c0023813:	83 ec 0c             	sub    esp,0xc
c0023816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002381a:	e8 cd ff ff ff       	call   c00237ec <ATA::~ATA()>
c002381f:	83 c4 10             	add    esp,0x10
c0023822:	83 ec 08             	sub    esp,0x8
c0023825:	68 7c 01 00 00       	push   0x17c
c002382a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002382e:	e8 33 97 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023833:	83 c4 10             	add    esp,0x10
c0023836:	83 c4 0c             	add    esp,0xc
c0023839:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002383a <ATAPI::~ATAPI()>:
c002383a:	83 ec 0c             	sub    esp,0xc
c002383d:	ba 6c 74 02 c0       	mov    edx,0xc002746c
c0023842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023846:	89 10                	mov    DWORD PTR [eax],edx
c0023848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002384c:	83 ec 0c             	sub    esp,0xc
c002384f:	50                   	push   eax
c0023850:	e8 2d b2 fe ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c0023855:	83 c4 10             	add    esp,0x10
c0023858:	90                   	nop
c0023859:	83 c4 0c             	add    esp,0xc
c002385c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002385e <ATAPI::~ATAPI()>:
c002385e:	83 ec 0c             	sub    esp,0xc
c0023861:	83 ec 0c             	sub    esp,0xc
c0023864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023868:	e8 cd ff ff ff       	call   c002383a <ATAPI::~ATAPI()>
c002386d:	83 c4 10             	add    esp,0x10
c0023870:	83 ec 08             	sub    esp,0x8
c0023873:	68 84 01 00 00       	push   0x184
c0023878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002387c:	e8 e5 96 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023881:	83 c4 10             	add    esp,0x10
c0023884:	83 c4 0c             	add    esp,0xc
c0023887:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023888 <SATA::~SATA()>:
c0023888:	83 ec 0c             	sub    esp,0xc
c002388b:	ba a8 76 02 c0       	mov    edx,0xc00276a8
c0023890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023894:	89 10                	mov    DWORD PTR [eax],edx
c0023896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002389a:	83 ec 0c             	sub    esp,0xc
c002389d:	50                   	push   eax
c002389e:	e8 df b1 fe ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c00238a3:	83 c4 10             	add    esp,0x10
c00238a6:	90                   	nop
c00238a7:	83 c4 0c             	add    esp,0xc
c00238aa:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00238ac <SATA::~SATA()>:
c00238ac:	83 ec 0c             	sub    esp,0xc
c00238af:	83 ec 0c             	sub    esp,0xc
c00238b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238b6:	e8 cd ff ff ff       	call   c0023888 <SATA::~SATA()>
c00238bb:	83 c4 10             	add    esp,0x10
c00238be:	83 ec 08             	sub    esp,0x8
c00238c1:	68 7c 01 00 00       	push   0x17c
c00238c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238ca:	e8 97 96 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00238cf:	83 c4 10             	add    esp,0x10
c00238d2:	83 c4 0c             	add    esp,0xc
c00238d5:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00238d6 <SATAPI::~SATAPI()>:
c00238d6:	83 ec 0c             	sub    esp,0xc
c00238d9:	ba 14 78 02 c0       	mov    edx,0xc0027814
c00238de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238e2:	89 10                	mov    DWORD PTR [eax],edx
c00238e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238e8:	83 ec 0c             	sub    esp,0xc
c00238eb:	50                   	push   eax
c00238ec:	e8 91 b1 fe ff       	call   c000ea82 <PhysicalDisk::~PhysicalDisk()>
c00238f1:	83 c4 10             	add    esp,0x10
c00238f4:	90                   	nop
c00238f5:	83 c4 0c             	add    esp,0xc
c00238f8:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00238fa <SATAPI::~SATAPI()>:
c00238fa:	83 ec 0c             	sub    esp,0xc
c00238fd:	83 ec 0c             	sub    esp,0xc
c0023900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023904:	e8 cd ff ff ff       	call   c00238d6 <SATAPI::~SATAPI()>
c0023909:	83 c4 10             	add    esp,0x10
c002390c:	83 ec 08             	sub    esp,0x8
c002390f:	68 84 01 00 00       	push   0x184
c0023914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023918:	e8 49 96 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c002391d:	83 c4 10             	add    esp,0x10
c0023920:	83 c4 0c             	add    esp,0xc
c0023923:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023924 <AVX::~AVX()>:
c0023924:	83 ec 0c             	sub    esp,0xc
c0023927:	ba 54 78 02 c0       	mov    edx,0xc0027854
c002392c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023930:	89 10                	mov    DWORD PTR [eax],edx
c0023932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023936:	83 ec 0c             	sub    esp,0xc
c0023939:	50                   	push   eax
c002393a:	e8 c9 b1 fe ff       	call   c000eb08 <FPU::~FPU()>
c002393f:	83 c4 10             	add    esp,0x10
c0023942:	90                   	nop
c0023943:	83 c4 0c             	add    esp,0xc
c0023946:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0023948 <AVX::~AVX()>:
c0023948:	83 ec 0c             	sub    esp,0xc
c002394b:	83 ec 0c             	sub    esp,0xc
c002394e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023952:	e8 cd ff ff ff       	call   c0023924 <AVX::~AVX()>
c0023957:	83 c4 10             	add    esp,0x10
c002395a:	83 ec 08             	sub    esp,0x8
c002395d:	68 58 01 00 00       	push   0x158
c0023962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023966:	e8 fb 95 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c002396b:	83 c4 10             	add    esp,0x10
c002396e:	83 c4 0c             	add    esp,0xc
c0023971:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023974 <MMX::~MMX()>:
c0023974:	83 ec 0c             	sub    esp,0xc
c0023977:	ba 94 78 02 c0       	mov    edx,0xc0027894
c002397c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023980:	89 10                	mov    DWORD PTR [eax],edx
c0023982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023986:	83 ec 0c             	sub    esp,0xc
c0023989:	50                   	push   eax
c002398a:	e8 79 b1 fe ff       	call   c000eb08 <FPU::~FPU()>
c002398f:	83 c4 10             	add    esp,0x10
c0023992:	90                   	nop
c0023993:	83 c4 0c             	add    esp,0xc
c0023996:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0023998 <MMX::~MMX()>:
c0023998:	83 ec 0c             	sub    esp,0xc
c002399b:	83 ec 0c             	sub    esp,0xc
c002399e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239a2:	e8 cd ff ff ff       	call   c0023974 <MMX::~MMX()>
c00239a7:	83 c4 10             	add    esp,0x10
c00239aa:	83 ec 08             	sub    esp,0x8
c00239ad:	68 58 01 00 00       	push   0x158
c00239b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239b6:	e8 ab 95 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c00239bb:	83 c4 10             	add    esp,0x10
c00239be:	83 c4 0c             	add    esp,0xc
c00239c1:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00239c4 <SSE::~SSE()>:
c00239c4:	83 ec 0c             	sub    esp,0xc
c00239c7:	ba d4 78 02 c0       	mov    edx,0xc00278d4
c00239cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239d0:	89 10                	mov    DWORD PTR [eax],edx
c00239d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239d6:	83 ec 0c             	sub    esp,0xc
c00239d9:	50                   	push   eax
c00239da:	e8 29 b1 fe ff       	call   c000eb08 <FPU::~FPU()>
c00239df:	83 c4 10             	add    esp,0x10
c00239e2:	90                   	nop
c00239e3:	83 c4 0c             	add    esp,0xc
c00239e6:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00239e8 <SSE::~SSE()>:
c00239e8:	83 ec 0c             	sub    esp,0xc
c00239eb:	83 ec 0c             	sub    esp,0xc
c00239ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239f2:	e8 cd ff ff ff       	call   c00239c4 <SSE::~SSE()>
c00239f7:	83 c4 10             	add    esp,0x10
c00239fa:	83 ec 08             	sub    esp,0x8
c00239fd:	68 58 01 00 00       	push   0x158
c0023a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a06:	e8 5b 95 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023a0b:	83 c4 10             	add    esp,0x10
c0023a0e:	83 c4 0c             	add    esp,0xc
c0023a11:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023a12 <x87::~x87()>:
c0023a12:	83 ec 0c             	sub    esp,0xc
c0023a15:	ba 14 79 02 c0       	mov    edx,0xc0027914
c0023a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a1e:	89 10                	mov    DWORD PTR [eax],edx
c0023a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a24:	83 ec 0c             	sub    esp,0xc
c0023a27:	50                   	push   eax
c0023a28:	e8 db b0 fe ff       	call   c000eb08 <FPU::~FPU()>
c0023a2d:	83 c4 10             	add    esp,0x10
c0023a30:	90                   	nop
c0023a31:	83 c4 0c             	add    esp,0xc
c0023a34:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0023a36 <x87::~x87()>:
c0023a36:	83 ec 0c             	sub    esp,0xc
c0023a39:	83 ec 0c             	sub    esp,0xc
c0023a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a40:	e8 cd ff ff ff       	call   c0023a12 <x87::~x87()>
c0023a45:	83 c4 10             	add    esp,0x10
c0023a48:	83 ec 08             	sub    esp,0x8
c0023a4b:	68 58 01 00 00       	push   0x158
c0023a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a54:	e8 0d 95 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023a59:	83 c4 10             	add    esp,0x10
c0023a5c:	83 c4 0c             	add    esp,0xc
c0023a5f:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023a60 <IOAPIC::~IOAPIC()>:
c0023a60:	83 ec 0c             	sub    esp,0xc
c0023a63:	ba 6c 7a 02 c0       	mov    edx,0xc0027a6c
c0023a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a6c:	89 10                	mov    DWORD PTR [eax],edx
c0023a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a72:	83 ec 0c             	sub    esp,0xc
c0023a75:	50                   	push   eax
c0023a76:	e8 0d aa fe ff       	call   c000e488 <Device::~Device()>
c0023a7b:	83 c4 10             	add    esp,0x10
c0023a7e:	90                   	nop
c0023a7f:	83 c4 0c             	add    esp,0xc
c0023a82:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023a84 <IOAPIC::~IOAPIC()>:
c0023a84:	83 ec 0c             	sub    esp,0xc
c0023a87:	83 ec 0c             	sub    esp,0xc
c0023a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a8e:	e8 cd ff ff ff       	call   c0023a60 <IOAPIC::~IOAPIC()>
c0023a93:	83 c4 10             	add    esp,0x10
c0023a96:	83 ec 08             	sub    esp,0x8
c0023a99:	68 68 01 00 00       	push   0x168
c0023a9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023aa2:	e8 bf 94 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023aa7:	83 c4 10             	add    esp,0x10
c0023aaa:	83 c4 0c             	add    esp,0xc
c0023aad:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023aae <APIC::~APIC()>:
c0023aae:	83 ec 0c             	sub    esp,0xc
c0023ab1:	ba 24 7a 02 c0       	mov    edx,0xc0027a24
c0023ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aba:	89 10                	mov    DWORD PTR [eax],edx
c0023abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ac0:	83 ec 0c             	sub    esp,0xc
c0023ac3:	50                   	push   eax
c0023ac4:	e8 c7 b4 fe ff       	call   c000ef90 <InterruptController::~InterruptController()>
c0023ac9:	83 c4 10             	add    esp,0x10
c0023acc:	90                   	nop
c0023acd:	83 c4 0c             	add    esp,0xc
c0023ad0:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023ad2 <APIC::~APIC()>:
c0023ad2:	83 ec 0c             	sub    esp,0xc
c0023ad5:	83 ec 0c             	sub    esp,0xc
c0023ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023adc:	e8 cd ff ff ff       	call   c0023aae <APIC::~APIC()>
c0023ae1:	83 c4 10             	add    esp,0x10
c0023ae4:	83 ec 08             	sub    esp,0x8
c0023ae7:	68 58 21 00 00       	push   0x2158
c0023aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023af0:	e8 71 94 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023af5:	83 c4 10             	add    esp,0x10
c0023af8:	83 c4 0c             	add    esp,0xc
c0023afb:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023afc <PIC::~PIC()>:
c0023afc:	83 ec 0c             	sub    esp,0xc
c0023aff:	ba bc 7a 02 c0       	mov    edx,0xc0027abc
c0023b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b08:	89 10                	mov    DWORD PTR [eax],edx
c0023b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b0e:	83 ec 0c             	sub    esp,0xc
c0023b11:	50                   	push   eax
c0023b12:	e8 79 b4 fe ff       	call   c000ef90 <InterruptController::~InterruptController()>
c0023b17:	83 c4 10             	add    esp,0x10
c0023b1a:	90                   	nop
c0023b1b:	83 c4 0c             	add    esp,0xc
c0023b1e:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023b20 <PIC::~PIC()>:
c0023b20:	83 ec 0c             	sub    esp,0xc
c0023b23:	83 ec 0c             	sub    esp,0xc
c0023b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b2a:	e8 cd ff ff ff       	call   c0023afc <PIC::~PIC()>
c0023b2f:	83 c4 10             	add    esp,0x10
c0023b32:	83 ec 08             	sub    esp,0x8
c0023b35:	68 58 21 00 00       	push   0x2158
c0023b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b3e:	e8 23 94 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023b43:	83 c4 10             	add    esp,0x10
c0023b46:	83 c4 0c             	add    esp,0xc
c0023b49:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023b4c <APICTimer::~APICTimer()>:
c0023b4c:	83 ec 0c             	sub    esp,0xc
c0023b4f:	ba 10 7b 02 c0       	mov    edx,0xc0027b10
c0023b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b58:	89 10                	mov    DWORD PTR [eax],edx
c0023b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b5e:	83 ec 0c             	sub    esp,0xc
c0023b61:	50                   	push   eax
c0023b62:	e8 59 d3 fe ff       	call   c0010ec0 <Timer::~Timer()>
c0023b67:	83 c4 10             	add    esp,0x10
c0023b6a:	90                   	nop
c0023b6b:	83 c4 0c             	add    esp,0xc
c0023b6e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023b70 <APICTimer::~APICTimer()>:
c0023b70:	83 ec 0c             	sub    esp,0xc
c0023b73:	83 ec 0c             	sub    esp,0xc
c0023b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b7a:	e8 cd ff ff ff       	call   c0023b4c <APICTimer::~APICTimer()>
c0023b7f:	83 c4 10             	add    esp,0x10
c0023b82:	83 ec 08             	sub    esp,0x8
c0023b85:	68 60 01 00 00       	push   0x160
c0023b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b8e:	e8 d3 93 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023b93:	83 c4 10             	add    esp,0x10
c0023b96:	83 c4 0c             	add    esp,0xc
c0023b99:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023b9c <PIT::~PIT()>:
c0023b9c:	83 ec 0c             	sub    esp,0xc
c0023b9f:	ba 60 7b 02 c0       	mov    edx,0xc0027b60
c0023ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ba8:	89 10                	mov    DWORD PTR [eax],edx
c0023baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bae:	83 ec 0c             	sub    esp,0xc
c0023bb1:	50                   	push   eax
c0023bb2:	e8 09 d3 fe ff       	call   c0010ec0 <Timer::~Timer()>
c0023bb7:	83 c4 10             	add    esp,0x10
c0023bba:	90                   	nop
c0023bbb:	83 c4 0c             	add    esp,0xc
c0023bbe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023bc0 <PIT::~PIT()>:
c0023bc0:	83 ec 0c             	sub    esp,0xc
c0023bc3:	83 ec 0c             	sub    esp,0xc
c0023bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bca:	e8 cd ff ff ff       	call   c0023b9c <PIT::~PIT()>
c0023bcf:	83 c4 10             	add    esp,0x10
c0023bd2:	83 ec 08             	sub    esp,0x8
c0023bd5:	68 5c 01 00 00       	push   0x15c
c0023bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bde:	e8 83 93 fe ff       	call   c000cf66 <operator delete(void*, unsigned long)>
c0023be3:	83 c4 10             	add    esp,0x10
c0023be6:	83 c4 0c             	add    esp,0xc
c0023be9:	c3                   	ret    
