
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b5 9a 00 00       	call   c0009ad5 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 39 29 02 00       	call   c002295e <_init>
c0000025:	c3                   	ret    
c0000026:	bb e2 35 02 c0       	mov    ebx,0xc00235e2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f0 35 02 c0    	cmp    ebx,0xc00235f0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 79 02 c0       	mov    eax,0xc0027998
c0000049:	3d 98 79 02 c0       	cmp    eax,0xc0027998
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 79 02 c0       	push   0xc0027998
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 79 02 c0       	mov    eax,0xc0027998
c0000075:	2d 98 79 02 c0       	sub    eax,0xc0027998
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 79 02 c0       	push   0xc0027998
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 20 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b20,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f8 35 02 c0       	mov    ebx,0xc00235f8
c00000bb:	81 eb f4 35 02 c0    	sub    ebx,0xc00235f4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f4 35 02 c0       	mov    esi,0xc00235f4
c00000ca:	a1 24 7b 02 c0       	mov    eax,ds:0xc0027b24
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 24 7b 02 c0       	mov    ds:0xc0027b24,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 24 7b 02 c0       	mov    eax,ds:0xc0027b24
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 79 02 c0       	push   0xc0027998
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 20 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027b20,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 28 7b 02 c0       	push   0xc0027b28
c000012c:	68 98 79 02 c0       	push   0xc0027998
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 90 7c 01 00       	call   c0017f68 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 78 c7 00 00       	call   c000ca68 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 6e 7c 01 00       	call   c0017f68 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 37 81 01 00       	call   c0018450 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 7a 87 01 00       	call   c0018a9c <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 70 7f 02 c0 	lgdtd  ds:0xc0027f70
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 32 e6 00 00       	call   c000eb49 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 40 7b 02 c0    	mov    DWORD PTR ds:0xc0027b40,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 40 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b40
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 00 36 02 c0 02 	test   BYTE PTR [edx-0x3ffdca00],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 00 36 02 c0 01 	test   BYTE PTR [edx-0x3ffdca00],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 00 36 02 c0 08 	test   BYTE PTR [edx-0x3ffdca00],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 00 36 02 c0 04 	test   BYTE PTR [ebx-0x3ffdca00],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 00 36 02 c0 01 	test   BYTE PTR [edx-0x3ffdca00],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 60 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027b60
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 60 7b 02 c0    	mov    DWORD PTR ds:0xc0027b60,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 64 7b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd849c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 64 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd849c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 60 7b 02 c0    	mov    DWORD PTR ds:0xc0027b60,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 8c 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b8c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 9c 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027b9c
c0000d6c:	c7 42 0c 94 7b 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027b94
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 9c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b9c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 8c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b8c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 60 7b 02 c0 02 	test   BYTE PTR ds:0xc0027b60,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 60 7b 02 c0       	mov    eax,0xc0027b60
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 8b 8a 00 00       	call   c00098d8 <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 cd 89 00 00       	call   c00098d8 <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 b7 89 00 00       	call   c00098d8 <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 93 89 00 00       	call   c00098d8 <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 60 7b 02 c0    	mov    edi,DWORD PTR ds:0xc0027b60
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 60 7b 02 c0       	mov    eax,0xc0027b60
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 64 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd849c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 64 7b 02 c0 	mov    DWORD PTR [edx*4-0x3ffd849c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 94 7b 02 c0 	lea    edx,[eax*8-0x3ffd846c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 60 7b 02 c0       	mov    eax,0xc0027b60
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d a0 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ba0
c00010ee:	81 fb 94 7b 02 c0    	cmp    ebx,0xc0027b94
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 94 7b 02 c0       	cmp    eax,0xc0027b94
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 90 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b90,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 9c 7b 02 c0       	mov    ds:0xc0027b9c,eax
c000112a:	a3 a0 7b 02 c0       	mov    ds:0xc0027ba0,eax
c000112f:	a3 90 7b 02 c0       	mov    ds:0xc0027b90,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 94 7b 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027b94
c000113d:	c7 40 0c 94 7b 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027b94
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 a0 7b 02 c0       	mov    ds:0xc0027ba0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 94 7b 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027b94
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 58 7b 02 c0 	lea    ebp,[edx*4-0x3ffd84a8]
c000118e:	8b 14 95 60 7b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd84a0]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 60 7b 02 c0 	lea    ecx,[edx*4-0x3ffd84a0]
c00011a9:	8b 14 95 60 7b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd84a0]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 94 7e 02 c0 	or     DWORD PTR [edi*4-0x3ffd816c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 94 7b 02 c0 	lea    eax,[eax*8-0x3ffd846c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 9c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b9c,ecx
c0001263:	89 0d a0 7b 02 c0    	mov    DWORD PTR ds:0xc0027ba0,ecx
c0001269:	c7 41 08 94 7b 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027b94
c0001270:	c7 41 0c 94 7b 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027b94
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 8c 7b 02 c0 	lea    edx,[ecx*8-0x3ffd8474]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 94 7e 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd816c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 94 7e 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd816c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 8c 7b 02 c0 	lea    edx,[eax*4-0x3ffd8474]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 94 7e 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd816c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 9c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b9c,edi
c0001336:	89 3d a0 7b 02 c0    	mov    DWORD PTR ds:0xc0027ba0,edi
c000133c:	c7 47 08 94 7b 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027b94
c0001343:	c7 47 0c 94 7b 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027b94
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 90 7b 02 c0    	mov    DWORD PTR ds:0xc0027b90,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 8c 7b 02 c0       	mov    eax,ds:0xc0027b8c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 8c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b8c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 60 7b 02 c0       	mov    edx,0xc0027b60
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 60 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b60,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 60 7b 02 c0       	mov    eax,0xc0027b60
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d b4 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027eb4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 b4 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d b4 7e 02 c0    	mov    DWORD PTR ds:0xc0027eb4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 8c 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b8c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 8c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b8c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 60 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b60,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 60 7b 02 c0       	mov    eax,0xc0027b60
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 bc 7e 02 c0    	push   DWORD PTR ds:0xc0027ebc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 60 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b60,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 60 7b 02 c0       	mov    eax,0xc0027b60
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 bc 7e 02 c0       	mov    eax,ds:0xc0027ebc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 60 7b 02 c0       	mov    eax,0xc0027b60
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 8c 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b8c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 60 7b 02 c0       	mov    eax,0xc0027b60
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 8c 7b 02 c0       	mov    eax,ds:0xc0027b8c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 64 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd849c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 94 7b 02 c0       	mov    eax,0xc0027b94
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 8c 7e 02 c0       	cmp    eax,0xc0027e8c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 c8 7e 02 c0       	mov    eax,ds:0xc0027ec8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 b0 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027eb0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 c4 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027ec4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 d4 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027ed4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 60 7b 02 c0       	mov    eax,0xc0027b60
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 04 37 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc8fc]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 60 7b 02 c0       	mov    ds:0xc0027b60,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d a4 7e 02 c0    	mov    DWORD PTR ds:0xc0027ea4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d a8 7e 02 c0    	mov    DWORD PTR ds:0xc0027ea8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d ac 7e 02 c0    	mov    DWORD PTR ds:0xc0027eac,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 b4 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 20 96 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd69e0]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 32 9d 01 00       	jmp    c001b858 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 20 96 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd69e0]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 64 9d 01 00       	jmp    c001b8a0 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 20 96 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd69e0]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 8d 9d 01 00       	jmp    c001b8e8 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 06 09 02 00       	call   c0022744 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 20 38 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc7e0]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 20 38 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc7e0]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 20 37 02 c0       	mov    edx,0xc0023720
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 40 38 02 c0       	mov    edx,0xc0023840
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 90 63 02 c0       	mov    edx,0xc0026390
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 30 38 02 c0       	mov    edx,0xc0023830
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 00 7f 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8100]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 e0 7e 02 c0    	mov    ax,ds:0xc0027ee0
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 e0 7e 02 c0    	mov    ds:0xc0027ee0,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 03 f7 01 00       	call   c0022744 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 52 38 02 c0       	mov    eax,0xc0023852
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad a0 37 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc860]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 5b 38 02 c0       	mov    eax,0xc002385b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 20 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc7e0]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 ce e0 01 00       	call   c0022744 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 30 38 02 c0       	mov    edx,0xc0023830
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 20 37 02 c0       	mov    edx,0xc0023720
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 30 37 02 c0       	mov    edx,0xc0023730
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 00 7f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8100]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 00 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8100],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 95 ca 01 00       	call   c0022744 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 7b ca 01 00       	call   c0022744 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 77 37 02 c0       	mov    eax,0xc0023777
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 70 37 02 c0       	mov    eax,0xc0023770
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 14 b6 01 00       	call   c0022744 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 00 7f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8100]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 60 37 02 c0       	mov    esi,0xc0023760
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 88 af 01 00       	call   c0022744 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 40 38 02 c0       	mov    edx,0xc0023840
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 40 37 02 c0       	mov    edx,0xc0023740
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 50 37 02 c0       	mov    edx,0xc0023750
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 62 38 02 c0       	mov    edx,0xc0023862
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 6e 38 02 c0       	mov    edx,0xc002386e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 82 38 02 c0       	mov    edx,0xc0023882
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 3c 14 00 00       	call   c0009a0f <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 34 14 00 00       	call   c0009a1f <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c a0 3b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023ba0
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 a0 3b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023ba0
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 a0 39 02 c0       	mov    eax,0xc00239a0
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 e0 38 02 c0       	mov    eax,0xc00238e0
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 a0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc760]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 96 11 00 00       	jmp    c0009a0f <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 b1 11 00 00       	jmp    c0009a2f <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000888b:	48                   	dec    eax
c000888c:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c00088a2:	48                   	dec    eax
c00088a3:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c00088b3:	ff 05 84 94 02 c0    	inc    DWORD PTR ds:0xc0029484
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c00088c2:	48                   	dec    eax
c00088c3:	a3 84 94 02 c0       	mov    ds:0xc0029484,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 80 94 02 c0 00 	cmp    DWORD PTR ds:0xc0029480,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 80 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x0
c00088dd:	e8 da fd 00 00       	call   c00186bc <schedule()>
c00088e2:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c00088e7:	48                   	dec    eax
c00088e8:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 90 80 02 c0       	mov    eax,ds:0xc0028090
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 a0 3c 02 c0       	push   0xc0023ca0
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 68 7f 02 c0       	mov    eax,0xc0027f68
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 a9 3c 02 c0       	push   0xc0023ca9
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 44 27 02 c0       	mov    eax,0xc0022744
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 b3 3c 02 c0       	push   0xc0023cb3
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 78 24 02 c0       	mov    eax,0xc0022478
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 bc 3c 02 c0       	push   0xc0023cbc
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 44 28 02 c0       	mov    eax,0xc0022844
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 c6 3c 02 c0       	push   0xc0023cc6
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 c4 25 02 c0       	mov    eax,0xc00225c4
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 cf 3c 02 c0       	push   0xc0023ccf
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 6c 7f 02 c0       	mov    eax,0xc0027f6c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 dc 3c 02 c0       	push   0xc0023cdc
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 6d 7f 02 c0       	mov    eax,0xc0027f6d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 b3 59 00 00       	call   c000e3f8 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 e9 3c 02 c0       	push   0xc0023ce9
c0008a75:	e8 ef 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 00 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d00
c0008a82:	e8 e2 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 7c 0f 00 00       	call   c0009a0f <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 b0 94 02 c0    	push   DWORD PTR ds:0xc00294b0
c0008aa2:	68 19 3d 02 c0       	push   0xc0023d19
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 e9 f7 00 00       	call   c0018298 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 07 94 00 c0       	push   0xc0009407
c0008abe:	53                   	push   ebx
c0008abf:	e8 dc f9 00 00       	call   c00184a0 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 e4 8e 01 c0       	push   0xc0018ee4
c0008acd:	ff 35 b0 94 02 c0    	push   DWORD PTR ds:0xc00294b0
c0008ad3:	e8 c8 f9 00 00       	call   c00184a0 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 68 94 02 c0       	mov    ds:0xc0029468,eax
c0008ae0:	68 c0 3e 02 c0       	push   0xc0023ec0
c0008ae5:	c6 05 6d 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027f6d,0x1
c0008aec:	e8 78 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008af1:	e8 c9 07 01 00       	call   c00192bf <Vm::initialise8086()>
c0008af6:	e8 97 45 00 00       	call   c000d092 <Fs::initVFS()>
c0008afb:	c7 04 24 26 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d26
c0008b02:	e8 62 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b07:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 c0 3e 02 c0       	push   0xc0023ec0
c0008b26:	e8 3e 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 d6 df 00 00       	call   c0016b06 <Sys::loadSyscalls()>
c0008b30:	e8 c9 bd 00 00       	call   c00148fe <Krnl::loadSystemEnv()>
c0008b35:	e8 c5 c2 00 00       	call   c0014dff <Krnl::setupPowerManager()>
c0008b3a:	83 c4 0c             	add    esp,0xc
c0008b3d:	6a 3a                	push   0x3a
c0008b3f:	68 40 3d 02 c0       	push   0xc0023d40
c0008b44:	68 49 3d 02 c0       	push   0xc0023d49
c0008b49:	e8 7b cd 00 00       	call   c00158c9 <Reg::readIntWithDefault(char*, char*, int)>
c0008b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b51:	e8 5a 51 00 00       	call   c000dcb0 <User::loadClockSettings(int)>
c0008b56:	c7 04 24 e4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ee4
c0008b5d:	e8 07 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b62:	58                   	pop    eax
c0008b63:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0008b68:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b6e:	e8 45 58 00 00       	call   c000e3b8 <Device::loadDriversForAll()>
c0008b73:	c7 04 24 51 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d51
c0008b7a:	e8 ea 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b7f:	e8 e2 b8 00 00       	call   c0014466 <Krnl::startCPUs()>
c0008b84:	c7 04 24 6b 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d6b
c0008b8b:	e8 d9 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b90:	5a                   	pop    edx
c0008b91:	8b 1d 68 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f68
c0008b97:	59                   	pop    ecx
c0008b98:	6a 01                	push   0x1
c0008b9a:	68 7c 3d 02 c0       	push   0xc0023d7c
c0008b9f:	e8 32 f1 00 00       	call   c0017cd6 <Thr::loadDLL(char const*, bool)>
c0008ba4:	5a                   	pop    edx
c0008ba5:	59                   	pop    ecx
c0008ba6:	53                   	push   ebx
c0008ba7:	50                   	push   eax
c0008ba8:	e8 5a f3 00 00       	call   c0017f07 <Thr::executeDLL(unsigned long, void*)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 ec 0c             	sub    esp,0xc
c0008bb3:	6a 02                	push   0x2
c0008bb5:	e8 fa fc 00 00       	call   c00188b4 <blockTask(TaskState)>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	eb f1                	jmp    c0008bb0 <Krnl::firstTask()+0x144>
c0008bbf:	90                   	nop

c0008bc0 <Computer::Computer()>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc7:	83 ec 08             	sub    esp,0x8
c0008bca:	68 98 3d 02 c0       	push   0xc0023d98
c0008bcf:	50                   	push   eax
c0008bd0:	e8 9d 58 00 00       	call   c000e472 <Device::Device(char const*)>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	ba 94 3f 02 c0       	mov    edx,0xc0023f94
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	89 10                	mov    DWORD PTR [eax],edx
c0008be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c09:	83 ca 04             	or     edx,0x4
c0008c0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c1c:	0f b6 d0             	movzx  edx,al
c0008c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c23:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c34:	0f b6 d0             	movzx  edx,al
c0008c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c57:	0f b6 d0             	movzx  edx,al
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c62:	83 e1 3f             	and    ecx,0x3f
c0008c65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c73:	0f b6 d0             	movzx  edx,al
c0008c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c8b:	0f b6 d0             	movzx  edx,al
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0008ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cae:	0f b6 d0             	movzx  edx,al
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb9:	83 e1 3f             	and    ecx,0x3f
c0008cbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cca:	0f b6 d0             	movzx  edx,al
c0008ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ce2:	0f b6 d0             	movzx  edx,al
c0008ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0008cfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d05:	0f b6 d0             	movzx  edx,al
c0008d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d10:	83 e1 3f             	and    ecx,0x3f
c0008d13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d17:	90                   	nop
c0008d18:	83 c4 0c             	add    esp,0xc
c0008d1b:	c3                   	ret    

c0008d1c <Computer::setBootMessage(char const*)>:
c0008d1c:	c3                   	ret    
c0008d1d:	90                   	nop

c0008d1e <Computer::detectFeatures()>:
c0008d1e:	55                   	push   ebp
c0008d1f:	57                   	push   edi
c0008d20:	56                   	push   esi
c0008d21:	53                   	push   ebx
c0008d22:	83 ec 1c             	sub    esp,0x1c
c0008d25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d29:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d33:	e8 e1 74 ff ff       	call   c0000219 <detectCPUID>
c0008d38:	85 c0                	test   eax,eax
c0008d3a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d40:	0f 95 c2             	setne  dl
c0008d43:	83 e0 fd             	and    eax,0xfffffffd
c0008d46:	d1 e2                	shl    edx,1
c0008d48:	09 d0                	or     eax,edx
c0008d4a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d50:	a8 02                	test   al,0x2
c0008d52:	75 46                	jne    c0008d9a <Computer::detectFeatures()+0x7c>
c0008d54:	f6 05 81 7f 02 c0 04 	test   BYTE PTR ds:0xc0027f81,0x4
c0008d5b:	74 07                	je     c0008d64 <Computer::detectFeatures()+0x46>
c0008d5d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d64:	e8 9d 96 01 00       	call   c0022406 <x87Detect>
c0008d69:	83 e0 01             	and    eax,0x1
c0008d6c:	c1 e0 04             	shl    eax,0x4
c0008d6f:	88 c2                	mov    dl,al
c0008d71:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d77:	83 e0 ef             	and    eax,0xffffffef
c0008d7a:	09 d0                	or     eax,edx
c0008d7c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d82:	a8 10                	test   al,0x10
c0008d84:	0f 85 2a 01 00 00    	jne    c0008eb4 <Computer::detectFeatures()+0x196>
c0008d8a:	84 c0                	test   al,al
c0008d8c:	0f 88 45 01 00 00    	js     c0008ed7 <Computer::detectFeatures()+0x1b9>
c0008d92:	83 c4 1c             	add    esp,0x1c
c0008d95:	5b                   	pop    ebx
c0008d96:	5e                   	pop    esi
c0008d97:	5f                   	pop    edi
c0008d98:	5d                   	pop    ebp
c0008d99:	c3                   	ret    
c0008d9a:	83 ec 0c             	sub    esp,0xc
c0008d9d:	6a 20                	push   0x20
c0008d9f:	e8 66 a5 00 00       	call   c001330a <CPU::cpuidCheckEDX(unsigned int)>
c0008da4:	83 e0 01             	and    eax,0x1
c0008da7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dae:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008db4:	83 e0 f7             	and    eax,0xfffffff7
c0008db7:	09 d0                	or     eax,edx
c0008db9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dbf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc6:	e8 3f a5 00 00       	call   c001330a <CPU::cpuidCheckEDX(unsigned int)>
c0008dcb:	83 e0 01             	and    eax,0x1
c0008dce:	88 c2                	mov    dl,al
c0008dd0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd6:	83 e0 fe             	and    eax,0xfffffffe
c0008dd9:	09 d0                	or     eax,edx
c0008ddb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008de1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de8:	e8 1d a5 00 00       	call   c001330a <CPU::cpuidCheckEDX(unsigned int)>
c0008ded:	c1 e0 07             	shl    eax,0x7
c0008df0:	88 c2                	mov    dl,al
c0008df2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df8:	83 e0 7f             	and    eax,0x7f
c0008dfb:	09 d0                	or     eax,edx
c0008dfd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e0a:	e8 fb a4 00 00       	call   c001330a <CPU::cpuidCheckEDX(unsigned int)>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	83 e0 01             	and    eax,0x1
c0008e15:	c1 e0 05             	shl    eax,0x5
c0008e18:	88 c2                	mov    dl,al
c0008e1a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e20:	83 e0 df             	and    eax,0xffffffdf
c0008e23:	09 d0                	or     eax,edx
c0008e25:	f7 05 80 7f 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0027f80,0x401
c0008e2f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e35:	0f 84 c2 00 00 00    	je     c0008efd <Computer::detectFeatures()+0x1df>
c0008e3b:	83 e0 fe             	and    eax,0xfffffffe
c0008e3e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e44:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	83 e2 09             	and    edx,0x9
c0008e4f:	fe ca                	dec    dl
c0008e51:	75 09                	jne    c0008e5c <Computer::detectFeatures()+0x13e>
c0008e53:	83 e0 fe             	and    eax,0xfffffffe
c0008e56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e5c:	83 ec 0c             	sub    esp,0xc
c0008e5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e63:	50                   	push   eax
c0008e64:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e68:	55                   	push   ebp
c0008e69:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e6d:	57                   	push   edi
c0008e6e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e72:	56                   	push   esi
c0008e73:	68 00 00 00 80       	push   0x80000000
c0008e78:	e8 09 a4 00 00       	call   c0013286 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e7d:	83 c4 20             	add    esp,0x20
c0008e80:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e8b:	0f 86 c3 fe ff ff    	jbe    c0008d54 <Computer::detectFeatures()+0x36>
c0008e91:	83 ec 0c             	sub    esp,0xc
c0008e94:	50                   	push   eax
c0008e95:	55                   	push   ebp
c0008e96:	57                   	push   edi
c0008e97:	56                   	push   esi
c0008e98:	68 01 00 00 80       	push   0x80000001
c0008e9d:	e8 e4 a3 00 00       	call   c0013286 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ea2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008eac:	83 c4 20             	add    esp,0x20
c0008eaf:	e9 a0 fe ff ff       	jmp    c0008d54 <Computer::detectFeatures()+0x36>
c0008eb4:	e8 07 95 01 00       	call   c00223c0 <absolutelyNoChanceInHell>
c0008eb9:	88 c2                	mov    dl,al
c0008ebb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ec1:	c1 e2 07             	shl    edx,0x7
c0008ec4:	83 e0 7f             	and    eax,0x7f
c0008ec7:	09 d0                	or     eax,edx
c0008ec9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ecf:	84 c0                	test   al,al
c0008ed1:	0f 89 bb fe ff ff    	jns    c0008d92 <Computer::detectFeatures()+0x74>
c0008ed7:	e8 c4 94 01 00       	call   c00223a0 <avxDetect>
c0008edc:	83 e0 01             	and    eax,0x1
c0008edf:	c1 e0 05             	shl    eax,0x5
c0008ee2:	88 c2                	mov    dl,al
c0008ee4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008eea:	83 e0 df             	and    eax,0xffffffdf
c0008eed:	09 d0                	or     eax,edx
c0008eef:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ef5:	83 c4 1c             	add    esp,0x1c
c0008ef8:	5b                   	pop    ebx
c0008ef9:	5e                   	pop    esi
c0008efa:	5f                   	pop    edi
c0008efb:	5d                   	pop    ebp
c0008efc:	c3                   	ret    
c0008efd:	83 ec 0c             	sub    esp,0xc
c0008f00:	68 00 02 00 00       	push   0x200
c0008f05:	e8 00 a4 00 00       	call   c001330a <CPU::cpuidCheckEDX(unsigned int)>
c0008f0a:	83 c4 10             	add    esp,0x10
c0008f0d:	83 e0 01             	and    eax,0x1
c0008f10:	88 c2                	mov    dl,al
c0008f12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f18:	83 e0 fe             	and    eax,0xfffffffe
c0008f1b:	09 d0                	or     eax,edx
c0008f1d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f23:	e9 1c ff ff ff       	jmp    c0008e44 <Computer::detectFeatures()+0x126>

c0008f28 <Computer::displayFeatures()>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <Computer::rdmsr(unsigned int)>:
c0008f2a:	83 ec 0c             	sub    esp,0xc
c0008f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f31:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f38:	74 0a                	je     c0008f44 <Computer::rdmsr(unsigned int)+0x1a>
c0008f3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f3e:	0f 32                	rdmsr  
c0008f40:	83 c4 0c             	add    esp,0xc
c0008f43:	c3                   	ret    
c0008f44:	83 ec 0c             	sub    esp,0xc
c0008f47:	68 a1 3d 02 c0       	push   0xc0023da1
c0008f4c:	e8 b6 ba 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	eb e4                	jmp    c0008f3a <Computer::rdmsr(unsigned int)+0x10>

c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f56:	57                   	push   edi
c0008f57:	56                   	push   esi
c0008f58:	52                   	push   edx
c0008f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f5d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f61:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f65:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f6c:	74 0e                	je     c0008f7c <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f72:	89 f0                	mov    eax,esi
c0008f74:	89 fa                	mov    edx,edi
c0008f76:	0f 30                	wrmsr  
c0008f78:	58                   	pop    eax
c0008f79:	5e                   	pop    esi
c0008f7a:	5f                   	pop    edi
c0008f7b:	c3                   	ret    
c0008f7c:	83 ec 0c             	sub    esp,0xc
c0008f7f:	68 a7 3d 02 c0       	push   0xc0023da7
c0008f84:	e8 7e ba 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c0008f89:	83 c4 10             	add    esp,0x10
c0008f8c:	eb e0                	jmp    c0008f6e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f8e <Computer::shutdown()>:
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f95:	8b 10                	mov    edx,DWORD PTR [eax]
c0008f97:	6a 00                	push   0x0
c0008f99:	6a 00                	push   0x0
c0008f9b:	6a 00                	push   0x0
c0008f9d:	50                   	push   eax
c0008f9e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fa1:	83 c4 1c             	add    esp,0x1c
c0008fa4:	c3                   	ret    
c0008fa5:	90                   	nop

c0008fa6 <Computer::restart()>:
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fad:	8b 10                	mov    edx,DWORD PTR [eax]
c0008faf:	6a 00                	push   0x0
c0008fb1:	6a 00                	push   0x0
c0008fb3:	6a 01                	push   0x1
c0008fb5:	50                   	push   eax
c0008fb6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fb9:	83 c4 1c             	add    esp,0x1c
c0008fbc:	c3                   	ret    
c0008fbd:	90                   	nop

c0008fbe <Computer::sleep()>:
c0008fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fc2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fcc:	e9 07 99 00 00       	jmp    c00128d8 <ACPI::sleep()>
c0008fd1:	90                   	nop

c0008fd2 <Computer::nmiEnabled()>:
c0008fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fd6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008fdc:	c3                   	ret    
c0008fdd:	90                   	nop

c0008fde <Computer::readCMOS(unsigned char)>:
c0008fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fe2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008fe9:	19 c0                	sbb    eax,eax
c0008feb:	83 e0 80             	and    eax,0xffffff80
c0008fee:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008ff2:	e6 70                	out    0x70,al
c0008ff4:	e4 71                	in     al,0x71
c0008ff6:	c3                   	ret    
c0008ff7:	90                   	nop

c0008ff8 <Computer::enableNMI(bool)>:
c0008ff8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009000:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009006:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000900e:	eb ce                	jmp    c0008fde <Computer::readCMOS(unsigned char)>

c0009010 <Computer::open(int, int, void*)>:
c0009010:	56                   	push   esi
c0009011:	53                   	push   ebx
c0009012:	83 ec 10             	sub    esp,0x10
c0009015:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009019:	68 04 3f 02 c0       	push   0xc0023f04
c000901e:	e8 46 0a 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009023:	58                   	pop    eax
c0009024:	f6 05 80 7f 02 c0 04 	test   BYTE PTR ds:0xc0027f80,0x4
c000902b:	5a                   	pop    edx
c000902c:	0f 94 05 40 73 02 c0 	sete   BYTE PTR ds:0xc0027340
c0009033:	68 58 01 00 00       	push   0x158
c0009038:	68 ad 3d 02 c0       	push   0xc0023dad
c000903d:	e8 b9 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009042:	59                   	pop    ecx
c0009043:	5e                   	pop    esi
c0009044:	68 14 01 00 00       	push   0x114
c0009049:	68 c3 3d 02 c0       	push   0xc0023dc3
c000904e:	e8 a8 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009053:	58                   	pop    eax
c0009054:	5a                   	pop    edx
c0009055:	6a 14                	push   0x14
c0009057:	68 d7 3d 02 c0       	push   0xc0023dd7
c000905c:	e8 9a 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009061:	59                   	pop    ecx
c0009062:	5e                   	pop    esi
c0009063:	68 1f 07 00 00       	push   0x71f
c0009068:	68 ea 3d 02 c0       	push   0xc0023dea
c000906d:	e8 89 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009072:	58                   	pop    eax
c0009073:	5a                   	pop    edx
c0009074:	6a 5f                	push   0x5f
c0009076:	68 01 3e 02 c0       	push   0xc0023e01
c000907b:	e8 7b 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009080:	c7 04 24 17 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e17
c0009087:	e8 6f 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000908c:	c7 04 24 29 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e29
c0009093:	e8 d1 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009098:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000909f:	e8 6b 09 00 00       	call   c0009a0f <malloc>
c00090a4:	89 c6                	mov    esi,eax
c00090a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00090a9:	e8 e2 90 00 00       	call   c0012190 <ACPI::ACPI()>
c00090ae:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00090b4:	c7 04 24 43 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e43
c00090bb:	e8 a9 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090c0:	59                   	pop    ecx
c00090c1:	5e                   	pop    esi
c00090c2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c00090c8:	53                   	push   ebx
c00090c9:	e8 a0 51 00 00       	call   c000e26e <Device::addChild(Device*)>
c00090ce:	c7 04 24 28 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f28
c00090d5:	e8 8f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00090dd:	e8 3c fc ff ff       	call   c0008d1e <Computer::detectFeatures()>
c00090e2:	c7 04 24 48 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f48
c00090e9:	e8 7b 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090ee:	c7 04 24 5d 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e5d
c00090f5:	e8 6f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090fa:	58                   	pop    eax
c00090fb:	5a                   	pop    edx
c00090fc:	6a 01                	push   0x1
c00090fe:	53                   	push   ebx
c00090ff:	e8 f4 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c0009104:	c7 04 24 51 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d51
c000910b:	e8 59 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009110:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009117:	e8 f3 08 00 00       	call   c0009a0f <malloc>
c000911c:	89 04 24             	mov    DWORD PTR [esp],eax
c000911f:	89 c6                	mov    esi,eax
c0009121:	e8 9c a2 00 00       	call   c00133c2 <CPU::CPU()>
c0009126:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000912c:	59                   	pop    ecx
c000912d:	58                   	pop    eax
c000912e:	56                   	push   esi
c000912f:	53                   	push   ebx
c0009130:	e8 39 51 00 00       	call   c000e26e <Device::addChild(Device*)>
c0009135:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000913b:	8b 10                	mov    edx,DWORD PTR [eax]
c000913d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009141:	6a 00                	push   0x0
c0009143:	6a 00                	push   0x0
c0009145:	50                   	push   eax
c0009146:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009149:	83 c4 14             	add    esp,0x14
c000914c:	68 68 3f 02 c0       	push   0xc0023f68
c0009151:	e8 13 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009156:	e8 af 56 00 00       	call   c000e80a <setupFPU()>
c000915b:	83 c4 10             	add    esp,0x10
c000915e:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0009164:	85 c0                	test   eax,eax
c0009166:	74 1f                	je     c0009187 <Computer::open(int, int, void*)+0x177>
c0009168:	83 ec 08             	sub    esp,0x8
c000916b:	50                   	push   eax
c000916c:	53                   	push   ebx
c000916d:	e8 fc 50 00 00       	call   c000e26e <Device::addChild(Device*)>
c0009172:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c0009178:	8b 10                	mov    edx,DWORD PTR [eax]
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	6a 00                	push   0x0
c0009180:	50                   	push   eax
c0009181:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009184:	83 c4 20             	add    esp,0x20
c0009187:	83 ec 0c             	sub    esp,0xc
c000918a:	68 6e 3e 02 c0       	push   0xc0023e6e
c000918f:	e8 d5 08 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009194:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c000919b:	e8 14 f4 00 00       	call   c00185b4 <setupMultitasking(void (*)())>
c00091a0:	83 c4 14             	add    esp,0x14
c00091a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00091a8:	5b                   	pop    ebx
c00091a9:	5e                   	pop    esi
c00091aa:	c3                   	ret    
c00091ab:	90                   	nop

c00091ac <Computer::disableNMI()>:
c00091ac:	6a 00                	push   0x0
c00091ae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00091b2:	e8 41 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c00091b7:	58                   	pop    eax
c00091b8:	5a                   	pop    edx
c00091b9:	c3                   	ret    

c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>:
c00091ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091be:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00091c5:	19 c0                	sbb    eax,eax
c00091c7:	83 e0 80             	and    eax,0xffffff80
c00091ca:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00091ce:	e6 70                	out    0x70,al
c00091d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091d4:	e6 71                	out    0x71,al
c00091d6:	c3                   	ret    
c00091d7:	90                   	nop

c00091d8 <Computer::handleNMI()>:
c00091d8:	56                   	push   esi
c00091d9:	53                   	push   ebx
c00091da:	83 ec 10             	sub    esp,0x10
c00091dd:	e4 92                	in     al,0x92
c00091df:	89 c6                	mov    esi,eax
c00091e1:	e4 61                	in     al,0x61
c00091e3:	68 89 3e 02 c0       	push   0xc0023e89
c00091e8:	88 c3                	mov    bl,al
c00091ea:	e8 0c 3b 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00091ef:	83 c4 10             	add    esp,0x10
c00091f2:	83 e6 10             	and    esi,0x10
c00091f5:	75 0d                	jne    c0009204 <Computer::handleNMI()+0x2c>
c00091f7:	f6 c3 40             	test   bl,0x40
c00091fa:	75 1d                	jne    c0009219 <Computer::handleNMI()+0x41>
c00091fc:	84 db                	test   bl,bl
c00091fe:	78 2d                	js     c000922d <Computer::handleNMI()+0x55>
c0009200:	58                   	pop    eax
c0009201:	5b                   	pop    ebx
c0009202:	5e                   	pop    esi
c0009203:	c3                   	ret    
c0009204:	83 ec 0c             	sub    esp,0xc
c0009207:	68 9a 3e 02 c0       	push   0xc0023e9a
c000920c:	e8 f6 b7 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	f6 c3 40             	test   bl,0x40
c0009217:	74 e3                	je     c00091fc <Computer::handleNMI()+0x24>
c0009219:	83 ec 0c             	sub    esp,0xc
c000921c:	68 a7 3e 02 c0       	push   0xc0023ea7
c0009221:	e8 e1 b7 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c0009226:	83 c4 10             	add    esp,0x10
c0009229:	84 db                	test   bl,bl
c000922b:	79 d3                	jns    c0009200 <Computer::handleNMI()+0x28>
c000922d:	c7 44 24 10 b1 3e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023eb1
c0009235:	5a                   	pop    edx
c0009236:	5b                   	pop    ebx
c0009237:	5e                   	pop    esi
c0009238:	e9 ca b7 00 00       	jmp    c0014a07 <Krnl::panic(char const*)>
c000923d:	90                   	nop

c000923e <Computer::setDiskActivityLight(int, bool)>:
c000923e:	56                   	push   esi
c000923f:	53                   	push   ebx
c0009240:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009244:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009249:	77 1b                	ja     c0009266 <Computer::setDiskActivityLight(int, bool)+0x28>
c000924b:	e4 92                	in     al,0x92
c000924d:	bb 40 00 00 00       	mov    ebx,0x40
c0009252:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0009256:	89 da                	mov    edx,ebx
c0009258:	d3 e2                	shl    edx,cl
c000925a:	89 f1                	mov    ecx,esi
c000925c:	f7 d2                	not    edx
c000925e:	d3 e3                	shl    ebx,cl
c0009260:	21 d0                	and    eax,edx
c0009262:	09 d8                	or     eax,ebx
c0009264:	e6 92                	out    0x92,al
c0009266:	5b                   	pop    ebx
c0009267:	5e                   	pop    esi
c0009268:	c3                   	ret    
c0009269:	90                   	nop

c000926a <GDTEntry::setBase(unsigned int)>:
c000926a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000926e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009272:	89 c1                	mov    ecx,eax
c0009274:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0009278:	c1 e9 10             	shr    ecx,0x10
c000927b:	c1 e8 18             	shr    eax,0x18
c000927e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009281:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0009284:	c3                   	ret    
c0009285:	90                   	nop

c0009286 <GDTEntry::setLimit(unsigned int)>:
c0009286:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000928a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000928e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009291:	66 89 01             	mov    WORD PTR [ecx],ax
c0009294:	83 e2 f0             	and    edx,0xfffffff0
c0009297:	c1 e8 10             	shr    eax,0x10
c000929a:	83 e0 0f             	and    eax,0xf
c000929d:	09 d0                	or     eax,edx
c000929f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00092a2:	c3                   	ret    
c00092a3:	90                   	nop

c00092a4 <GDT::GDT()>:
c00092a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092b8:	90                   	nop
c00092b9:	c3                   	ret    

c00092ba <GDT::addEntry(GDTEntry)>:
c00092ba:	53                   	push   ebx
c00092bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00092bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00092c3:	8b 02                	mov    eax,DWORD PTR [edx]
c00092c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092c9:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00092cd:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00092d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00092d4:	c1 e0 03             	shl    eax,0x3
c00092d7:	89 0a                	mov    DWORD PTR [edx],ecx
c00092d9:	5b                   	pop    ebx
c00092da:	c3                   	ret    
c00092db:	90                   	nop

c00092dc <GDT::getNumberOfEntries()>:
c00092dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e2:	c3                   	ret    
c00092e3:	90                   	nop

c00092e4 <GDT::flush()>:
c00092e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00092ea:	83 c0 04             	add    eax,0x4
c00092ed:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092f4:	a3 72 7f 02 c0       	mov    ds:0xc0027f72,eax
c00092f9:	66 89 15 70 7f 02 c0 	mov    WORD PTR ds:0xc0027f70,dx
c0009300:	e9 80 70 ff ff       	jmp    c0000385 <loadGDT>
c0009305:	90                   	nop

c0009306 <GDT::setup()>:
c0009306:	55                   	push   ebp
c0009307:	57                   	push   edi
c0009308:	56                   	push   esi
c0009309:	53                   	push   ebx
c000930a:	83 ec 3c             	sub    esp,0x3c
c000930d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009311:	6a 00                	push   0x0
c0009313:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0009317:	53                   	push   ebx
c0009318:	e8 4d ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000931d:	6a 00                	push   0x0
c000931f:	53                   	push   ebx
c0009320:	e8 61 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009325:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000932d:	6a 00                	push   0x0
c000932f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0009333:	53                   	push   ebx
c0009334:	e8 31 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009339:	68 ff ff ff 00       	push   0xffffff
c000933e:	53                   	push   ebx
c000933f:	e8 42 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009348:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000934d:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009352:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009356:	83 c4 20             	add    esp,0x20
c0009359:	6a 00                	push   0x0
c000935b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000935f:	53                   	push   ebx
c0009360:	e8 05 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009365:	68 ff ff ff 00       	push   0xffffff
c000936a:	53                   	push   ebx
c000936b:	e8 16 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009370:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0009374:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009378:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000937c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009380:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009384:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009389:	0d 00 92 c0 00       	or     eax,0xc09200
c000938e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009392:	89 d8                	mov    eax,ebx
c0009394:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009398:	80 cc 60             	or     ah,0x60
c000939b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000939f:	83 c4 0c             	add    esp,0xc
c00093a2:	89 f8                	mov    eax,edi
c00093a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093a8:	80 cc 60             	or     ah,0x60
c00093ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093af:	89 c7                	mov    edi,eax
c00093b1:	55                   	push   ebp
c00093b2:	e8 03 ff ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093b7:	83 c4 0c             	add    esp,0xc
c00093ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093c2:	55                   	push   ebp
c00093c3:	e8 f2 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093c8:	83 c4 0c             	add    esp,0xc
c00093cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093d3:	55                   	push   ebp
c00093d4:	e8 e1 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093d9:	83 c4 0c             	add    esp,0xc
c00093dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00093e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00093e4:	53                   	push   ebx
c00093e5:	51                   	push   ecx
c00093e6:	55                   	push   ebp
c00093e7:	e8 ce fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093ec:	83 c4 0c             	add    esp,0xc
c00093ef:	57                   	push   edi
c00093f0:	56                   	push   esi
c00093f1:	55                   	push   ebp
c00093f2:	e8 c3 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093fa:	e8 e5 fe ff ff       	call   c00092e4 <GDT::flush()>
c00093ff:	83 c4 4c             	add    esp,0x4c
c0009402:	5b                   	pop    ebx
c0009403:	5e                   	pop    esi
c0009404:	5f                   	pop    edi
c0009405:	5d                   	pop    ebp
c0009406:	c3                   	ret    

c0009407 <idleFunction(void*)>:
c0009407:	53                   	push   ebx
c0009408:	83 ec 08             	sub    esp,0x8
c000940b:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0009410:	48                   	dec    eax
c0009411:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0009416:	75 01                	jne    c0009419 <idleFunction(void*)+0x12>
c0009418:	fb                   	sti    
c0009419:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000941e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009424:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000942b:	74 3c                	je     c0009469 <idleFunction(void*)+0x62>
c000942d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009434:	74 33                	je     c0009469 <idleFunction(void*)+0x62>
c0009436:	31 db                	xor    ebx,ebx
c0009438:	52                   	push   edx
c0009439:	52                   	push   edx
c000943a:	68 e1 00 00 00       	push   0xe1
c000943f:	50                   	push   eax
c0009440:	e8 e5 fa ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0009445:	53                   	push   ebx
c0009446:	83 e0 02             	and    eax,0x2
c0009449:	50                   	push   eax
c000944a:	68 e1 00 00 00       	push   0xe1
c000944f:	ff 35 68 7f 02 c0    	push   DWORD PTR ds:0xc0027f68
c0009455:	e8 fc fa ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c000945a:	83 c4 20             	add    esp,0x20
c000945d:	e8 52 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009462:	e8 5f 95 01 00       	call   c00229c6 <idleCommon()>
c0009467:	eb f4                	jmp    c000945d <idleFunction(void*)+0x56>
c0009469:	fb                   	sti    
c000946a:	f4                   	hlt    
c000946b:	e8 56 95 01 00       	call   c00229c6 <idleCommon()>
c0009470:	eb f7                	jmp    c0009469 <idleFunction(void*)+0x62>
c0009472:	66 90                	xchg   ax,ax

c0009474 <IDTEntry::IDTEntry(bool)>:
c0009474:	83 ec 04             	sub    esp,0x4
c0009477:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000947b:	88 04 24             	mov    BYTE PTR [esp],al
c000947e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009482:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009494:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009497:	83 e2 f0             	and    edx,0xfffffff0
c000949a:	83 ca 0e             	or     edx,0xe
c000949d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094a7:	83 e2 ef             	and    edx,0xffffffef
c00094aa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094ad:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00094b1:	74 05                	je     c00094b8 <IDTEntry::IDTEntry(bool)+0x44>
c00094b3:	b2 03                	mov    dl,0x3
c00094b5:	eb 05                	jmp    c00094bc <IDTEntry::IDTEntry(bool)+0x48>
c00094b7:	90                   	nop
c00094b8:	b2 00                	mov    dl,0x0
c00094ba:	66 90                	xchg   ax,ax
c00094bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094c0:	83 e2 03             	and    edx,0x3
c00094c3:	88 d1                	mov    cl,dl
c00094c5:	c1 e1 05             	shl    ecx,0x5
c00094c8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094cb:	83 e2 9f             	and    edx,0xffffff9f
c00094ce:	09 ca                	or     edx,ecx
c00094d0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094d7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094da:	83 ca 80             	or     edx,0xffffff80
c00094dd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094e0:	90                   	nop
c00094e1:	83 c4 04             	add    esp,0x4
c00094e4:	c3                   	ret    
c00094e5:	90                   	nop

c00094e6 <IDTEntry::setOffset(unsigned int)>:
c00094e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094ee:	66 89 02             	mov    WORD PTR [edx],ax
c00094f1:	c1 e8 10             	shr    eax,0x10
c00094f4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094f8:	c3                   	ret    
c00094f9:	90                   	nop
c00094fa:	66 90                	xchg   ax,ax

c00094fc <IDT::IDT()>:
c00094fc:	90                   	nop
c00094fd:	c3                   	ret    

c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009502:	83 c0 30             	add    eax,0x30
c0009505:	c3                   	ret    

c0009506 <IDT::addEntry(IDTEntry, int)>:
c0009506:	53                   	push   ebx
c0009507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000950b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000950f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009513:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009517:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000951a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000951e:	5b                   	pop    ebx
c000951f:	c3                   	ret    

c0009520 <IDT::addEntry(int, void (*)(), bool)>:
c0009520:	53                   	push   ebx
c0009521:	83 ec 10             	sub    esp,0x10
c0009524:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009529:	50                   	push   eax
c000952a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000952e:	53                   	push   ebx
c000952f:	e8 40 ff ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c0009534:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009538:	53                   	push   ebx
c0009539:	e8 a8 ff ff ff       	call   c00094e6 <IDTEntry::setOffset(unsigned int)>
c000953e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009542:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009546:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000954a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000954e:	e8 b3 ff ff ff       	call   c0009506 <IDT::addEntry(IDTEntry, int)>
c0009553:	83 c4 30             	add    esp,0x30
c0009556:	5b                   	pop    ebx
c0009557:	c3                   	ret    

c0009558 <IDT::flush()>:
c0009558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000955c:	66 c7 05 78 7f 02 c0 ff 07 	mov    WORD PTR ds:0xc0027f78,0x7ff
c0009565:	a3 7a 7f 02 c0       	mov    ds:0xc0027f7a,eax
c000956a:	0f 01 1d 78 7f 02 c0 	lidtd  ds:0xc0027f78
c0009571:	c3                   	ret    

c0009572 <IDT::setup()>:
c0009572:	57                   	push   edi
c0009573:	56                   	push   esi
c0009574:	53                   	push   ebx
c0009575:	83 ec 10             	sub    esp,0x10
c0009578:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000957c:	6a 00                	push   0x0
c000957e:	68 a5 03 00 c0       	push   0xc00003a5
c0009583:	6a 00                	push   0x0
c0009585:	53                   	push   ebx
c0009586:	e8 95 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000958b:	6a 00                	push   0x0
c000958d:	68 b5 03 00 c0       	push   0xc00003b5
c0009592:	6a 01                	push   0x1
c0009594:	53                   	push   ebx
c0009595:	e8 86 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000959a:	83 c4 20             	add    esp,0x20
c000959d:	6a 00                	push   0x0
c000959f:	68 bf 03 00 c0       	push   0xc00003bf
c00095a4:	6a 02                	push   0x2
c00095a6:	53                   	push   ebx
c00095a7:	e8 74 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ac:	6a 00                	push   0x0
c00095ae:	68 c9 03 00 c0       	push   0xc00003c9
c00095b3:	6a 03                	push   0x3
c00095b5:	53                   	push   ebx
c00095b6:	e8 65 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095bb:	83 c4 20             	add    esp,0x20
c00095be:	6a 00                	push   0x0
c00095c0:	68 d3 03 00 c0       	push   0xc00003d3
c00095c5:	6a 04                	push   0x4
c00095c7:	53                   	push   ebx
c00095c8:	e8 53 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095cd:	6a 00                	push   0x0
c00095cf:	68 dd 03 00 c0       	push   0xc00003dd
c00095d4:	6a 05                	push   0x5
c00095d6:	53                   	push   ebx
c00095d7:	e8 44 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095dc:	83 c4 20             	add    esp,0x20
c00095df:	6a 00                	push   0x0
c00095e1:	68 e7 03 00 c0       	push   0xc00003e7
c00095e6:	6a 06                	push   0x6
c00095e8:	53                   	push   ebx
c00095e9:	e8 32 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ee:	6a 00                	push   0x0
c00095f0:	68 f1 03 00 c0       	push   0xc00003f1
c00095f5:	6a 07                	push   0x7
c00095f7:	53                   	push   ebx
c00095f8:	e8 23 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095fd:	83 c4 20             	add    esp,0x20
c0009600:	6a 00                	push   0x0
c0009602:	68 fb 03 00 c0       	push   0xc00003fb
c0009607:	6a 08                	push   0x8
c0009609:	53                   	push   ebx
c000960a:	e8 11 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000960f:	6a 00                	push   0x0
c0009611:	68 03 04 00 c0       	push   0xc0000403
c0009616:	6a 09                	push   0x9
c0009618:	53                   	push   ebx
c0009619:	e8 02 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000961e:	83 c4 20             	add    esp,0x20
c0009621:	6a 00                	push   0x0
c0009623:	68 0d 04 00 c0       	push   0xc000040d
c0009628:	6a 0a                	push   0xa
c000962a:	53                   	push   ebx
c000962b:	e8 f0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009630:	6a 00                	push   0x0
c0009632:	68 15 04 00 c0       	push   0xc0000415
c0009637:	6a 0b                	push   0xb
c0009639:	53                   	push   ebx
c000963a:	e8 e1 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000963f:	83 c4 20             	add    esp,0x20
c0009642:	6a 00                	push   0x0
c0009644:	68 1d 04 00 c0       	push   0xc000041d
c0009649:	6a 0c                	push   0xc
c000964b:	53                   	push   ebx
c000964c:	e8 cf fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009651:	6a 00                	push   0x0
c0009653:	68 25 04 00 c0       	push   0xc0000425
c0009658:	6a 0d                	push   0xd
c000965a:	53                   	push   ebx
c000965b:	e8 c0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009660:	83 c4 20             	add    esp,0x20
c0009663:	6a 00                	push   0x0
c0009665:	68 2d 04 00 c0       	push   0xc000042d
c000966a:	6a 0e                	push   0xe
c000966c:	53                   	push   ebx
c000966d:	e8 ae fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009672:	6a 00                	push   0x0
c0009674:	68 35 04 00 c0       	push   0xc0000435
c0009679:	6a 0f                	push   0xf
c000967b:	53                   	push   ebx
c000967c:	e8 9f fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009681:	83 c4 20             	add    esp,0x20
c0009684:	6a 00                	push   0x0
c0009686:	68 3f 04 00 c0       	push   0xc000043f
c000968b:	6a 10                	push   0x10
c000968d:	53                   	push   ebx
c000968e:	e8 8d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009693:	6a 00                	push   0x0
c0009695:	68 49 04 00 c0       	push   0xc0000449
c000969a:	6a 11                	push   0x11
c000969c:	53                   	push   ebx
c000969d:	e8 7e fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096a2:	83 c4 20             	add    esp,0x20
c00096a5:	6a 00                	push   0x0
c00096a7:	68 53 04 00 c0       	push   0xc0000453
c00096ac:	6a 12                	push   0x12
c00096ae:	53                   	push   ebx
c00096af:	e8 6c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096b4:	6a 01                	push   0x1
c00096b6:	68 ed 04 00 c0       	push   0xc00004ed
c00096bb:	6a 60                	push   0x60
c00096bd:	53                   	push   ebx
c00096be:	e8 5d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096c3:	83 c4 20             	add    esp,0x20
c00096c6:	6a 00                	push   0x0
c00096c8:	68 f4 04 00 c0       	push   0xc00004f4
c00096cd:	6a 20                	push   0x20
c00096cf:	53                   	push   ebx
c00096d0:	e8 4b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096d5:	6a 00                	push   0x0
c00096d7:	68 df 04 00 c0       	push   0xc00004df
c00096dc:	6a 21                	push   0x21
c00096de:	53                   	push   ebx
c00096df:	e8 3c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096e4:	83 c4 20             	add    esp,0x20
c00096e7:	6a 00                	push   0x0
c00096e9:	68 e6 04 00 c0       	push   0xc00004e6
c00096ee:	6a 22                	push   0x22
c00096f0:	53                   	push   ebx
c00096f1:	e8 2a fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096f6:	6a 00                	push   0x0
c00096f8:	68 5d 04 00 c0       	push   0xc000045d
c00096fd:	6a 23                	push   0x23
c00096ff:	53                   	push   ebx
c0009700:	e8 1b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009705:	83 c4 20             	add    esp,0x20
c0009708:	6a 00                	push   0x0
c000970a:	68 67 04 00 c0       	push   0xc0000467
c000970f:	6a 24                	push   0x24
c0009711:	53                   	push   ebx
c0009712:	e8 09 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009717:	6a 00                	push   0x0
c0009719:	68 71 04 00 c0       	push   0xc0000471
c000971e:	6a 25                	push   0x25
c0009720:	53                   	push   ebx
c0009721:	e8 fa fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009726:	83 c4 20             	add    esp,0x20
c0009729:	6a 00                	push   0x0
c000972b:	68 7b 04 00 c0       	push   0xc000047b
c0009730:	6a 26                	push   0x26
c0009732:	53                   	push   ebx
c0009733:	e8 e8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009738:	6a 00                	push   0x0
c000973a:	68 85 04 00 c0       	push   0xc0000485
c000973f:	6a 27                	push   0x27
c0009741:	53                   	push   ebx
c0009742:	e8 d9 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009747:	83 c4 20             	add    esp,0x20
c000974a:	6a 00                	push   0x0
c000974c:	68 8f 04 00 c0       	push   0xc000048f
c0009751:	6a 28                	push   0x28
c0009753:	53                   	push   ebx
c0009754:	e8 c7 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009759:	6a 00                	push   0x0
c000975b:	68 99 04 00 c0       	push   0xc0000499
c0009760:	6a 29                	push   0x29
c0009762:	53                   	push   ebx
c0009763:	e8 b8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009768:	83 c4 20             	add    esp,0x20
c000976b:	6a 00                	push   0x0
c000976d:	68 a3 04 00 c0       	push   0xc00004a3
c0009772:	6a 2a                	push   0x2a
c0009774:	53                   	push   ebx
c0009775:	e8 a6 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000977a:	6a 00                	push   0x0
c000977c:	68 ad 04 00 c0       	push   0xc00004ad
c0009781:	6a 2b                	push   0x2b
c0009783:	53                   	push   ebx
c0009784:	e8 97 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009789:	83 c4 20             	add    esp,0x20
c000978c:	6a 00                	push   0x0
c000978e:	68 b7 04 00 c0       	push   0xc00004b7
c0009793:	6a 2c                	push   0x2c
c0009795:	53                   	push   ebx
c0009796:	e8 85 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000979b:	6a 00                	push   0x0
c000979d:	68 c1 04 00 c0       	push   0xc00004c1
c00097a2:	6a 2d                	push   0x2d
c00097a4:	53                   	push   ebx
c00097a5:	e8 76 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097aa:	83 c4 20             	add    esp,0x20
c00097ad:	6a 00                	push   0x0
c00097af:	68 cb 04 00 c0       	push   0xc00004cb
c00097b4:	6a 2e                	push   0x2e
c00097b6:	53                   	push   ebx
c00097b7:	e8 64 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097bc:	6a 00                	push   0x0
c00097be:	68 d5 04 00 c0       	push   0xc00004d5
c00097c3:	6a 2f                	push   0x2f
c00097c5:	53                   	push   ebx
c00097c6:	e8 55 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097cb:	83 c4 20             	add    esp,0x20
c00097ce:	6a 00                	push   0x0
c00097d0:	68 2b 05 00 c0       	push   0xc000052b
c00097d5:	6a 30                	push   0x30
c00097d7:	53                   	push   ebx
c00097d8:	e8 43 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097dd:	6a 00                	push   0x0
c00097df:	68 35 05 00 c0       	push   0xc0000535
c00097e4:	6a 31                	push   0x31
c00097e6:	53                   	push   ebx
c00097e7:	e8 34 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097ec:	83 c4 20             	add    esp,0x20
c00097ef:	6a 00                	push   0x0
c00097f1:	68 3f 05 00 c0       	push   0xc000053f
c00097f6:	6a 32                	push   0x32
c00097f8:	53                   	push   ebx
c00097f9:	e8 22 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097fe:	6a 00                	push   0x0
c0009800:	68 49 05 00 c0       	push   0xc0000549
c0009805:	6a 33                	push   0x33
c0009807:	53                   	push   ebx
c0009808:	e8 13 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000980d:	83 c4 20             	add    esp,0x20
c0009810:	6a 00                	push   0x0
c0009812:	68 53 05 00 c0       	push   0xc0000553
c0009817:	6a 34                	push   0x34
c0009819:	53                   	push   ebx
c000981a:	e8 01 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000981f:	6a 00                	push   0x0
c0009821:	68 5d 05 00 c0       	push   0xc000055d
c0009826:	6a 35                	push   0x35
c0009828:	53                   	push   ebx
c0009829:	e8 f2 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000982e:	83 c4 20             	add    esp,0x20
c0009831:	6a 00                	push   0x0
c0009833:	68 67 05 00 c0       	push   0xc0000567
c0009838:	6a 36                	push   0x36
c000983a:	53                   	push   ebx
c000983b:	e8 e0 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009840:	6a 00                	push   0x0
c0009842:	68 71 05 00 c0       	push   0xc0000571
c0009847:	6a 37                	push   0x37
c0009849:	53                   	push   ebx
c000984a:	e8 d1 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000984f:	83 c4 1c             	add    esp,0x1c
c0009852:	6a 03                	push   0x3
c0009854:	6a 02                	push   0x2
c0009856:	ff 35 90 80 02 c0    	push   DWORD PTR ds:0xc0028090
c000985c:	e8 1d 29 00 00       	call   c000c17e <VAS::allocatePages(int, int)>
c0009861:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009868:	89 c6                	mov    esi,eax
c000986a:	e8 a0 01 00 00       	call   c0009a0f <malloc>
c000986f:	81 c6 00 20 00 00    	add    esi,0x2000
c0009875:	89 04 24             	mov    DWORD PTR [esp],eax
c0009878:	89 c7                	mov    edi,eax
c000987a:	e8 99 1a 00 00       	call   c000b318 <TSS::TSS()>
c000987f:	83 c4 0c             	add    esp,0xc
c0009882:	68 fb 03 00 c0       	push   0xc00003fb
c0009887:	56                   	push   esi
c0009888:	57                   	push   edi
c0009889:	e8 ce 1a 00 00       	call   c000b35c <TSS::setup(unsigned long, unsigned long)>
c000988e:	89 c6                	mov    esi,eax
c0009890:	58                   	pop    eax
c0009891:	5a                   	pop    edx
c0009892:	6a 00                	push   0x0
c0009894:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009898:	50                   	push   eax
c0009899:	e8 d6 fb ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c000989e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098a2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00098a7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00098ae:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00098b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098b8:	80 ce 05             	or     dh,0x5
c00098bb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00098be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098c6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00098c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00098cc:	e8 87 fc ff ff       	call   c0009558 <IDT::flush()>
c00098d1:	83 c4 20             	add    esp,0x20
c00098d4:	5b                   	pop    ebx
c00098d5:	5e                   	pop    esi
c00098d6:	5f                   	pop    edi
c00098d7:	c3                   	ret    

c00098d8 <sbrk>:
c00098d8:	55                   	push   ebp
c00098d9:	57                   	push   edi
c00098da:	56                   	push   esi
c00098db:	53                   	push   ebx
c00098dc:	83 ec 24             	sub    esp,0x24
c00098df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098e3:	53                   	push   ebx
c00098e4:	68 b8 3f 02 c0       	push   0xc0023fb8
c00098e9:	e8 0d 34 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00098ee:	83 c4 10             	add    esp,0x10
c00098f1:	85 db                	test   ebx,ebx
c00098f3:	74 5f                	je     c0009954 <sbrk+0x7c>
c00098f5:	78 64                	js     c000995b <sbrk+0x83>
c00098f7:	a1 d8 71 02 c0       	mov    eax,ds:0xc00271d8
c00098fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009900:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009906:	89 dd                	mov    ebp,ebx
c0009908:	78 69                	js     c0009973 <sbrk+0x9b>
c000990a:	c1 fd 0c             	sar    ebp,0xc
c000990d:	bb 00 00 00 00       	mov    ebx,0x0
c0009912:	8b 35 90 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028090
c0009918:	8b 3d d8 71 02 c0    	mov    edi,DWORD PTR ds:0xc00271d8
c000991e:	e8 a3 07 00 00       	call   c000a0c6 <Phys::allocatePage()>
c0009923:	68 01 04 00 00       	push   0x401
c0009928:	57                   	push   edi
c0009929:	50                   	push   eax
c000992a:	56                   	push   esi
c000992b:	e8 4c 27 00 00       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009930:	81 05 d8 71 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00271d8,0x1000
c000993a:	43                   	inc    ebx
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	39 dd                	cmp    ebp,ebx
c0009940:	75 d0                	jne    c0009912 <sbrk+0x3a>
c0009942:	0f 20 d8             	mov    eax,cr3
c0009945:	0f 22 d8             	mov    cr3,eax
c0009948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994c:	83 c4 1c             	add    esp,0x1c
c000994f:	5b                   	pop    ebx
c0009950:	5e                   	pop    esi
c0009951:	5f                   	pop    edi
c0009952:	5d                   	pop    ebp
c0009953:	c3                   	ret    
c0009954:	a1 d8 71 02 c0       	mov    eax,ds:0xc00271d8
c0009959:	eb f1                	jmp    c000994c <sbrk+0x74>
c000995b:	83 ec 08             	sub    esp,0x8
c000995e:	53                   	push   ebx
c000995f:	68 e4 3f 02 c0       	push   0xc0023fe4
c0009964:	e8 92 33 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009969:	83 c4 10             	add    esp,0x10
c000996c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009971:	eb d9                	jmp    c000994c <sbrk+0x74>
c0009973:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009979:	eb 8f                	jmp    c000990a <sbrk+0x32>

c000997b <mmap>:
c000997b:	83 ec 18             	sub    esp,0x18
c000997e:	68 d6 3f 02 c0       	push   0xc0023fd6
c0009983:	e8 7f b0 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c0009988:	b8 00 00 00 00       	mov    eax,0x0
c000998d:	83 c4 1c             	add    esp,0x1c
c0009990:	c3                   	ret    

c0009991 <munmap>:
c0009991:	83 ec 18             	sub    esp,0x18
c0009994:	68 db 3f 02 c0       	push   0xc0023fdb
c0009999:	e8 69 b0 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000999e:	b8 00 00 00 00       	mov    eax,0x0
c00099a3:	83 c4 1c             	add    esp,0x1c
c00099a6:	c3                   	ret    

c00099a7 <liballoc_lock()>:
c00099a7:	fa                   	cli    
c00099a8:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c00099ae:	b8 00 00 00 00       	mov    eax,0x0
c00099b3:	c3                   	ret    

c00099b4 <liballoc_unlock()>:
c00099b4:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c00099b9:	48                   	dec    eax
c00099ba:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c00099bf:	75 01                	jne    c00099c2 <liballoc_unlock()+0xe>
c00099c1:	fb                   	sti    
c00099c2:	b8 00 00 00 00       	mov    eax,0x0
c00099c7:	c3                   	ret    

c00099c8 <liballoc_alloc(int)>:
c00099c8:	83 ec 10             	sub    esp,0x10
c00099cb:	6a 01                	push   0x1
c00099cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099d1:	ff 35 90 80 02 c0    	push   DWORD PTR ds:0xc0028090
c00099d7:	e8 a2 27 00 00       	call   c000c17e <VAS::allocatePages(int, int)>
c00099dc:	83 c4 1c             	add    esp,0x1c
c00099df:	c3                   	ret    

c00099e0 <liballoc_free(void*, int)>:
c00099e0:	83 ec 14             	sub    esp,0x14
c00099e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099e7:	ff 35 90 80 02 c0    	push   DWORD PTR ds:0xc0028090
c00099ed:	e8 36 24 00 00       	call   c000be28 <VAS::freeAllocatedPages(unsigned long)>
c00099f2:	b8 00 00 00 00       	mov    eax,0x0
c00099f7:	83 c4 1c             	add    esp,0x1c
c00099fa:	c3                   	ret    

c00099fb <realloc>:
c00099fb:	83 ec 14             	sub    esp,0x14
c00099fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a06:	e8 55 7b ff ff       	call   c0001560 <dlrealloc>
c0009a0b:	83 c4 1c             	add    esp,0x1c
c0009a0e:	c3                   	ret    

c0009a0f <malloc>:
c0009a0f:	83 ec 18             	sub    esp,0x18
c0009a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a16:	e8 08 76 ff ff       	call   c0001023 <dlmalloc>
c0009a1b:	83 c4 1c             	add    esp,0x1c
c0009a1e:	c3                   	ret    

c0009a1f <free>:
c0009a1f:	83 ec 18             	sub    esp,0x18
c0009a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a26:	e8 9d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a2b:	83 c4 1c             	add    esp,0x1c
c0009a2e:	c3                   	ret    

c0009a2f <rfree>:
c0009a2f:	83 ec 18             	sub    esp,0x18
c0009a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a36:	e8 8d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a3b:	83 c4 1c             	add    esp,0x1c
c0009a3e:	c3                   	ret    

c0009a3f <calloc>:
c0009a3f:	56                   	push   esi
c0009a40:	53                   	push   ebx
c0009a41:	83 ec 10             	sub    esp,0x10
c0009a44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009a48:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a4d:	53                   	push   ebx
c0009a4e:	e8 bc ff ff ff       	call   c0009a0f <malloc>
c0009a53:	89 c6                	mov    esi,eax
c0009a55:	83 c4 0c             	add    esp,0xc
c0009a58:	53                   	push   ebx
c0009a59:	6a 00                	push   0x0
c0009a5b:	50                   	push   eax
c0009a5c:	e8 23 6c ff ff       	call   c0000684 <memset>
c0009a61:	89 f0                	mov    eax,esi
c0009a63:	83 c4 14             	add    esp,0x14
c0009a66:	5b                   	pop    ebx
c0009a67:	5e                   	pop    esi
c0009a68:	c3                   	ret    

c0009a69 <Krnl::setBootMessage(char const*)>:
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a72:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a79:	68 9e 00 00 00       	push   0x9e
c0009a7e:	6a 00                	push   0x0
c0009a80:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a84:	56                   	push   esi
c0009a85:	e8 fa 6b ff ff       	call   c0000684 <memset>
c0009a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a8d:	e8 0e 6c ff ff       	call   c00006a0 <strlen>
c0009a92:	ba 50 00 00 00       	mov    edx,0x50
c0009a97:	83 c4 10             	add    esp,0x10
c0009a9a:	29 c2                	sub    edx,eax
c0009a9c:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009aa0:	d1 ea                	shr    edx,1
c0009aa2:	84 c0                	test   al,al
c0009aa4:	74 19                	je     c0009abf <Krnl::setBootMessage(char const*)+0x56>
c0009aa6:	01 d2                	add    edx,edx
c0009aa8:	43                   	inc    ebx
c0009aa9:	01 f2                	add    edx,esi
c0009aab:	80 cc 0f             	or     ah,0xf
c0009aae:	83 c2 02             	add    edx,0x2
c0009ab1:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009ab5:	43                   	inc    ebx
c0009ab6:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009abb:	84 c0                	test   al,al
c0009abd:	75 ec                	jne    c0009aab <Krnl::setBootMessage(char const*)+0x42>
c0009abf:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009ac4:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ac9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009acb:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ad1:	5b                   	pop    ebx
c0009ad2:	5e                   	pop    esi
c0009ad3:	5f                   	pop    edi
c0009ad4:	c3                   	ret    

c0009ad5 <kernel_main>:
c0009ad5:	57                   	push   edi
c0009ad6:	56                   	push   esi
c0009ad7:	53                   	push   ebx
c0009ad8:	83 ec 20             	sub    esp,0x20
c0009adb:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009ae0:	a3 80 7f 02 c0       	mov    ds:0xc0027f80,eax
c0009ae5:	f6 c4 08             	test   ah,0x8
c0009ae8:	0f 85 7a 03 00 00    	jne    c0009e68 <kernel_main+0x393>
c0009aee:	31 f6                	xor    esi,esi
c0009af0:	bf f9 03 00 00       	mov    edi,0x3f9
c0009af5:	89 f0                	mov    eax,esi
c0009af7:	89 fa                	mov    edx,edi
c0009af9:	ee                   	out    dx,al
c0009afa:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aff:	b0 80                	mov    al,0x80
c0009b01:	89 da                	mov    edx,ebx
c0009b03:	ee                   	out    dx,al
c0009b04:	b1 03                	mov    cl,0x3
c0009b06:	ba f8 03 00 00       	mov    edx,0x3f8
c0009b0b:	88 c8                	mov    al,cl
c0009b0d:	ee                   	out    dx,al
c0009b0e:	89 f0                	mov    eax,esi
c0009b10:	89 fa                	mov    edx,edi
c0009b12:	ee                   	out    dx,al
c0009b13:	88 c8                	mov    al,cl
c0009b15:	89 da                	mov    edx,ebx
c0009b17:	ee                   	out    dx,al
c0009b18:	b0 c7                	mov    al,0xc7
c0009b1a:	ba fa 03 00 00       	mov    edx,0x3fa
c0009b1f:	ee                   	out    dx,al
c0009b20:	b0 0b                	mov    al,0xb
c0009b22:	ba fc 03 00 00       	mov    edx,0x3fc
c0009b27:	ee                   	out    dx,al
c0009b28:	83 ec 0c             	sub    esp,0xc
c0009b2b:	68 14 40 02 c0       	push   0xc0024014
c0009b30:	e8 c6 31 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009b35:	83 c4 10             	add    esp,0x10
c0009b38:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0009b3f:	0f 85 eb 02 00 00    	jne    c0009e30 <kernel_main+0x35b>
c0009b45:	e8 d2 0c 00 00       	call   c000a81c <installVgaTextImplementation()>
c0009b4a:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0009b51:	0f 85 94 02 00 00    	jne    c0009deb <kernel_main+0x316>
c0009b57:	0f b6 05 e0 71 02 c0 	movzx  eax,BYTE PTR ds:0xc00271e0
c0009b5e:	84 c0                	test   al,al
c0009b60:	74 7b                	je     c0009bdd <kernel_main+0x108>
c0009b62:	31 db                	xor    ebx,ebx
c0009b64:	bf 0a 00 00 00       	mov    edi,0xa
c0009b69:	be 05 00 00 00       	mov    esi,0x5
c0009b6e:	31 c9                	xor    ecx,ecx
c0009b70:	eb 2a                	jmp    c0009b9c <kernel_main+0xc7>
c0009b72:	3c 0d                	cmp    al,0xd
c0009b74:	74 1a                	je     c0009b90 <kernel_main+0xbb>
c0009b76:	3c 0a                	cmp    al,0xa
c0009b78:	74 40                	je     c0009bba <kernel_main+0xe5>
c0009b7a:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b7d:	80 cc 0e             	or     ah,0xe
c0009b80:	c1 e2 04             	shl    edx,0x4
c0009b83:	01 ca                	add    edx,ecx
c0009b85:	41                   	inc    ecx
c0009b86:	01 fa                	add    edx,edi
c0009b88:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b90:	43                   	inc    ebx
c0009b91:	0f b6 83 e0 71 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8e20]
c0009b98:	84 c0                	test   al,al
c0009b9a:	74 32                	je     c0009bce <kernel_main+0xf9>
c0009b9c:	80 b9 16 72 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd8dea],0xdb
c0009ba3:	75 cd                	jne    c0009b72 <kernel_main+0x9d>
c0009ba5:	0f b6 91 15 72 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd8deb]
c0009bac:	83 e2 fe             	and    edx,0xfffffffe
c0009baf:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009bb5:	75 bb                	jne    c0009b72 <kernel_main+0x9d>
c0009bb7:	47                   	inc    edi
c0009bb8:	eb b8                	jmp    c0009b72 <kernel_main+0x9d>
c0009bba:	43                   	inc    ebx
c0009bbb:	46                   	inc    esi
c0009bbc:	31 c9                	xor    ecx,ecx
c0009bbe:	0f b6 83 e0 71 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8e20]
c0009bc5:	bf 0a 00 00 00       	mov    edi,0xa
c0009bca:	84 c0                	test   al,al
c0009bcc:	75 ce                	jne    c0009b9c <kernel_main+0xc7>
c0009bce:	8b 15 80 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f80
c0009bd4:	80 e6 08             	and    dh,0x8
c0009bd7:	0f 85 bf 00 00 00    	jne    c0009c9c <kernel_main+0x1c7>
c0009bdd:	83 ec 0c             	sub    esp,0xc
c0009be0:	68 b0 40 02 c0       	push   0xc00240b0
c0009be5:	e8 7f fe ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009bea:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009bef:	05 ff 0f 00 00       	add    eax,0xfff
c0009bf4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bfc:	e8 44 06 00 00       	call   c000a245 <Phys::physicalMemorySetup(unsigned int)>
c0009c01:	83 c4 10             	add    esp,0x10
c0009c04:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0009c0b:	0f 85 a2 01 00 00    	jne    c0009db3 <kernel_main+0x2de>
c0009c11:	e8 7e 1f 00 00       	call   c000bb94 <Virt::virtualMemorySetup()>
c0009c16:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0009c1d:	0f 85 58 01 00 00    	jne    c0009d7b <kernel_main+0x2a6>
c0009c23:	83 ec 0c             	sub    esp,0xc
c0009c26:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009c2a:	56                   	push   esi
c0009c2b:	e8 20 20 00 00       	call   c000bc50 <VAS::VAS()>
c0009c30:	83 c4 10             	add    esp,0x10
c0009c33:	89 35 90 80 02 c0    	mov    DWORD PTR ds:0xc0028090,esi
c0009c39:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0009c40:	0f 85 fd 00 00 00    	jne    c0009d43 <kernel_main+0x26e>
c0009c46:	e8 d5 63 ff ff       	call   c0000020 <callGlobalConstructors>
c0009c4b:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0009c52:	0f 85 b3 00 00 00    	jne    c0009d0b <kernel_main+0x236>
c0009c58:	83 ec 0c             	sub    esp,0xc
c0009c5b:	68 ec 01 00 00       	push   0x1ec
c0009c60:	e8 aa fd ff ff       	call   c0009a0f <malloc>
c0009c65:	89 c3                	mov    ebx,eax
c0009c67:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c6a:	e8 51 ef ff ff       	call   c0008bc0 <Computer::Computer()>
c0009c6f:	83 c4 10             	add    esp,0x10
c0009c72:	89 1d 68 7f 02 c0    	mov    DWORD PTR ds:0xc0027f68,ebx
c0009c78:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0009c7f:	75 53                	jne    c0009cd4 <kernel_main+0x1ff>
c0009c81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c83:	6a 00                	push   0x0
c0009c85:	6a 00                	push   0x0
c0009c87:	6a 00                	push   0x0
c0009c89:	53                   	push   ebx
c0009c8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009c8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0009c90:	e8 6b 22 00 00       	call   c000bf00 <VAS::~VAS()>
c0009c95:	83 c4 30             	add    esp,0x30
c0009c98:	5b                   	pop    ebx
c0009c99:	5e                   	pop    esi
c0009c9a:	5f                   	pop    edi
c0009c9b:	c3                   	ret    
c0009c9c:	83 ec 0c             	sub    esp,0xc
c0009c9f:	68 5f 40 02 c0       	push   0xc002405f
c0009ca4:	e8 c0 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ca9:	83 c4 10             	add    esp,0x10
c0009cac:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0009cb3:	0f 85 24 ff ff ff    	jne    c0009bdd <kernel_main+0x108>
c0009cb9:	eb 04                	jmp    c0009cbf <kernel_main+0x1ea>
c0009cbb:	3c 1c                	cmp    al,0x1c
c0009cbd:	74 06                	je     c0009cc5 <kernel_main+0x1f0>
c0009cbf:	e4 60                	in     al,0x60
c0009cc1:	3c 5a                	cmp    al,0x5a
c0009cc3:	75 f6                	jne    c0009cbb <kernel_main+0x1e6>
c0009cc5:	e4 60                	in     al,0x60
c0009cc7:	3c 5a                	cmp    al,0x5a
c0009cc9:	74 fa                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccb:	3c 1c                	cmp    al,0x1c
c0009ccd:	74 f6                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccf:	e9 09 ff ff ff       	jmp    c0009bdd <kernel_main+0x108>
c0009cd4:	83 ec 0c             	sub    esp,0xc
c0009cd7:	68 9e 40 02 c0       	push   0xc002409e
c0009cdc:	e8 88 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0009ceb:	74 0c                	je     c0009cf9 <kernel_main+0x224>
c0009ced:	8b 1d 68 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f68
c0009cf3:	eb 8c                	jmp    c0009c81 <kernel_main+0x1ac>
c0009cf5:	3c 1c                	cmp    al,0x1c
c0009cf7:	74 06                	je     c0009cff <kernel_main+0x22a>
c0009cf9:	e4 60                	in     al,0x60
c0009cfb:	3c 5a                	cmp    al,0x5a
c0009cfd:	75 f6                	jne    c0009cf5 <kernel_main+0x220>
c0009cff:	e4 60                	in     al,0x60
c0009d01:	3c 5a                	cmp    al,0x5a
c0009d03:	74 fa                	je     c0009cff <kernel_main+0x22a>
c0009d05:	3c 1c                	cmp    al,0x1c
c0009d07:	74 f6                	je     c0009cff <kernel_main+0x22a>
c0009d09:	eb e2                	jmp    c0009ced <kernel_main+0x218>
c0009d0b:	83 ec 0c             	sub    esp,0xc
c0009d0e:	68 8b 40 02 c0       	push   0xc002408b
c0009d13:	e8 51 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d18:	83 c4 10             	add    esp,0x10
c0009d1b:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0009d22:	0f 85 30 ff ff ff    	jne    c0009c58 <kernel_main+0x183>
c0009d28:	eb 04                	jmp    c0009d2e <kernel_main+0x259>
c0009d2a:	3c 1c                	cmp    al,0x1c
c0009d2c:	74 06                	je     c0009d34 <kernel_main+0x25f>
c0009d2e:	e4 60                	in     al,0x60
c0009d30:	3c 5a                	cmp    al,0x5a
c0009d32:	75 f6                	jne    c0009d2a <kernel_main+0x255>
c0009d34:	e4 60                	in     al,0x60
c0009d36:	3c 5a                	cmp    al,0x5a
c0009d38:	74 fa                	je     c0009d34 <kernel_main+0x25f>
c0009d3a:	3c 1c                	cmp    al,0x1c
c0009d3c:	74 f6                	je     c0009d34 <kernel_main+0x25f>
c0009d3e:	e9 15 ff ff ff       	jmp    c0009c58 <kernel_main+0x183>
c0009d43:	83 ec 0c             	sub    esp,0xc
c0009d46:	68 81 40 02 c0       	push   0xc0024081
c0009d4b:	e8 19 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d50:	83 c4 10             	add    esp,0x10
c0009d53:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0009d5a:	0f 85 e6 fe ff ff    	jne    c0009c46 <kernel_main+0x171>
c0009d60:	eb 04                	jmp    c0009d66 <kernel_main+0x291>
c0009d62:	3c 1c                	cmp    al,0x1c
c0009d64:	74 06                	je     c0009d6c <kernel_main+0x297>
c0009d66:	e4 60                	in     al,0x60
c0009d68:	3c 5a                	cmp    al,0x5a
c0009d6a:	75 f6                	jne    c0009d62 <kernel_main+0x28d>
c0009d6c:	e4 60                	in     al,0x60
c0009d6e:	3c 5a                	cmp    al,0x5a
c0009d70:	74 fa                	je     c0009d6c <kernel_main+0x297>
c0009d72:	3c 1c                	cmp    al,0x1c
c0009d74:	74 f6                	je     c0009d6c <kernel_main+0x297>
c0009d76:	e9 cb fe ff ff       	jmp    c0009c46 <kernel_main+0x171>
c0009d7b:	83 ec 0c             	sub    esp,0xc
c0009d7e:	68 76 40 02 c0       	push   0xc0024076
c0009d83:	e8 e1 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d88:	83 c4 10             	add    esp,0x10
c0009d8b:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0009d92:	0f 85 8b fe ff ff    	jne    c0009c23 <kernel_main+0x14e>
c0009d98:	eb 04                	jmp    c0009d9e <kernel_main+0x2c9>
c0009d9a:	3c 1c                	cmp    al,0x1c
c0009d9c:	74 06                	je     c0009da4 <kernel_main+0x2cf>
c0009d9e:	e4 60                	in     al,0x60
c0009da0:	3c 5a                	cmp    al,0x5a
c0009da2:	75 f6                	jne    c0009d9a <kernel_main+0x2c5>
c0009da4:	e4 60                	in     al,0x60
c0009da6:	3c 5a                	cmp    al,0x5a
c0009da8:	74 fa                	je     c0009da4 <kernel_main+0x2cf>
c0009daa:	3c 1c                	cmp    al,0x1c
c0009dac:	74 f6                	je     c0009da4 <kernel_main+0x2cf>
c0009dae:	e9 70 fe ff ff       	jmp    c0009c23 <kernel_main+0x14e>
c0009db3:	83 ec 0c             	sub    esp,0xc
c0009db6:	68 6b 40 02 c0       	push   0xc002406b
c0009dbb:	e8 a9 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0009dca:	0f 85 41 fe ff ff    	jne    c0009c11 <kernel_main+0x13c>
c0009dd0:	eb 04                	jmp    c0009dd6 <kernel_main+0x301>
c0009dd2:	3c 1c                	cmp    al,0x1c
c0009dd4:	74 06                	je     c0009ddc <kernel_main+0x307>
c0009dd6:	e4 60                	in     al,0x60
c0009dd8:	3c 5a                	cmp    al,0x5a
c0009dda:	75 f6                	jne    c0009dd2 <kernel_main+0x2fd>
c0009ddc:	e4 60                	in     al,0x60
c0009dde:	3c 5a                	cmp    al,0x5a
c0009de0:	74 fa                	je     c0009ddc <kernel_main+0x307>
c0009de2:	3c 1c                	cmp    al,0x1c
c0009de4:	74 f6                	je     c0009ddc <kernel_main+0x307>
c0009de6:	e9 26 fe ff ff       	jmp    c0009c11 <kernel_main+0x13c>
c0009deb:	83 ec 0c             	sub    esp,0xc
c0009dee:	68 4d 40 02 c0       	push   0xc002404d
c0009df3:	e8 71 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009df8:	8b 15 80 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f80
c0009dfe:	83 c4 10             	add    esp,0x10
c0009e01:	f6 c2 80             	test   dl,0x80
c0009e04:	74 18                	je     c0009e1e <kernel_main+0x349>
c0009e06:	0f b6 05 e0 71 02 c0 	movzx  eax,BYTE PTR ds:0xc00271e0
c0009e0d:	84 c0                	test   al,al
c0009e0f:	0f 85 4d fd ff ff    	jne    c0009b62 <kernel_main+0x8d>
c0009e15:	e9 ba fd ff ff       	jmp    c0009bd4 <kernel_main+0xff>
c0009e1a:	3c 1c                	cmp    al,0x1c
c0009e1c:	74 06                	je     c0009e24 <kernel_main+0x34f>
c0009e1e:	e4 60                	in     al,0x60
c0009e20:	3c 5a                	cmp    al,0x5a
c0009e22:	75 f6                	jne    c0009e1a <kernel_main+0x345>
c0009e24:	e4 60                	in     al,0x60
c0009e26:	3c 5a                	cmp    al,0x5a
c0009e28:	74 fa                	je     c0009e24 <kernel_main+0x34f>
c0009e2a:	3c 1c                	cmp    al,0x1c
c0009e2c:	74 f6                	je     c0009e24 <kernel_main+0x34f>
c0009e2e:	eb d6                	jmp    c0009e06 <kernel_main+0x331>
c0009e30:	83 ec 0c             	sub    esp,0xc
c0009e33:	68 3e 40 02 c0       	push   0xc002403e
c0009e38:	e8 2c fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e3d:	83 c4 10             	add    esp,0x10
c0009e40:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0009e47:	0f 85 f8 fc ff ff    	jne    c0009b45 <kernel_main+0x70>
c0009e4d:	eb 04                	jmp    c0009e53 <kernel_main+0x37e>
c0009e4f:	3c 1c                	cmp    al,0x1c
c0009e51:	74 06                	je     c0009e59 <kernel_main+0x384>
c0009e53:	e4 60                	in     al,0x60
c0009e55:	3c 5a                	cmp    al,0x5a
c0009e57:	75 f6                	jne    c0009e4f <kernel_main+0x37a>
c0009e59:	e4 60                	in     al,0x60
c0009e5b:	3c 5a                	cmp    al,0x5a
c0009e5d:	74 fa                	je     c0009e59 <kernel_main+0x384>
c0009e5f:	3c 1c                	cmp    al,0x1c
c0009e61:	74 f6                	je     c0009e59 <kernel_main+0x384>
c0009e63:	e9 dd fc ff ff       	jmp    c0009b45 <kernel_main+0x70>
c0009e68:	83 ec 0c             	sub    esp,0xc
c0009e6b:	68 2b 40 02 c0       	push   0xc002402b
c0009e70:	e8 f4 fb ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e75:	83 c4 10             	add    esp,0x10
c0009e78:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0009e7f:	0f 85 69 fc ff ff    	jne    c0009aee <kernel_main+0x19>
c0009e85:	eb 04                	jmp    c0009e8b <kernel_main+0x3b6>
c0009e87:	3c 1c                	cmp    al,0x1c
c0009e89:	74 06                	je     c0009e91 <kernel_main+0x3bc>
c0009e8b:	e4 60                	in     al,0x60
c0009e8d:	3c 5a                	cmp    al,0x5a
c0009e8f:	75 f6                	jne    c0009e87 <kernel_main+0x3b2>
c0009e91:	e4 60                	in     al,0x60
c0009e93:	3c 5a                	cmp    al,0x5a
c0009e95:	74 fa                	je     c0009e91 <kernel_main+0x3bc>
c0009e97:	3c 1c                	cmp    al,0x1c
c0009e99:	74 f6                	je     c0009e91 <kernel_main+0x3bc>
c0009e9b:	e9 4e fc ff ff       	jmp    c0009aee <kernel_main+0x19>

c0009ea0 <Phys::allocateDMA(unsigned long)>:
c0009ea0:	55                   	push   ebp
c0009ea1:	31 ed                	xor    ebp,ebp
c0009ea3:	57                   	push   edi
c0009ea4:	56                   	push   esi
c0009ea5:	53                   	push   ebx
c0009ea6:	31 db                	xor    ebx,ebx
c0009ea8:	83 ec 28             	sub    esp,0x28
c0009eab:	68 cf 40 02 c0       	push   0xc00240cf
c0009eb0:	e8 46 2e 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009eb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009eb9:	83 c4 10             	add    esp,0x10
c0009ebc:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009ec2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009eca:	c1 ef 0c             	shr    edi,0xc
c0009ecd:	31 c0                	xor    eax,eax
c0009ecf:	eb 19                	jmp    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009ed1:	85 c0                	test   eax,eax
c0009ed3:	75 06                	jne    c0009edb <Phys::allocateDMA(unsigned long)+0x3b>
c0009ed5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009ed9:	89 dd                	mov    ebp,ebx
c0009edb:	8d 70 01             	lea    esi,[eax+0x1]
c0009ede:	39 f7                	cmp    edi,esi
c0009ee0:	74 3f                	je     c0009f21 <Phys::allocateDMA(unsigned long)+0x81>
c0009ee2:	89 f0                	mov    eax,esi
c0009ee4:	43                   	inc    ebx
c0009ee5:	83 fb 0f             	cmp    ebx,0xf
c0009ee8:	7f 11                	jg     c0009efb <Phys::allocateDMA(unsigned long)+0x5b>
c0009eea:	80 bb 9c 7f 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd8064],0x0
c0009ef1:	74 de                	je     c0009ed1 <Phys::allocateDMA(unsigned long)+0x31>
c0009ef3:	31 c0                	xor    eax,eax
c0009ef5:	43                   	inc    ebx
c0009ef6:	83 fb 0f             	cmp    ebx,0xf
c0009ef9:	7e ef                	jle    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009efb:	83 ec 0c             	sub    esp,0xc
c0009efe:	68 ff 40 02 c0       	push   0xc00240ff
c0009f03:	e8 f3 2d 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009f08:	c7 04 24 bc 41 02 c0 	mov    DWORD PTR [esp],0xc00241bc
c0009f0f:	e8 f3 aa 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c0009f14:	83 c4 10             	add    esp,0x10
c0009f17:	31 c0                	xor    eax,eax
c0009f19:	83 c4 1c             	add    esp,0x1c
c0009f1c:	5b                   	pop    ebx
c0009f1d:	5e                   	pop    esi
c0009f1e:	5f                   	pop    edi
c0009f1f:	5d                   	pop    ebp
c0009f20:	c3                   	ret    
c0009f21:	89 e9                	mov    ecx,ebp
c0009f23:	c1 f9 04             	sar    ecx,0x4
c0009f26:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f2a:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009f2e:	89 ca                	mov    edx,ecx
c0009f30:	4a                   	dec    edx
c0009f31:	79 03                	jns    c0009f36 <Phys::allocateDMA(unsigned long)+0x96>
c0009f33:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009f36:	c1 fa 04             	sar    edx,0x4
c0009f39:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009f3d:	74 08                	je     c0009f47 <Phys::allocateDMA(unsigned long)+0xa7>
c0009f3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f43:	31 c0                	xor    eax,eax
c0009f45:	eb ae                	jmp    c0009ef5 <Phys::allocateDMA(unsigned long)+0x55>
c0009f47:	85 f6                	test   esi,esi
c0009f49:	74 15                	je     c0009f60 <Phys::allocateDMA(unsigned long)+0xc0>
c0009f4b:	8d 95 9c 7f 02 c0    	lea    edx,[ebp-0x3ffd8064]
c0009f51:	8d 84 05 9d 7f 02 c0 	lea    eax,[ebp+eax*1-0x3ffd8063]
c0009f58:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009f5b:	42                   	inc    edx
c0009f5c:	39 d0                	cmp    eax,edx
c0009f5e:	75 f8                	jne    c0009f58 <Phys::allocateDMA(unsigned long)+0xb8>
c0009f60:	83 ec 0c             	sub    esp,0xc
c0009f63:	01 3d 94 7f 02 c0    	add    DWORD PTR ds:0xc0027f94,edi
c0009f69:	68 e8 40 02 c0       	push   0xc00240e8
c0009f6e:	e8 88 2d 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009f73:	83 c4 10             	add    esp,0x10
c0009f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f7a:	85 c0                	test   eax,eax
c0009f7c:	74 23                	je     c0009fa1 <Phys::allocateDMA(unsigned long)+0x101>
c0009f7e:	83 ec 0c             	sub    esp,0xc
c0009f81:	68 2a 6e 02 c0       	push   0xc0026e2a
c0009f86:	e8 70 2d 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009f8b:	c7 04 24 bc 41 02 c0 	mov    DWORD PTR [esp],0xc00241bc
c0009f92:	e8 70 aa 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c0009f97:	83 c4 10             	add    esp,0x10
c0009f9a:	89 f0                	mov    eax,esi
c0009f9c:	e9 43 ff ff ff       	jmp    c0009ee4 <Phys::allocateDMA(unsigned long)+0x44>
c0009fa1:	c1 e5 0c             	shl    ebp,0xc
c0009fa4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009faa:	e9 6a ff ff ff       	jmp    c0009f19 <Phys::allocateDMA(unsigned long)+0x79>

c0009faf <Phys::freeDMA(unsigned long, unsigned long)>:
c0009faf:	83 ec 18             	sub    esp,0x18
c0009fb2:	68 03 41 02 c0       	push   0xc0024103
c0009fb7:	e8 3f 2d 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009fbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fc0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009fca:	c1 ea 0c             	shr    edx,0xc
c0009fcd:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009fd2:	29 15 94 7f 02 c0    	sub    DWORD PTR ds:0xc0027f94,edx
c0009fd8:	c1 e8 0c             	shr    eax,0xc
c0009fdb:	83 c4 10             	add    esp,0x10
c0009fde:	85 d2                	test   edx,edx
c0009fe0:	74 0f                	je     c0009ff1 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009fe2:	05 9c 7f 02 c0       	add    eax,0xc0027f9c
c0009fe7:	01 c2                	add    edx,eax
c0009fe9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009fec:	40                   	inc    eax
c0009fed:	39 d0                	cmp    eax,edx
c0009fef:	75 f8                	jne    c0009fe9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009ff1:	83 c4 0c             	add    esp,0xc
c0009ff4:	c3                   	ret    

c0009ff5 <Phys::setPageState(unsigned long, bool)>:
c0009ff5:	56                   	push   esi
c0009ff6:	ba 01 00 00 00       	mov    edx,0x1
c0009ffb:	53                   	push   ebx
c0009ffc:	8b 35 24 73 02 c0    	mov    esi,DWORD PTR ds:0xc0027324
c000a002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a00a:	89 c8                	mov    eax,ecx
c000a00c:	83 e1 07             	and    ecx,0x7
c000a00f:	c1 e8 03             	shr    eax,0x3
c000a012:	d3 e3                	shl    ebx,cl
c000a014:	01 c6                	add    esi,eax
c000a016:	d3 e2                	shl    edx,cl
c000a018:	f7 d2                	not    edx
c000a01a:	20 16                	and    BYTE PTR [esi],dl
c000a01c:	03 05 24 73 02 c0    	add    eax,DWORD PTR ds:0xc0027324
c000a022:	08 18                	or     BYTE PTR [eax],bl
c000a024:	5b                   	pop    ebx
c000a025:	5e                   	pop    esi
c000a026:	c3                   	ret    

c000a027 <Phys::getPageState(unsigned long)>:
c000a027:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a02b:	8b 15 24 73 02 c0    	mov    edx,DWORD PTR ds:0xc0027324
c000a031:	89 c8                	mov    eax,ecx
c000a033:	83 e1 07             	and    ecx,0x7
c000a036:	c1 e8 03             	shr    eax,0x3
c000a039:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a03d:	d3 f8                	sar    eax,cl
c000a03f:	83 e0 01             	and    eax,0x1
c000a042:	c3                   	ret    

c000a043 <Phys::freePage(unsigned long)>:
c000a043:	53                   	push   ebx
c000a044:	83 ec 10             	sub    esp,0x10
c000a047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a04b:	53                   	push   ebx
c000a04c:	68 19 41 02 c0       	push   0xc0024119
c000a051:	e8 a5 2c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a056:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	3d ff ff 00 00       	cmp    eax,0xffff
c000a064:	76 3d                	jbe    c000a0a3 <Phys::freePage(unsigned long)+0x60>
c000a066:	83 ec 0c             	sub    esp,0xc
c000a069:	c1 eb 0c             	shr    ebx,0xc
c000a06c:	53                   	push   ebx
c000a06d:	e8 b5 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a072:	83 c4 10             	add    esp,0x10
c000a075:	84 c0                	test   al,al
c000a077:	74 19                	je     c000a092 <Phys::freePage(unsigned long)+0x4f>
c000a079:	83 ec 08             	sub    esp,0x8
c000a07c:	ff 0d 94 7f 02 c0    	dec    DWORD PTR ds:0xc0027f94
c000a082:	6a 00                	push   0x0
c000a084:	53                   	push   ebx
c000a085:	e8 6b ff ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a08a:	83 c4 10             	add    esp,0x10
c000a08d:	83 c4 08             	add    esp,0x8
c000a090:	5b                   	pop    ebx
c000a091:	c3                   	ret    
c000a092:	c7 44 24 10 43 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024143
c000a09a:	83 c4 08             	add    esp,0x8
c000a09d:	5b                   	pop    ebx
c000a09e:	e9 64 a9 00 00       	jmp    c0014a07 <Krnl::panic(char const*)>
c000a0a3:	83 ec 08             	sub    esp,0x8
c000a0a6:	53                   	push   ebx
c000a0a7:	68 2c 41 02 c0       	push   0xc002412c
c000a0ac:	e8 4a 2c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a0b1:	58                   	pop    eax
c000a0b2:	5a                   	pop    edx
c000a0b3:	68 00 10 00 00       	push   0x1000
c000a0b8:	53                   	push   ebx
c000a0b9:	e8 f1 fe ff ff       	call   c0009faf <Phys::freeDMA(unsigned long, unsigned long)>
c000a0be:	83 c4 10             	add    esp,0x10
c000a0c1:	83 c4 08             	add    esp,0x8
c000a0c4:	5b                   	pop    ebx
c000a0c5:	c3                   	ret    

c000a0c6 <Phys::allocatePage()>:
c000a0c6:	56                   	push   esi
c000a0c7:	53                   	push   ebx
c000a0c8:	83 ec 14             	sub    esp,0x14
c000a0cb:	8b 35 88 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f88
c000a0d1:	89 f3                	mov    ebx,esi
c000a0d3:	eb 0a                	jmp    c000a0df <Phys::allocatePage()+0x19>
c000a0d5:	89 1d 88 7f 02 c0    	mov    DWORD PTR ds:0xc0027f88,ebx
c000a0db:	39 de                	cmp    esi,ebx
c000a0dd:	74 24                	je     c000a103 <Phys::allocatePage()+0x3d>
c000a0df:	53                   	push   ebx
c000a0e0:	e8 42 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a0e5:	5a                   	pop    edx
c000a0e6:	84 c0                	test   al,al
c000a0e8:	74 69                	je     c000a153 <Phys::allocatePage()+0x8d>
c000a0ea:	43                   	inc    ebx
c000a0eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a0f1:	75 e2                	jne    c000a0d5 <Phys::allocatePage()+0xf>
c000a0f3:	31 db                	xor    ebx,ebx
c000a0f5:	c7 05 88 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027f88,0x0
c000a0ff:	39 de                	cmp    esi,ebx
c000a101:	75 dc                	jne    c000a0df <Phys::allocatePage()+0x19>
c000a103:	83 ec 0c             	sub    esp,0xc
c000a106:	80 35 ac 7f 02 c0 01 	xor    BYTE PTR ds:0xc0027fac,0x1
c000a10d:	68 e4 41 02 c0       	push   0xc00241e4
c000a112:	e8 e4 2b 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a117:	58                   	pop    eax
c000a118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a11d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a120:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a126:	e8 5f 28 00 00       	call   c000c98a <VAS::scanForEviction()>
c000a12b:	83 c4 10             	add    esp,0x10
c000a12e:	85 c0                	test   eax,eax
c000a130:	75 62                	jne    c000a194 <Phys::allocatePage()+0xce>
c000a132:	83 ec 0c             	sub    esp,0xc
c000a135:	68 08 42 02 c0       	push   0xc0024208
c000a13a:	e8 c8 a8 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000a13f:	83 c4 10             	add    esp,0x10
c000a142:	8b 1d 88 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f88
c000a148:	53                   	push   ebx
c000a149:	e8 d9 fe ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a14e:	5a                   	pop    edx
c000a14f:	84 c0                	test   al,al
c000a151:	75 97                	jne    c000a0ea <Phys::allocatePage()+0x24>
c000a153:	6a 01                	push   0x1
c000a155:	53                   	push   ebx
c000a156:	e8 9a fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a15b:	5a                   	pop    edx
c000a15c:	a1 94 7f 02 c0       	mov    eax,ds:0xc0027f94
c000a161:	59                   	pop    ecx
c000a162:	40                   	inc    eax
c000a163:	8b 15 88 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f88
c000a169:	a3 94 7f 02 c0       	mov    ds:0xc0027f94,eax
c000a16e:	c1 e2 0c             	shl    edx,0xc
c000a171:	52                   	push   edx
c000a172:	ff 35 98 7f 02 c0    	push   DWORD PTR ds:0xc0027f98
c000a178:	50                   	push   eax
c000a179:	68 59 41 02 c0       	push   0xc0024159
c000a17e:	e8 78 2b 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a183:	a1 88 7f 02 c0       	mov    eax,ds:0xc0027f88
c000a188:	83 c4 10             	add    esp,0x10
c000a18b:	c1 e0 0c             	shl    eax,0xc
c000a18e:	83 c4 14             	add    esp,0x14
c000a191:	5b                   	pop    ebx
c000a192:	5e                   	pop    esi
c000a193:	c3                   	ret    
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	89 c2                	mov    edx,eax
c000a199:	6a 01                	push   0x1
c000a19b:	c1 ea 0c             	shr    edx,0xc
c000a19e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1a2:	52                   	push   edx
c000a1a3:	e8 4d fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a1a8:	83 c4 10             	add    esp,0x10
c000a1ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1af:	eb dd                	jmp    c000a18e <Phys::allocatePage()+0xc8>

c000a1b1 <Phys::allocateContiguousPages(int)>:
c000a1b1:	57                   	push   edi
c000a1b2:	56                   	push   esi
c000a1b3:	53                   	push   ebx
c000a1b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a1b8:	fa                   	cli    
c000a1b9:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c000a1bf:	31 db                	xor    ebx,ebx
c000a1c1:	85 db                	test   ebx,ebx
c000a1c3:	75 11                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1c5:	e8 fc fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1ca:	83 fe 01             	cmp    esi,0x1
c000a1cd:	89 c7                	mov    edi,eax
c000a1cf:	74 21                	je     c000a1f2 <Phys::allocateContiguousPages(int)+0x41>
c000a1d1:	bb 01 00 00 00       	mov    ebx,0x1
c000a1d6:	e8 eb fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1db:	89 da                	mov    edx,ebx
c000a1dd:	c1 e2 0c             	shl    edx,0xc
c000a1e0:	01 fa                	add    edx,edi
c000a1e2:	39 c2                	cmp    edx,eax
c000a1e4:	74 20                	je     c000a206 <Phys::allocateContiguousPages(int)+0x55>
c000a1e6:	bb 01 00 00 00       	mov    ebx,0x1
c000a1eb:	89 c7                	mov    edi,eax
c000a1ed:	83 fe 01             	cmp    esi,0x1
c000a1f0:	75 e4                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1f2:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000a1f7:	48                   	dec    eax
c000a1f8:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000a1fd:	75 01                	jne    c000a200 <Phys::allocateContiguousPages(int)+0x4f>
c000a1ff:	fb                   	sti    
c000a200:	89 f8                	mov    eax,edi
c000a202:	5b                   	pop    ebx
c000a203:	5e                   	pop    esi
c000a204:	5f                   	pop    edi
c000a205:	c3                   	ret    
c000a206:	43                   	inc    ebx
c000a207:	39 f3                	cmp    ebx,esi
c000a209:	75 b6                	jne    c000a1c1 <Phys::allocateContiguousPages(int)+0x10>
c000a20b:	eb e5                	jmp    c000a1f2 <Phys::allocateContiguousPages(int)+0x41>

c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a20d:	56                   	push   esi
c000a20e:	53                   	push   ebx
c000a20f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a213:	39 1d 8c 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f8c,ebx
c000a219:	73 06                	jae    c000a221 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a21b:	89 1d 8c 7f 02 c0    	mov    DWORD PTR ds:0xc0027f8c,ebx
c000a221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a225:	c1 eb 0c             	shr    ebx,0xc
c000a228:	c1 e8 0c             	shr    eax,0xc
c000a22b:	39 d8                	cmp    eax,ebx
c000a22d:	73 13                	jae    c000a242 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a22f:	6a 00                	push   0x0
c000a231:	8d 70 01             	lea    esi,[eax+0x1]
c000a234:	50                   	push   eax
c000a235:	e8 bb fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a23a:	5a                   	pop    edx
c000a23b:	89 f0                	mov    eax,esi
c000a23d:	59                   	pop    ecx
c000a23e:	39 f3                	cmp    ebx,esi
c000a240:	75 ed                	jne    c000a22f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a242:	5b                   	pop    ebx
c000a243:	5e                   	pop    esi
c000a244:	c3                   	ret    

c000a245 <Phys::physicalMemorySetup(unsigned int)>:
c000a245:	55                   	push   ebp
c000a246:	57                   	push   edi
c000a247:	56                   	push   esi
c000a248:	53                   	push   ebx
c000a249:	31 db                	xor    ebx,ebx
c000a24b:	83 ec 40             	sub    esp,0x40
c000a24e:	6a 10                	push   0x10
c000a250:	6a 00                	push   0x0
c000a252:	68 9c 7f 02 c0       	push   0xc0027f9c
c000a257:	e8 28 64 ff ff       	call   c0000684 <memset>
c000a25c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a260:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a265:	05 00 10 00 00       	add    eax,0x1000
c000a26a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a26e:	5a                   	pop    edx
c000a26f:	59                   	pop    ecx
c000a270:	50                   	push   eax
c000a271:	68 77 41 02 c0       	push   0xc0024177
c000a276:	e8 80 2a 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	83 ec 08             	sub    esp,0x8
c000a281:	6a 01                	push   0x1
c000a283:	53                   	push   ebx
c000a284:	43                   	inc    ebx
c000a285:	e8 6b fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a28a:	83 c4 10             	add    esp,0x10
c000a28d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a293:	75 e9                	jne    c000a27e <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a295:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a29c:	66 85 c0             	test   ax,ax
c000a29f:	0f 84 8e 01 00 00    	je     c000a433 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a2a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a2a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a2b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a2b5:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a2ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2be:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a2c6:	eb 15                	jmp    c000a2dd <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a2c8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a2cc:	83 c3 18             	add    ebx,0x18
c000a2cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a2d3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a2d7:	0f 84 66 01 00 00    	je     c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a2dd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a2e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a2e3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a2e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a2ee:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a2f0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a2f3:	01 f0                	add    eax,esi
c000a2f5:	55                   	push   ebp
c000a2f6:	11 fa                	adc    edx,edi
c000a2f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2fc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a300:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a304:	56                   	push   esi
c000a305:	68 38 42 02 c0       	push   0xc0024238
c000a30a:	e8 ec 29 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a313:	83 c4 10             	add    esp,0x10
c000a316:	09 f8                	or     eax,edi
c000a318:	0f 85 25 01 00 00    	jne    c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a31e:	4d                   	dec    ebp
c000a31f:	75 a7                	jne    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a321:	ba 00 00 08 00       	mov    edx,0x80000
c000a326:	89 c1                	mov    ecx,eax
c000a328:	39 f2                	cmp    edx,esi
c000a32a:	19 f9                	sbb    ecx,edi
c000a32c:	0f 82 a7 00 00 00    	jb     c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a332:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a336:	89 c1                	mov    ecx,eax
c000a338:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a33c:	0f 83 97 00 00 00    	jae    c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a342:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a347:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a34b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a34f:	39 fa                	cmp    edx,edi
c000a351:	19 e8                	sbb    eax,ebp
c000a353:	0f 82 a5 01 00 00    	jb     c000a4fe <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a359:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a35d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a361:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a367:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a36c:	83 d5 ff             	adc    ebp,0xffffffff
c000a36f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a373:	31 c0                	xor    eax,eax
c000a375:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a379:	39 fa                	cmp    edx,edi
c000a37b:	89 c1                	mov    ecx,eax
c000a37d:	19 e9                	sbb    ecx,ebp
c000a37f:	0f 83 43 ff ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a385:	be 00 00 08 00       	mov    esi,0x80000
c000a38a:	57                   	push   edi
c000a38b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a38f:	57                   	push   edi
c000a390:	56                   	push   esi
c000a391:	68 5c 42 02 c0       	push   0xc002425c
c000a396:	e8 60 29 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a39b:	5d                   	pop    ebp
c000a39c:	58                   	pop    eax
c000a39d:	57                   	push   edi
c000a39e:	56                   	push   esi
c000a39f:	e8 69 fe ff ff       	call   c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a3a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a3a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a3ac:	83 c4 0c             	add    esp,0xc
c000a3af:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a3b3:	03 05 98 7f 02 c0    	add    eax,DWORD PTR ds:0xc0027f98
c000a3b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a3c0:	a3 98 7f 02 c0       	mov    ds:0xc0027f98,eax
c000a3c5:	52                   	push   edx
c000a3c6:	50                   	push   eax
c000a3c7:	68 9d 41 02 c0       	push   0xc002419d
c000a3cc:	e8 2a 29 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a3d1:	83 c4 10             	add    esp,0x10
c000a3d4:	e9 ef fe ff ff       	jmp    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3d9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a3dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3e5:	39 ea                	cmp    edx,ebp
c000a3e7:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a3eb:	0f 82 d7 fe ff ff    	jb     c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3f1:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a3f6:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a3fa:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a3fe:	0f 83 c4 fe ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a404:	39 ee                	cmp    esi,ebp
c000a406:	89 f8                	mov    eax,edi
c000a408:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a40c:	0f 83 78 ff ff ff    	jae    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a416:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a41a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a41e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a422:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a42e:	e9 57 ff ff ff       	jmp    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a433:	83 ec 0c             	sub    esp,0xc
c000a436:	68 8f 41 02 c0       	push   0xc002418f
c000a43b:	e8 c7 a5 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000a440:	83 c4 10             	add    esp,0x10
c000a443:	83 ec 08             	sub    esp,0x8
c000a446:	6a 00                	push   0x0
c000a448:	6a 05                	push   0x5
c000a44a:	e8 a6 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a44f:	58                   	pop    eax
c000a450:	5a                   	pop    edx
c000a451:	6a 00                	push   0x0
c000a453:	6a 06                	push   0x6
c000a455:	e8 9b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a45a:	59                   	pop    ecx
c000a45b:	5b                   	pop    ebx
c000a45c:	bb 60 00 00 00       	mov    ebx,0x60
c000a461:	6a 00                	push   0x0
c000a463:	6a 07                	push   0x7
c000a465:	e8 8b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a46a:	83 05 98 7f 02 c0 03 	add    DWORD PTR ds:0xc0027f98,0x3
c000a471:	83 c4 10             	add    esp,0x10
c000a474:	83 ec 08             	sub    esp,0x8
c000a477:	6a 00                	push   0x0
c000a479:	53                   	push   ebx
c000a47a:	43                   	inc    ebx
c000a47b:	e8 75 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a480:	83 c4 10             	add    esp,0x10
c000a483:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a489:	75 e9                	jne    c000a474 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a48b:	a1 98 7f 02 c0       	mov    eax,ds:0xc0027f98
c000a490:	bb 40 01 00 00       	mov    ebx,0x140
c000a495:	83 c0 20             	add    eax,0x20
c000a498:	a3 98 7f 02 c0       	mov    ds:0xc0027f98,eax
c000a49d:	eb 22                	jmp    c000a4c1 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a49f:	83 ec 08             	sub    esp,0x8
c000a4a2:	6a 00                	push   0x0
c000a4a4:	53                   	push   ebx
c000a4a5:	43                   	inc    ebx
c000a4a6:	e8 4a fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4ab:	a1 98 7f 02 c0       	mov    eax,ds:0xc0027f98
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	40                   	inc    eax
c000a4b4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a4ba:	a3 98 7f 02 c0       	mov    ds:0xc0027f98,eax
c000a4bf:	74 07                	je     c000a4c8 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a4c1:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a4c6:	7e d7                	jle    c000a49f <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a4c8:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a4cd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a4d2:	7f 22                	jg     c000a4f6 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a4d4:	83 ec 08             	sub    esp,0x8
c000a4d7:	6a 00                	push   0x0
c000a4d9:	53                   	push   ebx
c000a4da:	43                   	inc    ebx
c000a4db:	e8 15 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4e0:	a1 98 7f 02 c0       	mov    eax,ds:0xc0027f98
c000a4e5:	83 c4 10             	add    esp,0x10
c000a4e8:	40                   	inc    eax
c000a4e9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a4ef:	a3 98 7f 02 c0       	mov    ds:0xc0027f98,eax
c000a4f4:	75 d7                	jne    c000a4cd <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a4f6:	83 c4 3c             	add    esp,0x3c
c000a4f9:	5b                   	pop    ebx
c000a4fa:	5e                   	pop    esi
c000a4fb:	5f                   	pop    edi
c000a4fc:	5d                   	pop    ebp
c000a4fd:	c3                   	ret    
c000a4fe:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a506:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a50e:	e9 46 fe ff ff       	jmp    c000a359 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a513:	90                   	nop

c000a514 <Pipe::isAtty()>:
c000a514:	31 c0                	xor    eax,eax
c000a516:	c3                   	ret    
c000a517:	90                   	nop

c000a518 <Pipe::~Pipe()>:
c000a518:	83 ec 0c             	sub    esp,0xc
c000a51b:	ba c8 42 02 c0       	mov    edx,0xc00242c8
c000a520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a524:	89 10                	mov    DWORD PTR [eax],edx
c000a526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a52a:	83 ec 0c             	sub    esp,0xc
c000a52d:	50                   	push   eax
c000a52e:	e8 41 12 00 00       	call   c000b774 <UnixFile::~UnixFile()>
c000a533:	83 c4 10             	add    esp,0x10
c000a536:	90                   	nop
c000a537:	83 c4 0c             	add    esp,0xc
c000a53a:	c3                   	ret    
c000a53b:	90                   	nop

c000a53c <Pipe::~Pipe()>:
c000a53c:	83 ec 0c             	sub    esp,0xc
c000a53f:	83 ec 0c             	sub    esp,0xc
c000a542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a546:	e8 cd ff ff ff       	call   c000a518 <Pipe::~Pipe()>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	83 ec 08             	sub    esp,0x8
c000a551:	6a 20                	push   0x20
c000a553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a557:	e8 be 26 00 00       	call   c000cc1a <operator delete(void*, unsigned long)>
c000a55c:	83 c4 10             	add    esp,0x10
c000a55f:	83 c4 0c             	add    esp,0xc
c000a562:	c3                   	ret    
c000a563:	90                   	nop

c000a564 <Pipe::read(unsigned long long, void*, int*)>:
c000a564:	55                   	push   ebp
c000a565:	57                   	push   edi
c000a566:	56                   	push   esi
c000a567:	53                   	push   ebx
c000a568:	83 ec 1c             	sub    esp,0x1c
c000a56b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a56f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a573:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a577:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a57a:	89 c8                	mov    eax,ecx
c000a57c:	99                   	cdq    
c000a57d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a581:	74 24                	je     c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a583:	39 f9                	cmp    ecx,edi
c000a585:	89 d1                	mov    ecx,edx
c000a587:	19 f1                	sbb    ecx,esi
c000a589:	73 1c                	jae    c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a58b:	fa                   	cli    
c000a58c:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c000a592:	e8 25 e1 00 00       	call   c00186bc <schedule()>
c000a597:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000a59c:	48                   	dec    eax
c000a59d:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000a5a2:	75 d3                	jne    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a4:	fb                   	sti    
c000a5a5:	eb d0                	jmp    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a7:	39 f8                	cmp    eax,edi
c000a5a9:	89 d1                	mov    ecx,edx
c000a5ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5ae:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a5b2:	19 f1                	sbb    ecx,esi
c000a5b4:	73 07                	jae    c000a5bd <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a5b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5bd:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a5c0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a5c3:	29 f7                	sub    edi,esi
c000a5c5:	89 f8                	mov    eax,edi
c000a5c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a5cb:	99                   	cdq    
c000a5cc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a5cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5d3:	19 d0                	sbb    eax,edx
c000a5d5:	73 07                	jae    c000a5de <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a5d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a5da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5de:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a5e1:	89 ea                	mov    edx,ebp
c000a5e3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a5e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a5ec:	74 0d                	je     c000a5fb <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a5ee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a5f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a5f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a5f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a5fb:	85 d2                	test   edx,edx
c000a5fd:	74 11                	je     c000a610 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a5ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a603:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a606:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a60a:	89 d1                	mov    ecx,edx
c000a60c:	89 c7                	mov    edi,eax
c000a60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a610:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a613:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a616:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a619:	99                   	cdq    
c000a61a:	89 f7                	mov    edi,esi
c000a61c:	03 04 24             	add    eax,DWORD PTR [esp]
c000a61f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a623:	c1 ff 1f             	sar    edi,0x1f
c000a626:	57                   	push   edi
c000a627:	56                   	push   esi
c000a628:	52                   	push   edx
c000a629:	50                   	push   eax
c000a62a:	e8 15 82 01 00       	call   c0022844 <__umoddi3>
c000a62f:	83 c4 10             	add    esp,0x10
c000a632:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a635:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a63a:	75 10                	jne    c000a64c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a63c:	83 ec 0c             	sub    esp,0xc
c000a63f:	68 85 42 02 c0       	push   0xc0024285
c000a644:	e8 be a3 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000a649:	83 c4 10             	add    esp,0x10
c000a64c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a650:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a653:	89 10                	mov    DWORD PTR [eax],edx
c000a655:	83 c4 1c             	add    esp,0x1c
c000a658:	31 c0                	xor    eax,eax
c000a65a:	5b                   	pop    ebx
c000a65b:	5e                   	pop    esi
c000a65c:	5f                   	pop    edi
c000a65d:	5d                   	pop    ebp
c000a65e:	c3                   	ret    
c000a65f:	90                   	nop

c000a660 <Pipe::write(unsigned long long, void*, int*)>:
c000a660:	55                   	push   ebp
c000a661:	57                   	push   edi
c000a662:	56                   	push   esi
c000a663:	53                   	push   ebx
c000a664:	83 ec 1c             	sub    esp,0x1c
c000a667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a66b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a66f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a672:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a676:	89 04 24             	mov    DWORD PTR [esp],eax
c000a679:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a67d:	89 d8                	mov    eax,ebx
c000a67f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a682:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a686:	89 d6                	mov    esi,edx
c000a688:	89 d7                	mov    edi,edx
c000a68a:	c1 ff 1f             	sar    edi,0x1f
c000a68d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a690:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a694:	c1 f8 1f             	sar    eax,0x1f
c000a697:	39 f3                	cmp    ebx,esi
c000a699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6a1:	19 f8                	sbb    eax,edi
c000a6a3:	b8 01 00 00 00       	mov    eax,0x1
c000a6a8:	72 6e                	jb     c000a718 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a6aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a6ad:	01 d0                	add    eax,edx
c000a6af:	99                   	cdq    
c000a6b0:	f7 fb                	idiv   ebx
c000a6b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6b6:	29 d3                	sub    ebx,edx
c000a6b8:	89 d7                	mov    edi,edx
c000a6ba:	89 de                	mov    esi,ebx
c000a6bc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a6bf:	c1 fb 1f             	sar    ebx,0x1f
c000a6c2:	39 f2                	cmp    edx,esi
c000a6c4:	19 d8                	sbb    eax,ebx
c000a6c6:	b8 00 00 00 00       	mov    eax,0x0
c000a6cb:	72 04                	jb     c000a6d1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a6cd:	89 d0                	mov    eax,edx
c000a6cf:	29 f0                	sub    eax,esi
c000a6d1:	89 d3                	mov    ebx,edx
c000a6d3:	29 c3                	sub    ebx,eax
c000a6d5:	74 0b                	je     c000a6e2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a6d7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a6da:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a6de:	89 d9                	mov    ecx,ebx
c000a6e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6e2:	85 c0                	test   eax,eax
c000a6e4:	74 0d                	je     c000a6f3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a6e6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a6ea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a6ed:	89 de                	mov    esi,ebx
c000a6ef:	89 c1                	mov    ecx,eax
c000a6f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6f3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a6f6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a6fb:	75 10                	jne    c000a70d <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a6fd:	83 ec 0c             	sub    esp,0xc
c000a700:	68 a1 42 02 c0       	push   0xc00242a1
c000a705:	e8 fd a2 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000a70a:	83 c4 10             	add    esp,0x10
c000a70d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a711:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a714:	89 08                	mov    DWORD PTR [eax],ecx
c000a716:	31 c0                	xor    eax,eax
c000a718:	83 c4 1c             	add    esp,0x1c
c000a71b:	5b                   	pop    ebx
c000a71c:	5e                   	pop    esi
c000a71d:	5f                   	pop    edi
c000a71e:	5d                   	pop    ebp
c000a71f:	c3                   	ret    

c000a720 <Pipe::Pipe(int)>:
c000a720:	83 ec 0c             	sub    esp,0xc
c000a723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a727:	83 ec 08             	sub    esp,0x8
c000a72a:	6a 00                	push   0x0
c000a72c:	50                   	push   eax
c000a72d:	e8 60 0e 00 00       	call   c000b592 <UnixFile::UnixFile(int)>
c000a732:	83 c4 10             	add    esp,0x10
c000a735:	ba c8 42 02 c0       	mov    edx,0xc00242c8
c000a73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73e:	89 10                	mov    DWORD PTR [eax],edx
c000a740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a744:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a748:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a75a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a765:	83 ec 0c             	sub    esp,0xc
c000a768:	50                   	push   eax
c000a769:	e8 a1 f2 ff ff       	call   c0009a0f <malloc>
c000a76e:	83 c4 10             	add    esp,0x10
c000a771:	89 c2                	mov    edx,eax
c000a773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a777:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a77e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a782:	90                   	nop
c000a783:	83 c4 0c             	add    esp,0xc
c000a786:	c3                   	ret    
c000a787:	90                   	nop

c000a788 <VgaText::isAtty()>:
c000a788:	b0 01                	mov    al,0x1
c000a78a:	c3                   	ret    
c000a78b:	90                   	nop

c000a78c <VgaText::~VgaText()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba 50 43 02 c0       	mov    edx,0xc0024350
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 cd 0f 00 00       	call   c000b774 <UnixFile::~UnixFile()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <VgaText::~VgaText()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <VgaText::~VgaText()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 b4 01 00 00       	push   0x1b4
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 47 24 00 00       	call   c000cc1a <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <VgaText::read(unsigned long long, void*, int*)>:
c000a7da:	83 ec 10             	sub    esp,0x10
c000a7dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e9:	e8 cd 58 00 00       	call   c00100bb <readKeyboard(VgaText*, char*, unsigned long)>
c000a7ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a7f2:	89 02                	mov    DWORD PTR [edx],eax
c000a7f4:	31 c0                	xor    eax,eax
c000a7f6:	83 c4 1c             	add    esp,0x1c
c000a7f9:	c3                   	ret    

c000a7fa <setTerminalScrollLock(bool)>:
c000a7fa:	c3                   	ret    

c000a7fb <addToTerminalCycle(VgaText*)>:
c000a7fb:	8b 15 e0 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027fe0
c000a801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a805:	85 d2                	test   edx,edx
c000a807:	75 09                	jne    c000a812 <addToTerminalCycle(VgaText*)+0x17>
c000a809:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a80c:	a3 e0 7f 02 c0       	mov    ds:0xc0027fe0,eax
c000a811:	c3                   	ret    
c000a812:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a815:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a818:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a81b:	c3                   	ret    

c000a81c <installVgaTextImplementation()>:
c000a81c:	83 ec 10             	sub    esp,0x10
c000a81f:	6a 20                	push   0x20
c000a821:	6a 00                	push   0x0
c000a823:	68 c0 7f 02 c0       	push   0xc0027fc0
c000a828:	e8 57 5e ff ff       	call   c0000684 <memset>
c000a82d:	83 c4 1c             	add    esp,0x1c
c000a830:	c3                   	ret    

c000a831 <scrollTerminalScrollLock(int)>:
c000a831:	c3                   	ret    

c000a832 <VgaText::updateTitle()>:
c000a832:	53                   	push   ebx
c000a833:	31 c0                	xor    eax,eax
c000a835:	83 ec 58             	sub    esp,0x58
c000a838:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a83c:	89 e1                	mov    ecx,esp
c000a83e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a842:	40                   	inc    eax
c000a843:	83 f8 50             	cmp    eax,0x50
c000a846:	75 f6                	jne    c000a83e <VgaText::updateTitle()+0xc>
c000a848:	31 c0                	xor    eax,eax
c000a84a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a851:	84 db                	test   bl,bl
c000a853:	74 06                	je     c000a85b <VgaText::updateTitle()+0x29>
c000a855:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a858:	40                   	inc    eax
c000a859:	eb ef                	jmp    c000a84a <VgaText::updateTitle()+0x18>
c000a85b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a85e:	85 c0                	test   eax,eax
c000a860:	74 09                	je     c000a86b <VgaText::updateTitle()+0x39>
c000a862:	53                   	push   ebx
c000a863:	53                   	push   ebx
c000a864:	51                   	push   ecx
c000a865:	52                   	push   edx
c000a866:	ff d0                	call   eax
c000a868:	83 c4 10             	add    esp,0x10
c000a86b:	83 c4 58             	add    esp,0x58
c000a86e:	5b                   	pop    ebx
c000a86f:	c3                   	ret    

c000a870 <VgaText::load()>:
c000a870:	53                   	push   ebx
c000a871:	31 c0                	xor    eax,eax
c000a873:	83 ec 58             	sub    esp,0x58
c000a876:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a87a:	89 e2                	mov    edx,esp
c000a87c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a880:	40                   	inc    eax
c000a881:	83 f8 50             	cmp    eax,0x50
c000a884:	75 f6                	jne    c000a87c <VgaText::load()+0xc>
c000a886:	31 c0                	xor    eax,eax
c000a888:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a88f:	84 c9                	test   cl,cl
c000a891:	74 06                	je     c000a899 <VgaText::load()+0x29>
c000a893:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a896:	40                   	inc    eax
c000a897:	eb ef                	jmp    c000a888 <VgaText::load()+0x18>
c000a899:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a89c:	85 c0                	test   eax,eax
c000a89e:	74 09                	je     c000a8a9 <VgaText::load()+0x39>
c000a8a0:	51                   	push   ecx
c000a8a1:	51                   	push   ecx
c000a8a2:	52                   	push   edx
c000a8a3:	53                   	push   ebx
c000a8a4:	ff d0                	call   eax
c000a8a6:	83 c4 10             	add    esp,0x10
c000a8a9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a8ac:	85 c0                	test   eax,eax
c000a8ae:	74 09                	je     c000a8b9 <VgaText::load()+0x49>
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	53                   	push   ebx
c000a8b4:	ff d0                	call   eax
c000a8b6:	83 c4 10             	add    esp,0x10
c000a8b9:	83 c4 58             	add    esp,0x58
c000a8bc:	5b                   	pop    ebx
c000a8bd:	c3                   	ret    

c000a8be <VgaText::updateCursor()>:
c000a8be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8c2:	39 05 e4 7f 02 c0    	cmp    DWORD PTR ds:0xc0027fe4,eax
c000a8c8:	75 09                	jne    c000a8d3 <VgaText::updateCursor()+0x15>
c000a8ca:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a8cd:	85 c0                	test   eax,eax
c000a8cf:	74 02                	je     c000a8d3 <VgaText::updateCursor()+0x15>
c000a8d1:	ff e0                	jmp    eax
c000a8d3:	c3                   	ret    

c000a8d4 <VgaText::doANSI_SGR(int)>:
c000a8d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8dc:	85 d2                	test   edx,edx
c000a8de:	75 0b                	jne    c000a8eb <VgaText::doANSI_SGR(int)+0x17>
c000a8e0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a8e3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a8e6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a8e9:	eb 59                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8eb:	83 fa 07             	cmp    edx,0x7
c000a8ee:	75 0b                	jne    c000a8fb <VgaText::doANSI_SGR(int)+0x27>
c000a8f0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a8f3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a8f6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a8f9:	eb 49                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8fb:	83 fa 1b             	cmp    edx,0x1b
c000a8fe:	74 e0                	je     c000a8e0 <VgaText::doANSI_SGR(int)+0xc>
c000a900:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a903:	83 f9 07             	cmp    ecx,0x7
c000a906:	77 09                	ja     c000a911 <VgaText::doANSI_SGR(int)+0x3d>
c000a908:	8b 14 8d 60 73 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8ca0]
c000a90f:	eb 20                	jmp    c000a931 <VgaText::doANSI_SGR(int)+0x5d>
c000a911:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a914:	83 f9 07             	cmp    ecx,0x7
c000a917:	77 09                	ja     c000a922 <VgaText::doANSI_SGR(int)+0x4e>
c000a919:	8b 14 8d 60 73 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8ca0]
c000a920:	eb 22                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a922:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a925:	83 f9 07             	cmp    ecx,0x7
c000a928:	77 0b                	ja     c000a935 <VgaText::doANSI_SGR(int)+0x61>
c000a92a:	8b 14 95 18 72 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8de8]
c000a931:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a934:	c3                   	ret    
c000a935:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a938:	83 f9 07             	cmp    ecx,0x7
c000a93b:	77 0a                	ja     c000a947 <VgaText::doANSI_SGR(int)+0x73>
c000a93d:	8b 14 95 f0 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8e10]
c000a944:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a947:	c3                   	ret    

c000a948 <VgaText::setDefaultBgColour(VgaColour)>:
c000a948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a94c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a950:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a953:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a956:	c3                   	ret    
c000a957:	90                   	nop

c000a958 <VgaText::setDefaultFgColour(VgaColour)>:
c000a958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a95c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a960:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a963:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a966:	c3                   	ret    
c000a967:	90                   	nop

c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a968:	53                   	push   ebx
c000a969:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a96d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a971:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a975:	51                   	push   ecx
c000a976:	e8 cd ff ff ff       	call   c000a948 <VgaText::setDefaultBgColour(VgaColour)>
c000a97b:	58                   	pop    eax
c000a97c:	5a                   	pop    edx
c000a97d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a981:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a985:	5b                   	pop    ebx
c000a986:	eb d0                	jmp    c000a958 <VgaText::setDefaultFgColour(VgaColour)>

c000a988 <VgaText::setTitleTextColour(VgaColour)>:
c000a988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a98c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a990:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a993:	e9 9a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a998 <VgaText::setTitleColour(VgaColour)>:
c000a998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9a3:	e9 8a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a9a8 <VgaText::setTitle(char*)>:
c000a9a8:	53                   	push   ebx
c000a9a9:	83 ec 10             	sub    esp,0x10
c000a9ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9b4:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a9ba:	50                   	push   eax
c000a9bb:	e8 80 5d ff ff       	call   c0000740 <strcpy>
c000a9c0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a9c4:	83 c4 18             	add    esp,0x18
c000a9c7:	5b                   	pop    ebx
c000a9c8:	e9 65 fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>
c000a9cd:	90                   	nop

c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>:
c000a9ce:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a9d2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a9d7:	83 e0 0f             	and    eax,0xf
c000a9da:	c1 e2 04             	shl    edx,0x4
c000a9dd:	09 d0                	or     eax,edx
c000a9df:	c3                   	ret    

c000a9e0 <VgaText::scrollScreen()>:
c000a9e0:	55                   	push   ebp
c000a9e1:	b9 01 00 00 00       	mov    ecx,0x1
c000a9e6:	57                   	push   edi
c000a9e7:	56                   	push   esi
c000a9e8:	53                   	push   ebx
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9f0:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a9f6:	31 ff                	xor    edi,edi
c000a9f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a9fb:	83 f9 17             	cmp    ecx,0x17
c000a9fe:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000aa01:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000aa08:	75 27                	jne    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa0a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000aa0d:	01 f5                	add    ebp,esi
c000aa0f:	f7 c7 01 00 00 00    	test   edi,0x1
c000aa15:	74 16                	je     c000aa2d <VgaText::scrollScreen()+0x4d>
c000aa17:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000aa1b:	50                   	push   eax
c000aa1c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000aa20:	50                   	push   eax
c000aa21:	e8 a8 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa26:	5a                   	pop    edx
c000aa27:	5a                   	pop    edx
c000aa28:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000aa2b:	eb 04                	jmp    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa2d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000aa31:	47                   	inc    edi
c000aa32:	46                   	inc    esi
c000aa33:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000aa39:	75 bd                	jne    c000a9f8 <VgaText::scrollScreen()+0x18>
c000aa3b:	41                   	inc    ecx
c000aa3c:	83 f9 18             	cmp    ecx,0x18
c000aa3f:	75 af                	jne    c000a9f0 <VgaText::scrollScreen()+0x10>
c000aa41:	39 1d e4 7f 02 c0    	cmp    DWORD PTR ds:0xc0027fe4,ebx
c000aa47:	75 1b                	jne    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa49:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aa4d:	74 05                	je     c000aa54 <VgaText::scrollScreen()+0x74>
c000aa4f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000aa52:	eb 10                	jmp    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa54:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000aa57:	85 c0                	test   eax,eax
c000aa59:	74 09                	je     c000aa64 <VgaText::scrollScreen()+0x84>
c000aa5b:	83 ec 0c             	sub    esp,0xc
c000aa5e:	53                   	push   ebx
c000aa5f:	ff d0                	call   eax
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000aa68:	83 c4 0c             	add    esp,0xc
c000aa6b:	5b                   	pop    ebx
c000aa6c:	5e                   	pop    esi
c000aa6d:	5f                   	pop    edi
c000aa6e:	5d                   	pop    ebp
c000aa6f:	e9 4a fe ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>:
c000aa74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000aa79:	c1 e0 08             	shl    eax,0x8
c000aa7c:	89 c2                	mov    edx,eax
c000aa7e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000aa83:	09 d0                	or     eax,edx
c000aa85:	c3                   	ret    

c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000aa86:	56                   	push   esi
c000aa87:	53                   	push   ebx
c000aa88:	51                   	push   ecx
c000aa89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aa8d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa92:	50                   	push   eax
c000aa93:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa98:	50                   	push   eax
c000aa99:	e8 30 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa9e:	5b                   	pop    ebx
c000aa9f:	0f b6 c0             	movzx  eax,al
c000aaa2:	5e                   	pop    esi
c000aaa3:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000aaa8:	50                   	push   eax
c000aaa9:	53                   	push   ebx
c000aaaa:	e8 c5 ff ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000aaaf:	5a                   	pop    edx
c000aab0:	5e                   	pop    esi
c000aab1:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000aab4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000aaba:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000aabe:	0f b7 d2             	movzx  edx,dx
c000aac1:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000aac5:	39 0d e4 7f 02 c0    	cmp    DWORD PTR ds:0xc0027fe4,ecx
c000aacb:	75 10                	jne    c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aacd:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aad0:	85 c0                	test   eax,eax
c000aad2:	74 09                	je     c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aad4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aad8:	5a                   	pop    edx
c000aad9:	5b                   	pop    ebx
c000aada:	5e                   	pop    esi
c000aadb:	ff e0                	jmp    eax
c000aadd:	58                   	pop    eax
c000aade:	5b                   	pop    ebx
c000aadf:	5e                   	pop    esi
c000aae0:	c3                   	ret    
c000aae1:	90                   	nop

c000aae2 <VgaText::getCursorX()>:
c000aae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aae6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aae9:	c3                   	ret    

c000aaea <VgaText::getCursorY()>:
c000aaea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaee:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aaf1:	c3                   	ret    

c000aaf2 <VgaText::setCursor(int, int)>:
c000aaf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aafa:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aafd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ab04:	e9 b5 fd ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000ab09 <setActiveTerminal(VgaText*)>:
c000ab09:	53                   	push   ebx
c000ab0a:	83 ec 08             	sub    esp,0x8
c000ab0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab11:	85 db                	test   ebx,ebx
c000ab13:	75 11                	jne    c000ab26 <setActiveTerminal(VgaText*)+0x1d>
c000ab15:	c7 44 24 10 dc 42 02 c0 	mov    DWORD PTR [esp+0x10],0xc00242dc
c000ab1d:	83 c4 08             	add    esp,0x8
c000ab20:	5b                   	pop    ebx
c000ab21:	e9 e1 9e 00 00       	jmp    c0014a07 <Krnl::panic(char const*)>
c000ab26:	a1 e4 7f 02 c0       	mov    eax,ds:0xc0027fe4
c000ab2b:	85 c0                	test   eax,eax
c000ab2d:	74 0c                	je     c000ab3b <setActiveTerminal(VgaText*)+0x32>
c000ab2f:	83 ec 0c             	sub    esp,0xc
c000ab32:	50                   	push   eax
c000ab33:	e8 86 fd ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ab38:	83 c4 10             	add    esp,0x10
c000ab3b:	89 1d e4 7f 02 c0    	mov    DWORD PTR ds:0xc0027fe4,ebx
c000ab41:	51                   	push   ecx
c000ab42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab45:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab48:	53                   	push   ebx
c000ab49:	e8 a4 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab4e:	83 c4 10             	add    esp,0x10
c000ab51:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ab55:	75 07                	jne    c000ab5e <setActiveTerminal(VgaText*)+0x55>
c000ab57:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ab5e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab62:	83 c4 08             	add    esp,0x8
c000ab65:	5b                   	pop    ebx
c000ab66:	e9 05 fd ff ff       	jmp    c000a870 <VgaText::load()>

c000ab6b <doTerminalCycle()>:
c000ab6b:	83 ec 18             	sub    esp,0x18
c000ab6e:	a1 e0 7f 02 c0       	mov    eax,ds:0xc0027fe0
c000ab73:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ab76:	50                   	push   eax
c000ab77:	a3 e0 7f 02 c0       	mov    ds:0xc0027fe0,eax
c000ab7c:	e8 88 ff ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ab81:	83 c4 1c             	add    esp,0x1c
c000ab84:	c3                   	ret    
c000ab85:	90                   	nop

c000ab86 <VgaText::setCursorX(int)>:
c000ab86:	83 ec 10             	sub    esp,0x10
c000ab89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab8d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ab90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab94:	50                   	push   eax
c000ab95:	e8 58 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab9a:	83 c4 1c             	add    esp,0x1c
c000ab9d:	c3                   	ret    

c000ab9e <VgaText::setCursorY(int)>:
c000ab9e:	83 ec 10             	sub    esp,0x10
c000aba1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aba5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aba9:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000abac:	50                   	push   eax
c000abad:	e8 40 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000abb2:	83 c4 1c             	add    esp,0x1c
c000abb5:	c3                   	ret    

c000abb6 <VgaText::incrementCursor(bool)>:
c000abb6:	56                   	push   esi
c000abb7:	53                   	push   ebx
c000abb8:	51                   	push   ecx
c000abb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000abc1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000abc4:	40                   	inc    eax
c000abc5:	83 f8 50             	cmp    eax,0x50
c000abc8:	74 05                	je     c000abcf <VgaText::incrementCursor(bool)+0x19>
c000abca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000abcd:	eb 24                	jmp    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abcf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000abd2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000abd9:	8d 50 01             	lea    edx,[eax+0x1]
c000abdc:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000abdf:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000abe2:	75 0f                	jne    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000abea:	53                   	push   ebx
c000abeb:	e8 f0 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000abf0:	83 c4 10             	add    esp,0x10
c000abf3:	89 f0                	mov    eax,esi
c000abf5:	84 c0                	test   al,al
c000abf7:	74 0c                	je     c000ac05 <VgaText::incrementCursor(bool)+0x4f>
c000abf9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abfd:	5a                   	pop    edx
c000abfe:	5b                   	pop    ebx
c000abff:	5e                   	pop    esi
c000ac00:	e9 b9 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac05:	58                   	pop    eax
c000ac06:	5b                   	pop    ebx
c000ac07:	5e                   	pop    esi
c000ac08:	c3                   	ret    
c000ac09:	90                   	nop

c000ac0a <VgaText::decrementCursor(bool)>:
c000ac0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac12:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000ac15:	85 c0                	test   eax,eax
c000ac17:	74 04                	je     c000ac1d <VgaText::decrementCursor(bool)+0x13>
c000ac19:	48                   	dec    eax
c000ac1a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000ac1d:	84 c9                	test   cl,cl
c000ac1f:	74 09                	je     c000ac2a <VgaText::decrementCursor(bool)+0x20>
c000ac21:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac25:	e9 94 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac2a:	c3                   	ret    
c000ac2b:	90                   	nop

c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000ac2c:	53                   	push   ebx
c000ac2d:	83 ec 08             	sub    esp,0x8
c000ac30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ac3c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ac40:	3c 07                	cmp    al,0x7
c000ac42:	75 2a                	jne    c000ac6e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000ac44:	a1 98 80 02 c0       	mov    eax,ds:0xc0028098
c000ac49:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ac51:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ac59:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000ac61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac65:	83 c4 08             	add    esp,0x8
c000ac68:	5b                   	pop    ebx
c000ac69:	e9 d4 2f 00 00       	jmp    c000dc42 <Buzzer::beep(int, int, bool)>
c000ac6e:	3c 0d                	cmp    al,0xd
c000ac70:	75 09                	jne    c000ac7b <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000ac72:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac79:	eb 2c                	jmp    c000aca7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000ac7b:	3c 0a                	cmp    al,0xa
c000ac7d:	75 31                	jne    c000acb0 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000ac7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac82:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac89:	8d 50 01             	lea    edx,[eax+0x1]
c000ac8c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ac8f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ac92:	75 0f                	jne    c000aca3 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ac9a:	53                   	push   ebx
c000ac9b:	e8 40 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aca7:	83 c4 08             	add    esp,0x8
c000acaa:	5b                   	pop    ebx
c000acab:	e9 0e fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000acb0:	3c 08                	cmp    al,0x8
c000acb2:	75 25                	jne    c000acd9 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000acb4:	50                   	push   eax
c000acb5:	50                   	push   eax
c000acb6:	6a 01                	push   0x1
c000acb8:	53                   	push   ebx
c000acb9:	e8 4c ff ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000acbe:	5a                   	pop    edx
c000acbf:	59                   	pop    ecx
c000acc0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000acc3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000acc6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000acc9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000accc:	6a 20                	push   0x20
c000acce:	53                   	push   ebx
c000accf:	e8 b2 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acd4:	83 c4 28             	add    esp,0x28
c000acd7:	5b                   	pop    ebx
c000acd8:	c3                   	ret    
c000acd9:	83 ec 08             	sub    esp,0x8
c000acdc:	0f be c0             	movsx  eax,al
c000acdf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ace2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ace5:	51                   	push   ecx
c000ace6:	52                   	push   edx
c000ace7:	50                   	push   eax
c000ace8:	53                   	push   ebx
c000ace9:	e8 98 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acee:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000acf2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000acfa:	83 c4 28             	add    esp,0x28
c000acfd:	5b                   	pop    ebx
c000acfe:	e9 b3 fe ff ff       	jmp    c000abb6 <VgaText::incrementCursor(bool)>
c000ad03:	90                   	nop

c000ad04 <VgaText::doUpdate()>:
c000ad04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad08:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ad0b:	85 c0                	test   eax,eax
c000ad0d:	74 02                	je     c000ad11 <VgaText::doUpdate()+0xd>
c000ad0f:	ff e0                	jmp    eax
c000ad11:	c3                   	ret    

c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000ad12:	55                   	push   ebp
c000ad13:	31 ed                	xor    ebp,ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	83 ec 1c             	sub    esp,0x1c
c000ad1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ad1f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad24:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ad2b:	50                   	push   eax
c000ad2c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad31:	50                   	push   eax
c000ad32:	e8 97 fc ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000ad37:	59                   	pop    ecx
c000ad38:	0f b6 c0             	movzx  eax,al
c000ad3b:	5e                   	pop    esi
c000ad3c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ad45:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad4c:	0f b7 f6             	movzx  esi,si
c000ad4f:	01 f6                	add    esi,esi
c000ad51:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad54:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad57:	84 c0                	test   al,al
c000ad59:	0f 84 fd 00 00 00    	je     c000ae5c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000ad5f:	3c 0d                	cmp    al,0xd
c000ad61:	75 0c                	jne    c000ad6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000ad63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad6a:	e9 e7 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad6f:	3c 0a                	cmp    al,0xa
c000ad71:	75 47                	jne    c000adba <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000ad73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad7d:	8d 48 01             	lea    ecx,[eax+0x1]
c000ad80:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000ad83:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000ad86:	75 0f                	jne    c000ad97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000ad88:	83 ec 0c             	sub    esp,0xc
c000ad8b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ad8e:	53                   	push   ebx
c000ad8f:	e8 4c fc ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000ad94:	83 c4 10             	add    esp,0x10
c000ad97:	83 ec 0c             	sub    esp,0xc
c000ad9a:	31 ed                	xor    ebp,ebp
c000ad9c:	53                   	push   ebx
c000ad9d:	e8 1c fb ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ada2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000adad:	0f b7 f6             	movzx  esi,si
c000adb0:	01 f6                	add    esi,esi
c000adb2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adb5:	e9 9c 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adba:	3c 08                	cmp    al,0x8
c000adbc:	75 35                	jne    c000adf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000adbe:	56                   	push   esi
c000adbf:	56                   	push   esi
c000adc0:	6a 01                	push   0x1
c000adc2:	53                   	push   ebx
c000adc3:	e8 42 fe ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000adc8:	58                   	pop    eax
c000adc9:	5a                   	pop    edx
c000adca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000adcd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000add0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000add3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000add6:	6a 20                	push   0x20
c000add8:	53                   	push   ebx
c000add9:	e8 a8 fc ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000adde:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ade3:	83 c4 20             	add    esp,0x20
c000ade6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ade9:	0f b7 f6             	movzx  esi,si
c000adec:	01 f6                	add    esi,esi
c000adee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adf1:	eb 63                	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adf3:	51                   	push   ecx
c000adf4:	51                   	push   ecx
c000adf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adf9:	50                   	push   eax
c000adfa:	e8 75 fc ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000adff:	83 c4 10             	add    esp,0x10
c000ae02:	66 89 06             	mov    WORD PTR [esi],ax
c000ae05:	39 1d e4 7f 02 c0    	cmp    DWORD PTR ds:0xc0027fe4,ebx
c000ae0b:	75 21                	jne    c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae0d:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ae10:	85 c0                	test   eax,eax
c000ae12:	74 1a                	je     c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae14:	52                   	push   edx
c000ae15:	52                   	push   edx
c000ae16:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae19:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae24:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ae27:	51                   	push   ecx
c000ae28:	53                   	push   ebx
c000ae29:	ff d0                	call   eax
c000ae2b:	83 c4 20             	add    esp,0x20
c000ae2e:	83 c6 02             	add    esi,0x2
c000ae31:	50                   	push   eax
c000ae32:	50                   	push   eax
c000ae33:	6a 00                	push   0x0
c000ae35:	53                   	push   ebx
c000ae36:	e8 7b fd ff ff       	call   c000abb6 <VgaText::incrementCursor(bool)>
c000ae3b:	83 c4 10             	add    esp,0x10
c000ae3e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ae42:	75 0d                	jne    c000ae51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ae44:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ae49:	0f b7 f6             	movzx  esi,si
c000ae4c:	01 f6                	add    esi,esi
c000ae4e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ae51:	bd 01 00 00 00       	mov    ebp,0x1
c000ae56:	47                   	inc    edi
c000ae57:	e9 f8 fe ff ff       	jmp    c000ad54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ae5c:	83 ec 0c             	sub    esp,0xc
c000ae5f:	53                   	push   ebx
c000ae60:	e8 59 fa ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 e8                	mov    eax,ebp
c000ae6a:	84 c0                	test   al,al
c000ae6c:	74 0c                	je     c000ae7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ae6e:	83 ec 0c             	sub    esp,0xc
c000ae71:	53                   	push   ebx
c000ae72:	e8 8d fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae81:	83 c4 1c             	add    esp,0x1c
c000ae84:	5b                   	pop    ebx
c000ae85:	5e                   	pop    esi
c000ae86:	5f                   	pop    edi
c000ae87:	5d                   	pop    ebp
c000ae88:	c3                   	ret    
c000ae89:	90                   	nop

c000ae8a <VgaText::clearScreen()>:
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	31 f6                	xor    esi,esi
c000ae8e:	53                   	push   ebx
c000ae8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae93:	52                   	push   edx
c000ae94:	6a 00                	push   0x0
c000ae96:	6a 00                	push   0x0
c000ae98:	53                   	push   ebx
c000ae99:	e8 54 fc ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ae9e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000aeab:	7e 20                	jle    c000aecd <VgaText::clearScreen()+0x43>
c000aead:	31 ff                	xor    edi,edi
c000aeaf:	50                   	push   eax
c000aeb0:	50                   	push   eax
c000aeb1:	56                   	push   esi
c000aeb2:	57                   	push   edi
c000aeb3:	47                   	inc    edi
c000aeb4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aeb7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aeba:	6a 20                	push   0x20
c000aebc:	53                   	push   ebx
c000aebd:	e8 c4 fb ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aec2:	83 c4 20             	add    esp,0x20
c000aec5:	83 ff 50             	cmp    edi,0x50
c000aec8:	75 e5                	jne    c000aeaf <VgaText::clearScreen()+0x25>
c000aeca:	46                   	inc    esi
c000aecb:	eb db                	jmp    c000aea8 <VgaText::clearScreen()+0x1e>
c000aecd:	83 ec 0c             	sub    esp,0xc
c000aed0:	53                   	push   ebx
c000aed1:	e8 2e fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000aed6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aedd:	83 c4 10             	add    esp,0x10
c000aee0:	5b                   	pop    ebx
c000aee1:	5e                   	pop    esi
c000aee2:	5f                   	pop    edi
c000aee3:	c3                   	ret    

c000aee4 <VgaText::putchar(char)>:
c000aee4:	56                   	push   esi
c000aee5:	53                   	push   ebx
c000aee6:	83 ec 14             	sub    esp,0x14
c000aee9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aeed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aef1:	3c 5b                	cmp    al,0x5b
c000aef3:	75 18                	jne    c000af0d <VgaText::putchar(char)+0x29>
c000aef5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000aef9:	74 1f                	je     c000af1a <VgaText::putchar(char)+0x36>
c000aefb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000af01:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000af08:	e9 bd 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af0d:	3c 1b                	cmp    al,0x1b
c000af0f:	75 09                	jne    c000af1a <VgaText::putchar(char)+0x36>
c000af11:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000af15:	e9 b0 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af1a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000af1d:	84 c9                	test   cl,cl
c000af1f:	0f 84 92 00 00 00    	je     c000afb7 <VgaText::putchar(char)+0xd3>
c000af25:	8d 50 c0             	lea    edx,[eax-0x40]
c000af28:	80 fa 3e             	cmp    dl,0x3e
c000af2b:	77 76                	ja     c000afa3 <VgaText::putchar(char)+0xbf>
c000af2d:	3c 6d                	cmp    al,0x6d
c000af2f:	75 47                	jne    c000af78 <VgaText::putchar(char)+0x94>
c000af31:	31 f6                	xor    esi,esi
c000af33:	31 d2                	xor    edx,edx
c000af35:	31 c0                	xor    eax,eax
c000af37:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000af3a:	7e 2d                	jle    c000af69 <VgaText::putchar(char)+0x85>
c000af3c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000af41:	80 fa 3b             	cmp    dl,0x3b
c000af44:	75 17                	jne    c000af5d <VgaText::putchar(char)+0x79>
c000af46:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000af4a:	50                   	push   eax
c000af4b:	53                   	push   ebx
c000af4c:	e8 83 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af51:	59                   	pop    ecx
c000af52:	31 d2                	xor    edx,edx
c000af54:	58                   	pop    eax
c000af55:	31 c0                	xor    eax,eax
c000af57:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000af5b:	eb 09                	jmp    c000af66 <VgaText::putchar(char)+0x82>
c000af5d:	6b c0 0a             	imul   eax,eax,0xa
c000af60:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000af64:	88 ca                	mov    dl,cl
c000af66:	46                   	inc    esi
c000af67:	eb ce                	jmp    c000af37 <VgaText::putchar(char)+0x53>
c000af69:	84 d2                	test   dl,dl
c000af6b:	74 2e                	je     c000af9b <VgaText::putchar(char)+0xb7>
c000af6d:	50                   	push   eax
c000af6e:	53                   	push   ebx
c000af6f:	e8 60 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af74:	58                   	pop    eax
c000af75:	5a                   	pop    edx
c000af76:	eb 23                	jmp    c000af9b <VgaText::putchar(char)+0xb7>
c000af78:	3c 4a                	cmp    al,0x4a
c000af7a:	75 1f                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af7c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000af80:	75 19                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af82:	83 ec 0c             	sub    esp,0xc
c000af85:	53                   	push   ebx
c000af86:	e8 ff fe ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000af8b:	83 c4 0c             	add    esp,0xc
c000af8e:	6a 00                	push   0x0
c000af90:	6a 00                	push   0x0
c000af92:	53                   	push   ebx
c000af93:	e8 5a fb ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000af98:	83 c4 10             	add    esp,0x10
c000af9b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000afa1:	eb 27                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afa3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000afa6:	83 fa 0e             	cmp    edx,0xe
c000afa9:	7f 1f                	jg     c000afca <VgaText::putchar(char)+0xe6>
c000afab:	8d 4a 01             	lea    ecx,[edx+0x1]
c000afae:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000afb1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000afb5:	eb 13                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afb7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000afba:	0f be c0             	movsx  eax,al
c000afbd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000afc0:	50                   	push   eax
c000afc1:	53                   	push   ebx
c000afc2:	e8 65 fc ff ff       	call   c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	83 c4 14             	add    esp,0x14
c000afcd:	5b                   	pop    ebx
c000afce:	5e                   	pop    esi
c000afcf:	c3                   	ret    

c000afd0 <VgaText::putx(unsigned int)>:
c000afd0:	57                   	push   edi
c000afd1:	b9 11 00 00 00       	mov    ecx,0x11
c000afd6:	56                   	push   esi
c000afd7:	be ea 42 02 c0       	mov    esi,0xc00242ea
c000afdc:	53                   	push   ebx
c000afdd:	83 ec 20             	sub    esp,0x20
c000afe0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000afe4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000afe8:	fc                   	cld    
c000afe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000afeb:	be 08 00 00 00       	mov    esi,0x8
c000aff0:	50                   	push   eax
c000aff1:	50                   	push   eax
c000aff2:	89 d8                	mov    eax,ebx
c000aff4:	c1 e3 04             	shl    ebx,0x4
c000aff7:	c1 e8 1c             	shr    eax,0x1c
c000affa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000afff:	50                   	push   eax
c000b000:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b004:	e8 db fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b009:	83 c4 10             	add    esp,0x10
c000b00c:	4e                   	dec    esi
c000b00d:	75 e1                	jne    c000aff0 <VgaText::putx(unsigned int)+0x20>
c000b00f:	83 c4 20             	add    esp,0x20
c000b012:	5b                   	pop    ebx
c000b013:	5e                   	pop    esi
c000b014:	5f                   	pop    edi
c000b015:	c3                   	ret    

c000b016 <VgaText::puts(char const*)>:
c000b016:	53                   	push   ebx
c000b017:	83 ec 08             	sub    esp,0x8
c000b01a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b01e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b021:	84 c0                	test   al,al
c000b023:	74 12                	je     c000b037 <VgaText::puts(char const*)+0x21>
c000b025:	43                   	inc    ebx
c000b026:	51                   	push   ecx
c000b027:	51                   	push   ecx
c000b028:	50                   	push   eax
c000b029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02d:	e8 b2 fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	eb e7                	jmp    c000b01e <VgaText::puts(char const*)+0x8>
c000b037:	83 c4 08             	add    esp,0x8
c000b03a:	5b                   	pop    ebx
c000b03b:	c3                   	ret    

c000b03c <VgaText::VgaText(char const*)>:
c000b03c:	57                   	push   edi
c000b03d:	56                   	push   esi
c000b03e:	53                   	push   ebx
c000b03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b043:	83 ec 08             	sub    esp,0x8
c000b046:	6a 00                	push   0x0
c000b048:	50                   	push   eax
c000b049:	e8 44 05 00 00       	call   c000b592 <UnixFile::UnixFile(int)>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	ba 50 43 02 c0       	mov    edx,0xc0024350
c000b056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05a:	89 10                	mov    DWORD PTR [eax],edx
c000b05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b060:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b086:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b091:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a7:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b2:	8d 50 60             	lea    edx,[eax+0x60]
c000b0b5:	bb c0 7f 02 c0       	mov    ebx,0xc0027fc0
c000b0ba:	b8 08 00 00 00       	mov    eax,0x8
c000b0bf:	fc                   	cld    
c000b0c0:	89 d7                	mov    edi,edx
c000b0c2:	89 de                	mov    esi,ebx
c000b0c4:	89 c1                	mov    ecx,eax
c000b0c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	05 82 00 00 00       	add    eax,0x82
c000b0d1:	83 ec 08             	sub    esp,0x8
c000b0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d8:	50                   	push   eax
c000b0d9:	e8 62 56 ff ff       	call   c0000740 <strcpy>
c000b0de:	83 c4 10             	add    esp,0x10
c000b0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e5:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	6a 01                	push   0x1
c000b0f1:	e8 df 08 00 00       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000b0f6:	83 c4 10             	add    esp,0x10
c000b0f9:	89 c2                	mov    edx,eax
c000b0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b102:	8b 1d 90 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028090
c000b108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b10c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b10f:	89 c6                	mov    esi,eax
c000b111:	e8 b0 ef ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000b116:	68 05 0c 00 00       	push   0xc05
c000b11b:	56                   	push   esi
c000b11c:	50                   	push   eax
c000b11d:	53                   	push   ebx
c000b11e:	e8 59 0f 00 00       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000b123:	83 c4 10             	add    esp,0x10
c000b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b12d:	83 ec 04             	sub    esp,0x4
c000b130:	68 00 0f 00 00       	push   0xf00
c000b135:	6a 00                	push   0x0
c000b137:	50                   	push   eax
c000b138:	e8 47 55 ff ff       	call   c0000684 <memset>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	83 ec 04             	sub    esp,0x4
c000b143:	6a 00                	push   0x0
c000b145:	6a 07                	push   0x7
c000b147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b14b:	e8 18 f8 ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	83 ec 04             	sub    esp,0x4
c000b156:	6a 00                	push   0x0
c000b158:	6a 00                	push   0x0
c000b15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b15e:	e8 8f f9 ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b16d:	e8 18 fd ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b179:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b181:	05 02 01 00 00       	add    eax,0x102
c000b186:	83 ec 04             	sub    esp,0x4
c000b189:	6a 30                	push   0x30
c000b18b:	6a 00                	push   0x0
c000b18d:	50                   	push   eax
c000b18e:	e8 f1 54 ff ff       	call   c0000684 <memset>
c000b193:	83 c4 10             	add    esp,0x10
c000b196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19a:	05 32 01 00 00       	add    eax,0x132
c000b19f:	83 ec 04             	sub    esp,0x4
c000b1a2:	68 80 00 00 00       	push   0x80
c000b1a7:	6a 00                	push   0x0
c000b1a9:	50                   	push   eax
c000b1aa:	e8 d5 54 ff ff       	call   c0000684 <memset>
c000b1af:	83 c4 10             	add    esp,0x10
c000b1b2:	90                   	nop
c000b1b3:	5b                   	pop    ebx
c000b1b4:	5e                   	pop    esi
c000b1b5:	5f                   	pop    edi
c000b1b6:	c3                   	ret    
c000b1b7:	90                   	nop

c000b1b8 <VgaText::receiveKey(unsigned char)>:
c000b1b8:	55                   	push   ebp
c000b1b9:	57                   	push   edi
c000b1ba:	56                   	push   esi
c000b1bb:	53                   	push   ebx
c000b1bc:	83 ec 1c             	sub    esp,0x1c
c000b1bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b1c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b1c7:	84 db                	test   bl,bl
c000b1c9:	0f 84 c6 00 00 00    	je     c000b295 <VgaText::receiveKey(unsigned char)+0xdd>
c000b1cf:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b1d5:	80 fb 08             	cmp    bl,0x8
c000b1d8:	75 2c                	jne    c000b206 <VgaText::receiveKey(unsigned char)+0x4e>
c000b1da:	83 ec 0c             	sub    esp,0xc
c000b1dd:	57                   	push   edi
c000b1de:	e8 bd 54 ff ff       	call   c00006a0 <strlen>
c000b1e3:	83 c4 10             	add    esp,0x10
c000b1e6:	85 c0                	test   eax,eax
c000b1e8:	74 41                	je     c000b22b <VgaText::receiveKey(unsigned char)+0x73>
c000b1ea:	50                   	push   eax
c000b1eb:	50                   	push   eax
c000b1ec:	6a 08                	push   0x8
c000b1ee:	56                   	push   esi
c000b1ef:	e8 f0 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b1f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b1f7:	e8 a4 54 ff ff       	call   c00006a0 <strlen>
c000b1fc:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b204:	eb 22                	jmp    c000b228 <VgaText::receiveKey(unsigned char)+0x70>
c000b206:	0f be c3             	movsx  eax,bl
c000b209:	52                   	push   edx
c000b20a:	52                   	push   edx
c000b20b:	50                   	push   eax
c000b20c:	56                   	push   esi
c000b20d:	e8 d2 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b212:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b216:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b21b:	59                   	pop    ecx
c000b21c:	5d                   	pop    ebp
c000b21d:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b221:	50                   	push   eax
c000b222:	57                   	push   edi
c000b223:	e8 58 56 ff ff       	call   c0000880 <strcat>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b232:	75 05                	jne    c000b239 <VgaText::receiveKey(unsigned char)+0x81>
c000b234:	80 fb 0a             	cmp    bl,0xa
c000b237:	75 50                	jne    c000b289 <VgaText::receiveKey(unsigned char)+0xd1>
c000b239:	83 ec 0c             	sub    esp,0xc
c000b23c:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b242:	53                   	push   ebx
c000b243:	e8 58 54 ff ff       	call   c00006a0 <strlen>
c000b248:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b24b:	89 c5                	mov    ebp,eax
c000b24d:	e8 4e 54 ff ff       	call   c00006a0 <strlen>
c000b252:	83 c4 10             	add    esp,0x10
c000b255:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b259:	3d 80 00 00 00       	cmp    eax,0x80
c000b25e:	76 10                	jbe    c000b270 <VgaText::receiveKey(unsigned char)+0xb8>
c000b260:	83 ec 0c             	sub    esp,0xc
c000b263:	68 fb 42 02 c0       	push   0xc00242fb
c000b268:	e8 9a 97 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	50                   	push   eax
c000b271:	50                   	push   eax
c000b272:	57                   	push   edi
c000b273:	53                   	push   ebx
c000b274:	e8 07 56 ff ff       	call   c0000880 <strcat>
c000b279:	83 c4 0c             	add    esp,0xc
c000b27c:	6a 30                	push   0x30
c000b27e:	6a 00                	push   0x0
c000b280:	57                   	push   edi
c000b281:	e8 fe 53 ff ff       	call   c0000684 <memset>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	83 ec 0c             	sub    esp,0xc
c000b28c:	56                   	push   esi
c000b28d:	e8 72 fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b292:	83 c4 10             	add    esp,0x10
c000b295:	83 c4 1c             	add    esp,0x1c
c000b298:	5b                   	pop    ebx
c000b299:	5e                   	pop    esi
c000b29a:	5f                   	pop    edi
c000b29b:	5d                   	pop    ebp
c000b29c:	c3                   	ret    
c000b29d:	90                   	nop

c000b29e <VgaText::write(unsigned long long, void*, int*)>:
c000b29e:	55                   	push   ebp
c000b29f:	57                   	push   edi
c000b2a0:	56                   	push   esi
c000b2a1:	53                   	push   ebx
c000b2a2:	83 ec 0c             	sub    esp,0xc
c000b2a5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b2a9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b2ad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b2b1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b2b8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b2bb:	39 eb                	cmp    ebx,ebp
c000b2bd:	74 13                	je     c000b2d2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b2bf:	43                   	inc    ebx
c000b2c0:	50                   	push   eax
c000b2c1:	50                   	push   eax
c000b2c2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b2c6:	50                   	push   eax
c000b2c7:	56                   	push   esi
c000b2c8:	e8 17 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b2cd:	83 c4 10             	add    esp,0x10
c000b2d0:	eb e9                	jmp    c000b2bb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b2d2:	83 ec 0c             	sub    esp,0xc
c000b2d5:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b2dc:	56                   	push   esi
c000b2dd:	e8 22 fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b2e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b2e6:	89 38                	mov    DWORD PTR [eax],edi
c000b2e8:	83 c4 1c             	add    esp,0x1c
c000b2eb:	31 c0                	xor    eax,eax
c000b2ed:	5b                   	pop    ebx
c000b2ee:	5e                   	pop    esi
c000b2ef:	5f                   	pop    edi
c000b2f0:	5d                   	pop    ebp
c000b2f1:	c3                   	ret    

c000b2f2 <newTerminal(char*)>:
c000b2f2:	83 ec 28             	sub    esp,0x28
c000b2f5:	68 b4 01 00 00       	push   0x1b4
c000b2fa:	e8 10 e7 ff ff       	call   c0009a0f <malloc>
c000b2ff:	5a                   	pop    edx
c000b300:	59                   	pop    ecx
c000b301:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b305:	50                   	push   eax
c000b306:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b30a:	e8 2d fd ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c000b30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b313:	83 c4 2c             	add    esp,0x2c
c000b316:	c3                   	ret    
c000b317:	90                   	nop

c000b318 <TSS::TSS()>:
c000b318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b31c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b323:	90                   	nop
c000b324:	c3                   	ret    
c000b325:	90                   	nop
c000b326:	66 90                	xchg   ax,ax

c000b328 <TSS::setESP(unsigned long)>:
c000b328:	55                   	push   ebp
c000b329:	89 e5                	mov    ebp,esp
c000b32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b32e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b331:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b334:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b337:	90                   	nop
c000b338:	5d                   	pop    ebp
c000b339:	c3                   	ret    
c000b33a:	66 90                	xchg   ax,ax

c000b33c <TSS::flush()>:
c000b33c:	55                   	push   ebp
c000b33d:	89 e5                	mov    ebp,esp
c000b33f:	83 ec 10             	sub    esp,0x10
c000b342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b345:	8b 00                	mov    eax,DWORD PTR [eax]
c000b347:	83 c8 03             	or     eax,0x3
c000b34a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b34e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b352:	66 89 d0             	mov    ax,dx
c000b355:	0f 00 d8             	ltr    ax
c000b358:	90                   	nop
c000b359:	c9                   	leave  
c000b35a:	c3                   	ret    
c000b35b:	90                   	nop

c000b35c <TSS::setup(unsigned long, unsigned long)>:
c000b35c:	55                   	push   ebp
c000b35d:	89 e5                	mov    ebp,esp
c000b35f:	83 ec 18             	sub    esp,0x18
c000b362:	83 ec 0c             	sub    esp,0xc
c000b365:	6a 68                	push   0x68
c000b367:	e8 a3 e6 ff ff       	call   c0009a0f <malloc>
c000b36c:	83 c4 10             	add    esp,0x10
c000b36f:	89 c2                	mov    edx,eax
c000b371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b374:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b37a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b37d:	83 ec 04             	sub    esp,0x4
c000b380:	6a 68                	push   0x68
c000b382:	6a 00                	push   0x0
c000b384:	50                   	push   eax
c000b385:	e8 fa 52 ff ff       	call   c0000684 <memset>
c000b38a:	83 c4 10             	add    esp,0x10
c000b38d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b393:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b39c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b39f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b3ae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b3b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3b7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b3bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3c3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b3c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3cf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b3d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3db:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b3e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3e7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3f3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b402:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b408:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b40b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b40e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b414:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b417:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b41e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b421:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b424:	0f 20 da             	mov    edx,cr3
c000b427:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b42a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b42d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b433:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b436:	83 ec 08             	sub    esp,0x8
c000b439:	50                   	push   eax
c000b43a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b43d:	50                   	push   eax
c000b43e:	e8 27 de ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000b443:	83 c4 10             	add    esp,0x10
c000b446:	83 ec 08             	sub    esp,0x8
c000b449:	6a 68                	push   0x68
c000b44b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b44e:	50                   	push   eax
c000b44f:	e8 32 de ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c000b454:	83 c4 10             	add    esp,0x10
c000b457:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b45b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b45e:	83 e0 0f             	and    eax,0xf
c000b461:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b464:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b467:	83 c8 40             	or     eax,0x40
c000b46a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b46d:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000b472:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b478:	05 78 01 00 00       	add    eax,0x178
c000b47d:	83 ec 04             	sub    esp,0x4
c000b480:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b483:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b486:	50                   	push   eax
c000b487:	e8 2e de ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c000b48c:	83 c4 10             	add    esp,0x10
c000b48f:	89 c2                	mov    edx,eax
c000b491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b494:	89 10                	mov    DWORD PTR [eax],edx
c000b496:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000b49b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b4a1:	05 78 01 00 00       	add    eax,0x178
c000b4a6:	83 ec 0c             	sub    esp,0xc
c000b4a9:	50                   	push   eax
c000b4aa:	e8 35 de ff ff       	call   c00092e4 <GDT::flush()>
c000b4af:	83 c4 10             	add    esp,0x10
c000b4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b4b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4b7:	c9                   	leave  
c000b4b8:	c3                   	ret    
c000b4b9:	90                   	nop

c000b4ba <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4c5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b4ca:	75 08                	jne    c000b4d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b4cc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b4d2:	eb 38                	jmp    c000b50c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b4d4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b4d9:	75 17                	jne    c000b4f2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b4db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b4e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b4e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b4e9:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4ef:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b4f2:	89 c1                	mov    ecx,eax
c000b4f4:	83 e1 fd             	and    ecx,0xfffffffd
c000b4f7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b4fd:	74 cd                	je     c000b4cc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b4ff:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b504:	83 e0 ef             	and    eax,0xffffffef
c000b507:	83 f8 08             	cmp    eax,0x8
c000b50a:	76 c0                	jbe    c000b4cc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b50c:	31 c0                	xor    eax,eax
c000b50e:	c3                   	ret    
c000b50f:	90                   	nop

c000b510 <ReservedFilename::isAtty()>:
c000b510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b514:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b517:	31 c0                	xor    eax,eax
c000b519:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b51f:	74 09                	je     c000b52a <ReservedFilename::isAtty()+0x1a>
c000b521:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b527:	0f 94 c0             	sete   al
c000b52a:	c3                   	ret    
c000b52b:	90                   	nop

c000b52c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b52c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b530:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b537:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b53b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b540:	75 08                	jne    c000b54a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b542:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b548:	eb 3d                	jmp    c000b587 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b54a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b54f:	75 17                	jne    c000b568 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b551:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b556:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b559:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b55f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b561:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b565:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b568:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b56d:	75 04                	jne    c000b573 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b56f:	89 0a                	mov    DWORD PTR [edx],ecx
c000b571:	eb 14                	jmp    c000b587 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b573:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b578:	74 c8                	je     c000b542 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b57a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b57f:	83 e0 ef             	and    eax,0xffffffef
c000b582:	83 f8 08             	cmp    eax,0x8
c000b585:	76 bb                	jbe    c000b542 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b587:	31 c0                	xor    eax,eax
c000b589:	c3                   	ret    

c000b58a <UnixFile::getFileDescriptor()>:
c000b58a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b591:	c3                   	ret    

c000b592 <UnixFile::UnixFile(int)>:
c000b592:	53                   	push   ebx
c000b593:	83 ec 28             	sub    esp,0x28
c000b596:	ba 18 44 02 c0       	mov    edx,0xc0024418
c000b59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59f:	89 10                	mov    DWORD PTR [eax],edx
c000b5a1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b5a9:	0f 8f 8c 01 00 00    	jg     c000b73b <UnixFile::UnixFile(int)+0x1a9>
c000b5af:	a1 a0 73 02 c0       	mov    eax,ds:0xc00273a0
c000b5b4:	8d 50 01             	lea    edx,[eax+0x1]
c000b5b7:	89 15 a0 73 02 c0    	mov    DWORD PTR ds:0xc00273a0,edx
c000b5bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b5c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b5c4:	83 ec 08             	sub    esp,0x8
c000b5c7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b5cb:	68 78 80 02 c0       	push   0xc0028078
c000b5d0:	e8 57 74 01 00       	call   c0022a2c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b5d5:	83 c4 10             	add    esp,0x10
c000b5d8:	a0 74 80 02 c0       	mov    al,ds:0xc0028074
c000b5dd:	83 f0 01             	xor    eax,0x1
c000b5e0:	84 c0                	test   al,al
c000b5e2:	0f 84 54 01 00 00    	je     c000b73c <UnixFile::UnixFile(int)+0x1aa>
c000b5e8:	c6 05 74 80 02 c0 01 	mov    BYTE PTR ds:0xc0028074,0x1
c000b5ef:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b5f7:	83 ec 0c             	sub    esp,0xc
c000b5fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5fe:	e8 0c e4 ff ff       	call   c0009a0f <malloc>
c000b603:	83 c4 10             	add    esp,0x10
c000b606:	89 c3                	mov    ebx,eax
c000b608:	83 ec 08             	sub    esp,0x8
c000b60b:	68 03 ff ff 0f       	push   0xfffff03
c000b610:	53                   	push   ebx
c000b611:	e8 2c 01 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 1d 6c 80 02 c0    	mov    DWORD PTR ds:0xc002806c,ebx
c000b61f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b627:	83 ec 0c             	sub    esp,0xc
c000b62a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62e:	e8 dc e3 ff ff       	call   c0009a0f <malloc>
c000b633:	83 c4 10             	add    esp,0x10
c000b636:	89 c3                	mov    ebx,eax
c000b638:	83 ec 08             	sub    esp,0x8
c000b63b:	68 01 ff ff 0f       	push   0xfffff01
c000b640:	53                   	push   ebx
c000b641:	e8 fc 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b646:	83 c4 10             	add    esp,0x10
c000b649:	89 1d 70 80 02 c0    	mov    DWORD PTR ds:0xc0028070,ebx
c000b64f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b657:	83 ec 0c             	sub    esp,0xc
c000b65a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b65e:	e8 ac e3 ff ff       	call   c0009a0f <malloc>
c000b663:	83 c4 10             	add    esp,0x10
c000b666:	89 c3                	mov    ebx,eax
c000b668:	83 ec 08             	sub    esp,0x8
c000b66b:	68 00 ff ff 0f       	push   0xfffff00
c000b670:	53                   	push   ebx
c000b671:	e8 cc 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b676:	83 c4 10             	add    esp,0x10
c000b679:	89 1d 64 80 02 c0    	mov    DWORD PTR ds:0xc0028064,ebx
c000b67f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b687:	83 ec 0c             	sub    esp,0xc
c000b68a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b68e:	e8 7c e3 ff ff       	call   c0009a0f <malloc>
c000b693:	83 c4 10             	add    esp,0x10
c000b696:	89 c3                	mov    ebx,eax
c000b698:	83 ec 08             	sub    esp,0x8
c000b69b:	68 02 ff ff 0f       	push   0xfffff02
c000b6a0:	53                   	push   ebx
c000b6a1:	e8 9c 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b6a6:	83 c4 10             	add    esp,0x10
c000b6a9:	89 1d 68 80 02 c0    	mov    DWORD PTR ds:0xc0028068,ebx
c000b6af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b6b7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b6bc:	7f 7e                	jg     c000b73c <UnixFile::UnixFile(int)+0x1aa>
c000b6be:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b6c6:	83 ec 0c             	sub    esp,0xc
c000b6c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b6cd:	e8 3d e3 ff ff       	call   c0009a0f <malloc>
c000b6d2:	83 c4 10             	add    esp,0x10
c000b6d5:	89 c3                	mov    ebx,eax
c000b6d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6db:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b6e0:	83 ec 08             	sub    esp,0x8
c000b6e3:	50                   	push   eax
c000b6e4:	53                   	push   ebx
c000b6e5:	e8 58 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b6ea:	83 c4 10             	add    esp,0x10
c000b6ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6f1:	89 1c 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],ebx
c000b6f8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b700:	83 ec 0c             	sub    esp,0xc
c000b703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b707:	e8 03 e3 ff ff       	call   c0009a0f <malloc>
c000b70c:	83 c4 10             	add    esp,0x10
c000b70f:	89 c3                	mov    ebx,eax
c000b711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b715:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b71a:	83 ec 08             	sub    esp,0x8
c000b71d:	50                   	push   eax
c000b71e:	53                   	push   ebx
c000b71f:	e8 1e 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b724:	83 c4 10             	add    esp,0x10
c000b727:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b72b:	89 1c 85 00 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8000],ebx
c000b732:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b736:	e9 7c ff ff ff       	jmp    c000b6b7 <UnixFile::UnixFile(int)+0x125>
c000b73b:	90                   	nop
c000b73c:	83 c4 28             	add    esp,0x28
c000b73f:	5b                   	pop    ebx
c000b740:	c3                   	ret    
c000b741:	90                   	nop

c000b742 <ReservedFilename::ReservedFilename(int)>:
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b749:	83 ec 08             	sub    esp,0x8
c000b74c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b750:	50                   	push   eax
c000b751:	e8 3c fe ff ff       	call   c000b592 <UnixFile::UnixFile(int)>
c000b756:	83 c4 10             	add    esp,0x10
c000b759:	ba 34 44 02 c0       	mov    edx,0xc0024434
c000b75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b762:	89 10                	mov    DWORD PTR [eax],edx
c000b764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b768:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b76c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b76f:	90                   	nop
c000b770:	83 c4 0c             	add    esp,0xc
c000b773:	c3                   	ret    

c000b774 <UnixFile::~UnixFile()>:
c000b774:	83 ec 1c             	sub    esp,0x1c
c000b777:	ba 18 44 02 c0       	mov    edx,0xc0024418
c000b77c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b780:	89 10                	mov    DWORD PTR [eax],edx
c000b782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b786:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b789:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b78e:	7f 73                	jg     c000b803 <UnixFile::~UnixFile()+0x8f>
c000b790:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b798:	83 ec 0c             	sub    esp,0xc
c000b79b:	68 78 80 02 c0       	push   0xc0028078
c000b7a0:	e8 5b 73 01 00       	call   c0022b00 <LinkedList<UnixFile>::getFirstElement()>
c000b7a5:	83 c4 10             	add    esp,0x10
c000b7a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ac:	83 ec 0c             	sub    esp,0xc
c000b7af:	68 78 80 02 c0       	push   0xc0028078
c000b7b4:	e8 4f 73 01 00       	call   c0022b08 <LinkedList<UnixFile>::removeFirst()>
c000b7b9:	83 c4 10             	add    esp,0x10
c000b7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b7c4:	74 40                	je     c000b806 <UnixFile::~UnixFile()+0x92>
c000b7c6:	83 ec 08             	sub    esp,0x8
c000b7c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7cd:	68 78 80 02 c0       	push   0xc0028078
c000b7d2:	e8 55 72 01 00       	call   c0022a2c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b7d7:	83 c4 10             	add    esp,0x10
c000b7da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7de:	8d 50 01             	lea    edx,[eax+0x1]
c000b7e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7e5:	3d 88 13 00 00       	cmp    eax,0x1388
c000b7ea:	0f 94 c0             	sete   al
c000b7ed:	84 c0                	test   al,al
c000b7ef:	74 a7                	je     c000b798 <UnixFile::~UnixFile()+0x24>
c000b7f1:	83 ec 0c             	sub    esp,0xc
c000b7f4:	68 f0 43 02 c0       	push   0xc00243f0
c000b7f9:	e8 09 92 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000b7fe:	83 c4 10             	add    esp,0x10
c000b801:	eb 95                	jmp    c000b798 <UnixFile::~UnixFile()+0x24>
c000b803:	90                   	nop
c000b804:	eb 01                	jmp    c000b807 <UnixFile::~UnixFile()+0x93>
c000b806:	90                   	nop
c000b807:	90                   	nop
c000b808:	83 c4 1c             	add    esp,0x1c
c000b80b:	c3                   	ret    

c000b80c <UnixFile::~UnixFile()>:
c000b80c:	83 ec 0c             	sub    esp,0xc
c000b80f:	83 ec 0c             	sub    esp,0xc
c000b812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b816:	e8 59 ff ff ff       	call   c000b774 <UnixFile::~UnixFile()>
c000b81b:	83 c4 10             	add    esp,0x10
c000b81e:	83 ec 08             	sub    esp,0x8
c000b821:	6a 0c                	push   0xc
c000b823:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b827:	e8 ee 13 00 00       	call   c000cc1a <operator delete(void*, unsigned long)>
c000b82c:	83 c4 10             	add    esp,0x10
c000b82f:	83 c4 0c             	add    esp,0xc
c000b832:	c3                   	ret    
c000b833:	90                   	nop

c000b834 <ReservedFilename::~ReservedFilename()>:
c000b834:	83 ec 0c             	sub    esp,0xc
c000b837:	ba 34 44 02 c0       	mov    edx,0xc0024434
c000b83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b840:	89 10                	mov    DWORD PTR [eax],edx
c000b842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b846:	83 ec 0c             	sub    esp,0xc
c000b849:	50                   	push   eax
c000b84a:	e8 25 ff ff ff       	call   c000b774 <UnixFile::~UnixFile()>
c000b84f:	83 c4 10             	add    esp,0x10
c000b852:	90                   	nop
c000b853:	83 c4 0c             	add    esp,0xc
c000b856:	c3                   	ret    
c000b857:	90                   	nop

c000b858 <ReservedFilename::~ReservedFilename()>:
c000b858:	83 ec 0c             	sub    esp,0xc
c000b85b:	83 ec 0c             	sub    esp,0xc
c000b85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b862:	e8 cd ff ff ff       	call   c000b834 <ReservedFilename::~ReservedFilename()>
c000b867:	83 c4 10             	add    esp,0x10
c000b86a:	83 ec 08             	sub    esp,0x8
c000b86d:	6a 0c                	push   0xc
c000b86f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b873:	e8 a2 13 00 00       	call   c000cc1a <operator delete(void*, unsigned long)>
c000b878:	83 c4 10             	add    esp,0x10
c000b87b:	83 c4 0c             	add    esp,0xc
c000b87e:	c3                   	ret    

c000b87f <getFromFileDescriptor(int)>:
c000b87f:	53                   	push   ebx
c000b880:	83 ec 08             	sub    esp,0x8
c000b883:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b887:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b88d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b893:	7f 2c                	jg     c000b8c1 <getFromFileDescriptor(int)+0x42>
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 78 80 02 c0       	push   0xc0028078
c000b89d:	e8 5e 72 01 00       	call   c0022b00 <LinkedList<UnixFile>::getFirstElement()>
c000b8a2:	83 c4 10             	add    esp,0x10
c000b8a5:	85 c0                	test   eax,eax
c000b8a7:	75 04                	jne    c000b8ad <getFromFileDescriptor(int)+0x2e>
c000b8a9:	31 c0                	xor    eax,eax
c000b8ab:	eb 6e                	jmp    c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8ad:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b8b0:	74 69                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8b2:	52                   	push   edx
c000b8b3:	52                   	push   edx
c000b8b4:	50                   	push   eax
c000b8b5:	68 78 80 02 c0       	push   0xc0028078
c000b8ba:	e8 eb 72 01 00       	call   c0022baa <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b8bf:	eb e1                	jmp    c000b8a2 <getFromFileDescriptor(int)+0x23>
c000b8c1:	a1 6c 80 02 c0       	mov    eax,ds:0xc002806c
c000b8c6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b8cc:	74 4d                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8ce:	a1 70 80 02 c0       	mov    eax,ds:0xc0028070
c000b8d3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b8d9:	74 40                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8db:	a1 68 80 02 c0       	mov    eax,ds:0xc0028068
c000b8e0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b8e6:	74 33                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8e8:	a1 64 80 02 c0       	mov    eax,ds:0xc0028064
c000b8ed:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b8f3:	74 26                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8f5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b8fb:	83 f8 08             	cmp    eax,0x8
c000b8fe:	77 09                	ja     c000b909 <getFromFileDescriptor(int)+0x8a>
c000b900:	8b 04 85 40 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7fc0]
c000b907:	eb 12                	jmp    c000b91b <getFromFileDescriptor(int)+0x9c>
c000b909:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b90f:	83 fb 08             	cmp    ebx,0x8
c000b912:	77 95                	ja     c000b8a9 <getFromFileDescriptor(int)+0x2a>
c000b914:	8b 04 9d 00 80 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8000]
c000b91b:	83 c4 08             	add    esp,0x8
c000b91e:	5b                   	pop    ebx
c000b91f:	c3                   	ret    

c000b920 <__static_initialization_and_destruction_0(int, int)>:
c000b920:	83 ec 0c             	sub    esp,0xc
c000b923:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b928:	75 34                	jne    c000b95e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b92a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b932:	75 2a                	jne    c000b95e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b934:	83 ec 0c             	sub    esp,0xc
c000b937:	68 78 80 02 c0       	push   0xc0028078
c000b93c:	e8 a9 70 01 00       	call   c00229ea <LinkedList<UnixFile>::LinkedList()>
c000b941:	83 c4 10             	add    esp,0x10
c000b944:	83 ec 04             	sub    esp,0x4
c000b947:	68 d4 71 02 c0       	push   0xc00271d4
c000b94c:	68 78 80 02 c0       	push   0xc0028078
c000b951:	68 e8 29 02 c0       	push   0xc00229e8
c000b956:	e8 39 12 00 00       	call   c000cb94 <__cxa_atexit>
c000b95b:	83 c4 10             	add    esp,0x10
c000b95e:	90                   	nop
c000b95f:	83 c4 0c             	add    esp,0xc
c000b962:	c3                   	ret    

c000b963 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b963:	83 ec 0c             	sub    esp,0xc
c000b966:	83 ec 08             	sub    esp,0x8
c000b969:	68 ff ff 00 00       	push   0xffff
c000b96e:	6a 01                	push   0x1
c000b970:	e8 ab ff ff ff       	call   c000b920 <__static_initialization_and_destruction_0(int, int)>
c000b975:	83 c4 10             	add    esp,0x10
c000b978:	83 c4 0c             	add    esp,0xc
c000b97b:	c3                   	ret    

c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b97c:	53                   	push   ebx
c000b97d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b981:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b985:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b98b:	89 c8                	mov    eax,ecx
c000b98d:	d1 e8                	shr    eax,1
c000b98f:	03 05 a8 73 02 c0    	add    eax,DWORD PTR ds:0xc00273a8
c000b995:	83 e1 01             	and    ecx,0x1
c000b998:	8a 10                	mov    dl,BYTE PTR [eax]
c000b99a:	75 09                	jne    c000b9a5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b99c:	83 e2 f0             	and    edx,0xfffffff0
c000b99f:	09 da                	or     edx,ebx
c000b9a1:	88 10                	mov    BYTE PTR [eax],dl
c000b9a3:	5b                   	pop    ebx
c000b9a4:	c3                   	ret    
c000b9a5:	c1 e3 04             	shl    ebx,0x4
c000b9a8:	83 e2 0f             	and    edx,0xf
c000b9ab:	09 da                	or     edx,ebx
c000b9ad:	88 10                	mov    BYTE PTR [eax],dl
c000b9af:	5b                   	pop    ebx
c000b9b0:	c3                   	ret    

c000b9b1 <Virt::getPageState(unsigned long)>:
c000b9b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b5:	8b 0d a8 73 02 c0    	mov    ecx,DWORD PTR ds:0xc00273a8
c000b9bb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b9c1:	89 d0                	mov    eax,edx
c000b9c3:	d1 e8                	shr    eax,1
c000b9c5:	83 e2 01             	and    edx,0x1
c000b9c8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b9cb:	75 04                	jne    c000b9d1 <Virt::getPageState(unsigned long)+0x20>
c000b9cd:	83 e0 0f             	and    eax,0xf
c000b9d0:	c3                   	ret    
c000b9d1:	c0 e8 04             	shr    al,0x4
c000b9d4:	c3                   	ret    

c000b9d5 <Virt::allocateKernelVirtualPages(int)>:
c000b9d5:	55                   	push   ebp
c000b9d6:	31 ed                	xor    ebp,ebp
c000b9d8:	57                   	push   edi
c000b9d9:	56                   	push   esi
c000b9da:	53                   	push   ebx
c000b9db:	31 db                	xor    ebx,ebx
c000b9dd:	83 ec 1c             	sub    esp,0x1c
c000b9e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b9e4:	8b 3d a4 73 02 c0    	mov    edi,DWORD PTR ds:0xc00273a4
c000b9ea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b9ef:	57                   	push   edi
c000b9f0:	e8 bc ff ff ff       	call   c000b9b1 <Virt::getPageState(unsigned long)>
c000b9f5:	5a                   	pop    edx
c000b9f6:	84 c0                	test   al,al
c000b9f8:	75 3a                	jne    c000ba34 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b9fa:	85 db                	test   ebx,ebx
c000b9fc:	75 02                	jne    c000ba00 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b9fe:	89 fd                	mov    ebp,edi
c000ba00:	43                   	inc    ebx
c000ba01:	39 f3                	cmp    ebx,esi
c000ba03:	74 5a                	je     c000ba5f <Virt::allocateKernelVirtualPages(int)+0x8a>
c000ba05:	47                   	inc    edi
c000ba06:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba0c:	76 31                	jbe    c000ba3f <Virt::allocateKernelVirtualPages(int)+0x6a>
c000ba0e:	c7 05 a4 73 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00273a4,0xc8000
c000ba18:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ba1d:	75 28                	jne    c000ba47 <Virt::allocateKernelVirtualPages(int)+0x72>
c000ba1f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ba24:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ba29:	57                   	push   edi
c000ba2a:	e8 82 ff ff ff       	call   c000b9b1 <Virt::getPageState(unsigned long)>
c000ba2f:	5a                   	pop    edx
c000ba30:	84 c0                	test   al,al
c000ba32:	74 c6                	je     c000b9fa <Virt::allocateKernelVirtualPages(int)+0x25>
c000ba34:	31 db                	xor    ebx,ebx
c000ba36:	47                   	inc    edi
c000ba37:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba3d:	77 cf                	ja     c000ba0e <Virt::allocateKernelVirtualPages(int)+0x39>
c000ba3f:	89 3d a4 73 02 c0    	mov    DWORD PTR ds:0xc00273a4,edi
c000ba45:	eb a8                	jmp    c000b9ef <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba47:	83 ec 0c             	sub    esp,0xc
c000ba4a:	68 48 44 02 c0       	push   0xc0024448
c000ba4f:	e8 b3 8f 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000ba54:	8b 3d a4 73 02 c0    	mov    edi,DWORD PTR ds:0xc00273a4
c000ba5a:	83 c4 10             	add    esp,0x10
c000ba5d:	eb 90                	jmp    c000b9ef <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba5f:	89 2d a4 73 02 c0    	mov    DWORD PTR ds:0xc00273a4,ebp
c000ba65:	4b                   	dec    ebx
c000ba66:	74 5f                	je     c000bac7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ba68:	85 f6                	test   esi,esi
c000ba6a:	74 3d                	je     c000baa9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba6c:	89 e8                	mov    eax,ebp
c000ba6e:	31 db                	xor    ebx,ebx
c000ba70:	8d 7e ff             	lea    edi,[esi-0x1]
c000ba73:	eb 14                	jmp    c000ba89 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000ba75:	6a 01                	push   0x1
c000ba77:	43                   	inc    ebx
c000ba78:	50                   	push   eax
c000ba79:	e8 fe fe ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba7e:	58                   	pop    eax
c000ba7f:	39 f3                	cmp    ebx,esi
c000ba81:	5a                   	pop    edx
c000ba82:	74 25                	je     c000baa9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba84:	a1 a4 73 02 c0       	mov    eax,ds:0xc00273a4
c000ba89:	8d 50 01             	lea    edx,[eax+0x1]
c000ba8c:	85 db                	test   ebx,ebx
c000ba8e:	89 15 a4 73 02 c0    	mov    DWORD PTR ds:0xc00273a4,edx
c000ba94:	74 20                	je     c000bab6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000ba96:	39 df                	cmp    edi,ebx
c000ba98:	75 db                	jne    c000ba75 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000ba9a:	6a 03                	push   0x3
c000ba9c:	43                   	inc    ebx
c000ba9d:	50                   	push   eax
c000ba9e:	e8 d9 fe ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000baa3:	59                   	pop    ecx
c000baa4:	39 f3                	cmp    ebx,esi
c000baa6:	58                   	pop    eax
c000baa7:	75 db                	jne    c000ba84 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000baa9:	83 c4 1c             	add    esp,0x1c
c000baac:	89 e8                	mov    eax,ebp
c000baae:	5b                   	pop    ebx
c000baaf:	c1 e0 0c             	shl    eax,0xc
c000bab2:	5e                   	pop    esi
c000bab3:	5f                   	pop    edi
c000bab4:	5d                   	pop    ebp
c000bab5:	c3                   	ret    
c000bab6:	6a 02                	push   0x2
c000bab8:	bb 01 00 00 00       	mov    ebx,0x1
c000babd:	50                   	push   eax
c000babe:	e8 b9 fe ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bac3:	58                   	pop    eax
c000bac4:	5a                   	pop    edx
c000bac5:	eb bd                	jmp    c000ba84 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bac7:	6a 04                	push   0x4
c000bac9:	8d 45 01             	lea    eax,[ebp+0x1]
c000bacc:	55                   	push   ebp
c000bacd:	a3 a4 73 02 c0       	mov    ds:0xc00273a4,eax
c000bad2:	e8 a5 fe ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bad7:	59                   	pop    ecx
c000bad8:	89 e8                	mov    eax,ebp
c000bada:	5b                   	pop    ebx
c000badb:	c1 e0 0c             	shl    eax,0xc
c000bade:	83 c4 1c             	add    esp,0x1c
c000bae1:	5b                   	pop    ebx
c000bae2:	5e                   	pop    esi
c000bae3:	5f                   	pop    edi
c000bae4:	5d                   	pop    ebp
c000bae5:	c3                   	ret    

c000bae6 <Virt::freeSwapfilePage(unsigned long)>:
c000bae6:	53                   	push   ebx
c000bae7:	8b 15 8c 80 02 c0    	mov    edx,DWORD PTR ds:0xc002808c
c000baed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000baf1:	b8 01 00 00 00       	mov    eax,0x1
c000baf6:	89 cb                	mov    ebx,ecx
c000baf8:	d3 e0                	shl    eax,cl
c000bafa:	c1 eb 05             	shr    ebx,0x5
c000bafd:	f7 d0                	not    eax
c000baff:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bb02:	5b                   	pop    ebx
c000bb03:	c3                   	ret    

c000bb04 <Virt::swapIDToSector(unsigned long)>:
c000bb04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb08:	0f af 05 ac 73 02 c0 	imul   eax,DWORD PTR ds:0xc00273ac
c000bb0f:	03 05 b4 73 02 c0    	add    eax,DWORD PTR ds:0xc00273b4
c000bb15:	c3                   	ret    

c000bb16 <Virt::allocateSwapfilePage()>:
c000bb16:	55                   	push   ebp
c000bb17:	31 d2                	xor    edx,edx
c000bb19:	57                   	push   edi
c000bb1a:	56                   	push   esi
c000bb1b:	53                   	push   ebx
c000bb1c:	83 ec 0c             	sub    esp,0xc
c000bb1f:	8b 0d ac 73 02 c0    	mov    ecx,DWORD PTR ds:0xc00273ac
c000bb25:	a1 b0 73 02 c0       	mov    eax,ds:0xc00273b0
c000bb2a:	f7 f1                	div    ecx
c000bb2c:	39 0d b0 73 02 c0    	cmp    DWORD PTR ds:0xc00273b0,ecx
c000bb32:	72 2d                	jb     c000bb61 <Virt::allocateSwapfilePage()+0x4b>
c000bb34:	8b 35 8c 80 02 c0    	mov    esi,DWORD PTR ds:0xc002808c
c000bb3a:	8b 16                	mov    edx,DWORD PTR [esi]
c000bb3c:	f6 c2 01             	test   dl,0x1
c000bb3f:	74 3c                	je     c000bb7d <Virt::allocateSwapfilePage()+0x67>
c000bb41:	31 c9                	xor    ecx,ecx
c000bb43:	bf 01 00 00 00       	mov    edi,0x1
c000bb48:	eb 12                	jmp    c000bb5c <Virt::allocateSwapfilePage()+0x46>
c000bb4a:	89 fd                	mov    ebp,edi
c000bb4c:	89 ca                	mov    edx,ecx
c000bb4e:	d3 e5                	shl    ebp,cl
c000bb50:	c1 ea 05             	shr    edx,0x5
c000bb53:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bb56:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bb58:	85 ea                	test   edx,ebp
c000bb5a:	74 2a                	je     c000bb86 <Virt::allocateSwapfilePage()+0x70>
c000bb5c:	41                   	inc    ecx
c000bb5d:	39 c8                	cmp    eax,ecx
c000bb5f:	77 e9                	ja     c000bb4a <Virt::allocateSwapfilePage()+0x34>
c000bb61:	83 ec 0c             	sub    esp,0xc
c000bb64:	68 00 46 02 c0       	push   0xc0024600
c000bb69:	e8 99 8e 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000bb6e:	83 c4 10             	add    esp,0x10
c000bb71:	31 c9                	xor    ecx,ecx
c000bb73:	83 c4 0c             	add    esp,0xc
c000bb76:	89 c8                	mov    eax,ecx
c000bb78:	5b                   	pop    ebx
c000bb79:	5e                   	pop    esi
c000bb7a:	5f                   	pop    edi
c000bb7b:	5d                   	pop    ebp
c000bb7c:	c3                   	ret    
c000bb7d:	89 f3                	mov    ebx,esi
c000bb7f:	bd 01 00 00 00       	mov    ebp,0x1
c000bb84:	31 c9                	xor    ecx,ecx
c000bb86:	09 ea                	or     edx,ebp
c000bb88:	89 c8                	mov    eax,ecx
c000bb8a:	89 13                	mov    DWORD PTR [ebx],edx
c000bb8c:	83 c4 0c             	add    esp,0xc
c000bb8f:	5b                   	pop    ebx
c000bb90:	5e                   	pop    esi
c000bb91:	5f                   	pop    edi
c000bb92:	5d                   	pop    ebp
c000bb93:	c3                   	ret    

c000bb94 <Virt::virtualMemorySetup()>:
c000bb94:	53                   	push   ebx
c000bb95:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bb9a:	6a 0f                	push   0xf
c000bb9c:	53                   	push   ebx
c000bb9d:	43                   	inc    ebx
c000bb9e:	e8 d9 fd ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bba3:	58                   	pop    eax
c000bba4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbaa:	5a                   	pop    edx
c000bbab:	75 ed                	jne    c000bb9a <Virt::virtualMemorySetup()+0x6>
c000bbad:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bbb2:	6a 00                	push   0x0
c000bbb4:	53                   	push   ebx
c000bbb5:	43                   	inc    ebx
c000bbb6:	e8 c1 fd ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbbb:	59                   	pop    ecx
c000bbbc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbc2:	58                   	pop    eax
c000bbc3:	75 ed                	jne    c000bbb2 <Virt::virtualMemorySetup()+0x1e>
c000bbc5:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bbca:	6a 0f                	push   0xf
c000bbcc:	53                   	push   ebx
c000bbcd:	43                   	inc    ebx
c000bbce:	e8 a9 fd ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbd3:	58                   	pop    eax
c000bbd4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bbda:	5a                   	pop    edx
c000bbdb:	75 ed                	jne    c000bbca <Virt::virtualMemorySetup()+0x36>
c000bbdd:	5b                   	pop    ebx
c000bbde:	c3                   	ret    

c000bbdf <Virt::setupPageSwapping(int)>:
c000bbdf:	53                   	push   ebx
c000bbe0:	83 ec 0c             	sub    esp,0xc
c000bbe3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bbe7:	a1 28 85 02 c0       	mov    eax,ds:0xc0028528
c000bbec:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bbf2:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbf4:	53                   	push   ebx
c000bbf5:	c1 e3 0b             	shl    ebx,0xb
c000bbf8:	68 17 46 02 c0       	push   0xc0024617
c000bbfd:	50                   	push   eax
c000bbfe:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bc01:	89 1d b0 73 02 c0    	mov    DWORD PTR ds:0xc00273b0,ebx
c000bc07:	c6 05 b8 73 02 c0 43 	mov    BYTE PTR ds:0xc00273b8,0x43
c000bc0e:	c1 eb 08             	shr    ebx,0x8
c000bc11:	a3 b4 73 02 c0       	mov    ds:0xc00273b4,eax
c000bc16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc19:	c7 05 ac 73 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00273ac,0x8
c000bc23:	e8 e7 dd ff ff       	call   c0009a0f <malloc>
c000bc28:	83 c4 0c             	add    esp,0xc
c000bc2b:	89 c1                	mov    ecx,eax
c000bc2d:	a3 8c 80 02 c0       	mov    ds:0xc002808c,eax
c000bc32:	31 d2                	xor    edx,edx
c000bc34:	a1 b0 73 02 c0       	mov    eax,ds:0xc00273b0
c000bc39:	f7 35 ac 73 02 c0    	div    DWORD PTR ds:0xc00273ac
c000bc3f:	c1 e8 05             	shr    eax,0x5
c000bc42:	50                   	push   eax
c000bc43:	6a 00                	push   0x0
c000bc45:	51                   	push   ecx
c000bc46:	e8 39 4a ff ff       	call   c0000684 <memset>
c000bc4b:	83 c4 18             	add    esp,0x18
c000bc4e:	5b                   	pop    ebx
c000bc4f:	c3                   	ret    

c000bc50 <VAS::VAS()>:
c000bc50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bc66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc6a:	a3 90 80 02 c0       	mov    ds:0xc0028090,eax
c000bc6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc73:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bc77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc7b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bc7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc82:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bc89:	90                   	nop
c000bc8a:	c3                   	ret    
c000bc8b:	90                   	nop

c000bc8c <VAS::VAS(VAS*)>:
c000bc8c:	83 ec 0c             	sub    esp,0xc
c000bc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bca5:	83 ec 0c             	sub    esp,0xc
c000bca8:	68 68 44 02 c0       	push   0xc0024468
c000bcad:	e8 55 8d 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000bcb2:	83 c4 10             	add    esp,0x10
c000bcb5:	90                   	nop
c000bcb6:	83 c4 0c             	add    esp,0xc
c000bcb9:	c3                   	ret    

c000bcba <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bcba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcbe:	89 c2                	mov    edx,eax
c000bcc0:	c1 e8 0a             	shr    eax,0xa
c000bcc3:	c1 ea 16             	shr    edx,0x16
c000bcc6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bccb:	19 c9                	sbb    ecx,ecx
c000bccd:	c1 e2 0c             	shl    edx,0xc
c000bcd0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bcd6:	25 fc 0f 00 00       	and    eax,0xffc
c000bcdb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bce2:	01 d0                	add    eax,edx
c000bce4:	c3                   	ret    
c000bce5:	90                   	nop

c000bce6 <VAS::getPageTableEntry(unsigned long)>:
c000bce6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bcea:	89 ca                	mov    edx,ecx
c000bcec:	c1 e9 0a             	shr    ecx,0xa
c000bcef:	c1 ea 16             	shr    edx,0x16
c000bcf2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bcf8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bcfe:	c1 e0 0c             	shl    eax,0xc
c000bd01:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bd04:	c3                   	ret    

c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>:
c000bd05:	57                   	push   edi
c000bd06:	56                   	push   esi
c000bd07:	be 01 00 00 00       	mov    esi,0x1
c000bd0c:	53                   	push   ebx
c000bd0d:	83 ec 10             	sub    esp,0x10
c000bd10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bd14:	c1 eb 0c             	shr    ebx,0xc
c000bd17:	eb 3f                	jmp    c000bd58 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bd19:	83 ec 08             	sub    esp,0x8
c000bd1c:	57                   	push   edi
c000bd1d:	ff 35 90 80 02 c0    	push   DWORD PTR ds:0xc0028090
c000bd23:	e8 be ff ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000bd28:	83 c4 10             	add    esp,0x10
c000bd2b:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd2d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd31:	f6 c4 04             	test   ah,0x4
c000bd34:	75 5f                	jne    c000bd95 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bd36:	80 fa 04             	cmp    dl,0x4
c000bd39:	74 78                	je     c000bdb3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bd3b:	80 fa 02             	cmp    dl,0x2
c000bd3e:	0f 84 88 00 00 00    	je     c000bdcc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bd44:	80 fa 03             	cmp    dl,0x3
c000bd47:	0f 84 ad 00 00 00    	je     c000bdfa <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bd4d:	fe ca                	dec    dl
c000bd4f:	0f 84 92 00 00 00    	je     c000bde7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd55:	43                   	inc    ebx
c000bd56:	31 f6                	xor    esi,esi
c000bd58:	53                   	push   ebx
c000bd59:	89 df                	mov    edi,ebx
c000bd5b:	e8 51 fc ff ff       	call   c000b9b1 <Virt::getPageState(unsigned long)>
c000bd60:	c1 e7 0c             	shl    edi,0xc
c000bd63:	59                   	pop    ecx
c000bd64:	84 c0                	test   al,al
c000bd66:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bd6a:	75 ad                	jne    c000bd19 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bd6c:	83 ec 0c             	sub    esp,0xc
c000bd6f:	68 2e 46 02 c0       	push   0xc002462e
c000bd74:	e8 8e 8c 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000bd79:	58                   	pop    eax
c000bd7a:	5a                   	pop    edx
c000bd7b:	57                   	push   edi
c000bd7c:	ff 35 90 80 02 c0    	push   DWORD PTR ds:0xc0028090
c000bd82:	e8 5f ff ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000bd87:	83 c4 10             	add    esp,0x10
c000bd8a:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd8c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd90:	f6 c4 04             	test   ah,0x4
c000bd93:	74 c0                	je     c000bd55 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd95:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bd99:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd9e:	83 ec 0c             	sub    esp,0xc
c000bda1:	50                   	push   eax
c000bda2:	e8 9c e2 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bda7:	83 c4 10             	add    esp,0x10
c000bdaa:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bdae:	80 fa 04             	cmp    dl,0x4
c000bdb1:	75 88                	jne    c000bd3b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bdb3:	89 f0                	mov    eax,esi
c000bdb5:	84 c0                	test   al,al
c000bdb7:	75 47                	jne    c000be00 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bdb9:	c7 44 24 20 8c 44 02 c0 	mov    DWORD PTR [esp+0x20],0xc002448c
c000bdc1:	83 c4 10             	add    esp,0x10
c000bdc4:	5b                   	pop    ebx
c000bdc5:	5e                   	pop    esi
c000bdc6:	5f                   	pop    edi
c000bdc7:	e9 3b 8c 00 00       	jmp    c0014a07 <Krnl::panic(char const*)>
c000bdcc:	89 f0                	mov    eax,esi
c000bdce:	84 c0                	test   al,al
c000bdd0:	75 15                	jne    c000bde7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bdd2:	83 ec 0c             	sub    esp,0xc
c000bdd5:	68 4a 46 02 c0       	push   0xc002464a
c000bdda:	e8 28 8c 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000bddf:	83 c4 10             	add    esp,0x10
c000bde2:	e9 6e ff ff ff       	jmp    c000bd55 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bde7:	83 ec 08             	sub    esp,0x8
c000bdea:	6a 00                	push   0x0
c000bdec:	53                   	push   ebx
c000bded:	e8 8a fb ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdf2:	83 c4 10             	add    esp,0x10
c000bdf5:	e9 5b ff ff ff       	jmp    c000bd55 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdfa:	89 f0                	mov    eax,esi
c000bdfc:	84 c0                	test   al,al
c000bdfe:	75 15                	jne    c000be15 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000be00:	83 ec 08             	sub    esp,0x8
c000be03:	6a 00                	push   0x0
c000be05:	53                   	push   ebx
c000be06:	e8 71 fb ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be0b:	83 c4 10             	add    esp,0x10
c000be0e:	83 c4 10             	add    esp,0x10
c000be11:	5b                   	pop    ebx
c000be12:	5e                   	pop    esi
c000be13:	5f                   	pop    edi
c000be14:	c3                   	ret    
c000be15:	c7 44 24 20 66 46 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024666
c000be1d:	83 c4 10             	add    esp,0x10
c000be20:	5b                   	pop    ebx
c000be21:	5e                   	pop    esi
c000be22:	5f                   	pop    edi
c000be23:	e9 df 8b 00 00       	jmp    c0014a07 <Krnl::panic(char const*)>

c000be28 <VAS::freeAllocatedPages(unsigned long)>:
c000be28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be30:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000be34:	74 09                	je     c000be3f <VAS::freeAllocatedPages(unsigned long)+0x17>
c000be36:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000be3a:	e9 c6 fe ff ff       	jmp    c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c000be3f:	c7 44 24 04 b0 44 02 c0 	mov    DWORD PTR [esp+0x4],0xc00244b0
c000be47:	e9 af 0e 00 00       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>

c000be4c <VAS::virtualToPhysical(unsigned long)>:
c000be4c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be50:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be54:	e8 8d fe ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000be59:	5a                   	pop    edx
c000be5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000be5c:	59                   	pop    ecx
c000be5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be62:	c3                   	ret    
c000be63:	90                   	nop

c000be64 <VAS::reflagRange(unsigned long, int, int, int)>:
c000be64:	55                   	push   ebp
c000be65:	57                   	push   edi
c000be66:	56                   	push   esi
c000be67:	53                   	push   ebx
c000be68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be6c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000be70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be74:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be78:	85 db                	test   ebx,ebx
c000be7a:	7e 22                	jle    c000be9e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000be7c:	c1 e3 0c             	shl    ebx,0xc
c000be7f:	01 f3                	add    ebx,esi
c000be81:	56                   	push   esi
c000be82:	81 c6 00 10 00 00    	add    esi,0x1000
c000be88:	55                   	push   ebp
c000be89:	e8 58 fe ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000be8e:	5a                   	pop    edx
c000be8f:	59                   	pop    ecx
c000be90:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be92:	21 f9                	and    ecx,edi
c000be94:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000be98:	39 f3                	cmp    ebx,esi
c000be9a:	89 08                	mov    DWORD PTR [eax],ecx
c000be9c:	75 e3                	jne    c000be81 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000be9e:	5b                   	pop    ebx
c000be9f:	5e                   	pop    esi
c000bea0:	5f                   	pop    edi
c000bea1:	5d                   	pop    ebp
c000bea2:	c3                   	ret    
c000bea3:	90                   	nop

c000bea4 <VAS::setToWriteCombining(unsigned long, int)>:
c000bea4:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000bea9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000beaf:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000beb6:	75 01                	jne    c000beb9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000beb8:	c3                   	ret    
c000beb9:	68 80 00 00 00       	push   0x80
c000bebe:	6a ff                	push   0xffffffff
c000bec0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000becc:	e8 93 ff ff ff       	call   c000be64 <VAS::reflagRange(unsigned long, int, int, int)>
c000bed1:	83 c4 14             	add    esp,0x14
c000bed4:	c3                   	ret    
c000bed5:	90                   	nop

c000bed6 <VAS::mapOtherVASIn(bool, VAS*)>:
c000bed6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bedb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bedf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bee6:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bee9:	19 c0                	sbb    eax,eax
c000beeb:	83 ca 03             	or     edx,0x3
c000beee:	83 e0 fc             	and    eax,0xfffffffc
c000bef1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bef8:	0f 20 d8             	mov    eax,cr3
c000befb:	0f 22 d8             	mov    cr3,eax
c000befe:	c3                   	ret    
c000beff:	90                   	nop

c000bf00 <VAS::~VAS()>:
c000bf00:	83 ec 2c             	sub    esp,0x2c
c000bf03:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf0b:	fa                   	cli    
c000bf0c:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000bf11:	40                   	inc    eax
c000bf12:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000bf17:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bf21:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bf27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bf2b:	6a 01                	push   0x1
c000bf2d:	50                   	push   eax
c000bf2e:	e8 a3 ff ff ff       	call   c000bed6 <VAS::mapOtherVASIn(bool, VAS*)>
c000bf33:	83 c4 0c             	add    esp,0xc
c000bf36:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf3e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bf46:	0f 8f d4 00 00 00    	jg     c000c020 <VAS::~VAS()+0x120>
c000bf4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf57:	c1 e2 02             	shl    edx,0x2
c000bf5a:	01 d0                	add    eax,edx
c000bf5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf66:	83 e0 01             	and    eax,0x1
c000bf69:	0f 84 a8 00 00 00    	je     c000c017 <VAS::~VAS()+0x117>
c000bf6f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bf77:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bf7f:	7f 72                	jg     c000bff3 <VAS::~VAS()+0xf3>
c000bf81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf85:	c1 e0 0a             	shl    eax,0xa
c000bf88:	89 c2                	mov    edx,eax
c000bf8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf8e:	01 d0                	add    eax,edx
c000bf90:	c1 e0 0c             	shl    eax,0xc
c000bf93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf97:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bfa1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bfa7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfab:	6a 01                	push   0x1
c000bfad:	50                   	push   eax
c000bfae:	e8 07 fd ff ff       	call   c000bcba <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bfb3:	83 c4 0c             	add    esp,0xc
c000bfb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bfbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bfc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfc8:	25 01 04 00 00       	and    eax,0x401
c000bfcd:	3d 01 04 00 00       	cmp    eax,0x401
c000bfd2:	75 19                	jne    c000bfed <VAS::~VAS()+0xed>
c000bfd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfd8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfdd:	83 ec 0c             	sub    esp,0xc
c000bfe0:	50                   	push   eax
c000bfe1:	e8 5d e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bfe6:	83 c4 10             	add    esp,0x10
c000bfe9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bfed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bff1:	eb 84                	jmp    c000bf77 <VAS::~VAS()+0x77>
c000bff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bff7:	25 00 04 00 00       	and    eax,0x400
c000bffc:	74 19                	je     c000c017 <VAS::~VAS()+0x117>
c000bffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c002:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c007:	83 ec 0c             	sub    esp,0xc
c000c00a:	50                   	push   eax
c000c00b:	e8 33 e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c010:	83 c4 10             	add    esp,0x10
c000c013:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c017:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c01b:	e9 1e ff ff ff       	jmp    c000bf3e <VAS::~VAS()+0x3e>
c000c020:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c024:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c027:	83 ec 0c             	sub    esp,0xc
c000c02a:	50                   	push   eax
c000c02b:	e8 d5 fc ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c000c030:	83 c4 10             	add    esp,0x10
c000c033:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c037:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c03a:	83 ec 0c             	sub    esp,0xc
c000c03d:	50                   	push   eax
c000c03e:	e8 00 e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c043:	83 c4 10             	add    esp,0x10
c000c046:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c04a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c04e:	c1 e0 02             	shl    eax,0x2
c000c051:	83 ec 08             	sub    esp,0x8
c000c054:	50                   	push   eax
c000c055:	68 d4 44 02 c0       	push   0xc00244d4
c000c05a:	e8 9c 0c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c05f:	83 c4 10             	add    esp,0x10
c000c062:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000c067:	48                   	dec    eax
c000c068:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000c06d:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000c072:	85 c0                	test   eax,eax
c000c074:	75 01                	jne    c000c077 <VAS::~VAS()+0x177>
c000c076:	fb                   	sti    
c000c077:	90                   	nop
c000c078:	83 c4 2c             	add    esp,0x2c
c000c07b:	c3                   	ret    

c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c07c:	55                   	push   ebp
c000c07d:	57                   	push   edi
c000c07e:	56                   	push   esi
c000c07f:	53                   	push   ebx
c000c080:	83 ec 1c             	sub    esp,0x1c
c000c083:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c087:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c08b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c091:	77 08                	ja     c000c09b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c093:	0f 20 d8             	mov    eax,cr3
c000c096:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c099:	75 47                	jne    c000c0e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c09b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c09f:	09 d8                	or     eax,ebx
c000c0a1:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0a6:	75 57                	jne    c000c0ff <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c0a8:	89 de                	mov    esi,ebx
c000c0aa:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c0ad:	c1 ee 16             	shr    esi,0x16
c000c0b0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c0b7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c0bb:	74 54                	je     c000c111 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c0bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0c1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c0c7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c0cb:	c1 e6 0c             	shl    esi,0xc
c000c0ce:	c1 eb 0a             	shr    ebx,0xa
c000c0d1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c0d7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c0da:	83 c4 1c             	add    esp,0x1c
c000c0dd:	5b                   	pop    ebx
c000c0de:	5e                   	pop    esi
c000c0df:	5f                   	pop    edi
c000c0e0:	5d                   	pop    ebp
c000c0e1:	c3                   	ret    
c000c0e2:	83 ec 0c             	sub    esp,0xc
c000c0e5:	68 f4 44 02 c0       	push   0xc00244f4
c000c0ea:	e8 0c 0c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c0ef:	83 c4 10             	add    esp,0x10
c000c0f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0f6:	09 d8                	or     eax,ebx
c000c0f8:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0fd:	74 a9                	je     c000c0a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c0ff:	83 ec 0c             	sub    esp,0xc
c000c102:	68 5c 45 02 c0       	push   0xc002455c
c000c107:	e8 fb 88 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000c10c:	83 c4 10             	add    esp,0x10
c000c10f:	eb 97                	jmp    c000c0a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c111:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c115:	e8 ac df ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c11a:	83 ec 0c             	sub    esp,0xc
c000c11d:	89 c5                	mov    ebp,eax
c000c11f:	8b 0d 90 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028090
c000c125:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c129:	6a 01                	push   0x1
c000c12b:	e8 a5 f8 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000c130:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c137:	6a 01                	push   0x1
c000c139:	50                   	push   eax
c000c13a:	55                   	push   ebp
c000c13b:	81 cd 07 04 00 00    	or     ebp,0x407
c000c141:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c145:	51                   	push   ecx
c000c146:	e8 27 02 00 00       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c14b:	83 c4 1c             	add    esp,0x1c
c000c14e:	68 00 10 00 00       	push   0x1000
c000c153:	6a 00                	push   0x0
c000c155:	50                   	push   eax
c000c156:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c15a:	e8 25 45 ff ff       	call   c0000684 <memset>
c000c15f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c163:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c166:	e8 9a fb ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c000c16b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c16f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c172:	83 c4 10             	add    esp,0x10
c000c175:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c178:	e9 40 ff ff ff       	jmp    c000c0bd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c17d:	90                   	nop

c000c17e <VAS::allocatePages(int, int)>:
c000c17e:	55                   	push   ebp
c000c17f:	57                   	push   edi
c000c180:	56                   	push   esi
c000c181:	53                   	push   ebx
c000c182:	83 ec 1c             	sub    esp,0x1c
c000c185:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c189:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000c18e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c194:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c19a:	83 e0 01             	and    eax,0x1
c000c19d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c1a1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c1a5:	0f 85 cc 00 00 00    	jne    c000c277 <VAS::allocatePages(int, int)+0xf9>
c000c1ab:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1b2:	85 c0                	test   eax,eax
c000c1b4:	0f 84 a1 00 00 00    	je     c000c25b <VAS::allocatePages(int, int)+0xdd>
c000c1ba:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c1be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1c2:	c1 e6 0c             	shl    esi,0xc
c000c1c5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c1c9:	85 c0                	test   eax,eax
c000c1cb:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c1ce:	7e 33                	jle    c000c203 <VAS::allocatePages(int, int)+0x85>
c000c1d0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c1d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1d8:	81 cd 00 04 00 00    	or     ebp,0x400
c000c1de:	e8 e3 de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c1e3:	55                   	push   ebp
c000c1e4:	53                   	push   ebx
c000c1e5:	50                   	push   eax
c000c1e6:	57                   	push   edi
c000c1e7:	e8 90 fe ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c1ec:	83 c4 10             	add    esp,0x10
c000c1ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1f4:	74 03                	je     c000c1f9 <VAS::allocatePages(int, int)+0x7b>
c000c1f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c1ff:	39 de                	cmp    esi,ebx
c000c201:	75 db                	jne    c000c1de <VAS::allocatePages(int, int)+0x60>
c000c203:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c208:	75 12                	jne    c000c21c <VAS::allocatePages(int, int)+0x9e>
c000c20a:	0f 20 d8             	mov    eax,cr3
c000c20d:	0f 22 d8             	mov    cr3,eax
c000c210:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c214:	83 c4 1c             	add    esp,0x1c
c000c217:	5b                   	pop    ebx
c000c218:	5e                   	pop    esi
c000c219:	5f                   	pop    edi
c000c21a:	5d                   	pop    ebp
c000c21b:	c3                   	ret    
c000c21c:	c1 ee 0a             	shr    esi,0xa
c000c21f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c223:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c229:	c1 eb 0a             	shr    ebx,0xa
c000c22c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c232:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c238:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c23e:	39 c3                	cmp    ebx,eax
c000c240:	77 ce                	ja     c000c210 <VAS::allocatePages(int, int)+0x92>
c000c242:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c245:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c24b:	39 d8                	cmp    eax,ebx
c000c24d:	73 f3                	jae    c000c242 <VAS::allocatePages(int, int)+0xc4>
c000c24f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c253:	83 c4 1c             	add    esp,0x1c
c000c256:	5b                   	pop    ebx
c000c257:	5e                   	pop    esi
c000c258:	5f                   	pop    edi
c000c259:	5d                   	pop    ebp
c000c25a:	c3                   	ret    
c000c25b:	83 ec 0c             	sub    esp,0xc
c000c25e:	68 80 45 02 c0       	push   0xc0024580
c000c263:	e8 9f 87 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000c268:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c26b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	e9 43 ff ff ff       	jmp    c000c1ba <VAS::allocatePages(int, int)+0x3c>
c000c277:	83 ec 0c             	sub    esp,0xc
c000c27a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c27e:	e8 52 f7 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000c283:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c287:	83 c4 10             	add    esp,0x10
c000c28a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c28f:	0f 87 9b 00 00 00    	ja     c000c330 <VAS::allocatePages(int, int)+0x1b2>
c000c295:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c299:	85 d2                	test   edx,edx
c000c29b:	7e 3c                	jle    c000c2d9 <VAS::allocatePages(int, int)+0x15b>
c000c29d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c2a1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c2a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c2a9:	c1 e5 0c             	shl    ebp,0xc
c000c2ac:	81 ce 00 04 00 00    	or     esi,0x400
c000c2b2:	01 dd                	add    ebp,ebx
c000c2b4:	e8 0d de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c2b9:	56                   	push   esi
c000c2ba:	53                   	push   ebx
c000c2bb:	50                   	push   eax
c000c2bc:	57                   	push   edi
c000c2bd:	e8 ba fd ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c2c2:	83 c4 10             	add    esp,0x10
c000c2c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2ca:	74 03                	je     c000c2cf <VAS::allocatePages(int, int)+0x151>
c000c2cc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c2cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c2d5:	39 dd                	cmp    ebp,ebx
c000c2d7:	75 db                	jne    c000c2b4 <VAS::allocatePages(int, int)+0x136>
c000c2d9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2de:	0f 84 26 ff ff ff    	je     c000c20a <VAS::allocatePages(int, int)+0x8c>
c000c2e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c2e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2ec:	89 d3                	mov    ebx,edx
c000c2ee:	c1 e0 0c             	shl    eax,0xc
c000c2f1:	c1 eb 0a             	shr    ebx,0xa
c000c2f4:	01 d0                	add    eax,edx
c000c2f6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c2fc:	c1 e8 0a             	shr    eax,0xa
c000c2ff:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c305:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c30a:	2d 00 00 40 00       	sub    eax,0x400000
c000c30f:	39 c3                	cmp    ebx,eax
c000c311:	0f 87 f9 fe ff ff    	ja     c000c210 <VAS::allocatePages(int, int)+0x92>
c000c317:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c31a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c320:	39 d8                	cmp    eax,ebx
c000c322:	73 f3                	jae    c000c317 <VAS::allocatePages(int, int)+0x199>
c000c324:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c328:	83 c4 1c             	add    esp,0x1c
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    
c000c330:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000c335:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c33b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c342:	0f 84 4d ff ff ff    	je     c000c295 <VAS::allocatePages(int, int)+0x117>
c000c348:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c350:	e9 40 ff ff ff       	jmp    c000c295 <VAS::allocatePages(int, int)+0x117>
c000c355:	90                   	nop

c000c356 <VAS::setCPUSpecific(unsigned long)>:
c000c356:	83 ec 0c             	sub    esp,0xc
c000c359:	6a 05                	push   0x5
c000c35b:	68 00 00 40 c2       	push   0xc2400000
c000c360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	e8 0f fd ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c36d:	83 c4 1c             	add    esp,0x1c
c000c370:	c3                   	ret    
c000c371:	90                   	nop

c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c372:	55                   	push   ebp
c000c373:	57                   	push   edi
c000c374:	56                   	push   esi
c000c375:	53                   	push   ebx
c000c376:	83 ec 1c             	sub    esp,0x1c
c000c379:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000c37e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c382:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c388:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c38c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c392:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c396:	83 e0 01             	and    eax,0x1
c000c399:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c39d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3a1:	85 c0                	test   eax,eax
c000c3a3:	7e 39                	jle    c000c3de <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c3a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3a9:	89 f3                	mov    ebx,esi
c000c3ab:	c1 e0 0c             	shl    eax,0xc
c000c3ae:	01 f0                	add    eax,esi
c000c3b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c3b4:	55                   	push   ebp
c000c3b5:	53                   	push   ebx
c000c3b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3ba:	29 f0                	sub    eax,esi
c000c3bc:	01 d8                	add    eax,ebx
c000c3be:	50                   	push   eax
c000c3bf:	57                   	push   edi
c000c3c0:	e8 b7 fc ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c3c5:	83 c4 10             	add    esp,0x10
c000c3c8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3cd:	74 03                	je     c000c3d2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c3cf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c3d2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c3d8:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c3dc:	75 d6                	jne    c000c3b4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c3de:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3e3:	75 10                	jne    c000c3f5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c3e5:	0f 20 d8             	mov    eax,cr3
c000c3e8:	0f 22 d8             	mov    cr3,eax
c000c3eb:	83 c4 1c             	add    esp,0x1c
c000c3ee:	89 f0                	mov    eax,esi
c000c3f0:	5b                   	pop    ebx
c000c3f1:	5e                   	pop    esi
c000c3f2:	5f                   	pop    edi
c000c3f3:	5d                   	pop    ebp
c000c3f4:	c3                   	ret    
c000c3f5:	89 f3                	mov    ebx,esi
c000c3f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3fb:	c1 eb 0a             	shr    ebx,0xa
c000c3fe:	c1 e0 0c             	shl    eax,0xc
c000c401:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c407:	01 f0                	add    eax,esi
c000c409:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c40f:	c1 e8 0a             	shr    eax,0xa
c000c412:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c417:	2d 00 00 40 00       	sub    eax,0x400000
c000c41c:	39 c3                	cmp    ebx,eax
c000c41e:	77 cb                	ja     c000c3eb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c420:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c423:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c429:	39 d8                	cmp    eax,ebx
c000c42b:	73 f3                	jae    c000c420 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c42d:	83 c4 1c             	add    esp,0x1c
c000c430:	89 f0                	mov    eax,esi
c000c432:	5b                   	pop    ebx
c000c433:	5e                   	pop    esi
c000c434:	5f                   	pop    edi
c000c435:	5d                   	pop    ebp
c000c436:	c3                   	ret    
c000c437:	90                   	nop

c000c438 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c438:	55                   	push   ebp
c000c439:	57                   	push   edi
c000c43a:	56                   	push   esi
c000c43b:	53                   	push   ebx
c000c43c:	83 ec 1c             	sub    esp,0x1c
c000c43f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c443:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c447:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c44b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c44f:	a9 ff 0f 00 00       	test   eax,0xfff
c000c454:	75 4a                	jne    c000c4a0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c456:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c45a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c45d:	c1 eb 16             	shr    ebx,0x16
c000c460:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c467:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c46b:	74 4d                	je     c000c4ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c46d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c471:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c475:	c1 e8 0a             	shr    eax,0xa
c000c478:	80 fa 01             	cmp    dl,0x1
c000c47b:	19 d2                	sbb    edx,edx
c000c47d:	c1 e3 0c             	shl    ebx,0xc
c000c480:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c484:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c48a:	25 fc 0f 00 00       	and    eax,0xffc
c000c48f:	01 d8                	add    eax,ebx
c000c491:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c498:	83 c4 1c             	add    esp,0x1c
c000c49b:	5b                   	pop    ebx
c000c49c:	5e                   	pop    esi
c000c49d:	5f                   	pop    edi
c000c49e:	5d                   	pop    ebp
c000c49f:	c3                   	ret    
c000c4a0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c4a4:	83 ec 0c             	sub    esp,0xc
c000c4a7:	68 ac 45 02 c0       	push   0xc00245ac
c000c4ac:	e8 56 85 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000c4b1:	83 c4 10             	add    esp,0x10
c000c4b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4b8:	eb 9c                	jmp    c000c456 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c4ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4be:	e8 03 dc ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c4c3:	83 ec 0c             	sub    esp,0xc
c000c4c6:	89 c5                	mov    ebp,eax
c000c4c8:	8b 0d 90 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028090
c000c4ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4d2:	6a 01                	push   0x1
c000c4d4:	e8 fc f4 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000c4d9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c4e0:	6a 01                	push   0x1
c000c4e2:	50                   	push   eax
c000c4e3:	55                   	push   ebp
c000c4e4:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4ee:	51                   	push   ecx
c000c4ef:	e8 7e fe ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4f4:	83 c4 1c             	add    esp,0x1c
c000c4f7:	68 00 10 00 00       	push   0x1000
c000c4fc:	6a 00                	push   0x0
c000c4fe:	50                   	push   eax
c000c4ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c503:	e8 7c 41 ff ff       	call   c0000684 <memset>
c000c508:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c50c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c50f:	e8 f1 f7 ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c000c514:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c517:	83 c4 10             	add    esp,0x10
c000c51a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c51d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c521:	e9 47 ff ff ff       	jmp    c000c46d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c526 <VAS::VAS(bool)>:
c000c526:	53                   	push   ebx
c000c527:	83 ec 28             	sub    esp,0x28
c000c52a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c52e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c536:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c53d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c541:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c548:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c54c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c550:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c553:	e8 6e db ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c558:	89 c2                	mov    edx,eax
c000c55a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c55e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c561:	8b 1d 90 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028090
c000c567:	83 ec 0c             	sub    esp,0xc
c000c56a:	6a 01                	push   0x1
c000c56c:	e8 64 f4 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000c571:	83 c4 10             	add    esp,0x10
c000c574:	89 c2                	mov    edx,eax
c000c576:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c57a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c57d:	83 ec 0c             	sub    esp,0xc
c000c580:	6a 03                	push   0x3
c000c582:	6a 01                	push   0x1
c000c584:	52                   	push   edx
c000c585:	50                   	push   eax
c000c586:	53                   	push   ebx
c000c587:	e8 e6 fd ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c58c:	83 c4 20             	add    esp,0x20
c000c58f:	89 c2                	mov    edx,eax
c000c591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c595:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c598:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c5a0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c5a8:	7f 1c                	jg     c000c5c6 <VAS::VAS(bool)+0xa0>
c000c5aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5ae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c5b5:	c1 e2 02             	shl    edx,0x2
c000c5b8:	01 d0                	add    eax,edx
c000c5ba:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c5c0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c5c4:	eb da                	jmp    c000c5a0 <VAS::VAS(bool)+0x7a>
c000c5c6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c5ce:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c5d6:	7f 7a                	jg     c000c652 <VAS::VAS(bool)+0x12c>
c000c5d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5dc:	2d 00 02 00 00       	sub    eax,0x200
c000c5e1:	c1 e0 0c             	shl    eax,0xc
c000c5e4:	83 c8 03             	or     eax,0x3
c000c5e7:	89 c2                	mov    edx,eax
c000c5e9:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000c5ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5f4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c5fa:	83 e0 10             	and    eax,0x10
c000c5fd:	84 c0                	test   al,al
c000c5ff:	74 07                	je     c000c608 <VAS::VAS(bool)+0xe2>
c000c601:	b8 00 01 00 00       	mov    eax,0x100
c000c606:	eb 05                	jmp    c000c60d <VAS::VAS(bool)+0xe7>
c000c608:	b8 00 00 00 00       	mov    eax,0x0
c000c60d:	09 d0                	or     eax,edx
c000c60f:	89 c1                	mov    ecx,eax
c000c611:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c615:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c618:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c61c:	c1 e2 02             	shl    edx,0x2
c000c61f:	01 d0                	add    eax,edx
c000c621:	89 ca                	mov    edx,ecx
c000c623:	89 10                	mov    DWORD PTR [eax],edx
c000c625:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c629:	2d 40 03 00 00       	sub    eax,0x340
c000c62e:	83 f8 7f             	cmp    eax,0x7f
c000c631:	77 16                	ja     c000c649 <VAS::VAS(bool)+0x123>
c000c633:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c637:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c63a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c63e:	c1 e2 02             	shl    edx,0x2
c000c641:	01 d0                	add    eax,edx
c000c643:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c649:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c64d:	e9 7c ff ff ff       	jmp    c000c5ce <VAS::VAS(bool)+0xa8>
c000c652:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000c657:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c65d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c663:	83 e0 10             	and    eax,0x10
c000c666:	84 c0                	test   al,al
c000c668:	74 07                	je     c000c671 <VAS::VAS(bool)+0x14b>
c000c66a:	b8 03 41 00 00       	mov    eax,0x4103
c000c66f:	eb 05                	jmp    c000c676 <VAS::VAS(bool)+0x150>
c000c671:	b8 03 40 00 00       	mov    eax,0x4003
c000c676:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c67a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c67d:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c683:	89 02                	mov    DWORD PTR [edx],eax
c000c685:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000c68a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c690:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c696:	83 ec 08             	sub    esp,0x8
c000c699:	50                   	push   eax
c000c69a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c69e:	e8 b3 fc ff ff       	call   c000c356 <VAS::setCPUSpecific(unsigned long)>
c000c6a3:	83 c4 10             	add    esp,0x10
c000c6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6aa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c6ad:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000c6b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6b8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c6be:	83 e0 10             	and    eax,0x10
c000c6c1:	84 c0                	test   al,al
c000c6c3:	74 07                	je     c000c6cc <VAS::VAS(bool)+0x1a6>
c000c6c5:	b8 00 01 00 00       	mov    eax,0x100
c000c6ca:	eb 05                	jmp    c000c6d1 <VAS::VAS(bool)+0x1ab>
c000c6cc:	b8 00 00 00 00       	mov    eax,0x0
c000c6d1:	09 c2                	or     edx,eax
c000c6d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c6da:	05 fc 0f 00 00       	add    eax,0xffc
c000c6df:	83 ca 03             	or     edx,0x3
c000c6e2:	89 10                	mov    DWORD PTR [eax],edx
c000c6e4:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000c6e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6ef:	83 ec 0c             	sub    esp,0xc
c000c6f2:	50                   	push   eax
c000c6f3:	e8 76 1e 00 00       	call   c000e56e <Device::getName()>
c000c6f8:	83 c4 10             	add    esp,0x10
c000c6fb:	83 ec 08             	sub    esp,0x8
c000c6fe:	68 80 46 02 c0       	push   0xc0024680
c000c703:	50                   	push   eax
c000c704:	e8 c3 40 ff ff       	call   c00007cc <strcmp>
c000c709:	83 c4 10             	add    esp,0x10
c000c70c:	85 c0                	test   eax,eax
c000c70e:	0f 94 c0             	sete   al
c000c711:	84 c0                	test   al,al
c000c713:	0f 84 87 00 00 00    	je     c000c7a0 <VAS::VAS(bool)+0x27a>
c000c719:	fa                   	cli    
c000c71a:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000c71f:	40                   	inc    eax
c000c720:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000c725:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000c72a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c730:	05 7c 09 00 00       	add    eax,0x97c
c000c735:	83 ec 0c             	sub    esp,0xc
c000c738:	50                   	push   eax
c000c739:	e8 c0 cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c73e:	83 c4 10             	add    esp,0x10
c000c741:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c746:	89 c3                	mov    ebx,eax
c000c748:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000c74d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c753:	05 7c 09 00 00       	add    eax,0x97c
c000c758:	83 ec 0c             	sub    esp,0xc
c000c75b:	50                   	push   eax
c000c75c:	e8 9d cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	83 ec 08             	sub    esp,0x8
c000c767:	50                   	push   eax
c000c768:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c76c:	e8 75 f5 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000c771:	83 c4 10             	add    esp,0x10
c000c774:	8b 00                	mov    eax,DWORD PTR [eax]
c000c776:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c77b:	6a 11                	push   0x11
c000c77d:	53                   	push   ebx
c000c77e:	50                   	push   eax
c000c77f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c783:	e8 f4 f8 ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c788:	83 c4 10             	add    esp,0x10
c000c78b:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000c790:	48                   	dec    eax
c000c791:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000c796:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000c79b:	85 c0                	test   eax,eax
c000c79d:	75 01                	jne    c000c7a0 <VAS::VAS(bool)+0x27a>
c000c79f:	fb                   	sti    
c000c7a0:	90                   	nop
c000c7a1:	83 c4 28             	add    esp,0x28
c000c7a4:	5b                   	pop    ebx
c000c7a5:	c3                   	ret    

c000c7a6 <VAS::evict(unsigned long)>:
c000c7a6:	55                   	push   ebp
c000c7a7:	57                   	push   edi
c000c7a8:	56                   	push   esi
c000c7a9:	53                   	push   ebx
c000c7aa:	83 ec 1c             	sub    esp,0x1c
c000c7ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7b1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c7b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7b9:	e8 58 f3 ff ff       	call   c000bb16 <Virt::allocateSwapfilePage()>
c000c7be:	89 c7                	mov    edi,eax
c000c7c0:	a1 ac 73 02 c0       	mov    eax,ds:0xc00273ac
c000c7c5:	85 c0                	test   eax,eax
c000c7c7:	7e 3d                	jle    c000c806 <VAS::evict(unsigned long)+0x60>
c000c7c9:	89 ee                	mov    esi,ebp
c000c7cb:	31 db                	xor    ebx,ebx
c000c7cd:	83 ec 0c             	sub    esp,0xc
c000c7d0:	57                   	push   edi
c000c7d1:	e8 2e f3 ff ff       	call   c000bb04 <Virt::swapIDToSector(unsigned long)>
c000c7d6:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7d9:	01 d8                	add    eax,ebx
c000c7db:	6a 01                	push   0x1
c000c7dd:	31 d2                	xor    edx,edx
c000c7df:	43                   	inc    ebx
c000c7e0:	52                   	push   edx
c000c7e1:	81 c6 00 02 00 00    	add    esi,0x200
c000c7e7:	50                   	push   eax
c000c7e8:	0f be 05 b8 73 02 c0 	movsx  eax,BYTE PTR ds:0xc00273b8
c000c7ef:	ff 34 85 1c 84 02 c0 	push   DWORD PTR [eax*4-0x3ffd7be4]
c000c7f6:	e8 f9 3d 00 00       	call   c00105f4 <LogicalDisk::write(unsigned long long, int, void*)>
c000c7fb:	83 c4 20             	add    esp,0x20
c000c7fe:	39 1d ac 73 02 c0    	cmp    DWORD PTR ds:0xc00273ac,ebx
c000c804:	7f c7                	jg     c000c7cd <VAS::evict(unsigned long)+0x27>
c000c806:	83 ec 08             	sub    esp,0x8
c000c809:	c1 e7 0b             	shl    edi,0xb
c000c80c:	55                   	push   ebp
c000c80d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c811:	e8 d0 f4 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000c816:	8b 10                	mov    edx,DWORD PTR [eax]
c000c818:	89 d3                	mov    ebx,edx
c000c81a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c820:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c826:	09 d7                	or     edi,edx
c000c828:	89 38                	mov    DWORD PTR [eax],edi
c000c82a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c82d:	ff 05 88 80 02 c0    	inc    DWORD PTR ds:0xc0028088
c000c833:	e8 0b d8 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c838:	0f 20 d8             	mov    eax,cr3
c000c83b:	0f 22 d8             	mov    cr3,eax
c000c83e:	ff 35 88 80 02 c0    	push   DWORD PTR ds:0xc0028088
c000c844:	55                   	push   ebp
c000c845:	53                   	push   ebx
c000c846:	68 d0 45 02 c0       	push   0xc00245d0
c000c84b:	e8 ab 04 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c850:	a1 84 80 02 c0       	mov    eax,ds:0xc0028084
c000c855:	c7 44 24 50 8e 46 02 c0 	mov    DWORD PTR [esp+0x50],0xc002468e
c000c85d:	8d 50 01             	lea    edx,[eax+0x1]
c000c860:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c864:	89 15 84 80 02 c0    	mov    DWORD PTR ds:0xc0028084,edx
c000c86a:	83 c4 3c             	add    esp,0x3c
c000c86d:	5b                   	pop    ebx
c000c86e:	5e                   	pop    esi
c000c86f:	5f                   	pop    edi
c000c870:	5d                   	pop    ebp
c000c871:	e9 85 04 00 00       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>

c000c876 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c876:	55                   	push   ebp
c000c877:	57                   	push   edi
c000c878:	56                   	push   esi
c000c879:	53                   	push   ebx
c000c87a:	83 ec 14             	sub    esp,0x14
c000c87d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c881:	68 9f 46 02 c0       	push   0xc002469f
c000c886:	e8 70 04 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c88b:	83 c4 10             	add    esp,0x10
c000c88e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c892:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c898:	74 20                	je     c000c8ba <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c89a:	83 ec 08             	sub    esp,0x8
c000c89d:	55                   	push   ebp
c000c89e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8a2:	e8 3f f4 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000c8a7:	83 c4 10             	add    esp,0x10
c000c8aa:	89 c3                	mov    ebx,eax
c000c8ac:	85 c0                	test   eax,eax
c000c8ae:	74 0a                	je     c000c8ba <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c8b0:	8b 38                	mov    edi,DWORD PTR [eax]
c000c8b2:	f7 c7 01 00 00 00    	test   edi,0x1
c000c8b8:	74 0a                	je     c000c8c4 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c8ba:	31 c0                	xor    eax,eax
c000c8bc:	83 c4 0c             	add    esp,0xc
c000c8bf:	5b                   	pop    ebx
c000c8c0:	5e                   	pop    esi
c000c8c1:	5f                   	pop    edi
c000c8c2:	5d                   	pop    ebp
c000c8c3:	c3                   	ret    
c000c8c4:	e8 fd d7 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c8c9:	c1 ef 0b             	shr    edi,0xb
c000c8cc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c8ce:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c8d4:	09 c2                	or     edx,eax
c000c8d6:	81 ca 01 08 00 00    	or     edx,0x801
c000c8dc:	89 13                	mov    DWORD PTR [ebx],edx
c000c8de:	8b 0d ac 73 02 c0    	mov    ecx,DWORD PTR ds:0xc00273ac
c000c8e4:	85 c9                	test   ecx,ecx
c000c8e6:	7e 3d                	jle    c000c925 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c8e8:	89 ee                	mov    esi,ebp
c000c8ea:	31 db                	xor    ebx,ebx
c000c8ec:	83 ec 0c             	sub    esp,0xc
c000c8ef:	57                   	push   edi
c000c8f0:	e8 0f f2 ff ff       	call   c000bb04 <Virt::swapIDToSector(unsigned long)>
c000c8f5:	89 34 24             	mov    DWORD PTR [esp],esi
c000c8f8:	01 d8                	add    eax,ebx
c000c8fa:	6a 01                	push   0x1
c000c8fc:	31 d2                	xor    edx,edx
c000c8fe:	43                   	inc    ebx
c000c8ff:	52                   	push   edx
c000c900:	81 c6 00 02 00 00    	add    esi,0x200
c000c906:	50                   	push   eax
c000c907:	0f be 05 b8 73 02 c0 	movsx  eax,BYTE PTR ds:0xc00273b8
c000c90e:	ff 34 85 1c 84 02 c0 	push   DWORD PTR [eax*4-0x3ffd7be4]
c000c915:	e8 6e 3c 00 00       	call   c0010588 <LogicalDisk::read(unsigned long long, int, void*)>
c000c91a:	83 c4 20             	add    esp,0x20
c000c91d:	39 1d ac 73 02 c0    	cmp    DWORD PTR ds:0xc00273ac,ebx
c000c923:	7f c7                	jg     c000c8ec <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c925:	a1 88 80 02 c0       	mov    eax,ds:0xc0028088
c000c92a:	48                   	dec    eax
c000c92b:	52                   	push   edx
c000c92c:	a3 88 80 02 c0       	mov    ds:0xc0028088,eax
c000c931:	50                   	push   eax
c000c932:	55                   	push   ebp
c000c933:	68 b2 46 02 c0       	push   0xc00246b2
c000c938:	e8 be 03 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c93d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c940:	e8 a1 f1 ff ff       	call   c000bae6 <Virt::freeSwapfilePage(unsigned long)>
c000c945:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000c94a:	83 c4 10             	add    esp,0x10
c000c94d:	48                   	dec    eax
c000c94e:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000c953:	85 c0                	test   eax,eax
c000c955:	74 1d                	je     c000c974 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c957:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c95b:	25 ff 0f 00 00       	and    eax,0xfff
c000c960:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c965:	77 10                	ja     c000c977 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c967:	0f 20 d8             	mov    eax,cr3
c000c96a:	0f 22 d8             	mov    cr3,eax
c000c96d:	b0 01                	mov    al,0x1
c000c96f:	e9 48 ff ff ff       	jmp    c000c8bc <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c974:	fb                   	sti    
c000c975:	eb e0                	jmp    c000c957 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c977:	83 ec 0c             	sub    esp,0xc
c000c97a:	68 c7 46 02 c0       	push   0xc00246c7
c000c97f:	e8 77 03 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	eb de                	jmp    c000c967 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c989:	90                   	nop

c000c98a <VAS::scanForEviction()>:
c000c98a:	57                   	push   edi
c000c98b:	31 ff                	xor    edi,edi
c000c98d:	56                   	push   esi
c000c98e:	53                   	push   ebx
c000c98f:	83 ec 10             	sub    esp,0x10
c000c992:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c996:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c999:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c99f:	75 0e                	jne    c000c9af <VAS::scanForEviction()+0x25>
c000c9a1:	89 da                	mov    edx,ebx
c000c9a3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9a6:	c1 ea 16             	shr    edx,0x16
c000c9a9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9ad:	74 4e                	je     c000c9fd <VAS::scanForEviction()+0x73>
c000c9af:	53                   	push   ebx
c000c9b0:	56                   	push   esi
c000c9b1:	e8 30 f3 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000c9b6:	5a                   	pop    edx
c000c9b7:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9b9:	59                   	pop    ecx
c000c9ba:	89 d1                	mov    ecx,edx
c000c9bc:	81 e1 01 08 00 00    	and    ecx,0x801
c000c9c2:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c9c8:	74 3e                	je     c000ca08 <VAS::scanForEviction()+0x7e>
c000c9ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c9d0:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c9d6:	76 2b                	jbe    c000ca03 <VAS::scanForEviction()+0x79>
c000c9d8:	47                   	inc    edi
c000c9d9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c9e0:	83 ff 03             	cmp    edi,0x3
c000c9e3:	74 32                	je     c000ca17 <VAS::scanForEviction()+0x8d>
c000c9e5:	31 db                	xor    ebx,ebx
c000c9e7:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9ed:	75 c0                	jne    c000c9af <VAS::scanForEviction()+0x25>
c000c9ef:	89 da                	mov    edx,ebx
c000c9f1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9f4:	c1 ea 16             	shr    edx,0x16
c000c9f7:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9fb:	75 b2                	jne    c000c9af <VAS::scanForEviction()+0x25>
c000c9fd:	81 c3 00 00 40 00    	add    ebx,0x400000
c000ca03:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ca06:	eb 91                	jmp    c000c999 <VAS::scanForEviction()+0xf>
c000ca08:	f6 c2 20             	test   dl,0x20
c000ca0b:	74 13                	je     c000ca20 <VAS::scanForEviction()+0x96>
c000ca0d:	83 e2 df             	and    edx,0xffffffdf
c000ca10:	89 10                	mov    DWORD PTR [eax],edx
c000ca12:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ca15:	eb b3                	jmp    c000c9ca <VAS::scanForEviction()+0x40>
c000ca17:	83 c4 10             	add    esp,0x10
c000ca1a:	31 c0                	xor    eax,eax
c000ca1c:	5b                   	pop    ebx
c000ca1d:	5e                   	pop    esi
c000ca1e:	5f                   	pop    edi
c000ca1f:	c3                   	ret    
c000ca20:	83 ec 08             	sub    esp,0x8
c000ca23:	89 d0                	mov    eax,edx
c000ca25:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ca2e:	53                   	push   ebx
c000ca2f:	68 d7 46 02 c0       	push   0xc00246d7
c000ca34:	e8 c2 02 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ca39:	58                   	pop    eax
c000ca3a:	5a                   	pop    edx
c000ca3b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca3e:	56                   	push   esi
c000ca3f:	e8 62 fd ff ff       	call   c000c7a6 <VAS::evict(unsigned long)>
c000ca44:	59                   	pop    ecx
c000ca45:	5b                   	pop    ebx
c000ca46:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca49:	68 eb 46 02 c0       	push   0xc00246eb
c000ca4e:	e8 a8 02 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ca53:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ca5a:	83 c4 10             	add    esp,0x10
c000ca5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca61:	83 c4 10             	add    esp,0x10
c000ca64:	5b                   	pop    ebx
c000ca65:	5e                   	pop    esi
c000ca66:	5f                   	pop    edi
c000ca67:	c3                   	ret    

c000ca68 <mapVASFirstTime>:
c000ca68:	55                   	push   ebp
c000ca69:	57                   	push   edi
c000ca6a:	56                   	push   esi
c000ca6b:	53                   	push   ebx
c000ca6c:	83 ec 0c             	sub    esp,0xc
c000ca6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ca74:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ca77:	4a                   	dec    edx
c000ca78:	0f 84 fe 00 00 00    	je     c000cb7c <mapVASFirstTime+0x114>
c000ca7e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ca81:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ca84:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ca89:	c1 e5 15             	shl    ebp,0x15
c000ca8c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ca91:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ca97:	29 eb                	sub    ebx,ebp
c000ca99:	29 ef                	sub    edi,ebp
c000ca9b:	83 ec 08             	sub    esp,0x8
c000ca9e:	53                   	push   ebx
c000ca9f:	68 17 47 02 c0       	push   0xc0024717
c000caa4:	e8 52 02 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000caa9:	e8 18 d6 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000caae:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cab5:	6a 01                	push   0x1
c000cab7:	53                   	push   ebx
c000cab8:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cabe:	50                   	push   eax
c000cabf:	56                   	push   esi
c000cac0:	e8 ad f8 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cac5:	83 c4 20             	add    esp,0x20
c000cac8:	39 fb                	cmp    ebx,edi
c000caca:	75 cf                	jne    c000ca9b <mapVASFirstTime+0x33>
c000cacc:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cad1:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cad6:	29 eb                	sub    ebx,ebp
c000cad8:	29 ef                	sub    edi,ebp
c000cada:	83 ec 08             	sub    esp,0x8
c000cadd:	53                   	push   ebx
c000cade:	68 33 47 02 c0       	push   0xc0024733
c000cae3:	e8 13 02 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cae8:	58                   	pop    eax
c000cae9:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000caed:	5a                   	pop    edx
c000caee:	19 c0                	sbb    eax,eax
c000caf0:	83 e0 04             	and    eax,0x4
c000caf3:	05 03 04 00 00       	add    eax,0x403
c000caf8:	50                   	push   eax
c000caf9:	68 47 47 02 c0       	push   0xc0024747
c000cafe:	e8 f8 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb03:	e8 be d5 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000cb08:	59                   	pop    ecx
c000cb09:	89 c5                	mov    ebp,eax
c000cb0b:	58                   	pop    eax
c000cb0c:	55                   	push   ebp
c000cb0d:	68 55 47 02 c0       	push   0xc0024755
c000cb12:	e8 e4 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb17:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cb1b:	19 d2                	sbb    edx,edx
c000cb1d:	83 e2 04             	and    edx,0x4
c000cb20:	81 c2 03 04 00 00    	add    edx,0x403
c000cb26:	89 14 24             	mov    DWORD PTR [esp],edx
c000cb29:	6a 01                	push   0x1
c000cb2b:	53                   	push   ebx
c000cb2c:	55                   	push   ebp
c000cb2d:	56                   	push   esi
c000cb2e:	e8 3f f8 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cb33:	83 c4 18             	add    esp,0x18
c000cb36:	53                   	push   ebx
c000cb37:	56                   	push   esi
c000cb38:	e8 a9 f1 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000cb3d:	5a                   	pop    edx
c000cb3e:	59                   	pop    ecx
c000cb3f:	ff 30                	push   DWORD PTR [eax]
c000cb41:	68 71 47 02 c0       	push   0xc0024771
c000cb46:	e8 b0 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb4b:	0f 20 d8             	mov    eax,cr3
c000cb4e:	83 c4 0c             	add    esp,0xc
c000cb51:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cb57:	56                   	push   esi
c000cb58:	50                   	push   eax
c000cb59:	68 7c 47 02 c0       	push   0xc002477c
c000cb5e:	e8 98 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb63:	83 c4 10             	add    esp,0x10
c000cb66:	39 df                	cmp    edi,ebx
c000cb68:	0f 85 6c ff ff ff    	jne    c000cada <mapVASFirstTime+0x72>
c000cb6e:	0f 20 d8             	mov    eax,cr3
c000cb71:	0f 22 d8             	mov    cr3,eax
c000cb74:	83 c4 0c             	add    esp,0xc
c000cb77:	5b                   	pop    ebx
c000cb78:	5e                   	pop    esi
c000cb79:	5f                   	pop    edi
c000cb7a:	5d                   	pop    ebp
c000cb7b:	c3                   	ret    
c000cb7c:	83 ec 0c             	sub    esp,0xc
c000cb7f:	68 fe 46 02 c0       	push   0xc00246fe
c000cb84:	e8 72 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb89:	83 c4 10             	add    esp,0x10
c000cb8c:	83 c4 0c             	add    esp,0xc
c000cb8f:	5b                   	pop    ebx
c000cb90:	5e                   	pop    esi
c000cb91:	5f                   	pop    edi
c000cb92:	5d                   	pop    ebp
c000cb93:	c3                   	ret    

c000cb94 <__cxa_atexit>:
c000cb94:	31 c0                	xor    eax,eax
c000cb96:	c3                   	ret    

c000cb97 <__cxa_finalize>:
c000cb97:	c3                   	ret    

c000cb98 <__stack_chk_fail>:
c000cb98:	55                   	push   ebp
c000cb99:	89 e5                	mov    ebp,esp
c000cb9b:	83 ec 14             	sub    esp,0x14
c000cb9e:	68 94 47 02 c0       	push   0xc0024794
c000cba3:	e8 53 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cba8:	58                   	pop    eax
c000cba9:	5a                   	pop    edx
c000cbaa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbad:	68 e4 47 02 c0       	push   0xc00247e4
c000cbb2:	e8 44 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cbb7:	59                   	pop    ecx
c000cbb8:	58                   	pop    eax
c000cbb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbbc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbbf:	68 e4 47 02 c0       	push   0xc00247e4
c000cbc4:	e8 32 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cbc9:	5a                   	pop    edx
c000cbca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbcd:	59                   	pop    ecx
c000cbce:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbd3:	68 e4 47 02 c0       	push   0xc00247e4
c000cbd8:	e8 1e 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cbdd:	5a                   	pop    edx
c000cbde:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe1:	59                   	pop    ecx
c000cbe2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbe4:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbe6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbe9:	68 e4 47 02 c0       	push   0xc00247e4
c000cbee:	e8 08 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cbf3:	c7 04 24 ec 47 02 c0 	mov    DWORD PTR [esp],0xc00247ec
c000cbfa:	e8 08 7e 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000cbff:	83 c4 10             	add    esp,0x10
c000cc02:	c9                   	leave  
c000cc03:	c3                   	ret    

c000cc04 <__cxa_pure_virtual>:
c000cc04:	83 ec 18             	sub    esp,0x18
c000cc07:	68 04 48 02 c0       	push   0xc0024804
c000cc0c:	e8 f6 7d 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000cc11:	83 c4 1c             	add    esp,0x1c
c000cc14:	c3                   	ret    

c000cc15 <operator new[](unsigned long)>:
c000cc15:	e9 f5 cd ff ff       	jmp    c0009a0f <malloc>

c000cc1a <operator delete(void*, unsigned long)>:
c000cc1a:	e9 10 ce ff ff       	jmp    c0009a2f <rfree>

c000cc1f <operator delete[](void*)>:
c000cc1f:	e9 0b ce ff ff       	jmp    c0009a2f <rfree>

c000cc24 <operator delete[](void*, unsigned long)>:
c000cc24:	e9 06 ce ff ff       	jmp    c0009a2f <rfree>

c000cc29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cc29:	55                   	push   ebp
c000cc2a:	b9 11 00 00 00       	mov    ecx,0x11
c000cc2f:	57                   	push   edi
c000cc30:	56                   	push   esi
c000cc31:	be ea 42 02 c0       	mov    esi,0xc00242ea
c000cc36:	53                   	push   ebx
c000cc37:	83 ec 20             	sub    esp,0x20
c000cc3a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc3e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cc42:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cc46:	fc                   	cld    
c000cc47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc49:	89 ee                	mov    esi,ebp
c000cc4b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc4f:	eb 02                	jmp    c000cc53 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cc51:	89 c6                	mov    esi,eax
c000cc53:	31 d2                	xor    edx,edx
c000cc55:	41                   	inc    ecx
c000cc56:	89 f0                	mov    eax,esi
c000cc58:	f7 f3                	div    ebx
c000cc5a:	39 de                	cmp    esi,ebx
c000cc5c:	73 f3                	jae    c000cc51 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cc5e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cc61:	eb 02                	jmp    c000cc65 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cc63:	89 c5                	mov    ebp,eax
c000cc65:	31 d2                	xor    edx,edx
c000cc67:	49                   	dec    ecx
c000cc68:	89 e8                	mov    eax,ebp
c000cc6a:	f7 f3                	div    ebx
c000cc6c:	39 dd                	cmp    ebp,ebx
c000cc6e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cc72:	88 11                	mov    BYTE PTR [ecx],dl
c000cc74:	73 ed                	jae    c000cc63 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cc76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc7a:	83 c4 20             	add    esp,0x20
c000cc7d:	5b                   	pop    ebx
c000cc7e:	5e                   	pop    esi
c000cc7f:	5f                   	pop    edi
c000cc80:	5d                   	pop    ebp
c000cc81:	c3                   	ret    

c000cc82 <Dbg::logc(char)>:
c000cc82:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc86:	f6 05 80 7f 02 c0 10 	test   BYTE PTR ds:0xc0027f80,0x10
c000cc8d:	75 12                	jne    c000cca1 <Dbg::logc(char)+0x1f>
c000cc8f:	ba fd 03 00 00       	mov    edx,0x3fd
c000cc94:	ec                   	in     al,dx
c000cc95:	a8 20                	test   al,0x20
c000cc97:	74 fb                	je     c000cc94 <Dbg::logc(char)+0x12>
c000cc99:	ba f8 03 00 00       	mov    edx,0x3f8
c000cc9e:	88 c8                	mov    al,cl
c000cca0:	ee                   	out    dx,al
c000cca1:	c3                   	ret    

c000cca2 <Dbg::logs(char*)>:
c000cca2:	53                   	push   ebx
c000cca3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cca7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccaa:	84 c0                	test   al,al
c000ccac:	74 0f                	je     c000ccbd <Dbg::logs(char*)+0x1b>
c000ccae:	50                   	push   eax
c000ccaf:	43                   	inc    ebx
c000ccb0:	e8 cd ff ff ff       	call   c000cc82 <Dbg::logc(char)>
c000ccb5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccb8:	5a                   	pop    edx
c000ccb9:	84 c0                	test   al,al
c000ccbb:	75 f1                	jne    c000ccae <Dbg::logs(char*)+0xc>
c000ccbd:	5b                   	pop    ebx
c000ccbe:	c3                   	ret    

c000ccbf <Dbg::logWriteInt(unsigned int)>:
c000ccbf:	83 ec 10             	sub    esp,0x10
c000ccc2:	6a 0a                	push   0xa
c000ccc4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ccc8:	50                   	push   eax
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 57 ff ff ff       	call   c000cc29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccd2:	50                   	push   eax
c000ccd3:	e8 ca ff ff ff       	call   c000cca2 <Dbg::logs(char*)>
c000ccd8:	83 c4 20             	add    esp,0x20
c000ccdb:	c3                   	ret    

c000ccdc <Dbg::logWriteIntBase(unsigned int, int)>:
c000ccdc:	83 ec 10             	sub    esp,0x10
c000ccdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cce3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cce7:	50                   	push   eax
c000cce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccec:	e8 38 ff ff ff       	call   c000cc29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccf1:	50                   	push   eax
c000ccf2:	e8 ab ff ff ff       	call   c000cca2 <Dbg::logs(char*)>
c000ccf7:	83 c4 20             	add    esp,0x20
c000ccfa:	c3                   	ret    

c000ccfb <Dbg::kprintf(char const*, ...)>:
c000ccfb:	55                   	push   ebp
c000ccfc:	57                   	push   edi
c000ccfd:	56                   	push   esi
c000ccfe:	53                   	push   ebx
c000ccff:	83 ec 0c             	sub    esp,0xc
c000cd02:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd06:	f6 05 80 7f 02 c0 10 	test   BYTE PTR ds:0xc0027f80,0x10
c000cd0d:	74 08                	je     c000cd17 <Dbg::kprintf(char const*, ...)+0x1c>
c000cd0f:	83 c4 0c             	add    esp,0xc
c000cd12:	5b                   	pop    ebx
c000cd13:	5e                   	pop    esi
c000cd14:	5f                   	pop    edi
c000cd15:	5d                   	pop    ebp
c000cd16:	c3                   	ret    
c000cd17:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cd1b:	31 db                	xor    ebx,ebx
c000cd1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd21:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cd24:	84 c0                	test   al,al
c000cd26:	74 e7                	je     c000cd0f <Dbg::kprintf(char const*, ...)+0x14>
c000cd28:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd2b:	3c 25                	cmp    al,0x25
c000cd2d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd30:	75 44                	jne    c000cd76 <Dbg::kprintf(char const*, ...)+0x7b>
c000cd32:	83 c3 02             	add    ebx,0x2
c000cd35:	8a 07                	mov    al,BYTE PTR [edi]
c000cd37:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cd3a:	83 e8 25             	sub    eax,0x25
c000cd3d:	3c 53                	cmp    al,0x53
c000cd3f:	0f 87 c9 00 00 00    	ja     c000ce0e <Dbg::kprintf(char const*, ...)+0x113>
c000cd45:	0f b6 c0             	movzx  eax,al
c000cd48:	ff 24 85 18 48 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb7e8]
c000cd4f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd53:	89 c8                	mov    eax,ecx
c000cd55:	83 c1 04             	add    ecx,0x4
c000cd58:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd5c:	ff 30                	push   DWORD PTR [eax]
c000cd5e:	e8 5c ff ff ff       	call   c000ccbf <Dbg::logWriteInt(unsigned int)>
c000cd63:	5f                   	pop    edi
c000cd64:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cd68:	84 c0                	test   al,al
c000cd6a:	74 a3                	je     c000cd0f <Dbg::kprintf(char const*, ...)+0x14>
c000cd6c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd6f:	3c 25                	cmp    al,0x25
c000cd71:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd74:	74 bc                	je     c000cd32 <Dbg::kprintf(char const*, ...)+0x37>
c000cd76:	50                   	push   eax
c000cd77:	89 eb                	mov    ebx,ebp
c000cd79:	e8 04 ff ff ff       	call   c000cc82 <Dbg::logc(char)>
c000cd7e:	89 fd                	mov    ebp,edi
c000cd80:	58                   	pop    eax
c000cd81:	eb e1                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cd83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd87:	89 c8                	mov    eax,ecx
c000cd89:	83 c1 04             	add    ecx,0x4
c000cd8c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd90:	ff 30                	push   DWORD PTR [eax]
c000cd92:	e8 0b ff ff ff       	call   c000cca2 <Dbg::logs(char*)>
c000cd97:	58                   	pop    eax
c000cd98:	eb ca                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cd9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd9e:	89 d0                	mov    eax,edx
c000cda0:	83 c2 04             	add    edx,0x4
c000cda3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cda7:	ff 30                	push   DWORD PTR [eax]
c000cda9:	e8 11 ff ff ff       	call   c000ccbf <Dbg::logWriteInt(unsigned int)>
c000cdae:	58                   	pop    eax
c000cdaf:	eb b3                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cdb1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdb5:	89 d0                	mov    eax,edx
c000cdb7:	83 c2 04             	add    edx,0x4
c000cdba:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cdbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdc1:	50                   	push   eax
c000cdc2:	e8 bb fe ff ff       	call   c000cc82 <Dbg::logc(char)>
c000cdc7:	58                   	pop    eax
c000cdc8:	eb 9a                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cdca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cdce:	89 c8                	mov    eax,ecx
c000cdd0:	83 c1 04             	add    ecx,0x4
c000cdd3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cdd7:	6a 10                	push   0x10
c000cdd9:	ff 30                	push   DWORD PTR [eax]
c000cddb:	e8 fc fe ff ff       	call   c000ccdc <Dbg::logWriteIntBase(unsigned int, int)>
c000cde0:	59                   	pop    ecx
c000cde1:	5f                   	pop    edi
c000cde2:	eb 80                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cde4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cde8:	89 d0                	mov    eax,edx
c000cdea:	83 c2 08             	add    edx,0x8
c000cded:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdf1:	6a 10                	push   0x10
c000cdf3:	ff 30                	push   DWORD PTR [eax]
c000cdf5:	e8 e2 fe ff ff       	call   c000ccdc <Dbg::logWriteIntBase(unsigned int, int)>
c000cdfa:	58                   	pop    eax
c000cdfb:	5a                   	pop    edx
c000cdfc:	e9 63 ff ff ff       	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000ce01:	6a 25                	push   0x25
c000ce03:	e8 7a fe ff ff       	call   c000cc82 <Dbg::logc(char)>
c000ce08:	58                   	pop    eax
c000ce09:	e9 56 ff ff ff       	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000ce0e:	6a 25                	push   0x25
c000ce10:	e8 6d fe ff ff       	call   c000cc82 <Dbg::logc(char)>
c000ce15:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ce18:	50                   	push   eax
c000ce19:	e8 64 fe ff ff       	call   c000cc82 <Dbg::logc(char)>
c000ce1e:	5a                   	pop    edx
c000ce1f:	59                   	pop    ecx
c000ce20:	e9 3f ff ff ff       	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000ce25:	90                   	nop

c000ce26 <File::read(unsigned long long, void*, int*)>:
c000ce26:	53                   	push   ebx
c000ce27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce2f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce36:	3c 19                	cmp    al,0x19
c000ce38:	77 35                	ja     c000ce6f <File::read(unsigned long long, void*, int*)+0x49>
c000ce3a:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c000ce41:	85 c0                	test   eax,eax
c000ce43:	74 2a                	je     c000ce6f <File::read(unsigned long long, void*, int*)+0x49>
c000ce45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce4b:	85 c0                	test   eax,eax
c000ce4d:	74 20                	je     c000ce6f <File::read(unsigned long long, void*, int*)+0x49>
c000ce4f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce53:	74 21                	je     c000ce76 <File::read(unsigned long long, void*, int*)+0x50>
c000ce55:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce5b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce69:	5b                   	pop    ebx
c000ce6a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ce6d:	ff e0                	jmp    eax
c000ce6f:	b8 0b 00 00 00       	mov    eax,0xb
c000ce74:	eb 05                	jmp    c000ce7b <File::read(unsigned long long, void*, int*)+0x55>
c000ce76:	b8 05 00 00 00       	mov    eax,0x5
c000ce7b:	5b                   	pop    ebx
c000ce7c:	c3                   	ret    
c000ce7d:	90                   	nop

c000ce7e <File::write(unsigned long long, void*, int*)>:
c000ce7e:	53                   	push   ebx
c000ce7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce87:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce8e:	3c 19                	cmp    al,0x19
c000ce90:	77 35                	ja     c000cec7 <File::write(unsigned long long, void*, int*)+0x49>
c000ce92:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c000ce99:	85 c0                	test   eax,eax
c000ce9b:	74 2a                	je     c000cec7 <File::write(unsigned long long, void*, int*)+0x49>
c000ce9d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cea3:	85 c0                	test   eax,eax
c000cea5:	74 20                	je     c000cec7 <File::write(unsigned long long, void*, int*)+0x49>
c000cea7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ceab:	74 21                	je     c000cece <File::write(unsigned long long, void*, int*)+0x50>
c000cead:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ceaf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ceb3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ceb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cebd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cec1:	5b                   	pop    ebx
c000cec2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cec5:	ff e0                	jmp    eax
c000cec7:	b8 0b 00 00 00       	mov    eax,0xb
c000cecc:	eb 05                	jmp    c000ced3 <File::write(unsigned long long, void*, int*)+0x55>
c000cece:	b8 05 00 00 00       	mov    eax,0x5
c000ced3:	5b                   	pop    ebx
c000ced4:	c3                   	ret    
c000ced5:	90                   	nop

c000ced6 <Directory::read(unsigned long long, void*, int*)>:
c000ced6:	53                   	push   ebx
c000ced7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cedb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cedf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cee6:	3c 19                	cmp    al,0x19
c000cee8:	77 35                	ja     c000cf1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000ceea:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c000cef1:	85 c0                	test   eax,eax
c000cef3:	74 2a                	je     c000cf1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000cef5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cefb:	85 c0                	test   eax,eax
c000cefd:	74 20                	je     c000cf1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000ceff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf03:	74 21                	je     c000cf26 <Directory::read(unsigned long long, void*, int*)+0x50>
c000cf05:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cf07:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf0b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cf11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf19:	5b                   	pop    ebx
c000cf1a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cf1d:	ff e0                	jmp    eax
c000cf1f:	b8 0b 00 00 00       	mov    eax,0xb
c000cf24:	eb 05                	jmp    c000cf2b <Directory::read(unsigned long long, void*, int*)+0x55>
c000cf26:	b8 05 00 00 00       	mov    eax,0x5
c000cf2b:	5b                   	pop    ebx
c000cf2c:	c3                   	ret    
c000cf2d:	90                   	nop

c000cf2e <Directory::write(unsigned long long, void*, int*)>:
c000cf2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf32:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cf39:	b8 0b 00 00 00       	mov    eax,0xb
c000cf3e:	80 fa 19             	cmp    dl,0x19
c000cf41:	77 18                	ja     c000cf5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf43:	8b 14 95 20 85 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7ae0]
c000cf4a:	85 d2                	test   edx,edx
c000cf4c:	74 0d                	je     c000cf5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf4e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cf55:	19 c0                	sbb    eax,eax
c000cf57:	83 e0 0a             	and    eax,0xa
c000cf5a:	40                   	inc    eax
c000cf5b:	c3                   	ret    

c000cf5c <File::isAtty()>:
c000cf5c:	31 c0                	xor    eax,eax
c000cf5e:	c3                   	ret    
c000cf5f:	90                   	nop

c000cf60 <Directory::isAtty()>:
c000cf60:	31 c0                	xor    eax,eax
c000cf62:	c3                   	ret    
c000cf63:	90                   	nop

c000cf64 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cf64:	b8 0a 00 00 00       	mov    eax,0xa
c000cf69:	c3                   	ret    

c000cf6a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cf6a:	b8 0a 00 00 00       	mov    eax,0xa
c000cf6f:	c3                   	ret    

c000cf70 <Filesystem::allocateSwapfile(char const*, int)>:
c000cf70:	31 c0                	xor    eax,eax
c000cf72:	31 d2                	xor    edx,edx
c000cf74:	c3                   	ret    
c000cf75:	90                   	nop

c000cf76 <File::~File()>:
c000cf76:	83 ec 0c             	sub    esp,0xc
c000cf79:	ba 54 4a 02 c0       	mov    edx,0xc0024a54
c000cf7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf82:	89 10                	mov    DWORD PTR [eax],edx
c000cf84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf88:	83 ec 0c             	sub    esp,0xc
c000cf8b:	50                   	push   eax
c000cf8c:	e8 e3 e7 ff ff       	call   c000b774 <UnixFile::~UnixFile()>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	90                   	nop
c000cf95:	83 c4 0c             	add    esp,0xc
c000cf98:	c3                   	ret    
c000cf99:	90                   	nop

c000cf9a <File::~File()>:
c000cf9a:	83 ec 0c             	sub    esp,0xc
c000cf9d:	83 ec 0c             	sub    esp,0xc
c000cfa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa4:	e8 cd ff ff ff       	call   c000cf76 <File::~File()>
c000cfa9:	83 c4 10             	add    esp,0x10
c000cfac:	83 ec 08             	sub    esp,0x8
c000cfaf:	68 14 01 00 00       	push   0x114
c000cfb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb8:	e8 5d fc ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000cfbd:	83 c4 10             	add    esp,0x10
c000cfc0:	83 c4 0c             	add    esp,0xc
c000cfc3:	c3                   	ret    

c000cfc4 <Directory::~Directory()>:
c000cfc4:	83 ec 0c             	sub    esp,0xc
c000cfc7:	ba 70 4a 02 c0       	mov    edx,0xc0024a70
c000cfcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd0:	89 10                	mov    DWORD PTR [eax],edx
c000cfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd6:	83 ec 0c             	sub    esp,0xc
c000cfd9:	50                   	push   eax
c000cfda:	e8 95 e7 ff ff       	call   c000b774 <UnixFile::~UnixFile()>
c000cfdf:	83 c4 10             	add    esp,0x10
c000cfe2:	90                   	nop
c000cfe3:	83 c4 0c             	add    esp,0xc
c000cfe6:	c3                   	ret    
c000cfe7:	90                   	nop

c000cfe8 <Directory::~Directory()>:
c000cfe8:	83 ec 0c             	sub    esp,0xc
c000cfeb:	83 ec 0c             	sub    esp,0xc
c000cfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff2:	e8 cd ff ff ff       	call   c000cfc4 <Directory::~Directory()>
c000cff7:	83 c4 10             	add    esp,0x10
c000cffa:	83 ec 08             	sub    esp,0x8
c000cffd:	68 14 01 00 00       	push   0x114
c000d002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d006:	e8 0f fc ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000d00b:	83 c4 10             	add    esp,0x10
c000d00e:	83 c4 0c             	add    esp,0xc
c000d011:	c3                   	ret    

c000d012 <Filesystem::Filesystem()>:
c000d012:	ba ec 49 02 c0       	mov    edx,0xc00249ec
c000d017:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d01b:	89 10                	mov    DWORD PTR [eax],edx
c000d01d:	8b 15 94 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028094
c000d023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d027:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d02a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d02e:	a3 94 80 02 c0       	mov    ds:0xc0028094,eax
c000d033:	90                   	nop
c000d034:	c3                   	ret    
c000d035:	90                   	nop

c000d036 <Filesystem::~Filesystem()>:
c000d036:	ba ec 49 02 c0       	mov    edx,0xc00249ec
c000d03b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d03f:	89 10                	mov    DWORD PTR [eax],edx
c000d041:	90                   	nop
c000d042:	c3                   	ret    
c000d043:	90                   	nop

c000d044 <Filesystem::~Filesystem()>:
c000d044:	83 ec 0c             	sub    esp,0xc
c000d047:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d04b:	e8 e6 ff ff ff       	call   c000d036 <Filesystem::~Filesystem()>
c000d050:	83 c4 04             	add    esp,0x4
c000d053:	83 ec 08             	sub    esp,0x8
c000d056:	6a 08                	push   0x8
c000d058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d05c:	e8 b9 fb ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000d061:	83 c4 10             	add    esp,0x10
c000d064:	83 c4 0c             	add    esp,0xc
c000d067:	c3                   	ret    

c000d068 <Fs::getcwd(Process*, char*, int)>:
c000d068:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d06c:	31 c0                	xor    eax,eax
c000d06e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d071:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d075:	7d 15                	jge    c000d08c <Fs::getcwd(Process*, char*, int)+0x24>
c000d077:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d07b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d082:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d085:	84 c9                	test   cl,cl
c000d087:	74 06                	je     c000d08f <Fs::getcwd(Process*, char*, int)+0x27>
c000d089:	40                   	inc    eax
c000d08a:	eb e2                	jmp    c000d06e <Fs::getcwd(Process*, char*, int)+0x6>
c000d08c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d08f:	31 c0                	xor    eax,eax
c000d091:	c3                   	ret    

c000d092 <Fs::initVFS()>:
c000d092:	83 ec 18             	sub    esp,0x18
c000d095:	6a 08                	push   0x8
c000d097:	e8 73 c9 ff ff       	call   c0009a0f <malloc>
c000d09c:	89 04 24             	mov    DWORD PTR [esp],eax
c000d09f:	e8 54 e9 00 00       	call   c001b9f8 <FAT::FAT()>
c000d0a4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d0ab:	e8 5f c9 ff ff       	call   c0009a0f <malloc>
c000d0b0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0b3:	e8 d0 fb 00 00       	call   c001cc88 <ISO9660::ISO9660()>
c000d0b8:	83 c4 1c             	add    esp,0x1c
c000d0bb:	c3                   	ret    

c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d0bc:	55                   	push   ebp
c000d0bd:	57                   	push   edi
c000d0be:	56                   	push   esi
c000d0bf:	53                   	push   ebx
c000d0c0:	81 ec 10 04 00 00    	sub    esp,0x410
c000d0c6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d0cd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d0d4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d0db:	68 00 04 00 00       	push   0x400
c000d0e0:	6a 00                	push   0x0
c000d0e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d0e6:	56                   	push   esi
c000d0e7:	e8 98 35 ff ff       	call   c0000684 <memset>
c000d0ec:	83 c4 10             	add    esp,0x10
c000d0ef:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d0f3:	75 0b                	jne    c000d100 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d0f5:	50                   	push   eax
c000d0f6:	50                   	push   eax
c000d0f7:	57                   	push   edi
c000d0f8:	56                   	push   esi
c000d0f9:	e8 42 36 ff ff       	call   c0000740 <strcpy>
c000d0fe:	eb 41                	jmp    c000d141 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d100:	8a 07                	mov    al,BYTE PTR [edi]
c000d102:	3c 5c                	cmp    al,0x5c
c000d104:	74 04                	je     c000d10a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d106:	3c 2f                	cmp    al,0x2f
c000d108:	75 18                	jne    c000d122 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d10a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d10d:	3c 60                	cmp    al,0x60
c000d10f:	7e 03                	jle    c000d114 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d111:	83 e8 20             	sub    eax,0x20
c000d114:	88 04 24             	mov    BYTE PTR [esp],al
c000d117:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d11e:	50                   	push   eax
c000d11f:	50                   	push   eax
c000d120:	eb 18                	jmp    c000d13a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d122:	50                   	push   eax
c000d123:	50                   	push   eax
c000d124:	55                   	push   ebp
c000d125:	56                   	push   esi
c000d126:	e8 15 36 ff ff       	call   c0000740 <strcpy>
c000d12b:	5a                   	pop    edx
c000d12c:	59                   	pop    ecx
c000d12d:	68 a6 60 02 c0       	push   0xc00260a6
c000d132:	56                   	push   esi
c000d133:	e8 48 37 ff ff       	call   c0000880 <strcat>
c000d138:	5d                   	pop    ebp
c000d139:	58                   	pop    eax
c000d13a:	57                   	push   edi
c000d13b:	56                   	push   esi
c000d13c:	e8 3f 37 ff ff       	call   c0000880 <strcat>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d147:	3c 60                	cmp    al,0x60
c000d149:	7e 03                	jle    c000d14e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d14b:	83 e8 20             	sub    eax,0x20
c000d14e:	88 04 24             	mov    BYTE PTR [esp],al
c000d151:	88 03                	mov    BYTE PTR [ebx],al
c000d153:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d15a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d160:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d164:	bf 03 00 00 00       	mov    edi,0x3
c000d169:	b8 03 00 00 00       	mov    eax,0x3
c000d16e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d171:	84 d2                	test   dl,dl
c000d173:	0f 84 91 00 00 00    	je     c000d20a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d179:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d17c:	80 fa 5c             	cmp    dl,0x5c
c000d17f:	74 05                	je     c000d186 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d181:	80 fa 2f             	cmp    dl,0x2f
c000d184:	75 12                	jne    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d186:	89 c5                	mov    ebp,eax
c000d188:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d18d:	74 09                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d18f:	40                   	inc    eax
c000d190:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d194:	89 cf                	mov    edi,ecx
c000d196:	eb d6                	jmp    c000d16e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d198:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d19d:	75 5b                	jne    c000d1fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d19f:	80 fa 2e             	cmp    dl,0x2e
c000d1a2:	75 56                	jne    c000d1fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d1a4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d1a8:	74 19                	je     c000d1c3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d1aa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1af:	74 53                	je     c000d204 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1b1:	89 f9                	mov    ecx,edi
c000d1b3:	41                   	inc    ecx
c000d1b4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1b7:	80 fa 2f             	cmp    dl,0x2f
c000d1ba:	74 f7                	je     c000d1b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1bc:	80 fa 5c             	cmp    dl,0x5c
c000d1bf:	74 f2                	je     c000d1b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1c1:	eb d1                	jmp    c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1c3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1c8:	74 3a                	je     c000d204 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1ca:	83 f8 03             	cmp    eax,0x3
c000d1cd:	74 c5                	je     c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1cf:	41                   	inc    ecx
c000d1d0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1d3:	80 fa 2f             	cmp    dl,0x2f
c000d1d6:	74 f7                	je     c000d1cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1d8:	80 fa 5c             	cmp    dl,0x5c
c000d1db:	74 f2                	je     c000d1cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1dd:	48                   	dec    eax
c000d1de:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1e2:	75 06                	jne    c000d1ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1e4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1e8:	eb f3                	jmp    c000d1dd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d1ea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1ee:	74 07                	je     c000d1f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d1f0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1f4:	48                   	dec    eax
c000d1f5:	eb f3                	jmp    c000d1ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1f7:	40                   	inc    eax
c000d1f8:	eb 9a                	jmp    c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1fa:	80 fa 2f             	cmp    dl,0x2f
c000d1fd:	74 95                	je     c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1ff:	80 fa 5c             	cmp    dl,0x5c
c000d202:	74 90                	je     c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d204:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d207:	40                   	inc    eax
c000d208:	eb 8a                	jmp    c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d20a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	53                   	push   ebx
c000d212:	e8 89 34 ff ff       	call   c00006a0 <strlen>
c000d217:	83 c4 10             	add    esp,0x10
c000d21a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d21f:	75 26                	jne    c000d247 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d221:	83 ec 0c             	sub    esp,0xc
c000d224:	53                   	push   ebx
c000d225:	e8 76 34 ff ff       	call   c00006a0 <strlen>
c000d22a:	83 c4 10             	add    esp,0x10
c000d22d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d232:	74 26                	je     c000d25a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d234:	83 ec 0c             	sub    esp,0xc
c000d237:	53                   	push   ebx
c000d238:	e8 63 34 ff ff       	call   c00006a0 <strlen>
c000d23d:	83 c4 10             	add    esp,0x10
c000d240:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d245:	eb c7                	jmp    c000d20e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d247:	83 ec 0c             	sub    esp,0xc
c000d24a:	53                   	push   ebx
c000d24b:	e8 50 34 ff ff       	call   c00006a0 <strlen>
c000d250:	83 c4 10             	add    esp,0x10
c000d253:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d258:	74 c7                	je     c000d221 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d25a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d260:	5b                   	pop    ebx
c000d261:	5e                   	pop    esi
c000d262:	5f                   	pop    edi
c000d263:	5d                   	pop    ebp
c000d264:	c3                   	ret    
c000d265:	90                   	nop

c000d266 <File::File(char const*, Process*)>:
c000d266:	83 ec 0c             	sub    esp,0xc
c000d269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d26d:	83 ec 08             	sub    esp,0x8
c000d270:	6a 00                	push   0x0
c000d272:	50                   	push   eax
c000d273:	e8 1a e3 ff ff       	call   c000b592 <UnixFile::UnixFile(int)>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	ba 54 4a 02 c0       	mov    edx,0xc0024a54
c000d280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d284:	89 10                	mov    DWORD PTR [eax],edx
c000d286:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d28a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d294:	83 c0 0d             	add    eax,0xd
c000d297:	83 ec 04             	sub    esp,0x4
c000d29a:	52                   	push   edx
c000d29b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d29f:	50                   	push   eax
c000d2a0:	e8 17 fe ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d2a5:	83 c4 10             	add    esp,0x10
c000d2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d2af:	8d 50 bf             	lea    edx,[eax-0x41]
c000d2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2ce:	0f b6 c0             	movzx  eax,al
c000d2d1:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c000d2d8:	85 c0                	test   eax,eax
c000d2da:	74 5e                	je     c000d33a <File::File(char const*, Process*)+0xd4>
c000d2dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2e6:	0f b6 c0             	movzx  eax,al
c000d2e9:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c000d2f0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2f6:	85 c0                	test   eax,eax
c000d2f8:	75 40                	jne    c000d33a <File::File(char const*, Process*)+0xd4>
c000d2fa:	83 ec 0c             	sub    esp,0xc
c000d2fd:	68 90 49 02 c0       	push   0xc0024990
c000d302:	e8 f4 f9 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d307:	83 c4 10             	add    esp,0x10
c000d30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d30e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d314:	0f b6 c0             	movzx  eax,al
c000d317:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c000d31e:	83 ec 0c             	sub    esp,0xc
c000d321:	50                   	push   eax
c000d322:	e8 5f 31 00 00       	call   c0010486 <LogicalDisk::mount()>
c000d327:	83 c4 10             	add    esp,0x10
c000d32a:	83 ec 0c             	sub    esp,0xc
c000d32d:	68 95 6a 02 c0       	push   0xc0026a95
c000d332:	e8 c4 f9 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d337:	83 c4 10             	add    esp,0x10
c000d33a:	90                   	nop
c000d33b:	83 c4 0c             	add    esp,0xc
c000d33e:	c3                   	ret    
c000d33f:	90                   	nop

c000d340 <File::open(FileOpenMode)>:
c000d340:	53                   	push   ebx
c000d341:	b8 0b 00 00 00       	mov    eax,0xb
c000d346:	83 ec 08             	sub    esp,0x8
c000d349:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d34d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d354:	80 fa 19             	cmp    dl,0x19
c000d357:	77 40                	ja     c000d399 <File::open(FileOpenMode)+0x59>
c000d359:	8b 14 95 20 85 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7ae0]
c000d360:	85 d2                	test   edx,edx
c000d362:	74 35                	je     c000d399 <File::open(FileOpenMode)+0x59>
c000d364:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d36a:	85 d2                	test   edx,edx
c000d36c:	74 2b                	je     c000d399 <File::open(FileOpenMode)+0x59>
c000d36e:	b8 06 00 00 00       	mov    eax,0x6
c000d373:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d377:	75 20                	jne    c000d399 <File::open(FileOpenMode)+0x59>
c000d379:	8b 02                	mov    eax,DWORD PTR [edx]
c000d37b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d381:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d385:	51                   	push   ecx
c000d386:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d389:	51                   	push   ecx
c000d38a:	52                   	push   edx
c000d38b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d38e:	83 c4 10             	add    esp,0x10
c000d391:	85 c0                	test   eax,eax
c000d393:	75 04                	jne    c000d399 <File::open(FileOpenMode)+0x59>
c000d395:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d399:	83 c4 08             	add    esp,0x8
c000d39c:	5b                   	pop    ebx
c000d39d:	c3                   	ret    

c000d39e <File::close()>:
c000d39e:	53                   	push   ebx
c000d39f:	b8 0b 00 00 00       	mov    eax,0xb
c000d3a4:	83 ec 08             	sub    esp,0x8
c000d3a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d3ab:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d3b2:	80 fa 19             	cmp    dl,0x19
c000d3b5:	77 41                	ja     c000d3f8 <File::close()+0x5a>
c000d3b7:	8b 1c 95 20 85 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7ae0]
c000d3be:	85 db                	test   ebx,ebx
c000d3c0:	74 36                	je     c000d3f8 <File::close()+0x5a>
c000d3c2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d3c9:	74 2d                	je     c000d3f8 <File::close()+0x5a>
c000d3cb:	b8 05 00 00 00       	mov    eax,0x5
c000d3d0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d3d4:	74 22                	je     c000d3f8 <File::close()+0x5a>
c000d3d6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d3da:	8b 04 95 20 85 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7ae0]
c000d3e1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d3e7:	53                   	push   ebx
c000d3e8:	53                   	push   ebx
c000d3e9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3eb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d3f1:	50                   	push   eax
c000d3f2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d3f5:	83 c4 10             	add    esp,0x10
c000d3f8:	83 c4 08             	add    esp,0x8
c000d3fb:	5b                   	pop    ebx
c000d3fc:	c3                   	ret    
c000d3fd:	90                   	nop

c000d3fe <File::seek(unsigned long long)>:
c000d3fe:	56                   	push   esi
c000d3ff:	53                   	push   ebx
c000d400:	b8 0b 00 00 00       	mov    eax,0xb
c000d405:	51                   	push   ecx
c000d406:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d40a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d40e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d415:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d419:	80 fa 19             	cmp    dl,0x19
c000d41c:	77 31                	ja     c000d44f <File::seek(unsigned long long)+0x51>
c000d41e:	8b 14 95 20 85 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7ae0]
c000d425:	85 d2                	test   edx,edx
c000d427:	74 26                	je     c000d44f <File::seek(unsigned long long)+0x51>
c000d429:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d42f:	85 d2                	test   edx,edx
c000d431:	74 1c                	je     c000d44f <File::seek(unsigned long long)+0x51>
c000d433:	b8 05 00 00 00       	mov    eax,0x5
c000d438:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d43c:	74 11                	je     c000d44f <File::seek(unsigned long long)+0x51>
c000d43e:	8b 02                	mov    eax,DWORD PTR [edx]
c000d440:	53                   	push   ebx
c000d441:	51                   	push   ecx
c000d442:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d448:	52                   	push   edx
c000d449:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d44c:	83 c4 10             	add    esp,0x10
c000d44f:	5a                   	pop    edx
c000d450:	5b                   	pop    ebx
c000d451:	5e                   	pop    esi
c000d452:	c3                   	ret    
c000d453:	90                   	nop

c000d454 <File::tell(unsigned long long*)>:
c000d454:	83 ec 0c             	sub    esp,0xc
c000d457:	b8 0b 00 00 00       	mov    eax,0xb
c000d45c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d460:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d467:	80 fa 19             	cmp    dl,0x19
c000d46a:	77 34                	ja     c000d4a0 <File::tell(unsigned long long*)+0x4c>
c000d46c:	8b 14 95 20 85 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7ae0]
c000d473:	85 d2                	test   edx,edx
c000d475:	74 29                	je     c000d4a0 <File::tell(unsigned long long*)+0x4c>
c000d477:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d47d:	85 d2                	test   edx,edx
c000d47f:	74 1f                	je     c000d4a0 <File::tell(unsigned long long*)+0x4c>
c000d481:	b8 05 00 00 00       	mov    eax,0x5
c000d486:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d48a:	74 14                	je     c000d4a0 <File::tell(unsigned long long*)+0x4c>
c000d48c:	50                   	push   eax
c000d48d:	8b 02                	mov    eax,DWORD PTR [edx]
c000d48f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d493:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d499:	52                   	push   edx
c000d49a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d49d:	83 c4 10             	add    esp,0x10
c000d4a0:	83 c4 0c             	add    esp,0xc
c000d4a3:	c3                   	ret    

c000d4a4 <File::rewind()>:
c000d4a4:	83 ec 10             	sub    esp,0x10
c000d4a7:	6a 00                	push   0x0
c000d4a9:	6a 00                	push   0x0
c000d4ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4af:	e8 4a ff ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c000d4b4:	83 c4 1c             	add    esp,0x1c
c000d4b7:	c3                   	ret    

c000d4b8 <File::unlink()>:
c000d4b8:	83 ec 0c             	sub    esp,0xc
c000d4bb:	b8 0b 00 00 00       	mov    eax,0xb
c000d4c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4cb:	80 f9 19             	cmp    cl,0x19
c000d4ce:	77 2f                	ja     c000d4ff <File::unlink()+0x47>
c000d4d0:	8b 0c 8d 20 85 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7ae0]
c000d4d7:	85 c9                	test   ecx,ecx
c000d4d9:	74 24                	je     c000d4ff <File::unlink()+0x47>
c000d4db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4e1:	85 c9                	test   ecx,ecx
c000d4e3:	74 1a                	je     c000d4ff <File::unlink()+0x47>
c000d4e5:	b8 06 00 00 00       	mov    eax,0x6
c000d4ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4ee:	75 0f                	jne    c000d4ff <File::unlink()+0x47>
c000d4f0:	83 c2 0d             	add    edx,0xd
c000d4f3:	50                   	push   eax
c000d4f4:	50                   	push   eax
c000d4f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4f7:	52                   	push   edx
c000d4f8:	51                   	push   ecx
c000d4f9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d4fc:	83 c4 10             	add    esp,0x10
c000d4ff:	83 c4 0c             	add    esp,0xc
c000d502:	c3                   	ret    
c000d503:	90                   	nop

c000d504 <File::rename(char const*)>:
c000d504:	83 ec 0c             	sub    esp,0xc
c000d507:	b8 0b 00 00 00       	mov    eax,0xb
c000d50c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d510:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d517:	80 f9 19             	cmp    cl,0x19
c000d51a:	77 32                	ja     c000d54e <File::rename(char const*)+0x4a>
c000d51c:	8b 0c 8d 20 85 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7ae0]
c000d523:	85 c9                	test   ecx,ecx
c000d525:	74 27                	je     c000d54e <File::rename(char const*)+0x4a>
c000d527:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d52d:	85 c9                	test   ecx,ecx
c000d52f:	74 1d                	je     c000d54e <File::rename(char const*)+0x4a>
c000d531:	b8 06 00 00 00       	mov    eax,0x6
c000d536:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d53a:	75 12                	jne    c000d54e <File::rename(char const*)+0x4a>
c000d53c:	83 c2 0d             	add    edx,0xd
c000d53f:	50                   	push   eax
c000d540:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d546:	52                   	push   edx
c000d547:	51                   	push   ecx
c000d548:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d54b:	83 c4 10             	add    esp,0x10
c000d54e:	83 c4 0c             	add    esp,0xc
c000d551:	c3                   	ret    

c000d552 <File::chfatattr(unsigned char, unsigned char)>:
c000d552:	57                   	push   edi
c000d553:	b8 0b 00 00 00       	mov    eax,0xb
c000d558:	56                   	push   esi
c000d559:	53                   	push   ebx
c000d55a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d55e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d562:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d569:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d56d:	80 f9 19             	cmp    cl,0x19
c000d570:	77 37                	ja     c000d5a9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d572:	8b 0c 8d 20 85 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7ae0]
c000d579:	85 c9                	test   ecx,ecx
c000d57b:	74 2c                	je     c000d5a9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d57d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d583:	85 c9                	test   ecx,ecx
c000d585:	74 22                	je     c000d5a9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d587:	b8 06 00 00 00       	mov    eax,0x6
c000d58c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d590:	75 17                	jne    c000d5a9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d592:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d594:	89 f0                	mov    eax,esi
c000d596:	83 c2 0d             	add    edx,0xd
c000d599:	0f b6 f0             	movzx  esi,al
c000d59c:	0f b6 db             	movzx  ebx,bl
c000d59f:	56                   	push   esi
c000d5a0:	53                   	push   ebx
c000d5a1:	52                   	push   edx
c000d5a2:	51                   	push   ecx
c000d5a3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d5a6:	83 c4 10             	add    esp,0x10
c000d5a9:	5b                   	pop    ebx
c000d5aa:	5e                   	pop    esi
c000d5ab:	5f                   	pop    edi
c000d5ac:	c3                   	ret    
c000d5ad:	90                   	nop

c000d5ae <File::exists()>:
c000d5ae:	83 ec 0c             	sub    esp,0xc
c000d5b1:	31 c0                	xor    eax,eax
c000d5b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5b7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5be:	80 f9 19             	cmp    cl,0x19
c000d5c1:	77 24                	ja     c000d5e7 <File::exists()+0x39>
c000d5c3:	8b 0c 8d 20 85 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7ae0]
c000d5ca:	85 c9                	test   ecx,ecx
c000d5cc:	74 19                	je     c000d5e7 <File::exists()+0x39>
c000d5ce:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5d4:	85 c9                	test   ecx,ecx
c000d5d6:	74 0f                	je     c000d5e7 <File::exists()+0x39>
c000d5d8:	83 c2 0d             	add    edx,0xd
c000d5db:	50                   	push   eax
c000d5dc:	50                   	push   eax
c000d5dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5df:	52                   	push   edx
c000d5e0:	51                   	push   ecx
c000d5e1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d5e4:	83 c4 10             	add    esp,0x10
c000d5e7:	83 c4 0c             	add    esp,0xc
c000d5ea:	c3                   	ret    
c000d5eb:	90                   	nop

c000d5ec <File::stat(unsigned long long*, bool*)>:
c000d5ec:	56                   	push   esi
c000d5ed:	53                   	push   ebx
c000d5ee:	50                   	push   eax
c000d5ef:	b8 0b 00 00 00       	mov    eax,0xb
c000d5f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d5fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d603:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d607:	80 f9 19             	cmp    cl,0x19
c000d60a:	77 3d                	ja     c000d649 <File::stat(unsigned long long*, bool*)+0x5d>
c000d60c:	8b 0c 8d 20 85 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7ae0]
c000d613:	85 c9                	test   ecx,ecx
c000d615:	74 32                	je     c000d649 <File::stat(unsigned long long*, bool*)+0x5d>
c000d617:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d61d:	85 c9                	test   ecx,ecx
c000d61f:	74 28                	je     c000d649 <File::stat(unsigned long long*, bool*)+0x5d>
c000d621:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d623:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d627:	74 13                	je     c000d63c <File::stat(unsigned long long*, bool*)+0x50>
c000d629:	83 ec 04             	sub    esp,0x4
c000d62c:	56                   	push   esi
c000d62d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d633:	51                   	push   ecx
c000d634:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d637:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d63a:	eb 0a                	jmp    c000d646 <File::stat(unsigned long long*, bool*)+0x5a>
c000d63c:	53                   	push   ebx
c000d63d:	83 c2 0d             	add    edx,0xd
c000d640:	56                   	push   esi
c000d641:	52                   	push   edx
c000d642:	51                   	push   ecx
c000d643:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d646:	83 c4 10             	add    esp,0x10
c000d649:	5a                   	pop    edx
c000d64a:	5b                   	pop    ebx
c000d64b:	5e                   	pop    esi
c000d64c:	c3                   	ret    

c000d64d <Fs::setcwd(Process*, char*)>:
c000d64d:	55                   	push   ebp
c000d64e:	57                   	push   edi
c000d64f:	56                   	push   esi
c000d650:	53                   	push   ebx
c000d651:	81 ec 20 02 00 00    	sub    esp,0x220
c000d657:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d65e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d664:	57                   	push   edi
c000d665:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d66c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d670:	56                   	push   esi
c000d671:	e8 46 fa ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d676:	89 34 24             	mov    DWORD PTR [esp],esi
c000d679:	e8 22 30 ff ff       	call   c00006a0 <strlen>
c000d67e:	83 c4 10             	add    esp,0x10
c000d681:	83 f8 02             	cmp    eax,0x2
c000d684:	77 15                	ja     c000d69b <Fs::setcwd(Process*, char*)+0x4e>
c000d686:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d68b:	83 eb 41             	sub    ebx,0x41
c000d68e:	8b 04 9d 20 85 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7ae0]
c000d695:	85 c0                	test   eax,eax
c000d697:	75 1c                	jne    c000d6b5 <Fs::setcwd(Process*, char*)+0x68>
c000d699:	eb 4c                	jmp    c000d6e7 <Fs::setcwd(Process*, char*)+0x9a>
c000d69b:	83 ec 0c             	sub    esp,0xc
c000d69e:	56                   	push   esi
c000d69f:	e8 fc 2f ff ff       	call   c00006a0 <strlen>
c000d6a4:	83 c4 10             	add    esp,0x10
c000d6a7:	83 f8 03             	cmp    eax,0x3
c000d6aa:	75 74                	jne    c000d720 <Fs::setcwd(Process*, char*)+0xd3>
c000d6ac:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d6b1:	75 6d                	jne    c000d720 <Fs::setcwd(Process*, char*)+0xd3>
c000d6b3:	eb d1                	jmp    c000d686 <Fs::setcwd(Process*, char*)+0x39>
c000d6b5:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d6bc:	75 29                	jne    c000d6e7 <Fs::setcwd(Process*, char*)+0x9a>
c000d6be:	83 ec 0c             	sub    esp,0xc
c000d6c1:	68 68 49 02 c0       	push   0xc0024968
c000d6c6:	e8 30 f6 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d6cb:	5a                   	pop    edx
c000d6cc:	ff 34 9d 20 85 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7ae0]
c000d6d3:	e8 ae 2d 00 00       	call   c0010486 <LogicalDisk::mount()>
c000d6d8:	c7 04 24 95 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a95
c000d6df:	e8 17 f6 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d6e4:	83 c4 10             	add    esp,0x10
c000d6e7:	b8 03 00 00 00       	mov    eax,0x3
c000d6ec:	83 fb 19             	cmp    ebx,0x19
c000d6ef:	0f 87 c6 00 00 00    	ja     c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d6f5:	8b 14 9d 20 85 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7ae0]
c000d6fc:	b8 05 00 00 00       	mov    eax,0x5
c000d701:	85 d2                	test   edx,edx
c000d703:	0f 84 b2 00 00 00    	je     c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d709:	b8 06 00 00 00       	mov    eax,0x6
c000d70e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d715:	0f 85 92 00 00 00    	jne    c000d7ad <Fs::setcwd(Process*, char*)+0x160>
c000d71b:	e9 9b 00 00 00       	jmp    c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d720:	83 ec 0c             	sub    esp,0xc
c000d723:	68 14 01 00 00       	push   0x114
c000d728:	e8 e2 c2 ff ff       	call   c0009a0f <malloc>
c000d72d:	83 c4 0c             	add    esp,0xc
c000d730:	89 c3                	mov    ebx,eax
c000d732:	55                   	push   ebp
c000d733:	56                   	push   esi
c000d734:	50                   	push   eax
c000d735:	e8 2c fb ff ff       	call   c000d266 <File::File(char const*, Process*)>
c000d73a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d73f:	83 c4 0c             	add    esp,0xc
c000d742:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d746:	50                   	push   eax
c000d747:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d74b:	50                   	push   eax
c000d74c:	53                   	push   ebx
c000d74d:	e8 9a fe ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c000d752:	83 c4 10             	add    esp,0x10
c000d755:	83 f8 02             	cmp    eax,0x2
c000d758:	74 04                	je     c000d75e <Fs::setcwd(Process*, char*)+0x111>
c000d75a:	85 c0                	test   eax,eax
c000d75c:	74 1c                	je     c000d77a <Fs::setcwd(Process*, char*)+0x12d>
c000d75e:	b8 01 00 00 00       	mov    eax,0x1
c000d763:	85 db                	test   ebx,ebx
c000d765:	74 54                	je     c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d767:	83 ec 0c             	sub    esp,0xc
c000d76a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d76c:	53                   	push   ebx
c000d76d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d770:	83 c4 10             	add    esp,0x10
c000d773:	b8 01 00 00 00       	mov    eax,0x1
c000d778:	eb 41                	jmp    c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d77a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d77f:	75 1c                	jne    c000d79d <Fs::setcwd(Process*, char*)+0x150>
c000d781:	b8 02 00 00 00       	mov    eax,0x2
c000d786:	85 db                	test   ebx,ebx
c000d788:	74 31                	je     c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d78a:	83 ec 0c             	sub    esp,0xc
c000d78d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d78f:	53                   	push   ebx
c000d790:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d793:	83 c4 10             	add    esp,0x10
c000d796:	b8 02 00 00 00       	mov    eax,0x2
c000d79b:	eb 1e                	jmp    c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d79d:	85 db                	test   ebx,ebx
c000d79f:	74 0c                	je     c000d7ad <Fs::setcwd(Process*, char*)+0x160>
c000d7a1:	83 ec 0c             	sub    esp,0xc
c000d7a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d7a6:	53                   	push   ebx
c000d7a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	50                   	push   eax
c000d7ae:	50                   	push   eax
c000d7af:	56                   	push   esi
c000d7b0:	57                   	push   edi
c000d7b1:	e8 8a 2f ff ff       	call   c0000740 <strcpy>
c000d7b6:	83 c4 10             	add    esp,0x10
c000d7b9:	31 c0                	xor    eax,eax
c000d7bb:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d7c1:	5b                   	pop    ebx
c000d7c2:	5e                   	pop    esi
c000d7c3:	5f                   	pop    edi
c000d7c4:	5d                   	pop    ebp
c000d7c5:	c3                   	ret    

c000d7c6 <Directory::Directory(char const*, Process*)>:
c000d7c6:	83 ec 0c             	sub    esp,0xc
c000d7c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cd:	83 ec 08             	sub    esp,0x8
c000d7d0:	6a 00                	push   0x0
c000d7d2:	50                   	push   eax
c000d7d3:	e8 ba dd ff ff       	call   c000b592 <UnixFile::UnixFile(int)>
c000d7d8:	83 c4 10             	add    esp,0x10
c000d7db:	ba 70 4a 02 c0       	mov    edx,0xc0024a70
c000d7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e4:	89 10                	mov    DWORD PTR [eax],edx
c000d7e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d7ea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f4:	83 c0 0d             	add    eax,0xd
c000d7f7:	83 ec 04             	sub    esp,0x4
c000d7fa:	52                   	push   edx
c000d7fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ff:	50                   	push   eax
c000d800:	e8 b7 f8 ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d80f:	8d 50 bf             	lea    edx,[eax-0x41]
c000d812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d816:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d820:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d828:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d82e:	0f b6 c0             	movzx  eax,al
c000d831:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c000d838:	85 c0                	test   eax,eax
c000d83a:	74 5e                	je     c000d89a <Directory::Directory(char const*, Process*)+0xd4>
c000d83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d840:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d846:	0f b6 c0             	movzx  eax,al
c000d849:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c000d850:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d856:	85 c0                	test   eax,eax
c000d858:	75 40                	jne    c000d89a <Directory::Directory(char const*, Process*)+0xd4>
c000d85a:	83 ec 0c             	sub    esp,0xc
c000d85d:	68 b8 49 02 c0       	push   0xc00249b8
c000d862:	e8 94 f4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d867:	83 c4 10             	add    esp,0x10
c000d86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d874:	0f b6 c0             	movzx  eax,al
c000d877:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c000d87e:	83 ec 0c             	sub    esp,0xc
c000d881:	50                   	push   eax
c000d882:	e8 ff 2b 00 00       	call   c0010486 <LogicalDisk::mount()>
c000d887:	83 c4 10             	add    esp,0x10
c000d88a:	83 ec 0c             	sub    esp,0xc
c000d88d:	68 95 6a 02 c0       	push   0xc0026a95
c000d892:	e8 64 f4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d897:	83 c4 10             	add    esp,0x10
c000d89a:	90                   	nop
c000d89b:	83 c4 0c             	add    esp,0xc
c000d89e:	c3                   	ret    
c000d89f:	90                   	nop

c000d8a0 <Directory::open()>:
c000d8a0:	53                   	push   ebx
c000d8a1:	b8 0b 00 00 00       	mov    eax,0xb
c000d8a6:	83 ec 08             	sub    esp,0x8
c000d8a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8ad:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d8b4:	80 fa 19             	cmp    dl,0x19
c000d8b7:	77 3d                	ja     c000d8f6 <Directory::open()+0x56>
c000d8b9:	8b 14 95 20 85 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7ae0]
c000d8c0:	85 d2                	test   edx,edx
c000d8c2:	74 32                	je     c000d8f6 <Directory::open()+0x56>
c000d8c4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d8ca:	85 d2                	test   edx,edx
c000d8cc:	74 28                	je     c000d8f6 <Directory::open()+0x56>
c000d8ce:	b8 06 00 00 00       	mov    eax,0x6
c000d8d3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d8d7:	75 1d                	jne    c000d8f6 <Directory::open()+0x56>
c000d8d9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d8df:	50                   	push   eax
c000d8e0:	8b 02                	mov    eax,DWORD PTR [edx]
c000d8e2:	51                   	push   ecx
c000d8e3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d8e6:	51                   	push   ecx
c000d8e7:	52                   	push   edx
c000d8e8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d8eb:	83 c4 10             	add    esp,0x10
c000d8ee:	85 c0                	test   eax,eax
c000d8f0:	75 04                	jne    c000d8f6 <Directory::open()+0x56>
c000d8f2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d8f6:	83 c4 08             	add    esp,0x8
c000d8f9:	5b                   	pop    ebx
c000d8fa:	c3                   	ret    
c000d8fb:	90                   	nop

c000d8fc <Directory::close()>:
c000d8fc:	53                   	push   ebx
c000d8fd:	b8 0b 00 00 00       	mov    eax,0xb
c000d902:	83 ec 08             	sub    esp,0x8
c000d905:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d909:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d910:	80 fa 19             	cmp    dl,0x19
c000d913:	77 41                	ja     c000d956 <Directory::close()+0x5a>
c000d915:	8b 1c 95 20 85 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7ae0]
c000d91c:	85 db                	test   ebx,ebx
c000d91e:	74 36                	je     c000d956 <Directory::close()+0x5a>
c000d920:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d927:	74 2d                	je     c000d956 <Directory::close()+0x5a>
c000d929:	b8 05 00 00 00       	mov    eax,0x5
c000d92e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d932:	74 22                	je     c000d956 <Directory::close()+0x5a>
c000d934:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d938:	8b 04 95 20 85 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7ae0]
c000d93f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d945:	53                   	push   ebx
c000d946:	53                   	push   ebx
c000d947:	8b 10                	mov    edx,DWORD PTR [eax]
c000d949:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d94f:	50                   	push   eax
c000d950:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d953:	83 c4 10             	add    esp,0x10
c000d956:	83 c4 08             	add    esp,0x8
c000d959:	5b                   	pop    ebx
c000d95a:	c3                   	ret    
c000d95b:	90                   	nop

c000d95c <Directory::unlink()>:
c000d95c:	83 ec 0c             	sub    esp,0xc
c000d95f:	b8 0b 00 00 00       	mov    eax,0xb
c000d964:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d968:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d96f:	80 f9 19             	cmp    cl,0x19
c000d972:	77 2f                	ja     c000d9a3 <Directory::unlink()+0x47>
c000d974:	8b 0c 8d 20 85 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7ae0]
c000d97b:	85 c9                	test   ecx,ecx
c000d97d:	74 24                	je     c000d9a3 <Directory::unlink()+0x47>
c000d97f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d985:	85 c9                	test   ecx,ecx
c000d987:	74 1a                	je     c000d9a3 <Directory::unlink()+0x47>
c000d989:	b8 06 00 00 00       	mov    eax,0x6
c000d98e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d992:	75 0f                	jne    c000d9a3 <Directory::unlink()+0x47>
c000d994:	83 c2 0d             	add    edx,0xd
c000d997:	50                   	push   eax
c000d998:	50                   	push   eax
c000d999:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d99b:	52                   	push   edx
c000d99c:	51                   	push   ecx
c000d99d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	83 c4 0c             	add    esp,0xc
c000d9a6:	c3                   	ret    
c000d9a7:	90                   	nop

c000d9a8 <Directory::rename(char const*)>:
c000d9a8:	83 ec 0c             	sub    esp,0xc
c000d9ab:	b8 0b 00 00 00       	mov    eax,0xb
c000d9b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9bb:	80 f9 19             	cmp    cl,0x19
c000d9be:	77 32                	ja     c000d9f2 <Directory::rename(char const*)+0x4a>
c000d9c0:	8b 0c 8d 20 85 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7ae0]
c000d9c7:	85 c9                	test   ecx,ecx
c000d9c9:	74 27                	je     c000d9f2 <Directory::rename(char const*)+0x4a>
c000d9cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9d1:	85 c9                	test   ecx,ecx
c000d9d3:	74 1d                	je     c000d9f2 <Directory::rename(char const*)+0x4a>
c000d9d5:	b8 06 00 00 00       	mov    eax,0x6
c000d9da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d9de:	75 12                	jne    c000d9f2 <Directory::rename(char const*)+0x4a>
c000d9e0:	83 c2 0d             	add    edx,0xd
c000d9e3:	50                   	push   eax
c000d9e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9ea:	52                   	push   edx
c000d9eb:	51                   	push   ecx
c000d9ec:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d9ef:	83 c4 10             	add    esp,0x10
c000d9f2:	83 c4 0c             	add    esp,0xc
c000d9f5:	c3                   	ret    

c000d9f6 <Directory::exists()>:
c000d9f6:	83 ec 0c             	sub    esp,0xc
c000d9f9:	31 c0                	xor    eax,eax
c000d9fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9ff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000da06:	80 f9 19             	cmp    cl,0x19
c000da09:	77 24                	ja     c000da2f <Directory::exists()+0x39>
c000da0b:	8b 0c 8d 20 85 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7ae0]
c000da12:	85 c9                	test   ecx,ecx
c000da14:	74 19                	je     c000da2f <Directory::exists()+0x39>
c000da16:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000da1c:	85 c9                	test   ecx,ecx
c000da1e:	74 0f                	je     c000da2f <Directory::exists()+0x39>
c000da20:	83 c2 0d             	add    edx,0xd
c000da23:	50                   	push   eax
c000da24:	50                   	push   eax
c000da25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da27:	52                   	push   edx
c000da28:	51                   	push   ecx
c000da29:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000da2c:	83 c4 10             	add    esp,0x10
c000da2f:	83 c4 0c             	add    esp,0xc
c000da32:	c3                   	ret    
c000da33:	90                   	nop

c000da34 <Directory::read(dirent*)>:
c000da34:	83 ec 1c             	sub    esp,0x1c
c000da37:	b8 0b 00 00 00       	mov    eax,0xb
c000da3c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da40:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000da47:	80 fa 19             	cmp    dl,0x19
c000da4a:	77 30                	ja     c000da7c <Directory::read(dirent*)+0x48>
c000da4c:	8b 14 95 20 85 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7ae0]
c000da53:	85 d2                	test   edx,edx
c000da55:	74 25                	je     c000da7c <Directory::read(dirent*)+0x48>
c000da57:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da5e:	74 1c                	je     c000da7c <Directory::read(dirent*)+0x48>
c000da60:	83 ec 0c             	sub    esp,0xc
c000da63:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da65:	8d 54 24 18          	lea    edx,[esp+0x18]
c000da69:	52                   	push   edx
c000da6a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da6e:	6a 00                	push   0x0
c000da70:	68 10 01 00 00       	push   0x110
c000da75:	51                   	push   ecx
c000da76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000da79:	83 c4 20             	add    esp,0x20
c000da7c:	83 c4 1c             	add    esp,0x1c
c000da7f:	c3                   	ret    

c000da80 <Directory::create()>:
c000da80:	83 ec 0c             	sub    esp,0xc
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da8c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000da93:	80 f9 19             	cmp    cl,0x19
c000da96:	77 2f                	ja     c000dac7 <Directory::create()+0x47>
c000da98:	8b 0c 8d 20 85 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7ae0]
c000da9f:	85 c9                	test   ecx,ecx
c000daa1:	74 24                	je     c000dac7 <Directory::create()+0x47>
c000daa3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000daa9:	85 c9                	test   ecx,ecx
c000daab:	74 1a                	je     c000dac7 <Directory::create()+0x47>
c000daad:	b8 06 00 00 00       	mov    eax,0x6
c000dab2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dab6:	75 0f                	jne    c000dac7 <Directory::create()+0x47>
c000dab8:	83 c2 0d             	add    edx,0xd
c000dabb:	50                   	push   eax
c000dabc:	50                   	push   eax
c000dabd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dabf:	52                   	push   edx
c000dac0:	51                   	push   ecx
c000dac1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	83 c4 0c             	add    esp,0xc
c000daca:	c3                   	ret    
c000dacb:	90                   	nop

c000dacc <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000dacc:	b8 0a 00 00 00       	mov    eax,0xa
c000dad1:	c3                   	ret    
c000dad2:	66 90                	xchg   ax,ax

c000dad4 <Bus::Bus(char const*)>:
c000dad4:	83 ec 0c             	sub    esp,0xc
c000dad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dadb:	83 ec 08             	sub    esp,0x8
c000dade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dae2:	50                   	push   eax
c000dae3:	e8 8a 09 00 00       	call   c000e472 <Device::Device(char const*)>
c000dae8:	83 c4 10             	add    esp,0x10
c000daeb:	ba 8c 4a 02 c0       	mov    edx,0xc0024a8c
c000daf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf4:	89 10                	mov    DWORD PTR [eax],edx
c000daf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dafa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000db04:	90                   	nop
c000db05:	83 c4 0c             	add    esp,0xc
c000db08:	c3                   	ret    
c000db09:	90                   	nop
c000db0a:	66 90                	xchg   ax,ax

c000db0c <Bus::~Bus()>:
c000db0c:	83 ec 0c             	sub    esp,0xc
c000db0f:	ba 8c 4a 02 c0       	mov    edx,0xc0024a8c
c000db14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db18:	89 10                	mov    DWORD PTR [eax],edx
c000db1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db1e:	83 ec 0c             	sub    esp,0xc
c000db21:	50                   	push   eax
c000db22:	e8 15 06 00 00       	call   c000e13c <Device::~Device()>
c000db27:	83 c4 10             	add    esp,0x10
c000db2a:	90                   	nop
c000db2b:	83 c4 0c             	add    esp,0xc
c000db2e:	c3                   	ret    
c000db2f:	90                   	nop

c000db30 <Bus::~Bus()>:
c000db30:	83 ec 0c             	sub    esp,0xc
c000db33:	83 ec 0c             	sub    esp,0xc
c000db36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db3a:	e8 cd ff ff ff       	call   c000db0c <Bus::~Bus()>
c000db3f:	83 c4 10             	add    esp,0x10
c000db42:	83 ec 08             	sub    esp,0x8
c000db45:	68 58 01 00 00       	push   0x158
c000db4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4e:	e8 c7 f0 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000db53:	83 c4 10             	add    esp,0x10
c000db56:	83 c4 0c             	add    esp,0xc
c000db59:	c3                   	ret    
c000db5a:	66 90                	xchg   ax,ax

c000db5c <Buzzer::Buzzer(char const*)>:
c000db5c:	83 ec 0c             	sub    esp,0xc
c000db5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db63:	83 ec 08             	sub    esp,0x8
c000db66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db6a:	50                   	push   eax
c000db6b:	e8 02 09 00 00       	call   c000e472 <Device::Device(char const*)>
c000db70:	83 c4 10             	add    esp,0x10
c000db73:	ba b8 4a 02 c0       	mov    edx,0xc0024ab8
c000db78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db7c:	89 10                	mov    DWORD PTR [eax],edx
c000db7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db82:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000db8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db90:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000db9a:	90                   	nop
c000db9b:	83 c4 0c             	add    esp,0xc
c000db9e:	c3                   	ret    
c000db9f:	90                   	nop

c000dba0 <Buzzer::~Buzzer()>:
c000dba0:	83 ec 0c             	sub    esp,0xc
c000dba3:	ba b8 4a 02 c0       	mov    edx,0xc0024ab8
c000dba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbac:	89 10                	mov    DWORD PTR [eax],edx
c000dbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb2:	83 ec 0c             	sub    esp,0xc
c000dbb5:	50                   	push   eax
c000dbb6:	e8 81 05 00 00       	call   c000e13c <Device::~Device()>
c000dbbb:	83 c4 10             	add    esp,0x10
c000dbbe:	90                   	nop
c000dbbf:	83 c4 0c             	add    esp,0xc
c000dbc2:	c3                   	ret    
c000dbc3:	90                   	nop

c000dbc4 <Buzzer::~Buzzer()>:
c000dbc4:	83 ec 0c             	sub    esp,0xc
c000dbc7:	83 ec 0c             	sub    esp,0xc
c000dbca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbce:	e8 cd ff ff ff       	call   c000dba0 <Buzzer::~Buzzer()>
c000dbd3:	83 c4 10             	add    esp,0x10
c000dbd6:	83 ec 08             	sub    esp,0x8
c000dbd9:	68 5c 01 00 00       	push   0x15c
c000dbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe2:	e8 33 f0 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000dbe7:	83 c4 10             	add    esp,0x10
c000dbea:	83 c4 0c             	add    esp,0xc
c000dbed:	c3                   	ret    

c000dbee <Buzzer::stop()>:
c000dbee:	83 ec 14             	sub    esp,0x14
c000dbf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dbf5:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbf7:	6a 00                	push   0x0
c000dbf9:	50                   	push   eax
c000dbfa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dbfd:	83 c4 1c             	add    esp,0x1c
c000dc00:	c3                   	ret    

c000dc01 <beepThread(void*)>:
c000dc01:	53                   	push   ebx
c000dc02:	83 ec 08             	sub    esp,0x8
c000dc05:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000dc0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc0e:	48                   	dec    eax
c000dc0f:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000dc14:	75 02                	jne    c000dc18 <beepThread(void*)+0x17>
c000dc16:	fb                   	sti    
c000dc17:	90                   	nop
c000dc18:	83 ec 0c             	sub    esp,0xc
c000dc1b:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000dc22:	50                   	push   eax
c000dc23:	e8 8c ad 00 00       	call   c00189b4 <milliTenthSleep(unsigned int)>
c000dc28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc2b:	e8 be ff ff ff       	call   c000dbee <Buzzer::stop()>
c000dc30:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000dc38:	83 c4 18             	add    esp,0x18
c000dc3b:	5b                   	pop    ebx
c000dc3c:	e9 73 ac 00 00       	jmp    c00188b4 <blockTask(TaskState)>
c000dc41:	90                   	nop

c000dc42 <Buzzer::beep(int, int, bool)>:
c000dc42:	57                   	push   edi
c000dc43:	56                   	push   esi
c000dc44:	53                   	push   ebx
c000dc45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc49:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000dc4d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000dc51:	50                   	push   eax
c000dc52:	50                   	push   eax
c000dc53:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc59:	53                   	push   ebx
c000dc5a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc5d:	83 c4 10             	add    esp,0x10
c000dc60:	89 f8                	mov    eax,edi
c000dc62:	84 c0                	test   al,al
c000dc64:	74 1e                	je     c000dc84 <Buzzer::beep(int, int, bool)+0x42>
c000dc66:	83 ec 0c             	sub    esp,0xc
c000dc69:	6b f6 0a             	imul   esi,esi,0xa
c000dc6c:	56                   	push   esi
c000dc6d:	e8 42 ad 00 00       	call   c00189b4 <milliTenthSleep(unsigned int)>
c000dc72:	83 c4 10             	add    esp,0x10
c000dc75:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dc79:	5b                   	pop    ebx
c000dc7a:	5e                   	pop    esi
c000dc7b:	5f                   	pop    edi
c000dc7c:	e9 6d ff ff ff       	jmp    c000dbee <Buzzer::stop()>
c000dc81:	8d 76 00             	lea    esi,[esi+0x0]
c000dc84:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dc8a:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000dc8f:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dc97:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dc9b:	c7 44 24 14 01 dc 00 c0 	mov    DWORD PTR [esp+0x14],0xc000dc01
c000dca3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dca7:	5b                   	pop    ebx
c000dca8:	5e                   	pop    esi
c000dca9:	5f                   	pop    edi
c000dcaa:	e9 f1 a7 00 00       	jmp    c00184a0 <Process::createThread(void (*)(void*), void*, int)>
c000dcaf:	90                   	nop

c000dcb0 <User::loadClockSettings(int)>:
c000dcb0:	53                   	push   ebx
c000dcb1:	83 ec 14             	sub    esp,0x14
c000dcb4:	68 14 01 00 00       	push   0x114
c000dcb9:	e8 51 bd ff ff       	call   c0009a0f <malloc>
c000dcbe:	83 c4 0c             	add    esp,0xc
c000dcc1:	89 c3                	mov    ebx,eax
c000dcc3:	ff 35 b0 94 02 c0    	push   DWORD PTR ds:0xc00294b0
c000dcc9:	68 e0 4a 02 c0       	push   0xc0024ae0
c000dcce:	50                   	push   eax
c000dccf:	e8 92 f5 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c000dcd4:	58                   	pop    eax
c000dcd5:	5a                   	pop    edx
c000dcd6:	6a 01                	push   0x1
c000dcd8:	53                   	push   ebx
c000dcd9:	e8 62 f6 ff ff       	call   c000d340 <File::open(FileOpenMode)>
c000dcde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dce1:	e8 b8 f6 ff ff       	call   c000d39e <File::close()>
c000dce6:	83 c4 10             	add    esp,0x10
c000dce9:	85 db                	test   ebx,ebx
c000dceb:	74 0f                	je     c000dcfc <User::loadClockSettings(int)+0x4c>
c000dced:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dcf3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dcf6:	83 c4 08             	add    esp,0x8
c000dcf9:	5b                   	pop    ebx
c000dcfa:	ff e0                	jmp    eax
c000dcfc:	83 c4 08             	add    esp,0x8
c000dcff:	5b                   	pop    ebx
c000dd00:	c3                   	ret    
c000dd01:	90                   	nop

c000dd02 <Clock::Clock(char const*)>:
c000dd02:	83 ec 0c             	sub    esp,0xc
c000dd05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd09:	83 ec 08             	sub    esp,0x8
c000dd0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd10:	50                   	push   eax
c000dd11:	e8 5c 07 00 00       	call   c000e472 <Device::Device(char const*)>
c000dd16:	83 c4 10             	add    esp,0x10
c000dd19:	ba 08 4b 02 c0       	mov    edx,0xc0024b08
c000dd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd22:	89 10                	mov    DWORD PTR [eax],edx
c000dd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd28:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000dd32:	90                   	nop
c000dd33:	83 c4 0c             	add    esp,0xc
c000dd36:	c3                   	ret    
c000dd37:	90                   	nop

c000dd38 <Clock::~Clock()>:
c000dd38:	83 ec 0c             	sub    esp,0xc
c000dd3b:	ba 08 4b 02 c0       	mov    edx,0xc0024b08
c000dd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd44:	89 10                	mov    DWORD PTR [eax],edx
c000dd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd4a:	83 ec 0c             	sub    esp,0xc
c000dd4d:	50                   	push   eax
c000dd4e:	e8 e9 03 00 00       	call   c000e13c <Device::~Device()>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	90                   	nop
c000dd57:	83 c4 0c             	add    esp,0xc
c000dd5a:	c3                   	ret    
c000dd5b:	90                   	nop

c000dd5c <Clock::~Clock()>:
c000dd5c:	83 ec 0c             	sub    esp,0xc
c000dd5f:	83 ec 0c             	sub    esp,0xc
c000dd62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd66:	e8 cd ff ff ff       	call   c000dd38 <Clock::~Clock()>
c000dd6b:	83 c4 10             	add    esp,0x10
c000dd6e:	83 ec 08             	sub    esp,0x8
c000dd71:	68 58 01 00 00       	push   0x158
c000dd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd7a:	e8 9b ee ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000dd7f:	83 c4 10             	add    esp,0x10
c000dd82:	83 c4 0c             	add    esp,0xc
c000dd85:	c3                   	ret    

c000dd86 <Clock::timeInSecondsLocal()>:
c000dd86:	53                   	push   ebx
c000dd87:	83 ec 14             	sub    esp,0x14
c000dd8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd8e:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd90:	50                   	push   eax
c000dd91:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dd94:	0f b6 0d 9c 80 02 c0 	movzx  ecx,BYTE PTR ds:0xc002809c
c000dd9b:	03 0d a0 80 02 c0    	add    ecx,DWORD PTR ds:0xc00280a0
c000dda1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dda7:	89 cb                	mov    ebx,ecx
c000dda9:	c1 fb 1f             	sar    ebx,0x1f
c000ddac:	01 c8                	add    eax,ecx
c000ddae:	11 da                	adc    edx,ebx
c000ddb0:	83 c4 10             	add    esp,0x10
c000ddb3:	31 c9                	xor    ecx,ecx
c000ddb5:	80 3d 9d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002809d,0x0
c000ddbc:	74 05                	je     c000ddc3 <Clock::timeInSecondsLocal()+0x3d>
c000ddbe:	b9 08 07 00 00       	mov    ecx,0x708
c000ddc3:	31 db                	xor    ebx,ebx
c000ddc5:	01 c8                	add    eax,ecx
c000ddc7:	11 da                	adc    edx,ebx
c000ddc9:	83 c4 08             	add    esp,0x8
c000ddcc:	5b                   	pop    ebx
c000ddcd:	c3                   	ret    

c000ddce <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000ddce:	57                   	push   edi
c000ddcf:	56                   	push   esi
c000ddd0:	53                   	push   ebx
c000ddd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ddd5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ddd9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dddb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dddf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dde2:	0f b6 05 9c 80 02 c0 	movzx  eax,BYTE PTR ds:0xc002809c
c000dde9:	03 05 a0 80 02 c0    	add    eax,DWORD PTR ds:0xc00280a0
c000ddef:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ddf5:	99                   	cdq    
c000ddf6:	29 c6                	sub    esi,eax
c000ddf8:	19 d7                	sbb    edi,edx
c000ddfa:	89 f0                	mov    eax,esi
c000ddfc:	89 fa                	mov    edx,edi
c000ddfe:	31 f6                	xor    esi,esi
c000de00:	80 3d 9d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002809d,0x0
c000de07:	74 05                	je     c000de0e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000de09:	be 08 07 00 00       	mov    esi,0x708
c000de0e:	31 ff                	xor    edi,edi
c000de10:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000de14:	29 f0                	sub    eax,esi
c000de16:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000de1a:	19 fa                	sbb    edx,edi
c000de1c:	89 d8                	mov    eax,ebx
c000de1e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000de22:	5b                   	pop    ebx
c000de23:	5e                   	pop    esi
c000de24:	5f                   	pop    edi
c000de25:	ff e0                	jmp    eax

c000de27 <datetimeToSeconds(datetime_t)>:
c000de27:	55                   	push   ebp
c000de28:	57                   	push   edi
c000de29:	56                   	push   esi
c000de2a:	53                   	push   ebx
c000de2b:	83 ec 14             	sub    esp,0x14
c000de2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000de32:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000de36:	89 d3                	mov    ebx,edx
c000de38:	0f b6 c6             	movzx  eax,dh
c000de3b:	c1 eb 10             	shr    ebx,0x10
c000de3e:	48                   	dec    eax
c000de3f:	66 81 eb 6c 07       	sub    bx,0x76c
c000de44:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000de48:	0f b6 f5             	movzx  esi,ch
c000de4b:	89 cf                	mov    edi,ecx
c000de4d:	6b f6 3c             	imul   esi,esi,0x3c
c000de50:	c1 ef 10             	shr    edi,0x10
c000de53:	0f b6 c9             	movzx  ecx,cl
c000de56:	89 f8                	mov    eax,edi
c000de58:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000de5e:	0f b6 f8             	movzx  edi,al
c000de61:	0f b6 d2             	movzx  edx,dl
c000de64:	01 fe                	add    esi,edi
c000de66:	01 f1                	add    ecx,esi
c000de68:	0f b7 f3             	movzx  esi,bx
c000de6b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000de6f:	c1 f9 1f             	sar    ecx,0x1f
c000de72:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000de77:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000de7b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000de80:	8b 0c 8d 40 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb4c0]
c000de87:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000de8b:	76 29                	jbe    c000deb6 <datetimeToSeconds(datetime_t)+0x8f>
c000de8d:	f6 c3 03             	test   bl,0x3
c000de90:	75 24                	jne    c000deb6 <datetimeToSeconds(datetime_t)+0x8f>
c000de92:	31 d2                	xor    edx,edx
c000de94:	bf 64 00 00 00       	mov    edi,0x64
c000de99:	89 d8                	mov    eax,ebx
c000de9b:	66 f7 f7             	div    di
c000de9e:	66 85 d2             	test   dx,dx
c000dea1:	75 12                	jne    c000deb5 <datetimeToSeconds(datetime_t)+0x8e>
c000dea3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000dea9:	bf 90 01 00 00       	mov    edi,0x190
c000deae:	99                   	cdq    
c000deaf:	f7 ff                	idiv   edi
c000deb1:	85 d2                	test   edx,edx
c000deb3:	75 01                	jne    c000deb6 <datetimeToSeconds(datetime_t)+0x8f>
c000deb5:	41                   	inc    ecx
c000deb6:	66 83 fb 46          	cmp    bx,0x46
c000deba:	76 45                	jbe    c000df01 <datetimeToSeconds(datetime_t)+0xda>
c000debc:	bb 46 00 00 00       	mov    ebx,0x46
c000dec1:	bf 64 00 00 00       	mov    edi,0x64
c000dec6:	bd 90 01 00 00       	mov    ebp,0x190
c000decb:	b8 6d 01 00 00       	mov    eax,0x16d
c000ded0:	f6 c3 03             	test   bl,0x3
c000ded3:	75 23                	jne    c000def8 <datetimeToSeconds(datetime_t)+0xd1>
c000ded5:	89 d8                	mov    eax,ebx
c000ded7:	99                   	cdq    
c000ded8:	f7 ff                	idiv   edi
c000deda:	b8 6e 01 00 00       	mov    eax,0x16e
c000dedf:	85 d2                	test   edx,edx
c000dee1:	75 15                	jne    c000def8 <datetimeToSeconds(datetime_t)+0xd1>
c000dee3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000dee9:	99                   	cdq    
c000deea:	f7 fd                	idiv   ebp
c000deec:	83 fa 01             	cmp    edx,0x1
c000deef:	19 c0                	sbb    eax,eax
c000def1:	f7 d0                	not    eax
c000def3:	05 6e 01 00 00       	add    eax,0x16e
c000def8:	01 c1                	add    ecx,eax
c000defa:	43                   	inc    ebx
c000defb:	39 f3                	cmp    ebx,esi
c000defd:	7c cc                	jl     c000decb <datetimeToSeconds(datetime_t)+0xa4>
c000deff:	eb 35                	jmp    c000df36 <datetimeToSeconds(datetime_t)+0x10f>
c000df01:	74 33                	je     c000df36 <datetimeToSeconds(datetime_t)+0x10f>
c000df03:	b8 45 00 00 00       	mov    eax,0x45
c000df08:	89 c2                	mov    edx,eax
c000df0a:	83 e2 03             	and    edx,0x3
c000df0d:	39 f0                	cmp    eax,esi
c000df0f:	7e 0f                	jle    c000df20 <datetimeToSeconds(datetime_t)+0xf9>
c000df11:	83 fa 01             	cmp    edx,0x1
c000df14:	19 d2                	sbb    edx,edx
c000df16:	48                   	dec    eax
c000df17:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000df1e:	eb e8                	jmp    c000df08 <datetimeToSeconds(datetime_t)+0xe1>
c000df20:	b8 6d 01 00 00       	mov    eax,0x16d
c000df25:	85 d2                	test   edx,edx
c000df27:	75 0b                	jne    c000df34 <datetimeToSeconds(datetime_t)+0x10d>
c000df29:	66 83 fb 01          	cmp    bx,0x1
c000df2d:	19 c0                	sbb    eax,eax
c000df2f:	05 6e 01 00 00       	add    eax,0x16e
c000df34:	29 c1                	sub    ecx,eax
c000df36:	b8 80 51 01 00       	mov    eax,0x15180
c000df3b:	f7 e9                	imul   ecx
c000df3d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000df41:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000df45:	83 c4 14             	add    esp,0x14
c000df48:	5b                   	pop    ebx
c000df49:	5e                   	pop    esi
c000df4a:	5f                   	pop    edi
c000df4b:	5d                   	pop    ebp
c000df4c:	c3                   	ret    
c000df4d:	90                   	nop

c000df4e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000df4e:	57                   	push   edi
c000df4f:	56                   	push   esi
c000df50:	53                   	push   ebx
c000df51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df55:	8b 06                	mov    eax,DWORD PTR [esi]
c000df57:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000df5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df62:	e8 c0 fe ff ff       	call   c000de27 <datetimeToSeconds(datetime_t)>
c000df67:	59                   	pop    ecx
c000df68:	0f b6 0d 9c 80 02 c0 	movzx  ecx,BYTE PTR ds:0xc002809c
c000df6f:	5b                   	pop    ebx
c000df70:	03 0d a0 80 02 c0    	add    ecx,DWORD PTR ds:0xc00280a0
c000df76:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000df7c:	89 cb                	mov    ebx,ecx
c000df7e:	c1 fb 1f             	sar    ebx,0x1f
c000df81:	29 c8                	sub    eax,ecx
c000df83:	19 da                	sbb    edx,ebx
c000df85:	31 c9                	xor    ecx,ecx
c000df87:	80 3d 9d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002809d,0x0
c000df8e:	74 05                	je     c000df95 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000df90:	b9 08 07 00 00       	mov    ecx,0x708
c000df95:	31 db                	xor    ebx,ebx
c000df97:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000df9b:	29 c8                	sub    eax,ecx
c000df9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfa1:	19 da                	sbb    edx,ebx
c000dfa3:	89 f8                	mov    eax,edi
c000dfa5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfa9:	5b                   	pop    ebx
c000dfaa:	5e                   	pop    esi
c000dfab:	5f                   	pop    edi
c000dfac:	ff e0                	jmp    eax

c000dfae <secondsToDatetime(unsigned long long)>:
c000dfae:	55                   	push   ebp
c000dfaf:	57                   	push   edi
c000dfb0:	56                   	push   esi
c000dfb1:	53                   	push   ebx
c000dfb2:	83 ec 1c             	sub    esp,0x1c
c000dfb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dfb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dfbd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dfc1:	6a 00                	push   0x0
c000dfc3:	68 80 51 01 00       	push   0x15180
c000dfc8:	55                   	push   ebp
c000dfc9:	57                   	push   edi
c000dfca:	e8 75 47 01 00       	call   c0022744 <__udivdi3>
c000dfcf:	83 c4 10             	add    esp,0x10
c000dfd2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dfd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfdc:	6a 00                	push   0x0
c000dfde:	68 80 51 01 00       	push   0x15180
c000dfe3:	55                   	push   ebp
c000dfe4:	57                   	push   edi
c000dfe5:	bf 10 0e 00 00       	mov    edi,0xe10
c000dfea:	e8 55 48 01 00       	call   c0022844 <__umoddi3>
c000dfef:	83 c4 10             	add    esp,0x10
c000dff2:	99                   	cdq    
c000dff3:	f7 ff                	idiv   edi
c000dff5:	bf 3c 00 00 00       	mov    edi,0x3c
c000dffa:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dffd:	89 d0                	mov    eax,edx
c000dfff:	99                   	cdq    
c000e000:	f7 ff                	idiv   edi
c000e002:	85 db                	test   ebx,ebx
c000e004:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e007:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e00a:	79 11                	jns    c000e01d <secondsToDatetime(unsigned long long)+0x6f>
c000e00c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e010:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e016:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e01b:	eb 07                	jmp    c000e024 <secondsToDatetime(unsigned long long)+0x76>
c000e01d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e022:	89 d8                	mov    eax,ebx
c000e024:	bf b4 05 00 00       	mov    edi,0x5b4
c000e029:	99                   	cdq    
c000e02a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e02f:	f7 f9                	idiv   ecx
c000e031:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e036:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e03a:	31 d2                	xor    edx,edx
c000e03c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e044:	01 c3                	add    ebx,eax
c000e046:	89 d8                	mov    eax,ebx
c000e048:	f7 f1                	div    ecx
c000e04a:	31 d2                	xor    edx,edx
c000e04c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e04f:	89 d8                	mov    eax,ebx
c000e051:	f7 f7                	div    edi
c000e053:	31 d2                	xor    edx,edx
c000e055:	29 c1                	sub    ecx,eax
c000e057:	89 d8                	mov    eax,ebx
c000e059:	f7 f5                	div    ebp
c000e05b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e060:	29 c1                	sub    ecx,eax
c000e062:	31 d2                	xor    edx,edx
c000e064:	89 c8                	mov    eax,ecx
c000e066:	f7 f5                	div    ebp
c000e068:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e06d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e071:	31 d2                	xor    edx,edx
c000e073:	89 c8                	mov    eax,ecx
c000e075:	f7 f5                	div    ebp
c000e077:	31 d2                	xor    edx,edx
c000e079:	01 c3                	add    ebx,eax
c000e07b:	89 c8                	mov    eax,ecx
c000e07d:	f7 f7                	div    edi
c000e07f:	bf 99 00 00 00       	mov    edi,0x99
c000e084:	29 c3                	sub    ebx,eax
c000e086:	31 d2                	xor    edx,edx
c000e088:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e090:	29 c3                	sub    ebx,eax
c000e092:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e095:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e098:	bb 05 00 00 00       	mov    ebx,0x5
c000e09d:	83 c1 02             	add    ecx,0x2
c000e0a0:	89 c8                	mov    eax,ecx
c000e0a2:	f7 f7                	div    edi
c000e0a4:	31 d2                	xor    edx,edx
c000e0a6:	89 c7                	mov    edi,eax
c000e0a8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e0ae:	83 c0 02             	add    eax,0x2
c000e0b1:	f7 f3                	div    ebx
c000e0b3:	89 eb                	mov    ebx,ebp
c000e0b5:	29 c3                	sub    ebx,eax
c000e0b7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e0bd:	88 1e                	mov    BYTE PTR [esi],bl
c000e0bf:	19 c0                	sbb    eax,eax
c000e0c1:	31 d2                	xor    edx,edx
c000e0c3:	83 e0 0c             	and    eax,0xc
c000e0c6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e0ca:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e0d2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e0d6:	83 f9 01             	cmp    ecx,0x1
c000e0d9:	0f 96 c2             	setbe  dl
c000e0dc:	41                   	inc    ecx
c000e0dd:	01 d0                	add    eax,edx
c000e0df:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e0e2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e0e6:	83 c4 1c             	add    esp,0x1c
c000e0e9:	89 f0                	mov    eax,esi
c000e0eb:	5b                   	pop    ebx
c000e0ec:	5e                   	pop    esi
c000e0ed:	5f                   	pop    edi
c000e0ee:	5d                   	pop    ebp
c000e0ef:	c2 04 00             	ret    0x4

c000e0f2 <Clock::timeInDatetimeLocal()>:
c000e0f2:	53                   	push   ebx
c000e0f3:	83 ec 14             	sub    esp,0x14
c000e0f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e0fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e0fe:	e8 83 fc ff ff       	call   c000dd86 <Clock::timeInSecondsLocal()>
c000e103:	83 c4 0c             	add    esp,0xc
c000e106:	52                   	push   edx
c000e107:	50                   	push   eax
c000e108:	53                   	push   ebx
c000e109:	e8 a0 fe ff ff       	call   c000dfae <secondsToDatetime(unsigned long long)>
c000e10e:	89 d8                	mov    eax,ebx
c000e110:	83 c4 14             	add    esp,0x14
c000e113:	5b                   	pop    ebx
c000e114:	c2 04 00             	ret    0x4
c000e117:	90                   	nop

c000e118 <Device::hibernate()>:
c000e118:	c3                   	ret    
c000e119:	90                   	nop

c000e11a <Device::wake()>:
c000e11a:	c3                   	ret    
c000e11b:	90                   	nop

c000e11c <Device::detect()>:
c000e11c:	c3                   	ret    
c000e11d:	90                   	nop

c000e11e <Device::disableLegacy()>:
c000e11e:	c3                   	ret    
c000e11f:	90                   	nop

c000e120 <Device::powerSaving(PowerSavingLevel)>:
c000e120:	c3                   	ret    
c000e121:	90                   	nop

c000e122 <DriverlessDevice::close(int, int, void*)>:
c000e122:	31 c0                	xor    eax,eax
c000e124:	c3                   	ret    
c000e125:	90                   	nop

c000e126 <DriverlessDevice::detect()>:
c000e126:	c3                   	ret    
c000e127:	90                   	nop

c000e128 <DriverlessDevice::open(int, int, void*)>:
c000e128:	83 ec 18             	sub    esp,0x18
c000e12b:	68 70 4b 02 c0       	push   0xc0024b70
c000e130:	e8 d2 68 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000e135:	83 c8 ff             	or     eax,0xffffffff
c000e138:	83 c4 1c             	add    esp,0x1c
c000e13b:	c3                   	ret    

c000e13c <Device::~Device()>:
c000e13c:	ba d0 4b 02 c0       	mov    edx,0xc0024bd0
c000e141:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e145:	89 10                	mov    DWORD PTR [eax],edx
c000e147:	90                   	nop
c000e148:	c3                   	ret    
c000e149:	90                   	nop

c000e14a <Device::~Device()>:
c000e14a:	83 ec 0c             	sub    esp,0xc
c000e14d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e151:	e8 e6 ff ff ff       	call   c000e13c <Device::~Device()>
c000e156:	83 c4 04             	add    esp,0x4
c000e159:	83 ec 08             	sub    esp,0x8
c000e15c:	68 58 01 00 00       	push   0x158
c000e161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e165:	e8 b0 ea ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000e16a:	83 c4 10             	add    esp,0x10
c000e16d:	83 c4 0c             	add    esp,0xc
c000e170:	c3                   	ret    
c000e171:	90                   	nop

c000e172 <Device::findAndLoadDriver()>:
c000e172:	c7 44 24 04 8e 4b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024b8e
c000e17a:	e9 7c eb ff ff       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>
c000e17f:	90                   	nop

c000e180 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e180:	57                   	push   edi
c000e181:	b9 09 00 00 00       	mov    ecx,0x9
c000e186:	56                   	push   esi
c000e187:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e18b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e18f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e199:	81 c7 18 01 00 00    	add    edi,0x118
c000e19f:	fc                   	cld    
c000e1a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e1a2:	5e                   	pop    esi
c000e1a3:	5f                   	pop    edi
c000e1a4:	c3                   	ret    
c000e1a5:	90                   	nop

c000e1a6 <Device::preOpenACPI(void*, char*, char*)>:
c000e1a6:	57                   	push   edi
c000e1a7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e1ac:	56                   	push   esi
c000e1ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e1bf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e1c5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e1cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e1cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e1d1:	b9 0e 00 00 00       	mov    ecx,0xe
c000e1d6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e1dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e1e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e1e2:	5e                   	pop    esi
c000e1e3:	5f                   	pop    edi
c000e1e4:	c3                   	ret    
c000e1e5:	90                   	nop

c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e1e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1ea:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e1ef:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e1f6:	75 0b                	jne    c000e203 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e1f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e1fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e201:	eb 1e                	jmp    c000e221 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e203:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000e208:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e20e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e214:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e216:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e21a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e21e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e221:	ff e0                	jmp    eax
c000e223:	90                   	nop

c000e224 <Device::getParent()>:
c000e224:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e228:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e22e:	c3                   	ret    
c000e22f:	90                   	nop

c000e230 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e234:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e239:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e240:	75 0b                	jne    c000e24d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e242:	8b 00                	mov    eax,DWORD PTR [eax]
c000e244:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e248:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e24b:	eb 1e                	jmp    c000e26b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e24d:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000e252:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e258:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e25e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e260:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e264:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e268:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e26b:	ff e0                	jmp    eax
c000e26d:	90                   	nop

c000e26e <Device::addChild(Device*)>:
c000e26e:	53                   	push   ebx
c000e26f:	83 ec 08             	sub    esp,0x8
c000e272:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e276:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e27a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e280:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e286:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e288:	85 d2                	test   edx,edx
c000e28a:	74 04                	je     c000e290 <Device::addChild(Device*)+0x22>
c000e28c:	89 d3                	mov    ebx,edx
c000e28e:	eb f6                	jmp    c000e286 <Device::addChild(Device*)+0x18>
c000e290:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e293:	83 ec 0c             	sub    esp,0xc
c000e296:	6a 08                	push   0x8
c000e298:	e8 72 b7 ff ff       	call   c0009a0f <malloc>
c000e29d:	89 03                	mov    DWORD PTR [ebx],eax
c000e29f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e2a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e2ac:	83 c4 18             	add    esp,0x18
c000e2af:	5b                   	pop    ebx
c000e2b0:	c3                   	ret    
c000e2b1:	90                   	nop

c000e2b2 <Device::removeAllChildren()>:
c000e2b2:	56                   	push   esi
c000e2b3:	53                   	push   ebx
c000e2b4:	52                   	push   edx
c000e2b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2b9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e2bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2c2:	74 17                	je     c000e2db <Device::removeAllChildren()+0x29>
c000e2c4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e2c7:	85 c0                	test   eax,eax
c000e2c9:	74 0c                	je     c000e2d7 <Device::removeAllChildren()+0x25>
c000e2cb:	83 ec 0c             	sub    esp,0xc
c000e2ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2d0:	50                   	push   eax
c000e2d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e2d4:	83 c4 10             	add    esp,0x10
c000e2d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2d9:	eb e4                	jmp    c000e2bf <Device::removeAllChildren()+0xd>
c000e2db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e2e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e2e7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e2ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e2f4:	58                   	pop    eax
c000e2f5:	5b                   	pop    ebx
c000e2f6:	5e                   	pop    esi
c000e2f7:	c3                   	ret    

c000e2f8 <Device::hibernateAll()>:
c000e2f8:	53                   	push   ebx
c000e2f9:	83 ec 14             	sub    esp,0x14
c000e2fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e300:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e302:	53                   	push   ebx
c000e303:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e306:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e30c:	83 c4 10             	add    esp,0x10
c000e30f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e312:	74 0f                	je     c000e323 <Device::hibernateAll()+0x2b>
c000e314:	83 ec 0c             	sub    esp,0xc
c000e317:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e31a:	e8 d9 ff ff ff       	call   c000e2f8 <Device::hibernateAll()>
c000e31f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e321:	eb e9                	jmp    c000e30c <Device::hibernateAll()+0x14>
c000e323:	83 c4 08             	add    esp,0x8
c000e326:	5b                   	pop    ebx
c000e327:	c3                   	ret    

c000e328 <Device::wakeAll()>:
c000e328:	53                   	push   ebx
c000e329:	83 ec 14             	sub    esp,0x14
c000e32c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e330:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e332:	53                   	push   ebx
c000e333:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e336:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e33c:	83 c4 10             	add    esp,0x10
c000e33f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e342:	74 0f                	je     c000e353 <Device::wakeAll()+0x2b>
c000e344:	83 ec 0c             	sub    esp,0xc
c000e347:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e34a:	e8 d9 ff ff ff       	call   c000e328 <Device::wakeAll()>
c000e34f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e351:	eb e9                	jmp    c000e33c <Device::wakeAll()+0x14>
c000e353:	83 c4 08             	add    esp,0x8
c000e356:	5b                   	pop    ebx
c000e357:	c3                   	ret    

c000e358 <Device::detectAll()>:
c000e358:	53                   	push   ebx
c000e359:	83 ec 14             	sub    esp,0x14
c000e35c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e360:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e362:	53                   	push   ebx
c000e363:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e366:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e36c:	83 c4 10             	add    esp,0x10
c000e36f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e372:	74 0f                	je     c000e383 <Device::detectAll()+0x2b>
c000e374:	83 ec 0c             	sub    esp,0xc
c000e377:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e37a:	e8 d9 ff ff ff       	call   c000e358 <Device::detectAll()>
c000e37f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e381:	eb e9                	jmp    c000e36c <Device::detectAll()+0x14>
c000e383:	83 c4 08             	add    esp,0x8
c000e386:	5b                   	pop    ebx
c000e387:	c3                   	ret    

c000e388 <Device::disableLegacyAll()>:
c000e388:	53                   	push   ebx
c000e389:	83 ec 14             	sub    esp,0x14
c000e38c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e390:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e392:	53                   	push   ebx
c000e393:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e396:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e39c:	83 c4 10             	add    esp,0x10
c000e39f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e3a2:	74 0f                	je     c000e3b3 <Device::disableLegacyAll()+0x2b>
c000e3a4:	83 ec 0c             	sub    esp,0xc
c000e3a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e3aa:	e8 d9 ff ff ff       	call   c000e388 <Device::disableLegacyAll()>
c000e3af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e3b1:	eb e9                	jmp    c000e39c <Device::disableLegacyAll()+0x14>
c000e3b3:	83 c4 08             	add    esp,0x8
c000e3b6:	5b                   	pop    ebx
c000e3b7:	c3                   	ret    

c000e3b8 <Device::loadDriversForAll()>:
c000e3b8:	53                   	push   ebx
c000e3b9:	83 ec 08             	sub    esp,0x8
c000e3bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3c0:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e3c7:	75 0c                	jne    c000e3d5 <Device::loadDriversForAll()+0x1d>
c000e3c9:	83 ec 0c             	sub    esp,0xc
c000e3cc:	53                   	push   ebx
c000e3cd:	e8 a0 fd ff ff       	call   c000e172 <Device::findAndLoadDriver()>
c000e3d2:	83 c4 10             	add    esp,0x10
c000e3d5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e3db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e3de:	74 12                	je     c000e3f2 <Device::loadDriversForAll()+0x3a>
c000e3e0:	83 ec 0c             	sub    esp,0xc
c000e3e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e3e6:	e8 cd ff ff ff       	call   c000e3b8 <Device::loadDriversForAll()>
c000e3eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e3ed:	83 c4 10             	add    esp,0x10
c000e3f0:	eb e9                	jmp    c000e3db <Device::loadDriversForAll()+0x23>
c000e3f2:	83 c4 08             	add    esp,0x8
c000e3f5:	5b                   	pop    ebx
c000e3f6:	c3                   	ret    
c000e3f7:	90                   	nop

c000e3f8 <Device::closeAll()>:
c000e3f8:	53                   	push   ebx
c000e3f9:	83 ec 08             	sub    esp,0x8
c000e3fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e400:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e402:	6a 00                	push   0x0
c000e404:	6a 00                	push   0x0
c000e406:	6a 00                	push   0x0
c000e408:	53                   	push   ebx
c000e409:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e40c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e412:	83 c4 10             	add    esp,0x10
c000e415:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e418:	74 0f                	je     c000e429 <Device::closeAll()+0x31>
c000e41a:	83 ec 0c             	sub    esp,0xc
c000e41d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e420:	e8 d3 ff ff ff       	call   c000e3f8 <Device::closeAll()>
c000e425:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e427:	eb e9                	jmp    c000e412 <Device::closeAll()+0x1a>
c000e429:	83 c4 08             	add    esp,0x8
c000e42c:	5b                   	pop    ebx
c000e42d:	c3                   	ret    

c000e42e <Device::powerSavingAll(PowerSavingLevel)>:
c000e42e:	56                   	push   esi
c000e42f:	53                   	push   ebx
c000e430:	83 ec 0c             	sub    esp,0xc
c000e433:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e437:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e43b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e43d:	56                   	push   esi
c000e43e:	53                   	push   ebx
c000e43f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e442:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e448:	83 c4 10             	add    esp,0x10
c000e44b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e44e:	74 0f                	je     c000e45f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e450:	52                   	push   edx
c000e451:	52                   	push   edx
c000e452:	56                   	push   esi
c000e453:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e456:	e8 d3 ff ff ff       	call   c000e42e <Device::powerSavingAll(PowerSavingLevel)>
c000e45b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e45d:	eb e9                	jmp    c000e448 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e45f:	58                   	pop    eax
c000e460:	5b                   	pop    ebx
c000e461:	5e                   	pop    esi
c000e462:	c3                   	ret    
c000e463:	90                   	nop

c000e464 <Device::setName(char const*)>:
c000e464:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e46c:	e9 cf 22 ff ff       	jmp    c0000740 <strcpy>
c000e471:	90                   	nop

c000e472 <Device::Device(char const*)>:
c000e472:	83 ec 1c             	sub    esp,0x1c
c000e475:	ba d0 4b 02 c0       	mov    edx,0xc0024bd0
c000e47a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e47e:	89 10                	mov    DWORD PTR [eax],edx
c000e480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e484:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e48e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e492:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e49c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4a0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e4aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4ae:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e4b8:	83 ec 08             	sub    esp,0x8
c000e4bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4c3:	e8 9c ff ff ff       	call   c000e464 <Device::setName(char const*)>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e4d3:	83 ec 0c             	sub    esp,0xc
c000e4d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4da:	e8 30 b5 ff ff       	call   c0009a0f <malloc>
c000e4df:	83 c4 10             	add    esp,0x10
c000e4e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e4f3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e4f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4fd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e503:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e50d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e513:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e51a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e51e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e525:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e529:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e534:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e53e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e542:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e54c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e550:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e55a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e55e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e568:	90                   	nop
c000e569:	83 c4 1c             	add    esp,0x1c
c000e56c:	c3                   	ret    
c000e56d:	90                   	nop

c000e56e <Device::getName()>:
c000e56e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e572:	05 d0 00 00 00       	add    eax,0xd0
c000e577:	c3                   	ret    

c000e578 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e578:	83 ec 0c             	sub    esp,0xc
c000e57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e57f:	83 ec 08             	sub    esp,0x8
c000e582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e586:	50                   	push   eax
c000e587:	e8 e6 fe ff ff       	call   c000e472 <Device::Device(char const*)>
c000e58c:	83 c4 10             	add    esp,0x10
c000e58f:	ba fc 4b 02 c0       	mov    edx,0xc0024bfc
c000e594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e598:	89 10                	mov    DWORD PTR [eax],edx
c000e59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e59e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e5a8:	90                   	nop
c000e5a9:	83 c4 0c             	add    esp,0xc
c000e5ac:	c3                   	ret    
c000e5ad:	90                   	nop

c000e5ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e5ae:	57                   	push   edi
c000e5af:	56                   	push   esi
c000e5b0:	53                   	push   ebx
c000e5b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e5b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e5b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e5bd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e5c3:	75 0c                	jne    c000e5d1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e5c5:	52                   	push   edx
c000e5c6:	52                   	push   edx
c000e5c7:	53                   	push   ebx
c000e5c8:	56                   	push   esi
c000e5c9:	e8 28 46 01 00       	call   c0022bf6 <LinkedList<Device>::addElement(Device*)>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5da:	74 12                	je     c000e5ee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e5dc:	50                   	push   eax
c000e5dd:	57                   	push   edi
c000e5de:	56                   	push   esi
c000e5df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5e2:	e8 c7 ff ff ff       	call   c000e5ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e5e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5e9:	83 c4 10             	add    esp,0x10
c000e5ec:	eb e9                	jmp    c000e5d7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e5ee:	5b                   	pop    ebx
c000e5ef:	5e                   	pop    esi
c000e5f0:	5f                   	pop    edi
c000e5f1:	c3                   	ret    

c000e5f2 <getDevicesOfType(DeviceType)>:
c000e5f2:	53                   	push   ebx
c000e5f3:	83 ec 14             	sub    esp,0x14
c000e5f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5fa:	53                   	push   ebx
c000e5fb:	e8 d2 46 01 00       	call   c0022cd2 <LinkedList<Device>::LinkedList()>
c000e600:	83 c4 0c             	add    esp,0xc
c000e603:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e607:	53                   	push   ebx
c000e608:	ff 35 68 7f 02 c0    	push   DWORD PTR ds:0xc0027f68
c000e60e:	e8 9b ff ff ff       	call   c000e5ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e613:	89 d8                	mov    eax,ebx
c000e615:	83 c4 18             	add    esp,0x18
c000e618:	5b                   	pop    ebx
c000e619:	c2 04 00             	ret    0x4

c000e61c <HardDiskController::HardDiskController(char const*)>:
c000e61c:	83 ec 0c             	sub    esp,0xc
c000e61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62a:	50                   	push   eax
c000e62b:	e8 42 fe ff ff       	call   c000e472 <Device::Device(char const*)>
c000e630:	83 c4 10             	add    esp,0x10
c000e633:	ba 28 4c 02 c0       	mov    edx,0xc0024c28
c000e638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63c:	89 10                	mov    DWORD PTR [eax],edx
c000e63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e642:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e64c:	90                   	nop
c000e64d:	83 c4 0c             	add    esp,0xc
c000e650:	c3                   	ret    
c000e651:	90                   	nop
c000e652:	66 90                	xchg   ax,ax

c000e654 <HardDiskController::~HardDiskController()>:
c000e654:	83 ec 0c             	sub    esp,0xc
c000e657:	ba 28 4c 02 c0       	mov    edx,0xc0024c28
c000e65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e660:	89 10                	mov    DWORD PTR [eax],edx
c000e662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e666:	83 ec 0c             	sub    esp,0xc
c000e669:	50                   	push   eax
c000e66a:	e8 cd fa ff ff       	call   c000e13c <Device::~Device()>
c000e66f:	83 c4 10             	add    esp,0x10
c000e672:	90                   	nop
c000e673:	83 c4 0c             	add    esp,0xc
c000e676:	c3                   	ret    
c000e677:	90                   	nop

c000e678 <HardDiskController::~HardDiskController()>:
c000e678:	83 ec 0c             	sub    esp,0xc
c000e67b:	83 ec 0c             	sub    esp,0xc
c000e67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e682:	e8 cd ff ff ff       	call   c000e654 <HardDiskController::~HardDiskController()>
c000e687:	83 c4 10             	add    esp,0x10
c000e68a:	83 ec 08             	sub    esp,0x8
c000e68d:	68 58 01 00 00       	push   0x158
c000e692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e696:	e8 7f e5 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000e69b:	83 c4 10             	add    esp,0x10
c000e69e:	83 c4 0c             	add    esp,0xc
c000e6a1:	c3                   	ret    

c000e6a2 <PhysicalDisk::eject()>:
c000e6a2:	83 c8 ff             	or     eax,0xffffffff
c000e6a5:	c3                   	ret    

c000e6a6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e6a6:	83 ec 0c             	sub    esp,0xc
c000e6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ad:	83 ec 08             	sub    esp,0x8
c000e6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6b4:	50                   	push   eax
c000e6b5:	e8 b8 fd ff ff       	call   c000e472 <Device::Device(char const*)>
c000e6ba:	83 c4 10             	add    esp,0x10
c000e6bd:	ba 54 4c 02 c0       	mov    edx,0xc0024c54
c000e6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6c6:	89 10                	mov    DWORD PTR [eax],edx
c000e6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6cc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e6d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6d7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6fe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e708:	90                   	nop
c000e709:	83 c4 0c             	add    esp,0xc
c000e70c:	c3                   	ret    
c000e70d:	90                   	nop

c000e70e <PhysicalDisk::startCache()>:
c000e70e:	56                   	push   esi
c000e70f:	53                   	push   ebx
c000e710:	83 ec 10             	sub    esp,0x10
c000e713:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e717:	6a 44                	push   0x44
c000e719:	e8 f1 b2 ff ff       	call   c0009a0f <malloc>
c000e71e:	89 c6                	mov    esi,eax
c000e720:	58                   	pop    eax
c000e721:	5a                   	pop    edx
c000e722:	53                   	push   ebx
c000e723:	56                   	push   esi
c000e724:	e8 73 26 00 00       	call   c0010d9c <VCache::VCache(PhysicalDisk*)>
c000e729:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e72f:	83 c4 14             	add    esp,0x14
c000e732:	5b                   	pop    ebx
c000e733:	5e                   	pop    esi
c000e734:	c3                   	ret    
c000e735:	90                   	nop

c000e736 <PhysicalDisk::~PhysicalDisk()>:
c000e736:	83 ec 0c             	sub    esp,0xc
c000e739:	ba 54 4c 02 c0       	mov    edx,0xc0024c54
c000e73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e742:	89 10                	mov    DWORD PTR [eax],edx
c000e744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e748:	83 ec 0c             	sub    esp,0xc
c000e74b:	50                   	push   eax
c000e74c:	e8 eb f9 ff ff       	call   c000e13c <Device::~Device()>
c000e751:	83 c4 10             	add    esp,0x10
c000e754:	90                   	nop
c000e755:	83 c4 0c             	add    esp,0xc
c000e758:	c3                   	ret    
c000e759:	90                   	nop

c000e75a <PhysicalDisk::~PhysicalDisk()>:
c000e75a:	83 ec 0c             	sub    esp,0xc
c000e75d:	83 ec 0c             	sub    esp,0xc
c000e760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e764:	e8 cd ff ff ff       	call   c000e736 <PhysicalDisk::~PhysicalDisk()>
c000e769:	83 c4 10             	add    esp,0x10
c000e76c:	83 ec 08             	sub    esp,0x8
c000e76f:	68 6c 01 00 00       	push   0x16c
c000e774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e778:	e8 9d e4 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000e77d:	83 c4 10             	add    esp,0x10
c000e780:	83 c4 0c             	add    esp,0xc
c000e783:	c3                   	ret    

c000e784 <FPU::FPU(char const*)>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e792:	50                   	push   eax
c000e793:	e8 da fc ff ff       	call   c000e472 <Device::Device(char const*)>
c000e798:	83 c4 10             	add    esp,0x10
c000e79b:	ba 98 4c 02 c0       	mov    edx,0xc0024c98
c000e7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a4:	89 10                	mov    DWORD PTR [eax],edx
c000e7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7aa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e7b4:	90                   	nop
c000e7b5:	83 c4 0c             	add    esp,0xc
c000e7b8:	c3                   	ret    
c000e7b9:	90                   	nop
c000e7ba:	66 90                	xchg   ax,ax

c000e7bc <FPU::~FPU()>:
c000e7bc:	83 ec 0c             	sub    esp,0xc
c000e7bf:	ba 98 4c 02 c0       	mov    edx,0xc0024c98
c000e7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c8:	89 10                	mov    DWORD PTR [eax],edx
c000e7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ce:	83 ec 0c             	sub    esp,0xc
c000e7d1:	50                   	push   eax
c000e7d2:	e8 65 f9 ff ff       	call   c000e13c <Device::~Device()>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	90                   	nop
c000e7db:	83 c4 0c             	add    esp,0xc
c000e7de:	c3                   	ret    
c000e7df:	90                   	nop

c000e7e0 <FPU::~FPU()>:
c000e7e0:	83 ec 0c             	sub    esp,0xc
c000e7e3:	83 ec 0c             	sub    esp,0xc
c000e7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ea:	e8 cd ff ff ff       	call   c000e7bc <FPU::~FPU()>
c000e7ef:	83 c4 10             	add    esp,0x10
c000e7f2:	83 ec 08             	sub    esp,0x8
c000e7f5:	68 58 01 00 00       	push   0x158
c000e7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7fe:	e8 17 e4 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000e803:	83 c4 10             	add    esp,0x10
c000e806:	83 c4 0c             	add    esp,0xc
c000e809:	c3                   	ret    

c000e80a <setupFPU()>:
c000e80a:	53                   	push   ebx
c000e80b:	83 ec 08             	sub    esp,0x8
c000e80e:	8b 15 68 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f68
c000e814:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e81b:	74 1b                	je     c000e838 <setupFPU()+0x2e>
c000e81d:	83 ec 0c             	sub    esp,0xc
c000e820:	68 58 01 00 00       	push   0x158
c000e825:	e8 e5 b1 ff ff       	call   c0009a0f <malloc>
c000e82a:	89 c3                	mov    ebx,eax
c000e82c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e82f:	e8 a8 2a 01 00       	call   c00212dc <AVX::AVX()>
c000e834:	eb 62                	jmp    c000e898 <setupFPU()+0x8e>
c000e836:	66 90                	xchg   ax,ax
c000e838:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e83e:	84 c0                	test   al,al
c000e840:	79 1a                	jns    c000e85c <setupFPU()+0x52>
c000e842:	83 ec 0c             	sub    esp,0xc
c000e845:	68 58 01 00 00       	push   0x158
c000e84a:	e8 c0 b1 ff ff       	call   c0009a0f <malloc>
c000e84f:	89 c3                	mov    ebx,eax
c000e851:	89 04 24             	mov    DWORD PTR [esp],eax
c000e854:	e8 b3 2b 01 00       	call   c002140c <SSE::SSE()>
c000e859:	eb 3d                	jmp    c000e898 <setupFPU()+0x8e>
c000e85b:	90                   	nop
c000e85c:	a8 20                	test   al,0x20
c000e85e:	74 1c                	je     c000e87c <setupFPU()+0x72>
c000e860:	83 ec 0c             	sub    esp,0xc
c000e863:	68 58 01 00 00       	push   0x158
c000e868:	e8 a2 b1 ff ff       	call   c0009a0f <malloc>
c000e86d:	89 c3                	mov    ebx,eax
c000e86f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e872:	e8 f9 2a 01 00       	call   c0021370 <MMX::MMX()>
c000e877:	eb 1f                	jmp    c000e898 <setupFPU()+0x8e>
c000e879:	8d 76 00             	lea    esi,[esi+0x0]
c000e87c:	a8 10                	test   al,0x10
c000e87e:	74 20                	je     c000e8a0 <setupFPU()+0x96>
c000e880:	83 ec 0c             	sub    esp,0xc
c000e883:	68 58 01 00 00       	push   0x158
c000e888:	e8 82 b1 ff ff       	call   c0009a0f <malloc>
c000e88d:	89 c3                	mov    ebx,eax
c000e88f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e892:	e8 09 2c 01 00       	call   c00214a0 <x87::x87()>
c000e897:	90                   	nop
c000e898:	83 c4 10             	add    esp,0x10
c000e89b:	eb 27                	jmp    c000e8c4 <setupFPU()+0xba>
c000e89d:	8d 76 00             	lea    esi,[esi+0x0]
c000e8a0:	83 e0 ef             	and    eax,0xffffffef
c000e8a3:	83 ec 0c             	sub    esp,0xc
c000e8a6:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e8ac:	68 84 4c 02 c0       	push   0xc0024c84
c000e8b1:	e8 45 e4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000e8b6:	0f 20 c0             	mov    eax,cr0
c000e8b9:	83 c8 04             	or     eax,0x4
c000e8bc:	0f 22 c0             	mov    cr0,eax
c000e8bf:	31 db                	xor    ebx,ebx
c000e8c1:	83 c4 10             	add    esp,0x10
c000e8c4:	89 d8                	mov    eax,ebx
c000e8c6:	83 c4 08             	add    esp,0x8
c000e8c9:	5b                   	pop    ebx
c000e8ca:	c3                   	ret    
c000e8cb:	90                   	nop

c000e8cc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e8cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8d4:	c1 e0 04             	shl    eax,0x4
c000e8d7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e8db:	8d 50 10             	lea    edx,[eax+0x10]
c000e8de:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e8e4:	74 08                	je     c000e8ee <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e8e6:	83 c0 04             	add    eax,0x4
c000e8e9:	39 d0                	cmp    eax,edx
c000e8eb:	75 f1                	jne    c000e8de <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e8ed:	c3                   	ret    
c000e8ee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e8f8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e902:	eb e2                	jmp    c000e8e6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e904 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e904:	57                   	push   edi
c000e905:	31 c0                	xor    eax,eax
c000e907:	56                   	push   esi
c000e908:	53                   	push   ebx
c000e909:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e90d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e911:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e915:	89 da                	mov    edx,ebx
c000e917:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e91b:	c1 e2 04             	shl    edx,0x4
c000e91e:	01 ca                	add    edx,ecx
c000e920:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e928:	74 16                	je     c000e940 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e92a:	40                   	inc    eax
c000e92b:	83 f8 04             	cmp    eax,0x4
c000e92e:	75 f0                	jne    c000e920 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e930:	c7 44 24 10 c8 4c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024cc8
c000e938:	5b                   	pop    ebx
c000e939:	5e                   	pop    esi
c000e93a:	5f                   	pop    edi
c000e93b:	e9 c7 60 00 00       	jmp    c0014a07 <Krnl::panic(char const*)>
c000e940:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e943:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e946:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e94c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e952:	5b                   	pop    ebx
c000e953:	5e                   	pop    esi
c000e954:	5f                   	pop    edi
c000e955:	c3                   	ret    

c000e956 <doubleFault(regs*, void*)>:
c000e956:	55                   	push   ebp
c000e957:	89 e5                	mov    ebp,esp
c000e959:	83 ec 08             	sub    esp,0x8
c000e95c:	83 ec 0c             	sub    esp,0xc
c000e95f:	68 d5 4c 02 c0       	push   0xc0024cd5
c000e964:	e8 9e 60 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000e969:	83 c4 10             	add    esp,0x10
c000e96c:	90                   	nop
c000e96d:	c9                   	leave  
c000e96e:	c3                   	ret    
c000e96f:	90                   	nop

c000e970 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e970:	56                   	push   esi
c000e971:	53                   	push   ebx
c000e972:	50                   	push   eax
c000e973:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e977:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e97b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e980:	75 35                	jne    c000e9b7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e982:	8d 43 20             	lea    eax,[ebx+0x20]
c000e985:	31 d2                	xor    edx,edx
c000e987:	89 c1                	mov    ecx,eax
c000e989:	c1 e1 04             	shl    ecx,0x4
c000e98c:	01 f1                	add    ecx,esi
c000e98e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e996:	74 3e                	je     c000e9d6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e998:	42                   	inc    edx
c000e999:	83 fa 04             	cmp    edx,0x4
c000e99c:	75 f0                	jne    c000e98e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e99e:	83 ec 0c             	sub    esp,0xc
c000e9a1:	68 ef 4c 02 c0       	push   0xc0024cef
c000e9a6:	e8 5c 60 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000e9ab:	83 c4 10             	add    esp,0x10
c000e9ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e9b3:	5a                   	pop    edx
c000e9b4:	5b                   	pop    ebx
c000e9b5:	5e                   	pop    esi
c000e9b6:	c3                   	ret    
c000e9b7:	83 ec 0c             	sub    esp,0xc
c000e9ba:	56                   	push   esi
c000e9bb:	e8 ae fb ff ff       	call   c000e56e <Device::getName()>
c000e9c0:	83 c4 10             	add    esp,0x10
c000e9c3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e9c6:	75 ba                	jne    c000e982 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e9c8:	83 fb 0f             	cmp    ebx,0xf
c000e9cb:	7f 29                	jg     c000e9f6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e9cd:	0f b6 9b 60 76 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd89a0]
c000e9d4:	eb ac                	jmp    c000e982 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e9d6:	8d 04 82             	lea    eax,[edx+eax*4]
c000e9d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9dd:	8d 04 86             	lea    eax,[esi+eax*4]
c000e9e0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e9e6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e9ea:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e9f0:	89 d8                	mov    eax,ebx
c000e9f2:	5a                   	pop    edx
c000e9f3:	5b                   	pop    ebx
c000e9f4:	5e                   	pop    esi
c000e9f5:	c3                   	ret    
c000e9f6:	83 ec 0c             	sub    esp,0xc
c000e9f9:	68 e2 4c 02 c0       	push   0xc0024ce2
c000e9fe:	e8 04 60 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000ea03:	83 c4 10             	add    esp,0x10
c000ea06:	e9 77 ff ff ff       	jmp    c000e982 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ea0b:	90                   	nop

c000ea0c <InterruptController::clearAllHandlers(int, bool)>:
c000ea0c:	56                   	push   esi
c000ea0d:	53                   	push   ebx
c000ea0e:	52                   	push   edx
c000ea0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ea13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ea17:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ea1c:	75 61                	jne    c000ea7f <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ea1e:	8d 46 20             	lea    eax,[esi+0x20]
c000ea21:	c1 e6 04             	shl    esi,0x4
c000ea24:	c1 e0 04             	shl    eax,0x4
c000ea27:	01 de                	add    esi,ebx
c000ea29:	01 d8                	add    eax,ebx
c000ea2b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ea35:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ea3f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ea49:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ea53:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ea5d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ea67:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ea71:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ea7b:	58                   	pop    eax
c000ea7c:	5b                   	pop    ebx
c000ea7d:	5e                   	pop    esi
c000ea7e:	c3                   	ret    
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	53                   	push   ebx
c000ea83:	e8 e6 fa ff ff       	call   c000e56e <Device::getName()>
c000ea88:	83 c4 10             	add    esp,0x10
c000ea8b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ea8e:	75 8e                	jne    c000ea1e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea90:	83 fe 0f             	cmp    esi,0xf
c000ea93:	7f 09                	jg     c000ea9e <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ea95:	0f b6 b6 60 76 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd89a0]
c000ea9c:	eb 80                	jmp    c000ea1e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea9e:	83 ec 0c             	sub    esp,0xc
c000eaa1:	68 fc 4c 02 c0       	push   0xc0024cfc
c000eaa6:	e8 5c 5f 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000eaab:	83 c4 10             	add    esp,0x10
c000eaae:	e9 6b ff ff ff       	jmp    c000ea1e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eab3:	90                   	nop

c000eab4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000eab4:	56                   	push   esi
c000eab5:	53                   	push   ebx
c000eab6:	52                   	push   edx
c000eab7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eabb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eabf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000eac4:	75 3a                	jne    c000eb00 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000eac6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eaca:	8d 50 20             	lea    edx,[eax+0x20]
c000eacd:	c1 e2 04             	shl    edx,0x4
c000ead0:	8d 04 16             	lea    eax,[esi+edx*1]
c000ead3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000ead7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000eadd:	74 0b                	je     c000eaea <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000eadf:	83 c0 04             	add    eax,0x4
c000eae2:	39 d0                	cmp    eax,edx
c000eae4:	75 f1                	jne    c000ead7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000eae6:	58                   	pop    eax
c000eae7:	5b                   	pop    ebx
c000eae8:	5e                   	pop    esi
c000eae9:	c3                   	ret    
c000eaea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000eaf4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000eafe:	eb df                	jmp    c000eadf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000eb00:	83 ec 0c             	sub    esp,0xc
c000eb03:	56                   	push   esi
c000eb04:	e8 65 fa ff ff       	call   c000e56e <Device::getName()>
c000eb09:	83 c4 10             	add    esp,0x10
c000eb0c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eb0f:	75 b5                	jne    c000eac6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000eb11:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000eb16:	7f 11                	jg     c000eb29 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000eb18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb1c:	0f b6 80 60 76 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd89a0]
c000eb23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eb27:	eb 9d                	jmp    c000eac6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000eb29:	83 ec 0c             	sub    esp,0xc
c000eb2c:	68 09 4d 02 c0       	push   0xc0024d09
c000eb31:	e8 d1 5e 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000eb36:	83 c4 10             	add    esp,0x10
c000eb39:	eb 8b                	jmp    c000eac6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000eb3b <nmiHandler(regs*, void*)>:
c000eb3b:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000eb40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eb44:	e9 8f a6 ff ff       	jmp    c00091d8 <Computer::handleNMI()>

c000eb49 <int_handler>:
c000eb49:	55                   	push   ebp
c000eb4a:	57                   	push   edi
c000eb4b:	56                   	push   esi
c000eb4c:	53                   	push   ebx
c000eb4d:	83 ec 0c             	sub    esp,0xc
c000eb50:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000eb54:	80 3d 44 8a 02 c0 00 	cmp    BYTE PTR ds:0xc0028a44,0x0
c000eb5b:	74 0b                	je     c000eb68 <int_handler+0x1f>
c000eb5d:	fa                   	cli    
c000eb5e:	f4                   	hlt    
c000eb5f:	80 3d 44 8a 02 c0 00 	cmp    BYTE PTR ds:0xc0028a44,0x0
c000eb66:	75 f5                	jne    c000eb5d <int_handler+0x14>
c000eb68:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000eb6d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000eb70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eb76:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000eb7c:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eb7f:	83 f8 17             	cmp    eax,0x17
c000eb82:	77 13                	ja     c000eb97 <int_handler+0x4e>
c000eb84:	83 ec 08             	sub    esp,0x8
c000eb87:	8b 17                	mov    edx,DWORD PTR [edi]
c000eb89:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eb8c:	0f b6 c0             	movzx  eax,al
c000eb8f:	50                   	push   eax
c000eb90:	57                   	push   edi
c000eb91:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000eb94:	83 c4 10             	add    esp,0x10
c000eb97:	83 c3 15             	add    ebx,0x15
c000eb9a:	c1 e3 04             	shl    ebx,0x4
c000eb9d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000eba1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000eba8:	31 db                	xor    ebx,ebx
c000ebaa:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ebae:	85 c0                	test   eax,eax
c000ebb0:	74 13                	je     c000ebc5 <int_handler+0x7c>
c000ebb2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000ebb5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000ebb9:	74 1c                	je     c000ebd7 <int_handler+0x8e>
c000ebbb:	83 ec 08             	sub    esp,0x8
c000ebbe:	52                   	push   edx
c000ebbf:	56                   	push   esi
c000ebc0:	ff d0                	call   eax
c000ebc2:	83 c4 10             	add    esp,0x10
c000ebc5:	43                   	inc    ebx
c000ebc6:	83 fb 04             	cmp    ebx,0x4
c000ebc9:	75 df                	jne    c000ebaa <int_handler+0x61>
c000ebcb:	83 c4 0c             	add    esp,0xc
c000ebce:	31 c0                	xor    eax,eax
c000ebd0:	5b                   	pop    ebx
c000ebd1:	31 d2                	xor    edx,edx
c000ebd3:	5e                   	pop    esi
c000ebd4:	5f                   	pop    edi
c000ebd5:	5d                   	pop    ebp
c000ebd6:	c3                   	ret    
c000ebd7:	83 ec 08             	sub    esp,0x8
c000ebda:	52                   	push   edx
c000ebdb:	56                   	push   esi
c000ebdc:	ff d0                	call   eax
c000ebde:	83 c4 10             	add    esp,0x10
c000ebe1:	83 c4 0c             	add    esp,0xc
c000ebe4:	5b                   	pop    ebx
c000ebe5:	5e                   	pop    esi
c000ebe6:	5f                   	pop    edi
c000ebe7:	5d                   	pop    ebp
c000ebe8:	c3                   	ret    
c000ebe9:	90                   	nop

c000ebea <InterruptController::InterruptController(char const*)>:
c000ebea:	83 ec 1c             	sub    esp,0x1c
c000ebed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebf1:	83 ec 08             	sub    esp,0x8
c000ebf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebf8:	50                   	push   eax
c000ebf9:	e8 74 f8 ff ff       	call   c000e472 <Device::Device(char const*)>
c000ebfe:	83 c4 10             	add    esp,0x10
c000ec01:	ba c0 4f 02 c0       	mov    edx,0xc0024fc0
c000ec06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec0a:	89 10                	mov    DWORD PTR [eax],edx
c000ec0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec10:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ec1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ec22:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ec2a:	7f 5e                	jg     c000ec8a <InterruptController::InterruptController(char const*)+0xa0>
c000ec2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ec34:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ec39:	7f 49                	jg     c000ec84 <InterruptController::InterruptController(char const*)+0x9a>
c000ec3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec43:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ec4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec4e:	01 ca                	add    edx,ecx
c000ec50:	83 c2 54             	add    edx,0x54
c000ec53:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ec5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec63:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ec6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec6e:	01 ca                	add    edx,ecx
c000ec70:	81 c2 54 04 00 00    	add    edx,0x454
c000ec76:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ec7e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ec82:	eb b0                	jmp    c000ec34 <InterruptController::InterruptController(char const*)+0x4a>
c000ec84:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ec88:	eb 98                	jmp    c000ec22 <InterruptController::InterruptController(char const*)+0x38>
c000ec8a:	90                   	nop
c000ec8b:	83 c4 1c             	add    esp,0x1c
c000ec8e:	c3                   	ret    
c000ec8f:	90                   	nop

c000ec90 <InterruptController::~InterruptController()>:
c000ec90:	83 ec 0c             	sub    esp,0xc
c000ec93:	ba c0 4f 02 c0       	mov    edx,0xc0024fc0
c000ec98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec9c:	89 10                	mov    DWORD PTR [eax],edx
c000ec9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eca2:	83 ec 0c             	sub    esp,0xc
c000eca5:	50                   	push   eax
c000eca6:	e8 91 f4 ff ff       	call   c000e13c <Device::~Device()>
c000ecab:	83 c4 10             	add    esp,0x10
c000ecae:	90                   	nop
c000ecaf:	83 c4 0c             	add    esp,0xc
c000ecb2:	c3                   	ret    
c000ecb3:	90                   	nop

c000ecb4 <InterruptController::~InterruptController()>:
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	83 ec 0c             	sub    esp,0xc
c000ecba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecbe:	e8 cd ff ff ff       	call   c000ec90 <InterruptController::~InterruptController()>
c000ecc3:	83 c4 10             	add    esp,0x10
c000ecc6:	83 ec 08             	sub    esp,0x8
c000ecc9:	68 58 21 00 00       	push   0x2158
c000ecce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecd2:	e8 43 df ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000ecd7:	83 c4 10             	add    esp,0x10
c000ecda:	83 c4 0c             	add    esp,0xc
c000ecdd:	c3                   	ret    

c000ecde <displayDebugInfo(regs*)>:
c000ecde:	55                   	push   ebp
c000ecdf:	57                   	push   edi
c000ece0:	56                   	push   esi
c000ece1:	53                   	push   ebx
c000ece2:	83 ec 24             	sub    esp,0x24
c000ece5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ece9:	0f 20 c2             	mov    edx,cr0
c000ecec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ecf0:	0f 20 d7             	mov    edi,cr2
c000ecf3:	0f 20 de             	mov    esi,cr3
c000ecf6:	0f 20 e5             	mov    ebp,cr4
c000ecf9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000ecfc:	68 16 4d 02 c0       	push   0xc0024d16
c000ed01:	e8 f5 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed06:	59                   	pop    ecx
c000ed07:	58                   	pop    eax
c000ed08:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ed0b:	68 21 4d 02 c0       	push   0xc0024d21
c000ed10:	e8 e6 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed15:	58                   	pop    eax
c000ed16:	5a                   	pop    edx
c000ed17:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ed1a:	68 2c 4d 02 c0       	push   0xc0024d2c
c000ed1f:	e8 d7 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed24:	59                   	pop    ecx
c000ed25:	58                   	pop    eax
c000ed26:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ed29:	68 37 4d 02 c0       	push   0xc0024d37
c000ed2e:	e8 c8 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed33:	58                   	pop    eax
c000ed34:	5a                   	pop    edx
c000ed35:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ed38:	68 42 4d 02 c0       	push   0xc0024d42
c000ed3d:	e8 b9 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed42:	59                   	pop    ecx
c000ed43:	58                   	pop    eax
c000ed44:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ed47:	68 4d 4d 02 c0       	push   0xc0024d4d
c000ed4c:	e8 aa df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed51:	58                   	pop    eax
c000ed52:	5a                   	pop    edx
c000ed53:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ed56:	68 58 4d 02 c0       	push   0xc0024d58
c000ed5b:	e8 9b df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed60:	59                   	pop    ecx
c000ed61:	58                   	pop    eax
c000ed62:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ed65:	68 63 4d 02 c0       	push   0xc0024d63
c000ed6a:	e8 8c df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed6f:	58                   	pop    eax
c000ed70:	5a                   	pop    edx
c000ed71:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ed74:	68 6e 4d 02 c0       	push   0xc0024d6e
c000ed79:	e8 7d df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed7e:	59                   	pop    ecx
c000ed7f:	58                   	pop    eax
c000ed80:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed83:	68 7d 4d 02 c0       	push   0xc0024d7d
c000ed88:	e8 6e df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed8d:	58                   	pop    eax
c000ed8e:	5a                   	pop    edx
c000ed8f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ed92:	68 88 4d 02 c0       	push   0xc0024d88
c000ed97:	e8 5f df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed9c:	59                   	pop    ecx
c000ed9d:	58                   	pop    eax
c000ed9e:	57                   	push   edi
c000ed9f:	68 93 4d 02 c0       	push   0xc0024d93
c000eda4:	e8 52 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000eda9:	58                   	pop    eax
c000edaa:	5a                   	pop    edx
c000edab:	56                   	push   esi
c000edac:	68 9e 4d 02 c0       	push   0xc0024d9e
c000edb1:	e8 45 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000edb6:	59                   	pop    ecx
c000edb7:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000edbc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edc2:	e8 42 bd ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000edc7:	58                   	pop    eax
c000edc8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000edcb:	5a                   	pop    edx
c000edcc:	c1 e0 05             	shl    eax,0x5
c000edcf:	05 c0 73 02 c0       	add    eax,0xc00273c0
c000edd4:	50                   	push   eax
c000edd5:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000edda:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ede0:	e8 31 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ede5:	59                   	pop    ecx
c000ede6:	58                   	pop    eax
c000ede7:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000edec:	68 a9 4d 02 c0       	push   0xc0024da9
c000edf1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edf7:	e8 1a c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edfc:	58                   	pop    eax
c000edfd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee02:	5a                   	pop    edx
c000ee03:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee06:	83 c0 0c             	add    eax,0xc
c000ee09:	50                   	push   eax
c000ee0a:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ee0f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee15:	e8 fc c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee1a:	59                   	pop    ecx
c000ee1b:	58                   	pop    eax
c000ee1c:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ee21:	68 b2 4d 02 c0       	push   0xc0024db2
c000ee26:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee2c:	e8 e5 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee31:	58                   	pop    eax
c000ee32:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ee37:	5a                   	pop    edx
c000ee38:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee3b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee41:	e8 8a c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee46:	59                   	pop    ecx
c000ee47:	58                   	pop    eax
c000ee48:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ee4d:	68 ba 4d 02 c0       	push   0xc0024dba
c000ee52:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee58:	e8 b9 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee5d:	58                   	pop    eax
c000ee5e:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ee63:	5a                   	pop    edx
c000ee64:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ee67:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee6d:	e8 5e c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee72:	59                   	pop    ecx
c000ee73:	58                   	pop    eax
c000ee74:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ee79:	68 c2 4d 02 c0       	push   0xc0024dc2
c000ee7e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee84:	e8 8d c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee89:	58                   	pop    eax
c000ee8a:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ee8f:	5a                   	pop    edx
c000ee90:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ee93:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee99:	e8 32 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee9e:	59                   	pop    ecx
c000ee9f:	58                   	pop    eax
c000eea0:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000eea5:	68 ca 4d 02 c0       	push   0xc0024dca
c000eeaa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeb0:	e8 61 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eeb5:	58                   	pop    eax
c000eeb6:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000eebb:	5a                   	pop    edx
c000eebc:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eebf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eec5:	e8 06 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eeca:	59                   	pop    ecx
c000eecb:	58                   	pop    eax
c000eecc:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000eed1:	68 d2 4d 02 c0       	push   0xc0024dd2
c000eed6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eedc:	e8 35 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eee1:	58                   	pop    eax
c000eee2:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000eee7:	5a                   	pop    edx
c000eee8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eeeb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eef1:	e8 da c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eef6:	59                   	pop    ecx
c000eef7:	58                   	pop    eax
c000eef8:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000eefd:	68 da 4d 02 c0       	push   0xc0024dda
c000ef02:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef08:	e8 09 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef0d:	58                   	pop    eax
c000ef0e:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ef13:	5a                   	pop    edx
c000ef14:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000ef17:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef1d:	e8 ae c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef22:	59                   	pop    ecx
c000ef23:	58                   	pop    eax
c000ef24:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ef29:	68 e2 4d 02 c0       	push   0xc0024de2
c000ef2e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef34:	e8 dd c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef39:	58                   	pop    eax
c000ef3a:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ef3f:	5a                   	pop    edx
c000ef40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef44:	52                   	push   edx
c000ef45:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef4b:	e8 80 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef50:	59                   	pop    ecx
c000ef51:	58                   	pop    eax
c000ef52:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ef57:	68 eb 4d 02 c0       	push   0xc0024deb
c000ef5c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef62:	e8 af c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef67:	58                   	pop    eax
c000ef68:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ef6d:	5a                   	pop    edx
c000ef6e:	57                   	push   edi
c000ef6f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef75:	e8 56 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef7a:	59                   	pop    ecx
c000ef7b:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ef80:	5f                   	pop    edi
c000ef81:	68 f3 4d 02 c0       	push   0xc0024df3
c000ef86:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef8c:	e8 85 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef91:	58                   	pop    eax
c000ef92:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000ef97:	5a                   	pop    edx
c000ef98:	56                   	push   esi
c000ef99:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef9f:	e8 2c c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000efa4:	59                   	pop    ecx
c000efa5:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000efaa:	5e                   	pop    esi
c000efab:	68 fb 4d 02 c0       	push   0xc0024dfb
c000efb0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efb6:	e8 5b c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efbb:	5f                   	pop    edi
c000efbc:	58                   	pop    eax
c000efbd:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000efc2:	55                   	push   ebp
c000efc3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efc9:	e8 02 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000efce:	58                   	pop    eax
c000efcf:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000efd4:	5a                   	pop    edx
c000efd5:	68 03 4e 02 c0       	push   0xc0024e03
c000efda:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efe0:	e8 31 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efe5:	0f 21 c0             	mov    eax,db0
c000efe8:	59                   	pop    ecx
c000efe9:	5e                   	pop    esi
c000efea:	50                   	push   eax
c000efeb:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000eff0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eff6:	e8 d5 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000effb:	5f                   	pop    edi
c000effc:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f001:	5d                   	pop    ebp
c000f002:	68 0c 4e 02 c0       	push   0xc0024e0c
c000f007:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f00d:	e8 04 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f012:	0f 21 c8             	mov    eax,db1
c000f015:	5a                   	pop    edx
c000f016:	59                   	pop    ecx
c000f017:	50                   	push   eax
c000f018:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f01d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f023:	e8 a8 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f028:	5e                   	pop    esi
c000f029:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f02e:	5f                   	pop    edi
c000f02f:	68 14 4e 02 c0       	push   0xc0024e14
c000f034:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f03a:	e8 d7 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f03f:	0f 21 d0             	mov    eax,db2
c000f042:	5d                   	pop    ebp
c000f043:	5a                   	pop    edx
c000f044:	50                   	push   eax
c000f045:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f04a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f050:	e8 7b bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f055:	59                   	pop    ecx
c000f056:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f05b:	5e                   	pop    esi
c000f05c:	68 1c 4e 02 c0       	push   0xc0024e1c
c000f061:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f067:	e8 aa bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f06c:	0f 21 d8             	mov    eax,db3
c000f06f:	5f                   	pop    edi
c000f070:	5d                   	pop    ebp
c000f071:	50                   	push   eax
c000f072:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f077:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f07d:	e8 4e bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f082:	58                   	pop    eax
c000f083:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f088:	5a                   	pop    edx
c000f089:	68 24 4e 02 c0       	push   0xc0024e24
c000f08e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f094:	e8 7d bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f099:	0f 21 f0             	mov    eax,db6
c000f09c:	59                   	pop    ecx
c000f09d:	5e                   	pop    esi
c000f09e:	50                   	push   eax
c000f09f:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f0a4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0aa:	e8 21 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f0af:	5f                   	pop    edi
c000f0b0:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f0b5:	5d                   	pop    ebp
c000f0b6:	68 2c 4e 02 c0       	push   0xc0024e2c
c000f0bb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0c1:	e8 50 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f0c6:	0f 21 f8             	mov    eax,db7
c000f0c9:	5a                   	pop    edx
c000f0ca:	59                   	pop    ecx
c000f0cb:	50                   	push   eax
c000f0cc:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f0d1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0d7:	e8 f4 be ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f0dc:	5e                   	pop    esi
c000f0dd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f0e0:	e8 a0 8b 00 00       	call   c0017c85 <Thr::getDriverNameFromAddress(unsigned long)>
c000f0e5:	83 c4 10             	add    esp,0x10
c000f0e8:	85 c0                	test   eax,eax
c000f0ea:	74 7d                	je     c000f169 <displayDebugInfo(regs*)+0x48b>
c000f0ec:	89 c6                	mov    esi,eax
c000f0ee:	50                   	push   eax
c000f0ef:	50                   	push   eax
c000f0f0:	56                   	push   esi
c000f0f1:	68 34 4e 02 c0       	push   0xc0024e34
c000f0f6:	e8 00 dc ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f0fb:	5a                   	pop    edx
c000f0fc:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f101:	59                   	pop    ecx
c000f102:	68 42 4e 02 c0       	push   0xc0024e42
c000f107:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f10d:	e8 04 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f112:	5f                   	pop    edi
c000f113:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f118:	5d                   	pop    ebp
c000f119:	56                   	push   esi
c000f11a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f120:	e8 f1 be ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f125:	58                   	pop    eax
c000f126:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f12b:	5a                   	pop    edx
c000f12c:	68 4e 4e 02 c0       	push   0xc0024e4e
c000f131:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f137:	e8 da be ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f13c:	59                   	pop    ecx
c000f13d:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000f142:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f148:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f14b:	e8 6c 8b 00 00       	call   c0017cbc <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f150:	5b                   	pop    ebx
c000f151:	5d                   	pop    ebp
c000f152:	50                   	push   eax
c000f153:	57                   	push   edi
c000f154:	e8 77 be ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f159:	58                   	pop    eax
c000f15a:	5a                   	pop    edx
c000f15b:	56                   	push   esi
c000f15c:	68 5a 4e 02 c0       	push   0xc0024e5a
c000f161:	e8 95 db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f166:	83 c4 10             	add    esp,0x10
c000f169:	fa                   	cli    
c000f16a:	f4                   	hlt    
c000f16b:	eb fe                	jmp    c000f16b <displayDebugInfo(regs*)+0x48d>

c000f16d <x87EmulHandler(regs*, void*)>:
c000f16d:	83 ec 0c             	sub    esp,0xc
c000f170:	0f 20 c2             	mov    edx,cr0
c000f173:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f178:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f17c:	75 4b                	jne    c000f1c9 <x87EmulHandler(regs*, void*)+0x5c>
c000f17e:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000f183:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f189:	85 c0                	test   eax,eax
c000f18b:	74 05                	je     c000f192 <x87EmulHandler(regs*, void*)+0x25>
c000f18d:	83 e2 08             	and    edx,0x8
c000f190:	75 17                	jne    c000f1a9 <x87EmulHandler(regs*, void*)+0x3c>
c000f192:	83 ec 0c             	sub    esp,0xc
c000f195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f199:	e8 4c b0 00 00       	call   c001a1ea <Vm::x87Handler(regs*)>
c000f19e:	83 c4 10             	add    esp,0x10
c000f1a1:	84 c0                	test   al,al
c000f1a3:	74 24                	je     c000f1c9 <x87EmulHandler(regs*, void*)+0x5c>
c000f1a5:	83 c4 0c             	add    esp,0xc
c000f1a8:	c3                   	ret    
c000f1a9:	83 ec 0c             	sub    esp,0xc
c000f1ac:	68 80 4e 02 c0       	push   0xc0024e80
c000f1b1:	e8 45 db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f1b6:	0f 06                	clts   
c000f1b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f1bd:	83 c4 10             	add    esp,0x10
c000f1c0:	a3 a8 80 02 c0       	mov    ds:0xc00280a8,eax
c000f1c5:	83 c4 0c             	add    esp,0xc
c000f1c8:	c3                   	ret    
c000f1c9:	83 ec 0c             	sub    esp,0xc
c000f1cc:	68 6a 4e 02 c0       	push   0xc0024e6a
c000f1d1:	e8 25 db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f1d6:	5a                   	pop    edx
c000f1d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1db:	e8 fe fa ff ff       	call   c000ecde <displayDebugInfo(regs*)>

c000f1e0 <gpFault(regs*, void*)>:
c000f1e0:	53                   	push   ebx
c000f1e1:	83 ec 14             	sub    esp,0x14
c000f1e4:	c7 05 a4 80 02 c0 a7 96 01 c0 	mov    DWORD PTR ds:0xc00280a4,0xc00196a7
c000f1ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f1f2:	53                   	push   ebx
c000f1f3:	e8 af a4 00 00       	call   c00196a7 <Vm::faultHandler(regs*)>
c000f1f8:	83 c4 10             	add    esp,0x10
c000f1fb:	84 c0                	test   al,al
c000f1fd:	74 05                	je     c000f204 <gpFault(regs*, void*)+0x24>
c000f1ff:	83 c4 08             	add    esp,0x8
c000f202:	5b                   	pop    ebx
c000f203:	c3                   	ret    
c000f204:	83 ec 0c             	sub    esp,0xc
c000f207:	68 8d 4e 02 c0       	push   0xc0024e8d
c000f20c:	e8 ea da ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f211:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f214:	e8 c5 fa ff ff       	call   c000ecde <displayDebugInfo(regs*)>

c000f219 <pgFault(regs*, void*)>:
c000f219:	53                   	push   ebx
c000f21a:	83 ec 10             	sub    esp,0x10
c000f21d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f221:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f224:	68 a8 4e 02 c0       	push   0xc0024ea8
c000f229:	e8 cd da ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f22e:	0f 20 d0             	mov    eax,cr2
c000f231:	5a                   	pop    edx
c000f232:	59                   	pop    ecx
c000f233:	50                   	push   eax
c000f234:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f239:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f23c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f242:	e8 2f d6 ff ff       	call   c000c876 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f247:	83 c4 10             	add    esp,0x10
c000f24a:	84 c0                	test   al,al
c000f24c:	74 05                	je     c000f253 <pgFault(regs*, void*)+0x3a>
c000f24e:	83 c4 08             	add    esp,0x8
c000f251:	5b                   	pop    ebx
c000f252:	c3                   	ret    
c000f253:	83 ec 0c             	sub    esp,0xc
c000f256:	68 bd 4e 02 c0       	push   0xc0024ebd
c000f25b:	e8 9b da ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f260:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f263:	e8 76 fa ff ff       	call   c000ecde <displayDebugInfo(regs*)>

c000f268 <otherISRHandler(regs*, void*)>:
c000f268:	53                   	push   ebx
c000f269:	83 ec 0c             	sub    esp,0xc
c000f26c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f270:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f273:	50                   	push   eax
c000f274:	50                   	push   eax
c000f275:	68 ca 4e 02 c0       	push   0xc0024eca
c000f27a:	e8 7c da ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f27f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f282:	e8 57 fa ff ff       	call   c000ecde <displayDebugInfo(regs*)>

c000f287 <opcodeFault(regs*, void*)>:
c000f287:	55                   	push   ebp
c000f288:	89 e5                	mov    ebp,esp
c000f28a:	56                   	push   esi
c000f28b:	53                   	push   ebx
c000f28c:	83 ec 30             	sub    esp,0x30
c000f28f:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000f294:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f29a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f2a0:	84 c0                	test   al,al
c000f2a2:	74 24                	je     c000f2c8 <opcodeFault(regs*, void*)+0x41>
c000f2a4:	83 ec 0c             	sub    esp,0xc
c000f2a7:	68 e8 4e 02 c0       	push   0xc0024ee8
c000f2ac:	e8 4a da ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f2b1:	83 c4 10             	add    esp,0x10
c000f2b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2ba:	8d 50 19             	lea    edx,[eax+0x19]
c000f2bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2c3:	e9 7b 03 00 00       	jmp    c000f643 <opcodeFault(regs*, void*)+0x3bc>
c000f2c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2ce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f2d1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f2d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f2de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2e1:	8a 00                	mov    al,BYTE PTR [eax]
c000f2e3:	3c f0                	cmp    al,0xf0
c000f2e5:	75 17                	jne    c000f2fe <opcodeFault(regs*, void*)+0x77>
c000f2e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2f0:	8d 50 01             	lea    edx,[eax+0x1]
c000f2f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2f9:	e9 d6 00 00 00       	jmp    c000f3d4 <opcodeFault(regs*, void*)+0x14d>
c000f2fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f301:	8a 00                	mov    al,BYTE PTR [eax]
c000f303:	3c f2                	cmp    al,0xf2
c000f305:	74 09                	je     c000f310 <opcodeFault(regs*, void*)+0x89>
c000f307:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f30a:	8a 00                	mov    al,BYTE PTR [eax]
c000f30c:	3c f3                	cmp    al,0xf3
c000f30e:	75 1b                	jne    c000f32b <opcodeFault(regs*, void*)+0xa4>
c000f310:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f314:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f31a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f31d:	8d 50 01             	lea    edx,[eax+0x1]
c000f320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f323:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f326:	e9 a9 00 00 00       	jmp    c000f3d4 <opcodeFault(regs*, void*)+0x14d>
c000f32b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f32e:	8a 00                	mov    al,BYTE PTR [eax]
c000f330:	3c 66                	cmp    al,0x66
c000f332:	75 1b                	jne    c000f34f <opcodeFault(regs*, void*)+0xc8>
c000f334:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f338:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f33b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f33e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f341:	8d 50 01             	lea    edx,[eax+0x1]
c000f344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f347:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f34a:	e9 85 00 00 00       	jmp    c000f3d4 <opcodeFault(regs*, void*)+0x14d>
c000f34f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f352:	8a 00                	mov    al,BYTE PTR [eax]
c000f354:	3c 67                	cmp    al,0x67
c000f356:	75 18                	jne    c000f370 <opcodeFault(regs*, void*)+0xe9>
c000f358:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f35c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f35f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f362:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f365:	8d 50 01             	lea    edx,[eax+0x1]
c000f368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f36b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f36e:	eb 64                	jmp    c000f3d4 <opcodeFault(regs*, void*)+0x14d>
c000f370:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f373:	8a 00                	mov    al,BYTE PTR [eax]
c000f375:	3c 2e                	cmp    al,0x2e
c000f377:	74 09                	je     c000f382 <opcodeFault(regs*, void*)+0xfb>
c000f379:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f37c:	8a 00                	mov    al,BYTE PTR [eax]
c000f37e:	3c 3e                	cmp    al,0x3e
c000f380:	75 18                	jne    c000f39a <opcodeFault(regs*, void*)+0x113>
c000f382:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f386:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f38c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f38f:	8d 50 01             	lea    edx,[eax+0x1]
c000f392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f395:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f398:	eb 3a                	jmp    c000f3d4 <opcodeFault(regs*, void*)+0x14d>
c000f39a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f39d:	8a 00                	mov    al,BYTE PTR [eax]
c000f39f:	3c 36                	cmp    al,0x36
c000f3a1:	74 1b                	je     c000f3be <opcodeFault(regs*, void*)+0x137>
c000f3a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3a6:	8a 00                	mov    al,BYTE PTR [eax]
c000f3a8:	3c 26                	cmp    al,0x26
c000f3aa:	74 12                	je     c000f3be <opcodeFault(regs*, void*)+0x137>
c000f3ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3af:	8a 00                	mov    al,BYTE PTR [eax]
c000f3b1:	3c 64                	cmp    al,0x64
c000f3b3:	74 09                	je     c000f3be <opcodeFault(regs*, void*)+0x137>
c000f3b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3b8:	8a 00                	mov    al,BYTE PTR [eax]
c000f3ba:	3c 65                	cmp    al,0x65
c000f3bc:	75 16                	jne    c000f3d4 <opcodeFault(regs*, void*)+0x14d>
c000f3be:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f3c2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f3c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000f3ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3d1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3d7:	8a 00                	mov    al,BYTE PTR [eax]
c000f3d9:	3c 0f                	cmp    al,0xf
c000f3db:	0f 85 8d 01 00 00    	jne    c000f56e <opcodeFault(regs*, void*)+0x2e7>
c000f3e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3e4:	40                   	inc    eax
c000f3e5:	8a 00                	mov    al,BYTE PTR [eax]
c000f3e7:	3c c7                	cmp    al,0xc7
c000f3e9:	0f 85 7f 01 00 00    	jne    c000f56e <opcodeFault(regs*, void*)+0x2e7>
c000f3ef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f3f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3f8:	8d 50 01             	lea    edx,[eax+0x1]
c000f3fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f401:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f404:	50                   	push   eax
c000f405:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f408:	50                   	push   eax
c000f409:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f40c:	50                   	push   eax
c000f40d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f410:	e8 0b 4d 00 00       	call   c0014120 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f415:	83 c4 10             	add    esp,0x10
c000f418:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f41b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f41e:	83 f0 01             	xor    eax,0x1
c000f421:	84 c0                	test   al,al
c000f423:	0f 84 45 01 00 00    	je     c000f56e <opcodeFault(regs*, void*)+0x2e7>
c000f429:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f42c:	3c 01                	cmp    al,0x1
c000f42e:	0f 85 3a 01 00 00    	jne    c000f56e <opcodeFault(regs*, void*)+0x2e7>
c000f434:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f437:	83 f0 01             	xor    eax,0x1
c000f43a:	84 c0                	test   al,al
c000f43c:	0f 84 2c 01 00 00    	je     c000f56e <opcodeFault(regs*, void*)+0x2e7>
c000f442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f445:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f448:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f44b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f452:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f455:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f458:	89 c2                	mov    edx,eax
c000f45a:	b8 00 00 00 00       	mov    eax,0x0
c000f45f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f462:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f468:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f46b:	ba 00 00 00 00       	mov    edx,0x0
c000f470:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f473:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f479:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f47c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f47f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f486:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f489:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f48c:	89 c2                	mov    edx,eax
c000f48e:	b8 00 00 00 00       	mov    eax,0x0
c000f493:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f496:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f49c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f49f:	ba 00 00 00 00       	mov    edx,0x0
c000f4a4:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f4a7:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f4aa:	fa                   	cli    
c000f4ab:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000f4b0:	40                   	inc    eax
c000f4b1:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000f4b6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f4b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f4bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4be:	89 c1                	mov    ecx,eax
c000f4c0:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f4c3:	89 cb                	mov    ebx,ecx
c000f4c5:	89 d0                	mov    eax,edx
c000f4c7:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f4ca:	89 c6                	mov    esi,eax
c000f4cc:	89 f0                	mov    eax,esi
c000f4ce:	09 d8                	or     eax,ebx
c000f4d0:	85 c0                	test   eax,eax
c000f4d2:	75 21                	jne    c000f4f5 <opcodeFault(regs*, void*)+0x26e>
c000f4d4:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f4d7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f4da:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f4dd:	89 01                	mov    DWORD PTR [ecx],eax
c000f4df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f4e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f4e8:	83 c8 40             	or     eax,0x40
c000f4eb:	89 c2                	mov    edx,eax
c000f4ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4f0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f4f3:	eb 3e                	jmp    c000f533 <opcodeFault(regs*, void*)+0x2ac>
c000f4f5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f4f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f4fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4fd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f500:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f503:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f509:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f50c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f50f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f512:	89 d0                	mov    eax,edx
c000f514:	31 d2                	xor    edx,edx
c000f516:	89 c3                	mov    ebx,eax
c000f518:	89 d6                	mov    esi,edx
c000f51a:	89 da                	mov    edx,ebx
c000f51c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f51f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f525:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f528:	83 e0 bf             	and    eax,0xffffffbf
c000f52b:	89 c2                	mov    edx,eax
c000f52d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f530:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f533:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000f538:	48                   	dec    eax
c000f539:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000f53e:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000f543:	85 c0                	test   eax,eax
c000f545:	75 01                	jne    c000f548 <opcodeFault(regs*, void*)+0x2c1>
c000f547:	fb                   	sti    
c000f548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f54b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f54e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f551:	01 c2                	add    edx,eax
c000f553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f556:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f559:	83 ec 0c             	sub    esp,0xc
c000f55c:	68 0b 4f 02 c0       	push   0xc0024f0b
c000f561:	e8 95 d7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f566:	83 c4 10             	add    esp,0x10
c000f569:	e9 d5 00 00 00       	jmp    c000f643 <opcodeFault(regs*, void*)+0x3bc>
c000f56e:	83 ec 0c             	sub    esp,0xc
c000f571:	68 1e 4f 02 c0       	push   0xc0024f1e
c000f576:	e8 80 d7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f57b:	83 c4 10             	add    esp,0x10
c000f57e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f581:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f587:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f58a:	c1 e0 04             	shl    eax,0x4
c000f58d:	01 d0                	add    eax,edx
c000f58f:	83 c0 03             	add    eax,0x3
c000f592:	8a 00                	mov    al,BYTE PTR [eax]
c000f594:	0f b6 d8             	movzx  ebx,al
c000f597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f59a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f59d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f5a3:	c1 e0 04             	shl    eax,0x4
c000f5a6:	01 d0                	add    eax,edx
c000f5a8:	83 c0 02             	add    eax,0x2
c000f5ab:	8a 00                	mov    al,BYTE PTR [eax]
c000f5ad:	0f b6 c8             	movzx  ecx,al
c000f5b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5b3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f5b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f5bc:	c1 e0 04             	shl    eax,0x4
c000f5bf:	01 d0                	add    eax,edx
c000f5c1:	40                   	inc    eax
c000f5c2:	8a 00                	mov    al,BYTE PTR [eax]
c000f5c4:	0f b6 d0             	movzx  edx,al
c000f5c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5ca:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f5cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f5d3:	c1 e0 04             	shl    eax,0x4
c000f5d6:	01 f0                	add    eax,esi
c000f5d8:	8a 00                	mov    al,BYTE PTR [eax]
c000f5da:	0f b6 c0             	movzx  eax,al
c000f5dd:	83 ec 0c             	sub    esp,0xc
c000f5e0:	53                   	push   ebx
c000f5e1:	51                   	push   ecx
c000f5e2:	52                   	push   edx
c000f5e3:	50                   	push   eax
c000f5e4:	68 30 4f 02 c0       	push   0xc0024f30
c000f5e9:	e8 0d d7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f5ee:	83 c4 20             	add    esp,0x20
c000f5f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5f7:	83 c0 03             	add    eax,0x3
c000f5fa:	8a 00                	mov    al,BYTE PTR [eax]
c000f5fc:	0f b6 d8             	movzx  ebx,al
c000f5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f602:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f605:	83 c0 02             	add    eax,0x2
c000f608:	8a 00                	mov    al,BYTE PTR [eax]
c000f60a:	0f b6 c8             	movzx  ecx,al
c000f60d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f610:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f613:	40                   	inc    eax
c000f614:	8a 00                	mov    al,BYTE PTR [eax]
c000f616:	0f b6 d0             	movzx  edx,al
c000f619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f61c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f61f:	8a 00                	mov    al,BYTE PTR [eax]
c000f621:	0f b6 c0             	movzx  eax,al
c000f624:	83 ec 0c             	sub    esp,0xc
c000f627:	53                   	push   ebx
c000f628:	51                   	push   ecx
c000f629:	52                   	push   edx
c000f62a:	50                   	push   eax
c000f62b:	68 58 4f 02 c0       	push   0xc0024f58
c000f630:	e8 c6 d6 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f635:	83 c4 20             	add    esp,0x20
c000f638:	83 ec 0c             	sub    esp,0xc
c000f63b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f63e:	e8 9b f6 ff ff       	call   c000ecde <displayDebugInfo(regs*)>
c000f643:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f646:	5b                   	pop    ebx
c000f647:	5e                   	pop    esi
c000f648:	5d                   	pop    ebp
c000f649:	c3                   	ret    

c000f64a <displayProgramFault(char const*)>:
c000f64a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f64f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f652:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f658:	85 c0                	test   eax,eax
c000f65a:	74 15                	je     c000f671 <displayProgramFault(char const*)+0x27>
c000f65c:	83 ec 0c             	sub    esp,0xc
c000f65f:	6a 04                	push   0x4
c000f661:	6a 0f                	push   0xf
c000f663:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f667:	50                   	push   eax
c000f668:	e8 a5 b6 ff ff       	call   c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f66d:	83 c4 1c             	add    esp,0x1c
c000f670:	c3                   	ret    
c000f671:	c3                   	ret    

c000f672 <setupInterruptController()>:
c000f672:	55                   	push   ebp
c000f673:	89 e5                	mov    ebp,esp
c000f675:	53                   	push   ebx
c000f676:	83 ec 24             	sub    esp,0x24
c000f679:	b8 00 00 00 00       	mov    eax,0x0
c000f67e:	85 c0                	test   eax,eax
c000f680:	0f 95 c0             	setne  al
c000f683:	84 c0                	test   al,al
c000f685:	74 5b                	je     c000f6e2 <setupInterruptController()+0x70>
c000f687:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f68e:	83 ec 0c             	sub    esp,0xc
c000f691:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f694:	e8 76 a3 ff ff       	call   c0009a0f <malloc>
c000f699:	83 c4 10             	add    esp,0x10
c000f69c:	89 c3                	mov    ebx,eax
c000f69e:	83 ec 0c             	sub    esp,0xc
c000f6a1:	53                   	push   ebx
c000f6a2:	e8 37 20 01 00       	call   c00216de <APIC::APIC()>
c000f6a7:	83 c4 10             	add    esp,0x10
c000f6aa:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f6ad:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f6b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f6b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6b5:	83 c0 08             	add    eax,0x8
c000f6b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6ba:	6a 00                	push   0x0
c000f6bc:	6a 00                	push   0x0
c000f6be:	6a 00                	push   0x0
c000f6c0:	52                   	push   edx
c000f6c1:	ff d0                	call   eax
c000f6c3:	83 c4 10             	add    esp,0x10
c000f6c6:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000f6cb:	83 ec 08             	sub    esp,0x8
c000f6ce:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f6d1:	50                   	push   eax
c000f6d2:	e8 97 eb ff ff       	call   c000e26e <Device::addChild(Device*)>
c000f6d7:	83 c4 10             	add    esp,0x10
c000f6da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f6dd:	e9 79 03 00 00       	jmp    c000fa5b <setupInterruptController()+0x3e9>
c000f6e2:	a0 80 88 02 c0       	mov    al,ds:0xc0028880
c000f6e7:	84 c0                	test   al,al
c000f6e9:	75 14                	jne    c000f6ff <setupInterruptController()+0x8d>
c000f6eb:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000f6f0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f6f6:	83 e2 fe             	and    edx,0xfffffffe
c000f6f9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f6ff:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000f704:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f70a:	83 e0 01             	and    eax,0x1
c000f70d:	84 c0                	test   al,al
c000f70f:	0f 95 c0             	setne  al
c000f712:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f715:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f71c:	83 ec 0c             	sub    esp,0xc
c000f71f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f722:	e8 e8 a2 ff ff       	call   c0009a0f <malloc>
c000f727:	83 c4 10             	add    esp,0x10
c000f72a:	89 c3                	mov    ebx,eax
c000f72c:	83 ec 0c             	sub    esp,0xc
c000f72f:	53                   	push   ebx
c000f730:	e8 01 25 01 00       	call   c0021c36 <PIC::PIC()>
c000f735:	83 c4 10             	add    esp,0x10
c000f738:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f73b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f73e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f741:	8b 00                	mov    eax,DWORD PTR [eax]
c000f743:	83 c0 08             	add    eax,0x8
c000f746:	8b 00                	mov    eax,DWORD PTR [eax]
c000f748:	6a 00                	push   0x0
c000f74a:	6a 00                	push   0x0
c000f74c:	6a 00                	push   0x0
c000f74e:	52                   	push   edx
c000f74f:	ff d0                	call   eax
c000f751:	83 c4 10             	add    esp,0x10
c000f754:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f758:	74 73                	je     c000f7cd <setupInterruptController()+0x15b>
c000f75a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f75d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f760:	8b 00                	mov    eax,DWORD PTR [eax]
c000f762:	83 c0 0c             	add    eax,0xc
c000f765:	8b 00                	mov    eax,DWORD PTR [eax]
c000f767:	6a 00                	push   0x0
c000f769:	6a 00                	push   0x0
c000f76b:	6a 00                	push   0x0
c000f76d:	52                   	push   edx
c000f76e:	ff d0                	call   eax
c000f770:	83 c4 10             	add    esp,0x10
c000f773:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f777:	74 15                	je     c000f78e <setupInterruptController()+0x11c>
c000f779:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f77c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f77e:	83 c0 04             	add    eax,0x4
c000f781:	8b 00                	mov    eax,DWORD PTR [eax]
c000f783:	83 ec 0c             	sub    esp,0xc
c000f786:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f789:	ff d0                	call   eax
c000f78b:	83 c4 10             	add    esp,0x10
c000f78e:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f795:	83 ec 0c             	sub    esp,0xc
c000f798:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f79b:	e8 6f a2 ff ff       	call   c0009a0f <malloc>
c000f7a0:	83 c4 10             	add    esp,0x10
c000f7a3:	89 c3                	mov    ebx,eax
c000f7a5:	83 ec 0c             	sub    esp,0xc
c000f7a8:	53                   	push   ebx
c000f7a9:	e8 30 1f 01 00       	call   c00216de <APIC::APIC()>
c000f7ae:	83 c4 10             	add    esp,0x10
c000f7b1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f7b4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f7b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7bc:	83 c0 08             	add    eax,0x8
c000f7bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c1:	6a 00                	push   0x0
c000f7c3:	6a 00                	push   0x0
c000f7c5:	6a 00                	push   0x0
c000f7c7:	52                   	push   edx
c000f7c8:	ff d0                	call   eax
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000f7d2:	83 ec 08             	sub    esp,0x8
c000f7d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7d8:	50                   	push   eax
c000f7d9:	e8 90 ea ff ff       	call   c000e26e <Device::addChild(Device*)>
c000f7de:	83 c4 10             	add    esp,0x10
c000f7e1:	c7 05 a8 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00280a8,0x0
c000f7eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f0:	83 c0 24             	add    eax,0x24
c000f7f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f5:	6a 00                	push   0x0
c000f7f7:	68 68 f2 00 c0       	push   0xc000f268
c000f7fc:	6a 00                	push   0x0
c000f7fe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f801:	ff d0                	call   eax
c000f803:	83 c4 10             	add    esp,0x10
c000f806:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f809:	8b 00                	mov    eax,DWORD PTR [eax]
c000f80b:	83 c0 24             	add    eax,0x24
c000f80e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f810:	6a 00                	push   0x0
c000f812:	68 68 f2 00 c0       	push   0xc000f268
c000f817:	6a 01                	push   0x1
c000f819:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f81c:	ff d0                	call   eax
c000f81e:	83 c4 10             	add    esp,0x10
c000f821:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f824:	8b 00                	mov    eax,DWORD PTR [eax]
c000f826:	83 c0 24             	add    eax,0x24
c000f829:	8b 00                	mov    eax,DWORD PTR [eax]
c000f82b:	6a 00                	push   0x0
c000f82d:	68 3b eb 00 c0       	push   0xc000eb3b
c000f832:	6a 02                	push   0x2
c000f834:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f837:	ff d0                	call   eax
c000f839:	83 c4 10             	add    esp,0x10
c000f83c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f83f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f841:	83 c0 24             	add    eax,0x24
c000f844:	8b 00                	mov    eax,DWORD PTR [eax]
c000f846:	6a 00                	push   0x0
c000f848:	68 68 f2 00 c0       	push   0xc000f268
c000f84d:	6a 03                	push   0x3
c000f84f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f852:	ff d0                	call   eax
c000f854:	83 c4 10             	add    esp,0x10
c000f857:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f85a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f85c:	83 c0 24             	add    eax,0x24
c000f85f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f861:	6a 00                	push   0x0
c000f863:	68 68 f2 00 c0       	push   0xc000f268
c000f868:	6a 04                	push   0x4
c000f86a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f86d:	ff d0                	call   eax
c000f86f:	83 c4 10             	add    esp,0x10
c000f872:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f875:	8b 00                	mov    eax,DWORD PTR [eax]
c000f877:	83 c0 24             	add    eax,0x24
c000f87a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f87c:	6a 00                	push   0x0
c000f87e:	68 68 f2 00 c0       	push   0xc000f268
c000f883:	6a 05                	push   0x5
c000f885:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f888:	ff d0                	call   eax
c000f88a:	83 c4 10             	add    esp,0x10
c000f88d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f890:	8b 00                	mov    eax,DWORD PTR [eax]
c000f892:	83 c0 24             	add    eax,0x24
c000f895:	8b 00                	mov    eax,DWORD PTR [eax]
c000f897:	6a 00                	push   0x0
c000f899:	68 87 f2 00 c0       	push   0xc000f287
c000f89e:	6a 06                	push   0x6
c000f8a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8a3:	ff d0                	call   eax
c000f8a5:	83 c4 10             	add    esp,0x10
c000f8a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ad:	83 c0 24             	add    eax,0x24
c000f8b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b2:	6a 00                	push   0x0
c000f8b4:	68 6d f1 00 c0       	push   0xc000f16d
c000f8b9:	6a 07                	push   0x7
c000f8bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8be:	ff d0                	call   eax
c000f8c0:	83 c4 10             	add    esp,0x10
c000f8c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8c8:	83 c0 24             	add    eax,0x24
c000f8cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8cd:	6a 00                	push   0x0
c000f8cf:	68 56 e9 00 c0       	push   0xc000e956
c000f8d4:	6a 08                	push   0x8
c000f8d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8d9:	ff d0                	call   eax
c000f8db:	83 c4 10             	add    esp,0x10
c000f8de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8e3:	83 c0 24             	add    eax,0x24
c000f8e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8e8:	6a 00                	push   0x0
c000f8ea:	68 68 f2 00 c0       	push   0xc000f268
c000f8ef:	6a 09                	push   0x9
c000f8f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8f4:	ff d0                	call   eax
c000f8f6:	83 c4 10             	add    esp,0x10
c000f8f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8fe:	83 c0 24             	add    eax,0x24
c000f901:	8b 00                	mov    eax,DWORD PTR [eax]
c000f903:	6a 00                	push   0x0
c000f905:	68 68 f2 00 c0       	push   0xc000f268
c000f90a:	6a 0a                	push   0xa
c000f90c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f90f:	ff d0                	call   eax
c000f911:	83 c4 10             	add    esp,0x10
c000f914:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f917:	8b 00                	mov    eax,DWORD PTR [eax]
c000f919:	83 c0 24             	add    eax,0x24
c000f91c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f91e:	6a 00                	push   0x0
c000f920:	68 68 f2 00 c0       	push   0xc000f268
c000f925:	6a 0b                	push   0xb
c000f927:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f92a:	ff d0                	call   eax
c000f92c:	83 c4 10             	add    esp,0x10
c000f92f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f932:	8b 00                	mov    eax,DWORD PTR [eax]
c000f934:	83 c0 24             	add    eax,0x24
c000f937:	8b 00                	mov    eax,DWORD PTR [eax]
c000f939:	6a 00                	push   0x0
c000f93b:	68 68 f2 00 c0       	push   0xc000f268
c000f940:	6a 0c                	push   0xc
c000f942:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f945:	ff d0                	call   eax
c000f947:	83 c4 10             	add    esp,0x10
c000f94a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f94d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f94f:	83 c0 24             	add    eax,0x24
c000f952:	8b 00                	mov    eax,DWORD PTR [eax]
c000f954:	6a 00                	push   0x0
c000f956:	68 e0 f1 00 c0       	push   0xc000f1e0
c000f95b:	6a 0d                	push   0xd
c000f95d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f960:	ff d0                	call   eax
c000f962:	83 c4 10             	add    esp,0x10
c000f965:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f968:	8b 00                	mov    eax,DWORD PTR [eax]
c000f96a:	83 c0 24             	add    eax,0x24
c000f96d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f96f:	6a 00                	push   0x0
c000f971:	68 19 f2 00 c0       	push   0xc000f219
c000f976:	6a 0e                	push   0xe
c000f978:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f97b:	ff d0                	call   eax
c000f97d:	83 c4 10             	add    esp,0x10
c000f980:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f983:	8b 00                	mov    eax,DWORD PTR [eax]
c000f985:	83 c0 24             	add    eax,0x24
c000f988:	8b 00                	mov    eax,DWORD PTR [eax]
c000f98a:	6a 00                	push   0x0
c000f98c:	68 68 f2 00 c0       	push   0xc000f268
c000f991:	6a 0f                	push   0xf
c000f993:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f996:	ff d0                	call   eax
c000f998:	83 c4 10             	add    esp,0x10
c000f99b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f99e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9a0:	83 c0 24             	add    eax,0x24
c000f9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9a5:	6a 00                	push   0x0
c000f9a7:	68 68 f2 00 c0       	push   0xc000f268
c000f9ac:	6a 10                	push   0x10
c000f9ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9b1:	ff d0                	call   eax
c000f9b3:	83 c4 10             	add    esp,0x10
c000f9b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9bb:	83 c0 24             	add    eax,0x24
c000f9be:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c0:	6a 00                	push   0x0
c000f9c2:	68 68 f2 00 c0       	push   0xc000f268
c000f9c7:	6a 11                	push   0x11
c000f9c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9cc:	ff d0                	call   eax
c000f9ce:	83 c4 10             	add    esp,0x10
c000f9d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9d6:	83 c0 24             	add    eax,0x24
c000f9d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9db:	6a 00                	push   0x0
c000f9dd:	68 68 f2 00 c0       	push   0xc000f268
c000f9e2:	6a 12                	push   0x12
c000f9e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9e7:	ff d0                	call   eax
c000f9e9:	83 c4 10             	add    esp,0x10
c000f9ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9f1:	83 c0 24             	add    eax,0x24
c000f9f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9f6:	6a 00                	push   0x0
c000f9f8:	68 68 f2 00 c0       	push   0xc000f268
c000f9fd:	6a 13                	push   0x13
c000f9ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa02:	ff d0                	call   eax
c000fa04:	83 c4 10             	add    esp,0x10
c000fa07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa0a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa0c:	83 c0 24             	add    eax,0x24
c000fa0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa11:	6a 00                	push   0x0
c000fa13:	68 68 f2 00 c0       	push   0xc000f268
c000fa18:	6a 14                	push   0x14
c000fa1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa1d:	ff d0                	call   eax
c000fa1f:	83 c4 10             	add    esp,0x10
c000fa22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa25:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa27:	83 c0 24             	add    eax,0x24
c000fa2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa2c:	6a 00                	push   0x0
c000fa2e:	68 68 f2 00 c0       	push   0xc000f268
c000fa33:	6a 1e                	push   0x1e
c000fa35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa38:	ff d0                	call   eax
c000fa3a:	83 c4 10             	add    esp,0x10
c000fa3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa40:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa42:	83 c0 24             	add    eax,0x24
c000fa45:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa47:	6a 00                	push   0x0
c000fa49:	68 fb 6c 01 c0       	push   0xc0016cfb
c000fa4e:	6a 60                	push   0x60
c000fa50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa53:	ff d0                	call   eax
c000fa55:	83 c4 10             	add    esp,0x10
c000fa58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa5b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fa5e:	c9                   	leave  
c000fa5f:	c3                   	ret    

c000fa60 <InterruptController::convertLegacyIRQNumber(int)>:
c000fa60:	55                   	push   ebp
c000fa61:	89 e5                	mov    ebp,esp
c000fa63:	83 ec 08             	sub    esp,0x8
c000fa66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa69:	83 ec 0c             	sub    esp,0xc
c000fa6c:	50                   	push   eax
c000fa6d:	e8 fc ea ff ff       	call   c000e56e <Device::getName()>
c000fa72:	83 c4 10             	add    esp,0x10
c000fa75:	8a 00                	mov    al,BYTE PTR [eax]
c000fa77:	3c 41                	cmp    al,0x41
c000fa79:	0f 94 c0             	sete   al
c000fa7c:	84 c0                	test   al,al
c000fa7e:	74 28                	je     c000faa8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fa80:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fa84:	7f 12                	jg     c000fa98 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fa86:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fa89:	05 60 76 02 c0       	add    eax,0xc0027660
c000fa8e:	8a 00                	mov    al,BYTE PTR [eax]
c000fa90:	0f b6 c0             	movzx  eax,al
c000fa93:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fa96:	eb 10                	jmp    c000faa8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fa98:	83 ec 0c             	sub    esp,0xc
c000fa9b:	68 80 4f 02 c0       	push   0xc0024f80
c000faa0:	e8 62 4f 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c000faa5:	83 c4 10             	add    esp,0x10
c000faa8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000faab:	c9                   	leave  
c000faac:	c3                   	ret    
c000faad:	90                   	nop

c000faae <startGUI(void*)>:
c000faae:	55                   	push   ebp
c000faaf:	89 e5                	mov    ebp,esp
c000fab1:	53                   	push   ebx
c000fab2:	83 ec 04             	sub    esp,0x4
c000fab5:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000faba:	48                   	dec    eax
c000fabb:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000fac0:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000fac5:	85 c0                	test   eax,eax
c000fac7:	75 01                	jne    c000faca <startGUI(void*)+0x1c>
c000fac9:	fb                   	sti    
c000faca:	8b 1d 68 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f68
c000fad0:	83 ec 08             	sub    esp,0x8
c000fad3:	6a 01                	push   0x1
c000fad5:	68 00 50 02 c0       	push   0xc0025000
c000fada:	e8 f7 81 00 00       	call   c0017cd6 <Thr::loadDLL(char const*, bool)>
c000fadf:	83 c4 10             	add    esp,0x10
c000fae2:	83 ec 08             	sub    esp,0x8
c000fae5:	53                   	push   ebx
c000fae6:	50                   	push   eax
c000fae7:	e8 1b 84 00 00       	call   c0017f07 <Thr::executeDLL(unsigned long, void*)>
c000faec:	83 c4 10             	add    esp,0x10
c000faef:	8b 1d 68 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f68
c000faf5:	83 ec 08             	sub    esp,0x8
c000faf8:	6a 01                	push   0x1
c000fafa:	68 1a 50 02 c0       	push   0xc002501a
c000faff:	e8 d2 81 00 00       	call   c0017cd6 <Thr::loadDLL(char const*, bool)>
c000fb04:	83 c4 10             	add    esp,0x10
c000fb07:	83 ec 08             	sub    esp,0x8
c000fb0a:	53                   	push   ebx
c000fb0b:	50                   	push   eax
c000fb0c:	e8 f6 83 00 00       	call   c0017f07 <Thr::executeDLL(unsigned long, void*)>
c000fb11:	83 c4 10             	add    esp,0x10
c000fb14:	90                   	nop
c000fb15:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fb18:	c9                   	leave  
c000fb19:	c3                   	ret    

c000fb1a <startGUIVESA(void*)>:
c000fb1a:	55                   	push   ebp
c000fb1b:	89 e5                	mov    ebp,esp
c000fb1d:	53                   	push   ebx
c000fb1e:	83 ec 04             	sub    esp,0x4
c000fb21:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000fb26:	48                   	dec    eax
c000fb27:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000fb2c:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000fb31:	85 c0                	test   eax,eax
c000fb33:	75 01                	jne    c000fb36 <startGUIVESA(void*)+0x1c>
c000fb35:	fb                   	sti    
c000fb36:	8b 1d 68 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f68
c000fb3c:	83 ec 08             	sub    esp,0x8
c000fb3f:	6a 01                	push   0x1
c000fb41:	68 38 50 02 c0       	push   0xc0025038
c000fb46:	e8 8b 81 00 00       	call   c0017cd6 <Thr::loadDLL(char const*, bool)>
c000fb4b:	83 c4 10             	add    esp,0x10
c000fb4e:	83 ec 08             	sub    esp,0x8
c000fb51:	53                   	push   ebx
c000fb52:	50                   	push   eax
c000fb53:	e8 af 83 00 00       	call   c0017f07 <Thr::executeDLL(unsigned long, void*)>
c000fb58:	83 c4 10             	add    esp,0x10
c000fb5b:	8b 1d 68 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f68
c000fb61:	83 ec 08             	sub    esp,0x8
c000fb64:	6a 01                	push   0x1
c000fb66:	68 1a 50 02 c0       	push   0xc002501a
c000fb6b:	e8 66 81 00 00       	call   c0017cd6 <Thr::loadDLL(char const*, bool)>
c000fb70:	83 c4 10             	add    esp,0x10
c000fb73:	83 ec 08             	sub    esp,0x8
c000fb76:	53                   	push   ebx
c000fb77:	50                   	push   eax
c000fb78:	e8 8a 83 00 00       	call   c0017f07 <Thr::executeDLL(unsigned long, void*)>
c000fb7d:	83 c4 10             	add    esp,0x10
c000fb80:	90                   	nop
c000fb81:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fb84:	c9                   	leave  
c000fb85:	c3                   	ret    

c000fb86 <sendKeyToTerminal(unsigned char)>:
c000fb86:	55                   	push   ebp
c000fb87:	89 e5                	mov    ebp,esp
c000fb89:	83 ec 28             	sub    esp,0x28
c000fb8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb8f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fb92:	a1 e4 7f 02 c0       	mov    eax,ds:0xc0027fe4
c000fb97:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fb9b:	83 ec 08             	sub    esp,0x8
c000fb9e:	52                   	push   edx
c000fb9f:	50                   	push   eax
c000fba0:	e8 13 b6 ff ff       	call   c000b1b8 <VgaText::receiveKey(unsigned char)>
c000fba5:	83 c4 10             	add    esp,0x10
c000fba8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fbac:	0f 85 8f 00 00 00    	jne    c000fc41 <sendKeyToTerminal(unsigned char)+0xbb>
c000fbb2:	fa                   	cli    
c000fbb3:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000fbb8:	40                   	inc    eax
c000fbb9:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000fbbe:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c000fbc3:	40                   	inc    eax
c000fbc4:	a3 84 94 02 c0       	mov    ds:0xc0029484,eax
c000fbc9:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c000fbce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fbd1:	c7 05 c0 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00280c0,0x0
c000fbdb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fbdf:	74 1f                	je     c000fc00 <sendKeyToTerminal(unsigned char)+0x7a>
c000fbe1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbe4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fbe7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fbea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fbed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fbf0:	83 ec 0c             	sub    esp,0xc
c000fbf3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbf6:	e8 7d 8f 00 00       	call   c0018b78 <unblockTask(ThreadControlBlock*)>
c000fbfb:	83 c4 10             	add    esp,0x10
c000fbfe:	eb db                	jmp    c000fbdb <sendKeyToTerminal(unsigned char)+0x55>
c000fc00:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c000fc05:	48                   	dec    eax
c000fc06:	a3 84 94 02 c0       	mov    ds:0xc0029484,eax
c000fc0b:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c000fc10:	85 c0                	test   eax,eax
c000fc12:	75 18                	jne    c000fc2c <sendKeyToTerminal(unsigned char)+0xa6>
c000fc14:	a1 80 94 02 c0       	mov    eax,ds:0xc0029480
c000fc19:	85 c0                	test   eax,eax
c000fc1b:	74 0f                	je     c000fc2c <sendKeyToTerminal(unsigned char)+0xa6>
c000fc1d:	c7 05 80 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x0
c000fc27:	e8 90 8a 00 00       	call   c00186bc <schedule()>
c000fc2c:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000fc31:	48                   	dec    eax
c000fc32:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c000fc37:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c000fc3c:	85 c0                	test   eax,eax
c000fc3e:	75 01                	jne    c000fc41 <sendKeyToTerminal(unsigned char)+0xbb>
c000fc40:	fb                   	sti    
c000fc41:	90                   	nop
c000fc42:	c9                   	leave  
c000fc43:	c3                   	ret    

c000fc44 <sendKeyboardToken(KeyboardToken)>:
c000fc44:	55                   	push   ebp
c000fc45:	89 e5                	mov    ebp,esp
c000fc47:	83 ec 18             	sub    esp,0x18
c000fc4a:	e8 3b 51 00 00       	call   c0014d8a <Krnl::userIOReceived()>
c000fc4f:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fc52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc55:	0f b7 c0             	movzx  eax,ax
c000fc58:	83 f2 01             	xor    edx,0x1
c000fc5b:	88 90 e0 80 02 c0    	mov    BYTE PTR [eax-0x3ffd7f20],dl
c000fc61:	a1 c8 80 02 c0       	mov    eax,ds:0xc00280c8
c000fc66:	85 c0                	test   eax,eax
c000fc68:	74 24                	je     c000fc8e <sendKeyboardToken(KeyboardToken)+0x4a>
c000fc6a:	8b 0d c8 80 02 c0    	mov    ecx,DWORD PTR ds:0xc00280c8
c000fc70:	83 ec 04             	sub    esp,0x4
c000fc73:	68 e0 80 02 c0       	push   0xc00280e0
c000fc78:	83 ec 08             	sub    esp,0x8
c000fc7b:	89 e2                	mov    edx,esp
c000fc7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc80:	89 02                	mov    DWORD PTR [edx],eax
c000fc82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fc85:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fc89:	ff d1                	call   ecx
c000fc8b:	83 c4 10             	add    esp,0x10
c000fc8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc91:	66 3d 03 02          	cmp    ax,0x203
c000fc95:	75 07                	jne    c000fc9e <sendKeyboardToken(KeyboardToken)+0x5a>
c000fc97:	a0 e0 81 02 c0       	mov    al,ds:0xc00281e0
c000fc9c:	84 c0                	test   al,al
c000fc9e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fca2:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fca5:	a0 e8 84 02 c0       	mov    al,ds:0xc00284e8
c000fcaa:	38 c2                	cmp    dl,al
c000fcac:	74 1c                	je     c000fcca <sendKeyboardToken(KeyboardToken)+0x86>
c000fcae:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fcb1:	a2 e8 84 02 c0       	mov    ds:0xc00284e8,al
c000fcb6:	a0 e8 84 02 c0       	mov    al,ds:0xc00284e8
c000fcbb:	0f b6 c0             	movzx  eax,al
c000fcbe:	83 ec 0c             	sub    esp,0xc
c000fcc1:	50                   	push   eax
c000fcc2:	e8 33 ab ff ff       	call   c000a7fa <setTerminalScrollLock(bool)>
c000fcc7:	83 c4 10             	add    esp,0x10
c000fcca:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fccd:	84 c0                	test   al,al
c000fccf:	0f 84 ae 00 00 00    	je     c000fd83 <sendKeyboardToken(KeyboardToken)+0x13f>
c000fcd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd8:	66 3d 10 03          	cmp    ax,0x310
c000fcdc:	75 06                	jne    c000fce4 <sendKeyboardToken(KeyboardToken)+0xa0>
c000fcde:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fce7:	66 3d 11 03          	cmp    ax,0x311
c000fceb:	75 06                	jne    c000fcf3 <sendKeyboardToken(KeyboardToken)+0xaf>
c000fced:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fcf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcf6:	66 3d 12 03          	cmp    ax,0x312
c000fcfa:	75 06                	jne    c000fd02 <sendKeyboardToken(KeyboardToken)+0xbe>
c000fcfc:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fd02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd05:	66 3d 13 03          	cmp    ax,0x313
c000fd09:	75 06                	jne    c000fd11 <sendKeyboardToken(KeyboardToken)+0xcd>
c000fd0b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fd11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd14:	66 3d 14 03          	cmp    ax,0x314
c000fd18:	75 06                	jne    c000fd20 <sendKeyboardToken(KeyboardToken)+0xdc>
c000fd1a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fd20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd23:	66 3d 15 03          	cmp    ax,0x315
c000fd27:	75 06                	jne    c000fd2f <sendKeyboardToken(KeyboardToken)+0xeb>
c000fd29:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fd2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd32:	66 3d 16 03          	cmp    ax,0x316
c000fd36:	75 06                	jne    c000fd3e <sendKeyboardToken(KeyboardToken)+0xfa>
c000fd38:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fd3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd41:	66 3d 17 03          	cmp    ax,0x317
c000fd45:	75 06                	jne    c000fd4d <sendKeyboardToken(KeyboardToken)+0x109>
c000fd47:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fd4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd50:	66 3d 18 03          	cmp    ax,0x318
c000fd54:	75 06                	jne    c000fd5c <sendKeyboardToken(KeyboardToken)+0x118>
c000fd56:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fd5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd5f:	66 3d 19 03          	cmp    ax,0x319
c000fd63:	75 06                	jne    c000fd6b <sendKeyboardToken(KeyboardToken)+0x127>
c000fd65:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fd6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd6e:	66 3d 1a 03          	cmp    ax,0x31a
c000fd72:	0f 85 c9 00 00 00    	jne    c000fe41 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fd78:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fd7e:	e9 be 00 00 00       	jmp    c000fe41 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fd83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd86:	66 3d 10 03          	cmp    ax,0x310
c000fd8a:	75 0a                	jne    c000fd96 <sendKeyboardToken(KeyboardToken)+0x152>
c000fd8c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fd92:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd99:	66 3d 11 03          	cmp    ax,0x311
c000fd9d:	75 0a                	jne    c000fda9 <sendKeyboardToken(KeyboardToken)+0x165>
c000fd9f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fda5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fda9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdac:	66 3d 12 03          	cmp    ax,0x312
c000fdb0:	75 0a                	jne    c000fdbc <sendKeyboardToken(KeyboardToken)+0x178>
c000fdb2:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fdb8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdbf:	66 3d 13 03          	cmp    ax,0x313
c000fdc3:	75 0a                	jne    c000fdcf <sendKeyboardToken(KeyboardToken)+0x18b>
c000fdc5:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fdcb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdd2:	66 3d 14 03          	cmp    ax,0x314
c000fdd6:	75 0a                	jne    c000fde2 <sendKeyboardToken(KeyboardToken)+0x19e>
c000fdd8:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fdde:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fde2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fde5:	66 3d 15 03          	cmp    ax,0x315
c000fde9:	75 0a                	jne    c000fdf5 <sendKeyboardToken(KeyboardToken)+0x1b1>
c000fdeb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fdf1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdf8:	66 3d 16 03          	cmp    ax,0x316
c000fdfc:	75 0a                	jne    c000fe08 <sendKeyboardToken(KeyboardToken)+0x1c4>
c000fdfe:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fe04:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe0b:	66 3d 17 03          	cmp    ax,0x317
c000fe0f:	75 0a                	jne    c000fe1b <sendKeyboardToken(KeyboardToken)+0x1d7>
c000fe11:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fe17:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe1e:	66 3d 18 03          	cmp    ax,0x318
c000fe22:	75 0a                	jne    c000fe2e <sendKeyboardToken(KeyboardToken)+0x1ea>
c000fe24:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fe2a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe31:	66 3d 19 03          	cmp    ax,0x319
c000fe35:	75 0a                	jne    c000fe41 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fe37:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fe3d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe44:	66 3d 00 02          	cmp    ax,0x200
c000fe48:	75 2c                	jne    c000fe76 <sendKeyboardToken(KeyboardToken)+0x232>
c000fe4a:	a0 e0 84 02 c0       	mov    al,ds:0xc00284e0
c000fe4f:	83 f0 01             	xor    eax,0x1
c000fe52:	84 c0                	test   al,al
c000fe54:	74 20                	je     c000fe76 <sendKeyboardToken(KeyboardToken)+0x232>
c000fe56:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000fe5b:	6a 01                	push   0x1
c000fe5d:	6a 00                	push   0x0
c000fe5f:	68 ae fa 00 c0       	push   0xc000faae
c000fe64:	50                   	push   eax
c000fe65:	e8 36 86 00 00       	call   c00184a0 <Process::createThread(void (*)(void*), void*, int)>
c000fe6a:	83 c4 10             	add    esp,0x10
c000fe6d:	c6 05 e0 84 02 c0 01 	mov    BYTE PTR ds:0xc00284e0,0x1
c000fe74:	eb 33                	jmp    c000fea9 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe79:	66 3d 01 02          	cmp    ax,0x201
c000fe7d:	75 2a                	jne    c000fea9 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe7f:	a0 e0 84 02 c0       	mov    al,ds:0xc00284e0
c000fe84:	83 f0 01             	xor    eax,0x1
c000fe87:	84 c0                	test   al,al
c000fe89:	74 1e                	je     c000fea9 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe8b:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c000fe90:	6a 01                	push   0x1
c000fe92:	6a 00                	push   0x0
c000fe94:	68 1a fb 00 c0       	push   0xc000fb1a
c000fe99:	50                   	push   eax
c000fe9a:	e8 01 86 00 00       	call   c00184a0 <Process::createThread(void (*)(void*), void*, int)>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	c6 05 e0 84 02 c0 01 	mov    BYTE PTR ds:0xc00284e0,0x1
c000fea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feac:	66 3d 1d 03          	cmp    ax,0x31d
c000feb0:	75 06                	jne    c000feb8 <sendKeyboardToken(KeyboardToken)+0x274>
c000feb2:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000feb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000febb:	66 3d 1c 03          	cmp    ax,0x31c
c000febf:	75 06                	jne    c000fec7 <sendKeyboardToken(KeyboardToken)+0x283>
c000fec1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feca:	66 3d 1b 03          	cmp    ax,0x31b
c000fece:	75 06                	jne    c000fed6 <sendKeyboardToken(KeyboardToken)+0x292>
c000fed0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fed9:	66 3d 1e 03          	cmp    ax,0x31e
c000fedd:	75 06                	jne    c000fee5 <sendKeyboardToken(KeyboardToken)+0x2a1>
c000fedf:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fee8:	66 3d 1f 03          	cmp    ax,0x31f
c000feec:	75 06                	jne    c000fef4 <sendKeyboardToken(KeyboardToken)+0x2b0>
c000feee:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fef7:	66 3d 1a 03          	cmp    ax,0x31a
c000fefb:	75 06                	jne    c000ff03 <sendKeyboardToken(KeyboardToken)+0x2bf>
c000fefd:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ff03:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000ff07:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff0a:	83 f0 01             	xor    eax,0x1
c000ff0d:	84 c0                	test   al,al
c000ff0f:	74 77                	je     c000ff88 <sendKeyboardToken(KeyboardToken)+0x344>
c000ff11:	a0 e1 81 02 c0       	mov    al,ds:0xc00281e1
c000ff16:	84 c0                	test   al,al
c000ff18:	74 41                	je     c000ff5b <sendKeyboardToken(KeyboardToken)+0x317>
c000ff1a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ff1e:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000ff22:	74 2b                	je     c000ff4f <sendKeyboardToken(KeyboardToken)+0x30b>
c000ff24:	8b 15 e4 84 02 c0    	mov    edx,DWORD PTR ds:0xc00284e4
c000ff2a:	89 d0                	mov    eax,edx
c000ff2c:	c1 e0 02             	shl    eax,0x2
c000ff2f:	01 d0                	add    eax,edx
c000ff31:	01 c0                	add    eax,eax
c000ff33:	a3 e4 84 02 c0       	mov    ds:0xc00284e4,eax
c000ff38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff3b:	0f b7 c0             	movzx  eax,ax
c000ff3e:	8d 50 d0             	lea    edx,[eax-0x30]
c000ff41:	a1 e4 84 02 c0       	mov    eax,ds:0xc00284e4
c000ff46:	01 d0                	add    eax,edx
c000ff48:	a3 e4 84 02 c0       	mov    ds:0xc00284e4,eax
c000ff4d:	eb 6d                	jmp    c000ffbc <sendKeyboardToken(KeyboardToken)+0x378>
c000ff4f:	c7 05 e4 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00284e4,0x0
c000ff59:	eb 61                	jmp    c000ffbc <sendKeyboardToken(KeyboardToken)+0x378>
c000ff5b:	a1 e4 84 02 c0       	mov    eax,ds:0xc00284e4
c000ff60:	85 c0                	test   eax,eax
c000ff62:	74 18                	je     c000ff7c <sendKeyboardToken(KeyboardToken)+0x338>
c000ff64:	a1 e4 84 02 c0       	mov    eax,ds:0xc00284e4
c000ff69:	0f b6 c0             	movzx  eax,al
c000ff6c:	83 ec 0c             	sub    esp,0xc
c000ff6f:	50                   	push   eax
c000ff70:	e8 11 fc ff ff       	call   c000fb86 <sendKeyToTerminal(unsigned char)>
c000ff75:	83 c4 10             	add    esp,0x10
c000ff78:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ff7c:	c7 05 e4 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00284e4,0x0
c000ff86:	eb 34                	jmp    c000ffbc <sendKeyboardToken(KeyboardToken)+0x378>
c000ff88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff8b:	66 3d 01 01          	cmp    ax,0x101
c000ff8f:	75 2b                	jne    c000ffbc <sendKeyboardToken(KeyboardToken)+0x378>
c000ff91:	a1 e4 84 02 c0       	mov    eax,ds:0xc00284e4
c000ff96:	85 c0                	test   eax,eax
c000ff98:	74 18                	je     c000ffb2 <sendKeyboardToken(KeyboardToken)+0x36e>
c000ff9a:	a1 e4 84 02 c0       	mov    eax,ds:0xc00284e4
c000ff9f:	0f b6 c0             	movzx  eax,al
c000ffa2:	83 ec 0c             	sub    esp,0xc
c000ffa5:	50                   	push   eax
c000ffa6:	e8 db fb ff ff       	call   c000fb86 <sendKeyToTerminal(unsigned char)>
c000ffab:	83 c4 10             	add    esp,0x10
c000ffae:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ffb2:	c7 05 e4 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00284e4,0x0
c000ffbc:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ffbf:	83 f0 01             	xor    eax,0x1
c000ffc2:	84 c0                	test   al,al
c000ffc4:	74 4c                	je     c0010012 <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ffc6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ffc9:	83 f0 01             	xor    eax,0x1
c000ffcc:	84 c0                	test   al,al
c000ffce:	74 42                	je     c0010012 <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ffd0:	a0 e0 81 02 c0       	mov    al,ds:0xc00281e0
c000ffd5:	83 f0 01             	xor    eax,0x1
c000ffd8:	84 c0                	test   al,al
c000ffda:	74 36                	je     c0010012 <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ffdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffdf:	66 83 f8 1f          	cmp    ax,0x1f
c000ffe3:	76 09                	jbe    c000ffee <sendKeyboardToken(KeyboardToken)+0x3aa>
c000ffe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffe8:	66 83 f8 7e          	cmp    ax,0x7e
c000ffec:	76 12                	jbe    c0010000 <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ffee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fff1:	66 83 f8 0a          	cmp    ax,0xa
c000fff5:	74 09                	je     c0010000 <sendKeyboardToken(KeyboardToken)+0x3bc>
c000fff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fffa:	66 83 f8 08          	cmp    ax,0x8
c000fffe:	75 12                	jne    c0010012 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0010000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010003:	0f b6 c0             	movzx  eax,al
c0010006:	83 ec 0c             	sub    esp,0xc
c0010009:	50                   	push   eax
c001000a:	e8 77 fb ff ff       	call   c000fb86 <sendKeyToTerminal(unsigned char)>
c001000f:	83 c4 10             	add    esp,0x10
c0010012:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010015:	83 f0 01             	xor    eax,0x1
c0010018:	84 c0                	test   al,al
c001001a:	74 4f                	je     c001006b <sendKeyboardToken(KeyboardToken)+0x427>
c001001c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001001f:	83 f0 01             	xor    eax,0x1
c0010022:	84 c0                	test   al,al
c0010024:	74 45                	je     c001006b <sendKeyboardToken(KeyboardToken)+0x427>
c0010026:	a0 e0 81 02 c0       	mov    al,ds:0xc00281e0
c001002b:	84 c0                	test   al,al
c001002d:	74 3c                	je     c001006b <sendKeyboardToken(KeyboardToken)+0x427>
c001002f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010032:	66 83 f8 3f          	cmp    ax,0x3f
c0010036:	76 33                	jbe    c001006b <sendKeyboardToken(KeyboardToken)+0x427>
c0010038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001003b:	66 83 f8 7f          	cmp    ax,0x7f
c001003f:	77 2a                	ja     c001006b <sendKeyboardToken(KeyboardToken)+0x427>
c0010041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010044:	88 c2                	mov    dl,al
c0010046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010049:	66 83 f8 5f          	cmp    ax,0x5f
c001004d:	76 04                	jbe    c0010053 <sendKeyboardToken(KeyboardToken)+0x40f>
c001004f:	b0 20                	mov    al,0x20
c0010051:	eb 02                	jmp    c0010055 <sendKeyboardToken(KeyboardToken)+0x411>
c0010053:	b0 00                	mov    al,0x0
c0010055:	29 c2                	sub    edx,eax
c0010057:	88 d0                	mov    al,dl
c0010059:	83 e8 40             	sub    eax,0x40
c001005c:	0f b6 c0             	movzx  eax,al
c001005f:	83 ec 0c             	sub    esp,0xc
c0010062:	50                   	push   eax
c0010063:	e8 1e fb ff ff       	call   c000fb86 <sendKeyToTerminal(unsigned char)>
c0010068:	83 c4 10             	add    esp,0x10
c001006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001006e:	66 3d 00 03          	cmp    ax,0x300
c0010072:	75 0f                	jne    c0010083 <sendKeyboardToken(KeyboardToken)+0x43f>
c0010074:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010077:	83 f0 01             	xor    eax,0x1
c001007a:	84 c0                	test   al,al
c001007c:	74 05                	je     c0010083 <sendKeyboardToken(KeyboardToken)+0x43f>
c001007e:	e8 e8 aa ff ff       	call   c000ab6b <doTerminalCycle()>
c0010083:	90                   	nop
c0010084:	c9                   	leave  
c0010085:	c3                   	ret    

c0010086 <clearInternalKeybuffer(VgaText*)>:
c0010086:	55                   	push   ebp
c0010087:	89 e5                	mov    ebp,esp
c0010089:	83 ec 08             	sub    esp,0x8
c001008c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001008f:	05 32 01 00 00       	add    eax,0x132
c0010094:	83 ec 0c             	sub    esp,0xc
c0010097:	50                   	push   eax
c0010098:	e8 03 06 ff ff       	call   c00006a0 <strlen>
c001009d:	83 c4 10             	add    esp,0x10
c00100a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00100a3:	81 c2 32 01 00 00    	add    edx,0x132
c00100a9:	83 ec 04             	sub    esp,0x4
c00100ac:	50                   	push   eax
c00100ad:	6a 00                	push   0x0
c00100af:	52                   	push   edx
c00100b0:	e8 cf 05 ff ff       	call   c0000684 <memset>
c00100b5:	83 c4 10             	add    esp,0x10
c00100b8:	90                   	nop
c00100b9:	c9                   	leave  
c00100ba:	c3                   	ret    

c00100bb <readKeyboard(VgaText*, char*, unsigned long)>:
c00100bb:	55                   	push   ebp
c00100bc:	89 e5                	mov    ebp,esp
c00100be:	83 ec 18             	sub    esp,0x18
c00100c1:	a1 c8 80 02 c0       	mov    eax,ds:0xc00280c8
c00100c6:	85 c0                	test   eax,eax
c00100c8:	74 2a                	je     c00100f4 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00100ca:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00100d0:	8b 0d c8 80 02 c0    	mov    ecx,DWORD PTR ds:0xc00280c8
c00100d6:	83 ec 04             	sub    esp,0x4
c00100d9:	68 e0 80 02 c0       	push   0xc00280e0
c00100de:	83 ec 08             	sub    esp,0x8
c00100e1:	89 e2                	mov    edx,esp
c00100e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00100e6:	89 02                	mov    DWORD PTR [edx],eax
c00100e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00100eb:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00100ef:	ff d1                	call   ecx
c00100f1:	83 c4 10             	add    esp,0x10
c00100f4:	fb                   	sti    
c00100f5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00100fc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0010100:	0f 84 a1 00 00 00    	je     c00101a7 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0010106:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010109:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c001010f:	84 c0                	test   al,al
c0010111:	75 28                	jne    c001013b <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0010113:	fa                   	cli    
c0010114:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0010119:	40                   	inc    eax
c001011a:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c001011f:	e8 98 85 00 00       	call   c00186bc <schedule()>
c0010124:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0010129:	48                   	dec    eax
c001012a:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c001012f:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0010134:	85 c0                	test   eax,eax
c0010136:	75 ce                	jne    c0010106 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010138:	fb                   	sti    
c0010139:	eb cb                	jmp    c0010106 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001013b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001013e:	8d 50 01             	lea    edx,[eax+0x1]
c0010141:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010144:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010147:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c001014d:	88 10                	mov    BYTE PTR [eax],dl
c001014f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010152:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010158:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001015b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001015e:	05 32 01 00 00       	add    eax,0x132
c0010163:	83 ec 0c             	sub    esp,0xc
c0010166:	50                   	push   eax
c0010167:	e8 34 05 ff ff       	call   c00006a0 <strlen>
c001016c:	83 c4 10             	add    esp,0x10
c001016f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010172:	81 c2 32 01 00 00    	add    edx,0x132
c0010178:	8d 4a 01             	lea    ecx,[edx+0x1]
c001017b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001017e:	81 c2 32 01 00 00    	add    edx,0x132
c0010184:	83 ec 04             	sub    esp,0x4
c0010187:	50                   	push   eax
c0010188:	51                   	push   ecx
c0010189:	52                   	push   edx
c001018a:	e8 2d 04 ff ff       	call   c00005bc <memmove>
c001018f:	83 c4 10             	add    esp,0x10
c0010192:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0010195:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0010198:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001019c:	0f 85 5a ff ff ff    	jne    c00100fc <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00101a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00101a5:	eb 03                	jmp    c00101aa <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00101a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00101aa:	c9                   	leave  
c00101ab:	c3                   	ret    

c00101ac <Keyboard::Keyboard(char const*)>:
c00101ac:	83 ec 0c             	sub    esp,0xc
c00101af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101b3:	83 ec 08             	sub    esp,0x8
c00101b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101ba:	50                   	push   eax
c00101bb:	e8 b2 e2 ff ff       	call   c000e472 <Device::Device(char const*)>
c00101c0:	83 c4 10             	add    esp,0x10
c00101c3:	ba 5c 50 02 c0       	mov    edx,0xc002505c
c00101c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101cc:	89 10                	mov    DWORD PTR [eax],edx
c00101ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101d2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00101dc:	c6 05 c4 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c4,0x1
c00101e3:	90                   	nop
c00101e4:	83 c4 0c             	add    esp,0xc
c00101e7:	c3                   	ret    

c00101e8 <Keyboard::~Keyboard()>:
c00101e8:	83 ec 0c             	sub    esp,0xc
c00101eb:	ba 5c 50 02 c0       	mov    edx,0xc002505c
c00101f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101f4:	89 10                	mov    DWORD PTR [eax],edx
c00101f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101fa:	83 ec 0c             	sub    esp,0xc
c00101fd:	50                   	push   eax
c00101fe:	e8 39 df ff ff       	call   c000e13c <Device::~Device()>
c0010203:	83 c4 10             	add    esp,0x10
c0010206:	90                   	nop
c0010207:	83 c4 0c             	add    esp,0xc
c001020a:	c3                   	ret    
c001020b:	90                   	nop

c001020c <Keyboard::~Keyboard()>:
c001020c:	83 ec 0c             	sub    esp,0xc
c001020f:	83 ec 0c             	sub    esp,0xc
c0010212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010216:	e8 cd ff ff ff       	call   c00101e8 <Keyboard::~Keyboard()>
c001021b:	83 c4 10             	add    esp,0x10
c001021e:	83 ec 08             	sub    esp,0x8
c0010221:	68 5c 01 00 00       	push   0x15c
c0010226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001022a:	e8 eb c9 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001022f:	83 c4 10             	add    esp,0x10
c0010232:	83 c4 0c             	add    esp,0xc
c0010235:	c3                   	ret    

c0010236 <LogicalDisk::close(int, int, void*)>:
c0010236:	83 c8 ff             	or     eax,0xffffffff
c0010239:	c3                   	ret    

c001023a <LogicalDisk::~LogicalDisk()>:
c001023a:	83 ec 0c             	sub    esp,0xc
c001023d:	ba 2c 51 02 c0       	mov    edx,0xc002512c
c0010242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010246:	89 10                	mov    DWORD PTR [eax],edx
c0010248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001024c:	83 ec 0c             	sub    esp,0xc
c001024f:	50                   	push   eax
c0010250:	e8 e7 de ff ff       	call   c000e13c <Device::~Device()>
c0010255:	83 c4 10             	add    esp,0x10
c0010258:	90                   	nop
c0010259:	83 c4 0c             	add    esp,0xc
c001025c:	c3                   	ret    
c001025d:	90                   	nop

c001025e <LogicalDisk::~LogicalDisk()>:
c001025e:	83 ec 0c             	sub    esp,0xc
c0010261:	83 ec 0c             	sub    esp,0xc
c0010264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010268:	e8 cd ff ff ff       	call   c001023a <LogicalDisk::~LogicalDisk()>
c001026d:	83 c4 10             	add    esp,0x10
c0010270:	83 ec 08             	sub    esp,0x8
c0010273:	68 74 01 00 00       	push   0x174
c0010278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001027c:	e8 99 c9 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0010281:	83 c4 10             	add    esp,0x10
c0010284:	83 c4 0c             	add    esp,0xc
c0010287:	c3                   	ret    

c0010288 <LogicalDisk::open(int, int, void*)>:
c0010288:	83 ec 18             	sub    esp,0x18
c001028b:	68 88 50 02 c0       	push   0xc0025088
c0010290:	e8 72 47 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c0010295:	83 c8 ff             	or     eax,0xffffffff
c0010298:	83 c4 1c             	add    esp,0x1c
c001029b:	c3                   	ret    

c001029c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001029c:	53                   	push   ebx
c001029d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00102a9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00102af:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00102b5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00102bb:	77 10                	ja     c00102cd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00102bd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00102c3:	89 d3                	mov    ebx,edx
c00102c5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00102cb:	72 05                	jb     c00102d2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00102cd:	83 c8 ff             	or     eax,0xffffffff
c00102d0:	89 c2                	mov    edx,eax
c00102d2:	5b                   	pop    ebx
c00102d3:	c3                   	ret    

c00102d4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00102d4:	56                   	push   esi
c00102d5:	83 c8 ff             	or     eax,0xffffffff
c00102d8:	53                   	push   ebx
c00102d9:	89 c2                	mov    edx,eax
c00102db:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00102df:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00102e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102e7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00102ed:	77 27                	ja     c0010316 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00102ef:	89 d8                	mov    eax,ebx
c00102f1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00102f7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00102fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010302:	89 c2                	mov    edx,eax
c0010304:	73 10                	jae    c0010316 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010306:	89 c8                	mov    eax,ecx
c0010308:	89 da                	mov    edx,ebx
c001030a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010310:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0010316:	5b                   	pop    ebx
c0010317:	5e                   	pop    esi
c0010318:	c3                   	ret    
c0010319:	90                   	nop

c001031a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001031a:	83 ec 1c             	sub    esp,0x1c
c001031d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010321:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010325:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010329:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001032d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010331:	89 04 24             	mov    DWORD PTR [esp],eax
c0010334:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010338:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001033c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010340:	83 ec 08             	sub    esp,0x8
c0010343:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010347:	50                   	push   eax
c0010348:	e8 25 e1 ff ff       	call   c000e472 <Device::Device(char const*)>
c001034d:	83 c4 10             	add    esp,0x10
c0010350:	ba 2c 51 02 c0       	mov    edx,0xc002512c
c0010355:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010359:	89 10                	mov    DWORD PTR [eax],edx
c001035b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001035f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001036a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010375:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001037f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010383:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010387:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001038b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010391:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0010397:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001039b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001039e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00103a2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00103a8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00103ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00103b6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00103bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103c0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00103ca:	90                   	nop
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <LogicalDisk::assignDriveLetter()>:
c00103d0:	55                   	push   ebp
c00103d1:	57                   	push   edi
c00103d2:	56                   	push   esi
c00103d3:	53                   	push   ebx
c00103d4:	83 ec 14             	sub    esp,0x14
c00103d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103db:	8b 3d 00 85 02 c0    	mov    edi,DWORD PTR ds:0xc0028500
c00103e1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00103e7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103eb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00103f1:	8b 3d 04 85 02 c0    	mov    edi,DWORD PTR ds:0xc0028504
c00103f7:	3c 01                	cmp    al,0x1
c00103f9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00103fd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010401:	19 c0                	sbb    eax,eax
c0010403:	83 e0 02             	and    eax,0x2
c0010406:	83 c0 41             	add    eax,0x41
c0010409:	0f be e8             	movsx  ebp,al
c001040c:	3c 43                	cmp    al,0x43
c001040e:	75 10                	jne    c0010420 <LogicalDisk::assignDriveLetter()+0x50>
c0010410:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010417:	75 5d                	jne    c0010476 <LogicalDisk::assignDriveLetter()+0xa6>
c0010419:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001041e:	75 56                	jne    c0010476 <LogicalDisk::assignDriveLetter()+0xa6>
c0010420:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010423:	ba 01 00 00 00       	mov    edx,0x1
c0010428:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001042c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010430:	d3 e2                	shl    edx,cl
c0010432:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010436:	89 d7                	mov    edi,edx
c0010438:	89 d6                	mov    esi,edx
c001043a:	c1 ff 1f             	sar    edi,0x1f
c001043d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010441:	21 f9                	and    ecx,edi
c0010443:	09 d1                	or     ecx,edx
c0010445:	75 2f                	jne    c0010476 <LogicalDisk::assignDriveLetter()+0xa6>
c0010447:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001044b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001044f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010455:	09 f2                	or     edx,esi
c0010457:	89 15 00 85 02 c0    	mov    DWORD PTR ds:0xc0028500,edx
c001045d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010461:	09 fa                	or     edx,edi
c0010463:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010467:	89 15 04 85 02 c0    	mov    DWORD PTR ds:0xc0028504,edx
c001046d:	89 1c bd 20 85 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7ae0],ebx
c0010474:	eb 08                	jmp    c001047e <LogicalDisk::assignDriveLetter()+0xae>
c0010476:	45                   	inc    ebp
c0010477:	40                   	inc    eax
c0010478:	3c 5b                	cmp    al,0x5b
c001047a:	75 90                	jne    c001040c <LogicalDisk::assignDriveLetter()+0x3c>
c001047c:	31 c0                	xor    eax,eax
c001047e:	83 c4 14             	add    esp,0x14
c0010481:	5b                   	pop    ebx
c0010482:	5e                   	pop    esi
c0010483:	5f                   	pop    edi
c0010484:	5d                   	pop    ebp
c0010485:	c3                   	ret    

c0010486 <LogicalDisk::mount()>:
c0010486:	56                   	push   esi
c0010487:	53                   	push   ebx
c0010488:	83 ec 1c             	sub    esp,0x1c
c001048b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001048f:	8b 1d 94 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028094
c0010495:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001049c:	50                   	push   eax
c001049d:	68 ac 50 02 c0       	push   0xc00250ac
c00104a2:	e8 54 c8 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00104a7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00104b1:	83 c4 10             	add    esp,0x10
c00104b4:	85 db                	test   ebx,ebx
c00104b6:	74 4e                	je     c0010506 <LogicalDisk::mount()+0x80>
c00104b8:	83 ec 0c             	sub    esp,0xc
c00104bb:	68 cd 50 02 c0       	push   0xc00250cd
c00104c0:	e8 36 c8 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00104c5:	83 c4 0c             	add    esp,0xc
c00104c8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00104cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c00104d1:	83 e8 41             	sub    eax,0x41
c00104d4:	50                   	push   eax
c00104d5:	56                   	push   esi
c00104d6:	53                   	push   ebx
c00104d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00104da:	83 c4 10             	add    esp,0x10
c00104dd:	84 c0                	test   al,al
c00104df:	74 20                	je     c0010501 <LogicalDisk::mount()+0x7b>
c00104e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00104e5:	83 ec 0c             	sub    esp,0xc
c00104e8:	68 e9 50 02 c0       	push   0xc00250e9
c00104ed:	e8 09 c8 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00104f2:	83 c4 10             	add    esp,0x10
c00104f5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00104fb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00104ff:	eb 07                	jmp    c0010508 <LogicalDisk::mount()+0x82>
c0010501:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010504:	eb ae                	jmp    c00104b4 <LogicalDisk::mount()+0x2e>
c0010506:	31 c0                	xor    eax,eax
c0010508:	83 c4 14             	add    esp,0x14
c001050b:	5b                   	pop    ebx
c001050c:	5e                   	pop    esi
c001050d:	c3                   	ret    

c001050e <LogicalDisk::unmount()>:
c001050e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010512:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001051c:	c3                   	ret    
c001051d:	90                   	nop

c001051e <LogicalDisk::eject()>:
c001051e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010522:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010528:	8b 10                	mov    edx,DWORD PTR [eax]
c001052a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001052e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010531:	90                   	nop

c0010532 <LogicalDisk::unassignDriveLetter()>:
c0010532:	57                   	push   edi
c0010533:	56                   	push   esi
c0010534:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010538:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001053f:	84 c9                	test   cl,cl
c0010541:	75 0f                	jne    c0010552 <LogicalDisk::unassignDriveLetter()+0x20>
c0010543:	c7 44 24 0c 02 51 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025102
c001054b:	5e                   	pop    esi
c001054c:	5f                   	pop    edi
c001054d:	e9 b5 44 00 00       	jmp    c0014a07 <Krnl::panic(char const*)>
c0010552:	83 e9 41             	sub    ecx,0x41
c0010555:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001055c:	b8 01 00 00 00       	mov    eax,0x1
c0010561:	c7 04 8d 20 85 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7ae0],0x0
c001056c:	d3 e0                	shl    eax,cl
c001056e:	89 c7                	mov    edi,eax
c0010570:	f7 d0                	not    eax
c0010572:	c1 ff 1f             	sar    edi,0x1f
c0010575:	21 05 00 85 02 c0    	and    DWORD PTR ds:0xc0028500,eax
c001057b:	89 fe                	mov    esi,edi
c001057d:	f7 d6                	not    esi
c001057f:	21 35 04 85 02 c0    	and    DWORD PTR ds:0xc0028504,esi
c0010585:	5e                   	pop    esi
c0010586:	5f                   	pop    edi
c0010587:	c3                   	ret    

c0010588 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010588:	57                   	push   edi
c0010589:	56                   	push   esi
c001058a:	53                   	push   ebx
c001058b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001058f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010593:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010597:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001059b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00105a1:	77 41                	ja     c00105e4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00105a3:	99                   	cdq    
c00105a4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00105aa:	01 c8                	add    eax,ecx
c00105ac:	11 da                	adc    edx,ebx
c00105ae:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00105b4:	19 d7                	sbb    edi,edx
c00105b6:	72 33                	jb     c00105eb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00105b8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00105be:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00105c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00105c8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00105cc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00105d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00105d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105dc:	5b                   	pop    ebx
c00105dd:	5e                   	pop    esi
c00105de:	5f                   	pop    edi
c00105df:	e9 f2 0a 00 00       	jmp    c00110d6 <VCache::read(unsigned long long, int, void*)>
c00105e4:	b8 05 00 00 00       	mov    eax,0x5
c00105e9:	eb 05                	jmp    c00105f0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00105eb:	b8 07 00 00 00       	mov    eax,0x7
c00105f0:	5b                   	pop    ebx
c00105f1:	5e                   	pop    esi
c00105f2:	5f                   	pop    edi
c00105f3:	c3                   	ret    

c00105f4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00105f4:	57                   	push   edi
c00105f5:	56                   	push   esi
c00105f6:	53                   	push   ebx
c00105f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105ff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010607:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001060d:	77 41                	ja     c0010650 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001060f:	99                   	cdq    
c0010610:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010616:	01 c8                	add    eax,ecx
c0010618:	11 da                	adc    edx,ebx
c001061a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010620:	19 d7                	sbb    edi,edx
c0010622:	72 33                	jb     c0010657 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010624:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001062a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010630:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010634:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010638:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001063e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010644:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010648:	5b                   	pop    ebx
c0010649:	5e                   	pop    esi
c001064a:	5f                   	pop    edi
c001064b:	e9 8c 09 00 00       	jmp    c0010fdc <VCache::write(unsigned long long, int, void*)>
c0010650:	b8 05 00 00 00       	mov    eax,0x5
c0010655:	eb 05                	jmp    c001065c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010657:	b8 07 00 00 00       	mov    eax,0x7
c001065c:	5b                   	pop    ebx
c001065d:	5e                   	pop    esi
c001065e:	5f                   	pop    edi
c001065f:	c3                   	ret    

c0010660 <Mouse::Mouse(char const*)>:
c0010660:	83 ec 0c             	sub    esp,0xc
c0010663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010667:	83 ec 08             	sub    esp,0x8
c001066a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001066e:	50                   	push   eax
c001066f:	e8 fe dd ff ff       	call   c000e472 <Device::Device(char const*)>
c0010674:	83 c4 10             	add    esp,0x10
c0010677:	ba 58 51 02 c0       	mov    edx,0xc0025158
c001067c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010680:	89 10                	mov    DWORD PTR [eax],edx
c0010682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010686:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010690:	90                   	nop
c0010691:	83 c4 0c             	add    esp,0xc
c0010694:	c3                   	ret    
c0010695:	90                   	nop
c0010696:	66 90                	xchg   ax,ax

c0010698 <Mouse::~Mouse()>:
c0010698:	83 ec 0c             	sub    esp,0xc
c001069b:	ba 58 51 02 c0       	mov    edx,0xc0025158
c00106a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a4:	89 10                	mov    DWORD PTR [eax],edx
c00106a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106aa:	83 ec 0c             	sub    esp,0xc
c00106ad:	50                   	push   eax
c00106ae:	e8 89 da ff ff       	call   c000e13c <Device::~Device()>
c00106b3:	83 c4 10             	add    esp,0x10
c00106b6:	90                   	nop
c00106b7:	83 c4 0c             	add    esp,0xc
c00106ba:	c3                   	ret    
c00106bb:	90                   	nop

c00106bc <Mouse::~Mouse()>:
c00106bc:	83 ec 0c             	sub    esp,0xc
c00106bf:	83 ec 0c             	sub    esp,0xc
c00106c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106c6:	e8 cd ff ff ff       	call   c0010698 <Mouse::~Mouse()>
c00106cb:	83 c4 10             	add    esp,0x10
c00106ce:	83 ec 08             	sub    esp,0x8
c00106d1:	68 58 01 00 00       	push   0x158
c00106d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106da:	e8 3b c5 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00106df:	83 c4 10             	add    esp,0x10
c00106e2:	83 c4 0c             	add    esp,0xc
c00106e5:	c3                   	ret    

c00106e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00106e6:	55                   	push   ebp
c00106e7:	57                   	push   edi
c00106e8:	56                   	push   esi
c00106e9:	53                   	push   ebx
c00106ea:	81 ec 28 01 00 00    	sub    esp,0x128
c00106f0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00106f7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00106fe:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010705:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001070c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010710:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010714:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001071b:	e8 4e de ff ff       	call   c000e56e <Device::getName()>
c0010720:	5a                   	pop    edx
c0010721:	59                   	pop    ecx
c0010722:	50                   	push   eax
c0010723:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010727:	55                   	push   ebp
c0010728:	e8 13 00 ff ff       	call   c0000740 <strcpy>
c001072d:	5b                   	pop    ebx
c001072e:	58                   	pop    eax
c001072f:	68 7c 51 02 c0       	push   0xc002517c
c0010734:	55                   	push   ebp
c0010735:	e8 46 01 ff ff       	call   c0000880 <strcat>
c001073a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010741:	e8 c9 92 ff ff       	call   c0009a0f <malloc>
c0010746:	83 c4 0c             	add    esp,0xc
c0010749:	89 c3                	mov    ebx,eax
c001074b:	57                   	push   edi
c001074c:	56                   	push   esi
c001074d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010751:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010755:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001075c:	55                   	push   ebp
c001075d:	50                   	push   eax
c001075e:	e8 b7 fb ff ff       	call   c001031a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010763:	83 c4 14             	add    esp,0x14
c0010766:	53                   	push   ebx
c0010767:	e8 64 fc ff ff       	call   c00103d0 <LogicalDisk::assignDriveLetter()>
c001076c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001076f:	e8 12 fd ff ff       	call   c0010486 <LogicalDisk::mount()>
c0010774:	58                   	pop    eax
c0010775:	5a                   	pop    edx
c0010776:	53                   	push   ebx
c0010777:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001077e:	e8 eb da ff ff       	call   c000e26e <Device::addChild(Device*)>
c0010783:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010789:	5b                   	pop    ebx
c001078a:	5e                   	pop    esi
c001078b:	5f                   	pop    edi
c001078c:	5d                   	pop    ebp
c001078d:	c3                   	ret    

c001078e <createPartitionsForDisk(PhysicalDisk*)>:
c001078e:	55                   	push   ebp
c001078f:	57                   	push   edi
c0010790:	56                   	push   esi
c0010791:	53                   	push   ebx
c0010792:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010798:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001079f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00107a5:	3d 00 02 00 00       	cmp    eax,0x200
c00107aa:	74 27                	je     c00107d3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00107ac:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00107b2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00107b8:	83 ec 10             	sub    esp,0x10
c00107bb:	0f a4 f7 0a          	shld   edi,esi,0xa
c00107bf:	99                   	cdq    
c00107c0:	c1 e6 0a             	shl    esi,0xa
c00107c3:	52                   	push   edx
c00107c4:	89 fd                	mov    ebp,edi
c00107c6:	50                   	push   eax
c00107c7:	55                   	push   ebp
c00107c8:	56                   	push   esi
c00107c9:	e8 76 1f 01 00       	call   c0022744 <__udivdi3>
c00107ce:	e9 b1 00 00 00       	jmp    c0010884 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00107d3:	83 ec 0c             	sub    esp,0xc
c00107d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107d8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00107dc:	56                   	push   esi
c00107dd:	6a 01                	push   0x1
c00107df:	6a 00                	push   0x0
c00107e1:	6a 00                	push   0x0
c00107e3:	53                   	push   ebx
c00107e4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00107e7:	83 c4 20             	add    esp,0x20
c00107ea:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00107f2:	75 0a                	jne    c00107fe <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00107f4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00107fc:	74 2c                	je     c001082a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00107fe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010804:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001080a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010810:	83 ec 10             	sub    esp,0x10
c0010813:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010817:	89 f7                	mov    edi,esi
c0010819:	c1 e0 0a             	shl    eax,0xa
c001081c:	c1 ff 1f             	sar    edi,0x1f
c001081f:	57                   	push   edi
c0010820:	56                   	push   esi
c0010821:	52                   	push   edx
c0010822:	50                   	push   eax
c0010823:	e8 1c 1f 01 00       	call   c0022744 <__udivdi3>
c0010828:	eb 5a                	jmp    c0010884 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001082a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010831:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010838:	83 e1 7f             	and    ecx,0x7f
c001083b:	83 e0 7f             	and    eax,0x7f
c001083e:	01 c1                	add    ecx,eax
c0010840:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010847:	83 e0 7f             	and    eax,0x7f
c001084a:	01 c1                	add    ecx,eax
c001084c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010853:	83 e0 7f             	and    eax,0x7f
c0010856:	00 c1                	add    cl,al
c0010858:	74 41                	je     c001089b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001085a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010860:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010866:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001086c:	83 ec 10             	sub    esp,0x10
c001086f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010873:	89 f7                	mov    edi,esi
c0010875:	c1 e0 0a             	shl    eax,0xa
c0010878:	c1 ff 1f             	sar    edi,0x1f
c001087b:	57                   	push   edi
c001087c:	56                   	push   esi
c001087d:	52                   	push   edx
c001087e:	50                   	push   eax
c001087f:	e8 c0 1e 01 00       	call   c0022744 <__udivdi3>
c0010884:	83 c4 14             	add    esp,0x14
c0010887:	52                   	push   edx
c0010888:	50                   	push   eax
c0010889:	6a 00                	push   0x0
c001088b:	6a 00                	push   0x0
c001088d:	53                   	push   ebx
c001088e:	e8 53 fe ff ff       	call   c00106e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010893:	83 c4 20             	add    esp,0x20
c0010896:	e9 79 01 00 00       	jmp    c0010a14 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001089b:	89 f0                	mov    eax,esi
c001089d:	31 f6                	xor    esi,esi
c001089f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00108a6:	75 02                	jne    c00108aa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00108a8:	89 f1                	mov    ecx,esi
c00108aa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00108b1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00108b8:	c1 e2 08             	shl    edx,0x8
c00108bb:	c1 e7 10             	shl    edi,0x10
c00108be:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00108c6:	09 fa                	or     edx,edi
c00108c8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00108d0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00108d7:	83 c0 10             	add    eax,0x10
c00108da:	09 fa                	or     edx,edi
c00108dc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00108e3:	c1 e7 18             	shl    edi,0x18
c00108e6:	09 fa                	or     edx,edi
c00108e8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00108ef:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00108f3:	c1 e7 10             	shl    edi,0x10
c00108f6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00108fd:	c1 e2 08             	shl    edx,0x8
c0010900:	09 fa                	or     edx,edi
c0010902:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010909:	09 fa                	or     edx,edi
c001090b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010912:	c1 e7 18             	shl    edi,0x18
c0010915:	09 fa                	or     edx,edi
c0010917:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001091b:	46                   	inc    esi
c001091c:	83 fe 04             	cmp    esi,0x4
c001091f:	0f 85 7a ff ff ff    	jne    c001089f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010929:	83 f0 01             	xor    eax,0x1
c001092c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010930:	75 57                	jne    c0010989 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010932:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010936:	83 f0 01             	xor    eax,0x1
c0010939:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001093d:	75 4a                	jne    c0010989 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001093f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010943:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001094b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010953:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010959:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001095f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010965:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010969:	89 f7                	mov    edi,esi
c001096b:	c1 e0 0a             	shl    eax,0xa
c001096e:	c1 ff 1f             	sar    edi,0x1f
c0010971:	57                   	push   edi
c0010972:	56                   	push   esi
c0010973:	52                   	push   edx
c0010974:	50                   	push   eax
c0010975:	e8 ca 1d 01 00       	call   c0022744 <__udivdi3>
c001097a:	83 c4 10             	add    esp,0x10
c001097d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010981:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010985:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010989:	84 c9                	test   cl,cl
c001098b:	74 53                	je     c00109e0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001098d:	0f b6 c9             	movzx  ecx,cl
c0010990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010994:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010998:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001099c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00109a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00109a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00109a8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00109ac:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00109b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00109b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00109c0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00109c4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00109c8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00109cc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00109d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00109d4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00109d8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00109dc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00109e0:	31 ed                	xor    ebp,ebp
c00109e2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00109e6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00109ea:	89 f8                	mov    eax,edi
c00109ec:	09 f0                	or     eax,esi
c00109ee:	74 1e                	je     c0010a0e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00109f0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00109f4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00109f8:	89 d1                	mov    ecx,edx
c00109fa:	09 c1                	or     ecx,eax
c00109fc:	74 10                	je     c0010a0e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00109fe:	83 ec 0c             	sub    esp,0xc
c0010a01:	57                   	push   edi
c0010a02:	56                   	push   esi
c0010a03:	52                   	push   edx
c0010a04:	50                   	push   eax
c0010a05:	53                   	push   ebx
c0010a06:	e8 db fc ff ff       	call   c00106e6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010a0b:	83 c4 20             	add    esp,0x20
c0010a0e:	45                   	inc    ebp
c0010a0f:	83 fd 04             	cmp    ebp,0x4
c0010a12:	75 ce                	jne    c00109e2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010a14:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010a1a:	5b                   	pop    ebx
c0010a1b:	5e                   	pop    esi
c0010a1c:	5f                   	pop    edi
c0010a1d:	5d                   	pop    ebp
c0010a1e:	c3                   	ret    
c0010a1f:	90                   	nop

c0010a20 <Serial::Serial(char const*)>:
c0010a20:	83 ec 0c             	sub    esp,0xc
c0010a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a27:	83 ec 08             	sub    esp,0x8
c0010a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2e:	50                   	push   eax
c0010a2f:	e8 3e da ff ff       	call   c000e472 <Device::Device(char const*)>
c0010a34:	83 c4 10             	add    esp,0x10
c0010a37:	ba 90 51 02 c0       	mov    edx,0xc0025190
c0010a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a40:	89 10                	mov    DWORD PTR [eax],edx
c0010a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a46:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010a50:	90                   	nop
c0010a51:	83 c4 0c             	add    esp,0xc
c0010a54:	c3                   	ret    
c0010a55:	90                   	nop
c0010a56:	66 90                	xchg   ax,ax

c0010a58 <Serial::~Serial()>:
c0010a58:	83 ec 0c             	sub    esp,0xc
c0010a5b:	ba 90 51 02 c0       	mov    edx,0xc0025190
c0010a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a64:	89 10                	mov    DWORD PTR [eax],edx
c0010a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6a:	83 ec 0c             	sub    esp,0xc
c0010a6d:	50                   	push   eax
c0010a6e:	e8 c9 d6 ff ff       	call   c000e13c <Device::~Device()>
c0010a73:	83 c4 10             	add    esp,0x10
c0010a76:	90                   	nop
c0010a77:	83 c4 0c             	add    esp,0xc
c0010a7a:	c3                   	ret    
c0010a7b:	90                   	nop

c0010a7c <Serial::~Serial()>:
c0010a7c:	83 ec 0c             	sub    esp,0xc
c0010a7f:	83 ec 0c             	sub    esp,0xc
c0010a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a86:	e8 cd ff ff ff       	call   c0010a58 <Serial::~Serial()>
c0010a8b:	83 c4 10             	add    esp,0x10
c0010a8e:	83 ec 08             	sub    esp,0x8
c0010a91:	68 58 01 00 00       	push   0x158
c0010a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a9a:	e8 7b c1 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0010a9f:	83 c4 10             	add    esp,0x10
c0010aa2:	83 c4 0c             	add    esp,0xc
c0010aa5:	c3                   	ret    
c0010aa6:	66 90                	xchg   ax,ax

c0010aa8 <Timer::Timer(char const*)>:
c0010aa8:	83 ec 0c             	sub    esp,0xc
c0010aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aaf:	83 ec 08             	sub    esp,0x8
c0010ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab6:	50                   	push   eax
c0010ab7:	e8 b6 d9 ff ff       	call   c000e472 <Device::Device(char const*)>
c0010abc:	83 c4 10             	add    esp,0x10
c0010abf:	ba d4 51 02 c0       	mov    edx,0xc00251d4
c0010ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac8:	89 10                	mov    DWORD PTR [eax],edx
c0010aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ace:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010ad8:	90                   	nop
c0010ad9:	83 c4 0c             	add    esp,0xc
c0010adc:	c3                   	ret    
c0010add:	90                   	nop
c0010ade:	66 90                	xchg   ax,ax

c0010ae0 <Timer::~Timer()>:
c0010ae0:	83 ec 0c             	sub    esp,0xc
c0010ae3:	ba d4 51 02 c0       	mov    edx,0xc00251d4
c0010ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aec:	89 10                	mov    DWORD PTR [eax],edx
c0010aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af2:	83 ec 0c             	sub    esp,0xc
c0010af5:	50                   	push   eax
c0010af6:	e8 41 d6 ff ff       	call   c000e13c <Device::~Device()>
c0010afb:	83 c4 10             	add    esp,0x10
c0010afe:	90                   	nop
c0010aff:	83 c4 0c             	add    esp,0xc
c0010b02:	c3                   	ret    
c0010b03:	90                   	nop

c0010b04 <Timer::~Timer()>:
c0010b04:	83 ec 0c             	sub    esp,0xc
c0010b07:	83 ec 0c             	sub    esp,0xc
c0010b0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b0e:	e8 cd ff ff ff       	call   c0010ae0 <Timer::~Timer()>
c0010b13:	83 c4 10             	add    esp,0x10
c0010b16:	83 ec 08             	sub    esp,0x8
c0010b19:	68 5c 01 00 00       	push   0x15c
c0010b1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b22:	e8 f3 c0 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0010b27:	83 c4 10             	add    esp,0x10
c0010b2a:	83 c4 0c             	add    esp,0xc
c0010b2d:	c3                   	ret    

c0010b2e <Timer::read()>:
c0010b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b32:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010b38:	c3                   	ret    

c0010b39 <timerHandler(unsigned int)>:
c0010b39:	56                   	push   esi
c0010b3a:	53                   	push   ebx
c0010b3b:	51                   	push   ecx
c0010b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b40:	01 05 8c 85 02 c0    	add    DWORD PTR ds:0xc002858c,eax
c0010b46:	80 3d 6d 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f6d,0x0
c0010b4d:	0f 84 49 01 00 00    	je     c0010c9c <timerHandler(unsigned int)+0x163>
c0010b53:	fa                   	cli    
c0010b54:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0010b5a:	83 ec 0c             	sub    esp,0xc
c0010b5d:	ff 05 84 94 02 c0    	inc    DWORD PTR ds:0xc0029484
c0010b63:	68 98 94 02 c0       	push   0xc0029498
c0010b68:	e8 a7 21 01 00       	call   c0022d14 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010b6d:	83 c4 10             	add    esp,0x10
c0010b70:	84 c0                	test   al,al
c0010b72:	0f 85 a0 00 00 00    	jne    c0010c18 <timerHandler(unsigned int)+0xdf>
c0010b78:	83 ec 0c             	sub    esp,0xc
c0010b7b:	68 98 94 02 c0       	push   0xc0029498
c0010b80:	e8 ab 21 01 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b85:	83 c4 10             	add    esp,0x10
c0010b88:	89 c6                	mov    esi,eax
c0010b8a:	66 90                	xchg   ax,ax
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	68 98 94 02 c0       	push   0xc0029498
c0010b94:	e8 97 21 01 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b99:	c7 04 24 98 94 02 c0 	mov    DWORD PTR [esp],0xc0029498
c0010ba0:	89 c3                	mov    ebx,eax
c0010ba2:	e8 91 21 01 00       	call   c0022d38 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010ba7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010baa:	83 c4 10             	add    esp,0x10
c0010bad:	3b 05 8c 85 02 c0    	cmp    eax,DWORD PTR ds:0xc002858c
c0010bb3:	77 23                	ja     c0010bd8 <timerHandler(unsigned int)+0x9f>
c0010bb5:	83 ec 0c             	sub    esp,0xc
c0010bb8:	53                   	push   ebx
c0010bb9:	e8 ba 7f 00 00       	call   c0018b78 <unblockTask(ThreadControlBlock*)>
c0010bbe:	83 c4 10             	add    esp,0x10
c0010bc1:	39 de                	cmp    esi,ebx
c0010bc3:	75 27                	jne    c0010bec <timerHandler(unsigned int)+0xb3>
c0010bc5:	83 ec 0c             	sub    esp,0xc
c0010bc8:	68 98 94 02 c0       	push   0xc0029498
c0010bcd:	e8 5e 21 01 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010bd2:	89 c6                	mov    esi,eax
c0010bd4:	eb 12                	jmp    c0010be8 <timerHandler(unsigned int)+0xaf>
c0010bd6:	66 90                	xchg   ax,ax
c0010bd8:	52                   	push   edx
c0010bd9:	52                   	push   edx
c0010bda:	53                   	push   ebx
c0010bdb:	68 98 94 02 c0       	push   0xc0029498
c0010be0:	e8 0b 22 01 00       	call   c0022df0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010be5:	8d 76 00             	lea    esi,[esi+0x0]
c0010be8:	83 c4 10             	add    esp,0x10
c0010beb:	90                   	nop
c0010bec:	83 ec 0c             	sub    esp,0xc
c0010bef:	68 98 94 02 c0       	push   0xc0029498
c0010bf4:	e8 1b 21 01 00       	call   c0022d14 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010bf9:	83 c4 10             	add    esp,0x10
c0010bfc:	84 c0                	test   al,al
c0010bfe:	75 18                	jne    c0010c18 <timerHandler(unsigned int)+0xdf>
c0010c00:	83 ec 0c             	sub    esp,0xc
c0010c03:	68 98 94 02 c0       	push   0xc0029498
c0010c08:	e8 23 21 01 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010c0d:	83 c4 10             	add    esp,0x10
c0010c10:	39 f0                	cmp    eax,esi
c0010c12:	0f 85 74 ff ff ff    	jne    c0010b8c <timerHandler(unsigned int)+0x53>
c0010c18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c1d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010c21:	74 41                	je     c0010c64 <timerHandler(unsigned int)+0x12b>
c0010c23:	80 3d 6c 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f6c,0x0
c0010c2a:	74 38                	je     c0010c64 <timerHandler(unsigned int)+0x12b>
c0010c2c:	fa                   	cli    
c0010c2d:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0010c33:	a1 8c 85 02 c0       	mov    eax,ds:0xc002858c
c0010c38:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c3e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010c41:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c47:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010c4a:	72 08                	jb     c0010c54 <timerHandler(unsigned int)+0x11b>
c0010c4c:	e8 6b 7a 00 00       	call   c00186bc <schedule()>
c0010c51:	8d 76 00             	lea    esi,[esi+0x0]
c0010c54:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0010c59:	48                   	dec    eax
c0010c5a:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0010c5f:	75 03                	jne    c0010c64 <timerHandler(unsigned int)+0x12b>
c0010c61:	fb                   	sti    
c0010c62:	66 90                	xchg   ax,ax
c0010c64:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c0010c69:	48                   	dec    eax
c0010c6a:	a3 84 94 02 c0       	mov    ds:0xc0029484,eax
c0010c6f:	75 1b                	jne    c0010c8c <timerHandler(unsigned int)+0x153>
c0010c71:	83 3d 80 94 02 c0 00 	cmp    DWORD PTR ds:0xc0029480,0x0
c0010c78:	74 12                	je     c0010c8c <timerHandler(unsigned int)+0x153>
c0010c7a:	c7 05 80 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x0
c0010c84:	e8 33 7a 00 00       	call   c00186bc <schedule()>
c0010c89:	8d 76 00             	lea    esi,[esi+0x0]
c0010c8c:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0010c91:	48                   	dec    eax
c0010c92:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0010c97:	75 03                	jne    c0010c9c <timerHandler(unsigned int)+0x163>
c0010c99:	fb                   	sti    
c0010c9a:	66 90                	xchg   ax,ax
c0010c9c:	58                   	pop    eax
c0010c9d:	5b                   	pop    ebx
c0010c9e:	5e                   	pop    esi
c0010c9f:	c3                   	ret    

c0010ca0 <setupTimer(int)>:
c0010ca0:	57                   	push   edi
c0010ca1:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0010ca6:	56                   	push   esi
c0010ca7:	53                   	push   ebx
c0010ca8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010cac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cb2:	83 ec 0c             	sub    esp,0xc
c0010cb5:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010cbb:	e8 ae d8 ff ff       	call   c000e56e <Device::getName()>
c0010cc0:	83 c4 10             	add    esp,0x10
c0010cc3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010cc6:	0f 85 94 00 00 00    	jne    c0010d60 <setupTimer(int)+0xc0>
c0010ccc:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0010cd1:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010cd8:	0f 84 82 00 00 00    	je     c0010d60 <setupTimer(int)+0xc0>
c0010cde:	83 ec 0c             	sub    esp,0xc
c0010ce1:	68 5c 01 00 00       	push   0x15c
c0010ce6:	e8 24 8d ff ff       	call   c0009a0f <malloc>
c0010ceb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cee:	89 c3                	mov    ebx,eax
c0010cf0:	e8 2b 16 01 00       	call   c0022320 <PIT::PIT()>
c0010cf5:	59                   	pop    ecx
c0010cf6:	5f                   	pop    edi
c0010cf7:	53                   	push   ebx
c0010cf8:	ff 35 68 7f 02 c0    	push   DWORD PTR ds:0xc0027f68
c0010cfe:	e8 6b d5 ff ff       	call   c000e26e <Device::addChild(Device*)>
c0010d03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d05:	6a 00                	push   0x0
c0010d07:	6a 00                	push   0x0
c0010d09:	56                   	push   esi
c0010d0a:	53                   	push   ebx
c0010d0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d0e:	83 c4 14             	add    esp,0x14
c0010d11:	68 60 01 00 00       	push   0x160
c0010d16:	e8 f4 8c ff ff       	call   c0009a0f <malloc>
c0010d1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d1e:	89 c7                	mov    edi,eax
c0010d20:	e8 af 14 01 00       	call   c00221d4 <APICTimer::APICTimer()>
c0010d25:	6a 00                	push   0x0
c0010d27:	6a 00                	push   0x0
c0010d29:	56                   	push   esi
c0010d2a:	57                   	push   edi
c0010d2b:	e8 a4 13 01 00       	call   c00220d4 <APICTimer::open(int, int, void*)>
c0010d30:	83 c4 20             	add    esp,0x20
c0010d33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d35:	6a 00                	push   0x0
c0010d37:	6a 00                	push   0x0
c0010d39:	6a 00                	push   0x0
c0010d3b:	53                   	push   ebx
c0010d3c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010d3f:	58                   	pop    eax
c0010d40:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0010d45:	5a                   	pop    edx
c0010d46:	57                   	push   edi
c0010d47:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d4d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010d53:	e8 16 d5 ff ff       	call   c000e26e <Device::addChild(Device*)>
c0010d58:	83 c4 10             	add    esp,0x10
c0010d5b:	eb 37                	jmp    c0010d94 <setupTimer(int)+0xf4>
c0010d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d60:	83 ec 0c             	sub    esp,0xc
c0010d63:	68 5c 01 00 00       	push   0x15c
c0010d68:	e8 a2 8c ff ff       	call   c0009a0f <malloc>
c0010d6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d70:	89 c3                	mov    ebx,eax
c0010d72:	e8 a9 15 01 00       	call   c0022320 <PIT::PIT()>
c0010d77:	58                   	pop    eax
c0010d78:	5a                   	pop    edx
c0010d79:	53                   	push   ebx
c0010d7a:	ff 35 68 7f 02 c0    	push   DWORD PTR ds:0xc0027f68
c0010d80:	e8 e9 d4 ff ff       	call   c000e26e <Device::addChild(Device*)>
c0010d85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d87:	6a 00                	push   0x0
c0010d89:	6a 00                	push   0x0
c0010d8b:	56                   	push   esi
c0010d8c:	53                   	push   ebx
c0010d8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d90:	83 c4 20             	add    esp,0x20
c0010d93:	90                   	nop
c0010d94:	89 d8                	mov    eax,ebx
c0010d96:	5b                   	pop    ebx
c0010d97:	5e                   	pop    esi
c0010d98:	5f                   	pop    edi
c0010d99:	c3                   	ret    
c0010d9a:	66 90                	xchg   ax,ax

c0010d9c <VCache::VCache(PhysicalDisk*)>:
c0010d9c:	53                   	push   ebx
c0010d9d:	83 ec 18             	sub    esp,0x18
c0010da0:	ba 04 52 02 c0       	mov    edx,0xc0025204
c0010da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010da9:	89 10                	mov    DWORD PTR [eax],edx
c0010dab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010daf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010db6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dba:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dc5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010dcc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dd7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010dde:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010de5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010de9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010df0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010df4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010df8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dfc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010e03:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010e0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e0e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e16:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010e1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e1e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010e22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e26:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010e2d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010e35:	83 ec 0c             	sub    esp,0xc
c0010e38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e3c:	e8 ce 8b ff ff       	call   c0009a0f <malloc>
c0010e41:	83 c4 10             	add    esp,0x10
c0010e44:	89 c3                	mov    ebx,eax
c0010e46:	83 ec 0c             	sub    esp,0xc
c0010e49:	53                   	push   ebx
c0010e4a:	e8 3d 76 00 00       	call   c001848c <Mutex::Mutex()>
c0010e4f:	83 c4 10             	add    esp,0x10
c0010e52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e56:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010e59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e5d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010e61:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010e64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e68:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010e6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e73:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e7d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e84:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010e8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010e90:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010e94:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010e97:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010e9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e9e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010ea2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ea6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010eac:	05 00 01 00 00       	add    eax,0x100
c0010eb1:	c1 e0 04             	shl    eax,0x4
c0010eb4:	83 ec 0c             	sub    esp,0xc
c0010eb7:	50                   	push   eax
c0010eb8:	e8 52 8b ff ff       	call   c0009a0f <malloc>
c0010ebd:	83 c4 10             	add    esp,0x10
c0010ec0:	89 c2                	mov    edx,eax
c0010ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ec6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ecd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010ed4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ed8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010edc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ee0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ee6:	c1 e0 06             	shl    eax,0x6
c0010ee9:	83 ec 0c             	sub    esp,0xc
c0010eec:	50                   	push   eax
c0010eed:	e8 1d 8b ff ff       	call   c0009a0f <malloc>
c0010ef2:	83 c4 10             	add    esp,0x10
c0010ef5:	89 c2                	mov    edx,eax
c0010ef7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010efb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010efe:	90                   	nop
c0010eff:	83 c4 18             	add    esp,0x18
c0010f02:	5b                   	pop    ebx
c0010f03:	c3                   	ret    

c0010f04 <VCache::invalidateReadBuffer()>:
c0010f04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f08:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010f0e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010f12:	c3                   	ret    
c0010f13:	90                   	nop

c0010f14 <VCache::writeWriteBuffer()>:
c0010f14:	53                   	push   ebx
c0010f15:	83 ec 08             	sub    esp,0x8
c0010f18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f1c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010f20:	74 1e                	je     c0010f40 <VCache::writeWriteBuffer()+0x2c>
c0010f22:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f25:	83 ec 0c             	sub    esp,0xc
c0010f28:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f2a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f2d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010f30:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010f33:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010f36:	50                   	push   eax
c0010f37:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010f3a:	83 c4 20             	add    esp,0x20
c0010f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0010f40:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010f47:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010f4e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010f52:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010f59:	83 c4 08             	add    esp,0x8
c0010f5c:	5b                   	pop    ebx
c0010f5d:	c3                   	ret    
c0010f5e:	66 90                	xchg   ax,ax

c0010f60 <VCache::~VCache()>:
c0010f60:	83 ec 0c             	sub    esp,0xc
c0010f63:	ba 04 52 02 c0       	mov    edx,0xc0025204
c0010f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f6c:	89 10                	mov    DWORD PTR [eax],edx
c0010f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f72:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010f75:	84 c0                	test   al,al
c0010f77:	74 0f                	je     c0010f88 <VCache::~VCache()+0x28>
c0010f79:	83 ec 0c             	sub    esp,0xc
c0010f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f80:	e8 8f ff ff ff       	call   c0010f14 <VCache::writeWriteBuffer()>
c0010f85:	83 c4 10             	add    esp,0x10
c0010f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010f8f:	83 ec 0c             	sub    esp,0xc
c0010f92:	50                   	push   eax
c0010f93:	e8 87 8a ff ff       	call   c0009a1f <free>
c0010f98:	83 c4 10             	add    esp,0x10
c0010f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010fa2:	83 ec 0c             	sub    esp,0xc
c0010fa5:	50                   	push   eax
c0010fa6:	e8 74 8a ff ff       	call   c0009a1f <free>
c0010fab:	83 c4 10             	add    esp,0x10
c0010fae:	90                   	nop
c0010faf:	83 c4 0c             	add    esp,0xc
c0010fb2:	c3                   	ret    
c0010fb3:	90                   	nop

c0010fb4 <VCache::~VCache()>:
c0010fb4:	83 ec 0c             	sub    esp,0xc
c0010fb7:	83 ec 0c             	sub    esp,0xc
c0010fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fbe:	e8 9d ff ff ff       	call   c0010f60 <VCache::~VCache()>
c0010fc3:	83 c4 10             	add    esp,0x10
c0010fc6:	83 ec 08             	sub    esp,0x8
c0010fc9:	6a 44                	push   0x44
c0010fcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fcf:	e8 46 bc ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0010fd4:	83 c4 10             	add    esp,0x10
c0010fd7:	83 c4 0c             	add    esp,0xc
c0010fda:	c3                   	ret    
c0010fdb:	90                   	nop

c0010fdc <VCache::write(unsigned long long, int, void*)>:
c0010fdc:	55                   	push   ebp
c0010fdd:	31 c0                	xor    eax,eax
c0010fdf:	57                   	push   edi
c0010fe0:	56                   	push   esi
c0010fe1:	53                   	push   ebx
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fe9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010fed:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ff4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010ff8:	7d 1a                	jge    c0011014 <VCache::write(unsigned long long, int, void*)+0x38>
c0010ffa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010ffd:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011003:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011007:	0f af c8             	imul   ecx,eax
c001100a:	01 ca                	add    edx,ecx
c001100c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001100e:	40                   	inc    eax
c001100f:	eb e3                	jmp    c0010ff4 <VCache::write(unsigned long long, int, void*)+0x18>
c0011011:	8d 76 00             	lea    esi,[esi+0x0]
c0011014:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011018:	74 0a                	je     c0011024 <VCache::write(unsigned long long, int, void*)+0x48>
c001101a:	53                   	push   ebx
c001101b:	e8 e4 fe ff ff       	call   c0010f04 <VCache::invalidateReadBuffer()>
c0011020:	58                   	pop    eax
c0011021:	8d 76 00             	lea    esi,[esi+0x0]
c0011024:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011028:	74 5e                	je     c0011088 <VCache::write(unsigned long long, int, void*)+0xac>
c001102a:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001102d:	89 e8                	mov    eax,ebp
c001102f:	99                   	cdq    
c0011030:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0011033:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0011036:	89 c1                	mov    ecx,eax
c0011038:	89 d0                	mov    eax,edx
c001103a:	31 f1                	xor    ecx,esi
c001103c:	31 f8                	xor    eax,edi
c001103e:	09 c1                	or     ecx,eax
c0011040:	75 3a                	jne    c001107c <VCache::write(unsigned long long, int, void*)+0xa0>
c0011042:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0011047:	75 33                	jne    c001107c <VCache::write(unsigned long long, int, void*)+0xa0>
c0011049:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001104c:	89 ef                	mov    edi,ebp
c001104e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011054:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011058:	0f af f9             	imul   edi,ecx
c001105b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001105e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011060:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011063:	40                   	inc    eax
c0011064:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0011067:	83 f8 40             	cmp    eax,0x40
c001106a:	75 60                	jne    c00110cc <VCache::write(unsigned long long, int, void*)+0xf0>
c001106c:	83 ec 0c             	sub    esp,0xc
c001106f:	53                   	push   ebx
c0011070:	e8 9f fe ff ff       	call   c0010f14 <VCache::writeWriteBuffer()>
c0011075:	83 c4 10             	add    esp,0x10
c0011078:	eb 52                	jmp    c00110cc <VCache::write(unsigned long long, int, void*)+0xf0>
c001107a:	66 90                	xchg   ax,ax
c001107c:	83 ec 0c             	sub    esp,0xc
c001107f:	53                   	push   ebx
c0011080:	e8 8f fe ff ff       	call   c0010f14 <VCache::writeWriteBuffer()>
c0011085:	83 c4 10             	add    esp,0x10
c0011088:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001108b:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0011090:	7f 22                	jg     c00110b4 <VCache::write(unsigned long long, int, void*)+0xd8>
c0011092:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0011095:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0011098:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001109c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00110a0:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00110a3:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00110a6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00110ac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110b2:	eb 18                	jmp    c00110cc <VCache::write(unsigned long long, int, void*)+0xf0>
c00110b4:	83 ec 0c             	sub    esp,0xc
c00110b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00110b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110c1:	57                   	push   edi
c00110c2:	56                   	push   esi
c00110c3:	50                   	push   eax
c00110c4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00110c7:	83 c4 20             	add    esp,0x20
c00110ca:	66 90                	xchg   ax,ax
c00110cc:	83 c4 0c             	add    esp,0xc
c00110cf:	31 c0                	xor    eax,eax
c00110d1:	5b                   	pop    ebx
c00110d2:	5e                   	pop    esi
c00110d3:	5f                   	pop    edi
c00110d4:	5d                   	pop    ebp
c00110d5:	c3                   	ret    

c00110d6 <VCache::read(unsigned long long, int, void*)>:
c00110d6:	55                   	push   ebp
c00110d7:	31 c0                	xor    eax,eax
c00110d9:	57                   	push   edi
c00110da:	56                   	push   esi
c00110db:	53                   	push   ebx
c00110dc:	83 ec 1c             	sub    esp,0x1c
c00110df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00110e3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00110e7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00110eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00110ef:	90                   	nop
c00110f0:	39 e8                	cmp    eax,ebp
c00110f2:	7d 18                	jge    c001110c <VCache::read(unsigned long long, int, void*)+0x36>
c00110f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00110f7:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00110fd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011101:	0f af c8             	imul   ecx,eax
c0011104:	01 ca                	add    edx,ecx
c0011106:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011108:	40                   	inc    eax
c0011109:	eb e5                	jmp    c00110f0 <VCache::read(unsigned long long, int, void*)+0x1a>
c001110b:	90                   	nop
c001110c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011110:	74 0e                	je     c0011120 <VCache::read(unsigned long long, int, void*)+0x4a>
c0011112:	83 ec 0c             	sub    esp,0xc
c0011115:	53                   	push   ebx
c0011116:	e8 f9 fd ff ff       	call   c0010f14 <VCache::writeWriteBuffer()>
c001111b:	83 c4 10             	add    esp,0x10
c001111e:	66 90                	xchg   ax,ax
c0011120:	83 fd 01             	cmp    ebp,0x1
c0011123:	0f 85 87 00 00 00    	jne    c00111b0 <VCache::read(unsigned long long, int, void*)+0xda>
c0011129:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001112c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011130:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0011137:	75 77                	jne    c00111b0 <VCache::read(unsigned long long, int, void*)+0xda>
c0011139:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001113c:	89 e9                	mov    ecx,ebp
c001113e:	f7 d9                	neg    ecx
c0011140:	89 c8                	mov    eax,ecx
c0011142:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011146:	c1 f8 1f             	sar    eax,0x1f
c0011149:	21 f1                	and    ecx,esi
c001114b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001114f:	89 c8                	mov    eax,ecx
c0011151:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011155:	21 f9                	and    ecx,edi
c0011157:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001115b:	89 ca                	mov    edx,ecx
c001115d:	74 0d                	je     c001116c <VCache::read(unsigned long long, int, void*)+0x96>
c001115f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0011162:	75 08                	jne    c001116c <VCache::read(unsigned long long, int, void*)+0x96>
c0011164:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0011167:	74 27                	je     c0011190 <VCache::read(unsigned long long, int, void*)+0xba>
c0011169:	8d 76 00             	lea    esi,[esi+0x0]
c001116c:	83 ec 0c             	sub    esp,0xc
c001116f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0011173:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011177:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001117a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001117d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001117f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011182:	55                   	push   ebp
c0011183:	52                   	push   edx
c0011184:	50                   	push   eax
c0011185:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011189:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001118c:	83 c4 20             	add    esp,0x20
c001118f:	90                   	nop
c0011190:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011193:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011197:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001119d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00111a0:	48                   	dec    eax
c00111a1:	21 c6                	and    esi,eax
c00111a3:	0f af f1             	imul   esi,ecx
c00111a6:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00111a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111ab:	eb 23                	jmp    c00111d0 <VCache::read(unsigned long long, int, void*)+0xfa>
c00111ad:	8d 76 00             	lea    esi,[esi+0x0]
c00111b0:	83 ec 0c             	sub    esp,0xc
c00111b3:	53                   	push   ebx
c00111b4:	e8 4b fd ff ff       	call   c0010f04 <VCache::invalidateReadBuffer()>
c00111b9:	5a                   	pop    edx
c00111ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00111bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00111bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00111c3:	55                   	push   ebp
c00111c4:	57                   	push   edi
c00111c5:	56                   	push   esi
c00111c6:	50                   	push   eax
c00111c7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00111ca:	83 c4 20             	add    esp,0x20
c00111cd:	8d 76 00             	lea    esi,[esi+0x0]
c00111d0:	83 c4 1c             	add    esp,0x1c
c00111d3:	31 c0                	xor    eax,eax
c00111d5:	5b                   	pop    ebx
c00111d6:	5e                   	pop    esi
c00111d7:	5f                   	pop    edi
c00111d8:	5d                   	pop    ebp
c00111d9:	c3                   	ret    

c00111da <Video::putrect(int, int, int, int, unsigned int)>:
c00111da:	55                   	push   ebp
c00111db:	57                   	push   edi
c00111dc:	56                   	push   esi
c00111dd:	53                   	push   ebx
c00111de:	83 ec 1c             	sub    esp,0x1c
c00111e1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00111e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111e9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00111ed:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00111f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111f9:	01 df                	add    edi,ebx
c00111fb:	39 fb                	cmp    ebx,edi
c00111fd:	7d 1f                	jge    c001121e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00111ff:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011203:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0011207:	7d 12                	jge    c001121b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0011209:	8b 16                	mov    edx,DWORD PTR [esi]
c001120b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001120f:	53                   	push   ebx
c0011210:	55                   	push   ebp
c0011211:	45                   	inc    ebp
c0011212:	56                   	push   esi
c0011213:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0011216:	83 c4 10             	add    esp,0x10
c0011219:	eb e8                	jmp    c0011203 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001121b:	43                   	inc    ebx
c001121c:	eb dd                	jmp    c00111fb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001121e:	83 c4 1c             	add    esp,0x1c
c0011221:	5b                   	pop    ebx
c0011222:	5e                   	pop    esi
c0011223:	5f                   	pop    edi
c0011224:	5d                   	pop    ebp
c0011225:	c3                   	ret    

c0011226 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0011226:	55                   	push   ebp
c0011227:	57                   	push   edi
c0011228:	31 ff                	xor    edi,edi
c001122a:	56                   	push   esi
c001122b:	53                   	push   ebx
c001122c:	83 ec 1c             	sub    esp,0x1c
c001122f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0011233:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011237:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001123e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0011243:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011247:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001124b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001124f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011252:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011256:	01 f9                	add    ecx,edi
c0011258:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001125c:	7d 2f                	jge    c001128d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001125e:	31 f6                	xor    esi,esi
c0011260:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011264:	01 f2                	add    edx,esi
c0011266:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001126a:	7d 1a                	jge    c0011286 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001126c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001126f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0011272:	46                   	inc    esi
c0011273:	51                   	push   ecx
c0011274:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011278:	52                   	push   edx
c0011279:	55                   	push   ebp
c001127a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001127d:	83 c4 10             	add    esp,0x10
c0011280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011284:	eb da                	jmp    c0011260 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0011286:	47                   	inc    edi
c0011287:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001128b:	eb c5                	jmp    c0011252 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001128d:	83 c4 1c             	add    esp,0x1c
c0011290:	5b                   	pop    ebx
c0011291:	5e                   	pop    esi
c0011292:	5f                   	pop    edi
c0011293:	5d                   	pop    ebp
c0011294:	c3                   	ret    
c0011295:	90                   	nop

c0011296 <Video::blit(unsigned int*, int, int, int, int)>:
c0011296:	55                   	push   ebp
c0011297:	57                   	push   edi
c0011298:	56                   	push   esi
c0011299:	53                   	push   ebx
c001129a:	83 ec 1c             	sub    esp,0x1c
c001129d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00112a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112a5:	85 c0                	test   eax,eax
c00112a7:	79 02                	jns    c00112ab <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00112a9:	31 c0                	xor    eax,eax
c00112ab:	c1 e0 02             	shl    eax,0x2
c00112ae:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00112b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00112ba:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00112be:	39 d8                	cmp    eax,ebx
c00112c0:	7e 49                	jle    c001130b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00112c2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00112c8:	7c 41                	jl     c001130b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00112ca:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00112ce:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00112d2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00112d6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00112da:	39 f9                	cmp    ecx,edi
c00112dc:	7e 22                	jle    c0011300 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00112de:	83 c5 04             	add    ebp,0x4
c00112e1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00112e7:	7c 14                	jl     c00112fd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00112e9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00112eb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00112ee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00112f2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00112f6:	56                   	push   esi
c00112f7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00112fa:	83 c4 10             	add    esp,0x10
c00112fd:	47                   	inc    edi
c00112fe:	eb d2                	jmp    c00112d2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0011300:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011304:	43                   	inc    ebx
c0011305:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011309:	eb ab                	jmp    c00112b6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001130b:	83 c4 1c             	add    esp,0x1c
c001130e:	5b                   	pop    ebx
c001130f:	5e                   	pop    esi
c0011310:	5f                   	pop    edi
c0011311:	5d                   	pop    ebp
c0011312:	c3                   	ret    
c0011313:	90                   	nop

c0011314 <Video::clearScreen(unsigned int)>:
c0011314:	57                   	push   edi
c0011315:	56                   	push   esi
c0011316:	53                   	push   ebx
c0011317:	31 db                	xor    ebx,ebx
c0011319:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001131d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011323:	7e 1f                	jle    c0011344 <Video::clearScreen(unsigned int)+0x30>
c0011325:	31 ff                	xor    edi,edi
c0011327:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001132d:	7e 12                	jle    c0011341 <Video::clearScreen(unsigned int)+0x2d>
c001132f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011331:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011335:	53                   	push   ebx
c0011336:	57                   	push   edi
c0011337:	47                   	inc    edi
c0011338:	56                   	push   esi
c0011339:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001133c:	83 c4 10             	add    esp,0x10
c001133f:	eb e6                	jmp    c0011327 <Video::clearScreen(unsigned int)+0x13>
c0011341:	43                   	inc    ebx
c0011342:	eb d9                	jmp    c001131d <Video::clearScreen(unsigned int)+0x9>
c0011344:	5b                   	pop    ebx
c0011345:	5e                   	pop    esi
c0011346:	5f                   	pop    edi
c0011347:	c3                   	ret    

c0011348 <Video::putpixel(int, int, unsigned int)>:
c0011348:	c7 44 24 04 0c 52 02 c0 	mov    DWORD PTR [esp+0x4],0xc002520c
c0011350:	e9 b2 36 00 00       	jmp    c0014a07 <Krnl::panic(char const*)>
c0011355:	90                   	nop

c0011356 <Video::Video(char const*)>:
c0011356:	83 ec 0c             	sub    esp,0xc
c0011359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001135d:	83 ec 08             	sub    esp,0x8
c0011360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011364:	50                   	push   eax
c0011365:	e8 08 d1 ff ff       	call   c000e472 <Device::Device(char const*)>
c001136a:	83 c4 10             	add    esp,0x10
c001136d:	ba 7c 52 02 c0       	mov    edx,0xc002527c
c0011372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011376:	89 10                	mov    DWORD PTR [eax],edx
c0011378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001137c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011386:	90                   	nop
c0011387:	83 c4 0c             	add    esp,0xc
c001138a:	c3                   	ret    
c001138b:	90                   	nop

c001138c <Video::~Video()>:
c001138c:	83 ec 0c             	sub    esp,0xc
c001138f:	ba 7c 52 02 c0       	mov    edx,0xc002527c
c0011394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011398:	89 10                	mov    DWORD PTR [eax],edx
c001139a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001139e:	83 ec 0c             	sub    esp,0xc
c00113a1:	50                   	push   eax
c00113a2:	e8 95 cd ff ff       	call   c000e13c <Device::~Device()>
c00113a7:	83 c4 10             	add    esp,0x10
c00113aa:	90                   	nop
c00113ab:	83 c4 0c             	add    esp,0xc
c00113ae:	c3                   	ret    
c00113af:	90                   	nop

c00113b0 <Video::~Video()>:
c00113b0:	83 ec 0c             	sub    esp,0xc
c00113b3:	83 ec 0c             	sub    esp,0xc
c00113b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113ba:	e8 cd ff ff ff       	call   c001138c <Video::~Video()>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	83 ec 08             	sub    esp,0x8
c00113c5:	68 64 01 00 00       	push   0x164
c00113ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113ce:	e8 47 b8 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00113d3:	83 c4 10             	add    esp,0x10
c00113d6:	83 c4 0c             	add    esp,0xc
c00113d9:	c3                   	ret    

c00113da <Video::isMonochrome()>:
c00113da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113de:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00113e4:	c3                   	ret    
c00113e5:	90                   	nop

c00113e6 <Video::getWidth()>:
c00113e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00113f0:	c3                   	ret    
c00113f1:	90                   	nop

c00113f2 <Video::getHeight()>:
c00113f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113f6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00113fc:	c3                   	ret    
c00113fd:	90                   	nop

c00113fe <Video::drawCursor(int, int, unsigned char*, int)>:
c00113fe:	55                   	push   ebp
c00113ff:	57                   	push   edi
c0011400:	56                   	push   esi
c0011401:	53                   	push   ebx
c0011402:	83 ec 2c             	sub    esp,0x2c
c0011405:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011409:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001140d:	83 f8 01             	cmp    eax,0x1
c0011410:	19 c9                	sbb    ecx,ecx
c0011412:	31 db                	xor    ebx,ebx
c0011414:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011418:	89 cd                	mov    ebp,ecx
c001141a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011422:	f7 d5                	not    ebp
c0011424:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001142a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001142e:	01 d8                	add    eax,ebx
c0011430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011434:	56                   	push   esi
c0011435:	e8 b8 ff ff ff       	call   c00113f2 <Video::getHeight()>
c001143a:	59                   	pop    ecx
c001143b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001143f:	7e 70                	jle    c00114b1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011441:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011445:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011449:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001144c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011450:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011454:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001145b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001145f:	89 f8                	mov    eax,edi
c0011461:	83 c0 20             	add    eax,0x20
c0011464:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011468:	56                   	push   esi
c0011469:	e8 78 ff ff ff       	call   c00113e6 <Video::getWidth()>
c001146e:	5a                   	pop    edx
c001146f:	39 c7                	cmp    edi,eax
c0011471:	7d 34                	jge    c00114a7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011473:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011478:	74 05                	je     c001147f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001147a:	8b 06                	mov    eax,DWORD PTR [esi]
c001147c:	55                   	push   ebp
c001147d:	eb 0d                	jmp    c001148c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001147f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011484:	74 12                	je     c0011498 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011486:	8b 06                	mov    eax,DWORD PTR [esi]
c0011488:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001148c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011490:	57                   	push   edi
c0011491:	56                   	push   esi
c0011492:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011495:	83 c4 10             	add    esp,0x10
c0011498:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001149c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00114a0:	47                   	inc    edi
c00114a1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00114a5:	75 c1                	jne    c0011468 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00114a7:	43                   	inc    ebx
c00114a8:	83 fb 20             	cmp    ebx,0x20
c00114ab:	0f 85 79 ff ff ff    	jne    c001142a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00114b1:	83 c4 2c             	add    esp,0x2c
c00114b4:	5b                   	pop    ebx
c00114b5:	5e                   	pop    esi
c00114b6:	5f                   	pop    edi
c00114b7:	5d                   	pop    ebp
c00114b8:	c3                   	ret    
c00114b9:	90                   	nop

c00114ba <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00114ba:	55                   	push   ebp
c00114bb:	57                   	push   edi
c00114bc:	56                   	push   esi
c00114bd:	53                   	push   ebx
c00114be:	83 ec 28             	sub    esp,0x28
c00114c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00114c5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00114c9:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00114cd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00114d1:	c1 e6 08             	shl    esi,0x8
c00114d4:	01 c6                	add    esi,eax
c00114d6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00114da:	c1 e0 08             	shl    eax,0x8
c00114dd:	01 d0                	add    eax,edx
c00114df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00114e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114e7:	0f af c6             	imul   eax,esi
c00114ea:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00114f1:	50                   	push   eax
c00114f2:	e8 18 85 ff ff       	call   c0009a0f <malloc>
c00114f7:	83 c4 10             	add    esp,0x10
c00114fa:	89 c7                	mov    edi,eax
c00114fc:	85 c0                	test   eax,eax
c00114fe:	75 10                	jne    c0011510 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0011500:	83 ec 0c             	sub    esp,0xc
c0011503:	68 2d 52 02 c0       	push   0xc002522d
c0011508:	e8 fa 34 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c001150d:	83 c4 10             	add    esp,0x10
c0011510:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011513:	ba 12 00 00 00       	mov    edx,0x12
c0011518:	84 c0                	test   al,al
c001151a:	74 11                	je     c001152d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001151c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011520:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011524:	c1 fa 03             	sar    edx,0x3
c0011527:	0f af d1             	imul   edx,ecx
c001152a:	83 c2 12             	add    edx,0x12
c001152d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011531:	74 04                	je     c0011537 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011533:	85 f6                	test   esi,esi
c0011535:	75 12                	jne    c0011549 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011537:	83 ec 0c             	sub    esp,0xc
c001153a:	68 3d 52 02 c0       	push   0xc002523d
c001153f:	e8 b7 b7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0011544:	e9 b8 00 00 00       	jmp    c0011601 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011549:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001154d:	80 f9 02             	cmp    cl,0x2
c0011550:	0f 85 96 00 00 00    	jne    c00115ec <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011556:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001155b:	75 0e                	jne    c001156b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001155d:	84 c0                	test   al,al
c001155f:	75 0a                	jne    c001156b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011561:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011564:	83 e8 18             	sub    eax,0x18
c0011567:	a8 f7                	test   al,0xf7
c0011569:	74 0a                	je     c0011575 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001156b:	83 ec 0c             	sub    esp,0xc
c001156e:	68 52 52 02 c0       	push   0xc0025252
c0011573:	eb 7f                	jmp    c00115f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011575:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001157d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011585:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011589:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011591:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011595:	75 0c                	jne    c00115a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011597:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001159c:	c1 e0 18             	shl    eax,0x18
c001159f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00115a3:	45                   	inc    ebp
c00115a4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00115a9:	c1 e1 10             	shl    ecx,0x10
c00115ac:	89 c8                	mov    eax,ecx
c00115ae:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00115b3:	c1 e1 08             	shl    ecx,0x8
c00115b6:	09 c1                	or     ecx,eax
c00115b8:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00115bc:	09 c1                	or     ecx,eax
c00115be:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00115c2:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00115c6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00115ca:	c1 f8 03             	sar    eax,0x3
c00115cd:	01 c2                	add    edx,eax
c00115cf:	89 e8                	mov    eax,ebp
c00115d1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00115d5:	39 c6                	cmp    esi,eax
c00115d7:	7f b0                	jg     c0011589 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00115d9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00115dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00115e1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00115e4:	7e 22                	jle    c0011608 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00115e6:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00115ea:	eb 99                	jmp    c0011585 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00115ec:	50                   	push   eax
c00115ed:	50                   	push   eax
c00115ee:	51                   	push   ecx
c00115ef:	68 60 52 02 c0       	push   0xc0025260
c00115f4:	e8 02 b7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00115f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00115fc:	e8 1e 84 ff ff       	call   c0009a1f <free>
c0011601:	83 c4 10             	add    esp,0x10
c0011604:	31 ff                	xor    edi,edi
c0011606:	eb 0f                	jmp    c0011617 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011608:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001160c:	89 30                	mov    DWORD PTR [eax],esi
c001160e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011612:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011615:	89 30                	mov    DWORD PTR [eax],esi
c0011617:	83 c4 1c             	add    esp,0x1c
c001161a:	89 f8                	mov    eax,edi
c001161c:	5b                   	pop    ebx
c001161d:	5e                   	pop    esi
c001161e:	5f                   	pop    edi
c001161f:	5d                   	pop    ebp
c0011620:	c3                   	ret    
c0011621:	90                   	nop

c0011622 <Video::putTGA(int, int, unsigned char*, int)>:
c0011622:	55                   	push   ebp
c0011623:	57                   	push   edi
c0011624:	56                   	push   esi
c0011625:	53                   	push   ebx
c0011626:	83 ec 28             	sub    esp,0x28
c0011629:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001162d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011631:	50                   	push   eax
c0011632:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011636:	50                   	push   eax
c0011637:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001163b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001163f:	56                   	push   esi
c0011640:	e8 75 fe ff ff       	call   c00114ba <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011645:	83 c4 20             	add    esp,0x20
c0011648:	85 c0                	test   eax,eax
c001164a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001164e:	74 35                	je     c0011685 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011650:	89 c7                	mov    edi,eax
c0011652:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011656:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001165a:	39 d8                	cmp    eax,ebx
c001165c:	7e 27                	jle    c0011685 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001165e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011662:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011666:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001166a:	39 e8                	cmp    eax,ebp
c001166c:	7e 14                	jle    c0011682 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001166e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011670:	83 c7 04             	add    edi,0x4
c0011673:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011676:	53                   	push   ebx
c0011677:	55                   	push   ebp
c0011678:	45                   	inc    ebp
c0011679:	56                   	push   esi
c001167a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001167d:	83 c4 10             	add    esp,0x10
c0011680:	eb e0                	jmp    c0011662 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011682:	43                   	inc    ebx
c0011683:	eb cd                	jmp    c0011652 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011685:	83 c4 1c             	add    esp,0x1c
c0011688:	5b                   	pop    ebx
c0011689:	5e                   	pop    esi
c001168a:	5f                   	pop    edi
c001168b:	5d                   	pop    ebp
c001168c:	c3                   	ret    
c001168d:	66 90                	xchg   ax,ax
c001168f:	90                   	nop

c0011690 <ACPI::close(int, int, void*)>:
c0011690:	83 ec 1c             	sub    esp,0x1c
c0011693:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001169b:	74 0b                	je     c00116a8 <ACPI::close(int, int, void*)+0x18>
c001169d:	b8 00 00 00 00       	mov    eax,0x0
c00116a2:	e9 99 00 00 00       	jmp    c0011740 <ACPI::close(int, int, void*)+0xb0>
c00116a7:	90                   	nop
c00116a8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00116ad:	75 29                	jne    c00116d8 <ACPI::close(int, int, void*)+0x48>
c00116af:	a1 a8 85 02 c0       	mov    eax,ds:0xc00285a8
c00116b4:	85 c0                	test   eax,eax
c00116b6:	74 08                	je     c00116c0 <ACPI::close(int, int, void*)+0x30>
c00116b8:	a1 a8 85 02 c0       	mov    eax,ds:0xc00285a8
c00116bd:	ff d0                	call   eax
c00116bf:	90                   	nop
c00116c0:	83 ec 0c             	sub    esp,0xc
c00116c3:	68 bc 52 02 c0       	push   0xc00252bc
c00116c8:	e8 3a 33 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c00116cd:	83 c4 10             	add    esp,0x10
c00116d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116d5:	eb 69                	jmp    c0011740 <ACPI::close(int, int, void*)+0xb0>
c00116d7:	90                   	nop
c00116d8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00116dd:	75 59                	jne    c0011738 <ACPI::close(int, int, void*)+0xa8>
c00116df:	a1 a4 85 02 c0       	mov    eax,ds:0xc00285a4
c00116e4:	85 c0                	test   eax,eax
c00116e6:	74 08                	je     c00116f0 <ACPI::close(int, int, void*)+0x60>
c00116e8:	a1 a4 85 02 c0       	mov    eax,ds:0xc00285a4
c00116ed:	ff d0                	call   eax
c00116ef:	90                   	nop
c00116f0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00116f5:	8d 76 00             	lea    esi,[esi+0x0]
c00116f8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00116fd:	83 e0 02             	and    eax,0x2
c0011700:	74 1e                	je     c0011720 <ACPI::close(int, int, void*)+0x90>
c0011702:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011709:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001170d:	89 c2                	mov    edx,eax
c001170f:	ec                   	in     al,dx
c0011710:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011714:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011718:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001171c:	eb da                	jmp    c00116f8 <ACPI::close(int, int, void*)+0x68>
c001171e:	66 90                	xchg   ax,ax
c0011720:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011727:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001172c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011730:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011734:	ee                   	out    dx,al
c0011735:	8d 76 00             	lea    esi,[esi+0x0]
c0011738:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001173d:	8d 76 00             	lea    esi,[esi+0x0]
c0011740:	83 c4 1c             	add    esp,0x1c
c0011743:	c3                   	ret    

c0011744 <findRSDP()>:
c0011744:	83 ec 1c             	sub    esp,0x1c
c0011747:	83 ec 0c             	sub    esp,0xc
c001174a:	68 df 53 02 c0       	push   0xc00253df
c001174f:	e8 15 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011754:	83 c4 10             	add    esp,0x10
c0011757:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c001175c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011762:	83 e0 04             	and    eax,0x4
c0011765:	84 c0                	test   al,al
c0011767:	75 0b                	jne    c0011774 <findRSDP()+0x30>
c0011769:	b8 00 00 00 00       	mov    eax,0x0
c001176e:	e9 a1 00 00 00       	jmp    c0011814 <findRSDP()+0xd0>
c0011773:	90                   	nop
c0011774:	a1 98 7f 02 c0       	mov    eax,ds:0xc0027f98
c0011779:	3d ff 07 00 00       	cmp    eax,0x7ff
c001177e:	7f 1c                	jg     c001179c <findRSDP()+0x58>
c0011780:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0011785:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001178b:	83 e2 fb             	and    edx,0xfffffffb
c001178e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011794:	b8 00 00 00 00       	mov    eax,0x0
c0011799:	eb 79                	jmp    c0011814 <findRSDP()+0xd0>
c001179b:	90                   	nop
c001179c:	83 ec 0c             	sub    esp,0xc
c001179f:	68 ef 53 02 c0       	push   0xc00253ef
c00117a4:	e8 c0 82 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00117b4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00117bc:	77 3e                	ja     c00117fc <findRSDP()+0xb8>
c00117be:	83 ec 04             	sub    esp,0x4
c00117c1:	6a 08                	push   0x8
c00117c3:	68 08 54 02 c0       	push   0xc0025408
c00117c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117cc:	e8 af ed fe ff       	call   c0000580 <memcmp>
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	85 c0                	test   eax,eax
c00117d6:	0f 94 c0             	sete   al
c00117d9:	84 c0                	test   al,al
c00117db:	74 17                	je     c00117f4 <findRSDP()+0xb0>
c00117dd:	83 ec 0c             	sub    esp,0xc
c00117e0:	68 11 54 02 c0       	push   0xc0025411
c00117e5:	e8 7f 82 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00117ea:	83 c4 10             	add    esp,0x10
c00117ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117f1:	eb 21                	jmp    c0011814 <findRSDP()+0xd0>
c00117f3:	90                   	nop
c00117f4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00117f9:	eb b9                	jmp    c00117b4 <findRSDP()+0x70>
c00117fb:	90                   	nop
c00117fc:	83 ec 0c             	sub    esp,0xc
c00117ff:	68 1f 54 02 c0       	push   0xc002541f
c0011804:	e8 60 82 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	b8 00 00 00 00       	mov    eax,0x0
c0011811:	8d 76 00             	lea    esi,[esi+0x0]
c0011814:	83 c4 1c             	add    esp,0x1c
c0011817:	c3                   	ret    

c0011818 <loadACPITables(unsigned char*)>:
c0011818:	57                   	push   edi
c0011819:	56                   	push   esi
c001181a:	53                   	push   ebx
c001181b:	83 ec 60             	sub    esp,0x60
c001181e:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0011823:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011829:	83 e0 04             	and    eax,0x4
c001182c:	84 c0                	test   al,al
c001182e:	0f 84 3c 02 00 00    	je     c0011a70 <loadACPITables(unsigned char*)+0x258>
c0011834:	a0 c0 87 02 c0       	mov    al,ds:0xc00287c0
c0011839:	84 c0                	test   al,al
c001183b:	74 77                	je     c00118b4 <loadACPITables(unsigned char*)+0x9c>
c001183d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011841:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011845:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011849:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001184c:	83 e8 24             	sub    eax,0x24
c001184f:	c1 e8 03             	shr    eax,0x3
c0011852:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011856:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001185e:	66 90                	xchg   ax,ax
c0011860:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011864:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011868:	0f 8d b6 00 00 00    	jge    c0011924 <loadACPITables(unsigned char*)+0x10c>
c001186e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011872:	83 c0 24             	add    eax,0x24
c0011875:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011879:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001187d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011881:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011885:	c1 e0 03             	shl    eax,0x3
c0011888:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001188c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011890:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011893:	8b 00                	mov    eax,DWORD PTR [eax]
c0011895:	89 c1                	mov    ecx,eax
c0011897:	a1 ac 85 02 c0       	mov    eax,ds:0xc00285ac
c001189c:	8d 50 01             	lea    edx,[eax+0x1]
c001189f:	89 15 ac 85 02 c0    	mov    DWORD PTR ds:0xc00285ac,edx
c00118a5:	89 ca                	mov    edx,ecx
c00118a7:	89 14 c5 c4 85 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7a3c],edx
c00118ae:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00118b2:	eb ac                	jmp    c0011860 <loadACPITables(unsigned char*)+0x48>
c00118b4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00118b8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00118bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00118c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118c3:	83 e8 24             	sub    eax,0x24
c00118c6:	c1 e8 02             	shr    eax,0x2
c00118c9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00118cd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00118d5:	8d 76 00             	lea    esi,[esi+0x0]
c00118d8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00118dc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00118e0:	7d 42                	jge    c0011924 <loadACPITables(unsigned char*)+0x10c>
c00118e2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00118e6:	83 c0 24             	add    eax,0x24
c00118e9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00118ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00118f1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00118f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00118f9:	c1 e0 02             	shl    eax,0x2
c00118fc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011900:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011904:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011906:	a1 ac 85 02 c0       	mov    eax,ds:0xc00285ac
c001190b:	8d 50 01             	lea    edx,[eax+0x1]
c001190e:	89 15 ac 85 02 c0    	mov    DWORD PTR ds:0xc00285ac,edx
c0011914:	89 ca                	mov    edx,ecx
c0011916:	89 14 c5 c4 85 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7a3c],edx
c001191d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011921:	eb b5                	jmp    c00118d8 <loadACPITables(unsigned char*)+0xc0>
c0011923:	90                   	nop
c0011924:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001192c:	a1 ac 85 02 c0       	mov    eax,ds:0xc00285ac
c0011931:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011935:	0f 8d 39 01 00 00    	jge    c0011a74 <loadACPITables(unsigned char*)+0x25c>
c001193b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001193f:	8b 04 c5 c4 85 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7a3c]
c0011946:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001194a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001194e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011952:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011956:	25 ff 0f 00 00       	and    eax,0xfff
c001195b:	89 c6                	mov    esi,eax
c001195d:	8b 1d 90 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028090
c0011963:	83 ec 0c             	sub    esp,0xc
c0011966:	6a 01                	push   0x1
c0011968:	e8 68 a0 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c001196d:	83 c4 10             	add    esp,0x10
c0011970:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011974:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001197a:	83 ec 0c             	sub    esp,0xc
c001197d:	6a 01                	push   0x1
c001197f:	6a 01                	push   0x1
c0011981:	50                   	push   eax
c0011982:	52                   	push   edx
c0011983:	53                   	push   ebx
c0011984:	e8 e9 a9 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011989:	83 c4 20             	add    esp,0x20
c001198c:	09 f0                	or     eax,esi
c001198e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011992:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011996:	c1 e0 03             	shl    eax,0x3
c0011999:	05 c0 85 02 c0       	add    eax,0xc00285c0
c001199e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00119a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00119aa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00119b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00119ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00119be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00119c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00119c6:	89 c6                	mov    esi,eax
c00119c8:	89 d7                	mov    edi,edx
c00119ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119cc:	89 c8                	mov    eax,ecx
c00119ce:	89 fa                	mov    edx,edi
c00119d0:	89 f3                	mov    ebx,esi
c00119d2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00119d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00119da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00119e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00119ed:	05 00 10 00 00       	add    eax,0x1000
c00119f2:	c1 e8 0c             	shr    eax,0xc
c00119f5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00119f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011a01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a05:	25 ff 0f 00 00       	and    eax,0xfff
c0011a0a:	89 c6                	mov    esi,eax
c0011a0c:	8b 1d 90 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028090
c0011a12:	83 ec 0c             	sub    esp,0xc
c0011a15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011a19:	e8 b7 9f ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011a25:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011a2b:	83 ec 0c             	sub    esp,0xc
c0011a2e:	6a 01                	push   0x1
c0011a30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011a34:	50                   	push   eax
c0011a35:	52                   	push   edx
c0011a36:	53                   	push   ebx
c0011a37:	e8 36 a9 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a3c:	83 c4 20             	add    esp,0x20
c0011a3f:	09 f0                	or     eax,esi
c0011a41:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011a45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a49:	83 ec 0c             	sub    esp,0xc
c0011a4c:	50                   	push   eax
c0011a4d:	e8 b3 a2 ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a52:	83 c4 10             	add    esp,0x10
c0011a55:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011a59:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011a5d:	89 14 c5 c4 85 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7a3c],edx
c0011a64:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011a68:	e9 bf fe ff ff       	jmp    c001192c <loadACPITables(unsigned char*)+0x114>
c0011a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a70:	90                   	nop
c0011a71:	8d 76 00             	lea    esi,[esi+0x0]
c0011a74:	83 c4 60             	add    esp,0x60
c0011a77:	5b                   	pop    ebx
c0011a78:	5e                   	pop    esi
c0011a79:	5f                   	pop    edi
c0011a7a:	c3                   	ret    
c0011a7b:	90                   	nop

c0011a7c <findRSDT(unsigned char*)>:
c0011a7c:	57                   	push   edi
c0011a7d:	56                   	push   esi
c0011a7e:	53                   	push   ebx
c0011a7f:	83 ec 50             	sub    esp,0x50
c0011a82:	83 ec 0c             	sub    esp,0xc
c0011a85:	68 33 54 02 c0       	push   0xc0025433
c0011a8a:	e8 da 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011a8f:	83 c4 10             	add    esp,0x10
c0011a92:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0011a97:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a9d:	83 e0 04             	and    eax,0x4
c0011aa0:	84 c0                	test   al,al
c0011aa2:	75 0c                	jne    c0011ab0 <findRSDT(unsigned char*)+0x34>
c0011aa4:	b8 00 00 00 00       	mov    eax,0x0
c0011aa9:	e9 86 01 00 00       	jmp    c0011c34 <findRSDT(unsigned char*)+0x1b8>
c0011aae:	66 90                	xchg   ax,ax
c0011ab0:	83 ec 0c             	sub    esp,0xc
c0011ab3:	68 45 54 02 c0       	push   0xc0025445
c0011ab8:	e8 ac 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011abd:	83 c4 10             	add    esp,0x10
c0011ac0:	89 e0                	mov    eax,esp
c0011ac2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011ac6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011aca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011ace:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011ad6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ada:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011ade:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011ae2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011ae6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011aea:	89 c6                	mov    esi,eax
c0011aec:	89 d7                	mov    edi,edx
c0011aee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011af0:	89 c8                	mov    eax,ecx
c0011af2:	89 fa                	mov    edx,edi
c0011af4:	89 f3                	mov    ebx,esi
c0011af6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011afa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011afe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011b02:	83 ec 0c             	sub    esp,0xc
c0011b05:	68 57 54 02 c0       	push   0xc0025457
c0011b0a:	e8 5a 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011b0f:	83 c4 10             	add    esp,0x10
c0011b12:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011b16:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011b1a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011b22:	83 ec 0c             	sub    esp,0xc
c0011b25:	68 69 54 02 c0       	push   0xc0025469
c0011b2a:	e8 3a 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011b2f:	83 c4 10             	add    esp,0x10
c0011b32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b3a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b42:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011b46:	83 ec 04             	sub    esp,0x4
c0011b49:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b4d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b51:	68 e0 52 02 c0       	push   0xc00252e0
c0011b56:	e8 a0 b1 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0011b5b:	83 c4 10             	add    esp,0x10
c0011b5e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011b62:	25 ff 0f 00 00       	and    eax,0xfff
c0011b67:	89 c6                	mov    esi,eax
c0011b69:	8b 1d 90 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028090
c0011b6f:	83 ec 0c             	sub    esp,0xc
c0011b72:	6a 02                	push   0x2
c0011b74:	e8 5c 9e ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0011b79:	83 c4 10             	add    esp,0x10
c0011b7c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011b80:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011b86:	83 ec 0c             	sub    esp,0xc
c0011b89:	6a 01                	push   0x1
c0011b8b:	6a 02                	push   0x2
c0011b8d:	50                   	push   eax
c0011b8e:	52                   	push   edx
c0011b8f:	53                   	push   ebx
c0011b90:	e8 dd a7 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b95:	83 c4 20             	add    esp,0x20
c0011b98:	09 f0                	or     eax,esi
c0011b9a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ba2:	25 ff 0f 00 00       	and    eax,0xfff
c0011ba7:	89 c6                	mov    esi,eax
c0011ba9:	8b 1d 90 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028090
c0011baf:	83 ec 0c             	sub    esp,0xc
c0011bb2:	6a 02                	push   0x2
c0011bb4:	e8 1c 9e ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0011bb9:	83 c4 10             	add    esp,0x10
c0011bbc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011bc0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011bc6:	83 ec 0c             	sub    esp,0xc
c0011bc9:	6a 01                	push   0x1
c0011bcb:	6a 02                	push   0x2
c0011bcd:	50                   	push   eax
c0011bce:	52                   	push   edx
c0011bcf:	53                   	push   ebx
c0011bd0:	e8 9d a7 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011bd5:	83 c4 20             	add    esp,0x20
c0011bd8:	09 f0                	or     eax,esi
c0011bda:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011bde:	83 ec 04             	sub    esp,0x4
c0011be1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011be5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011be9:	68 00 53 02 c0       	push   0xc0025300
c0011bee:	e8 08 b1 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0011bf3:	83 c4 10             	add    esp,0x10
c0011bf6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011bfb:	75 13                	jne    c0011c10 <findRSDT(unsigned char*)+0x194>
c0011bfd:	c6 05 c0 87 02 c0 00 	mov    BYTE PTR ds:0xc00287c0,0x0
c0011c04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c08:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011c0c:	eb 22                	jmp    c0011c30 <findRSDT(unsigned char*)+0x1b4>
c0011c0e:	66 90                	xchg   ax,ax
c0011c10:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011c15:	75 11                	jne    c0011c28 <findRSDT(unsigned char*)+0x1ac>
c0011c17:	c6 05 c0 87 02 c0 01 	mov    BYTE PTR ds:0xc00287c0,0x1
c0011c1e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011c22:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011c26:	eb 08                	jmp    c0011c30 <findRSDT(unsigned char*)+0x1b4>
c0011c28:	b8 00 00 00 00       	mov    eax,0x0
c0011c2d:	eb 05                	jmp    c0011c34 <findRSDT(unsigned char*)+0x1b8>
c0011c2f:	90                   	nop
c0011c30:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011c34:	83 c4 50             	add    esp,0x50
c0011c37:	5b                   	pop    ebx
c0011c38:	5e                   	pop    esi
c0011c39:	5f                   	pop    edi
c0011c3a:	c3                   	ret    
c0011c3b:	90                   	nop

c0011c3c <findDataTable(unsigned char*, char*)>:
c0011c3c:	83 ec 1c             	sub    esp,0x1c
c0011c3f:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0011c44:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c4a:	83 e0 04             	and    eax,0x4
c0011c4d:	84 c0                	test   al,al
c0011c4f:	75 07                	jne    c0011c58 <findDataTable(unsigned char*, char*)+0x1c>
c0011c51:	b8 00 00 00 00       	mov    eax,0x0
c0011c56:	eb 58                	jmp    c0011cb0 <findDataTable(unsigned char*, char*)+0x74>
c0011c58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c60:	a1 ac 85 02 c0       	mov    eax,ds:0xc00285ac
c0011c65:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011c69:	7d 3d                	jge    c0011ca8 <findDataTable(unsigned char*, char*)+0x6c>
c0011c6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c6f:	c1 e0 03             	shl    eax,0x3
c0011c72:	05 c0 85 02 c0       	add    eax,0xc00285c0
c0011c77:	83 ec 04             	sub    esp,0x4
c0011c7a:	6a 04                	push   0x4
c0011c7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011c80:	50                   	push   eax
c0011c81:	e8 fa e8 fe ff       	call   c0000580 <memcmp>
c0011c86:	83 c4 10             	add    esp,0x10
c0011c89:	85 c0                	test   eax,eax
c0011c8b:	0f 94 c0             	sete   al
c0011c8e:	84 c0                	test   al,al
c0011c90:	74 0e                	je     c0011ca0 <findDataTable(unsigned char*, char*)+0x64>
c0011c92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c96:	8b 04 c5 c4 85 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7a3c]
c0011c9d:	eb 11                	jmp    c0011cb0 <findDataTable(unsigned char*, char*)+0x74>
c0011c9f:	90                   	nop
c0011ca0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011ca4:	eb ba                	jmp    c0011c60 <findDataTable(unsigned char*, char*)+0x24>
c0011ca6:	66 90                	xchg   ax,ax
c0011ca8:	b8 00 00 00 00       	mov    eax,0x0
c0011cad:	8d 76 00             	lea    esi,[esi+0x0]
c0011cb0:	83 c4 1c             	add    esp,0x1c
c0011cb3:	c3                   	ret    

c0011cb4 <scanMADT()>:
c0011cb4:	53                   	push   ebx
c0011cb5:	83 ec 38             	sub    esp,0x38
c0011cb8:	83 ec 0c             	sub    esp,0xc
c0011cbb:	68 7b 54 02 c0       	push   0xc002547b
c0011cc0:	e8 a4 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011cc5:	83 c4 10             	add    esp,0x10
c0011cc8:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c0011ccd:	25 00 04 00 00       	and    eax,0x400
c0011cd2:	74 14                	je     c0011ce8 <scanMADT()+0x34>
c0011cd4:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0011cd9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011cdf:	83 e2 fb             	and    edx,0xfffffffb
c0011ce2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ce8:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0011ced:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011cf3:	83 e0 04             	and    eax,0x4
c0011cf6:	84 c0                	test   al,al
c0011cf8:	0f 84 82 04 00 00    	je     c0012180 <scanMADT()+0x4cc>
c0011cfe:	83 ec 0c             	sub    esp,0xc
c0011d01:	68 88 54 02 c0       	push   0xc0025488
c0011d06:	e8 5e 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011d0b:	83 c4 10             	add    esp,0x10
c0011d0e:	e8 31 fa ff ff       	call   c0011744 <findRSDP()>
c0011d13:	a3 cc 87 02 c0       	mov    ds:0xc00287cc,eax
c0011d18:	a1 cc 87 02 c0       	mov    eax,ds:0xc00287cc
c0011d1d:	85 c0                	test   eax,eax
c0011d1f:	75 1b                	jne    c0011d3c <scanMADT()+0x88>
c0011d21:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0011d26:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d2c:	83 e2 fb             	and    edx,0xfffffffb
c0011d2f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d35:	e9 4e 04 00 00       	jmp    c0012188 <scanMADT()+0x4d4>
c0011d3a:	66 90                	xchg   ax,ax
c0011d3c:	83 ec 0c             	sub    esp,0xc
c0011d3f:	68 9a 54 02 c0       	push   0xc002549a
c0011d44:	e8 20 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011d49:	83 c4 10             	add    esp,0x10
c0011d4c:	a1 cc 87 02 c0       	mov    eax,ds:0xc00287cc
c0011d51:	83 ec 0c             	sub    esp,0xc
c0011d54:	50                   	push   eax
c0011d55:	e8 22 fd ff ff       	call   c0011a7c <findRSDT(unsigned char*)>
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	a3 c8 87 02 c0       	mov    ds:0xc00287c8,eax
c0011d62:	a1 c8 87 02 c0       	mov    eax,ds:0xc00287c8
c0011d67:	85 c0                	test   eax,eax
c0011d69:	75 19                	jne    c0011d84 <scanMADT()+0xd0>
c0011d6b:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0011d70:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d76:	83 e2 fb             	and    edx,0xfffffffb
c0011d79:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d7f:	e9 04 04 00 00       	jmp    c0012188 <scanMADT()+0x4d4>
c0011d84:	83 ec 0c             	sub    esp,0xc
c0011d87:	68 aa 54 02 c0       	push   0xc00254aa
c0011d8c:	e8 d8 7c ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011d91:	83 c4 10             	add    esp,0x10
c0011d94:	a1 c8 87 02 c0       	mov    eax,ds:0xc00287c8
c0011d99:	83 ec 0c             	sub    esp,0xc
c0011d9c:	50                   	push   eax
c0011d9d:	e8 76 fa ff ff       	call   c0011818 <loadACPITables(unsigned char*)>
c0011da2:	83 c4 10             	add    esp,0x10
c0011da5:	a1 c8 87 02 c0       	mov    eax,ds:0xc00287c8
c0011daa:	83 ec 08             	sub    esp,0x8
c0011dad:	68 c2 54 02 c0       	push   0xc00254c2
c0011db2:	50                   	push   eax
c0011db3:	e8 84 fe ff ff       	call   c0011c3c <findDataTable(unsigned char*, char*)>
c0011db8:	83 c4 10             	add    esp,0x10
c0011dbb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011dbf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011dc4:	75 1a                	jne    c0011de0 <scanMADT()+0x12c>
c0011dc6:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0011dcb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011dd1:	83 e2 fe             	and    edx,0xfffffffe
c0011dd4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011dda:	e9 a9 03 00 00       	jmp    c0012188 <scanMADT()+0x4d4>
c0011ddf:	90                   	nop
c0011de0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011de8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011def:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011df3:	0f 87 8f 03 00 00    	ja     c0012188 <scanMADT()+0x4d4>
c0011df9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011e01:	0f 87 81 03 00 00    	ja     c0012188 <scanMADT()+0x4d4>
c0011e07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e0b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e13:	8d 50 01             	lea    edx,[eax+0x1]
c0011e16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e1e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011e22:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011e26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e2a:	8d 50 01             	lea    edx,[eax+0x1]
c0011e2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e35:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011e39:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011e3d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011e42:	0f 86 3c 03 00 00    	jbe    c0012184 <scanMADT()+0x4d0>
c0011e48:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011e4d:	75 59                	jne    c0011ea8 <scanMADT()+0x1f4>
c0011e4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e53:	8d 50 01             	lea    edx,[eax+0x1]
c0011e56:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e5a:	8a 15 c0 89 02 c0    	mov    dl,BYTE PTR ds:0xc00289c0
c0011e60:	0f b6 d2             	movzx  edx,dl
c0011e63:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e67:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e6b:	88 82 00 8a 02 c0    	mov    BYTE PTR [edx-0x3ffd7600],al
c0011e71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e75:	8d 50 01             	lea    edx,[eax+0x1]
c0011e78:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e7c:	8a 15 c0 89 02 c0    	mov    dl,BYTE PTR ds:0xc00289c0
c0011e82:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011e85:	88 0d c0 89 02 c0    	mov    BYTE PTR ds:0xc00289c0,cl
c0011e8b:	0f b6 d2             	movzx  edx,dl
c0011e8e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e92:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e96:	88 82 e0 89 02 c0    	mov    BYTE PTR [edx-0x3ffd7620],al
c0011e9c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011ea1:	e9 c6 02 00 00       	jmp    c001216c <scanMADT()+0x4b8>
c0011ea6:	66 90                	xchg   ax,ax
c0011ea8:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011ead:	0f 85 15 01 00 00    	jne    c0011fc8 <scanMADT()+0x314>
c0011eb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eb7:	8d 50 01             	lea    edx,[eax+0x1]
c0011eba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ebe:	8a 15 80 88 02 c0    	mov    dl,BYTE PTR ds:0xc0028880
c0011ec4:	0f b6 d2             	movzx  edx,dl
c0011ec7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011ecb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ecf:	88 82 a0 88 02 c0    	mov    BYTE PTR [edx-0x3ffd7760],al
c0011ed5:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011ed9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011edd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ee1:	01 d0                	add    eax,edx
c0011ee3:	83 c0 2c             	add    eax,0x2c
c0011ee6:	8a 00                	mov    al,BYTE PTR [eax]
c0011ee8:	0f b6 d0             	movzx  edx,al
c0011eeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eef:	8d 48 01             	lea    ecx,[eax+0x1]
c0011ef2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ef6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011efa:	0f b6 c0             	movzx  eax,al
c0011efd:	c1 e0 08             	shl    eax,0x8
c0011f00:	89 d1                	mov    ecx,edx
c0011f02:	09 c1                	or     ecx,eax
c0011f04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f08:	8d 50 02             	lea    edx,[eax+0x2]
c0011f0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f0f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f13:	0f b6 c0             	movzx  eax,al
c0011f16:	c1 e0 10             	shl    eax,0x10
c0011f19:	09 c1                	or     ecx,eax
c0011f1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f1f:	8d 50 03             	lea    edx,[eax+0x3]
c0011f22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f26:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f2a:	0f b6 c0             	movzx  eax,al
c0011f2d:	c1 e0 18             	shl    eax,0x18
c0011f30:	09 c1                	or     ecx,eax
c0011f32:	89 ca                	mov    edx,ecx
c0011f34:	a0 80 88 02 c0       	mov    al,ds:0xc0028880
c0011f39:	0f b6 c0             	movzx  eax,al
c0011f3c:	89 14 85 c0 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7740],edx
c0011f43:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f50:	01 d0                	add    eax,edx
c0011f52:	83 c0 2c             	add    eax,0x2c
c0011f55:	8a 00                	mov    al,BYTE PTR [eax]
c0011f57:	0f b6 d0             	movzx  edx,al
c0011f5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f5e:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f65:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011f69:	0f b6 c0             	movzx  eax,al
c0011f6c:	c1 e0 08             	shl    eax,0x8
c0011f6f:	89 d1                	mov    ecx,edx
c0011f71:	09 c1                	or     ecx,eax
c0011f73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f77:	8d 50 02             	lea    edx,[eax+0x2]
c0011f7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f7e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f82:	0f b6 c0             	movzx  eax,al
c0011f85:	c1 e0 10             	shl    eax,0x10
c0011f88:	09 c1                	or     ecx,eax
c0011f8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f8e:	8d 50 03             	lea    edx,[eax+0x3]
c0011f91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f95:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f99:	0f b6 c0             	movzx  eax,al
c0011f9c:	c1 e0 18             	shl    eax,0x18
c0011f9f:	09 c1                	or     ecx,eax
c0011fa1:	89 ca                	mov    edx,ecx
c0011fa3:	a0 80 88 02 c0       	mov    al,ds:0xc0028880
c0011fa8:	0f b6 c0             	movzx  eax,al
c0011fab:	89 14 85 40 89 02 c0 	mov    DWORD PTR [eax*4-0x3ffd76c0],edx
c0011fb2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011fb7:	a0 80 88 02 c0       	mov    al,ds:0xc0028880
c0011fbc:	40                   	inc    eax
c0011fbd:	a2 80 88 02 c0       	mov    ds:0xc0028880,al
c0011fc2:	e9 a5 01 00 00       	jmp    c001216c <scanMADT()+0x4b8>
c0011fc7:	90                   	nop
c0011fc8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011fcd:	0f 85 e9 00 00 00    	jne    c00120bc <scanMADT()+0x408>
c0011fd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fd7:	8d 50 01             	lea    edx,[eax+0x1]
c0011fda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011fde:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fe2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011fe6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011fea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fee:	8d 50 01             	lea    edx,[eax+0x1]
c0011ff1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ff5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ff9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ffd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0012001:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012005:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012009:	01 d0                	add    eax,edx
c001200b:	83 c0 2c             	add    eax,0x2c
c001200e:	8a 00                	mov    al,BYTE PTR [eax]
c0012010:	0f b6 d0             	movzx  edx,al
c0012013:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012017:	8d 48 01             	lea    ecx,[eax+0x1]
c001201a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001201e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012022:	0f b6 c0             	movzx  eax,al
c0012025:	c1 e0 08             	shl    eax,0x8
c0012028:	89 d1                	mov    ecx,edx
c001202a:	09 c1                	or     ecx,eax
c001202c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012030:	8d 50 02             	lea    edx,[eax+0x2]
c0012033:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012037:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001203b:	0f b6 c0             	movzx  eax,al
c001203e:	c1 e0 10             	shl    eax,0x10
c0012041:	09 c1                	or     ecx,eax
c0012043:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012047:	8d 50 03             	lea    edx,[eax+0x3]
c001204a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001204e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012052:	0f b6 c0             	movzx  eax,al
c0012055:	c1 e0 18             	shl    eax,0x18
c0012058:	09 c8                	or     eax,ecx
c001205a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001205e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012063:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012067:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001206b:	01 d0                	add    eax,edx
c001206d:	83 c0 2c             	add    eax,0x2c
c0012070:	8a 00                	mov    al,BYTE PTR [eax]
c0012072:	0f b6 c0             	movzx  eax,al
c0012075:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012079:	8d 4a 01             	lea    ecx,[edx+0x1]
c001207c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012080:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0012084:	0f b6 d2             	movzx  edx,dl
c0012087:	c1 e2 08             	shl    edx,0x8
c001208a:	09 d0                	or     eax,edx
c001208c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0012091:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012096:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001209b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001209f:	88 90 60 76 02 c0    	mov    BYTE PTR [eax-0x3ffd89a0],dl
c00120a5:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00120aa:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00120af:	66 89 84 12 60 88 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd77a0],ax
c00120b7:	e9 b0 00 00 00       	jmp    c001216c <scanMADT()+0x4b8>
c00120bc:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00120c1:	0f 85 99 00 00 00    	jne    c0012160 <scanMADT()+0x4ac>
c00120c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120cb:	8d 50 01             	lea    edx,[eax+0x1]
c00120ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00120d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120d6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00120da:	0f b6 c0             	movzx  eax,al
c00120dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120e9:	01 d0                	add    eax,edx
c00120eb:	83 c0 2c             	add    eax,0x2c
c00120ee:	8a 00                	mov    al,BYTE PTR [eax]
c00120f0:	0f b6 d0             	movzx  edx,al
c00120f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120f7:	8d 48 01             	lea    ecx,[eax+0x1]
c00120fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120fe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012102:	0f b6 c0             	movzx  eax,al
c0012105:	c1 e0 08             	shl    eax,0x8
c0012108:	09 d0                	or     eax,edx
c001210a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001210e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012113:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012117:	8d 50 01             	lea    edx,[eax+0x1]
c001211a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001211e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012122:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012126:	0f b6 c0             	movzx  eax,al
c0012129:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001212d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012131:	c1 e0 08             	shl    eax,0x8
c0012134:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012138:	89 c1                	mov    ecx,eax
c001213a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001213e:	c1 e0 18             	shl    eax,0x18
c0012141:	89 c3                	mov    ebx,eax
c0012143:	a1 d0 87 02 c0       	mov    eax,ds:0xc00287d0
c0012148:	8d 50 01             	lea    edx,[eax+0x1]
c001214b:	89 15 d0 87 02 c0    	mov    DWORD PTR ds:0xc00287d0,edx
c0012151:	09 d9                	or     ecx,ebx
c0012153:	89 ca                	mov    edx,ecx
c0012155:	89 14 85 e0 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7820],edx
c001215c:	eb 0e                	jmp    c001216c <scanMADT()+0x4b8>
c001215e:	66 90                	xchg   ax,ax
c0012160:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012165:	75 05                	jne    c001216c <scanMADT()+0x4b8>
c0012167:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001216c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0012171:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012175:	01 d0                	add    eax,edx
c0012177:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001217b:	e9 68 fc ff ff       	jmp    c0011de8 <scanMADT()+0x134>
c0012180:	90                   	nop
c0012181:	eb 05                	jmp    c0012188 <scanMADT()+0x4d4>
c0012183:	90                   	nop
c0012184:	90                   	nop
c0012185:	8d 76 00             	lea    esi,[esi+0x0]
c0012188:	83 c4 38             	add    esp,0x38
c001218b:	5b                   	pop    ebx
c001218c:	c3                   	ret    
c001218d:	90                   	nop
c001218e:	66 90                	xchg   ax,ax

c0012190 <ACPI::ACPI()>:
c0012190:	83 ec 0c             	sub    esp,0xc
c0012193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012197:	83 ec 08             	sub    esp,0x8
c001219a:	68 c7 54 02 c0       	push   0xc00254c7
c001219f:	50                   	push   eax
c00121a0:	e8 cd c2 ff ff       	call   c000e472 <Device::Device(char const*)>
c00121a5:	83 c4 10             	add    esp,0x10
c00121a8:	ba 88 56 02 c0       	mov    edx,0xc0025688
c00121ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121b1:	89 10                	mov    DWORD PTR [eax],edx
c00121b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121b7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00121be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121c2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00121cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121d0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00121da:	83 ec 0c             	sub    esp,0xc
c00121dd:	68 cc 54 02 c0       	push   0xc00254cc
c00121e2:	e8 82 78 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00121e7:	83 c4 10             	add    esp,0x10
c00121ea:	e8 c5 fa ff ff       	call   c0011cb4 <scanMADT()>
c00121ef:	90                   	nop
c00121f0:	83 c4 0c             	add    esp,0xc
c00121f3:	c3                   	ret    

c00121f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00121f4:	83 ec 2c             	sub    esp,0x2c
c00121f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00121fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121ff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0012203:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012207:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001220c:	88 d0                	mov    al,dl
c001220e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012212:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012217:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001221f:	90                   	nop
c0012220:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012224:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001222a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001222e:	0f 8d 9c 00 00 00    	jge    c00122d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0012234:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012238:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001223c:	83 c2 2a             	add    edx,0x2a
c001223f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0012243:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012248:	75 7a                	jne    c00122c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001224a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001224e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012252:	83 c2 2a             	add    edx,0x2a
c0012255:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012259:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001225d:	75 65                	jne    c00122c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001225f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012264:	74 3a                	je     c00122a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0012266:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001226a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001226e:	83 c2 2a             	add    edx,0x2a
c0012271:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012275:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012279:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001227c:	39 c2                	cmp    edx,eax
c001227e:	74 10                	je     c0012290 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012280:	83 ec 0c             	sub    esp,0xc
c0012283:	68 20 53 02 c0       	push   0xc0025320
c0012288:	e8 7a 27 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c001228d:	83 c4 10             	add    esp,0x10
c0012290:	83 ec 0c             	sub    esp,0xc
c0012293:	68 da 54 02 c0       	push   0xc00254da
c0012298:	e8 6a 27 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c001229d:	83 c4 10             	add    esp,0x10
c00122a0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00122a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122ac:	83 c2 2a             	add    edx,0x2a
c00122af:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00122b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00122b5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00122b8:	89 01                	mov    DWORD PTR [ecx],eax
c00122ba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00122bd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00122c2:	66 90                	xchg   ax,ax
c00122c4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122c8:	e9 53 ff ff ff       	jmp    c0012220 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00122cd:	8d 76 00             	lea    esi,[esi+0x0]
c00122d0:	90                   	nop
c00122d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122d5:	83 c4 2c             	add    esp,0x2c
c00122d8:	c2 04 00             	ret    0x4
c00122db:	90                   	nop

c00122dc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00122dc:	83 ec 1c             	sub    esp,0x1c
c00122df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00122e3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00122e7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00122eb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00122f0:	88 c8                	mov    al,cl
c00122f2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00122f6:	88 d0                	mov    al,dl
c00122f8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00122fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012300:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001230a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001230d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0012311:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0012315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012319:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001231f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012323:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0012326:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001232a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001232f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012333:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012339:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001233d:	8d 48 01             	lea    ecx,[eax+0x1]
c0012340:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012344:	83 c2 2a             	add    edx,0x2a
c0012347:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001234b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001234f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012355:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012359:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001235c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012360:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012364:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012368:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001236e:	8d 50 01             	lea    edx,[eax+0x1]
c0012371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012375:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001237b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001237f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012385:	3d 00 02 00 00       	cmp    eax,0x200
c001238a:	75 10                	jne    c001239c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001238c:	83 ec 0c             	sub    esp,0xc
c001238f:	68 e9 54 02 c0       	push   0xc00254e9
c0012394:	e8 6e 26 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c0012399:	83 c4 10             	add    esp,0x10
c001239c:	90                   	nop
c001239d:	83 c4 1c             	add    esp,0x1c
c00123a0:	c3                   	ret    
c00123a1:	90                   	nop
c00123a2:	66 90                	xchg   ax,ax

c00123a4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00123a4:	b8 00 00 00 00       	mov    eax,0x0
c00123a9:	c3                   	ret    
c00123aa:	66 90                	xchg   ax,ax

c00123ac <ACPI::detectPCI()>:
c00123ac:	53                   	push   ebx
c00123ad:	83 ec 68             	sub    esp,0x68
c00123b0:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00123b5:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00123ba:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c00123bf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00123c5:	83 e0 04             	and    eax,0x4
c00123c8:	84 c0                	test   al,al
c00123ca:	74 2c                	je     c00123f8 <ACPI::detectPCI()+0x4c>
c00123cc:	a1 c8 87 02 c0       	mov    eax,ds:0xc00287c8
c00123d1:	83 ec 08             	sub    esp,0x8
c00123d4:	68 06 55 02 c0       	push   0xc0025506
c00123d9:	50                   	push   eax
c00123da:	e8 5d f8 ff ff       	call   c0011c3c <findDataTable(unsigned char*, char*)>
c00123df:	83 c4 10             	add    esp,0x10
c00123e2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00123e6:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00123eb:	74 0b                	je     c00123f8 <ACPI::detectPCI()+0x4c>
c00123ed:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123f2:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00123f7:	90                   	nop
c00123f8:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0012400:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012404:	8a 00                	mov    al,BYTE PTR [eax]
c0012406:	3c 01                	cmp    al,0x1
c0012408:	75 0e                	jne    c0012418 <ACPI::detectPCI()+0x6c>
c001240a:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001240f:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012414:	eb 2a                	jmp    c0012440 <ACPI::detectPCI()+0x94>
c0012416:	66 90                	xchg   ax,ax
c0012418:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001241c:	8a 00                	mov    al,BYTE PTR [eax]
c001241e:	3c 02                	cmp    al,0x2
c0012420:	75 1e                	jne    c0012440 <ACPI::detectPCI()+0x94>
c0012422:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012427:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c001242c:	74 12                	je     c0012440 <ACPI::detectPCI()+0x94>
c001242e:	83 ec 0c             	sub    esp,0xc
c0012431:	68 50 53 02 c0       	push   0xc0025350
c0012436:	e8 cc 25 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c001243b:	83 c4 10             	add    esp,0x10
c001243e:	66 90                	xchg   ax,ax
c0012440:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012444:	83 f0 01             	xor    eax,0x1
c0012447:	84 c0                	test   al,al
c0012449:	74 41                	je     c001248c <ACPI::detectPCI()+0xe0>
c001244b:	e8 00 dd fe ff       	call   c0000150 <manualPCIProbe>
c0012450:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012454:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012459:	75 0d                	jne    c0012468 <ACPI::detectPCI()+0xbc>
c001245b:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012460:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012465:	eb 25                	jmp    c001248c <ACPI::detectPCI()+0xe0>
c0012467:	90                   	nop
c0012468:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c001246d:	75 1d                	jne    c001248c <ACPI::detectPCI()+0xe0>
c001246f:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012474:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012479:	74 11                	je     c001248c <ACPI::detectPCI()+0xe0>
c001247b:	83 ec 0c             	sub    esp,0xc
c001247e:	68 50 53 02 c0       	push   0xc0025350
c0012483:	e8 7f 25 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c0012488:	83 c4 10             	add    esp,0x10
c001248b:	90                   	nop
c001248c:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012491:	0f 84 49 03 00 00    	je     c00127e0 <ACPI::detectPCI()+0x434>
c0012497:	83 ec 0c             	sub    esp,0xc
c001249a:	68 0b 55 02 c0       	push   0xc002550b
c001249f:	e8 c5 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00124a4:	83 c4 10             	add    esp,0x10
c00124a7:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00124ac:	0f 84 8e 00 00 00    	je     c0012540 <ACPI::detectPCI()+0x194>
c00124b2:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c00124b7:	25 00 08 00 00       	and    eax,0x800
c00124bc:	0f 84 16 01 00 00    	je     c00125d8 <ACPI::detectPCI()+0x22c>
c00124c2:	83 ec 0c             	sub    esp,0xc
c00124c5:	68 78 53 02 c0       	push   0xc0025378
c00124ca:	e8 9a 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00124cf:	83 c4 10             	add    esp,0x10
c00124d2:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c00124d7:	25 80 00 00 00       	and    eax,0x80
c00124dc:	0f 85 f6 00 00 00    	jne    c00125d8 <ACPI::detectPCI()+0x22c>
c00124e2:	66 90                	xchg   ax,ax
c00124e4:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00124eb:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00124f0:	89 c2                	mov    edx,eax
c00124f2:	ec                   	in     al,dx
c00124f3:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00124f7:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00124fb:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00124ff:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0012504:	74 0a                	je     c0012510 <ACPI::detectPCI()+0x164>
c0012506:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c001250b:	74 03                	je     c0012510 <ACPI::detectPCI()+0x164>
c001250d:	eb d5                	jmp    c00124e4 <ACPI::detectPCI()+0x138>
c001250f:	90                   	nop
c0012510:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0012517:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c001251c:	89 c2                	mov    edx,eax
c001251e:	ec                   	in     al,dx
c001251f:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c0012523:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0012527:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c001252b:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0012530:	74 de                	je     c0012510 <ACPI::detectPCI()+0x164>
c0012532:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0012537:	0f 85 93 00 00 00    	jne    c00125d0 <ACPI::detectPCI()+0x224>
c001253d:	eb d1                	jmp    c0012510 <ACPI::detectPCI()+0x164>
c001253f:	90                   	nop
c0012540:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012544:	83 f0 01             	xor    eax,0x1
c0012547:	84 c0                	test   al,al
c0012549:	0f 84 89 00 00 00    	je     c00125d8 <ACPI::detectPCI()+0x22c>
c001254f:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c0012554:	25 00 08 00 00       	and    eax,0x800
c0012559:	74 7d                	je     c00125d8 <ACPI::detectPCI()+0x22c>
c001255b:	83 ec 0c             	sub    esp,0xc
c001255e:	68 9c 53 02 c0       	push   0xc002539c
c0012563:	e8 01 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012568:	83 c4 10             	add    esp,0x10
c001256b:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c0012570:	25 80 00 00 00       	and    eax,0x80
c0012575:	75 61                	jne    c00125d8 <ACPI::detectPCI()+0x22c>
c0012577:	90                   	nop
c0012578:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c001257f:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012584:	89 c2                	mov    edx,eax
c0012586:	ec                   	in     al,dx
c0012587:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001258b:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001258f:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0012593:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012598:	74 0a                	je     c00125a4 <ACPI::detectPCI()+0x1f8>
c001259a:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c001259f:	74 03                	je     c00125a4 <ACPI::detectPCI()+0x1f8>
c00125a1:	eb d5                	jmp    c0012578 <ACPI::detectPCI()+0x1cc>
c00125a3:	90                   	nop
c00125a4:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c00125ab:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00125b0:	89 c2                	mov    edx,eax
c00125b2:	ec                   	in     al,dx
c00125b3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00125b7:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00125bb:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c00125bf:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c00125c4:	74 de                	je     c00125a4 <ACPI::detectPCI()+0x1f8>
c00125c6:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c00125cb:	75 07                	jne    c00125d4 <ACPI::detectPCI()+0x228>
c00125cd:	eb d5                	jmp    c00125a4 <ACPI::detectPCI()+0x1f8>
c00125cf:	90                   	nop
c00125d0:	90                   	nop
c00125d1:	eb 05                	jmp    c00125d8 <ACPI::detectPCI()+0x22c>
c00125d3:	90                   	nop
c00125d4:	90                   	nop
c00125d5:	8d 76 00             	lea    esi,[esi+0x0]
c00125d8:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c00125e0:	83 ec 0c             	sub    esp,0xc
c00125e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00125e7:	e8 23 74 ff ff       	call   c0009a0f <malloc>
c00125ec:	83 c4 10             	add    esp,0x10
c00125ef:	89 c3                	mov    ebx,eax
c00125f1:	83 ec 0c             	sub    esp,0xc
c00125f4:	53                   	push   ebx
c00125f5:	e8 68 ad 00 00       	call   c001d362 <PCI::PCI()>
c00125fa:	83 c4 10             	add    esp,0x10
c00125fd:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012601:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c0012606:	25 00 08 00 00       	and    eax,0x800
c001260b:	74 7b                	je     c0012688 <ACPI::detectPCI()+0x2dc>
c001260d:	83 ec 0c             	sub    esp,0xc
c0012610:	68 23 55 02 c0       	push   0xc0025523
c0012615:	e8 4f 74 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001261a:	83 c4 10             	add    esp,0x10
c001261d:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c0012622:	25 80 00 00 00       	and    eax,0x80
c0012627:	75 5f                	jne    c0012688 <ACPI::detectPCI()+0x2dc>
c0012629:	8d 76 00             	lea    esi,[esi+0x0]
c001262c:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0012633:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012638:	89 c2                	mov    edx,eax
c001263a:	ec                   	in     al,dx
c001263b:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001263f:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012643:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012647:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c001264c:	74 0a                	je     c0012658 <ACPI::detectPCI()+0x2ac>
c001264e:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012653:	74 03                	je     c0012658 <ACPI::detectPCI()+0x2ac>
c0012655:	eb d5                	jmp    c001262c <ACPI::detectPCI()+0x280>
c0012657:	90                   	nop
c0012658:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c001265f:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012664:	89 c2                	mov    edx,eax
c0012666:	ec                   	in     al,dx
c0012667:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001266b:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c001266f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012673:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012678:	74 de                	je     c0012658 <ACPI::detectPCI()+0x2ac>
c001267a:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c001267f:	75 03                	jne    c0012684 <ACPI::detectPCI()+0x2d8>
c0012681:	eb d5                	jmp    c0012658 <ACPI::detectPCI()+0x2ac>
c0012683:	90                   	nop
c0012684:	90                   	nop
c0012685:	8d 76 00             	lea    esi,[esi+0x0]
c0012688:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001268c:	83 ec 08             	sub    esp,0x8
c001268f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012693:	50                   	push   eax
c0012694:	e8 d5 bb ff ff       	call   c000e26e <Device::addChild(Device*)>
c0012699:	83 c4 10             	add    esp,0x10
c001269c:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c00126a1:	25 00 08 00 00       	and    eax,0x800
c00126a6:	74 78                	je     c0012720 <ACPI::detectPCI()+0x374>
c00126a8:	83 ec 0c             	sub    esp,0xc
c00126ab:	68 29 55 02 c0       	push   0xc0025529
c00126b0:	e8 b4 73 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00126b5:	83 c4 10             	add    esp,0x10
c00126b8:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c00126bd:	25 80 00 00 00       	and    eax,0x80
c00126c2:	75 5c                	jne    c0012720 <ACPI::detectPCI()+0x374>
c00126c4:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c00126cb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00126d0:	89 c2                	mov    edx,eax
c00126d2:	ec                   	in     al,dx
c00126d3:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00126d7:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c00126db:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c00126df:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c00126e4:	74 0a                	je     c00126f0 <ACPI::detectPCI()+0x344>
c00126e6:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c00126eb:	74 03                	je     c00126f0 <ACPI::detectPCI()+0x344>
c00126ed:	eb d5                	jmp    c00126c4 <ACPI::detectPCI()+0x318>
c00126ef:	90                   	nop
c00126f0:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c00126f7:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00126fc:	89 c2                	mov    edx,eax
c00126fe:	ec                   	in     al,dx
c00126ff:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012703:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012707:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001270b:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012710:	74 de                	je     c00126f0 <ACPI::detectPCI()+0x344>
c0012712:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012717:	75 03                	jne    c001271c <ACPI::detectPCI()+0x370>
c0012719:	eb d5                	jmp    c00126f0 <ACPI::detectPCI()+0x344>
c001271b:	90                   	nop
c001271c:	90                   	nop
c001271d:	8d 76 00             	lea    esi,[esi+0x0]
c0012720:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012724:	8b 00                	mov    eax,DWORD PTR [eax]
c0012726:	83 c0 08             	add    eax,0x8
c0012729:	8b 00                	mov    eax,DWORD PTR [eax]
c001272b:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012730:	74 0a                	je     c001273c <ACPI::detectPCI()+0x390>
c0012732:	ba 01 00 00 00       	mov    edx,0x1
c0012737:	eb 0b                	jmp    c0012744 <ACPI::detectPCI()+0x398>
c0012739:	8d 76 00             	lea    esi,[esi+0x0]
c001273c:	ba 02 00 00 00       	mov    edx,0x2
c0012741:	8d 76 00             	lea    esi,[esi+0x0]
c0012744:	6a 00                	push   0x0
c0012746:	6a 00                	push   0x0
c0012748:	52                   	push   edx
c0012749:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001274d:	ff d0                	call   eax
c001274f:	83 c4 10             	add    esp,0x10
c0012752:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c0012757:	25 00 08 00 00       	and    eax,0x800
c001275c:	0f 84 26 01 00 00    	je     c0012888 <ACPI::detectPCI()+0x4dc>
c0012762:	83 ec 0c             	sub    esp,0xc
c0012765:	68 2f 55 02 c0       	push   0xc002552f
c001276a:	e8 fa 72 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001276f:	83 c4 10             	add    esp,0x10
c0012772:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c0012777:	25 80 00 00 00       	and    eax,0x80
c001277c:	0f 85 06 01 00 00    	jne    c0012888 <ACPI::detectPCI()+0x4dc>
c0012782:	66 90                	xchg   ax,ax
c0012784:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c001278b:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012790:	89 c2                	mov    edx,eax
c0012792:	ec                   	in     al,dx
c0012793:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012797:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001279b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001279f:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c00127a4:	74 0a                	je     c00127b0 <ACPI::detectPCI()+0x404>
c00127a6:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c00127ab:	74 03                	je     c00127b0 <ACPI::detectPCI()+0x404>
c00127ad:	eb d5                	jmp    c0012784 <ACPI::detectPCI()+0x3d8>
c00127af:	90                   	nop
c00127b0:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c00127b7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00127bc:	89 c2                	mov    edx,eax
c00127be:	ec                   	in     al,dx
c00127bf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00127c3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00127c7:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c00127cb:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c00127d0:	74 de                	je     c00127b0 <ACPI::detectPCI()+0x404>
c00127d2:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c00127d7:	0f 85 a7 00 00 00    	jne    c0012884 <ACPI::detectPCI()+0x4d8>
c00127dd:	eb d1                	jmp    c00127b0 <ACPI::detectPCI()+0x404>
c00127df:	90                   	nop
c00127e0:	83 ec 0c             	sub    esp,0xc
c00127e3:	68 35 55 02 c0       	push   0xc0025535
c00127e8:	e8 0e a5 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00127ed:	83 c4 10             	add    esp,0x10
c00127f0:	83 ec 0c             	sub    esp,0xc
c00127f3:	68 40 55 02 c0       	push   0xc0025540
c00127f8:	e8 6c 72 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00127fd:	83 c4 10             	add    esp,0x10
c0012800:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012808:	83 ec 0c             	sub    esp,0xc
c001280b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001280f:	e8 fb 71 ff ff       	call   c0009a0f <malloc>
c0012814:	83 c4 10             	add    esp,0x10
c0012817:	89 c3                	mov    ebx,eax
c0012819:	83 ec 0c             	sub    esp,0xc
c001281c:	53                   	push   ebx
c001281d:	e8 aa bc 00 00       	call   c001e4cc <IDE::IDE()>
c0012822:	83 c4 10             	add    esp,0x10
c0012825:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012829:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001282d:	83 ec 08             	sub    esp,0x8
c0012830:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012834:	50                   	push   eax
c0012835:	e8 34 ba ff ff       	call   c000e26e <Device::addChild(Device*)>
c001283a:	83 c4 10             	add    esp,0x10
c001283d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012841:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001284b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001284f:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012858:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001285c:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012865:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012869:	8b 00                	mov    eax,DWORD PTR [eax]
c001286b:	83 c0 08             	add    eax,0x8
c001286e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012870:	6a 00                	push   0x0
c0012872:	6a 00                	push   0x0
c0012874:	6a 00                	push   0x0
c0012876:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001287a:	ff d0                	call   eax
c001287c:	83 c4 10             	add    esp,0x10
c001287f:	eb 07                	jmp    c0012888 <ACPI::detectPCI()+0x4dc>
c0012881:	8d 76 00             	lea    esi,[esi+0x0]
c0012884:	90                   	nop
c0012885:	8d 76 00             	lea    esi,[esi+0x0]
c0012888:	90                   	nop
c0012889:	83 c4 68             	add    esp,0x68
c001288c:	5b                   	pop    ebx
c001288d:	c3                   	ret    
c001288e:	66 90                	xchg   ax,ax

c0012890 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012890:	83 ec 1c             	sub    esp,0x1c
c0012893:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012897:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001289a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001289e:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c00128a3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00128a8:	83 ec 08             	sub    esp,0x8
c00128ab:	52                   	push   edx
c00128ac:	50                   	push   eax
c00128ad:	e8 2c 67 ff ff       	call   c0008fde <Computer::readCMOS(unsigned char)>
c00128b2:	83 c4 10             	add    esp,0x10
c00128b5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00128b9:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c00128be:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00128c3:	83 ec 04             	sub    esp,0x4
c00128c6:	6a 01                	push   0x1
c00128c8:	52                   	push   edx
c00128c9:	50                   	push   eax
c00128ca:	e8 eb 68 ff ff       	call   c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>
c00128cf:	83 c4 10             	add    esp,0x10
c00128d2:	90                   	nop
c00128d3:	83 c4 1c             	add    esp,0x1c
c00128d6:	c3                   	ret    
c00128d7:	90                   	nop

c00128d8 <ACPI::sleep()>:
c00128d8:	83 ec 0c             	sub    esp,0xc
c00128db:	83 ec 0c             	sub    esp,0xc
c00128de:	68 55 55 02 c0       	push   0xc0025555
c00128e3:	e8 13 a4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00128e8:	83 c4 10             	add    esp,0x10
c00128eb:	a1 a0 85 02 c0       	mov    eax,ds:0xc00285a0
c00128f0:	85 c0                	test   eax,eax
c00128f2:	74 18                	je     c001290c <ACPI::sleep()+0x34>
c00128f4:	83 ec 0c             	sub    esp,0xc
c00128f7:	68 62 55 02 c0       	push   0xc0025562
c00128fc:	e8 fa a3 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0012901:	83 c4 10             	add    esp,0x10
c0012904:	a1 a0 85 02 c0       	mov    eax,ds:0xc00285a0
c0012909:	ff d0                	call   eax
c001290b:	90                   	nop
c001290c:	90                   	nop
c001290d:	83 c4 0c             	add    esp,0xc
c0012910:	c3                   	ret    
c0012911:	90                   	nop
c0012912:	66 90                	xchg   ax,ax

c0012914 <ACPI::open(int, int, void*)>:
c0012914:	57                   	push   edi
c0012915:	56                   	push   esi
c0012916:	53                   	push   ebx
c0012917:	81 ec 70 01 00 00    	sub    esp,0x170
c001291d:	83 ec 0c             	sub    esp,0xc
c0012920:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012927:	e8 80 fa ff ff       	call   c00123ac <ACPI::detectPCI()>
c001292c:	83 c4 10             	add    esp,0x10
c001292f:	83 ec 0c             	sub    esp,0xc
c0012932:	68 c0 53 02 c0       	push   0xc00253c0
c0012937:	e8 2d 71 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001293c:	83 c4 10             	add    esp,0x10
c001293f:	83 ec 0c             	sub    esp,0xc
c0012942:	68 7c 55 02 c0       	push   0xc002557c
c0012947:	e8 13 49 00 00       	call   c001725f <Thr::loadKernelSymbolTable(char const*)>
c001294c:	83 c4 10             	add    esp,0x10
c001294f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012957:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012962:	83 ec 0c             	sub    esp,0xc
c0012965:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001296c:	e8 9e 70 ff ff       	call   c0009a0f <malloc>
c0012971:	83 c4 10             	add    esp,0x10
c0012974:	89 c3                	mov    ebx,eax
c0012976:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c001297b:	83 ec 04             	sub    esp,0x4
c001297e:	50                   	push   eax
c001297f:	68 9a 55 02 c0       	push   0xc002559a
c0012984:	53                   	push   ebx
c0012985:	e8 dc a8 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001298a:	83 c4 10             	add    esp,0x10
c001298d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012994:	83 ec 08             	sub    esp,0x8
c0012997:	6a 01                	push   0x1
c0012999:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00129a0:	e8 9b a9 ff ff       	call   c000d340 <File::open(FileOpenMode)>
c00129a5:	83 c4 10             	add    esp,0x10
c00129a8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c00129af:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c00129b7:	75 17                	jne    c00129d0 <ACPI::open(int, int, void*)+0xbc>
c00129b9:	83 ec 0c             	sub    esp,0xc
c00129bc:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00129c3:	e8 d6 a9 ff ff       	call   c000d39e <File::close()>
c00129c8:	83 c4 10             	add    esp,0x10
c00129cb:	eb 0b                	jmp    c00129d8 <ACPI::open(int, int, void*)+0xc4>
c00129cd:	8d 76 00             	lea    esi,[esi+0x0]
c00129d0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c00129d8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c00129e0:	74 1e                	je     c0012a00 <ACPI::open(int, int, void*)+0xec>
c00129e2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00129e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00129eb:	83 c0 08             	add    eax,0x8
c00129ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00129f0:	83 ec 0c             	sub    esp,0xc
c00129f3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00129fa:	ff d0                	call   eax
c00129fc:	83 c4 10             	add    esp,0x10
c00129ff:	90                   	nop
c0012a00:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012a07:	83 f0 01             	xor    eax,0x1
c0012a0a:	84 c0                	test   al,al
c0012a0c:	74 42                	je     c0012a50 <ACPI::open(int, int, void*)+0x13c>
c0012a0e:	83 ec 0c             	sub    esp,0xc
c0012a11:	68 b8 55 02 c0       	push   0xc00255b8
c0012a16:	e8 4e 70 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012a1b:	83 c4 10             	add    esp,0x10
c0012a1e:	83 ec 04             	sub    esp,0x4
c0012a21:	6a 0c                	push   0xc
c0012a23:	68 d3 55 02 c0       	push   0xc00255d3
c0012a28:	68 e4 55 02 c0       	push   0xc00255e4
c0012a2d:	e8 97 2e 00 00       	call   c00158c9 <Reg::readIntWithDefault(char*, char*, int)>
c0012a32:	83 c4 10             	add    esp,0x10
c0012a35:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012a3c:	83 ec 0c             	sub    esp,0xc
c0012a3f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012a46:	e8 94 91 ff ff       	call   c000bbdf <Virt::setupPageSwapping(int)>
c0012a4b:	83 c4 10             	add    esp,0x10
c0012a4e:	66 90                	xchg   ax,ax
c0012a50:	83 ec 0c             	sub    esp,0xc
c0012a53:	68 26 3d 02 c0       	push   0xc0023d26
c0012a58:	e8 0c 70 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012a5d:	83 c4 10             	add    esp,0x10
c0012a60:	8b 1d 68 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f68
c0012a66:	83 ec 08             	sub    esp,0x8
c0012a69:	6a 01                	push   0x1
c0012a6b:	68 eb 55 02 c0       	push   0xc00255eb
c0012a70:	e8 61 52 00 00       	call   c0017cd6 <Thr::loadDLL(char const*, bool)>
c0012a75:	83 c4 10             	add    esp,0x10
c0012a78:	83 ec 08             	sub    esp,0x8
c0012a7b:	53                   	push   ebx
c0012a7c:	50                   	push   eax
c0012a7d:	e8 85 54 00 00       	call   c0017f07 <Thr::executeDLL(unsigned long, void*)>
c0012a82:	83 c4 10             	add    esp,0x10
c0012a85:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012a8c:	83 ec 08             	sub    esp,0x8
c0012a8f:	6a 12                	push   0x12
c0012a91:	50                   	push   eax
c0012a92:	e8 5b bb ff ff       	call   c000e5f2 <getDevicesOfType(DeviceType)>
c0012a97:	83 c4 0c             	add    esp,0xc
c0012a9a:	66 90                	xchg   ax,ax
c0012a9c:	83 ec 0c             	sub    esp,0xc
c0012a9f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012aa6:	50                   	push   eax
c0012aa7:	e8 74 04 01 00       	call   c0022f20 <LinkedList<Device>::isEmpty()>
c0012aac:	83 c4 10             	add    esp,0x10
c0012aaf:	83 f0 01             	xor    eax,0x1
c0012ab2:	84 c0                	test   al,al
c0012ab4:	0f 84 46 01 00 00    	je     c0012c00 <ACPI::open(int, int, void*)+0x2ec>
c0012aba:	83 ec 0c             	sub    esp,0xc
c0012abd:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012ac4:	50                   	push   eax
c0012ac5:	e8 72 04 01 00       	call   c0022f3c <LinkedList<Device>::getFirstElement()>
c0012aca:	83 c4 10             	add    esp,0x10
c0012acd:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012ad4:	83 ec 0c             	sub    esp,0xc
c0012ad7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012ade:	50                   	push   eax
c0012adf:	e8 60 04 01 00       	call   c0022f44 <LinkedList<Device>::removeFirst()>
c0012ae4:	83 c4 10             	add    esp,0x10
c0012ae7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012aee:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012af5:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012afc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012b00:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012b06:	ba 09 00 00 00       	mov    edx,0x9
c0012b0b:	fc                   	cld    
c0012b0c:	89 c7                	mov    edi,eax
c0012b0e:	89 de                	mov    esi,ebx
c0012b10:	89 d1                	mov    ecx,edx
c0012b12:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012b14:	83 ec 08             	sub    esp,0x8
c0012b17:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012b1b:	50                   	push   eax
c0012b1c:	83 ec 24             	sub    esp,0x24
c0012b1f:	89 e0                	mov    eax,esp
c0012b21:	89 c3                	mov    ebx,eax
c0012b23:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012b27:	ba 09 00 00 00       	mov    edx,0x9
c0012b2c:	89 df                	mov    edi,ebx
c0012b2e:	89 c6                	mov    esi,eax
c0012b30:	89 d1                	mov    ecx,edx
c0012b32:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012b34:	e8 07 ad 00 00       	call   c001d840 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012b39:	83 c4 30             	add    esp,0x30
c0012b3c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012b43:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012b4b:	0f 84 4b ff ff ff    	je     c0012a9c <ACPI::open(int, int, void*)+0x188>
c0012b51:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012b5c:	83 ec 0c             	sub    esp,0xc
c0012b5f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012b66:	e8 a4 6e ff ff       	call   c0009a0f <malloc>
c0012b6b:	83 c4 10             	add    esp,0x10
c0012b6e:	89 c3                	mov    ebx,eax
c0012b70:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c0012b75:	83 ec 04             	sub    esp,0x4
c0012b78:	50                   	push   eax
c0012b79:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012b80:	53                   	push   ebx
c0012b81:	e8 e0 a6 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0012b86:	83 c4 10             	add    esp,0x10
c0012b89:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012b90:	83 ec 0c             	sub    esp,0xc
c0012b93:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012b9a:	e8 0f aa ff ff       	call   c000d5ae <File::exists()>
c0012b9f:	83 c4 10             	add    esp,0x10
c0012ba2:	84 c0                	test   al,al
c0012ba4:	74 2a                	je     c0012bd0 <ACPI::open(int, int, void*)+0x2bc>
c0012ba6:	83 ec 08             	sub    esp,0x8
c0012ba9:	6a 01                	push   0x1
c0012bab:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012bb2:	e8 1f 51 00 00       	call   c0017cd6 <Thr::loadDLL(char const*, bool)>
c0012bb7:	83 c4 10             	add    esp,0x10
c0012bba:	83 ec 08             	sub    esp,0x8
c0012bbd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012bc4:	50                   	push   eax
c0012bc5:	e8 3d 53 00 00       	call   c0017f07 <Thr::executeDLL(unsigned long, void*)>
c0012bca:	83 c4 10             	add    esp,0x10
c0012bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0012bd0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012bd8:	0f 84 be fe ff ff    	je     c0012a9c <ACPI::open(int, int, void*)+0x188>
c0012bde:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012be5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012be7:	83 c0 08             	add    eax,0x8
c0012bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bec:	83 ec 0c             	sub    esp,0xc
c0012bef:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012bf6:	ff d0                	call   eax
c0012bf8:	83 c4 10             	add    esp,0x10
c0012bfb:	e9 9c fe ff ff       	jmp    c0012a9c <ACPI::open(int, int, void*)+0x188>
c0012c00:	83 ec 0c             	sub    esp,0xc
c0012c03:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012c0a:	50                   	push   eax
c0012c0b:	e8 0c 03 01 00       	call   c0022f1c <LinkedList<Device>::~LinkedList()>
c0012c10:	83 c4 10             	add    esp,0x10
c0012c13:	8b 1d 68 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f68
c0012c19:	83 ec 08             	sub    esp,0x8
c0012c1c:	6a 01                	push   0x1
c0012c1e:	68 06 56 02 c0       	push   0xc0025606
c0012c23:	e8 ae 50 00 00       	call   c0017cd6 <Thr::loadDLL(char const*, bool)>
c0012c28:	83 c4 10             	add    esp,0x10
c0012c2b:	83 ec 08             	sub    esp,0x8
c0012c2e:	53                   	push   ebx
c0012c2f:	50                   	push   eax
c0012c30:	e8 d2 52 00 00       	call   c0017f07 <Thr::executeDLL(unsigned long, void*)>
c0012c35:	83 c4 10             	add    esp,0x10
c0012c38:	8b 1d 68 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f68
c0012c3e:	83 ec 08             	sub    esp,0x8
c0012c41:	6a 01                	push   0x1
c0012c43:	68 23 56 02 c0       	push   0xc0025623
c0012c48:	e8 89 50 00 00       	call   c0017cd6 <Thr::loadDLL(char const*, bool)>
c0012c4d:	83 c4 10             	add    esp,0x10
c0012c50:	83 ec 08             	sub    esp,0x8
c0012c53:	53                   	push   ebx
c0012c54:	50                   	push   eax
c0012c55:	e8 ad 52 00 00       	call   c0017f07 <Thr::executeDLL(unsigned long, void*)>
c0012c5a:	83 c4 10             	add    esp,0x10
c0012c5d:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0012c62:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012c68:	83 e0 04             	and    eax,0x4
c0012c6b:	84 c0                	test   al,al
c0012c6d:	0f 84 15 01 00 00    	je     c0012d88 <ACPI::open(int, int, void*)+0x474>
c0012c73:	83 ec 0c             	sub    esp,0xc
c0012c76:	68 40 56 02 c0       	push   0xc0025640
c0012c7b:	e8 e9 6d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012c80:	83 c4 10             	add    esp,0x10
c0012c83:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012c8e:	83 ec 0c             	sub    esp,0xc
c0012c91:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012c98:	e8 72 6d ff ff       	call   c0009a0f <malloc>
c0012c9d:	83 c4 10             	add    esp,0x10
c0012ca0:	89 c3                	mov    ebx,eax
c0012ca2:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c0012ca7:	83 ec 04             	sub    esp,0x4
c0012caa:	50                   	push   eax
c0012cab:	68 5d 56 02 c0       	push   0xc002565d
c0012cb0:	53                   	push   ebx
c0012cb1:	e8 b0 a5 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0012cb6:	83 c4 10             	add    esp,0x10
c0012cb9:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012cc0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012cc8:	74 1a                	je     c0012ce4 <ACPI::open(int, int, void*)+0x3d0>
c0012cca:	83 ec 0c             	sub    esp,0xc
c0012ccd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012cd4:	e8 d5 a8 ff ff       	call   c000d5ae <File::exists()>
c0012cd9:	83 c4 10             	add    esp,0x10
c0012cdc:	84 c0                	test   al,al
c0012cde:	74 04                	je     c0012ce4 <ACPI::open(int, int, void*)+0x3d0>
c0012ce0:	b0 01                	mov    al,0x1
c0012ce2:	eb 04                	jmp    c0012ce8 <ACPI::open(int, int, void*)+0x3d4>
c0012ce4:	b0 00                	mov    al,0x0
c0012ce6:	66 90                	xchg   ax,ax
c0012ce8:	84 c0                	test   al,al
c0012cea:	74 28                	je     c0012d14 <ACPI::open(int, int, void*)+0x400>
c0012cec:	83 ec 08             	sub    esp,0x8
c0012cef:	6a 01                	push   0x1
c0012cf1:	68 5d 56 02 c0       	push   0xc002565d
c0012cf6:	e8 db 4f 00 00       	call   c0017cd6 <Thr::loadDLL(char const*, bool)>
c0012cfb:	83 c4 10             	add    esp,0x10
c0012cfe:	83 ec 08             	sub    esp,0x8
c0012d01:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012d08:	50                   	push   eax
c0012d09:	e8 f9 51 00 00       	call   c0017f07 <Thr::executeDLL(unsigned long, void*)>
c0012d0e:	83 c4 10             	add    esp,0x10
c0012d11:	8d 76 00             	lea    esi,[esi+0x0]
c0012d14:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012d1c:	74 2a                	je     c0012d48 <ACPI::open(int, int, void*)+0x434>
c0012d1e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012d26:	74 20                	je     c0012d48 <ACPI::open(int, int, void*)+0x434>
c0012d28:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012d2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d31:	83 c0 08             	add    eax,0x8
c0012d34:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d36:	83 ec 0c             	sub    esp,0xc
c0012d39:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012d40:	ff d0                	call   eax
c0012d42:	83 c4 10             	add    esp,0x10
c0012d45:	8d 76 00             	lea    esi,[esi+0x0]
c0012d48:	a1 c8 87 02 c0       	mov    eax,ds:0xc00287c8
c0012d4d:	83 ec 08             	sub    esp,0x8
c0012d50:	68 7a 56 02 c0       	push   0xc002567a
c0012d55:	50                   	push   eax
c0012d56:	e8 e1 ee ff ff       	call   c0011c3c <findDataTable(unsigned char*, char*)>
c0012d5b:	83 c4 10             	add    esp,0x10
c0012d5e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012d65:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012d6d:	74 19                	je     c0012d88 <ACPI::open(int, int, void*)+0x474>
c0012d6f:	83 ec 08             	sub    esp,0x8
c0012d72:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012d79:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012d80:	e8 0b fb ff ff       	call   c0012890 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012d85:	83 c4 10             	add    esp,0x10
c0012d88:	b8 00 00 00 00       	mov    eax,0x0
c0012d8d:	81 c4 70 01 00 00    	add    esp,0x170
c0012d93:	5b                   	pop    ebx
c0012d94:	5e                   	pop    esi
c0012d95:	5f                   	pop    edi
c0012d96:	c3                   	ret    
c0012d97:	90                   	nop

c0012d98 <CPU::close(int, int, void*)>:
c0012d98:	31 c0                	xor    eax,eax
c0012d9a:	c3                   	ret    
c0012d9b:	90                   	nop

c0012d9c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012d9c:	55                   	push   ebp
c0012d9d:	57                   	push   edi
c0012d9e:	56                   	push   esi
c0012d9f:	53                   	push   ebx
c0012da0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012da4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012da8:	89 ce                	mov    esi,ecx
c0012daa:	89 d5                	mov    ebp,edx
c0012dac:	80 f9 04             	cmp    cl,0x4
c0012daf:	75 28                	jne    c0012dd9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012db1:	8d 42 f9             	lea    eax,[edx-0x7]
c0012db4:	3c 03                	cmp    al,0x3
c0012db6:	0f 86 63 01 00 00    	jbe    c0012f1f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012dbc:	80 fa 03             	cmp    dl,0x3
c0012dbf:	0f 84 5a 01 00 00    	je     c0012f1f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012dc5:	8d 7a f2             	lea    edi,[edx-0xe]
c0012dc8:	b8 30 78 02 c0       	mov    eax,0xc0027830
c0012dcd:	89 fb                	mov    ebx,edi
c0012dcf:	80 fb 01             	cmp    bl,0x1
c0012dd2:	77 4e                	ja     c0012e22 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012dd4:	e9 52 01 00 00       	jmp    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dd9:	80 f9 05             	cmp    cl,0x5
c0012ddc:	75 4d                	jne    c0012e2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012dde:	b8 40 78 02 c0       	mov    eax,0xc0027840
c0012de3:	80 fa 03             	cmp    dl,0x3
c0012de6:	0f 86 3f 01 00 00    	jbe    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dec:	8d 7a fa             	lea    edi,[edx-0x6]
c0012def:	b8 50 78 02 c0       	mov    eax,0xc0027850
c0012df4:	89 fb                	mov    ebx,edi
c0012df6:	80 fb 01             	cmp    bl,0x1
c0012df9:	0f 86 2c 01 00 00    	jbe    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dff:	b8 60 78 02 c0       	mov    eax,0xc0027860
c0012e04:	80 fa 08             	cmp    dl,0x8
c0012e07:	0f 84 1e 01 00 00    	je     c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e0d:	89 d7                	mov    edi,edx
c0012e0f:	b8 70 78 02 c0       	mov    eax,0xc0027870
c0012e14:	83 e7 fb             	and    edi,0xfffffffb
c0012e17:	89 fb                	mov    ebx,edi
c0012e19:	80 fb 09             	cmp    bl,0x9
c0012e1c:	0f 84 09 01 00 00    	je     c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e22:	31 c0                	xor    eax,eax
c0012e24:	89 eb                	mov    ebx,ebp
c0012e26:	0f b6 fb             	movzx  edi,bl
c0012e29:	eb 30                	jmp    c0012e5b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012e2b:	31 c0                	xor    eax,eax
c0012e2d:	80 f9 06             	cmp    cl,0x6
c0012e30:	75 f2                	jne    c0012e24 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012e32:	80 fa 0a             	cmp    dl,0xa
c0012e35:	77 ed                	ja     c0012e24 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012e37:	bf de 05 00 00       	mov    edi,0x5de
c0012e3c:	0f a3 d7             	bt     edi,edx
c0012e3f:	73 e3                	jae    c0012e24 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012e41:	b8 80 78 02 c0       	mov    eax,0xc0027880
c0012e46:	e9 e0 00 00 00       	jmp    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e4b:	39 c7                	cmp    edi,eax
c0012e4d:	0f 84 d3 00 00 00    	je     c0012f26 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012e53:	40                   	inc    eax
c0012e54:	3d d0 00 00 00       	cmp    eax,0xd0
c0012e59:	74 09                	je     c0012e64 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012e5b:	89 f3                	mov    ebx,esi
c0012e5d:	80 fb 0f             	cmp    bl,0xf
c0012e60:	75 f1                	jne    c0012e53 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012e62:	eb e7                	jmp    c0012e4b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012e64:	80 f9 10             	cmp    cl,0x10
c0012e67:	75 14                	jne    c0012e7d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012e69:	8d 42 fc             	lea    eax,[edx-0x4]
c0012e6c:	83 e0 fb             	and    eax,0xfffffffb
c0012e6f:	3c 02                	cmp    al,0x2
c0012e71:	76 34                	jbe    c0012ea7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012e73:	b8 01 58 02 c0       	mov    eax,0xc0025801
c0012e78:	80 fa 02             	cmp    dl,0x2
c0012e7b:	eb 24                	jmp    c0012ea1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012e7d:	80 f9 11             	cmp    cl,0x11
c0012e80:	75 13                	jne    c0012e95 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012e82:	b8 01 58 02 c0       	mov    eax,0xc0025801
c0012e87:	80 fa 03             	cmp    dl,0x3
c0012e8a:	0f 85 9b 00 00 00    	jne    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e90:	e9 91 00 00 00       	jmp    c0012f26 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012e95:	80 f9 12             	cmp    cl,0x12
c0012e98:	75 14                	jne    c0012eae <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012e9a:	b8 01 58 02 c0       	mov    eax,0xc0025801
c0012e9f:	fe ca                	dec    dl
c0012ea1:	0f 85 84 00 00 00    	jne    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ea7:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0012eac:	eb 7d                	jmp    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eae:	80 f9 14             	cmp    cl,0x14
c0012eb1:	75 12                	jne    c0012ec5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012eb3:	4a                   	dec    edx
c0012eb4:	b8 01 58 02 c0       	mov    eax,0xc0025801
c0012eb9:	80 fa 01             	cmp    dl,0x1
c0012ebc:	77 6d                	ja     c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ebe:	b8 b0 78 02 c0       	mov    eax,0xc00278b0
c0012ec3:	eb 66                	jmp    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ec5:	80 f9 15             	cmp    cl,0x15
c0012ec8:	75 31                	jne    c0012efb <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012eca:	b8 c0 78 02 c0       	mov    eax,0xc00278c0
c0012ecf:	80 fa 01             	cmp    dl,0x1
c0012ed2:	74 57                	je     c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ed4:	b8 01 58 02 c0       	mov    eax,0xc0025801
c0012ed9:	80 fa 13             	cmp    dl,0x13
c0012edc:	76 0c                	jbe    c0012eea <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012ede:	80 fa 30             	cmp    dl,0x30
c0012ee1:	75 48                	jne    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ee3:	b8 e0 78 02 c0       	mov    eax,0xc00278e0
c0012ee8:	eb 41                	jmp    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eea:	b9 04 00 09 00       	mov    ecx,0x90004
c0012eef:	0f a3 d1             	bt     ecx,edx
c0012ef2:	73 37                	jae    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ef4:	b8 d0 78 02 c0       	mov    eax,0xc00278d0
c0012ef9:	eb 30                	jmp    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012efb:	b8 01 58 02 c0       	mov    eax,0xc0025801
c0012f00:	80 f9 16             	cmp    cl,0x16
c0012f03:	75 26                	jne    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f05:	b8 f0 78 02 c0       	mov    eax,0xc00278f0
c0012f0a:	84 d2                	test   dl,dl
c0012f0c:	74 1d                	je     c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f0e:	b8 01 58 02 c0       	mov    eax,0xc0025801
c0012f13:	80 fa 30             	cmp    dl,0x30
c0012f16:	75 13                	jne    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f18:	b8 00 79 02 c0       	mov    eax,0xc0027900
c0012f1d:	eb 0c                	jmp    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f1f:	b8 20 78 02 c0       	mov    eax,0xc0027820
c0012f24:	eb 05                	jmp    c0012f2b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f26:	b8 90 78 02 c0       	mov    eax,0xc0027890
c0012f2b:	5b                   	pop    ebx
c0012f2c:	5e                   	pop    esi
c0012f2d:	5f                   	pop    edi
c0012f2e:	5d                   	pop    ebp
c0012f2f:	c3                   	ret    

c0012f30 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012f30:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f38:	80 f9 04             	cmp    cl,0x4
c0012f3b:	75 6b                	jne    c0012fa8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012f3d:	b8 80 76 02 c0       	mov    eax,0xc0027680
c0012f42:	80 fa 01             	cmp    dl,0x1
c0012f45:	0f 86 92 02 00 00    	jbe    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f4b:	b8 90 76 02 c0       	mov    eax,0xc0027690
c0012f50:	80 fa 02             	cmp    dl,0x2
c0012f53:	0f 84 84 02 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f59:	b8 a0 76 02 c0       	mov    eax,0xc00276a0
c0012f5e:	80 fa 03             	cmp    dl,0x3
c0012f61:	0f 84 76 02 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f67:	b8 b0 76 02 c0       	mov    eax,0xc00276b0
c0012f6c:	80 fa 04             	cmp    dl,0x4
c0012f6f:	0f 84 68 02 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f75:	b8 c0 76 02 c0       	mov    eax,0xc00276c0
c0012f7a:	80 fa 05             	cmp    dl,0x5
c0012f7d:	0f 84 5a 02 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f83:	b8 a0 76 02 c0       	mov    eax,0xc00276a0
c0012f88:	80 fa 07             	cmp    dl,0x7
c0012f8b:	0f 84 4c 02 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f91:	83 ea 08             	sub    edx,0x8
c0012f94:	b8 01 58 02 c0       	mov    eax,0xc0025801
c0012f99:	80 fa 01             	cmp    dl,0x1
c0012f9c:	0f 87 3b 02 00 00    	ja     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fa2:	b8 d0 76 02 c0       	mov    eax,0xc00276d0
c0012fa7:	c3                   	ret    
c0012fa8:	80 f9 05             	cmp    cl,0x5
c0012fab:	75 45                	jne    c0012ff2 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012fad:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012fb0:	b8 e0 76 02 c0       	mov    eax,0xc00276e0
c0012fb5:	80 f9 02             	cmp    cl,0x2
c0012fb8:	0f 86 1f 02 00 00    	jbe    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fbe:	80 fa 04             	cmp    dl,0x4
c0012fc1:	0f 84 f3 01 00 00    	je     c00131ba <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012fc7:	80 fa 07             	cmp    dl,0x7
c0012fca:	0f 84 0d 02 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fd0:	b8 f0 76 02 c0       	mov    eax,0xc00276f0
c0012fd5:	80 fa 08             	cmp    dl,0x8
c0012fd8:	0f 84 ff 01 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fde:	b8 01 58 02 c0       	mov    eax,0xc0025801
c0012fe3:	80 fa 09             	cmp    dl,0x9
c0012fe6:	0f 85 f1 01 00 00    	jne    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fec:	b8 00 77 02 c0       	mov    eax,0xc0027700
c0012ff1:	c3                   	ret    
c0012ff2:	80 f9 06             	cmp    cl,0x6
c0012ff5:	0f 85 85 01 00 00    	jne    c0013180 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012ffb:	b8 10 77 02 c0       	mov    eax,0xc0027710
c0013000:	80 fa 01             	cmp    dl,0x1
c0013003:	0f 84 d4 01 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013009:	8d 42 fb             	lea    eax,[edx-0x5]
c001300c:	3c 01                	cmp    al,0x1
c001300e:	0f 86 ac 01 00 00    	jbe    c00131c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013014:	80 fa 03             	cmp    dl,0x3
c0013017:	0f 84 a3 01 00 00    	je     c00131c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001301d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013020:	b8 30 77 02 c0       	mov    eax,0xc0027730
c0013025:	80 f9 01             	cmp    cl,0x1
c0013028:	0f 86 af 01 00 00    	jbe    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001302e:	80 fa 09             	cmp    dl,0x9
c0013031:	0f 84 8f 01 00 00    	je     c00131c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0013037:	8d 4a f6             	lea    ecx,[edx-0xa]
c001303a:	80 f9 01             	cmp    cl,0x1
c001303d:	0f 86 9a 01 00 00    	jbe    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013043:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0013048:	80 fa 0d             	cmp    dl,0xd
c001304b:	0f 84 8c 01 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013051:	b8 50 77 02 c0       	mov    eax,0xc0027750
c0013056:	80 fa 0e             	cmp    dl,0xe
c0013059:	0f 84 7e 01 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001305f:	b8 60 77 02 c0       	mov    eax,0xc0027760
c0013064:	80 fa 0f             	cmp    dl,0xf
c0013067:	0f 84 70 01 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001306d:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0013072:	80 fa 15             	cmp    dl,0x15
c0013075:	0f 84 62 01 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001307b:	8d 4a ea             	lea    ecx,[edx-0x16]
c001307e:	b8 60 77 02 c0       	mov    eax,0xc0027760
c0013083:	80 f9 01             	cmp    cl,0x1
c0013086:	0f 86 51 01 00 00    	jbe    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001308c:	80 fa 1a             	cmp    dl,0x1a
c001308f:	0f 84 37 01 00 00    	je     c00131cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0013095:	80 fa 1c             	cmp    dl,0x1c
c0013098:	0f 84 34 01 00 00    	je     c00131d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001309e:	80 fa 1d             	cmp    dl,0x1d
c00130a1:	0f 84 36 01 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130a7:	b8 90 77 02 c0       	mov    eax,0xc0027790
c00130ac:	80 fa 25             	cmp    dl,0x25
c00130af:	0f 84 28 01 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130b5:	8d 4a da             	lea    ecx,[edx-0x26]
c00130b8:	b8 80 77 02 c0       	mov    eax,0xc0027780
c00130bd:	80 f9 01             	cmp    cl,0x1
c00130c0:	0f 86 17 01 00 00    	jbe    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130c6:	b8 a0 77 02 c0       	mov    eax,0xc00277a0
c00130cb:	80 fa 2a             	cmp    dl,0x2a
c00130ce:	0f 84 09 01 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130d4:	b8 90 77 02 c0       	mov    eax,0xc0027790
c00130d9:	80 fa 2c             	cmp    dl,0x2c
c00130dc:	0f 84 fb 00 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130e2:	b8 a0 77 02 c0       	mov    eax,0xc00277a0
c00130e7:	80 fa 2d             	cmp    dl,0x2d
c00130ea:	0f 84 ed 00 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130f0:	b8 70 77 02 c0       	mov    eax,0xc0027770
c00130f5:	80 fa 2e             	cmp    dl,0x2e
c00130f8:	0f 84 df 00 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130fe:	b8 90 77 02 c0       	mov    eax,0xc0027790
c0013103:	80 fa 2f             	cmp    dl,0x2f
c0013106:	0f 84 d1 00 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001310c:	8d 4a cb             	lea    ecx,[edx-0x35]
c001310f:	b8 80 77 02 c0       	mov    eax,0xc0027780
c0013114:	80 f9 01             	cmp    cl,0x1
c0013117:	0f 86 c0 00 00 00    	jbe    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001311d:	b8 b0 77 02 c0       	mov    eax,0xc00277b0
c0013122:	80 fa 37             	cmp    dl,0x37
c0013125:	0f 84 b2 00 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001312b:	b8 c0 77 02 c0       	mov    eax,0xc00277c0
c0013130:	80 fa 3a             	cmp    dl,0x3a
c0013133:	0f 84 a4 00 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013139:	b8 d0 77 02 c0       	mov    eax,0xc00277d0
c001313e:	80 fa 3c             	cmp    dl,0x3c
c0013141:	0f 84 96 00 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013147:	b8 e0 77 02 c0       	mov    eax,0xc00277e0
c001314c:	80 fa 3d             	cmp    dl,0x3d
c001314f:	0f 84 88 00 00 00    	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013155:	b8 c0 77 02 c0       	mov    eax,0xc00277c0
c001315a:	80 fa 3e             	cmp    dl,0x3e
c001315d:	74 7e                	je     c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001315f:	8d 42 bb             	lea    eax,[edx-0x45]
c0013162:	3c 01                	cmp    al,0x1
c0013164:	76 72                	jbe    c00131d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013166:	80 fa 3f             	cmp    dl,0x3f
c0013169:	74 6d                	je     c00131d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001316b:	80 fa 4a             	cmp    dl,0x4a
c001316e:	74 0a                	je     c001317a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0013170:	b8 01 58 02 c0       	mov    eax,0xc0025801
c0013175:	80 fa 4d             	cmp    dl,0x4d
c0013178:	75 63                	jne    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001317a:	b8 b0 77 02 c0       	mov    eax,0xc00277b0
c001317f:	c3                   	ret    
c0013180:	b8 01 58 02 c0       	mov    eax,0xc0025801
c0013185:	80 f9 0b             	cmp    cl,0xb
c0013188:	75 0a                	jne    c0013194 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001318a:	fe ca                	dec    dl
c001318c:	75 4f                	jne    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001318e:	b8 f0 77 02 c0       	mov    eax,0xc00277f0
c0013193:	c3                   	ret    
c0013194:	80 f9 0f             	cmp    cl,0xf
c0013197:	75 44                	jne    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013199:	b8 00 78 02 c0       	mov    eax,0xc0027800
c001319e:	80 fa 02             	cmp    dl,0x2
c00131a1:	76 3a                	jbe    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131a3:	8d 42 fd             	lea    eax,[edx-0x3]
c00131a6:	3c 01                	cmp    al,0x1
c00131a8:	76 0a                	jbe    c00131b4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00131aa:	b8 01 58 02 c0       	mov    eax,0xc0025801
c00131af:	80 fa 06             	cmp    dl,0x6
c00131b2:	75 29                	jne    c00131dd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131b4:	b8 10 78 02 c0       	mov    eax,0xc0027810
c00131b9:	c3                   	ret    
c00131ba:	b8 f0 76 02 c0       	mov    eax,0xc00276f0
c00131bf:	c3                   	ret    
c00131c0:	b8 20 77 02 c0       	mov    eax,0xc0027720
c00131c5:	c3                   	ret    
c00131c6:	b8 40 77 02 c0       	mov    eax,0xc0027740
c00131cb:	c3                   	ret    
c00131cc:	b8 70 77 02 c0       	mov    eax,0xc0027770
c00131d1:	c3                   	ret    
c00131d2:	b8 80 77 02 c0       	mov    eax,0xc0027780
c00131d7:	c3                   	ret    
c00131d8:	b8 d0 77 02 c0       	mov    eax,0xc00277d0
c00131dd:	c3                   	ret    

c00131de <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00131de:	60                   	pusha  
c00131df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00131e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00131eb:	9c                   	pushf  
c00131ec:	fa                   	cli    
c00131ed:	0f 09                	wbinvd 
c00131ef:	0f 30                	wrmsr  
c00131f1:	9d                   	popf   
c00131f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131f6:	89 02                	mov    DWORD PTR [edx],eax
c00131f8:	61                   	popa   
c00131f9:	c3                   	ret    

c00131fa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00131fa:	60                   	pusha  
c00131fb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131ff:	9c                   	pushf  
c0013200:	fa                   	cli    
c0013201:	0f 09                	wbinvd 
c0013203:	31 c0                	xor    eax,eax
c0013205:	31 d2                	xor    edx,edx
c0013207:	0f 32                	rdmsr  
c0013209:	9d                   	popf   
c001320a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001320e:	89 02                	mov    DWORD PTR [edx],eax
c0013210:	61                   	popa   
c0013211:	c3                   	ret    

c0013212 <CPU::AMD_K6_writeback(int, int, int)>:
c0013212:	56                   	push   esi
c0013213:	53                   	push   ebx
c0013214:	83 ec 10             	sub    esp,0x10
c0013217:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001321b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013220:	75 5d                	jne    c001327f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013222:	83 f8 08             	cmp    eax,0x8
c0013225:	75 09                	jne    c0013230 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0013227:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001322c:	7e 13                	jle    c0013241 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001322e:	eb 30                	jmp    c0013260 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013230:	83 f8 06             	cmp    eax,0x6
c0013233:	7c 4a                	jl     c001327f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013235:	83 f8 07             	cmp    eax,0x7
c0013238:	7e 07                	jle    c0013241 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001323a:	83 f8 09             	cmp    eax,0x9
c001323d:	74 21                	je     c0013260 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001323f:	eb 3e                	jmp    c001327f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013241:	89 e6                	mov    esi,esp
c0013243:	8b 1d 8c 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f8c
c0013249:	56                   	push   esi
c001324a:	c1 eb 15             	shr    ebx,0x15
c001324d:	68 82 00 00 c0       	push   0xc0000082
c0013252:	83 e3 7e             	and    ebx,0x7e
c0013255:	e8 a0 ff ff ff       	call   c00131fa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001325a:	56                   	push   esi
c001325b:	6a 00                	push   0x0
c001325d:	53                   	push   ebx
c001325e:	eb 12                	jmp    c0013272 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013260:	89 e3                	mov    ebx,esp
c0013262:	53                   	push   ebx
c0013263:	68 82 00 00 c0       	push   0xc0000082
c0013268:	e8 8d ff ff ff       	call   c00131fa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001326d:	53                   	push   ebx
c001326e:	6a 00                	push   0x0
c0013270:	6a 00                	push   0x0
c0013272:	68 82 00 00 c0       	push   0xc0000082
c0013277:	e8 62 ff ff ff       	call   c00131de <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001327c:	83 c4 18             	add    esp,0x18
c001327f:	83 c4 10             	add    esp,0x10
c0013282:	5b                   	pop    ebx
c0013283:	5e                   	pop    esi
c0013284:	c3                   	ret    
c0013285:	90                   	nop

c0013286 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013286:	55                   	push   ebp
c0013287:	57                   	push   edi
c0013288:	56                   	push   esi
c0013289:	53                   	push   ebx
c001328a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001328e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013292:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013296:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001329a:	39 05 20 79 02 c0    	cmp    DWORD PTR ds:0xc0027920,eax
c00132a0:	75 23                	jne    c00132c5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00132a2:	a1 2c 8a 02 c0       	mov    eax,ds:0xc0028a2c
c00132a7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00132ab:	89 06                	mov    DWORD PTR [esi],eax
c00132ad:	a1 28 8a 02 c0       	mov    eax,ds:0xc0028a28
c00132b2:	89 07                	mov    DWORD PTR [edi],eax
c00132b4:	a1 24 8a 02 c0       	mov    eax,ds:0xc0028a24
c00132b9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00132bc:	a1 20 8a 02 c0       	mov    eax,ds:0xc0028a20
c00132c1:	89 02                	mov    DWORD PTR [edx],eax
c00132c3:	eb 3f                	jmp    c0013304 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00132c5:	31 c9                	xor    ecx,ecx
c00132c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132cb:	0f a2                	cpuid  
c00132cd:	89 06                	mov    DWORD PTR [esi],eax
c00132cf:	89 1f                	mov    DWORD PTR [edi],ebx
c00132d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00132d5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00132d8:	89 10                	mov    DWORD PTR [eax],edx
c00132da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132de:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c00132e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00132e5:	a3 2c 8a 02 c0       	mov    ds:0xc0028a2c,eax
c00132ea:	8b 07                	mov    eax,DWORD PTR [edi]
c00132ec:	a3 28 8a 02 c0       	mov    ds:0xc0028a28,eax
c00132f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00132f4:	a3 24 8a 02 c0       	mov    ds:0xc0028a24,eax
c00132f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00132fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00132ff:	a3 20 8a 02 c0       	mov    ds:0xc0028a20,eax
c0013304:	5b                   	pop    ebx
c0013305:	5e                   	pop    esi
c0013306:	5f                   	pop    edi
c0013307:	5d                   	pop    ebp
c0013308:	c3                   	ret    
c0013309:	90                   	nop

c001330a <CPU::cpuidCheckEDX(unsigned int)>:
c001330a:	83 ec 10             	sub    esp,0x10
c001330d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013311:	50                   	push   eax
c0013312:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013316:	50                   	push   eax
c0013317:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001331b:	50                   	push   eax
c001331c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013320:	50                   	push   eax
c0013321:	6a 01                	push   0x1
c0013323:	e8 5e ff ff ff       	call   c0013286 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013328:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001332c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013330:	0f 95 c0             	setne  al
c0013333:	83 c4 24             	add    esp,0x24
c0013336:	c3                   	ret    
c0013337:	90                   	nop

c0013338 <CPU::cpuidCheckECX(unsigned int)>:
c0013338:	83 ec 10             	sub    esp,0x10
c001333b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001333f:	50                   	push   eax
c0013340:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013344:	50                   	push   eax
c0013345:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013349:	50                   	push   eax
c001334a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001334e:	50                   	push   eax
c001334f:	6a 01                	push   0x1
c0013351:	e8 30 ff ff ff       	call   c0013286 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013356:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001335a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001335e:	0f 95 c0             	setne  al
c0013361:	83 c4 24             	add    esp,0x24
c0013364:	c3                   	ret    
c0013365:	90                   	nop

c0013366 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0013366:	83 ec 10             	sub    esp,0x10
c0013369:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001336d:	50                   	push   eax
c001336e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013372:	50                   	push   eax
c0013373:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013377:	50                   	push   eax
c0013378:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001337c:	50                   	push   eax
c001337d:	6a 07                	push   0x7
c001337f:	e8 02 ff ff ff       	call   c0013286 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013384:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013388:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001338c:	0f 95 c0             	setne  al
c001338f:	83 c4 24             	add    esp,0x24
c0013392:	c3                   	ret    
c0013393:	90                   	nop

c0013394 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0013394:	83 ec 10             	sub    esp,0x10
c0013397:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001339b:	50                   	push   eax
c001339c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133a0:	50                   	push   eax
c00133a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133a5:	50                   	push   eax
c00133a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133aa:	50                   	push   eax
c00133ab:	6a 07                	push   0x7
c00133ad:	e8 d4 fe ff ff       	call   c0013286 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00133b6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00133ba:	0f 95 c0             	setne  al
c00133bd:	83 c4 24             	add    esp,0x24
c00133c0:	c3                   	ret    
c00133c1:	90                   	nop

c00133c2 <CPU::CPU()>:
c00133c2:	83 ec 0c             	sub    esp,0xc
c00133c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c9:	83 ec 08             	sub    esp,0x8
c00133cc:	68 01 58 02 c0       	push   0xc0025801
c00133d1:	50                   	push   eax
c00133d2:	e8 9b b0 ff ff       	call   c000e472 <Device::Device(char const*)>
c00133d7:	83 c4 10             	add    esp,0x10
c00133da:	ba 64 5a 02 c0       	mov    edx,0xc0025a64
c00133df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e3:	89 10                	mov    DWORD PTR [eax],edx
c00133e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00133f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f7:	05 78 01 00 00       	add    eax,0x178
c00133fc:	83 ec 0c             	sub    esp,0xc
c00133ff:	50                   	push   eax
c0013400:	e8 9f 5e ff ff       	call   c00092a4 <GDT::GDT()>
c0013405:	83 c4 10             	add    esp,0x10
c0013408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340c:	05 7c 09 00 00       	add    eax,0x97c
c0013411:	83 ec 0c             	sub    esp,0xc
c0013414:	50                   	push   eax
c0013415:	e8 e2 60 ff ff       	call   c00094fc <IDT::IDT()>
c001341a:	83 c4 10             	add    esp,0x10
c001341d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013421:	05 7c 11 00 00       	add    eax,0x117c
c0013426:	83 ec 0c             	sub    esp,0xc
c0013429:	50                   	push   eax
c001342a:	e8 e9 7e ff ff       	call   c000b318 <TSS::TSS()>
c001342f:	83 c4 10             	add    esp,0x10
c0013432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013436:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001343d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013441:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001344b:	90                   	nop
c001344c:	83 c4 0c             	add    esp,0xc
c001344f:	c3                   	ret    

c0013450 <CPU::displayFeatures()>:
c0013450:	c3                   	ret    
c0013451:	90                   	nop

c0013452 <CPU::detectFeatures()>:
c0013452:	55                   	push   ebp
c0013453:	57                   	push   edi
c0013454:	56                   	push   esi
c0013455:	53                   	push   ebx
c0013456:	83 ec 50             	sub    esp,0x50
c0013459:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001345d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013467:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001346e:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013474:	6a 0d                	push   0xd
c0013476:	6a 00                	push   0x0
c0013478:	55                   	push   ebp
c0013479:	e8 06 d2 fe ff       	call   c0000684 <memset>
c001347e:	83 c4 10             	add    esp,0x10
c0013481:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0013486:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001348d:	0f 84 22 09 00 00    	je     c0013db5 <CPU::detectFeatures()+0x963>
c0013493:	83 ec 0c             	sub    esp,0xc
c0013496:	89 ef                	mov    edi,ebp
c0013498:	6a 10                	push   0x10
c001349a:	e8 6b fe ff ff       	call   c001330a <CPU::cpuidCheckEDX(unsigned int)>
c001349f:	83 e0 01             	and    eax,0x1
c00134a2:	8d 14 00             	lea    edx,[eax+eax*1]
c00134a5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134ab:	83 e0 fd             	and    eax,0xfffffffd
c00134ae:	09 d0                	or     eax,edx
c00134b0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00134b6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00134bd:	e8 48 fe ff ff       	call   c001330a <CPU::cpuidCheckEDX(unsigned int)>
c00134c2:	83 e0 01             	and    eax,0x1
c00134c5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00134cc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134d2:	83 e0 fb             	and    eax,0xfffffffb
c00134d5:	09 d0                	or     eax,edx
c00134d7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00134dd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00134e4:	e8 21 fe ff ff       	call   c001330a <CPU::cpuidCheckEDX(unsigned int)>
c00134e9:	83 e0 01             	and    eax,0x1
c00134ec:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00134f3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134f9:	83 e0 f7             	and    eax,0xfffffff7
c00134fc:	09 d0                	or     eax,edx
c00134fe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013504:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001350b:	e8 fa fd ff ff       	call   c001330a <CPU::cpuidCheckEDX(unsigned int)>
c0013510:	83 e0 01             	and    eax,0x1
c0013513:	c1 e0 04             	shl    eax,0x4
c0013516:	88 c2                	mov    dl,al
c0013518:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001351e:	83 e0 ef             	and    eax,0xffffffef
c0013521:	09 d0                	or     eax,edx
c0013523:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013529:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013530:	e8 d5 fd ff ff       	call   c001330a <CPU::cpuidCheckEDX(unsigned int)>
c0013535:	83 e0 01             	and    eax,0x1
c0013538:	c1 e0 05             	shl    eax,0x5
c001353b:	88 c2                	mov    dl,al
c001353d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013543:	83 e0 df             	and    eax,0xffffffdf
c0013546:	09 d0                	or     eax,edx
c0013548:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001354e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013555:	e8 b0 fd ff ff       	call   c001330a <CPU::cpuidCheckEDX(unsigned int)>
c001355a:	83 e0 01             	and    eax,0x1
c001355d:	8d 14 00             	lea    edx,[eax+eax*1]
c0013560:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013566:	83 e0 fd             	and    eax,0xfffffffd
c0013569:	09 d0                	or     eax,edx
c001356b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013571:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013578:	e8 8d fd ff ff       	call   c001330a <CPU::cpuidCheckEDX(unsigned int)>
c001357d:	83 e0 01             	and    eax,0x1
c0013580:	c1 e0 06             	shl    eax,0x6
c0013583:	88 c2                	mov    dl,al
c0013585:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001358b:	83 e0 bf             	and    eax,0xffffffbf
c001358e:	09 d0                	or     eax,edx
c0013590:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013596:	58                   	pop    eax
c0013597:	8d 44 24 28          	lea    eax,[esp+0x28]
c001359b:	50                   	push   eax
c001359c:	8d 44 24 28          	lea    eax,[esp+0x28]
c00135a0:	50                   	push   eax
c00135a1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00135a5:	56                   	push   esi
c00135a6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00135aa:	50                   	push   eax
c00135ab:	6a 00                	push   0x0
c00135ad:	e8 d4 fc ff ff       	call   c0013286 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00135b2:	b8 04 00 00 00       	mov    eax,0x4
c00135b7:	89 c1                	mov    ecx,eax
c00135b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00135bb:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00135c1:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00135c5:	89 c1                	mov    ecx,eax
c00135c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00135c9:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00135cf:	8d 74 24 38          	lea    esi,[esp+0x38]
c00135d3:	89 c1                	mov    ecx,eax
c00135d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00135d7:	83 c4 18             	add    esp,0x18
c00135da:	68 ac 56 02 c0       	push   0xc00256ac
c00135df:	55                   	push   ebp
c00135e0:	e8 e7 d1 fe ff       	call   c00007cc <strcmp>
c00135e5:	83 c4 10             	add    esp,0x10
c00135e8:	85 c0                	test   eax,eax
c00135ea:	75 0f                	jne    c00135fb <CPU::detectFeatures()+0x1a9>
c00135ec:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00135f6:	e9 22 02 00 00       	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c00135fb:	50                   	push   eax
c00135fc:	50                   	push   eax
c00135fd:	68 b9 56 02 c0       	push   0xc00256b9
c0013602:	55                   	push   ebp
c0013603:	e8 c4 d1 fe ff       	call   c00007cc <strcmp>
c0013608:	83 c4 10             	add    esp,0x10
c001360b:	85 c0                	test   eax,eax
c001360d:	74 dd                	je     c00135ec <CPU::detectFeatures()+0x19a>
c001360f:	50                   	push   eax
c0013610:	50                   	push   eax
c0013611:	68 c6 56 02 c0       	push   0xc00256c6
c0013616:	55                   	push   ebp
c0013617:	e8 b0 d1 fe ff       	call   c00007cc <strcmp>
c001361c:	83 c4 10             	add    esp,0x10
c001361f:	85 c0                	test   eax,eax
c0013621:	74 2a                	je     c001364d <CPU::detectFeatures()+0x1fb>
c0013623:	50                   	push   eax
c0013624:	50                   	push   eax
c0013625:	68 d3 56 02 c0       	push   0xc00256d3
c001362a:	55                   	push   ebp
c001362b:	e8 9c d1 fe ff       	call   c00007cc <strcmp>
c0013630:	83 c4 10             	add    esp,0x10
c0013633:	85 c0                	test   eax,eax
c0013635:	74 16                	je     c001364d <CPU::detectFeatures()+0x1fb>
c0013637:	50                   	push   eax
c0013638:	50                   	push   eax
c0013639:	68 e0 56 02 c0       	push   0xc00256e0
c001363e:	55                   	push   ebp
c001363f:	e8 88 d1 fe ff       	call   c00007cc <strcmp>
c0013644:	83 c4 10             	add    esp,0x10
c0013647:	85 c0                	test   eax,eax
c0013649:	74 48                	je     c0013693 <CPU::detectFeatures()+0x241>
c001364b:	eb 0f                	jmp    c001365c <CPU::detectFeatures()+0x20a>
c001364d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013657:	e9 c1 01 00 00       	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c001365c:	50                   	push   eax
c001365d:	50                   	push   eax
c001365e:	68 ed 56 02 c0       	push   0xc00256ed
c0013663:	55                   	push   ebp
c0013664:	e8 63 d1 fe ff       	call   c00007cc <strcmp>
c0013669:	83 c4 10             	add    esp,0x10
c001366c:	85 c0                	test   eax,eax
c001366e:	74 23                	je     c0013693 <CPU::detectFeatures()+0x241>
c0013670:	57                   	push   edi
c0013671:	57                   	push   edi
c0013672:	68 fa 56 02 c0       	push   0xc00256fa
c0013677:	55                   	push   ebp
c0013678:	e8 4f d1 fe ff       	call   c00007cc <strcmp>
c001367d:	83 c4 10             	add    esp,0x10
c0013680:	85 c0                	test   eax,eax
c0013682:	75 1e                	jne    c00136a2 <CPU::detectFeatures()+0x250>
c0013684:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001368e:	e9 8a 01 00 00       	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c0013693:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001369d:	e9 7b 01 00 00       	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c00136a2:	56                   	push   esi
c00136a3:	56                   	push   esi
c00136a4:	68 07 57 02 c0       	push   0xc0025707
c00136a9:	55                   	push   ebp
c00136aa:	e8 1d d1 fe ff       	call   c00007cc <strcmp>
c00136af:	83 c4 10             	add    esp,0x10
c00136b2:	85 c0                	test   eax,eax
c00136b4:	75 0f                	jne    c00136c5 <CPU::detectFeatures()+0x273>
c00136b6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00136c0:	e9 58 01 00 00       	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c00136c5:	51                   	push   ecx
c00136c6:	51                   	push   ecx
c00136c7:	68 c6 56 02 c0       	push   0xc00256c6
c00136cc:	55                   	push   ebp
c00136cd:	e8 fa d0 fe ff       	call   c00007cc <strcmp>
c00136d2:	83 c4 10             	add    esp,0x10
c00136d5:	85 c0                	test   eax,eax
c00136d7:	75 0f                	jne    c00136e8 <CPU::detectFeatures()+0x296>
c00136d9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00136e3:	e9 35 01 00 00       	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c00136e8:	52                   	push   edx
c00136e9:	52                   	push   edx
c00136ea:	68 14 57 02 c0       	push   0xc0025714
c00136ef:	55                   	push   ebp
c00136f0:	e8 d7 d0 fe ff       	call   c00007cc <strcmp>
c00136f5:	83 c4 10             	add    esp,0x10
c00136f8:	85 c0                	test   eax,eax
c00136fa:	75 0f                	jne    c001370b <CPU::detectFeatures()+0x2b9>
c00136fc:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013706:	e9 12 01 00 00       	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c001370b:	50                   	push   eax
c001370c:	50                   	push   eax
c001370d:	68 21 57 02 c0       	push   0xc0025721
c0013712:	55                   	push   ebp
c0013713:	e8 b4 d0 fe ff       	call   c00007cc <strcmp>
c0013718:	83 c4 10             	add    esp,0x10
c001371b:	85 c0                	test   eax,eax
c001371d:	75 0f                	jne    c001372e <CPU::detectFeatures()+0x2dc>
c001371f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013729:	e9 ef 00 00 00       	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c001372e:	50                   	push   eax
c001372f:	50                   	push   eax
c0013730:	68 2e 57 02 c0       	push   0xc002572e
c0013735:	55                   	push   ebp
c0013736:	e8 91 d0 fe ff       	call   c00007cc <strcmp>
c001373b:	83 c4 10             	add    esp,0x10
c001373e:	85 c0                	test   eax,eax
c0013740:	75 0f                	jne    c0013751 <CPU::detectFeatures()+0x2ff>
c0013742:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001374c:	e9 cc 00 00 00       	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c0013751:	50                   	push   eax
c0013752:	50                   	push   eax
c0013753:	68 3b 57 02 c0       	push   0xc002573b
c0013758:	55                   	push   ebp
c0013759:	e8 6e d0 fe ff       	call   c00007cc <strcmp>
c001375e:	83 c4 10             	add    esp,0x10
c0013761:	85 c0                	test   eax,eax
c0013763:	75 0f                	jne    c0013774 <CPU::detectFeatures()+0x322>
c0013765:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001376f:	e9 a9 00 00 00       	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c0013774:	50                   	push   eax
c0013775:	50                   	push   eax
c0013776:	68 48 57 02 c0       	push   0xc0025748
c001377b:	55                   	push   ebp
c001377c:	e8 4b d0 fe ff       	call   c00007cc <strcmp>
c0013781:	83 c4 10             	add    esp,0x10
c0013784:	85 c0                	test   eax,eax
c0013786:	75 0f                	jne    c0013797 <CPU::detectFeatures()+0x345>
c0013788:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013792:	e9 86 00 00 00       	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c0013797:	50                   	push   eax
c0013798:	50                   	push   eax
c0013799:	68 55 57 02 c0       	push   0xc0025755
c001379e:	55                   	push   ebp
c001379f:	e8 28 d0 fe ff       	call   c00007cc <strcmp>
c00137a4:	83 c4 10             	add    esp,0x10
c00137a7:	85 c0                	test   eax,eax
c00137a9:	75 0c                	jne    c00137b7 <CPU::detectFeatures()+0x365>
c00137ab:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00137b5:	eb 66                	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c00137b7:	50                   	push   eax
c00137b8:	50                   	push   eax
c00137b9:	68 62 57 02 c0       	push   0xc0025762
c00137be:	55                   	push   ebp
c00137bf:	e8 08 d0 fe ff       	call   c00007cc <strcmp>
c00137c4:	83 c4 10             	add    esp,0x10
c00137c7:	85 c0                	test   eax,eax
c00137c9:	75 0c                	jne    c00137d7 <CPU::detectFeatures()+0x385>
c00137cb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00137d5:	eb 46                	jmp    c001381d <CPU::detectFeatures()+0x3cb>
c00137d7:	57                   	push   edi
c00137d8:	57                   	push   edi
c00137d9:	68 6f 57 02 c0       	push   0xc002576f
c00137de:	55                   	push   ebp
c00137df:	e8 e8 cf fe ff       	call   c00007cc <strcmp>
c00137e4:	83 c4 10             	add    esp,0x10
c00137e7:	85 c0                	test   eax,eax
c00137e9:	74 e0                	je     c00137cb <CPU::detectFeatures()+0x379>
c00137eb:	56                   	push   esi
c00137ec:	56                   	push   esi
c00137ed:	68 7c 57 02 c0       	push   0xc002577c
c00137f2:	55                   	push   ebp
c00137f3:	e8 d4 cf fe ff       	call   c00007cc <strcmp>
c00137f8:	83 c4 10             	add    esp,0x10
c00137fb:	85 c0                	test   eax,eax
c00137fd:	74 cc                	je     c00137cb <CPU::detectFeatures()+0x379>
c00137ff:	51                   	push   ecx
c0013800:	51                   	push   ecx
c0013801:	68 89 57 02 c0       	push   0xc0025789
c0013806:	55                   	push   ebp
c0013807:	e8 c0 cf fe ff       	call   c00007cc <strcmp>
c001380c:	83 c4 10             	add    esp,0x10
c001380f:	85 c0                	test   eax,eax
c0013811:	74 b8                	je     c00137cb <CPU::detectFeatures()+0x379>
c0013813:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001381d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013822:	0f 86 be 00 00 00    	jbe    c00138e6 <CPU::detectFeatures()+0x494>
c0013828:	83 ec 0c             	sub    esp,0xc
c001382b:	68 80 00 00 00       	push   0x80
c0013830:	e8 31 fb ff ff       	call   c0013366 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013835:	83 e0 01             	and    eax,0x1
c0013838:	c1 e0 06             	shl    eax,0x6
c001383b:	88 c2                	mov    dl,al
c001383d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013843:	83 e0 bf             	and    eax,0xffffffbf
c0013846:	09 d0                	or     eax,edx
c0013848:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001384e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013855:	e8 0c fb ff ff       	call   c0013366 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001385a:	83 e0 01             	and    eax,0x1
c001385d:	c1 e0 04             	shl    eax,0x4
c0013860:	88 c2                	mov    dl,al
c0013862:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013868:	83 e0 ef             	and    eax,0xffffffef
c001386b:	09 d0                	or     eax,edx
c001386d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013873:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001387a:	e8 e7 fa ff ff       	call   c0013366 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001387f:	c1 e0 07             	shl    eax,0x7
c0013882:	88 c2                	mov    dl,al
c0013884:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001388a:	83 e0 7f             	and    eax,0x7f
c001388d:	09 d0                	or     eax,edx
c001388f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013895:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001389c:	e8 f3 fa ff ff       	call   c0013394 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00138a1:	83 e0 01             	and    eax,0x1
c00138a4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00138ab:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00138b1:	83 e0 f7             	and    eax,0xfffffff7
c00138b4:	09 d0                	or     eax,edx
c00138b6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00138bc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00138c3:	e8 cc fa ff ff       	call   c0013394 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00138c8:	83 c4 10             	add    esp,0x10
c00138cb:	83 e0 01             	and    eax,0x1
c00138ce:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00138d5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00138db:	83 e0 fb             	and    eax,0xfffffffb
c00138de:	09 d0                	or     eax,edx
c00138e0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00138e6:	83 ec 0c             	sub    esp,0xc
c00138e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138ed:	50                   	push   eax
c00138ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138f2:	50                   	push   eax
c00138f3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00138f7:	56                   	push   esi
c00138f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138fc:	50                   	push   eax
c00138fd:	6a 01                	push   0x1
c00138ff:	e8 82 f9 ff ff       	call   c0013286 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013904:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013908:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001390e:	88 ca                	mov    dl,cl
c0013910:	83 e0 f0             	and    eax,0xfffffff0
c0013913:	83 e2 0f             	and    edx,0xf
c0013916:	09 d0                	or     eax,edx
c0013918:	88 ca                	mov    dl,cl
c001391a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013920:	c0 ea 04             	shr    dl,0x4
c0013923:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013927:	0f b6 c2             	movzx  eax,dl
c001392a:	83 c4 20             	add    esp,0x20
c001392d:	c1 e0 06             	shl    eax,0x6
c0013930:	89 c7                	mov    edi,eax
c0013932:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013938:	66 25 3f c0          	and    ax,0xc03f
c001393c:	09 f8                	or     eax,edi
c001393e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013945:	89 c8                	mov    eax,ecx
c0013947:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001394e:	c1 e8 08             	shr    eax,0x8
c0013951:	83 e5 3f             	and    ebp,0x3f
c0013954:	83 e0 0f             	and    eax,0xf
c0013957:	89 c7                	mov    edi,eax
c0013959:	c1 e7 06             	shl    edi,0x6
c001395c:	09 ef                	or     edi,ebp
c001395e:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013965:	89 fa                	mov    edx,edi
c0013967:	83 e5 c0             	and    ebp,0xffffffc0
c001396a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013970:	88 c2                	mov    dl,al
c0013972:	c0 ea 02             	shr    dl,0x2
c0013975:	89 d7                	mov    edi,edx
c0013977:	09 ef                	or     edi,ebp
c0013979:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001397f:	89 fa                	mov    edx,edi
c0013981:	83 e5 cf             	and    ebp,0xffffffcf
c0013984:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001398a:	89 cf                	mov    edi,ecx
c001398c:	c1 ef 0c             	shr    edi,0xc
c001398f:	83 e7 03             	and    edi,0x3
c0013992:	c1 e7 04             	shl    edi,0x4
c0013995:	09 ef                	or     edi,ebp
c0013997:	3c 06                	cmp    al,0x6
c0013999:	89 fa                	mov    edx,edi
c001399b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00139a1:	74 04                	je     c00139a7 <CPU::detectFeatures()+0x555>
c00139a3:	3c 0f                	cmp    al,0xf
c00139a5:	75 5c                	jne    c0013a03 <CPU::detectFeatures()+0x5b1>
c00139a7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00139ab:	89 cf                	mov    edi,ecx
c00139ad:	c1 ef 10             	shr    edi,0x10
c00139b0:	c1 e7 04             	shl    edi,0x4
c00139b3:	09 fa                	or     edx,edi
c00139b5:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00139bb:	0f b6 d2             	movzx  edx,dl
c00139be:	66 81 e7 3f c0       	and    di,0xc03f
c00139c3:	c1 e2 06             	shl    edx,0x6
c00139c6:	09 fa                	or     edx,edi
c00139c8:	3c 0f                	cmp    al,0xf
c00139ca:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00139d1:	75 30                	jne    c0013a03 <CPU::detectFeatures()+0x5b1>
c00139d3:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00139d9:	c1 e9 14             	shr    ecx,0x14
c00139dc:	83 e0 3f             	and    eax,0x3f
c00139df:	83 c1 0f             	add    ecx,0xf
c00139e2:	88 ca                	mov    dl,cl
c00139e4:	c0 e9 02             	shr    cl,0x2
c00139e7:	c1 e2 06             	shl    edx,0x6
c00139ea:	09 d0                	or     eax,edx
c00139ec:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00139f2:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00139f8:	83 e0 c0             	and    eax,0xffffffc0
c00139fb:	09 c1                	or     ecx,eax
c00139fd:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013a03:	83 ec 0c             	sub    esp,0xc
c0013a06:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013a0d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013a11:	50                   	push   eax
c0013a12:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013a16:	55                   	push   ebp
c0013a17:	56                   	push   esi
c0013a18:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013a1c:	57                   	push   edi
c0013a1d:	68 00 00 00 80       	push   0x80000000
c0013a22:	e8 5f f8 ff ff       	call   c0013286 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013a27:	83 c4 20             	add    esp,0x20
c0013a2a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0013a32:	76 22                	jbe    c0013a56 <CPU::detectFeatures()+0x604>
c0013a34:	83 ec 0c             	sub    esp,0xc
c0013a37:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013a3b:	50                   	push   eax
c0013a3c:	55                   	push   ebp
c0013a3d:	56                   	push   esi
c0013a3e:	57                   	push   edi
c0013a3f:	68 01 00 00 80       	push   0x80000001
c0013a44:	e8 3d f8 ff ff       	call   c0013286 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013a49:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0013a53:	83 c4 20             	add    esp,0x20
c0013a56:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013a5c:	83 f8 01             	cmp    eax,0x1
c0013a5f:	75 6f                	jne    c0013ad0 <CPU::detectFeatures()+0x67e>
c0013a61:	51                   	push   ecx
c0013a62:	51                   	push   ecx
c0013a63:	68 95 57 02 c0       	push   0xc0025795
c0013a68:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013a6c:	56                   	push   esi
c0013a6d:	e8 ce cc fe ff       	call   c0000740 <strcpy>
c0013a72:	5f                   	pop    edi
c0013a73:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a79:	5d                   	pop    ebp
c0013a7a:	66 c1 e8 06          	shr    ax,0x6
c0013a7e:	0f b6 c0             	movzx  eax,al
c0013a81:	50                   	push   eax
c0013a82:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a88:	c1 e8 0e             	shr    eax,0xe
c0013a8b:	0f b6 c0             	movzx  eax,al
c0013a8e:	50                   	push   eax
c0013a8f:	e8 9c f4 ff ff       	call   c0012f30 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013a94:	5a                   	pop    edx
c0013a95:	59                   	pop    ecx
c0013a96:	50                   	push   eax
c0013a97:	56                   	push   esi
c0013a98:	e8 e3 cd fe ff       	call   c0000880 <strcat>
c0013a9d:	5f                   	pop    edi
c0013a9e:	5d                   	pop    ebp
c0013a9f:	56                   	push   esi
c0013aa0:	53                   	push   ebx
c0013aa1:	e8 be a9 ff ff       	call   c000e464 <Device::setName(char const*)>
c0013aa6:	58                   	pop    eax
c0013aa7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013aad:	5a                   	pop    edx
c0013aae:	68 9c 57 02 c0       	push   0xc002579c
c0013ab3:	50                   	push   eax
c0013ab4:	e8 13 cd fe ff       	call   c00007cc <strcmp>
c0013ab9:	83 c4 10             	add    esp,0x10
c0013abc:	85 c0                	test   eax,eax
c0013abe:	0f 85 71 03 00 00    	jne    c0013e35 <CPU::detectFeatures()+0x9e3>
c0013ac4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013acb:	e9 65 03 00 00       	jmp    c0013e35 <CPU::detectFeatures()+0x9e3>
c0013ad0:	83 f8 02             	cmp    eax,0x2
c0013ad3:	0f 85 b5 00 00 00    	jne    c0013b8e <CPU::detectFeatures()+0x73c>
c0013ad9:	57                   	push   edi
c0013ada:	57                   	push   edi
c0013adb:	68 ae 57 02 c0       	push   0xc00257ae
c0013ae0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013ae4:	56                   	push   esi
c0013ae5:	e8 56 cc fe ff       	call   c0000740 <strcpy>
c0013aea:	5d                   	pop    ebp
c0013aeb:	58                   	pop    eax
c0013aec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013af2:	66 c1 e8 06          	shr    ax,0x6
c0013af6:	0f b6 c0             	movzx  eax,al
c0013af9:	50                   	push   eax
c0013afa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013b00:	c1 e8 0e             	shr    eax,0xe
c0013b03:	0f b6 c0             	movzx  eax,al
c0013b06:	50                   	push   eax
c0013b07:	e8 90 f2 ff ff       	call   c0012d9c <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013b0c:	5a                   	pop    edx
c0013b0d:	59                   	pop    ecx
c0013b0e:	50                   	push   eax
c0013b0f:	56                   	push   esi
c0013b10:	e8 6b cd fe ff       	call   c0000880 <strcat>
c0013b15:	5f                   	pop    edi
c0013b16:	5d                   	pop    ebp
c0013b17:	56                   	push   esi
c0013b18:	53                   	push   ebx
c0013b19:	e8 46 a9 ff ff       	call   c000e464 <Device::setName(char const*)>
c0013b1e:	58                   	pop    eax
c0013b1f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013b25:	5a                   	pop    edx
c0013b26:	68 b3 57 02 c0       	push   0xc00257b3
c0013b2b:	50                   	push   eax
c0013b2c:	e8 9b cc fe ff       	call   c00007cc <strcmp>
c0013b31:	83 c4 10             	add    esp,0x10
c0013b34:	85 c0                	test   eax,eax
c0013b36:	75 20                	jne    c0013b58 <CPU::detectFeatures()+0x706>
c0013b38:	8b 15 68 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f68
c0013b3e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013b44:	a8 01                	test   al,0x1
c0013b46:	74 10                	je     c0013b58 <CPU::detectFeatures()+0x706>
c0013b48:	83 e0 fe             	and    eax,0xfffffffe
c0013b4b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013b51:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013b58:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013b5e:	c1 e8 0e             	shr    eax,0xe
c0013b61:	3c 05                	cmp    al,0x5
c0013b63:	0f 85 cc 02 00 00    	jne    c0013e35 <CPU::detectFeatures()+0x9e3>
c0013b69:	56                   	push   esi
c0013b6a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013b70:	83 e0 0f             	and    eax,0xf
c0013b73:	50                   	push   eax
c0013b74:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013b7a:	66 c1 e8 06          	shr    ax,0x6
c0013b7e:	0f b6 c0             	movzx  eax,al
c0013b81:	50                   	push   eax
c0013b82:	6a 05                	push   0x5
c0013b84:	e8 89 f6 ff ff       	call   c0013212 <CPU::AMD_K6_writeback(int, int, int)>
c0013b89:	e9 1f 02 00 00       	jmp    c0013dad <CPU::detectFeatures()+0x95b>
c0013b8e:	8d 50 fd             	lea    edx,[eax-0x3]
c0013b91:	83 fa 01             	cmp    edx,0x1
c0013b94:	76 09                	jbe    c0013b9f <CPU::detectFeatures()+0x74d>
c0013b96:	83 f8 06             	cmp    eax,0x6
c0013b99:	0f 85 91 01 00 00    	jne    c0013d30 <CPU::detectFeatures()+0x8de>
c0013b9f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013ba5:	c1 ea 0e             	shr    edx,0xe
c0013ba8:	80 fa 05             	cmp    dl,0x5
c0013bab:	75 7b                	jne    c0013c28 <CPU::detectFeatures()+0x7d6>
c0013bad:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013bb3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013bb8:	66 81 fa 00 01       	cmp    dx,0x100
c0013bbd:	75 0c                	jne    c0013bcb <CPU::detectFeatures()+0x779>
c0013bbf:	51                   	push   ecx
c0013bc0:	51                   	push   ecx
c0013bc1:	68 ba 57 02 c0       	push   0xc00257ba
c0013bc6:	e9 dc 01 00 00       	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013bcb:	66 81 fa 00 02       	cmp    dx,0x200
c0013bd0:	75 0c                	jne    c0013bde <CPU::detectFeatures()+0x78c>
c0013bd2:	52                   	push   edx
c0013bd3:	52                   	push   edx
c0013bd4:	68 cd 57 02 c0       	push   0xc00257cd
c0013bd9:	e9 c9 01 00 00       	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013bde:	66 81 fa 40 02       	cmp    dx,0x240
c0013be3:	75 0c                	jne    c0013bf1 <CPU::detectFeatures()+0x79f>
c0013be5:	50                   	push   eax
c0013be6:	50                   	push   eax
c0013be7:	68 df 57 02 c0       	push   0xc00257df
c0013bec:	e9 b6 01 00 00       	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013bf1:	83 f8 06             	cmp    eax,0x6
c0013bf4:	75 0c                	jne    c0013c02 <CPU::detectFeatures()+0x7b0>
c0013bf6:	50                   	push   eax
c0013bf7:	50                   	push   eax
c0013bf8:	68 f1 57 02 c0       	push   0xc00257f1
c0013bfd:	e9 a5 01 00 00       	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013c02:	83 f8 04             	cmp    eax,0x4
c0013c05:	75 0c                	jne    c0013c13 <CPU::detectFeatures()+0x7c1>
c0013c07:	50                   	push   eax
c0013c08:	50                   	push   eax
c0013c09:	68 fd 57 02 c0       	push   0xc00257fd
c0013c0e:	e9 94 01 00 00       	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013c13:	83 f8 03             	cmp    eax,0x3
c0013c16:	0f 85 19 02 00 00    	jne    c0013e35 <CPU::detectFeatures()+0x9e3>
c0013c1c:	50                   	push   eax
c0013c1d:	50                   	push   eax
c0013c1e:	68 05 58 02 c0       	push   0xc0025805
c0013c23:	e9 7f 01 00 00       	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013c28:	80 fa 06             	cmp    dl,0x6
c0013c2b:	0f 85 db 00 00 00    	jne    c0013d0c <CPU::detectFeatures()+0x8ba>
c0013c31:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013c37:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013c3c:	66 81 fa 80 01       	cmp    dx,0x180
c0013c41:	75 0c                	jne    c0013c4f <CPU::detectFeatures()+0x7fd>
c0013c43:	50                   	push   eax
c0013c44:	50                   	push   eax
c0013c45:	68 10 58 02 c0       	push   0xc0025810
c0013c4a:	e9 58 01 00 00       	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013c4f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013c55:	66 f7 c1 80 ff       	test   cx,0xff80
c0013c5a:	75 0c                	jne    c0013c68 <CPU::detectFeatures()+0x816>
c0013c5c:	50                   	push   eax
c0013c5d:	50                   	push   eax
c0013c5e:	68 20 58 02 c0       	push   0xc0025820
c0013c63:	e9 3f 01 00 00       	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013c68:	66 81 fa 40 02       	cmp    dx,0x240
c0013c6d:	75 0c                	jne    c0013c7b <CPU::detectFeatures()+0x829>
c0013c6f:	55                   	push   ebp
c0013c70:	55                   	push   ebp
c0013c71:	68 27 58 02 c0       	push   0xc0025827
c0013c76:	e9 2c 01 00 00       	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013c7b:	66 81 fa 80 02       	cmp    dx,0x280
c0013c80:	75 0c                	jne    c0013c8e <CPU::detectFeatures()+0x83c>
c0013c82:	57                   	push   edi
c0013c83:	57                   	push   edi
c0013c84:	68 30 58 02 c0       	push   0xc0025830
c0013c89:	e9 19 01 00 00       	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013c8e:	66 81 fa 40 03       	cmp    dx,0x340
c0013c93:	74 ed                	je     c0013c82 <CPU::detectFeatures()+0x830>
c0013c95:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013c9a:	75 0c                	jne    c0013ca8 <CPU::detectFeatures()+0x856>
c0013c9c:	56                   	push   esi
c0013c9d:	56                   	push   esi
c0013c9e:	68 37 58 02 c0       	push   0xc0025837
c0013ca3:	e9 ff 00 00 00       	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013ca8:	83 f8 06             	cmp    eax,0x6
c0013cab:	0f 84 45 ff ff ff    	je     c0013bf6 <CPU::detectFeatures()+0x7a4>
c0013cb1:	83 f8 04             	cmp    eax,0x4
c0013cb4:	0f 84 4d ff ff ff    	je     c0013c07 <CPU::detectFeatures()+0x7b5>
c0013cba:	83 f8 03             	cmp    eax,0x3
c0013cbd:	0f 85 72 01 00 00    	jne    c0013e35 <CPU::detectFeatures()+0x9e3>
c0013cc3:	51                   	push   ecx
c0013cc4:	51                   	push   ecx
c0013cc5:	68 40 58 02 c0       	push   0xc0025840
c0013cca:	53                   	push   ebx
c0013ccb:	e8 94 a7 ff ff       	call   c000e464 <Device::setName(char const*)>
c0013cd0:	b1 c1                	mov    cl,0xc1
c0013cd2:	88 c8                	mov    al,cl
c0013cd4:	e6 22                	out    0x22,al
c0013cd6:	e4 23                	in     al,0x23
c0013cd8:	88 c2                	mov    dl,al
c0013cda:	88 c8                	mov    al,cl
c0013cdc:	e6 22                	out    0x22,al
c0013cde:	88 d0                	mov    al,dl
c0013ce0:	83 c8 10             	or     eax,0x10
c0013ce3:	e6 23                	out    0x23,al
c0013ce5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013cec:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013cef:	89 d0                	mov    eax,edx
c0013cf1:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013cf7:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013cfb:	40                   	inc    eax
c0013cfc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013d02:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013d07:	e9 a1 00 00 00       	jmp    c0013dad <CPU::detectFeatures()+0x95b>
c0013d0c:	83 f8 06             	cmp    eax,0x6
c0013d0f:	0f 84 e1 fe ff ff    	je     c0013bf6 <CPU::detectFeatures()+0x7a4>
c0013d15:	83 f8 04             	cmp    eax,0x4
c0013d18:	0f 84 e9 fe ff ff    	je     c0013c07 <CPU::detectFeatures()+0x7b5>
c0013d1e:	83 f8 03             	cmp    eax,0x3
c0013d21:	0f 85 0e 01 00 00    	jne    c0013e35 <CPU::detectFeatures()+0x9e3>
c0013d27:	52                   	push   edx
c0013d28:	52                   	push   edx
c0013d29:	68 4b 58 02 c0       	push   0xc002584b
c0013d2e:	eb 77                	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013d30:	83 f8 07             	cmp    eax,0x7
c0013d33:	75 09                	jne    c0013d3e <CPU::detectFeatures()+0x8ec>
c0013d35:	50                   	push   eax
c0013d36:	50                   	push   eax
c0013d37:	68 55 58 02 c0       	push   0xc0025855
c0013d3c:	eb 69                	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013d3e:	83 f8 0a             	cmp    eax,0xa
c0013d41:	75 09                	jne    c0013d4c <CPU::detectFeatures()+0x8fa>
c0013d43:	50                   	push   eax
c0013d44:	50                   	push   eax
c0013d45:	68 60 58 02 c0       	push   0xc0025860
c0013d4a:	eb 5b                	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013d4c:	83 f8 0b             	cmp    eax,0xb
c0013d4f:	75 09                	jne    c0013d5a <CPU::detectFeatures()+0x908>
c0013d51:	50                   	push   eax
c0013d52:	50                   	push   eax
c0013d53:	68 68 58 02 c0       	push   0xc0025868
c0013d58:	eb 4d                	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013d5a:	83 f8 08             	cmp    eax,0x8
c0013d5d:	75 09                	jne    c0013d68 <CPU::detectFeatures()+0x916>
c0013d5f:	50                   	push   eax
c0013d60:	50                   	push   eax
c0013d61:	68 71 58 02 c0       	push   0xc0025871
c0013d66:	eb 3f                	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013d68:	83 f8 09             	cmp    eax,0x9
c0013d6b:	75 09                	jne    c0013d76 <CPU::detectFeatures()+0x924>
c0013d6d:	50                   	push   eax
c0013d6e:	50                   	push   eax
c0013d6f:	68 79 58 02 c0       	push   0xc0025879
c0013d74:	eb 31                	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013d76:	83 f8 05             	cmp    eax,0x5
c0013d79:	75 09                	jne    c0013d84 <CPU::detectFeatures()+0x932>
c0013d7b:	50                   	push   eax
c0013d7c:	50                   	push   eax
c0013d7d:	68 81 58 02 c0       	push   0xc0025881
c0013d82:	eb 23                	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013d84:	83 f8 0c             	cmp    eax,0xc
c0013d87:	75 09                	jne    c0013d92 <CPU::detectFeatures()+0x940>
c0013d89:	55                   	push   ebp
c0013d8a:	55                   	push   ebp
c0013d8b:	68 8f 58 02 c0       	push   0xc002588f
c0013d90:	eb 15                	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013d92:	83 f8 0d             	cmp    eax,0xd
c0013d95:	75 09                	jne    c0013da0 <CPU::detectFeatures()+0x94e>
c0013d97:	57                   	push   edi
c0013d98:	57                   	push   edi
c0013d99:	68 9a 58 02 c0       	push   0xc002589a
c0013d9e:	eb 07                	jmp    c0013da7 <CPU::detectFeatures()+0x955>
c0013da0:	56                   	push   esi
c0013da1:	56                   	push   esi
c0013da2:	68 ae 58 02 c0       	push   0xc00258ae
c0013da7:	53                   	push   ebx
c0013da8:	e8 b7 a6 ff ff       	call   c000e464 <Device::setName(char const*)>
c0013dad:	83 c4 10             	add    esp,0x10
c0013db0:	e9 80 00 00 00       	jmp    c0013e35 <CPU::detectFeatures()+0x9e3>
c0013db5:	51                   	push   ecx
c0013db6:	51                   	push   ecx
c0013db7:	68 fa 56 02 c0       	push   0xc00256fa
c0013dbc:	55                   	push   ebp
c0013dbd:	e8 7e c9 fe ff       	call   c0000740 <strcpy>
c0013dc2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013dcc:	e8 12 c4 fe ff       	call   c00001e3 <is486>
c0013dd1:	83 c4 10             	add    esp,0x10
c0013dd4:	85 c0                	test   eax,eax
c0013dd6:	74 2b                	je     c0013e03 <CPU::detectFeatures()+0x9b1>
c0013dd8:	52                   	push   edx
c0013dd9:	52                   	push   edx
c0013dda:	68 ba 58 02 c0       	push   0xc00258ba
c0013ddf:	53                   	push   ebx
c0013de0:	e8 7f a6 ff ff       	call   c000e464 <Device::setName(char const*)>
c0013de5:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013dec:	0f 20 c0             	mov    eax,cr0
c0013def:	83 e0 14             	and    eax,0x14
c0013df2:	83 c4 10             	add    esp,0x10
c0013df5:	83 f8 04             	cmp    eax,0x4
c0013df8:	75 1f                	jne    c0013e19 <CPU::detectFeatures()+0x9c7>
c0013dfa:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013e01:	eb 32                	jmp    c0013e35 <CPU::detectFeatures()+0x9e3>
c0013e03:	50                   	push   eax
c0013e04:	50                   	push   eax
c0013e05:	68 c5 58 02 c0       	push   0xc00258c5
c0013e0a:	53                   	push   ebx
c0013e0b:	e8 54 a6 ff ff       	call   c000e464 <Device::setName(char const*)>
c0013e10:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013e17:	eb d3                	jmp    c0013dec <CPU::detectFeatures()+0x99a>
c0013e19:	e8 a0 c3 fe ff       	call   c00001be <hasLegacyFPU>
c0013e1e:	83 e0 01             	and    eax,0x1
c0013e21:	8d 14 00             	lea    edx,[eax+eax*1]
c0013e24:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013e2a:	83 e0 fd             	and    eax,0xfffffffd
c0013e2d:	09 d0                	or     eax,edx
c0013e2f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013e35:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013e3c:	83 c4 4c             	add    esp,0x4c
c0013e3f:	5b                   	pop    ebx
c0013e40:	5e                   	pop    esi
c0013e41:	5f                   	pop    edi
c0013e42:	5d                   	pop    ebp
c0013e43:	c3                   	ret    

c0013e44 <CPU::setupSMEP()>:
c0013e44:	0f 20 e0             	mov    eax,cr4
c0013e47:	0d 00 00 10 00       	or     eax,0x100000
c0013e4c:	0f 22 e0             	mov    cr4,eax
c0013e4f:	c3                   	ret    

c0013e50 <CPU::setupUMIP()>:
c0013e50:	0f 20 e0             	mov    eax,cr4
c0013e53:	80 cc 08             	or     ah,0x8
c0013e56:	0f 22 e0             	mov    cr4,eax
c0013e59:	c3                   	ret    

c0013e5a <CPU::setupTSC()>:
c0013e5a:	0f 20 e0             	mov    eax,cr4
c0013e5d:	83 c8 04             	or     eax,0x4
c0013e60:	0f 22 e0             	mov    cr4,eax
c0013e63:	c3                   	ret    

c0013e64 <CPU::setupLargePages()>:
c0013e64:	0f 20 e0             	mov    eax,cr4
c0013e67:	83 c8 10             	or     eax,0x10
c0013e6a:	0f 22 e0             	mov    cr4,eax
c0013e6d:	c3                   	ret    

c0013e6e <CPU::setupPAT()>:
c0013e6e:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0013e73:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013e7a:	74 2c                	je     c0013ea8 <CPU::setupPAT()+0x3a>
c0013e7c:	53                   	push   ebx
c0013e7d:	83 ec 10             	sub    esp,0x10
c0013e80:	68 77 02 00 00       	push   0x277
c0013e85:	50                   	push   eax
c0013e86:	e8 9f 50 ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0013e8b:	83 e2 f8             	and    edx,0xfffffff8
c0013e8e:	83 ca 01             	or     edx,0x1
c0013e91:	52                   	push   edx
c0013e92:	50                   	push   eax
c0013e93:	68 77 02 00 00       	push   0x277
c0013e98:	ff 35 68 7f 02 c0    	push   DWORD PTR ds:0xc0027f68
c0013e9e:	e8 b3 50 ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013ea3:	83 c4 28             	add    esp,0x28
c0013ea6:	5b                   	pop    ebx
c0013ea7:	c3                   	ret    
c0013ea8:	c3                   	ret    
c0013ea9:	90                   	nop

c0013eaa <CPU::setupMTRR()>:
c0013eaa:	c3                   	ret    
c0013eab:	90                   	nop

c0013eac <CPU::setupGlobalPages()>:
c0013eac:	0f 20 e0             	mov    eax,cr4
c0013eaf:	0c 80                	or     al,0x80
c0013eb1:	0f 22 e0             	mov    cr4,eax
c0013eb4:	c3                   	ret    
c0013eb5:	90                   	nop

c0013eb6 <CPU::allowUsermodeDataAccess()>:
c0013eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013eba:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013ec1:	74 03                	je     c0013ec6 <CPU::allowUsermodeDataAccess()+0x10>
c0013ec3:	0f 01 cb             	stac   
c0013ec6:	c3                   	ret    
c0013ec7:	90                   	nop

c0013ec8 <CPU::prohibitUsermodeDataAccess()>:
c0013ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ecc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013ed3:	74 03                	je     c0013ed8 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013ed5:	0f 01 ca             	clac   
c0013ed8:	c3                   	ret    
c0013ed9:	90                   	nop

c0013eda <CPU::setupSMAP()>:
c0013eda:	0f 20 e0             	mov    eax,cr4
c0013edd:	0d 00 00 20 00       	or     eax,0x200000
c0013ee2:	0f 22 e0             	mov    cr4,eax
c0013ee5:	eb e1                	jmp    c0013ec8 <CPU::prohibitUsermodeDataAccess()>
c0013ee7:	90                   	nop

c0013ee8 <CPU::setupFeatures()>:
c0013ee8:	53                   	push   ebx
c0013ee9:	83 ec 08             	sub    esp,0x8
c0013eec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ef0:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013ef7:	74 18                	je     c0013f11 <CPU::setupFeatures()+0x29>
c0013ef9:	83 ec 0c             	sub    esp,0xc
c0013efc:	68 d0 58 02 c0       	push   0xc00258d0
c0013f01:	e8 f5 8d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013f06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f09:	e8 42 ff ff ff       	call   c0013e50 <CPU::setupUMIP()>
c0013f0e:	83 c4 10             	add    esp,0x10
c0013f11:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013f18:	74 18                	je     c0013f32 <CPU::setupFeatures()+0x4a>
c0013f1a:	83 ec 0c             	sub    esp,0xc
c0013f1d:	68 da 58 02 c0       	push   0xc00258da
c0013f22:	e8 d4 8d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013f27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f2a:	e8 2b ff ff ff       	call   c0013e5a <CPU::setupTSC()>
c0013f2f:	83 c4 10             	add    esp,0x10
c0013f32:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013f39:	74 18                	je     c0013f53 <CPU::setupFeatures()+0x6b>
c0013f3b:	83 ec 0c             	sub    esp,0xc
c0013f3e:	68 e3 58 02 c0       	push   0xc00258e3
c0013f43:	e8 b3 8d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013f48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f4b:	e8 14 ff ff ff       	call   c0013e64 <CPU::setupLargePages()>
c0013f50:	83 c4 10             	add    esp,0x10
c0013f53:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013f5a:	74 18                	je     c0013f74 <CPU::setupFeatures()+0x8c>
c0013f5c:	83 ec 0c             	sub    esp,0xc
c0013f5f:	68 ec 58 02 c0       	push   0xc00258ec
c0013f64:	e8 92 8d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013f69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f6c:	e8 3b ff ff ff       	call   c0013eac <CPU::setupGlobalPages()>
c0013f71:	83 c4 10             	add    esp,0x10
c0013f74:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013f7b:	74 18                	je     c0013f95 <CPU::setupFeatures()+0xad>
c0013f7d:	83 ec 0c             	sub    esp,0xc
c0013f80:	68 fe 58 02 c0       	push   0xc00258fe
c0013f85:	e8 71 8d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013f8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f8d:	e8 dc fe ff ff       	call   c0013e6e <CPU::setupPAT()>
c0013f92:	83 c4 10             	add    esp,0x10
c0013f95:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013f9c:	74 11                	je     c0013faf <CPU::setupFeatures()+0xc7>
c0013f9e:	c7 44 24 10 07 59 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025907
c0013fa6:	83 c4 08             	add    esp,0x8
c0013fa9:	5b                   	pop    ebx
c0013faa:	e9 4c 8d ff ff       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>
c0013faf:	83 c4 08             	add    esp,0x8
c0013fb2:	5b                   	pop    ebx
c0013fb3:	c3                   	ret    

c0013fb4 <CPU::open(int, int, void*)>:
c0013fb4:	57                   	push   edi
c0013fb5:	56                   	push   esi
c0013fb6:	53                   	push   ebx
c0013fb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013fbf:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013fc5:	83 ec 0c             	sub    esp,0xc
c0013fc8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013fce:	68 11 59 02 c0       	push   0xc0025911
c0013fd3:	e8 91 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fd8:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013fde:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fe1:	e8 20 53 ff ff       	call   c0009306 <GDT::setup()>
c0013fe6:	c7 04 24 23 59 02 c0 	mov    DWORD PTR [esp],0xc0025923
c0013fed:	e8 77 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013ff2:	83 c4 0c             	add    esp,0xc
c0013ff5:	6a 00                	push   0x0
c0013ff7:	68 ef be ad de       	push   0xdeadbeef
c0013ffc:	57                   	push   edi
c0013ffd:	e8 5a 73 ff ff       	call   c000b35c <TSS::setup(unsigned long, unsigned long)>
c0014002:	c7 04 24 35 59 02 c0 	mov    DWORD PTR [esp],0xc0025935
c0014009:	e8 5b 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001400e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014011:	e8 26 73 ff ff       	call   c000b33c <TSS::flush()>
c0014016:	c7 04 24 49 59 02 c0 	mov    DWORD PTR [esp],0xc0025949
c001401d:	e8 47 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014022:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014028:	89 04 24             	mov    DWORD PTR [esp],eax
c001402b:	e8 42 55 ff ff       	call   c0009572 <IDT::setup()>
c0014030:	c7 04 24 5b 59 02 c0 	mov    DWORD PTR [esp],0xc002595b
c0014037:	e8 2d 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001403c:	b8 00 04 00 00       	mov    eax,0x400
c0014041:	0f 23 f8             	mov    db7,eax
c0014044:	c7 04 24 79 59 02 c0 	mov    DWORD PTR [esp],0xc0025979
c001404b:	e8 19 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014050:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001405a:	e8 67 60 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c001405f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014065:	89 30                	mov    DWORD PTR [eax],esi
c0014067:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001406d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014070:	c7 04 24 9b 59 02 c0 	mov    DWORD PTR [esp],0xc002599b
c0014077:	e8 ed 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001407c:	58                   	pop    eax
c001407d:	5a                   	pop    edx
c001407e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014084:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014088:	e8 c9 82 ff ff       	call   c000c356 <VAS::setCPUSpecific(unsigned long)>
c001408d:	c7 04 24 c3 59 02 c0 	mov    DWORD PTR [esp],0xc00259c3
c0014094:	e8 d0 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014099:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001409c:	e8 b1 f3 ff ff       	call   c0013452 <CPU::detectFeatures()>
c00140a1:	c7 04 24 e6 59 02 c0 	mov    DWORD PTR [esp],0xc00259e6
c00140a8:	e8 bc 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00140ad:	e8 c0 b5 ff ff       	call   c000f672 <setupInterruptController()>
c00140b2:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00140b8:	c7 04 24 0a 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a0a
c00140bf:	e8 a5 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00140c4:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c00140c9:	83 e0 10             	and    eax,0x10
c00140cc:	83 f8 01             	cmp    eax,0x1
c00140cf:	19 c0                	sbb    eax,eax
c00140d1:	83 e0 46             	and    eax,0x46
c00140d4:	83 c0 1e             	add    eax,0x1e
c00140d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00140da:	e8 c1 cb ff ff       	call   c0010ca0 <setupTimer(int)>
c00140df:	83 c4 10             	add    esp,0x10
c00140e2:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00140e8:	f6 05 80 7f 02 c0 20 	test   BYTE PTR ds:0xc0027f80,0x20
c00140ef:	74 18                	je     c0014109 <CPU::open(int, int, void*)+0x155>
c00140f1:	83 ec 0c             	sub    esp,0xc
c00140f4:	68 25 5a 02 c0       	push   0xc0025a25
c00140f9:	e8 6b 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00140fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014101:	e8 e2 fd ff ff       	call   c0013ee8 <CPU::setupFeatures()>
c0014106:	83 c4 10             	add    esp,0x10
c0014109:	83 ec 0c             	sub    esp,0xc
c001410c:	68 40 5a 02 c0       	push   0xc0025a40
c0014111:	e8 53 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014116:	83 c4 10             	add    esp,0x10
c0014119:	31 c0                	xor    eax,eax
c001411b:	5b                   	pop    ebx
c001411c:	5e                   	pop    esi
c001411d:	5f                   	pop    edi
c001411e:	c3                   	ret    
c001411f:	90                   	nop

c0014120 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0014120:	57                   	push   edi
c0014121:	56                   	push   esi
c0014122:	53                   	push   ebx
c0014123:	51                   	push   ecx
c0014124:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014128:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001412b:	0f 02 c0             	lar    eax,ax
c001412e:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0014131:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0014135:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0014138:	88 ca                	mov    dl,cl
c001413a:	c0 ea 06             	shr    dl,0x6
c001413d:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0014141:	89 ca                	mov    edx,ecx
c0014143:	66 c1 ea 03          	shr    dx,0x3
c0014147:	83 e2 07             	and    edx,0x7
c001414a:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001414f:	88 17                	mov    BYTE PTR [edi],dl
c0014151:	0f 84 a6 01 00 00    	je     c00142fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014157:	83 e1 07             	and    ecx,0x7
c001415a:	80 f9 04             	cmp    cl,0x4
c001415d:	0f 84 98 00 00 00    	je     c00141fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014163:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014168:	0f 95 c0             	setne  al
c001416b:	80 f9 05             	cmp    cl,0x5
c001416e:	0f 95 c2             	setne  dl
c0014171:	08 c2                	or     dl,al
c0014173:	74 79                	je     c00141ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014175:	84 c9                	test   cl,cl
c0014177:	75 05                	jne    c001417e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014179:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001417c:	eb 3c                	jmp    c00141ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001417e:	80 f9 01             	cmp    cl,0x1
c0014181:	75 05                	jne    c0014188 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0014183:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014186:	eb 32                	jmp    c00141ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014188:	80 f9 02             	cmp    cl,0x2
c001418b:	75 05                	jne    c0014192 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001418d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014190:	eb 28                	jmp    c00141ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014192:	31 c0                	xor    eax,eax
c0014194:	80 f9 03             	cmp    cl,0x3
c0014197:	75 05                	jne    c001419e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014199:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001419c:	eb 1c                	jmp    c00141ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001419e:	80 f9 05             	cmp    cl,0x5
c00141a1:	75 05                	jne    c00141a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00141a3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00141a6:	eb 12                	jmp    c00141ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00141a8:	80 f9 06             	cmp    cl,0x6
c00141ab:	75 05                	jne    c00141b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00141ad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00141b0:	eb 08                	jmp    c00141ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00141b2:	80 f9 07             	cmp    cl,0x7
c00141b5:	75 03                	jne    c00141ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00141b7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00141ba:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00141bf:	75 10                	jne    c00141d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00141c1:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00141c5:	b9 03 00 00 00       	mov    ecx,0x3
c00141ca:	01 d0                	add    eax,edx
c00141cc:	e9 37 01 00 00       	jmp    c0014308 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00141d1:	b9 02 00 00 00       	mov    ecx,0x2
c00141d6:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00141db:	0f 85 27 01 00 00    	jne    c0014308 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00141e1:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00141e4:	b9 06 00 00 00       	mov    ecx,0x6
c00141e9:	e9 1a 01 00 00       	jmp    c0014308 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00141ee:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00141f1:	b9 06 00 00 00       	mov    ecx,0x6
c00141f6:	e9 0f 01 00 00       	jmp    c001430a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00141fb:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00141fe:	88 ca                	mov    dl,cl
c0014200:	c0 ea 06             	shr    dl,0x6
c0014203:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0014207:	89 ca                	mov    edx,ecx
c0014209:	66 c1 ea 03          	shr    dx,0x3
c001420d:	83 e2 07             	and    edx,0x7
c0014210:	80 e1 07             	and    cl,0x7
c0014213:	75 05                	jne    c001421a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0014215:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0014218:	eb 4c                	jmp    c0014266 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001421a:	80 f9 01             	cmp    cl,0x1
c001421d:	75 05                	jne    c0014224 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001421f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014222:	eb 42                	jmp    c0014266 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014224:	80 f9 02             	cmp    cl,0x2
c0014227:	75 05                	jne    c001422e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0014229:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001422c:	eb 38                	jmp    c0014266 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001422e:	80 f9 03             	cmp    cl,0x3
c0014231:	75 05                	jne    c0014238 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0014233:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0014236:	eb 2e                	jmp    c0014266 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014238:	80 f9 04             	cmp    cl,0x4
c001423b:	75 12                	jne    c001424f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001423d:	f6 c4 60             	test   ah,0x60
c0014240:	75 08                	jne    c001424a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0014242:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0014245:	8d 78 14             	lea    edi,[eax+0x14]
c0014248:	eb 1c                	jmp    c0014266 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001424a:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001424d:	eb 17                	jmp    c0014266 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001424f:	80 f9 05             	cmp    cl,0x5
c0014252:	75 05                	jne    c0014259 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0014254:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014257:	eb 0d                	jmp    c0014266 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014259:	80 f9 06             	cmp    cl,0x6
c001425c:	75 05                	jne    c0014263 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001425e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014261:	eb 03                	jmp    c0014266 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014263:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014266:	84 d2                	test   dl,dl
c0014268:	75 05                	jne    c001426f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001426a:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001426d:	eb 3c                	jmp    c00142ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001426f:	80 fa 01             	cmp    dl,0x1
c0014272:	75 05                	jne    c0014279 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014274:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014277:	eb 32                	jmp    c00142ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014279:	80 fa 02             	cmp    dl,0x2
c001427c:	75 05                	jne    c0014283 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001427e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014281:	eb 28                	jmp    c00142ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014283:	80 fa 03             	cmp    dl,0x3
c0014286:	75 05                	jne    c001428d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014288:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001428b:	eb 1e                	jmp    c00142ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001428d:	31 c0                	xor    eax,eax
c001428f:	80 fa 04             	cmp    dl,0x4
c0014292:	74 17                	je     c00142ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014294:	80 fa 05             	cmp    dl,0x5
c0014297:	75 05                	jne    c001429e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014299:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001429c:	eb 0d                	jmp    c00142ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001429e:	80 fa 06             	cmp    dl,0x6
c00142a1:	75 05                	jne    c00142a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00142a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00142a6:	eb 03                	jmp    c00142ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00142a8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00142ab:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00142b0:	0f 94 c2             	sete   dl
c00142b3:	80 f9 05             	cmp    cl,0x5
c00142b6:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00142ba:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00142bf:	d3 e0                	shl    eax,cl
c00142c1:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00142c5:	74 0a                	je     c00142d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00142c7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00142ca:	b9 07 00 00 00       	mov    ecx,0x7
c00142cf:	eb 37                	jmp    c0014308 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00142d1:	01 f8                	add    eax,edi
c00142d3:	b9 03 00 00 00       	mov    ecx,0x3
c00142d8:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00142dd:	74 2b                	je     c001430a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142df:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00142e4:	75 0d                	jne    c00142f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00142e6:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00142ea:	01 c8                	add    eax,ecx
c00142ec:	b9 04 00 00 00       	mov    ecx,0x4
c00142f1:	eb 17                	jmp    c001430a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142f3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00142f6:	b9 07 00 00 00       	mov    ecx,0x7
c00142fb:	eb 0d                	jmp    c001430a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142fd:	b9 02 00 00 00       	mov    ecx,0x2
c0014302:	b2 01                	mov    dl,0x1
c0014304:	31 c0                	xor    eax,eax
c0014306:	eb 02                	jmp    c001430a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014308:	31 d2                	xor    edx,edx
c001430a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001430e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014310:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014314:	88 11                	mov    BYTE PTR [ecx],dl
c0014316:	5a                   	pop    edx
c0014317:	5b                   	pop    ebx
c0014318:	5e                   	pop    esi
c0014319:	5f                   	pop    edi
c001431a:	c3                   	ret    

c001431b <Krnl::smpEntry()>:
c001431b:	eb fe                	jmp    c001431b <Krnl::smpEntry()>

c001431d <Krnl::startCPU(int)>:
c001431d:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0014322:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014329:	0f 84 36 01 00 00    	je     c0014465 <Krnl::startCPU(int)+0x148>
c001432f:	53                   	push   ebx
c0014330:	83 ec 10             	sub    esp,0x10
c0014333:	fa                   	cli    
c0014334:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c001433a:	6a 1b                	push   0x1b
c001433c:	ff 35 68 7f 02 c0    	push   DWORD PTR ds:0xc0027f68
c0014342:	e8 e3 4b ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0014347:	25 00 f0 ff ff       	and    eax,0xfffff000
c001434c:	89 c3                	mov    ebx,eax
c001434e:	58                   	pop    eax
c001434f:	5a                   	pop    edx
c0014350:	53                   	push   ebx
c0014351:	68 88 5a 02 c0       	push   0xc0025a88
c0014356:	e8 a0 89 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001435b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014369:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014373:	c1 e0 18             	shl    eax,0x18
c0014376:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001437c:	83 c4 10             	add    esp,0x10
c001437f:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014385:	09 c2                	or     edx,eax
c0014387:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001438d:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014393:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014399:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001439f:	80 cd c5             	or     ch,0xc5
c00143a2:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00143a8:	f3 90                	pause  
c00143aa:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00143ac:	0f ba e1 0c          	bt     ecx,0xc
c00143b0:	72 f6                	jb     c00143a8 <Krnl::startCPU(int)+0x8b>
c00143b2:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00143b8:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00143be:	09 c1                	or     ecx,eax
c00143c0:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00143c6:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00143cc:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00143d2:	80 cd 85             	or     ch,0x85
c00143d5:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00143db:	f3 90                	pause  
c00143dd:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00143df:	0f ba e1 0c          	bt     ecx,0xc
c00143e3:	72 f6                	jb     c00143db <Krnl::startCPU(int)+0xbe>
c00143e5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00143ef:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00143f5:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00143fb:	09 c1                	or     ecx,eax
c00143fd:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014403:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014409:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001440f:	81 c9 02 06 00 00    	or     ecx,0x602
c0014415:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001441b:	f3 90                	pause  
c001441d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001441f:	0f ba e1 0c          	bt     ecx,0xc
c0014423:	72 f6                	jb     c001441b <Krnl::startCPU(int)+0xfe>
c0014425:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001442f:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014435:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001443b:	09 c8                	or     eax,ecx
c001443d:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014443:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014449:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001444e:	0d 02 06 00 00       	or     eax,0x602
c0014453:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014459:	f3 90                	pause  
c001445b:	8b 02                	mov    eax,DWORD PTR [edx]
c001445d:	0f ba e0 0c          	bt     eax,0xc
c0014461:	72 f6                	jb     c0014459 <Krnl::startCPU(int)+0x13c>
c0014463:	eb fe                	jmp    c0014463 <Krnl::startCPU(int)+0x146>
c0014465:	c3                   	ret    

c0014466 <Krnl::startCPUs()>:
c0014466:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c001446b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014471:	88 c2                	mov    dl,al
c0014473:	83 e2 0a             	and    edx,0xa
c0014476:	80 fa 0a             	cmp    dl,0xa
c0014479:	75 09                	jne    c0014484 <Krnl::startCPUs()+0x1e>
c001447b:	a8 01                	test   al,0x1
c001447d:	74 05                	je     c0014484 <Krnl::startCPUs()+0x1e>
c001447f:	e9 17 bd fe ff       	jmp    c000019b <prepareTramp>
c0014484:	c3                   	ret    
c0014485:	90                   	nop

c0014486 <EnvVarContainer::getEnv(char const*)>:
c0014486:	57                   	push   edi
c0014487:	56                   	push   esi
c0014488:	53                   	push   ebx
c0014489:	31 db                	xor    ebx,ebx
c001448b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001448f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014491:	7e 2b                	jle    c00144be <EnvVarContainer::getEnv(char const*)+0x38>
c0014493:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001449a:	50                   	push   eax
c001449b:	50                   	push   eax
c001449c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001449f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00144a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00144a6:	e8 21 c3 fe ff       	call   c00007cc <strcmp>
c00144ab:	83 c4 10             	add    esp,0x10
c00144ae:	85 c0                	test   eax,eax
c00144b0:	75 09                	jne    c00144bb <EnvVarContainer::getEnv(char const*)+0x35>
c00144b2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00144b5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00144b9:	eb 05                	jmp    c00144c0 <EnvVarContainer::getEnv(char const*)+0x3a>
c00144bb:	43                   	inc    ebx
c00144bc:	eb d1                	jmp    c001448f <EnvVarContainer::getEnv(char const*)+0x9>
c00144be:	31 c0                	xor    eax,eax
c00144c0:	5b                   	pop    ebx
c00144c1:	5e                   	pop    esi
c00144c2:	5f                   	pop    edi
c00144c3:	c3                   	ret    

c00144c4 <EnvVarContainer::setEnv(char const*, char const*)>:
c00144c4:	55                   	push   ebp
c00144c5:	57                   	push   edi
c00144c6:	56                   	push   esi
c00144c7:	53                   	push   ebx
c00144c8:	83 ec 28             	sub    esp,0x28
c00144cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00144cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00144d3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00144d7:	56                   	push   esi
c00144d8:	e8 c3 c1 fe ff       	call   c00006a0 <strlen>
c00144dd:	40                   	inc    eax
c00144de:	89 04 24             	mov    DWORD PTR [esp],eax
c00144e1:	e8 29 55 ff ff       	call   c0009a0f <malloc>
c00144e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144ed:	e8 ae c1 fe ff       	call   c00006a0 <strlen>
c00144f2:	40                   	inc    eax
c00144f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00144f6:	e8 14 55 ff ff       	call   c0009a0f <malloc>
c00144fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00144fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014502:	e8 99 c1 fe ff       	call   c00006a0 <strlen>
c0014507:	83 c4 0c             	add    esp,0xc
c001450a:	40                   	inc    eax
c001450b:	50                   	push   eax
c001450c:	6a 00                	push   0x0
c001450e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014512:	e8 6d c1 fe ff       	call   c0000684 <memset>
c0014517:	89 34 24             	mov    DWORD PTR [esp],esi
c001451a:	e8 81 c1 fe ff       	call   c00006a0 <strlen>
c001451f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014523:	8d 48 01             	lea    ecx,[eax+0x1]
c0014526:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014528:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001452b:	89 de                	mov    esi,ebx
c001452d:	e8 6e c1 fe ff       	call   c00006a0 <strlen>
c0014532:	83 c4 0c             	add    esp,0xc
c0014535:	40                   	inc    eax
c0014536:	50                   	push   eax
c0014537:	6a 00                	push   0x0
c0014539:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001453d:	e8 42 c1 fe ff       	call   c0000684 <memset>
c0014542:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014545:	e8 56 c1 fe ff       	call   c00006a0 <strlen>
c001454a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001454e:	8d 48 01             	lea    ecx,[eax+0x1]
c0014551:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014553:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014556:	40                   	inc    eax
c0014557:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001455a:	c1 e0 03             	shl    eax,0x3
c001455d:	5a                   	pop    edx
c001455e:	59                   	pop    ecx
c001455f:	50                   	push   eax
c0014560:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014563:	e8 93 54 ff ff       	call   c00099fb <realloc>
c0014568:	8d 74 24 18          	lea    esi,[esp+0x18]
c001456c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001456f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014572:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014576:	b9 08 00 00 00       	mov    ecx,0x8
c001457b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001457d:	83 c4 2c             	add    esp,0x2c
c0014580:	5b                   	pop    ebx
c0014581:	5e                   	pop    esi
c0014582:	5f                   	pop    edi
c0014583:	5d                   	pop    ebp
c0014584:	c3                   	ret    
c0014585:	90                   	nop

c0014586 <EnvVarContainer::deleteEnv(char const*)>:
c0014586:	c3                   	ret    
c0014587:	90                   	nop

c0014588 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014588:	55                   	push   ebp
c0014589:	57                   	push   edi
c001458a:	56                   	push   esi
c001458b:	53                   	push   ebx
c001458c:	81 ec 38 01 00 00    	sub    esp,0x138
c0014592:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014599:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00145a0:	68 14 01 00 00       	push   0x114
c00145a5:	e8 65 54 ff ff       	call   c0009a0f <malloc>
c00145aa:	83 c4 0c             	add    esp,0xc
c00145ad:	89 c3                	mov    ebx,eax
c00145af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00145b2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00145b9:	50                   	push   eax
c00145ba:	e8 a7 8c ff ff       	call   c000d266 <File::File(char const*, Process*)>
c00145bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145c2:	e8 e7 8f ff ff       	call   c000d5ae <File::exists()>
c00145c7:	83 c4 10             	add    esp,0x10
c00145ca:	84 c0                	test   al,al
c00145cc:	75 31                	jne    c00145ff <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00145ce:	50                   	push   eax
c00145cf:	50                   	push   eax
c00145d0:	6a 12                	push   0x12
c00145d2:	53                   	push   ebx
c00145d3:	e8 68 8d ff ff       	call   c000d340 <File::open(FileOpenMode)>
c00145d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145da:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00145dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00145e0:	e8 bb c0 fe ff       	call   c00006a0 <strlen>
c00145e5:	5a                   	pop    edx
c00145e6:	31 d2                	xor    edx,edx
c00145e8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00145ec:	51                   	push   ecx
c00145ed:	56                   	push   esi
c00145ee:	52                   	push   edx
c00145ef:	50                   	push   eax
c00145f0:	53                   	push   ebx
c00145f1:	ff d7                	call   edi
c00145f3:	83 c4 14             	add    esp,0x14
c00145f6:	53                   	push   ebx
c00145f7:	e8 a2 8d ff ff       	call   c000d39e <File::close()>
c00145fc:	83 c4 10             	add    esp,0x10
c00145ff:	56                   	push   esi
c0014600:	31 f6                	xor    esi,esi
c0014602:	68 00 01 00 00       	push   0x100
c0014607:	6a 00                	push   0x0
c0014609:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001460d:	50                   	push   eax
c001460e:	e8 71 c0 fe ff       	call   c0000684 <memset>
c0014613:	5f                   	pop    edi
c0014614:	58                   	pop    eax
c0014615:	6a 01                	push   0x1
c0014617:	53                   	push   ebx
c0014618:	e8 23 8d ff ff       	call   c000d340 <File::open(FileOpenMode)>
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014628:	83 ec 0c             	sub    esp,0xc
c001462b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001462d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014631:	51                   	push   ecx
c0014632:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014636:	52                   	push   edx
c0014637:	6a 00                	push   0x0
c0014639:	6a 01                	push   0x1
c001463b:	53                   	push   ebx
c001463c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001463f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014643:	83 c4 20             	add    esp,0x20
c0014646:	3c 0d                	cmp    al,0xd
c0014648:	0f 84 09 01 00 00    	je     c0014757 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001464e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014653:	0f 84 ef 00 00 00    	je     c0014748 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014659:	3c 0a                	cmp    al,0xa
c001465b:	74 13                	je     c0014670 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001465d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014662:	74 0c                	je     c0014670 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014664:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001466a:	0f 8e d8 00 00 00    	jle    c0014748 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014670:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014674:	83 ec 0c             	sub    esp,0xc
c0014677:	8d 78 01             	lea    edi,[eax+0x1]
c001467a:	57                   	push   edi
c001467b:	e8 8f 53 ff ff       	call   c0009a0f <malloc>
c0014680:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014684:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014688:	8d 56 04             	lea    edx,[esi+0x4]
c001468b:	89 14 24             	mov    DWORD PTR [esp],edx
c001468e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014692:	e8 78 53 ff ff       	call   c0009a0f <malloc>
c0014697:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001469b:	83 c4 0c             	add    esp,0xc
c001469e:	57                   	push   edi
c001469f:	6a 00                	push   0x0
c00146a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146a5:	e8 da bf fe ff       	call   c0000684 <memset>
c00146aa:	8d 74 24 30          	lea    esi,[esp+0x30]
c00146ae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00146b2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00146b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00146b8:	83 c4 0c             	add    esp,0xc
c00146bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00146bf:	52                   	push   edx
c00146c0:	6a 00                	push   0x0
c00146c2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00146c6:	e8 b9 bf fe ff       	call   c0000684 <memset>
c00146cb:	8d 74 24 30          	lea    esi,[esp+0x30]
c00146cf:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00146d3:	89 34 24             	mov    DWORD PTR [esp],esi
c00146d6:	e8 c5 bf fe ff       	call   c00006a0 <strlen>
c00146db:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00146df:	89 c1                	mov    ecx,eax
c00146e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00146e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00146e6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00146e9:	40                   	inc    eax
c00146ea:	83 c4 10             	add    esp,0x10
c00146ed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00146f0:	85 d2                	test   edx,edx
c00146f2:	75 0c                	jne    c0014700 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00146f4:	83 ec 0c             	sub    esp,0xc
c00146f7:	6a 08                	push   0x8
c00146f9:	e8 11 53 ff ff       	call   c0009a0f <malloc>
c00146fe:	eb 0c                	jmp    c001470c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014700:	c1 e0 03             	shl    eax,0x3
c0014703:	51                   	push   ecx
c0014704:	51                   	push   ecx
c0014705:	50                   	push   eax
c0014706:	52                   	push   edx
c0014707:	e8 ef 52 ff ff       	call   c00099fb <realloc>
c001470c:	83 c4 10             	add    esp,0x10
c001470f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014712:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014715:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014718:	8d 74 24 18          	lea    esi,[esp+0x18]
c001471c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014720:	b9 08 00 00 00       	mov    ecx,0x8
c0014725:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014727:	31 f6                	xor    esi,esi
c0014729:	50                   	push   eax
c001472a:	68 00 01 00 00       	push   0x100
c001472f:	6a 00                	push   0x0
c0014731:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014735:	50                   	push   eax
c0014736:	e8 49 bf fe ff       	call   c0000684 <memset>
c001473b:	83 c4 10             	add    esp,0x10
c001473e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014746:	eb 0f                	jmp    c0014757 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014748:	3c 3d                	cmp    al,0x3d
c001474a:	74 07                	je     c0014753 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001474c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014750:	46                   	inc    esi
c0014751:	eb 04                	jmp    c0014757 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014753:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014757:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001475c:	0f 85 c6 fe ff ff    	jne    c0014628 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014762:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014768:	5b                   	pop    ebx
c0014769:	5e                   	pop    esi
c001476a:	5f                   	pop    edi
c001476b:	5d                   	pop    ebp
c001476c:	c3                   	ret    
c001476d:	90                   	nop

c001476e <EnvVarContainer::__loadSystem()>:
c001476e:	83 ec 10             	sub    esp,0x10
c0014771:	68 40 79 02 c0       	push   0xc0027940
c0014776:	68 99 5a 02 c0       	push   0xc0025a99
c001477b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001477f:	e8 04 fe ff ff       	call   c0014588 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014784:	83 c4 1c             	add    esp,0x1c
c0014787:	c3                   	ret    

c0014788 <EnvVarContainer::__loadUser()>:
c0014788:	c3                   	ret    
c0014789:	90                   	nop

c001478a <EnvVarContainer::EnvVarContainer(Process*)>:
c001478a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001478e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001479c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001479f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00147aa:	90                   	nop
c00147ab:	c3                   	ret    

c00147ac <EnvVarContainer::~EnvVarContainer()>:
c00147ac:	83 ec 0c             	sub    esp,0xc
c00147af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00147b6:	85 c0                	test   eax,eax
c00147b8:	74 1d                	je     c00147d7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00147ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147be:	8b 00                	mov    eax,DWORD PTR [eax]
c00147c0:	85 c0                	test   eax,eax
c00147c2:	74 13                	je     c00147d7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00147c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00147cb:	83 ec 0c             	sub    esp,0xc
c00147ce:	50                   	push   eax
c00147cf:	e8 4b 52 ff ff       	call   c0009a1f <free>
c00147d4:	83 c4 10             	add    esp,0x10
c00147d7:	90                   	nop
c00147d8:	83 c4 0c             	add    esp,0xc
c00147db:	c3                   	ret    

c00147dc <Krnl::getEnv(Process*, char const*)>:
c00147dc:	53                   	push   ebx
c00147dd:	83 ec 08             	sub    esp,0x8
c00147e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00147e8:	39 05 b0 94 02 c0    	cmp    DWORD PTR ds:0xc00294b0,eax
c00147ee:	74 04                	je     c00147f4 <Krnl::getEnv(Process*, char const*)+0x18>
c00147f0:	85 c0                	test   eax,eax
c00147f2:	75 0b                	jne    c00147ff <Krnl::getEnv(Process*, char const*)+0x23>
c00147f4:	a1 34 8a 02 c0       	mov    eax,ds:0xc0028a34
c00147f9:	85 c0                	test   eax,eax
c00147fb:	75 19                	jne    c0014816 <Krnl::getEnv(Process*, char const*)+0x3a>
c00147fd:	eb 27                	jmp    c0014826 <Krnl::getEnv(Process*, char const*)+0x4a>
c00147ff:	52                   	push   edx
c0014800:	52                   	push   edx
c0014801:	53                   	push   ebx
c0014802:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014808:	e8 79 fc ff ff       	call   c0014486 <EnvVarContainer::getEnv(char const*)>
c001480d:	83 c4 10             	add    esp,0x10
c0014810:	85 c0                	test   eax,eax
c0014812:	75 28                	jne    c001483c <Krnl::getEnv(Process*, char const*)+0x60>
c0014814:	eb de                	jmp    c00147f4 <Krnl::getEnv(Process*, char const*)+0x18>
c0014816:	52                   	push   edx
c0014817:	52                   	push   edx
c0014818:	53                   	push   ebx
c0014819:	50                   	push   eax
c001481a:	e8 67 fc ff ff       	call   c0014486 <EnvVarContainer::getEnv(char const*)>
c001481f:	83 c4 10             	add    esp,0x10
c0014822:	85 c0                	test   eax,eax
c0014824:	75 16                	jne    c001483c <Krnl::getEnv(Process*, char const*)+0x60>
c0014826:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001482a:	a1 38 8a 02 c0       	mov    eax,ds:0xc0028a38
c001482f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014833:	83 c4 08             	add    esp,0x8
c0014836:	5b                   	pop    ebx
c0014837:	e9 4a fc ff ff       	jmp    c0014486 <EnvVarContainer::getEnv(char const*)>
c001483c:	83 c4 08             	add    esp,0x8
c001483f:	5b                   	pop    ebx
c0014840:	c3                   	ret    

c0014841 <Krnl::setEnvSystem(char const*, char const*)>:
c0014841:	83 ec 10             	sub    esp,0x10
c0014844:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014848:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001484c:	ff 35 38 8a 02 c0    	push   DWORD PTR ds:0xc0028a38
c0014852:	e8 6d fc ff ff       	call   c00144c4 <EnvVarContainer::setEnv(char const*, char const*)>
c0014857:	83 c4 1c             	add    esp,0x1c
c001485a:	c3                   	ret    

c001485b <Krnl::setEnvUser(char const*, char const*)>:
c001485b:	a1 34 8a 02 c0       	mov    eax,ds:0xc0028a34
c0014860:	85 c0                	test   eax,eax
c0014862:	74 15                	je     c0014879 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014864:	83 ec 10             	sub    esp,0x10
c0014867:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001486b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001486f:	50                   	push   eax
c0014870:	e8 4f fc ff ff       	call   c00144c4 <EnvVarContainer::setEnv(char const*, char const*)>
c0014875:	83 c4 1c             	add    esp,0x1c
c0014878:	c3                   	ret    
c0014879:	c3                   	ret    

c001487a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001487a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001487e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014884:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014888:	e9 37 fc ff ff       	jmp    c00144c4 <EnvVarContainer::setEnv(char const*, char const*)>

c001488d <Krnl::deleteEnvSystem(char const*)>:
c001488d:	c3                   	ret    

c001488e <Krnl::deleteEnvUser(char const*)>:
c001488e:	c3                   	ret    

c001488f <Krnl::deleteEnvProcess(Process*, char const*)>:
c001488f:	c3                   	ret    

c0014890 <Krnl::newProcessEnv(Process*)>:
c0014890:	83 ec 28             	sub    esp,0x28
c0014893:	6a 0c                	push   0xc
c0014895:	e8 75 51 ff ff       	call   c0009a0f <malloc>
c001489a:	5a                   	pop    edx
c001489b:	59                   	pop    ecx
c001489c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00148a0:	50                   	push   eax
c00148a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148a5:	e8 e0 fe ff ff       	call   c001478a <EnvVarContainer::EnvVarContainer(Process*)>
c00148aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148ae:	83 c4 2c             	add    esp,0x2c
c00148b1:	c3                   	ret    

c00148b2 <Krnl::copyProcessEnv(Process*, Process*)>:
c00148b2:	57                   	push   edi
c00148b3:	56                   	push   esi
c00148b4:	53                   	push   ebx
c00148b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148b9:	83 ec 0c             	sub    esp,0xc
c00148bc:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00148c2:	6a 0c                	push   0xc
c00148c4:	e8 46 51 ff ff       	call   c0009a0f <malloc>
c00148c9:	89 c3                	mov    ebx,eax
c00148cb:	58                   	pop    eax
c00148cc:	5a                   	pop    edx
c00148cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148d1:	53                   	push   ebx
c00148d2:	e8 b3 fe ff ff       	call   c001478a <EnvVarContainer::EnvVarContainer(Process*)>
c00148d7:	8b 07                	mov    eax,DWORD PTR [edi]
c00148d9:	89 03                	mov    DWORD PTR [ebx],eax
c00148db:	c1 e0 03             	shl    eax,0x3
c00148de:	89 04 24             	mov    DWORD PTR [esp],eax
c00148e1:	e8 29 51 ff ff       	call   c0009a0f <malloc>
c00148e6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00148e9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00148eb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00148ee:	c1 e1 03             	shl    ecx,0x3
c00148f1:	89 c7                	mov    edi,eax
c00148f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148f5:	83 c4 10             	add    esp,0x10
c00148f8:	89 d8                	mov    eax,ebx
c00148fa:	5b                   	pop    ebx
c00148fb:	5e                   	pop    esi
c00148fc:	5f                   	pop    edi
c00148fd:	c3                   	ret    

c00148fe <Krnl::loadSystemEnv()>:
c00148fe:	53                   	push   ebx
c00148ff:	83 ec 14             	sub    esp,0x14
c0014902:	6a 0c                	push   0xc
c0014904:	e8 06 51 ff ff       	call   c0009a0f <malloc>
c0014909:	89 c3                	mov    ebx,eax
c001490b:	58                   	pop    eax
c001490c:	5a                   	pop    edx
c001490d:	ff 35 b0 94 02 c0    	push   DWORD PTR ds:0xc00294b0
c0014913:	53                   	push   ebx
c0014914:	e8 71 fe ff ff       	call   c001478a <EnvVarContainer::EnvVarContainer(Process*)>
c0014919:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001491c:	89 1d 38 8a 02 c0    	mov    DWORD PTR ds:0xc0028a38,ebx
c0014922:	e8 47 fe ff ff       	call   c001476e <EnvVarContainer::__loadSystem()>
c0014927:	83 c4 18             	add    esp,0x18
c001492a:	5b                   	pop    ebx
c001492b:	c3                   	ret    

c001492c <Krnl::loadUserEnv()>:
c001492c:	53                   	push   ebx
c001492d:	83 ec 14             	sub    esp,0x14
c0014930:	6a 0c                	push   0xc
c0014932:	e8 d8 50 ff ff       	call   c0009a0f <malloc>
c0014937:	89 c3                	mov    ebx,eax
c0014939:	58                   	pop    eax
c001493a:	5a                   	pop    edx
c001493b:	ff 35 b0 94 02 c0    	push   DWORD PTR ds:0xc00294b0
c0014941:	53                   	push   ebx
c0014942:	e8 43 fe ff ff       	call   c001478a <EnvVarContainer::EnvVarContainer(Process*)>
c0014947:	89 1d 34 8a 02 c0    	mov    DWORD PTR ds:0xc0028a34,ebx
c001494d:	83 c4 18             	add    esp,0x18
c0014950:	5b                   	pop    ebx
c0014951:	c3                   	ret    

c0014952 <Krnl::flushEnv()>:
c0014952:	c3                   	ret    

c0014953 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014953:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014957:	8b 15 34 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a34
c001495d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014963:	a1 38 8a 02 c0       	mov    eax,ds:0xc0028a38
c0014968:	8b 00                	mov    eax,DWORD PTR [eax]
c001496a:	03 01                	add    eax,DWORD PTR [ecx]
c001496c:	85 d2                	test   edx,edx
c001496e:	74 02                	je     c0014972 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014970:	03 02                	add    eax,DWORD PTR [edx]
c0014972:	c3                   	ret    

c0014973 <Krnl::getProcessEnvPair(Process*, int)>:
c0014973:	57                   	push   edi
c0014974:	56                   	push   esi
c0014975:	8b 35 34 8a 02 c0    	mov    esi,DWORD PTR ds:0xc0028a34
c001497b:	53                   	push   ebx
c001497c:	85 f6                	test   esi,esi
c001497e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014982:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014986:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001498c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014990:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014992:	75 16                	jne    c00149aa <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014994:	39 c2                	cmp    edx,eax
c0014996:	7c 16                	jl     c00149ae <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014998:	8b 0d 38 8a 02 c0    	mov    ecx,DWORD PTR ds:0xc0028a38
c001499e:	8b 31                	mov    esi,DWORD PTR [ecx]
c00149a0:	01 c6                	add    esi,eax
c00149a2:	39 d6                	cmp    esi,edx
c00149a4:	7e 3c                	jle    c00149e2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00149a6:	29 c2                	sub    edx,eax
c00149a8:	eb 04                	jmp    c00149ae <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00149aa:	39 c2                	cmp    edx,eax
c00149ac:	7d 05                	jge    c00149b3 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00149ae:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00149b1:	eb 20                	jmp    c00149d3 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00149b3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00149b5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00149b8:	39 d1                	cmp    ecx,edx
c00149ba:	7e 04                	jle    c00149c0 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00149bc:	29 c2                	sub    edx,eax
c00149be:	eb 10                	jmp    c00149d0 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00149c0:	8b 35 38 8a 02 c0    	mov    esi,DWORD PTR ds:0xc0028a38
c00149c6:	03 0e                	add    ecx,DWORD PTR [esi]
c00149c8:	39 d1                	cmp    ecx,edx
c00149ca:	7e 16                	jle    c00149e2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00149cc:	29 c2                	sub    edx,eax
c00149ce:	29 fa                	sub    edx,edi
c00149d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00149d3:	8d 14 d0             	lea    edx,[eax+edx*8]
c00149d6:	8b 02                	mov    eax,DWORD PTR [edx]
c00149d8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00149db:	89 03                	mov    DWORD PTR [ebx],eax
c00149dd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00149e0:	eb 1d                	jmp    c00149ff <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00149e2:	83 ec 0c             	sub    esp,0xc
c00149e5:	68 bb 5a 02 c0       	push   0xc0025abb
c00149ea:	e8 18 00 00 00       	call   c0014a07 <Krnl::panic(char const*)>
c00149ef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00149f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00149fc:	83 c4 10             	add    esp,0x10
c00149ff:	89 d8                	mov    eax,ebx
c0014a01:	5b                   	pop    ebx
c0014a02:	5e                   	pop    esi
c0014a03:	5f                   	pop    edi
c0014a04:	c2 04 00             	ret    0x4

c0014a07 <Krnl::panic(char const*)>:
c0014a07:	55                   	push   ebp
c0014a08:	89 e5                	mov    ebp,esp
c0014a0a:	53                   	push   ebx
c0014a0b:	83 ec 0c             	sub    esp,0xc
c0014a0e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014a11:	fa                   	cli    
c0014a12:	c6 05 44 8a 02 c0 01 	mov    BYTE PTR ds:0xc0028a44,0x1
c0014a19:	53                   	push   ebx
c0014a1a:	68 d5 5a 02 c0       	push   0xc0025ad5
c0014a1f:	e8 d7 82 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014a24:	83 c4 0c             	add    esp,0xc
c0014a27:	6a 01                	push   0x1
c0014a29:	6a 0f                	push   0xf
c0014a2b:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014a31:	e8 32 5f ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014a36:	58                   	pop    eax
c0014a37:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014a3d:	e8 48 64 ff ff       	call   c000ae8a <VgaText::clearScreen()>
c0014a42:	58                   	pop    eax
c0014a43:	5a                   	pop    edx
c0014a44:	68 2c 5b 02 c0       	push   0xc0025b2c
c0014a49:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014a4f:	e8 54 5f ff ff       	call   c000a9a8 <VgaText::setTitle(char*)>
c0014a54:	83 c4 0c             	add    esp,0xc
c0014a57:	6a 01                	push   0x1
c0014a59:	6a 0f                	push   0xf
c0014a5b:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014a61:	e8 02 5f ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014a66:	59                   	pop    ecx
c0014a67:	58                   	pop    eax
c0014a68:	68 ee 5a 02 c0       	push   0xc0025aee
c0014a6d:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014a73:	e8 9e 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a78:	58                   	pop    eax
c0014a79:	5a                   	pop    edx
c0014a7a:	68 94 5b 02 c0       	push   0xc0025b94
c0014a7f:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014a85:	e8 8c 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a8a:	59                   	pop    ecx
c0014a8b:	58                   	pop    eax
c0014a8c:	68 0a 5b 02 c0       	push   0xc0025b0a
c0014a91:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014a97:	e8 7a 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a9c:	58                   	pop    eax
c0014a9d:	5a                   	pop    edx
c0014a9e:	53                   	push   ebx
c0014a9f:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014aa5:	e8 6c 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014aaa:	59                   	pop    ecx
c0014aab:	5b                   	pop    ebx
c0014aac:	68 2a 5b 02 c0       	push   0xc0025b2a
c0014ab1:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014ab7:	e8 5a 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014abc:	58                   	pop    eax
c0014abd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014ac0:	e8 c0 31 00 00       	call   c0017c85 <Thr::getDriverNameFromAddress(unsigned long)>
c0014ac5:	83 c4 10             	add    esp,0x10
c0014ac8:	85 c0                	test   eax,eax
c0014aca:	0f 84 df 01 00 00    	je     c0014caf <Krnl::panic(char const*)+0x2a8>
c0014ad0:	83 ec 08             	sub    esp,0x8
c0014ad3:	89 c3                	mov    ebx,eax
c0014ad5:	68 d0 5b 02 c0       	push   0xc0025bd0
c0014ada:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014ae0:	e8 31 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ae5:	58                   	pop    eax
c0014ae6:	5a                   	pop    edx
c0014ae7:	68 0a 5b 02 c0       	push   0xc0025b0a
c0014aec:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014af2:	e8 1f 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014af7:	59                   	pop    ecx
c0014af8:	58                   	pop    eax
c0014af9:	53                   	push   ebx
c0014afa:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014b00:	e8 11 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b05:	83 c4 10             	add    esp,0x10
c0014b08:	83 ec 08             	sub    esp,0x8
c0014b0b:	68 29 5b 02 c0       	push   0xc0025b29
c0014b10:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014b16:	e8 fb 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b1b:	58                   	pop    eax
c0014b1c:	5a                   	pop    edx
c0014b1d:	68 28 5c 02 c0       	push   0xc0025c28
c0014b22:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014b28:	e8 e9 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b2d:	59                   	pop    ecx
c0014b2e:	5b                   	pop    ebx
c0014b2f:	68 68 5c 02 c0       	push   0xc0025c68
c0014b34:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014b3a:	e8 d7 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b3f:	58                   	pop    eax
c0014b40:	5a                   	pop    edx
c0014b41:	68 15 5b 02 c0       	push   0xc0025b15
c0014b46:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014b4c:	e8 c5 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b51:	59                   	pop    ecx
c0014b52:	5b                   	pop    ebx
c0014b53:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014b56:	68 2d 5b 02 c0       	push   0xc0025b2d
c0014b5b:	e8 9b 81 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014b60:	58                   	pop    eax
c0014b61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b64:	5a                   	pop    edx
c0014b65:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014b68:	68 36 5b 02 c0       	push   0xc0025b36
c0014b6d:	e8 89 81 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014b72:	59                   	pop    ecx
c0014b73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b76:	5b                   	pop    ebx
c0014b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014b7c:	68 3f 5b 02 c0       	push   0xc0025b3f
c0014b81:	e8 75 81 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014b86:	58                   	pop    eax
c0014b87:	5a                   	pop    edx
c0014b88:	68 ac 5c 02 c0       	push   0xc0025cac
c0014b8d:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014b93:	e8 7e 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b98:	59                   	pop    ecx
c0014b99:	5b                   	pop    ebx
c0014b9a:	68 48 5b 02 c0       	push   0xc0025b48
c0014b9f:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014ba5:	e8 6c 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014baa:	0f 20 c0             	mov    eax,cr0
c0014bad:	5a                   	pop    edx
c0014bae:	59                   	pop    ecx
c0014baf:	50                   	push   eax
c0014bb0:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014bb6:	e8 15 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014bbb:	5b                   	pop    ebx
c0014bbc:	58                   	pop    eax
c0014bbd:	68 52 5b 02 c0       	push   0xc0025b52
c0014bc2:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014bc8:	e8 49 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bcd:	0f 20 d0             	mov    eax,cr2
c0014bd0:	5a                   	pop    edx
c0014bd1:	59                   	pop    ecx
c0014bd2:	50                   	push   eax
c0014bd3:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014bd9:	e8 f2 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014bde:	5b                   	pop    ebx
c0014bdf:	58                   	pop    eax
c0014be0:	68 5c 5b 02 c0       	push   0xc0025b5c
c0014be5:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014beb:	e8 26 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bf0:	0f 20 d8             	mov    eax,cr3
c0014bf3:	5a                   	pop    edx
c0014bf4:	59                   	pop    ecx
c0014bf5:	50                   	push   eax
c0014bf6:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014bfc:	e8 cf 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c01:	5b                   	pop    ebx
c0014c02:	58                   	pop    eax
c0014c03:	68 6f 5b 02 c0       	push   0xc0025b6f
c0014c08:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014c0e:	e8 03 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c13:	0f 20 e0             	mov    eax,cr4
c0014c16:	5a                   	pop    edx
c0014c17:	59                   	pop    ecx
c0014c18:	50                   	push   eax
c0014c19:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014c1f:	e8 ac 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c24:	5b                   	pop    ebx
c0014c25:	58                   	pop    eax
c0014c26:	68 79 5b 02 c0       	push   0xc0025b79
c0014c2b:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014c31:	e8 e0 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c36:	58                   	pop    eax
c0014c37:	5a                   	pop    edx
c0014c38:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014c3b:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014c41:	e8 8a 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c46:	59                   	pop    ecx
c0014c47:	5b                   	pop    ebx
c0014c48:	68 90 5b 02 c0       	push   0xc0025b90
c0014c4d:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014c53:	e8 be 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c58:	58                   	pop    eax
c0014c59:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c5c:	5a                   	pop    edx
c0014c5d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014c60:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014c66:	e8 65 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c6b:	59                   	pop    ecx
c0014c6c:	5b                   	pop    ebx
c0014c6d:	68 90 5b 02 c0       	push   0xc0025b90
c0014c72:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014c78:	e8 99 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c7d:	5a                   	pop    edx
c0014c7e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c81:	59                   	pop    ecx
c0014c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c84:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014c87:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014c8d:	e8 3e 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c92:	83 c4 10             	add    esp,0x10
c0014c95:	b2 fe                	mov    dl,0xfe
c0014c97:	e4 60                	in     al,0x60
c0014c99:	3c 1c                	cmp    al,0x1c
c0014c9b:	74 04                	je     c0014ca1 <Krnl::panic(char const*)+0x29a>
c0014c9d:	3c 5a                	cmp    al,0x5a
c0014c9f:	75 f6                	jne    c0014c97 <Krnl::panic(char const*)+0x290>
c0014ca1:	e4 64                	in     al,0x64
c0014ca3:	a8 02                	test   al,0x2
c0014ca5:	75 fa                	jne    c0014ca1 <Krnl::panic(char const*)+0x29a>
c0014ca7:	88 d0                	mov    al,dl
c0014ca9:	e6 64                	out    0x64,al
c0014cab:	fa                   	cli    
c0014cac:	f4                   	hlt    
c0014cad:	eb e8                	jmp    c0014c97 <Krnl::panic(char const*)+0x290>
c0014caf:	53                   	push   ebx
c0014cb0:	53                   	push   ebx
c0014cb1:	68 fc 5b 02 c0       	push   0xc0025bfc
c0014cb6:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014cbc:	e8 55 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014cc1:	58                   	pop    eax
c0014cc2:	5a                   	pop    edx
c0014cc3:	68 0a 5b 02 c0       	push   0xc0025b0a
c0014cc8:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014cce:	e8 43 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014cd3:	59                   	pop    ecx
c0014cd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cd9:	5b                   	pop    ebx
c0014cda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014cdd:	83 c0 0c             	add    eax,0xc
c0014ce0:	50                   	push   eax
c0014ce1:	ff 35 e4 7f 02 c0    	push   DWORD PTR ds:0xc0027fe4
c0014ce7:	e8 2a 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014cec:	83 c4 10             	add    esp,0x10
c0014cef:	e9 14 fe ff ff       	jmp    c0014b08 <Krnl::panic(char const*)+0x101>

c0014cf4 <Krnl::powerThread(void*)>:
c0014cf4:	53                   	push   ebx
c0014cf5:	83 ec 08             	sub    esp,0x8
c0014cf8:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0014cfd:	48                   	dec    eax
c0014cfe:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0014d03:	75 01                	jne    c0014d06 <Krnl::powerThread(void*)+0x12>
c0014d05:	fb                   	sti    
c0014d06:	52                   	push   edx
c0014d07:	52                   	push   edx
c0014d08:	ff 35 a4 8a 02 c0    	push   DWORD PTR ds:0xc0028aa4
c0014d0e:	68 d2 5c 02 c0       	push   0xc0025cd2
c0014d13:	e8 e3 7f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014d18:	59                   	pop    ecx
c0014d19:	8b 1d 94 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a94
c0014d1f:	58                   	pop    eax
c0014d20:	c6 05 60 8a 02 c0 00 	mov    BYTE PTR ds:0xc0028a60,0x0
c0014d27:	53                   	push   ebx
c0014d28:	68 dc 5c 02 c0       	push   0xc0025cdc
c0014d2d:	e8 c9 7f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014d32:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0014d39:	e8 86 3c 00 00       	call   c00189c4 <sleep(unsigned int)>
c0014d3e:	a1 a4 8a 02 c0       	mov    eax,ds:0xc0028aa4
c0014d43:	83 c4 10             	add    esp,0x10
c0014d46:	83 c0 0a             	add    eax,0xa
c0014d49:	85 db                	test   ebx,ebx
c0014d4b:	a3 a4 8a 02 c0       	mov    ds:0xc0028aa4,eax
c0014d50:	74 b4                	je     c0014d06 <Krnl::powerThread(void*)+0x12>
c0014d52:	39 d8                	cmp    eax,ebx
c0014d54:	7e b0                	jle    c0014d06 <Krnl::powerThread(void*)+0x12>
c0014d56:	83 ec 0c             	sub    esp,0xc
c0014d59:	68 f4 5c 02 c0       	push   0xc0025cf4
c0014d5e:	e8 98 7f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014d63:	58                   	pop    eax
c0014d64:	ff 35 68 7f 02 c0    	push   DWORD PTR ds:0xc0027f68
c0014d6a:	e8 4f 42 ff ff       	call   c0008fbe <Computer::sleep()>
c0014d6f:	83 c4 10             	add    esp,0x10
c0014d72:	eb 92                	jmp    c0014d06 <Krnl::powerThread(void*)+0x12>

c0014d74 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0014d74:	57                   	push   edi
c0014d75:	b9 09 00 00 00       	mov    ecx,0x9
c0014d7a:	56                   	push   esi
c0014d7b:	bf 80 8a 02 c0       	mov    edi,0xc0028a80
c0014d80:	fc                   	cld    
c0014d81:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014d85:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014d87:	5e                   	pop    esi
c0014d88:	5f                   	pop    edi
c0014d89:	c3                   	ret    

c0014d8a <Krnl::userIOReceived()>:
c0014d8a:	c7 05 a4 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028aa4,0x0
c0014d94:	c3                   	ret    

c0014d95 <Krnl::handlePowerButton()>:
c0014d95:	83 ec 0c             	sub    esp,0xc
c0014d98:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c0014d9d:	83 f8 02             	cmp    eax,0x2
c0014da0:	75 10                	jne    c0014db2 <Krnl::handlePowerButton()+0x1d>
c0014da2:	83 ec 0c             	sub    esp,0xc
c0014da5:	ff 35 68 7f 02 c0    	push   DWORD PTR ds:0xc0027f68
c0014dab:	e8 de 41 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014db0:	eb 11                	jmp    c0014dc3 <Krnl::handlePowerButton()+0x2e>
c0014db2:	48                   	dec    eax
c0014db3:	75 11                	jne    c0014dc6 <Krnl::handlePowerButton()+0x31>
c0014db5:	83 ec 0c             	sub    esp,0xc
c0014db8:	ff 35 68 7f 02 c0    	push   DWORD PTR ds:0xc0027f68
c0014dbe:	e8 fb 41 ff ff       	call   c0008fbe <Computer::sleep()>
c0014dc3:	83 c4 10             	add    esp,0x10
c0014dc6:	83 c4 0c             	add    esp,0xc
c0014dc9:	c3                   	ret    

c0014dca <Krnl::handleSleepButton()>:
c0014dca:	83 ec 0c             	sub    esp,0xc
c0014dcd:	a1 84 8a 02 c0       	mov    eax,ds:0xc0028a84
c0014dd2:	83 f8 02             	cmp    eax,0x2
c0014dd5:	75 10                	jne    c0014de7 <Krnl::handleSleepButton()+0x1d>
c0014dd7:	83 ec 0c             	sub    esp,0xc
c0014dda:	ff 35 68 7f 02 c0    	push   DWORD PTR ds:0xc0027f68
c0014de0:	e8 a9 41 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014de5:	eb 11                	jmp    c0014df8 <Krnl::handleSleepButton()+0x2e>
c0014de7:	48                   	dec    eax
c0014de8:	75 11                	jne    c0014dfb <Krnl::handleSleepButton()+0x31>
c0014dea:	83 ec 0c             	sub    esp,0xc
c0014ded:	ff 35 68 7f 02 c0    	push   DWORD PTR ds:0xc0027f68
c0014df3:	e8 c6 41 ff ff       	call   c0008fbe <Computer::sleep()>
c0014df8:	83 c4 10             	add    esp,0x10
c0014dfb:	83 c4 0c             	add    esp,0xc
c0014dfe:	c3                   	ret    

c0014dff <Krnl::setupPowerManager()>:
c0014dff:	83 ec 0c             	sub    esp,0xc
c0014e02:	c7 05 a4 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028aa4,0x0
c0014e0c:	68 f0 00 00 00       	push   0xf0
c0014e11:	c6 05 60 8a 02 c0 00 	mov    BYTE PTR ds:0xc0028a60,0x0
c0014e18:	6a 00                	push   0x0
c0014e1a:	68 f4 4c 01 c0       	push   0xc0014cf4
c0014e1f:	ff 35 b0 94 02 c0    	push   DWORD PTR ds:0xc00294b0
c0014e25:	e8 76 36 00 00       	call   c00184a0 <Process::createThread(void (*)(void*), void*, int)>
c0014e2a:	c7 05 80 8a 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028a80,0x2
c0014e34:	c7 05 84 8a 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028a84,0x1
c0014e3e:	c7 05 88 8a 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028a88,0x3
c0014e48:	c7 05 8c 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a8c,0x0
c0014e52:	c7 05 98 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a98,0x0
c0014e5c:	c7 05 90 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a90,0x0
c0014e66:	c7 05 9c 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a9c,0x0
c0014e70:	c7 05 94 8a 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028a94,0x3c
c0014e7a:	c7 05 a0 8a 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028aa0,0x3c
c0014e84:	83 c4 1c             	add    esp,0x1c
c0014e87:	c3                   	ret    

c0014e88 <Net::switchEndian16(unsigned short)>:
c0014e88:	83 ec 04             	sub    esp,0x4
c0014e8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e8f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014e93:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014e97:	c1 f8 08             	sar    eax,0x8
c0014e9a:	89 c2                	mov    edx,eax
c0014e9c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014ea0:	c1 e0 08             	shl    eax,0x8
c0014ea3:	09 d0                	or     eax,edx
c0014ea5:	83 c4 04             	add    esp,0x4
c0014ea8:	c3                   	ret    
c0014ea9:	8d 76 00             	lea    esi,[esi+0x0]

c0014eac <Net::switchEndian32(unsigned int)>:
c0014eac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014eb0:	c1 e8 18             	shr    eax,0x18
c0014eb3:	89 c2                	mov    edx,eax
c0014eb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014eb9:	c1 e0 08             	shl    eax,0x8
c0014ebc:	25 00 00 ff 00       	and    eax,0xff0000
c0014ec1:	09 c2                	or     edx,eax
c0014ec3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ec7:	c1 e8 08             	shr    eax,0x8
c0014eca:	25 00 ff 00 00       	and    eax,0xff00
c0014ecf:	09 c2                	or     edx,eax
c0014ed1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ed5:	c1 e0 18             	shl    eax,0x18
c0014ed8:	09 d0                	or     eax,edx
c0014eda:	c3                   	ret    
c0014edb:	90                   	nop

c0014edc <Net::crc32Calc(unsigned char*, int)>:
c0014edc:	83 ec 10             	sub    esp,0x10
c0014edf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014ee4:	75 0a                	jne    c0014ef0 <Net::crc32Calc(unsigned char*, int)+0x14>
c0014ee6:	b8 00 00 00 00       	mov    eax,0x0
c0014eeb:	e9 8c 00 00 00       	jmp    c0014f7c <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014ef0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ef5:	7f 09                	jg     c0014f00 <Net::crc32Calc(unsigned char*, int)+0x24>
c0014ef7:	b8 00 00 00 00       	mov    eax,0x0
c0014efc:	eb 7e                	jmp    c0014f7c <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014efe:	66 90                	xchg   ax,ax
c0014f00:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014f08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014f14:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014f18:	7d 5a                	jge    c0014f74 <Net::crc32Calc(unsigned char*, int)+0x98>
c0014f1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014f1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f22:	01 d0                	add    eax,edx
c0014f24:	8a 00                	mov    al,BYTE PTR [eax]
c0014f26:	0f b6 c0             	movzx  eax,al
c0014f29:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014f2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014f35:	8d 76 00             	lea    esi,[esi+0x0]
c0014f38:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014f3d:	7f 2d                	jg     c0014f6c <Net::crc32Calc(unsigned char*, int)+0x90>
c0014f3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f43:	83 e0 01             	and    eax,0x1
c0014f46:	74 10                	je     c0014f58 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f4c:	d1 e8                	shr    eax,1
c0014f4e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014f53:	eb 0b                	jmp    c0014f60 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014f55:	8d 76 00             	lea    esi,[esi+0x0]
c0014f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f5c:	d1 e8                	shr    eax,1
c0014f5e:	66 90                	xchg   ax,ax
c0014f60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f64:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014f68:	eb ce                	jmp    c0014f38 <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014f6a:	66 90                	xchg   ax,ax
c0014f6c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014f70:	eb 9e                	jmp    c0014f10 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014f72:	66 90                	xchg   ax,ax
c0014f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f78:	f7 d0                	not    eax
c0014f7a:	66 90                	xchg   ax,ax
c0014f7c:	83 c4 10             	add    esp,0x10
c0014f7f:	c3                   	ret    

c0014f80 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014f80:	57                   	push   edi
c0014f81:	56                   	push   esi
c0014f82:	53                   	push   ebx
c0014f83:	83 ec 60             	sub    esp,0x60
c0014f86:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f8d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014f91:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014f99:	8d 76 00             	lea    esi,[esi+0x0]
c0014f9c:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0014fa1:	7f 1d                	jg     c0014fc0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0014fa3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014faa:	8d 50 01             	lea    edx,[eax+0x1]
c0014fad:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014fb4:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0014fb7:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014fbb:	eb df                	jmp    c0014f9c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0014fc0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014fc7:	8d 50 01             	lea    edx,[eax+0x1]
c0014fca:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014fd1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014fd4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014fdb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014fdf:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014fe3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014fe7:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014fef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ff3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ffb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014fff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015003:	89 c6                	mov    esi,eax
c0015005:	89 d7                	mov    edi,edx
c0015007:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015009:	89 c8                	mov    eax,ecx
c001500b:	89 fa                	mov    edx,edi
c001500d:	89 f3                	mov    ebx,esi
c001500f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015017:	89 04 24             	mov    DWORD PTR [esp],eax
c001501a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015022:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015029:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001502d:	8d 44 24 78          	lea    eax,[esp+0x78]
c0015031:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015035:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001503d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015041:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015045:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015049:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001504d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015051:	89 c6                	mov    esi,eax
c0015053:	89 d7                	mov    edi,edx
c0015055:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015057:	89 c8                	mov    eax,ecx
c0015059:	89 fa                	mov    edx,edi
c001505b:	89 f3                	mov    ebx,esi
c001505d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015061:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015065:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015069:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015071:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015078:	0f b7 c0             	movzx  eax,ax
c001507b:	c1 f8 08             	sar    eax,0x8
c001507e:	89 c1                	mov    ecx,eax
c0015080:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015087:	8d 50 01             	lea    edx,[eax+0x1]
c001508a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015091:	88 ca                	mov    dl,cl
c0015093:	88 10                	mov    BYTE PTR [eax],dl
c0015095:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001509c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00150a3:	8d 48 01             	lea    ecx,[eax+0x1]
c00150a6:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00150ad:	88 10                	mov    BYTE PTR [eax],dl
c00150af:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00150b3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00150b7:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00150be:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c00150c2:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00150c6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00150ca:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00150ce:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00150d2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00150d6:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00150da:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00150de:	89 c6                	mov    esi,eax
c00150e0:	89 d7                	mov    edi,edx
c00150e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00150e4:	89 c8                	mov    eax,ecx
c00150e6:	89 fa                	mov    edx,edi
c00150e8:	89 f3                	mov    ebx,esi
c00150ea:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00150ee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00150f2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00150f6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00150fa:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015101:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015108:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001510c:	50                   	push   eax
c001510d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015111:	e8 c6 fd ff ff       	call   c0014edc <Net::crc32Calc(unsigned char*, int)>
c0015116:	83 c4 08             	add    esp,0x8
c0015119:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001511d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015121:	c1 e8 18             	shr    eax,0x18
c0015124:	89 c1                	mov    ecx,eax
c0015126:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001512d:	8d 50 01             	lea    edx,[eax+0x1]
c0015130:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015137:	88 ca                	mov    dl,cl
c0015139:	88 10                	mov    BYTE PTR [eax],dl
c001513b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001513f:	c1 e8 10             	shr    eax,0x10
c0015142:	89 c1                	mov    ecx,eax
c0015144:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001514b:	8d 50 01             	lea    edx,[eax+0x1]
c001514e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015155:	88 ca                	mov    dl,cl
c0015157:	88 10                	mov    BYTE PTR [eax],dl
c0015159:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001515d:	c1 e8 08             	shr    eax,0x8
c0015160:	89 c1                	mov    ecx,eax
c0015162:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015169:	8d 50 01             	lea    edx,[eax+0x1]
c001516c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015173:	88 ca                	mov    dl,cl
c0015175:	88 10                	mov    BYTE PTR [eax],dl
c0015177:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001517e:	8d 50 01             	lea    edx,[eax+0x1]
c0015181:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015188:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001518c:	88 10                	mov    BYTE PTR [eax],dl
c001518e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015192:	83 c4 60             	add    esp,0x60
c0015195:	5b                   	pop    ebx
c0015196:	5e                   	pop    esi
c0015197:	5f                   	pop    edi
c0015198:	c3                   	ret    
c0015199:	8d 76 00             	lea    esi,[esi+0x0]

c001519c <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001519c:	57                   	push   edi
c001519d:	56                   	push   esi
c001519e:	53                   	push   ebx
c001519f:	83 ec 70             	sub    esp,0x70
c00151a2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00151a9:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00151ad:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00151b5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00151bc:	83 c0 0e             	add    eax,0xe
c00151bf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00151c3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00151ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00151ce:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00151d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00151da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00151de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00151e6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00151ea:	89 c6                	mov    esi,eax
c00151ec:	89 d7                	mov    edi,edx
c00151ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00151f0:	89 c8                	mov    eax,ecx
c00151f2:	89 fa                	mov    edx,edi
c00151f4:	89 f3                	mov    ebx,esi
c00151f6:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00151fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00151fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015202:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001520a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015211:	83 c0 08             	add    eax,0x8
c0015214:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015218:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001521f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015223:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001522b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001522f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015233:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015237:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001523b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001523f:	89 c6                	mov    esi,eax
c0015241:	89 d7                	mov    edi,edx
c0015243:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015245:	89 c8                	mov    eax,ecx
c0015247:	89 fa                	mov    edx,edi
c0015249:	89 f3                	mov    ebx,esi
c001524b:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001524f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015253:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015257:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001525f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015266:	8d 50 01             	lea    edx,[eax+0x1]
c0015269:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015270:	8a 00                	mov    al,BYTE PTR [eax]
c0015272:	0f b6 c0             	movzx  eax,al
c0015275:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001527a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015281:	8d 50 01             	lea    edx,[eax+0x1]
c0015284:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001528b:	8a 00                	mov    al,BYTE PTR [eax]
c001528d:	0f b6 c0             	movzx  eax,al
c0015290:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0015295:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001529a:	c1 e0 08             	shl    eax,0x8
c001529d:	89 c2                	mov    edx,eax
c001529f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00152a3:	09 d0                	or     eax,edx
c00152a5:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00152ac:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c00152b0:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c00152b8:	75 46                	jne    c0015300 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c00152ba:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00152c1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00152c4:	66 3d dc 05          	cmp    ax,0x5dc
c00152c8:	77 16                	ja     c00152e0 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c00152ca:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00152d1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00152d4:	0f b7 c0             	movzx  eax,ax
c00152d7:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c00152de:	eb 20                	jmp    c0015300 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c00152e0:	83 ec 0c             	sub    esp,0xc
c00152e3:	68 04 5d 02 c0       	push   0xc0025d04
c00152e8:	e8 0e 7a ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00152ed:	83 c4 10             	add    esp,0x10
c00152f0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00152f7:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c00152fb:	e9 18 01 00 00       	jmp    c0015418 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015300:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015307:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001530e:	8b 12                	mov    edx,DWORD PTR [edx]
c0015310:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015314:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001531b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001531f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015323:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015327:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001532b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001532f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015333:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015337:	89 c6                	mov    esi,eax
c0015339:	89 d7                	mov    edi,edx
c001533b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001533d:	89 c8                	mov    eax,ecx
c001533f:	89 fa                	mov    edx,edi
c0015341:	89 f3                	mov    ebx,esi
c0015343:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015347:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001534b:	89 04 24             	mov    DWORD PTR [esp],eax
c001534e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015355:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001535c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015363:	8d 50 01             	lea    edx,[eax+0x1]
c0015366:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001536d:	8a 00                	mov    al,BYTE PTR [eax]
c001536f:	0f b6 c0             	movzx  eax,al
c0015372:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0015376:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001537d:	8d 50 01             	lea    edx,[eax+0x1]
c0015380:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015387:	8a 00                	mov    al,BYTE PTR [eax]
c0015389:	0f b6 c0             	movzx  eax,al
c001538c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015390:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015397:	8d 50 01             	lea    edx,[eax+0x1]
c001539a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00153a1:	8a 00                	mov    al,BYTE PTR [eax]
c00153a3:	0f b6 c0             	movzx  eax,al
c00153a6:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00153aa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00153b1:	8d 50 01             	lea    edx,[eax+0x1]
c00153b4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00153bb:	8a 00                	mov    al,BYTE PTR [eax]
c00153bd:	0f b6 c0             	movzx  eax,al
c00153c0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00153c4:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00153c8:	c1 e0 18             	shl    eax,0x18
c00153cb:	89 c2                	mov    edx,eax
c00153cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00153d1:	c1 e0 10             	shl    eax,0x10
c00153d4:	09 c2                	or     edx,eax
c00153d6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00153da:	c1 e0 08             	shl    eax,0x8
c00153dd:	09 d0                	or     eax,edx
c00153df:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c00153e3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00153e7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00153ee:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00153f2:	83 e8 04             	sub    eax,0x4
c00153f5:	83 ec 08             	sub    esp,0x8
c00153f8:	50                   	push   eax
c00153f9:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00153fd:	e8 da fa ff ff       	call   c0014edc <Net::crc32Calc(unsigned char*, int)>
c0015402:	83 c4 10             	add    esp,0x10
c0015405:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015409:	0f 94 c2             	sete   dl
c001540c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015413:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015416:	90                   	nop
c0015417:	90                   	nop
c0015418:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001541f:	83 c4 70             	add    esp,0x70
c0015422:	5b                   	pop    ebx
c0015423:	5e                   	pop    esi
c0015424:	5f                   	pop    edi
c0015425:	c2 04 00             	ret    0x4

c0015428 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015428:	55                   	push   ebp
c0015429:	57                   	push   edi
c001542a:	56                   	push   esi
c001542b:	53                   	push   ebx
c001542c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015432:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015439:	8a 1e                	mov    bl,BYTE PTR [esi]
c001543b:	8d 6e 01             	lea    ebp,[esi+0x1]
c001543e:	80 fb 40             	cmp    bl,0x40
c0015441:	75 1b                	jne    c001545e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015443:	8a 16                	mov    dl,BYTE PTR [esi]
c0015445:	84 d2                	test   dl,dl
c0015447:	0f 84 f1 00 00 00    	je     c001553e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001544d:	8d 46 01             	lea    eax,[esi+0x1]
c0015450:	80 fa 3a             	cmp    dl,0x3a
c0015453:	74 04                	je     c0015459 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015455:	89 c6                	mov    esi,eax
c0015457:	eb ea                	jmp    c0015443 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015459:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001545c:	89 c6                	mov    esi,eax
c001545e:	50                   	push   eax
c001545f:	6a 40                	push   0x40
c0015461:	6a 00                	push   0x0
c0015463:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015467:	50                   	push   eax
c0015468:	e8 17 b2 fe ff       	call   c0000684 <memset>
c001546d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015474:	31 c0                	xor    eax,eax
c0015476:	83 c4 10             	add    esp,0x10
c0015479:	8a 0f                	mov    cl,BYTE PTR [edi]
c001547b:	84 c9                	test   cl,cl
c001547d:	0f 84 bb 00 00 00    	je     c001553e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015483:	3d c7 00 00 00       	cmp    eax,0xc7
c0015488:	0f 8f b0 00 00 00    	jg     c001553e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001548e:	80 f9 0a             	cmp    cl,0xa
c0015491:	0f 85 98 00 00 00    	jne    c001552f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015497:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001549c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00154a0:	a8 df                	test   al,0xdf
c00154a2:	0f 94 c1             	sete   cl
c00154a5:	3c 23                	cmp    al,0x23
c00154a7:	0f 94 c2             	sete   dl
c00154aa:	08 d1                	or     cl,dl
c00154ac:	75 4a                	jne    c00154f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00154ae:	8d 50 f7             	lea    edx,[eax-0x9]
c00154b1:	80 fa 01             	cmp    dl,0x1
c00154b4:	76 42                	jbe    c00154f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00154b6:	3c 5b                	cmp    al,0x5b
c00154b8:	75 42                	jne    c00154fc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00154ba:	80 fb 40             	cmp    bl,0x40
c00154bd:	75 39                	jne    c00154f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00154bf:	83 ec 0c             	sub    esp,0xc
c00154c2:	8d 54 24 65          	lea    edx,[esp+0x65]
c00154c6:	52                   	push   edx
c00154c7:	e8 d4 b1 fe ff       	call   c00006a0 <strlen>
c00154cc:	83 c4 10             	add    esp,0x10
c00154cf:	83 f8 3f             	cmp    eax,0x3f
c00154d2:	77 6a                	ja     c001553e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154d4:	50                   	push   eax
c00154d5:	50                   	push   eax
c00154d6:	8d 54 24 61          	lea    edx,[esp+0x61]
c00154da:	52                   	push   edx
c00154db:	8d 54 24 24          	lea    edx,[esp+0x24]
c00154df:	52                   	push   edx
c00154e0:	e8 5b b2 fe ff       	call   c0000740 <strcpy>
c00154e5:	58                   	pop    eax
c00154e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00154ea:	52                   	push   edx
c00154eb:	e8 b0 b1 fe ff       	call   c00006a0 <strlen>
c00154f0:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00154f5:	83 c4 10             	add    esp,0x10
c00154f8:	31 d2                	xor    edx,edx
c00154fa:	eb 3a                	jmp    c0015536 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00154fc:	80 fb 40             	cmp    bl,0x40
c00154ff:	74 06                	je     c0015507 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015501:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015505:	eb 20                	jmp    c0015527 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015507:	50                   	push   eax
c0015508:	50                   	push   eax
c0015509:	55                   	push   ebp
c001550a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001550e:	50                   	push   eax
c001550f:	e8 b8 b2 fe ff       	call   c00007cc <strcmp>
c0015514:	83 c4 10             	add    esp,0x10
c0015517:	85 c0                	test   eax,eax
c0015519:	75 dd                	jne    c00154f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001551b:	eb e4                	jmp    c0015501 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001551d:	8d 50 01             	lea    edx,[eax+0x1]
c0015520:	80 f9 3d             	cmp    cl,0x3d
c0015523:	74 1d                	je     c0015542 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015525:	89 d0                	mov    eax,edx
c0015527:	8a 08                	mov    cl,BYTE PTR [eax]
c0015529:	84 c9                	test   cl,cl
c001552b:	75 f0                	jne    c001551d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001552d:	eb 0f                	jmp    c001553e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001552f:	8d 50 01             	lea    edx,[eax+0x1]
c0015532:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015536:	47                   	inc    edi
c0015537:	89 d0                	mov    eax,edx
c0015539:	e9 3b ff ff ff       	jmp    c0015479 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001553e:	31 c0                	xor    eax,eax
c0015540:	eb 33                	jmp    c0015575 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015542:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015546:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015549:	50                   	push   eax
c001554a:	50                   	push   eax
c001554b:	8d 44 24 60          	lea    eax,[esp+0x60]
c001554f:	50                   	push   eax
c0015550:	56                   	push   esi
c0015551:	e8 76 b2 fe ff       	call   c00007cc <strcmp>
c0015556:	83 c4 10             	add    esp,0x10
c0015559:	85 c0                	test   eax,eax
c001555b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001555f:	75 97                	jne    c00154f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015561:	51                   	push   ecx
c0015562:	51                   	push   ecx
c0015563:	52                   	push   edx
c0015564:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001556b:	e8 d0 b1 fe ff       	call   c0000740 <strcpy>
c0015570:	83 c4 10             	add    esp,0x10
c0015573:	b0 01                	mov    al,0x1
c0015575:	81 c4 2c 01 00 00    	add    esp,0x12c
c001557b:	5b                   	pop    ebx
c001557c:	5e                   	pop    esi
c001557d:	5f                   	pop    edi
c001557e:	5d                   	pop    ebp
c001557f:	c3                   	ret    

c0015580 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015580:	57                   	push   edi
c0015581:	56                   	push   esi
c0015582:	53                   	push   ebx
c0015583:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015589:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015590:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015597:	53                   	push   ebx
c0015598:	e8 03 b1 fe ff       	call   c00006a0 <strlen>
c001559d:	89 34 24             	mov    DWORD PTR [esp],esi
c00155a0:	89 c7                	mov    edi,eax
c00155a2:	e8 f9 b0 fe ff       	call   c00006a0 <strlen>
c00155a7:	83 c4 10             	add    esp,0x10
c00155aa:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00155ae:	3d ff 00 00 00       	cmp    eax,0xff
c00155b3:	0f 87 d3 00 00 00    	ja     c001568c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00155b9:	57                   	push   edi
c00155ba:	57                   	push   edi
c00155bb:	56                   	push   esi
c00155bc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00155c0:	56                   	push   esi
c00155c1:	e8 7a b1 fe ff       	call   c0000740 <strcpy>
c00155c6:	58                   	pop    eax
c00155c7:	5a                   	pop    edx
c00155c8:	68 a6 60 02 c0       	push   0xc00260a6
c00155cd:	56                   	push   esi
c00155ce:	e8 ad b2 fe ff       	call   c0000880 <strcat>
c00155d3:	59                   	pop    ecx
c00155d4:	5f                   	pop    edi
c00155d5:	53                   	push   ebx
c00155d6:	56                   	push   esi
c00155d7:	e8 a4 b2 fe ff       	call   c0000880 <strcat>
c00155dc:	58                   	pop    eax
c00155dd:	5a                   	pop    edx
c00155de:	68 50 5d 02 c0       	push   0xc0025d50
c00155e3:	56                   	push   esi
c00155e4:	e8 97 b2 fe ff       	call   c0000880 <strcat>
c00155e9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00155f0:	e8 1a 44 ff ff       	call   c0009a0f <malloc>
c00155f5:	83 c4 0c             	add    esp,0xc
c00155f8:	89 c3                	mov    ebx,eax
c00155fa:	ff 35 b0 94 02 c0    	push   DWORD PTR ds:0xc00294b0
c0015600:	56                   	push   esi
c0015601:	50                   	push   eax
c0015602:	e8 5f 7c ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0015607:	83 c4 10             	add    esp,0x10
c001560a:	85 db                	test   ebx,ebx
c001560c:	74 7e                	je     c001568c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001560e:	51                   	push   ecx
c001560f:	51                   	push   ecx
c0015610:	6a 01                	push   0x1
c0015612:	53                   	push   ebx
c0015613:	e8 28 7d ff ff       	call   c000d340 <File::open(FileOpenMode)>
c0015618:	83 c4 10             	add    esp,0x10
c001561b:	85 c0                	test   eax,eax
c001561d:	74 08                	je     c0015627 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001561f:	83 ec 0c             	sub    esp,0xc
c0015622:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015624:	53                   	push   ebx
c0015625:	eb 5f                	jmp    c0015686 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015627:	52                   	push   edx
c0015628:	8d 44 24 17          	lea    eax,[esp+0x17]
c001562c:	50                   	push   eax
c001562d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015631:	50                   	push   eax
c0015632:	53                   	push   ebx
c0015633:	e8 b4 7f ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c0015638:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001563c:	83 c4 10             	add    esp,0x10
c001563f:	89 c1                	mov    ecx,eax
c0015641:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015645:	74 31                	je     c0015678 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015647:	83 ec 0c             	sub    esp,0xc
c001564a:	50                   	push   eax
c001564b:	e8 bf 43 ff ff       	call   c0009a0f <malloc>
c0015650:	89 c6                	mov    esi,eax
c0015652:	58                   	pop    eax
c0015653:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015655:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015659:	52                   	push   edx
c001565a:	56                   	push   esi
c001565b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001565f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015663:	53                   	push   ebx
c0015664:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015667:	83 c4 20             	add    esp,0x20
c001566a:	85 c0                	test   eax,eax
c001566c:	75 0a                	jne    c0015678 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001566e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015672:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015676:	74 18                	je     c0015690 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015678:	83 ec 0c             	sub    esp,0xc
c001567b:	53                   	push   ebx
c001567c:	e8 1d 7d ff ff       	call   c000d39e <File::close()>
c0015681:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015683:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015686:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015689:	83 c4 10             	add    esp,0x10
c001568c:	31 c0                	xor    eax,eax
c001568e:	eb 3b                	jmp    c00156cb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015690:	83 ec 0c             	sub    esp,0xc
c0015693:	53                   	push   ebx
c0015694:	e8 05 7d ff ff       	call   c000d39e <File::close()>
c0015699:	8b 03                	mov    eax,DWORD PTR [ebx]
c001569b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001569e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156a1:	83 c4 0c             	add    esp,0xc
c00156a4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00156ab:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00156b2:	56                   	push   esi
c00156b3:	e8 70 fd ff ff       	call   c0015428 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00156b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00156bb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00156bf:	e8 5b 43 ff ff       	call   c0009a1f <free>
c00156c4:	83 c4 10             	add    esp,0x10
c00156c7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00156cb:	81 c4 20 01 00 00    	add    esp,0x120
c00156d1:	5b                   	pop    ebx
c00156d2:	5e                   	pop    esi
c00156d3:	5f                   	pop    edi
c00156d4:	c3                   	ret    

c00156d5 <Reg::getLine(char*, char*, char*)>:
c00156d5:	57                   	push   edi
c00156d6:	56                   	push   esi
c00156d7:	53                   	push   ebx
c00156d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156dc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00156e0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00156e4:	57                   	push   edi
c00156e5:	56                   	push   esi
c00156e6:	53                   	push   ebx
c00156e7:	68 55 5d 02 c0       	push   0xc0025d55
c00156ec:	e8 8f fe ff ff       	call   c0015580 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00156f1:	83 c4 10             	add    esp,0x10
c00156f4:	84 c0                	test   al,al
c00156f6:	75 10                	jne    c0015708 <Reg::getLine(char*, char*, char*)+0x33>
c00156f8:	57                   	push   edi
c00156f9:	56                   	push   esi
c00156fa:	53                   	push   ebx
c00156fb:	68 7a 5d 02 c0       	push   0xc0025d7a
c0015700:	e8 7b fe ff ff       	call   c0015580 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015705:	83 c4 10             	add    esp,0x10
c0015708:	5b                   	pop    ebx
c0015709:	5e                   	pop    esi
c001570a:	5f                   	pop    edi
c001570b:	c3                   	ret    

c001570c <Reg::readInt(char*, char*, int*)>:
c001570c:	55                   	push   ebp
c001570d:	57                   	push   edi
c001570e:	56                   	push   esi
c001570f:	53                   	push   ebx
c0015710:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015716:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001571a:	57                   	push   edi
c001571b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015722:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015729:	e8 a7 ff ff ff       	call   c00156d5 <Reg::getLine(char*, char*, char*)>
c001572e:	83 c4 10             	add    esp,0x10
c0015731:	84 c0                	test   al,al
c0015733:	0f 84 b3 00 00 00    	je     c00157ec <Reg::readInt(char*, char*, int*)+0xe0>
c0015739:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001573d:	80 fa 2b             	cmp    dl,0x2b
c0015740:	74 0c                	je     c001574e <Reg::readInt(char*, char*, int*)+0x42>
c0015742:	80 fa 2d             	cmp    dl,0x2d
c0015745:	75 0e                	jne    c0015755 <Reg::readInt(char*, char*, int*)+0x49>
c0015747:	ba 01 00 00 00       	mov    edx,0x1
c001574c:	eb 0b                	jmp    c0015759 <Reg::readInt(char*, char*, int*)+0x4d>
c001574e:	ba 01 00 00 00       	mov    edx,0x1
c0015753:	eb 02                	jmp    c0015757 <Reg::readInt(char*, char*, int*)+0x4b>
c0015755:	31 d2                	xor    edx,edx
c0015757:	31 c0                	xor    eax,eax
c0015759:	be 0a 00 00 00       	mov    esi,0xa
c001575e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015763:	75 20                	jne    c0015785 <Reg::readInt(char*, char*, int*)+0x79>
c0015765:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015769:	80 f9 78             	cmp    cl,0x78
c001576c:	75 0a                	jne    c0015778 <Reg::readInt(char*, char*, int*)+0x6c>
c001576e:	83 c2 02             	add    edx,0x2
c0015771:	be 10 00 00 00       	mov    esi,0x10
c0015776:	eb 0d                	jmp    c0015785 <Reg::readInt(char*, char*, int*)+0x79>
c0015778:	80 f9 62             	cmp    cl,0x62
c001577b:	75 08                	jne    c0015785 <Reg::readInt(char*, char*, int*)+0x79>
c001577d:	83 c2 02             	add    edx,0x2
c0015780:	be 02 00 00 00       	mov    esi,0x2
c0015785:	01 d7                	add    edi,edx
c0015787:	31 d2                	xor    edx,edx
c0015789:	8a 1f                	mov    bl,BYTE PTR [edi]
c001578b:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001578f:	80 fb 0d             	cmp    bl,0xd
c0015792:	0f 94 c3             	sete   bl
c0015795:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001579a:	0f 94 c1             	sete   cl
c001579d:	08 cb                	or     bl,cl
c001579f:	75 3a                	jne    c00157db <Reg::readInt(char*, char*, int*)+0xcf>
c00157a1:	0f af d6             	imul   edx,esi
c00157a4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00157a9:	83 fe 10             	cmp    esi,0x10
c00157ac:	75 26                	jne    c00157d4 <Reg::readInt(char*, char*, int*)+0xc8>
c00157ae:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00157b2:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00157b5:	89 e9                	mov    ecx,ebp
c00157b7:	80 f9 05             	cmp    cl,0x5
c00157ba:	77 06                	ja     c00157c2 <Reg::readInt(char*, char*, int*)+0xb6>
c00157bc:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00157c0:	eb 16                	jmp    c00157d8 <Reg::readInt(char*, char*, int*)+0xcc>
c00157c2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00157c6:	83 e9 61             	sub    ecx,0x61
c00157c9:	80 f9 05             	cmp    cl,0x5
c00157cc:	77 06                	ja     c00157d4 <Reg::readInt(char*, char*, int*)+0xc8>
c00157ce:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00157d2:	eb 04                	jmp    c00157d8 <Reg::readInt(char*, char*, int*)+0xcc>
c00157d4:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00157d8:	47                   	inc    edi
c00157d9:	eb ae                	jmp    c0015789 <Reg::readInt(char*, char*, int*)+0x7d>
c00157db:	84 c0                	test   al,al
c00157dd:	74 02                	je     c00157e1 <Reg::readInt(char*, char*, int*)+0xd5>
c00157df:	f7 da                	neg    edx
c00157e1:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00157e8:	89 10                	mov    DWORD PTR [eax],edx
c00157ea:	88 d8                	mov    al,bl
c00157ec:	81 c4 ec 00 00 00    	add    esp,0xec
c00157f2:	5b                   	pop    ebx
c00157f3:	5e                   	pop    esi
c00157f4:	5f                   	pop    edi
c00157f5:	5d                   	pop    ebp
c00157f6:	c3                   	ret    

c00157f7 <Reg::readString(char*, char*, char*, int)>:
c00157f7:	57                   	push   edi
c00157f8:	56                   	push   esi
c00157f9:	53                   	push   ebx
c00157fa:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015800:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015807:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001580b:	57                   	push   edi
c001580c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015813:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001581a:	e8 b6 fe ff ff       	call   c00156d5 <Reg::getLine(char*, char*, char*)>
c001581f:	83 c4 10             	add    esp,0x10
c0015822:	89 c6                	mov    esi,eax
c0015824:	84 c0                	test   al,al
c0015826:	74 44                	je     c001586c <Reg::readString(char*, char*, char*, int)+0x75>
c0015828:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001582f:	31 c0                	xor    eax,eax
c0015831:	4a                   	dec    edx
c0015832:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015835:	84 c9                	test   cl,cl
c0015837:	74 0f                	je     c0015848 <Reg::readString(char*, char*, char*, int)+0x51>
c0015839:	39 c2                	cmp    edx,eax
c001583b:	7e 0b                	jle    c0015848 <Reg::readString(char*, char*, char*, int)+0x51>
c001583d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015840:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015845:	40                   	inc    eax
c0015846:	eb ea                	jmp    c0015832 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015848:	83 ec 0c             	sub    esp,0xc
c001584b:	53                   	push   ebx
c001584c:	e8 4f ae fe ff       	call   c00006a0 <strlen>
c0015851:	83 c4 10             	add    esp,0x10
c0015854:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015859:	75 11                	jne    c001586c <Reg::readString(char*, char*, char*, int)+0x75>
c001585b:	83 ec 0c             	sub    esp,0xc
c001585e:	53                   	push   ebx
c001585f:	e8 3c ae fe ff       	call   c00006a0 <strlen>
c0015864:	83 c4 10             	add    esp,0x10
c0015867:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001586c:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015872:	89 f0                	mov    eax,esi
c0015874:	5b                   	pop    ebx
c0015875:	5e                   	pop    esi
c0015876:	5f                   	pop    edi
c0015877:	c3                   	ret    

c0015878 <Reg::readBool(char*, char*, bool*)>:
c0015878:	83 ec 20             	sub    esp,0x20
c001587b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001587f:	50                   	push   eax
c0015880:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015884:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015888:	e8 7f fe ff ff       	call   c001570c <Reg::readInt(char*, char*, int*)>
c001588d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015892:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015896:	0f 95 02             	setne  BYTE PTR [edx]
c0015899:	83 c4 2c             	add    esp,0x2c
c001589c:	c3                   	ret    

c001589d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001589d:	53                   	push   ebx
c001589e:	83 ec 1c             	sub    esp,0x1c
c00158a1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00158a5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00158a9:	50                   	push   eax
c00158aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158b2:	e8 c1 ff ff ff       	call   c0015878 <Reg::readBool(char*, char*, bool*)>
c00158b7:	83 c4 10             	add    esp,0x10
c00158ba:	84 c0                	test   al,al
c00158bc:	74 04                	je     c00158c2 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00158be:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00158c2:	88 d8                	mov    al,bl
c00158c4:	83 c4 18             	add    esp,0x18
c00158c7:	5b                   	pop    ebx
c00158c8:	c3                   	ret    

c00158c9 <Reg::readIntWithDefault(char*, char*, int)>:
c00158c9:	53                   	push   ebx
c00158ca:	83 ec 1c             	sub    esp,0x1c
c00158cd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00158d1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00158d5:	50                   	push   eax
c00158d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158de:	e8 29 fe ff ff       	call   c001570c <Reg::readInt(char*, char*, int*)>
c00158e3:	83 c4 10             	add    esp,0x10
c00158e6:	84 c0                	test   al,al
c00158e8:	74 04                	je     c00158ee <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00158ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00158ee:	89 d8                	mov    eax,ebx
c00158f0:	83 c4 18             	add    esp,0x18
c00158f3:	5b                   	pop    ebx
c00158f4:	c3                   	ret    

c00158f5 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00158f5:	57                   	push   edi
c00158f6:	56                   	push   esi
c00158f7:	56                   	push   esi
c00158f8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00158fc:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015900:	56                   	push   esi
c0015901:	57                   	push   edi
c0015902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001590a:	e8 e8 fe ff ff       	call   c00157f7 <Reg::readString(char*, char*, char*, int)>
c001590f:	83 c4 10             	add    esp,0x10
c0015912:	84 c0                	test   al,al
c0015914:	75 1a                	jne    c0015930 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015916:	51                   	push   ecx
c0015917:	56                   	push   esi
c0015918:	6a 00                	push   0x0
c001591a:	57                   	push   edi
c001591b:	e8 64 ad fe ff       	call   c0000684 <memset>
c0015920:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015923:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015927:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015929:	83 c4 10             	add    esp,0x10
c001592c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015930:	89 f8                	mov    eax,edi
c0015932:	5a                   	pop    edx
c0015933:	5e                   	pop    esi
c0015934:	5f                   	pop    edi
c0015935:	c3                   	ret    

c0015936 <Sys::eject(regs*)>:
c0015936:	83 ec 0c             	sub    esp,0xc
c0015939:	83 ca ff             	or     edx,0xffffffff
c001593c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015940:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015943:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015948:	83 e9 41             	sub    ecx,0x41
c001594b:	83 f9 19             	cmp    ecx,0x19
c001594e:	77 18                	ja     c0015968 <Sys::eject(regs*)+0x32>
c0015950:	8b 0c 8d 20 85 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7ae0]
c0015957:	85 c9                	test   ecx,ecx
c0015959:	74 0d                	je     c0015968 <Sys::eject(regs*)+0x32>
c001595b:	83 ec 0c             	sub    esp,0xc
c001595e:	51                   	push   ecx
c001595f:	e8 ba ab ff ff       	call   c001051e <LogicalDisk::eject()>
c0015964:	83 c4 10             	add    esp,0x10
c0015967:	99                   	cdq    
c0015968:	83 c4 0c             	add    esp,0xc
c001596b:	c3                   	ret    

c001596c <Sys::exit(regs*)>:
c001596c:	83 ec 18             	sub    esp,0x18
c001596f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015973:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015976:	e8 59 36 00 00       	call   c0018fd4 <terminateTask(int)>
c001597b:	83 c8 ff             	or     eax,0xffffffff
c001597e:	83 c4 1c             	add    esp,0x1c
c0015981:	89 c2                	mov    edx,eax
c0015983:	c3                   	ret    

c0015984 <Sys::getCwd(regs*)>:
c0015984:	83 ec 10             	sub    esp,0x10
c0015987:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001598b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001598e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015991:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015996:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015999:	e8 ca 76 ff ff       	call   c000d068 <Fs::getcwd(Process*, char*, int)>
c001599e:	83 c4 1c             	add    esp,0x1c
c00159a1:	99                   	cdq    
c00159a2:	c3                   	ret    

c00159a3 <Sys::getPID(regs*)>:
c00159a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00159ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ad:	99                   	cdq    
c00159ae:	c3                   	ret    

c00159af <Sys::getRAMData(regs*)>:
c00159af:	8b 0d 98 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f98
c00159b5:	69 05 94 7f 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0027f94,0xc8
c00159bf:	99                   	cdq    
c00159c0:	f7 f9                	idiv   ecx
c00159c2:	c1 e0 18             	shl    eax,0x18
c00159c5:	09 c8                	or     eax,ecx
c00159c7:	99                   	cdq    
c00159c8:	c3                   	ret    

c00159c9 <Sys::getVGAPtr(regs*)>:
c00159c9:	55                   	push   ebp
c00159ca:	57                   	push   edi
c00159cb:	56                   	push   esi
c00159cc:	53                   	push   ebx
c00159cd:	83 ec 18             	sub    esp,0x18
c00159d0:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00159d4:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00159d7:	e8 fc 30 00 00       	call   c0018ad8 <Thr::processFromPID(int)>
c00159dc:	83 c4 10             	add    esp,0x10
c00159df:	89 c1                	mov    ecx,eax
c00159e1:	b8 01 00 00 00       	mov    eax,0x1
c00159e6:	85 c9                	test   ecx,ecx
c00159e8:	74 59                	je     c0015a43 <Sys::getVGAPtr(regs*)+0x7a>
c00159ea:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00159f0:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00159f4:	74 0c                	je     c0015a02 <Sys::getVGAPtr(regs*)+0x39>
c00159f6:	83 ec 0c             	sub    esp,0xc
c00159f9:	53                   	push   ebx
c00159fa:	e8 0a 51 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c00159ff:	83 c4 10             	add    esp,0x10
c0015a02:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015a05:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015a08:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015a0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015a0f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015a12:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a15:	81 c3 82 00 00 00    	add    ebx,0x82
c0015a1b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015a21:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a24:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015a27:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015a2d:	50                   	push   eax
c0015a2e:	50                   	push   eax
c0015a2f:	53                   	push   ebx
c0015a30:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a33:	05 a8 0f 00 00       	add    eax,0xfa8
c0015a38:	50                   	push   eax
c0015a39:	e8 02 ad fe ff       	call   c0000740 <strcpy>
c0015a3e:	83 c4 10             	add    esp,0x10
c0015a41:	31 c0                	xor    eax,eax
c0015a43:	83 c4 0c             	add    esp,0xc
c0015a46:	31 d2                	xor    edx,edx
c0015a48:	5b                   	pop    ebx
c0015a49:	5e                   	pop    esi
c0015a4a:	5f                   	pop    edi
c0015a4b:	5d                   	pop    ebp
c0015a4c:	c3                   	ret    

c0015a4d <Sys::loadDLL(regs*)>:
c0015a4d:	56                   	push   esi
c0015a4e:	53                   	push   ebx
c0015a4f:	31 d2                	xor    edx,edx
c0015a51:	51                   	push   ecx
c0015a52:	b8 01 00 00 00       	mov    eax,0x1
c0015a57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a5b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015a5f:	0f 84 8c 00 00 00    	je     c0015af1 <Sys::loadDLL(regs*)+0xa4>
c0015a65:	83 ec 0c             	sub    esp,0xc
c0015a68:	68 14 01 00 00       	push   0x114
c0015a6d:	e8 9d 3f ff ff       	call   c0009a0f <malloc>
c0015a72:	83 c4 0c             	add    esp,0xc
c0015a75:	89 c3                	mov    ebx,eax
c0015a77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a7c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a7f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015a82:	53                   	push   ebx
c0015a83:	e8 de 77 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0015a88:	83 c4 10             	add    esp,0x10
c0015a8b:	31 d2                	xor    edx,edx
c0015a8d:	b8 02 00 00 00       	mov    eax,0x2
c0015a92:	85 db                	test   ebx,ebx
c0015a94:	74 5b                	je     c0015af1 <Sys::loadDLL(regs*)+0xa4>
c0015a96:	83 ec 0c             	sub    esp,0xc
c0015a99:	53                   	push   ebx
c0015a9a:	e8 0f 7b ff ff       	call   c000d5ae <File::exists()>
c0015a9f:	83 c4 10             	add    esp,0x10
c0015aa2:	84 c0                	test   al,al
c0015aa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015aa6:	75 11                	jne    c0015ab9 <Sys::loadDLL(regs*)+0x6c>
c0015aa8:	83 ec 0c             	sub    esp,0xc
c0015aab:	53                   	push   ebx
c0015aac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015aaf:	83 c4 10             	add    esp,0x10
c0015ab2:	b8 03 00 00 00       	mov    eax,0x3
c0015ab7:	eb 36                	jmp    c0015aef <Sys::loadDLL(regs*)+0xa2>
c0015ab9:	83 ec 0c             	sub    esp,0xc
c0015abc:	53                   	push   ebx
c0015abd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ac0:	58                   	pop    eax
c0015ac1:	5a                   	pop    edx
c0015ac2:	6a 00                	push   0x0
c0015ac4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015ac7:	e8 0a 22 00 00       	call   c0017cd6 <Thr::loadDLL(char const*, bool)>
c0015acc:	83 c4 10             	add    esp,0x10
c0015acf:	89 c1                	mov    ecx,eax
c0015ad1:	31 d2                	xor    edx,edx
c0015ad3:	b8 04 00 00 00       	mov    eax,0x4
c0015ad8:	85 c9                	test   ecx,ecx
c0015ada:	74 15                	je     c0015af1 <Sys::loadDLL(regs*)+0xa4>
c0015adc:	53                   	push   ebx
c0015add:	53                   	push   ebx
c0015ade:	ff 35 68 7f 02 c0    	push   DWORD PTR ds:0xc0027f68
c0015ae4:	51                   	push   ecx
c0015ae5:	e8 1d 24 00 00       	call   c0017f07 <Thr::executeDLL(unsigned long, void*)>
c0015aea:	83 c4 10             	add    esp,0x10
c0015aed:	31 c0                	xor    eax,eax
c0015aef:	31 d2                	xor    edx,edx
c0015af1:	59                   	pop    ecx
c0015af2:	5b                   	pop    ebx
c0015af3:	5e                   	pop    esi
c0015af4:	c3                   	ret    

c0015af5 <Sys::read(regs*)>:
c0015af5:	57                   	push   edi
c0015af6:	56                   	push   esi
c0015af7:	53                   	push   ebx
c0015af8:	83 ec 10             	sub    esp,0x10
c0015afb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015aff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015b02:	83 f8 02             	cmp    eax,0x2
c0015b05:	77 10                	ja     c0015b17 <Sys::read(regs*)+0x22>
c0015b07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b0c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b0f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015b15:	eb 0e                	jmp    c0015b25 <Sys::read(regs*)+0x30>
c0015b17:	83 ec 0c             	sub    esp,0xc
c0015b1a:	50                   	push   eax
c0015b1b:	e8 5f 5d ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0015b20:	83 c4 10             	add    esp,0x10
c0015b23:	89 c1                	mov    ecx,eax
c0015b25:	83 c8 ff             	or     eax,0xffffffff
c0015b28:	85 c9                	test   ecx,ecx
c0015b2a:	89 c2                	mov    edx,eax
c0015b2c:	74 28                	je     c0015b56 <Sys::read(regs*)+0x61>
c0015b2e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015b36:	31 ff                	xor    edi,edi
c0015b38:	83 ec 0c             	sub    esp,0xc
c0015b3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015b3d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015b41:	52                   	push   edx
c0015b42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b45:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015b48:	57                   	push   edi
c0015b49:	56                   	push   esi
c0015b4a:	51                   	push   ecx
c0015b4b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015b52:	83 c4 20             	add    esp,0x20
c0015b55:	99                   	cdq    
c0015b56:	83 c4 10             	add    esp,0x10
c0015b59:	5b                   	pop    ebx
c0015b5a:	5e                   	pop    esi
c0015b5b:	5f                   	pop    edi
c0015b5c:	c3                   	ret    

c0015b5d <Sys::sbrk(regs*)>:
c0015b5d:	56                   	push   esi
c0015b5e:	53                   	push   ebx
c0015b5f:	50                   	push   eax
c0015b60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b6c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015b6f:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015b75:	85 db                	test   ebx,ebx
c0015b77:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015b7a:	74 02                	je     c0015b7e <Sys::sbrk(regs*)+0x21>
c0015b7c:	79 06                	jns    c0015b84 <Sys::sbrk(regs*)+0x27>
c0015b7e:	89 f0                	mov    eax,esi
c0015b80:	31 d2                	xor    edx,edx
c0015b82:	eb 2a                	jmp    c0015bae <Sys::sbrk(regs*)+0x51>
c0015b84:	83 c8 ff             	or     eax,0xffffffff
c0015b87:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015b8d:	89 c2                	mov    edx,eax
c0015b8f:	77 1d                	ja     c0015bae <Sys::sbrk(regs*)+0x51>
c0015b91:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015b97:	50                   	push   eax
c0015b98:	c1 ea 0c             	shr    edx,0xc
c0015b9b:	68 07 0c 00 00       	push   0xc07
c0015ba0:	52                   	push   edx
c0015ba1:	51                   	push   ecx
c0015ba2:	e8 d7 65 ff ff       	call   c000c17e <VAS::allocatePages(int, int)>
c0015ba7:	89 f0                	mov    eax,esi
c0015ba9:	31 d2                	xor    edx,edx
c0015bab:	83 c4 10             	add    esp,0x10
c0015bae:	59                   	pop    ecx
c0015baf:	5b                   	pop    ebx
c0015bb0:	5e                   	pop    esi
c0015bb1:	c3                   	ret    

c0015bb2 <Sys::setCwd(regs*)>:
c0015bb2:	83 ec 14             	sub    esp,0x14
c0015bb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015bb9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015bbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bc1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015bc4:	e8 84 7a ff ff       	call   c000d64d <Fs::setcwd(Process*, char*)>
c0015bc9:	83 c4 1c             	add    esp,0x1c
c0015bcc:	99                   	cdq    
c0015bcd:	c3                   	ret    

c0015bce <Sys::setTime(regs*)>:
c0015bce:	55                   	push   ebp
c0015bcf:	31 c9                	xor    ecx,ecx
c0015bd1:	57                   	push   edi
c0015bd2:	bd 0c 00 00 00       	mov    ebp,0xc
c0015bd7:	56                   	push   esi
c0015bd8:	53                   	push   ebx
c0015bd9:	31 db                	xor    ebx,ebx
c0015bdb:	83 ec 10             	sub    esp,0x10
c0015bde:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015be2:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015be5:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015be8:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015beb:	89 c2                	mov    edx,eax
c0015bed:	66 81 ef 6c 07       	sub    di,0x76c
c0015bf2:	83 e2 1f             	and    edx,0x1f
c0015bf5:	c1 e7 10             	shl    edi,0x10
c0015bf8:	42                   	inc    edx
c0015bf9:	c1 e8 05             	shr    eax,0x5
c0015bfc:	88 d1                	mov    cl,dl
c0015bfe:	31 d2                	xor    edx,edx
c0015c00:	f7 f5                	div    ebp
c0015c02:	89 dd                	mov    ebp,ebx
c0015c04:	88 d5                	mov    ch,dl
c0015c06:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015c0c:	0f b7 c1             	movzx  eax,cx
c0015c0f:	31 d2                	xor    edx,edx
c0015c11:	09 f8                	or     eax,edi
c0015c13:	bf 3c 00 00 00       	mov    edi,0x3c
c0015c18:	89 c1                	mov    ecx,eax
c0015c1a:	89 f0                	mov    eax,esi
c0015c1c:	f7 f7                	div    edi
c0015c1e:	c1 e2 10             	shl    edx,0x10
c0015c21:	09 d5                	or     ebp,edx
c0015c23:	31 d2                	xor    edx,edx
c0015c25:	89 eb                	mov    ebx,ebp
c0015c27:	f7 f7                	div    edi
c0015c29:	bf 10 0e 00 00       	mov    edi,0xe10
c0015c2e:	88 d7                	mov    bh,dl
c0015c30:	89 f0                	mov    eax,esi
c0015c32:	31 d2                	xor    edx,edx
c0015c34:	f7 f7                	div    edi
c0015c36:	bf 18 00 00 00       	mov    edi,0x18
c0015c3b:	31 d2                	xor    edx,edx
c0015c3d:	f7 f7                	div    edi
c0015c3f:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0015c44:	88 d3                	mov    bl,dl
c0015c46:	53                   	push   ebx
c0015c47:	51                   	push   ecx
c0015c48:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015c4e:	e8 fb 82 ff ff       	call   c000df4e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015c53:	83 c4 1c             	add    esp,0x1c
c0015c56:	83 f0 01             	xor    eax,0x1
c0015c59:	5b                   	pop    ebx
c0015c5a:	0f b6 c0             	movzx  eax,al
c0015c5d:	5e                   	pop    esi
c0015c5e:	31 d2                	xor    edx,edx
c0015c60:	5f                   	pop    edi
c0015c61:	5d                   	pop    ebp
c0015c62:	c3                   	ret    

c0015c63 <Sys::timezone(regs*)>:
c0015c63:	53                   	push   ebx
c0015c64:	83 ec 08             	sub    esp,0x8
c0015c67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c6b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015c6f:	75 17                	jne    c0015c88 <Sys::timezone(regs*)+0x25>
c0015c71:	83 ec 0c             	sub    esp,0xc
c0015c74:	68 95 5d 02 c0       	push   0xc0025d95
c0015c79:	e8 7d 70 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0015c7e:	83 c8 ff             	or     eax,0xffffffff
c0015c81:	83 c4 10             	add    esp,0x10
c0015c84:	89 c2                	mov    edx,eax
c0015c86:	eb 20                	jmp    c0015ca8 <Sys::timezone(regs*)+0x45>
c0015c88:	83 ec 0c             	sub    esp,0xc
c0015c8b:	68 aa 5d 02 c0       	push   0xc0025daa
c0015c90:	e8 66 70 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0015c95:	58                   	pop    eax
c0015c96:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015c99:	e8 12 80 ff ff       	call   c000dcb0 <User::loadClockSettings(int)>
c0015c9e:	83 c4 10             	add    esp,0x10
c0015ca1:	b8 01 00 00 00       	mov    eax,0x1
c0015ca6:	31 d2                	xor    edx,edx
c0015ca8:	83 c4 08             	add    esp,0x8
c0015cab:	5b                   	pop    ebx
c0015cac:	c3                   	ret    

c0015cad <Sys::write(regs*)>:
c0015cad:	57                   	push   edi
c0015cae:	56                   	push   esi
c0015caf:	53                   	push   ebx
c0015cb0:	83 ec 10             	sub    esp,0x10
c0015cb3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015cb7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015cba:	83 f8 02             	cmp    eax,0x2
c0015cbd:	77 10                	ja     c0015ccf <Sys::write(regs*)+0x22>
c0015cbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015cc7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015ccd:	eb 0e                	jmp    c0015cdd <Sys::write(regs*)+0x30>
c0015ccf:	83 ec 0c             	sub    esp,0xc
c0015cd2:	50                   	push   eax
c0015cd3:	e8 a7 5b ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0015cd8:	83 c4 10             	add    esp,0x10
c0015cdb:	89 c1                	mov    ecx,eax
c0015cdd:	83 c8 ff             	or     eax,0xffffffff
c0015ce0:	85 c9                	test   ecx,ecx
c0015ce2:	89 c2                	mov    edx,eax
c0015ce4:	74 28                	je     c0015d0e <Sys::write(regs*)+0x61>
c0015ce6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015cee:	31 ff                	xor    edi,edi
c0015cf0:	83 ec 0c             	sub    esp,0xc
c0015cf3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015cf5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015cf9:	52                   	push   edx
c0015cfa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015cfd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015d00:	57                   	push   edi
c0015d01:	56                   	push   esi
c0015d02:	51                   	push   ecx
c0015d03:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015d06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d0a:	83 c4 20             	add    esp,0x20
c0015d0d:	99                   	cdq    
c0015d0e:	83 c4 10             	add    esp,0x10
c0015d11:	5b                   	pop    ebx
c0015d12:	5e                   	pop    esi
c0015d13:	5f                   	pop    edi
c0015d14:	c3                   	ret    

c0015d15 <Sys::wsbe(regs*)>:
c0015d15:	57                   	push   edi
c0015d16:	b9 0b 00 00 00       	mov    ecx,0xb
c0015d1b:	56                   	push   esi
c0015d1c:	be e9 5d 02 c0       	mov    esi,0xc0025de9
c0015d21:	53                   	push   ebx
c0015d22:	83 ec 30             	sub    esp,0x30
c0015d25:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015d29:	fc                   	cld    
c0015d2a:	83 ec 0c             	sub    esp,0xc
c0015d2d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015d2f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015d33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d3b:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015d41:	8b 06                	mov    eax,DWORD PTR [esi]
c0015d43:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015d46:	57                   	push   edi
c0015d47:	e8 54 a9 fe ff       	call   c00006a0 <strlen>
c0015d4c:	5a                   	pop    edx
c0015d4d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015d51:	52                   	push   edx
c0015d52:	31 d2                	xor    edx,edx
c0015d54:	57                   	push   edi
c0015d55:	52                   	push   edx
c0015d56:	50                   	push   eax
c0015d57:	56                   	push   esi
c0015d58:	ff d3                	call   ebx
c0015d5a:	83 c4 14             	add    esp,0x14
c0015d5d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015d61:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015d64:	e8 6b 32 00 00       	call   c0018fd4 <terminateTask(int)>
c0015d69:	83 c4 40             	add    esp,0x40
c0015d6c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015d71:	5b                   	pop    ebx
c0015d72:	31 d2                	xor    edx,edx
c0015d74:	5e                   	pop    esi
c0015d75:	5f                   	pop    edi
c0015d76:	c3                   	ret    

c0015d77 <Sys::yield(regs*)>:
c0015d77:	83 ec 0c             	sub    esp,0xc
c0015d7a:	fa                   	cli    
c0015d7b:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0015d81:	e8 36 29 00 00       	call   c00186bc <schedule()>
c0015d86:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0015d8b:	48                   	dec    eax
c0015d8c:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0015d91:	75 01                	jne    c0015d94 <Sys::yield(regs*)+0x1d>
c0015d93:	fb                   	sti    
c0015d94:	8b 15 8c 85 02 c0    	mov    edx,DWORD PTR ds:0xc002858c
c0015d9a:	83 c4 0c             	add    esp,0xc
c0015d9d:	89 d0                	mov    eax,edx
c0015d9f:	c1 ea 11             	shr    edx,0x11
c0015da2:	c1 e0 07             	shl    eax,0x7
c0015da5:	25 80 30 0f 00       	and    eax,0xf3080
c0015daa:	31 d0                	xor    eax,edx
c0015dac:	31 d2                	xor    edx,edx
c0015dae:	c3                   	ret    

c0015daf <sysCallSeekDir(regs*)>:
c0015daf:	31 c0                	xor    eax,eax
c0015db1:	31 d2                	xor    edx,edx
c0015db3:	c3                   	ret    

c0015db4 <sysCallTellDir(regs*)>:
c0015db4:	31 c0                	xor    eax,eax
c0015db6:	31 d2                	xor    edx,edx
c0015db8:	c3                   	ret    

c0015db9 <sysCallVerify(regs*)>:
c0015db9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dbd:	31 d2                	xor    edx,edx
c0015dbf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015dc2:	c3                   	ret    

c0015dc3 <sysCallGetArgc(regs*)>:
c0015dc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dc8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015dcb:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015dd1:	99                   	cdq    
c0015dd2:	c3                   	ret    

c0015dd3 <sysFormatDisk(regs*)>:
c0015dd3:	56                   	push   esi
c0015dd4:	53                   	push   ebx
c0015dd5:	53                   	push   ebx
c0015dd6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015dda:	8b 1d 94 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028094
c0015de0:	eb 25                	jmp    c0015e07 <sysFormatDisk(regs*)+0x34>
c0015de2:	83 ec 0c             	sub    esp,0xc
c0015de5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015de8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015dea:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015ded:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015df0:	50                   	push   eax
c0015df1:	ff 34 85 20 85 02 c0 	push   DWORD PTR [eax*4-0x3ffd7ae0]
c0015df8:	53                   	push   ebx
c0015df9:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015dfc:	83 c4 20             	add    esp,0x20
c0015dff:	83 f8 08             	cmp    eax,0x8
c0015e02:	75 12                	jne    c0015e16 <sysFormatDisk(regs*)+0x43>
c0015e04:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015e07:	85 db                	test   ebx,ebx
c0015e09:	75 d7                	jne    c0015de2 <sysFormatDisk(regs*)+0xf>
c0015e0b:	59                   	pop    ecx
c0015e0c:	b8 03 00 00 00       	mov    eax,0x3
c0015e11:	31 d2                	xor    edx,edx
c0015e13:	5b                   	pop    ebx
c0015e14:	5e                   	pop    esi
c0015e15:	c3                   	ret    
c0015e16:	85 c0                	test   eax,eax
c0015e18:	74 1b                	je     c0015e35 <sysFormatDisk(regs*)+0x62>
c0015e1a:	83 f8 09             	cmp    eax,0x9
c0015e1d:	74 0b                	je     c0015e2a <sysFormatDisk(regs*)+0x57>
c0015e1f:	59                   	pop    ecx
c0015e20:	b8 02 00 00 00       	mov    eax,0x2
c0015e25:	31 d2                	xor    edx,edx
c0015e27:	5b                   	pop    ebx
c0015e28:	5e                   	pop    esi
c0015e29:	c3                   	ret    
c0015e2a:	59                   	pop    ecx
c0015e2b:	b8 01 00 00 00       	mov    eax,0x1
c0015e30:	31 d2                	xor    edx,edx
c0015e32:	5b                   	pop    ebx
c0015e33:	5e                   	pop    esi
c0015e34:	c3                   	ret    
c0015e35:	59                   	pop    ecx
c0015e36:	31 c0                	xor    eax,eax
c0015e38:	31 d2                	xor    edx,edx
c0015e3a:	5b                   	pop    ebx
c0015e3b:	5e                   	pop    esi
c0015e3c:	c3                   	ret    

c0015e3d <sysSetDiskVolumeLabel(regs*)>:
c0015e3d:	56                   	push   esi
c0015e3e:	53                   	push   ebx
c0015e3f:	53                   	push   ebx
c0015e40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e44:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015e47:	83 f8 19             	cmp    eax,0x19
c0015e4a:	77 2d                	ja     c0015e79 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015e4c:	8b 0c 85 20 85 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7ae0]
c0015e53:	85 c9                	test   ecx,ecx
c0015e55:	74 22                	je     c0015e79 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015e57:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015e5a:	85 db                	test   ebx,ebx
c0015e5c:	74 1b                	je     c0015e79 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015e5e:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015e64:	85 d2                	test   edx,edx
c0015e66:	74 11                	je     c0015e79 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015e68:	8b 32                	mov    esi,DWORD PTR [edx]
c0015e6a:	53                   	push   ebx
c0015e6b:	50                   	push   eax
c0015e6c:	51                   	push   ecx
c0015e6d:	52                   	push   edx
c0015e6e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015e71:	83 c4 10             	add    esp,0x10
c0015e74:	99                   	cdq    
c0015e75:	59                   	pop    ecx
c0015e76:	5b                   	pop    ebx
c0015e77:	5e                   	pop    esi
c0015e78:	c3                   	ret    
c0015e79:	59                   	pop    ecx
c0015e7a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015e7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e84:	5b                   	pop    ebx
c0015e85:	5e                   	pop    esi
c0015e86:	c3                   	ret    

c0015e87 <sysGetDiskVolumeLabel(regs*)>:
c0015e87:	57                   	push   edi
c0015e88:	56                   	push   esi
c0015e89:	53                   	push   ebx
c0015e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e8e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015e91:	83 fa 19             	cmp    edx,0x19
c0015e94:	77 38                	ja     c0015ece <sysGetDiskVolumeLabel(regs*)+0x47>
c0015e96:	8b 0c 95 20 85 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7ae0]
c0015e9d:	85 c9                	test   ecx,ecx
c0015e9f:	74 2d                	je     c0015ece <sysGetDiskVolumeLabel(regs*)+0x47>
c0015ea1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015ea4:	85 db                	test   ebx,ebx
c0015ea6:	74 26                	je     c0015ece <sysGetDiskVolumeLabel(regs*)+0x47>
c0015ea8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015eab:	85 f6                	test   esi,esi
c0015ead:	74 1f                	je     c0015ece <sysGetDiskVolumeLabel(regs*)+0x47>
c0015eaf:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015eb5:	85 c0                	test   eax,eax
c0015eb7:	74 15                	je     c0015ece <sysGetDiskVolumeLabel(regs*)+0x47>
c0015eb9:	83 ec 0c             	sub    esp,0xc
c0015ebc:	8b 38                	mov    edi,DWORD PTR [eax]
c0015ebe:	56                   	push   esi
c0015ebf:	53                   	push   ebx
c0015ec0:	52                   	push   edx
c0015ec1:	51                   	push   ecx
c0015ec2:	50                   	push   eax
c0015ec3:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015ec6:	83 c4 20             	add    esp,0x20
c0015ec9:	99                   	cdq    
c0015eca:	5b                   	pop    ebx
c0015ecb:	5e                   	pop    esi
c0015ecc:	5f                   	pop    edi
c0015ecd:	c3                   	ret    
c0015ece:	5b                   	pop    ebx
c0015ecf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015ed4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ed9:	5e                   	pop    esi
c0015eda:	5f                   	pop    edi
c0015edb:	c3                   	ret    

c0015edc <sysShutdown(regs*)>:
c0015edc:	83 ec 0c             	sub    esp,0xc
c0015edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ee3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ee6:	85 c0                	test   eax,eax
c0015ee8:	74 18                	je     c0015f02 <sysShutdown(regs*)+0x26>
c0015eea:	83 f8 01             	cmp    eax,0x1
c0015eed:	74 38                	je     c0015f27 <sysShutdown(regs*)+0x4b>
c0015eef:	83 f8 02             	cmp    eax,0x2
c0015ef2:	74 24                	je     c0015f18 <sysShutdown(regs*)+0x3c>
c0015ef4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ef9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015efe:	83 c4 0c             	add    esp,0xc
c0015f01:	c3                   	ret    
c0015f02:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0015f07:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f09:	6a 00                	push   0x0
c0015f0b:	6a 00                	push   0x0
c0015f0d:	6a 00                	push   0x0
c0015f0f:	50                   	push   eax
c0015f10:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f13:	83 c4 10             	add    esp,0x10
c0015f16:	eb dc                	jmp    c0015ef4 <sysShutdown(regs*)+0x18>
c0015f18:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0015f1d:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f1f:	6a 00                	push   0x0
c0015f21:	6a 00                	push   0x0
c0015f23:	6a 01                	push   0x1
c0015f25:	eb e8                	jmp    c0015f0f <sysShutdown(regs*)+0x33>
c0015f27:	a1 a0 85 02 c0       	mov    eax,ds:0xc00285a0
c0015f2c:	85 c0                	test   eax,eax
c0015f2e:	74 02                	je     c0015f32 <sysShutdown(regs*)+0x56>
c0015f30:	ff d0                	call   eax
c0015f32:	31 c0                	xor    eax,eax
c0015f34:	31 d2                	xor    edx,edx
c0015f36:	83 c4 0c             	add    esp,0xc
c0015f39:	c3                   	ret    

c0015f3a <sysCallRealpath(regs*)>:
c0015f3a:	83 ec 0c             	sub    esp,0xc
c0015f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f41:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015f44:	85 d2                	test   edx,edx
c0015f46:	74 07                	je     c0015f4f <sysCallRealpath(regs*)+0x15>
c0015f48:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015f4b:	85 c0                	test   eax,eax
c0015f4d:	75 0b                	jne    c0015f5a <sysCallRealpath(regs*)+0x20>
c0015f4f:	b8 01 00 00 00       	mov    eax,0x1
c0015f54:	31 d2                	xor    edx,edx
c0015f56:	83 c4 0c             	add    esp,0xc
c0015f59:	c3                   	ret    
c0015f5a:	51                   	push   ecx
c0015f5b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015f61:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015f64:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015f6a:	51                   	push   ecx
c0015f6b:	52                   	push   edx
c0015f6c:	50                   	push   eax
c0015f6d:	e8 4a 71 ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c0015f72:	83 c4 10             	add    esp,0x10
c0015f75:	31 c0                	xor    eax,eax
c0015f77:	31 d2                	xor    edx,edx
c0015f79:	83 c4 0c             	add    esp,0xc
c0015f7c:	c3                   	ret    

c0015f7d <sysCallReadDir(regs*)>:
c0015f7d:	53                   	push   ebx
c0015f7e:	83 ec 18             	sub    esp,0x18
c0015f81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015f85:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015f88:	83 f8 02             	cmp    eax,0x2
c0015f8b:	76 60                	jbe    c0015fed <sysCallReadDir(regs*)+0x70>
c0015f8d:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015f94:	77 48                	ja     c0015fde <sysCallReadDir(regs*)+0x61>
c0015f96:	83 ec 0c             	sub    esp,0xc
c0015f99:	50                   	push   eax
c0015f9a:	e8 e0 58 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0015f9f:	83 c4 10             	add    esp,0x10
c0015fa2:	85 c0                	test   eax,eax
c0015fa4:	74 38                	je     c0015fde <sysCallReadDir(regs*)+0x61>
c0015fa6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015fae:	83 ec 0c             	sub    esp,0xc
c0015fb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fb3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015fb7:	51                   	push   ecx
c0015fb8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015fbb:	6a 00                	push   0x0
c0015fbd:	68 10 01 00 00       	push   0x110
c0015fc2:	50                   	push   eax
c0015fc3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015fc6:	83 c4 20             	add    esp,0x20
c0015fc9:	85 c0                	test   eax,eax
c0015fcb:	74 29                	je     c0015ff6 <sysCallReadDir(regs*)+0x79>
c0015fcd:	83 f8 07             	cmp    eax,0x7
c0015fd0:	74 1b                	je     c0015fed <sysCallReadDir(regs*)+0x70>
c0015fd2:	b8 02 00 00 00       	mov    eax,0x2
c0015fd7:	31 d2                	xor    edx,edx
c0015fd9:	83 c4 18             	add    esp,0x18
c0015fdc:	5b                   	pop    ebx
c0015fdd:	c3                   	ret    
c0015fde:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fe3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015fe8:	83 c4 18             	add    esp,0x18
c0015feb:	5b                   	pop    ebx
c0015fec:	c3                   	ret    
c0015fed:	b8 01 00 00 00       	mov    eax,0x1
c0015ff2:	31 d2                	xor    edx,edx
c0015ff4:	eb e3                	jmp    c0015fd9 <sysCallReadDir(regs*)+0x5c>
c0015ff6:	31 c0                	xor    eax,eax
c0015ff8:	31 d2                	xor    edx,edx
c0015ffa:	eb dd                	jmp    c0015fd9 <sysCallReadDir(regs*)+0x5c>

c0015ffc <sysCallIsATTY(regs*)>:
c0015ffc:	83 ec 0c             	sub    esp,0xc
c0015fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016003:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016006:	83 f8 02             	cmp    eax,0x2
c0016009:	76 07                	jbe    c0016012 <sysCallIsATTY(regs*)+0x16>
c001600b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016010:	75 26                	jne    c0016038 <sysCallIsATTY(regs*)+0x3c>
c0016012:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016017:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001601a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016020:	85 c0                	test   eax,eax
c0016022:	74 24                	je     c0016048 <sysCallIsATTY(regs*)+0x4c>
c0016024:	83 ec 0c             	sub    esp,0xc
c0016027:	8b 10                	mov    edx,DWORD PTR [eax]
c0016029:	50                   	push   eax
c001602a:	ff 12                	call   DWORD PTR [edx]
c001602c:	31 d2                	xor    edx,edx
c001602e:	0f b6 c0             	movzx  eax,al
c0016031:	83 c4 10             	add    esp,0x10
c0016034:	83 c4 0c             	add    esp,0xc
c0016037:	c3                   	ret    
c0016038:	83 ec 0c             	sub    esp,0xc
c001603b:	50                   	push   eax
c001603c:	e8 3e 58 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0016041:	83 c4 10             	add    esp,0x10
c0016044:	85 c0                	test   eax,eax
c0016046:	75 dc                	jne    c0016024 <sysCallIsATTY(regs*)+0x28>
c0016048:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001604d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016052:	83 c4 0c             	add    esp,0xc
c0016055:	c3                   	ret    

c0016056 <sysCallSeek(regs*)>:
c0016056:	53                   	push   ebx
c0016057:	83 ec 08             	sub    esp,0x8
c001605a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001605e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016061:	8d 50 fd             	lea    edx,[eax-0x3]
c0016064:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001606a:	77 32                	ja     c001609e <sysCallSeek(regs*)+0x48>
c001606c:	83 ec 0c             	sub    esp,0xc
c001606f:	50                   	push   eax
c0016070:	e8 0a 58 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0016075:	83 c4 0c             	add    esp,0xc
c0016078:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001607b:	31 db                	xor    ebx,ebx
c001607d:	53                   	push   ebx
c001607e:	51                   	push   ecx
c001607f:	50                   	push   eax
c0016080:	e8 79 73 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0016085:	83 c4 10             	add    esp,0x10
c0016088:	85 c0                	test   eax,eax
c001608a:	0f 95 c0             	setne  al
c001608d:	31 d2                	xor    edx,edx
c001608f:	0f b6 c0             	movzx  eax,al
c0016092:	f7 d8                	neg    eax
c0016094:	83 d2 00             	adc    edx,0x0
c0016097:	83 c4 08             	add    esp,0x8
c001609a:	f7 da                	neg    edx
c001609c:	5b                   	pop    ebx
c001609d:	c3                   	ret    
c001609e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160a8:	83 c4 08             	add    esp,0x8
c00160ab:	5b                   	pop    ebx
c00160ac:	c3                   	ret    

c00160ad <sysCallTell(regs*)>:
c00160ad:	53                   	push   ebx
c00160ae:	83 ec 08             	sub    esp,0x8
c00160b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00160b8:	83 f8 02             	cmp    eax,0x2
c00160bb:	76 4d                	jbe    c001610a <sysCallTell(regs*)+0x5d>
c00160bd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00160c2:	76 19                	jbe    c00160dd <sysCallTell(regs*)+0x30>
c00160c4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00160c7:	31 d2                	xor    edx,edx
c00160c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00160cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00160d6:	31 c0                	xor    eax,eax
c00160d8:	83 c4 08             	add    esp,0x8
c00160db:	5b                   	pop    ebx
c00160dc:	c3                   	ret    
c00160dd:	83 ec 0c             	sub    esp,0xc
c00160e0:	50                   	push   eax
c00160e1:	e8 99 57 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c00160e6:	5a                   	pop    edx
c00160e7:	59                   	pop    ecx
c00160e8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00160eb:	50                   	push   eax
c00160ec:	e8 63 73 ff ff       	call   c000d454 <File::tell(unsigned long long*)>
c00160f1:	83 c4 10             	add    esp,0x10
c00160f4:	85 c0                	test   eax,eax
c00160f6:	0f 95 c0             	setne  al
c00160f9:	31 d2                	xor    edx,edx
c00160fb:	0f b6 c0             	movzx  eax,al
c00160fe:	f7 d8                	neg    eax
c0016100:	83 d2 00             	adc    edx,0x0
c0016103:	83 c4 08             	add    esp,0x8
c0016106:	f7 da                	neg    edx
c0016108:	5b                   	pop    ebx
c0016109:	c3                   	ret    
c001610a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001610f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016114:	83 c4 08             	add    esp,0x8
c0016117:	5b                   	pop    ebx
c0016118:	c3                   	ret    

c0016119 <sysCallSize(regs*)>:
c0016119:	53                   	push   ebx
c001611a:	83 ec 18             	sub    esp,0x18
c001611d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016121:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016124:	83 f8 02             	cmp    eax,0x2
c0016127:	76 53                	jbe    c001617c <sysCallSize(regs*)+0x63>
c0016129:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001612e:	76 19                	jbe    c0016149 <sysCallSize(regs*)+0x30>
c0016130:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016133:	31 d2                	xor    edx,edx
c0016135:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001613b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016142:	31 c0                	xor    eax,eax
c0016144:	83 c4 18             	add    esp,0x18
c0016147:	5b                   	pop    ebx
c0016148:	c3                   	ret    
c0016149:	83 ec 0c             	sub    esp,0xc
c001614c:	50                   	push   eax
c001614d:	e8 2d 57 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0016152:	83 c4 0c             	add    esp,0xc
c0016155:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016159:	52                   	push   edx
c001615a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001615d:	50                   	push   eax
c001615e:	e8 89 74 ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c0016163:	83 c4 10             	add    esp,0x10
c0016166:	85 c0                	test   eax,eax
c0016168:	0f 95 c0             	setne  al
c001616b:	31 d2                	xor    edx,edx
c001616d:	0f b6 c0             	movzx  eax,al
c0016170:	f7 d8                	neg    eax
c0016172:	83 d2 00             	adc    edx,0x0
c0016175:	83 c4 18             	add    esp,0x18
c0016178:	f7 da                	neg    edx
c001617a:	5b                   	pop    ebx
c001617b:	c3                   	ret    
c001617c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016181:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016186:	83 c4 18             	add    esp,0x18
c0016189:	5b                   	pop    ebx
c001618a:	c3                   	ret    

c001618b <sysCallSizeFromFilename(regs*)>:
c001618b:	57                   	push   edi
c001618c:	56                   	push   esi
c001618d:	53                   	push   ebx
c001618e:	83 ec 20             	sub    esp,0x20
c0016191:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016195:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016198:	83 fb 02             	cmp    ebx,0x2
c001619b:	0f 86 88 00 00 00    	jbe    c0016229 <sysCallSizeFromFilename(regs*)+0x9e>
c00161a1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00161a7:	76 1b                	jbe    c00161c4 <sysCallSizeFromFilename(regs*)+0x39>
c00161a9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00161ac:	31 d2                	xor    edx,edx
c00161ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00161b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161bb:	83 c4 20             	add    esp,0x20
c00161be:	31 c0                	xor    eax,eax
c00161c0:	5b                   	pop    ebx
c00161c1:	5e                   	pop    esi
c00161c2:	5f                   	pop    edi
c00161c3:	c3                   	ret    
c00161c4:	83 ec 0c             	sub    esp,0xc
c00161c7:	68 14 01 00 00       	push   0x114
c00161cc:	e8 3e 38 ff ff       	call   c0009a0f <malloc>
c00161d1:	83 c4 0c             	add    esp,0xc
c00161d4:	89 c7                	mov    edi,eax
c00161d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161db:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00161de:	53                   	push   ebx
c00161df:	57                   	push   edi
c00161e0:	e8 81 70 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c00161e5:	83 c4 0c             	add    esp,0xc
c00161e8:	8d 44 24 23          	lea    eax,[esp+0x23]
c00161ec:	50                   	push   eax
c00161ed:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00161f0:	57                   	push   edi
c00161f1:	e8 f6 73 ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c00161f6:	83 c4 10             	add    esp,0x10
c00161f9:	85 ff                	test   edi,edi
c00161fb:	74 14                	je     c0016211 <sysCallSizeFromFilename(regs*)+0x86>
c00161fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016201:	8b 17                	mov    edx,DWORD PTR [edi]
c0016203:	83 ec 0c             	sub    esp,0xc
c0016206:	57                   	push   edi
c0016207:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001620a:	83 c4 10             	add    esp,0x10
c001620d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016211:	85 c0                	test   eax,eax
c0016213:	0f 95 c0             	setne  al
c0016216:	31 d2                	xor    edx,edx
c0016218:	0f b6 c0             	movzx  eax,al
c001621b:	f7 d8                	neg    eax
c001621d:	83 d2 00             	adc    edx,0x0
c0016220:	83 c4 20             	add    esp,0x20
c0016223:	f7 da                	neg    edx
c0016225:	5b                   	pop    ebx
c0016226:	5e                   	pop    esi
c0016227:	5f                   	pop    edi
c0016228:	c3                   	ret    
c0016229:	83 c4 20             	add    esp,0x20
c001622c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016231:	5b                   	pop    ebx
c0016232:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016237:	5e                   	pop    esi
c0016238:	5f                   	pop    edi
c0016239:	c3                   	ret    

c001623a <sysCallClose(regs*)>:
c001623a:	53                   	push   ebx
c001623b:	83 ec 08             	sub    esp,0x8
c001623e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016242:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016245:	83 f8 02             	cmp    eax,0x2
c0016248:	76 41                	jbe    c001628b <sysCallClose(regs*)+0x51>
c001624a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0016250:	83 fa 01             	cmp    edx,0x1
c0016253:	76 2d                	jbe    c0016282 <sysCallClose(regs*)+0x48>
c0016255:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001625a:	77 2f                	ja     c001628b <sysCallClose(regs*)+0x51>
c001625c:	83 ec 0c             	sub    esp,0xc
c001625f:	50                   	push   eax
c0016260:	e8 1a 56 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0016265:	89 c3                	mov    ebx,eax
c0016267:	89 04 24             	mov    DWORD PTR [esp],eax
c001626a:	e8 2f 71 ff ff       	call   c000d39e <File::close()>
c001626f:	83 c4 10             	add    esp,0x10
c0016272:	85 db                	test   ebx,ebx
c0016274:	74 0c                	je     c0016282 <sysCallClose(regs*)+0x48>
c0016276:	83 ec 0c             	sub    esp,0xc
c0016279:	8b 03                	mov    eax,DWORD PTR [ebx]
c001627b:	53                   	push   ebx
c001627c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001627f:	83 c4 10             	add    esp,0x10
c0016282:	31 c0                	xor    eax,eax
c0016284:	31 d2                	xor    edx,edx
c0016286:	83 c4 08             	add    esp,0x8
c0016289:	5b                   	pop    ebx
c001628a:	c3                   	ret    
c001628b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016290:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016295:	83 c4 08             	add    esp,0x8
c0016298:	5b                   	pop    ebx
c0016299:	c3                   	ret    

c001629a <sysCallOpenDir(regs*)>:
c001629a:	56                   	push   esi
c001629b:	53                   	push   ebx
c001629c:	53                   	push   ebx
c001629d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162a1:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00162a4:	85 f6                	test   esi,esi
c00162a6:	74 59                	je     c0016301 <sysCallOpenDir(regs*)+0x67>
c00162a8:	83 ec 0c             	sub    esp,0xc
c00162ab:	68 14 01 00 00       	push   0x114
c00162b0:	e8 5a 37 ff ff       	call   c0009a0f <malloc>
c00162b5:	83 c4 0c             	add    esp,0xc
c00162b8:	89 c6                	mov    esi,eax
c00162ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162bf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00162c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162c5:	56                   	push   esi
c00162c6:	e8 fb 74 ff ff       	call   c000d7c6 <Directory::Directory(char const*, Process*)>
c00162cb:	83 c4 10             	add    esp,0x10
c00162ce:	85 f6                	test   esi,esi
c00162d0:	74 2f                	je     c0016301 <sysCallOpenDir(regs*)+0x67>
c00162d2:	83 ec 0c             	sub    esp,0xc
c00162d5:	56                   	push   esi
c00162d6:	e8 c5 75 ff ff       	call   c000d8a0 <Directory::open()>
c00162db:	83 c4 10             	add    esp,0x10
c00162de:	85 c0                	test   eax,eax
c00162e0:	75 1f                	jne    c0016301 <sysCallOpenDir(regs*)+0x67>
c00162e2:	83 ec 0c             	sub    esp,0xc
c00162e5:	56                   	push   esi
c00162e6:	e8 9f 52 ff ff       	call   c000b58a <UnixFile::getFileDescriptor()>
c00162eb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00162ee:	83 c4 10             	add    esp,0x10
c00162f1:	89 02                	mov    DWORD PTR [edx],eax
c00162f3:	c1 f8 1f             	sar    eax,0x1f
c00162f6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00162f9:	31 c0                	xor    eax,eax
c00162fb:	59                   	pop    ecx
c00162fc:	31 d2                	xor    edx,edx
c00162fe:	5b                   	pop    ebx
c00162ff:	5e                   	pop    esi
c0016300:	c3                   	ret    
c0016301:	59                   	pop    ecx
c0016302:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016307:	ba ff ff ff ff       	mov    edx,0xffffffff
c001630c:	5b                   	pop    ebx
c001630d:	5e                   	pop    esi
c001630e:	c3                   	ret    

c001630f <sysCallCloseDir(regs*)>:
c001630f:	53                   	push   ebx
c0016310:	83 ec 08             	sub    esp,0x8
c0016313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016317:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001631a:	8d 50 fd             	lea    edx,[eax-0x3]
c001631d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016323:	77 2f                	ja     c0016354 <sysCallCloseDir(regs*)+0x45>
c0016325:	83 ec 0c             	sub    esp,0xc
c0016328:	50                   	push   eax
c0016329:	e8 51 55 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c001632e:	89 c3                	mov    ebx,eax
c0016330:	89 04 24             	mov    DWORD PTR [esp],eax
c0016333:	e8 c4 75 ff ff       	call   c000d8fc <Directory::close()>
c0016338:	83 c4 10             	add    esp,0x10
c001633b:	85 db                	test   ebx,ebx
c001633d:	74 0c                	je     c001634b <sysCallCloseDir(regs*)+0x3c>
c001633f:	83 ec 0c             	sub    esp,0xc
c0016342:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016344:	53                   	push   ebx
c0016345:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016348:	83 c4 10             	add    esp,0x10
c001634b:	31 c0                	xor    eax,eax
c001634d:	31 d2                	xor    edx,edx
c001634f:	83 c4 08             	add    esp,0x8
c0016352:	5b                   	pop    ebx
c0016353:	c3                   	ret    
c0016354:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016359:	ba ff ff ff ff       	mov    edx,0xffffffff
c001635e:	83 c4 08             	add    esp,0x8
c0016361:	5b                   	pop    ebx
c0016362:	c3                   	ret    

c0016363 <sysCallMakeDir(regs*)>:
c0016363:	56                   	push   esi
c0016364:	53                   	push   ebx
c0016365:	83 ec 10             	sub    esp,0x10
c0016368:	68 14 01 00 00       	push   0x114
c001636d:	e8 9d 36 ff ff       	call   c0009a0f <malloc>
c0016372:	83 c4 0c             	add    esp,0xc
c0016375:	89 c3                	mov    ebx,eax
c0016377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001637c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001637f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016383:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016386:	53                   	push   ebx
c0016387:	e8 3a 74 ff ff       	call   c000d7c6 <Directory::Directory(char const*, Process*)>
c001638c:	83 c4 10             	add    esp,0x10
c001638f:	85 db                	test   ebx,ebx
c0016391:	74 32                	je     c00163c5 <sysCallMakeDir(regs*)+0x62>
c0016393:	83 ec 0c             	sub    esp,0xc
c0016396:	53                   	push   ebx
c0016397:	e8 e4 76 ff ff       	call   c000da80 <Directory::create()>
c001639c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001639f:	89 c6                	mov    esi,eax
c00163a1:	e8 56 75 ff ff       	call   c000d8fc <Directory::close()>
c00163a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163ae:	83 c4 10             	add    esp,0x10
c00163b1:	31 c0                	xor    eax,eax
c00163b3:	59                   	pop    ecx
c00163b4:	85 f6                	test   esi,esi
c00163b6:	5b                   	pop    ebx
c00163b7:	0f 95 c0             	setne  al
c00163ba:	5e                   	pop    esi
c00163bb:	31 d2                	xor    edx,edx
c00163bd:	f7 d8                	neg    eax
c00163bf:	83 d2 00             	adc    edx,0x0
c00163c2:	f7 da                	neg    edx
c00163c4:	c3                   	ret    
c00163c5:	59                   	pop    ecx
c00163c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163d0:	5b                   	pop    ebx
c00163d1:	5e                   	pop    esi
c00163d2:	c3                   	ret    

c00163d3 <sysCallWait(regs*)>:
c00163d3:	83 ec 10             	sub    esp,0x10
c00163d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00163da:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00163dd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00163e0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00163e3:	e8 fc 24 00 00       	call   c00188e4 <waitTask(int, int*, int)>
c00163e8:	83 c4 1c             	add    esp,0x1c
c00163eb:	99                   	cdq    
c00163ec:	c3                   	ret    

c00163ed <sysCallNotImpl(regs*)>:
c00163ed:	83 ec 18             	sub    esp,0x18
c00163f0:	68 15 5e 02 c0       	push   0xc0025e15
c00163f5:	e8 0d e6 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c00163fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016404:	83 c4 1c             	add    esp,0x1c
c0016407:	c3                   	ret    

c0016408 <sysPanic(regs*)>:
c0016408:	83 ec 18             	sub    esp,0x18
c001640b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001640f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016412:	e8 f0 e5 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0016417:	b8 01 00 00 00       	mov    eax,0x1
c001641c:	31 d2                	xor    edx,edx
c001641e:	83 c4 1c             	add    esp,0x1c
c0016421:	c3                   	ret    

c0016422 <sysCallRmdir(regs*)>:
c0016422:	56                   	push   esi
c0016423:	53                   	push   ebx
c0016424:	83 ec 20             	sub    esp,0x20
c0016427:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001642b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001642e:	68 14 01 00 00       	push   0x114
c0016433:	e8 d7 35 ff ff       	call   c0009a0f <malloc>
c0016438:	83 c4 0c             	add    esp,0xc
c001643b:	89 c3                	mov    ebx,eax
c001643d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016442:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016445:	56                   	push   esi
c0016446:	53                   	push   ebx
c0016447:	e8 1a 6e ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001644c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001644f:	e8 64 70 ff ff       	call   c000d4b8 <File::unlink()>
c0016454:	83 c4 10             	add    esp,0x10
c0016457:	85 db                	test   ebx,ebx
c0016459:	74 14                	je     c001646f <sysCallRmdir(regs*)+0x4d>
c001645b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001645f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016461:	83 ec 0c             	sub    esp,0xc
c0016464:	53                   	push   ebx
c0016465:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016468:	83 c4 10             	add    esp,0x10
c001646b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001646f:	85 c0                	test   eax,eax
c0016471:	0f 95 c0             	setne  al
c0016474:	31 d2                	xor    edx,edx
c0016476:	0f b6 c0             	movzx  eax,al
c0016479:	f7 d8                	neg    eax
c001647b:	83 d2 00             	adc    edx,0x0
c001647e:	83 c4 14             	add    esp,0x14
c0016481:	f7 da                	neg    edx
c0016483:	5b                   	pop    ebx
c0016484:	5e                   	pop    esi
c0016485:	c3                   	ret    

c0016486 <sysCallUnlink(regs*)>:
c0016486:	56                   	push   esi
c0016487:	53                   	push   ebx
c0016488:	83 ec 20             	sub    esp,0x20
c001648b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001648f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016492:	68 14 01 00 00       	push   0x114
c0016497:	e8 73 35 ff ff       	call   c0009a0f <malloc>
c001649c:	83 c4 0c             	add    esp,0xc
c001649f:	89 c3                	mov    ebx,eax
c00164a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164a6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00164a9:	56                   	push   esi
c00164aa:	53                   	push   ebx
c00164ab:	e8 b6 6d ff ff       	call   c000d266 <File::File(char const*, Process*)>
c00164b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164b3:	e8 00 70 ff ff       	call   c000d4b8 <File::unlink()>
c00164b8:	83 c4 10             	add    esp,0x10
c00164bb:	85 db                	test   ebx,ebx
c00164bd:	74 14                	je     c00164d3 <sysCallUnlink(regs*)+0x4d>
c00164bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164c3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00164c5:	83 ec 0c             	sub    esp,0xc
c00164c8:	53                   	push   ebx
c00164c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00164cc:	83 c4 10             	add    esp,0x10
c00164cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164d3:	85 c0                	test   eax,eax
c00164d5:	0f 95 c0             	setne  al
c00164d8:	31 d2                	xor    edx,edx
c00164da:	0f b6 c0             	movzx  eax,al
c00164dd:	f7 d8                	neg    eax
c00164df:	83 d2 00             	adc    edx,0x0
c00164e2:	83 c4 14             	add    esp,0x14
c00164e5:	f7 da                	neg    edx
c00164e7:	5b                   	pop    ebx
c00164e8:	5e                   	pop    esi
c00164e9:	c3                   	ret    

c00164ea <sysCallGetArgv(regs*)>:
c00164ea:	83 ec 0c             	sub    esp,0xc
c00164ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164f1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00164f4:	85 c0                	test   eax,eax
c00164f6:	78 2b                	js     c0016523 <sysCallGetArgv(regs*)+0x39>
c00164f8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00164fe:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016501:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016507:	7d 1a                	jge    c0016523 <sysCallGetArgv(regs*)+0x39>
c0016509:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016510:	85 c0                	test   eax,eax
c0016512:	74 17                	je     c001652b <sysCallGetArgv(regs*)+0x41>
c0016514:	83 ec 08             	sub    esp,0x8
c0016517:	50                   	push   eax
c0016518:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001651b:	e8 20 a2 fe ff       	call   c0000740 <strcpy>
c0016520:	83 c4 10             	add    esp,0x10
c0016523:	31 c0                	xor    eax,eax
c0016525:	31 d2                	xor    edx,edx
c0016527:	83 c4 0c             	add    esp,0xc
c001652a:	c3                   	ret    
c001652b:	b8 01 00 00 00       	mov    eax,0x1
c0016530:	31 d2                	xor    edx,edx
c0016532:	83 c4 0c             	add    esp,0xc
c0016535:	c3                   	ret    

c0016536 <sysCallTTYName(regs*)>:
c0016536:	56                   	push   esi
c0016537:	53                   	push   ebx
c0016538:	53                   	push   ebx
c0016539:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001653d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016540:	85 c0                	test   eax,eax
c0016542:	74 5f                	je     c00165a3 <sysCallTTYName(regs*)+0x6d>
c0016544:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016547:	83 f8 02             	cmp    eax,0x2
c001654a:	77 3e                	ja     c001658a <sysCallTTYName(regs*)+0x54>
c001654c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016551:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016554:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c001655a:	85 db                	test   ebx,ebx
c001655c:	74 45                	je     c00165a3 <sysCallTTYName(regs*)+0x6d>
c001655e:	83 ec 0c             	sub    esp,0xc
c0016561:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016563:	53                   	push   ebx
c0016564:	ff 10                	call   DWORD PTR [eax]
c0016566:	83 c4 10             	add    esp,0x10
c0016569:	84 c0                	test   al,al
c001656b:	74 41                	je     c00165ae <sysCallTTYName(regs*)+0x78>
c001656d:	83 ec 08             	sub    esp,0x8
c0016570:	81 c3 82 00 00 00    	add    ebx,0x82
c0016576:	53                   	push   ebx
c0016577:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001657a:	e8 c1 a1 fe ff       	call   c0000740 <strcpy>
c001657f:	83 c4 10             	add    esp,0x10
c0016582:	31 c0                	xor    eax,eax
c0016584:	59                   	pop    ecx
c0016585:	31 d2                	xor    edx,edx
c0016587:	5b                   	pop    ebx
c0016588:	5e                   	pop    esi
c0016589:	c3                   	ret    
c001658a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001658f:	74 bb                	je     c001654c <sysCallTTYName(regs*)+0x16>
c0016591:	83 ec 0c             	sub    esp,0xc
c0016594:	50                   	push   eax
c0016595:	e8 e5 52 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c001659a:	83 c4 10             	add    esp,0x10
c001659d:	89 c3                	mov    ebx,eax
c001659f:	85 db                	test   ebx,ebx
c00165a1:	75 bb                	jne    c001655e <sysCallTTYName(regs*)+0x28>
c00165a3:	59                   	pop    ecx
c00165a4:	b8 01 00 00 00       	mov    eax,0x1
c00165a9:	31 d2                	xor    edx,edx
c00165ab:	5b                   	pop    ebx
c00165ac:	5e                   	pop    esi
c00165ad:	c3                   	ret    
c00165ae:	59                   	pop    ecx
c00165af:	b8 02 00 00 00       	mov    eax,0x2
c00165b4:	31 d2                	xor    edx,edx
c00165b6:	5b                   	pop    ebx
c00165b7:	5e                   	pop    esi
c00165b8:	c3                   	ret    

c00165b9 <sysCallUSleep(regs*)>:
c00165b9:	83 ec 1c             	sub    esp,0x1c
c00165bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165c0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00165c3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00165c6:	6a 00                	push   0x0
c00165c8:	6a 64                	push   0x64
c00165ca:	52                   	push   edx
c00165cb:	50                   	push   eax
c00165cc:	e8 73 c1 00 00       	call   c0022744 <__udivdi3>
c00165d1:	83 c4 14             	add    esp,0x14
c00165d4:	50                   	push   eax
c00165d5:	e8 da 23 00 00       	call   c00189b4 <milliTenthSleep(unsigned int)>
c00165da:	31 c0                	xor    eax,eax
c00165dc:	31 d2                	xor    edx,edx
c00165de:	83 c4 1c             	add    esp,0x1c
c00165e1:	c3                   	ret    

c00165e2 <sysCallSpawn(regs*)>:
c00165e2:	56                   	push   esi
c00165e3:	53                   	push   ebx
c00165e4:	50                   	push   eax
c00165e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165e9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00165ec:	85 c0                	test   eax,eax
c00165ee:	75 08                	jne    c00165f8 <sysCallSpawn(regs*)+0x16>
c00165f0:	59                   	pop    ecx
c00165f1:	31 c0                	xor    eax,eax
c00165f3:	31 d2                	xor    edx,edx
c00165f5:	5b                   	pop    ebx
c00165f6:	5e                   	pop    esi
c00165f7:	c3                   	ret    
c00165f8:	83 ec 0c             	sub    esp,0xc
c00165fb:	68 1f 07 00 00       	push   0x71f
c0016600:	e8 0a 34 ff ff       	call   c0009a0f <malloc>
c0016605:	83 c4 10             	add    esp,0x10
c0016608:	89 c6                	mov    esi,eax
c001660a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001660d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016610:	85 c0                	test   eax,eax
c0016612:	75 32                	jne    c0016646 <sysCallSpawn(regs*)+0x64>
c0016614:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016619:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001661c:	52                   	push   edx
c001661d:	50                   	push   eax
c001661e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016621:	56                   	push   esi
c0016622:	e8 85 1a 00 00       	call   c00180ac <Process::Process(char const*, Process*, char**)>
c0016627:	83 c4 10             	add    esp,0x10
c001662a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016631:	75 bd                	jne    c00165f0 <sysCallSpawn(regs*)+0xe>
c0016633:	83 ec 0c             	sub    esp,0xc
c0016636:	56                   	push   esi
c0016637:	e8 5c 1f 00 00       	call   c0018598 <Process::createUserThread()>
c001663c:	8b 06                	mov    eax,DWORD PTR [esi]
c001663e:	83 c4 10             	add    esp,0x10
c0016641:	99                   	cdq    
c0016642:	59                   	pop    ecx
c0016643:	5b                   	pop    ebx
c0016644:	5e                   	pop    esi
c0016645:	c3                   	ret    
c0016646:	31 c0                	xor    eax,eax
c0016648:	eb d2                	jmp    c001661c <sysCallSpawn(regs*)+0x3a>

c001664a <sysCallGetEnv(regs*)>:
c001664a:	57                   	push   edi
c001664b:	56                   	push   esi
c001664c:	53                   	push   ebx
c001664d:	83 ec 1c             	sub    esp,0x1c
c0016650:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016654:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016659:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001665c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001665f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016662:	e8 ec e2 ff ff       	call   c0014953 <Krnl::getProcessTotalEnvCount(Process*)>
c0016667:	83 c4 10             	add    esp,0x10
c001666a:	39 c7                	cmp    edi,eax
c001666c:	7c 14                	jl     c0016682 <sysCallGetEnv(regs*)+0x38>
c001666e:	85 f6                	test   esi,esi
c0016670:	75 0b                	jne    c001667d <sysCallGetEnv(regs*)+0x33>
c0016672:	83 c4 10             	add    esp,0x10
c0016675:	31 c0                	xor    eax,eax
c0016677:	5b                   	pop    ebx
c0016678:	31 d2                	xor    edx,edx
c001667a:	5e                   	pop    esi
c001667b:	5f                   	pop    edi
c001667c:	c3                   	ret    
c001667d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016680:	eb f0                	jmp    c0016672 <sysCallGetEnv(regs*)+0x28>
c0016682:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016686:	52                   	push   edx
c0016687:	57                   	push   edi
c0016688:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001668e:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016691:	50                   	push   eax
c0016692:	e8 dc e2 ff ff       	call   c0014973 <Krnl::getProcessEnvPair(Process*, int)>
c0016697:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001669a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001669e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00166a2:	83 c4 0c             	add    esp,0xc
c00166a5:	85 c9                	test   ecx,ecx
c00166a7:	75 23                	jne    c00166cc <sysCallGetEnv(regs*)+0x82>
c00166a9:	83 ec 0c             	sub    esp,0xc
c00166ac:	50                   	push   eax
c00166ad:	e8 ee 9f fe ff       	call   c00006a0 <strlen>
c00166b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00166b5:	89 c3                	mov    ebx,eax
c00166b7:	e8 e4 9f fe ff       	call   c00006a0 <strlen>
c00166bc:	83 c4 10             	add    esp,0x10
c00166bf:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00166c3:	83 c4 10             	add    esp,0x10
c00166c6:	31 d2                	xor    edx,edx
c00166c8:	5b                   	pop    ebx
c00166c9:	5e                   	pop    esi
c00166ca:	5f                   	pop    edi
c00166cb:	c3                   	ret    
c00166cc:	83 ec 08             	sub    esp,0x8
c00166cf:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00166d2:	50                   	push   eax
c00166d3:	56                   	push   esi
c00166d4:	e8 67 a0 fe ff       	call   c0000740 <strcpy>
c00166d9:	58                   	pop    eax
c00166da:	5a                   	pop    edx
c00166db:	68 2f 5e 02 c0       	push   0xc0025e2f
c00166e0:	56                   	push   esi
c00166e1:	e8 9a a1 fe ff       	call   c0000880 <strcat>
c00166e6:	59                   	pop    ecx
c00166e7:	5b                   	pop    ebx
c00166e8:	57                   	push   edi
c00166e9:	56                   	push   esi
c00166ea:	e8 91 a1 fe ff       	call   c0000880 <strcat>
c00166ef:	83 c4 10             	add    esp,0x10
c00166f2:	e9 7b ff ff ff       	jmp    c0016672 <sysCallGetEnv(regs*)+0x28>

c00166f7 <sysAppSettings(regs*)>:
c00166f7:	57                   	push   edi
c00166f8:	56                   	push   esi
c00166f9:	56                   	push   esi
c00166fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166fe:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016701:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016707:	25 e0 1f 00 00       	and    eax,0x1fe0
c001670c:	66 3d c0 09          	cmp    ax,0x9c0
c0016710:	75 2e                	jne    c0016740 <sysAppSettings(regs*)+0x49>
c0016712:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016718:	83 e0 1f             	and    eax,0x1f
c001671b:	3c 01                	cmp    al,0x1
c001671d:	74 2c                	je     c001674b <sysAppSettings(regs*)+0x54>
c001671f:	3c 07                	cmp    al,0x7
c0016721:	0f 84 b3 00 00 00    	je     c00167da <sysAppSettings(regs*)+0xe3>
c0016727:	84 c0                	test   al,al
c0016729:	0f 84 d2 00 00 00    	je     c0016801 <sysAppSettings(regs*)+0x10a>
c001672f:	3c 08                	cmp    al,0x8
c0016731:	74 63                	je     c0016796 <sysAppSettings(regs*)+0x9f>
c0016733:	59                   	pop    ecx
c0016734:	0f b6 c0             	movzx  eax,al
c0016737:	5e                   	pop    esi
c0016738:	05 e8 03 00 00       	add    eax,0x3e8
c001673d:	5f                   	pop    edi
c001673e:	99                   	cdq    
c001673f:	c3                   	ret    
c0016740:	b8 01 00 00 00       	mov    eax,0x1
c0016745:	59                   	pop    ecx
c0016746:	31 d2                	xor    edx,edx
c0016748:	5e                   	pop    esi
c0016749:	5f                   	pop    edi
c001674a:	c3                   	ret    
c001674b:	50                   	push   eax
c001674c:	68 00 01 00 00       	push   0x100
c0016751:	6a 00                	push   0x0
c0016753:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016758:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001675b:	83 c0 0c             	add    eax,0xc
c001675e:	50                   	push   eax
c001675f:	e8 20 9f fe ff       	call   c0000684 <memset>
c0016764:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016769:	b9 ff 00 00 00       	mov    ecx,0xff
c001676e:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016771:	83 c7 0c             	add    edi,0xc
c0016774:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016776:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001677b:	5a                   	pop    edx
c001677c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001677f:	59                   	pop    ecx
c0016780:	8d 50 0c             	lea    edx,[eax+0xc]
c0016783:	52                   	push   edx
c0016784:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001678a:	e8 19 42 ff ff       	call   c000a9a8 <VgaText::setTitle(char*)>
c001678f:	83 c4 10             	add    esp,0x10
c0016792:	31 c0                	xor    eax,eax
c0016794:	eb af                	jmp    c0016745 <sysAppSettings(regs*)+0x4e>
c0016796:	83 ec 08             	sub    esp,0x8
c0016799:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001679f:	83 e0 0f             	and    eax,0xf
c00167a2:	50                   	push   eax
c00167a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167ab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00167b1:	e8 e2 41 ff ff       	call   c000a998 <VgaText::setTitleColour(VgaColour)>
c00167b6:	5f                   	pop    edi
c00167b7:	58                   	pop    eax
c00167b8:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00167be:	c1 e8 04             	shr    eax,0x4
c00167c1:	83 e0 0f             	and    eax,0xf
c00167c4:	50                   	push   eax
c00167c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167cd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00167d3:	e8 b0 41 ff ff       	call   c000a988 <VgaText::setTitleTextColour(VgaColour)>
c00167d8:	eb b5                	jmp    c001678f <sysAppSettings(regs*)+0x98>
c00167da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167e2:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00167e8:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c00167ee:	c0 e8 06             	shr    al,0x6
c00167f1:	83 e0 01             	and    eax,0x1
c00167f4:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c00167fa:	31 c0                	xor    eax,eax
c00167fc:	e9 44 ff ff ff       	jmp    c0016745 <sysAppSettings(regs*)+0x4e>
c0016801:	b8 02 00 00 00       	mov    eax,0x2
c0016806:	e9 3a ff ff ff       	jmp    c0016745 <sysAppSettings(regs*)+0x4e>

c001680b <sysSetFatAttrib(regs*)>:
c001680b:	57                   	push   edi
c001680c:	56                   	push   esi
c001680d:	53                   	push   ebx
c001680e:	83 ec 1c             	sub    esp,0x1c
c0016811:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016815:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016818:	68 14 01 00 00       	push   0x114
c001681d:	e8 ed 31 ff ff       	call   c0009a0f <malloc>
c0016822:	83 c4 0c             	add    esp,0xc
c0016825:	89 c3                	mov    ebx,eax
c0016827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001682c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001682f:	57                   	push   edi
c0016830:	53                   	push   ebx
c0016831:	e8 30 6a ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0016836:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016839:	83 c4 0c             	add    esp,0xc
c001683c:	0f b6 d4             	movzx  edx,ah
c001683f:	0f b6 c0             	movzx  eax,al
c0016842:	52                   	push   edx
c0016843:	50                   	push   eax
c0016844:	53                   	push   ebx
c0016845:	e8 08 6d ff ff       	call   c000d552 <File::chfatattr(unsigned char, unsigned char)>
c001684a:	83 c4 10             	add    esp,0x10
c001684d:	85 db                	test   ebx,ebx
c001684f:	74 14                	je     c0016865 <sysSetFatAttrib(regs*)+0x5a>
c0016851:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016855:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016857:	83 ec 0c             	sub    esp,0xc
c001685a:	53                   	push   ebx
c001685b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001685e:	83 c4 10             	add    esp,0x10
c0016861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016865:	85 c0                	test   eax,eax
c0016867:	0f 95 c0             	setne  al
c001686a:	31 d2                	xor    edx,edx
c001686c:	0f b6 c0             	movzx  eax,al
c001686f:	f7 d8                	neg    eax
c0016871:	83 d2 00             	adc    edx,0x0
c0016874:	83 c4 10             	add    esp,0x10
c0016877:	f7 da                	neg    edx
c0016879:	5b                   	pop    ebx
c001687a:	5e                   	pop    esi
c001687b:	5f                   	pop    edi
c001687c:	c3                   	ret    

c001687d <sysPipe(regs*)>:
c001687d:	57                   	push   edi
c001687e:	56                   	push   esi
c001687f:	53                   	push   ebx
c0016880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016884:	83 ec 0c             	sub    esp,0xc
c0016887:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001688a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001688d:	6a 20                	push   0x20
c001688f:	e8 7b 31 ff ff       	call   c0009a0f <malloc>
c0016894:	89 c3                	mov    ebx,eax
c0016896:	58                   	pop    eax
c0016897:	5a                   	pop    edx
c0016898:	68 00 50 00 00       	push   0x5000
c001689d:	53                   	push   ebx
c001689e:	e8 7d 3e ff ff       	call   c000a720 <Pipe::Pipe(int)>
c00168a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168a6:	e8 df 4c ff ff       	call   c000b58a <UnixFile::getFileDescriptor()>
c00168ab:	89 07                	mov    DWORD PTR [edi],eax
c00168ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168b0:	e8 d5 4c ff ff       	call   c000b58a <UnixFile::getFileDescriptor()>
c00168b5:	83 c4 10             	add    esp,0x10
c00168b8:	89 06                	mov    DWORD PTR [esi],eax
c00168ba:	31 d2                	xor    edx,edx
c00168bc:	5b                   	pop    ebx
c00168bd:	31 c0                	xor    eax,eax
c00168bf:	5e                   	pop    esi
c00168c0:	5f                   	pop    edi
c00168c1:	c3                   	ret    

c00168c2 <sysGetUnixTime(regs*)>:
c00168c2:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c00168c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00168cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00168d1:	e9 b0 74 ff ff       	jmp    c000dd86 <Clock::timeInSecondsLocal()>

c00168d6 <string_ends_with(char const*, char const*)>:
c00168d6:	57                   	push   edi
c00168d7:	56                   	push   esi
c00168d8:	53                   	push   ebx
c00168d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168dd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00168e1:	83 ec 0c             	sub    esp,0xc
c00168e4:	53                   	push   ebx
c00168e5:	e8 b6 9d fe ff       	call   c00006a0 <strlen>
c00168ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00168ed:	89 c6                	mov    esi,eax
c00168ef:	e8 ac 9d fe ff       	call   c00006a0 <strlen>
c00168f4:	83 c4 10             	add    esp,0x10
c00168f7:	39 c6                	cmp    esi,eax
c00168f9:	7d 06                	jge    c0016901 <string_ends_with(char const*, char const*)+0x2b>
c00168fb:	5b                   	pop    ebx
c00168fc:	31 c0                	xor    eax,eax
c00168fe:	5e                   	pop    esi
c00168ff:	5f                   	pop    edi
c0016900:	c3                   	ret    
c0016901:	83 ec 08             	sub    esp,0x8
c0016904:	29 c6                	sub    esi,eax
c0016906:	57                   	push   edi
c0016907:	01 f3                	add    ebx,esi
c0016909:	53                   	push   ebx
c001690a:	e8 bd 9e fe ff       	call   c00007cc <strcmp>
c001690f:	83 c4 10             	add    esp,0x10
c0016912:	85 c0                	test   eax,eax
c0016914:	5b                   	pop    ebx
c0016915:	0f 94 c0             	sete   al
c0016918:	5e                   	pop    esi
c0016919:	0f b6 c0             	movzx  eax,al
c001691c:	5f                   	pop    edi
c001691d:	c3                   	ret    

c001691e <sysCallOpen(regs*)>:
c001691e:	56                   	push   esi
c001691f:	53                   	push   ebx
c0016920:	81 ec 04 01 00 00    	sub    esp,0x104
c0016926:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001692d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016930:	85 c9                	test   ecx,ecx
c0016932:	0f 84 ad 01 00 00    	je     c0016ae5 <sysCallOpen(regs*)+0x1c7>
c0016938:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001693b:	85 c0                	test   eax,eax
c001693d:	0f 84 a2 01 00 00    	je     c0016ae5 <sysCallOpen(regs*)+0x1c7>
c0016943:	52                   	push   edx
c0016944:	68 31 5e 02 c0       	push   0xc0025e31
c0016949:	50                   	push   eax
c001694a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001694e:	56                   	push   esi
c001694f:	e8 68 67 ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c0016954:	89 34 24             	mov    DWORD PTR [esp],esi
c0016957:	e8 44 9d fe ff       	call   c00006a0 <strlen>
c001695c:	83 c4 10             	add    esp,0x10
c001695f:	48                   	dec    eax
c0016960:	74 1d                	je     c001697f <sysCallOpen(regs*)+0x61>
c0016962:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016965:	eb 0f                	jmp    c0016976 <sysCallOpen(regs*)+0x58>
c0016967:	80 fa 3a             	cmp    dl,0x3a
c001696a:	74 0f                	je     c001697b <sysCallOpen(regs*)+0x5d>
c001696c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016970:	48                   	dec    eax
c0016971:	74 0c                	je     c001697f <sysCallOpen(regs*)+0x61>
c0016973:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016976:	80 fa 2e             	cmp    dl,0x2e
c0016979:	75 ec                	jne    c0016967 <sysCallOpen(regs*)+0x49>
c001697b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001697f:	83 ec 08             	sub    esp,0x8
c0016982:	68 35 5e 02 c0       	push   0xc0025e35
c0016987:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001698a:	e8 47 ff ff ff       	call   c00168d6 <string_ends_with(char const*, char const*)>
c001698f:	83 c4 10             	add    esp,0x10
c0016992:	85 c0                	test   eax,eax
c0016994:	74 1d                	je     c00169b3 <sysCallOpen(regs*)+0x95>
c0016996:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016999:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001699f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169a6:	81 c4 04 01 00 00    	add    esp,0x104
c00169ac:	31 c0                	xor    eax,eax
c00169ae:	31 d2                	xor    edx,edx
c00169b0:	5b                   	pop    ebx
c00169b1:	5e                   	pop    esi
c00169b2:	c3                   	ret    
c00169b3:	83 ec 08             	sub    esp,0x8
c00169b6:	68 3a 5e 02 c0       	push   0xc0025e3a
c00169bb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169be:	e8 13 ff ff ff       	call   c00168d6 <string_ends_with(char const*, char const*)>
c00169c3:	83 c4 10             	add    esp,0x10
c00169c6:	85 c0                	test   eax,eax
c00169c8:	75 cc                	jne    c0016996 <sysCallOpen(regs*)+0x78>
c00169ca:	83 ec 08             	sub    esp,0x8
c00169cd:	68 36 5e 02 c0       	push   0xc0025e36
c00169d2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169d5:	e8 f2 9d fe ff       	call   c00007cc <strcmp>
c00169da:	83 c4 10             	add    esp,0x10
c00169dd:	85 c0                	test   eax,eax
c00169df:	74 b5                	je     c0016996 <sysCallOpen(regs*)+0x78>
c00169e1:	83 ec 08             	sub    esp,0x8
c00169e4:	68 35 5e 02 c0       	push   0xc0025e35
c00169e9:	56                   	push   esi
c00169ea:	e8 e7 fe ff ff       	call   c00168d6 <string_ends_with(char const*, char const*)>
c00169ef:	83 c4 10             	add    esp,0x10
c00169f2:	85 c0                	test   eax,eax
c00169f4:	75 a0                	jne    c0016996 <sysCallOpen(regs*)+0x78>
c00169f6:	83 ec 08             	sub    esp,0x8
c00169f9:	68 3f 5e 02 c0       	push   0xc0025e3f
c00169fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a01:	e8 d0 fe ff ff       	call   c00168d6 <string_ends_with(char const*, char const*)>
c0016a06:	83 c4 10             	add    esp,0x10
c0016a09:	85 c0                	test   eax,eax
c0016a0b:	0f 85 e7 00 00 00    	jne    c0016af8 <sysCallOpen(regs*)+0x1da>
c0016a11:	83 ec 08             	sub    esp,0x8
c0016a14:	68 44 5e 02 c0       	push   0xc0025e44
c0016a19:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a1c:	e8 b5 fe ff ff       	call   c00168d6 <string_ends_with(char const*, char const*)>
c0016a21:	83 c4 10             	add    esp,0x10
c0016a24:	85 c0                	test   eax,eax
c0016a26:	0f 85 cc 00 00 00    	jne    c0016af8 <sysCallOpen(regs*)+0x1da>
c0016a2c:	83 ec 08             	sub    esp,0x8
c0016a2f:	68 40 5e 02 c0       	push   0xc0025e40
c0016a34:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a37:	e8 90 9d fe ff       	call   c00007cc <strcmp>
c0016a3c:	83 c4 10             	add    esp,0x10
c0016a3f:	85 c0                	test   eax,eax
c0016a41:	0f 84 b1 00 00 00    	je     c0016af8 <sysCallOpen(regs*)+0x1da>
c0016a47:	83 ec 08             	sub    esp,0x8
c0016a4a:	68 3f 5e 02 c0       	push   0xc0025e3f
c0016a4f:	56                   	push   esi
c0016a50:	e8 81 fe ff ff       	call   c00168d6 <string_ends_with(char const*, char const*)>
c0016a55:	83 c4 10             	add    esp,0x10
c0016a58:	85 c0                	test   eax,eax
c0016a5a:	0f 85 98 00 00 00    	jne    c0016af8 <sysCallOpen(regs*)+0x1da>
c0016a60:	83 ec 0c             	sub    esp,0xc
c0016a63:	68 14 01 00 00       	push   0x114
c0016a68:	e8 a2 2f ff ff       	call   c0009a0f <malloc>
c0016a6d:	83 c4 0c             	add    esp,0xc
c0016a70:	89 c6                	mov    esi,eax
c0016a72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a77:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016a7a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a7d:	56                   	push   esi
c0016a7e:	e8 e3 67 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0016a83:	83 c4 10             	add    esp,0x10
c0016a86:	85 f6                	test   esi,esi
c0016a88:	74 5b                	je     c0016ae5 <sysCallOpen(regs*)+0x1c7>
c0016a8a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016a8d:	0f b6 c2             	movzx  eax,dl
c0016a90:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016a93:	89 d0                	mov    eax,edx
c0016a95:	83 e0 01             	and    eax,0x1
c0016a98:	f6 c2 02             	test   dl,0x2
c0016a9b:	74 03                	je     c0016aa0 <sysCallOpen(regs*)+0x182>
c0016a9d:	83 c8 02             	or     eax,0x2
c0016aa0:	f6 c2 04             	test   dl,0x4
c0016aa3:	74 03                	je     c0016aa8 <sysCallOpen(regs*)+0x18a>
c0016aa5:	83 c8 04             	or     eax,0x4
c0016aa8:	f6 c2 08             	test   dl,0x8
c0016aab:	74 03                	je     c0016ab0 <sysCallOpen(regs*)+0x192>
c0016aad:	83 c8 0a             	or     eax,0xa
c0016ab0:	83 e2 10             	and    edx,0x10
c0016ab3:	74 03                	je     c0016ab8 <sysCallOpen(regs*)+0x19a>
c0016ab5:	83 c8 12             	or     eax,0x12
c0016ab8:	83 ec 08             	sub    esp,0x8
c0016abb:	50                   	push   eax
c0016abc:	56                   	push   esi
c0016abd:	e8 7e 68 ff ff       	call   c000d340 <File::open(FileOpenMode)>
c0016ac2:	83 c4 10             	add    esp,0x10
c0016ac5:	85 c0                	test   eax,eax
c0016ac7:	75 1c                	jne    c0016ae5 <sysCallOpen(regs*)+0x1c7>
c0016ac9:	83 ec 0c             	sub    esp,0xc
c0016acc:	56                   	push   esi
c0016acd:	e8 b8 4a ff ff       	call   c000b58a <UnixFile::getFileDescriptor()>
c0016ad2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016ad5:	83 c4 10             	add    esp,0x10
c0016ad8:	89 02                	mov    DWORD PTR [edx],eax
c0016ada:	c1 f8 1f             	sar    eax,0x1f
c0016add:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016ae0:	e9 c1 fe ff ff       	jmp    c00169a6 <sysCallOpen(regs*)+0x88>
c0016ae5:	81 c4 04 01 00 00    	add    esp,0x104
c0016aeb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016af0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016af5:	5b                   	pop    ebx
c0016af6:	5e                   	pop    esi
c0016af7:	c3                   	ret    
c0016af8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016afb:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016b01:	e9 99 fe ff ff       	jmp    c001699f <sysCallOpen(regs*)+0x81>

c0016b06 <Sys::loadSyscalls()>:
c0016b06:	c7 05 c0 8a 02 c0 77 5d 01 c0 	mov    DWORD PTR ds:0xc0028ac0,0xc0015d77
c0016b10:	c7 05 c4 8a 02 c0 6c 59 01 c0 	mov    DWORD PTR ds:0xc0028ac4,0xc001596c
c0016b1a:	c7 05 c8 8a 02 c0 5d 5b 01 c0 	mov    DWORD PTR ds:0xc0028ac8,0xc0015b5d
c0016b24:	c7 05 cc 8a 02 c0 ad 5c 01 c0 	mov    DWORD PTR ds:0xc0028acc,0xc0015cad
c0016b2e:	c7 05 d0 8a 02 c0 f5 5a 01 c0 	mov    DWORD PTR ds:0xc0028ad0,0xc0015af5
c0016b38:	c7 05 d4 8a 02 c0 a3 59 01 c0 	mov    DWORD PTR ds:0xc0028ad4,0xc00159a3
c0016b42:	c7 05 d8 8a 02 c0 84 59 01 c0 	mov    DWORD PTR ds:0xc0028ad8,0xc0015984
c0016b4c:	c7 05 dc 8a 02 c0 b2 5b 01 c0 	mov    DWORD PTR ds:0xc0028adc,0xc0015bb2
c0016b56:	c7 05 e4 8a 02 c0 3a 62 01 c0 	mov    DWORD PTR ds:0xc0028ae4,0xc001623a
c0016b60:	c7 05 e0 8a 02 c0 1e 69 01 c0 	mov    DWORD PTR ds:0xc0028ae0,0xc001691e
c0016b6a:	c7 05 e8 8a 02 c0 9a 62 01 c0 	mov    DWORD PTR ds:0xc0028ae8,0xc001629a
c0016b74:	c7 05 ec 8a 02 c0 7d 5f 01 c0 	mov    DWORD PTR ds:0xc0028aec,0xc0015f7d
c0016b7e:	c7 05 f0 8a 02 c0 af 5d 01 c0 	mov    DWORD PTR ds:0xc0028af0,0xc0015daf
c0016b88:	c7 05 f4 8a 02 c0 b4 5d 01 c0 	mov    DWORD PTR ds:0xc0028af4,0xc0015db4
c0016b92:	c7 05 f8 8a 02 c0 63 63 01 c0 	mov    DWORD PTR ds:0xc0028af8,0xc0016363
c0016b9c:	c7 05 fc 8a 02 c0 0f 63 01 c0 	mov    DWORD PTR ds:0xc0028afc,0xc001630f
c0016ba6:	c7 05 00 8b 02 c0 56 60 01 c0 	mov    DWORD PTR ds:0xc0028b00,0xc0016056
c0016bb0:	c7 05 04 8b 02 c0 ad 60 01 c0 	mov    DWORD PTR ds:0xc0028b04,0xc00160ad
c0016bba:	c7 05 08 8b 02 c0 19 61 01 c0 	mov    DWORD PTR ds:0xc0028b08,0xc0016119
c0016bc4:	c7 05 0c 8b 02 c0 b9 5d 01 c0 	mov    DWORD PTR ds:0xc0028b0c,0xc0015db9
c0016bce:	c7 05 10 8b 02 c0 d3 63 01 c0 	mov    DWORD PTR ds:0xc0028b10,0xc00163d3
c0016bd8:	c7 05 14 8b 02 c0 ed 63 01 c0 	mov    DWORD PTR ds:0xc0028b14,0xc00163ed
c0016be2:	c7 05 18 8b 02 c0 ed 63 01 c0 	mov    DWORD PTR ds:0xc0028b18,0xc00163ed
c0016bec:	c7 05 1c 8b 02 c0 22 64 01 c0 	mov    DWORD PTR ds:0xc0028b1c,0xc0016422
c0016bf6:	c7 05 20 8b 02 c0 86 64 01 c0 	mov    DWORD PTR ds:0xc0028b20,0xc0016486
c0016c00:	c7 05 24 8b 02 c0 c3 5d 01 c0 	mov    DWORD PTR ds:0xc0028b24,0xc0015dc3
c0016c0a:	c7 05 28 8b 02 c0 ea 64 01 c0 	mov    DWORD PTR ds:0xc0028b28,0xc00164ea
c0016c14:	c7 05 2c 8b 02 c0 3a 5f 01 c0 	mov    DWORD PTR ds:0xc0028b2c,0xc0015f3a
c0016c1e:	c7 05 30 8b 02 c0 36 65 01 c0 	mov    DWORD PTR ds:0xc0028b30,0xc0016536
c0016c28:	c7 05 34 8b 02 c0 fc 5f 01 c0 	mov    DWORD PTR ds:0xc0028b34,0xc0015ffc
c0016c32:	c7 05 38 8b 02 c0 b9 65 01 c0 	mov    DWORD PTR ds:0xc0028b38,0xc00165b9
c0016c3c:	c7 05 3c 8b 02 c0 8b 61 01 c0 	mov    DWORD PTR ds:0xc0028b3c,0xc001618b
c0016c46:	c7 05 40 8b 02 c0 e2 65 01 c0 	mov    DWORD PTR ds:0xc0028b40,0xc00165e2
c0016c50:	c7 05 44 8b 02 c0 4a 66 01 c0 	mov    DWORD PTR ds:0xc0028b44,0xc001664a
c0016c5a:	c7 05 48 8b 02 c0 f7 66 01 c0 	mov    DWORD PTR ds:0xc0028b48,0xc00166f7
c0016c64:	c7 05 4c 8b 02 c0 d3 5d 01 c0 	mov    DWORD PTR ds:0xc0028b4c,0xc0015dd3
c0016c6e:	c7 05 50 8b 02 c0 3d 5e 01 c0 	mov    DWORD PTR ds:0xc0028b50,0xc0015e3d
c0016c78:	c7 05 54 8b 02 c0 87 5e 01 c0 	mov    DWORD PTR ds:0xc0028b54,0xc0015e87
c0016c82:	c7 05 58 8b 02 c0 0b 68 01 c0 	mov    DWORD PTR ds:0xc0028b58,0xc001680b
c0016c8c:	c7 05 5c 8b 02 c0 08 64 01 c0 	mov    DWORD PTR ds:0xc0028b5c,0xc0016408
c0016c96:	c7 05 60 8b 02 c0 dc 5e 01 c0 	mov    DWORD PTR ds:0xc0028b60,0xc0015edc
c0016ca0:	c7 05 64 8b 02 c0 7d 68 01 c0 	mov    DWORD PTR ds:0xc0028b64,0xc001687d
c0016caa:	c7 05 68 8b 02 c0 c2 68 01 c0 	mov    DWORD PTR ds:0xc0028b68,0xc00168c2
c0016cb4:	c7 05 6c 8b 02 c0 4d 5a 01 c0 	mov    DWORD PTR ds:0xc0028b6c,0xc0015a4d
c0016cbe:	c7 05 70 8b 02 c0 ce 5b 01 c0 	mov    DWORD PTR ds:0xc0028b70,0xc0015bce
c0016cc8:	c7 05 74 8b 02 c0 63 5c 01 c0 	mov    DWORD PTR ds:0xc0028b74,0xc0015c63
c0016cd2:	c7 05 78 8b 02 c0 36 59 01 c0 	mov    DWORD PTR ds:0xc0028b78,0xc0015936
c0016cdc:	c7 05 7c 8b 02 c0 15 5d 01 c0 	mov    DWORD PTR ds:0xc0028b7c,0xc0015d15
c0016ce6:	c7 05 80 8b 02 c0 af 59 01 c0 	mov    DWORD PTR ds:0xc0028b80,0xc00159af
c0016cf0:	c7 05 84 8b 02 c0 c9 59 01 c0 	mov    DWORD PTR ds:0xc0028b84,0xc00159c9
c0016cfa:	c3                   	ret    

c0016cfb <Sys::systemCall(regs*, void*)>:
c0016cfb:	53                   	push   ebx
c0016cfc:	83 ec 08             	sub    esp,0x8
c0016cff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016d03:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016d06:	83 f8 7f             	cmp    eax,0x7f
c0016d09:	77 16                	ja     c0016d21 <Sys::systemCall(regs*, void*)+0x26>
c0016d0b:	8b 14 85 c0 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7540]
c0016d12:	85 d2                	test   edx,edx
c0016d14:	74 0b                	je     c0016d21 <Sys::systemCall(regs*, void*)+0x26>
c0016d16:	83 ec 0c             	sub    esp,0xc
c0016d19:	53                   	push   ebx
c0016d1a:	ff d2                	call   edx
c0016d1c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016d1f:	eb 0d                	jmp    c0016d2e <Sys::systemCall(regs*, void*)+0x33>
c0016d21:	52                   	push   edx
c0016d22:	52                   	push   edx
c0016d23:	50                   	push   eax
c0016d24:	68 49 5e 02 c0       	push   0xc0025e49
c0016d29:	e8 cd 5f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0016d2e:	83 c4 10             	add    esp,0x10
c0016d31:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016d36:	31 d2                	xor    edx,edx
c0016d38:	83 c4 08             	add    esp,0x8
c0016d3b:	5b                   	pop    ebx
c0016d3c:	c3                   	ret    

c0016d3d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016d3d:	55                   	push   ebp
c0016d3e:	57                   	push   edi
c0016d3f:	56                   	push   esi
c0016d40:	53                   	push   ebx
c0016d41:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016d47:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016d4e:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016d55:	85 c0                	test   eax,eax
c0016d57:	0f 95 c1             	setne  cl
c0016d5a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016d62:	0f 94 c2             	sete   dl
c0016d65:	84 d1                	test   cl,dl
c0016d67:	74 23                	je     c0016d8c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016d69:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016d6f:	74 1b                	je     c0016d8c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016d71:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016d77:	89 da                	mov    edx,ebx
c0016d79:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016d7f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016d85:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016d8c:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016d93:	05 ff 0f 00 00       	add    eax,0xfff
c0016d98:	83 ec 0c             	sub    esp,0xc
c0016d9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d9f:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016da5:	c1 e8 0c             	shr    eax,0xc
c0016da8:	89 fe                	mov    esi,edi
c0016daa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016dae:	c1 ee 0c             	shr    esi,0xc
c0016db1:	6a 01                	push   0x1
c0016db3:	e8 1d 4c ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0016db8:	89 c5                	mov    ebp,eax
c0016dba:	58                   	pop    eax
c0016dbb:	5a                   	pop    edx
c0016dbc:	56                   	push   esi
c0016dbd:	68 5d 5e 02 c0       	push   0xc0025e5d
c0016dc2:	e8 34 5f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0016dc7:	59                   	pop    ecx
c0016dc8:	58                   	pop    eax
c0016dc9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016dcd:	68 6f 5e 02 c0       	push   0xc0025e6f
c0016dd2:	e8 24 5f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0016dd7:	83 c4 10             	add    esp,0x10
c0016dda:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016de0:	0f 86 31 01 00 00    	jbe    c0016f17 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016de6:	c1 e6 0c             	shl    esi,0xc
c0016de9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016dec:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016def:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016df3:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016dfa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016dfd:	01 df                	add    edi,ebx
c0016dff:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016e02:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016e06:	0f 84 08 01 00 00    	je     c0016f14 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016e0c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016e12:	76 05                	jbe    c0016e19 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016e14:	bf 00 10 00 00       	mov    edi,0x1000
c0016e19:	83 ec 0c             	sub    esp,0xc
c0016e1c:	31 d2                	xor    edx,edx
c0016e1e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016e25:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e27:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016e2b:	50                   	push   eax
c0016e2c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016e30:	56                   	push   esi
c0016e31:	52                   	push   edx
c0016e32:	57                   	push   edi
c0016e33:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016e3a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e3d:	83 c4 20             	add    esp,0x20
c0016e40:	85 c0                	test   eax,eax
c0016e42:	74 0a                	je     c0016e4e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016e44:	53                   	push   ebx
c0016e45:	53                   	push   ebx
c0016e46:	50                   	push   eax
c0016e47:	68 81 5e 02 c0       	push   0xc0025e81
c0016e4c:	eb 0f                	jmp    c0016e5d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016e4e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016e52:	74 20                	je     c0016e74 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016e54:	51                   	push   ecx
c0016e55:	51                   	push   ecx
c0016e56:	6a 00                	push   0x0
c0016e58:	68 ac 5e 02 c0       	push   0xc0025eac
c0016e5d:	e8 99 5e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0016e62:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e65:	e8 9b 4e ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c0016e6a:	83 c4 10             	add    esp,0x10
c0016e6d:	31 c0                	xor    eax,eax
c0016e6f:	e9 68 01 00 00       	jmp    c0016fdc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016e74:	fa                   	cli    
c0016e75:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0016e7b:	e8 46 32 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016e80:	6a 07                	push   0x7
c0016e82:	89 c7                	mov    edi,eax
c0016e84:	55                   	push   ebp
c0016e85:	50                   	push   eax
c0016e86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e8e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e94:	e8 e3 51 ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c0016e99:	83 c4 0c             	add    esp,0xc
c0016e9c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016ea3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ea9:	6a 00                	push   0x0
c0016eab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016eb3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016eb9:	e8 18 50 ff ff       	call   c000bed6 <VAS::mapOtherVASIn(bool, VAS*)>
c0016ebe:	58                   	pop    eax
c0016ebf:	5a                   	pop    edx
c0016ec0:	68 07 0c 00 00       	push   0xc07
c0016ec5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016ec9:	57                   	push   edi
c0016eca:	89 ef                	mov    edi,ebp
c0016ecc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016ed3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ed9:	6a 00                	push   0x0
c0016edb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ee0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ee3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ee9:	e8 4a 55 ff ff       	call   c000c438 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016eee:	b9 00 10 00 00       	mov    ecx,0x1000
c0016ef3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ef5:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0016efa:	83 c4 20             	add    esp,0x20
c0016efd:	48                   	dec    eax
c0016efe:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0016f03:	85 c0                	test   eax,eax
c0016f05:	75 01                	jne    c0016f08 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016f07:	fb                   	sti    
c0016f08:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016f0f:	e9 df fe ff ff       	jmp    c0016df3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016f14:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016f17:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016f1f:	0f 86 a9 00 00 00    	jbe    c0016fce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016f25:	fa                   	cli    
c0016f26:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0016f2c:	51                   	push   ecx
c0016f2d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016f34:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f3a:	6a 00                	push   0x0
c0016f3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f44:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f4a:	e8 87 4f ff ff       	call   c000bed6 <VAS::mapOtherVASIn(bool, VAS*)>
c0016f4f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016f53:	c1 e6 0c             	shl    esi,0xc
c0016f56:	01 de                	add    esi,ebx
c0016f58:	83 c4 10             	add    esp,0x10
c0016f5b:	39 de                	cmp    esi,ebx
c0016f5d:	74 61                	je     c0016fc0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016f5f:	e8 62 31 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016f64:	6a 07                	push   0x7
c0016f66:	89 c7                	mov    edi,eax
c0016f68:	55                   	push   ebp
c0016f69:	50                   	push   eax
c0016f6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f6f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f72:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f78:	e8 ff 50 ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c0016f7d:	58                   	pop    eax
c0016f7e:	5a                   	pop    edx
c0016f7f:	68 07 0c 00 00       	push   0xc07
c0016f84:	53                   	push   ebx
c0016f85:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016f8b:	57                   	push   edi
c0016f8c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016f93:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f99:	6a 00                	push   0x0
c0016f9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fa0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fa3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016fa9:	e8 8a 54 ff ff       	call   c000c438 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016fae:	83 c4 1c             	add    esp,0x1c
c0016fb1:	68 00 10 00 00       	push   0x1000
c0016fb6:	6a 00                	push   0x0
c0016fb8:	55                   	push   ebp
c0016fb9:	e8 c6 96 fe ff       	call   c0000684 <memset>
c0016fbe:	eb 98                	jmp    c0016f58 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016fc0:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0016fc5:	48                   	dec    eax
c0016fc6:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0016fcb:	75 01                	jne    c0016fce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016fcd:	fb                   	sti    
c0016fce:	83 ec 0c             	sub    esp,0xc
c0016fd1:	55                   	push   ebp
c0016fd2:	e8 2e 4d ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c0016fd7:	83 c4 10             	add    esp,0x10
c0016fda:	b0 01                	mov    al,0x1
c0016fdc:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016fe2:	5b                   	pop    ebx
c0016fe3:	5e                   	pop    esi
c0016fe4:	5f                   	pop    edi
c0016fe5:	5d                   	pop    ebp
c0016fe6:	c3                   	ret    

c0016fe7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016fe7:	55                   	push   ebp
c0016fe8:	57                   	push   edi
c0016fe9:	56                   	push   esi
c0016fea:	53                   	push   ebx
c0016feb:	83 ec 48             	sub    esp,0x48
c0016fee:	68 14 01 00 00       	push   0x114
c0016ff3:	e8 17 2a ff ff       	call   c0009a0f <malloc>
c0016ff8:	83 c4 0c             	add    esp,0xc
c0016ffb:	89 c6                	mov    esi,eax
c0016ffd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017001:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017005:	50                   	push   eax
c0017006:	e8 5b 62 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001700b:	58                   	pop    eax
c001700c:	5a                   	pop    edx
c001700d:	6a 01                	push   0x1
c001700f:	56                   	push   esi
c0017010:	e8 2b 63 ff ff       	call   c000d340 <File::open(FileOpenMode)>
c0017015:	83 c4 10             	add    esp,0x10
c0017018:	85 c0                	test   eax,eax
c001701a:	0f 85 47 01 00 00    	jne    c0017167 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017020:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017028:	83 ec 0c             	sub    esp,0xc
c001702b:	6a 34                	push   0x34
c001702d:	e8 dd 29 ff ff       	call   c0009a0f <malloc>
c0017032:	89 c3                	mov    ebx,eax
c0017034:	58                   	pop    eax
c0017035:	8b 06                	mov    eax,DWORD PTR [esi]
c0017037:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001703b:	57                   	push   edi
c001703c:	53                   	push   ebx
c001703d:	6a 00                	push   0x0
c001703f:	6a 34                	push   0x34
c0017041:	56                   	push   esi
c0017042:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017045:	83 c4 20             	add    esp,0x20
c0017048:	85 c0                	test   eax,eax
c001704a:	0f 85 17 01 00 00    	jne    c0017167 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017050:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017056:	0f 85 0b 01 00 00    	jne    c0017167 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001705c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001705f:	85 c0                	test   eax,eax
c0017061:	0f 84 00 01 00 00    	je     c0017167 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017067:	31 d2                	xor    edx,edx
c0017069:	55                   	push   ebp
c001706a:	52                   	push   edx
c001706b:	50                   	push   eax
c001706c:	56                   	push   esi
c001706d:	e8 8c 63 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017072:	83 c4 10             	add    esp,0x10
c0017075:	85 c0                	test   eax,eax
c0017077:	0f 85 ea 00 00 00    	jne    c0017167 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001707d:	83 ec 0c             	sub    esp,0xc
c0017080:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017083:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017087:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001708b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001708f:	0f af c2             	imul   eax,edx
c0017092:	50                   	push   eax
c0017093:	e8 77 29 ff ff       	call   c0009a0f <malloc>
c0017098:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001709a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001709e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00170a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00170a5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00170a9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00170ad:	0f af c2             	imul   eax,edx
c00170b0:	99                   	cdq    
c00170b1:	52                   	push   edx
c00170b2:	50                   	push   eax
c00170b3:	56                   	push   esi
c00170b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170b7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00170ba:	83 c4 20             	add    esp,0x20
c00170bd:	85 c0                	test   eax,eax
c00170bf:	0f 84 a2 00 00 00    	je     c0017167 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170c5:	31 d2                	xor    edx,edx
c00170c7:	51                   	push   ecx
c00170c8:	52                   	push   edx
c00170c9:	50                   	push   eax
c00170ca:	56                   	push   esi
c00170cb:	e8 2e 63 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c00170d0:	83 c4 10             	add    esp,0x10
c00170d3:	85 c0                	test   eax,eax
c00170d5:	0f 85 8c 00 00 00    	jne    c0017167 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170db:	83 ec 0c             	sub    esp,0xc
c00170de:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00170e2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00170e6:	31 ed                	xor    ebp,ebp
c00170e8:	0f af c2             	imul   eax,edx
c00170eb:	50                   	push   eax
c00170ec:	e8 1e 29 ff ff       	call   c0009a0f <malloc>
c00170f1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00170f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00170fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170fe:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017102:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017106:	0f af c2             	imul   eax,edx
c0017109:	99                   	cdq    
c001710a:	52                   	push   edx
c001710b:	50                   	push   eax
c001710c:	56                   	push   esi
c001710d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017110:	83 c4 20             	add    esp,0x20
c0017113:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001711b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001711f:	0f 86 80 00 00 00    	jbe    c00171a5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017125:	0f b7 fd             	movzx  edi,bp
c0017128:	c1 e7 05             	shl    edi,0x5
c001712b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001712f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017132:	75 6b                	jne    c001719f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017134:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017137:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001713b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001713e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017142:	52                   	push   edx
c0017143:	31 d2                	xor    edx,edx
c0017145:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017148:	52                   	push   edx
c0017149:	50                   	push   eax
c001714a:	56                   	push   esi
c001714b:	e8 ae 62 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017150:	83 c4 10             	add    esp,0x10
c0017153:	85 c0                	test   eax,eax
c0017155:	74 17                	je     c001716e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017157:	83 ec 0c             	sub    esp,0xc
c001715a:	68 d8 5e 02 c0       	push   0xc0025ed8
c001715f:	e8 97 5b ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017164:	83 c4 10             	add    esp,0x10
c0017167:	31 c0                	xor    eax,eax
c0017169:	e9 87 00 00 00       	jmp    c00171f5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001716e:	83 ec 0c             	sub    esp,0xc
c0017171:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017174:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017177:	50                   	push   eax
c0017178:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001717c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017180:	56                   	push   esi
c0017181:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017185:	e8 b3 fb ff ff       	call   c0016d3d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001718a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001718e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0017192:	83 c4 20             	add    esp,0x20
c0017195:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017199:	73 04                	jae    c001719f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001719b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001719f:	45                   	inc    ebp
c00171a0:	e9 76 ff ff ff       	jmp    c001711b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00171a5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00171a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171b1:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00171b7:	83 ec 0c             	sub    esp,0xc
c00171ba:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00171c0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00171c5:	05 00 10 00 00       	add    eax,0x1000
c00171ca:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00171cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171d1:	e8 49 28 ff ff       	call   c0009a1f <free>
c00171d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00171d9:	e8 41 28 ff ff       	call   c0009a1f <free>
c00171de:	58                   	pop    eax
c00171df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171e3:	e8 37 28 ff ff       	call   c0009a1f <free>
c00171e8:	89 34 24             	mov    DWORD PTR [esp],esi
c00171eb:	e8 ae 61 ff ff       	call   c000d39e <File::close()>
c00171f0:	83 c4 10             	add    esp,0x10
c00171f3:	b0 01                	mov    al,0x1
c00171f5:	83 c4 3c             	add    esp,0x3c
c00171f8:	5b                   	pop    ebx
c00171f9:	5e                   	pop    esi
c00171fa:	5f                   	pop    edi
c00171fb:	5d                   	pop    ebp
c00171fc:	c3                   	ret    

c00171fd <Thr::runtimeReferenceHelper()>:
c00171fd:	83 ec 18             	sub    esp,0x18
c0017200:	68 e0 5e 02 c0       	push   0xc0025ee0
c0017205:	e8 f1 5a ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001720a:	fa                   	cli    
c001720b:	83 c4 10             	add    esp,0x10
c001720e:	eb fe                	jmp    c001720e <Thr::runtimeReferenceHelper()+0x11>

c0017210 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017210:	57                   	push   edi
c0017211:	56                   	push   esi
c0017212:	53                   	push   ebx
c0017213:	31 db                	xor    ebx,ebx
c0017215:	39 1d 60 94 02 c0    	cmp    DWORD PTR ds:0xc0029460,ebx
c001721b:	7e 3c                	jle    c0017259 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001721d:	8b 34 9d e0 93 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6c20]
c0017224:	31 ff                	xor    edi,edi
c0017226:	39 3c 9d e0 92 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6d20],edi
c001722d:	7e 27                	jle    c0017256 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001722f:	50                   	push   eax
c0017230:	50                   	push   eax
c0017231:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017235:	8b 06                	mov    eax,DWORD PTR [esi]
c0017237:	03 04 9d 60 93 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6ca0]
c001723e:	50                   	push   eax
c001723f:	e8 88 95 fe ff       	call   c00007cc <strcmp>
c0017244:	83 c4 10             	add    esp,0x10
c0017247:	85 c0                	test   eax,eax
c0017249:	75 05                	jne    c0017250 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001724b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001724e:	eb 0b                	jmp    c001725b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017250:	83 c6 10             	add    esi,0x10
c0017253:	47                   	inc    edi
c0017254:	eb d0                	jmp    c0017226 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017256:	43                   	inc    ebx
c0017257:	eb bc                	jmp    c0017215 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017259:	31 c0                	xor    eax,eax
c001725b:	5b                   	pop    ebx
c001725c:	5e                   	pop    esi
c001725d:	5f                   	pop    edi
c001725e:	c3                   	ret    

c001725f <Thr::loadKernelSymbolTable(char const*)>:
c001725f:	55                   	push   ebp
c0017260:	57                   	push   edi
c0017261:	56                   	push   esi
c0017262:	53                   	push   ebx
c0017263:	83 ec 68             	sub    esp,0x68
c0017266:	8b 35 b0 94 02 c0    	mov    esi,DWORD PTR ds:0xc00294b0
c001726c:	68 14 01 00 00       	push   0x114
c0017271:	e8 99 27 ff ff       	call   c0009a0f <malloc>
c0017276:	83 c4 0c             	add    esp,0xc
c0017279:	89 c3                	mov    ebx,eax
c001727b:	56                   	push   esi
c001727c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017280:	50                   	push   eax
c0017281:	e8 e0 5f ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0017286:	5e                   	pop    esi
c0017287:	5f                   	pop    edi
c0017288:	6a 01                	push   0x1
c001728a:	53                   	push   ebx
c001728b:	e8 b0 60 ff ff       	call   c000d340 <File::open(FileOpenMode)>
c0017290:	83 c4 10             	add    esp,0x10
c0017293:	85 c0                	test   eax,eax
c0017295:	74 0a                	je     c00172a1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0017297:	83 ec 0c             	sub    esp,0xc
c001729a:	68 02 5f 02 c0       	push   0xc0025f02
c001729f:	eb 34                	jmp    c00172d5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00172a1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00172a9:	83 ec 0c             	sub    esp,0xc
c00172ac:	6a 34                	push   0x34
c00172ae:	e8 5c 27 ff ff       	call   c0009a0f <malloc>
c00172b3:	59                   	pop    ecx
c00172b4:	89 c7                	mov    edi,eax
c00172b6:	8d 74 24 34          	lea    esi,[esp+0x34]
c00172ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00172bc:	56                   	push   esi
c00172bd:	57                   	push   edi
c00172be:	6a 00                	push   0x0
c00172c0:	6a 34                	push   0x34
c00172c2:	53                   	push   ebx
c00172c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00172c6:	83 c4 20             	add    esp,0x20
c00172c9:	85 c0                	test   eax,eax
c00172cb:	74 17                	je     c00172e4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00172cd:	83 ec 0c             	sub    esp,0xc
c00172d0:	68 19 5f 02 c0       	push   0xc0025f19
c00172d5:	e8 2d d7 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c00172da:	83 c4 10             	add    esp,0x10
c00172dd:	31 c0                	xor    eax,eax
c00172df:	e9 31 02 00 00       	jmp    c0017515 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00172e4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00172ea:	75 e1                	jne    c00172cd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00172ec:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00172ef:	85 c0                	test   eax,eax
c00172f1:	74 da                	je     c00172cd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00172f3:	52                   	push   edx
c00172f4:	31 d2                	xor    edx,edx
c00172f6:	52                   	push   edx
c00172f7:	50                   	push   eax
c00172f8:	53                   	push   ebx
c00172f9:	e8 00 61 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c00172fe:	83 c4 10             	add    esp,0x10
c0017301:	85 c0                	test   eax,eax
c0017303:	75 c8                	jne    c00172cd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017305:	83 ec 0c             	sub    esp,0xc
c0017308:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001730c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017310:	31 ed                	xor    ebp,ebp
c0017312:	0f af c2             	imul   eax,edx
c0017315:	50                   	push   eax
c0017316:	e8 f4 26 ff ff       	call   c0009a0f <malloc>
c001731b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001731d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017321:	89 34 24             	mov    DWORD PTR [esp],esi
c0017324:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017328:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001732c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017330:	0f af c2             	imul   eax,edx
c0017333:	99                   	cdq    
c0017334:	52                   	push   edx
c0017335:	50                   	push   eax
c0017336:	53                   	push   ebx
c0017337:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001733a:	83 c4 20             	add    esp,0x20
c001733d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017345:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001734d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017355:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001735d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017361:	0f 86 aa 00 00 00    	jbe    c0017411 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0017367:	0f b7 f5             	movzx  esi,bp
c001736a:	6b f6 28             	imul   esi,esi,0x28
c001736d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017371:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017374:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017378:	50                   	push   eax
c0017379:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001737d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017381:	8b 16                	mov    edx,DWORD PTR [esi]
c0017383:	6b c0 28             	imul   eax,eax,0x28
c0017386:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001738a:	89 d0                	mov    eax,edx
c001738c:	31 d2                	xor    edx,edx
c001738e:	52                   	push   edx
c001738f:	50                   	push   eax
c0017390:	53                   	push   ebx
c0017391:	e8 68 60 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017396:	83 c4 0c             	add    esp,0xc
c0017399:	6a 20                	push   0x20
c001739b:	6a 00                	push   0x0
c001739d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00173a1:	52                   	push   edx
c00173a2:	e8 dd 92 fe ff       	call   c0000684 <memset>
c00173a7:	58                   	pop    eax
c00173a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00173aa:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00173ae:	51                   	push   ecx
c00173af:	8d 54 24 40          	lea    edx,[esp+0x40]
c00173b3:	52                   	push   edx
c00173b4:	6a 00                	push   0x0
c00173b6:	6a 1f                	push   0x1f
c00173b8:	53                   	push   ebx
c00173b9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00173bc:	83 c4 18             	add    esp,0x18
c00173bf:	68 30 5f 02 c0       	push   0xc0025f30
c00173c4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00173c8:	52                   	push   edx
c00173c9:	e8 fe 93 fe ff       	call   c00007cc <strcmp>
c00173ce:	83 c4 10             	add    esp,0x10
c00173d1:	85 c0                	test   eax,eax
c00173d3:	75 0f                	jne    c00173e4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00173d5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00173d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173e4:	50                   	push   eax
c00173e5:	50                   	push   eax
c00173e6:	68 38 5f 02 c0       	push   0xc0025f38
c00173eb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00173ef:	50                   	push   eax
c00173f0:	e8 d7 93 fe ff       	call   c00007cc <strcmp>
c00173f5:	83 c4 10             	add    esp,0x10
c00173f8:	85 c0                	test   eax,eax
c00173fa:	75 0f                	jne    c001740b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00173fc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00173ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017403:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017407:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001740b:	45                   	inc    ebp
c001740c:	e9 4c ff ff ff       	jmp    c001735d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017411:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017416:	75 10                	jne    c0017428 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017418:	83 ec 0c             	sub    esp,0xc
c001741b:	68 40 5f 02 c0       	push   0xc0025f40
c0017420:	e8 e2 d5 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0017425:	83 c4 10             	add    esp,0x10
c0017428:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001742d:	75 10                	jne    c001743f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001742f:	83 ec 0c             	sub    esp,0xc
c0017432:	68 40 5f 02 c0       	push   0xc0025f40
c0017437:	e8 cb d5 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001743c:	83 c4 10             	add    esp,0x10
c001743f:	31 d2                	xor    edx,edx
c0017441:	50                   	push   eax
c0017442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017446:	52                   	push   edx
c0017447:	50                   	push   eax
c0017448:	53                   	push   ebx
c0017449:	e8 b0 5f ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c001744e:	5a                   	pop    edx
c001744f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017453:	e8 b7 25 ff ff       	call   c0009a0f <malloc>
c0017458:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001745c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017460:	31 c9                	xor    ecx,ecx
c0017462:	5e                   	pop    esi
c0017463:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017465:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017469:	55                   	push   ebp
c001746a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001746e:	51                   	push   ecx
c001746f:	52                   	push   edx
c0017470:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017474:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017478:	53                   	push   ebx
c0017479:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001747c:	83 c4 14             	add    esp,0x14
c001747f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017483:	e8 87 25 ff ff       	call   c0009a0f <malloc>
c0017488:	89 c6                	mov    esi,eax
c001748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001748c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001748f:	56                   	push   esi
c0017490:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017494:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017498:	51                   	push   ecx
c0017499:	52                   	push   edx
c001749a:	53                   	push   ebx
c001749b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001749e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00174a2:	8b 15 60 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029460
c00174a8:	83 c4 1c             	add    esp,0x1c
c00174ab:	c1 e8 04             	shr    eax,0x4
c00174ae:	89 04 95 e0 92 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6d20],eax
c00174b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00174b9:	31 d2                	xor    edx,edx
c00174bb:	52                   	push   edx
c00174bc:	50                   	push   eax
c00174bd:	53                   	push   ebx
c00174be:	e8 3b 5f ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c00174c3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00174c5:	31 d2                	xor    edx,edx
c00174c7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174ca:	56                   	push   esi
c00174cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174cf:	52                   	push   edx
c00174d0:	50                   	push   eax
c00174d1:	53                   	push   ebx
c00174d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00174d5:	83 c4 14             	add    esp,0x14
c00174d8:	53                   	push   ebx
c00174d9:	e8 c0 5e ff ff       	call   c000d39e <File::close()>
c00174de:	5d                   	pop    ebp
c00174df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174e3:	e8 37 25 ff ff       	call   c0009a1f <free>
c00174e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00174eb:	e8 2f 25 ff ff       	call   c0009a1f <free>
c00174f0:	a1 60 94 02 c0       	mov    eax,ds:0xc0029460
c00174f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00174f9:	8d 50 01             	lea    edx,[eax+0x1]
c00174fc:	89 0c 85 e0 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6c20],ecx
c0017503:	89 34 85 60 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ca0],esi
c001750a:	89 15 60 94 02 c0    	mov    DWORD PTR ds:0xc0029460,edx
c0017510:	83 c4 10             	add    esp,0x10
c0017513:	b0 01                	mov    al,0x1
c0017515:	83 c4 5c             	add    esp,0x5c
c0017518:	5b                   	pop    ebx
c0017519:	5e                   	pop    esi
c001751a:	5f                   	pop    edi
c001751b:	5d                   	pop    ebp
c001751c:	c3                   	ret    

c001751d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001751d:	55                   	push   ebp
c001751e:	57                   	push   edi
c001751f:	56                   	push   esi
c0017520:	53                   	push   ebx
c0017521:	81 ec 68 03 00 00    	sub    esp,0x368
c0017527:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001752e:	8b 1d b0 94 02 c0    	mov    ebx,DWORD PTR ds:0xc00294b0
c0017534:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017538:	68 14 01 00 00       	push   0x114
c001753d:	e8 cd 24 ff ff       	call   c0009a0f <malloc>
c0017542:	83 c4 0c             	add    esp,0xc
c0017545:	89 c5                	mov    ebp,eax
c0017547:	53                   	push   ebx
c0017548:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001754f:	50                   	push   eax
c0017550:	e8 11 5d ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0017555:	5e                   	pop    esi
c0017556:	5f                   	pop    edi
c0017557:	6a 01                	push   0x1
c0017559:	55                   	push   ebp
c001755a:	e8 e1 5d ff ff       	call   c000d340 <File::open(FileOpenMode)>
c001755f:	83 c4 10             	add    esp,0x10
c0017562:	85 c0                	test   eax,eax
c0017564:	0f 85 a7 06 00 00    	jne    c0017c11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001756a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017572:	83 ec 0c             	sub    esp,0xc
c0017575:	6a 34                	push   0x34
c0017577:	e8 93 24 ff ff       	call   c0009a0f <malloc>
c001757c:	5b                   	pop    ebx
c001757d:	89 c7                	mov    edi,eax
c001757f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017586:	53                   	push   ebx
c0017587:	57                   	push   edi
c0017588:	6a 00                	push   0x0
c001758a:	6a 34                	push   0x34
c001758c:	55                   	push   ebp
c001758d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017590:	83 c4 20             	add    esp,0x20
c0017593:	85 c0                	test   eax,eax
c0017595:	0f 85 76 06 00 00    	jne    c0017c11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001759b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00175a1:	0f 85 6a 06 00 00    	jne    c0017c11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175a7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00175aa:	85 c0                	test   eax,eax
c00175ac:	0f 84 5f 06 00 00    	je     c0017c11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175b2:	31 d2                	xor    edx,edx
c00175b4:	51                   	push   ecx
c00175b5:	52                   	push   edx
c00175b6:	50                   	push   eax
c00175b7:	55                   	push   ebp
c00175b8:	e8 41 5e ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c00175bd:	83 c4 10             	add    esp,0x10
c00175c0:	85 c0                	test   eax,eax
c00175c2:	0f 85 49 06 00 00    	jne    c0017c11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175c8:	83 ec 0c             	sub    esp,0xc
c00175cb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00175ce:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00175d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00175d6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00175da:	0f af c2             	imul   eax,edx
c00175dd:	50                   	push   eax
c00175de:	e8 2c 24 ff ff       	call   c0009a0f <malloc>
c00175e3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00175e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00175ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00175ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175f1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00175f5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00175f9:	0f af c2             	imul   eax,edx
c00175fc:	99                   	cdq    
c00175fd:	52                   	push   edx
c00175fe:	50                   	push   eax
c00175ff:	55                   	push   ebp
c0017600:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017603:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017606:	83 c4 20             	add    esp,0x20
c0017609:	85 c0                	test   eax,eax
c001760b:	0f 84 00 06 00 00    	je     c0017c11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017611:	52                   	push   edx
c0017612:	31 d2                	xor    edx,edx
c0017614:	52                   	push   edx
c0017615:	50                   	push   eax
c0017616:	55                   	push   ebp
c0017617:	e8 e2 5d ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c001761c:	83 c4 10             	add    esp,0x10
c001761f:	85 c0                	test   eax,eax
c0017621:	0f 85 ea 05 00 00    	jne    c0017c11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017627:	83 ec 0c             	sub    esp,0xc
c001762a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001762e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017632:	31 f6                	xor    esi,esi
c0017634:	0f af c2             	imul   eax,edx
c0017637:	50                   	push   eax
c0017638:	e8 d2 23 ff ff       	call   c0009a0f <malloc>
c001763d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017640:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017644:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017647:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001764b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001764f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017653:	0f af c2             	imul   eax,edx
c0017656:	99                   	cdq    
c0017657:	52                   	push   edx
c0017658:	50                   	push   eax
c0017659:	55                   	push   ebp
c001765a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001765d:	83 c4 20             	add    esp,0x20
c0017660:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017664:	0f 86 8a 00 00 00    	jbe    c00176f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001766a:	0f b7 de             	movzx  ebx,si
c001766d:	c1 e3 05             	shl    ebx,0x5
c0017670:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017674:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017677:	75 75                	jne    c00176ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017679:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001767c:	31 d2                	xor    edx,edx
c001767e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017682:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017685:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017689:	50                   	push   eax
c001768a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001768d:	52                   	push   edx
c001768e:	50                   	push   eax
c001768f:	55                   	push   ebp
c0017690:	e8 69 5d ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017695:	83 c4 10             	add    esp,0x10
c0017698:	85 c0                	test   eax,eax
c001769a:	0f 85 71 05 00 00    	jne    c0017c11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00176a0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00176a7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00176aa:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00176ae:	31 d2                	xor    edx,edx
c00176b0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00176b4:	83 ec 0c             	sub    esp,0xc
c00176b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176bb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00176c2:	50                   	push   eax
c00176c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176cb:	52                   	push   edx
c00176cc:	50                   	push   eax
c00176cd:	55                   	push   ebp
c00176ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176d1:	83 c4 1c             	add    esp,0x1c
c00176d4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176d7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00176da:	50                   	push   eax
c00176db:	6a 00                	push   0x0
c00176dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00176e5:	50                   	push   eax
c00176e6:	e8 99 8f fe ff       	call   c0000684 <memset>
c00176eb:	83 c4 10             	add    esp,0x10
c00176ee:	46                   	inc    esi
c00176ef:	e9 6c ff ff ff       	jmp    c0017660 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00176f4:	53                   	push   ebx
c00176f5:	31 db                	xor    ebx,ebx
c00176f7:	68 00 01 00 00       	push   0x100
c00176fc:	6a 00                	push   0x0
c00176fe:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017702:	50                   	push   eax
c0017703:	e8 7c 8f fe ff       	call   c0000684 <memset>
c0017708:	83 c4 0c             	add    esp,0xc
c001770b:	68 00 01 00 00       	push   0x100
c0017710:	6a 00                	push   0x0
c0017712:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017719:	50                   	push   eax
c001771a:	e8 65 8f fe ff       	call   c0000684 <memset>
c001771f:	83 c4 10             	add    esp,0x10
c0017722:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001772a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017732:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001773a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017742:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001774a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001774e:	0f 86 30 01 00 00    	jbe    c0017884 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017754:	0f b7 f3             	movzx  esi,bx
c0017757:	6b f6 28             	imul   esi,esi,0x28
c001775a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001775e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017761:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017765:	52                   	push   edx
c0017766:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001776a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001776e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017770:	6b d2 28             	imul   edx,edx,0x28
c0017773:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017777:	31 d2                	xor    edx,edx
c0017779:	52                   	push   edx
c001777a:	50                   	push   eax
c001777b:	55                   	push   ebp
c001777c:	e8 7d 5c ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017781:	83 c4 0c             	add    esp,0xc
c0017784:	6a 20                	push   0x20
c0017786:	6a 00                	push   0x0
c0017788:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001778f:	51                   	push   ecx
c0017790:	e8 ef 8e fe ff       	call   c0000684 <memset>
c0017795:	59                   	pop    ecx
c0017796:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017799:	8d 54 24 58          	lea    edx,[esp+0x58]
c001779d:	52                   	push   edx
c001779e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00177a5:	51                   	push   ecx
c00177a6:	6a 00                	push   0x0
c00177a8:	6a 1f                	push   0x1f
c00177aa:	55                   	push   ebp
c00177ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00177ae:	83 c4 1c             	add    esp,0x1c
c00177b1:	6a 09                	push   0x9
c00177b3:	68 5a 5f 02 c0       	push   0xc0025f5a
c00177b8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00177bf:	51                   	push   ecx
c00177c0:	e8 bb 8d fe ff       	call   c0000580 <memcmp>
c00177c5:	83 c4 10             	add    esp,0x10
c00177c8:	85 c0                	test   eax,eax
c00177ca:	75 21                	jne    c00177ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00177cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00177d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177d4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00177d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00177dc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00177df:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00177e6:	89 d0                	mov    eax,edx
c00177e8:	40                   	inc    eax
c00177e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00177ed:	50                   	push   eax
c00177ee:	6a 09                	push   0x9
c00177f0:	68 64 5f 02 c0       	push   0xc0025f64
c00177f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00177fc:	50                   	push   eax
c00177fd:	e8 7e 8d fe ff       	call   c0000580 <memcmp>
c0017802:	83 c4 10             	add    esp,0x10
c0017805:	85 c0                	test   eax,eax
c0017807:	75 21                	jne    c001782a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017809:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001780d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017811:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017815:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017819:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001781c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017823:	89 d0                	mov    eax,edx
c0017825:	40                   	inc    eax
c0017826:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001782a:	50                   	push   eax
c001782b:	50                   	push   eax
c001782c:	68 30 5f 02 c0       	push   0xc0025f30
c0017831:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017838:	50                   	push   eax
c0017839:	e8 8e 8f fe ff       	call   c00007cc <strcmp>
c001783e:	83 c4 10             	add    esp,0x10
c0017841:	85 c0                	test   eax,eax
c0017843:	75 0f                	jne    c0017854 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017845:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017848:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001784c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017850:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017854:	50                   	push   eax
c0017855:	50                   	push   eax
c0017856:	68 38 5f 02 c0       	push   0xc0025f38
c001785b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017862:	50                   	push   eax
c0017863:	e8 64 8f fe ff       	call   c00007cc <strcmp>
c0017868:	83 c4 10             	add    esp,0x10
c001786b:	85 c0                	test   eax,eax
c001786d:	75 0f                	jne    c001787e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001786f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017872:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001787a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001787e:	43                   	inc    ebx
c001787f:	e9 c6 fe ff ff       	jmp    c001774a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017884:	31 d2                	xor    edx,edx
c0017886:	50                   	push   eax
c0017887:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001788b:	52                   	push   edx
c001788c:	50                   	push   eax
c001788d:	55                   	push   ebp
c001788e:	e8 6b 5b ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017893:	58                   	pop    eax
c0017894:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017898:	e8 72 21 ff ff       	call   c0009a0f <malloc>
c001789d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00178a0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00178a4:	31 d2                	xor    edx,edx
c00178a6:	58                   	pop    eax
c00178a7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00178ab:	53                   	push   ebx
c00178ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00178b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178b4:	52                   	push   edx
c00178b5:	50                   	push   eax
c00178b6:	55                   	push   ebp
c00178b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00178ba:	83 c4 14             	add    esp,0x14
c00178bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178c1:	e8 49 21 ff ff       	call   c0009a0f <malloc>
c00178c6:	31 d2                	xor    edx,edx
c00178c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00178cc:	83 c4 0c             	add    esp,0xc
c00178cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178d3:	52                   	push   edx
c00178d4:	50                   	push   eax
c00178d5:	55                   	push   ebp
c00178d6:	e8 23 5b ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c00178db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00178de:	31 d2                	xor    edx,edx
c00178e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00178e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00178e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178eb:	52                   	push   edx
c00178ec:	50                   	push   eax
c00178ed:	55                   	push   ebp
c00178ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00178f1:	83 c4 20             	add    esp,0x20
c00178f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00178fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017900:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017904:	0f 84 0b 03 00 00    	je     c0017c15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001790a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017911:	31 d2                	xor    edx,edx
c0017913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017917:	c1 e8 03             	shr    eax,0x3
c001791a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001791e:	51                   	push   ecx
c001791f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017923:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017927:	52                   	push   edx
c0017928:	50                   	push   eax
c0017929:	55                   	push   ebp
c001792a:	e8 cf 5a ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c001792f:	5b                   	pop    ebx
c0017930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017934:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001793b:	e8 cf 20 ff ff       	call   c0009a0f <malloc>
c0017940:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017943:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017947:	31 d2                	xor    edx,edx
c0017949:	5e                   	pop    esi
c001794a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001794e:	50                   	push   eax
c001794f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017953:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017957:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001795e:	52                   	push   edx
c001795f:	50                   	push   eax
c0017960:	55                   	push   ebp
c0017961:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017964:	83 c4 20             	add    esp,0x20
c0017967:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001796f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017973:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017977:	0f 8d 7c 02 00 00    	jge    c0017bf9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001797d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017981:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017985:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001798a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001798d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017991:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017995:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017999:	89 d8                	mov    eax,ebx
c001799b:	c1 e8 08             	shr    eax,0x8
c001799e:	89 c6                	mov    esi,eax
c00179a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179a4:	c1 e6 04             	shl    esi,0x4
c00179a7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00179ab:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00179ae:	85 d2                	test   edx,edx
c00179b0:	0f 85 bf 00 00 00    	jne    c0017a75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00179b6:	83 ec 0c             	sub    esp,0xc
c00179b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179bd:	03 06                	add    eax,DWORD PTR [esi]
c00179bf:	50                   	push   eax
c00179c0:	e8 4b f8 ff ff       	call   c0017210 <Thr::getAddressOfKernelSymbol(char const*)>
c00179c5:	83 c4 10             	add    esp,0x10
c00179c8:	89 c2                	mov    edx,eax
c00179ca:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00179cf:	85 c0                	test   eax,eax
c00179d1:	0f 85 9e 00 00 00    	jne    c0017a75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00179d7:	83 ec 0c             	sub    esp,0xc
c00179da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179de:	03 06                	add    eax,DWORD PTR [esi]
c00179e0:	50                   	push   eax
c00179e1:	e8 2a 0f ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c00179e6:	83 c4 10             	add    esp,0x10
c00179e9:	89 c2                	mov    edx,eax
c00179eb:	85 c0                	test   eax,eax
c00179ed:	0f 85 82 00 00 00    	jne    c0017a75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00179f3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00179f7:	50                   	push   eax
c00179f8:	50                   	push   eax
c00179f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179fd:	03 06                	add    eax,DWORD PTR [esi]
c00179ff:	50                   	push   eax
c0017a00:	68 6e 5f 02 c0       	push   0xc0025f6e
c0017a05:	e8 f1 52 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017a0a:	58                   	pop    eax
c0017a0b:	5a                   	pop    edx
c0017a0c:	68 88 5f 02 c0       	push   0xc0025f88
c0017a11:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a18:	50                   	push   eax
c0017a19:	e8 22 8d fe ff       	call   c0000740 <strcpy>
c0017a1e:	59                   	pop    ecx
c0017a1f:	58                   	pop    eax
c0017a20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a24:	03 06                	add    eax,DWORD PTR [esi]
c0017a26:	50                   	push   eax
c0017a27:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a2e:	50                   	push   eax
c0017a2f:	e8 4c 8e fe ff       	call   c0000880 <strcat>
c0017a34:	58                   	pop    eax
c0017a35:	5a                   	pop    edx
c0017a36:	68 1e 60 02 c0       	push   0xc002601e
c0017a3b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a42:	50                   	push   eax
c0017a43:	e8 38 8e fe ff       	call   c0000880 <strcat>
c0017a48:	83 c4 10             	add    esp,0x10
c0017a4b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017a50:	0f 84 5d 01 00 00    	je     c0017bb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017a56:	83 ec 0c             	sub    esp,0xc
c0017a59:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a60:	50                   	push   eax
c0017a61:	e8 a1 cf ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0017a66:	83 c4 10             	add    esp,0x10
c0017a69:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017a6d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017a71:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017a75:	80 fb 01             	cmp    bl,0x1
c0017a78:	0f 85 88 00 00 00    	jne    c0017b06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017a7e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017a85:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017a89:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017a8d:	01 ce                	add    esi,ecx
c0017a8f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017a95:	0f 94 c0             	sete   al
c0017a98:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017a9e:	0f 94 c3             	sete   bl
c0017aa1:	09 c3                	or     ebx,eax
c0017aa3:	8b 06                	mov    eax,DWORD PTR [esi]
c0017aa5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017aaa:	74 41                	je     c0017aed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017aac:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017aaf:	84 db                	test   bl,bl
c0017ab1:	75 15                	jne    c0017ac8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0017ab3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017ab7:	66 83 f8 0c          	cmp    ax,0xc
c0017abb:	76 05                	jbe    c0017ac2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017abd:	b8 0c 00 00 00       	mov    eax,0xc
c0017ac2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017ac6:	76 37                	jbe    c0017aff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017ac8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017acc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ad1:	0f 84 dc 00 00 00    	je     c0017bb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017ad7:	83 ec 0c             	sub    esp,0xc
c0017ada:	68 9f 5f 02 c0       	push   0xc0025f9f
c0017adf:	e8 23 cf ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0017ae4:	83 c4 10             	add    esp,0x10
c0017ae7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017aeb:	eb 12                	jmp    c0017aff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017aed:	01 c1                	add    ecx,eax
c0017aef:	84 db                	test   bl,bl
c0017af1:	75 0c                	jne    c0017aff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017af3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017af7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017afb:	77 02                	ja     c0017aff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017afd:	01 d1                	add    ecx,edx
c0017aff:	89 0e                	mov    DWORD PTR [esi],ecx
c0017b01:	e9 ea 00 00 00       	jmp    c0017bf0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017b06:	80 fb 02             	cmp    bl,0x2
c0017b09:	75 7c                	jne    c0017b87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0017b0b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017b12:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017b16:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0017b1a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017b20:	74 20                	je     c0017b42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017b22:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017b28:	74 18                	je     c0017b42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017b2a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b2e:	b9 0a 00 00 00       	mov    ecx,0xa
c0017b33:	66 83 f8 0e          	cmp    ax,0xe
c0017b37:	77 03                	ja     c0017b3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017b39:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017b3c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017b40:	76 1f                	jbe    c0017b61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017b42:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017b46:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b4b:	74 66                	je     c0017bb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017b4d:	83 ec 0c             	sub    esp,0xc
c0017b50:	68 bb 5f 02 c0       	push   0xc0025fbb
c0017b55:	e8 ad ce ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0017b5a:	83 c4 10             	add    esp,0x10
c0017b5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b61:	8b 06                	mov    eax,DWORD PTR [esi]
c0017b63:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017b68:	74 13                	je     c0017b7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017b6a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b6e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017b75:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017b79:	01 c8                	add    eax,ecx
c0017b7b:	eb 04                	jmp    c0017b81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017b7d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017b81:	01 c2                	add    edx,eax
c0017b83:	89 16                	mov    DWORD PTR [esi],edx
c0017b85:	eb 69                	jmp    c0017bf0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017b87:	0f b6 db             	movzx  ebx,bl
c0017b8a:	50                   	push   eax
c0017b8b:	50                   	push   eax
c0017b8c:	53                   	push   ebx
c0017b8d:	68 d7 5f 02 c0       	push   0xc0025fd7
c0017b92:	e8 64 51 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017b97:	83 c4 10             	add    esp,0x10
c0017b9a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b9f:	74 12                	je     c0017bb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017ba1:	83 ec 0c             	sub    esp,0xc
c0017ba4:	68 e2 5f 02 c0       	push   0xc0025fe2
c0017ba9:	e8 59 ce ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0017bae:	83 c4 10             	add    esp,0x10
c0017bb1:	eb 3d                	jmp    c0017bf0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017bb3:	83 ec 0c             	sub    esp,0xc
c0017bb6:	55                   	push   ebp
c0017bb7:	e8 e2 57 ff ff       	call   c000d39e <File::close()>
c0017bbc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017bbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bc2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017bc5:	59                   	pop    ecx
c0017bc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bca:	e8 50 1e ff ff       	call   c0009a1f <free>
c0017bcf:	5b                   	pop    ebx
c0017bd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bd4:	e8 46 1e ff ff       	call   c0009a1f <free>
c0017bd9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017bdc:	e8 3e 1e ff ff       	call   c0009a1f <free>
c0017be1:	5e                   	pop    esi
c0017be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017be6:	e8 34 1e ff ff       	call   c0009a1f <free>
c0017beb:	83 c4 10             	add    esp,0x10
c0017bee:	eb 21                	jmp    c0017c11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017bf0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017bf4:	e9 76 fd ff ff       	jmp    c001796f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017bf9:	83 ec 0c             	sub    esp,0xc
c0017bfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c00:	e8 1a 1e ff ff       	call   c0009a1f <free>
c0017c05:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017c09:	83 c4 10             	add    esp,0x10
c0017c0c:	e9 eb fc ff ff       	jmp    c00178fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017c11:	31 c0                	xor    eax,eax
c0017c13:	eb 33                	jmp    c0017c48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017c15:	83 ec 0c             	sub    esp,0xc
c0017c18:	55                   	push   ebp
c0017c19:	e8 80 57 ff ff       	call   c000d39e <File::close()>
c0017c1e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017c21:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c24:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c27:	58                   	pop    eax
c0017c28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c2c:	e8 ee 1d ff ff       	call   c0009a1f <free>
c0017c31:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c34:	e8 e6 1d ff ff       	call   c0009a1f <free>
c0017c39:	5a                   	pop    edx
c0017c3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c3e:	e8 dc 1d ff ff       	call   c0009a1f <free>
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	b0 01                	mov    al,0x1
c0017c48:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017c4e:	5b                   	pop    ebx
c0017c4f:	5e                   	pop    esi
c0017c50:	5f                   	pop    edi
c0017c51:	5d                   	pop    ebp
c0017c52:	c3                   	ret    

c0017c53 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017c53:	56                   	push   esi
c0017c54:	31 d2                	xor    edx,edx
c0017c56:	53                   	push   ebx
c0017c57:	8b 1d c0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cc0
c0017c5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c61:	39 d3                	cmp    ebx,edx
c0017c63:	7e 1b                	jle    c0017c80 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017c65:	8b 04 95 e0 8e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7120]
c0017c6c:	39 c8                	cmp    eax,ecx
c0017c6e:	77 0d                	ja     c0017c7d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017c70:	8b 34 95 e0 8c 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7320]
c0017c77:	01 c6                	add    esi,eax
c0017c79:	39 ce                	cmp    esi,ecx
c0017c7b:	77 05                	ja     c0017c82 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017c7d:	42                   	inc    edx
c0017c7e:	eb e1                	jmp    c0017c61 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017c80:	31 c0                	xor    eax,eax
c0017c82:	5b                   	pop    ebx
c0017c83:	5e                   	pop    esi
c0017c84:	c3                   	ret    

c0017c85 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017c85:	53                   	push   ebx
c0017c86:	31 c0                	xor    eax,eax
c0017c88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017c8c:	8b 1d c0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cc0
c0017c92:	39 c3                	cmp    ebx,eax
c0017c94:	7e 22                	jle    c0017cb8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017c96:	8b 14 85 e0 8e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7120]
c0017c9d:	39 ca                	cmp    edx,ecx
c0017c9f:	77 14                	ja     c0017cb5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017ca1:	03 14 85 e0 8c 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7320]
c0017ca8:	39 ca                	cmp    edx,ecx
c0017caa:	76 09                	jbe    c0017cb5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017cac:	8b 04 85 e0 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f20]
c0017cb3:	eb 05                	jmp    c0017cba <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017cb5:	40                   	inc    eax
c0017cb6:	eb da                	jmp    c0017c92 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017cb8:	31 c0                	xor    eax,eax
c0017cba:	5b                   	pop    ebx
c0017cbb:	c3                   	ret    

c0017cbc <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017cbc:	53                   	push   ebx
c0017cbd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017cc1:	53                   	push   ebx
c0017cc2:	e8 8c ff ff ff       	call   c0017c53 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017cc7:	5a                   	pop    edx
c0017cc8:	31 d2                	xor    edx,edx
c0017cca:	85 c0                	test   eax,eax
c0017ccc:	74 04                	je     c0017cd2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017cce:	89 da                	mov    edx,ebx
c0017cd0:	29 c2                	sub    edx,eax
c0017cd2:	89 d0                	mov    eax,edx
c0017cd4:	5b                   	pop    ebx
c0017cd5:	c3                   	ret    

c0017cd6 <Thr::loadDLL(char const*, bool)>:
c0017cd6:	55                   	push   ebp
c0017cd7:	57                   	push   edi
c0017cd8:	56                   	push   esi
c0017cd9:	53                   	push   ebx
c0017cda:	81 ec 34 01 00 00    	sub    esp,0x134
c0017ce0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017ce7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017cee:	56                   	push   esi
c0017cef:	68 fa 5f 02 c0       	push   0xc0025ffa
c0017cf4:	e8 02 50 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017cf9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017d00:	e8 0a 1d ff ff       	call   c0009a0f <malloc>
c0017d05:	83 c4 0c             	add    esp,0xc
c0017d08:	89 c3                	mov    ebx,eax
c0017d0a:	ff 35 b0 94 02 c0    	push   DWORD PTR ds:0xc00294b0
c0017d10:	56                   	push   esi
c0017d11:	50                   	push   eax
c0017d12:	e8 4f 55 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0017d17:	83 c4 10             	add    esp,0x10
c0017d1a:	85 db                	test   ebx,ebx
c0017d1c:	75 3c                	jne    c0017d5a <Thr::loadDLL(char const*, bool)+0x84>
c0017d1e:	89 f8                	mov    eax,edi
c0017d20:	84 c0                	test   al,al
c0017d22:	0f 84 d2 01 00 00    	je     c0017efa <Thr::loadDLL(char const*, bool)+0x224>
c0017d28:	55                   	push   ebp
c0017d29:	55                   	push   ebp
c0017d2a:	68 0b 60 02 c0       	push   0xc002600b
c0017d2f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017d33:	55                   	push   ebp
c0017d34:	e8 07 8a fe ff       	call   c0000740 <strcpy>
c0017d39:	58                   	pop    eax
c0017d3a:	5a                   	pop    edx
c0017d3b:	56                   	push   esi
c0017d3c:	55                   	push   ebp
c0017d3d:	e8 3e 8b fe ff       	call   c0000880 <strcat>
c0017d42:	59                   	pop    ecx
c0017d43:	58                   	pop    eax
c0017d44:	68 1e 60 02 c0       	push   0xc002601e
c0017d49:	55                   	push   ebp
c0017d4a:	e8 31 8b fe ff       	call   c0000880 <strcat>
c0017d4f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d52:	e8 b0 cc ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0017d57:	83 c4 10             	add    esp,0x10
c0017d5a:	51                   	push   ecx
c0017d5b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017d5f:	50                   	push   eax
c0017d60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017d64:	50                   	push   eax
c0017d65:	53                   	push   ebx
c0017d66:	e8 81 58 ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c0017d6b:	83 c4 10             	add    esp,0x10
c0017d6e:	85 db                	test   ebx,ebx
c0017d70:	74 0c                	je     c0017d7e <Thr::loadDLL(char const*, bool)+0xa8>
c0017d72:	83 ec 0c             	sub    esp,0xc
c0017d75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d77:	53                   	push   ebx
c0017d78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d7b:	83 c4 10             	add    esp,0x10
c0017d7e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017d83:	75 0a                	jne    c0017d8f <Thr::loadDLL(char const*, bool)+0xb9>
c0017d85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d89:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017d8d:	75 3c                	jne    c0017dcb <Thr::loadDLL(char const*, bool)+0xf5>
c0017d8f:	89 f8                	mov    eax,edi
c0017d91:	84 c0                	test   al,al
c0017d93:	0f 84 49 01 00 00    	je     c0017ee2 <Thr::loadDLL(char const*, bool)+0x20c>
c0017d99:	51                   	push   ecx
c0017d9a:	51                   	push   ecx
c0017d9b:	68 0b 60 02 c0       	push   0xc002600b
c0017da0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017da4:	53                   	push   ebx
c0017da5:	e8 96 89 fe ff       	call   c0000740 <strcpy>
c0017daa:	5d                   	pop    ebp
c0017dab:	58                   	pop    eax
c0017dac:	56                   	push   esi
c0017dad:	53                   	push   ebx
c0017dae:	e8 cd 8a fe ff       	call   c0000880 <strcat>
c0017db3:	58                   	pop    eax
c0017db4:	5a                   	pop    edx
c0017db5:	68 1e 60 02 c0       	push   0xc002601e
c0017dba:	53                   	push   ebx
c0017dbb:	e8 c0 8a fe ff       	call   c0000880 <strcat>
c0017dc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017dc3:	e8 3f cc ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0017dc8:	83 c4 10             	add    esp,0x10
c0017dcb:	52                   	push   edx
c0017dcc:	6a 03                	push   0x3
c0017dce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017dd6:	05 ff 0f 00 00       	add    eax,0xfff
c0017ddb:	83 d2 00             	adc    edx,0x0
c0017dde:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017de2:	50                   	push   eax
c0017de3:	ff 35 90 80 02 c0    	push   DWORD PTR ds:0xc0028090
c0017de9:	e8 90 43 ff ff       	call   c000c17e <VAS::allocatePages(int, int)>
c0017dee:	59                   	pop    ecx
c0017def:	89 c3                	mov    ebx,eax
c0017df1:	5d                   	pop    ebp
c0017df2:	50                   	push   eax
c0017df3:	68 82 41 02 c0       	push   0xc0024182
c0017df8:	e8 fe 4e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017dfd:	89 34 24             	mov    DWORD PTR [esp],esi
c0017e00:	e8 9b 88 fe ff       	call   c00006a0 <strlen>
c0017e05:	8b 2d c0 8c 02 c0    	mov    ebp,DWORD PTR ds:0xc0028cc0
c0017e0b:	40                   	inc    eax
c0017e0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e0f:	e8 fb 1b ff ff       	call   c0009a0f <malloc>
c0017e14:	89 04 ad e0 90 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6f20],eax
c0017e1b:	58                   	pop    eax
c0017e1c:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c0017e21:	5a                   	pop    edx
c0017e22:	56                   	push   esi
c0017e23:	ff 34 85 e0 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f20]
c0017e2a:	e8 11 89 fe ff       	call   c0000740 <strcpy>
c0017e2f:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c0017e34:	8d 50 01             	lea    edx,[eax+0x1]
c0017e37:	89 1c 85 e0 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7120],ebx
c0017e3e:	89 15 c0 8c 02 c0    	mov    DWORD PTR ds:0xc0028cc0,edx
c0017e44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e48:	83 c4 0c             	add    esp,0xc
c0017e4b:	89 14 85 e0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7320],edx
c0017e52:	6a 01                	push   0x1
c0017e54:	53                   	push   ebx
c0017e55:	56                   	push   esi
c0017e56:	e8 c2 f6 ff ff       	call   c001751d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017e5b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017e5f:	83 c4 10             	add    esp,0x10
c0017e62:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017e67:	0f 85 89 00 00 00    	jne    c0017ef6 <Thr::loadDLL(char const*, bool)+0x220>
c0017e6d:	89 f8                	mov    eax,edi
c0017e6f:	84 c0                	test   al,al
c0017e71:	74 73                	je     c0017ee6 <Thr::loadDLL(char const*, bool)+0x210>
c0017e73:	83 ec 0c             	sub    esp,0xc
c0017e76:	68 20 60 02 c0       	push   0xc0026020
c0017e7b:	e8 87 cb ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0017e80:	83 c4 10             	add    esp,0x10
c0017e83:	eb 61                	jmp    c0017ee6 <Thr::loadDLL(char const*, bool)+0x210>
c0017e85:	50                   	push   eax
c0017e86:	50                   	push   eax
c0017e87:	89 e8                	mov    eax,ebp
c0017e89:	c1 e0 0c             	shl    eax,0xc
c0017e8c:	01 d8                	add    eax,ebx
c0017e8e:	50                   	push   eax
c0017e8f:	ff 35 90 80 02 c0    	push   DWORD PTR ds:0xc0028090
c0017e95:	e8 4c 3e ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c0017e9a:	83 c4 10             	add    esp,0x10
c0017e9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e9f:	a8 60                	test   al,0x60
c0017ea1:	75 11                	jne    c0017eb4 <Thr::loadDLL(char const*, bool)+0x1de>
c0017ea3:	83 ec 0c             	sub    esp,0xc
c0017ea6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017eab:	50                   	push   eax
c0017eac:	e8 92 21 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c0017eb1:	83 c4 10             	add    esp,0x10
c0017eb4:	45                   	inc    ebp
c0017eb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017eb9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ebd:	05 ff 0f 00 00       	add    eax,0xfff
c0017ec2:	bf 00 00 00 00       	mov    edi,0x0
c0017ec7:	83 d2 00             	adc    edx,0x0
c0017eca:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017ece:	c1 ea 0c             	shr    edx,0xc
c0017ed1:	39 c5                	cmp    ebp,eax
c0017ed3:	89 d1                	mov    ecx,edx
c0017ed5:	89 f8                	mov    eax,edi
c0017ed7:	19 c8                	sbb    eax,ecx
c0017ed9:	72 aa                	jb     c0017e85 <Thr::loadDLL(char const*, bool)+0x1af>
c0017edb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017ee0:	75 18                	jne    c0017efa <Thr::loadDLL(char const*, bool)+0x224>
c0017ee2:	31 db                	xor    ebx,ebx
c0017ee4:	eb 14                	jmp    c0017efa <Thr::loadDLL(char const*, bool)+0x224>
c0017ee6:	83 ec 0c             	sub    esp,0xc
c0017ee9:	68 3f 60 02 c0       	push   0xc002603f
c0017eee:	e8 14 cb ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0017ef3:	83 c4 10             	add    esp,0x10
c0017ef6:	31 ed                	xor    ebp,ebp
c0017ef8:	eb bb                	jmp    c0017eb5 <Thr::loadDLL(char const*, bool)+0x1df>
c0017efa:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017f00:	89 d8                	mov    eax,ebx
c0017f02:	5b                   	pop    ebx
c0017f03:	5e                   	pop    esi
c0017f04:	5f                   	pop    edi
c0017f05:	5d                   	pop    ebp
c0017f06:	c3                   	ret    

c0017f07 <Thr::executeDLL(unsigned long, void*)>:
c0017f07:	56                   	push   esi
c0017f08:	53                   	push   ebx
c0017f09:	52                   	push   edx
c0017f0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017f0e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017f12:	85 db                	test   ebx,ebx
c0017f14:	75 10                	jne    c0017f26 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017f16:	83 ec 0c             	sub    esp,0xc
c0017f19:	68 5b 60 02 c0       	push   0xc002605b
c0017f1e:	e8 e4 ca ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0017f23:	83 c4 10             	add    esp,0x10
c0017f26:	50                   	push   eax
c0017f27:	50                   	push   eax
c0017f28:	53                   	push   ebx
c0017f29:	68 85 60 02 c0       	push   0xc0026085
c0017f2e:	e8 c8 4d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017f33:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017f37:	89 d8                	mov    eax,ebx
c0017f39:	83 c4 14             	add    esp,0x14
c0017f3c:	5b                   	pop    ebx
c0017f3d:	5e                   	pop    esi
c0017f3e:	ff e0                	jmp    eax

c0017f40 <userModeEntryPoint(void*)>:
c0017f40:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0017f45:	48                   	dec    eax
c0017f46:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0017f4b:	75 03                	jne    c0017f50 <userModeEntryPoint(void*)+0x10>
c0017f4d:	fb                   	sti    
c0017f4e:	66 90                	xchg   ax,ax
c0017f50:	fb                   	sti    
c0017f51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017f59:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017f5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f63:	e9 f7 82 fe ff       	jmp    c000025f <goToUsermode>

c0017f68 <changeTSS>:
c0017f68:	83 ec 14             	sub    esp,0x14
c0017f6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f70:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017f73:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017f78:	c1 e2 15             	shl    edx,0x15
c0017f7b:	29 d0                	sub    eax,edx
c0017f7d:	50                   	push   eax
c0017f7e:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0017f83:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017f89:	05 7c 11 00 00       	add    eax,0x117c
c0017f8e:	50                   	push   eax
c0017f8f:	e8 94 33 ff ff       	call   c000b328 <TSS::setESP(unsigned long)>
c0017f94:	83 c4 1c             	add    esp,0x1c
c0017f97:	c3                   	ret    

c0017f98 <switchToThread(ThreadControlBlock*)>:
c0017f98:	57                   	push   edi
c0017f99:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c0017f9e:	56                   	push   esi
c0017f9f:	85 c0                	test   eax,eax
c0017fa1:	53                   	push   ebx
c0017fa2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017fa6:	0f 85 90 00 00 00    	jne    c001803c <switchToThread(ThreadControlBlock*)+0xa4>
c0017fac:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017faf:	3c ff                	cmp    al,0xff
c0017fb1:	0f 84 81 00 00 00    	je     c0018038 <switchToThread(ThreadControlBlock*)+0xa0>
c0017fb7:	0f b6 d0             	movzx  edx,al
c0017fba:	b8 00 04 00 00       	mov    eax,0x400
c0017fbf:	29 d0                	sub    eax,edx
c0017fc1:	d1 f8                	sar    eax,1
c0017fc3:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017fc6:	66 90                	xchg   ax,ax
c0017fc8:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017fcb:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0017fd0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017fd6:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017fdd:	74 4d                	je     c001802c <switchToThread(ThreadControlBlock*)+0x94>
c0017fdf:	0f 31                	rdtsc  
c0017fe1:	a3 c8 94 02 c0       	mov    ds:0xc00294c8,eax
c0017fe6:	89 c6                	mov    esi,eax
c0017fe8:	89 d7                	mov    edi,edx
c0017fea:	2b 35 b8 94 02 c0    	sub    esi,DWORD PTR ds:0xc00294b8
c0017ff0:	89 15 cc 94 02 c0    	mov    DWORD PTR ds:0xc00294cc,edx
c0017ff6:	1b 3d bc 94 02 c0    	sbb    edi,DWORD PTR ds:0xc00294bc
c0017ffc:	89 35 c0 94 02 c0    	mov    DWORD PTR ds:0xc00294c0,esi
c0018002:	a3 b8 94 02 c0       	mov    ds:0xc00294b8,eax
c0018007:	89 3d c4 94 02 c0    	mov    DWORD PTR ds:0xc00294c4,edi
c001800d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018013:	89 15 bc 94 02 c0    	mov    DWORD PTR ds:0xc00294bc,edx
c0018019:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001801c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001801f:	01 c6                	add    esi,eax
c0018021:	11 d7                	adc    edi,edx
c0018023:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0018026:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0018029:	8d 76 00             	lea    esi,[esi+0x0]
c001802c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0018030:	5b                   	pop    ebx
c0018031:	5e                   	pop    esi
c0018032:	5f                   	pop    edi
c0018033:	e9 5f 82 fe ff       	jmp    c0000297 <switchToThreadASM>
c0018038:	31 c0                	xor    eax,eax
c001803a:	eb 8c                	jmp    c0017fc8 <switchToThread(ThreadControlBlock*)+0x30>
c001803c:	5b                   	pop    ebx
c001803d:	c7 05 80 94 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x1
c0018047:	5e                   	pop    esi
c0018048:	5f                   	pop    edi
c0018049:	c3                   	ret    
c001804a:	66 90                	xchg   ax,ax

c001804c <Process::addArgs(char**)>:
c001804c:	57                   	push   edi
c001804d:	56                   	push   esi
c001804e:	53                   	push   ebx
c001804f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018053:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018057:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0018061:	85 ff                	test   edi,edi
c0018063:	74 43                	je     c00180a8 <Process::addArgs(char**)+0x5c>
c0018065:	8b 07                	mov    eax,DWORD PTR [edi]
c0018067:	85 c0                	test   eax,eax
c0018069:	74 3d                	je     c00180a8 <Process::addArgs(char**)+0x5c>
c001806b:	31 db                	xor    ebx,ebx
c001806d:	8d 76 00             	lea    esi,[esi+0x0]
c0018070:	83 ec 0c             	sub    esp,0xc
c0018073:	50                   	push   eax
c0018074:	e8 27 86 fe ff       	call   c00006a0 <strlen>
c0018079:	40                   	inc    eax
c001807a:	89 04 24             	mov    DWORD PTR [esp],eax
c001807d:	e8 8d 19 ff ff       	call   c0009a0f <malloc>
c0018082:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0018089:	5a                   	pop    edx
c001808a:	59                   	pop    ecx
c001808b:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001808e:	43                   	inc    ebx
c001808f:	50                   	push   eax
c0018090:	e8 ab 86 fe ff       	call   c0000740 <strcpy>
c0018095:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001809b:	83 c4 10             	add    esp,0x10
c001809e:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00180a1:	85 c0                	test   eax,eax
c00180a3:	75 cb                	jne    c0018070 <Process::addArgs(char**)+0x24>
c00180a5:	8d 76 00             	lea    esi,[esi+0x0]
c00180a8:	5b                   	pop    ebx
c00180a9:	5e                   	pop    esi
c00180aa:	5f                   	pop    edi
c00180ab:	c3                   	ret    

c00180ac <Process::Process(char const*, Process*, char**)>:
c00180ac:	56                   	push   esi
c00180ad:	53                   	push   ebx
c00180ae:	83 ec 14             	sub    esp,0x14
c00180b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180b5:	05 0c 02 00 00       	add    eax,0x20c
c00180ba:	bb 07 00 00 00       	mov    ebx,0x7
c00180bf:	89 c6                	mov    esi,eax
c00180c1:	8d 76 00             	lea    esi,[esi+0x0]
c00180c4:	85 db                	test   ebx,ebx
c00180c6:	78 14                	js     c00180dc <Process::Process(char const*, Process*, char**)+0x30>
c00180c8:	83 ec 0c             	sub    esp,0xc
c00180cb:	56                   	push   esi
c00180cc:	e8 7f af 00 00       	call   c0023050 <ThreadControlBlock::ThreadControlBlock()>
c00180d1:	83 c4 10             	add    esp,0x10
c00180d4:	83 c6 5f             	add    esi,0x5f
c00180d7:	4b                   	dec    ebx
c00180d8:	eb ea                	jmp    c00180c4 <Process::Process(char const*, Process*, char**)+0x18>
c00180da:	66 90                	xchg   ax,ax
c00180dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180e0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00180e7:	83 ec 0c             	sub    esp,0xc
c00180ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180ee:	e8 9d c7 ff ff       	call   c0014890 <Krnl::newProcessEnv(Process*)>
c00180f3:	83 c4 10             	add    esp,0x10
c00180f6:	89 c2                	mov    edx,eax
c00180f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180fc:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018106:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001810f:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0018114:	8d 50 01             	lea    edx,[eax+0x1]
c0018117:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c001811d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018121:	89 02                	mov    DWORD PTR [edx],eax
c0018123:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001812b:	83 ec 0c             	sub    esp,0xc
c001812e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018132:	e8 d8 18 ff ff       	call   c0009a0f <malloc>
c0018137:	83 c4 10             	add    esp,0x10
c001813a:	89 c3                	mov    ebx,eax
c001813c:	83 ec 08             	sub    esp,0x8
c001813f:	6a 00                	push   0x0
c0018141:	53                   	push   ebx
c0018142:	e8 df 43 ff ff       	call   c000c526 <VAS::VAS(bool)>
c0018147:	83 c4 10             	add    esp,0x10
c001814a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001814e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018154:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018158:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018166:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018174:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001817a:	85 c0                	test   eax,eax
c001817c:	74 42                	je     c00181c0 <Process::Process(char const*, Process*, char**)+0x114>
c001817e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018182:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018188:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001818e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018192:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001819c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00181a2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00181a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181ac:	05 0c 01 00 00       	add    eax,0x10c
c00181b1:	83 ec 08             	sub    esp,0x8
c00181b4:	52                   	push   edx
c00181b5:	50                   	push   eax
c00181b6:	e8 85 85 fe ff       	call   c0000740 <strcpy>
c00181bb:	83 c4 10             	add    esp,0x10
c00181be:	eb 64                	jmp    c0018224 <Process::Process(char const*, Process*, char**)+0x178>
c00181c0:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c00181c8:	83 ec 0c             	sub    esp,0xc
c00181cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00181cf:	e8 3b 18 ff ff       	call   c0009a0f <malloc>
c00181d4:	83 c4 10             	add    esp,0x10
c00181d7:	89 c3                	mov    ebx,eax
c00181d9:	83 ec 08             	sub    esp,0x8
c00181dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181e0:	53                   	push   ebx
c00181e1:	e8 56 2e ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c00181e6:	83 c4 10             	add    esp,0x10
c00181e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181ed:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00181f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00181fd:	83 ec 0c             	sub    esp,0xc
c0018200:	50                   	push   eax
c0018201:	e8 f5 25 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c0018206:	83 c4 10             	add    esp,0x10
c0018209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001820d:	05 0c 01 00 00       	add    eax,0x10c
c0018212:	83 ec 08             	sub    esp,0x8
c0018215:	68 a4 60 02 c0       	push   0xc00260a4
c001821a:	50                   	push   eax
c001821b:	e8 20 85 fe ff       	call   c0000740 <strcpy>
c0018220:	83 c4 10             	add    esp,0x10
c0018223:	90                   	nop
c0018224:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018228:	83 c0 0c             	add    eax,0xc
c001822b:	83 ec 08             	sub    esp,0x8
c001822e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018232:	50                   	push   eax
c0018233:	e8 08 85 fe ff       	call   c0000740 <strcpy>
c0018238:	83 c4 10             	add    esp,0x10
c001823b:	83 ec 08             	sub    esp,0x8
c001823e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018246:	e8 01 fe ff ff       	call   c001804c <Process::addArgs(char**)>
c001824b:	83 c4 10             	add    esp,0x10
c001824e:	83 ec 08             	sub    esp,0x8
c0018251:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018255:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018259:	e8 89 ed ff ff       	call   c0016fe7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001825e:	83 c4 10             	add    esp,0x10
c0018261:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018265:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018269:	83 f0 01             	xor    eax,0x1
c001826c:	88 c2                	mov    dl,al
c001826e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018272:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0018278:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001827d:	83 ec 08             	sub    esp,0x8
c0018280:	50                   	push   eax
c0018281:	68 fc 60 02 c0       	push   0xc00260fc
c0018286:	e8 70 4a ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001828b:	83 c4 10             	add    esp,0x10
c001828e:	90                   	nop
c001828f:	83 c4 14             	add    esp,0x14
c0018292:	5b                   	pop    ebx
c0018293:	5e                   	pop    esi
c0018294:	c3                   	ret    
c0018295:	90                   	nop
c0018296:	66 90                	xchg   ax,ax

c0018298 <Process::Process(bool, char const*, Process*, char**)>:
c0018298:	56                   	push   esi
c0018299:	53                   	push   ebx
c001829a:	83 ec 24             	sub    esp,0x24
c001829d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00182a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182a9:	05 0c 02 00 00       	add    eax,0x20c
c00182ae:	bb 07 00 00 00       	mov    ebx,0x7
c00182b3:	89 c6                	mov    esi,eax
c00182b5:	8d 76 00             	lea    esi,[esi+0x0]
c00182b8:	85 db                	test   ebx,ebx
c00182ba:	78 14                	js     c00182d0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00182bc:	83 ec 0c             	sub    esp,0xc
c00182bf:	56                   	push   esi
c00182c0:	e8 8b ad 00 00       	call   c0023050 <ThreadControlBlock::ThreadControlBlock()>
c00182c5:	83 c4 10             	add    esp,0x10
c00182c8:	83 c6 5f             	add    esi,0x5f
c00182cb:	4b                   	dec    ebx
c00182cc:	eb ea                	jmp    c00182b8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00182ce:	66 90                	xchg   ax,ax
c00182d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182d4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00182db:	83 ec 0c             	sub    esp,0xc
c00182de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00182e2:	e8 a9 c5 ff ff       	call   c0014890 <Krnl::newProcessEnv(Process*)>
c00182e7:	83 c4 10             	add    esp,0x10
c00182ea:	89 c2                	mov    edx,eax
c00182ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182f0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00182f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182fa:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018303:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0018308:	8d 50 01             	lea    edx,[eax+0x1]
c001830b:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c0018311:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018315:	89 02                	mov    DWORD PTR [edx],eax
c0018317:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001831f:	83 ec 0c             	sub    esp,0xc
c0018322:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018326:	e8 e4 16 ff ff       	call   c0009a0f <malloc>
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	89 c3                	mov    ebx,eax
c0018330:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018335:	83 ec 08             	sub    esp,0x8
c0018338:	50                   	push   eax
c0018339:	53                   	push   ebx
c001833a:	e8 e7 41 ff ff       	call   c000c526 <VAS::VAS(bool)>
c001833f:	83 c4 10             	add    esp,0x10
c0018342:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018346:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001834c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018350:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001835a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001835e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018362:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018368:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001836c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018372:	85 c0                	test   eax,eax
c0018374:	74 42                	je     c00183b8 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0018376:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001837a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018380:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018386:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001838a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018390:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018394:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001839a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00183a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183a4:	05 0c 01 00 00       	add    eax,0x10c
c00183a9:	83 ec 08             	sub    esp,0x8
c00183ac:	52                   	push   edx
c00183ad:	50                   	push   eax
c00183ae:	e8 8d 83 fe ff       	call   c0000740 <strcpy>
c00183b3:	83 c4 10             	add    esp,0x10
c00183b6:	eb 64                	jmp    c001841c <Process::Process(bool, char const*, Process*, char**)+0x184>
c00183b8:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c00183c0:	83 ec 0c             	sub    esp,0xc
c00183c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00183c7:	e8 43 16 ff ff       	call   c0009a0f <malloc>
c00183cc:	83 c4 10             	add    esp,0x10
c00183cf:	89 c3                	mov    ebx,eax
c00183d1:	83 ec 08             	sub    esp,0x8
c00183d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00183d8:	53                   	push   ebx
c00183d9:	e8 5e 2c ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c00183de:	83 c4 10             	add    esp,0x10
c00183e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183e5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00183eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183f5:	83 ec 0c             	sub    esp,0xc
c00183f8:	50                   	push   eax
c00183f9:	e8 fd 23 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c00183fe:	83 c4 10             	add    esp,0x10
c0018401:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018405:	05 0c 01 00 00       	add    eax,0x10c
c001840a:	83 ec 08             	sub    esp,0x8
c001840d:	68 a4 60 02 c0       	push   0xc00260a4
c0018412:	50                   	push   eax
c0018413:	e8 28 83 fe ff       	call   c0000740 <strcpy>
c0018418:	83 c4 10             	add    esp,0x10
c001841b:	90                   	nop
c001841c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018420:	83 c0 0c             	add    eax,0xc
c0018423:	83 ec 08             	sub    esp,0x8
c0018426:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001842a:	50                   	push   eax
c001842b:	e8 10 83 fe ff       	call   c0000740 <strcpy>
c0018430:	83 c4 10             	add    esp,0x10
c0018433:	83 ec 08             	sub    esp,0x8
c0018436:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001843a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001843e:	e8 09 fc ff ff       	call   c001804c <Process::addArgs(char**)>
c0018443:	83 c4 10             	add    esp,0x10
c0018446:	90                   	nop
c0018447:	83 c4 24             	add    esp,0x24
c001844a:	5b                   	pop    ebx
c001844b:	5e                   	pop    esi
c001844c:	c3                   	ret    
c001844d:	8d 76 00             	lea    esi,[esi+0x0]

c0018450 <taskStartupFunction>:
c0018450:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018455:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018458:	c3                   	ret    
c0018459:	90                   	nop
c001845a:	66 90                	xchg   ax,ax

c001845c <Semaphore::Semaphore(int)>:
c001845c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018460:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018464:	89 10                	mov    DWORD PTR [eax],edx
c0018466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001846a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018471:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018475:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001847c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018480:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018487:	90                   	nop
c0018488:	c3                   	ret    
c0018489:	90                   	nop
c001848a:	66 90                	xchg   ax,ax

c001848c <Mutex::Mutex()>:
c001848c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018490:	6a 01                	push   0x1
c0018492:	50                   	push   eax
c0018493:	e8 c4 ff ff ff       	call   c001845c <Semaphore::Semaphore(int)>
c0018498:	83 c4 08             	add    esp,0x8
c001849b:	90                   	nop
c001849c:	c3                   	ret    
c001849d:	90                   	nop
c001849e:	66 90                	xchg   ax,ax

c00184a0 <Process::createThread(void (*)(void*), void*, int)>:
c00184a0:	57                   	push   edi
c00184a1:	31 c9                	xor    ecx,ecx
c00184a3:	56                   	push   esi
c00184a4:	53                   	push   ebx
c00184a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00184a9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00184b0:	89 f2                	mov    edx,esi
c00184b2:	66 90                	xchg   ax,ax
c00184b4:	0f b7 c2             	movzx  eax,dx
c00184b7:	83 e2 01             	and    edx,0x1
c00184ba:	74 14                	je     c00184d0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00184bc:	d1 f8                	sar    eax,1
c00184be:	41                   	inc    ecx
c00184bf:	89 c2                	mov    edx,eax
c00184c1:	83 f9 10             	cmp    ecx,0x10
c00184c4:	75 ee                	jne    c00184b4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00184c6:	31 db                	xor    ebx,ebx
c00184c8:	89 d8                	mov    eax,ebx
c00184ca:	5b                   	pop    ebx
c00184cb:	5e                   	pop    esi
c00184cc:	5f                   	pop    edi
c00184cd:	c3                   	ret    
c00184ce:	66 90                	xchg   ax,ax
c00184d0:	b8 01 00 00 00       	mov    eax,0x1
c00184d5:	d3 e0                	shl    eax,cl
c00184d7:	09 c6                	or     esi,eax
c00184d9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00184dc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00184e3:	01 c0                	add    eax,eax
c00184e5:	01 c8                	add    eax,ecx
c00184e7:	8d 04 80             	lea    eax,[eax+eax*4]
c00184ea:	01 d8                	add    eax,ebx
c00184ec:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00184f3:	75 0b                	jne    c0018500 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00184f5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00184ff:	90                   	nop
c0018500:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018506:	83 ec 08             	sub    esp,0x8
c0018509:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001850c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001850f:	01 c0                	add    eax,eax
c0018511:	01 c8                	add    eax,ecx
c0018513:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018516:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018519:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001851f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018525:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018529:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001852f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018535:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001853c:	89 ca                	mov    edx,ecx
c001853e:	f7 da                	neg    edx
c0018540:	c1 e2 15             	shl    edx,0x15
c0018543:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018549:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001854f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018553:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001855d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018563:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018567:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001856d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018577:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018581:	53                   	push   ebx
c0018582:	68 a4 94 02 c0       	push   0xc00294a4
c0018587:	e8 64 a8 00 00       	call   c0022df0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001858c:	83 c4 10             	add    esp,0x10
c001858f:	89 d8                	mov    eax,ebx
c0018591:	5b                   	pop    ebx
c0018592:	5e                   	pop    esi
c0018593:	5f                   	pop    edi
c0018594:	c3                   	ret    
c0018595:	90                   	nop
c0018596:	66 90                	xchg   ax,ax

c0018598 <Process::createUserThread()>:
c0018598:	83 ec 0c             	sub    esp,0xc
c001859b:	68 80 00 00 00       	push   0x80
c00185a0:	6a 00                	push   0x0
c00185a2:	68 40 7f 01 c0       	push   0xc0017f40
c00185a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00185ab:	e8 f0 fe ff ff       	call   c00184a0 <Process::createThread(void (*)(void*), void*, int)>
c00185b0:	83 c4 1c             	add    esp,0x1c
c00185b3:	c3                   	ret    

c00185b4 <setupMultitasking(void (*)())>:
c00185b4:	56                   	push   esi
c00185b5:	53                   	push   ebx
c00185b6:	51                   	push   ecx
c00185b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00185bb:	eb 13                	jmp    c00185d0 <setupMultitasking(void (*)())+0x1c>
c00185bd:	8d 76 00             	lea    esi,[esi+0x0]
c00185c0:	83 ec 0c             	sub    esp,0xc
c00185c3:	68 a4 94 02 c0       	push   0xc00294a4
c00185c8:	e8 6b a7 00 00       	call   c0022d38 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00185cd:	83 c4 10             	add    esp,0x10
c00185d0:	83 ec 0c             	sub    esp,0xc
c00185d3:	68 a4 94 02 c0       	push   0xc00294a4
c00185d8:	e8 37 a7 00 00       	call   c0022d14 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185dd:	83 c4 10             	add    esp,0x10
c00185e0:	84 c0                	test   al,al
c00185e2:	74 dc                	je     c00185c0 <setupMultitasking(void (*)())+0xc>
c00185e4:	83 ec 0c             	sub    esp,0xc
c00185e7:	68 1f 07 00 00       	push   0x71f
c00185ec:	e8 1e 14 ff ff       	call   c0009a0f <malloc>
c00185f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00185f8:	89 c3                	mov    ebx,eax
c00185fa:	6a 00                	push   0x0
c00185fc:	68 a8 60 02 c0       	push   0xc00260a8
c0018601:	6a 01                	push   0x1
c0018603:	50                   	push   eax
c0018604:	e8 8f fc ff ff       	call   c0018298 <Process::Process(bool, char const*, Process*, char**)>
c0018609:	83 c4 14             	add    esp,0x14
c001860c:	89 1d b0 94 02 c0    	mov    DWORD PTR ds:0xc00294b0,ebx
c0018612:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018618:	e8 ec 24 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c001861d:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018625:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001862f:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018635:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018638:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018642:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018648:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001864e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018658:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018662:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001866c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018672:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001867c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018682:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001868c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018692:	58                   	pop    eax
c0018693:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018699:	5a                   	pop    edx
c001869a:	68 a4 60 02 c0       	push   0xc00260a4
c001869f:	50                   	push   eax
c00186a0:	e8 9b 80 fe ff       	call   c0000740 <strcpy>
c00186a5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00186ac:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00186b0:	83 c4 14             	add    esp,0x14
c00186b3:	5b                   	pop    ebx
c00186b4:	5e                   	pop    esi
c00186b5:	e9 cf 7b fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c00186ba:	66 90                	xchg   ax,ax

c00186bc <schedule()>:
c00186bc:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c00186c1:	85 c0                	test   eax,eax
c00186c3:	74 0b                	je     c00186d0 <schedule()+0x14>
c00186c5:	c7 05 80 94 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x1
c00186cf:	c3                   	ret    
c00186d0:	53                   	push   ebx
c00186d1:	83 ec 14             	sub    esp,0x14
c00186d4:	68 a4 94 02 c0       	push   0xc00294a4
c00186d9:	e8 36 a6 00 00       	call   c0022d14 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00186de:	83 c4 10             	add    esp,0x10
c00186e1:	84 c0                	test   al,al
c00186e3:	75 3b                	jne    c0018720 <schedule()+0x64>
c00186e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186ea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00186ed:	4a                   	dec    edx
c00186ee:	74 38                	je     c0018728 <schedule()+0x6c>
c00186f0:	83 ec 0c             	sub    esp,0xc
c00186f3:	68 a4 94 02 c0       	push   0xc00294a4
c00186f8:	e8 33 a6 00 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186fd:	c7 04 24 a4 94 02 c0 	mov    DWORD PTR [esp],0xc00294a4
c0018704:	89 c3                	mov    ebx,eax
c0018706:	e8 2d a6 00 00       	call   c0022d38 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001870b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018712:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018715:	e8 7e f8 ff ff       	call   c0017f98 <switchToThread(ThreadControlBlock*)>
c001871a:	83 c4 10             	add    esp,0x10
c001871d:	8d 76 00             	lea    esi,[esi+0x0]
c0018720:	83 c4 08             	add    esp,0x8
c0018723:	5b                   	pop    ebx
c0018724:	c3                   	ret    
c0018725:	8d 76 00             	lea    esi,[esi+0x0]
c0018728:	83 ec 08             	sub    esp,0x8
c001872b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018732:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018738:	68 a4 94 02 c0       	push   0xc00294a4
c001873d:	e8 ae a6 00 00       	call   c0022df0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018742:	83 c4 10             	add    esp,0x10
c0018745:	eb a9                	jmp    c00186f0 <schedule()+0x34>
c0018747:	90                   	nop

c0018748 <Semaphore::tryAcquire()>:
c0018748:	53                   	push   ebx
c0018749:	83 ec 08             	sub    esp,0x8
c001874c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018750:	fa                   	cli    
c0018751:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018756:	8d 50 01             	lea    edx,[eax+0x1]
c0018759:	89 15 88 94 02 c0    	mov    DWORD PTR ds:0xc0029488,edx
c001875f:	8b 15 84 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029484
c0018765:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018768:	89 1d 84 94 02 c0    	mov    DWORD PTR ds:0xc0029484,ebx
c001876e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018771:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0018773:	7c 33                	jl     c00187a8 <Semaphore::tryAcquire()+0x60>
c0018775:	89 15 84 94 02 c0    	mov    DWORD PTR ds:0xc0029484,edx
c001877b:	85 d2                	test   edx,edx
c001877d:	75 0d                	jne    c001878c <Semaphore::tryAcquire()+0x44>
c001877f:	8b 15 80 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029480
c0018785:	85 d2                	test   edx,edx
c0018787:	75 6b                	jne    c00187f4 <Semaphore::tryAcquire()+0xac>
c0018789:	8d 76 00             	lea    esi,[esi+0x0]
c001878c:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0018791:	85 c0                	test   eax,eax
c0018793:	74 0b                	je     c00187a0 <Semaphore::tryAcquire()+0x58>
c0018795:	8d 76 00             	lea    esi,[esi+0x0]
c0018798:	31 c0                	xor    eax,eax
c001879a:	83 c4 08             	add    esp,0x8
c001879d:	5b                   	pop    ebx
c001879e:	c3                   	ret    
c001879f:	90                   	nop
c00187a0:	fb                   	sti    
c00187a1:	83 c4 08             	add    esp,0x8
c00187a4:	5b                   	pop    ebx
c00187a5:	c3                   	ret    
c00187a6:	66 90                	xchg   ax,ax
c00187a8:	43                   	inc    ebx
c00187a9:	89 15 84 94 02 c0    	mov    DWORD PTR ds:0xc0029484,edx
c00187af:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00187b2:	85 d2                	test   edx,edx
c00187b4:	75 22                	jne    c00187d8 <Semaphore::tryAcquire()+0x90>
c00187b6:	8b 0d 80 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029480
c00187bc:	85 c9                	test   ecx,ecx
c00187be:	74 18                	je     c00187d8 <Semaphore::tryAcquire()+0x90>
c00187c0:	c7 05 80 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x0
c00187ca:	e8 ed fe ff ff       	call   c00186bc <schedule()>
c00187cf:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c00187d4:	48                   	dec    eax
c00187d5:	8d 76 00             	lea    esi,[esi+0x0]
c00187d8:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c00187dd:	85 c0                	test   eax,eax
c00187df:	75 0b                	jne    c00187ec <Semaphore::tryAcquire()+0xa4>
c00187e1:	fb                   	sti    
c00187e2:	b0 01                	mov    al,0x1
c00187e4:	83 c4 08             	add    esp,0x8
c00187e7:	5b                   	pop    ebx
c00187e8:	c3                   	ret    
c00187e9:	8d 76 00             	lea    esi,[esi+0x0]
c00187ec:	b0 01                	mov    al,0x1
c00187ee:	83 c4 08             	add    esp,0x8
c00187f1:	5b                   	pop    ebx
c00187f2:	c3                   	ret    
c00187f3:	90                   	nop
c00187f4:	c7 05 80 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x0
c00187fe:	e8 b9 fe ff ff       	call   c00186bc <schedule()>
c0018803:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018808:	48                   	dec    eax
c0018809:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c001880e:	85 c0                	test   eax,eax
c0018810:	75 86                	jne    c0018798 <Semaphore::tryAcquire()+0x50>
c0018812:	eb 8c                	jmp    c00187a0 <Semaphore::tryAcquire()+0x58>

c0018814 <Semaphore::assertLocked(char const*)>:
c0018814:	83 ec 0c             	sub    esp,0xc
c0018817:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001881b:	fa                   	cli    
c001881c:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0018822:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c0018827:	8d 48 01             	lea    ecx,[eax+0x1]
c001882a:	89 0d 84 94 02 c0    	mov    DWORD PTR ds:0xc0029484,ecx
c0018830:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018832:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018835:	7c 29                	jl     c0018860 <Semaphore::assertLocked(char const*)+0x4c>
c0018837:	90                   	nop
c0018838:	a3 84 94 02 c0       	mov    ds:0xc0029484,eax
c001883d:	85 c0                	test   eax,eax
c001883f:	75 0b                	jne    c001884c <Semaphore::assertLocked(char const*)+0x38>
c0018841:	a1 80 94 02 c0       	mov    eax,ds:0xc0029480
c0018846:	85 c0                	test   eax,eax
c0018848:	75 2e                	jne    c0018878 <Semaphore::assertLocked(char const*)+0x64>
c001884a:	66 90                	xchg   ax,ax
c001884c:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018851:	48                   	dec    eax
c0018852:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0018857:	75 03                	jne    c001885c <Semaphore::assertLocked(char const*)+0x48>
c0018859:	fb                   	sti    
c001885a:	66 90                	xchg   ax,ax
c001885c:	83 c4 0c             	add    esp,0xc
c001885f:	c3                   	ret    
c0018860:	83 ec 0c             	sub    esp,0xc
c0018863:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018867:	e8 9b c1 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001886c:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c0018871:	83 c4 10             	add    esp,0x10
c0018874:	48                   	dec    eax
c0018875:	eb c1                	jmp    c0018838 <Semaphore::assertLocked(char const*)+0x24>
c0018877:	90                   	nop
c0018878:	c7 05 80 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x0
c0018882:	e8 35 fe ff ff       	call   c00186bc <schedule()>
c0018887:	eb c3                	jmp    c001884c <Semaphore::assertLocked(char const*)+0x38>
c0018889:	8d 76 00             	lea    esi,[esi+0x0]

c001888c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001888c:	83 ec 0c             	sub    esp,0xc
c001888f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018894:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018898:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001889b:	e8 1c fe ff ff       	call   c00186bc <schedule()>
c00188a0:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c00188a5:	48                   	dec    eax
c00188a6:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c00188ab:	75 03                	jne    c00188b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00188ad:	fb                   	sti    
c00188ae:	66 90                	xchg   ax,ax
c00188b0:	83 c4 0c             	add    esp,0xc
c00188b3:	c3                   	ret    

c00188b4 <blockTask(TaskState)>:
c00188b4:	83 ec 0c             	sub    esp,0xc
c00188b7:	fa                   	cli    
c00188b8:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c00188be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188c7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00188ca:	e8 ed fd ff ff       	call   c00186bc <schedule()>
c00188cf:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c00188d4:	48                   	dec    eax
c00188d5:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c00188da:	75 04                	jne    c00188e0 <blockTask(TaskState)+0x2c>
c00188dc:	fb                   	sti    
c00188dd:	8d 76 00             	lea    esi,[esi+0x0]
c00188e0:	83 c4 0c             	add    esp,0xc
c00188e3:	c3                   	ret    

c00188e4 <waitTask(int, int*, int)>:
c00188e4:	83 ec 18             	sub    esp,0x18
c00188e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188f0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00188f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00188f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188fc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00188ff:	6a 07                	push   0x7
c0018901:	e8 ae ff ff ff       	call   c00188b4 <blockTask(TaskState)>
c0018906:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001890b:	83 c4 10             	add    esp,0x10
c001890e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018911:	85 d2                	test   edx,edx
c0018913:	74 0b                	je     c0018920 <waitTask(int, int*, int)+0x3c>
c0018915:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018918:	89 02                	mov    DWORD PTR [edx],eax
c001891a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001891f:	90                   	nop
c0018920:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018923:	83 c4 0c             	add    esp,0xc
c0018926:	c3                   	ret    
c0018927:	90                   	nop

c0018928 <milliTenthSleepUntil(unsigned int)>:
c0018928:	83 ec 0c             	sub    esp,0xc
c001892b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001892f:	39 05 8c 85 02 c0    	cmp    DWORD PTR ds:0xc002858c,eax
c0018935:	76 05                	jbe    c001893c <milliTenthSleepUntil(unsigned int)+0x14>
c0018937:	90                   	nop
c0018938:	83 c4 0c             	add    esp,0xc
c001893b:	c3                   	ret    
c001893c:	fa                   	cli    
c001893d:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0018943:	83 ec 08             	sub    esp,0x8
c0018946:	ff 05 84 94 02 c0    	inc    DWORD PTR ds:0xc0029484
c001894c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018952:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018955:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001895b:	68 98 94 02 c0       	push   0xc0029498
c0018960:	e8 8b a4 00 00       	call   c0022df0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018965:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001896c:	e8 43 ff ff ff       	call   c00188b4 <blockTask(TaskState)>
c0018971:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c0018976:	83 c4 10             	add    esp,0x10
c0018979:	48                   	dec    eax
c001897a:	a3 84 94 02 c0       	mov    ds:0xc0029484,eax
c001897f:	85 c0                	test   eax,eax
c0018981:	75 09                	jne    c001898c <milliTenthSleepUntil(unsigned int)+0x64>
c0018983:	a1 80 94 02 c0       	mov    eax,ds:0xc0029480
c0018988:	85 c0                	test   eax,eax
c001898a:	75 14                	jne    c00189a0 <milliTenthSleepUntil(unsigned int)+0x78>
c001898c:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018991:	48                   	dec    eax
c0018992:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0018997:	75 9f                	jne    c0018938 <milliTenthSleepUntil(unsigned int)+0x10>
c0018999:	fb                   	sti    
c001899a:	83 c4 0c             	add    esp,0xc
c001899d:	c3                   	ret    
c001899e:	66 90                	xchg   ax,ax
c00189a0:	c7 05 80 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x0
c00189aa:	e8 0d fd ff ff       	call   c00186bc <schedule()>
c00189af:	eb db                	jmp    c001898c <milliTenthSleepUntil(unsigned int)+0x64>
c00189b1:	8d 76 00             	lea    esi,[esi+0x0]

c00189b4 <milliTenthSleep(unsigned int)>:
c00189b4:	a1 8c 85 02 c0       	mov    eax,ds:0xc002858c
c00189b9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00189bd:	e9 66 ff ff ff       	jmp    c0018928 <milliTenthSleepUntil(unsigned int)>
c00189c2:	66 90                	xchg   ax,ax

c00189c4 <sleep(unsigned int)>:
c00189c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189c8:	8d 04 80             	lea    eax,[eax+eax*4]
c00189cb:	8d 04 80             	lea    eax,[eax+eax*4]
c00189ce:	8d 04 80             	lea    eax,[eax+eax*4]
c00189d1:	8d 04 80             	lea    eax,[eax+eax*4]
c00189d4:	c1 e0 04             	shl    eax,0x4
c00189d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00189db:	eb d7                	jmp    c00189b4 <milliTenthSleep(unsigned int)>
c00189dd:	90                   	nop
c00189de:	66 90                	xchg   ax,ax

c00189e0 <Semaphore::acquire()>:
c00189e0:	83 ec 0c             	sub    esp,0xc
c00189e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00189e7:	fa                   	cli    
c00189e8:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c00189ed:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c00189f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00189f6:	89 0d 84 94 02 c0    	mov    DWORD PTR ds:0xc0029484,ecx
c00189fc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00189ff:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018a01:	7d 2d                	jge    c0018a30 <Semaphore::acquire()+0x50>
c0018a03:	41                   	inc    ecx
c0018a04:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018a07:	90                   	nop
c0018a08:	a3 84 94 02 c0       	mov    ds:0xc0029484,eax
c0018a0d:	85 c0                	test   eax,eax
c0018a0f:	75 0b                	jne    c0018a1c <Semaphore::acquire()+0x3c>
c0018a11:	a1 80 94 02 c0       	mov    eax,ds:0xc0029480
c0018a16:	85 c0                	test   eax,eax
c0018a18:	75 62                	jne    c0018a7c <Semaphore::acquire()+0x9c>
c0018a1a:	66 90                	xchg   ax,ax
c0018a1c:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018a21:	48                   	dec    eax
c0018a22:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0018a27:	75 03                	jne    c0018a2c <Semaphore::acquire()+0x4c>
c0018a29:	fb                   	sti    
c0018a2a:	66 90                	xchg   ax,ax
c0018a2c:	83 c4 0c             	add    esp,0xc
c0018a2f:	c3                   	ret    
c0018a30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a35:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018a3c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018a3f:	85 c9                	test   ecx,ecx
c0018a41:	74 4d                	je     c0018a90 <Semaphore::acquire()+0xb0>
c0018a43:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018a46:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018a4c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018a4f:	90                   	nop
c0018a50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a55:	83 ec 0c             	sub    esp,0xc
c0018a58:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018a5b:	68 24 61 02 c0       	push   0xc0026124
c0018a60:	e8 96 42 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018a65:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018a6c:	e8 43 fe ff ff       	call   c00188b4 <blockTask(TaskState)>
c0018a71:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c0018a76:	83 c4 10             	add    esp,0x10
c0018a79:	48                   	dec    eax
c0018a7a:	eb 8c                	jmp    c0018a08 <Semaphore::acquire()+0x28>
c0018a7c:	c7 05 80 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x0
c0018a86:	e8 31 fc ff ff       	call   c00186bc <schedule()>
c0018a8b:	eb 8f                	jmp    c0018a1c <Semaphore::acquire()+0x3c>
c0018a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a95:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018a98:	eb b6                	jmp    c0018a50 <Semaphore::acquire()+0x70>
c0018a9a:	66 90                	xchg   ax,ax

c0018a9c <taskReturned>:
c0018a9c:	83 ec 18             	sub    esp,0x18
c0018a9f:	68 44 61 02 c0       	push   0xc0026144
c0018aa4:	e8 5e bf ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0018aa9:	83 c4 10             	add    esp,0x10
c0018aac:	83 ec 0c             	sub    esp,0xc
c0018aaf:	6a 02                	push   0x2
c0018ab1:	e8 fe fd ff ff       	call   c00188b4 <blockTask(TaskState)>
c0018ab6:	fa                   	cli    
c0018ab7:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0018abd:	e8 fa fb ff ff       	call   c00186bc <schedule()>
c0018ac2:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018ac7:	83 c4 10             	add    esp,0x10
c0018aca:	48                   	dec    eax
c0018acb:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0018ad0:	85 c0                	test   eax,eax
c0018ad2:	75 d8                	jne    c0018aac <taskReturned+0x10>
c0018ad4:	fb                   	sti    
c0018ad5:	eb d5                	jmp    c0018aac <taskReturned+0x10>
c0018ad7:	90                   	nop

c0018ad8 <Thr::processFromPID(int)>:
c0018ad8:	57                   	push   edi
c0018ad9:	56                   	push   esi
c0018ada:	53                   	push   ebx
c0018adb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018adf:	fa                   	cli    
c0018ae0:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0018ae6:	83 ec 0c             	sub    esp,0xc
c0018ae9:	68 a4 94 02 c0       	push   0xc00294a4
c0018aee:	e8 3d a2 00 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018af3:	83 c4 10             	add    esp,0x10
c0018af6:	89 c7                	mov    edi,eax
c0018af8:	eb 16                	jmp    c0018b10 <Thr::processFromPID(int)+0x38>
c0018afa:	66 90                	xchg   ax,ax
c0018afc:	83 ec 0c             	sub    esp,0xc
c0018aff:	68 a4 94 02 c0       	push   0xc00294a4
c0018b04:	e8 27 a2 00 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b09:	83 c4 10             	add    esp,0x10
c0018b0c:	39 f8                	cmp    eax,edi
c0018b0e:	74 4c                	je     c0018b5c <Thr::processFromPID(int)+0x84>
c0018b10:	83 ec 0c             	sub    esp,0xc
c0018b13:	68 a4 94 02 c0       	push   0xc00294a4
c0018b18:	e8 13 a2 00 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b1d:	c7 04 24 a4 94 02 c0 	mov    DWORD PTR [esp],0xc00294a4
c0018b24:	89 c3                	mov    ebx,eax
c0018b26:	e8 0d a2 00 00       	call   c0022d38 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b2b:	58                   	pop    eax
c0018b2c:	5a                   	pop    edx
c0018b2d:	53                   	push   ebx
c0018b2e:	68 a4 94 02 c0       	push   0xc00294a4
c0018b33:	e8 b8 a2 00 00       	call   c0022df0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b38:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b3b:	83 c4 10             	add    esp,0x10
c0018b3e:	39 30                	cmp    DWORD PTR [eax],esi
c0018b40:	75 ba                	jne    c0018afc <Thr::processFromPID(int)+0x24>
c0018b42:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018b47:	48                   	dec    eax
c0018b48:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0018b4d:	74 09                	je     c0018b58 <Thr::processFromPID(int)+0x80>
c0018b4f:	90                   	nop
c0018b50:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b53:	5b                   	pop    ebx
c0018b54:	5e                   	pop    esi
c0018b55:	5f                   	pop    edi
c0018b56:	c3                   	ret    
c0018b57:	90                   	nop
c0018b58:	fb                   	sti    
c0018b59:	eb f5                	jmp    c0018b50 <Thr::processFromPID(int)+0x78>
c0018b5b:	90                   	nop
c0018b5c:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018b61:	48                   	dec    eax
c0018b62:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0018b67:	75 07                	jne    c0018b70 <Thr::processFromPID(int)+0x98>
c0018b69:	fb                   	sti    
c0018b6a:	5b                   	pop    ebx
c0018b6b:	5e                   	pop    esi
c0018b6c:	5f                   	pop    edi
c0018b6d:	c3                   	ret    
c0018b6e:	66 90                	xchg   ax,ax
c0018b70:	5b                   	pop    ebx
c0018b71:	31 c0                	xor    eax,eax
c0018b73:	5e                   	pop    esi
c0018b74:	5f                   	pop    edi
c0018b75:	c3                   	ret    
c0018b76:	66 90                	xchg   ax,ax

c0018b78 <unblockTask(ThreadControlBlock*)>:
c0018b78:	53                   	push   ebx
c0018b79:	83 ec 08             	sub    esp,0x8
c0018b7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b80:	fa                   	cli    
c0018b81:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0018b87:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018b8a:	85 c0                	test   eax,eax
c0018b8c:	74 66                	je     c0018bf4 <unblockTask(ThreadControlBlock*)+0x7c>
c0018b8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018b91:	48                   	dec    eax
c0018b92:	74 38                	je     c0018bcc <unblockTask(ThreadControlBlock*)+0x54>
c0018b94:	83 ec 0c             	sub    esp,0xc
c0018b97:	68 a4 94 02 c0       	push   0xc00294a4
c0018b9c:	e8 8f a1 00 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ba1:	83 c4 10             	add    esp,0x10
c0018ba4:	85 c0                	test   eax,eax
c0018ba6:	75 1c                	jne    c0018bc4 <unblockTask(ThreadControlBlock*)+0x4c>
c0018ba8:	eb 5e                	jmp    c0018c08 <unblockTask(ThreadControlBlock*)+0x90>
c0018baa:	66 90                	xchg   ax,ax
c0018bac:	83 ec 08             	sub    esp,0x8
c0018baf:	50                   	push   eax
c0018bb0:	68 a4 94 02 c0       	push   0xc00294a4
c0018bb5:	e8 26 a5 00 00       	call   c00230e0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018bba:	83 c4 10             	add    esp,0x10
c0018bbd:	85 c0                	test   eax,eax
c0018bbf:	74 47                	je     c0018c08 <unblockTask(ThreadControlBlock*)+0x90>
c0018bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bc4:	39 c3                	cmp    ebx,eax
c0018bc6:	75 e4                	jne    c0018bac <unblockTask(ThreadControlBlock*)+0x34>
c0018bc8:	eb 12                	jmp    c0018bdc <unblockTask(ThreadControlBlock*)+0x64>
c0018bca:	66 90                	xchg   ax,ax
c0018bcc:	83 ec 0c             	sub    esp,0xc
c0018bcf:	68 c6 60 02 c0       	push   0xc00260c6
c0018bd4:	e8 22 41 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018bd9:	83 c4 10             	add    esp,0x10
c0018bdc:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018be1:	48                   	dec    eax
c0018be2:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0018be7:	75 03                	jne    c0018bec <unblockTask(ThreadControlBlock*)+0x74>
c0018be9:	fb                   	sti    
c0018bea:	66 90                	xchg   ax,ax
c0018bec:	83 c4 08             	add    esp,0x8
c0018bef:	5b                   	pop    ebx
c0018bf0:	c3                   	ret    
c0018bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bf4:	83 ec 0c             	sub    esp,0xc
c0018bf7:	68 af 60 02 c0       	push   0xc00260af
c0018bfc:	e8 fa 40 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018c01:	83 c4 10             	add    esp,0x10
c0018c04:	eb d6                	jmp    c0018bdc <unblockTask(ThreadControlBlock*)+0x64>
c0018c06:	66 90                	xchg   ax,ax
c0018c08:	83 ec 08             	sub    esp,0x8
c0018c0b:	53                   	push   ebx
c0018c0c:	68 a4 94 02 c0       	push   0xc00294a4
c0018c11:	e8 da a1 00 00       	call   c0022df0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c16:	83 c4 10             	add    esp,0x10
c0018c19:	eb c1                	jmp    c0018bdc <unblockTask(ThreadControlBlock*)+0x64>
c0018c1b:	90                   	nop

c0018c1c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018c1c:	55                   	push   ebp
c0018c1d:	57                   	push   edi
c0018c1e:	56                   	push   esi
c0018c1f:	53                   	push   ebx
c0018c20:	83 ec 1c             	sub    esp,0x1c
c0018c23:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018c27:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c2a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018c30:	85 ff                	test   edi,edi
c0018c32:	7e 24                	jle    c0018c58 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018c34:	31 f6                	xor    esi,esi
c0018c36:	66 90                	xchg   ax,ax
c0018c38:	83 ec 0c             	sub    esp,0xc
c0018c3b:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018c42:	46                   	inc    esi
c0018c43:	e8 d7 0d ff ff       	call   c0009a1f <free>
c0018c48:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c4b:	83 c4 10             	add    esp,0x10
c0018c4e:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018c54:	7f e2                	jg     c0018c38 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018c56:	66 90                	xchg   ax,ax
c0018c58:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018c62:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018c67:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018c6a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018c6d:	d3 c0                	rol    eax,cl
c0018c6f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0018c76:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018c79:	89 f7                	mov    edi,esi
c0018c7b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018c83:	0f 85 73 01 00 00    	jne    c0018dfc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018c89:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018c8f:	85 ed                	test   ebp,ebp
c0018c91:	74 1d                	je     c0018cb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018c93:	83 ec 0c             	sub    esp,0xc
c0018c96:	55                   	push   ebp
c0018c97:	e8 10 bb ff ff       	call   c00147ac <EnvVarContainer::~EnvVarContainer()>
c0018c9c:	59                   	pop    ecx
c0018c9d:	5e                   	pop    esi
c0018c9e:	6a 0c                	push   0xc
c0018ca0:	55                   	push   ebp
c0018ca1:	e8 74 3f ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0018ca6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018ca9:	83 c4 10             	add    esp,0x10
c0018cac:	89 f7                	mov    edi,esi
c0018cae:	66 90                	xchg   ax,ax
c0018cb0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018cb6:	85 c0                	test   eax,eax
c0018cb8:	0f 84 b2 00 00 00    	je     c0018d70 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018cbe:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018cc1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018cc5:	31 c9                	xor    ecx,ecx
c0018cc7:	eb 17                	jmp    c0018ce0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ccc:	41                   	inc    ecx
c0018ccd:	83 f9 10             	cmp    ecx,0x10
c0018cd0:	0f 84 9a 00 00 00    	je     c0018d70 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018cd6:	66 90                	xchg   ax,ax
c0018cd8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018cde:	66 90                	xchg   ax,ax
c0018ce0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018ce7:	d3 fa                	sar    edx,cl
c0018ce9:	83 e2 01             	and    edx,0x1
c0018cec:	74 de                	je     c0018ccc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018cee:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018cf1:	01 d2                	add    edx,edx
c0018cf3:	01 ca                	add    edx,ecx
c0018cf5:	8d 14 92             	lea    edx,[edx+edx*4]
c0018cf8:	01 d0                	add    eax,edx
c0018cfa:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018d00:	83 fd 07             	cmp    ebp,0x7
c0018d03:	75 c7                	jne    c0018ccc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d05:	05 40 02 00 00       	add    eax,0x240
c0018d0a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018d0d:	83 fd ff             	cmp    ebp,0xffffffff
c0018d10:	0f 8c ee 00 00 00    	jl     c0018e04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018d16:	0f 84 ac 01 00 00    	je     c0018ec8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018d1c:	85 ed                	test   ebp,ebp
c0018d1e:	0f 84 90 01 00 00    	je     c0018eb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018d24:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018d26:	75 a4                	jne    c0018ccc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d28:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018d2e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018d32:	01 d0                	add    eax,edx
c0018d34:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018d38:	83 ec 0c             	sub    esp,0xc
c0018d3b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018d41:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018d44:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018d4a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018d51:	50                   	push   eax
c0018d52:	e8 21 fe ff ff       	call   c0018b78 <unblockTask(ThreadControlBlock*)>
c0018d57:	83 c4 10             	add    esp,0x10
c0018d5a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018d5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d61:	89 f7                	mov    edi,esi
c0018d63:	41                   	inc    ecx
c0018d64:	83 f9 10             	cmp    ecx,0x10
c0018d67:	0f 85 6b ff ff ff    	jne    c0018cd8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d70:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018d76:	85 c0                	test   eax,eax
c0018d78:	74 62                	je     c0018ddc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018d7a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018d80:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018d86:	74 54                	je     c0018ddc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018d88:	83 ec 0c             	sub    esp,0xc
c0018d8b:	68 a4 94 02 c0       	push   0xc00294a4
c0018d90:	e8 9b 9f 00 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018d95:	c7 04 24 a4 94 02 c0 	mov    DWORD PTR [esp],0xc00294a4
c0018d9c:	89 c7                	mov    edi,eax
c0018d9e:	e8 71 9f 00 00       	call   c0022d14 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018da3:	83 c4 10             	add    esp,0x10
c0018da6:	84 c0                	test   al,al
c0018da8:	0f 84 ce 00 00 00    	je     c0018e7c <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018dae:	66 90                	xchg   ax,ax
c0018db0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018db3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018db9:	85 d2                	test   edx,edx
c0018dbb:	74 0f                	je     c0018dcc <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018dbd:	83 ec 0c             	sub    esp,0xc
c0018dc0:	8b 02                	mov    eax,DWORD PTR [edx]
c0018dc2:	52                   	push   edx
c0018dc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018dc6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018dc9:	83 c4 10             	add    esp,0x10
c0018dcc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018dd6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ddc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018de2:	85 db                	test   ebx,ebx
c0018de4:	74 16                	je     c0018dfc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018de6:	83 ec 0c             	sub    esp,0xc
c0018de9:	53                   	push   ebx
c0018dea:	e8 11 31 ff ff       	call   c000bf00 <VAS::~VAS()>
c0018def:	58                   	pop    eax
c0018df0:	5a                   	pop    edx
c0018df1:	6a 14                	push   0x14
c0018df3:	53                   	push   ebx
c0018df4:	e8 21 3e ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0018df9:	83 c4 10             	add    esp,0x10
c0018dfc:	83 c4 1c             	add    esp,0x1c
c0018dff:	5b                   	pop    ebx
c0018e00:	5e                   	pop    esi
c0018e01:	5f                   	pop    edi
c0018e02:	5d                   	pop    ebp
c0018e03:	c3                   	ret    
c0018e04:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018e08:	83 ec 0c             	sub    esp,0xc
c0018e0b:	68 78 61 02 c0       	push   0xc0026178
c0018e10:	e8 f2 bb ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0018e15:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018e18:	83 c4 10             	add    esp,0x10
c0018e1b:	89 f7                	mov    edi,esi
c0018e1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e21:	e9 a6 fe ff ff       	jmp    c0018ccc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018e26:	66 90                	xchg   ax,ax
c0018e28:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e2e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018e34:	75 1e                	jne    c0018e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018e36:	83 ec 0c             	sub    esp,0xc
c0018e39:	68 e0 61 02 c0       	push   0xc00261e0
c0018e3e:	e8 b8 3e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018e43:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018e4a:	e8 65 fa ff ff       	call   c00188b4 <blockTask(TaskState)>
c0018e4f:	83 c4 10             	add    esp,0x10
c0018e52:	66 90                	xchg   ax,ax
c0018e54:	83 ec 08             	sub    esp,0x8
c0018e57:	56                   	push   esi
c0018e58:	68 a4 94 02 c0       	push   0xc00294a4
c0018e5d:	e8 8e 9f 00 00       	call   c0022df0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e62:	c7 04 24 a4 94 02 c0 	mov    DWORD PTR [esp],0xc00294a4
c0018e69:	e8 c2 9e 00 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e6e:	83 c4 10             	add    esp,0x10
c0018e71:	39 f8                	cmp    eax,edi
c0018e73:	0f 84 37 ff ff ff    	je     c0018db0 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018e79:	8d 76 00             	lea    esi,[esi+0x0]
c0018e7c:	83 ec 0c             	sub    esp,0xc
c0018e7f:	68 a4 94 02 c0       	push   0xc00294a4
c0018e84:	e8 a7 9e 00 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e89:	c7 04 24 a4 94 02 c0 	mov    DWORD PTR [esp],0xc00294a4
c0018e90:	89 c6                	mov    esi,eax
c0018e92:	e8 a1 9e 00 00       	call   c0022d38 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018e97:	83 c4 10             	add    esp,0x10
c0018e9a:	39 f3                	cmp    ebx,esi
c0018e9c:	74 b6                	je     c0018e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018e9e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018ea1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018ea4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018eaa:	75 a8                	jne    c0018e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018eac:	e9 77 ff ff ff       	jmp    c0018e28 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0018eb4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018eb8:	83 ec 0c             	sub    esp,0xc
c0018ebb:	68 ac 61 02 c0       	push   0xc00261ac
c0018ec0:	e9 4b ff ff ff       	jmp    c0018e10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ec8:	8b 36                	mov    esi,DWORD PTR [esi]
c0018eca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018ece:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018ed1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018ed4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018eda:	01 d7                	add    edi,edx
c0018edc:	89 f8                	mov    eax,edi
c0018ede:	e9 51 fe ff ff       	jmp    c0018d34 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018ee3:	90                   	nop

c0018ee4 <cleanerTaskFunction(void*)>:
c0018ee4:	53                   	push   ebx
c0018ee5:	83 ec 08             	sub    esp,0x8
c0018ee8:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018eed:	48                   	dec    eax
c0018eee:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0018ef3:	75 03                	jne    c0018ef8 <cleanerTaskFunction(void*)+0x14>
c0018ef5:	fb                   	sti    
c0018ef6:	66 90                	xchg   ax,ax
c0018ef8:	fa                   	cli    
c0018ef9:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018efe:	80 3d 6c 94 02 c0 00 	cmp    BYTE PTR ds:0xc002946c,0x0
c0018f05:	8d 50 01             	lea    edx,[eax+0x1]
c0018f08:	89 15 88 94 02 c0    	mov    DWORD PTR ds:0xc0029488,edx
c0018f0e:	0f 84 ac 00 00 00    	je     c0018fc0 <cleanerTaskFunction(void*)+0xdc>
c0018f14:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0018f19:	85 c0                	test   eax,eax
c0018f1b:	75 03                	jne    c0018f20 <cleanerTaskFunction(void*)+0x3c>
c0018f1d:	fb                   	sti    
c0018f1e:	66 90                	xchg   ax,ax
c0018f20:	c6 05 6c 94 02 c0 00 	mov    BYTE PTR ds:0xc002946c,0x0
c0018f27:	fa                   	cli    
c0018f28:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0018f2e:	ff 05 84 94 02 c0    	inc    DWORD PTR ds:0xc0029484
c0018f34:	fa                   	cli    
c0018f35:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0018f3b:	eb 2b                	jmp    c0018f68 <cleanerTaskFunction(void*)+0x84>
c0018f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f40:	83 ec 0c             	sub    esp,0xc
c0018f43:	68 8c 94 02 c0       	push   0xc002948c
c0018f48:	e8 e3 9d 00 00       	call   c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018f4d:	c7 04 24 8c 94 02 c0 	mov    DWORD PTR [esp],0xc002948c
c0018f54:	89 c3                	mov    ebx,eax
c0018f56:	e8 dd 9d 00 00       	call   c0022d38 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018f5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f5e:	e8 b9 fc ff ff       	call   c0018c1c <cleanupTerminatedTask(ThreadControlBlock*)>
c0018f63:	83 c4 10             	add    esp,0x10
c0018f66:	66 90                	xchg   ax,ax
c0018f68:	83 ec 0c             	sub    esp,0xc
c0018f6b:	68 8c 94 02 c0       	push   0xc002948c
c0018f70:	e8 9f 9d 00 00       	call   c0022d14 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018f75:	83 c4 10             	add    esp,0x10
c0018f78:	84 c0                	test   al,al
c0018f7a:	74 c4                	je     c0018f40 <cleanerTaskFunction(void*)+0x5c>
c0018f7c:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018f81:	48                   	dec    eax
c0018f82:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0018f87:	75 03                	jne    c0018f8c <cleanerTaskFunction(void*)+0xa8>
c0018f89:	fb                   	sti    
c0018f8a:	66 90                	xchg   ax,ax
c0018f8c:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c0018f91:	48                   	dec    eax
c0018f92:	a3 84 94 02 c0       	mov    ds:0xc0029484,eax
c0018f97:	0f 85 4b ff ff ff    	jne    c0018ee8 <cleanerTaskFunction(void*)+0x4>
c0018f9d:	a1 80 94 02 c0       	mov    eax,ds:0xc0029480
c0018fa2:	85 c0                	test   eax,eax
c0018fa4:	0f 84 3e ff ff ff    	je     c0018ee8 <cleanerTaskFunction(void*)+0x4>
c0018faa:	c7 05 80 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x0
c0018fb4:	e8 03 f7 ff ff       	call   c00186bc <schedule()>
c0018fb9:	e9 2a ff ff ff       	jmp    c0018ee8 <cleanerTaskFunction(void*)+0x4>
c0018fbe:	66 90                	xchg   ax,ax
c0018fc0:	83 ec 0c             	sub    esp,0xc
c0018fc3:	6a 02                	push   0x2
c0018fc5:	e8 c2 f8 ff ff       	call   c001888c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018fca:	83 c4 10             	add    esp,0x10
c0018fcd:	e9 4e ff ff ff       	jmp    c0018f20 <cleanerTaskFunction(void*)+0x3c>
c0018fd2:	66 90                	xchg   ax,ax

c0018fd4 <terminateTask(int)>:
c0018fd4:	83 ec 14             	sub    esp,0x14
c0018fd7:	fa                   	cli    
c0018fd8:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0018fde:	ff 05 84 94 02 c0    	inc    DWORD PTR ds:0xc0029484
c0018fe4:	fa                   	cli    
c0018fe5:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0018feb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018fef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ff4:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018ff7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ffc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018fff:	50                   	push   eax
c0019000:	68 8c 94 02 c0       	push   0xc002948c
c0019005:	e8 e6 9d 00 00       	call   c0022df0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001900a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001900f:	83 c4 10             	add    esp,0x10
c0019012:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0019019:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c001901e:	85 c0                	test   eax,eax
c0019020:	74 5e                	je     c0019080 <terminateTask(int)+0xac>
c0019022:	83 ec 0c             	sub    esp,0xc
c0019025:	c6 05 6c 94 02 c0 01 	mov    BYTE PTR ds:0xc002946c,0x1
c001902c:	50                   	push   eax
c001902d:	e8 46 fb ff ff       	call   c0018b78 <unblockTask(ThreadControlBlock*)>
c0019032:	83 c4 10             	add    esp,0x10
c0019035:	8d 76 00             	lea    esi,[esi+0x0]
c0019038:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c001903d:	48                   	dec    eax
c001903e:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0019043:	75 03                	jne    c0019048 <terminateTask(int)+0x74>
c0019045:	fb                   	sti    
c0019046:	66 90                	xchg   ax,ax
c0019048:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c001904d:	48                   	dec    eax
c001904e:	a3 84 94 02 c0       	mov    ds:0xc0029484,eax
c0019053:	75 0b                	jne    c0019060 <terminateTask(int)+0x8c>
c0019055:	83 3d 80 94 02 c0 00 	cmp    DWORD PTR ds:0xc0029480,0x0
c001905c:	75 36                	jne    c0019094 <terminateTask(int)+0xc0>
c001905e:	66 90                	xchg   ax,ax
c0019060:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0019065:	48                   	dec    eax
c0019066:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c001906b:	75 03                	jne    c0019070 <terminateTask(int)+0x9c>
c001906d:	fb                   	sti    
c001906e:	66 90                	xchg   ax,ax
c0019070:	fa                   	cli    
c0019071:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0019077:	90                   	nop
c0019078:	e8 3f f6 ff ff       	call   c00186bc <schedule()>
c001907d:	eb e1                	jmp    c0019060 <terminateTask(int)+0x8c>
c001907f:	90                   	nop
c0019080:	83 ec 0c             	sub    esp,0xc
c0019083:	68 dd 60 02 c0       	push   0xc00260dd
c0019088:	e8 6e 3c ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001908d:	83 c4 10             	add    esp,0x10
c0019090:	eb a6                	jmp    c0019038 <terminateTask(int)+0x64>
c0019092:	66 90                	xchg   ax,ax
c0019094:	c7 05 80 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x0
c001909e:	eb d8                	jmp    c0019078 <terminateTask(int)+0xa4>

c00190a0 <Thr::terminateFromIRQ(int)>:
c00190a0:	83 ec 18             	sub    esp,0x18
c00190a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190a7:	e8 28 ff ff ff       	call   c0018fd4 <terminateTask(int)>

c00190ac <Semaphore::release()>:
c00190ac:	83 ec 0c             	sub    esp,0xc
c00190af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00190b3:	fa                   	cli    
c00190b4:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c00190b9:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c00190bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00190c2:	89 0d 84 94 02 c0    	mov    DWORD PTR ds:0xc0029484,ecx
c00190c8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00190cb:	85 c9                	test   ecx,ecx
c00190cd:	74 41                	je     c0019110 <Semaphore::release()+0x64>
c00190cf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00190d2:	83 ec 0c             	sub    esp,0xc
c00190d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00190d8:	51                   	push   ecx
c00190d9:	e8 9a fa ff ff       	call   c0018b78 <unblockTask(ThreadControlBlock*)>
c00190de:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c00190e3:	83 c4 10             	add    esp,0x10
c00190e6:	48                   	dec    eax
c00190e7:	90                   	nop
c00190e8:	a3 84 94 02 c0       	mov    ds:0xc0029484,eax
c00190ed:	85 c0                	test   eax,eax
c00190ef:	75 0b                	jne    c00190fc <Semaphore::release()+0x50>
c00190f1:	a1 80 94 02 c0       	mov    eax,ds:0xc0029480
c00190f6:	85 c0                	test   eax,eax
c00190f8:	75 1e                	jne    c0019118 <Semaphore::release()+0x6c>
c00190fa:	66 90                	xchg   ax,ax
c00190fc:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0019101:	48                   	dec    eax
c0019102:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0019107:	75 03                	jne    c001910c <Semaphore::release()+0x60>
c0019109:	fb                   	sti    
c001910a:	66 90                	xchg   ax,ax
c001910c:	83 c4 0c             	add    esp,0xc
c001910f:	c3                   	ret    
c0019110:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0019113:	eb d3                	jmp    c00190e8 <Semaphore::release()+0x3c>
c0019115:	8d 76 00             	lea    esi,[esi+0x0]
c0019118:	c7 05 80 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029480,0x0
c0019122:	e8 95 f5 ff ff       	call   c00186bc <schedule()>
c0019127:	eb d3                	jmp    c00190fc <Semaphore::release()+0x50>
c0019129:	8d 76 00             	lea    esi,[esi+0x0]

c001912c <__static_initialization_and_destruction_0(int, int)>:
c001912c:	83 ec 0c             	sub    esp,0xc
c001912f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019134:	0f 85 8e 00 00 00    	jne    c00191c8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001913a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019142:	0f 85 80 00 00 00    	jne    c00191c8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0019148:	83 ec 0c             	sub    esp,0xc
c001914b:	68 a4 94 02 c0       	push   0xc00294a4
c0019150:	e8 47 9f 00 00       	call   c002309c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019155:	83 c4 10             	add    esp,0x10
c0019158:	83 ec 04             	sub    esp,0x4
c001915b:	68 d4 71 02 c0       	push   0xc00271d4
c0019160:	68 a4 94 02 c0       	push   0xc00294a4
c0019165:	68 4c 30 02 c0       	push   0xc002304c
c001916a:	e8 25 3a ff ff       	call   c000cb94 <__cxa_atexit>
c001916f:	83 c4 10             	add    esp,0x10
c0019172:	83 ec 0c             	sub    esp,0xc
c0019175:	68 98 94 02 c0       	push   0xc0029498
c001917a:	e8 1d 9f 00 00       	call   c002309c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001917f:	83 c4 10             	add    esp,0x10
c0019182:	83 ec 04             	sub    esp,0x4
c0019185:	68 d4 71 02 c0       	push   0xc00271d4
c001918a:	68 98 94 02 c0       	push   0xc0029498
c001918f:	68 4c 30 02 c0       	push   0xc002304c
c0019194:	e8 fb 39 ff ff       	call   c000cb94 <__cxa_atexit>
c0019199:	83 c4 10             	add    esp,0x10
c001919c:	83 ec 0c             	sub    esp,0xc
c001919f:	68 8c 94 02 c0       	push   0xc002948c
c00191a4:	e8 f3 9e 00 00       	call   c002309c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00191a9:	83 c4 10             	add    esp,0x10
c00191ac:	83 ec 04             	sub    esp,0x4
c00191af:	68 d4 71 02 c0       	push   0xc00271d4
c00191b4:	68 8c 94 02 c0       	push   0xc002948c
c00191b9:	68 4c 30 02 c0       	push   0xc002304c
c00191be:	e8 d1 39 ff ff       	call   c000cb94 <__cxa_atexit>
c00191c3:	83 c4 10             	add    esp,0x10
c00191c6:	66 90                	xchg   ax,ax
c00191c8:	90                   	nop
c00191c9:	83 c4 0c             	add    esp,0xc
c00191cc:	c3                   	ret    
c00191cd:	8d 76 00             	lea    esi,[esi+0x0]

c00191d0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00191d0:	83 ec 0c             	sub    esp,0xc
c00191d3:	83 ec 08             	sub    esp,0x8
c00191d6:	68 ff ff 00 00       	push   0xffff
c00191db:	6a 01                	push   0x1
c00191dd:	e8 4a ff ff ff       	call   c001912c <__static_initialization_and_destruction_0(int, int)>
c00191e2:	83 c4 10             	add    esp,0x10
c00191e5:	83 c4 0c             	add    esp,0xc
c00191e8:	c3                   	ret    

c00191e9 <Vm::inbv(unsigned short)>:
c00191e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00191ed:	66 81 fa fe fe       	cmp    dx,0xfefe
c00191f2:	75 06                	jne    c00191fa <Vm::inbv(unsigned short)+0x11>
c00191f4:	a0 ec 94 02 c0       	mov    al,ds:0xc00294ec
c00191f9:	c3                   	ret    
c00191fa:	ec                   	in     al,dx
c00191fb:	c3                   	ret    

c00191fc <Vm::outbv(unsigned short, unsigned char)>:
c00191fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019200:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019204:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019209:	75 25                	jne    c0019230 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001920b:	8b 0d ec 94 02 c0    	mov    ecx,DWORD PTR ds:0xc00294ec
c0019211:	8d 51 01             	lea    edx,[ecx+0x1]
c0019214:	88 81 00 95 02 c0    	mov    BYTE PTR [ecx-0x3ffd6b00],al
c001921a:	89 15 ec 94 02 c0    	mov    DWORD PTR ds:0xc00294ec,edx
c0019220:	83 fa 20             	cmp    edx,0x20
c0019223:	75 0c                	jne    c0019231 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019225:	c7 05 ec 94 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00294ec,0x1f
c001922f:	c3                   	ret    
c0019230:	ee                   	out    dx,al
c0019231:	c3                   	ret    

c0019232 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019232:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019237:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001923c:	c1 e0 04             	shl    eax,0x4
c001923f:	01 d0                	add    eax,edx
c0019241:	c3                   	ret    

c0019242 <Vm::getSegment(unsigned int)>:
c0019242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019246:	c1 e8 10             	shr    eax,0x10
c0019249:	c3                   	ret    

c001924a <Vm::getOffset(unsigned int)>:
c001924a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001924e:	c3                   	ret    

c001924f <Vm::mainloop2()>:
c001924f:	83 ec 18             	sub    esp,0x18
c0019252:	fa                   	cli    
c0019253:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c0019259:	6a 02                	push   0x2
c001925b:	c6 05 e5 94 02 c0 01 	mov    BYTE PTR ds:0xc00294e5,0x1
c0019262:	e8 25 f6 ff ff       	call   c001888c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019267:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001926c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019270:	52                   	push   edx
c0019271:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0019275:	52                   	push   edx
c0019276:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001927a:	52                   	push   edx
c001927b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001927f:	50                   	push   eax
c0019280:	e8 aa 6f fe ff       	call   c000022f <goToVM86>
c0019285:	83 c4 2c             	add    esp,0x2c
c0019288:	c3                   	ret    

c0019289 <Vm::mainVm8086Loop(void*)>:
c0019289:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c001928e:	48                   	dec    eax
c001928f:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0019294:	75 01                	jne    c0019297 <Vm::mainVm8086Loop(void*)+0xe>
c0019296:	fb                   	sti    
c0019297:	eb b6                	jmp    c001924f <Vm::mainloop2()>

c0019299 <Vm::mainloop3(unsigned long)>:
c0019299:	83 ec 18             	sub    esp,0x18
c001929c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192a0:	fa                   	cli    
c00192a1:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c00192a7:	6a 02                	push   0x2
c00192a9:	c6 05 e4 94 02 c0 01 	mov    BYTE PTR ds:0xc00294e4,0x1
c00192b0:	a3 e0 94 02 c0       	mov    ds:0xc00294e0,eax
c00192b5:	e8 d2 f5 ff ff       	call   c001888c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00192ba:	83 c4 1c             	add    esp,0x1c
c00192bd:	eb 90                	jmp    c001924f <Vm::mainloop2()>

c00192bf <Vm::initialise8086()>:
c00192bf:	83 ec 0c             	sub    esp,0xc
c00192c2:	68 80 00 00 00       	push   0x80
c00192c7:	6a 00                	push   0x0
c00192c9:	68 89 92 01 c0       	push   0xc0019289
c00192ce:	ff 35 b0 94 02 c0    	push   DWORD PTR ds:0xc00294b0
c00192d4:	e8 c7 f1 ff ff       	call   c00184a0 <Process::createThread(void (*)(void*), void*, int)>
c00192d9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00192e0:	a3 e8 94 02 c0       	mov    ds:0xc00294e8,eax
c00192e5:	68 00 01 00 00       	push   0x100
c00192ea:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c00192ef:	6a 00                	push   0x0
c00192f1:	6a 00                	push   0x0
c00192f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00192f9:	e8 74 30 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00192fe:	83 c4 2c             	add    esp,0x2c
c0019301:	c3                   	ret    

c0019302 <Vm::finish8086()>:
c0019302:	53                   	push   ebx
c0019303:	83 ec 08             	sub    esp,0x8
c0019306:	fa                   	cli    
c0019307:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c001930d:	80 3d e4 94 02 c0 00 	cmp    BYTE PTR ds:0xc00294e4,0x0
c0019314:	75 15                	jne    c001932b <Vm::finish8086()+0x29>
c0019316:	e8 a1 f3 ff ff       	call   c00186bc <schedule()>
c001931b:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0019320:	48                   	dec    eax
c0019321:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0019326:	75 de                	jne    c0019306 <Vm::finish8086()+0x4>
c0019328:	fb                   	sti    
c0019329:	eb db                	jmp    c0019306 <Vm::finish8086()+0x4>
c001932b:	83 ec 0c             	sub    esp,0xc
c001932e:	8b 1d e0 94 02 c0    	mov    ebx,DWORD PTR ds:0xc00294e0
c0019334:	ff 35 e8 94 02 c0    	push   DWORD PTR ds:0xc00294e8
c001933a:	c6 05 e4 94 02 c0 00 	mov    BYTE PTR ds:0xc00294e4,0x0
c0019341:	e8 32 f8 ff ff       	call   c0018b78 <unblockTask(ThreadControlBlock*)>
c0019346:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c001934b:	83 c4 10             	add    esp,0x10
c001934e:	8d 50 ff             	lea    edx,[eax-0x1]
c0019351:	89 15 88 94 02 c0    	mov    DWORD PTR ds:0xc0029488,edx
c0019357:	85 d2                	test   edx,edx
c0019359:	75 01                	jne    c001935c <Vm::finish8086()+0x5a>
c001935b:	fb                   	sti    
c001935c:	89 d8                	mov    eax,ebx
c001935e:	83 c4 08             	add    esp,0x8
c0019361:	5b                   	pop    ebx
c0019362:	c3                   	ret    

c0019363 <Vm::getOutput8086(unsigned char*)>:
c0019363:	57                   	push   edi
c0019364:	8b 0d ec 94 02 c0    	mov    ecx,DWORD PTR ds:0xc00294ec
c001936a:	56                   	push   esi
c001936b:	be 00 95 02 c0       	mov    esi,0xc0029500
c0019370:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019374:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019376:	a1 ec 94 02 c0       	mov    eax,ds:0xc00294ec
c001937b:	5e                   	pop    esi
c001937c:	c7 05 ec 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294ec,0x0
c0019386:	5f                   	pop    edi
c0019387:	c3                   	ret    

c0019388 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019388:	55                   	push   ebp
c0019389:	57                   	push   edi
c001938a:	56                   	push   esi
c001938b:	53                   	push   ebx
c001938c:	83 ec 0c             	sub    esp,0xc
c001938f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019393:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019397:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001939b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001939f:	fa                   	cli    
c00193a0:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c00193a6:	80 3d e5 94 02 c0 00 	cmp    BYTE PTR ds:0xc00294e5,0x0
c00193ad:	75 15                	jne    c00193c4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00193af:	e8 08 f3 ff ff       	call   c00186bc <schedule()>
c00193b4:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c00193b9:	48                   	dec    eax
c00193ba:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c00193bf:	75 de                	jne    c001939f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00193c1:	fb                   	sti    
c00193c2:	eb db                	jmp    c001939f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00193c4:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c00193c9:	c7 05 ec 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294ec,0x0
c00193d3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00193d7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00193db:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00193df:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00193e3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00193e7:	0f b7 ff             	movzx  edi,di
c00193ea:	0f b7 f6             	movzx  esi,si
c00193ed:	50                   	push   eax
c00193ee:	6a 20                	push   0x20
c00193f0:	6a 00                	push   0x0
c00193f2:	68 00 95 02 c0       	push   0xc0029500
c00193f7:	e8 88 72 fe ff       	call   c0000684 <memset>
c00193fc:	5a                   	pop    edx
c00193fd:	59                   	pop    ecx
c00193fe:	57                   	push   edi
c00193ff:	56                   	push   esi
c0019400:	e8 2d fe ff ff       	call   c0019232 <Vm::realToLinear(unsigned short, unsigned short)>
c0019405:	83 c4 10             	add    esp,0x10
c0019408:	89 c7                	mov    edi,eax
c001940a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001940e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019412:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019414:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0019419:	c6 05 e5 94 02 c0 00 	mov    BYTE PTR ds:0xc00294e5,0x0
c0019420:	48                   	dec    eax
c0019421:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0019426:	75 01                	jne    c0019429 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0019428:	fb                   	sti    
c0019429:	83 ec 0c             	sub    esp,0xc
c001942c:	ff 35 e8 94 02 c0    	push   DWORD PTR ds:0xc00294e8
c0019432:	e8 41 f7 ff ff       	call   c0018b78 <unblockTask(ThreadControlBlock*)>
c0019437:	83 c4 1c             	add    esp,0x1c
c001943a:	b0 01                	mov    al,0x1
c001943c:	5b                   	pop    ebx
c001943d:	5e                   	pop    esi
c001943e:	5f                   	pop    edi
c001943f:	5d                   	pop    ebp
c0019440:	c3                   	ret    

c0019441 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019441:	55                   	push   ebp
c0019442:	57                   	push   edi
c0019443:	56                   	push   esi
c0019444:	53                   	push   ebx
c0019445:	83 ec 2c             	sub    esp,0x2c
c0019448:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001944c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019450:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019454:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019458:	fa                   	cli    
c0019459:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c001945f:	0f b6 35 e5 94 02 c0 	movzx  esi,BYTE PTR ds:0xc00294e5
c0019466:	89 f0                	mov    eax,esi
c0019468:	84 c0                	test   al,al
c001946a:	75 1d                	jne    c0019489 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001946c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019470:	e8 47 f2 ff ff       	call   c00186bc <schedule()>
c0019475:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c001947a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001947e:	48                   	dec    eax
c001947f:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0019484:	75 d2                	jne    c0019458 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019486:	fb                   	sti    
c0019487:	eb cf                	jmp    c0019458 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019489:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c001948e:	c7 05 ec 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294ec,0x0
c0019498:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001949c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00194a0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00194a4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00194a8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00194ac:	50                   	push   eax
c00194ad:	6a 20                	push   0x20
c00194af:	6a 00                	push   0x0
c00194b1:	68 00 95 02 c0       	push   0xc0029500
c00194b6:	e8 c9 71 fe ff       	call   c0000684 <memset>
c00194bb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00194c2:	e8 48 05 ff ff       	call   c0009a0f <malloc>
c00194c7:	83 c4 0c             	add    esp,0xc
c00194ca:	89 c3                	mov    ebx,eax
c00194cc:	ff 35 b0 94 02 c0    	push   DWORD PTR ds:0xc00294b0
c00194d2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194d6:	50                   	push   eax
c00194d7:	e8 8a 3d ff ff       	call   c000d266 <File::File(char const*, Process*)>
c00194dc:	83 c4 10             	add    esp,0x10
c00194df:	85 db                	test   ebx,ebx
c00194e1:	75 0a                	jne    c00194ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00194e3:	83 ec 0c             	sub    esp,0xc
c00194e6:	68 08 62 02 c0       	push   0xc0026208
c00194eb:	eb 3e                	jmp    c001952b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00194ed:	50                   	push   eax
c00194ee:	8d 44 24 17          	lea    eax,[esp+0x17]
c00194f2:	50                   	push   eax
c00194f3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00194f7:	50                   	push   eax
c00194f8:	53                   	push   ebx
c00194f9:	e8 ee 40 ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c00194fe:	83 c4 10             	add    esp,0x10
c0019501:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019506:	74 0a                	je     c0019512 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019508:	83 ec 0c             	sub    esp,0xc
c001950b:	68 1c 62 02 c0       	push   0xc002621c
c0019510:	eb 19                	jmp    c001952b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019512:	51                   	push   ecx
c0019513:	51                   	push   ecx
c0019514:	6a 01                	push   0x1
c0019516:	53                   	push   ebx
c0019517:	e8 24 3e ff ff       	call   c000d340 <File::open(FileOpenMode)>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	85 c0                	test   eax,eax
c0019521:	74 24                	je     c0019547 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019523:	83 ec 0c             	sub    esp,0xc
c0019526:	68 35 62 02 c0       	push   0xc0026235
c001952b:	e8 d7 b4 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0019530:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0019535:	83 c4 10             	add    esp,0x10
c0019538:	48                   	dec    eax
c0019539:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c001953e:	85 c0                	test   eax,eax
c0019540:	75 01                	jne    c0019543 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019542:	fb                   	sti    
c0019543:	31 f6                	xor    esi,esi
c0019545:	eb 58                	jmp    c001959f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019547:	0f b7 ed             	movzx  ebp,bp
c001954a:	50                   	push   eax
c001954b:	0f b7 ff             	movzx  edi,di
c001954e:	50                   	push   eax
c001954f:	55                   	push   ebp
c0019550:	57                   	push   edi
c0019551:	e8 dc fc ff ff       	call   c0019232 <Vm::realToLinear(unsigned short, unsigned short)>
c0019556:	5a                   	pop    edx
c0019557:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019559:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001955d:	51                   	push   ecx
c001955e:	50                   	push   eax
c001955f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019563:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019567:	53                   	push   ebx
c0019568:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001956b:	83 c4 14             	add    esp,0x14
c001956e:	53                   	push   ebx
c001956f:	e8 2a 3e ff ff       	call   c000d39e <File::close()>
c0019574:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0019579:	83 c4 10             	add    esp,0x10
c001957c:	48                   	dec    eax
c001957d:	c6 05 e5 94 02 c0 00 	mov    BYTE PTR ds:0xc00294e5,0x0
c0019584:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0019589:	85 c0                	test   eax,eax
c001958b:	75 01                	jne    c001958e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001958d:	fb                   	sti    
c001958e:	83 ec 0c             	sub    esp,0xc
c0019591:	ff 35 e8 94 02 c0    	push   DWORD PTR ds:0xc00294e8
c0019597:	e8 dc f5 ff ff       	call   c0018b78 <unblockTask(ThreadControlBlock*)>
c001959c:	83 c4 10             	add    esp,0x10
c001959f:	83 c4 2c             	add    esp,0x2c
c00195a2:	89 f0                	mov    eax,esi
c00195a4:	5b                   	pop    ebx
c00195a5:	5e                   	pop    esi
c00195a6:	5f                   	pop    edi
c00195a7:	5d                   	pop    ebp
c00195a8:	c3                   	ret    

c00195a9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00195a9:	57                   	push   edi
c00195aa:	56                   	push   esi
c00195ab:	53                   	push   ebx
c00195ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00195b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195b8:	83 e8 06             	sub    eax,0x6
c00195bb:	0f b7 c0             	movzx  eax,ax
c00195be:	50                   	push   eax
c00195bf:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00195c4:	50                   	push   eax
c00195c5:	e8 68 fc ff ff       	call   c0019232 <Vm::realToLinear(unsigned short, unsigned short)>
c00195ca:	5a                   	pop    edx
c00195cb:	5e                   	pop    esi
c00195cc:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00195cf:	8d 56 fa             	lea    edx,[esi-0x6]
c00195d2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00195d8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00195db:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00195de:	83 c2 02             	add    edx,0x2
c00195e1:	66 89 10             	mov    WORD PTR [eax],dx
c00195e4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00195e7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00195eb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00195ee:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00195f2:	89 d6                	mov    esi,edx
c00195f4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00195fa:	66 81 e6 ff fd       	and    si,0xfdff
c00195ff:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019603:	74 07                	je     c001960c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019605:	89 d6                	mov    esi,edx
c0019607:	66 81 ce 00 02       	or     si,0x200
c001960c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019610:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019615:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019619:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019621:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019624:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001962c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001962f:	5b                   	pop    ebx
c0019630:	5e                   	pop    esi
c0019631:	5f                   	pop    edi
c0019632:	c3                   	ret    

c0019633 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019633:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019638:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001963d:	c1 e0 04             	shl    eax,0x4
c0019640:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019643:	c3                   	ret    

c0019644 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019644:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019649:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001964e:	c1 e0 04             	shl    eax,0x4
c0019651:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019655:	c3                   	ret    

c0019656 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019656:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001965b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019660:	c1 e0 04             	shl    eax,0x4
c0019663:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019666:	c3                   	ret    

c0019667 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019667:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001966c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019671:	c1 e0 04             	shl    eax,0x4
c0019674:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019678:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001967b:	c3                   	ret    

c001967c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001967c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019681:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019686:	c1 e0 04             	shl    eax,0x4
c0019689:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001968d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019691:	c3                   	ret    

c0019692 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019692:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019697:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001969c:	c1 e0 04             	shl    eax,0x4
c001969f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196a3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00196a6:	c3                   	ret    

c00196a7 <Vm::faultHandler(regs*)>:
c00196a7:	55                   	push   ebp
c00196a8:	57                   	push   edi
c00196a9:	56                   	push   esi
c00196aa:	53                   	push   ebx
c00196ab:	83 ec 1c             	sub    esp,0x1c
c00196ae:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00196b2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00196b5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00196b9:	0f b7 f8             	movzx  edi,ax
c00196bc:	52                   	push   edx
c00196bd:	0f b7 c0             	movzx  eax,ax
c00196c0:	50                   	push   eax
c00196c1:	e8 6c fb ff ff       	call   c0019232 <Vm::realToLinear(unsigned short, unsigned short)>
c00196c6:	5a                   	pop    edx
c00196c7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00196ca:	59                   	pop    ecx
c00196cb:	89 c1                	mov    ecx,eax
c00196cd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00196d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196d4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00196d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196dd:	0f b7 c5             	movzx  eax,bp
c00196e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196e4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00196e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00196ec:	e8 41 fb ff ff       	call   c0019232 <Vm::realToLinear(unsigned short, unsigned short)>
c00196f1:	5e                   	pop    esi
c00196f2:	be 06 00 00 00       	mov    esi,0x6
c00196f7:	5a                   	pop    edx
c00196f8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00196fd:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019702:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019705:	80 fa 9d             	cmp    dl,0x9d
c0019708:	0f 84 2c 02 00 00    	je     c001993a <Vm::faultHandler(regs*)+0x293>
c001970e:	0f 87 91 00 00 00    	ja     c00197a5 <Vm::faultHandler(regs*)+0xfe>
c0019714:	80 fa 66             	cmp    dl,0x66
c0019717:	0f 84 98 01 00 00    	je     c00198b5 <Vm::faultHandler(regs*)+0x20e>
c001971d:	77 47                	ja     c0019766 <Vm::faultHandler(regs*)+0xbf>
c001971f:	80 fa 36             	cmp    dl,0x36
c0019722:	0f 84 80 01 00 00    	je     c00198a8 <Vm::faultHandler(regs*)+0x201>
c0019728:	77 1a                	ja     c0019744 <Vm::faultHandler(regs*)+0x9d>
c001972a:	80 fa 26             	cmp    dl,0x26
c001972d:	0f 84 4e 01 00 00    	je     c0019881 <Vm::faultHandler(regs*)+0x1da>
c0019733:	80 fa 2e             	cmp    dl,0x2e
c0019736:	0f 85 e2 05 00 00    	jne    c0019d1e <Vm::faultHandler(regs*)+0x677>
c001973c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001973f:	31 f6                	xor    esi,esi
c0019741:	41                   	inc    ecx
c0019742:	eb be                	jmp    c0019702 <Vm::faultHandler(regs*)+0x5b>
c0019744:	80 fa 64             	cmp    dl,0x64
c0019747:	0f 84 41 01 00 00    	je     c001988e <Vm::faultHandler(regs*)+0x1e7>
c001974d:	0f 87 48 01 00 00    	ja     c001989b <Vm::faultHandler(regs*)+0x1f4>
c0019753:	80 fa 3e             	cmp    dl,0x3e
c0019756:	0f 85 c2 05 00 00    	jne    c0019d1e <Vm::faultHandler(regs*)+0x677>
c001975c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001975f:	be 01 00 00 00       	mov    esi,0x1
c0019764:	eb db                	jmp    c0019741 <Vm::faultHandler(regs*)+0x9a>
c0019766:	80 fa 6d             	cmp    dl,0x6d
c0019769:	0f 84 ec 02 00 00    	je     c0019a5b <Vm::faultHandler(regs*)+0x3b4>
c001976f:	77 17                	ja     c0019788 <Vm::faultHandler(regs*)+0xe1>
c0019771:	80 fa 67             	cmp    dl,0x67
c0019774:	0f 84 48 01 00 00    	je     c00198c2 <Vm::faultHandler(regs*)+0x21b>
c001977a:	80 fa 6c             	cmp    dl,0x6c
c001977d:	0f 84 69 02 00 00    	je     c00199ec <Vm::faultHandler(regs*)+0x345>
c0019783:	e9 96 05 00 00       	jmp    c0019d1e <Vm::faultHandler(regs*)+0x677>
c0019788:	80 fa 6f             	cmp    dl,0x6f
c001978b:	0f 84 f4 03 00 00    	je     c0019b85 <Vm::faultHandler(regs*)+0x4de>
c0019791:	0f 82 59 03 00 00    	jb     c0019af0 <Vm::faultHandler(regs*)+0x449>
c0019797:	80 fa 9c             	cmp    dl,0x9c
c001979a:	0f 84 2f 01 00 00    	je     c00198cf <Vm::faultHandler(regs*)+0x228>
c00197a0:	e9 79 05 00 00       	jmp    c0019d1e <Vm::faultHandler(regs*)+0x677>
c00197a5:	80 fa ec             	cmp    dl,0xec
c00197a8:	0f 84 14 05 00 00    	je     c0019cc2 <Vm::faultHandler(regs*)+0x61b>
c00197ae:	77 7b                	ja     c001982b <Vm::faultHandler(regs*)+0x184>
c00197b0:	80 fa e4             	cmp    dl,0xe4
c00197b3:	0f 84 93 04 00 00    	je     c0019c4c <Vm::faultHandler(regs*)+0x5a5>
c00197b9:	77 53                	ja     c001980e <Vm::faultHandler(regs*)+0x167>
c00197bb:	80 fa cd             	cmp    dl,0xcd
c00197be:	0f 84 d9 01 00 00    	je     c001999d <Vm::faultHandler(regs*)+0x2f6>
c00197c4:	80 fa cf             	cmp    dl,0xcf
c00197c7:	0f 85 51 05 00 00    	jne    c0019d1e <Vm::faultHandler(regs*)+0x677>
c00197cd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00197d0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00197d3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00197d7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00197da:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00197de:	81 ca 00 02 02 00    	or     edx,0x20200
c00197e4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00197e7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00197eb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00197f1:	66 c1 e8 09          	shr    ax,0x9
c00197f5:	83 e0 01             	and    eax,0x1
c00197f8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00197fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00197fe:	83 c0 06             	add    eax,0x6
c0019801:	25 ff ff 00 00       	and    eax,0xffff
c0019806:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019809:	e9 0c 05 00 00       	jmp    c0019d1a <Vm::faultHandler(regs*)+0x673>
c001980e:	80 fa e6             	cmp    dl,0xe6
c0019811:	0f 84 7f 04 00 00    	je     c0019c96 <Vm::faultHandler(regs*)+0x5ef>
c0019817:	0f 82 4b 04 00 00    	jb     c0019c68 <Vm::faultHandler(regs*)+0x5c1>
c001981d:	80 fa e7             	cmp    dl,0xe7
c0019820:	0f 84 87 04 00 00    	je     c0019cad <Vm::faultHandler(regs*)+0x606>
c0019826:	e9 f3 04 00 00       	jmp    c0019d1e <Vm::faultHandler(regs*)+0x677>
c001982b:	80 fa ef             	cmp    dl,0xef
c001982e:	0f 84 d1 04 00 00    	je     c0019d05 <Vm::faultHandler(regs*)+0x65e>
c0019834:	77 28                	ja     c001985e <Vm::faultHandler(regs*)+0x1b7>
c0019836:	80 fa ed             	cmp    dl,0xed
c0019839:	0f 84 9f 04 00 00    	je     c0019cde <Vm::faultHandler(regs*)+0x637>
c001983f:	80 fa ee             	cmp    dl,0xee
c0019842:	0f 85 d6 04 00 00    	jne    c0019d1e <Vm::faultHandler(regs*)+0x677>
c0019848:	50                   	push   eax
c0019849:	50                   	push   eax
c001984a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001984e:	50                   	push   eax
c001984f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019853:	50                   	push   eax
c0019854:	e8 a3 f9 ff ff       	call   c00191fc <Vm::outbv(unsigned short, unsigned char)>
c0019859:	e9 9f 04 00 00       	jmp    c0019cfd <Vm::faultHandler(regs*)+0x656>
c001985e:	80 fa fa             	cmp    dl,0xfa
c0019861:	0f 84 69 01 00 00    	je     c00199d0 <Vm::faultHandler(regs*)+0x329>
c0019867:	80 fa fb             	cmp    dl,0xfb
c001986a:	0f 84 6e 01 00 00    	je     c00199de <Vm::faultHandler(regs*)+0x337>
c0019870:	80 fa f3             	cmp    dl,0xf3
c0019873:	0f 85 a5 04 00 00    	jne    c0019d1e <Vm::faultHandler(regs*)+0x677>
c0019879:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001987c:	e9 c0 fe ff ff       	jmp    c0019741 <Vm::faultHandler(regs*)+0x9a>
c0019881:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019884:	be 02 00 00 00       	mov    esi,0x2
c0019889:	e9 b3 fe ff ff       	jmp    c0019741 <Vm::faultHandler(regs*)+0x9a>
c001988e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019891:	be 03 00 00 00       	mov    esi,0x3
c0019896:	e9 a6 fe ff ff       	jmp    c0019741 <Vm::faultHandler(regs*)+0x9a>
c001989b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001989e:	be 04 00 00 00       	mov    esi,0x4
c00198a3:	e9 99 fe ff ff       	jmp    c0019741 <Vm::faultHandler(regs*)+0x9a>
c00198a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198ab:	be 05 00 00 00       	mov    esi,0x5
c00198b0:	e9 8c fe ff ff       	jmp    c0019741 <Vm::faultHandler(regs*)+0x9a>
c00198b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198b8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00198bd:	e9 7f fe ff ff       	jmp    c0019741 <Vm::faultHandler(regs*)+0x9a>
c00198c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198c5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00198ca:	e9 72 fe ff ff       	jmp    c0019741 <Vm::faultHandler(regs*)+0x9a>
c00198cf:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00198d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00198d6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198db:	74 30                	je     c001990d <Vm::faultHandler(regs*)+0x266>
c00198dd:	83 e9 04             	sub    ecx,0x4
c00198e0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00198e6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00198ec:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00198ef:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00198f2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00198f8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00198fc:	0f 84 15 04 00 00    	je     c0019d17 <Vm::faultHandler(regs*)+0x670>
c0019902:	80 ce 02             	or     dh,0x2
c0019905:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019908:	e9 0a 04 00 00       	jmp    c0019d17 <Vm::faultHandler(regs*)+0x670>
c001990d:	83 e9 02             	sub    ecx,0x2
c0019910:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019916:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019919:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001991d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019923:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019927:	74 05                	je     c001992e <Vm::faultHandler(regs*)+0x287>
c0019929:	80 ce 02             	or     dh,0x2
c001992c:	eb 03                	jmp    c0019931 <Vm::faultHandler(regs*)+0x28a>
c001992e:	80 e6 fd             	and    dh,0xfd
c0019931:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019935:	e9 dd 03 00 00       	jmp    c0019d17 <Vm::faultHandler(regs*)+0x670>
c001993a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001993f:	74 2a                	je     c001996b <Vm::faultHandler(regs*)+0x2c4>
c0019941:	8b 10                	mov    edx,DWORD PTR [eax]
c0019943:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019949:	81 ca 00 02 02 00    	or     edx,0x20200
c001994f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019952:	8b 00                	mov    eax,DWORD PTR [eax]
c0019954:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001995a:	c1 e8 09             	shr    eax,0x9
c001995d:	83 e0 01             	and    eax,0x1
c0019960:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019963:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019966:	83 c0 04             	add    eax,0x4
c0019969:	eb 25                	jmp    c0019990 <Vm::faultHandler(regs*)+0x2e9>
c001996b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001996e:	81 ca 00 02 02 00    	or     edx,0x20200
c0019974:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019977:	66 8b 00             	mov    ax,WORD PTR [eax]
c001997a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019980:	66 c1 e8 09          	shr    ax,0x9
c0019984:	83 e0 01             	and    eax,0x1
c0019987:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001998a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001998d:	83 c0 02             	add    eax,0x2
c0019990:	25 ff ff 00 00       	and    eax,0xffff
c0019995:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019998:	e9 7a 03 00 00       	jmp    c0019d17 <Vm::faultHandler(regs*)+0x670>
c001999d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00199a1:	3c ee                	cmp    al,0xee
c00199a3:	75 10                	jne    c00199b5 <Vm::faultHandler(regs*)+0x30e>
c00199a5:	83 ec 0c             	sub    esp,0xc
c00199a8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00199ab:	e8 e9 f8 ff ff       	call   c0019299 <Vm::mainloop3(unsigned long)>
c00199b0:	e9 4b 03 00 00       	jmp    c0019d00 <Vm::faultHandler(regs*)+0x659>
c00199b5:	83 ec 0c             	sub    esp,0xc
c00199b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00199bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199c0:	51                   	push   ecx
c00199c1:	50                   	push   eax
c00199c2:	53                   	push   ebx
c00199c3:	e8 e1 fb ff ff       	call   c00195a9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00199c8:	83 c4 20             	add    esp,0x20
c00199cb:	e9 4a 03 00 00       	jmp    c0019d1a <Vm::faultHandler(regs*)+0x673>
c00199d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199d5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00199d9:	e9 39 03 00 00       	jmp    c0019d17 <Vm::faultHandler(regs*)+0x670>
c00199de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199e3:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00199e7:	e9 2b 03 00 00       	jmp    c0019d17 <Vm::faultHandler(regs*)+0x670>
c00199ec:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00199ef:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00199f4:	74 2b                	je     c0019a21 <Vm::faultHandler(regs*)+0x37a>
c00199f6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00199fd:	76 22                	jbe    c0019a21 <Vm::faultHandler(regs*)+0x37a>
c00199ff:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019a03:	50                   	push   eax
c0019a04:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019a08:	50                   	push   eax
c0019a09:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019a0d:	50                   	push   eax
c0019a0e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019a12:	50                   	push   eax
c0019a13:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019a17:	50                   	push   eax
c0019a18:	6a 6c                	push   0x6c
c0019a1a:	6a 6c                	push   0x6c
c0019a1c:	e9 b9 01 00 00       	jmp    c0019bda <Vm::faultHandler(regs*)+0x533>
c0019a21:	83 ec 0c             	sub    esp,0xc
c0019a24:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a28:	0f b7 f6             	movzx  esi,si
c0019a2b:	50                   	push   eax
c0019a2c:	e8 b8 f7 ff ff       	call   c00191e9 <Vm::inbv(unsigned short)>
c0019a31:	83 c4 0c             	add    esp,0xc
c0019a34:	0f b6 c0             	movzx  eax,al
c0019a37:	50                   	push   eax
c0019a38:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019a3c:	50                   	push   eax
c0019a3d:	56                   	push   esi
c0019a3e:	e8 24 fc ff ff       	call   c0019667 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019a43:	83 c4 10             	add    esp,0x10
c0019a46:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a49:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a4d:	74 03                	je     c0019a52 <Vm::faultHandler(regs*)+0x3ab>
c0019a4f:	48                   	dec    eax
c0019a50:	eb 01                	jmp    c0019a53 <Vm::faultHandler(regs*)+0x3ac>
c0019a52:	40                   	inc    eax
c0019a53:	0f b7 c0             	movzx  eax,ax
c0019a56:	e9 8d 00 00 00       	jmp    c0019ae8 <Vm::faultHandler(regs*)+0x441>
c0019a5b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019a5e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a61:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a66:	74 29                	je     c0019a91 <Vm::faultHandler(regs*)+0x3ea>
c0019a68:	3d ff ff 00 00       	cmp    eax,0xffff
c0019a6d:	76 22                	jbe    c0019a91 <Vm::faultHandler(regs*)+0x3ea>
c0019a6f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019a73:	50                   	push   eax
c0019a74:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019a78:	50                   	push   eax
c0019a79:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019a7d:	50                   	push   eax
c0019a7e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019a82:	50                   	push   eax
c0019a83:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019a87:	50                   	push   eax
c0019a88:	6a 6d                	push   0x6d
c0019a8a:	6a 6d                	push   0x6d
c0019a8c:	e9 49 01 00 00       	jmp    c0019bda <Vm::faultHandler(regs*)+0x533>
c0019a91:	0f b7 c8             	movzx  ecx,ax
c0019a94:	0f b7 f6             	movzx  esi,si
c0019a97:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019a9a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a9f:	74 20                	je     c0019ac1 <Vm::faultHandler(regs*)+0x41a>
c0019aa1:	ed                   	in     eax,dx
c0019aa2:	55                   	push   ebp
c0019aa3:	50                   	push   eax
c0019aa4:	51                   	push   ecx
c0019aa5:	56                   	push   esi
c0019aa6:	e8 e7 fb ff ff       	call   c0019692 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019aab:	83 c4 10             	add    esp,0x10
c0019aae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ab1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019ab5:	74 05                	je     c0019abc <Vm::faultHandler(regs*)+0x415>
c0019ab7:	83 e8 04             	sub    eax,0x4
c0019aba:	eb 27                	jmp    c0019ae3 <Vm::faultHandler(regs*)+0x43c>
c0019abc:	83 c0 04             	add    eax,0x4
c0019abf:	eb 22                	jmp    c0019ae3 <Vm::faultHandler(regs*)+0x43c>
c0019ac1:	66 ed                	in     ax,dx
c0019ac3:	0f b7 c0             	movzx  eax,ax
c0019ac6:	57                   	push   edi
c0019ac7:	50                   	push   eax
c0019ac8:	51                   	push   ecx
c0019ac9:	56                   	push   esi
c0019aca:	e8 ad fb ff ff       	call   c001967c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019acf:	83 c4 10             	add    esp,0x10
c0019ad2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ad5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019ad9:	74 05                	je     c0019ae0 <Vm::faultHandler(regs*)+0x439>
c0019adb:	83 e8 02             	sub    eax,0x2
c0019ade:	eb 03                	jmp    c0019ae3 <Vm::faultHandler(regs*)+0x43c>
c0019ae0:	83 c0 02             	add    eax,0x2
c0019ae3:	25 ff ff 00 00       	and    eax,0xffff
c0019ae8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019aeb:	e9 27 02 00 00       	jmp    c0019d17 <Vm::faultHandler(regs*)+0x670>
c0019af0:	8d 46 ff             	lea    eax,[esi-0x1]
c0019af3:	3c 05                	cmp    al,0x5
c0019af5:	77 24                	ja     c0019b1b <Vm::faultHandler(regs*)+0x474>
c0019af7:	0f b6 c0             	movzx  eax,al
c0019afa:	ff 24 85 a8 62 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9d58]
c0019b01:	0f b7 fd             	movzx  edi,bp
c0019b04:	eb 15                	jmp    c0019b1b <Vm::faultHandler(regs*)+0x474>
c0019b06:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019b0a:	eb 0f                	jmp    c0019b1b <Vm::faultHandler(regs*)+0x474>
c0019b0c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019b10:	eb 09                	jmp    c0019b1b <Vm::faultHandler(regs*)+0x474>
c0019b12:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019b16:	eb 03                	jmp    c0019b1b <Vm::faultHandler(regs*)+0x474>
c0019b18:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0019b1b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019b1e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b23:	74 29                	je     c0019b4e <Vm::faultHandler(regs*)+0x4a7>
c0019b25:	3d ff ff 00 00       	cmp    eax,0xffff
c0019b2a:	76 22                	jbe    c0019b4e <Vm::faultHandler(regs*)+0x4a7>
c0019b2c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019b30:	50                   	push   eax
c0019b31:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019b35:	50                   	push   eax
c0019b36:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019b3a:	50                   	push   eax
c0019b3b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019b3f:	50                   	push   eax
c0019b40:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019b44:	50                   	push   eax
c0019b45:	6a 6e                	push   0x6e
c0019b47:	6a 6e                	push   0x6e
c0019b49:	e9 8c 00 00 00       	jmp    c0019bda <Vm::faultHandler(regs*)+0x533>
c0019b4e:	0f b7 c0             	movzx  eax,ax
c0019b51:	52                   	push   edx
c0019b52:	52                   	push   edx
c0019b53:	50                   	push   eax
c0019b54:	57                   	push   edi
c0019b55:	e8 d9 fa ff ff       	call   c0019633 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019b5a:	59                   	pop    ecx
c0019b5b:	0f b6 c0             	movzx  eax,al
c0019b5e:	5e                   	pop    esi
c0019b5f:	50                   	push   eax
c0019b60:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019b64:	50                   	push   eax
c0019b65:	e8 92 f6 ff ff       	call   c00191fc <Vm::outbv(unsigned short, unsigned char)>
c0019b6a:	83 c4 10             	add    esp,0x10
c0019b6d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019b70:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b74:	74 03                	je     c0019b79 <Vm::faultHandler(regs*)+0x4d2>
c0019b76:	48                   	dec    eax
c0019b77:	eb 01                	jmp    c0019b7a <Vm::faultHandler(regs*)+0x4d3>
c0019b79:	40                   	inc    eax
c0019b7a:	0f b7 c0             	movzx  eax,ax
c0019b7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019b80:	e9 92 01 00 00       	jmp    c0019d17 <Vm::faultHandler(regs*)+0x670>
c0019b85:	8d 46 ff             	lea    eax,[esi-0x1]
c0019b88:	3c 05                	cmp    al,0x5
c0019b8a:	77 1f                	ja     c0019bab <Vm::faultHandler(regs*)+0x504>
c0019b8c:	0f b6 c0             	movzx  eax,al
c0019b8f:	ff 24 85 c0 62 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9d40]
c0019b96:	89 ef                	mov    edi,ebp
c0019b98:	eb 11                	jmp    c0019bab <Vm::faultHandler(regs*)+0x504>
c0019b9a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019b9d:	eb 0c                	jmp    c0019bab <Vm::faultHandler(regs*)+0x504>
c0019b9f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019ba2:	eb 07                	jmp    c0019bab <Vm::faultHandler(regs*)+0x504>
c0019ba4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019ba7:	eb 02                	jmp    c0019bab <Vm::faultHandler(regs*)+0x504>
c0019ba9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019bab:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019bae:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019bb3:	74 37                	je     c0019bec <Vm::faultHandler(regs*)+0x545>
c0019bb5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019bbb:	76 2f                	jbe    c0019bec <Vm::faultHandler(regs*)+0x545>
c0019bbd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019bc1:	50                   	push   eax
c0019bc2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019bc6:	50                   	push   eax
c0019bc7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019bcb:	50                   	push   eax
c0019bcc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019bd0:	50                   	push   eax
c0019bd1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019bd5:	50                   	push   eax
c0019bd6:	6a 6f                	push   0x6f
c0019bd8:	6a 6f                	push   0x6f
c0019bda:	68 4e 62 02 c0       	push   0xc002624e
c0019bdf:	e8 17 31 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0019be4:	83 c4 20             	add    esp,0x20
c0019be7:	e9 86 01 00 00       	jmp    c0019d72 <Vm::faultHandler(regs*)+0x6cb>
c0019bec:	0f b7 d7             	movzx  edx,di
c0019bef:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019bf2:	0f b7 c6             	movzx  eax,si
c0019bf5:	81 e1 00 04 00 00    	and    ecx,0x400
c0019bfb:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019bfe:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c03:	74 1d                	je     c0019c22 <Vm::faultHandler(regs*)+0x57b>
c0019c05:	55                   	push   ebp
c0019c06:	55                   	push   ebp
c0019c07:	50                   	push   eax
c0019c08:	52                   	push   edx
c0019c09:	e8 48 fa ff ff       	call   c0019656 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019c0e:	83 c4 10             	add    esp,0x10
c0019c11:	89 fa                	mov    edx,edi
c0019c13:	ef                   	out    dx,eax
c0019c14:	85 c9                	test   ecx,ecx
c0019c16:	74 05                	je     c0019c1d <Vm::faultHandler(regs*)+0x576>
c0019c18:	83 ee 04             	sub    esi,0x4
c0019c1b:	eb 21                	jmp    c0019c3e <Vm::faultHandler(regs*)+0x597>
c0019c1d:	83 c6 04             	add    esi,0x4
c0019c20:	eb 1c                	jmp    c0019c3e <Vm::faultHandler(regs*)+0x597>
c0019c22:	55                   	push   ebp
c0019c23:	55                   	push   ebp
c0019c24:	50                   	push   eax
c0019c25:	52                   	push   edx
c0019c26:	e8 19 fa ff ff       	call   c0019644 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019c2b:	83 c4 10             	add    esp,0x10
c0019c2e:	89 fa                	mov    edx,edi
c0019c30:	66 ef                	out    dx,ax
c0019c32:	85 c9                	test   ecx,ecx
c0019c34:	74 05                	je     c0019c3b <Vm::faultHandler(regs*)+0x594>
c0019c36:	83 ee 02             	sub    esi,0x2
c0019c39:	eb 03                	jmp    c0019c3e <Vm::faultHandler(regs*)+0x597>
c0019c3b:	83 c6 02             	add    esi,0x2
c0019c3e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019c44:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019c47:	e9 cb 00 00 00       	jmp    c0019d17 <Vm::faultHandler(regs*)+0x670>
c0019c4c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019c53:	83 ec 0c             	sub    esp,0xc
c0019c56:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019c5a:	50                   	push   eax
c0019c5b:	e8 89 f5 ff ff       	call   c00191e9 <Vm::inbv(unsigned short)>
c0019c60:	0f b6 c0             	movzx  eax,al
c0019c63:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019c66:	eb 3f                	jmp    c0019ca7 <Vm::faultHandler(regs*)+0x600>
c0019c68:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c6d:	74 07                	je     c0019c76 <Vm::faultHandler(regs*)+0x5cf>
c0019c6f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c73:	ed                   	in     eax,dx
c0019c74:	eb 14                	jmp    c0019c8a <Vm::faultHandler(regs*)+0x5e3>
c0019c76:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019c79:	66 31 f6             	xor    si,si
c0019c7c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019c7f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c83:	66 ed                	in     ax,dx
c0019c85:	0f b7 c0             	movzx  eax,ax
c0019c88:	09 f0                	or     eax,esi
c0019c8a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019c8d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019c91:	e9 84 00 00 00       	jmp    c0019d1a <Vm::faultHandler(regs*)+0x673>
c0019c96:	52                   	push   edx
c0019c97:	52                   	push   edx
c0019c98:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019c9c:	50                   	push   eax
c0019c9d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019ca1:	50                   	push   eax
c0019ca2:	e8 55 f5 ff ff       	call   c00191fc <Vm::outbv(unsigned short, unsigned char)>
c0019ca7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019cab:	eb 53                	jmp    c0019d00 <Vm::faultHandler(regs*)+0x659>
c0019cad:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019cb0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019cb4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019cb9:	74 03                	je     c0019cbe <Vm::faultHandler(regs*)+0x617>
c0019cbb:	ef                   	out    dx,eax
c0019cbc:	eb cf                	jmp    c0019c8d <Vm::faultHandler(regs*)+0x5e6>
c0019cbe:	66 ef                	out    dx,ax
c0019cc0:	eb cb                	jmp    c0019c8d <Vm::faultHandler(regs*)+0x5e6>
c0019cc2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019cc9:	83 ec 0c             	sub    esp,0xc
c0019ccc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019cd0:	50                   	push   eax
c0019cd1:	e8 13 f5 ff ff       	call   c00191e9 <Vm::inbv(unsigned short)>
c0019cd6:	0f b6 c0             	movzx  eax,al
c0019cd9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019cdc:	eb 1f                	jmp    c0019cfd <Vm::faultHandler(regs*)+0x656>
c0019cde:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019ce1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019ce6:	74 03                	je     c0019ceb <Vm::faultHandler(regs*)+0x644>
c0019ce8:	ed                   	in     eax,dx
c0019ce9:	eb 0d                	jmp    c0019cf8 <Vm::faultHandler(regs*)+0x651>
c0019ceb:	66 ed                	in     ax,dx
c0019ced:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019cf0:	0f b7 c0             	movzx  eax,ax
c0019cf3:	66 31 d2             	xor    dx,dx
c0019cf6:	09 d0                	or     eax,edx
c0019cf8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019cfb:	eb 1a                	jmp    c0019d17 <Vm::faultHandler(regs*)+0x670>
c0019cfd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019d00:	83 c4 10             	add    esp,0x10
c0019d03:	eb 15                	jmp    c0019d1a <Vm::faultHandler(regs*)+0x673>
c0019d05:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019d08:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019d0b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d10:	74 03                	je     c0019d15 <Vm::faultHandler(regs*)+0x66e>
c0019d12:	ef                   	out    dx,eax
c0019d13:	eb 02                	jmp    c0019d17 <Vm::faultHandler(regs*)+0x670>
c0019d15:	66 ef                	out    dx,ax
c0019d17:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019d1a:	b0 01                	mov    al,0x1
c0019d1c:	eb 56                	jmp    c0019d74 <Vm::faultHandler(regs*)+0x6cd>
c0019d1e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019d22:	50                   	push   eax
c0019d23:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019d27:	50                   	push   eax
c0019d28:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019d2c:	50                   	push   eax
c0019d2d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019d31:	50                   	push   eax
c0019d32:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019d36:	50                   	push   eax
c0019d37:	52                   	push   edx
c0019d38:	52                   	push   edx
c0019d39:	68 7b 62 02 c0       	push   0xc002627b
c0019d3e:	e8 b8 2f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0019d43:	83 c4 20             	add    esp,0x20
c0019d46:	83 ec 0c             	sub    esp,0xc
c0019d49:	6a 60                	push   0x60
c0019d4b:	e8 99 f4 ff ff       	call   c00191e9 <Vm::inbv(unsigned short)>
c0019d50:	83 c4 10             	add    esp,0x10
c0019d53:	3c 1c                	cmp    al,0x1c
c0019d55:	74 04                	je     c0019d5b <Vm::faultHandler(regs*)+0x6b4>
c0019d57:	3c 5a                	cmp    al,0x5a
c0019d59:	75 eb                	jne    c0019d46 <Vm::faultHandler(regs*)+0x69f>
c0019d5b:	3c 5a                	cmp    al,0x5a
c0019d5d:	74 04                	je     c0019d63 <Vm::faultHandler(regs*)+0x6bc>
c0019d5f:	3c 1c                	cmp    al,0x1c
c0019d61:	75 0f                	jne    c0019d72 <Vm::faultHandler(regs*)+0x6cb>
c0019d63:	83 ec 0c             	sub    esp,0xc
c0019d66:	6a 60                	push   0x60
c0019d68:	e8 7c f4 ff ff       	call   c00191e9 <Vm::inbv(unsigned short)>
c0019d6d:	83 c4 10             	add    esp,0x10
c0019d70:	eb e9                	jmp    c0019d5b <Vm::faultHandler(regs*)+0x6b4>
c0019d72:	31 c0                	xor    eax,eax
c0019d74:	83 c4 1c             	add    esp,0x1c
c0019d77:	5b                   	pop    ebx
c0019d78:	5e                   	pop    esi
c0019d79:	5f                   	pop    edi
c0019d7a:	5d                   	pop    ebp
c0019d7b:	c3                   	ret    

c0019d7c <Vm::fpuInternalTo32(unsigned long long)>:
c0019d7c:	57                   	push   edi
c0019d7d:	56                   	push   esi
c0019d7e:	53                   	push   ebx
c0019d7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d87:	89 d6                	mov    esi,edx
c0019d89:	89 d7                	mov    edi,edx
c0019d8b:	89 c1                	mov    ecx,eax
c0019d8d:	c1 ef 14             	shr    edi,0x14
c0019d90:	89 d3                	mov    ebx,edx
c0019d92:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019d98:	31 d2                	xor    edx,edx
c0019d9a:	89 f8                	mov    eax,edi
c0019d9c:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019da2:	bf ff 00 00 00       	mov    edi,0xff
c0019da7:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019dac:	83 d2 ff             	adc    edx,0xffffffff
c0019daf:	39 c7                	cmp    edi,eax
c0019db1:	bf 00 00 00 00       	mov    edi,0x0
c0019db6:	19 d7                	sbb    edi,edx
c0019db8:	72 16                	jb     c0019dd0 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019dba:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019dbe:	c1 e0 17             	shl    eax,0x17
c0019dc1:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019dc7:	09 f1                	or     ecx,esi
c0019dc9:	09 c1                	or     ecx,eax
c0019dcb:	89 cf                	mov    edi,ecx
c0019dcd:	eb 05                	jmp    c0019dd4 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019dcf:	90                   	nop
c0019dd0:	31 ff                	xor    edi,edi
c0019dd2:	66 90                	xchg   ax,ax
c0019dd4:	89 f8                	mov    eax,edi
c0019dd6:	5b                   	pop    ebx
c0019dd7:	5e                   	pop    esi
c0019dd8:	5f                   	pop    edi
c0019dd9:	c3                   	ret    

c0019dda <Vm::fpuInternalTo64(unsigned long long)>:
c0019dda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019de2:	c3                   	ret    

c0019de3 <Vm::fpu32ToInternal(unsigned int)>:
c0019de3:	57                   	push   edi
c0019de4:	31 ff                	xor    edi,edi
c0019de6:	56                   	push   esi
c0019de7:	53                   	push   ebx
c0019de8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019dec:	89 cb                	mov    ebx,ecx
c0019dee:	89 ce                	mov    esi,ecx
c0019df0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019df6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019dfc:	c1 e9 17             	shr    ecx,0x17
c0019dff:	89 f0                	mov    eax,esi
c0019e01:	0f b6 d1             	movzx  edx,cl
c0019e04:	81 c2 80 03 00 00    	add    edx,0x380
c0019e0a:	89 d1                	mov    ecx,edx
c0019e0c:	89 fa                	mov    edx,edi
c0019e0e:	c1 e1 14             	shl    ecx,0x14
c0019e11:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019e15:	c1 e0 1d             	shl    eax,0x1d
c0019e18:	89 d7                	mov    edi,edx
c0019e1a:	89 c6                	mov    esi,eax
c0019e1c:	89 ca                	mov    edx,ecx
c0019e1e:	89 f0                	mov    eax,esi
c0019e20:	09 fa                	or     edx,edi
c0019e22:	09 da                	or     edx,ebx
c0019e24:	5b                   	pop    ebx
c0019e25:	5e                   	pop    esi
c0019e26:	5f                   	pop    edi
c0019e27:	c3                   	ret    

c0019e28 <Vm::fpu64ToInternal(unsigned long long)>:
c0019e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e30:	c3                   	ret    

c0019e31 <Vm::fpuFloatToLong(unsigned long long)>:
c0019e31:	57                   	push   edi
c0019e32:	31 c0                	xor    eax,eax
c0019e34:	56                   	push   esi
c0019e35:	31 d2                	xor    edx,edx
c0019e37:	53                   	push   ebx
c0019e38:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019e3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e40:	89 d9                	mov    ecx,ebx
c0019e42:	c1 e9 14             	shr    ecx,0x14
c0019e45:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019e4b:	89 cf                	mov    edi,ecx
c0019e4d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019e53:	78 37                	js     c0019e8c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019e55:	89 d9                	mov    ecx,ebx
c0019e57:	89 f0                	mov    eax,esi
c0019e59:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019e5f:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019e65:	89 ca                	mov    edx,ecx
c0019e67:	b9 34 00 00 00       	mov    ecx,0x34
c0019e6c:	29 f9                	sub    ecx,edi
c0019e6e:	0f ad d0             	shrd   eax,edx,cl
c0019e71:	d3 fa                	sar    edx,cl
c0019e73:	f6 c1 20             	test   cl,0x20
c0019e76:	74 08                	je     c0019e80 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019e78:	89 d0                	mov    eax,edx
c0019e7a:	c1 fa 1f             	sar    edx,0x1f
c0019e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e80:	85 db                	test   ebx,ebx
c0019e82:	79 08                	jns    c0019e8c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019e84:	f7 d8                	neg    eax
c0019e86:	83 d2 00             	adc    edx,0x0
c0019e89:	f7 da                	neg    edx
c0019e8b:	90                   	nop
c0019e8c:	5b                   	pop    ebx
c0019e8d:	5e                   	pop    esi
c0019e8e:	5f                   	pop    edi
c0019e8f:	c3                   	ret    

c0019e90 <Vm::fpuULongToFloat(unsigned long long)>:
c0019e90:	57                   	push   edi
c0019e91:	31 c9                	xor    ecx,ecx
c0019e93:	56                   	push   esi
c0019e94:	53                   	push   ebx
c0019e95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e99:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ea0:	0f ba e7 14          	bt     edi,0x14
c0019ea4:	72 0a                	jb     c0019eb0 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019ea6:	01 f6                	add    esi,esi
c0019ea8:	11 ff                	adc    edi,edi
c0019eaa:	41                   	inc    ecx
c0019eab:	eb f3                	jmp    c0019ea0 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019ead:	8d 76 00             	lea    esi,[esi+0x0]
c0019eb0:	89 fa                	mov    edx,edi
c0019eb2:	89 f0                	mov    eax,esi
c0019eb4:	bb 33 04 00 00       	mov    ebx,0x433
c0019eb9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019ebf:	29 cb                	sub    ebx,ecx
c0019ec1:	89 d9                	mov    ecx,ebx
c0019ec3:	5b                   	pop    ebx
c0019ec4:	c1 e1 14             	shl    ecx,0x14
c0019ec7:	5e                   	pop    esi
c0019ec8:	09 ca                	or     edx,ecx
c0019eca:	5f                   	pop    edi
c0019ecb:	c3                   	ret    

c0019ecc <Vm::fpuLongToFloat(long long)>:
c0019ecc:	56                   	push   esi
c0019ecd:	31 c0                	xor    eax,eax
c0019ecf:	53                   	push   ebx
c0019ed0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ed4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ed8:	39 c8                	cmp    eax,ecx
c0019eda:	19 d8                	sbb    eax,ebx
c0019edc:	7d 06                	jge    c0019ee4 <Vm::fpuLongToFloat(long long)+0x18>
c0019ede:	31 f6                	xor    esi,esi
c0019ee0:	eb 0e                	jmp    c0019ef0 <Vm::fpuLongToFloat(long long)+0x24>
c0019ee2:	66 90                	xchg   ax,ax
c0019ee4:	f7 d9                	neg    ecx
c0019ee6:	be 01 00 00 00       	mov    esi,0x1
c0019eeb:	83 d3 00             	adc    ebx,0x0
c0019eee:	f7 db                	neg    ebx
c0019ef0:	31 c0                	xor    eax,eax
c0019ef2:	66 90                	xchg   ax,ax
c0019ef4:	0f ba e3 14          	bt     ebx,0x14
c0019ef8:	72 0a                	jb     c0019f04 <Vm::fpuLongToFloat(long long)+0x38>
c0019efa:	01 c9                	add    ecx,ecx
c0019efc:	11 db                	adc    ebx,ebx
c0019efe:	40                   	inc    eax
c0019eff:	eb f3                	jmp    c0019ef4 <Vm::fpuLongToFloat(long long)+0x28>
c0019f01:	8d 76 00             	lea    esi,[esi+0x0]
c0019f04:	ba 33 04 00 00       	mov    edx,0x433
c0019f09:	29 c2                	sub    edx,eax
c0019f0b:	89 c8                	mov    eax,ecx
c0019f0d:	c1 e2 14             	shl    edx,0x14
c0019f10:	89 d9                	mov    ecx,ebx
c0019f12:	89 f3                	mov    ebx,esi
c0019f14:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019f1a:	09 ca                	or     edx,ecx
c0019f1c:	84 db                	test   bl,bl
c0019f1e:	74 08                	je     c0019f28 <Vm::fpuLongToFloat(long long)+0x5c>
c0019f20:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019f26:	66 90                	xchg   ax,ax
c0019f28:	5b                   	pop    ebx
c0019f29:	5e                   	pop    esi
c0019f2a:	c3                   	ret    

c0019f2b <Vm::fpuGet0()>:
c0019f2b:	31 c0                	xor    eax,eax
c0019f2d:	31 d2                	xor    edx,edx
c0019f2f:	c3                   	ret    

c0019f30 <Vm::fpuGet1()>:
c0019f30:	b8 01 00 00 00       	mov    eax,0x1
c0019f35:	31 d2                	xor    edx,edx
c0019f37:	c3                   	ret    

c0019f38 <Vm::fpuGetPi()>:
c0019f38:	b8 03 00 00 00       	mov    eax,0x3
c0019f3d:	31 d2                	xor    edx,edx
c0019f3f:	c3                   	ret    

c0019f40 <Vm::fpuGetLog2E()>:
c0019f40:	83 ec 18             	sub    esp,0x18
c0019f43:	68 d8 62 02 c0       	push   0xc00262d8
c0019f48:	e8 ba aa ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0019f4d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f52:	31 d2                	xor    edx,edx
c0019f54:	83 c4 1c             	add    esp,0x1c
c0019f57:	c3                   	ret    

c0019f58 <Vm::fpuGetLogE2()>:
c0019f58:	83 ec 18             	sub    esp,0x18
c0019f5b:	68 e4 62 02 c0       	push   0xc00262e4
c0019f60:	e8 a2 aa ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0019f65:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f6a:	31 d2                	xor    edx,edx
c0019f6c:	83 c4 1c             	add    esp,0x1c
c0019f6f:	c3                   	ret    

c0019f70 <Vm::fpuGetLog210()>:
c0019f70:	83 ec 18             	sub    esp,0x18
c0019f73:	68 f0 62 02 c0       	push   0xc00262f0
c0019f78:	e8 8a aa ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0019f7d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f82:	31 d2                	xor    edx,edx
c0019f84:	83 c4 1c             	add    esp,0x1c
c0019f87:	c3                   	ret    

c0019f88 <Vm::fpuGetLog102()>:
c0019f88:	83 ec 18             	sub    esp,0x18
c0019f8b:	68 fd 62 02 c0       	push   0xc00262fd
c0019f90:	e8 72 aa ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0019f95:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f9a:	31 d2                	xor    edx,edx
c0019f9c:	83 c4 1c             	add    esp,0x1c
c0019f9f:	c3                   	ret    

c0019fa0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019fa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fa4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019fa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fac:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019fb0:	0f 92 c0             	setb   al
c0019fb3:	c3                   	ret    

c0019fb4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019fb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fbc:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019fc0:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019fc4:	09 c2                	or     edx,eax
c0019fc6:	0f 94 c0             	sete   al
c0019fc9:	c3                   	ret    

c0019fca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019fca:	57                   	push   edi
c0019fcb:	56                   	push   esi
c0019fcc:	53                   	push   ebx
c0019fcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019fd1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019fd5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019fd9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019fdd:	57                   	push   edi
c0019fde:	56                   	push   esi
c0019fdf:	53                   	push   ebx
c0019fe0:	51                   	push   ecx
c0019fe1:	e8 ce ff ff ff       	call   c0019fb4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019fe6:	83 c4 10             	add    esp,0x10
c0019fe9:	88 c2                	mov    dl,al
c0019feb:	31 c0                	xor    eax,eax
c0019fed:	84 d2                	test   dl,dl
c0019fef:	75 0f                	jne    c001a000 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019ff1:	57                   	push   edi
c0019ff2:	56                   	push   esi
c0019ff3:	53                   	push   ebx
c0019ff4:	51                   	push   ecx
c0019ff5:	e8 a6 ff ff ff       	call   c0019fa0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019ffa:	83 c4 10             	add    esp,0x10
c0019ffd:	8d 76 00             	lea    esi,[esi+0x0]
c001a000:	83 e0 01             	and    eax,0x1
c001a003:	5b                   	pop    ebx
c001a004:	88 c1                	mov    cl,al
c001a006:	83 e2 01             	and    edx,0x1
c001a009:	a0 21 95 02 c0       	mov    al,ds:0xc0029521
c001a00e:	c1 e2 06             	shl    edx,0x6
c001a011:	83 e0 ba             	and    eax,0xffffffba
c001a014:	5e                   	pop    esi
c001a015:	09 c8                	or     eax,ecx
c001a017:	5f                   	pop    edi
c001a018:	09 d0                	or     eax,edx
c001a01a:	a2 21 95 02 c0       	mov    ds:0xc0029521,al
c001a01f:	c3                   	ret    

c001a020 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a020:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a024:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a028:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a02c:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a030:	c3                   	ret    

c001a031 <Vm::fpuAbs(unsigned long long)>:
c001a031:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a035:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a039:	c3                   	ret    

c001a03a <Vm::fpuChs(unsigned long long)>:
c001a03a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a03e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a042:	f7 d8                	neg    eax
c001a044:	83 d2 00             	adc    edx,0x0
c001a047:	f7 da                	neg    edx
c001a049:	c3                   	ret    

c001a04a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a04a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a04e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a053:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a057:	eb c7                	jmp    c001a020 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a059 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a059:	53                   	push   ebx
c001a05a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a05e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a062:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a066:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a06a:	0f af ca             	imul   ecx,edx
c001a06d:	0f af d8             	imul   ebx,eax
c001a070:	f7 e2                	mul    edx
c001a072:	01 d9                	add    ecx,ebx
c001a074:	5b                   	pop    ebx
c001a075:	01 ca                	add    edx,ecx
c001a077:	c3                   	ret    

c001a078 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a078:	83 ec 0c             	sub    esp,0xc
c001a07b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a07f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a083:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a087:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a08b:	e8 b4 86 00 00       	call   c0022744 <__udivdi3>
c001a090:	83 c4 1c             	add    esp,0x1c
c001a093:	c3                   	ret    

c001a094 <Vm::fpuSquare(unsigned long long)>:
c001a094:	50                   	push   eax
c001a095:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a099:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a09d:	52                   	push   edx
c001a09e:	50                   	push   eax
c001a09f:	52                   	push   edx
c001a0a0:	50                   	push   eax
c001a0a1:	e8 b3 ff ff ff       	call   c001a059 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a0a6:	83 c4 14             	add    esp,0x14
c001a0a9:	c3                   	ret    

c001a0aa <Vm::fpuGetReg(int)>:
c001a0aa:	83 ec 0c             	sub    esp,0xc
c001a0ad:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a0b2:	76 10                	jbe    c001a0c4 <Vm::fpuGetReg(int)+0x1a>
c001a0b4:	83 ec 0c             	sub    esp,0xc
c001a0b7:	68 0a 63 02 c0       	push   0xc002630a
c001a0bc:	e8 46 a9 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001a0c1:	83 c4 10             	add    esp,0x10
c001a0c4:	a0 21 95 02 c0       	mov    al,ds:0xc0029521
c001a0c9:	b9 08 00 00 00       	mov    ecx,0x8
c001a0ce:	c0 e8 03             	shr    al,0x3
c001a0d1:	83 e0 07             	and    eax,0x7
c001a0d4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a0d8:	99                   	cdq    
c001a0d9:	f7 f9                	idiv   ecx
c001a0db:	8b 04 d5 24 95 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd6adc]
c001a0e2:	8b 14 d5 28 95 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6ad8]
c001a0e9:	83 c4 0c             	add    esp,0xc
c001a0ec:	c3                   	ret    

c001a0ed <Vm::fpuSetReg(int, unsigned long long)>:
c001a0ed:	57                   	push   edi
c001a0ee:	56                   	push   esi
c001a0ef:	52                   	push   edx
c001a0f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a0f4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a0f8:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a0fd:	76 11                	jbe    c001a110 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a0ff:	83 ec 0c             	sub    esp,0xc
c001a102:	68 1d 63 02 c0       	push   0xc002631d
c001a107:	e8 fb a8 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001a10c:	83 c4 10             	add    esp,0x10
c001a10f:	90                   	nop
c001a110:	a0 21 95 02 c0       	mov    al,ds:0xc0029521
c001a115:	b9 08 00 00 00       	mov    ecx,0x8
c001a11a:	c0 e8 03             	shr    al,0x3
c001a11d:	83 e0 07             	and    eax,0x7
c001a120:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a124:	99                   	cdq    
c001a125:	f7 f9                	idiv   ecx
c001a127:	89 34 d5 24 95 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6adc],esi
c001a12e:	89 3c d5 28 95 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6ad8],edi
c001a135:	58                   	pop    eax
c001a136:	5e                   	pop    esi
c001a137:	5f                   	pop    edi
c001a138:	c3                   	ret    

c001a139 <Vm::fpuPush(unsigned long long)>:
c001a139:	a0 21 95 02 c0       	mov    al,ds:0xc0029521
c001a13e:	c0 e8 03             	shr    al,0x3
c001a141:	83 e0 07             	and    eax,0x7
c001a144:	83 c0 07             	add    eax,0x7
c001a147:	88 c2                	mov    dl,al
c001a149:	83 e0 07             	and    eax,0x7
c001a14c:	83 e2 07             	and    edx,0x7
c001a14f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a156:	8a 15 21 95 02 c0    	mov    dl,BYTE PTR ds:0xc0029521
c001a15c:	83 e2 c7             	and    edx,0xffffffc7
c001a15f:	09 ca                	or     edx,ecx
c001a161:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a165:	88 15 21 95 02 c0    	mov    BYTE PTR ds:0xc0029521,dl
c001a16b:	89 0c c5 28 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6ad8],ecx
c001a172:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a176:	89 14 c5 24 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6adc],edx
c001a17d:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c001a182:	83 f8 08             	cmp    eax,0x8
c001a185:	75 09                	jne    c001a190 <Vm::fpuPush(unsigned long long)+0x57>
c001a187:	80 0d 20 95 02 c0 40 	or     BYTE PTR ds:0xc0029520,0x40
c001a18e:	c3                   	ret    
c001a18f:	90                   	nop
c001a190:	40                   	inc    eax
c001a191:	a3 64 95 02 c0       	mov    ds:0xc0029564,eax
c001a196:	c3                   	ret    

c001a197 <Vm::fpuPop()>:
c001a197:	8a 0d 21 95 02 c0    	mov    cl,BYTE PTR ds:0xc0029521
c001a19d:	53                   	push   ebx
c001a19e:	c0 e9 03             	shr    cl,0x3
c001a1a1:	8a 1d 21 95 02 c0    	mov    bl,BYTE PTR ds:0xc0029521
c001a1a7:	83 e1 07             	and    ecx,0x7
c001a1aa:	83 e3 c7             	and    ebx,0xffffffc7
c001a1ad:	8b 04 cd 24 95 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd6adc]
c001a1b4:	8b 14 cd 28 95 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6ad8]
c001a1bb:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a1c2:	83 e1 38             	and    ecx,0x38
c001a1c5:	09 d9                	or     ecx,ebx
c001a1c7:	88 0d 21 95 02 c0    	mov    BYTE PTR ds:0xc0029521,cl
c001a1cd:	8b 0d 64 95 02 c0    	mov    ecx,DWORD PTR ds:0xc0029564
c001a1d3:	85 c9                	test   ecx,ecx
c001a1d5:	74 09                	je     c001a1e0 <Vm::fpuPop()+0x49>
c001a1d7:	49                   	dec    ecx
c001a1d8:	89 0d 64 95 02 c0    	mov    DWORD PTR ds:0xc0029564,ecx
c001a1de:	eb 08                	jmp    c001a1e8 <Vm::fpuPop()+0x51>
c001a1e0:	80 0d 20 95 02 c0 40 	or     BYTE PTR ds:0xc0029520,0x40
c001a1e7:	90                   	nop
c001a1e8:	5b                   	pop    ebx
c001a1e9:	c3                   	ret    

c001a1ea <Vm::x87Handler(regs*)>:
c001a1ea:	55                   	push   ebp
c001a1eb:	57                   	push   edi
c001a1ec:	56                   	push   esi
c001a1ed:	53                   	push   ebx
c001a1ee:	83 ec 1c             	sub    esp,0x1c
c001a1f1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a1f5:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a1fa:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a1fd:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a205:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a209:	50                   	push   eax
c001a20a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a20e:	50                   	push   eax
c001a20f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a213:	50                   	push   eax
c001a214:	53                   	push   ebx
c001a215:	e8 06 9f ff ff       	call   c0014120 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a21a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a21d:	83 c4 10             	add    esp,0x10
c001a220:	89 c6                	mov    esi,eax
c001a222:	80 fa d9             	cmp    dl,0xd9
c001a225:	0f 85 79 01 00 00    	jne    c001a3a4 <Vm::x87Handler(regs*)+0x1ba>
c001a22b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a22f:	8d 50 20             	lea    edx,[eax+0x20]
c001a232:	80 fa 0e             	cmp    dl,0xe
c001a235:	0f 87 a5 00 00 00    	ja     c001a2e0 <Vm::x87Handler(regs*)+0xf6>
c001a23b:	0f b6 d2             	movzx  edx,dl
c001a23e:	ff 24 95 30 63 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9cd0]
c001a245:	8d 76 00             	lea    esi,[esi+0x0]
c001a248:	e8 de fc ff ff       	call   c0019f2b <Vm::fpuGet0()>
c001a24d:	eb 09                	jmp    c001a258 <Vm::x87Handler(regs*)+0x6e>
c001a24f:	90                   	nop
c001a250:	e8 db fc ff ff       	call   c0019f30 <Vm::fpuGet1()>
c001a255:	8d 76 00             	lea    esi,[esi+0x0]
c001a258:	57                   	push   edi
c001a259:	57                   	push   edi
c001a25a:	66 90                	xchg   ax,ax
c001a25c:	52                   	push   edx
c001a25d:	50                   	push   eax
c001a25e:	e8 d6 fe ff ff       	call   c001a139 <Vm::fpuPush(unsigned long long)>
c001a263:	90                   	nop
c001a264:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a268:	83 c4 10             	add    esp,0x10
c001a26b:	90                   	nop
c001a26c:	b0 01                	mov    al,0x1
c001a26e:	e9 89 0a 00 00       	jmp    c001acfc <Vm::x87Handler(regs*)+0xb12>
c001a273:	90                   	nop
c001a274:	83 ec 0c             	sub    esp,0xc
c001a277:	6a 00                	push   0x0
c001a279:	e8 2c fe ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a27e:	59                   	pop    ecx
c001a27f:	5e                   	pop    esi
c001a280:	52                   	push   edx
c001a281:	50                   	push   eax
c001a282:	e8 b3 fd ff ff       	call   c001a03a <Vm::fpuChs(unsigned long long)>
c001a287:	eb 17                	jmp    c001a2a0 <Vm::x87Handler(regs*)+0xb6>
c001a289:	8d 76 00             	lea    esi,[esi+0x0]
c001a28c:	83 ec 0c             	sub    esp,0xc
c001a28f:	6a 00                	push   0x0
c001a291:	e8 14 fe ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a296:	5f                   	pop    edi
c001a297:	5d                   	pop    ebp
c001a298:	52                   	push   edx
c001a299:	50                   	push   eax
c001a29a:	e8 92 fd ff ff       	call   c001a031 <Vm::fpuAbs(unsigned long long)>
c001a29f:	90                   	nop
c001a2a0:	83 c4 0c             	add    esp,0xc
c001a2a3:	90                   	nop
c001a2a4:	52                   	push   edx
c001a2a5:	50                   	push   eax
c001a2a6:	66 90                	xchg   ax,ax
c001a2a8:	6a 00                	push   0x0
c001a2aa:	66 90                	xchg   ax,ax
c001a2ac:	e8 3c fe ff ff       	call   c001a0ed <Vm::fpuSetReg(int, unsigned long long)>
c001a2b1:	eb b1                	jmp    c001a264 <Vm::x87Handler(regs*)+0x7a>
c001a2b3:	90                   	nop
c001a2b4:	e8 b7 fc ff ff       	call   c0019f70 <Vm::fpuGetLog210()>
c001a2b9:	eb 9d                	jmp    c001a258 <Vm::x87Handler(regs*)+0x6e>
c001a2bb:	90                   	nop
c001a2bc:	e8 7f fc ff ff       	call   c0019f40 <Vm::fpuGetLog2E()>
c001a2c1:	eb 95                	jmp    c001a258 <Vm::x87Handler(regs*)+0x6e>
c001a2c3:	90                   	nop
c001a2c4:	e8 6f fc ff ff       	call   c0019f38 <Vm::fpuGetPi()>
c001a2c9:	eb 8d                	jmp    c001a258 <Vm::x87Handler(regs*)+0x6e>
c001a2cb:	90                   	nop
c001a2cc:	e8 b7 fc ff ff       	call   c0019f88 <Vm::fpuGetLog102()>
c001a2d1:	eb 85                	jmp    c001a258 <Vm::x87Handler(regs*)+0x6e>
c001a2d3:	90                   	nop
c001a2d4:	e8 7f fc ff ff       	call   c0019f58 <Vm::fpuGetLogE2()>
c001a2d9:	e9 7a ff ff ff       	jmp    c001a258 <Vm::x87Handler(regs*)+0x6e>
c001a2de:	66 90                	xchg   ax,ax
c001a2e0:	8d 50 40             	lea    edx,[eax+0x40]
c001a2e3:	80 fa 07             	cmp    dl,0x7
c001a2e6:	77 18                	ja     c001a300 <Vm::x87Handler(regs*)+0x116>
c001a2e8:	83 ec 0c             	sub    esp,0xc
c001a2eb:	2d c0 00 00 00       	sub    eax,0xc0
c001a2f0:	50                   	push   eax
c001a2f1:	e8 b4 fd ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a2f6:	59                   	pop    ecx
c001a2f7:	5e                   	pop    esi
c001a2f8:	e9 5f ff ff ff       	jmp    c001a25c <Vm::x87Handler(regs*)+0x72>
c001a2fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a300:	8d 50 38             	lea    edx,[eax+0x38]
c001a303:	80 fa 07             	cmp    dl,0x7
c001a306:	77 3c                	ja     c001a344 <Vm::x87Handler(regs*)+0x15a>
c001a308:	83 ec 0c             	sub    esp,0xc
c001a30b:	2d c8 00 00 00       	sub    eax,0xc8
c001a310:	50                   	push   eax
c001a311:	e8 94 fd ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a316:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a31d:	89 c6                	mov    esi,eax
c001a31f:	89 d7                	mov    edi,edx
c001a321:	e8 84 fd ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a326:	83 c4 0c             	add    esp,0xc
c001a329:	52                   	push   edx
c001a32a:	50                   	push   eax
c001a32b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a32f:	2d c8 00 00 00       	sub    eax,0xc8
c001a334:	50                   	push   eax
c001a335:	e8 b3 fd ff ff       	call   c001a0ed <Vm::fpuSetReg(int, unsigned long long)>
c001a33a:	83 c4 0c             	add    esp,0xc
c001a33d:	57                   	push   edi
c001a33e:	56                   	push   esi
c001a33f:	e9 64 ff ff ff       	jmp    c001a2a8 <Vm::x87Handler(regs*)+0xbe>
c001a344:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a348:	84 d2                	test   dl,dl
c001a34a:	75 10                	jne    c001a35c <Vm::x87Handler(regs*)+0x172>
c001a34c:	83 ec 0c             	sub    esp,0xc
c001a34f:	ff 36                	push   DWORD PTR [esi]
c001a351:	e8 8d fa ff ff       	call   c0019de3 <Vm::fpu32ToInternal(unsigned int)>
c001a356:	e9 c9 00 00 00       	jmp    c001a424 <Vm::x87Handler(regs*)+0x23a>
c001a35b:	90                   	nop
c001a35c:	80 fa 03             	cmp    dl,0x3
c001a35f:	75 13                	jne    c001a374 <Vm::x87Handler(regs*)+0x18a>
c001a361:	e8 31 fe ff ff       	call   c001a197 <Vm::fpuPop()>
c001a366:	55                   	push   ebp
c001a367:	55                   	push   ebp
c001a368:	52                   	push   edx
c001a369:	50                   	push   eax
c001a36a:	e8 0d fa ff ff       	call   c0019d7c <Vm::fpuInternalTo32(unsigned long long)>
c001a36f:	e9 90 00 00 00       	jmp    c001a404 <Vm::x87Handler(regs*)+0x21a>
c001a374:	80 fa 05             	cmp    dl,0x5
c001a377:	75 0f                	jne    c001a388 <Vm::x87Handler(regs*)+0x19e>
c001a379:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a37c:	66 a3 22 95 02 c0    	mov    ds:0xc0029522,ax
c001a382:	e9 ed 00 00 00       	jmp    c001a474 <Vm::x87Handler(regs*)+0x28a>
c001a387:	90                   	nop
c001a388:	31 c0                	xor    eax,eax
c001a38a:	80 fa 07             	cmp    dl,0x7
c001a38d:	0f 85 69 09 00 00    	jne    c001acfc <Vm::x87Handler(regs*)+0xb12>
c001a393:	66 a1 22 95 02 c0    	mov    ax,ds:0xc0029522
c001a399:	66 89 06             	mov    WORD PTR [esi],ax
c001a39c:	e9 d3 00 00 00       	jmp    c001a474 <Vm::x87Handler(regs*)+0x28a>
c001a3a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3a4:	80 fa d8             	cmp    dl,0xd8
c001a3a7:	0f 84 d3 00 00 00    	je     c001a480 <Vm::x87Handler(regs*)+0x296>
c001a3ad:	80 fa dc             	cmp    dl,0xdc
c001a3b0:	0f 84 2a 02 00 00    	je     c001a5e0 <Vm::x87Handler(regs*)+0x3f6>
c001a3b6:	80 fa de             	cmp    dl,0xde
c001a3b9:	0f 84 f1 02 00 00    	je     c001a6b0 <Vm::x87Handler(regs*)+0x4c6>
c001a3bf:	80 fa dd             	cmp    dl,0xdd
c001a3c2:	0f 84 94 04 00 00    	je     c001a85c <Vm::x87Handler(regs*)+0x672>
c001a3c8:	80 fa da             	cmp    dl,0xda
c001a3cb:	0f 84 5f 05 00 00    	je     c001a930 <Vm::x87Handler(regs*)+0x746>
c001a3d1:	80 fa df             	cmp    dl,0xdf
c001a3d4:	0f 84 aa 05 00 00    	je     c001a984 <Vm::x87Handler(regs*)+0x79a>
c001a3da:	31 c0                	xor    eax,eax
c001a3dc:	80 fa db             	cmp    dl,0xdb
c001a3df:	0f 85 17 09 00 00    	jne    c001acfc <Vm::x87Handler(regs*)+0xb12>
c001a3e5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a3e9:	80 fa 03             	cmp    dl,0x3
c001a3ec:	0f 85 c2 06 00 00    	jne    c001aab4 <Vm::x87Handler(regs*)+0x8ca>
c001a3f2:	e8 a0 fd ff ff       	call   c001a197 <Vm::fpuPop()>
c001a3f7:	55                   	push   ebp
c001a3f8:	55                   	push   ebp
c001a3f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3fc:	52                   	push   edx
c001a3fd:	50                   	push   eax
c001a3fe:	e8 2e fa ff ff       	call   c0019e31 <Vm::fpuFloatToLong(unsigned long long)>
c001a403:	90                   	nop
c001a404:	83 c4 10             	add    esp,0x10
c001a407:	89 06                	mov    DWORD PTR [esi],eax
c001a409:	eb 69                	jmp    c001a474 <Vm::x87Handler(regs*)+0x28a>
c001a40b:	90                   	nop
c001a40c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a410:	84 d2                	test   dl,dl
c001a412:	0f 85 2c 06 00 00    	jne    c001aa44 <Vm::x87Handler(regs*)+0x85a>
c001a418:	57                   	push   edi
c001a419:	57                   	push   edi
c001a41a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a41d:	ff 36                	push   DWORD PTR [esi]
c001a41f:	e8 04 fa ff ff       	call   c0019e28 <Vm::fpu64ToInternal(unsigned long long)>
c001a424:	5e                   	pop    esi
c001a425:	5f                   	pop    edi
c001a426:	52                   	push   edx
c001a427:	50                   	push   eax
c001a428:	e8 0c fd ff ff       	call   c001a139 <Vm::fpuPush(unsigned long long)>
c001a42d:	8d 76 00             	lea    esi,[esi+0x0]
c001a430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a434:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a437:	e9 2c fe ff ff       	jmp    c001a268 <Vm::x87Handler(regs*)+0x7e>
c001a43c:	80 fa 03             	cmp    dl,0x3
c001a43f:	0f 85 2b 07 00 00    	jne    c001ab70 <Vm::x87Handler(regs*)+0x986>
c001a445:	57                   	push   edi
c001a446:	57                   	push   edi
c001a447:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a44a:	ff 36                	push   DWORD PTR [esi]
c001a44c:	e8 d7 f9 ff ff       	call   c0019e28 <Vm::fpu64ToInternal(unsigned long long)>
c001a451:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a458:	89 c6                	mov    esi,eax
c001a45a:	89 d7                	mov    edi,edx
c001a45c:	e8 49 fc ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a461:	57                   	push   edi
c001a462:	56                   	push   esi
c001a463:	52                   	push   edx
c001a464:	50                   	push   eax
c001a465:	e8 60 fb ff ff       	call   c0019fca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a46a:	83 c4 20             	add    esp,0x20
c001a46d:	e8 25 fd ff ff       	call   c001a197 <Vm::fpuPop()>
c001a472:	66 90                	xchg   ax,ax
c001a474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a478:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a47b:	e9 ec fd ff ff       	jmp    c001a26c <Vm::x87Handler(regs*)+0x82>
c001a480:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a484:	8d 50 40             	lea    edx,[eax+0x40]
c001a487:	80 fa 07             	cmp    dl,0x7
c001a48a:	77 2c                	ja     c001a4b8 <Vm::x87Handler(regs*)+0x2ce>
c001a48c:	83 ec 0c             	sub    esp,0xc
c001a48f:	2d c0 00 00 00       	sub    eax,0xc0
c001a494:	50                   	push   eax
c001a495:	e8 10 fc ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a49a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4a1:	89 c6                	mov    esi,eax
c001a4a3:	89 d7                	mov    edi,edx
c001a4a5:	e8 00 fc ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a4aa:	57                   	push   edi
c001a4ab:	56                   	push   esi
c001a4ac:	52                   	push   edx
c001a4ad:	50                   	push   eax
c001a4ae:	e8 6d fb ff ff       	call   c001a020 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a4b3:	eb 33                	jmp    c001a4e8 <Vm::x87Handler(regs*)+0x2fe>
c001a4b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4b8:	8d 50 38             	lea    edx,[eax+0x38]
c001a4bb:	80 fa 07             	cmp    dl,0x7
c001a4be:	77 30                	ja     c001a4f0 <Vm::x87Handler(regs*)+0x306>
c001a4c0:	83 ec 0c             	sub    esp,0xc
c001a4c3:	2d c8 00 00 00       	sub    eax,0xc8
c001a4c8:	50                   	push   eax
c001a4c9:	e8 dc fb ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a4ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4d5:	89 c6                	mov    esi,eax
c001a4d7:	89 d7                	mov    edi,edx
c001a4d9:	e8 cc fb ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a4de:	57                   	push   edi
c001a4df:	56                   	push   esi
c001a4e0:	52                   	push   edx
c001a4e1:	50                   	push   eax
c001a4e2:	e8 72 fb ff ff       	call   c001a059 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a4e7:	90                   	nop
c001a4e8:	83 c4 1c             	add    esp,0x1c
c001a4eb:	e9 b4 fd ff ff       	jmp    c001a2a4 <Vm::x87Handler(regs*)+0xba>
c001a4f0:	8d 50 30             	lea    edx,[eax+0x30]
c001a4f3:	80 fa 07             	cmp    dl,0x7
c001a4f6:	77 10                	ja     c001a508 <Vm::x87Handler(regs*)+0x31e>
c001a4f8:	83 ec 0c             	sub    esp,0xc
c001a4fb:	2d d0 00 00 00       	sub    eax,0xd0
c001a500:	e9 c3 03 00 00       	jmp    c001a8c8 <Vm::x87Handler(regs*)+0x6de>
c001a505:	8d 76 00             	lea    esi,[esi+0x0]
c001a508:	8d 50 28             	lea    edx,[eax+0x28]
c001a50b:	80 fa 07             	cmp    dl,0x7
c001a50e:	77 10                	ja     c001a520 <Vm::x87Handler(regs*)+0x336>
c001a510:	83 ec 0c             	sub    esp,0xc
c001a513:	2d d8 00 00 00       	sub    eax,0xd8
c001a518:	e9 e7 03 00 00       	jmp    c001a904 <Vm::x87Handler(regs*)+0x71a>
c001a51d:	8d 76 00             	lea    esi,[esi+0x0]
c001a520:	8d 50 20             	lea    edx,[eax+0x20]
c001a523:	80 fa 07             	cmp    dl,0x7
c001a526:	77 1c                	ja     c001a544 <Vm::x87Handler(regs*)+0x35a>
c001a528:	83 ec 0c             	sub    esp,0xc
c001a52b:	2d e0 00 00 00       	sub    eax,0xe0
c001a530:	50                   	push   eax
c001a531:	e8 74 fb ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a536:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a53d:	89 c6                	mov    esi,eax
c001a53f:	89 d7                	mov    edi,edx
c001a541:	eb 25                	jmp    c001a568 <Vm::x87Handler(regs*)+0x37e>
c001a543:	90                   	nop
c001a544:	8d 50 18             	lea    edx,[eax+0x18]
c001a547:	80 fa 07             	cmp    dl,0x7
c001a54a:	77 30                	ja     c001a57c <Vm::x87Handler(regs*)+0x392>
c001a54c:	83 ec 0c             	sub    esp,0xc
c001a54f:	6a 00                	push   0x0
c001a551:	e8 54 fb ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a556:	89 c6                	mov    esi,eax
c001a558:	89 d7                	mov    edi,edx
c001a55a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a55e:	2d e8 00 00 00       	sub    eax,0xe8
c001a563:	89 04 24             	mov    DWORD PTR [esp],eax
c001a566:	66 90                	xchg   ax,ax
c001a568:	e8 3d fb ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a56d:	57                   	push   edi
c001a56e:	56                   	push   esi
c001a56f:	52                   	push   edx
c001a570:	50                   	push   eax
c001a571:	e8 d4 fa ff ff       	call   c001a04a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a576:	e9 6d ff ff ff       	jmp    c001a4e8 <Vm::x87Handler(regs*)+0x2fe>
c001a57b:	90                   	nop
c001a57c:	8d 50 10             	lea    edx,[eax+0x10]
c001a57f:	80 fa 07             	cmp    dl,0x7
c001a582:	77 1c                	ja     c001a5a0 <Vm::x87Handler(regs*)+0x3b6>
c001a584:	83 ec 0c             	sub    esp,0xc
c001a587:	2d f0 00 00 00       	sub    eax,0xf0
c001a58c:	50                   	push   eax
c001a58d:	e8 18 fb ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a592:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a599:	89 c6                	mov    esi,eax
c001a59b:	89 d7                	mov    edi,edx
c001a59d:	eb 25                	jmp    c001a5c4 <Vm::x87Handler(regs*)+0x3da>
c001a59f:	90                   	nop
c001a5a0:	3c f7                	cmp    al,0xf7
c001a5a2:	0f 86 00 04 00 00    	jbe    c001a9a8 <Vm::x87Handler(regs*)+0x7be>
c001a5a8:	83 ec 0c             	sub    esp,0xc
c001a5ab:	6a 00                	push   0x0
c001a5ad:	e8 f8 fa ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a5b2:	89 c6                	mov    esi,eax
c001a5b4:	89 d7                	mov    edi,edx
c001a5b6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5ba:	2d f8 00 00 00       	sub    eax,0xf8
c001a5bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5c2:	66 90                	xchg   ax,ax
c001a5c4:	e8 e1 fa ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a5c9:	57                   	push   edi
c001a5ca:	56                   	push   esi
c001a5cb:	52                   	push   edx
c001a5cc:	50                   	push   eax
c001a5cd:	e8 a6 fa ff ff       	call   c001a078 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a5d2:	83 c4 1c             	add    esp,0x1c
c001a5d5:	52                   	push   edx
c001a5d6:	50                   	push   eax
c001a5d7:	6a 00                	push   0x0
c001a5d9:	e9 6a 02 00 00       	jmp    c001a848 <Vm::x87Handler(regs*)+0x65e>
c001a5de:	66 90                	xchg   ax,ax
c001a5e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5e4:	8d 50 40             	lea    edx,[eax+0x40]
c001a5e7:	80 fa 07             	cmp    dl,0x7
c001a5ea:	77 38                	ja     c001a624 <Vm::x87Handler(regs*)+0x43a>
c001a5ec:	83 ec 0c             	sub    esp,0xc
c001a5ef:	2d c0 00 00 00       	sub    eax,0xc0
c001a5f4:	50                   	push   eax
c001a5f5:	e8 b0 fa ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a5fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a601:	89 c6                	mov    esi,eax
c001a603:	89 d7                	mov    edi,edx
c001a605:	e8 a0 fa ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a60a:	57                   	push   edi
c001a60b:	56                   	push   esi
c001a60c:	52                   	push   edx
c001a60d:	50                   	push   eax
c001a60e:	e8 0d fa ff ff       	call   c001a020 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a613:	83 c4 1c             	add    esp,0x1c
c001a616:	52                   	push   edx
c001a617:	50                   	push   eax
c001a618:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a61c:	2d c0 00 00 00       	sub    eax,0xc0
c001a621:	eb 41                	jmp    c001a664 <Vm::x87Handler(regs*)+0x47a>
c001a623:	90                   	nop
c001a624:	8d 50 38             	lea    edx,[eax+0x38]
c001a627:	80 fa 07             	cmp    dl,0x7
c001a62a:	77 40                	ja     c001a66c <Vm::x87Handler(regs*)+0x482>
c001a62c:	83 ec 0c             	sub    esp,0xc
c001a62f:	2d c8 00 00 00       	sub    eax,0xc8
c001a634:	50                   	push   eax
c001a635:	e8 70 fa ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a63a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a641:	89 c6                	mov    esi,eax
c001a643:	89 d7                	mov    edi,edx
c001a645:	e8 60 fa ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a64a:	57                   	push   edi
c001a64b:	56                   	push   esi
c001a64c:	52                   	push   edx
c001a64d:	50                   	push   eax
c001a64e:	e8 06 fa ff ff       	call   c001a059 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a653:	83 c4 1c             	add    esp,0x1c
c001a656:	52                   	push   edx
c001a657:	50                   	push   eax
c001a658:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a65c:	2d c8 00 00 00       	sub    eax,0xc8
c001a661:	8d 76 00             	lea    esi,[esi+0x0]
c001a664:	50                   	push   eax
c001a665:	e9 42 fc ff ff       	jmp    c001a2ac <Vm::x87Handler(regs*)+0xc2>
c001a66a:	66 90                	xchg   ax,ax
c001a66c:	83 c0 18             	add    eax,0x18
c001a66f:	3c 07                	cmp    al,0x7
c001a671:	0f 87 6d 04 00 00    	ja     c001aae4 <Vm::x87Handler(regs*)+0x8fa>
c001a677:	83 ec 0c             	sub    esp,0xc
c001a67a:	6a 00                	push   0x0
c001a67c:	e8 29 fa ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a681:	89 c6                	mov    esi,eax
c001a683:	89 d7                	mov    edi,edx
c001a685:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a689:	2d e8 00 00 00       	sub    eax,0xe8
c001a68e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a691:	e8 14 fa ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a696:	57                   	push   edi
c001a697:	56                   	push   esi
c001a698:	52                   	push   edx
c001a699:	50                   	push   eax
c001a69a:	e8 ab f9 ff ff       	call   c001a04a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a69f:	83 c4 1c             	add    esp,0x1c
c001a6a2:	52                   	push   edx
c001a6a3:	50                   	push   eax
c001a6a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6a8:	2d e8 00 00 00       	sub    eax,0xe8
c001a6ad:	eb b5                	jmp    c001a664 <Vm::x87Handler(regs*)+0x47a>
c001a6af:	90                   	nop
c001a6b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6b4:	8d 50 40             	lea    edx,[eax+0x40]
c001a6b7:	80 fa 07             	cmp    dl,0x7
c001a6ba:	77 3c                	ja     c001a6f8 <Vm::x87Handler(regs*)+0x50e>
c001a6bc:	83 ec 0c             	sub    esp,0xc
c001a6bf:	2d c0 00 00 00       	sub    eax,0xc0
c001a6c4:	50                   	push   eax
c001a6c5:	e8 e0 f9 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a6ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a6d1:	89 c6                	mov    esi,eax
c001a6d3:	89 d7                	mov    edi,edx
c001a6d5:	e8 d0 f9 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a6da:	57                   	push   edi
c001a6db:	56                   	push   esi
c001a6dc:	52                   	push   edx
c001a6dd:	50                   	push   eax
c001a6de:	e8 3d f9 ff ff       	call   c001a020 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a6e3:	83 c4 1c             	add    esp,0x1c
c001a6e6:	52                   	push   edx
c001a6e7:	50                   	push   eax
c001a6e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6ec:	2d c0 00 00 00       	sub    eax,0xc0
c001a6f1:	e9 b2 01 00 00       	jmp    c001a8a8 <Vm::x87Handler(regs*)+0x6be>
c001a6f6:	66 90                	xchg   ax,ax
c001a6f8:	8d 50 20             	lea    edx,[eax+0x20]
c001a6fb:	80 fa 07             	cmp    dl,0x7
c001a6fe:	77 3c                	ja     c001a73c <Vm::x87Handler(regs*)+0x552>
c001a700:	83 ec 0c             	sub    esp,0xc
c001a703:	2d e0 00 00 00       	sub    eax,0xe0
c001a708:	50                   	push   eax
c001a709:	e8 9c f9 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a70e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a715:	89 c6                	mov    esi,eax
c001a717:	89 d7                	mov    edi,edx
c001a719:	e8 8c f9 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a71e:	57                   	push   edi
c001a71f:	56                   	push   esi
c001a720:	52                   	push   edx
c001a721:	50                   	push   eax
c001a722:	e8 23 f9 ff ff       	call   c001a04a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a727:	83 c4 1c             	add    esp,0x1c
c001a72a:	52                   	push   edx
c001a72b:	50                   	push   eax
c001a72c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a730:	2d e0 00 00 00       	sub    eax,0xe0
c001a735:	e9 6e 01 00 00       	jmp    c001a8a8 <Vm::x87Handler(regs*)+0x6be>
c001a73a:	66 90                	xchg   ax,ax
c001a73c:	8d 50 18             	lea    edx,[eax+0x18]
c001a73f:	80 fa 07             	cmp    dl,0x7
c001a742:	77 3c                	ja     c001a780 <Vm::x87Handler(regs*)+0x596>
c001a744:	83 ec 0c             	sub    esp,0xc
c001a747:	6a 00                	push   0x0
c001a749:	e8 5c f9 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a74e:	89 c6                	mov    esi,eax
c001a750:	89 d7                	mov    edi,edx
c001a752:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a756:	2d e8 00 00 00       	sub    eax,0xe8
c001a75b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a75e:	e8 47 f9 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a763:	57                   	push   edi
c001a764:	56                   	push   esi
c001a765:	52                   	push   edx
c001a766:	50                   	push   eax
c001a767:	e8 de f8 ff ff       	call   c001a04a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a76c:	83 c4 1c             	add    esp,0x1c
c001a76f:	52                   	push   edx
c001a770:	50                   	push   eax
c001a771:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a775:	2d e8 00 00 00       	sub    eax,0xe8
c001a77a:	e9 29 01 00 00       	jmp    c001a8a8 <Vm::x87Handler(regs*)+0x6be>
c001a77f:	90                   	nop
c001a780:	8d 50 38             	lea    edx,[eax+0x38]
c001a783:	80 fa 07             	cmp    dl,0x7
c001a786:	77 3c                	ja     c001a7c4 <Vm::x87Handler(regs*)+0x5da>
c001a788:	83 ec 0c             	sub    esp,0xc
c001a78b:	2d c8 00 00 00       	sub    eax,0xc8
c001a790:	50                   	push   eax
c001a791:	e8 14 f9 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a796:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a79d:	89 c6                	mov    esi,eax
c001a79f:	89 d7                	mov    edi,edx
c001a7a1:	e8 04 f9 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a7a6:	57                   	push   edi
c001a7a7:	56                   	push   esi
c001a7a8:	52                   	push   edx
c001a7a9:	50                   	push   eax
c001a7aa:	e8 aa f8 ff ff       	call   c001a059 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a7af:	83 c4 1c             	add    esp,0x1c
c001a7b2:	52                   	push   edx
c001a7b3:	50                   	push   eax
c001a7b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a7b8:	2d c8 00 00 00       	sub    eax,0xc8
c001a7bd:	e9 82 00 00 00       	jmp    c001a844 <Vm::x87Handler(regs*)+0x65a>
c001a7c2:	66 90                	xchg   ax,ax
c001a7c4:	3c f7                	cmp    al,0xf7
c001a7c6:	76 38                	jbe    c001a800 <Vm::x87Handler(regs*)+0x616>
c001a7c8:	83 ec 0c             	sub    esp,0xc
c001a7cb:	6a 00                	push   0x0
c001a7cd:	e8 d8 f8 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a7d2:	89 c6                	mov    esi,eax
c001a7d4:	89 d7                	mov    edi,edx
c001a7d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a7da:	2d f8 00 00 00       	sub    eax,0xf8
c001a7df:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7e2:	e8 c3 f8 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a7e7:	57                   	push   edi
c001a7e8:	56                   	push   esi
c001a7e9:	52                   	push   edx
c001a7ea:	50                   	push   eax
c001a7eb:	e8 88 f8 ff ff       	call   c001a078 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a7f0:	83 c4 1c             	add    esp,0x1c
c001a7f3:	52                   	push   edx
c001a7f4:	50                   	push   eax
c001a7f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a7f9:	2d f8 00 00 00       	sub    eax,0xf8
c001a7fe:	eb 44                	jmp    c001a844 <Vm::x87Handler(regs*)+0x65a>
c001a800:	8d 50 10             	lea    edx,[eax+0x10]
c001a803:	80 fa 07             	cmp    dl,0x7
c001a806:	0f 87 6c 01 00 00    	ja     c001a978 <Vm::x87Handler(regs*)+0x78e>
c001a80c:	83 ec 0c             	sub    esp,0xc
c001a80f:	2d f0 00 00 00       	sub    eax,0xf0
c001a814:	50                   	push   eax
c001a815:	e8 90 f8 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a81a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a821:	89 c6                	mov    esi,eax
c001a823:	89 d7                	mov    edi,edx
c001a825:	e8 80 f8 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a82a:	57                   	push   edi
c001a82b:	56                   	push   esi
c001a82c:	52                   	push   edx
c001a82d:	50                   	push   eax
c001a82e:	e8 45 f8 ff ff       	call   c001a078 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a833:	83 c4 1c             	add    esp,0x1c
c001a836:	52                   	push   edx
c001a837:	50                   	push   eax
c001a838:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a83c:	2d f0 00 00 00       	sub    eax,0xf0
c001a841:	8d 76 00             	lea    esi,[esi+0x0]
c001a844:	50                   	push   eax
c001a845:	8d 76 00             	lea    esi,[esi+0x0]
c001a848:	e8 a0 f8 ff ff       	call   c001a0ed <Vm::fpuSetReg(int, unsigned long long)>
c001a84d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a851:	e8 41 f9 ff ff       	call   c001a197 <Vm::fpuPop()>
c001a856:	e9 0d fa ff ff       	jmp    c001a268 <Vm::x87Handler(regs*)+0x7e>
c001a85b:	90                   	nop
c001a85c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a860:	8d 50 30             	lea    edx,[eax+0x30]
c001a863:	80 fa 07             	cmp    dl,0x7
c001a866:	77 20                	ja     c001a888 <Vm::x87Handler(regs*)+0x69e>
c001a868:	83 ec 0c             	sub    esp,0xc
c001a86b:	6a 00                	push   0x0
c001a86d:	e8 38 f8 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a872:	83 c4 0c             	add    esp,0xc
c001a875:	52                   	push   edx
c001a876:	50                   	push   eax
c001a877:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a87b:	2d d0 00 00 00       	sub    eax,0xd0
c001a880:	e9 df fd ff ff       	jmp    c001a664 <Vm::x87Handler(regs*)+0x47a>
c001a885:	8d 76 00             	lea    esi,[esi+0x0]
c001a888:	8d 50 28             	lea    edx,[eax+0x28]
c001a88b:	80 fa 07             	cmp    dl,0x7
c001a88e:	77 28                	ja     c001a8b8 <Vm::x87Handler(regs*)+0x6ce>
c001a890:	83 ec 0c             	sub    esp,0xc
c001a893:	6a 00                	push   0x0
c001a895:	e8 10 f8 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a89a:	83 c4 0c             	add    esp,0xc
c001a89d:	52                   	push   edx
c001a89e:	50                   	push   eax
c001a89f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a8a3:	2d d8 00 00 00       	sub    eax,0xd8
c001a8a8:	50                   	push   eax
c001a8a9:	e8 3f f8 ff ff       	call   c001a0ed <Vm::fpuSetReg(int, unsigned long long)>
c001a8ae:	e8 e4 f8 ff ff       	call   c001a197 <Vm::fpuPop()>
c001a8b3:	e9 ac f9 ff ff       	jmp    c001a264 <Vm::x87Handler(regs*)+0x7a>
c001a8b8:	8d 50 20             	lea    edx,[eax+0x20]
c001a8bb:	80 fa 07             	cmp    dl,0x7
c001a8be:	77 30                	ja     c001a8f0 <Vm::x87Handler(regs*)+0x706>
c001a8c0:	83 ec 0c             	sub    esp,0xc
c001a8c3:	2d e0 00 00 00       	sub    eax,0xe0
c001a8c8:	50                   	push   eax
c001a8c9:	e8 dc f7 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a8ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a8d5:	89 c6                	mov    esi,eax
c001a8d7:	89 d7                	mov    edi,edx
c001a8d9:	e8 cc f7 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a8de:	57                   	push   edi
c001a8df:	56                   	push   esi
c001a8e0:	52                   	push   edx
c001a8e1:	50                   	push   eax
c001a8e2:	e8 e3 f6 ff ff       	call   c0019fca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a8e7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a8eb:	e9 78 02 00 00       	jmp    c001ab68 <Vm::x87Handler(regs*)+0x97e>
c001a8f0:	8d 50 18             	lea    edx,[eax+0x18]
c001a8f3:	80 fa 07             	cmp    dl,0x7
c001a8f6:	0f 87 10 fb ff ff    	ja     c001a40c <Vm::x87Handler(regs*)+0x222>
c001a8fc:	83 ec 0c             	sub    esp,0xc
c001a8ff:	2d e8 00 00 00       	sub    eax,0xe8
c001a904:	50                   	push   eax
c001a905:	e8 a0 f7 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a90a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a911:	89 c6                	mov    esi,eax
c001a913:	89 d7                	mov    edi,edx
c001a915:	e8 90 f7 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a91a:	57                   	push   edi
c001a91b:	56                   	push   esi
c001a91c:	52                   	push   edx
c001a91d:	50                   	push   eax
c001a91e:	e8 a7 f6 ff ff       	call   c0019fca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a923:	83 c4 20             	add    esp,0x20
c001a926:	e8 6c f8 ff ff       	call   c001a197 <Vm::fpuPop()>
c001a92b:	eb 6f                	jmp    c001a99c <Vm::x87Handler(regs*)+0x7b2>
c001a92d:	8d 76 00             	lea    esi,[esi+0x0]
c001a930:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a934:	0f 85 22 01 00 00    	jne    c001aa5c <Vm::x87Handler(regs*)+0x872>
c001a93a:	66 90                	xchg   ax,ax
c001a93c:	83 ec 0c             	sub    esp,0xc
c001a93f:	6a 01                	push   0x1
c001a941:	e8 64 f7 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a946:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a94d:	89 c6                	mov    esi,eax
c001a94f:	89 d7                	mov    edi,edx
c001a951:	e8 54 f7 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a956:	57                   	push   edi
c001a957:	56                   	push   esi
c001a958:	52                   	push   edx
c001a959:	50                   	push   eax
c001a95a:	e8 6b f6 ff ff       	call   c0019fca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a95f:	83 c4 20             	add    esp,0x20
c001a962:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a966:	e8 2c f8 ff ff       	call   c001a197 <Vm::fpuPop()>
c001a96b:	e8 27 f8 ff ff       	call   c001a197 <Vm::fpuPop()>
c001a970:	e9 f7 f8 ff ff       	jmp    c001a26c <Vm::x87Handler(regs*)+0x82>
c001a975:	8d 76 00             	lea    esi,[esi+0x0]
c001a978:	3c d9                	cmp    al,0xd9
c001a97a:	0f 85 e8 02 00 00    	jne    c001ac68 <Vm::x87Handler(regs*)+0xa7e>
c001a980:	eb ba                	jmp    c001a93c <Vm::x87Handler(regs*)+0x752>
c001a982:	66 90                	xchg   ax,ax
c001a984:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a988:	0f 85 2a 03 00 00    	jne    c001acb8 <Vm::x87Handler(regs*)+0xace>
c001a98e:	0f b7 05 20 95 02 c0 	movzx  eax,WORD PTR ds:0xc0029520
c001a995:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a999:	8d 76 00             	lea    esi,[esi+0x0]
c001a99c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a9a0:	e9 c7 f8 ff ff       	jmp    c001a26c <Vm::x87Handler(regs*)+0x82>
c001a9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9a8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a9ac:	84 d2                	test   dl,dl
c001a9ae:	75 10                	jne    c001a9c0 <Vm::x87Handler(regs*)+0x7d6>
c001a9b0:	83 ec 0c             	sub    esp,0xc
c001a9b3:	ff 36                	push   DWORD PTR [esi]
c001a9b5:	e8 29 f4 ff ff       	call   c0019de3 <Vm::fpu32ToInternal(unsigned int)>
c001a9ba:	e9 39 01 00 00       	jmp    c001aaf8 <Vm::x87Handler(regs*)+0x90e>
c001a9bf:	90                   	nop
c001a9c0:	80 fa 01             	cmp    dl,0x1
c001a9c3:	75 0f                	jne    c001a9d4 <Vm::x87Handler(regs*)+0x7ea>
c001a9c5:	83 ec 0c             	sub    esp,0xc
c001a9c8:	ff 36                	push   DWORD PTR [esi]
c001a9ca:	e8 14 f4 ff ff       	call   c0019de3 <Vm::fpu32ToInternal(unsigned int)>
c001a9cf:	e9 b4 02 00 00       	jmp    c001ac88 <Vm::x87Handler(regs*)+0xa9e>
c001a9d4:	80 fa 04             	cmp    dl,0x4
c001a9d7:	75 0f                	jne    c001a9e8 <Vm::x87Handler(regs*)+0x7fe>
c001a9d9:	83 ec 0c             	sub    esp,0xc
c001a9dc:	ff 36                	push   DWORD PTR [esi]
c001a9de:	e8 00 f4 ff ff       	call   c0019de3 <Vm::fpu32ToInternal(unsigned int)>
c001a9e3:	e9 9c 01 00 00       	jmp    c001ab84 <Vm::x87Handler(regs*)+0x99a>
c001a9e8:	80 fa 05             	cmp    dl,0x5
c001a9eb:	75 1b                	jne    c001aa08 <Vm::x87Handler(regs*)+0x81e>
c001a9ed:	83 ec 0c             	sub    esp,0xc
c001a9f0:	6a 00                	push   0x0
c001a9f2:	e8 b3 f6 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001a9f7:	89 c7                	mov    edi,eax
c001a9f9:	89 d5                	mov    ebp,edx
c001a9fb:	58                   	pop    eax
c001a9fc:	ff 36                	push   DWORD PTR [esi]
c001a9fe:	e8 e0 f3 ff ff       	call   c0019de3 <Vm::fpu32ToInternal(unsigned int)>
c001aa03:	e9 bc 01 00 00       	jmp    c001abc4 <Vm::x87Handler(regs*)+0x9da>
c001aa08:	80 fa 06             	cmp    dl,0x6
c001aa0b:	75 0f                	jne    c001aa1c <Vm::x87Handler(regs*)+0x832>
c001aa0d:	83 ec 0c             	sub    esp,0xc
c001aa10:	ff 36                	push   DWORD PTR [esi]
c001aa12:	e8 cc f3 ff ff       	call   c0019de3 <Vm::fpu32ToInternal(unsigned int)>
c001aa17:	e9 cc 01 00 00       	jmp    c001abe8 <Vm::x87Handler(regs*)+0x9fe>
c001aa1c:	31 c0                	xor    eax,eax
c001aa1e:	80 fa 07             	cmp    dl,0x7
c001aa21:	0f 85 d5 02 00 00    	jne    c001acfc <Vm::x87Handler(regs*)+0xb12>
c001aa27:	83 ec 0c             	sub    esp,0xc
c001aa2a:	6a 00                	push   0x0
c001aa2c:	e8 79 f6 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001aa31:	89 c7                	mov    edi,eax
c001aa33:	89 d5                	mov    ebp,edx
c001aa35:	58                   	pop    eax
c001aa36:	ff 36                	push   DWORD PTR [esi]
c001aa38:	e8 a6 f3 ff ff       	call   c0019de3 <Vm::fpu32ToInternal(unsigned int)>
c001aa3d:	e9 ee 01 00 00       	jmp    c001ac30 <Vm::x87Handler(regs*)+0xa46>
c001aa42:	66 90                	xchg   ax,ax
c001aa44:	80 fa 03             	cmp    dl,0x3
c001aa47:	0f 85 f7 01 00 00    	jne    c001ac44 <Vm::x87Handler(regs*)+0xa5a>
c001aa4d:	e8 45 f7 ff ff       	call   c001a197 <Vm::fpuPop()>
c001aa52:	51                   	push   ecx
c001aa53:	51                   	push   ecx
c001aa54:	e9 03 02 00 00       	jmp    c001ac5c <Vm::x87Handler(regs*)+0xa72>
c001aa59:	8d 76 00             	lea    esi,[esi+0x0]
c001aa5c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa60:	80 fa 01             	cmp    dl,0x1
c001aa63:	75 0b                	jne    c001aa70 <Vm::x87Handler(regs*)+0x886>
c001aa65:	57                   	push   edi
c001aa66:	57                   	push   edi
c001aa67:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa69:	e9 0e 02 00 00       	jmp    c001ac7c <Vm::x87Handler(regs*)+0xa92>
c001aa6e:	66 90                	xchg   ax,ax
c001aa70:	80 fa 04             	cmp    dl,0x4
c001aa73:	75 13                	jne    c001aa88 <Vm::x87Handler(regs*)+0x89e>
c001aa75:	31 d2                	xor    edx,edx
c001aa77:	51                   	push   ecx
c001aa78:	51                   	push   ecx
c001aa79:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa7b:	52                   	push   edx
c001aa7c:	50                   	push   eax
c001aa7d:	e8 4a f4 ff ff       	call   c0019ecc <Vm::fpuLongToFloat(long long)>
c001aa82:	e9 fd 00 00 00       	jmp    c001ab84 <Vm::x87Handler(regs*)+0x99a>
c001aa87:	90                   	nop
c001aa88:	31 c0                	xor    eax,eax
c001aa8a:	80 fa 07             	cmp    dl,0x7
c001aa8d:	0f 85 69 02 00 00    	jne    c001acfc <Vm::x87Handler(regs*)+0xb12>
c001aa93:	83 ec 0c             	sub    esp,0xc
c001aa96:	6a 00                	push   0x0
c001aa98:	e8 0d f6 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001aa9d:	89 c7                	mov    edi,eax
c001aa9f:	89 d5                	mov    ebp,edx
c001aaa1:	58                   	pop    eax
c001aaa2:	8b 06                	mov    eax,DWORD PTR [esi]
c001aaa4:	5a                   	pop    edx
c001aaa5:	31 d2                	xor    edx,edx
c001aaa7:	52                   	push   edx
c001aaa8:	50                   	push   eax
c001aaa9:	e8 1e f4 ff ff       	call   c0019ecc <Vm::fpuLongToFloat(long long)>
c001aaae:	e9 7d 01 00 00       	jmp    c001ac30 <Vm::x87Handler(regs*)+0xa46>
c001aab3:	90                   	nop
c001aab4:	84 d2                	test   dl,dl
c001aab6:	75 10                	jne    c001aac8 <Vm::x87Handler(regs*)+0x8de>
c001aab8:	31 d2                	xor    edx,edx
c001aaba:	55                   	push   ebp
c001aabb:	55                   	push   ebp
c001aabc:	8b 06                	mov    eax,DWORD PTR [esi]
c001aabe:	52                   	push   edx
c001aabf:	50                   	push   eax
c001aac0:	e9 03 02 00 00       	jmp    c001acc8 <Vm::x87Handler(regs*)+0xade>
c001aac5:	8d 76 00             	lea    esi,[esi+0x0]
c001aac8:	31 c0                	xor    eax,eax
c001aaca:	80 fa 02             	cmp    dl,0x2
c001aacd:	0f 85 29 02 00 00    	jne    c001acfc <Vm::x87Handler(regs*)+0xb12>
c001aad3:	83 ec 0c             	sub    esp,0xc
c001aad6:	6a 00                	push   0x0
c001aad8:	e8 cd f5 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001aadd:	59                   	pop    ecx
c001aade:	5f                   	pop    edi
c001aadf:	e9 18 f9 ff ff       	jmp    c001a3fc <Vm::x87Handler(regs*)+0x212>
c001aae4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aae8:	84 d2                	test   dl,dl
c001aaea:	75 2c                	jne    c001ab18 <Vm::x87Handler(regs*)+0x92e>
c001aaec:	50                   	push   eax
c001aaed:	50                   	push   eax
c001aaee:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aaf1:	ff 36                	push   DWORD PTR [esi]
c001aaf3:	e8 30 f3 ff ff       	call   c0019e28 <Vm::fpu64ToInternal(unsigned long long)>
c001aaf8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aaff:	89 c6                	mov    esi,eax
c001ab01:	89 d7                	mov    edi,edx
c001ab03:	e8 a2 f5 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001ab08:	57                   	push   edi
c001ab09:	56                   	push   esi
c001ab0a:	52                   	push   edx
c001ab0b:	50                   	push   eax
c001ab0c:	e8 0f f5 ff ff       	call   c001a020 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ab11:	e9 8e 01 00 00       	jmp    c001aca4 <Vm::x87Handler(regs*)+0xaba>
c001ab16:	66 90                	xchg   ax,ax
c001ab18:	80 fa 01             	cmp    dl,0x1
c001ab1b:	75 13                	jne    c001ab30 <Vm::x87Handler(regs*)+0x946>
c001ab1d:	50                   	push   eax
c001ab1e:	50                   	push   eax
c001ab1f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab22:	ff 36                	push   DWORD PTR [esi]
c001ab24:	e8 ff f2 ff ff       	call   c0019e28 <Vm::fpu64ToInternal(unsigned long long)>
c001ab29:	e9 5a 01 00 00       	jmp    c001ac88 <Vm::x87Handler(regs*)+0xa9e>
c001ab2e:	66 90                	xchg   ax,ax
c001ab30:	80 fa 02             	cmp    dl,0x2
c001ab33:	0f 85 03 f9 ff ff    	jne    c001a43c <Vm::x87Handler(regs*)+0x252>
c001ab39:	55                   	push   ebp
c001ab3a:	55                   	push   ebp
c001ab3b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab3e:	ff 36                	push   DWORD PTR [esi]
c001ab40:	e8 e3 f2 ff ff       	call   c0019e28 <Vm::fpu64ToInternal(unsigned long long)>
c001ab45:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab4c:	89 c6                	mov    esi,eax
c001ab4e:	89 d7                	mov    edi,edx
c001ab50:	e8 55 f5 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001ab55:	57                   	push   edi
c001ab56:	56                   	push   esi
c001ab57:	52                   	push   edx
c001ab58:	50                   	push   eax
c001ab59:	e8 6c f4 ff ff       	call   c0019fca <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ab5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ab62:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ab65:	8d 76 00             	lea    esi,[esi+0x0]
c001ab68:	83 c4 20             	add    esp,0x20
c001ab6b:	e9 fc f6 ff ff       	jmp    c001a26c <Vm::x87Handler(regs*)+0x82>
c001ab70:	80 fa 04             	cmp    dl,0x4
c001ab73:	75 2f                	jne    c001aba4 <Vm::x87Handler(regs*)+0x9ba>
c001ab75:	51                   	push   ecx
c001ab76:	51                   	push   ecx
c001ab77:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab7a:	ff 36                	push   DWORD PTR [esi]
c001ab7c:	e8 a7 f2 ff ff       	call   c0019e28 <Vm::fpu64ToInternal(unsigned long long)>
c001ab81:	8d 76 00             	lea    esi,[esi+0x0]
c001ab84:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab8b:	89 c6                	mov    esi,eax
c001ab8d:	89 d7                	mov    edi,edx
c001ab8f:	e8 16 f5 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001ab94:	57                   	push   edi
c001ab95:	56                   	push   esi
c001ab96:	52                   	push   edx
c001ab97:	50                   	push   eax
c001ab98:	e8 ad f4 ff ff       	call   c001a04a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ab9d:	e9 02 01 00 00       	jmp    c001aca4 <Vm::x87Handler(regs*)+0xaba>
c001aba2:	66 90                	xchg   ax,ax
c001aba4:	80 fa 05             	cmp    dl,0x5
c001aba7:	75 2b                	jne    c001abd4 <Vm::x87Handler(regs*)+0x9ea>
c001aba9:	83 ec 0c             	sub    esp,0xc
c001abac:	6a 00                	push   0x0
c001abae:	e8 f7 f4 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001abb3:	89 c7                	mov    edi,eax
c001abb5:	89 d5                	mov    ebp,edx
c001abb7:	58                   	pop    eax
c001abb8:	5a                   	pop    edx
c001abb9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001abbc:	ff 36                	push   DWORD PTR [esi]
c001abbe:	e8 65 f2 ff ff       	call   c0019e28 <Vm::fpu64ToInternal(unsigned long long)>
c001abc3:	90                   	nop
c001abc4:	83 c4 10             	add    esp,0x10
c001abc7:	55                   	push   ebp
c001abc8:	57                   	push   edi
c001abc9:	52                   	push   edx
c001abca:	50                   	push   eax
c001abcb:	e8 7a f4 ff ff       	call   c001a04a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001abd0:	eb 6a                	jmp    c001ac3c <Vm::x87Handler(regs*)+0xa52>
c001abd2:	66 90                	xchg   ax,ax
c001abd4:	80 fa 06             	cmp    dl,0x6
c001abd7:	75 2f                	jne    c001ac08 <Vm::x87Handler(regs*)+0xa1e>
c001abd9:	51                   	push   ecx
c001abda:	51                   	push   ecx
c001abdb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001abde:	ff 36                	push   DWORD PTR [esi]
c001abe0:	e8 43 f2 ff ff       	call   c0019e28 <Vm::fpu64ToInternal(unsigned long long)>
c001abe5:	8d 76 00             	lea    esi,[esi+0x0]
c001abe8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001abef:	89 c6                	mov    esi,eax
c001abf1:	89 d7                	mov    edi,edx
c001abf3:	e8 b2 f4 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001abf8:	57                   	push   edi
c001abf9:	56                   	push   esi
c001abfa:	52                   	push   edx
c001abfb:	50                   	push   eax
c001abfc:	e8 77 f4 ff ff       	call   c001a078 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ac01:	e9 9e 00 00 00       	jmp    c001aca4 <Vm::x87Handler(regs*)+0xaba>
c001ac06:	66 90                	xchg   ax,ax
c001ac08:	31 c0                	xor    eax,eax
c001ac0a:	80 fa 07             	cmp    dl,0x7
c001ac0d:	0f 85 e9 00 00 00    	jne    c001acfc <Vm::x87Handler(regs*)+0xb12>
c001ac13:	83 ec 0c             	sub    esp,0xc
c001ac16:	6a 00                	push   0x0
c001ac18:	e8 8d f4 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001ac1d:	89 c7                	mov    edi,eax
c001ac1f:	89 d5                	mov    ebp,edx
c001ac21:	58                   	pop    eax
c001ac22:	5a                   	pop    edx
c001ac23:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ac26:	ff 36                	push   DWORD PTR [esi]
c001ac28:	e8 fb f1 ff ff       	call   c0019e28 <Vm::fpu64ToInternal(unsigned long long)>
c001ac2d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac30:	83 c4 10             	add    esp,0x10
c001ac33:	55                   	push   ebp
c001ac34:	57                   	push   edi
c001ac35:	52                   	push   edx
c001ac36:	50                   	push   eax
c001ac37:	e8 3c f4 ff ff       	call   c001a078 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ac3c:	83 c4 0c             	add    esp,0xc
c001ac3f:	eb 67                	jmp    c001aca8 <Vm::x87Handler(regs*)+0xabe>
c001ac41:	8d 76 00             	lea    esi,[esi+0x0]
c001ac44:	31 c0                	xor    eax,eax
c001ac46:	80 fa 02             	cmp    dl,0x2
c001ac49:	0f 85 ad 00 00 00    	jne    c001acfc <Vm::x87Handler(regs*)+0xb12>
c001ac4f:	83 ec 0c             	sub    esp,0xc
c001ac52:	6a 00                	push   0x0
c001ac54:	e8 51 f4 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001ac59:	59                   	pop    ecx
c001ac5a:	5f                   	pop    edi
c001ac5b:	90                   	nop
c001ac5c:	52                   	push   edx
c001ac5d:	50                   	push   eax
c001ac5e:	e8 77 f1 ff ff       	call   c0019dda <Vm::fpuInternalTo64(unsigned long long)>
c001ac63:	e9 84 00 00 00       	jmp    c001acec <Vm::x87Handler(regs*)+0xb02>
c001ac68:	31 c0                	xor    eax,eax
c001ac6a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001ac6f:	0f 85 87 00 00 00    	jne    c001acfc <Vm::x87Handler(regs*)+0xb12>
c001ac75:	50                   	push   eax
c001ac76:	50                   	push   eax
c001ac77:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ac7a:	66 90                	xchg   ax,ax
c001ac7c:	31 d2                	xor    edx,edx
c001ac7e:	52                   	push   edx
c001ac7f:	50                   	push   eax
c001ac80:	e8 47 f2 ff ff       	call   c0019ecc <Vm::fpuLongToFloat(long long)>
c001ac85:	8d 76 00             	lea    esi,[esi+0x0]
c001ac88:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac8f:	89 c6                	mov    esi,eax
c001ac91:	89 d7                	mov    edi,edx
c001ac93:	e8 12 f4 ff ff       	call   c001a0aa <Vm::fpuGetReg(int)>
c001ac98:	57                   	push   edi
c001ac99:	56                   	push   esi
c001ac9a:	52                   	push   edx
c001ac9b:	50                   	push   eax
c001ac9c:	e8 b8 f3 ff ff       	call   c001a059 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001aca1:	8d 76 00             	lea    esi,[esi+0x0]
c001aca4:	83 c4 1c             	add    esp,0x1c
c001aca7:	90                   	nop
c001aca8:	52                   	push   edx
c001aca9:	50                   	push   eax
c001acaa:	6a 00                	push   0x0
c001acac:	e8 3c f4 ff ff       	call   c001a0ed <Vm::fpuSetReg(int, unsigned long long)>
c001acb1:	e9 7a f7 ff ff       	jmp    c001a430 <Vm::x87Handler(regs*)+0x246>
c001acb6:	66 90                	xchg   ax,ax
c001acb8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001acbc:	80 fa 05             	cmp    dl,0x5
c001acbf:	75 13                	jne    c001acd4 <Vm::x87Handler(regs*)+0xaea>
c001acc1:	55                   	push   ebp
c001acc2:	55                   	push   ebp
c001acc3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001acc6:	ff 36                	push   DWORD PTR [esi]
c001acc8:	e8 c3 f1 ff ff       	call   c0019e90 <Vm::fpuULongToFloat(unsigned long long)>
c001accd:	e9 52 f7 ff ff       	jmp    c001a424 <Vm::x87Handler(regs*)+0x23a>
c001acd2:	66 90                	xchg   ax,ax
c001acd4:	31 c0                	xor    eax,eax
c001acd6:	80 fa 07             	cmp    dl,0x7
c001acd9:	75 21                	jne    c001acfc <Vm::x87Handler(regs*)+0xb12>
c001acdb:	e8 b7 f4 ff ff       	call   c001a197 <Vm::fpuPop()>
c001ace0:	51                   	push   ecx
c001ace1:	51                   	push   ecx
c001ace2:	52                   	push   edx
c001ace3:	50                   	push   eax
c001ace4:	e8 48 f1 ff ff       	call   c0019e31 <Vm::fpuFloatToLong(unsigned long long)>
c001ace9:	8d 76 00             	lea    esi,[esi+0x0]
c001acec:	83 c4 10             	add    esp,0x10
c001acef:	89 06                	mov    DWORD PTR [esi],eax
c001acf1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001acf4:	e9 7b f7 ff ff       	jmp    c001a474 <Vm::x87Handler(regs*)+0x28a>
c001acf9:	8d 76 00             	lea    esi,[esi+0x0]
c001acfc:	83 c4 1c             	add    esp,0x1c
c001acff:	5b                   	pop    ebx
c001ad00:	5e                   	pop    esi
c001ad01:	5f                   	pop    edi
c001ad02:	5d                   	pop    ebp
c001ad03:	c3                   	ret    

c001ad04 <__static_initialization_and_destruction_0(int, int)>:
c001ad04:	83 ec 0c             	sub    esp,0xc
c001ad07:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ad0c:	75 1a                	jne    c001ad28 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ad0e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ad16:	75 10                	jne    c001ad28 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ad18:	83 ec 0c             	sub    esp,0xc
c001ad1b:	68 20 95 02 c0       	push   0xc0029520
c001ad20:	e8 c3 83 00 00       	call   c00230e8 <Vm::_FPUState::_FPUState()>
c001ad25:	83 c4 10             	add    esp,0x10
c001ad28:	90                   	nop
c001ad29:	83 c4 0c             	add    esp,0xc
c001ad2c:	c3                   	ret    
c001ad2d:	8d 76 00             	lea    esi,[esi+0x0]

c001ad30 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ad30:	83 ec 0c             	sub    esp,0xc
c001ad33:	83 ec 08             	sub    esp,0x8
c001ad36:	68 ff ff 00 00       	push   0xffff
c001ad3b:	6a 01                	push   0x1
c001ad3d:	e8 c2 ff ff ff       	call   c001ad04 <__static_initialization_and_destruction_0(int, int)>
c001ad42:	83 c4 10             	add    esp,0x10
c001ad45:	83 c4 0c             	add    esp,0xc
c001ad48:	c3                   	ret    
c001ad49:	66 90                	xchg   ax,ax
c001ad4b:	90                   	nop

c001ad4c <FAT::getName()>:
c001ad4c:	b8 6c 63 02 c0       	mov    eax,0xc002636c
c001ad51:	c3                   	ret    
c001ad52:	66 90                	xchg   ax,ax

c001ad54 <FAT::tell(void*, unsigned long long*)>:
c001ad54:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ad59:	75 09                	jne    c001ad64 <FAT::tell(void*, unsigned long long*)+0x10>
c001ad5b:	b8 04 00 00 00       	mov    eax,0x4
c001ad60:	c3                   	ret    
c001ad61:	8d 76 00             	lea    esi,[esi+0x0]
c001ad64:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad69:	75 09                	jne    c001ad74 <FAT::tell(void*, unsigned long long*)+0x20>
c001ad6b:	b8 04 00 00 00       	mov    eax,0x4
c001ad70:	c3                   	ret    
c001ad71:	8d 76 00             	lea    esi,[esi+0x0]
c001ad74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad78:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ad7b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ad7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad82:	89 01                	mov    DWORD PTR [ecx],eax
c001ad84:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ad87:	b8 00 00 00 00       	mov    eax,0x0
c001ad8c:	c3                   	ret    
c001ad8d:	90                   	nop
c001ad8e:	66 90                	xchg   ax,ax

c001ad90 <FAT::stat(void*, unsigned long long*)>:
c001ad90:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ad95:	75 09                	jne    c001ada0 <FAT::stat(void*, unsigned long long*)+0x10>
c001ad97:	b8 04 00 00 00       	mov    eax,0x4
c001ad9c:	c3                   	ret    
c001ad9d:	8d 76 00             	lea    esi,[esi+0x0]
c001ada0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ada5:	75 09                	jne    c001adb0 <FAT::stat(void*, unsigned long long*)+0x20>
c001ada7:	b8 04 00 00 00       	mov    eax,0x4
c001adac:	c3                   	ret    
c001adad:	8d 76 00             	lea    esi,[esi+0x0]
c001adb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adb4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001adb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001adba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001adbe:	89 01                	mov    DWORD PTR [ecx],eax
c001adc0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001adc3:	b8 00 00 00 00       	mov    eax,0x0
c001adc8:	c3                   	ret    
c001adc9:	90                   	nop
c001adca:	66 90                	xchg   ax,ax

c001adcc <FAT::~FAT()>:
c001adcc:	83 ec 0c             	sub    esp,0xc
c001adcf:	ba b8 63 02 c0       	mov    edx,0xc00263b8
c001add4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add8:	89 10                	mov    DWORD PTR [eax],edx
c001adda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adde:	83 ec 0c             	sub    esp,0xc
c001ade1:	50                   	push   eax
c001ade2:	e8 4f 22 ff ff       	call   c000d036 <Filesystem::~Filesystem()>
c001ade7:	83 c4 10             	add    esp,0x10
c001adea:	90                   	nop
c001adeb:	83 c4 0c             	add    esp,0xc
c001adee:	c3                   	ret    
c001adef:	90                   	nop

c001adf0 <FAT::~FAT()>:
c001adf0:	83 ec 0c             	sub    esp,0xc
c001adf3:	83 ec 0c             	sub    esp,0xc
c001adf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adfa:	e8 cd ff ff ff       	call   c001adcc <FAT::~FAT()>
c001adff:	83 c4 10             	add    esp,0x10
c001ae02:	83 ec 08             	sub    esp,0x8
c001ae05:	6a 08                	push   0x8
c001ae07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae0b:	e8 0a 1e ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001ae10:	83 c4 10             	add    esp,0x10
c001ae13:	83 c4 0c             	add    esp,0xc
c001ae16:	c3                   	ret    
c001ae17:	90                   	nop

c001ae18 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ae18:	83 ec 1c             	sub    esp,0x1c
c001ae1b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ae22:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ae27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae2b:	8b 04 85 a0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a60]
c001ae32:	83 f8 ff             	cmp    eax,0xffffffff
c001ae35:	75 35                	jne    c001ae6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001ae37:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ae3b:	88 c2                	mov    dl,al
c001ae3d:	a1 80 95 02 c0       	mov    eax,ds:0xc0029580
c001ae42:	01 d0                	add    eax,edx
c001ae44:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ae48:	8b 15 80 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029580
c001ae4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae52:	89 14 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],edx
c001ae59:	a1 80 95 02 c0       	mov    eax,ds:0xc0029580
c001ae5e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ae62:	89 14 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],edx
c001ae69:	eb 19                	jmp    c001ae84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001ae6b:	90                   	nop
c001ae6c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ae70:	88 c2                	mov    dl,al
c001ae72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae76:	8b 04 85 a0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a60]
c001ae7d:	01 d0                	add    eax,edx
c001ae7f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ae83:	90                   	nop
c001ae84:	83 ec 04             	sub    esp,0x4
c001ae87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae8f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ae93:	50                   	push   eax
c001ae94:	e8 99 bd fe ff       	call   c0006c32 <f_getlabel>
c001ae99:	83 c4 10             	add    esp,0x10
c001ae9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aea0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aea5:	75 09                	jne    c001aeb0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001aea7:	b8 00 00 00 00       	mov    eax,0x0
c001aeac:	eb 0a                	jmp    c001aeb8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001aeae:	66 90                	xchg   ax,ax
c001aeb0:	b8 01 00 00 00       	mov    eax,0x1
c001aeb5:	8d 76 00             	lea    esi,[esi+0x0]
c001aeb8:	83 c4 1c             	add    esp,0x1c
c001aebb:	c3                   	ret    

c001aebc <FAT::setlabel(LogicalDisk*, int, char*)>:
c001aebc:	57                   	push   edi
c001aebd:	83 ec 58             	sub    esp,0x58
c001aec0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001aec8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aecc:	b9 0f 00 00 00       	mov    ecx,0xf
c001aed1:	b8 00 00 00 00       	mov    eax,0x0
c001aed6:	fc                   	cld    
c001aed7:	89 d7                	mov    edi,edx
c001aed9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aedb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aedf:	8b 04 85 a0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a60]
c001aee6:	83 f8 ff             	cmp    eax,0xffffffff
c001aee9:	75 35                	jne    c001af20 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001aeeb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aeef:	88 c2                	mov    dl,al
c001aef1:	a1 80 95 02 c0       	mov    eax,ds:0xc0029580
c001aef6:	01 d0                	add    eax,edx
c001aef8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aefc:	8b 15 80 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029580
c001af02:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001af06:	89 14 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],edx
c001af0d:	a1 80 95 02 c0       	mov    eax,ds:0xc0029580
c001af12:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001af16:	89 14 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],edx
c001af1d:	eb 19                	jmp    c001af38 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001af1f:	90                   	nop
c001af20:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001af24:	88 c2                	mov    dl,al
c001af26:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001af2a:	8b 04 85 a0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a60]
c001af31:	01 d0                	add    eax,edx
c001af33:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001af37:	90                   	nop
c001af38:	83 ec 08             	sub    esp,0x8
c001af3b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001af3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af43:	50                   	push   eax
c001af44:	e8 37 59 fe ff       	call   c0000880 <strcat>
c001af49:	83 c4 10             	add    esp,0x10
c001af4c:	83 ec 0c             	sub    esp,0xc
c001af4f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af53:	50                   	push   eax
c001af54:	e8 c7 be fe ff       	call   c0006e20 <f_setlabel>
c001af59:	83 c4 10             	add    esp,0x10
c001af5c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001af60:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001af65:	75 09                	jne    c001af70 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001af67:	b8 00 00 00 00       	mov    eax,0x0
c001af6c:	eb 0a                	jmp    c001af78 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001af6e:	66 90                	xchg   ax,ax
c001af70:	b8 01 00 00 00       	mov    eax,0x1
c001af75:	8d 76 00             	lea    esi,[esi+0x0]
c001af78:	83 c4 58             	add    esp,0x58
c001af7b:	5f                   	pop    edi
c001af7c:	c3                   	ret    
c001af7d:	90                   	nop
c001af7e:	66 90                	xchg   ax,ax

c001af80 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001af80:	83 ec 2c             	sub    esp,0x2c
c001af83:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001af8b:	83 ec 08             	sub    esp,0x8
c001af8e:	68 90 63 02 c0       	push   0xc0026390
c001af93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af97:	e8 30 58 fe ff       	call   c00007cc <strcmp>
c001af9c:	83 c4 10             	add    esp,0x10
c001af9f:	85 c0                	test   eax,eax
c001afa1:	0f 94 c0             	sete   al
c001afa4:	84 c0                	test   al,al
c001afa6:	74 10                	je     c001afb8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001afa8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001afb0:	e9 b3 00 00 00       	jmp    c001b068 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001afb5:	8d 76 00             	lea    esi,[esi+0x0]
c001afb8:	83 ec 08             	sub    esp,0x8
c001afbb:	68 82 63 02 c0       	push   0xc0026382
c001afc0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001afc4:	e8 03 58 fe ff       	call   c00007cc <strcmp>
c001afc9:	83 c4 10             	add    esp,0x10
c001afcc:	85 c0                	test   eax,eax
c001afce:	0f 94 c0             	sete   al
c001afd1:	84 c0                	test   al,al
c001afd3:	74 0f                	je     c001afe4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001afd5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001afdd:	e9 86 00 00 00       	jmp    c001b068 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001afe2:	66 90                	xchg   ax,ax
c001afe4:	83 ec 08             	sub    esp,0x8
c001afe7:	68 88 63 02 c0       	push   0xc0026388
c001afec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aff0:	e8 d7 57 fe ff       	call   c00007cc <strcmp>
c001aff5:	83 c4 10             	add    esp,0x10
c001aff8:	85 c0                	test   eax,eax
c001affa:	0f 94 c0             	sete   al
c001affd:	84 c0                	test   al,al
c001afff:	74 0b                	je     c001b00c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b001:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b009:	eb 5d                	jmp    c001b068 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b00b:	90                   	nop
c001b00c:	83 ec 08             	sub    esp,0x8
c001b00f:	68 4c 38 02 c0       	push   0xc002384c
c001b014:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b018:	e8 af 57 fe ff       	call   c00007cc <strcmp>
c001b01d:	83 c4 10             	add    esp,0x10
c001b020:	85 c0                	test   eax,eax
c001b022:	0f 94 c0             	sete   al
c001b025:	84 c0                	test   al,al
c001b027:	74 0b                	je     c001b034 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b029:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b031:	eb 35                	jmp    c001b068 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b033:	90                   	nop
c001b034:	83 ec 08             	sub    esp,0x8
c001b037:	68 8e 63 02 c0       	push   0xc002638e
c001b03c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b040:	e8 87 57 fe ff       	call   c00007cc <strcmp>
c001b045:	83 c4 10             	add    esp,0x10
c001b048:	85 c0                	test   eax,eax
c001b04a:	0f 94 c0             	sete   al
c001b04d:	84 c0                	test   al,al
c001b04f:	74 0b                	je     c001b05c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b051:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b059:	eb 0d                	jmp    c001b068 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b05b:	90                   	nop
c001b05c:	b8 08 00 00 00       	mov    eax,0x8
c001b061:	e9 ea 00 00 00       	jmp    c001b150 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b066:	66 90                	xchg   ax,ax
c001b068:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b06f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b078:	8b 04 85 a0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a60]
c001b07f:	83 f8 ff             	cmp    eax,0xffffffff
c001b082:	75 34                	jne    c001b0b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b084:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b088:	88 c2                	mov    dl,al
c001b08a:	a1 80 95 02 c0       	mov    eax,ds:0xc0029580
c001b08f:	01 d0                	add    eax,edx
c001b091:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b095:	8b 15 80 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029580
c001b09b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b09f:	89 14 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],edx
c001b0a6:	a1 80 95 02 c0       	mov    eax,ds:0xc0029580
c001b0ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b0af:	89 14 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],edx
c001b0b6:	eb 18                	jmp    c001b0d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b0b8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b0bc:	88 c2                	mov    dl,al
c001b0be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b0c2:	8b 04 85 a0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a60]
c001b0c9:	01 d0                	add    eax,edx
c001b0cb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b0cf:	90                   	nop
c001b0d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0d4:	88 04 24             	mov    BYTE PTR [esp],al
c001b0d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b0db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b0df:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b0e7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b0ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b0f4:	83 ec 0c             	sub    esp,0xc
c001b0f7:	68 00 20 00 00       	push   0x2000
c001b0fc:	e8 0e e9 fe ff       	call   c0009a0f <malloc>
c001b101:	83 c4 10             	add    esp,0x10
c001b104:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b108:	68 00 20 00 00       	push   0x2000
c001b10d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b111:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b115:	50                   	push   eax
c001b116:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b11a:	50                   	push   eax
c001b11b:	e8 81 c3 fe ff       	call   c00074a1 <f_mkfs>
c001b120:	83 c4 10             	add    esp,0x10
c001b123:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b127:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b12c:	75 0a                	jne    c001b138 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b12e:	b8 00 00 00 00       	mov    eax,0x0
c001b133:	eb 1b                	jmp    c001b150 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b135:	8d 76 00             	lea    esi,[esi+0x0]
c001b138:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b13d:	75 09                	jne    c001b148 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b13f:	b8 09 00 00 00       	mov    eax,0x9
c001b144:	eb 0a                	jmp    c001b150 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b146:	66 90                	xchg   ax,ax
c001b148:	b8 01 00 00 00       	mov    eax,0x1
c001b14d:	8d 76 00             	lea    esi,[esi+0x0]
c001b150:	83 c4 2c             	add    esp,0x2c
c001b153:	c3                   	ret    

c001b154 <FAT::tryMount(LogicalDisk*, int)>:
c001b154:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b15a:	a1 80 95 02 c0       	mov    eax,ds:0xc0029580
c001b15f:	83 f8 14             	cmp    eax,0x14
c001b162:	75 18                	jne    c001b17c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b164:	83 ec 0c             	sub    esp,0xc
c001b167:	68 94 63 02 c0       	push   0xc0026394
c001b16c:	e8 96 98 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001b171:	83 c4 10             	add    esp,0x10
c001b174:	b0 00                	mov    al,0x0
c001b176:	e9 e9 01 00 00       	jmp    c001b364 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b17b:	90                   	nop
c001b17c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b183:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b189:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b18f:	3d 00 02 00 00       	cmp    eax,0x200
c001b194:	74 0a                	je     c001b1a0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b196:	b0 00                	mov    al,0x0
c001b198:	e9 c7 01 00 00       	jmp    c001b364 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b19d:	8d 76 00             	lea    esi,[esi+0x0]
c001b1a0:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b1a8:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b1af:	8b 04 85 a0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a60]
c001b1b6:	83 f8 ff             	cmp    eax,0xffffffff
c001b1b9:	74 09                	je     c001b1c4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b1bb:	b0 01                	mov    al,0x1
c001b1bd:	e9 a2 01 00 00       	jmp    c001b364 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b1c2:	66 90                	xchg   ax,ax
c001b1c4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b1ce:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b1d6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b1dd:	88 c2                	mov    dl,al
c001b1df:	a1 80 95 02 c0       	mov    eax,ds:0xc0029580
c001b1e4:	01 d0                	add    eax,edx
c001b1e6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b1ed:	8b 15 80 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029580
c001b1f3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b1fa:	89 14 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],edx
c001b201:	a1 80 95 02 c0       	mov    eax,ds:0xc0029580
c001b206:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b20d:	89 14 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],edx
c001b214:	83 ec 0c             	sub    esp,0xc
c001b217:	68 54 02 00 00       	push   0x254
c001b21c:	e8 ee e7 fe ff       	call   c0009a0f <malloc>
c001b221:	83 c4 10             	add    esp,0x10
c001b224:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b22b:	83 ec 04             	sub    esp,0x4
c001b22e:	6a 00                	push   0x0
c001b230:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b237:	50                   	push   eax
c001b238:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b23f:	e8 e5 9b fe ff       	call   c0004e29 <f_mount>
c001b244:	83 c4 10             	add    esp,0x10
c001b247:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b24e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b256:	74 1c                	je     c001b274 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b258:	83 ec 0c             	sub    esp,0xc
c001b25b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b262:	e8 c8 e7 fe ff       	call   c0009a2f <rfree>
c001b267:	83 c4 10             	add    esp,0x10
c001b26a:	b0 00                	mov    al,0x0
c001b26c:	e9 f3 00 00 00       	jmp    c001b364 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b271:	8d 76 00             	lea    esi,[esi+0x0]
c001b274:	83 ec 04             	sub    esp,0x4
c001b277:	68 00 01 00 00       	push   0x100
c001b27c:	6a 00                	push   0x0
c001b27e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b285:	50                   	push   eax
c001b286:	e8 f9 53 fe ff       	call   c0000684 <memset>
c001b28b:	83 c4 10             	add    esp,0x10
c001b28e:	83 ec 08             	sub    esp,0x8
c001b291:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b298:	50                   	push   eax
c001b299:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b2a0:	50                   	push   eax
c001b2a1:	e8 da 55 fe ff       	call   c0000880 <strcat>
c001b2a6:	83 c4 10             	add    esp,0x10
c001b2a9:	83 ec 08             	sub    esp,0x8
c001b2ac:	68 a2 63 02 c0       	push   0xc00263a2
c001b2b1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b2b8:	50                   	push   eax
c001b2b9:	e8 c2 55 fe ff       	call   c0000880 <strcat>
c001b2be:	83 c4 10             	add    esp,0x10
c001b2c1:	83 ec 04             	sub    esp,0x4
c001b2c4:	6a 01                	push   0x1
c001b2c6:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b2cd:	50                   	push   eax
c001b2ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b2d2:	50                   	push   eax
c001b2d3:	e8 b3 9b fe ff       	call   c0004e8b <f_open>
c001b2d8:	83 c4 10             	add    esp,0x10
c001b2db:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b2e2:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b2e9:	85 c0                	test   eax,eax
c001b2eb:	74 0b                	je     c001b2f8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b2ed:	78 31                	js     c001b320 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b2ef:	83 e8 04             	sub    eax,0x4
c001b2f2:	83 f8 01             	cmp    eax,0x1
c001b2f5:	77 29                	ja     c001b320 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b2f7:	90                   	nop
c001b2f8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b300:	83 ec 0c             	sub    esp,0xc
c001b303:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b307:	50                   	push   eax
c001b308:	e8 d0 a6 fe ff       	call   c00059dd <f_close>
c001b30d:	83 c4 10             	add    esp,0x10
c001b310:	90                   	nop
c001b311:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b319:	74 41                	je     c001b35c <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b31b:	eb 33                	jmp    c001b350 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b31d:	8d 76 00             	lea    esi,[esi+0x0]
c001b320:	83 ec 0c             	sub    esp,0xc
c001b323:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b32a:	e8 00 e7 fe ff       	call   c0009a2f <rfree>
c001b32f:	83 c4 10             	add    esp,0x10
c001b332:	83 ec 04             	sub    esp,0x4
c001b335:	6a 00                	push   0x0
c001b337:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b33e:	50                   	push   eax
c001b33f:	6a 00                	push   0x0
c001b341:	e8 e3 9a fe ff       	call   c0004e29 <f_mount>
c001b346:	83 c4 10             	add    esp,0x10
c001b349:	b0 00                	mov    al,0x0
c001b34b:	eb 17                	jmp    c001b364 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b34d:	8d 76 00             	lea    esi,[esi+0x0]
c001b350:	a1 80 95 02 c0       	mov    eax,ds:0xc0029580
c001b355:	40                   	inc    eax
c001b356:	a3 80 95 02 c0       	mov    ds:0xc0029580,eax
c001b35b:	90                   	nop
c001b35c:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b363:	90                   	nop
c001b364:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b36a:	c3                   	ret    
c001b36b:	90                   	nop

c001b36c <FAT::allocateSwapfile(char const*, int)>:
c001b36c:	55                   	push   ebp
c001b36d:	57                   	push   edi
c001b36e:	56                   	push   esi
c001b36f:	53                   	push   ebx
c001b370:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b376:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b381:	83 ec 0c             	sub    esp,0xc
c001b384:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b38b:	e8 7f e6 fe ff       	call   c0009a0f <malloc>
c001b390:	83 c4 10             	add    esp,0x10
c001b393:	89 c7                	mov    edi,eax
c001b395:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c001b39a:	83 ec 04             	sub    esp,0x4
c001b39d:	50                   	push   eax
c001b39e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b3a5:	57                   	push   edi
c001b3a6:	e8 bb 1e ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001b3ab:	83 c4 10             	add    esp,0x10
c001b3ae:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b3b5:	83 ec 04             	sub    esp,0x4
c001b3b8:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b3bc:	50                   	push   eax
c001b3bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b3c1:	50                   	push   eax
c001b3c2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b3c9:	e8 1e 22 ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c001b3ce:	83 c4 10             	add    esp,0x10
c001b3d1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b3d8:	c1 e0 14             	shl    eax,0x14
c001b3db:	89 c7                	mov    edi,eax
c001b3dd:	89 c5                	mov    ebp,eax
c001b3df:	c1 fd 1f             	sar    ebp,0x1f
c001b3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b3ea:	89 f9                	mov    ecx,edi
c001b3ec:	31 c1                	xor    ecx,eax
c001b3ee:	89 cb                	mov    ebx,ecx
c001b3f0:	89 e9                	mov    ecx,ebp
c001b3f2:	31 d1                	xor    ecx,edx
c001b3f4:	89 ce                	mov    esi,ecx
c001b3f6:	89 f0                	mov    eax,esi
c001b3f8:	09 d8                	or     eax,ebx
c001b3fa:	0f 84 98 00 00 00    	je     c001b498 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b400:	83 ec 0c             	sub    esp,0xc
c001b403:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b40a:	e8 a9 20 ff ff       	call   c000d4b8 <File::unlink()>
c001b40f:	83 c4 10             	add    esp,0x10
c001b412:	83 ec 08             	sub    esp,0x8
c001b415:	6a 12                	push   0x12
c001b417:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b41e:	e8 1d 1f ff ff       	call   c000d340 <File::open(FileOpenMode)>
c001b423:	83 c4 10             	add    esp,0x10
c001b426:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b42d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b433:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b43a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b441:	c1 e0 14             	shl    eax,0x14
c001b444:	99                   	cdq    
c001b445:	6a 01                	push   0x1
c001b447:	52                   	push   edx
c001b448:	50                   	push   eax
c001b449:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b450:	e8 38 bc fe ff       	call   c000708d <f_expand>
c001b455:	83 c4 10             	add    esp,0x10
c001b458:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b45f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b461:	83 c0 10             	add    eax,0x10
c001b464:	8b 00                	mov    eax,DWORD PTR [eax]
c001b466:	83 ec 0c             	sub    esp,0xc
c001b469:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b46d:	52                   	push   edx
c001b46e:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b472:	52                   	push   edx
c001b473:	6a 00                	push   0x0
c001b475:	68 00 04 00 00       	push   0x400
c001b47a:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b481:	ff d0                	call   eax
c001b483:	83 c4 20             	add    esp,0x20
c001b486:	83 ec 0c             	sub    esp,0xc
c001b489:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b490:	e8 09 1f ff ff       	call   c000d39e <File::close()>
c001b495:	83 c4 10             	add    esp,0x10
c001b498:	83 ec 08             	sub    esp,0x8
c001b49b:	6a 01                	push   0x1
c001b49d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b4a4:	e8 97 1e ff ff       	call   c000d340 <File::open(FileOpenMode)>
c001b4a9:	83 c4 10             	add    esp,0x10
c001b4ac:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b4b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4b5:	83 c0 0c             	add    eax,0xc
c001b4b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4ba:	83 ec 0c             	sub    esp,0xc
c001b4bd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b4c1:	52                   	push   edx
c001b4c2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b4c6:	52                   	push   edx
c001b4c7:	6a 00                	push   0x0
c001b4c9:	6a 04                	push   0x4
c001b4cb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b4d2:	ff d0                	call   eax
c001b4d4:	83 c4 20             	add    esp,0x20
c001b4d7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b4de:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b4e4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b4eb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b4f2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b4f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b4f8:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b4ff:	83 ec 0c             	sub    esp,0xc
c001b502:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b509:	e8 90 1e ff ff       	call   c000d39e <File::close()>
c001b50e:	83 c4 10             	add    esp,0x10
c001b511:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b518:	ba 00 00 00 00       	mov    edx,0x0
c001b51d:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b523:	5b                   	pop    ebx
c001b524:	5e                   	pop    esi
c001b525:	5f                   	pop    edi
c001b526:	5d                   	pop    ebp
c001b527:	c3                   	ret    

c001b528 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b528:	57                   	push   edi
c001b529:	56                   	push   esi
c001b52a:	53                   	push   ebx
c001b52b:	81 ec 50 02 00 00    	sub    esp,0x250
c001b531:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b539:	74 0d                	je     c001b548 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b53b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b543:	75 0f                	jne    c001b554 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b545:	8d 76 00             	lea    esi,[esi+0x0]
c001b548:	b8 04 00 00 00       	mov    eax,0x4
c001b54d:	e9 36 01 00 00       	jmp    c001b688 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b552:	66 90                	xchg   ax,ax
c001b554:	83 ec 08             	sub    esp,0x8
c001b557:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b55e:	50                   	push   eax
c001b55f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b566:	e8 7c aa fe ff       	call   c0005fe7 <f_readdir>
c001b56b:	83 c4 10             	add    esp,0x10
c001b56e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b575:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b57c:	83 ec 0c             	sub    esp,0xc
c001b57f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b586:	83 c0 1a             	add    eax,0x1a
c001b589:	50                   	push   eax
c001b58a:	e8 11 51 fe ff       	call   c00006a0 <strlen>
c001b58f:	83 c4 10             	add    esp,0x10
c001b592:	ba 00 00 00 00       	mov    edx,0x0
c001b597:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b59b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b59f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b5a6:	0f b6 c0             	movzx  eax,al
c001b5a9:	83 e0 10             	and    eax,0x10
c001b5ac:	74 0a                	je     c001b5b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b5ae:	b8 02 00 00 00       	mov    eax,0x2
c001b5b3:	eb 0b                	jmp    c001b5c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b5b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b5b8:	b8 01 00 00 00       	mov    eax,0x1
c001b5bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b5c4:	83 ec 08             	sub    esp,0x8
c001b5c7:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b5ce:	83 c0 1a             	add    eax,0x1a
c001b5d1:	50                   	push   eax
c001b5d2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b5d6:	83 c0 10             	add    eax,0x10
c001b5d9:	50                   	push   eax
c001b5da:	e8 61 51 fe ff       	call   c0000740 <strcpy>
c001b5df:	83 c4 10             	add    esp,0x10
c001b5e2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b5e9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b5f0:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b5f4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b5fb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b602:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b609:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b610:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b617:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b61e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b625:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b62c:	89 c6                	mov    esi,eax
c001b62e:	89 d7                	mov    edi,edx
c001b630:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b632:	89 c8                	mov    eax,ecx
c001b634:	89 fa                	mov    edx,edi
c001b636:	89 f3                	mov    ebx,esi
c001b638:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b63f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b646:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b64d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b654:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b65a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b661:	84 c0                	test   al,al
c001b663:	75 07                	jne    c001b66c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b665:	b8 07 00 00 00       	mov    eax,0x7
c001b66a:	eb 1c                	jmp    c001b688 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b66c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b673:	85 c0                	test   eax,eax
c001b675:	75 09                	jne    c001b680 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b677:	b8 00 00 00 00       	mov    eax,0x0
c001b67c:	eb 0a                	jmp    c001b688 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b67e:	66 90                	xchg   ax,ax
c001b680:	b8 01 00 00 00       	mov    eax,0x1
c001b685:	8d 76 00             	lea    esi,[esi+0x0]
c001b688:	81 c4 50 02 00 00    	add    esp,0x250
c001b68e:	5b                   	pop    ebx
c001b68f:	5e                   	pop    esi
c001b690:	5f                   	pop    edi
c001b691:	c3                   	ret    
c001b692:	66 90                	xchg   ax,ax

c001b694 <FAT::read(void*, unsigned long, void*, int*)>:
c001b694:	83 ec 1c             	sub    esp,0x1c
c001b697:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b69c:	74 0a                	je     c001b6a8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b69e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b6a3:	75 0b                	jne    c001b6b0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b6a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b6a8:	b8 04 00 00 00       	mov    eax,0x4
c001b6ad:	eb 41                	jmp    c001b6f0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b6af:	90                   	nop
c001b6b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b6b4:	50                   	push   eax
c001b6b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b6bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b6c1:	e8 01 9c fe ff       	call   c00052c7 <f_read>
c001b6c6:	83 c4 10             	add    esp,0x10
c001b6c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6d1:	89 c2                	mov    edx,eax
c001b6d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b6d7:	89 10                	mov    DWORD PTR [eax],edx
c001b6d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6dd:	85 c0                	test   eax,eax
c001b6df:	75 07                	jne    c001b6e8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b6e1:	b8 00 00 00 00       	mov    eax,0x0
c001b6e6:	eb 08                	jmp    c001b6f0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b6e8:	b8 01 00 00 00       	mov    eax,0x1
c001b6ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b6f0:	83 c4 1c             	add    esp,0x1c
c001b6f3:	c3                   	ret    

c001b6f4 <FAT::write(void*, unsigned long, void*, int*)>:
c001b6f4:	83 ec 1c             	sub    esp,0x1c
c001b6f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b6fc:	74 0a                	je     c001b708 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b6fe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b703:	75 0b                	jne    c001b710 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b705:	8d 76 00             	lea    esi,[esi+0x0]
c001b708:	b8 04 00 00 00       	mov    eax,0x4
c001b70d:	eb 41                	jmp    c001b750 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b70f:	90                   	nop
c001b710:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b714:	50                   	push   eax
c001b715:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b719:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b71d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b721:	e8 21 9e fe ff       	call   c0005547 <f_write>
c001b726:	83 c4 10             	add    esp,0x10
c001b729:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b72d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b731:	89 c2                	mov    edx,eax
c001b733:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b737:	89 10                	mov    DWORD PTR [eax],edx
c001b739:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b73d:	85 c0                	test   eax,eax
c001b73f:	75 07                	jne    c001b748 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b741:	b8 00 00 00 00       	mov    eax,0x0
c001b746:	eb 08                	jmp    c001b750 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b748:	b8 01 00 00 00       	mov    eax,0x1
c001b74d:	8d 76 00             	lea    esi,[esi+0x0]
c001b750:	83 c4 1c             	add    esp,0x1c
c001b753:	c3                   	ret    

c001b754 <FAT::close(void*)>:
c001b754:	83 ec 1c             	sub    esp,0x1c
c001b757:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b75c:	75 0a                	jne    c001b768 <FAT::close(void*)+0x14>
c001b75e:	b8 04 00 00 00       	mov    eax,0x4
c001b763:	eb 3f                	jmp    c001b7a4 <FAT::close(void*)+0x50>
c001b765:	8d 76 00             	lea    esi,[esi+0x0]
c001b768:	83 ec 0c             	sub    esp,0xc
c001b76b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b76f:	e8 69 a2 fe ff       	call   c00059dd <f_close>
c001b774:	83 c4 10             	add    esp,0x10
c001b777:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b77b:	83 ec 0c             	sub    esp,0xc
c001b77e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b782:	e8 98 e2 fe ff       	call   c0009a1f <free>
c001b787:	83 c4 10             	add    esp,0x10
c001b78a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b78e:	85 c0                	test   eax,eax
c001b790:	75 0a                	jne    c001b79c <FAT::close(void*)+0x48>
c001b792:	b8 00 00 00 00       	mov    eax,0x0
c001b797:	eb 0b                	jmp    c001b7a4 <FAT::close(void*)+0x50>
c001b799:	8d 76 00             	lea    esi,[esi+0x0]
c001b79c:	b8 01 00 00 00       	mov    eax,0x1
c001b7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7a4:	83 c4 1c             	add    esp,0x1c
c001b7a7:	c3                   	ret    

c001b7a8 <FAT::closeDir(void*)>:
c001b7a8:	83 ec 1c             	sub    esp,0x1c
c001b7ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b7b0:	75 0a                	jne    c001b7bc <FAT::closeDir(void*)+0x14>
c001b7b2:	b8 04 00 00 00       	mov    eax,0x4
c001b7b7:	eb 3f                	jmp    c001b7f8 <FAT::closeDir(void*)+0x50>
c001b7b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b7bc:	83 ec 0c             	sub    esp,0xc
c001b7bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b7c3:	e8 fd a7 fe ff       	call   c0005fc5 <f_closedir>
c001b7c8:	83 c4 10             	add    esp,0x10
c001b7cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7cf:	83 ec 0c             	sub    esp,0xc
c001b7d2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b7d6:	e8 44 e2 fe ff       	call   c0009a1f <free>
c001b7db:	83 c4 10             	add    esp,0x10
c001b7de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7e2:	85 c0                	test   eax,eax
c001b7e4:	75 0a                	jne    c001b7f0 <FAT::closeDir(void*)+0x48>
c001b7e6:	b8 00 00 00 00       	mov    eax,0x0
c001b7eb:	eb 0b                	jmp    c001b7f8 <FAT::closeDir(void*)+0x50>
c001b7ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b7f0:	b8 01 00 00 00       	mov    eax,0x1
c001b7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7f8:	83 c4 1c             	add    esp,0x1c
c001b7fb:	c3                   	ret    

c001b7fc <FAT::seek(void*, unsigned long long)>:
c001b7fc:	83 ec 2c             	sub    esp,0x2c
c001b7ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b803:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b807:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b80b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b80f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b814:	75 0a                	jne    c001b820 <FAT::seek(void*, unsigned long long)+0x24>
c001b816:	b8 04 00 00 00       	mov    eax,0x4
c001b81b:	eb 37                	jmp    c001b854 <FAT::seek(void*, unsigned long long)+0x58>
c001b81d:	8d 76 00             	lea    esi,[esi+0x0]
c001b820:	83 ec 04             	sub    esp,0x4
c001b823:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b827:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b82b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b82f:	e8 d8 a1 fe ff       	call   c0005a0c <f_lseek>
c001b834:	83 c4 10             	add    esp,0x10
c001b837:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b83b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b83f:	85 c0                	test   eax,eax
c001b841:	75 09                	jne    c001b84c <FAT::seek(void*, unsigned long long)+0x50>
c001b843:	b8 00 00 00 00       	mov    eax,0x0
c001b848:	eb 0a                	jmp    c001b854 <FAT::seek(void*, unsigned long long)+0x58>
c001b84a:	66 90                	xchg   ax,ax
c001b84c:	b8 01 00 00 00       	mov    eax,0x1
c001b851:	8d 76 00             	lea    esi,[esi+0x0]
c001b854:	83 c4 2c             	add    esp,0x2c
c001b857:	c3                   	ret    

c001b858 <fatWrapperReadDisk>:
c001b858:	83 ec 1c             	sub    esp,0x1c
c001b85b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b85f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b863:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b867:	89 04 24             	mov    DWORD PTR [esp],eax
c001b86a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b86e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b872:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b877:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c001b87e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b882:	83 ec 0c             	sub    esp,0xc
c001b885:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b889:	52                   	push   edx
c001b88a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b892:	50                   	push   eax
c001b893:	e8 f0 4c ff ff       	call   c0010588 <LogicalDisk::read(unsigned long long, int, void*)>
c001b898:	83 c4 20             	add    esp,0x20
c001b89b:	83 c4 1c             	add    esp,0x1c
c001b89e:	c3                   	ret    
c001b89f:	90                   	nop

c001b8a0 <fatWrapperWriteDisk>:
c001b8a0:	83 ec 1c             	sub    esp,0x1c
c001b8a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b8ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b8af:	89 04 24             	mov    DWORD PTR [esp],eax
c001b8b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b8b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b8ba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8bf:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c001b8c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b8ca:	83 ec 0c             	sub    esp,0xc
c001b8cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8d1:	52                   	push   edx
c001b8d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b8d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b8da:	50                   	push   eax
c001b8db:	e8 14 4d ff ff       	call   c00105f4 <LogicalDisk::write(unsigned long long, int, void*)>
c001b8e0:	83 c4 20             	add    esp,0x20
c001b8e3:	83 c4 1c             	add    esp,0x1c
c001b8e6:	c3                   	ret    
c001b8e7:	90                   	nop

c001b8e8 <fatWrapperIoctl>:
c001b8e8:	53                   	push   ebx
c001b8e9:	83 ec 28             	sub    esp,0x28
c001b8ec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b8f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b8f4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b8f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b8fc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b901:	75 31                	jne    c001b934 <fatWrapperIoctl+0x4c>
c001b903:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b907:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b90b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b910:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c001b917:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b91d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b923:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b927:	66 89 02             	mov    WORD PTR [edx],ax
c001b92a:	b8 00 00 00 00       	mov    eax,0x0
c001b92f:	e9 bc 00 00 00       	jmp    c001b9f0 <fatWrapperIoctl+0x108>
c001b934:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b939:	75 6d                	jne    c001b9a8 <fatWrapperIoctl+0xc0>
c001b93b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b93f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b943:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b948:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c001b94f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b955:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b95b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b961:	89 c8                	mov    eax,ecx
c001b963:	89 da                	mov    edx,ebx
c001b965:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b969:	c1 e0 0a             	shl    eax,0xa
c001b96c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b971:	8b 0c 8d 20 85 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7ae0]
c001b978:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b97e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b984:	89 cb                	mov    ebx,ecx
c001b986:	c1 fb 1f             	sar    ebx,0x1f
c001b989:	53                   	push   ebx
c001b98a:	51                   	push   ecx
c001b98b:	52                   	push   edx
c001b98c:	50                   	push   eax
c001b98d:	e8 b2 6d 00 00       	call   c0022744 <__udivdi3>
c001b992:	83 c4 10             	add    esp,0x10
c001b995:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b999:	89 01                	mov    DWORD PTR [ecx],eax
c001b99b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b99e:	b8 00 00 00 00       	mov    eax,0x0
c001b9a3:	eb 4b                	jmp    c001b9f0 <fatWrapperIoctl+0x108>
c001b9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9a8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b9ad:	75 09                	jne    c001b9b8 <fatWrapperIoctl+0xd0>
c001b9af:	b8 00 00 00 00       	mov    eax,0x0
c001b9b4:	eb 3a                	jmp    c001b9f0 <fatWrapperIoctl+0x108>
c001b9b6:	66 90                	xchg   ax,ax
c001b9b8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b9bd:	75 19                	jne    c001b9d8 <fatWrapperIoctl+0xf0>
c001b9bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b9c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9cb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b9d1:	b8 00 00 00 00       	mov    eax,0x0
c001b9d6:	eb 18                	jmp    c001b9f0 <fatWrapperIoctl+0x108>
c001b9d8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b9dd:	75 09                	jne    c001b9e8 <fatWrapperIoctl+0x100>
c001b9df:	b8 00 00 00 00       	mov    eax,0x0
c001b9e4:	eb 0a                	jmp    c001b9f0 <fatWrapperIoctl+0x108>
c001b9e6:	66 90                	xchg   ax,ax
c001b9e8:	b8 04 00 00 00       	mov    eax,0x4
c001b9ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b9f0:	83 c4 28             	add    esp,0x28
c001b9f3:	5b                   	pop    ebx
c001b9f4:	c3                   	ret    
c001b9f5:	90                   	nop
c001b9f6:	66 90                	xchg   ax,ax

c001b9f8 <FAT::FAT()>:
c001b9f8:	83 ec 1c             	sub    esp,0x1c
c001b9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9ff:	83 ec 0c             	sub    esp,0xc
c001ba02:	50                   	push   eax
c001ba03:	e8 0a 16 ff ff       	call   c000d012 <Filesystem::Filesystem()>
c001ba08:	83 c4 10             	add    esp,0x10
c001ba0b:	ba b8 63 02 c0       	mov    edx,0xc00263b8
c001ba10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba14:	89 10                	mov    DWORD PTR [eax],edx
c001ba16:	c7 05 80 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029580,0x0
c001ba20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ba28:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001ba2d:	7f 15                	jg     c001ba44 <FAT::FAT()+0x4c>
c001ba2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba33:	c7 04 85 a0 95 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6a60],0xffffffff
c001ba3e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ba42:	eb e4                	jmp    c001ba28 <FAT::FAT()+0x30>
c001ba44:	90                   	nop
c001ba45:	83 c4 1c             	add    esp,0x1c
c001ba48:	c3                   	ret    
c001ba49:	90                   	nop
c001ba4a:	66 90                	xchg   ax,ax

c001ba4c <FAT::fixFilepath(char*)>:
c001ba4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba50:	8a 00                	mov    al,BYTE PTR [eax]
c001ba52:	3c 40                	cmp    al,0x40
c001ba54:	7e 2e                	jle    c001ba84 <FAT::fixFilepath(char*)+0x38>
c001ba56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba5a:	8a 00                	mov    al,BYTE PTR [eax]
c001ba5c:	83 e8 41             	sub    eax,0x41
c001ba5f:	88 c2                	mov    dl,al
c001ba61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba65:	88 10                	mov    BYTE PTR [eax],dl
c001ba67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba6b:	8a 00                	mov    al,BYTE PTR [eax]
c001ba6d:	0f be c0             	movsx  eax,al
c001ba70:	8b 04 85 a0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a60]
c001ba77:	83 c0 30             	add    eax,0x30
c001ba7a:	88 c2                	mov    dl,al
c001ba7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba80:	88 10                	mov    BYTE PTR [eax],dl
c001ba82:	66 90                	xchg   ax,ax
c001ba84:	90                   	nop
c001ba85:	c3                   	ret    
c001ba86:	66 90                	xchg   ax,ax

c001ba88 <FAT::open(char const*, void**, FileOpenMode)>:
c001ba88:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ba8e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ba96:	74 0c                	je     c001baa4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001ba98:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001baa0:	75 0e                	jne    c001bab0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001baa2:	66 90                	xchg   ax,ax
c001baa4:	b8 04 00 00 00       	mov    eax,0x4
c001baa9:	e9 06 01 00 00       	jmp    c001bbb4 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001baae:	66 90                	xchg   ax,ax
c001bab0:	83 ec 08             	sub    esp,0x8
c001bab3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001baba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001babe:	50                   	push   eax
c001babf:	e8 7c 4c fe ff       	call   c0000740 <strcpy>
c001bac4:	83 c4 10             	add    esp,0x10
c001bac7:	83 ec 08             	sub    esp,0x8
c001baca:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bace:	50                   	push   eax
c001bacf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bad6:	e8 71 ff ff ff       	call   c001ba4c <FAT::fixFilepath(char*)>
c001badb:	83 c4 10             	add    esp,0x10
c001bade:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001bae6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001baed:	83 e0 01             	and    eax,0x1
c001baf0:	74 0a                	je     c001bafc <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001baf2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001bafa:	66 90                	xchg   ax,ax
c001bafc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bb03:	83 e0 04             	and    eax,0x4
c001bb06:	74 10                	je     c001bb18 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001bb08:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001bb10:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bb18:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bb1f:	83 e0 02             	and    eax,0x2
c001bb22:	74 08                	je     c001bb2c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001bb24:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bb2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bb33:	83 e0 08             	and    eax,0x8
c001bb36:	74 08                	je     c001bb40 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001bb38:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001bb40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bb47:	83 e0 10             	and    eax,0x10
c001bb4a:	74 08                	je     c001bb54 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001bb4c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001bb54:	83 ec 0c             	sub    esp,0xc
c001bb57:	68 50 02 00 00       	push   0x250
c001bb5c:	e8 ae de fe ff       	call   c0009a0f <malloc>
c001bb61:	83 c4 10             	add    esp,0x10
c001bb64:	89 c2                	mov    edx,eax
c001bb66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb6d:	89 10                	mov    DWORD PTR [eax],edx
c001bb6f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bb77:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb7e:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb80:	83 ec 04             	sub    esp,0x4
c001bb83:	52                   	push   edx
c001bb84:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bb88:	52                   	push   edx
c001bb89:	50                   	push   eax
c001bb8a:	e8 fc 92 fe ff       	call   c0004e8b <f_open>
c001bb8f:	83 c4 10             	add    esp,0x10
c001bb92:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bb99:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bba1:	74 09                	je     c001bbac <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001bba3:	b8 01 00 00 00       	mov    eax,0x1
c001bba8:	eb 0a                	jmp    c001bbb4 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bbaa:	66 90                	xchg   ax,ax
c001bbac:	b8 00 00 00 00       	mov    eax,0x0
c001bbb1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbb4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bbba:	c3                   	ret    
c001bbbb:	90                   	nop

c001bbbc <FAT::openDir(char const*, void**)>:
c001bbbc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bbc2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bbca:	74 0c                	je     c001bbd8 <FAT::openDir(char const*, void**)+0x1c>
c001bbcc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bbd4:	75 0e                	jne    c001bbe4 <FAT::openDir(char const*, void**)+0x28>
c001bbd6:	66 90                	xchg   ax,ax
c001bbd8:	b8 04 00 00 00       	mov    eax,0x4
c001bbdd:	e9 82 00 00 00       	jmp    c001bc64 <FAT::openDir(char const*, void**)+0xa8>
c001bbe2:	66 90                	xchg   ax,ax
c001bbe4:	83 ec 08             	sub    esp,0x8
c001bbe7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bbee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bbf2:	50                   	push   eax
c001bbf3:	e8 48 4b fe ff       	call   c0000740 <strcpy>
c001bbf8:	83 c4 10             	add    esp,0x10
c001bbfb:	83 ec 08             	sub    esp,0x8
c001bbfe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc02:	50                   	push   eax
c001bc03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc0a:	e8 3d fe ff ff       	call   c001ba4c <FAT::fixFilepath(char*)>
c001bc0f:	83 c4 10             	add    esp,0x10
c001bc12:	83 ec 0c             	sub    esp,0xc
c001bc15:	6a 4c                	push   0x4c
c001bc17:	e8 f3 dd fe ff       	call   c0009a0f <malloc>
c001bc1c:	83 c4 10             	add    esp,0x10
c001bc1f:	89 c2                	mov    edx,eax
c001bc21:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bc28:	89 10                	mov    DWORD PTR [eax],edx
c001bc2a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bc31:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc33:	83 ec 08             	sub    esp,0x8
c001bc36:	8d 54 24 14          	lea    edx,[esp+0x14]
c001bc3a:	52                   	push   edx
c001bc3b:	50                   	push   eax
c001bc3c:	e8 82 a2 fe ff       	call   c0005ec3 <f_opendir>
c001bc41:	83 c4 10             	add    esp,0x10
c001bc44:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bc4b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001bc53:	74 07                	je     c001bc5c <FAT::openDir(char const*, void**)+0xa0>
c001bc55:	b8 01 00 00 00       	mov    eax,0x1
c001bc5a:	eb 08                	jmp    c001bc64 <FAT::openDir(char const*, void**)+0xa8>
c001bc5c:	b8 00 00 00 00       	mov    eax,0x0
c001bc61:	8d 76 00             	lea    esi,[esi+0x0]
c001bc64:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bc6a:	c3                   	ret    
c001bc6b:	90                   	nop

c001bc6c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001bc6c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bc72:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001bc7a:	75 0c                	jne    c001bc88 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001bc7c:	b8 04 00 00 00       	mov    eax,0x4
c001bc81:	e9 d2 00 00 00       	jmp    c001bd58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc86:	66 90                	xchg   ax,ax
c001bc88:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001bc90:	75 0a                	jne    c001bc9c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001bc92:	b8 04 00 00 00       	mov    eax,0x4
c001bc97:	e9 bc 00 00 00       	jmp    c001bd58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc9c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bca4:	75 0a                	jne    c001bcb0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bca6:	b8 04 00 00 00       	mov    eax,0x4
c001bcab:	e9 a8 00 00 00       	jmp    c001bd58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bcb0:	83 ec 08             	sub    esp,0x8
c001bcb3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bcba:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bcc1:	50                   	push   eax
c001bcc2:	e8 79 4a fe ff       	call   c0000740 <strcpy>
c001bcc7:	83 c4 10             	add    esp,0x10
c001bcca:	83 ec 08             	sub    esp,0x8
c001bccd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bcd4:	50                   	push   eax
c001bcd5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bcdc:	e8 6b fd ff ff       	call   c001ba4c <FAT::fixFilepath(char*)>
c001bce1:	83 c4 10             	add    esp,0x10
c001bce4:	83 ec 08             	sub    esp,0x8
c001bce7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bceb:	50                   	push   eax
c001bcec:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bcf3:	50                   	push   eax
c001bcf4:	e8 89 a3 fe ff       	call   c0006082 <f_stat>
c001bcf9:	83 c4 10             	add    esp,0x10
c001bcfc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bd03:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bd0a:	85 c0                	test   eax,eax
c001bd0c:	74 0a                	je     c001bd18 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bd0e:	83 f8 04             	cmp    eax,0x4
c001bd11:	74 35                	je     c001bd48 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bd13:	eb 3b                	jmp    c001bd50 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bd15:	8d 76 00             	lea    esi,[esi+0x0]
c001bd18:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bd1c:	0f b6 c0             	movzx  eax,al
c001bd1f:	83 e0 10             	and    eax,0x10
c001bd22:	0f 95 c2             	setne  dl
c001bd25:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bd2c:	88 10                	mov    BYTE PTR [eax],dl
c001bd2e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bd31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd35:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bd3c:	89 01                	mov    DWORD PTR [ecx],eax
c001bd3e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bd41:	b8 00 00 00 00       	mov    eax,0x0
c001bd46:	eb 10                	jmp    c001bd58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bd48:	b8 02 00 00 00       	mov    eax,0x2
c001bd4d:	eb 09                	jmp    c001bd58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bd4f:	90                   	nop
c001bd50:	b8 01 00 00 00       	mov    eax,0x1
c001bd55:	8d 76 00             	lea    esi,[esi+0x0]
c001bd58:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bd5e:	c3                   	ret    
c001bd5f:	90                   	nop

c001bd60 <FAT::unlink(char const*)>:
c001bd60:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bd66:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bd6e:	75 08                	jne    c001bd78 <FAT::unlink(char const*)+0x18>
c001bd70:	b8 04 00 00 00       	mov    eax,0x4
c001bd75:	eb 61                	jmp    c001bdd8 <FAT::unlink(char const*)+0x78>
c001bd77:	90                   	nop
c001bd78:	83 ec 08             	sub    esp,0x8
c001bd7b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd82:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd86:	50                   	push   eax
c001bd87:	e8 b4 49 fe ff       	call   c0000740 <strcpy>
c001bd8c:	83 c4 10             	add    esp,0x10
c001bd8f:	83 ec 08             	sub    esp,0x8
c001bd92:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd96:	50                   	push   eax
c001bd97:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd9e:	e8 a9 fc ff ff       	call   c001ba4c <FAT::fixFilepath(char*)>
c001bda3:	83 c4 10             	add    esp,0x10
c001bda6:	83 ec 0c             	sub    esp,0xc
c001bda9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bdad:	50                   	push   eax
c001bdae:	e8 21 a6 fe ff       	call   c00063d4 <f_unlink>
c001bdb3:	83 c4 10             	add    esp,0x10
c001bdb6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bdbd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bdc4:	85 c0                	test   eax,eax
c001bdc6:	75 08                	jne    c001bdd0 <FAT::unlink(char const*)+0x70>
c001bdc8:	b8 00 00 00 00       	mov    eax,0x0
c001bdcd:	eb 09                	jmp    c001bdd8 <FAT::unlink(char const*)+0x78>
c001bdcf:	90                   	nop
c001bdd0:	b8 01 00 00 00       	mov    eax,0x1
c001bdd5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdd8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bdde:	c3                   	ret    
c001bddf:	90                   	nop

c001bde0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bde0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bde6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001bded:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001bdf4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bdf8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bdfc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001be04:	75 0a                	jne    c001be10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001be06:	b8 04 00 00 00       	mov    eax,0x4
c001be0b:	e9 30 01 00 00       	jmp    c001bf40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001be10:	83 ec 08             	sub    esp,0x8
c001be13:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001be1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001be1e:	50                   	push   eax
c001be1f:	e8 1c 49 fe ff       	call   c0000740 <strcpy>
c001be24:	83 c4 10             	add    esp,0x10
c001be27:	83 ec 08             	sub    esp,0x8
c001be2a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001be2e:	50                   	push   eax
c001be2f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001be36:	e8 11 fc ff ff       	call   c001ba4c <FAT::fixFilepath(char*)>
c001be3b:	83 c4 10             	add    esp,0x10
c001be3e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001be46:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001be4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be53:	83 e0 01             	and    eax,0x1
c001be56:	74 08                	je     c001be60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001be58:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001be60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be65:	83 e0 02             	and    eax,0x2
c001be68:	74 0a                	je     c001be74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001be6a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001be72:	66 90                	xchg   ax,ax
c001be74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be79:	83 e0 04             	and    eax,0x4
c001be7c:	74 0a                	je     c001be88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001be7e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001be86:	66 90                	xchg   ax,ax
c001be88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be8d:	83 e0 08             	and    eax,0x8
c001be90:	74 0a                	je     c001be9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001be92:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001be9a:	66 90                	xchg   ax,ax
c001be9c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bea1:	83 e0 01             	and    eax,0x1
c001bea4:	74 0a                	je     c001beb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001bea6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001beae:	66 90                	xchg   ax,ax
c001beb0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001beb5:	83 e0 02             	and    eax,0x2
c001beb8:	74 0a                	je     c001bec4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001beba:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001bec2:	66 90                	xchg   ax,ax
c001bec4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bec9:	83 e0 04             	and    eax,0x4
c001becc:	74 0a                	je     c001bed8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001bece:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001bed6:	66 90                	xchg   ax,ax
c001bed8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bedd:	83 e0 08             	and    eax,0x8
c001bee0:	74 0a                	je     c001beec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001bee2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001beea:	66 90                	xchg   ax,ax
c001beec:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bef3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001befa:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001bf02:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bf0a:	83 ec 04             	sub    esp,0x4
c001bf0d:	52                   	push   edx
c001bf0e:	50                   	push   eax
c001bf0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bf13:	50                   	push   eax
c001bf14:	e8 5d ab fe ff       	call   c0006a76 <f_chmod>
c001bf19:	83 c4 10             	add    esp,0x10
c001bf1c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001bf23:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001bf2a:	85 c0                	test   eax,eax
c001bf2c:	75 0a                	jne    c001bf38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001bf2e:	b8 00 00 00 00       	mov    eax,0x0
c001bf33:	eb 0b                	jmp    c001bf40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bf35:	8d 76 00             	lea    esi,[esi+0x0]
c001bf38:	b8 01 00 00 00       	mov    eax,0x1
c001bf3d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf40:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bf46:	c3                   	ret    
c001bf47:	90                   	nop

c001bf48 <FAT::rename(char const*, char const*)>:
c001bf48:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf4e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001bf56:	74 0c                	je     c001bf64 <FAT::rename(char const*, char const*)+0x1c>
c001bf58:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001bf60:	75 0e                	jne    c001bf70 <FAT::rename(char const*, char const*)+0x28>
c001bf62:	66 90                	xchg   ax,ax
c001bf64:	b8 04 00 00 00       	mov    eax,0x4
c001bf69:	e9 9e 00 00 00       	jmp    c001c00c <FAT::rename(char const*, char const*)+0xc4>
c001bf6e:	66 90                	xchg   ax,ax
c001bf70:	83 ec 08             	sub    esp,0x8
c001bf73:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf7a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bf81:	50                   	push   eax
c001bf82:	e8 b9 47 fe ff       	call   c0000740 <strcpy>
c001bf87:	83 c4 10             	add    esp,0x10
c001bf8a:	83 ec 08             	sub    esp,0x8
c001bf8d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001bf94:	50                   	push   eax
c001bf95:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf9c:	e8 ab fa ff ff       	call   c001ba4c <FAT::fixFilepath(char*)>
c001bfa1:	83 c4 10             	add    esp,0x10
c001bfa4:	83 ec 08             	sub    esp,0x8
c001bfa7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001bfae:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bfb2:	50                   	push   eax
c001bfb3:	e8 88 47 fe ff       	call   c0000740 <strcpy>
c001bfb8:	83 c4 10             	add    esp,0x10
c001bfbb:	83 ec 08             	sub    esp,0x8
c001bfbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bfc2:	50                   	push   eax
c001bfc3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bfca:	e8 7d fa ff ff       	call   c001ba4c <FAT::fixFilepath(char*)>
c001bfcf:	83 c4 10             	add    esp,0x10
c001bfd2:	83 ec 08             	sub    esp,0x8
c001bfd5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bfd9:	50                   	push   eax
c001bfda:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bfe1:	50                   	push   eax
c001bfe2:	e8 9c a7 fe ff       	call   c0006783 <f_rename>
c001bfe7:	83 c4 10             	add    esp,0x10
c001bfea:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001bff1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001bff8:	85 c0                	test   eax,eax
c001bffa:	75 08                	jne    c001c004 <FAT::rename(char const*, char const*)+0xbc>
c001bffc:	b8 00 00 00 00       	mov    eax,0x0
c001c001:	eb 09                	jmp    c001c00c <FAT::rename(char const*, char const*)+0xc4>
c001c003:	90                   	nop
c001c004:	b8 01 00 00 00       	mov    eax,0x1
c001c009:	8d 76 00             	lea    esi,[esi+0x0]
c001c00c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c012:	c3                   	ret    
c001c013:	90                   	nop

c001c014 <FAT::mkdir(char const*)>:
c001c014:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c01a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c022:	75 08                	jne    c001c02c <FAT::mkdir(char const*)+0x18>
c001c024:	b8 04 00 00 00       	mov    eax,0x4
c001c029:	eb 61                	jmp    c001c08c <FAT::mkdir(char const*)+0x78>
c001c02b:	90                   	nop
c001c02c:	83 ec 08             	sub    esp,0x8
c001c02f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c036:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c03a:	50                   	push   eax
c001c03b:	e8 00 47 fe ff       	call   c0000740 <strcpy>
c001c040:	83 c4 10             	add    esp,0x10
c001c043:	83 ec 08             	sub    esp,0x8
c001c046:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c04a:	50                   	push   eax
c001c04b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c052:	e8 f5 f9 ff ff       	call   c001ba4c <FAT::fixFilepath(char*)>
c001c057:	83 c4 10             	add    esp,0x10
c001c05a:	83 ec 0c             	sub    esp,0xc
c001c05d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c061:	50                   	push   eax
c001c062:	e8 f0 a4 fe ff       	call   c0006557 <f_mkdir>
c001c067:	83 c4 10             	add    esp,0x10
c001c06a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c071:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c078:	85 c0                	test   eax,eax
c001c07a:	75 08                	jne    c001c084 <FAT::mkdir(char const*)+0x70>
c001c07c:	b8 00 00 00 00       	mov    eax,0x0
c001c081:	eb 09                	jmp    c001c08c <FAT::mkdir(char const*)+0x78>
c001c083:	90                   	nop
c001c084:	b8 01 00 00 00       	mov    eax,0x1
c001c089:	8d 76 00             	lea    esi,[esi+0x0]
c001c08c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c092:	c3                   	ret    
c001c093:	90                   	nop

c001c094 <FAT::exists(char const*)>:
c001c094:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c09a:	83 ec 08             	sub    esp,0x8
c001c09d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c0a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c0a8:	50                   	push   eax
c001c0a9:	e8 92 46 fe ff       	call   c0000740 <strcpy>
c001c0ae:	83 c4 10             	add    esp,0x10
c001c0b1:	83 ec 08             	sub    esp,0x8
c001c0b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c0b8:	50                   	push   eax
c001c0b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c0c0:	e8 87 f9 ff ff       	call   c001ba4c <FAT::fixFilepath(char*)>
c001c0c5:	83 c4 10             	add    esp,0x10
c001c0c8:	83 ec 08             	sub    esp,0x8
c001c0cb:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c0d2:	50                   	push   eax
c001c0d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c0d7:	50                   	push   eax
c001c0d8:	e8 a5 9f fe ff       	call   c0006082 <f_stat>
c001c0dd:	83 c4 10             	add    esp,0x10
c001c0e0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c0e7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c0ee:	85 c0                	test   eax,eax
c001c0f0:	75 06                	jne    c001c0f8 <FAT::exists(char const*)+0x64>
c001c0f2:	b0 01                	mov    al,0x1
c001c0f4:	eb 06                	jmp    c001c0fc <FAT::exists(char const*)+0x68>
c001c0f6:	66 90                	xchg   ax,ax
c001c0f8:	b0 00                	mov    al,0x0
c001c0fa:	66 90                	xchg   ax,ax
c001c0fc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c102:	c3                   	ret    
c001c103:	90                   	nop

c001c104 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c104:	b8 08 00 00 00       	mov    eax,0x8
c001c109:	c3                   	ret    

c001c10a <ISO9660::seek(void*, unsigned long long)>:
c001c10a:	53                   	push   ebx
c001c10b:	b8 04 00 00 00       	mov    eax,0x4
c001c110:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c114:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c118:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c11c:	85 d2                	test   edx,edx
c001c11e:	74 17                	je     c001c137 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c120:	89 c8                	mov    eax,ecx
c001c122:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c125:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c128:	b8 01 00 00 00       	mov    eax,0x1
c001c12d:	73 08                	jae    c001c137 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c12f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c132:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c135:	31 c0                	xor    eax,eax
c001c137:	5b                   	pop    ebx
c001c138:	c3                   	ret    
c001c139:	90                   	nop

c001c13a <ISO9660::tell(void*, unsigned long long*)>:
c001c13a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c13e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c142:	85 d2                	test   edx,edx
c001c144:	74 12                	je     c001c158 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c146:	85 c0                	test   eax,eax
c001c148:	74 0e                	je     c001c158 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c14a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c14d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c150:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c153:	89 10                	mov    DWORD PTR [eax],edx
c001c155:	31 c0                	xor    eax,eax
c001c157:	c3                   	ret    
c001c158:	b8 04 00 00 00       	mov    eax,0x4
c001c15d:	c3                   	ret    

c001c15e <ISO9660::getName()>:
c001c15e:	b8 18 64 02 c0       	mov    eax,0xc0026418
c001c163:	c3                   	ret    

c001c164 <ISO9660::stat(void*, unsigned long long*)>:
c001c164:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c168:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c16c:	85 d2                	test   edx,edx
c001c16e:	74 12                	je     c001c182 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c170:	85 c0                	test   eax,eax
c001c172:	74 0e                	je     c001c182 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c174:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c177:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c17a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c17d:	89 10                	mov    DWORD PTR [eax],edx
c001c17f:	31 c0                	xor    eax,eax
c001c181:	c3                   	ret    
c001c182:	b8 04 00 00 00       	mov    eax,0x4
c001c187:	c3                   	ret    

c001c188 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c188:	b8 01 00 00 00       	mov    eax,0x1
c001c18d:	c3                   	ret    

c001c18e <ISO9660::unlink(char const*)>:
c001c18e:	b8 01 00 00 00       	mov    eax,0x1
c001c193:	c3                   	ret    

c001c194 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c194:	b8 01 00 00 00       	mov    eax,0x1
c001c199:	c3                   	ret    

c001c19a <ISO9660::rename(char const*, char const*)>:
c001c19a:	b8 01 00 00 00       	mov    eax,0x1
c001c19f:	c3                   	ret    

c001c1a0 <ISO9660::mkdir(char const*)>:
c001c1a0:	b8 01 00 00 00       	mov    eax,0x1
c001c1a5:	c3                   	ret    

c001c1a6 <ISO9660::close(void*)>:
c001c1a6:	83 ec 0c             	sub    esp,0xc
c001c1a9:	b8 04 00 00 00       	mov    eax,0x4
c001c1ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c1b2:	85 d2                	test   edx,edx
c001c1b4:	74 0e                	je     c001c1c4 <ISO9660::close(void*)+0x1e>
c001c1b6:	83 ec 0c             	sub    esp,0xc
c001c1b9:	52                   	push   edx
c001c1ba:	e8 60 d8 fe ff       	call   c0009a1f <free>
c001c1bf:	83 c4 10             	add    esp,0x10
c001c1c2:	31 c0                	xor    eax,eax
c001c1c4:	83 c4 0c             	add    esp,0xc
c001c1c7:	c3                   	ret    

c001c1c8 <ISO9660::closeDir(void*)>:
c001c1c8:	83 ec 0c             	sub    esp,0xc
c001c1cb:	b8 04 00 00 00       	mov    eax,0x4
c001c1d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c1d4:	85 d2                	test   edx,edx
c001c1d6:	74 0e                	je     c001c1e6 <ISO9660::closeDir(void*)+0x1e>
c001c1d8:	83 ec 0c             	sub    esp,0xc
c001c1db:	52                   	push   edx
c001c1dc:	e8 3e d8 fe ff       	call   c0009a1f <free>
c001c1e1:	83 c4 10             	add    esp,0x10
c001c1e4:	31 c0                	xor    eax,eax
c001c1e6:	83 c4 0c             	add    esp,0xc
c001c1e9:	c3                   	ret    

c001c1ea <ISO9660::~ISO9660()>:
c001c1ea:	83 ec 0c             	sub    esp,0xc
c001c1ed:	ba 3c 64 02 c0       	mov    edx,0xc002643c
c001c1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1f6:	89 10                	mov    DWORD PTR [eax],edx
c001c1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1fc:	83 ec 0c             	sub    esp,0xc
c001c1ff:	50                   	push   eax
c001c200:	e8 31 0e ff ff       	call   c000d036 <Filesystem::~Filesystem()>
c001c205:	83 c4 10             	add    esp,0x10
c001c208:	90                   	nop
c001c209:	83 c4 0c             	add    esp,0xc
c001c20c:	c3                   	ret    
c001c20d:	90                   	nop

c001c20e <ISO9660::~ISO9660()>:
c001c20e:	83 ec 0c             	sub    esp,0xc
c001c211:	83 ec 0c             	sub    esp,0xc
c001c214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c218:	e8 cd ff ff ff       	call   c001c1ea <ISO9660::~ISO9660()>
c001c21d:	83 c4 10             	add    esp,0x10
c001c220:	83 ec 08             	sub    esp,0x8
c001c223:	6a 08                	push   0x8
c001c225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c229:	e8 ec 09 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001c22e:	83 c4 10             	add    esp,0x10
c001c231:	83 c4 0c             	add    esp,0xc
c001c234:	c3                   	ret    

c001c235 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c235:	55                   	push   ebp
c001c236:	31 c9                	xor    ecx,ecx
c001c238:	57                   	push   edi
c001c239:	56                   	push   esi
c001c23a:	53                   	push   ebx
c001c23b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c23f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c243:	89 eb                	mov    ebx,ebp
c001c245:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c249:	39 ce                	cmp    esi,ecx
c001c24b:	7e 17                	jle    c001c264 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c24d:	31 d2                	xor    edx,edx
c001c24f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c253:	7d 13                	jge    c001c268 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c255:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c259:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c25c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c25f:	75 0d                	jne    c001c26e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c261:	42                   	inc    edx
c001c262:	eb eb                	jmp    c001c24f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c264:	31 c0                	xor    eax,eax
c001c266:	eb 0a                	jmp    c001c272 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c268:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c26c:	eb 04                	jmp    c001c272 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c26e:	41                   	inc    ecx
c001c26f:	43                   	inc    ebx
c001c270:	eb d7                	jmp    c001c249 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c272:	5b                   	pop    ebx
c001c273:	5e                   	pop    esi
c001c274:	5f                   	pop    edi
c001c275:	5d                   	pop    ebp
c001c276:	c3                   	ret    

c001c277 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c277:	57                   	push   edi
c001c278:	56                   	push   esi
c001c279:	53                   	push   ebx
c001c27a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c27e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c282:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c286:	39 35 80 96 02 c0    	cmp    DWORD PTR ds:0xc0029680,esi
c001c28c:	75 08                	jne    c001c296 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c28e:	38 1d 94 79 02 c0    	cmp    BYTE PTR ds:0xc0027994,bl
c001c294:	74 4a                	je     c001c2e0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c296:	83 ec 0c             	sub    esp,0xc
c001c299:	31 d2                	xor    edx,edx
c001c29b:	68 a0 96 02 c0       	push   0xc00296a0
c001c2a0:	0f be c3             	movsx  eax,bl
c001c2a3:	6a 01                	push   0x1
c001c2a5:	52                   	push   edx
c001c2a6:	56                   	push   esi
c001c2a7:	ff 34 85 1c 84 02 c0 	push   DWORD PTR [eax*4-0x3ffd7be4]
c001c2ae:	e8 d5 42 ff ff       	call   c0010588 <LogicalDisk::read(unsigned long long, int, void*)>
c001c2b3:	83 c4 20             	add    esp,0x20
c001c2b6:	85 c0                	test   eax,eax
c001c2b8:	75 0e                	jne    c001c2c8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c2ba:	89 35 80 96 02 c0    	mov    DWORD PTR ds:0xc0029680,esi
c001c2c0:	88 1d 94 79 02 c0    	mov    BYTE PTR ds:0xc0027994,bl
c001c2c6:	eb 18                	jmp    c001c2e0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c2c8:	50                   	push   eax
c001c2c9:	68 00 08 00 00       	push   0x800
c001c2ce:	6a 00                	push   0x0
c001c2d0:	57                   	push   edi
c001c2d1:	e8 ae 43 fe ff       	call   c0000684 <memset>
c001c2d6:	83 c4 10             	add    esp,0x10
c001c2d9:	b8 01 00 00 00       	mov    eax,0x1
c001c2de:	eb 0e                	jmp    c001c2ee <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c2e0:	be a0 96 02 c0       	mov    esi,0xc00296a0
c001c2e5:	b9 00 08 00 00       	mov    ecx,0x800
c001c2ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c2ec:	31 c0                	xor    eax,eax
c001c2ee:	5b                   	pop    ebx
c001c2ef:	5e                   	pop    esi
c001c2f0:	5f                   	pop    edi
c001c2f1:	c3                   	ret    

c001c2f2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c2f2:	81 ec 10 08 00 00    	sub    esp,0x810
c001c2f8:	c7 05 80 96 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029680,0xdeadbeef
c001c302:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c309:	83 c0 41             	add    eax,0x41
c001c30c:	0f be c0             	movsx  eax,al
c001c30f:	50                   	push   eax
c001c310:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c314:	50                   	push   eax
c001c315:	6a 10                	push   0x10
c001c317:	e8 5b ff ff ff       	call   c001c277 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c31c:	83 c4 10             	add    esp,0x10
c001c31f:	31 d2                	xor    edx,edx
c001c321:	85 c0                	test   eax,eax
c001c323:	75 24                	jne    c001c349 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c325:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c32a:	75 1d                	jne    c001c349 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c32c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c331:	75 16                	jne    c001c349 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c333:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c338:	75 0f                	jne    c001c349 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c33a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c33f:	75 08                	jne    c001c349 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c341:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c346:	0f 94 c2             	sete   dl
c001c349:	88 d0                	mov    al,dl
c001c34b:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c351:	c3                   	ret    

c001c352 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c352:	55                   	push   ebp
c001c353:	57                   	push   edi
c001c354:	56                   	push   esi
c001c355:	53                   	push   ebx
c001c356:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c35c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c363:	85 ed                	test   ebp,ebp
c001c365:	0f 84 da 01 00 00    	je     c001c545 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c36b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c373:	0f 84 cc 01 00 00    	je     c001c545 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c379:	b8 01 00 00 00       	mov    eax,0x1
c001c37e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c382:	0f 85 c2 01 00 00    	jne    c001c54a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c388:	31 d2                	xor    edx,edx
c001c38a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c391:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c394:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c397:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c39a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c39d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c3a1:	01 c8                	add    eax,ecx
c001c3a3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c3a6:	11 da                	adc    edx,ebx
c001c3a8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c3ac:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c3b0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c3b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c3b8:	19 d7                	sbb    edi,edx
c001c3ba:	72 11                	jb     c001c3cd <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c3bc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c3bf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c3c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c3cb:	eb 0c                	jmp    c001c3d9 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c3cd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c3d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c3d5:	29 ce                	sub    esi,ecx
c001c3d7:	19 df                	sbb    edi,ebx
c001c3d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c3dc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c3df:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c3e3:	c1 e0 0b             	shl    eax,0xb
c001c3e6:	01 c8                	add    eax,ecx
c001c3e8:	11 da                	adc    edx,ebx
c001c3ea:	89 04 24             	mov    DWORD PTR [esp],eax
c001c3ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c3f1:	51                   	push   ecx
c001c3f2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c3f6:	50                   	push   eax
c001c3f7:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c3fb:	53                   	push   ebx
c001c3fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c404:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c408:	50                   	push   eax
c001c409:	e8 69 fe ff ff       	call   c001c277 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c40e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c411:	b8 00 08 00 00       	mov    eax,0x800
c001c416:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c41c:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c420:	29 d0                	sub    eax,edx
c001c422:	83 c4 10             	add    esp,0x10
c001c425:	89 f9                	mov    ecx,edi
c001c427:	39 c6                	cmp    esi,eax
c001c429:	83 d9 00             	sbb    ecx,0x0
c001c42c:	7d 1b                	jge    c001c449 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c42e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c433:	75 12                	jne    c001c447 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c435:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c43c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c442:	e9 fa 00 00 00       	jmp    c001c541 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c447:	89 f0                	mov    eax,esi
c001c449:	01 d3                	add    ebx,edx
c001c44b:	31 d2                	xor    edx,edx
c001c44d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c451:	39 c2                	cmp    edx,eax
c001c453:	7d 14                	jge    c001c469 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c455:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c45c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c460:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c463:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c466:	42                   	inc    edx
c001c467:	eb e8                	jmp    c001c451 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c469:	89 c2                	mov    edx,eax
c001c46b:	85 c0                	test   eax,eax
c001c46d:	79 02                	jns    c001c471 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c46f:	31 d2                	xor    edx,edx
c001c471:	01 c2                	add    edx,eax
c001c473:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c476:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c47d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c481:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c485:	99                   	cdq    
c001c486:	01 c1                	add    ecx,eax
c001c488:	11 d3                	adc    ebx,edx
c001c48a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c48e:	29 c6                	sub    esi,eax
c001c490:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c494:	19 d7                	sbb    edi,edx
c001c496:	89 34 24             	mov    DWORD PTR [esp],esi
c001c499:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c49d:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c4a2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c4a5:	b8 00 00 00 00       	mov    eax,0x0
c001c4aa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c4ae:	7d 43                	jge    c001c4f3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c4b0:	52                   	push   edx
c001c4b1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c4b5:	50                   	push   eax
c001c4b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c4ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c4be:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c4c2:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c4c6:	50                   	push   eax
c001c4c7:	e8 ab fd ff ff       	call   c001c277 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c4cc:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c4d4:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c4d9:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c4e1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c4e9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c4ee:	83 c4 10             	add    esp,0x10
c001c4f1:	eb aa                	jmp    c001c49d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c4f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4f7:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c4fa:	74 2a                	je     c001c526 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c4fc:	50                   	push   eax
c001c4fd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c501:	50                   	push   eax
c001c502:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c506:	56                   	push   esi
c001c507:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c50b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c50f:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c513:	51                   	push   ecx
c001c514:	e8 5e fd ff ff       	call   c001c277 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c519:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c51d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c521:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c523:	83 c4 10             	add    esp,0x10
c001c526:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c52d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c531:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c535:	89 18                	mov    DWORD PTR [eax],ebx
c001c537:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c53b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c53e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c541:	31 c0                	xor    eax,eax
c001c543:	eb 05                	jmp    c001c54a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c545:	b8 04 00 00 00       	mov    eax,0x4
c001c54a:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c550:	5b                   	pop    ebx
c001c551:	5e                   	pop    esi
c001c552:	5f                   	pop    edi
c001c553:	5d                   	pop    ebp
c001c554:	c3                   	ret    
c001c555:	90                   	nop

c001c556 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c556:	55                   	push   ebp
c001c557:	57                   	push   edi
c001c558:	56                   	push   esi
c001c559:	53                   	push   ebx
c001c55a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c560:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c567:	85 ed                	test   ebp,ebp
c001c569:	0f 84 51 02 00 00    	je     c001c7c0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c56f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c577:	0f 84 43 02 00 00    	je     c001c7c0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c57d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c580:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c583:	75 0a                	jne    c001c58f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c585:	b8 07 00 00 00       	mov    eax,0x7
c001c58a:	e9 36 02 00 00       	jmp    c001c7c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c58f:	50                   	push   eax
c001c590:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c594:	50                   	push   eax
c001c595:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c59c:	53                   	push   ebx
c001c59d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5a0:	c1 e0 0b             	shl    eax,0xb
c001c5a3:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c5a6:	c1 e8 0b             	shr    eax,0xb
c001c5a9:	50                   	push   eax
c001c5aa:	e8 c8 fc ff ff       	call   c001c277 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c5af:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c5b2:	83 c4 10             	add    esp,0x10
c001c5b5:	89 c1                	mov    ecx,eax
c001c5b7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c5ba:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c5c0:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c5c3:	84 db                	test   bl,bl
c001c5c5:	0f 85 8b 00 00 00    	jne    c001c656 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c5cb:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c5d1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c5d4:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c5da:	29 c6                	sub    esi,eax
c001c5dc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c5e0:	89 f3                	mov    ebx,esi
c001c5e2:	89 f1                	mov    ecx,esi
c001c5e4:	c1 fb 1f             	sar    ebx,0x1f
c001c5e7:	01 f0                	add    eax,esi
c001c5e9:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c5ec:	11 da                	adc    edx,ebx
c001c5ee:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c5f5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c5f8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c5fb:	89 d8                	mov    eax,ebx
c001c5fd:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c601:	ba 00 00 00 00       	mov    edx,0x0
c001c606:	19 f8                	sbb    eax,edi
c001c608:	b8 00 00 00 00       	mov    eax,0x0
c001c60d:	73 08                	jae    c001c617 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c60f:	89 f0                	mov    eax,esi
c001c611:	89 fa                	mov    edx,edi
c001c613:	29 c8                	sub    eax,ecx
c001c615:	19 da                	sbb    edx,ebx
c001c617:	89 d7                	mov    edi,edx
c001c619:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c61c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c61f:	09 c7                	or     edi,eax
c001c621:	0f 84 5e ff ff ff    	je     c001c585 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c627:	57                   	push   edi
c001c628:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c62c:	50                   	push   eax
c001c62d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c634:	53                   	push   ebx
c001c635:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c638:	c1 e0 0b             	shl    eax,0xb
c001c63b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c63f:	c1 e8 0b             	shr    eax,0xb
c001c642:	50                   	push   eax
c001c643:	e8 2f fc ff ff       	call   c001c277 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c648:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c64b:	83 c4 10             	add    esp,0x10
c001c64e:	25 ff 07 00 00       	and    eax,0x7ff
c001c653:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c656:	31 ff                	xor    edi,edi
c001c658:	56                   	push   esi
c001c659:	6a 28                	push   0x28
c001c65b:	6a 00                	push   0x0
c001c65d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c661:	50                   	push   eax
c001c662:	e8 1d 40 fe ff       	call   c0000684 <memset>
c001c667:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c66a:	25 ff 07 00 00       	and    eax,0x7ff
c001c66f:	89 c6                	mov    esi,eax
c001c671:	83 c6 21             	add    esi,0x21
c001c674:	83 d7 00             	adc    edi,0x0
c001c677:	83 c4 10             	add    esp,0x10
c001c67a:	31 c9                	xor    ecx,ecx
c001c67c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c683:	83 f9 28             	cmp    ecx,0x28
c001c686:	88 04 24             	mov    BYTE PTR [esp],al
c001c689:	0f 94 c2             	sete   dl
c001c68c:	88 d0                	mov    al,dl
c001c68e:	ba ff 07 00 00       	mov    edx,0x7ff
c001c693:	39 f2                	cmp    edx,esi
c001c695:	ba 00 00 00 00       	mov    edx,0x0
c001c69a:	19 fa                	sbb    edx,edi
c001c69c:	0f 92 c2             	setb   dl
c001c69f:	09 c2                	or     edx,eax
c001c6a1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c6a5:	0f 94 c0             	sete   al
c001c6a8:	08 d0                	or     al,dl
c001c6aa:	75 16                	jne    c001c6c2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c6ac:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c6b0:	74 10                	je     c001c6c2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c6b2:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c6b5:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c6b9:	41                   	inc    ecx
c001c6ba:	83 c6 01             	add    esi,0x1
c001c6bd:	83 d7 00             	adc    edi,0x0
c001c6c0:	eb ba                	jmp    c001c67c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c6c2:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c6c9:	83 ec 0c             	sub    esp,0xc
c001c6cc:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c6d0:	56                   	push   esi
c001c6d1:	e8 ca 3f fe ff       	call   c00006a0 <strlen>
c001c6d6:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c6dd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c6e1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c6e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c6ec:	5a                   	pop    edx
c001c6ed:	25 ff 07 00 00       	and    eax,0x7ff
c001c6f2:	59                   	pop    ecx
c001c6f3:	01 f8                	add    eax,edi
c001c6f5:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c6fb:	83 e0 02             	and    eax,0x2
c001c6fe:	3c 01                	cmp    al,0x1
c001c700:	19 c0                	sbb    eax,eax
c001c702:	83 c0 02             	add    eax,0x2
c001c705:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c709:	56                   	push   esi
c001c70a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c70e:	50                   	push   eax
c001c70f:	e8 2c 40 fe ff       	call   c0000740 <strcpy>
c001c714:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c718:	83 c4 10             	add    esp,0x10
c001c71b:	84 c0                	test   al,al
c001c71d:	75 21                	jne    c001c740 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c71f:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c727:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c72f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c737:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c73e:	eb 28                	jmp    c001c768 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c740:	fe c8                	dec    al
c001c742:	75 24                	jne    c001c768 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c744:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c74c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c754:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c75c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c763:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c768:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c76c:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c773:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c77a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c77c:	0f b6 f3             	movzx  esi,bl
c001c77f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c786:	31 db                	xor    ebx,ebx
c001c788:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c78e:	89 df                	mov    edi,ebx
c001c790:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c796:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c799:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c79c:	39 c6                	cmp    esi,eax
c001c79e:	19 d7                	sbb    edi,edx
c001c7a0:	72 10                	jb     c001c7b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c7a2:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c7a9:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c7b0:	eb 0a                	jmp    c001c7bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c7b2:	29 f0                	sub    eax,esi
c001c7b4:	19 da                	sbb    edx,ebx
c001c7b6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c7b9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c7bc:	31 c0                	xor    eax,eax
c001c7be:	eb 05                	jmp    c001c7c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c7c0:	b8 04 00 00 00       	mov    eax,0x4
c001c7c5:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c7cb:	5b                   	pop    ebx
c001c7cc:	5e                   	pop    esi
c001c7cd:	5f                   	pop    edi
c001c7ce:	5d                   	pop    ebp
c001c7cf:	c3                   	ret    

c001c7d0 <readRoot(unsigned int*, unsigned int*, char)>:
c001c7d0:	57                   	push   edi
c001c7d1:	56                   	push   esi
c001c7d2:	81 ec 38 08 00 00    	sub    esp,0x838
c001c7d8:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c7e0:	50                   	push   eax
c001c7e1:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c7e5:	50                   	push   eax
c001c7e6:	6a 10                	push   0x10
c001c7e8:	e8 8a fa ff ff       	call   c001c277 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c7ed:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c7f4:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c7f8:	b9 22 00 00 00       	mov    ecx,0x22
c001c7fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c7ff:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c806:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c80a:	89 10                	mov    DWORD PTR [eax],edx
c001c80c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c813:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c817:	89 10                	mov    DWORD PTR [eax],edx
c001c819:	81 c4 44 08 00 00    	add    esp,0x844
c001c81f:	b0 01                	mov    al,0x1
c001c821:	5e                   	pop    esi
c001c822:	5f                   	pop    edi
c001c823:	c3                   	ret    

c001c824 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c824:	55                   	push   ebp
c001c825:	57                   	push   edi
c001c826:	56                   	push   esi
c001c827:	53                   	push   ebx
c001c828:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c82e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c835:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c83c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c840:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c844:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c848:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c84c:	75 03                	jne    c001c851 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c84e:	83 c3 02             	add    ebx,0x2
c001c851:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c854:	75 03                	jne    c001c859 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c856:	43                   	inc    ebx
c001c857:	eb f8                	jmp    c001c851 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c859:	52                   	push   edx
c001c85a:	68 00 01 00 00       	push   0x100
c001c85f:	6a 00                	push   0x0
c001c861:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c865:	50                   	push   eax
c001c866:	e8 19 3e fe ff       	call   c0000684 <memset>
c001c86b:	83 c4 10             	add    esp,0x10
c001c86e:	31 d2                	xor    edx,edx
c001c870:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c873:	84 c0                	test   al,al
c001c875:	74 21                	je     c001c898 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c877:	3c 2f                	cmp    al,0x2f
c001c879:	75 0b                	jne    c001c886 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c87b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c87f:	bd 01 00 00 00       	mov    ebp,0x1
c001c884:	eb 14                	jmp    c001c89a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c886:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c889:	80 f9 19             	cmp    cl,0x19
c001c88c:	77 03                	ja     c001c891 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c88e:	83 e8 20             	sub    eax,0x20
c001c891:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c895:	42                   	inc    edx
c001c896:	eb d8                	jmp    c001c870 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c898:	31 ed                	xor    ebp,ebp
c001c89a:	83 ec 0c             	sub    esp,0xc
c001c89d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c8a4:	e8 66 d1 fe ff       	call   c0009a0f <malloc>
c001c8a9:	89 c6                	mov    esi,eax
c001c8ab:	89 c2                	mov    edx,eax
c001c8ad:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001c8b4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001c8ba:	c1 ef 0b             	shr    edi,0xb
c001c8bd:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c8c4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c8c8:	83 c4 10             	add    esp,0x10
c001c8cb:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c8d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8d4:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001c8db:	74 29                	je     c001c906 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001c8dd:	50                   	push   eax
c001c8de:	57                   	push   edi
c001c8df:	52                   	push   edx
c001c8e0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c8e4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c8eb:	e8 87 f9 ff ff       	call   c001c277 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c8f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8f4:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c8fb:	81 c2 00 08 00 00    	add    edx,0x800
c001c901:	83 c4 10             	add    esp,0x10
c001c904:	eb ca                	jmp    c001c8d0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001c906:	83 ec 0c             	sub    esp,0xc
c001c909:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c90d:	57                   	push   edi
c001c90e:	e8 8d 3d fe ff       	call   c00006a0 <strlen>
c001c913:	50                   	push   eax
c001c914:	57                   	push   edi
c001c915:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c91c:	56                   	push   esi
c001c91d:	e8 13 f9 ff ff       	call   c001c235 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c922:	83 c4 20             	add    esp,0x20
c001c925:	85 c0                	test   eax,eax
c001c927:	75 13                	jne    c001c93c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001c929:	83 ec 0c             	sub    esp,0xc
c001c92c:	56                   	push   esi
c001c92d:	e8 ed d0 fe ff       	call   c0009a1f <free>
c001c932:	83 c4 10             	add    esp,0x10
c001c935:	31 c0                	xor    eax,eax
c001c937:	e9 b3 00 00 00       	jmp    c001c9ef <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001c93c:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c940:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c944:	c1 e7 08             	shl    edi,0x8
c001c947:	c1 e2 10             	shl    edx,0x10
c001c94a:	09 d7                	or     edi,edx
c001c94c:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c950:	09 d7                	or     edi,edx
c001c952:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c956:	c1 e2 18             	shl    edx,0x18
c001c959:	09 d7                	or     edi,edx
c001c95b:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c95f:	89 d1                	mov    ecx,edx
c001c961:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c965:	c1 e1 08             	shl    ecx,0x8
c001c968:	c1 e2 10             	shl    edx,0x10
c001c96b:	09 ca                	or     edx,ecx
c001c96d:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c971:	09 ca                	or     edx,ecx
c001c973:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c977:	c1 e1 18             	shl    ecx,0x18
c001c97a:	09 ca                	or     edx,ecx
c001c97c:	89 e9                	mov    ecx,ebp
c001c97e:	84 c9                	test   cl,cl
c001c980:	74 3c                	je     c001c9be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001c982:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c986:	83 ec 0c             	sub    esp,0xc
c001c989:	56                   	push   esi
c001c98a:	e8 90 d0 fe ff       	call   c0009a1f <free>
c001c98f:	83 c4 0c             	add    esp,0xc
c001c992:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c999:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c99e:	50                   	push   eax
c001c99f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c9a6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c9ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c9b1:	52                   	push   edx
c001c9b2:	57                   	push   edi
c001c9b3:	53                   	push   ebx
c001c9b4:	e8 6b fe ff ff       	call   c001c824 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c9b9:	83 c4 20             	add    esp,0x20
c001c9bc:	eb 31                	jmp    c001c9ef <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001c9be:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c9c1:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c9c8:	d0 e8                	shr    al,1
c001c9ca:	89 3b                	mov    DWORD PTR [ebx],edi
c001c9cc:	83 e0 01             	and    eax,0x1
c001c9cf:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c9d6:	83 ec 0c             	sub    esp,0xc
c001c9d9:	89 13                	mov    DWORD PTR [ebx],edx
c001c9db:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c9e2:	89 03                	mov    DWORD PTR [ebx],eax
c001c9e4:	56                   	push   esi
c001c9e5:	e8 35 d0 fe ff       	call   c0009a1f <free>
c001c9ea:	83 c4 10             	add    esp,0x10
c001c9ed:	b0 01                	mov    al,0x1
c001c9ef:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c9f5:	5b                   	pop    ebx
c001c9f6:	5e                   	pop    esi
c001c9f7:	5f                   	pop    edi
c001c9f8:	5d                   	pop    ebp
c001c9f9:	c3                   	ret    

c001c9fa <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c9fa:	55                   	push   ebp
c001c9fb:	57                   	push   edi
c001c9fc:	56                   	push   esi
c001c9fd:	53                   	push   ebx
c001c9fe:	83 ec 20             	sub    esp,0x20
c001ca01:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ca05:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ca09:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ca0d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ca15:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ca1d:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001ca22:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001ca28:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001ca2e:	57                   	push   edi
c001ca2f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ca33:	50                   	push   eax
c001ca34:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ca38:	50                   	push   eax
c001ca39:	e8 92 fd ff ff       	call   c001c7d0 <readRoot(unsigned int*, unsigned int*, char)>
c001ca3e:	5a                   	pop    edx
c001ca3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ca43:	e8 58 3c fe ff       	call   c00006a0 <strlen>
c001ca48:	83 c4 10             	add    esp,0x10
c001ca4b:	83 f8 03             	cmp    eax,0x3
c001ca4e:	77 17                	ja     c001ca67 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ca50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca54:	89 03                	mov    DWORD PTR [ebx],eax
c001ca56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca5a:	89 06                	mov    DWORD PTR [esi],eax
c001ca5c:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001ca63:	b0 01                	mov    al,0x1
c001ca65:	eb 19                	jmp    c001ca80 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001ca67:	50                   	push   eax
c001ca68:	55                   	push   ebp
c001ca69:	57                   	push   edi
c001ca6a:	56                   	push   esi
c001ca6b:	53                   	push   ebx
c001ca6c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca70:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca74:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca78:	e8 a7 fd ff ff       	call   c001c824 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ca7d:	83 c4 20             	add    esp,0x20
c001ca80:	83 c4 1c             	add    esp,0x1c
c001ca83:	5b                   	pop    ebx
c001ca84:	5e                   	pop    esi
c001ca85:	5f                   	pop    edi
c001ca86:	5d                   	pop    ebp
c001ca87:	c3                   	ret    

c001ca88 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ca88:	57                   	push   edi
c001ca89:	56                   	push   esi
c001ca8a:	53                   	push   ebx
c001ca8b:	83 ec 10             	sub    esp,0x10
c001ca8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ca92:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ca96:	85 ff                	test   edi,edi
c001ca98:	0f 84 8b 00 00 00    	je     c001cb29 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001ca9e:	85 f6                	test   esi,esi
c001caa0:	0f 84 83 00 00 00    	je     c001cb29 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001caa6:	b8 03 00 00 00       	mov    eax,0x3
c001caab:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001cab0:	75 7c                	jne    c001cb2e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cab2:	83 ec 0c             	sub    esp,0xc
c001cab5:	6a 1c                	push   0x1c
c001cab7:	e8 53 cf fe ff       	call   c0009a0f <malloc>
c001cabc:	89 07                	mov    DWORD PTR [edi],eax
c001cabe:	89 c3                	mov    ebx,eax
c001cac0:	58                   	pop    eax
c001cac1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cac5:	50                   	push   eax
c001cac6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cac9:	50                   	push   eax
c001caca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cace:	50                   	push   eax
c001cacf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cad3:	50                   	push   eax
c001cad4:	56                   	push   esi
c001cad5:	e8 20 ff ff ff       	call   c001c9fa <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cada:	83 c4 20             	add    esp,0x20
c001cadd:	84 c0                	test   al,al
c001cadf:	74 07                	je     c001cae8 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001cae1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cae6:	74 0b                	je     c001caf3 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001cae8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001caec:	b8 01 00 00 00       	mov    eax,0x1
c001caf1:	eb 3b                	jmp    c001cb2e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001caf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caf7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cafb:	89 03                	mov    DWORD PTR [ebx],eax
c001cafd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cb04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb08:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cb0f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb20:	8a 06                	mov    al,BYTE PTR [esi]
c001cb22:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cb25:	31 c0                	xor    eax,eax
c001cb27:	eb 05                	jmp    c001cb2e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cb29:	b8 04 00 00 00       	mov    eax,0x4
c001cb2e:	83 c4 10             	add    esp,0x10
c001cb31:	5b                   	pop    ebx
c001cb32:	5e                   	pop    esi
c001cb33:	5f                   	pop    edi
c001cb34:	c3                   	ret    
c001cb35:	90                   	nop

c001cb36 <ISO9660::exists(char const*)>:
c001cb36:	83 ec 28             	sub    esp,0x28
c001cb39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb3d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001cb41:	52                   	push   edx
c001cb42:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001cb45:	52                   	push   edx
c001cb46:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cb4a:	52                   	push   edx
c001cb4b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cb4f:	52                   	push   edx
c001cb50:	50                   	push   eax
c001cb51:	e8 a4 fe ff ff       	call   c001c9fa <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cb56:	83 c4 3c             	add    esp,0x3c
c001cb59:	c3                   	ret    

c001cb5a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cb5a:	56                   	push   esi
c001cb5b:	53                   	push   ebx
c001cb5c:	83 ec 14             	sub    esp,0x14
c001cb5f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cb63:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cb67:	85 db                	test   ebx,ebx
c001cb69:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb6d:	0f 94 c2             	sete   dl
c001cb70:	85 f6                	test   esi,esi
c001cb72:	0f 94 c0             	sete   al
c001cb75:	08 c2                	or     dl,al
c001cb77:	75 68                	jne    c001cbe1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cb79:	85 c9                	test   ecx,ecx
c001cb7b:	74 64                	je     c001cbe1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cb7d:	83 ec 0c             	sub    esp,0xc
c001cb80:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001cb83:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb87:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cb8d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb94:	50                   	push   eax
c001cb95:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001cb98:	50                   	push   eax
c001cb99:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb9d:	50                   	push   eax
c001cb9e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cba2:	50                   	push   eax
c001cba3:	51                   	push   ecx
c001cba4:	e8 51 fe ff ff       	call   c001c9fa <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cba9:	83 c4 20             	add    esp,0x20
c001cbac:	ba 01 00 00 00       	mov    edx,0x1
c001cbb1:	84 c0                	test   al,al
c001cbb3:	74 31                	je     c001cbe6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cbb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbb9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cbc0:	89 03                	mov    DWORD PTR [ebx],eax
c001cbc2:	ba 00 00 00 00       	mov    edx,0x0
c001cbc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbcb:	85 c0                	test   eax,eax
c001cbcd:	0f 95 06             	setne  BYTE PTR [esi]
c001cbd0:	74 14                	je     c001cbe6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cbd2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cbd8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cbdf:	eb 05                	jmp    c001cbe6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cbe1:	ba 04 00 00 00       	mov    edx,0x4
c001cbe6:	83 c4 14             	add    esp,0x14
c001cbe9:	89 d0                	mov    eax,edx
c001cbeb:	5b                   	pop    ebx
c001cbec:	5e                   	pop    esi
c001cbed:	c3                   	ret    

c001cbee <ISO9660::openDir(char const*, void**)>:
c001cbee:	57                   	push   edi
c001cbef:	56                   	push   esi
c001cbf0:	53                   	push   ebx
c001cbf1:	83 ec 10             	sub    esp,0x10
c001cbf4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cbf8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cbfc:	85 ff                	test   edi,edi
c001cbfe:	74 7b                	je     c001cc7b <ISO9660::openDir(char const*, void**)+0x8d>
c001cc00:	85 f6                	test   esi,esi
c001cc02:	74 77                	je     c001cc7b <ISO9660::openDir(char const*, void**)+0x8d>
c001cc04:	83 ec 0c             	sub    esp,0xc
c001cc07:	6a 1c                	push   0x1c
c001cc09:	e8 01 ce fe ff       	call   c0009a0f <malloc>
c001cc0e:	89 07                	mov    DWORD PTR [edi],eax
c001cc10:	89 c3                	mov    ebx,eax
c001cc12:	58                   	pop    eax
c001cc13:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cc17:	50                   	push   eax
c001cc18:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cc1b:	50                   	push   eax
c001cc1c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cc20:	50                   	push   eax
c001cc21:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cc25:	50                   	push   eax
c001cc26:	56                   	push   esi
c001cc27:	e8 ce fd ff ff       	call   c001c9fa <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cc2c:	83 c4 20             	add    esp,0x20
c001cc2f:	84 c0                	test   al,al
c001cc31:	74 07                	je     c001cc3a <ISO9660::openDir(char const*, void**)+0x4c>
c001cc33:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cc38:	75 0b                	jne    c001cc45 <ISO9660::openDir(char const*, void**)+0x57>
c001cc3a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001cc3e:	b8 01 00 00 00       	mov    eax,0x1
c001cc43:	eb 3b                	jmp    c001cc80 <ISO9660::openDir(char const*, void**)+0x92>
c001cc45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc49:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cc4d:	89 03                	mov    DWORD PTR [ebx],eax
c001cc4f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cc56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc5a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cc61:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cc68:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cc6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cc72:	8a 06                	mov    al,BYTE PTR [esi]
c001cc74:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cc77:	31 c0                	xor    eax,eax
c001cc79:	eb 05                	jmp    c001cc80 <ISO9660::openDir(char const*, void**)+0x92>
c001cc7b:	b8 04 00 00 00       	mov    eax,0x4
c001cc80:	83 c4 10             	add    esp,0x10
c001cc83:	5b                   	pop    ebx
c001cc84:	5e                   	pop    esi
c001cc85:	5f                   	pop    edi
c001cc86:	c3                   	ret    
c001cc87:	90                   	nop

c001cc88 <ISO9660::ISO9660()>:
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8f:	83 ec 0c             	sub    esp,0xc
c001cc92:	50                   	push   eax
c001cc93:	e8 7a 03 ff ff       	call   c000d012 <Filesystem::Filesystem()>
c001cc98:	83 c4 10             	add    esp,0x10
c001cc9b:	ba 3c 64 02 c0       	mov    edx,0xc002643c
c001cca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca4:	89 10                	mov    DWORD PTR [eax],edx
c001cca6:	90                   	nop
c001cca7:	83 c4 0c             	add    esp,0xc
c001ccaa:	c3                   	ret    
c001ccab:	90                   	nop

c001ccac <SoundCard::beginPlayback()>:
c001ccac:	c7 44 24 04 9c 64 02 c0 	mov    DWORD PTR [esp+0x4],0xc002649c
c001ccb4:	e9 4e 7d ff ff       	jmp    c0014a07 <Krnl::panic(char const*)>
c001ccb9:	90                   	nop

c001ccba <SoundCard::stopPlayback()>:
c001ccba:	c7 44 24 04 d0 64 02 c0 	mov    DWORD PTR [esp+0x4],0xc00264d0
c001ccc2:	e9 40 7d ff ff       	jmp    c0014a07 <Krnl::panic(char const*)>
c001ccc7:	90                   	nop

c001ccc8 <SoundCard::SoundCard(char const*)>:
c001ccc8:	83 ec 1c             	sub    esp,0x1c
c001cccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cccf:	83 ec 08             	sub    esp,0x8
c001ccd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccd6:	50                   	push   eax
c001ccd7:	e8 96 17 ff ff       	call   c000e472 <Device::Device(char const*)>
c001ccdc:	83 c4 10             	add    esp,0x10
c001ccdf:	ba 68 65 02 c0       	mov    edx,0xc0026568
c001cce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cce8:	89 10                	mov    DWORD PTR [eax],edx
c001ccea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccee:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ccf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccf9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cd03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd07:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cd11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd15:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cd1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd23:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cd2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd35:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cd3a:	7f 19                	jg     c001cd55 <SoundCard::SoundCard(char const*)+0x8d>
c001cd3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cd44:	83 c2 54             	add    edx,0x54
c001cd47:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cd4f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001cd53:	eb e0                	jmp    c001cd35 <SoundCard::SoundCard(char const*)+0x6d>
c001cd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd59:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cd60:	90                   	nop
c001cd61:	83 c4 1c             	add    esp,0x1c
c001cd64:	c3                   	ret    
c001cd65:	90                   	nop

c001cd66 <SoundCard::~SoundCard()>:
c001cd66:	83 ec 0c             	sub    esp,0xc
c001cd69:	ba 68 65 02 c0       	mov    edx,0xc0026568
c001cd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd72:	89 10                	mov    DWORD PTR [eax],edx
c001cd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd78:	83 ec 0c             	sub    esp,0xc
c001cd7b:	50                   	push   eax
c001cd7c:	e8 bb 13 ff ff       	call   c000e13c <Device::~Device()>
c001cd81:	83 c4 10             	add    esp,0x10
c001cd84:	90                   	nop
c001cd85:	83 c4 0c             	add    esp,0xc
c001cd88:	c3                   	ret    
c001cd89:	90                   	nop

c001cd8a <SoundCard::~SoundCard()>:
c001cd8a:	83 ec 0c             	sub    esp,0xc
c001cd8d:	83 ec 0c             	sub    esp,0xc
c001cd90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd94:	e8 cd ff ff ff       	call   c001cd66 <SoundCard::~SoundCard()>
c001cd99:	83 c4 10             	add    esp,0x10
c001cd9c:	83 ec 08             	sub    esp,0x8
c001cd9f:	68 e8 01 00 00       	push   0x1e8
c001cda4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda8:	e8 6d fe fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001cdad:	83 c4 10             	add    esp,0x10
c001cdb0:	83 c4 0c             	add    esp,0xc
c001cdb3:	c3                   	ret    

c001cdb4 <SoundCard::configureRates(int, int, int)>:
c001cdb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cdb8:	31 c0                	xor    eax,eax
c001cdba:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cdc1:	75 20                	jne    c001cde3 <SoundCard::configureRates(int, int, int)+0x2f>
c001cdc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cdc7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cdcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cdd1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cdd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cddb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cde1:	b0 01                	mov    al,0x1
c001cde3:	c3                   	ret    

c001cde4 <SoundCard::getSamples16(int, short*)>:
c001cde4:	55                   	push   ebp
c001cde5:	57                   	push   edi
c001cde6:	31 ff                	xor    edi,edi
c001cde8:	56                   	push   esi
c001cde9:	53                   	push   ebx
c001cdea:	31 db                	xor    ebx,ebx
c001cdec:	83 ec 18             	sub    esp,0x18
c001cdef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cdf3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cdf7:	68 03 65 02 c0       	push   0xc0026503
c001cdfc:	e8 fa fe fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001ce01:	83 c4 0c             	add    esp,0xc
c001ce04:	8d 04 36             	lea    eax,[esi+esi*1]
c001ce07:	50                   	push   eax
c001ce08:	6a 00                	push   0x0
c001ce0a:	55                   	push   ebp
c001ce0b:	e8 74 38 fe ff       	call   c0000684 <memset>
c001ce10:	83 c4 10             	add    esp,0x10
c001ce13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce17:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001ce1e:	85 c0                	test   eax,eax
c001ce20:	74 1b                	je     c001ce3d <SoundCard::getSamples16(int, short*)+0x59>
c001ce22:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ce26:	75 15                	jne    c001ce3d <SoundCard::getSamples16(int, short*)+0x59>
c001ce28:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce2c:	55                   	push   ebp
c001ce2d:	56                   	push   esi
c001ce2e:	50                   	push   eax
c001ce2f:	e8 58 03 00 00       	call   c001d18c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ce34:	83 c4 10             	add    esp,0x10
c001ce37:	39 c7                	cmp    edi,eax
c001ce39:	7d 02                	jge    c001ce3d <SoundCard::getSamples16(int, short*)+0x59>
c001ce3b:	89 c7                	mov    edi,eax
c001ce3d:	43                   	inc    ebx
c001ce3e:	83 fb 20             	cmp    ebx,0x20
c001ce41:	75 d0                	jne    c001ce13 <SoundCard::getSamples16(int, short*)+0x2f>
c001ce43:	83 c4 0c             	add    esp,0xc
c001ce46:	89 f8                	mov    eax,edi
c001ce48:	5b                   	pop    ebx
c001ce49:	5e                   	pop    esi
c001ce4a:	5f                   	pop    edi
c001ce4b:	5d                   	pop    ebp
c001ce4c:	c3                   	ret    
c001ce4d:	90                   	nop

c001ce4e <SoundCard::getSamples32(int, int*)>:
c001ce4e:	55                   	push   ebp
c001ce4f:	57                   	push   edi
c001ce50:	31 ff                	xor    edi,edi
c001ce52:	56                   	push   esi
c001ce53:	31 f6                	xor    esi,esi
c001ce55:	53                   	push   ebx
c001ce56:	83 ec 10             	sub    esp,0x10
c001ce59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce5d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ce61:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ce65:	c1 e0 02             	shl    eax,0x2
c001ce68:	50                   	push   eax
c001ce69:	6a 00                	push   0x0
c001ce6b:	55                   	push   ebp
c001ce6c:	e8 13 38 fe ff       	call   c0000684 <memset>
c001ce71:	83 c4 10             	add    esp,0x10
c001ce74:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ce7b:	85 c0                	test   eax,eax
c001ce7d:	74 1b                	je     c001ce9a <SoundCard::getSamples32(int, int*)+0x4c>
c001ce7f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ce83:	75 15                	jne    c001ce9a <SoundCard::getSamples32(int, int*)+0x4c>
c001ce85:	53                   	push   ebx
c001ce86:	55                   	push   ebp
c001ce87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce8b:	50                   	push   eax
c001ce8c:	e8 f7 03 00 00       	call   c001d288 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ce91:	83 c4 10             	add    esp,0x10
c001ce94:	39 c6                	cmp    esi,eax
c001ce96:	7d 02                	jge    c001ce9a <SoundCard::getSamples32(int, int*)+0x4c>
c001ce98:	89 c6                	mov    esi,eax
c001ce9a:	47                   	inc    edi
c001ce9b:	83 ff 20             	cmp    edi,0x20
c001ce9e:	75 d4                	jne    c001ce74 <SoundCard::getSamples32(int, int*)+0x26>
c001cea0:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001cea6:	85 f6                	test   esi,esi
c001cea8:	75 0f                	jne    c001ceb9 <SoundCard::getSamples32(int, int*)+0x6b>
c001ceaa:	84 c0                	test   al,al
c001ceac:	74 1b                	je     c001cec9 <SoundCard::getSamples32(int, int*)+0x7b>
c001ceae:	83 ec 0c             	sub    esp,0xc
c001ceb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceb3:	53                   	push   ebx
c001ceb4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ceb7:	eb 0d                	jmp    c001cec6 <SoundCard::getSamples32(int, int*)+0x78>
c001ceb9:	84 c0                	test   al,al
c001cebb:	75 0c                	jne    c001cec9 <SoundCard::getSamples32(int, int*)+0x7b>
c001cebd:	83 ec 0c             	sub    esp,0xc
c001cec0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cec2:	53                   	push   ebx
c001cec3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001cec6:	83 c4 10             	add    esp,0x10
c001cec9:	83 c4 0c             	add    esp,0xc
c001cecc:	89 f0                	mov    eax,esi
c001cece:	5b                   	pop    ebx
c001cecf:	5e                   	pop    esi
c001ced0:	5f                   	pop    edi
c001ced1:	5d                   	pop    ebp
c001ced2:	c3                   	ret    
c001ced3:	90                   	nop

c001ced4 <SoundCard::addChannel(SoundPort*)>:
c001ced4:	56                   	push   esi
c001ced5:	53                   	push   ebx
c001ced6:	53                   	push   ebx
c001ced7:	31 db                	xor    ebx,ebx
c001ced9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cedd:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001cee5:	74 27                	je     c001cf0e <SoundCard::addChannel(SoundPort*)+0x3a>
c001cee7:	43                   	inc    ebx
c001cee8:	83 fb 20             	cmp    ebx,0x20
c001ceeb:	75 f0                	jne    c001cedd <SoundCard::addChannel(SoundPort*)+0x9>
c001ceed:	83 ec 0c             	sub    esp,0xc
c001cef0:	83 cb ff             	or     ebx,0xffffffff
c001cef3:	68 29 65 02 c0       	push   0xc0026529
c001cef8:	e8 fe fd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001cefd:	c7 04 24 22 65 02 c0 	mov    DWORD PTR [esp],0xc0026522
c001cf04:	e8 fe 7a ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001cf09:	83 c4 10             	add    esp,0x10
c001cf0c:	eb 1b                	jmp    c001cf29 <SoundCard::addChannel(SoundPort*)+0x55>
c001cf0e:	51                   	push   ecx
c001cf0f:	51                   	push   ecx
c001cf10:	53                   	push   ebx
c001cf11:	68 41 65 02 c0       	push   0xc0026541
c001cf16:	e8 e0 fd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001cf1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf1f:	83 c4 10             	add    esp,0x10
c001cf22:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001cf29:	89 d8                	mov    eax,ebx
c001cf2b:	5a                   	pop    edx
c001cf2c:	5b                   	pop    ebx
c001cf2d:	5e                   	pop    esi
c001cf2e:	c3                   	ret    
c001cf2f:	90                   	nop

c001cf30 <SoundCard::removeChannel(int)>:
c001cf30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cf38:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cf43:	c3                   	ret    

c001cf44 <SoundPort::SoundPort(int, int, int, int)>:
c001cf44:	83 ec 0c             	sub    esp,0xc
c001cf47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf4b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cf52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf56:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cf5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf62:	89 10                	mov    DWORD PTR [eax],edx
c001cf64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cf6c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cf6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf77:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf7a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cf7f:	75 13                	jne    c001cf94 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cf81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf85:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf87:	05 a0 0f 00 00       	add    eax,0xfa0
c001cf8c:	01 c0                	add    eax,eax
c001cf8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf92:	66 90                	xchg   ax,ax
c001cf94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cf9c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cf9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cfaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cfb1:	c1 e0 02             	shl    eax,0x2
c001cfb4:	83 ec 0c             	sub    esp,0xc
c001cfb7:	50                   	push   eax
c001cfb8:	e8 52 ca fe ff       	call   c0009a0f <malloc>
c001cfbd:	83 c4 10             	add    esp,0x10
c001cfc0:	89 c2                	mov    edx,eax
c001cfc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cfc9:	90                   	nop
c001cfca:	83 c4 0c             	add    esp,0xc
c001cfcd:	c3                   	ret    
c001cfce:	66 90                	xchg   ax,ax

c001cfd0 <SoundPort::~SoundPort()>:
c001cfd0:	83 ec 0c             	sub    esp,0xc
c001cfd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cfda:	85 c0                	test   eax,eax
c001cfdc:	74 1e                	je     c001cffc <SoundPort::~SoundPort()+0x2c>
c001cfde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfe2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cfe5:	83 ec 0c             	sub    esp,0xc
c001cfe8:	50                   	push   eax
c001cfe9:	e8 31 ca fe ff       	call   c0009a1f <free>
c001cfee:	83 c4 10             	add    esp,0x10
c001cff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cffc:	90                   	nop
c001cffd:	83 c4 0c             	add    esp,0xc
c001d000:	c3                   	ret    
c001d001:	90                   	nop
c001d002:	66 90                	xchg   ax,ax

c001d004 <SoundPort::unpause()>:
c001d004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d008:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d00c:	c3                   	ret    
c001d00d:	90                   	nop
c001d00e:	66 90                	xchg   ax,ax

c001d010 <SoundPort::pause()>:
c001d010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d014:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d018:	c3                   	ret    
c001d019:	90                   	nop
c001d01a:	66 90                	xchg   ax,ax

c001d01c <SoundPort::getBufferUsed()>:
c001d01c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d020:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d023:	c3                   	ret    

c001d024 <SoundPort::getBufferSize()>:
c001d024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d028:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d02b:	c3                   	ret    

c001d02c <SoundPort::buffer16(short*, int)>:
c001d02c:	55                   	push   ebp
c001d02d:	57                   	push   edi
c001d02e:	56                   	push   esi
c001d02f:	53                   	push   ebx
c001d030:	83 ec 1c             	sub    esp,0x1c
c001d033:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d037:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d03b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d03e:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d041:	0f 84 85 00 00 00    	je     c001d0cc <SoundPort::buffer16(short*, int)+0xa0>
c001d047:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d04b:	85 c9                	test   ecx,ecx
c001d04d:	7e 7d                	jle    c001d0cc <SoundPort::buffer16(short*, int)+0xa0>
c001d04f:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d053:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d056:	c1 e1 0f             	shl    ecx,0xf
c001d059:	8d 70 01             	lea    esi,[eax+0x1]
c001d05c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d05f:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d062:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d065:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d068:	74 6e                	je     c001d0d8 <SoundPort::buffer16(short*, int)+0xac>
c001d06a:	31 f6                	xor    esi,esi
c001d06c:	eb 22                	jmp    c001d090 <SoundPort::buffer16(short*, int)+0x64>
c001d06e:	66 90                	xchg   ax,ax
c001d070:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d075:	8d 79 01             	lea    edi,[ecx+0x1]
c001d078:	c1 e3 0f             	shl    ebx,0xf
c001d07b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d07e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d081:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d084:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d087:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d08a:	74 1c                	je     c001d0a8 <SoundPort::buffer16(short*, int)+0x7c>
c001d08c:	89 c6                	mov    esi,eax
c001d08e:	66 90                	xchg   ax,ax
c001d090:	8d 46 01             	lea    eax,[esi+0x1]
c001d093:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d097:	75 d7                	jne    c001d070 <SoundPort::buffer16(short*, int)+0x44>
c001d099:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d09d:	83 c4 1c             	add    esp,0x1c
c001d0a0:	5b                   	pop    ebx
c001d0a1:	5e                   	pop    esi
c001d0a2:	5f                   	pop    edi
c001d0a3:	5d                   	pop    ebp
c001d0a4:	c3                   	ret    
c001d0a5:	8d 76 00             	lea    esi,[esi+0x0]
c001d0a8:	8d 46 02             	lea    eax,[esi+0x2]
c001d0ab:	90                   	nop
c001d0ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0b0:	83 ec 0c             	sub    esp,0xc
c001d0b3:	68 94 65 02 c0       	push   0xc0026594
c001d0b8:	e8 3e fc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001d0bd:	83 c4 10             	add    esp,0x10
c001d0c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0c4:	83 c4 1c             	add    esp,0x1c
c001d0c7:	5b                   	pop    ebx
c001d0c8:	5e                   	pop    esi
c001d0c9:	5f                   	pop    edi
c001d0ca:	5d                   	pop    ebp
c001d0cb:	c3                   	ret    
c001d0cc:	83 c4 1c             	add    esp,0x1c
c001d0cf:	31 c0                	xor    eax,eax
c001d0d1:	5b                   	pop    ebx
c001d0d2:	5e                   	pop    esi
c001d0d3:	5f                   	pop    edi
c001d0d4:	5d                   	pop    ebp
c001d0d5:	c3                   	ret    
c001d0d6:	66 90                	xchg   ax,ax
c001d0d8:	b8 01 00 00 00       	mov    eax,0x1
c001d0dd:	eb cd                	jmp    c001d0ac <SoundPort::buffer16(short*, int)+0x80>
c001d0df:	90                   	nop

c001d0e0 <SoundPort::buffer32(int*, int)>:
c001d0e0:	55                   	push   ebp
c001d0e1:	57                   	push   edi
c001d0e2:	56                   	push   esi
c001d0e3:	53                   	push   ebx
c001d0e4:	83 ec 1c             	sub    esp,0x1c
c001d0e7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d0eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d0ef:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d0f2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d0f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0fa:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d0fd:	74 79                	je     c001d178 <SoundPort::buffer32(int*, int)+0x98>
c001d0ff:	85 c0                	test   eax,eax
c001d101:	7e 75                	jle    c001d178 <SoundPort::buffer32(int*, int)+0x98>
c001d103:	8d 71 01             	lea    esi,[ecx+0x1]
c001d106:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d109:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d10c:	8b 37                	mov    esi,DWORD PTR [edi]
c001d10e:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d111:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d114:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d117:	74 6b                	je     c001d184 <SoundPort::buffer32(int*, int)+0xa4>
c001d119:	31 f6                	xor    esi,esi
c001d11b:	eb 1f                	jmp    c001d13c <SoundPort::buffer32(int*, int)+0x5c>
c001d11d:	8d 76 00             	lea    esi,[esi+0x0]
c001d120:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d123:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d126:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d129:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d12c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d130:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d133:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d136:	74 1c                	je     c001d154 <SoundPort::buffer32(int*, int)+0x74>
c001d138:	89 de                	mov    esi,ebx
c001d13a:	66 90                	xchg   ax,ax
c001d13c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d13f:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d143:	75 db                	jne    c001d120 <SoundPort::buffer32(int*, int)+0x40>
c001d145:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d149:	83 c4 1c             	add    esp,0x1c
c001d14c:	5b                   	pop    ebx
c001d14d:	5e                   	pop    esi
c001d14e:	5f                   	pop    edi
c001d14f:	5d                   	pop    ebp
c001d150:	c3                   	ret    
c001d151:	8d 76 00             	lea    esi,[esi+0x0]
c001d154:	8d 46 02             	lea    eax,[esi+0x2]
c001d157:	90                   	nop
c001d158:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d15c:	83 ec 0c             	sub    esp,0xc
c001d15f:	68 af 65 02 c0       	push   0xc00265af
c001d164:	e8 92 fb fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001d169:	83 c4 10             	add    esp,0x10
c001d16c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d170:	83 c4 1c             	add    esp,0x1c
c001d173:	5b                   	pop    ebx
c001d174:	5e                   	pop    esi
c001d175:	5f                   	pop    edi
c001d176:	5d                   	pop    ebp
c001d177:	c3                   	ret    
c001d178:	83 c4 1c             	add    esp,0x1c
c001d17b:	31 c0                	xor    eax,eax
c001d17d:	5b                   	pop    ebx
c001d17e:	5e                   	pop    esi
c001d17f:	5f                   	pop    edi
c001d180:	5d                   	pop    ebp
c001d181:	c3                   	ret    
c001d182:	66 90                	xchg   ax,ax
c001d184:	b8 01 00 00 00       	mov    eax,0x1
c001d189:	eb cd                	jmp    c001d158 <SoundPort::buffer32(int*, int)+0x78>
c001d18b:	90                   	nop

c001d18c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d18c:	57                   	push   edi
c001d18d:	56                   	push   esi
c001d18e:	53                   	push   ebx
c001d18f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d193:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d197:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d19d:	39 03                	cmp    DWORD PTR [ebx],eax
c001d19f:	74 13                	je     c001d1b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d1a1:	83 ec 0c             	sub    esp,0xc
c001d1a4:	68 04 66 02 c0       	push   0xc0026604
c001d1a9:	e8 59 78 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001d1ae:	83 c4 10             	add    esp,0x10
c001d1b1:	8d 76 00             	lea    esi,[esi+0x0]
c001d1b4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d1ba:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d1bd:	74 11                	je     c001d1d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d1bf:	83 ec 0c             	sub    esp,0xc
c001d1c2:	68 ca 65 02 c0       	push   0xc00265ca
c001d1c7:	e8 3b 78 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001d1cc:	83 c4 10             	add    esp,0x10
c001d1cf:	90                   	nop
c001d1d0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d1d6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d1d9:	74 11                	je     c001d1ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d1db:	83 ec 0c             	sub    esp,0xc
c001d1de:	68 ca 65 02 c0       	push   0xc00265ca
c001d1e3:	e8 1f 78 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001d1e8:	83 c4 10             	add    esp,0x10
c001d1eb:	90                   	nop
c001d1ec:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1ef:	89 c6                	mov    esi,eax
c001d1f1:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d1f5:	7e 05                	jle    c001d1fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d1f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d1fb:	90                   	nop
c001d1fc:	85 f6                	test   esi,esi
c001d1fe:	7e 30                	jle    c001d230 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d200:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d204:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d207:	31 c9                	xor    ecx,ecx
c001d209:	01 d7                	add    edi,edx
c001d20b:	90                   	nop
c001d20c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d20f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d212:	85 c0                	test   eax,eax
c001d214:	79 06                	jns    c001d21c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d216:	05 ff 7f 00 00       	add    eax,0x7fff
c001d21b:	90                   	nop
c001d21c:	c1 f8 0f             	sar    eax,0xf
c001d21f:	83 c1 04             	add    ecx,0x4
c001d222:	66 01 02             	add    WORD PTR [edx],ax
c001d225:	83 c2 02             	add    edx,0x2
c001d228:	39 d7                	cmp    edi,edx
c001d22a:	75 e0                	jne    c001d20c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d22c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d22f:	90                   	nop
c001d230:	56                   	push   esi
c001d231:	89 c2                	mov    edx,eax
c001d233:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d23a:	29 f2                	sub    edx,esi
c001d23c:	52                   	push   edx
c001d23d:	50                   	push   eax
c001d23e:	68 24 66 02 c0       	push   0xc0026624
c001d243:	e8 b3 fa fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001d248:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d24b:	50                   	push   eax
c001d24c:	01 f8                	add    eax,edi
c001d24e:	50                   	push   eax
c001d24f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d252:	29 f0                	sub    eax,esi
c001d254:	c1 e0 02             	shl    eax,0x2
c001d257:	50                   	push   eax
c001d258:	68 54 66 02 c0       	push   0xc0026654
c001d25d:	e8 99 fa fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001d262:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d265:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d268:	83 c4 1c             	add    esp,0x1c
c001d26b:	01 d7                	add    edi,edx
c001d26d:	29 f0                	sub    eax,esi
c001d26f:	c1 e0 02             	shl    eax,0x2
c001d272:	50                   	push   eax
c001d273:	57                   	push   edi
c001d274:	52                   	push   edx
c001d275:	e8 42 33 fe ff       	call   c00005bc <memmove>
c001d27a:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d27d:	83 c4 10             	add    esp,0x10
c001d280:	89 f0                	mov    eax,esi
c001d282:	5b                   	pop    ebx
c001d283:	5e                   	pop    esi
c001d284:	5f                   	pop    edi
c001d285:	c3                   	ret    
c001d286:	66 90                	xchg   ax,ax

c001d288 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d288:	57                   	push   edi
c001d289:	56                   	push   esi
c001d28a:	53                   	push   ebx
c001d28b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d28f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d293:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d297:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d29d:	39 06                	cmp    DWORD PTR [esi],eax
c001d29f:	74 13                	je     c001d2b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d2a1:	83 ec 0c             	sub    esp,0xc
c001d2a4:	68 78 66 02 c0       	push   0xc0026678
c001d2a9:	e8 59 77 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001d2ae:	83 c4 10             	add    esp,0x10
c001d2b1:	8d 76 00             	lea    esi,[esi+0x0]
c001d2b4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d2ba:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d2bd:	74 11                	je     c001d2d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d2bf:	83 ec 0c             	sub    esp,0xc
c001d2c2:	68 e6 65 02 c0       	push   0xc00265e6
c001d2c7:	e8 3b 77 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001d2cc:	83 c4 10             	add    esp,0x10
c001d2cf:	90                   	nop
c001d2d0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d2d6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d2d9:	74 11                	je     c001d2ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d2db:	83 ec 0c             	sub    esp,0xc
c001d2de:	68 e6 65 02 c0       	push   0xc00265e6
c001d2e3:	e8 1f 77 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001d2e8:	83 c4 10             	add    esp,0x10
c001d2eb:	90                   	nop
c001d2ec:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d2ef:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d2f3:	7e 07                	jle    c001d2fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d2f5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d2f9:	8d 76 00             	lea    esi,[esi+0x0]
c001d2fc:	85 ff                	test   edi,edi
c001d2fe:	7e 1c                	jle    c001d31c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d300:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d307:	31 c0                	xor    eax,eax
c001d309:	8d 76 00             	lea    esi,[esi+0x0]
c001d30c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d30f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d312:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d315:	83 c0 04             	add    eax,0x4
c001d318:	39 c1                	cmp    ecx,eax
c001d31a:	75 f0                	jne    c001d30c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d31c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d31f:	50                   	push   eax
c001d320:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d323:	29 f8                	sub    eax,edi
c001d325:	c1 e0 02             	shl    eax,0x2
c001d328:	50                   	push   eax
c001d329:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d32c:	50                   	push   eax
c001d32d:	52                   	push   edx
c001d32e:	e8 89 32 fe ff       	call   c00005bc <memmove>
c001d333:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d336:	83 c4 10             	add    esp,0x10
c001d339:	89 f8                	mov    eax,edi
c001d33b:	5b                   	pop    ebx
c001d33c:	5e                   	pop    esi
c001d33d:	5f                   	pop    edi
c001d33e:	c3                   	ret    
c001d33f:	90                   	nop

c001d340 <PCI::open(int, int, void*)>:
c001d340:	83 ec 18             	sub    esp,0x18
c001d343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d347:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d34b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d351:	8b 10                	mov    edx,DWORD PTR [eax]
c001d353:	50                   	push   eax
c001d354:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d357:	31 c0                	xor    eax,eax
c001d359:	83 c4 1c             	add    esp,0x1c
c001d35c:	c3                   	ret    
c001d35d:	90                   	nop

c001d35e <PCI::close(int, int, void*)>:
c001d35e:	31 c0                	xor    eax,eax
c001d360:	c3                   	ret    
c001d361:	90                   	nop

c001d362 <PCI::PCI()>:
c001d362:	83 ec 0c             	sub    esp,0xc
c001d365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d369:	83 ec 08             	sub    esp,0x8
c001d36c:	68 97 66 02 c0       	push   0xc0026697
c001d371:	50                   	push   eax
c001d372:	e8 5d 07 ff ff       	call   c000dad4 <Bus::Bus(char const*)>
c001d377:	83 c4 10             	add    esp,0x10
c001d37a:	ba 6c 68 02 c0       	mov    edx,0xc002686c
c001d37f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d383:	89 10                	mov    DWORD PTR [eax],edx
c001d385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d389:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d397:	a3 a0 9e 02 c0       	mov    ds:0xc0029ea0,eax
c001d39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d3a6:	0f b6 d0             	movzx  edx,al
c001d3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ad:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3b8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d3be:	0f b6 d0             	movzx  edx,al
c001d3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ce:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d3d4:	8d 50 01             	lea    edx,[eax+0x1]
c001d3d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d3db:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d3e1:	0f b6 d0             	movzx  edx,al
c001d3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d3ec:	83 c9 c0             	or     ecx,0xffffffc0
c001d3ef:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d3f3:	90                   	nop
c001d3f4:	83 c4 0c             	add    esp,0xc
c001d3f7:	c3                   	ret    

c001d3f8 <PCI::readBAR8(unsigned int, int)>:
c001d3f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d400:	f6 c2 01             	test   dl,0x1
c001d403:	74 07                	je     c001d40c <PCI::readBAR8(unsigned int, int)+0x14>
c001d405:	83 e2 fc             	and    edx,0xfffffffc
c001d408:	01 c2                	add    edx,eax
c001d40a:	ec                   	in     al,dx
c001d40b:	c3                   	ret    
c001d40c:	83 e2 f0             	and    edx,0xfffffff0
c001d40f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d412:	c3                   	ret    
c001d413:	90                   	nop

c001d414 <PCI::readBAR16(unsigned int, int)>:
c001d414:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d418:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d41c:	f6 c2 01             	test   dl,0x1
c001d41f:	74 08                	je     c001d429 <PCI::readBAR16(unsigned int, int)+0x15>
c001d421:	83 e2 fc             	and    edx,0xfffffffc
c001d424:	01 c2                	add    edx,eax
c001d426:	66 ed                	in     ax,dx
c001d428:	c3                   	ret    
c001d429:	83 e2 f0             	and    edx,0xfffffff0
c001d42c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d430:	c3                   	ret    
c001d431:	90                   	nop

c001d432 <PCI::readBAR32(unsigned int, int)>:
c001d432:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d436:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d43a:	f6 c2 01             	test   dl,0x1
c001d43d:	74 07                	je     c001d446 <PCI::readBAR32(unsigned int, int)+0x14>
c001d43f:	83 e2 fc             	and    edx,0xfffffffc
c001d442:	01 c2                	add    edx,eax
c001d444:	ed                   	in     eax,dx
c001d445:	c3                   	ret    
c001d446:	83 e2 f0             	and    edx,0xfffffff0
c001d449:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d44c:	c3                   	ret    
c001d44d:	90                   	nop

c001d44e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d44e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d452:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d456:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d45a:	f6 c2 01             	test   dl,0x1
c001d45d:	74 07                	je     c001d466 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d45f:	83 e2 fc             	and    edx,0xfffffffc
c001d462:	01 ca                	add    edx,ecx
c001d464:	ee                   	out    dx,al
c001d465:	c3                   	ret    
c001d466:	83 e2 f0             	and    edx,0xfffffff0
c001d469:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d46c:	c3                   	ret    
c001d46d:	90                   	nop

c001d46e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d46e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d476:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d47a:	f6 c2 01             	test   dl,0x1
c001d47d:	74 08                	je     c001d487 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d47f:	83 e2 fc             	and    edx,0xfffffffc
c001d482:	01 ca                	add    edx,ecx
c001d484:	66 ef                	out    dx,ax
c001d486:	c3                   	ret    
c001d487:	83 e2 f0             	and    edx,0xfffffff0
c001d48a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d48e:	c3                   	ret    
c001d48f:	90                   	nop

c001d490 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d490:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d494:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d498:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d49c:	f6 c2 01             	test   dl,0x1
c001d49f:	74 07                	je     c001d4a8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d4a1:	83 e2 fc             	and    edx,0xfffffffc
c001d4a4:	01 ca                	add    edx,ecx
c001d4a6:	ef                   	out    dx,eax
c001d4a7:	c3                   	ret    
c001d4a8:	83 e2 f0             	and    edx,0xfffffff0
c001d4ab:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d4ae:	c3                   	ret    
c001d4af:	90                   	nop

c001d4b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d4b0:	55                   	push   ebp
c001d4b1:	57                   	push   edi
c001d4b2:	56                   	push   esi
c001d4b3:	53                   	push   ebx
c001d4b4:	83 ec 0c             	sub    esp,0xc
c001d4b7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d4bb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d4bf:	89 f0                	mov    eax,esi
c001d4c1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d4c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d4c9:	3c 07                	cmp    al,0x7
c001d4cb:	76 10                	jbe    c001d4dd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d4cd:	83 ec 0c             	sub    esp,0xc
c001d4d0:	68 9f 66 02 c0       	push   0xc002669f
c001d4d5:	e8 2d 75 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001d4da:	83 c4 10             	add    esp,0x10
c001d4dd:	80 fb 0f             	cmp    bl,0xf
c001d4e0:	76 10                	jbe    c001d4f2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d4e2:	83 ec 0c             	sub    esp,0xc
c001d4e5:	68 cf 66 02 c0       	push   0xc00266cf
c001d4ea:	e8 18 75 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001d4ef:	83 c4 10             	add    esp,0x10
c001d4f2:	8d 04 36             	lea    eax,[esi+esi*1]
c001d4f5:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d4fa:	83 c8 f0             	or     eax,0xfffffff0
c001d4fd:	ee                   	out    dx,al
c001d4fe:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d503:	89 e8                	mov    eax,ebp
c001d505:	ee                   	out    dx,al
c001d506:	83 c4 0c             	add    esp,0xc
c001d509:	89 d8                	mov    eax,ebx
c001d50b:	66 81 e7 fc 00       	and    di,0xfc
c001d510:	5b                   	pop    ebx
c001d511:	c1 e0 08             	shl    eax,0x8
c001d514:	5e                   	pop    esi
c001d515:	09 f8                	or     eax,edi
c001d517:	5f                   	pop    edi
c001d518:	66 0d 00 c0          	or     ax,0xc000
c001d51c:	5d                   	pop    ebp
c001d51d:	c3                   	ret    

c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d51e:	57                   	push   edi
c001d51f:	56                   	push   esi
c001d520:	53                   	push   ebx
c001d521:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d525:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d529:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d52f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d533:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d537:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d53b:	83 ff 01             	cmp    edi,0x1
c001d53e:	75 3e                	jne    c001d57e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d540:	89 de                	mov    esi,ebx
c001d542:	0f b6 c0             	movzx  eax,al
c001d545:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d54b:	c1 e0 10             	shl    eax,0x10
c001d54e:	0f b6 c9             	movzx  ecx,cl
c001d551:	09 f0                	or     eax,esi
c001d553:	c1 e1 08             	shl    ecx,0x8
c001d556:	0f b6 d2             	movzx  edx,dl
c001d559:	09 c8                	or     eax,ecx
c001d55b:	c1 e2 0b             	shl    edx,0xb
c001d55e:	09 d0                	or     eax,edx
c001d560:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d565:	0d 00 00 00 80       	or     eax,0x80000000
c001d56a:	ef                   	out    dx,eax
c001d56b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d570:	ed                   	in     eax,dx
c001d571:	83 e3 02             	and    ebx,0x2
c001d574:	0f b6 cb             	movzx  ecx,bl
c001d577:	c1 e1 03             	shl    ecx,0x3
c001d57a:	d3 e8                	shr    eax,cl
c001d57c:	eb 43                	jmp    c001d5c1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d57e:	83 ff 02             	cmp    edi,0x2
c001d581:	75 2c                	jne    c001d5af <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d583:	83 ec 0c             	sub    esp,0xc
c001d586:	0f b6 c9             	movzx  ecx,cl
c001d589:	0f b6 d2             	movzx  edx,dl
c001d58c:	0f b6 fb             	movzx  edi,bl
c001d58f:	0f b6 c0             	movzx  eax,al
c001d592:	57                   	push   edi
c001d593:	51                   	push   ecx
c001d594:	52                   	push   edx
c001d595:	50                   	push   eax
c001d596:	56                   	push   esi
c001d597:	e8 14 ff ff ff       	call   c001d4b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d59c:	89 c2                	mov    edx,eax
c001d59e:	ed                   	in     eax,dx
c001d59f:	83 e3 02             	and    ebx,0x2
c001d5a2:	83 c4 20             	add    esp,0x20
c001d5a5:	0f b6 cb             	movzx  ecx,bl
c001d5a8:	c1 e1 03             	shl    ecx,0x3
c001d5ab:	d3 e8                	shr    eax,cl
c001d5ad:	eb 12                	jmp    c001d5c1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d5af:	83 ec 0c             	sub    esp,0xc
c001d5b2:	68 ff 66 02 c0       	push   0xc00266ff
c001d5b7:	e8 4b 74 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001d5bc:	83 c4 10             	add    esp,0x10
c001d5bf:	31 c0                	xor    eax,eax
c001d5c1:	5b                   	pop    ebx
c001d5c2:	5e                   	pop    esi
c001d5c3:	5f                   	pop    edi
c001d5c4:	c3                   	ret    
c001d5c5:	90                   	nop

c001d5c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d5c6:	83 ec 18             	sub    esp,0x18
c001d5c9:	6a 00                	push   0x0
c001d5cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5d0:	50                   	push   eax
c001d5d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5d6:	50                   	push   eax
c001d5d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5dc:	50                   	push   eax
c001d5dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5e1:	e8 38 ff ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5e6:	83 c4 2c             	add    esp,0x2c
c001d5e9:	c3                   	ret    

c001d5ea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d5ea:	83 ec 18             	sub    esp,0x18
c001d5ed:	6a 0e                	push   0xe
c001d5ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5f4:	50                   	push   eax
c001d5f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5fa:	50                   	push   eax
c001d5fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d600:	50                   	push   eax
c001d601:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d605:	e8 14 ff ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d60a:	83 c4 2c             	add    esp,0x2c
c001d60d:	0f b6 c0             	movzx  eax,al
c001d610:	c3                   	ret    
c001d611:	90                   	nop

c001d612 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d612:	55                   	push   ebp
c001d613:	57                   	push   edi
c001d614:	56                   	push   esi
c001d615:	53                   	push   ebx
c001d616:	83 ec 18             	sub    esp,0x18
c001d619:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d61e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d623:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d628:	6a 0a                	push   0xa
c001d62a:	56                   	push   esi
c001d62b:	55                   	push   ebp
c001d62c:	57                   	push   edi
c001d62d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d631:	e8 e8 fe ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d636:	83 c4 14             	add    esp,0x14
c001d639:	89 c3                	mov    ebx,eax
c001d63b:	6a 0a                	push   0xa
c001d63d:	0f b6 db             	movzx  ebx,bl
c001d640:	56                   	push   esi
c001d641:	55                   	push   ebp
c001d642:	57                   	push   edi
c001d643:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d647:	e8 d2 fe ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d64c:	83 c4 2c             	add    esp,0x2c
c001d64f:	25 00 ff 00 00       	and    eax,0xff00
c001d654:	09 d8                	or     eax,ebx
c001d656:	5b                   	pop    ebx
c001d657:	5e                   	pop    esi
c001d658:	5f                   	pop    edi
c001d659:	5d                   	pop    ebp
c001d65a:	c3                   	ret    
c001d65b:	90                   	nop

c001d65c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d65c:	83 ec 18             	sub    esp,0x18
c001d65f:	6a 08                	push   0x8
c001d661:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d666:	50                   	push   eax
c001d667:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d66c:	50                   	push   eax
c001d66d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d672:	50                   	push   eax
c001d673:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d677:	e8 a2 fe ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d67c:	83 c4 2c             	add    esp,0x2c
c001d67f:	0f b6 c4             	movzx  eax,ah
c001d682:	c3                   	ret    
c001d683:	90                   	nop

c001d684 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d684:	83 ec 18             	sub    esp,0x18
c001d687:	6a 08                	push   0x8
c001d689:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d68e:	50                   	push   eax
c001d68f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d694:	50                   	push   eax
c001d695:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d69a:	50                   	push   eax
c001d69b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d69f:	e8 7a fe ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6a4:	83 c4 2c             	add    esp,0x2c
c001d6a7:	c3                   	ret    

c001d6a8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d6a8:	83 ec 18             	sub    esp,0x18
c001d6ab:	6a 3c                	push   0x3c
c001d6ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6b2:	50                   	push   eax
c001d6b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6b8:	50                   	push   eax
c001d6b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6be:	50                   	push   eax
c001d6bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6c3:	e8 56 fe ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6c8:	83 c4 2c             	add    esp,0x2c
c001d6cb:	c3                   	ret    

c001d6cc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d6cc:	83 ec 18             	sub    esp,0x18
c001d6cf:	6a 18                	push   0x18
c001d6d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6d6:	50                   	push   eax
c001d6d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6dc:	50                   	push   eax
c001d6dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6e2:	50                   	push   eax
c001d6e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6e7:	e8 32 fe ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6ec:	83 c4 2c             	add    esp,0x2c
c001d6ef:	0f b6 c4             	movzx  eax,ah
c001d6f2:	c3                   	ret    
c001d6f3:	90                   	nop

c001d6f4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d6f4:	55                   	push   ebp
c001d6f5:	57                   	push   edi
c001d6f6:	56                   	push   esi
c001d6f7:	53                   	push   ebx
c001d6f8:	83 ec 28             	sub    esp,0x28
c001d6fb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d6ff:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d704:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d709:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d70e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d715:	8d 43 12             	lea    eax,[ebx+0x12]
c001d718:	83 c3 10             	add    ebx,0x10
c001d71b:	0f b6 c0             	movzx  eax,al
c001d71e:	0f b6 db             	movzx  ebx,bl
c001d721:	50                   	push   eax
c001d722:	51                   	push   ecx
c001d723:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d727:	57                   	push   edi
c001d728:	55                   	push   ebp
c001d729:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d72d:	e8 ec fd ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d732:	83 c4 14             	add    esp,0x14
c001d735:	89 c6                	mov    esi,eax
c001d737:	53                   	push   ebx
c001d738:	c1 e6 10             	shl    esi,0x10
c001d73b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d73f:	51                   	push   ecx
c001d740:	57                   	push   edi
c001d741:	55                   	push   ebp
c001d742:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d746:	e8 d3 fd ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d74b:	83 c4 3c             	add    esp,0x3c
c001d74e:	0f b7 c0             	movzx  eax,ax
c001d751:	5b                   	pop    ebx
c001d752:	09 f0                	or     eax,esi
c001d754:	5e                   	pop    esi
c001d755:	5f                   	pop    edi
c001d756:	5d                   	pop    ebp
c001d757:	c3                   	ret    

c001d758 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d758:	55                   	push   ebp
c001d759:	57                   	push   edi
c001d75a:	56                   	push   esi
c001d75b:	53                   	push   ebx
c001d75c:	83 ec 0c             	sub    esp,0xc
c001d75f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d763:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d767:	89 f5                	mov    ebp,esi
c001d769:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d76f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d773:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d777:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d77b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d77f:	83 f9 01             	cmp    ecx,0x1
c001d782:	75 5d                	jne    c001d7e1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d784:	0f b6 c8             	movzx  ecx,al
c001d787:	0f b6 d2             	movzx  edx,dl
c001d78a:	c1 e1 10             	shl    ecx,0x10
c001d78d:	c1 e2 0b             	shl    edx,0xb
c001d790:	89 f0                	mov    eax,esi
c001d792:	25 fc 00 00 00       	and    eax,0xfc
c001d797:	09 c1                	or     ecx,eax
c001d799:	89 e8                	mov    eax,ebp
c001d79b:	0f b6 c0             	movzx  eax,al
c001d79e:	c1 e0 08             	shl    eax,0x8
c001d7a1:	09 c1                	or     ecx,eax
c001d7a3:	09 d1                	or     ecx,edx
c001d7a5:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d7aa:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d7b0:	89 c8                	mov    eax,ecx
c001d7b2:	ef                   	out    dx,eax
c001d7b3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d7b8:	ed                   	in     eax,dx
c001d7b9:	0f b7 db             	movzx  ebx,bx
c001d7bc:	83 e6 02             	and    esi,0x2
c001d7bf:	74 0a                	je     c001d7cb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d7c1:	0f b7 d0             	movzx  edx,ax
c001d7c4:	c1 e3 10             	shl    ebx,0x10
c001d7c7:	09 d3                	or     ebx,edx
c001d7c9:	eb 05                	jmp    c001d7d0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d7cb:	66 31 c0             	xor    ax,ax
c001d7ce:	09 c3                	or     ebx,eax
c001d7d0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d7d5:	89 c8                	mov    eax,ecx
c001d7d7:	ef                   	out    dx,eax
c001d7d8:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d7dd:	89 d8                	mov    eax,ebx
c001d7df:	eb 41                	jmp    c001d822 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d7e1:	83 f9 02             	cmp    ecx,0x2
c001d7e4:	75 45                	jne    c001d82b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d7e6:	83 ec 0c             	sub    esp,0xc
c001d7e9:	0f b6 d2             	movzx  edx,dl
c001d7ec:	89 f1                	mov    ecx,esi
c001d7ee:	0f b6 c0             	movzx  eax,al
c001d7f1:	0f b6 f1             	movzx  esi,cl
c001d7f4:	89 e9                	mov    ecx,ebp
c001d7f6:	56                   	push   esi
c001d7f7:	0f b6 c9             	movzx  ecx,cl
c001d7fa:	51                   	push   ecx
c001d7fb:	52                   	push   edx
c001d7fc:	50                   	push   eax
c001d7fd:	57                   	push   edi
c001d7fe:	e8 ad fc ff ff       	call   c001d4b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d803:	89 c2                	mov    edx,eax
c001d805:	ed                   	in     eax,dx
c001d806:	83 c4 20             	add    esp,0x20
c001d809:	0f b7 db             	movzx  ebx,bx
c001d80c:	f6 c2 02             	test   dl,0x2
c001d80f:	74 0c                	je     c001d81d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d811:	0f b7 c8             	movzx  ecx,ax
c001d814:	89 d8                	mov    eax,ebx
c001d816:	c1 e0 10             	shl    eax,0x10
c001d819:	09 c8                	or     eax,ecx
c001d81b:	eb 05                	jmp    c001d822 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d81d:	66 31 c0             	xor    ax,ax
c001d820:	09 d8                	or     eax,ebx
c001d822:	ef                   	out    dx,eax
c001d823:	83 c4 0c             	add    esp,0xc
c001d826:	5b                   	pop    ebx
c001d827:	5e                   	pop    esi
c001d828:	5f                   	pop    edi
c001d829:	5d                   	pop    ebp
c001d82a:	c3                   	ret    
c001d82b:	c7 44 24 20 ff 66 02 c0 	mov    DWORD PTR [esp+0x20],0xc00266ff
c001d833:	83 c4 0c             	add    esp,0xc
c001d836:	5b                   	pop    ebx
c001d837:	5e                   	pop    esi
c001d838:	5f                   	pop    edi
c001d839:	5d                   	pop    ebp
c001d83a:	e9 c8 71 ff ff       	jmp    c0014a07 <Krnl::panic(char const*)>
c001d83f:	90                   	nop

c001d840 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d840:	55                   	push   ebp
c001d841:	57                   	push   edi
c001d842:	56                   	push   esi
c001d843:	53                   	push   ebx
c001d844:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d84a:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001d851:	75 0f                	jne    c001d862 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d853:	80 3d ac 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029eac,0x0
c001d85a:	0f 85 fa 00 00 00    	jne    c001d95a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d860:	eb 2f                	jmp    c001d891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d862:	83 ec 0c             	sub    esp,0xc
c001d865:	68 05 67 02 c0       	push   0xc0026705
c001d86a:	e8 fa c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d86f:	83 c4 10             	add    esp,0x10
c001d872:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001d879:	75 d8                	jne    c001d853 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d87b:	e4 60                	in     al,0x60
c001d87d:	3c 1c                	cmp    al,0x1c
c001d87f:	74 04                	je     c001d885 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d881:	3c 5a                	cmp    al,0x5a
c001d883:	75 f6                	jne    c001d87b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d885:	e4 60                	in     al,0x60
c001d887:	3c 5a                	cmp    al,0x5a
c001d889:	74 fa                	je     c001d885 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d88b:	3c 1c                	cmp    al,0x1c
c001d88d:	74 f6                	je     c001d885 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d88f:	eb c2                	jmp    c001d853 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d891:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001d898:	0f 85 86 00 00 00    	jne    c001d924 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d89e:	83 ec 0c             	sub    esp,0xc
c001d8a1:	68 14 01 00 00       	push   0x114
c001d8a6:	e8 64 c1 fe ff       	call   c0009a0f <malloc>
c001d8ab:	83 c4 0c             	add    esp,0xc
c001d8ae:	89 c3                	mov    ebx,eax
c001d8b0:	ff 35 b0 94 02 c0    	push   DWORD PTR ds:0xc00294b0
c001d8b6:	68 1f 67 02 c0       	push   0xc002671f
c001d8bb:	50                   	push   eax
c001d8bc:	e8 a5 f9 fe ff       	call   c000d266 <File::File(char const*, Process*)>
c001d8c1:	5a                   	pop    edx
c001d8c2:	59                   	pop    ecx
c001d8c3:	6a 01                	push   0x1
c001d8c5:	53                   	push   ebx
c001d8c6:	e8 75 fa fe ff       	call   c000d340 <File::open(FileOpenMode)>
c001d8cb:	83 c4 0c             	add    esp,0xc
c001d8ce:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d8d2:	50                   	push   eax
c001d8d3:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d8d7:	50                   	push   eax
c001d8d8:	53                   	push   ebx
c001d8d9:	e8 0e fd fe ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c001d8de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8e2:	40                   	inc    eax
c001d8e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8e6:	e8 24 c1 fe ff       	call   c0009a0f <malloc>
c001d8eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8ef:	a3 a8 9e 02 c0       	mov    ds:0xc0029ea8,eax
c001d8f4:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d8f8:	5e                   	pop    esi
c001d8f9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d8fb:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d8ff:	51                   	push   ecx
c001d900:	50                   	push   eax
c001d901:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d905:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d909:	53                   	push   ebx
c001d90a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d90d:	83 c4 14             	add    esp,0x14
c001d910:	53                   	push   ebx
c001d911:	e8 88 fa fe ff       	call   c000d39e <File::close()>
c001d916:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d91a:	83 c4 10             	add    esp,0x10
c001d91d:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c001d922:	eb 36                	jmp    c001d95a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d924:	83 ec 0c             	sub    esp,0xc
c001d927:	68 38 67 02 c0       	push   0xc0026738
c001d92c:	e8 38 c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d931:	83 c4 10             	add    esp,0x10
c001d934:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001d93b:	0f 85 5d ff ff ff    	jne    c001d89e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d941:	e4 60                	in     al,0x60
c001d943:	3c 1c                	cmp    al,0x1c
c001d945:	74 04                	je     c001d94b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d947:	3c 5a                	cmp    al,0x5a
c001d949:	75 f6                	jne    c001d941 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d94b:	e4 60                	in     al,0x60
c001d94d:	3c 5a                	cmp    al,0x5a
c001d94f:	74 fa                	je     c001d94b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d951:	3c 1c                	cmp    al,0x1c
c001d953:	74 f6                	je     c001d94b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d955:	e9 44 ff ff ff       	jmp    c001d89e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d95a:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001d961:	75 0b                	jne    c001d96e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d963:	31 f6                	xor    esi,esi
c001d965:	31 db                	xor    ebx,ebx
c001d967:	31 ed                	xor    ebp,ebp
c001d969:	e9 a3 01 00 00       	jmp    c001db11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d96e:	83 ec 0c             	sub    esp,0xc
c001d971:	68 4a 67 02 c0       	push   0xc002674a
c001d976:	e8 ee c0 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d97b:	8b 15 80 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f80
c001d981:	83 c4 10             	add    esp,0x10
c001d984:	f6 c2 80             	test   dl,0x80
c001d987:	74 0c                	je     c001d995 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d989:	0f ba e2 0b          	bt     edx,0xb
c001d98d:	72 1a                	jb     c001d9a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d98f:	eb d2                	jmp    c001d963 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d991:	3c 5a                	cmp    al,0x5a
c001d993:	74 0c                	je     c001d9a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d995:	e4 60                	in     al,0x60
c001d997:	3c 1c                	cmp    al,0x1c
c001d999:	75 f6                	jne    c001d991 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d99b:	eb 04                	jmp    c001d9a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d99d:	3c 1c                	cmp    al,0x1c
c001d99f:	75 e8                	jne    c001d989 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d9a1:	e4 60                	in     al,0x60
c001d9a3:	3c 5a                	cmp    al,0x5a
c001d9a5:	74 fa                	je     c001d9a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d9a7:	eb f4                	jmp    c001d99d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d9a9:	83 ec 0c             	sub    esp,0xc
c001d9ac:	68 4f 67 02 c0       	push   0xc002674f
c001d9b1:	e8 b3 c0 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d9b6:	83 c4 10             	add    esp,0x10
c001d9b9:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001d9c0:	75 a1                	jne    c001d963 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d9c2:	e4 60                	in     al,0x60
c001d9c4:	3c 5a                	cmp    al,0x5a
c001d9c6:	74 04                	je     c001d9cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d9c8:	3c 1c                	cmp    al,0x1c
c001d9ca:	75 f6                	jne    c001d9c2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d9cc:	e4 60                	in     al,0x60
c001d9ce:	3c 5a                	cmp    al,0x5a
c001d9d0:	74 fa                	je     c001d9cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d9d2:	3c 1c                	cmp    al,0x1c
c001d9d4:	74 f6                	je     c001d9cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d9d6:	eb 8b                	jmp    c001d963 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d9d8:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001d9df:	0f 85 3d 01 00 00    	jne    c001db22 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d9e5:	a1 a8 9e 02 c0       	mov    eax,ds:0xc0029ea8
c001d9ea:	8d 7e 01             	lea    edi,[esi+0x1]
c001d9ed:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d9f0:	d4 40                	aam    0x40
c001d9f2:	d5 39                	aad    0x39
c001d9f4:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001d9fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d9ff:	0f 85 53 01 00 00    	jne    c001db58 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001da05:	8b 15 a8 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029ea8
c001da0b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001da0e:	d4 40                	aam    0x40
c001da10:	d5 39                	aad    0x39
c001da12:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001da16:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001da1a:	d4 40                	aam    0x40
c001da1c:	d5 39                	aad    0x39
c001da1e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001da22:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001da26:	d4 40                	aam    0x40
c001da28:	d5 39                	aad    0x39
c001da2a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da2e:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001da32:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001da36:	3c 56                	cmp    al,0x56
c001da38:	74 49                	je     c001da83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001da3a:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001da3e:	d4 40                	aam    0x40
c001da40:	d5 39                	aad    0x39
c001da42:	8d 48 d0             	lea    ecx,[eax-0x30]
c001da45:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001da49:	0f b6 c9             	movzx  ecx,cl
c001da4c:	c1 e1 04             	shl    ecx,0x4
c001da4f:	d4 40                	aam    0x40
c001da51:	d5 39                	aad    0x39
c001da53:	83 e8 30             	sub    eax,0x30
c001da56:	0f b6 c0             	movzx  eax,al
c001da59:	09 c1                	or     ecx,eax
c001da5b:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001da5f:	c1 e1 04             	shl    ecx,0x4
c001da62:	d4 40                	aam    0x40
c001da64:	d5 39                	aad    0x39
c001da66:	83 e8 30             	sub    eax,0x30
c001da69:	0f b6 c0             	movzx  eax,al
c001da6c:	09 c1                	or     ecx,eax
c001da6e:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001da72:	c1 e1 04             	shl    ecx,0x4
c001da75:	d4 40                	aam    0x40
c001da77:	d5 39                	aad    0x39
c001da79:	83 e8 30             	sub    eax,0x30
c001da7c:	0f b6 c0             	movzx  eax,al
c001da7f:	09 c8                	or     eax,ecx
c001da81:	89 c5                	mov    ebp,eax
c001da83:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001da87:	80 f9 44             	cmp    cl,0x44
c001da8a:	74 47                	je     c001dad3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001da8c:	88 c8                	mov    al,cl
c001da8e:	d4 40                	aam    0x40
c001da90:	d5 39                	aad    0x39
c001da92:	83 e8 30             	sub    eax,0x30
c001da95:	0f b6 f8             	movzx  edi,al
c001da98:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001da9c:	c1 e7 04             	shl    edi,0x4
c001da9f:	d4 40                	aam    0x40
c001daa1:	d5 39                	aad    0x39
c001daa3:	8d 58 d0             	lea    ebx,[eax-0x30]
c001daa6:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001daaa:	0f b6 db             	movzx  ebx,bl
c001daad:	09 fb                	or     ebx,edi
c001daaf:	c1 e3 04             	shl    ebx,0x4
c001dab2:	d4 40                	aam    0x40
c001dab4:	d5 39                	aad    0x39
c001dab6:	83 e8 30             	sub    eax,0x30
c001dab9:	0f b6 f8             	movzx  edi,al
c001dabc:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001dac0:	09 fb                	or     ebx,edi
c001dac2:	89 df                	mov    edi,ebx
c001dac4:	c1 e7 04             	shl    edi,0x4
c001dac7:	d4 40                	aam    0x40
c001dac9:	d5 39                	aad    0x39
c001dacb:	8d 58 d0             	lea    ebx,[eax-0x30]
c001dace:	0f b6 db             	movzx  ebx,bl
c001dad1:	09 fb                	or     ebx,edi
c001dad3:	a1 a4 9e 02 c0       	mov    eax,ds:0xc0029ea4
c001dad8:	83 c6 10             	add    esi,0x10
c001dadb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dadf:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001dae3:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001dae6:	3c 0a                	cmp    al,0xa
c001dae8:	0f 85 a0 00 00 00    	jne    c001db8e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001daee:	3c 0a                	cmp    al,0xa
c001daf0:	0f 94 c0             	sete   al
c001daf3:	0f b6 c0             	movzx  eax,al
c001daf6:	01 c6                	add    esi,eax
c001daf8:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001dafd:	0f 84 a2 00 00 00    	je     c001dba5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001db03:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001db0b:	0f 84 94 00 00 00    	je     c001dba5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001db11:	39 35 a4 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ea4,esi
c001db17:	0f 8f bb fe ff ff    	jg     c001d9d8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001db1d:	e9 e8 00 00 00       	jmp    c001dc0a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001db22:	83 ec 0c             	sub    esp,0xc
c001db25:	68 56 67 02 c0       	push   0xc0026756
c001db2a:	e8 3a bf fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001db2f:	83 c4 10             	add    esp,0x10
c001db32:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001db39:	0f 85 a6 fe ff ff    	jne    c001d9e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001db3f:	e4 60                	in     al,0x60
c001db41:	3c 5a                	cmp    al,0x5a
c001db43:	74 04                	je     c001db49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001db45:	3c 1c                	cmp    al,0x1c
c001db47:	75 f6                	jne    c001db3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001db49:	e4 60                	in     al,0x60
c001db4b:	3c 5a                	cmp    al,0x5a
c001db4d:	74 fa                	je     c001db49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001db4f:	3c 1c                	cmp    al,0x1c
c001db51:	74 f6                	je     c001db49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001db53:	e9 8d fe ff ff       	jmp    c001d9e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001db58:	83 ec 0c             	sub    esp,0xc
c001db5b:	68 5e 67 02 c0       	push   0xc002675e
c001db60:	e8 04 bf fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001db65:	83 c4 10             	add    esp,0x10
c001db68:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001db6f:	0f 85 90 fe ff ff    	jne    c001da05 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001db75:	e4 60                	in     al,0x60
c001db77:	3c 5a                	cmp    al,0x5a
c001db79:	74 04                	je     c001db7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db7b:	3c 1c                	cmp    al,0x1c
c001db7d:	75 f6                	jne    c001db75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001db7f:	e4 60                	in     al,0x60
c001db81:	3c 5a                	cmp    al,0x5a
c001db83:	74 fa                	je     c001db7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db85:	3c 1c                	cmp    al,0x1c
c001db87:	74 f6                	je     c001db7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db89:	e9 77 fe ff ff       	jmp    c001da05 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001db8e:	47                   	inc    edi
c001db8f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001db93:	0f 84 55 ff ff ff    	je     c001daee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001db99:	46                   	inc    esi
c001db9a:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001db9d:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001dba0:	e9 3e ff ff ff       	jmp    c001dae3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001dba5:	80 f9 44             	cmp    cl,0x44
c001dba8:	74 0e                	je     c001dbb8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001dbaa:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001dbb2:	0f 85 59 ff ff ff    	jne    c001db11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dbb8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dbbc:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001dbc0:	c1 e0 04             	shl    eax,0x4
c001dbc3:	83 ea 30             	sub    edx,0x30
c001dbc6:	09 d0                	or     eax,edx
c001dbc8:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001dbcf:	0f 85 3c ff ff ff    	jne    c001db11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dbd5:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001dbd9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dbdd:	c1 e2 04             	shl    edx,0x4
c001dbe0:	83 e8 30             	sub    eax,0x30
c001dbe3:	09 d0                	or     eax,edx
c001dbe5:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001dbec:	0f 85 1f ff ff ff    	jne    c001db11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dbf2:	50                   	push   eax
c001dbf3:	50                   	push   eax
c001dbf4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001dbf8:	50                   	push   eax
c001dbf9:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001dc00:	e8 3b 2b fe ff       	call   c0000740 <strcpy>
c001dc05:	83 c4 10             	add    esp,0x10
c001dc08:	eb 15                	jmp    c001dc1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001dc0a:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dc11:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001dc1c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001dc1f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dc26:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dc2c:	5b                   	pop    ebx
c001dc2d:	5e                   	pop    esi
c001dc2e:	5f                   	pop    edi
c001dc2f:	5d                   	pop    ebp
c001dc30:	c3                   	ret    
c001dc31:	90                   	nop

c001dc32 <PCI::checkBus(unsigned char)>:
c001dc32:	56                   	push   esi
c001dc33:	53                   	push   ebx
c001dc34:	31 db                	xor    ebx,ebx
c001dc36:	51                   	push   ecx
c001dc37:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001dc3c:	52                   	push   edx
c001dc3d:	53                   	push   ebx
c001dc3e:	43                   	inc    ebx
c001dc3f:	56                   	push   esi
c001dc40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc44:	e8 bf 07 00 00       	call   c001e408 <PCI::checkDevice(unsigned char, unsigned char)>
c001dc49:	83 c4 10             	add    esp,0x10
c001dc4c:	83 fb 20             	cmp    ebx,0x20
c001dc4f:	75 eb                	jne    c001dc3c <PCI::checkBus(unsigned char)+0xa>
c001dc51:	58                   	pop    eax
c001dc52:	5b                   	pop    ebx
c001dc53:	5e                   	pop    esi
c001dc54:	c3                   	ret    
c001dc55:	90                   	nop

c001dc56 <PCI::foundDevice(PCIDeviceInfo)>:
c001dc56:	55                   	push   ebp
c001dc57:	57                   	push   edi
c001dc58:	56                   	push   esi
c001dc59:	53                   	push   ebx
c001dc5a:	83 ec 1c             	sub    esp,0x1c
c001dc5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dc61:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001dc67:	0f 84 20 04 00 00    	je     c001e08d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dc6d:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001dc74:	75 37                	jne    c001dcad <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001dc76:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dc7a:	66 81 f9 06 04       	cmp    cx,0x406
c001dc7f:	75 5b                	jne    c001dcdc <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001dc81:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001dc86:	50                   	push   eax
c001dc87:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001dc8c:	50                   	push   eax
c001dc8d:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001dc92:	50                   	push   eax
c001dc93:	53                   	push   ebx
c001dc94:	e8 33 fa ff ff       	call   c001d6cc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dc99:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001dc9d:	0f b6 c0             	movzx  eax,al
c001dca0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dca4:	83 c4 2c             	add    esp,0x2c
c001dca7:	5b                   	pop    ebx
c001dca8:	5e                   	pop    esi
c001dca9:	5f                   	pop    edi
c001dcaa:	5d                   	pop    ebp
c001dcab:	eb 85                	jmp    c001dc32 <PCI::checkBus(unsigned char)>
c001dcad:	83 ec 0c             	sub    esp,0xc
c001dcb0:	68 67 67 02 c0       	push   0xc0026767
c001dcb5:	e8 af bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dcba:	83 c4 10             	add    esp,0x10
c001dcbd:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001dcc4:	75 b0                	jne    c001dc76 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dcc6:	e4 60                	in     al,0x60
c001dcc8:	3c 5a                	cmp    al,0x5a
c001dcca:	74 04                	je     c001dcd0 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dccc:	3c 1c                	cmp    al,0x1c
c001dcce:	75 f6                	jne    c001dcc6 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001dcd0:	e4 60                	in     al,0x60
c001dcd2:	3c 5a                	cmp    al,0x5a
c001dcd4:	74 fa                	je     c001dcd0 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dcd6:	3c 1c                	cmp    al,0x1c
c001dcd8:	74 f6                	je     c001dcd0 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dcda:	eb 9a                	jmp    c001dc76 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dcdc:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001dce2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001dce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dcea:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dcee:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001dcf2:	88 d0                	mov    al,dl
c001dcf4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dcf9:	74 3b                	je     c001dd36 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001dcfb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dcff:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001dd02:	85 d2                	test   edx,edx
c001dd04:	74 24                	je     c001dd2a <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dd06:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001dd0c:	31 ef                	xor    edi,ebp
c001dd0e:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001dd14:	75 14                	jne    c001dd2a <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dd16:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001dd1c:	75 0c                	jne    c001dd2a <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dd1e:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001dd24:	0f 84 63 03 00 00    	je     c001e08d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dd2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dd2e:	8b 12                	mov    edx,DWORD PTR [edx]
c001dd30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dd34:	eb be                	jmp    c001dcf4 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001dd36:	66 81 f9 01 06       	cmp    cx,0x601
c001dd3b:	0f 85 81 01 00 00    	jne    c001dec2 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001dd41:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001dd48:	75 25                	jne    c001dd6f <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001dd4a:	83 ec 0c             	sub    esp,0xc
c001dd4d:	68 64 01 00 00       	push   0x164
c001dd52:	e8 b8 bc fe ff       	call   c0009a0f <malloc>
c001dd57:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd5a:	89 c5                	mov    ebp,eax
c001dd5c:	e8 b7 12 00 00       	call   c001f018 <SATABus::SATABus()>
c001dd61:	83 c4 10             	add    esp,0x10
c001dd64:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001dd6b:	74 4a                	je     c001ddb7 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dd6d:	eb 2f                	jmp    c001dd9e <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001dd6f:	83 ec 0c             	sub    esp,0xc
c001dd72:	68 77 67 02 c0       	push   0xc0026777
c001dd77:	e8 ed bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd7c:	83 c4 10             	add    esp,0x10
c001dd7f:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001dd86:	75 c2                	jne    c001dd4a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dd88:	e4 60                	in     al,0x60
c001dd8a:	3c 1c                	cmp    al,0x1c
c001dd8c:	74 04                	je     c001dd92 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd8e:	3c 5a                	cmp    al,0x5a
c001dd90:	75 f6                	jne    c001dd88 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001dd92:	e4 60                	in     al,0x60
c001dd94:	3c 5a                	cmp    al,0x5a
c001dd96:	74 fa                	je     c001dd92 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd98:	3c 1c                	cmp    al,0x1c
c001dd9a:	74 f6                	je     c001dd92 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd9c:	eb ac                	jmp    c001dd4a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dd9e:	83 ec 0c             	sub    esp,0xc
c001dda1:	68 7d 67 02 c0       	push   0xc002677d
c001dda6:	e8 be bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001ddab:	83 c4 10             	add    esp,0x10
c001ddae:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001ddb5:	74 1b                	je     c001ddd2 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001ddb7:	50                   	push   eax
c001ddb8:	50                   	push   eax
c001ddb9:	55                   	push   ebp
c001ddba:	53                   	push   ebx
c001ddbb:	e8 ae 04 ff ff       	call   c000e26e <Device::addChild(Device*)>
c001ddc0:	83 c4 10             	add    esp,0x10
c001ddc3:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001ddca:	74 33                	je     c001ddff <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001ddcc:	eb 18                	jmp    c001dde6 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001ddce:	3c 1c                	cmp    al,0x1c
c001ddd0:	74 0c                	je     c001ddde <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001ddd2:	e4 60                	in     al,0x60
c001ddd4:	3c 5a                	cmp    al,0x5a
c001ddd6:	75 f6                	jne    c001ddce <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001ddd8:	eb 04                	jmp    c001ddde <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001ddda:	3c 1c                	cmp    al,0x1c
c001dddc:	75 d9                	jne    c001ddb7 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001ddde:	e4 60                	in     al,0x60
c001dde0:	3c 5a                	cmp    al,0x5a
c001dde2:	74 fa                	je     c001ddde <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dde4:	eb f4                	jmp    c001ddda <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001dde6:	83 ec 0c             	sub    esp,0xc
c001dde9:	68 85 67 02 c0       	push   0xc0026785
c001ddee:	e8 76 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001ddf3:	83 c4 10             	add    esp,0x10
c001ddf6:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001ddfd:	74 29                	je     c001de28 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001ddff:	83 ec 2c             	sub    esp,0x2c
c001de02:	b9 09 00 00 00       	mov    ecx,0x9
c001de07:	8d 74 24 60          	lea    esi,[esp+0x60]
c001de0b:	fc                   	cld    
c001de0c:	89 e7                	mov    edi,esp
c001de0e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001de10:	55                   	push   ebp
c001de11:	e8 6a 03 ff ff       	call   c000e180 <Device::preOpenPCI(PCIDeviceInfo)>
c001de16:	83 c4 30             	add    esp,0x30
c001de19:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001de20:	74 33                	je     c001de55 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001de22:	eb 18                	jmp    c001de3c <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001de24:	3c 1c                	cmp    al,0x1c
c001de26:	74 0c                	je     c001de34 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001de28:	e4 60                	in     al,0x60
c001de2a:	3c 5a                	cmp    al,0x5a
c001de2c:	75 f6                	jne    c001de24 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001de2e:	eb 04                	jmp    c001de34 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001de30:	3c 1c                	cmp    al,0x1c
c001de32:	75 cb                	jne    c001ddff <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001de34:	e4 60                	in     al,0x60
c001de36:	3c 5a                	cmp    al,0x5a
c001de38:	74 fa                	je     c001de34 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001de3a:	eb f4                	jmp    c001de30 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001de3c:	83 ec 0c             	sub    esp,0xc
c001de3f:	68 8d 67 02 c0       	push   0xc002678d
c001de44:	e8 20 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de49:	83 c4 10             	add    esp,0x10
c001de4c:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001de53:	74 23                	je     c001de78 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001de55:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001de58:	6a 00                	push   0x0
c001de5a:	6a 00                	push   0x0
c001de5c:	6a 00                	push   0x0
c001de5e:	55                   	push   ebp
c001de5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001de62:	83 c4 10             	add    esp,0x10
c001de65:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001de6c:	0f 84 1b 02 00 00    	je     c001e08d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de72:	eb 18                	jmp    c001de8c <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001de74:	3c 1c                	cmp    al,0x1c
c001de76:	74 0c                	je     c001de84 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de78:	e4 60                	in     al,0x60
c001de7a:	3c 5a                	cmp    al,0x5a
c001de7c:	75 f6                	jne    c001de74 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001de7e:	eb 04                	jmp    c001de84 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de80:	3c 1c                	cmp    al,0x1c
c001de82:	75 d1                	jne    c001de55 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001de84:	e4 60                	in     al,0x60
c001de86:	3c 5a                	cmp    al,0x5a
c001de88:	74 fa                	je     c001de84 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de8a:	eb f4                	jmp    c001de80 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001de8c:	83 ec 0c             	sub    esp,0xc
c001de8f:	68 95 67 02 c0       	push   0xc0026795
c001de94:	e8 d0 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de99:	83 c4 10             	add    esp,0x10
c001de9c:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001dea3:	0f 85 e4 01 00 00    	jne    c001e08d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dea9:	e4 60                	in     al,0x60
c001deab:	3c 5a                	cmp    al,0x5a
c001dead:	74 04                	je     c001deb3 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001deaf:	3c 1c                	cmp    al,0x1c
c001deb1:	75 f6                	jne    c001dea9 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001deb3:	e4 60                	in     al,0x60
c001deb5:	3c 5a                	cmp    al,0x5a
c001deb7:	74 fa                	je     c001deb3 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001deb9:	3c 1c                	cmp    al,0x1c
c001debb:	74 f6                	je     c001deb3 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001debd:	e9 cb 01 00 00       	jmp    c001e08d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dec2:	66 81 f9 01 01       	cmp    cx,0x101
c001dec7:	0f 85 7a 01 00 00    	jne    c001e047 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001decd:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001ded4:	75 25                	jne    c001defb <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001ded6:	83 ec 0c             	sub    esp,0xc
c001ded9:	68 70 02 00 00       	push   0x270
c001dede:	e8 2c bb fe ff       	call   c0009a0f <malloc>
c001dee3:	89 04 24             	mov    DWORD PTR [esp],eax
c001dee6:	89 c5                	mov    ebp,eax
c001dee8:	e8 df 05 00 00       	call   c001e4cc <IDE::IDE()>
c001deed:	83 c4 10             	add    esp,0x10
c001def0:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001def7:	74 4a                	je     c001df43 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001def9:	eb 2f                	jmp    c001df2a <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001defb:	83 ec 0c             	sub    esp,0xc
c001defe:	68 9d 67 02 c0       	push   0xc002679d
c001df03:	e8 61 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001df08:	83 c4 10             	add    esp,0x10
c001df0b:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001df12:	75 c2                	jne    c001ded6 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001df14:	e4 60                	in     al,0x60
c001df16:	3c 5a                	cmp    al,0x5a
c001df18:	74 04                	je     c001df1e <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001df1a:	3c 1c                	cmp    al,0x1c
c001df1c:	75 f6                	jne    c001df14 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001df1e:	e4 60                	in     al,0x60
c001df20:	3c 5a                	cmp    al,0x5a
c001df22:	74 fa                	je     c001df1e <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001df24:	3c 1c                	cmp    al,0x1c
c001df26:	74 f6                	je     c001df1e <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001df28:	eb ac                	jmp    c001ded6 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001df2a:	83 ec 0c             	sub    esp,0xc
c001df2d:	68 a4 67 02 c0       	push   0xc00267a4
c001df32:	e8 32 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001df37:	83 c4 10             	add    esp,0x10
c001df3a:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001df41:	74 1b                	je     c001df5e <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001df43:	57                   	push   edi
c001df44:	57                   	push   edi
c001df45:	55                   	push   ebp
c001df46:	53                   	push   ebx
c001df47:	e8 22 03 ff ff       	call   c000e26e <Device::addChild(Device*)>
c001df4c:	83 c4 10             	add    esp,0x10
c001df4f:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001df56:	74 33                	je     c001df8b <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001df58:	eb 18                	jmp    c001df72 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001df5a:	3c 1c                	cmp    al,0x1c
c001df5c:	74 0c                	je     c001df6a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001df5e:	e4 60                	in     al,0x60
c001df60:	3c 5a                	cmp    al,0x5a
c001df62:	75 f6                	jne    c001df5a <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001df64:	eb 04                	jmp    c001df6a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001df66:	3c 1c                	cmp    al,0x1c
c001df68:	75 d9                	jne    c001df43 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001df6a:	e4 60                	in     al,0x60
c001df6c:	3c 5a                	cmp    al,0x5a
c001df6e:	74 fa                	je     c001df6a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001df70:	eb f4                	jmp    c001df66 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001df72:	83 ec 0c             	sub    esp,0xc
c001df75:	68 ab 67 02 c0       	push   0xc00267ab
c001df7a:	e8 ea ba fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001df7f:	83 c4 10             	add    esp,0x10
c001df82:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001df89:	74 29                	je     c001dfb4 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001df8b:	83 ec 2c             	sub    esp,0x2c
c001df8e:	b9 09 00 00 00       	mov    ecx,0x9
c001df93:	8d 74 24 60          	lea    esi,[esp+0x60]
c001df97:	fc                   	cld    
c001df98:	89 e7                	mov    edi,esp
c001df9a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001df9c:	55                   	push   ebp
c001df9d:	e8 de 01 ff ff       	call   c000e180 <Device::preOpenPCI(PCIDeviceInfo)>
c001dfa2:	83 c4 30             	add    esp,0x30
c001dfa5:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001dfac:	74 33                	je     c001dfe1 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001dfae:	eb 18                	jmp    c001dfc8 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001dfb0:	3c 1c                	cmp    al,0x1c
c001dfb2:	74 0c                	je     c001dfc0 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001dfb4:	e4 60                	in     al,0x60
c001dfb6:	3c 5a                	cmp    al,0x5a
c001dfb8:	75 f6                	jne    c001dfb0 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001dfba:	eb 04                	jmp    c001dfc0 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001dfbc:	3c 1c                	cmp    al,0x1c
c001dfbe:	75 cb                	jne    c001df8b <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001dfc0:	e4 60                	in     al,0x60
c001dfc2:	3c 5a                	cmp    al,0x5a
c001dfc4:	74 fa                	je     c001dfc0 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001dfc6:	eb f4                	jmp    c001dfbc <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001dfc8:	83 ec 0c             	sub    esp,0xc
c001dfcb:	68 b2 67 02 c0       	push   0xc00267b2
c001dfd0:	e8 94 ba fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dfd5:	83 c4 10             	add    esp,0x10
c001dfd8:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001dfdf:	74 23                	je     c001e004 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001dfe1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dfe4:	6a 00                	push   0x0
c001dfe6:	6a 00                	push   0x0
c001dfe8:	6a 00                	push   0x0
c001dfea:	55                   	push   ebp
c001dfeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dfee:	83 c4 10             	add    esp,0x10
c001dff1:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001dff8:	0f 84 8f 00 00 00    	je     c001e08d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dffe:	eb 18                	jmp    c001e018 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e000:	3c 1c                	cmp    al,0x1c
c001e002:	74 0c                	je     c001e010 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e004:	e4 60                	in     al,0x60
c001e006:	3c 5a                	cmp    al,0x5a
c001e008:	75 f6                	jne    c001e000 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e00a:	eb 04                	jmp    c001e010 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e00c:	3c 1c                	cmp    al,0x1c
c001e00e:	75 d1                	jne    c001dfe1 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e010:	e4 60                	in     al,0x60
c001e012:	3c 5a                	cmp    al,0x5a
c001e014:	74 fa                	je     c001e010 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e016:	eb f4                	jmp    c001e00c <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e018:	83 ec 0c             	sub    esp,0xc
c001e01b:	68 b9 67 02 c0       	push   0xc00267b9
c001e020:	e8 44 ba fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e025:	83 c4 10             	add    esp,0x10
c001e028:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001e02f:	75 5c                	jne    c001e08d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e031:	e4 60                	in     al,0x60
c001e033:	3c 5a                	cmp    al,0x5a
c001e035:	74 04                	je     c001e03b <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e037:	3c 1c                	cmp    al,0x1c
c001e039:	75 f6                	jne    c001e031 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e03b:	e4 60                	in     al,0x60
c001e03d:	3c 5a                	cmp    al,0x5a
c001e03f:	74 fa                	je     c001e03b <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e041:	3c 1c                	cmp    al,0x1c
c001e043:	74 f6                	je     c001e03b <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e045:	eb 46                	jmp    c001e08d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e047:	83 ec 0c             	sub    esp,0xc
c001e04a:	68 58 01 00 00       	push   0x158
c001e04f:	e8 bb b9 fe ff       	call   c0009a0f <malloc>
c001e054:	89 c5                	mov    ebp,eax
c001e056:	58                   	pop    eax
c001e057:	5a                   	pop    edx
c001e058:	68 c0 67 02 c0       	push   0xc00267c0
c001e05d:	55                   	push   ebp
c001e05e:	e8 15 05 ff ff       	call   c000e578 <DriverlessDevice::DriverlessDevice(char const*)>
c001e063:	59                   	pop    ecx
c001e064:	5e                   	pop    esi
c001e065:	55                   	push   ebp
c001e066:	53                   	push   ebx
c001e067:	e8 02 02 ff ff       	call   c000e26e <Device::addChild(Device*)>
c001e06c:	83 c4 10             	add    esp,0x10
c001e06f:	b9 09 00 00 00       	mov    ecx,0x9
c001e074:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e078:	fc                   	cld    
c001e079:	89 fe                	mov    esi,edi
c001e07b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e07d:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e081:	83 c4 1c             	add    esp,0x1c
c001e084:	5b                   	pop    ebx
c001e085:	5e                   	pop    esi
c001e086:	5f                   	pop    edi
c001e087:	5d                   	pop    ebp
c001e088:	e9 f3 00 ff ff       	jmp    c000e180 <Device::preOpenPCI(PCIDeviceInfo)>
c001e08d:	83 c4 1c             	add    esp,0x1c
c001e090:	5b                   	pop    ebx
c001e091:	5e                   	pop    esi
c001e092:	5f                   	pop    edi
c001e093:	5d                   	pop    ebp
c001e094:	c3                   	ret    
c001e095:	90                   	nop

c001e096 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e096:	55                   	push   ebp
c001e097:	57                   	push   edi
c001e098:	56                   	push   esi
c001e099:	53                   	push   ebx
c001e09a:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e0a0:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e0a7:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e0ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e0b2:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e0b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e0bd:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e0c4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e0c8:	68 da 67 02 c0       	push   0xc00267da
c001e0cd:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e0d1:	53                   	push   ebx
c001e0d2:	e8 69 26 fe ff       	call   c0000740 <strcpy>
c001e0d7:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e0dc:	b2 64                	mov    dl,0x64
c001e0de:	89 c8                	mov    eax,ecx
c001e0e0:	f6 f2                	div    dl
c001e0e2:	b2 0a                	mov    dl,0xa
c001e0e4:	83 c0 30             	add    eax,0x30
c001e0e7:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e0eb:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e0ef:	83 c4 10             	add    esp,0x10
c001e0f2:	89 c8                	mov    eax,ecx
c001e0f4:	f6 f2                	div    dl
c001e0f6:	89 c1                	mov    ecx,eax
c001e0f8:	0f b6 c0             	movzx  eax,al
c001e0fb:	88 e9                	mov    cl,ch
c001e0fd:	f6 f2                	div    dl
c001e0ff:	88 e0                	mov    al,ah
c001e101:	83 c0 30             	add    eax,0x30
c001e104:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e108:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e10c:	8d 41 30             	lea    eax,[ecx+0x30]
c001e10f:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e113:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e117:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e11c:	f6 f2                	div    dl
c001e11e:	89 c1                	mov    ecx,eax
c001e120:	0f b6 c0             	movzx  eax,al
c001e123:	88 e9                	mov    cl,ch
c001e125:	f6 f2                	div    dl
c001e127:	88 e0                	mov    al,ah
c001e129:	83 c0 30             	add    eax,0x30
c001e12c:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e130:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e134:	8d 41 30             	lea    eax,[ecx+0x30]
c001e137:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e13b:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e13f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e144:	f6 f2                	div    dl
c001e146:	89 c1                	mov    ecx,eax
c001e148:	0f b6 c0             	movzx  eax,al
c001e14b:	88 e9                	mov    cl,ch
c001e14d:	f6 f2                	div    dl
c001e14f:	88 e0                	mov    al,ah
c001e151:	83 c0 30             	add    eax,0x30
c001e154:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001e15b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e15f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e163:	8d 41 30             	lea    eax,[ecx+0x30]
c001e166:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e16a:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e16e:	74 29                	je     c001e199 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e170:	83 ec 0c             	sub    esp,0xc
c001e173:	53                   	push   ebx
c001e174:	e8 f0 b8 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e179:	83 c4 10             	add    esp,0x10
c001e17c:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001e183:	75 14                	jne    c001e199 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e185:	e4 60                	in     al,0x60
c001e187:	3c 1c                	cmp    al,0x1c
c001e189:	74 04                	je     c001e18f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e18b:	3c 5a                	cmp    al,0x5a
c001e18d:	75 f6                	jne    c001e185 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e18f:	e4 60                	in     al,0x60
c001e191:	3c 5a                	cmp    al,0x5a
c001e193:	74 fa                	je     c001e18f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e195:	3c 1c                	cmp    al,0x1c
c001e197:	74 f6                	je     c001e18f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e199:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e19e:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e1a3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e1a8:	83 ec 0c             	sub    esp,0xc
c001e1ab:	6a 0c                	push   0xc
c001e1ad:	56                   	push   esi
c001e1ae:	53                   	push   ebx
c001e1af:	57                   	push   edi
c001e1b0:	55                   	push   ebp
c001e1b1:	e8 68 f3 ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1b6:	83 c4 20             	add    esp,0x20
c001e1b9:	56                   	push   esi
c001e1ba:	53                   	push   ebx
c001e1bb:	57                   	push   edi
c001e1bc:	55                   	push   ebp
c001e1bd:	e8 50 f4 ff ff       	call   c001d612 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e1c2:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e1c7:	56                   	push   esi
c001e1c8:	53                   	push   ebx
c001e1c9:	57                   	push   edi
c001e1ca:	55                   	push   ebp
c001e1cb:	e8 d8 f4 ff ff       	call   c001d6a8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e1d0:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e1d4:	83 c4 14             	add    esp,0x14
c001e1d7:	6a 3c                	push   0x3c
c001e1d9:	56                   	push   esi
c001e1da:	53                   	push   ebx
c001e1db:	57                   	push   edi
c001e1dc:	55                   	push   ebp
c001e1dd:	e8 3c f3 ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1e2:	0f b6 c4             	movzx  eax,ah
c001e1e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e1e9:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e1ed:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e1f4:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c001e1f9:	83 c4 20             	add    esp,0x20
c001e1fc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e202:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e209:	0f 84 38 01 00 00    	je     c001e347 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e20f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e217:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c001e21c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e220:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e226:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e22c:	0f 8e 15 01 00 00    	jle    c001e347 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e232:	50                   	push   eax
c001e233:	50                   	push   eax
c001e234:	68 f5 67 02 c0       	push   0xc00267f5
c001e239:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e23d:	50                   	push   eax
c001e23e:	e8 fd 24 fe ff       	call   c0000740 <strcpy>
c001e243:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e247:	b9 0a 00 00 00       	mov    ecx,0xa
c001e24c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e250:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e254:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e258:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e25c:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e260:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e264:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e268:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e26c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e270:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e274:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e278:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e27c:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e280:	83 c4 10             	add    esp,0x10
c001e283:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e287:	99                   	cdq    
c001e288:	f7 f9                	idiv   ecx
c001e28a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e28e:	99                   	cdq    
c001e28f:	f7 f9                	idiv   ecx
c001e291:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e295:	83 c2 30             	add    edx,0x30
c001e298:	83 c0 30             	add    eax,0x30
c001e29b:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e29f:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e2a3:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001e2aa:	74 2d                	je     c001e2d9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e2ac:	83 ec 0c             	sub    esp,0xc
c001e2af:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e2b3:	50                   	push   eax
c001e2b4:	e8 b0 b7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e2b9:	83 c4 10             	add    esp,0x10
c001e2bc:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001e2c3:	75 14                	jne    c001e2d9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e2c5:	e4 60                	in     al,0x60
c001e2c7:	3c 5a                	cmp    al,0x5a
c001e2c9:	74 04                	je     c001e2cf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e2cb:	3c 1c                	cmp    al,0x1c
c001e2cd:	75 f6                	jne    c001e2c5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e2cf:	e4 60                	in     al,0x60
c001e2d1:	3c 5a                	cmp    al,0x5a
c001e2d3:	74 fa                	je     c001e2cf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e2d5:	3c 1c                	cmp    al,0x1c
c001e2d7:	74 f6                	je     c001e2cf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e2d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e2dd:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c001e2e2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e2e8:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e2eb:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e2f2:	39 d3                	cmp    ebx,edx
c001e2f4:	75 48                	jne    c001e33e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e2f6:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e2fd:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e301:	75 3b                	jne    c001e33e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e303:	83 ec 0c             	sub    esp,0xc
c001e306:	68 24 68 02 c0       	push   0xc0026824
c001e30b:	e8 eb e9 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001e310:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e314:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c001e319:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e31f:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e327:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e32b:	50                   	push   eax
c001e32c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e330:	53                   	push   ebx
c001e331:	68 49 68 02 c0       	push   0xc0026849
c001e336:	e8 c0 e9 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001e33b:	83 c4 20             	add    esp,0x20
c001e33e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e342:	e9 d0 fe ff ff       	jmp    c001e217 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e347:	31 d2                	xor    edx,edx
c001e349:	83 ec 0c             	sub    esp,0xc
c001e34c:	56                   	push   esi
c001e34d:	53                   	push   ebx
c001e34e:	57                   	push   edi
c001e34f:	52                   	push   edx
c001e350:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e354:	55                   	push   ebp
c001e355:	e8 9a f3 ff ff       	call   c001d6f4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e35a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e35e:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e365:	42                   	inc    edx
c001e366:	83 c4 20             	add    esp,0x20
c001e369:	83 fa 06             	cmp    edx,0x6
c001e36c:	75 db                	jne    c001e349 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e36e:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e373:	83 ec 0c             	sub    esp,0xc
c001e376:	86 e0                	xchg   al,ah
c001e378:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e380:	6a 02                	push   0x2
c001e382:	56                   	push   esi
c001e383:	53                   	push   ebx
c001e384:	57                   	push   edi
c001e385:	55                   	push   ebp
c001e386:	e8 93 f1 ff ff       	call   c001d51e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e38b:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e393:	83 c4 20             	add    esp,0x20
c001e396:	56                   	push   esi
c001e397:	53                   	push   ebx
c001e398:	57                   	push   edi
c001e399:	55                   	push   ebp
c001e39a:	e8 bd f2 ff ff       	call   c001d65c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e39f:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e3a6:	56                   	push   esi
c001e3a7:	53                   	push   ebx
c001e3a8:	57                   	push   edi
c001e3a9:	55                   	push   ebp
c001e3aa:	e8 17 f2 ff ff       	call   c001d5c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e3af:	b9 09 00 00 00       	mov    ecx,0x9
c001e3b4:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e3bc:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e3c0:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e3c7:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e3cb:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e3d2:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e3d6:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e3dd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e3e1:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e3e8:	83 ec 0c             	sub    esp,0xc
c001e3eb:	fc                   	cld    
c001e3ec:	89 e7                	mov    edi,esp
c001e3ee:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e3f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e3f7:	55                   	push   ebp
c001e3f8:	e8 59 f8 ff ff       	call   c001dc56 <PCI::foundDevice(PCIDeviceInfo)>
c001e3fd:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e403:	5b                   	pop    ebx
c001e404:	5e                   	pop    esi
c001e405:	5f                   	pop    edi
c001e406:	5d                   	pop    ebp
c001e407:	c3                   	ret    

c001e408 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e408:	55                   	push   ebp
c001e409:	57                   	push   edi
c001e40a:	56                   	push   esi
c001e40b:	53                   	push   ebx
c001e40c:	83 ec 0c             	sub    esp,0xc
c001e40f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e413:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e418:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e41d:	6a 00                	push   0x0
c001e41f:	56                   	push   esi
c001e420:	57                   	push   edi
c001e421:	55                   	push   ebp
c001e422:	e8 9f f1 ff ff       	call   c001d5c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e427:	6a 00                	push   0x0
c001e429:	56                   	push   esi
c001e42a:	57                   	push   edi
c001e42b:	55                   	push   ebp
c001e42c:	e8 65 fc ff ff       	call   c001e096 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e431:	83 c4 20             	add    esp,0x20
c001e434:	6a 00                	push   0x0
c001e436:	56                   	push   esi
c001e437:	57                   	push   edi
c001e438:	55                   	push   ebp
c001e439:	e8 ac f1 ff ff       	call   c001d5ea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e43e:	83 c4 10             	add    esp,0x10
c001e441:	84 c0                	test   al,al
c001e443:	79 27                	jns    c001e46c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e445:	bb 01 00 00 00       	mov    ebx,0x1
c001e44a:	53                   	push   ebx
c001e44b:	56                   	push   esi
c001e44c:	57                   	push   edi
c001e44d:	55                   	push   ebp
c001e44e:	e8 73 f1 ff ff       	call   c001d5c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e453:	83 c4 10             	add    esp,0x10
c001e456:	66 40                	inc    ax
c001e458:	74 0c                	je     c001e466 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e45a:	53                   	push   ebx
c001e45b:	56                   	push   esi
c001e45c:	57                   	push   edi
c001e45d:	55                   	push   ebp
c001e45e:	e8 33 fc ff ff       	call   c001e096 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e463:	83 c4 10             	add    esp,0x10
c001e466:	43                   	inc    ebx
c001e467:	83 fb 08             	cmp    ebx,0x8
c001e46a:	75 de                	jne    c001e44a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e46c:	83 c4 0c             	add    esp,0xc
c001e46f:	5b                   	pop    ebx
c001e470:	5e                   	pop    esi
c001e471:	5f                   	pop    edi
c001e472:	5d                   	pop    ebp
c001e473:	c3                   	ret    

c001e474 <PCI::detect()>:
c001e474:	56                   	push   esi
c001e475:	53                   	push   ebx
c001e476:	53                   	push   ebx
c001e477:	31 db                	xor    ebx,ebx
c001e479:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e47d:	6a 00                	push   0x0
c001e47f:	6a 00                	push   0x0
c001e481:	6a 00                	push   0x0
c001e483:	56                   	push   esi
c001e484:	e8 61 f1 ff ff       	call   c001d5ea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e489:	83 c4 10             	add    esp,0x10
c001e48c:	a8 80                	test   al,0x80
c001e48e:	75 21                	jne    c001e4b1 <PCI::detect()+0x3d>
c001e490:	51                   	push   ecx
c001e491:	51                   	push   ecx
c001e492:	6a 00                	push   0x0
c001e494:	56                   	push   esi
c001e495:	e8 98 f7 ff ff       	call   c001dc32 <PCI::checkBus(unsigned char)>
c001e49a:	83 c4 10             	add    esp,0x10
c001e49d:	eb 24                	jmp    c001e4c3 <PCI::detect()+0x4f>
c001e49f:	52                   	push   edx
c001e4a0:	52                   	push   edx
c001e4a1:	53                   	push   ebx
c001e4a2:	43                   	inc    ebx
c001e4a3:	56                   	push   esi
c001e4a4:	e8 89 f7 ff ff       	call   c001dc32 <PCI::checkBus(unsigned char)>
c001e4a9:	83 c4 10             	add    esp,0x10
c001e4ac:	83 fb 08             	cmp    ebx,0x8
c001e4af:	74 12                	je     c001e4c3 <PCI::detect()+0x4f>
c001e4b1:	53                   	push   ebx
c001e4b2:	6a 00                	push   0x0
c001e4b4:	6a 00                	push   0x0
c001e4b6:	56                   	push   esi
c001e4b7:	e8 0a f1 ff ff       	call   c001d5c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e4bc:	83 c4 10             	add    esp,0x10
c001e4bf:	66 40                	inc    ax
c001e4c1:	74 dc                	je     c001e49f <PCI::detect()+0x2b>
c001e4c3:	58                   	pop    eax
c001e4c4:	5b                   	pop    ebx
c001e4c5:	5e                   	pop    esi
c001e4c6:	c3                   	ret    
c001e4c7:	90                   	nop

c001e4c8 <IDE::close(int, int, void*)>:
c001e4c8:	83 c8 ff             	or     eax,0xffffffff
c001e4cb:	c3                   	ret    

c001e4cc <IDE::IDE()>:
c001e4cc:	83 ec 0c             	sub    esp,0xc
c001e4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4d3:	83 ec 08             	sub    esp,0x8
c001e4d6:	68 90 68 02 c0       	push   0xc0026890
c001e4db:	50                   	push   eax
c001e4dc:	e8 3b 01 ff ff       	call   c000e61c <HardDiskController::HardDiskController(char const*)>
c001e4e1:	83 c4 10             	add    esp,0x10
c001e4e4:	ba 20 69 02 c0       	mov    edx,0xc0026920
c001e4e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ed:	89 10                	mov    DWORD PTR [eax],edx
c001e4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e4fa:	90                   	nop
c001e4fb:	83 c4 0c             	add    esp,0xc
c001e4fe:	c3                   	ret    
c001e4ff:	90                   	nop

c001e500 <IDE::prepareInterrupt(unsigned char)>:
c001e500:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e505:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e509:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e511:	c3                   	ret    

c001e512 <selectDrive(unsigned char, unsigned char)>:
c001e512:	c3                   	ret    
c001e513:	90                   	nop

c001e514 <IDE::getBase(unsigned char)>:
c001e514:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e51d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e525:	c3                   	ret    

c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e526:	55                   	push   ebp
c001e527:	57                   	push   edi
c001e528:	56                   	push   esi
c001e529:	53                   	push   ebx
c001e52a:	83 ec 1c             	sub    esp,0x1c
c001e52d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e531:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e535:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e538:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e53c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e540:	80 f9 03             	cmp    cl,0x3
c001e543:	77 51                	ja     c001e596 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e545:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e549:	0f b6 f2             	movzx  esi,dl
c001e54c:	0f b6 db             	movzx  ebx,bl
c001e54f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e552:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e556:	83 ca 80             	or     edx,0xffffff80
c001e559:	0f b6 d2             	movzx  edx,dl
c001e55c:	52                   	push   edx
c001e55d:	6a 0c                	push   0xc
c001e55f:	56                   	push   esi
c001e560:	57                   	push   edi
c001e561:	e8 c0 ff ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e566:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e56b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e56f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e573:	ee                   	out    dx,al
c001e574:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e579:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e57d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e581:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e585:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e58d:	83 c4 2c             	add    esp,0x2c
c001e590:	5b                   	pop    ebx
c001e591:	5e                   	pop    esi
c001e592:	5f                   	pop    edi
c001e593:	5d                   	pop    ebp
c001e594:	eb 90                	jmp    c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e596:	80 fb 07             	cmp    bl,0x7
c001e599:	77 12                	ja     c001e5ad <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e59b:	0f b6 d2             	movzx  edx,dl
c001e59e:	0f b6 db             	movzx  ebx,bl
c001e5a1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e5a9:	89 da                	mov    edx,ebx
c001e5ab:	eb 2f                	jmp    c001e5dc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e5ad:	80 fb 0d             	cmp    bl,0xd
c001e5b0:	77 13                	ja     c001e5c5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e5b2:	0f b6 d2             	movzx  edx,dl
c001e5b5:	0f b6 db             	movzx  ebx,bl
c001e5b8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e5bf:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e5c3:	eb 17                	jmp    c001e5dc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e5c5:	80 fb 15             	cmp    bl,0x15
c001e5c8:	77 13                	ja     c001e5dd <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e5ca:	0f b6 d2             	movzx  edx,dl
c001e5cd:	0f b6 db             	movzx  ebx,bl
c001e5d0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e5d8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e5dc:	ee                   	out    dx,al
c001e5dd:	83 c4 1c             	add    esp,0x1c
c001e5e0:	5b                   	pop    ebx
c001e5e1:	5e                   	pop    esi
c001e5e2:	5f                   	pop    edi
c001e5e3:	5d                   	pop    ebp
c001e5e4:	c3                   	ret    
c001e5e5:	90                   	nop

c001e5e6 <IDE::read(unsigned char, unsigned char)>:
c001e5e6:	55                   	push   ebp
c001e5e7:	57                   	push   edi
c001e5e8:	56                   	push   esi
c001e5e9:	53                   	push   ebx
c001e5ea:	83 ec 1c             	sub    esp,0x1c
c001e5ed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e5f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e5f5:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e5f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e5fc:	3c 03                	cmp    al,0x3
c001e5fe:	77 43                	ja     c001e643 <IDE::read(unsigned char, unsigned char)+0x5d>
c001e600:	0f b6 f2             	movzx  esi,dl
c001e603:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e606:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e60a:	83 c8 80             	or     eax,0xffffff80
c001e60d:	0f b6 c0             	movzx  eax,al
c001e610:	50                   	push   eax
c001e611:	6a 0c                	push   0xc
c001e613:	56                   	push   esi
c001e614:	57                   	push   edi
c001e615:	e8 0c ff ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e61a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e61f:	0f b6 c3             	movzx  eax,bl
c001e622:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e626:	ec                   	in     al,dx
c001e627:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e62b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e630:	52                   	push   edx
c001e631:	6a 0c                	push   0xc
c001e633:	56                   	push   esi
c001e634:	57                   	push   edi
c001e635:	e8 ec fe ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e63a:	83 c4 20             	add    esp,0x20
c001e63d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e641:	eb 49                	jmp    c001e68c <IDE::read(unsigned char, unsigned char)+0xa6>
c001e643:	80 fb 07             	cmp    bl,0x7
c001e646:	77 12                	ja     c001e65a <IDE::read(unsigned char, unsigned char)+0x74>
c001e648:	0f b6 d2             	movzx  edx,dl
c001e64b:	0f b6 c3             	movzx  eax,bl
c001e64e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e656:	89 c2                	mov    edx,eax
c001e658:	eb 31                	jmp    c001e68b <IDE::read(unsigned char, unsigned char)+0xa5>
c001e65a:	80 fb 0d             	cmp    bl,0xd
c001e65d:	77 13                	ja     c001e672 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e65f:	0f b6 d2             	movzx  edx,dl
c001e662:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e669:	0f b6 d3             	movzx  edx,bl
c001e66c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e670:	eb 19                	jmp    c001e68b <IDE::read(unsigned char, unsigned char)+0xa5>
c001e672:	31 c0                	xor    eax,eax
c001e674:	80 fb 15             	cmp    bl,0x15
c001e677:	77 13                	ja     c001e68c <IDE::read(unsigned char, unsigned char)+0xa6>
c001e679:	0f b6 d2             	movzx  edx,dl
c001e67c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e684:	0f b6 d3             	movzx  edx,bl
c001e687:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e68b:	ec                   	in     al,dx
c001e68c:	83 c4 1c             	add    esp,0x1c
c001e68f:	5b                   	pop    ebx
c001e690:	5e                   	pop    esi
c001e691:	5f                   	pop    edi
c001e692:	5d                   	pop    ebp
c001e693:	c3                   	ret    

c001e694 <IDE::waitInterrupt(unsigned char)>:
c001e694:	55                   	push   ebp
c001e695:	57                   	push   edi
c001e696:	56                   	push   esi
c001e697:	53                   	push   ebx
c001e698:	31 db                	xor    ebx,ebx
c001e69a:	83 ec 0c             	sub    esp,0xc
c001e69d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e6a1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e6a6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e6ae:	89 e8                	mov    eax,ebp
c001e6b0:	84 c0                	test   al,al
c001e6b2:	75 30                	jne    c001e6e4 <IDE::waitInterrupt(unsigned char)+0x50>
c001e6b4:	50                   	push   eax
c001e6b5:	6a 0c                	push   0xc
c001e6b7:	56                   	push   esi
c001e6b8:	57                   	push   edi
c001e6b9:	e8 28 ff ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001e6be:	83 c4 10             	add    esp,0x10
c001e6c1:	a8 01                	test   al,0x1
c001e6c3:	75 27                	jne    c001e6ec <IDE::waitInterrupt(unsigned char)+0x58>
c001e6c5:	f6 c3 04             	test   bl,0x4
c001e6c8:	75 12                	jne    c001e6dc <IDE::waitInterrupt(unsigned char)+0x48>
c001e6ca:	83 fb 32             	cmp    ebx,0x32
c001e6cd:	7e 0d                	jle    c001e6dc <IDE::waitInterrupt(unsigned char)+0x48>
c001e6cf:	83 ec 0c             	sub    esp,0xc
c001e6d2:	6a 64                	push   0x64
c001e6d4:	e8 db a2 ff ff       	call   c00189b4 <milliTenthSleep(unsigned int)>
c001e6d9:	83 c4 10             	add    esp,0x10
c001e6dc:	83 fb 3c             	cmp    ebx,0x3c
c001e6df:	74 0b                	je     c001e6ec <IDE::waitInterrupt(unsigned char)+0x58>
c001e6e1:	43                   	inc    ebx
c001e6e2:	eb c2                	jmp    c001e6a6 <IDE::waitInterrupt(unsigned char)+0x12>
c001e6e4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e6ec:	83 c4 0c             	add    esp,0xc
c001e6ef:	89 e8                	mov    eax,ebp
c001e6f1:	5b                   	pop    ebx
c001e6f2:	5e                   	pop    esi
c001e6f3:	5f                   	pop    edi
c001e6f4:	5d                   	pop    ebp
c001e6f5:	c3                   	ret    

c001e6f6 <ideChannel0IRQHandler(regs*, void*)>:
c001e6f6:	83 ec 10             	sub    esp,0x10
c001e6f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e6fd:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e704:	6a 07                	push   0x7
c001e706:	6a 00                	push   0x0
c001e708:	50                   	push   eax
c001e709:	e8 d8 fe ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001e70e:	83 c4 1c             	add    esp,0x1c
c001e711:	c3                   	ret    

c001e712 <ideChannel1IRQHandler(regs*, void*)>:
c001e712:	83 ec 10             	sub    esp,0x10
c001e715:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e719:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e720:	6a 07                	push   0x7
c001e722:	6a 01                	push   0x1
c001e724:	50                   	push   eax
c001e725:	e8 bc fe ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001e72a:	83 c4 1c             	add    esp,0x1c
c001e72d:	c3                   	ret    

c001e72e <IDE::enableIRQs(unsigned char, bool)>:
c001e72e:	57                   	push   edi
c001e72f:	56                   	push   esi
c001e730:	be 04 00 00 00       	mov    esi,0x4
c001e735:	53                   	push   ebx
c001e736:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e73b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e73f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e744:	0f 94 c0             	sete   al
c001e747:	d1 e0                	shl    eax,1
c001e749:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e750:	0f b6 c0             	movzx  eax,al
c001e753:	50                   	push   eax
c001e754:	6a 0c                	push   0xc
c001e756:	57                   	push   edi
c001e757:	53                   	push   ebx
c001e758:	e8 c9 fd ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e75d:	83 c4 10             	add    esp,0x10
c001e760:	50                   	push   eax
c001e761:	6a 0c                	push   0xc
c001e763:	57                   	push   edi
c001e764:	53                   	push   ebx
c001e765:	e8 7c fe ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001e76a:	83 c4 10             	add    esp,0x10
c001e76d:	4e                   	dec    esi
c001e76e:	75 f0                	jne    c001e760 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e770:	5b                   	pop    ebx
c001e771:	5e                   	pop    esi
c001e772:	5f                   	pop    edi
c001e773:	c3                   	ret    

c001e774 <IDE::open(int, int, void*)>:
c001e774:	55                   	push   ebp
c001e775:	57                   	push   edi
c001e776:	56                   	push   esi
c001e777:	53                   	push   ebx
c001e778:	83 ec 1c             	sub    esp,0x1c
c001e77b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e77f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e788:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e791:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e798:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e79f:	0f 85 b0 02 00 00    	jne    c001ea55 <IDE::open(int, int, void*)+0x2e1>
c001e7a5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e7ab:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e7af:	83 e0 7f             	and    eax,0x7f
c001e7b2:	3c 05                	cmp    al,0x5
c001e7b4:	74 04                	je     c001e7ba <IDE::open(int, int, void*)+0x46>
c001e7b6:	3c 0f                	cmp    al,0xf
c001e7b8:	75 32                	jne    c001e7ec <IDE::open(int, int, void*)+0x78>
c001e7ba:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e7c0:	83 e0 fc             	and    eax,0xfffffffc
c001e7c3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e7ca:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e7d0:	83 e0 fc             	and    eax,0xfffffffc
c001e7d3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e7da:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e7e0:	83 e0 fc             	and    eax,0xfffffffc
c001e7e3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e7ea:	eb 14                	jmp    c001e800 <IDE::open(int, int, void*)+0x8c>
c001e7ec:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e7f6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e800:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e807:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e80e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e812:	89 c6                	mov    esi,eax
c001e814:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e819:	c1 e6 10             	shl    esi,0x10
c001e81c:	89 e8                	mov    eax,ebp
c001e81e:	89 fa                	mov    edx,edi
c001e820:	c1 e0 0b             	shl    eax,0xb
c001e823:	09 f0                	or     eax,esi
c001e825:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e82c:	c1 e6 08             	shl    esi,0x8
c001e82f:	09 c6                	or     esi,eax
c001e831:	89 f0                	mov    eax,esi
c001e833:	0d 08 00 00 80       	or     eax,0x80000008
c001e838:	ef                   	out    dx,eax
c001e839:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e83e:	89 ca                	mov    edx,ecx
c001e840:	ed                   	in     eax,dx
c001e841:	c1 e8 10             	shr    eax,0x10
c001e844:	3d ff ff 00 00       	cmp    eax,0xffff
c001e849:	0f 84 f5 00 00 00    	je     c001e944 <IDE::open(int, int, void*)+0x1d0>
c001e84f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e855:	89 fa                	mov    edx,edi
c001e857:	89 f0                	mov    eax,esi
c001e859:	ef                   	out    dx,eax
c001e85a:	b0 fe                	mov    al,0xfe
c001e85c:	89 ca                	mov    edx,ecx
c001e85e:	ee                   	out    dx,al
c001e85f:	89 f0                	mov    eax,esi
c001e861:	89 fa                	mov    edx,edi
c001e863:	ef                   	out    dx,eax
c001e864:	89 ca                	mov    edx,ecx
c001e866:	ed                   	in     eax,dx
c001e867:	3c fe                	cmp    al,0xfe
c001e869:	0f 85 a9 00 00 00    	jne    c001e918 <IDE::open(int, int, void*)+0x1a4>
c001e86f:	8b 15 68 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f68
c001e875:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e87c:	74 33                	je     c001e8b1 <IDE::open(int, int, void*)+0x13d>
c001e87e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e884:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e888:	40                   	inc    eax
c001e889:	83 ec 0c             	sub    esp,0xc
c001e88c:	0f b6 c0             	movzx  eax,al
c001e88f:	50                   	push   eax
c001e890:	55                   	push   ebp
c001e891:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e895:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e89b:	51                   	push   ecx
c001e89c:	e8 53 39 ff ff       	call   c00121f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e8a1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e8a6:	83 c4 1c             	add    esp,0x1c
c001e8a9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e8af:	eb 0a                	jmp    c001e8bb <IDE::open(int, int, void*)+0x147>
c001e8b1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e8bb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e8c2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e8c9:	c1 e1 10             	shl    ecx,0x10
c001e8cc:	c1 e0 08             	shl    eax,0x8
c001e8cf:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e8d4:	09 c1                	or     ecx,eax
c001e8d6:	89 fa                	mov    edx,edi
c001e8d8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e8df:	c1 e0 0b             	shl    eax,0xb
c001e8e2:	09 c1                	or     ecx,eax
c001e8e4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e8ea:	89 c8                	mov    eax,ecx
c001e8ec:	ef                   	out    dx,eax
c001e8ed:	be fc 0c 00 00       	mov    esi,0xcfc
c001e8f2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e8f8:	89 f2                	mov    edx,esi
c001e8fa:	ee                   	out    dx,al
c001e8fb:	89 c8                	mov    eax,ecx
c001e8fd:	89 fa                	mov    edx,edi
c001e8ff:	ef                   	out    dx,eax
c001e900:	89 f2                	mov    edx,esi
c001e902:	ed                   	in     eax,dx
c001e903:	0f b6 c0             	movzx  eax,al
c001e906:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e90c:	74 46                	je     c001e954 <IDE::open(int, int, void*)+0x1e0>
c001e90e:	83 ec 0c             	sub    esp,0xc
c001e911:	68 a8 68 02 c0       	push   0xc00268a8
c001e916:	eb 34                	jmp    c001e94c <IDE::open(int, int, void*)+0x1d8>
c001e918:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e921:	75 17                	jne    c001e93a <IDE::open(int, int, void*)+0x1c6>
c001e923:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e928:	74 07                	je     c001e931 <IDE::open(int, int, void*)+0x1bd>
c001e92a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e92f:	75 09                	jne    c001e93a <IDE::open(int, int, void*)+0x1c6>
c001e931:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e938:	eb 1a                	jmp    c001e954 <IDE::open(int, int, void*)+0x1e0>
c001e93a:	83 ec 0c             	sub    esp,0xc
c001e93d:	68 b0 68 02 c0       	push   0xc00268b0
c001e942:	eb 08                	jmp    c001e94c <IDE::open(int, int, void*)+0x1d8>
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	68 e1 68 02 c0       	push   0xc00268e1
c001e94c:	e8 b6 60 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c001e951:	83 c4 10             	add    esp,0x10
c001e954:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e95b:	79 1a                	jns    c001e977 <IDE::open(int, int, void*)+0x203>
c001e95d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e963:	83 e0 fc             	and    eax,0xfffffffc
c001e966:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e96d:	83 c0 08             	add    eax,0x8
c001e970:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e977:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e97d:	89 c2                	mov    edx,eax
c001e97f:	83 e2 0f             	and    edx,0xf
c001e982:	66 83 fa 08          	cmp    dx,0x8
c001e986:	75 0a                	jne    c001e992 <IDE::open(int, int, void*)+0x21e>
c001e988:	83 e8 02             	sub    eax,0x2
c001e98b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e992:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e998:	89 c2                	mov    edx,eax
c001e99a:	83 e2 0f             	and    edx,0xf
c001e99d:	66 83 fa 08          	cmp    dx,0x8
c001e9a1:	75 0a                	jne    c001e9ad <IDE::open(int, int, void*)+0x239>
c001e9a3:	83 e8 02             	sub    eax,0x2
c001e9a6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e9ad:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e9b4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e9bb:	89 d0                	mov    eax,edx
c001e9bd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e9c0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e9c4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e9c8:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e9cb:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e9d0:	0f b6 c9             	movzx  ecx,cl
c001e9d3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e9da:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e9dd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e9e1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e9e5:	8d 50 02             	lea    edx,[eax+0x2]
c001e9e8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e9ed:	0f b6 d2             	movzx  edx,dl
c001e9f0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e9f6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e9f9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e9fd:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ea01:	8d 48 03             	lea    ecx,[eax+0x3]
c001ea04:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ea09:	0f b6 c9             	movzx  ecx,cl
c001ea0c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ea12:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ea15:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ea19:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ea1d:	8d 50 04             	lea    edx,[eax+0x4]
c001ea20:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ea26:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ea2b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ea32:	66 85 f6             	test   si,si
c001ea35:	74 5b                	je     c001ea92 <IDE::open(int, int, void*)+0x31e>
c001ea37:	0f b6 d2             	movzx  edx,dl
c001ea3a:	83 c0 05             	add    eax,0x5
c001ea3d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ea40:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ea44:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ea48:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ea4e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ea53:	eb 3d                	jmp    c001ea92 <IDE::open(int, int, void*)+0x31e>
c001ea55:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ea5b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ea62:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ea69:	66 05 06 02          	add    ax,0x206
c001ea6d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ea74:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ea7b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ea82:	66 05 06 02          	add    ax,0x206
c001ea86:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ea8d:	e9 e5 fe ff ff       	jmp    c001e977 <IDE::open(int, int, void*)+0x203>
c001ea92:	50                   	push   eax
c001ea93:	50                   	push   eax
c001ea94:	6a 00                	push   0x0
c001ea96:	53                   	push   ebx
c001ea97:	e8 64 fa ff ff       	call   c001e500 <IDE::prepareInterrupt(unsigned char)>
c001ea9c:	5a                   	pop    edx
c001ea9d:	59                   	pop    ecx
c001ea9e:	6a 01                	push   0x1
c001eaa0:	53                   	push   ebx
c001eaa1:	e8 5a fa ff ff       	call   c001e500 <IDE::prepareInterrupt(unsigned char)>
c001eaa6:	83 c4 0c             	add    esp,0xc
c001eaa9:	6a 00                	push   0x0
c001eaab:	6a 00                	push   0x0
c001eaad:	53                   	push   ebx
c001eaae:	e8 7b fc ff ff       	call   c001e72e <IDE::enableIRQs(unsigned char, bool)>
c001eab3:	83 c4 0c             	add    esp,0xc
c001eab6:	6a 00                	push   0x0
c001eab8:	6a 01                	push   0x1
c001eaba:	53                   	push   ebx
c001eabb:	e8 6e fc ff ff       	call   c001e72e <IDE::enableIRQs(unsigned char, bool)>
c001eac0:	83 c4 10             	add    esp,0x10
c001eac3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001eaca:	74 34                	je     c001eb00 <IDE::open(int, int, void*)+0x38c>
c001eacc:	83 ec 0c             	sub    esp,0xc
c001eacf:	53                   	push   ebx
c001ead0:	6a 01                	push   0x1
c001ead2:	68 f6 e6 01 c0       	push   0xc001e6f6
c001ead7:	6a 0e                	push   0xe
c001ead9:	53                   	push   ebx
c001eada:	e8 07 f7 fe ff       	call   c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eadf:	83 c4 14             	add    esp,0x14
c001eae2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001eae8:	53                   	push   ebx
c001eae9:	6a 01                	push   0x1
c001eaeb:	68 12 e7 01 c0       	push   0xc001e712
c001eaf0:	6a 0f                	push   0xf
c001eaf2:	53                   	push   ebx
c001eaf3:	e8 ee f6 fe ff       	call   c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eaf8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001eafe:	eb 38                	jmp    c001eb38 <IDE::open(int, int, void*)+0x3c4>
c001eb00:	83 ec 0c             	sub    esp,0xc
c001eb03:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001eb0d:	53                   	push   ebx
c001eb0e:	6a 00                	push   0x0
c001eb10:	68 f6 e6 01 c0       	push   0xc001e6f6
c001eb15:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001eb1b:	53                   	push   ebx
c001eb1c:	e8 c5 f6 fe ff       	call   c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb21:	83 c4 14             	add    esp,0x14
c001eb24:	53                   	push   ebx
c001eb25:	6a 00                	push   0x0
c001eb27:	68 12 e7 01 c0       	push   0xc001e712
c001eb2c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001eb32:	53                   	push   ebx
c001eb33:	e8 ae f6 fe ff       	call   c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb38:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eb3a:	83 c4 20             	add    esp,0x20
c001eb3d:	83 ec 0c             	sub    esp,0xc
c001eb40:	53                   	push   ebx
c001eb41:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001eb44:	83 c4 0c             	add    esp,0xc
c001eb47:	6a 07                	push   0x7
c001eb49:	6a 00                	push   0x0
c001eb4b:	53                   	push   ebx
c001eb4c:	e8 95 fa ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001eb51:	83 c4 0c             	add    esp,0xc
c001eb54:	6a 07                	push   0x7
c001eb56:	6a 01                	push   0x1
c001eb58:	53                   	push   ebx
c001eb59:	e8 88 fa ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001eb5e:	83 c4 0c             	add    esp,0xc
c001eb61:	6a 01                	push   0x1
c001eb63:	6a 00                	push   0x0
c001eb65:	53                   	push   ebx
c001eb66:	e8 c3 fb ff ff       	call   c001e72e <IDE::enableIRQs(unsigned char, bool)>
c001eb6b:	83 c4 0c             	add    esp,0xc
c001eb6e:	6a 01                	push   0x1
c001eb70:	6a 01                	push   0x1
c001eb72:	53                   	push   ebx
c001eb73:	e8 b6 fb ff ff       	call   c001e72e <IDE::enableIRQs(unsigned char, bool)>
c001eb78:	83 c4 2c             	add    esp,0x2c
c001eb7b:	31 c0                	xor    eax,eax
c001eb7d:	5b                   	pop    ebx
c001eb7e:	5e                   	pop    esi
c001eb7f:	5f                   	pop    edi
c001eb80:	5d                   	pop    ebp
c001eb81:	c3                   	ret    

c001eb82 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001eb82:	55                   	push   ebp
c001eb83:	57                   	push   edi
c001eb84:	56                   	push   esi
c001eb85:	53                   	push   ebx
c001eb86:	83 ec 1c             	sub    esp,0x1c
c001eb89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb8d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eb91:	8d 50 f8             	lea    edx,[eax-0x8]
c001eb94:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eb98:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001eb9c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001eba0:	80 fa 03             	cmp    dl,0x3
c001eba3:	77 5d                	ja     c001ec02 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001eba5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ebad:	0f b6 db             	movzx  ebx,bl
c001ebb0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ebb3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ebb7:	83 ca 80             	or     edx,0xffffff80
c001ebba:	0f b6 d2             	movzx  edx,dl
c001ebbd:	52                   	push   edx
c001ebbe:	6a 0c                	push   0xc
c001ebc0:	53                   	push   ebx
c001ebc1:	56                   	push   esi
c001ebc2:	e8 5f f9 ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebc7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ebcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ebd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ebd4:	0f b6 c0             	movzx  eax,al
c001ebd7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ebdb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ebdd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ebe2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ebe6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ebea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ebee:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ebf6:	83 c4 2c             	add    esp,0x2c
c001ebf9:	5b                   	pop    ebx
c001ebfa:	5e                   	pop    esi
c001ebfb:	5f                   	pop    edi
c001ebfc:	5d                   	pop    ebp
c001ebfd:	e9 24 f9 ff ff       	jmp    c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec02:	3c 07                	cmp    al,0x7
c001ec04:	77 10                	ja     c001ec16 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ec06:	0f b6 db             	movzx  ebx,bl
c001ec09:	0f b6 d0             	movzx  edx,al
c001ec0c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ec14:	eb 2d                	jmp    c001ec43 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ec16:	3c 0d                	cmp    al,0xd
c001ec18:	77 13                	ja     c001ec2d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ec1a:	0f b6 db             	movzx  ebx,bl
c001ec1d:	0f b6 c0             	movzx  eax,al
c001ec20:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ec27:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ec2b:	eb 16                	jmp    c001ec43 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ec2d:	3c 15                	cmp    al,0x15
c001ec2f:	77 14                	ja     c001ec45 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ec31:	0f b6 db             	movzx  ebx,bl
c001ec34:	0f b6 c0             	movzx  eax,al
c001ec37:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ec3f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ec43:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ec45:	83 c4 1c             	add    esp,0x1c
c001ec48:	5b                   	pop    ebx
c001ec49:	5e                   	pop    esi
c001ec4a:	5f                   	pop    edi
c001ec4b:	5d                   	pop    ebp
c001ec4c:	c3                   	ret    
c001ec4d:	90                   	nop

c001ec4e <IDE::detect()>:
c001ec4e:	55                   	push   ebp
c001ec4f:	57                   	push   edi
c001ec50:	56                   	push   esi
c001ec51:	53                   	push   ebx
c001ec52:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ec58:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ec5f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ec66:	0f 85 97 02 00 00    	jne    c001ef03 <IDE::detect()+0x2b5>
c001ec6c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ec73:	31 f6                	xor    esi,esi
c001ec75:	31 ed                	xor    ebp,ebp
c001ec77:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ec7f:	89 e8                	mov    eax,ebp
c001ec81:	c1 e0 06             	shl    eax,0x6
c001ec84:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ec8c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ec90:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ec94:	c1 e0 04             	shl    eax,0x4
c001ec97:	83 c8 a0             	or     eax,0xffffffa0
c001ec9a:	0f b6 c0             	movzx  eax,al
c001ec9d:	50                   	push   eax
c001ec9e:	6a 06                	push   0x6
c001eca0:	56                   	push   esi
c001eca1:	53                   	push   ebx
c001eca2:	e8 7f f8 ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eca7:	83 c4 0c             	add    esp,0xc
c001ecaa:	6a 0c                	push   0xc
c001ecac:	56                   	push   esi
c001ecad:	53                   	push   ebx
c001ecae:	e8 33 f9 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001ecb3:	83 c4 0c             	add    esp,0xc
c001ecb6:	6a 0c                	push   0xc
c001ecb8:	56                   	push   esi
c001ecb9:	53                   	push   ebx
c001ecba:	e8 27 f9 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001ecbf:	83 c4 0c             	add    esp,0xc
c001ecc2:	6a 0c                	push   0xc
c001ecc4:	56                   	push   esi
c001ecc5:	53                   	push   ebx
c001ecc6:	e8 1b f9 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001eccb:	83 c4 0c             	add    esp,0xc
c001ecce:	6a 0c                	push   0xc
c001ecd0:	56                   	push   esi
c001ecd1:	53                   	push   ebx
c001ecd2:	e8 0f f9 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001ecd7:	68 ec 00 00 00       	push   0xec
c001ecdc:	6a 07                	push   0x7
c001ecde:	56                   	push   esi
c001ecdf:	53                   	push   ebx
c001ece0:	e8 41 f8 ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ece5:	83 c4 1c             	add    esp,0x1c
c001ece8:	6a 0c                	push   0xc
c001ecea:	56                   	push   esi
c001eceb:	53                   	push   ebx
c001ecec:	e8 f5 f8 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001ecf1:	83 c4 0c             	add    esp,0xc
c001ecf4:	6a 0c                	push   0xc
c001ecf6:	56                   	push   esi
c001ecf7:	53                   	push   ebx
c001ecf8:	e8 e9 f8 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001ecfd:	83 c4 0c             	add    esp,0xc
c001ed00:	6a 0c                	push   0xc
c001ed02:	56                   	push   esi
c001ed03:	53                   	push   ebx
c001ed04:	e8 dd f8 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001ed09:	83 c4 0c             	add    esp,0xc
c001ed0c:	6a 0c                	push   0xc
c001ed0e:	56                   	push   esi
c001ed0f:	53                   	push   ebx
c001ed10:	e8 d1 f8 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001ed15:	83 c4 0c             	add    esp,0xc
c001ed18:	6a 0c                	push   0xc
c001ed1a:	56                   	push   esi
c001ed1b:	53                   	push   ebx
c001ed1c:	e8 c5 f8 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001ed21:	83 c4 10             	add    esp,0x10
c001ed24:	84 c0                	test   al,al
c001ed26:	0f 84 5f 01 00 00    	je     c001ee8b <IDE::detect()+0x23d>
c001ed2c:	31 ff                	xor    edi,edi
c001ed2e:	50                   	push   eax
c001ed2f:	6a 0c                	push   0xc
c001ed31:	56                   	push   esi
c001ed32:	53                   	push   ebx
c001ed33:	e8 ae f8 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001ed38:	83 c4 10             	add    esp,0x10
c001ed3b:	a8 01                	test   al,0x1
c001ed3d:	0f 85 69 01 00 00    	jne    c001eeac <IDE::detect()+0x25e>
c001ed43:	84 c0                	test   al,al
c001ed45:	78 04                	js     c001ed4b <IDE::detect()+0xfd>
c001ed47:	a8 08                	test   al,0x8
c001ed49:	75 23                	jne    c001ed6e <IDE::detect()+0x120>
c001ed4b:	47                   	inc    edi
c001ed4c:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ed52:	7e da                	jle    c001ed2e <IDE::detect()+0xe0>
c001ed54:	83 ec 0c             	sub    esp,0xc
c001ed57:	6a 32                	push   0x32
c001ed59:	e8 56 9c ff ff       	call   c00189b4 <milliTenthSleep(unsigned int)>
c001ed5e:	83 c4 10             	add    esp,0x10
c001ed61:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ed67:	75 c5                	jne    c001ed2e <IDE::detect()+0xe0>
c001ed69:	e9 3e 01 00 00       	jmp    c001eeac <IDE::detect()+0x25e>
c001ed6e:	31 c9                	xor    ecx,ecx
c001ed70:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ed74:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ed78:	83 ec 0c             	sub    esp,0xc
c001ed7b:	68 80 00 00 00       	push   0x80
c001ed80:	57                   	push   edi
c001ed81:	6a 00                	push   0x0
c001ed83:	56                   	push   esi
c001ed84:	53                   	push   ebx
c001ed85:	e8 f8 fd ff ff       	call   c001eb82 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ed8a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ed8f:	89 e8                	mov    eax,ebp
c001ed91:	89 d1                	mov    ecx,edx
c001ed93:	c1 e0 06             	shl    eax,0x6
c001ed96:	01 d8                	add    eax,ebx
c001ed98:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ed9f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001eda6:	89 f2                	mov    edx,esi
c001eda8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001edae:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001edb2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001edb8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001edbc:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001edc3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001edcb:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001edd2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001edda:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ede0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ede7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001eded:	8d 54 24 58          	lea    edx,[esp+0x58]
c001edf1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001edf5:	83 c4 20             	add    esp,0x20
c001edf8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001edfb:	83 c0 02             	add    eax,0x2
c001edfe:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001ee04:	83 c7 02             	add    edi,0x2
c001ee07:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ee0a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001ee10:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001ee14:	75 e2                	jne    c001edf8 <IDE::detect()+0x1aa>
c001ee16:	89 e8                	mov    eax,ebp
c001ee18:	c1 e0 06             	shl    eax,0x6
c001ee1b:	01 d8                	add    eax,ebx
c001ee1d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001ee23:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ee2a:	66 c1 ea 09          	shr    dx,0x9
c001ee2e:	83 e2 01             	and    edx,0x1
c001ee31:	84 c9                	test   cl,cl
c001ee33:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ee39:	75 22                	jne    c001ee5d <IDE::detect()+0x20f>
c001ee3b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001ee42:	74 46                	je     c001ee8a <IDE::detect()+0x23c>
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	68 7c 01 00 00       	push   0x17c
c001ee4c:	e8 be ab fe ff       	call   c0009a0f <malloc>
c001ee51:	89 c7                	mov    edi,eax
c001ee53:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee56:	e8 35 06 00 00       	call   c001f490 <ATA::ATA()>
c001ee5b:	eb 17                	jmp    c001ee74 <IDE::detect()+0x226>
c001ee5d:	83 ec 0c             	sub    esp,0xc
c001ee60:	68 84 01 00 00       	push   0x184
c001ee65:	e8 a5 ab fe ff       	call   c0009a0f <malloc>
c001ee6a:	89 c7                	mov    edi,eax
c001ee6c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee6f:	e8 a4 0c 00 00       	call   c001fb18 <ATAPI::ATAPI()>
c001ee74:	5a                   	pop    edx
c001ee75:	59                   	pop    ecx
c001ee76:	57                   	push   edi
c001ee77:	53                   	push   ebx
c001ee78:	e8 f1 f3 fe ff       	call   c000e26e <Device::addChild(Device*)>
c001ee7d:	8b 07                	mov    eax,DWORD PTR [edi]
c001ee7f:	53                   	push   ebx
c001ee80:	55                   	push   ebp
c001ee81:	6a 00                	push   0x0
c001ee83:	57                   	push   edi
c001ee84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee87:	83 c4 20             	add    esp,0x20
c001ee8a:	45                   	inc    ebp
c001ee8b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ee90:	74 0d                	je     c001ee9f <IDE::detect()+0x251>
c001ee92:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ee9a:	e9 e0 fd ff ff       	jmp    c001ec7f <IDE::detect()+0x31>
c001ee9f:	4e                   	dec    esi
c001eea0:	74 61                	je     c001ef03 <IDE::detect()+0x2b5>
c001eea2:	be 01 00 00 00       	mov    esi,0x1
c001eea7:	e9 cb fd ff ff       	jmp    c001ec77 <IDE::detect()+0x29>
c001eeac:	50                   	push   eax
c001eead:	6a 04                	push   0x4
c001eeaf:	56                   	push   esi
c001eeb0:	53                   	push   ebx
c001eeb1:	e8 30 f7 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001eeb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001eeba:	83 c4 0c             	add    esp,0xc
c001eebd:	6a 05                	push   0x5
c001eebf:	56                   	push   esi
c001eec0:	53                   	push   ebx
c001eec1:	e8 20 f7 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001eec6:	83 c4 10             	add    esp,0x10
c001eec9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001eecd:	80 fa 14             	cmp    dl,0x14
c001eed0:	75 04                	jne    c001eed6 <IDE::detect()+0x288>
c001eed2:	3c eb                	cmp    al,0xeb
c001eed4:	eb 07                	jmp    c001eedd <IDE::detect()+0x28f>
c001eed6:	3c 96                	cmp    al,0x96
c001eed8:	75 b1                	jne    c001ee8b <IDE::detect()+0x23d>
c001eeda:	80 fa 69             	cmp    dl,0x69
c001eedd:	75 ac                	jne    c001ee8b <IDE::detect()+0x23d>
c001eedf:	68 a1 00 00 00       	push   0xa1
c001eee4:	6a 07                	push   0x7
c001eee6:	56                   	push   esi
c001eee7:	53                   	push   ebx
c001eee8:	e8 39 f6 ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eeed:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001eef4:	e8 bb 9a ff ff       	call   c00189b4 <milliTenthSleep(unsigned int)>
c001eef9:	83 c4 10             	add    esp,0x10
c001eefc:	b1 01                	mov    cl,0x1
c001eefe:	e9 6d fe ff ff       	jmp    c001ed70 <IDE::detect()+0x122>
c001ef03:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ef09:	5b                   	pop    ebx
c001ef0a:	5e                   	pop    esi
c001ef0b:	5f                   	pop    edi
c001ef0c:	5d                   	pop    ebp
c001ef0d:	c3                   	ret    

c001ef0e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ef0e:	55                   	push   ebp
c001ef0f:	57                   	push   edi
c001ef10:	56                   	push   esi
c001ef11:	53                   	push   ebx
c001ef12:	83 ec 1c             	sub    esp,0x1c
c001ef15:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ef19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ef1d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ef21:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ef25:	88 c3                	mov    bl,al
c001ef27:	84 c0                	test   al,al
c001ef29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef2d:	0f 84 81 00 00 00    	je     c001efb4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef33:	83 ec 0c             	sub    esp,0xc
c001ef36:	68 0b 69 02 c0       	push   0xc002690b
c001ef3b:	e8 bb dd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001ef40:	83 c4 10             	add    esp,0x10
c001ef43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef47:	3c 01                	cmp    al,0x1
c001ef49:	74 63                	je     c001efae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001ef4b:	3c 02                	cmp    al,0x2
c001ef4d:	75 53                	jne    c001efa2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ef4f:	d1 e6                	shl    esi,1
c001ef51:	09 ee                	or     esi,ebp
c001ef53:	50                   	push   eax
c001ef54:	89 f0                	mov    eax,esi
c001ef56:	6a 01                	push   0x1
c001ef58:	0f b6 f0             	movzx  esi,al
c001ef5b:	c1 e6 06             	shl    esi,0x6
c001ef5e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001ef66:	50                   	push   eax
c001ef67:	57                   	push   edi
c001ef68:	e8 79 f6 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001ef6d:	83 c4 10             	add    esp,0x10
c001ef70:	a8 01                	test   al,0x1
c001ef72:	74 02                	je     c001ef76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001ef74:	b3 07                	mov    bl,0x7
c001ef76:	a8 02                	test   al,0x2
c001ef78:	74 02                	je     c001ef7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001ef7a:	b3 03                	mov    bl,0x3
c001ef7c:	a8 04                	test   al,0x4
c001ef7e:	74 02                	je     c001ef82 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001ef80:	b3 14                	mov    bl,0x14
c001ef82:	a8 08                	test   al,0x8
c001ef84:	74 02                	je     c001ef88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001ef86:	b3 03                	mov    bl,0x3
c001ef88:	a8 10                	test   al,0x10
c001ef8a:	74 02                	je     c001ef8e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001ef8c:	b3 15                	mov    bl,0x15
c001ef8e:	a8 20                	test   al,0x20
c001ef90:	74 02                	je     c001ef94 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001ef92:	b3 03                	mov    bl,0x3
c001ef94:	a8 40                	test   al,0x40
c001ef96:	74 02                	je     c001ef9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001ef98:	b3 16                	mov    bl,0x16
c001ef9a:	84 c0                	test   al,al
c001ef9c:	79 16                	jns    c001efb4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef9e:	b3 0d                	mov    bl,0xd
c001efa0:	eb 12                	jmp    c001efb4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001efa2:	3c 03                	cmp    al,0x3
c001efa4:	74 0c                	je     c001efb2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001efa6:	3c 04                	cmp    al,0x4
c001efa8:	75 0a                	jne    c001efb4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001efaa:	b3 08                	mov    bl,0x8
c001efac:	eb 06                	jmp    c001efb4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001efae:	b3 13                	mov    bl,0x13
c001efb0:	eb 02                	jmp    c001efb4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001efb2:	b3 17                	mov    bl,0x17
c001efb4:	83 c4 1c             	add    esp,0x1c
c001efb7:	88 d8                	mov    al,bl
c001efb9:	5b                   	pop    ebx
c001efba:	5e                   	pop    esi
c001efbb:	5f                   	pop    edi
c001efbc:	5d                   	pop    ebp
c001efbd:	c3                   	ret    

c001efbe <IDE::polling(unsigned char, unsigned int)>:
c001efbe:	57                   	push   edi
c001efbf:	56                   	push   esi
c001efc0:	53                   	push   ebx
c001efc1:	bb 04 00 00 00       	mov    ebx,0x4
c001efc6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001efca:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001efcf:	52                   	push   edx
c001efd0:	6a 0c                	push   0xc
c001efd2:	56                   	push   esi
c001efd3:	57                   	push   edi
c001efd4:	e8 0d f6 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001efd9:	83 c4 10             	add    esp,0x10
c001efdc:	4b                   	dec    ebx
c001efdd:	75 f0                	jne    c001efcf <IDE::polling(unsigned char, unsigned int)+0x11>
c001efdf:	bb a0 86 01 00       	mov    ebx,0x186a0
c001efe4:	50                   	push   eax
c001efe5:	6a 0c                	push   0xc
c001efe7:	56                   	push   esi
c001efe8:	57                   	push   edi
c001efe9:	e8 f8 f5 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001efee:	83 c4 10             	add    esp,0x10
c001eff1:	a8 01                	test   al,0x1
c001eff3:	75 17                	jne    c001f00c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001eff5:	a8 20                	test   al,0x20
c001eff7:	75 0f                	jne    c001f008 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001eff9:	4b                   	dec    ebx
c001effa:	74 10                	je     c001f00c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001effc:	84 c0                	test   al,al
c001effe:	78 e4                	js     c001efe4 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f000:	a8 08                	test   al,0x8
c001f002:	74 e0                	je     c001efe4 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f004:	31 c0                	xor    eax,eax
c001f006:	eb 06                	jmp    c001f00e <IDE::polling(unsigned char, unsigned int)+0x50>
c001f008:	b0 01                	mov    al,0x1
c001f00a:	eb 02                	jmp    c001f00e <IDE::polling(unsigned char, unsigned int)+0x50>
c001f00c:	b0 02                	mov    al,0x2
c001f00e:	5b                   	pop    ebx
c001f00f:	5e                   	pop    esi
c001f010:	5f                   	pop    edi
c001f011:	c3                   	ret    

c001f012 <SATABus::close(int, int, void*)>:
c001f012:	31 c0                	xor    eax,eax
c001f014:	c3                   	ret    
c001f015:	90                   	nop

c001f016 <SATABus::detect()>:
c001f016:	c3                   	ret    
c001f017:	90                   	nop

c001f018 <SATABus::SATABus()>:
c001f018:	83 ec 0c             	sub    esp,0xc
c001f01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01f:	83 ec 08             	sub    esp,0x8
c001f022:	68 44 69 02 c0       	push   0xc0026944
c001f027:	50                   	push   eax
c001f028:	e8 ef f5 fe ff       	call   c000e61c <HardDiskController::HardDiskController(char const*)>
c001f02d:	83 c4 10             	add    esp,0x10
c001f030:	ba dc 69 02 c0       	mov    edx,0xc00269dc
c001f035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f039:	89 10                	mov    DWORD PTR [eax],edx
c001f03b:	83 ec 0c             	sub    esp,0xc
c001f03e:	6a 50                	push   0x50
c001f040:	e8 6c b1 fe ff       	call   c000a1b1 <Phys::allocateContiguousPages(int)>
c001f045:	83 c4 10             	add    esp,0x10
c001f048:	89 c2                	mov    edx,eax
c001f04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f054:	83 ec 0c             	sub    esp,0xc
c001f057:	6a 50                	push   0x50
c001f059:	e8 77 c9 fe ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c001f05e:	83 c4 10             	add    esp,0x10
c001f061:	89 c2                	mov    edx,eax
c001f063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f067:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f06d:	a1 90 80 02 c0       	mov    eax,ds:0xc0028090
c001f072:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f076:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f07c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f080:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f086:	83 ec 0c             	sub    esp,0xc
c001f089:	6a 03                	push   0x3
c001f08b:	6a 50                	push   0x50
c001f08d:	51                   	push   ecx
c001f08e:	52                   	push   edx
c001f08f:	50                   	push   eax
c001f090:	e8 dd d2 fe ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f095:	83 c4 20             	add    esp,0x20
c001f098:	90                   	nop
c001f099:	83 c4 0c             	add    esp,0xc
c001f09c:	c3                   	ret    
c001f09d:	90                   	nop

c001f09e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f09e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0a2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f0a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f0a8:	09 c2                	or     edx,eax
c001f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f0b4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f0b6:	31 c0                	xor    eax,eax
c001f0b8:	c1 e9 08             	shr    ecx,0x8
c001f0bb:	83 e1 0f             	and    ecx,0xf
c001f0be:	39 c8                	cmp    eax,ecx
c001f0c0:	74 0a                	je     c001f0cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f0c2:	f6 c2 01             	test   dl,0x1
c001f0c5:	74 08                	je     c001f0cf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f0c7:	d1 ea                	shr    edx,1
c001f0c9:	40                   	inc    eax
c001f0ca:	eb f2                	jmp    c001f0be <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f0cc:	83 c8 ff             	or     eax,0xffffffff
c001f0cf:	c3                   	ret    

c001f0d0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f0d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f0d4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f0d7:	89 c2                	mov    edx,eax
c001f0d9:	c1 ea 08             	shr    edx,0x8
c001f0dc:	83 e2 0f             	and    edx,0xf
c001f0df:	fe ca                	dec    dl
c001f0e1:	75 31                	jne    c001f114 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f0e3:	83 e0 0f             	and    eax,0xf
c001f0e6:	3c 03                	cmp    al,0x3
c001f0e8:	75 2a                	jne    c001f114 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f0ea:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f0ed:	b8 02 00 00 00       	mov    eax,0x2
c001f0f2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f0f8:	74 1c                	je     c001f116 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f0fa:	b8 04 00 00 00       	mov    eax,0x4
c001f0ff:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f105:	74 0f                	je     c001f116 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f107:	31 c0                	xor    eax,eax
c001f109:	83 fa 03             	cmp    edx,0x3
c001f10c:	0f 94 c0             	sete   al
c001f10f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f113:	c3                   	ret    
c001f114:	31 c0                	xor    eax,eax
c001f116:	c3                   	ret    
c001f117:	90                   	nop

c001f118 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f11c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f11f:	0f ba e2 0f          	bt     edx,0xf
c001f123:	72 f7                	jb     c001f11c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f125:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f128:	83 ca 10             	or     edx,0x10
c001f12b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f12e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f131:	83 ca 01             	or     edx,0x1
c001f134:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f137:	c3                   	ret    

c001f138 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f138:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f13c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f13f:	83 e2 fe             	and    edx,0xfffffffe
c001f142:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f145:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f148:	83 e2 ef             	and    edx,0xffffffef
c001f14b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f14e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f151:	0f ba e2 0e          	bt     edx,0xe
c001f155:	72 f7                	jb     c001f14e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f157:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f15a:	0f ba e2 0f          	bt     edx,0xf
c001f15e:	72 ee                	jb     c001f14e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f160:	c3                   	ret    
c001f161:	90                   	nop

c001f162 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f162:	55                   	push   ebp
c001f163:	57                   	push   edi
c001f164:	56                   	push   esi
c001f165:	53                   	push   ebx
c001f166:	83 ec 1c             	sub    esp,0x1c
c001f169:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f16d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f171:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f175:	53                   	push   ebx
c001f176:	89 fd                	mov    ebp,edi
c001f178:	56                   	push   esi
c001f179:	c1 e5 0a             	shl    ebp,0xa
c001f17c:	e8 b7 ff ff ff       	call   c001f138 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f181:	83 ec 0c             	sub    esp,0xc
c001f184:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f18a:	01 e8                	add    eax,ebp
c001f18c:	89 03                	mov    DWORD PTR [ebx],eax
c001f18e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f190:	68 00 04 00 00       	push   0x400
c001f195:	6a 00                	push   0x0
c001f197:	50                   	push   eax
c001f198:	e8 e7 14 fe ff       	call   c0000684 <memset>
c001f19d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f1a3:	89 fa                	mov    edx,edi
c001f1a5:	01 e8                	add    eax,ebp
c001f1a7:	c1 e7 0d             	shl    edi,0xd
c001f1aa:	89 03                	mov    DWORD PTR [ebx],eax
c001f1ac:	c1 e2 08             	shl    edx,0x8
c001f1af:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f1b6:	81 c2 00 80 00 00    	add    edx,0x8000
c001f1bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f1c0:	89 d0                	mov    eax,edx
c001f1c2:	83 c4 1c             	add    esp,0x1c
c001f1c5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f1cb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f1ce:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f1d1:	68 00 01 00 00       	push   0x100
c001f1d6:	6a 00                	push   0x0
c001f1d8:	50                   	push   eax
c001f1d9:	e8 a6 14 fe ff       	call   c0000684 <memset>
c001f1de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f1e2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f1e8:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f1ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f1f2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f1f5:	83 c4 10             	add    esp,0x10
c001f1f8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f1ff:	31 ff                	xor    edi,edi
c001f201:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f207:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f20d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f211:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f217:	83 c5 20             	add    ebp,0x20
c001f21a:	01 f8                	add    eax,edi
c001f21c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f21f:	52                   	push   edx
c001f220:	68 00 01 00 00       	push   0x100
c001f225:	6a 00                	push   0x0
c001f227:	50                   	push   eax
c001f228:	e8 57 14 fe ff       	call   c0000684 <memset>
c001f22d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f231:	83 c4 10             	add    esp,0x10
c001f234:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f23a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f241:	01 f8                	add    eax,edi
c001f243:	81 c7 00 01 00 00    	add    edi,0x100
c001f249:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f24c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f252:	75 b3                	jne    c001f207 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f254:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f258:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f25c:	83 c4 1c             	add    esp,0x1c
c001f25f:	5b                   	pop    ebx
c001f260:	5e                   	pop    esi
c001f261:	5f                   	pop    edi
c001f262:	5d                   	pop    ebp
c001f263:	e9 b0 fe ff ff       	jmp    c001f118 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f268 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f268:	55                   	push   ebp
c001f269:	57                   	push   edi
c001f26a:	56                   	push   esi
c001f26b:	53                   	push   ebx
c001f26c:	83 ec 0c             	sub    esp,0xc
c001f26f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f273:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001f27a:	74 2d                	je     c001f2a9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f27c:	83 ec 0c             	sub    esp,0xc
c001f27f:	68 68 69 02 c0       	push   0xc0026968
c001f284:	e8 e0 a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f289:	83 c4 10             	add    esp,0x10
c001f28c:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001f293:	75 14                	jne    c001f2a9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f295:	e4 60                	in     al,0x60
c001f297:	3c 1c                	cmp    al,0x1c
c001f299:	74 04                	je     c001f29f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f29b:	3c 5a                	cmp    al,0x5a
c001f29d:	75 f6                	jne    c001f295 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f29f:	e4 60                	in     al,0x60
c001f2a1:	3c 5a                	cmp    al,0x5a
c001f2a3:	74 fa                	je     c001f29f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f2a5:	3c 1c                	cmp    al,0x1c
c001f2a7:	74 f6                	je     c001f29f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f2a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f2ad:	31 db                	xor    ebx,ebx
c001f2af:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f2b2:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f2b8:	0f 84 78 01 00 00    	je     c001f436 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f2be:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f2c2:	89 d8                	mov    eax,ebx
c001f2c4:	c1 e0 07             	shl    eax,0x7
c001f2c7:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f2ce:	50                   	push   eax
c001f2cf:	50                   	push   eax
c001f2d0:	57                   	push   edi
c001f2d1:	56                   	push   esi
c001f2d2:	e8 f9 fd ff ff       	call   c001f0d0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f2d7:	83 c4 10             	add    esp,0x10
c001f2da:	83 f8 01             	cmp    eax,0x1
c001f2dd:	0f 85 19 01 00 00    	jne    c001f3fc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f2e3:	50                   	push   eax
c001f2e4:	53                   	push   ebx
c001f2e5:	57                   	push   edi
c001f2e6:	56                   	push   esi
c001f2e7:	e8 76 fe ff ff       	call   c001f162 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f2ec:	83 c4 10             	add    esp,0x10
c001f2ef:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001f2f6:	74 2d                	je     c001f325 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f2f8:	83 ec 0c             	sub    esp,0xc
c001f2fb:	68 7d 69 02 c0       	push   0xc002697d
c001f300:	e8 64 a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f305:	83 c4 10             	add    esp,0x10
c001f308:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001f30f:	75 14                	jne    c001f325 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f311:	e4 60                	in     al,0x60
c001f313:	3c 1c                	cmp    al,0x1c
c001f315:	74 04                	je     c001f31b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f317:	3c 5a                	cmp    al,0x5a
c001f319:	75 f6                	jne    c001f311 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f31b:	e4 60                	in     al,0x60
c001f31d:	3c 5a                	cmp    al,0x5a
c001f31f:	74 fa                	je     c001f31b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f321:	3c 1c                	cmp    al,0x1c
c001f323:	74 f6                	je     c001f31b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f325:	83 ec 0c             	sub    esp,0xc
c001f328:	68 7c 01 00 00       	push   0x17c
c001f32d:	e8 dd a6 fe ff       	call   c0009a0f <malloc>
c001f332:	89 04 24             	mov    DWORD PTR [esp],eax
c001f335:	89 c7                	mov    edi,eax
c001f337:	e8 14 10 00 00       	call   c0020350 <SATA::SATA()>
c001f33c:	83 c4 10             	add    esp,0x10
c001f33f:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001f346:	74 2d                	je     c001f375 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f348:	83 ec 0c             	sub    esp,0xc
c001f34b:	68 92 69 02 c0       	push   0xc0026992
c001f350:	e8 14 a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f355:	83 c4 10             	add    esp,0x10
c001f358:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001f35f:	75 14                	jne    c001f375 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f361:	e4 60                	in     al,0x60
c001f363:	3c 5a                	cmp    al,0x5a
c001f365:	74 04                	je     c001f36b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f367:	3c 1c                	cmp    al,0x1c
c001f369:	75 f6                	jne    c001f361 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f36b:	e4 60                	in     al,0x60
c001f36d:	3c 5a                	cmp    al,0x5a
c001f36f:	74 fa                	je     c001f36b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f371:	3c 1c                	cmp    al,0x1c
c001f373:	74 f6                	je     c001f36b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f375:	50                   	push   eax
c001f376:	50                   	push   eax
c001f377:	57                   	push   edi
c001f378:	56                   	push   esi
c001f379:	e8 f0 ee fe ff       	call   c000e26e <Device::addChild(Device*)>
c001f37e:	83 c4 10             	add    esp,0x10
c001f381:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001f388:	74 2d                	je     c001f3b7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f38a:	83 ec 0c             	sub    esp,0xc
c001f38d:	68 a7 69 02 c0       	push   0xc00269a7
c001f392:	e8 d2 a6 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f397:	83 c4 10             	add    esp,0x10
c001f39a:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001f3a1:	75 14                	jne    c001f3b7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f3a3:	e4 60                	in     al,0x60
c001f3a5:	3c 1c                	cmp    al,0x1c
c001f3a7:	74 04                	je     c001f3ad <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f3a9:	3c 5a                	cmp    al,0x5a
c001f3ab:	75 f6                	jne    c001f3a3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f3ad:	e4 60                	in     al,0x60
c001f3af:	3c 5a                	cmp    al,0x5a
c001f3b1:	74 fa                	je     c001f3ad <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f3b3:	3c 1c                	cmp    al,0x1c
c001f3b5:	74 f6                	je     c001f3ad <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f3b7:	8b 07                	mov    eax,DWORD PTR [edi]
c001f3b9:	56                   	push   esi
c001f3ba:	6a 00                	push   0x0
c001f3bc:	53                   	push   ebx
c001f3bd:	57                   	push   edi
c001f3be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f3c1:	83 c4 10             	add    esp,0x10
c001f3c4:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c001f3cb:	74 69                	je     c001f436 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f3cd:	83 ec 0c             	sub    esp,0xc
c001f3d0:	68 bc 69 02 c0       	push   0xc00269bc
c001f3d5:	e8 8f a6 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f3da:	83 c4 10             	add    esp,0x10
c001f3dd:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c001f3e4:	75 50                	jne    c001f436 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f3e6:	e4 60                	in     al,0x60
c001f3e8:	3c 1c                	cmp    al,0x1c
c001f3ea:	74 04                	je     c001f3f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f3ec:	3c 5a                	cmp    al,0x5a
c001f3ee:	75 f6                	jne    c001f3e6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f3f0:	e4 60                	in     al,0x60
c001f3f2:	3c 5a                	cmp    al,0x5a
c001f3f4:	74 fa                	je     c001f3f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f3f6:	3c 1c                	cmp    al,0x1c
c001f3f8:	74 f6                	je     c001f3f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f3fa:	eb 3a                	jmp    c001f436 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f3fc:	83 f8 04             	cmp    eax,0x4
c001f3ff:	75 35                	jne    c001f436 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f401:	50                   	push   eax
c001f402:	53                   	push   ebx
c001f403:	57                   	push   edi
c001f404:	56                   	push   esi
c001f405:	e8 58 fd ff ff       	call   c001f162 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f40a:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f411:	e8 f9 a5 fe ff       	call   c0009a0f <malloc>
c001f416:	89 04 24             	mov    DWORD PTR [esp],eax
c001f419:	89 c7                	mov    edi,eax
c001f41b:	e8 a6 17 00 00       	call   c0020bc6 <SATAPI::SATAPI()>
c001f420:	5a                   	pop    edx
c001f421:	59                   	pop    ecx
c001f422:	57                   	push   edi
c001f423:	56                   	push   esi
c001f424:	e8 45 ee fe ff       	call   c000e26e <Device::addChild(Device*)>
c001f429:	8b 07                	mov    eax,DWORD PTR [edi]
c001f42b:	56                   	push   esi
c001f42c:	6a 00                	push   0x0
c001f42e:	53                   	push   ebx
c001f42f:	57                   	push   edi
c001f430:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f433:	83 c4 20             	add    esp,0x20
c001f436:	d1 ed                	shr    ebp,1
c001f438:	43                   	inc    ebx
c001f439:	83 fb 20             	cmp    ebx,0x20
c001f43c:	0f 85 70 fe ff ff    	jne    c001f2b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f442:	83 c4 0c             	add    esp,0xc
c001f445:	5b                   	pop    ebx
c001f446:	5e                   	pop    esi
c001f447:	5f                   	pop    edi
c001f448:	5d                   	pop    ebp
c001f449:	c3                   	ret    

c001f44a <SATABus::open(int, int, void*)>:
c001f44a:	83 ec 14             	sub    esp,0x14
c001f44d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f451:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001f457:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f45d:	52                   	push   edx
c001f45e:	50                   	push   eax
c001f45f:	e8 04 fe ff ff       	call   c001f268 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f464:	31 c0                	xor    eax,eax
c001f466:	83 c4 1c             	add    esp,0x1c
c001f469:	c3                   	ret    

c001f46a <ATA::close(int, int, void*)>:
c001f46a:	83 ec 0c             	sub    esp,0xc
c001f46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f471:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f477:	85 c0                	test   eax,eax
c001f479:	74 0c                	je     c001f487 <ATA::close(int, int, void*)+0x1d>
c001f47b:	83 ec 0c             	sub    esp,0xc
c001f47e:	8b 10                	mov    edx,DWORD PTR [eax]
c001f480:	50                   	push   eax
c001f481:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f484:	83 c4 10             	add    esp,0x10
c001f487:	31 c0                	xor    eax,eax
c001f489:	83 c4 0c             	add    esp,0xc
c001f48c:	c3                   	ret    
c001f48d:	90                   	nop

c001f48e <ATA::powerSaving(PowerSavingLevel)>:
c001f48e:	c3                   	ret    
c001f48f:	90                   	nop

c001f490 <ATA::ATA()>:
c001f490:	83 ec 0c             	sub    esp,0xc
c001f493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f497:	83 ec 04             	sub    esp,0x4
c001f49a:	68 00 02 00 00       	push   0x200
c001f49f:	68 4b 6b 02 c0       	push   0xc0026b4b
c001f4a4:	50                   	push   eax
c001f4a5:	e8 fc f1 fe ff       	call   c000e6a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f4aa:	83 c4 10             	add    esp,0x10
c001f4ad:	ba 54 6a 02 c0       	mov    edx,0xc0026a54
c001f4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b6:	89 10                	mov    DWORD PTR [eax],edx
c001f4b8:	90                   	nop
c001f4b9:	83 c4 0c             	add    esp,0xc
c001f4bc:	c3                   	ret    
c001f4bd:	90                   	nop

c001f4be <ATA::flush(bool)>:
c001f4be:	53                   	push   ebx
c001f4bf:	83 ec 08             	sub    esp,0x8
c001f4c2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f4c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f4cb:	19 c0                	sbb    eax,eax
c001f4cd:	83 e0 fd             	and    eax,0xfffffffd
c001f4d0:	05 ea 00 00 00       	add    eax,0xea
c001f4d5:	50                   	push   eax
c001f4d6:	6a 07                	push   0x7
c001f4d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4df:	50                   	push   eax
c001f4e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4e6:	e8 3b f0 ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4eb:	83 c4 0c             	add    esp,0xc
c001f4ee:	6a 00                	push   0x0
c001f4f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4f7:	50                   	push   eax
c001f4f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4fe:	e8 bb fa ff ff       	call   c001efbe <IDE::polling(unsigned char, unsigned int)>
c001f503:	83 c4 18             	add    esp,0x18
c001f506:	5b                   	pop    ebx
c001f507:	c3                   	ret    

c001f508 <ATA::readyForCommand()>:
c001f508:	56                   	push   esi
c001f509:	53                   	push   ebx
c001f50a:	53                   	push   ebx
c001f50b:	31 db                	xor    ebx,ebx
c001f50d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f511:	51                   	push   ecx
c001f512:	6a 0c                	push   0xc
c001f514:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f51b:	50                   	push   eax
c001f51c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f522:	e8 bf f0 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001f527:	83 c4 10             	add    esp,0x10
c001f52a:	a8 88                	test   al,0x88
c001f52c:	74 1f                	je     c001f54d <ATA::readyForCommand()+0x45>
c001f52e:	43                   	inc    ebx
c001f52f:	83 fb 63             	cmp    ebx,0x63
c001f532:	7e dd                	jle    c001f511 <ATA::readyForCommand()+0x9>
c001f534:	83 ec 0c             	sub    esp,0xc
c001f537:	6a 0a                	push   0xa
c001f539:	e8 76 94 ff ff       	call   c00189b4 <milliTenthSleep(unsigned int)>
c001f53e:	83 c4 10             	add    esp,0x10
c001f541:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f547:	75 c8                	jne    c001f511 <ATA::readyForCommand()+0x9>
c001f549:	31 c0                	xor    eax,eax
c001f54b:	eb 02                	jmp    c001f54f <ATA::readyForCommand()+0x47>
c001f54d:	b0 01                	mov    al,0x1
c001f54f:	5a                   	pop    edx
c001f550:	5b                   	pop    ebx
c001f551:	5e                   	pop    esi
c001f552:	c3                   	ret    
c001f553:	90                   	nop

c001f554 <ATA::access(unsigned long long, int, void*, bool)>:
c001f554:	55                   	push   ebp
c001f555:	57                   	push   edi
c001f556:	56                   	push   esi
c001f557:	53                   	push   ebx
c001f558:	83 ec 38             	sub    esp,0x38
c001f55b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f55f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f563:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f567:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f56b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f56f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f573:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f577:	68 00 6a 02 c0       	push   0xc0026a00
c001f57c:	e8 7a d7 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f581:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f587:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f58b:	83 c4 10             	add    esp,0x10
c001f58e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f594:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f598:	c1 e0 06             	shl    eax,0x6
c001f59b:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f5a3:	74 5d                	je     c001f602 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f5a5:	89 fa                	mov    edx,edi
c001f5a7:	89 f0                	mov    eax,esi
c001f5a9:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f5ad:	c1 ea 1c             	shr    edx,0x1c
c001f5b0:	89 d1                	mov    ecx,edx
c001f5b2:	09 c1                	or     ecx,eax
c001f5b4:	74 25                	je     c001f5db <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f5b6:	31 ed                	xor    ebp,ebp
c001f5b8:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f5bf:	89 fa                	mov    edx,edi
c001f5c1:	89 f0                	mov    eax,esi
c001f5c3:	0f ad d0             	shrd   eax,edx,cl
c001f5c6:	d3 ea                	shr    edx,cl
c001f5c8:	f6 c1 20             	test   cl,0x20
c001f5cb:	74 02                	je     c001f5cf <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f5cd:	89 d0                	mov    eax,edx
c001f5cf:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f5d3:	45                   	inc    ebp
c001f5d4:	83 fd 06             	cmp    ebp,0x6
c001f5d7:	75 df                	jne    c001f5b8 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f5d9:	eb 76                	jmp    c001f651 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f5db:	89 f0                	mov    eax,esi
c001f5dd:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f5e2:	89 fa                	mov    edx,edi
c001f5e4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f5eb:	0f ac d0 10          	shrd   eax,edx,0x10
c001f5ef:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f5f4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f5f8:	c1 ee 18             	shr    esi,0x18
c001f5fb:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f600:	eb 56                	jmp    c001f658 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f602:	6a 00                	push   0x0
c001f604:	6a 3f                	push   0x3f
c001f606:	57                   	push   edi
c001f607:	56                   	push   esi
c001f608:	e8 37 32 00 00       	call   c0022844 <__umoddi3>
c001f60d:	83 c4 10             	add    esp,0x10
c001f610:	40                   	inc    eax
c001f611:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f615:	6a 00                	push   0x0
c001f617:	68 f0 03 00 00       	push   0x3f0
c001f61c:	57                   	push   edi
c001f61d:	56                   	push   esi
c001f61e:	e8 21 31 00 00       	call   c0022744 <__udivdi3>
c001f623:	83 c4 10             	add    esp,0x10
c001f626:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f62b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f632:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f637:	6a 00                	push   0x0
c001f639:	6a 3f                	push   0x3f
c001f63b:	57                   	push   edi
c001f63c:	56                   	push   esi
c001f63d:	e8 02 31 00 00       	call   c0022744 <__udivdi3>
c001f642:	83 c4 10             	add    esp,0x10
c001f645:	89 c6                	mov    esi,eax
c001f647:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f64c:	83 e6 0f             	and    esi,0xf
c001f64f:	eb 07                	jmp    c001f658 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f651:	31 f6                	xor    esi,esi
c001f653:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f658:	bf 01 00 00 00       	mov    edi,0x1
c001f65d:	50                   	push   eax
c001f65e:	6a 00                	push   0x0
c001f660:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f667:	50                   	push   eax
c001f668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f66c:	e8 bd f0 ff ff       	call   c001e72e <IDE::enableIRQs(unsigned char, bool)>
c001f671:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f674:	e8 8f fe ff ff       	call   c001f508 <ATA::readyForCommand()>
c001f679:	83 c4 10             	add    esp,0x10
c001f67c:	84 c0                	test   al,al
c001f67e:	0f 84 bc 02 00 00    	je     c001f940 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f684:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f68a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f690:	c1 e0 04             	shl    eax,0x4
c001f693:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f69a:	09 c6                	or     esi,eax
c001f69c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f6a1:	75 05                	jne    c001f6a8 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f6a3:	83 ce a0             	or     esi,0xffffffa0
c001f6a6:	eb 03                	jmp    c001f6ab <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f6a8:	83 ce e0             	or     esi,0xffffffe0
c001f6ab:	89 f0                	mov    eax,esi
c001f6ad:	0f b6 f0             	movzx  esi,al
c001f6b0:	56                   	push   esi
c001f6b1:	6a 06                	push   0x6
c001f6b3:	51                   	push   ecx
c001f6b4:	52                   	push   edx
c001f6b5:	e8 6c ee ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6ba:	83 c4 10             	add    esp,0x10
c001f6bd:	6a 00                	push   0x0
c001f6bf:	6a 01                	push   0x1
c001f6c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6c8:	50                   	push   eax
c001f6c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6cf:	e8 52 ee ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6d4:	83 c4 10             	add    esp,0x10
c001f6d7:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f6dc:	75 6e                	jne    c001f74c <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f6de:	6a 00                	push   0x0
c001f6e0:	6a 08                	push   0x8
c001f6e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6e9:	50                   	push   eax
c001f6ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6f0:	e8 31 ee ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6f5:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f6fa:	50                   	push   eax
c001f6fb:	6a 09                	push   0x9
c001f6fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f704:	50                   	push   eax
c001f705:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f70b:	e8 16 ee ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f710:	83 c4 20             	add    esp,0x20
c001f713:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f718:	50                   	push   eax
c001f719:	6a 0a                	push   0xa
c001f71b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f722:	50                   	push   eax
c001f723:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f729:	e8 f8 ed ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f72e:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f733:	50                   	push   eax
c001f734:	6a 0b                	push   0xb
c001f736:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f73d:	50                   	push   eax
c001f73e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f744:	e8 dd ed ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f749:	83 c4 20             	add    esp,0x20
c001f74c:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f751:	50                   	push   eax
c001f752:	6a 02                	push   0x2
c001f754:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f75b:	50                   	push   eax
c001f75c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f762:	e8 bf ed ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f767:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f76c:	50                   	push   eax
c001f76d:	6a 03                	push   0x3
c001f76f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f776:	50                   	push   eax
c001f777:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f77d:	e8 a4 ed ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f782:	83 c4 20             	add    esp,0x20
c001f785:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f78a:	50                   	push   eax
c001f78b:	6a 04                	push   0x4
c001f78d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f794:	50                   	push   eax
c001f795:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f79b:	e8 86 ed ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7a0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f7a5:	50                   	push   eax
c001f7a6:	6a 05                	push   0x5
c001f7a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7af:	50                   	push   eax
c001f7b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7b6:	e8 6b ed ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7bb:	83 c4 20             	add    esp,0x20
c001f7be:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f7c3:	0f 94 c0             	sete   al
c001f7c6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f7cb:	74 09                	je     c001f7d6 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f7cd:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f7d4:	eb 07                	jmp    c001f7dd <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f7d6:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f7dd:	0f b6 c0             	movzx  eax,al
c001f7e0:	50                   	push   eax
c001f7e1:	6a 07                	push   0x7
c001f7e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7ea:	50                   	push   eax
c001f7eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7f1:	e8 30 ed ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7f6:	c7 04 24 0d 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a0d
c001f7fd:	e8 f9 d4 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f802:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f806:	83 c4 10             	add    esp,0x10
c001f809:	85 f6                	test   esi,esi
c001f80b:	0f 84 f7 00 00 00    	je     c001f908 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f811:	83 ec 0c             	sub    esp,0xc
c001f814:	68 10 6a 02 c0       	push   0xc0026a10
c001f819:	e8 dd d4 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f81e:	83 c4 0c             	add    esp,0xc
c001f821:	6a 01                	push   0x1
c001f823:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f82a:	50                   	push   eax
c001f82b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f831:	e8 88 f7 ff ff       	call   c001efbe <IDE::polling(unsigned char, unsigned int)>
c001f836:	c7 04 24 13 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a13
c001f83d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f841:	e8 b5 d4 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f846:	83 c4 10             	add    esp,0x10
c001f849:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f84d:	84 c0                	test   al,al
c001f84f:	74 2b                	je     c001f87c <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f851:	0f b6 f8             	movzx  edi,al
c001f854:	57                   	push   edi
c001f855:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f85c:	50                   	push   eax
c001f85d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f864:	50                   	push   eax
c001f865:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f86b:	e8 9e f6 ff ff       	call   c001ef0e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f870:	c7 04 24 16 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a16
c001f877:	e9 bc 00 00 00       	jmp    c001f938 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f87c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f881:	74 50                	je     c001f8d3 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f883:	83 ec 0c             	sub    esp,0xc
c001f886:	31 ed                	xor    ebp,ebp
c001f888:	68 21 6a 02 c0       	push   0xc0026a21
c001f88d:	e8 69 d4 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f892:	83 c4 10             	add    esp,0x10
c001f895:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f899:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f89d:	50                   	push   eax
c001f89e:	50                   	push   eax
c001f89f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8a6:	50                   	push   eax
c001f8a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8ad:	e8 62 ec ff ff       	call   c001e514 <IDE::getBase(unsigned char)>
c001f8b2:	89 c2                	mov    edx,eax
c001f8b4:	89 f8                	mov    eax,edi
c001f8b6:	66 ef                	out    dx,ax
c001f8b8:	45                   	inc    ebp
c001f8b9:	83 c4 10             	add    esp,0x10
c001f8bc:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f8c2:	75 d1                	jne    c001f895 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f8c4:	83 ec 0c             	sub    esp,0xc
c001f8c7:	68 24 6a 02 c0       	push   0xc0026a24
c001f8cc:	e8 2a d4 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f8d1:	eb 24                	jmp    c001f8f7 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f8d3:	51                   	push   ecx
c001f8d4:	51                   	push   ecx
c001f8d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8dc:	50                   	push   eax
c001f8dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8e3:	e8 2c ec ff ff       	call   c001e514 <IDE::getBase(unsigned char)>
c001f8e8:	b9 00 01 00 00       	mov    ecx,0x100
c001f8ed:	89 c2                	mov    edx,eax
c001f8ef:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f8f3:	fc                   	cld    
c001f8f4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f8f7:	83 c4 10             	add    esp,0x10
c001f8fa:	4e                   	dec    esi
c001f8fb:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f903:	e9 01 ff ff ff       	jmp    c001f809 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f908:	31 ff                	xor    edi,edi
c001f90a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f90f:	74 2f                	je     c001f940 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f911:	83 ec 0c             	sub    esp,0xc
c001f914:	68 27 6a 02 c0       	push   0xc0026a27
c001f919:	e8 dd d3 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f91e:	58                   	pop    eax
c001f91f:	31 c0                	xor    eax,eax
c001f921:	5a                   	pop    edx
c001f922:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001f927:	0f 94 c0             	sete   al
c001f92a:	50                   	push   eax
c001f92b:	53                   	push   ebx
c001f92c:	e8 8d fb ff ff       	call   c001f4be <ATA::flush(bool)>
c001f931:	c7 04 24 2a 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a2a
c001f938:	e8 be d3 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f93d:	83 c4 10             	add    esp,0x10
c001f940:	83 c4 2c             	add    esp,0x2c
c001f943:	89 f8                	mov    eax,edi
c001f945:	5b                   	pop    ebx
c001f946:	5e                   	pop    esi
c001f947:	5f                   	pop    edi
c001f948:	5d                   	pop    ebp
c001f949:	c3                   	ret    

c001f94a <ATA::read(unsigned long long, int, void*)>:
c001f94a:	57                   	push   edi
c001f94b:	b8 04 00 00 00       	mov    eax,0x4
c001f950:	56                   	push   esi
c001f951:	53                   	push   ebx
c001f952:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f956:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f95a:	8d 7a ff             	lea    edi,[edx-0x1]
c001f95d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f961:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f965:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f96b:	77 25                	ja     c001f992 <ATA::read(unsigned long long, int, void*)+0x48>
c001f96d:	b8 06 00 00 00       	mov    eax,0x6
c001f972:	85 f6                	test   esi,esi
c001f974:	74 1c                	je     c001f992 <ATA::read(unsigned long long, int, void*)+0x48>
c001f976:	50                   	push   eax
c001f977:	50                   	push   eax
c001f978:	6a 00                	push   0x0
c001f97a:	56                   	push   esi
c001f97b:	52                   	push   edx
c001f97c:	53                   	push   ebx
c001f97d:	51                   	push   ecx
c001f97e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f982:	e8 cd fb ff ff       	call   c001f554 <ATA::access(unsigned long long, int, void*, bool)>
c001f987:	83 c4 20             	add    esp,0x20
c001f98a:	85 c0                	test   eax,eax
c001f98c:	0f 95 c0             	setne  al
c001f98f:	0f b6 c0             	movzx  eax,al
c001f992:	5b                   	pop    ebx
c001f993:	5e                   	pop    esi
c001f994:	5f                   	pop    edi
c001f995:	c3                   	ret    

c001f996 <ATA::write(unsigned long long, int, void*)>:
c001f996:	55                   	push   ebp
c001f997:	57                   	push   edi
c001f998:	56                   	push   esi
c001f999:	53                   	push   ebx
c001f99a:	83 ec 18             	sub    esp,0x18
c001f99d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f9a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f9a5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001f9a9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f9ad:	68 2d 6a 02 c0       	push   0xc0026a2d
c001f9b2:	e8 44 d3 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f9b7:	8d 53 ff             	lea    edx,[ebx-0x1]
c001f9ba:	83 c4 10             	add    esp,0x10
c001f9bd:	b8 04 00 00 00       	mov    eax,0x4
c001f9c2:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001f9c8:	77 25                	ja     c001f9ef <ATA::write(unsigned long long, int, void*)+0x59>
c001f9ca:	b8 06 00 00 00       	mov    eax,0x6
c001f9cf:	85 f6                	test   esi,esi
c001f9d1:	74 1c                	je     c001f9ef <ATA::write(unsigned long long, int, void*)+0x59>
c001f9d3:	50                   	push   eax
c001f9d4:	50                   	push   eax
c001f9d5:	6a 01                	push   0x1
c001f9d7:	56                   	push   esi
c001f9d8:	53                   	push   ebx
c001f9d9:	55                   	push   ebp
c001f9da:	57                   	push   edi
c001f9db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f9df:	e8 70 fb ff ff       	call   c001f554 <ATA::access(unsigned long long, int, void*, bool)>
c001f9e4:	83 c4 20             	add    esp,0x20
c001f9e7:	85 c0                	test   eax,eax
c001f9e9:	0f 95 c0             	setne  al
c001f9ec:	0f b6 c0             	movzx  eax,al
c001f9ef:	83 c4 0c             	add    esp,0xc
c001f9f2:	5b                   	pop    ebx
c001f9f3:	5e                   	pop    esi
c001f9f4:	5f                   	pop    edi
c001f9f5:	5d                   	pop    ebp
c001f9f6:	c3                   	ret    
c001f9f7:	90                   	nop

c001f9f8 <ATA::detectCHS()>:
c001f9f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9fc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fa02:	c1 e0 06             	shl    eax,0x6
c001fa05:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fa0b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fa15:	c7 44 24 04 39 6a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026a39
c001fa1d:	e9 e5 4f ff ff       	jmp    c0014a07 <Krnl::panic(char const*)>

c001fa22 <ATA::open(int, int, void*)>:
c001fa22:	53                   	push   ebx
c001fa23:	83 ec 08             	sub    esp,0x8
c001fa26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fa2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fa32:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fa38:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fa3e:	c1 e0 06             	shl    eax,0x6
c001fa41:	01 d0                	add    eax,edx
c001fa43:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fa4a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fa50:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fa57:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fa61:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fa67:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fa6e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fa75:	75 0c                	jne    c001fa83 <ATA::open(int, int, void*)+0x61>
c001fa77:	83 ec 0c             	sub    esp,0xc
c001fa7a:	53                   	push   ebx
c001fa7b:	e8 78 ff ff ff       	call   c001f9f8 <ATA::detectCHS()>
c001fa80:	83 c4 10             	add    esp,0x10
c001fa83:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fa89:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fa8f:	c1 e0 06             	shl    eax,0x6
c001fa92:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fa99:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001faa3:	d1 e8                	shr    eax,1
c001faa5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001faab:	6a 04                	push   0x4
c001faad:	6a 0c                	push   0xc
c001faaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fab6:	50                   	push   eax
c001fab7:	52                   	push   edx
c001fab8:	e8 69 ea ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fabd:	90                   	nop
c001fabe:	90                   	nop
c001fabf:	6a 00                	push   0x0
c001fac1:	6a 0c                	push   0xc
c001fac3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001faca:	50                   	push   eax
c001facb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fad1:	e8 50 ea ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fad6:	83 c4 14             	add    esp,0x14
c001fad9:	53                   	push   ebx
c001fada:	e8 2f ec fe ff       	call   c000e70e <PhysicalDisk::startCache()>
c001fadf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fae2:	e8 a7 0c ff ff       	call   c001078e <createPartitionsForDisk(PhysicalDisk*)>
c001fae7:	31 c0                	xor    eax,eax
c001fae9:	83 c4 18             	add    esp,0x18
c001faec:	5b                   	pop    ebx
c001faed:	c3                   	ret    

c001faee <ATAPI::write(unsigned long long, int, void*)>:
c001faee:	b8 03 00 00 00       	mov    eax,0x3
c001faf3:	c3                   	ret    

c001faf4 <ATAPI::close(int, int, void*)>:
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fb01:	85 c0                	test   eax,eax
c001fb03:	74 0c                	je     c001fb11 <ATAPI::close(int, int, void*)+0x1d>
c001fb05:	83 ec 0c             	sub    esp,0xc
c001fb08:	8b 10                	mov    edx,DWORD PTR [eax]
c001fb0a:	50                   	push   eax
c001fb0b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fb0e:	83 c4 10             	add    esp,0x10
c001fb11:	31 c0                	xor    eax,eax
c001fb13:	83 c4 0c             	add    esp,0xc
c001fb16:	c3                   	ret    
c001fb17:	90                   	nop

c001fb18 <ATAPI::ATAPI()>:
c001fb18:	83 ec 0c             	sub    esp,0xc
c001fb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1f:	83 ec 04             	sub    esp,0x4
c001fb22:	68 00 08 00 00       	push   0x800
c001fb27:	68 25 6d 02 c0       	push   0xc0026d25
c001fb2c:	50                   	push   eax
c001fb2d:	e8 74 eb fe ff       	call   c000e6a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fb32:	83 c4 10             	add    esp,0x10
c001fb35:	ba b8 6a 02 c0       	mov    edx,0xc0026ab8
c001fb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3e:	89 10                	mov    DWORD PTR [eax],edx
c001fb40:	90                   	nop
c001fb41:	83 c4 0c             	add    esp,0xc
c001fb44:	c3                   	ret    
c001fb45:	90                   	nop

c001fb46 <ATAPI::readyForCommand()>:
c001fb46:	56                   	push   esi
c001fb47:	53                   	push   ebx
c001fb48:	53                   	push   ebx
c001fb49:	31 db                	xor    ebx,ebx
c001fb4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb4f:	51                   	push   ecx
c001fb50:	6a 0c                	push   0xc
c001fb52:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fb59:	50                   	push   eax
c001fb5a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fb60:	e8 81 ea ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001fb65:	83 c4 10             	add    esp,0x10
c001fb68:	a8 88                	test   al,0x88
c001fb6a:	74 25                	je     c001fb91 <ATAPI::readyForCommand()+0x4b>
c001fb6c:	43                   	inc    ebx
c001fb6d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fb73:	7e da                	jle    c001fb4f <ATAPI::readyForCommand()+0x9>
c001fb75:	83 ec 0c             	sub    esp,0xc
c001fb78:	68 5e 01 00 00       	push   0x15e
c001fb7d:	e8 32 8e ff ff       	call   c00189b4 <milliTenthSleep(unsigned int)>
c001fb82:	83 c4 10             	add    esp,0x10
c001fb85:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fb8b:	75 c2                	jne    c001fb4f <ATAPI::readyForCommand()+0x9>
c001fb8d:	31 c0                	xor    eax,eax
c001fb8f:	eb 02                	jmp    c001fb93 <ATAPI::readyForCommand()+0x4d>
c001fb91:	b0 01                	mov    al,0x1
c001fb93:	5a                   	pop    edx
c001fb94:	5b                   	pop    ebx
c001fb95:	5e                   	pop    esi
c001fb96:	c3                   	ret    
c001fb97:	90                   	nop

c001fb98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fb98:	55                   	push   ebp
c001fb99:	57                   	push   edi
c001fb9a:	56                   	push   esi
c001fb9b:	53                   	push   ebx
c001fb9c:	83 ec 20             	sub    esp,0x20
c001fb9f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fba3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fba7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fbab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fbaf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fbb3:	6a 01                	push   0x1
c001fbb5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbbc:	50                   	push   eax
c001fbbd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbc3:	e8 66 eb ff ff       	call   c001e72e <IDE::enableIRQs(unsigned char, bool)>
c001fbc8:	5e                   	pop    esi
c001fbc9:	58                   	pop    eax
c001fbca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbd1:	50                   	push   eax
c001fbd2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbd8:	e8 23 e9 ff ff       	call   c001e500 <IDE::prepareInterrupt(unsigned char)>
c001fbdd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fbe0:	e8 61 ff ff ff       	call   c001fb46 <ATAPI::readyForCommand()>
c001fbe5:	83 c4 10             	add    esp,0x10
c001fbe8:	84 c0                	test   al,al
c001fbea:	75 0a                	jne    c001fbf6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fbec:	bb 01 00 00 00       	mov    ebx,0x1
c001fbf1:	e9 57 02 00 00       	jmp    c001fe4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fbf6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fbfc:	c1 e0 04             	shl    eax,0x4
c001fbff:	0f b6 c0             	movzx  eax,al
c001fc02:	50                   	push   eax
c001fc03:	6a 06                	push   0x6
c001fc05:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc0c:	50                   	push   eax
c001fc0d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc13:	e8 0e e9 ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc18:	6a 00                	push   0x0
c001fc1a:	6a 01                	push   0x1
c001fc1c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc23:	50                   	push   eax
c001fc24:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc2a:	e8 f7 e8 ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc2f:	83 c4 20             	add    esp,0x20
c001fc32:	0f b6 c3             	movzx  eax,bl
c001fc35:	0f b6 df             	movzx  ebx,bh
c001fc38:	50                   	push   eax
c001fc39:	6a 04                	push   0x4
c001fc3b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc42:	50                   	push   eax
c001fc43:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc49:	e8 d8 e8 ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc4e:	53                   	push   ebx
c001fc4f:	6a 05                	push   0x5
c001fc51:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc58:	50                   	push   eax
c001fc59:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc5f:	e8 c2 e8 ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc64:	83 c4 20             	add    esp,0x20
c001fc67:	68 a0 00 00 00       	push   0xa0
c001fc6c:	6a 07                	push   0x7
c001fc6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc75:	50                   	push   eax
c001fc76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc7c:	e8 a5 e8 ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc81:	83 c4 0c             	add    esp,0xc
c001fc84:	6a 01                	push   0x1
c001fc86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc8d:	50                   	push   eax
c001fc8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc94:	e8 25 f3 ff ff       	call   c001efbe <IDE::polling(unsigned char, unsigned int)>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fca2:	84 c0                	test   al,al
c001fca4:	74 23                	je     c001fcc9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fca6:	0f b6 d8             	movzx  ebx,al
c001fca9:	0f b6 d2             	movzx  edx,dl
c001fcac:	53                   	push   ebx
c001fcad:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fcb4:	50                   	push   eax
c001fcb5:	52                   	push   edx
c001fcb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcbc:	e8 4d f2 ff ff       	call   c001ef0e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fcc1:	83 c4 10             	add    esp,0x10
c001fcc4:	e9 84 01 00 00       	jmp    c001fe4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fcc9:	0f b6 d2             	movzx  edx,dl
c001fccc:	53                   	push   ebx
c001fccd:	53                   	push   ebx
c001fcce:	52                   	push   edx
c001fccf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcd5:	e8 3a e8 ff ff       	call   c001e514 <IDE::getBase(unsigned char)>
c001fcda:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fcde:	b9 06 00 00 00       	mov    ecx,0x6
c001fce3:	89 c2                	mov    edx,eax
c001fce5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fce8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fcec:	83 c4 10             	add    esp,0x10
c001fcef:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fcf5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fcfc:	85 db                	test   ebx,ebx
c001fcfe:	0f 84 ec 00 00 00    	je     c001fdf0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fd04:	51                   	push   ecx
c001fd05:	51                   	push   ecx
c001fd06:	52                   	push   edx
c001fd07:	50                   	push   eax
c001fd08:	e8 87 e9 ff ff       	call   c001e694 <IDE::waitInterrupt(unsigned char)>
c001fd0d:	83 c4 10             	add    esp,0x10
c001fd10:	84 c0                	test   al,al
c001fd12:	0f 84 d4 fe ff ff    	je     c001fbec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fd18:	56                   	push   esi
c001fd19:	56                   	push   esi
c001fd1a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd21:	50                   	push   eax
c001fd22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd28:	e8 d3 e7 ff ff       	call   c001e500 <IDE::prepareInterrupt(unsigned char)>
c001fd2d:	83 c4 0c             	add    esp,0xc
c001fd30:	6a 04                	push   0x4
c001fd32:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd39:	50                   	push   eax
c001fd3a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd40:	e8 a1 e8 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001fd45:	83 c4 0c             	add    esp,0xc
c001fd48:	89 c6                	mov    esi,eax
c001fd4a:	6a 05                	push   0x5
c001fd4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd53:	50                   	push   eax
c001fd54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd5a:	e8 87 e8 ff ff       	call   c001e5e6 <IDE::read(unsigned char, unsigned char)>
c001fd5f:	89 f1                	mov    ecx,esi
c001fd61:	0f b6 c0             	movzx  eax,al
c001fd64:	0f b6 f1             	movzx  esi,cl
c001fd67:	c1 e0 08             	shl    eax,0x8
c001fd6a:	09 c6                	or     esi,eax
c001fd6c:	d1 fe                	sar    esi,1
c001fd6e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fd72:	83 c4 10             	add    esp,0x10
c001fd75:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fd7a:	74 41                	je     c001fdbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fd7c:	31 c9                	xor    ecx,ecx
c001fd7e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd84:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fd8b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fd8f:	75 0a                	jne    c001fd9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fd91:	01 c9                	add    ecx,ecx
c001fd93:	01 cd                	add    ebp,ecx
c001fd95:	4b                   	dec    ebx
c001fd96:	e9 54 ff ff ff       	jmp    c001fcef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fd9b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fda0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fda4:	51                   	push   ecx
c001fda5:	51                   	push   ecx
c001fda6:	52                   	push   edx
c001fda7:	50                   	push   eax
c001fda8:	e8 67 e7 ff ff       	call   c001e514 <IDE::getBase(unsigned char)>
c001fdad:	89 c2                	mov    edx,eax
c001fdaf:	89 f0                	mov    eax,esi
c001fdb1:	66 ef                	out    dx,ax
c001fdb3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fdb7:	83 c4 10             	add    esp,0x10
c001fdba:	41                   	inc    ecx
c001fdbb:	eb c1                	jmp    c001fd7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fdbd:	31 f6                	xor    esi,esi
c001fdbf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fdc5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fdcc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fdd0:	75 06                	jne    c001fdd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001fdd2:	01 f6                	add    esi,esi
c001fdd4:	01 f5                	add    ebp,esi
c001fdd6:	eb bd                	jmp    c001fd95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001fdd8:	51                   	push   ecx
c001fdd9:	51                   	push   ecx
c001fdda:	52                   	push   edx
c001fddb:	50                   	push   eax
c001fddc:	e8 33 e7 ff ff       	call   c001e514 <IDE::getBase(unsigned char)>
c001fde1:	89 c2                	mov    edx,eax
c001fde3:	66 ed                	in     ax,dx
c001fde5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fdea:	83 c4 10             	add    esp,0x10
c001fded:	46                   	inc    esi
c001fdee:	eb cf                	jmp    c001fdbf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001fdf0:	51                   	push   ecx
c001fdf1:	51                   	push   ecx
c001fdf2:	52                   	push   edx
c001fdf3:	50                   	push   eax
c001fdf4:	e8 9b e8 ff ff       	call   c001e694 <IDE::waitInterrupt(unsigned char)>
c001fdf9:	83 c4 10             	add    esp,0x10
c001fdfc:	84 c0                	test   al,al
c001fdfe:	0f 84 e8 fd ff ff    	je     c001fbec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fe04:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fe09:	52                   	push   edx
c001fe0a:	52                   	push   edx
c001fe0b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe12:	50                   	push   eax
c001fe13:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe19:	e8 e2 e6 ff ff       	call   c001e500 <IDE::prepareInterrupt(unsigned char)>
c001fe1e:	83 c4 10             	add    esp,0x10
c001fe21:	50                   	push   eax
c001fe22:	50                   	push   eax
c001fe23:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe2a:	50                   	push   eax
c001fe2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe31:	e8 de e6 ff ff       	call   c001e514 <IDE::getBase(unsigned char)>
c001fe36:	8d 50 07             	lea    edx,[eax+0x7]
c001fe39:	ec                   	in     al,dx
c001fe3a:	83 c4 10             	add    esp,0x10
c001fe3d:	a8 88                	test   al,0x88
c001fe3f:	74 0a                	je     c001fe4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001fe41:	4b                   	dec    ebx
c001fe42:	75 dd                	jne    c001fe21 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001fe44:	bb 02 00 00 00       	mov    ebx,0x2
c001fe49:	eb 02                	jmp    c001fe4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fe4b:	31 db                	xor    ebx,ebx
c001fe4d:	83 c4 1c             	add    esp,0x1c
c001fe50:	89 d8                	mov    eax,ebx
c001fe52:	5b                   	pop    ebx
c001fe53:	5e                   	pop    esi
c001fe54:	5f                   	pop    edi
c001fe55:	5d                   	pop    ebp
c001fe56:	c3                   	ret    
c001fe57:	90                   	nop

c001fe58 <ATAPI::diskRemoved()>:
c001fe58:	53                   	push   ebx
c001fe59:	83 ec 14             	sub    esp,0x14
c001fe5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fe60:	68 31 6d 02 c0       	push   0xc0026d31
c001fe65:	e8 91 ce fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001fe6a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fe71:	c7 04 24 84 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a84
c001fe78:	e8 7e ce fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001fe7d:	58                   	pop    eax
c001fe7e:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001fe84:	e8 85 06 ff ff       	call   c001050e <LogicalDisk::unmount()>
c001fe89:	c7 04 24 93 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a93
c001fe90:	e8 66 ce fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001fe95:	5a                   	pop    edx
c001fe96:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fe9c:	e8 73 10 ff ff       	call   c0010f14 <VCache::writeWriteBuffer()>
c001fea1:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001fea7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001feab:	83 c4 18             	add    esp,0x18
c001feae:	5b                   	pop    ebx
c001feaf:	e9 50 10 ff ff       	jmp    c0010f04 <VCache::invalidateReadBuffer()>

c001feb4 <ATAPI::eject()>:
c001feb4:	57                   	push   edi
c001feb5:	b9 03 00 00 00       	mov    ecx,0x3
c001feba:	53                   	push   ebx
c001febb:	83 ec 14             	sub    esp,0x14
c001febe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fec2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fec6:	fc                   	cld    
c001fec7:	31 c0                	xor    eax,eax
c001fec9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fecb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fed0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fed5:	50                   	push   eax
c001fed6:	50                   	push   eax
c001fed7:	6a 00                	push   0x0
c001fed9:	6a 00                	push   0x0
c001fedb:	6a 00                	push   0x0
c001fedd:	6a 02                	push   0x2
c001fedf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fee3:	50                   	push   eax
c001fee4:	53                   	push   ebx
c001fee5:	e8 ae fc ff ff       	call   c001fb98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001feea:	83 c4 14             	add    esp,0x14
c001feed:	53                   	push   ebx
c001feee:	e8 65 ff ff ff       	call   c001fe58 <ATAPI::diskRemoved()>
c001fef3:	83 c4 24             	add    esp,0x24
c001fef6:	31 c0                	xor    eax,eax
c001fef8:	5b                   	pop    ebx
c001fef9:	5f                   	pop    edi
c001fefa:	c3                   	ret    
c001fefb:	90                   	nop

c001fefc <ATAPI::diskInserted()>:
c001fefc:	83 ec 18             	sub    esp,0x18
c001feff:	68 48 6d 02 c0       	push   0xc0026d48
c001ff04:	e8 f2 cd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001ff09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff0d:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001ff14:	83 c4 1c             	add    esp,0x1c
c001ff17:	c3                   	ret    

c001ff18 <ATAPI::detectMedia()>:
c001ff18:	56                   	push   esi
c001ff19:	53                   	push   ebx
c001ff1a:	83 ec 28             	sub    esp,0x28
c001ff1d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ff21:	6a 0c                	push   0xc
c001ff23:	6a 00                	push   0x0
c001ff25:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ff29:	56                   	push   esi
c001ff2a:	e8 55 07 fe ff       	call   c0000684 <memset>
c001ff2f:	58                   	pop    eax
c001ff30:	5a                   	pop    edx
c001ff31:	6a 00                	push   0x0
c001ff33:	6a 00                	push   0x0
c001ff35:	6a 00                	push   0x0
c001ff37:	6a 00                	push   0x0
c001ff39:	56                   	push   esi
c001ff3a:	53                   	push   ebx
c001ff3b:	e8 58 fc ff ff       	call   c001fb98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ff40:	83 c4 1c             	add    esp,0x1c
c001ff43:	6a 0c                	push   0xc
c001ff45:	6a 00                	push   0x0
c001ff47:	56                   	push   esi
c001ff48:	e8 37 07 fe ff       	call   c0000684 <memset>
c001ff4d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ff52:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ff57:	59                   	pop    ecx
c001ff58:	58                   	pop    eax
c001ff59:	6a 01                	push   0x1
c001ff5b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ff5f:	50                   	push   eax
c001ff60:	6a 00                	push   0x0
c001ff62:	6a 12                	push   0x12
c001ff64:	56                   	push   esi
c001ff65:	53                   	push   ebx
c001ff66:	e8 2d fc ff ff       	call   c001fb98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ff6b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ff6f:	83 c4 20             	add    esp,0x20
c001ff72:	83 e0 7f             	and    eax,0x7f
c001ff75:	3c 70                	cmp    al,0x70
c001ff77:	74 15                	je     c001ff8e <ATAPI::detectMedia()+0x76>
c001ff79:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff80:	75 0c                	jne    c001ff8e <ATAPI::detectMedia()+0x76>
c001ff82:	83 ec 0c             	sub    esp,0xc
c001ff85:	53                   	push   ebx
c001ff86:	e8 71 ff ff ff       	call   c001fefc <ATAPI::diskInserted()>
c001ff8b:	83 c4 10             	add    esp,0x10
c001ff8e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ff92:	83 e0 0f             	and    eax,0xf
c001ff95:	3c 02                	cmp    al,0x2
c001ff97:	75 1b                	jne    c001ffb4 <ATAPI::detectMedia()+0x9c>
c001ff99:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ff9e:	75 2d                	jne    c001ffcd <ATAPI::detectMedia()+0xb5>
c001ffa0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ffa7:	74 24                	je     c001ffcd <ATAPI::detectMedia()+0xb5>
c001ffa9:	83 ec 0c             	sub    esp,0xc
c001ffac:	53                   	push   ebx
c001ffad:	e8 a6 fe ff ff       	call   c001fe58 <ATAPI::diskRemoved()>
c001ffb2:	eb 16                	jmp    c001ffca <ATAPI::detectMedia()+0xb2>
c001ffb4:	84 c0                	test   al,al
c001ffb6:	75 15                	jne    c001ffcd <ATAPI::detectMedia()+0xb5>
c001ffb8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ffbf:	75 0c                	jne    c001ffcd <ATAPI::detectMedia()+0xb5>
c001ffc1:	83 ec 0c             	sub    esp,0xc
c001ffc4:	53                   	push   ebx
c001ffc5:	e8 32 ff ff ff       	call   c001fefc <ATAPI::diskInserted()>
c001ffca:	83 c4 10             	add    esp,0x10
c001ffcd:	83 c4 24             	add    esp,0x24
c001ffd0:	5b                   	pop    ebx
c001ffd1:	5e                   	pop    esi
c001ffd2:	c3                   	ret    
c001ffd3:	90                   	nop

c001ffd4 <ATAPI::open(int, int, void*)>:
c001ffd4:	56                   	push   esi
c001ffd5:	53                   	push   ebx
c001ffd6:	50                   	push   eax
c001ffd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ffdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ffdf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ffe3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ffe9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ffef:	c1 e0 06             	shl    eax,0x6
c001fff2:	01 d0                	add    eax,edx
c001fff4:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001fffb:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020001:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020008:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020012:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020018:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002001f:	6a 04                	push   0x4
c0020021:	6a 0c                	push   0xc
c0020023:	51                   	push   ecx
c0020024:	52                   	push   edx
c0020025:	e8 fc e4 ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002002a:	90                   	nop
c002002b:	90                   	nop
c002002c:	6a 00                	push   0x0
c002002e:	6a 0c                	push   0xc
c0020030:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020037:	50                   	push   eax
c0020038:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002003e:	e8 e3 e4 ff ff       	call   c001e526 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020043:	83 c4 14             	add    esp,0x14
c0020046:	68 74 01 00 00       	push   0x174
c002004b:	e8 bf 99 fe ff       	call   c0009a0f <malloc>
c0020050:	83 c4 0c             	add    esp,0xc
c0020053:	89 c6                	mov    esi,eax
c0020055:	6a 00                	push   0x0
c0020057:	68 ff ff ff 7f       	push   0x7fffffff
c002005c:	6a 00                	push   0x0
c002005e:	6a 00                	push   0x0
c0020060:	53                   	push   ebx
c0020061:	68 10 6e 02 c0       	push   0xc0026e10
c0020066:	50                   	push   eax
c0020067:	e8 ae 02 ff ff       	call   c001031a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002006c:	83 c4 14             	add    esp,0x14
c002006f:	56                   	push   esi
c0020070:	e8 5b 03 ff ff       	call   c00103d0 <LogicalDisk::assignDriveLetter()>
c0020075:	5a                   	pop    edx
c0020076:	0f be c0             	movsx  eax,al
c0020079:	59                   	pop    ecx
c002007a:	50                   	push   eax
c002007b:	68 a1 6a 02 c0       	push   0xc0026aa1
c0020080:	e8 76 cc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020085:	58                   	pop    eax
c0020086:	5a                   	pop    edx
c0020087:	56                   	push   esi
c0020088:	53                   	push   ebx
c0020089:	e8 e0 e1 fe ff       	call   c000e26e <Device::addChild(Device*)>
c002008e:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020094:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020097:	e8 72 e6 fe ff       	call   c000e70e <PhysicalDisk::startCache()>
c002009c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00200a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00200a6:	e8 6d fe ff ff       	call   c001ff18 <ATAPI::detectMedia()>
c00200ab:	83 c4 14             	add    esp,0x14
c00200ae:	31 c0                	xor    eax,eax
c00200b0:	5b                   	pop    ebx
c00200b1:	5e                   	pop    esi
c00200b2:	c3                   	ret    
c00200b3:	90                   	nop

c00200b4 <ATAPI::read(unsigned long long, int, void*)>:
c00200b4:	55                   	push   ebp
c00200b5:	57                   	push   edi
c00200b6:	56                   	push   esi
c00200b7:	53                   	push   ebx
c00200b8:	83 ec 1c             	sub    esp,0x1c
c00200bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00200bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00200c3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00200c7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00200ce:	74 41                	je     c0020111 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00200d0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00200d4:	b9 03 00 00 00       	mov    ecx,0x3
c00200d9:	fc                   	cld    
c00200da:	31 c0                	xor    eax,eax
c00200dc:	86 fb                	xchg   bl,bh
c00200de:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00200e0:	c1 c3 10             	rol    ebx,0x10
c00200e3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00200e8:	89 e8                	mov    eax,ebp
c00200ea:	86 fb                	xchg   bl,bh
c00200ec:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00200f0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00200f4:	50                   	push   eax
c00200f5:	50                   	push   eax
c00200f6:	55                   	push   ebp
c00200f7:	c1 e5 0b             	shl    ebp,0xb
c00200fa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00200fe:	6a 00                	push   0x0
c0020100:	55                   	push   ebp
c0020101:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020105:	50                   	push   eax
c0020106:	56                   	push   esi
c0020107:	e8 8c fa ff ff       	call   c001fb98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002010c:	83 c4 20             	add    esp,0x20
c002010f:	eb 1a                	jmp    c002012b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020111:	83 ec 0c             	sub    esp,0xc
c0020114:	56                   	push   esi
c0020115:	e8 fe fd ff ff       	call   c001ff18 <ATAPI::detectMedia()>
c002011a:	83 c4 10             	add    esp,0x10
c002011d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020124:	75 aa                	jne    c00200d0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020126:	b8 02 00 00 00       	mov    eax,0x2
c002012b:	83 c4 1c             	add    esp,0x1c
c002012e:	5b                   	pop    ebx
c002012f:	5e                   	pop    esi
c0020130:	5f                   	pop    edi
c0020131:	5d                   	pop    ebp
c0020132:	c3                   	ret    
c0020133:	90                   	nop

c0020134 <SATA::close(int, int, void*)>:
c0020134:	83 ec 0c             	sub    esp,0xc
c0020137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002013b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020141:	85 c0                	test   eax,eax
c0020143:	74 0c                	je     c0020151 <SATA::close(int, int, void*)+0x1d>
c0020145:	83 ec 0c             	sub    esp,0xc
c0020148:	8b 10                	mov    edx,DWORD PTR [eax]
c002014a:	50                   	push   eax
c002014b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002014e:	83 c4 10             	add    esp,0x10
c0020151:	31 c0                	xor    eax,eax
c0020153:	83 c4 0c             	add    esp,0xc
c0020156:	c3                   	ret    
c0020157:	90                   	nop

c0020158 <SATA::powerSaving(PowerSavingLevel)>:
c0020158:	c3                   	ret    
c0020159:	90                   	nop

c002015a <SATA::open(int, int, void*)>:
c002015a:	56                   	push   esi
c002015b:	53                   	push   ebx
c002015c:	51                   	push   ecx
c002015d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020161:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020168:	74 2d                	je     c0020197 <SATA::open(int, int, void*)+0x3d>
c002016a:	83 ec 0c             	sub    esp,0xc
c002016d:	68 e8 6a 02 c0       	push   0xc0026ae8
c0020172:	e8 f2 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020177:	83 c4 10             	add    esp,0x10
c002017a:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0020181:	75 14                	jne    c0020197 <SATA::open(int, int, void*)+0x3d>
c0020183:	e4 60                	in     al,0x60
c0020185:	3c 5a                	cmp    al,0x5a
c0020187:	74 04                	je     c002018d <SATA::open(int, int, void*)+0x33>
c0020189:	3c 1c                	cmp    al,0x1c
c002018b:	75 f6                	jne    c0020183 <SATA::open(int, int, void*)+0x29>
c002018d:	e4 60                	in     al,0x60
c002018f:	3c 5a                	cmp    al,0x5a
c0020191:	74 fa                	je     c002018d <SATA::open(int, int, void*)+0x33>
c0020193:	3c 1c                	cmp    al,0x1c
c0020195:	74 f6                	je     c002018d <SATA::open(int, int, void*)+0x33>
c0020197:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002019b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00201a5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00201ab:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00201b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00201b9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00201c3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00201c9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00201d0:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c00201d7:	74 2d                	je     c0020206 <SATA::open(int, int, void*)+0xac>
c00201d9:	83 ec 0c             	sub    esp,0xc
c00201dc:	68 f5 6a 02 c0       	push   0xc0026af5
c00201e1:	e8 83 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00201e6:	83 c4 10             	add    esp,0x10
c00201e9:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c00201f0:	75 14                	jne    c0020206 <SATA::open(int, int, void*)+0xac>
c00201f2:	e4 60                	in     al,0x60
c00201f4:	3c 1c                	cmp    al,0x1c
c00201f6:	74 04                	je     c00201fc <SATA::open(int, int, void*)+0xa2>
c00201f8:	3c 5a                	cmp    al,0x5a
c00201fa:	75 f6                	jne    c00201f2 <SATA::open(int, int, void*)+0x98>
c00201fc:	e4 60                	in     al,0x60
c00201fe:	3c 5a                	cmp    al,0x5a
c0020200:	74 fa                	je     c00201fc <SATA::open(int, int, void*)+0xa2>
c0020202:	3c 1c                	cmp    al,0x1c
c0020204:	74 f6                	je     c00201fc <SATA::open(int, int, void*)+0xa2>
c0020206:	e8 bb 9e fe ff       	call   c000a0c6 <Phys::allocatePage()>
c002020b:	89 c6                	mov    esi,eax
c002020d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020213:	81 c6 00 10 00 00    	add    esi,0x1000
c0020219:	e8 a8 9e fe ff       	call   c000a0c6 <Phys::allocatePage()>
c002021e:	39 c6                	cmp    esi,eax
c0020220:	74 10                	je     c0020232 <SATA::open(int, int, void*)+0xd8>
c0020222:	83 ec 0c             	sub    esp,0xc
c0020225:	68 02 6b 02 c0       	push   0xc0026b02
c002022a:	e8 d8 47 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c002022f:	83 c4 10             	add    esp,0x10
c0020232:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020239:	74 2d                	je     c0020268 <SATA::open(int, int, void*)+0x10e>
c002023b:	83 ec 0c             	sub    esp,0xc
c002023e:	68 16 6b 02 c0       	push   0xc0026b16
c0020243:	e8 21 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020248:	83 c4 10             	add    esp,0x10
c002024b:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0020252:	75 14                	jne    c0020268 <SATA::open(int, int, void*)+0x10e>
c0020254:	e4 60                	in     al,0x60
c0020256:	3c 1c                	cmp    al,0x1c
c0020258:	74 04                	je     c002025e <SATA::open(int, int, void*)+0x104>
c002025a:	3c 5a                	cmp    al,0x5a
c002025c:	75 f6                	jne    c0020254 <SATA::open(int, int, void*)+0xfa>
c002025e:	e4 60                	in     al,0x60
c0020260:	3c 5a                	cmp    al,0x5a
c0020262:	74 fa                	je     c002025e <SATA::open(int, int, void*)+0x104>
c0020264:	3c 1c                	cmp    al,0x1c
c0020266:	74 f6                	je     c002025e <SATA::open(int, int, void*)+0x104>
c0020268:	83 ec 0c             	sub    esp,0xc
c002026b:	6a 02                	push   0x2
c002026d:	e8 63 b7 fe ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0020272:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020278:	6a 03                	push   0x3
c002027a:	50                   	push   eax
c002027b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020281:	ff 35 90 80 02 c0    	push   DWORD PTR ds:0xc0028090
c0020287:	e8 f0 bd fe ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c002028c:	83 c4 20             	add    esp,0x20
c002028f:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020296:	74 2d                	je     c00202c5 <SATA::open(int, int, void*)+0x16b>
c0020298:	83 ec 0c             	sub    esp,0xc
c002029b:	68 23 6b 02 c0       	push   0xc0026b23
c00202a0:	e8 c4 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00202a5:	83 c4 10             	add    esp,0x10
c00202a8:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c00202af:	75 14                	jne    c00202c5 <SATA::open(int, int, void*)+0x16b>
c00202b1:	e4 60                	in     al,0x60
c00202b3:	3c 1c                	cmp    al,0x1c
c00202b5:	74 04                	je     c00202bb <SATA::open(int, int, void*)+0x161>
c00202b7:	3c 5a                	cmp    al,0x5a
c00202b9:	75 f6                	jne    c00202b1 <SATA::open(int, int, void*)+0x157>
c00202bb:	e4 60                	in     al,0x60
c00202bd:	3c 5a                	cmp    al,0x5a
c00202bf:	74 fa                	je     c00202bb <SATA::open(int, int, void*)+0x161>
c00202c1:	3c 1c                	cmp    al,0x1c
c00202c3:	74 f6                	je     c00202bb <SATA::open(int, int, void*)+0x161>
c00202c5:	83 ec 0c             	sub    esp,0xc
c00202c8:	53                   	push   ebx
c00202c9:	e8 40 e4 fe ff       	call   c000e70e <PhysicalDisk::startCache()>
c00202ce:	83 c4 10             	add    esp,0x10
c00202d1:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c00202d8:	74 2d                	je     c0020307 <SATA::open(int, int, void*)+0x1ad>
c00202da:	83 ec 0c             	sub    esp,0xc
c00202dd:	68 30 6b 02 c0       	push   0xc0026b30
c00202e2:	e8 82 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00202e7:	83 c4 10             	add    esp,0x10
c00202ea:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c00202f1:	75 14                	jne    c0020307 <SATA::open(int, int, void*)+0x1ad>
c00202f3:	e4 60                	in     al,0x60
c00202f5:	3c 1c                	cmp    al,0x1c
c00202f7:	74 04                	je     c00202fd <SATA::open(int, int, void*)+0x1a3>
c00202f9:	3c 5a                	cmp    al,0x5a
c00202fb:	75 f6                	jne    c00202f3 <SATA::open(int, int, void*)+0x199>
c00202fd:	e4 60                	in     al,0x60
c00202ff:	3c 5a                	cmp    al,0x5a
c0020301:	74 fa                	je     c00202fd <SATA::open(int, int, void*)+0x1a3>
c0020303:	3c 1c                	cmp    al,0x1c
c0020305:	74 f6                	je     c00202fd <SATA::open(int, int, void*)+0x1a3>
c0020307:	83 ec 0c             	sub    esp,0xc
c002030a:	53                   	push   ebx
c002030b:	e8 7e 04 ff ff       	call   c001078e <createPartitionsForDisk(PhysicalDisk*)>
c0020310:	83 c4 10             	add    esp,0x10
c0020313:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c002031a:	74 2d                	je     c0020349 <SATA::open(int, int, void*)+0x1ef>
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	68 3d 6b 02 c0       	push   0xc0026b3d
c0020324:	e8 40 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020329:	83 c4 10             	add    esp,0x10
c002032c:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0020333:	75 14                	jne    c0020349 <SATA::open(int, int, void*)+0x1ef>
c0020335:	e4 60                	in     al,0x60
c0020337:	3c 1c                	cmp    al,0x1c
c0020339:	74 04                	je     c002033f <SATA::open(int, int, void*)+0x1e5>
c002033b:	3c 5a                	cmp    al,0x5a
c002033d:	75 f6                	jne    c0020335 <SATA::open(int, int, void*)+0x1db>
c002033f:	e4 60                	in     al,0x60
c0020341:	3c 5a                	cmp    al,0x5a
c0020343:	74 fa                	je     c002033f <SATA::open(int, int, void*)+0x1e5>
c0020345:	3c 1c                	cmp    al,0x1c
c0020347:	74 f6                	je     c002033f <SATA::open(int, int, void*)+0x1e5>
c0020349:	5a                   	pop    edx
c002034a:	31 c0                	xor    eax,eax
c002034c:	5b                   	pop    ebx
c002034d:	5e                   	pop    esi
c002034e:	c3                   	ret    
c002034f:	90                   	nop

c0020350 <SATA::SATA()>:
c0020350:	83 ec 0c             	sub    esp,0xc
c0020353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020357:	83 ec 04             	sub    esp,0x4
c002035a:	68 00 02 00 00       	push   0x200
c002035f:	68 4a 6b 02 c0       	push   0xc0026b4a
c0020364:	50                   	push   eax
c0020365:	e8 3c e3 fe ff       	call   c000e6a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002036a:	83 c4 10             	add    esp,0x10
c002036d:	ba f4 6c 02 c0       	mov    edx,0xc0026cf4
c0020372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020376:	89 10                	mov    DWORD PTR [eax],edx
c0020378:	90                   	nop
c0020379:	83 c4 0c             	add    esp,0xc
c002037c:	c3                   	ret    
c002037d:	90                   	nop

c002037e <SATA::access(unsigned long long, int, void*, bool)>:
c002037e:	55                   	push   ebp
c002037f:	57                   	push   edi
c0020380:	56                   	push   esi
c0020381:	53                   	push   ebx
c0020382:	83 ec 2c             	sub    esp,0x2c
c0020385:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020389:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002038d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020391:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020398:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002039c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00203a0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00203a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00203a8:	75 19                	jne    c00203c3 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c00203aa:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00203af:	7e 41                	jle    c00203f2 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00203b1:	83 ec 0c             	sub    esp,0xc
c00203b4:	68 69 6b 02 c0       	push   0xc0026b69
c00203b9:	e8 49 46 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c00203be:	83 c4 10             	add    esp,0x10
c00203c1:	eb 2f                	jmp    c00203f2 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00203c3:	83 ec 0c             	sub    esp,0xc
c00203c6:	68 5a 6b 02 c0       	push   0xc0026b5a
c00203cb:	e8 99 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00203d0:	83 c4 10             	add    esp,0x10
c00203d3:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c00203da:	75 ce                	jne    c00203aa <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00203dc:	e4 60                	in     al,0x60
c00203de:	3c 1c                	cmp    al,0x1c
c00203e0:	74 04                	je     c00203e6 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00203e2:	3c 5a                	cmp    al,0x5a
c00203e4:	75 f6                	jne    c00203dc <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c00203e6:	e4 60                	in     al,0x60
c00203e8:	3c 5a                	cmp    al,0x5a
c00203ea:	74 fa                	je     c00203e6 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00203ec:	3c 1c                	cmp    al,0x1c
c00203ee:	74 f6                	je     c00203e6 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00203f0:	eb b8                	jmp    c00203aa <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00203f2:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c00203f9:	75 29                	jne    c0020424 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c00203fb:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020401:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020407:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002040d:	8d 75 02             	lea    esi,[ebp+0x2]
c0020410:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020414:	c1 e6 07             	shl    esi,0x7
c0020417:	01 c6                	add    esi,eax
c0020419:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020420:	74 4a                	je     c002046c <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020422:	eb 2f                	jmp    c0020453 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020424:	83 ec 0c             	sub    esp,0xc
c0020427:	68 a2 6b 02 c0       	push   0xc0026ba2
c002042c:	e8 38 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020431:	83 c4 10             	add    esp,0x10
c0020434:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c002043b:	75 be                	jne    c00203fb <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c002043d:	e4 60                	in     al,0x60
c002043f:	3c 1c                	cmp    al,0x1c
c0020441:	74 04                	je     c0020447 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020443:	3c 5a                	cmp    al,0x5a
c0020445:	75 f6                	jne    c002043d <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020447:	e4 60                	in     al,0x60
c0020449:	3c 5a                	cmp    al,0x5a
c002044b:	74 fa                	je     c0020447 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c002044d:	3c 1c                	cmp    al,0x1c
c002044f:	74 f6                	je     c0020447 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020451:	eb a8                	jmp    c00203fb <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020453:	83 ec 0c             	sub    esp,0xc
c0020456:	68 b1 6b 02 c0       	push   0xc0026bb1
c002045b:	e8 09 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020460:	83 c4 10             	add    esp,0x10
c0020463:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c002046a:	74 3d                	je     c00204a9 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c002046c:	89 e8                	mov    eax,ebp
c002046e:	c1 e0 07             	shl    eax,0x7
c0020471:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020475:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002047f:	52                   	push   edx
c0020480:	52                   	push   edx
c0020481:	56                   	push   esi
c0020482:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020488:	e8 11 ec ff ff       	call   c001f09e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002048d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020491:	83 c4 10             	add    esp,0x10
c0020494:	b8 01 00 00 00       	mov    eax,0x1
c0020499:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002049e:	75 1d                	jne    c00204bd <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c00204a0:	e9 c8 04 00 00       	jmp    c002096d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00204a5:	3c 5a                	cmp    al,0x5a
c00204a7:	74 0c                	je     c00204b5 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00204a9:	e4 60                	in     al,0x60
c00204ab:	3c 1c                	cmp    al,0x1c
c00204ad:	75 f6                	jne    c00204a5 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c00204af:	eb 04                	jmp    c00204b5 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00204b1:	3c 1c                	cmp    al,0x1c
c00204b3:	75 b7                	jne    c002046c <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00204b5:	e4 60                	in     al,0x60
c00204b7:	3c 5a                	cmp    al,0x5a
c00204b9:	74 fa                	je     c00204b5 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00204bb:	eb f4                	jmp    c00204b1 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c00204bd:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c00204c4:	74 3a                	je     c0020500 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c00204c6:	83 ec 0c             	sub    esp,0xc
c00204c9:	68 c0 6b 02 c0       	push   0xc0026bc0
c00204ce:	e8 96 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00204d3:	83 c4 10             	add    esp,0x10
c00204d6:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c00204dd:	74 0d                	je     c00204ec <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c00204df:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00204e4:	74 34                	je     c002051a <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c00204e6:	eb 1f                	jmp    c0020507 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c00204e8:	3c 1c                	cmp    al,0x1c
c00204ea:	74 0c                	je     c00204f8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00204ec:	e4 60                	in     al,0x60
c00204ee:	3c 5a                	cmp    al,0x5a
c00204f0:	75 f6                	jne    c00204e8 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c00204f2:	eb 04                	jmp    c00204f8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00204f4:	3c 1c                	cmp    al,0x1c
c00204f6:	75 e7                	jne    c00204df <SATA::access(unsigned long long, int, void*, bool)+0x161>
c00204f8:	e4 60                	in     al,0x60
c00204fa:	3c 5a                	cmp    al,0x5a
c00204fc:	74 fa                	je     c00204f8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00204fe:	eb f4                	jmp    c00204f4 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020500:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020505:	74 1c                	je     c0020523 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020507:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c002050b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020511:	c1 e1 09             	shl    ecx,0x9
c0020514:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020518:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002051a:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020521:	75 55                	jne    c0020578 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020523:	8d 45 02             	lea    eax,[ebp+0x2]
c0020526:	c1 e0 07             	shl    eax,0x7
c0020529:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002052d:	8b 38                	mov    edi,DWORD PTR [eax]
c002052f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020535:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c002053b:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020545:	c1 e0 05             	shl    eax,0x5
c0020548:	01 c7                	add    edi,eax
c002054a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002054e:	83 e0 01             	and    eax,0x1
c0020551:	c1 e0 06             	shl    eax,0x6
c0020554:	88 c2                	mov    dl,al
c0020556:	8a 07                	mov    al,BYTE PTR [edi]
c0020558:	83 e0 bf             	and    eax,0xffffffbf
c002055b:	09 d0                	or     eax,edx
c002055d:	88 07                	mov    BYTE PTR [edi],al
c002055f:	8b 07                	mov    eax,DWORD PTR [edi]
c0020561:	25 e0 ff 00 00       	and    eax,0xffe0
c0020566:	0d 05 00 01 00       	or     eax,0x10005
c002056b:	89 07                	mov    DWORD PTR [edi],eax
c002056d:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020574:	74 4d                	je     c00205c3 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020576:	eb 32                	jmp    c00205aa <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020578:	83 ec 0c             	sub    esp,0xc
c002057b:	68 cf 6b 02 c0       	push   0xc0026bcf
c0020580:	e8 e4 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020585:	83 c4 10             	add    esp,0x10
c0020588:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c002058f:	75 92                	jne    c0020523 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020591:	e4 60                	in     al,0x60
c0020593:	3c 1c                	cmp    al,0x1c
c0020595:	74 04                	je     c002059b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020597:	3c 5a                	cmp    al,0x5a
c0020599:	75 f6                	jne    c0020591 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c002059b:	e4 60                	in     al,0x60
c002059d:	3c 5a                	cmp    al,0x5a
c002059f:	74 fa                	je     c002059b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00205a1:	3c 1c                	cmp    al,0x1c
c00205a3:	74 f6                	je     c002059b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00205a5:	e9 79 ff ff ff       	jmp    c0020523 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00205aa:	83 ec 0c             	sub    esp,0xc
c00205ad:	68 de 6b 02 c0       	push   0xc0026bde
c00205b2:	e8 b2 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00205b7:	83 c4 10             	add    esp,0x10
c00205ba:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c00205c1:	74 3b                	je     c00205fe <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00205c3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00205c9:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c00205cf:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c00205d5:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c00205d8:	50                   	push   eax
c00205d9:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c00205dd:	83 c0 08             	add    eax,0x8
c00205e0:	c1 e0 04             	shl    eax,0x4
c00205e3:	50                   	push   eax
c00205e4:	6a 00                	push   0x0
c00205e6:	56                   	push   esi
c00205e7:	e8 98 00 fe ff       	call   c0000684 <memset>
c00205ec:	83 c4 10             	add    esp,0x10
c00205ef:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c00205f6:	74 33                	je     c002062b <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00205f8:	eb 18                	jmp    c0020612 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c00205fa:	3c 1c                	cmp    al,0x1c
c00205fc:	74 0c                	je     c002060a <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00205fe:	e4 60                	in     al,0x60
c0020600:	3c 5a                	cmp    al,0x5a
c0020602:	75 f6                	jne    c00205fa <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020604:	eb 04                	jmp    c002060a <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020606:	3c 1c                	cmp    al,0x1c
c0020608:	75 b9                	jne    c00205c3 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c002060a:	e4 60                	in     al,0x60
c002060c:	3c 5a                	cmp    al,0x5a
c002060e:	74 fa                	je     c002060a <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020610:	eb f4                	jmp    c0020606 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020612:	83 ec 0c             	sub    esp,0xc
c0020615:	68 ed 6b 02 c0       	push   0xc0026bed
c002061a:	e8 4a 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002061f:	83 c4 10             	add    esp,0x10
c0020622:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0020629:	74 48                	je     c0020673 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c002062b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020631:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020637:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002063b:	c1 e0 09             	shl    eax,0x9
c002063e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020642:	48                   	dec    eax
c0020643:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020648:	89 c2                	mov    edx,eax
c002064a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020650:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020655:	09 d0                	or     eax,edx
c0020657:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002065d:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020664:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c002066b:	74 33                	je     c00206a0 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c002066d:	eb 18                	jmp    c0020687 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c002066f:	3c 1c                	cmp    al,0x1c
c0020671:	74 0c                	je     c002067f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020673:	e4 60                	in     al,0x60
c0020675:	3c 5a                	cmp    al,0x5a
c0020677:	75 f6                	jne    c002066f <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020679:	eb 04                	jmp    c002067f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c002067b:	3c 1c                	cmp    al,0x1c
c002067d:	75 ac                	jne    c002062b <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c002067f:	e4 60                	in     al,0x60
c0020681:	3c 5a                	cmp    al,0x5a
c0020683:	74 fa                	je     c002067f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020685:	eb f4                	jmp    c002067b <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020687:	83 ec 0c             	sub    esp,0xc
c002068a:	68 fc 6b 02 c0       	push   0xc0026bfc
c002068f:	e8 d5 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020694:	83 c4 10             	add    esp,0x10
c0020697:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c002069e:	74 63                	je     c0020703 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c00206a0:	66 8b 06             	mov    ax,WORD PTR [esi]
c00206a3:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00206a7:	66 25 00 7f          	and    ax,0x7f00
c00206ab:	66 0d 27 80          	or     ax,0x8027
c00206af:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00206b4:	66 89 06             	mov    WORD PTR [esi],ax
c00206b7:	19 c0                	sbb    eax,eax
c00206b9:	83 e0 f0             	and    eax,0xfffffff0
c00206bc:	83 c0 35             	add    eax,0x35
c00206bf:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00206c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00206c6:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00206ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00206ce:	c1 e8 10             	shr    eax,0x10
c00206d1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00206d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00206d8:	c1 e8 18             	shr    eax,0x18
c00206db:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c00206e2:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00206e5:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00206e9:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00206ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00206f0:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00206f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00206f7:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00206fb:	74 33                	je     c0020730 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00206fd:	eb 18                	jmp    c0020717 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c00206ff:	3c 1c                	cmp    al,0x1c
c0020701:	74 0c                	je     c002070f <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020703:	e4 60                	in     al,0x60
c0020705:	3c 5a                	cmp    al,0x5a
c0020707:	75 f6                	jne    c00206ff <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020709:	eb 04                	jmp    c002070f <SATA::access(unsigned long long, int, void*, bool)+0x391>
c002070b:	3c 1c                	cmp    al,0x1c
c002070d:	75 91                	jne    c00206a0 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c002070f:	e4 60                	in     al,0x60
c0020711:	3c 5a                	cmp    al,0x5a
c0020713:	74 fa                	je     c002070f <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020715:	eb f4                	jmp    c002070b <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020717:	83 ec 0c             	sub    esp,0xc
c002071a:	68 0b 6c 02 c0       	push   0xc0026c0b
c002071f:	e8 45 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020724:	83 c4 10             	add    esp,0x10
c0020727:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c002072e:	74 11                	je     c0020741 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020730:	89 e8                	mov    eax,ebp
c0020732:	31 f6                	xor    esi,esi
c0020734:	c1 e0 07             	shl    eax,0x7
c0020737:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002073b:	eb 21                	jmp    c002075e <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c002073d:	3c 1c                	cmp    al,0x1c
c002073f:	74 0c                	je     c002074d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020741:	e4 60                	in     al,0x60
c0020743:	3c 5a                	cmp    al,0x5a
c0020745:	75 f6                	jne    c002073d <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020747:	eb 04                	jmp    c002074d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020749:	3c 1c                	cmp    al,0x1c
c002074b:	75 e3                	jne    c0020730 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c002074d:	e4 60                	in     al,0x60
c002074f:	3c 5a                	cmp    al,0x5a
c0020751:	74 fa                	je     c002074d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020753:	eb f4                	jmp    c0020749 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020755:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002075b:	74 0c                	je     c0020769 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c002075d:	46                   	inc    esi
c002075e:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020764:	80 e2 88             	and    dl,0x88
c0020767:	75 ec                	jne    c0020755 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020769:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020770:	74 3d                	je     c00207af <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020772:	83 ec 0c             	sub    esp,0xc
c0020775:	68 1a 6c 02 c0       	push   0xc0026c1a
c002077a:	e8 ea 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002077f:	8b 15 80 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f80
c0020785:	83 c4 10             	add    esp,0x10
c0020788:	f6 c2 80             	test   dl,0x80
c002078b:	74 0e                	je     c002079b <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c002078d:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020793:	75 2f                	jne    c00207c4 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020795:	eb 20                	jmp    c00207b7 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0020797:	3c 1c                	cmp    al,0x1c
c0020799:	74 0c                	je     c00207a7 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002079b:	e4 60                	in     al,0x60
c002079d:	3c 5a                	cmp    al,0x5a
c002079f:	75 f6                	jne    c0020797 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c00207a1:	eb 04                	jmp    c00207a7 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00207a3:	3c 1c                	cmp    al,0x1c
c00207a5:	75 e6                	jne    c002078d <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c00207a7:	e4 60                	in     al,0x60
c00207a9:	3c 5a                	cmp    al,0x5a
c00207ab:	74 fa                	je     c00207a7 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00207ad:	eb f4                	jmp    c00207a3 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c00207af:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00207b5:	75 13                	jne    c00207ca <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00207b7:	83 ec 0c             	sub    esp,0xc
c00207ba:	68 2a 6c 02 c0       	push   0xc0026c2a
c00207bf:	e9 d2 00 00 00       	jmp    c0020896 <SATA::access(unsigned long long, int, void*, bool)+0x518>
c00207c4:	0f ba e2 0b          	bt     edx,0xb
c00207c8:	72 25                	jb     c00207ef <SATA::access(unsigned long long, int, void*, bool)+0x471>
c00207ca:	be 01 00 00 00       	mov    esi,0x1
c00207cf:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00207d3:	89 e8                	mov    eax,ebp
c00207d5:	d3 e6                	shl    esi,cl
c00207d7:	c1 e0 07             	shl    eax,0x7
c00207da:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00207de:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c00207e5:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c00207eb:	74 4a                	je     c0020837 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00207ed:	eb 2f                	jmp    c002081e <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c00207ef:	83 ec 0c             	sub    esp,0xc
c00207f2:	68 38 6c 02 c0       	push   0xc0026c38
c00207f7:	e8 6d 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00207fc:	83 c4 10             	add    esp,0x10
c00207ff:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0020806:	75 c2                	jne    c00207ca <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020808:	e4 60                	in     al,0x60
c002080a:	3c 5a                	cmp    al,0x5a
c002080c:	74 04                	je     c0020812 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c002080e:	3c 1c                	cmp    al,0x1c
c0020810:	75 f6                	jne    c0020808 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020812:	e4 60                	in     al,0x60
c0020814:	3c 5a                	cmp    al,0x5a
c0020816:	74 fa                	je     c0020812 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020818:	3c 1c                	cmp    al,0x1c
c002081a:	74 f6                	je     c0020812 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c002081c:	eb ac                	jmp    c00207ca <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002081e:	83 ec 0c             	sub    esp,0xc
c0020821:	68 48 6c 02 c0       	push   0xc0026c48
c0020826:	e8 3e 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002082b:	83 c4 10             	add    esp,0x10
c002082e:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0020835:	74 0f                	je     c0020846 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020837:	89 e8                	mov    eax,ebp
c0020839:	c1 e0 07             	shl    eax,0x7
c002083c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020840:	eb 24                	jmp    c0020866 <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020842:	3c 1c                	cmp    al,0x1c
c0020844:	74 0c                	je     c0020852 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020846:	e4 60                	in     al,0x60
c0020848:	3c 5a                	cmp    al,0x5a
c002084a:	75 f6                	jne    c0020842 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c002084c:	eb 04                	jmp    c0020852 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002084e:	3c 1c                	cmp    al,0x1c
c0020850:	75 e5                	jne    c0020837 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020852:	e4 60                	in     al,0x60
c0020854:	3c 5a                	cmp    al,0x5a
c0020856:	74 fa                	je     c0020852 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020858:	eb f4                	jmp    c002084e <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c002085a:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020860:	0f ba e2 1e          	bt     edx,0x1e
c0020864:	72 28                	jb     c002088e <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020866:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c002086c:	85 d6                	test   esi,edx
c002086e:	75 ea                	jne    c002085a <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020870:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020877:	75 2f                	jne    c00208a8 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020879:	89 e8                	mov    eax,ebp
c002087b:	c1 e0 07             	shl    eax,0x7
c002087e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020882:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020888:	0f ba e0 1e          	bt     eax,0x1e
c002088c:	73 49                	jae    c00208d7 <SATA::access(unsigned long long, int, void*, bool)+0x559>
c002088e:	83 ec 0c             	sub    esp,0xc
c0020891:	68 58 6c 02 c0       	push   0xc0026c58
c0020896:	e8 6c 41 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c002089b:	83 c4 10             	add    esp,0x10
c002089e:	b8 01 00 00 00       	mov    eax,0x1
c00208a3:	e9 c5 00 00 00       	jmp    c002096d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00208a8:	83 ec 0c             	sub    esp,0xc
c00208ab:	68 69 6c 02 c0       	push   0xc0026c69
c00208b0:	e8 b4 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00208b5:	83 c4 10             	add    esp,0x10
c00208b8:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c00208bf:	75 b8                	jne    c0020879 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00208c1:	e4 60                	in     al,0x60
c00208c3:	3c 5a                	cmp    al,0x5a
c00208c5:	74 04                	je     c00208cb <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00208c7:	3c 1c                	cmp    al,0x1c
c00208c9:	75 f6                	jne    c00208c1 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c00208cb:	e4 60                	in     al,0x60
c00208cd:	3c 5a                	cmp    al,0x5a
c00208cf:	74 fa                	je     c00208cb <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00208d1:	3c 1c                	cmp    al,0x1c
c00208d3:	74 f6                	je     c00208cb <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00208d5:	eb a2                	jmp    c0020879 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00208d7:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c00208de:	74 3a                	je     c002091a <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c00208e0:	83 ec 0c             	sub    esp,0xc
c00208e3:	68 79 6c 02 c0       	push   0xc0026c79
c00208e8:	e8 7c 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00208ed:	83 c4 10             	add    esp,0x10
c00208f0:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c00208f7:	74 0d                	je     c0020906 <SATA::access(unsigned long long, int, void*, bool)+0x588>
c00208f9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00208fe:	75 31                	jne    c0020931 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020900:	eb 1f                	jmp    c0020921 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0020902:	3c 1c                	cmp    al,0x1c
c0020904:	74 0c                	je     c0020912 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020906:	e4 60                	in     al,0x60
c0020908:	3c 5a                	cmp    al,0x5a
c002090a:	75 f6                	jne    c0020902 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c002090c:	eb 04                	jmp    c0020912 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c002090e:	3c 1c                	cmp    al,0x1c
c0020910:	75 e7                	jne    c00208f9 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020912:	e4 60                	in     al,0x60
c0020914:	3c 5a                	cmp    al,0x5a
c0020916:	74 fa                	je     c0020912 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020918:	eb f4                	jmp    c002090e <SATA::access(unsigned long long, int, void*, bool)+0x590>
c002091a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002091f:	75 19                	jne    c002093a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020921:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020927:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002092b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002092f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020931:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020938:	75 04                	jne    c002093e <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c002093a:	31 c0                	xor    eax,eax
c002093c:	eb 2f                	jmp    c002096d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c002093e:	83 ec 0c             	sub    esp,0xc
c0020941:	68 89 6c 02 c0       	push   0xc0026c89
c0020946:	e8 1e 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002094b:	83 c4 10             	add    esp,0x10
c002094e:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0020955:	75 e3                	jne    c002093a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020957:	e4 60                	in     al,0x60
c0020959:	3c 1c                	cmp    al,0x1c
c002095b:	74 04                	je     c0020961 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002095d:	3c 5a                	cmp    al,0x5a
c002095f:	75 f6                	jne    c0020957 <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020961:	e4 60                	in     al,0x60
c0020963:	3c 5a                	cmp    al,0x5a
c0020965:	74 fa                	je     c0020961 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020967:	3c 1c                	cmp    al,0x1c
c0020969:	74 f6                	je     c0020961 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002096b:	eb cd                	jmp    c002093a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c002096d:	83 c4 2c             	add    esp,0x2c
c0020970:	5b                   	pop    ebx
c0020971:	5e                   	pop    esi
c0020972:	5f                   	pop    edi
c0020973:	5d                   	pop    ebp
c0020974:	c3                   	ret    
c0020975:	90                   	nop

c0020976 <SATA::read(unsigned long long, int, void*)>:
c0020976:	55                   	push   ebp
c0020977:	57                   	push   edi
c0020978:	56                   	push   esi
c0020979:	53                   	push   ebx
c002097a:	83 ec 0c             	sub    esp,0xc
c002097d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020981:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020985:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020989:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002098d:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020994:	74 2d                	je     c00209c3 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020996:	83 ec 0c             	sub    esp,0xc
c0020999:	68 99 6c 02 c0       	push   0xc0026c99
c002099e:	e8 c6 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00209a3:	83 c4 10             	add    esp,0x10
c00209a6:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c00209ad:	75 14                	jne    c00209c3 <SATA::read(unsigned long long, int, void*)+0x4d>
c00209af:	e4 60                	in     al,0x60
c00209b1:	3c 1c                	cmp    al,0x1c
c00209b3:	74 04                	je     c00209b9 <SATA::read(unsigned long long, int, void*)+0x43>
c00209b5:	3c 5a                	cmp    al,0x5a
c00209b7:	75 f6                	jne    c00209af <SATA::read(unsigned long long, int, void*)+0x39>
c00209b9:	e4 60                	in     al,0x60
c00209bb:	3c 5a                	cmp    al,0x5a
c00209bd:	74 fa                	je     c00209b9 <SATA::read(unsigned long long, int, void*)+0x43>
c00209bf:	3c 1c                	cmp    al,0x1c
c00209c1:	74 f6                	je     c00209b9 <SATA::read(unsigned long long, int, void*)+0x43>
c00209c3:	8d 53 ff             	lea    edx,[ebx-0x1]
c00209c6:	b8 04 00 00 00       	mov    eax,0x4
c00209cb:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00209d1:	0f 87 96 00 00 00    	ja     c0020a6d <SATA::read(unsigned long long, int, void*)+0xf7>
c00209d7:	b8 06 00 00 00       	mov    eax,0x6
c00209dc:	85 ed                	test   ebp,ebp
c00209de:	0f 84 89 00 00 00    	je     c0020a6d <SATA::read(unsigned long long, int, void*)+0xf7>
c00209e4:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c00209eb:	74 2d                	je     c0020a1a <SATA::read(unsigned long long, int, void*)+0xa4>
c00209ed:	83 ec 0c             	sub    esp,0xc
c00209f0:	68 a6 6c 02 c0       	push   0xc0026ca6
c00209f5:	e8 6f 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00209fa:	83 c4 10             	add    esp,0x10
c00209fd:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0020a04:	75 14                	jne    c0020a1a <SATA::read(unsigned long long, int, void*)+0xa4>
c0020a06:	e4 60                	in     al,0x60
c0020a08:	3c 5a                	cmp    al,0x5a
c0020a0a:	74 04                	je     c0020a10 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020a0c:	3c 1c                	cmp    al,0x1c
c0020a0e:	75 f6                	jne    c0020a06 <SATA::read(unsigned long long, int, void*)+0x90>
c0020a10:	e4 60                	in     al,0x60
c0020a12:	3c 5a                	cmp    al,0x5a
c0020a14:	74 fa                	je     c0020a10 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020a16:	3c 1c                	cmp    al,0x1c
c0020a18:	74 f6                	je     c0020a10 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020a1a:	50                   	push   eax
c0020a1b:	50                   	push   eax
c0020a1c:	6a 00                	push   0x0
c0020a1e:	55                   	push   ebp
c0020a1f:	53                   	push   ebx
c0020a20:	57                   	push   edi
c0020a21:	56                   	push   esi
c0020a22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020a26:	e8 53 f9 ff ff       	call   c002037e <SATA::access(unsigned long long, int, void*, bool)>
c0020a2b:	83 c4 20             	add    esp,0x20
c0020a2e:	89 c3                	mov    ebx,eax
c0020a30:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020a37:	74 2d                	je     c0020a66 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020a39:	83 ec 0c             	sub    esp,0xc
c0020a3c:	68 b3 6c 02 c0       	push   0xc0026cb3
c0020a41:	e8 23 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020a46:	83 c4 10             	add    esp,0x10
c0020a49:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0020a50:	75 14                	jne    c0020a66 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020a52:	e4 60                	in     al,0x60
c0020a54:	3c 5a                	cmp    al,0x5a
c0020a56:	74 04                	je     c0020a5c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020a58:	3c 1c                	cmp    al,0x1c
c0020a5a:	75 f6                	jne    c0020a52 <SATA::read(unsigned long long, int, void*)+0xdc>
c0020a5c:	e4 60                	in     al,0x60
c0020a5e:	3c 5a                	cmp    al,0x5a
c0020a60:	74 fa                	je     c0020a5c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020a62:	3c 1c                	cmp    al,0x1c
c0020a64:	74 f6                	je     c0020a5c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020a66:	31 c0                	xor    eax,eax
c0020a68:	85 db                	test   ebx,ebx
c0020a6a:	0f 95 c0             	setne  al
c0020a6d:	83 c4 0c             	add    esp,0xc
c0020a70:	5b                   	pop    ebx
c0020a71:	5e                   	pop    esi
c0020a72:	5f                   	pop    edi
c0020a73:	5d                   	pop    ebp
c0020a74:	c3                   	ret    
c0020a75:	90                   	nop

c0020a76 <SATA::write(unsigned long long, int, void*)>:
c0020a76:	55                   	push   ebp
c0020a77:	57                   	push   edi
c0020a78:	56                   	push   esi
c0020a79:	53                   	push   ebx
c0020a7a:	83 ec 1c             	sub    esp,0x1c
c0020a7d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020a81:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020a85:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020a89:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020a8d:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020a94:	74 2d                	je     c0020ac3 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020a96:	83 ec 0c             	sub    esp,0xc
c0020a99:	68 c0 6c 02 c0       	push   0xc0026cc0
c0020a9e:	e8 c6 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020aa3:	83 c4 10             	add    esp,0x10
c0020aa6:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0020aad:	75 14                	jne    c0020ac3 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020aaf:	e4 60                	in     al,0x60
c0020ab1:	3c 1c                	cmp    al,0x1c
c0020ab3:	74 04                	je     c0020ab9 <SATA::write(unsigned long long, int, void*)+0x43>
c0020ab5:	3c 5a                	cmp    al,0x5a
c0020ab7:	75 f6                	jne    c0020aaf <SATA::write(unsigned long long, int, void*)+0x39>
c0020ab9:	e4 60                	in     al,0x60
c0020abb:	3c 5a                	cmp    al,0x5a
c0020abd:	74 fa                	je     c0020ab9 <SATA::write(unsigned long long, int, void*)+0x43>
c0020abf:	3c 1c                	cmp    al,0x1c
c0020ac1:	74 f6                	je     c0020ab9 <SATA::write(unsigned long long, int, void*)+0x43>
c0020ac3:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020ac6:	b8 04 00 00 00       	mov    eax,0x4
c0020acb:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020ad1:	0f 87 bd 00 00 00    	ja     c0020b94 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020ad7:	b8 06 00 00 00       	mov    eax,0x6
c0020adc:	85 db                	test   ebx,ebx
c0020ade:	0f 84 b0 00 00 00    	je     c0020b94 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020ae4:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020aeb:	74 2d                	je     c0020b1a <SATA::write(unsigned long long, int, void*)+0xa4>
c0020aed:	83 ec 0c             	sub    esp,0xc
c0020af0:	68 ce 6c 02 c0       	push   0xc0026cce
c0020af5:	e8 6f 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020afa:	83 c4 10             	add    esp,0x10
c0020afd:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0020b04:	75 14                	jne    c0020b1a <SATA::write(unsigned long long, int, void*)+0xa4>
c0020b06:	e4 60                	in     al,0x60
c0020b08:	3c 1c                	cmp    al,0x1c
c0020b0a:	74 04                	je     c0020b10 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020b0c:	3c 5a                	cmp    al,0x5a
c0020b0e:	75 f6                	jne    c0020b06 <SATA::write(unsigned long long, int, void*)+0x90>
c0020b10:	e4 60                	in     al,0x60
c0020b12:	3c 5a                	cmp    al,0x5a
c0020b14:	74 fa                	je     c0020b10 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020b16:	3c 1c                	cmp    al,0x1c
c0020b18:	74 f6                	je     c0020b10 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020b1a:	c1 e5 09             	shl    ebp,0x9
c0020b1d:	01 dd                	add    ebp,ebx
c0020b1f:	89 f0                	mov    eax,esi
c0020b21:	89 fa                	mov    edx,edi
c0020b23:	83 c0 01             	add    eax,0x1
c0020b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b2a:	83 d2 00             	adc    edx,0x0
c0020b2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020b31:	50                   	push   eax
c0020b32:	50                   	push   eax
c0020b33:	6a 01                	push   0x1
c0020b35:	53                   	push   ebx
c0020b36:	81 c3 00 02 00 00    	add    ebx,0x200
c0020b3c:	6a 01                	push   0x1
c0020b3e:	57                   	push   edi
c0020b3f:	56                   	push   esi
c0020b40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020b44:	e8 35 f8 ff ff       	call   c002037e <SATA::access(unsigned long long, int, void*, bool)>
c0020b49:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020b4d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020b51:	83 c4 20             	add    esp,0x20
c0020b54:	39 dd                	cmp    ebp,ebx
c0020b56:	75 c7                	jne    c0020b1f <SATA::write(unsigned long long, int, void*)+0xa9>
c0020b58:	f6 05 81 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f81,0x8
c0020b5f:	75 04                	jne    c0020b65 <SATA::write(unsigned long long, int, void*)+0xef>
c0020b61:	31 c0                	xor    eax,eax
c0020b63:	eb 2f                	jmp    c0020b94 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020b65:	83 ec 0c             	sub    esp,0xc
c0020b68:	68 dc 6c 02 c0       	push   0xc0026cdc
c0020b6d:	e8 f7 8e fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020b72:	83 c4 10             	add    esp,0x10
c0020b75:	f6 05 80 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f80,0x80
c0020b7c:	75 e3                	jne    c0020b61 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020b7e:	e4 60                	in     al,0x60
c0020b80:	3c 5a                	cmp    al,0x5a
c0020b82:	74 04                	je     c0020b88 <SATA::write(unsigned long long, int, void*)+0x112>
c0020b84:	3c 1c                	cmp    al,0x1c
c0020b86:	75 f6                	jne    c0020b7e <SATA::write(unsigned long long, int, void*)+0x108>
c0020b88:	e4 60                	in     al,0x60
c0020b8a:	3c 5a                	cmp    al,0x5a
c0020b8c:	74 fa                	je     c0020b88 <SATA::write(unsigned long long, int, void*)+0x112>
c0020b8e:	3c 1c                	cmp    al,0x1c
c0020b90:	74 f6                	je     c0020b88 <SATA::write(unsigned long long, int, void*)+0x112>
c0020b92:	eb cd                	jmp    c0020b61 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020b94:	83 c4 1c             	add    esp,0x1c
c0020b97:	5b                   	pop    ebx
c0020b98:	5e                   	pop    esi
c0020b99:	5f                   	pop    edi
c0020b9a:	5d                   	pop    ebp
c0020b9b:	c3                   	ret    

c0020b9c <SATAPI::write(unsigned long long, int, void*)>:
c0020b9c:	b8 03 00 00 00       	mov    eax,0x3
c0020ba1:	c3                   	ret    

c0020ba2 <SATAPI::close(int, int, void*)>:
c0020ba2:	83 ec 0c             	sub    esp,0xc
c0020ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ba9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020baf:	85 c0                	test   eax,eax
c0020bb1:	74 0c                	je     c0020bbf <SATAPI::close(int, int, void*)+0x1d>
c0020bb3:	83 ec 0c             	sub    esp,0xc
c0020bb6:	8b 10                	mov    edx,DWORD PTR [eax]
c0020bb8:	50                   	push   eax
c0020bb9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020bbc:	83 c4 10             	add    esp,0x10
c0020bbf:	31 c0                	xor    eax,eax
c0020bc1:	83 c4 0c             	add    esp,0xc
c0020bc4:	c3                   	ret    
c0020bc5:	90                   	nop

c0020bc6 <SATAPI::SATAPI()>:
c0020bc6:	83 ec 0c             	sub    esp,0xc
c0020bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bcd:	83 ec 04             	sub    esp,0x4
c0020bd0:	68 00 08 00 00       	push   0x800
c0020bd5:	68 24 6d 02 c0       	push   0xc0026d24
c0020bda:	50                   	push   eax
c0020bdb:	e8 c6 da fe ff       	call   c000e6a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020be0:	83 c4 10             	add    esp,0x10
c0020be3:	ba 60 6e 02 c0       	mov    edx,0xc0026e60
c0020be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bec:	89 10                	mov    DWORD PTR [eax],edx
c0020bee:	90                   	nop
c0020bef:	83 c4 0c             	add    esp,0xc
c0020bf2:	c3                   	ret    
c0020bf3:	90                   	nop

c0020bf4 <SATAPI::diskRemoved()>:
c0020bf4:	53                   	push   ebx
c0020bf5:	83 ec 14             	sub    esp,0x14
c0020bf8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020bfc:	68 30 6d 02 c0       	push   0xc0026d30
c0020c01:	e8 f5 c0 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020c06:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020c0d:	c7 04 24 84 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a84
c0020c14:	e8 e2 c0 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020c19:	58                   	pop    eax
c0020c1a:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0020c20:	e8 e9 f8 fe ff       	call   c001050e <LogicalDisk::unmount()>
c0020c25:	c7 04 24 93 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a93
c0020c2c:	e8 ca c0 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020c31:	5a                   	pop    edx
c0020c32:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020c38:	e8 d7 02 ff ff       	call   c0010f14 <VCache::writeWriteBuffer()>
c0020c3d:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020c43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020c47:	83 c4 18             	add    esp,0x18
c0020c4a:	5b                   	pop    ebx
c0020c4b:	e9 b4 02 ff ff       	jmp    c0010f04 <VCache::invalidateReadBuffer()>

c0020c50 <SATAPI::diskInserted()>:
c0020c50:	83 ec 18             	sub    esp,0x18
c0020c53:	68 47 6d 02 c0       	push   0xc0026d47
c0020c58:	e8 9e c0 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020c5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c61:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020c68:	83 c4 1c             	add    esp,0x1c
c0020c6b:	c3                   	ret    

c0020c6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020c6c:	55                   	push   ebp
c0020c6d:	57                   	push   edi
c0020c6e:	56                   	push   esi
c0020c6f:	53                   	push   ebx
c0020c70:	83 ec 38             	sub    esp,0x38
c0020c73:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020c77:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020c7b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020c7f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020c83:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020c87:	68 5f 6d 02 c0       	push   0xc0026d5f
c0020c8c:	e8 6a c0 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020c91:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020c97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020c9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ca1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020ca7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020cab:	c1 e0 07             	shl    eax,0x7
c0020cae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020cb2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020cb6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020cc0:	5a                   	pop    edx
c0020cc1:	59                   	pop    ecx
c0020cc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020cc6:	8d 58 02             	lea    ebx,[eax+0x2]
c0020cc9:	c1 e3 07             	shl    ebx,0x7
c0020ccc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020cd0:	53                   	push   ebx
c0020cd1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020cd7:	e8 c2 e3 ff ff       	call   c001f09e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020cdc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020ce0:	83 c4 10             	add    esp,0x10
c0020ce3:	b8 01 00 00 00       	mov    eax,0x1
c0020ce8:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020ced:	0f 84 04 02 00 00    	je     c0020ef7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0020cf3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020cf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020cfb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020d01:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020d07:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d0b:	c1 e1 05             	shl    ecx,0x5
c0020d0e:	01 c8                	add    eax,ecx
c0020d10:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020d12:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020d18:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020d1e:	89 08                	mov    DWORD PTR [eax],ecx
c0020d20:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020d26:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020d2c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020d32:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020d35:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020d38:	50                   	push   eax
c0020d39:	68 90 00 00 00       	push   0x90
c0020d3e:	6a 00                	push   0x0
c0020d40:	53                   	push   ebx
c0020d41:	e8 3e f9 fd ff       	call   c0000684 <memset>
c0020d46:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020d4a:	b9 0c 00 00 00       	mov    ecx,0xc
c0020d4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020d51:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020d57:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020d5b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020d61:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020d65:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020d69:	48                   	dec    eax
c0020d6a:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020d6f:	89 c1                	mov    ecx,eax
c0020d71:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020d77:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020d7c:	09 c8                	or     eax,ecx
c0020d7e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020d84:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020d87:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020d8e:	66 25 00 7f          	and    ax,0x7f00
c0020d92:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020d96:	66 0d 27 80          	or     ax,0x8027
c0020d9a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020d9e:	66 89 03             	mov    WORD PTR [ebx],ax
c0020da1:	89 d0                	mov    eax,edx
c0020da3:	c1 ea 18             	shr    edx,0x18
c0020da6:	c1 e8 10             	shr    eax,0x10
c0020da9:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020dac:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020daf:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020db3:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020db6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dba:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020dbd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020dc1:	83 c4 10             	add    esp,0x10
c0020dc4:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020dc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020dcc:	31 c0                	xor    eax,eax
c0020dce:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020dd4:	80 e1 88             	and    cl,0x88
c0020dd7:	74 0a                	je     c0020de3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020dd9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020dde:	74 0a                	je     c0020dea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0020de0:	40                   	inc    eax
c0020de1:	eb eb                	jmp    c0020dce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0020de3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020de8:	75 0f                	jne    c0020df9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18d>
c0020dea:	83 ec 0c             	sub    esp,0xc
c0020ded:	68 2a 6c 02 c0       	push   0xc0026c2a
c0020df2:	e8 10 3c ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0020df7:	eb 48                	jmp    c0020e41 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c0020df9:	be 01 00 00 00       	mov    esi,0x1
c0020dfe:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020e02:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e06:	d3 e6                	shl    esi,cl
c0020e08:	c1 e7 07             	shl    edi,0x7
c0020e0b:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020e11:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020e16:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020e1a:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020e20:	85 c6                	test   esi,eax
c0020e22:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020e28:	0f 84 96 00 00 00    	je     c0020ec4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x258>
c0020e2e:	0f ba e0 1e          	bt     eax,0x1e
c0020e32:	73 1a                	jae    c0020e4e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e2>
c0020e34:	83 ec 0c             	sub    esp,0xc
c0020e37:	68 79 6d 02 c0       	push   0xc0026d79
c0020e3c:	e8 ba be fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020e41:	83 c4 10             	add    esp,0x10
c0020e44:	b8 01 00 00 00       	mov    eax,0x1
c0020e49:	e9 a9 00 00 00       	jmp    c0020ef7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0020e4e:	83 fb 0d             	cmp    ebx,0xd
c0020e51:	77 12                	ja     c0020e65 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0020e53:	83 ec 0c             	sub    esp,0xc
c0020e56:	68 c8 00 00 00       	push   0xc8
c0020e5b:	e8 54 7b ff ff       	call   c00189b4 <milliTenthSleep(unsigned int)>
c0020e60:	83 c4 10             	add    esp,0x10
c0020e63:	eb 2a                	jmp    c0020e8f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0020e65:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020e6b:	83 f8 0d             	cmp    eax,0xd
c0020e6e:	77 0a                	ja     c0020e7a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20e>
c0020e70:	83 ec 0c             	sub    esp,0xc
c0020e73:	68 58 02 00 00       	push   0x258
c0020e78:	eb 28                	jmp    c0020ea2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0020e7a:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020e80:	83 f8 0d             	cmp    eax,0xd
c0020e83:	77 0a                	ja     c0020e8f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0020e85:	83 ec 0c             	sub    esp,0xc
c0020e88:	68 dc 05 00 00       	push   0x5dc
c0020e8d:	eb 13                	jmp    c0020ea2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0020e8f:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020e95:	83 f8 0d             	cmp    eax,0xd
c0020e98:	77 10                	ja     c0020eaa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23e>
c0020e9a:	83 ec 0c             	sub    esp,0xc
c0020e9d:	68 c4 09 00 00       	push   0x9c4
c0020ea2:	e8 0d 7b ff ff       	call   c00189b4 <milliTenthSleep(unsigned int)>
c0020ea7:	83 c4 10             	add    esp,0x10
c0020eaa:	43                   	inc    ebx
c0020eab:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020eb1:	0f 85 63 ff ff ff    	jne    c0020e1a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ae>
c0020eb7:	83 ec 0c             	sub    esp,0xc
c0020eba:	68 8c 6d 02 c0       	push   0xc0026d8c
c0020ebf:	e9 78 ff ff ff       	jmp    c0020e3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0020ec4:	0f ba e0 1e          	bt     eax,0x1e
c0020ec8:	73 0d                	jae    c0020ed7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26b>
c0020eca:	83 ec 0c             	sub    esp,0xc
c0020ecd:	68 a0 6d 02 c0       	push   0xc0026da0
c0020ed2:	e9 65 ff ff ff       	jmp    c0020e3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0020ed7:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020edc:	74 17                	je     c0020ef5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0020ede:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020ee3:	74 10                	je     c0020ef5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0020ee5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020eeb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020eef:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020ef3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020ef5:	31 c0                	xor    eax,eax
c0020ef7:	83 c4 2c             	add    esp,0x2c
c0020efa:	5b                   	pop    ebx
c0020efb:	5e                   	pop    esi
c0020efc:	5f                   	pop    edi
c0020efd:	5d                   	pop    ebp
c0020efe:	c3                   	ret    
c0020eff:	90                   	nop

c0020f00 <SATAPI::eject()>:
c0020f00:	57                   	push   edi
c0020f01:	b9 03 00 00 00       	mov    ecx,0x3
c0020f06:	53                   	push   ebx
c0020f07:	83 ec 14             	sub    esp,0x14
c0020f0a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020f0e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020f12:	fc                   	cld    
c0020f13:	31 c0                	xor    eax,eax
c0020f15:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020f17:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020f1c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020f21:	50                   	push   eax
c0020f22:	6a 00                	push   0x0
c0020f24:	6a 00                	push   0x0
c0020f26:	6a 00                	push   0x0
c0020f28:	6a 00                	push   0x0
c0020f2a:	6a 02                	push   0x2
c0020f2c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f30:	50                   	push   eax
c0020f31:	53                   	push   ebx
c0020f32:	e8 35 fd ff ff       	call   c0020c6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020f37:	83 c4 20             	add    esp,0x20
c0020f3a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020f41:	74 0c                	je     c0020f4f <SATAPI::eject()+0x4f>
c0020f43:	83 ec 0c             	sub    esp,0xc
c0020f46:	53                   	push   ebx
c0020f47:	e8 a8 fc ff ff       	call   c0020bf4 <SATAPI::diskRemoved()>
c0020f4c:	83 c4 10             	add    esp,0x10
c0020f4f:	83 c4 14             	add    esp,0x14
c0020f52:	31 c0                	xor    eax,eax
c0020f54:	5b                   	pop    ebx
c0020f55:	5f                   	pop    edi
c0020f56:	c3                   	ret    
c0020f57:	90                   	nop

c0020f58 <SATAPI::detectMedia()>:
c0020f58:	56                   	push   esi
c0020f59:	53                   	push   ebx
c0020f5a:	83 ec 30             	sub    esp,0x30
c0020f5d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020f61:	68 b5 6d 02 c0       	push   0xc0026db5
c0020f66:	e8 90 bd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020f6b:	83 c4 0c             	add    esp,0xc
c0020f6e:	6a 0c                	push   0xc
c0020f70:	6a 00                	push   0x0
c0020f72:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020f76:	56                   	push   esi
c0020f77:	e8 08 f7 fd ff       	call   c0000684 <memset>
c0020f7c:	83 c4 0c             	add    esp,0xc
c0020f7f:	6a 00                	push   0x0
c0020f81:	6a 00                	push   0x0
c0020f83:	6a 00                	push   0x0
c0020f85:	6a 00                	push   0x0
c0020f87:	6a 00                	push   0x0
c0020f89:	56                   	push   esi
c0020f8a:	53                   	push   ebx
c0020f8b:	e8 dc fc ff ff       	call   c0020c6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020f90:	83 c4 20             	add    esp,0x20
c0020f93:	48                   	dec    eax
c0020f94:	75 27                	jne    c0020fbd <SATAPI::detectMedia()+0x65>
c0020f96:	83 ec 0c             	sub    esp,0xc
c0020f99:	68 c9 6d 02 c0       	push   0xc0026dc9
c0020f9e:	e8 58 bd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020fa3:	83 c4 10             	add    esp,0x10
c0020fa6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020fad:	74 0e                	je     c0020fbd <SATAPI::detectMedia()+0x65>
c0020faf:	83 ec 0c             	sub    esp,0xc
c0020fb2:	53                   	push   ebx
c0020fb3:	e8 3c fc ff ff       	call   c0020bf4 <SATAPI::diskRemoved()>
c0020fb8:	e9 d1 00 00 00       	jmp    c002108e <SATAPI::detectMedia()+0x136>
c0020fbd:	50                   	push   eax
c0020fbe:	6a 0c                	push   0xc
c0020fc0:	6a 00                	push   0x0
c0020fc2:	56                   	push   esi
c0020fc3:	e8 bc f6 fd ff       	call   c0000684 <memset>
c0020fc8:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020fcd:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020fd2:	83 c4 0c             	add    esp,0xc
c0020fd5:	6a 01                	push   0x1
c0020fd7:	8d 44 24 16          	lea    eax,[esp+0x16]
c0020fdb:	50                   	push   eax
c0020fdc:	6a 00                	push   0x0
c0020fde:	6a 00                	push   0x0
c0020fe0:	6a 12                	push   0x12
c0020fe2:	56                   	push   esi
c0020fe3:	53                   	push   ebx
c0020fe4:	e8 83 fc ff ff       	call   c0020c6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020fe9:	83 c4 20             	add    esp,0x20
c0020fec:	48                   	dec    eax
c0020fed:	75 19                	jne    c0021008 <SATAPI::detectMedia()+0xb0>
c0020fef:	83 ec 0c             	sub    esp,0xc
c0020ff2:	68 d3 6d 02 c0       	push   0xc0026dd3
c0020ff7:	e8 ff bc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020ffc:	83 c4 10             	add    esp,0x10
c0020fff:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021006:	75 a7                	jne    c0020faf <SATAPI::detectMedia()+0x57>
c0021008:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c002100c:	83 e0 7f             	and    eax,0x7f
c002100f:	3c 70                	cmp    al,0x70
c0021011:	74 25                	je     c0021038 <SATAPI::detectMedia()+0xe0>
c0021013:	83 ec 0c             	sub    esp,0xc
c0021016:	68 dd 6d 02 c0       	push   0xc0026ddd
c002101b:	e8 db bc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0021020:	83 c4 10             	add    esp,0x10
c0021023:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002102a:	75 0c                	jne    c0021038 <SATAPI::detectMedia()+0xe0>
c002102c:	83 ec 0c             	sub    esp,0xc
c002102f:	53                   	push   ebx
c0021030:	e8 1b fc ff ff       	call   c0020c50 <SATAPI::diskInserted()>
c0021035:	83 c4 10             	add    esp,0x10
c0021038:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002103c:	83 e0 0f             	and    eax,0xf
c002103f:	3c 02                	cmp    al,0x2
c0021041:	75 25                	jne    c0021068 <SATAPI::detectMedia()+0x110>
c0021043:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021048:	75 47                	jne    c0021091 <SATAPI::detectMedia()+0x139>
c002104a:	83 ec 0c             	sub    esp,0xc
c002104d:	68 e6 6d 02 c0       	push   0xc0026de6
c0021052:	e8 a4 bc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0021057:	83 c4 10             	add    esp,0x10
c002105a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021061:	74 2e                	je     c0021091 <SATAPI::detectMedia()+0x139>
c0021063:	e9 47 ff ff ff       	jmp    c0020faf <SATAPI::detectMedia()+0x57>
c0021068:	84 c0                	test   al,al
c002106a:	75 25                	jne    c0021091 <SATAPI::detectMedia()+0x139>
c002106c:	83 ec 0c             	sub    esp,0xc
c002106f:	68 ef 6d 02 c0       	push   0xc0026def
c0021074:	e8 82 bc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0021079:	83 c4 10             	add    esp,0x10
c002107c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021083:	75 0c                	jne    c0021091 <SATAPI::detectMedia()+0x139>
c0021085:	83 ec 0c             	sub    esp,0xc
c0021088:	53                   	push   ebx
c0021089:	e8 c2 fb ff ff       	call   c0020c50 <SATAPI::diskInserted()>
c002108e:	83 c4 10             	add    esp,0x10
c0021091:	83 c4 24             	add    esp,0x24
c0021094:	5b                   	pop    ebx
c0021095:	5e                   	pop    esi
c0021096:	c3                   	ret    
c0021097:	90                   	nop

c0021098 <SATAPI::open(int, int, void*)>:
c0021098:	56                   	push   esi
c0021099:	53                   	push   ebx
c002109a:	51                   	push   ecx
c002109b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002109f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00210a3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00210ad:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00210b3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00210bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210c1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00210cb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00210d1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00210d8:	e8 e9 8f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c00210dd:	89 c6                	mov    esi,eax
c00210df:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00210e5:	81 c6 00 10 00 00    	add    esi,0x1000
c00210eb:	e8 d6 8f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c00210f0:	39 c6                	cmp    esi,eax
c00210f2:	74 10                	je     c0021104 <SATAPI::open(int, int, void*)+0x6c>
c00210f4:	83 ec 0c             	sub    esp,0xc
c00210f7:	68 f9 6d 02 c0       	push   0xc0026df9
c00210fc:	e8 06 39 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0021101:	83 c4 10             	add    esp,0x10
c0021104:	83 ec 0c             	sub    esp,0xc
c0021107:	6a 02                	push   0x2
c0021109:	e8 c7 a8 fe ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c002110e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021114:	6a 03                	push   0x3
c0021116:	50                   	push   eax
c0021117:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002111d:	ff 35 90 80 02 c0    	push   DWORD PTR ds:0xc0028090
c0021123:	e8 54 af fe ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c0021128:	83 c4 14             	add    esp,0x14
c002112b:	68 74 01 00 00       	push   0x174
c0021130:	e8 da 88 fe ff       	call   c0009a0f <malloc>
c0021135:	83 c4 0c             	add    esp,0xc
c0021138:	89 c6                	mov    esi,eax
c002113a:	6a 00                	push   0x0
c002113c:	68 ff ff ff 7f       	push   0x7fffffff
c0021141:	6a 00                	push   0x0
c0021143:	6a 00                	push   0x0
c0021145:	53                   	push   ebx
c0021146:	68 0f 6e 02 c0       	push   0xc0026e0f
c002114b:	50                   	push   eax
c002114c:	e8 c9 f1 fe ff       	call   c001031a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021151:	83 c4 14             	add    esp,0x14
c0021154:	56                   	push   esi
c0021155:	e8 76 f2 fe ff       	call   c00103d0 <LogicalDisk::assignDriveLetter()>
c002115a:	5a                   	pop    edx
c002115b:	0f be c0             	movsx  eax,al
c002115e:	59                   	pop    ecx
c002115f:	50                   	push   eax
c0021160:	68 a1 6a 02 c0       	push   0xc0026aa1
c0021165:	e8 91 bb fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c002116a:	58                   	pop    eax
c002116b:	5a                   	pop    edx
c002116c:	56                   	push   esi
c002116d:	53                   	push   ebx
c002116e:	e8 fb d0 fe ff       	call   c000e26e <Device::addChild(Device*)>
c0021173:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021179:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002117c:	e8 8d d5 fe ff       	call   c000e70e <PhysicalDisk::startCache()>
c0021181:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021188:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002118b:	e8 c8 fd ff ff       	call   c0020f58 <SATAPI::detectMedia()>
c0021190:	83 c4 14             	add    esp,0x14
c0021193:	31 c0                	xor    eax,eax
c0021195:	5b                   	pop    ebx
c0021196:	5e                   	pop    esi
c0021197:	c3                   	ret    

c0021198 <SATAPI::read(unsigned long long, int, void*)>:
c0021198:	55                   	push   ebp
c0021199:	57                   	push   edi
c002119a:	56                   	push   esi
c002119b:	53                   	push   ebx
c002119c:	83 ec 48             	sub    esp,0x48
c002119f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00211a3:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00211a7:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00211ab:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00211af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00211b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00211b7:	68 1d 6e 02 c0       	push   0xc0026e1d
c00211bc:	e8 3a bb fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00211c1:	83 c4 10             	add    esp,0x10
c00211c4:	83 fb 04             	cmp    ebx,0x4
c00211c7:	7e 10                	jle    c00211d9 <SATAPI::read(unsigned long long, int, void*)+0x41>
c00211c9:	83 ec 0c             	sub    esp,0xc
c00211cc:	68 2e 6e 02 c0       	push   0xc0026e2e
c00211d1:	e8 31 38 ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c00211d6:	83 c4 10             	add    esp,0x10
c00211d9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00211dd:	31 ed                	xor    ebp,ebp
c00211df:	b9 03 00 00 00       	mov    ecx,0x3
c00211e4:	fc                   	cld    
c00211e5:	89 e8                	mov    eax,ebp
c00211e7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00211e9:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c00211ee:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00211f3:	50                   	push   eax
c00211f4:	6a 00                	push   0x0
c00211f6:	6a 00                	push   0x0
c00211f8:	6a 00                	push   0x0
c00211fa:	6a 00                	push   0x0
c00211fc:	6a 02                	push   0x2
c00211fe:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021202:	50                   	push   eax
c0021203:	56                   	push   esi
c0021204:	e8 63 fa ff ff       	call   c0020c6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021209:	8d 7c 24 44          	lea    edi,[esp+0x44]
c002120d:	89 e8                	mov    eax,ebp
c002120f:	b9 03 00 00 00       	mov    ecx,0x3
c0021214:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021216:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002121a:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c002121e:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021223:	86 e0                	xchg   al,ah
c0021225:	c1 c0 10             	rol    eax,0x10
c0021228:	86 e0                	xchg   al,ah
c002122a:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c002122e:	83 c4 1c             	add    esp,0x1c
c0021231:	53                   	push   ebx
c0021232:	c1 e3 0b             	shl    ebx,0xb
c0021235:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0021239:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002123d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021241:	53                   	push   ebx
c0021242:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021246:	50                   	push   eax
c0021247:	56                   	push   esi
c0021248:	e8 1f fa ff ff       	call   c0020c6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002124d:	83 c4 20             	add    esp,0x20
c0021250:	85 c0                	test   eax,eax
c0021252:	74 14                	je     c0021268 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0021254:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021258:	83 ec 0c             	sub    esp,0xc
c002125b:	56                   	push   esi
c002125c:	e8 f7 fc ff ff       	call   c0020f58 <SATAPI::detectMedia()>
c0021261:	83 c4 10             	add    esp,0x10
c0021264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021268:	83 c4 3c             	add    esp,0x3c
c002126b:	5b                   	pop    ebx
c002126c:	5e                   	pop    esi
c002126d:	5f                   	pop    edi
c002126e:	5d                   	pop    ebp
c002126f:	c3                   	ret    

c0021270 <AVX::open(int, int, void*)>:
c0021270:	83 ec 0c             	sub    esp,0xc
c0021273:	e8 30 11 00 00       	call   c00223a8 <avxInit>
c0021278:	b8 00 00 00 00       	mov    eax,0x0
c002127d:	83 c4 0c             	add    esp,0xc
c0021280:	c3                   	ret    
c0021281:	90                   	nop
c0021282:	66 90                	xchg   ax,ax

c0021284 <AVX::close(int, int, void*)>:
c0021284:	83 ec 0c             	sub    esp,0xc
c0021287:	e8 1d 11 00 00       	call   c00223a9 <avxClose>
c002128c:	b8 00 00 00 00       	mov    eax,0x0
c0021291:	83 c4 0c             	add    esp,0xc
c0021294:	c3                   	ret    
c0021295:	90                   	nop
c0021296:	66 90                	xchg   ax,ax

c0021298 <AVX::available()>:
c0021298:	83 ec 0c             	sub    esp,0xc
c002129b:	e8 00 11 00 00       	call   c00223a0 <avxDetect>
c00212a0:	85 c0                	test   eax,eax
c00212a2:	0f 95 c0             	setne  al
c00212a5:	83 c4 0c             	add    esp,0xc
c00212a8:	c3                   	ret    
c00212a9:	90                   	nop
c00212aa:	66 90                	xchg   ax,ax

c00212ac <AVX::save(void*)>:
c00212ac:	83 ec 0c             	sub    esp,0xc
c00212af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212b3:	83 ec 0c             	sub    esp,0xc
c00212b6:	50                   	push   eax
c00212b7:	e8 ea 10 00 00       	call   c00223a6 <avxSave>
c00212bc:	83 c4 10             	add    esp,0x10
c00212bf:	90                   	nop
c00212c0:	83 c4 0c             	add    esp,0xc
c00212c3:	c3                   	ret    

c00212c4 <AVX::load(void*)>:
c00212c4:	83 ec 0c             	sub    esp,0xc
c00212c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212cb:	83 ec 0c             	sub    esp,0xc
c00212ce:	50                   	push   eax
c00212cf:	e8 d3 10 00 00       	call   c00223a7 <avxLoad>
c00212d4:	83 c4 10             	add    esp,0x10
c00212d7:	90                   	nop
c00212d8:	83 c4 0c             	add    esp,0xc
c00212db:	c3                   	ret    

c00212dc <AVX::AVX()>:
c00212dc:	83 ec 0c             	sub    esp,0xc
c00212df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e3:	83 ec 08             	sub    esp,0x8
c00212e6:	68 90 6e 02 c0       	push   0xc0026e90
c00212eb:	50                   	push   eax
c00212ec:	e8 93 d4 fe ff       	call   c000e784 <FPU::FPU(char const*)>
c00212f1:	83 c4 10             	add    esp,0x10
c00212f4:	ba a0 6e 02 c0       	mov    edx,0xc0026ea0
c00212f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212fd:	89 10                	mov    DWORD PTR [eax],edx
c00212ff:	90                   	nop
c0021300:	83 c4 0c             	add    esp,0xc
c0021303:	c3                   	ret    

c0021304 <MMX::available()>:
c0021304:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0021309:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002130f:	83 e0 20             	and    eax,0x20
c0021312:	84 c0                	test   al,al
c0021314:	0f 95 c0             	setne  al
c0021317:	c3                   	ret    

c0021318 <MMX::open(int, int, void*)>:
c0021318:	83 ec 0c             	sub    esp,0xc
c002131b:	e8 12 11 00 00       	call   c0022432 <x87Init>
c0021320:	b8 00 00 00 00       	mov    eax,0x0
c0021325:	83 c4 0c             	add    esp,0xc
c0021328:	c3                   	ret    
c0021329:	90                   	nop
c002132a:	66 90                	xchg   ax,ax

c002132c <MMX::close(int, int, void*)>:
c002132c:	83 ec 0c             	sub    esp,0xc
c002132f:	e8 18 11 00 00       	call   c002244c <x87Close>
c0021334:	b8 00 00 00 00       	mov    eax,0x0
c0021339:	83 c4 0c             	add    esp,0xc
c002133c:	c3                   	ret    
c002133d:	90                   	nop
c002133e:	66 90                	xchg   ax,ax

c0021340 <MMX::save(void*)>:
c0021340:	83 ec 0c             	sub    esp,0xc
c0021343:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021347:	83 ec 0c             	sub    esp,0xc
c002134a:	50                   	push   eax
c002134b:	e8 d1 10 00 00       	call   c0022421 <x87Save>
c0021350:	83 c4 10             	add    esp,0x10
c0021353:	90                   	nop
c0021354:	83 c4 0c             	add    esp,0xc
c0021357:	c3                   	ret    

c0021358 <MMX::load(void*)>:
c0021358:	83 ec 0c             	sub    esp,0xc
c002135b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002135f:	83 ec 0c             	sub    esp,0xc
c0021362:	50                   	push   eax
c0021363:	e8 c2 10 00 00       	call   c002242a <x87Load>
c0021368:	83 c4 10             	add    esp,0x10
c002136b:	90                   	nop
c002136c:	83 c4 0c             	add    esp,0xc
c002136f:	c3                   	ret    

c0021370 <MMX::MMX()>:
c0021370:	83 ec 0c             	sub    esp,0xc
c0021373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021377:	83 ec 08             	sub    esp,0x8
c002137a:	68 d0 6e 02 c0       	push   0xc0026ed0
c002137f:	50                   	push   eax
c0021380:	e8 ff d3 fe ff       	call   c000e784 <FPU::FPU(char const*)>
c0021385:	83 c4 10             	add    esp,0x10
c0021388:	ba e0 6e 02 c0       	mov    edx,0xc0026ee0
c002138d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021391:	89 10                	mov    DWORD PTR [eax],edx
c0021393:	90                   	nop
c0021394:	83 c4 0c             	add    esp,0xc
c0021397:	c3                   	ret    

c0021398 <SSE::open(int, int, void*)>:
c0021398:	83 ec 0c             	sub    esp,0xc
c002139b:	e8 44 10 00 00       	call   c00223e4 <sseInit>
c00213a0:	b8 00 00 00 00       	mov    eax,0x0
c00213a5:	83 c4 0c             	add    esp,0xc
c00213a8:	c3                   	ret    
c00213a9:	90                   	nop
c00213aa:	66 90                	xchg   ax,ax

c00213ac <SSE::close(int, int, void*)>:
c00213ac:	83 ec 0c             	sub    esp,0xc
c00213af:	e8 40 10 00 00       	call   c00223f4 <sseClose>
c00213b4:	b8 00 00 00 00       	mov    eax,0x0
c00213b9:	83 c4 0c             	add    esp,0xc
c00213bc:	c3                   	ret    
c00213bd:	90                   	nop
c00213be:	66 90                	xchg   ax,ax

c00213c0 <SSE::available()>:
c00213c0:	83 ec 1c             	sub    esp,0x1c
c00213c3:	e8 f8 0f 00 00       	call   c00223c0 <absolutelyNoChanceInHell>
c00213c8:	85 c0                	test   eax,eax
c00213ca:	0f 95 c0             	setne  al
c00213cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00213d1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00213d5:	83 c4 1c             	add    esp,0x1c
c00213d8:	c3                   	ret    
c00213d9:	90                   	nop
c00213da:	66 90                	xchg   ax,ax

c00213dc <SSE::save(void*)>:
c00213dc:	83 ec 0c             	sub    esp,0xc
c00213df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213e3:	83 ec 0c             	sub    esp,0xc
c00213e6:	50                   	push   eax
c00213e7:	e8 ec 0f 00 00       	call   c00223d8 <sseSave>
c00213ec:	83 c4 10             	add    esp,0x10
c00213ef:	90                   	nop
c00213f0:	83 c4 0c             	add    esp,0xc
c00213f3:	c3                   	ret    

c00213f4 <SSE::load(void*)>:
c00213f4:	83 ec 0c             	sub    esp,0xc
c00213f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213fb:	83 ec 0c             	sub    esp,0xc
c00213fe:	50                   	push   eax
c00213ff:	e8 da 0f 00 00       	call   c00223de <sseLoad>
c0021404:	83 c4 10             	add    esp,0x10
c0021407:	90                   	nop
c0021408:	83 c4 0c             	add    esp,0xc
c002140b:	c3                   	ret    

c002140c <SSE::SSE()>:
c002140c:	83 ec 0c             	sub    esp,0xc
c002140f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021413:	83 ec 08             	sub    esp,0x8
c0021416:	68 10 6f 02 c0       	push   0xc0026f10
c002141b:	50                   	push   eax
c002141c:	e8 63 d3 fe ff       	call   c000e784 <FPU::FPU(char const*)>
c0021421:	83 c4 10             	add    esp,0x10
c0021424:	ba 20 6f 02 c0       	mov    edx,0xc0026f20
c0021429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002142d:	89 10                	mov    DWORD PTR [eax],edx
c002142f:	90                   	nop
c0021430:	83 c4 0c             	add    esp,0xc
c0021433:	c3                   	ret    

c0021434 <x87::open(int, int, void*)>:
c0021434:	83 ec 0c             	sub    esp,0xc
c0021437:	e8 f6 0f 00 00       	call   c0022432 <x87Init>
c002143c:	b8 00 00 00 00       	mov    eax,0x0
c0021441:	83 c4 0c             	add    esp,0xc
c0021444:	c3                   	ret    
c0021445:	90                   	nop
c0021446:	66 90                	xchg   ax,ax

c0021448 <x87::close(int, int, void*)>:
c0021448:	83 ec 0c             	sub    esp,0xc
c002144b:	e8 fc 0f 00 00       	call   c002244c <x87Close>
c0021450:	b8 00 00 00 00       	mov    eax,0x0
c0021455:	83 c4 0c             	add    esp,0xc
c0021458:	c3                   	ret    
c0021459:	90                   	nop
c002145a:	66 90                	xchg   ax,ax

c002145c <x87::available()>:
c002145c:	83 ec 0c             	sub    esp,0xc
c002145f:	e8 a2 0f 00 00       	call   c0022406 <x87Detect>
c0021464:	85 c0                	test   eax,eax
c0021466:	0f 95 c0             	setne  al
c0021469:	83 c4 0c             	add    esp,0xc
c002146c:	c3                   	ret    
c002146d:	90                   	nop
c002146e:	66 90                	xchg   ax,ax

c0021470 <x87::save(void*)>:
c0021470:	83 ec 0c             	sub    esp,0xc
c0021473:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021477:	83 ec 0c             	sub    esp,0xc
c002147a:	50                   	push   eax
c002147b:	e8 a1 0f 00 00       	call   c0022421 <x87Save>
c0021480:	83 c4 10             	add    esp,0x10
c0021483:	90                   	nop
c0021484:	83 c4 0c             	add    esp,0xc
c0021487:	c3                   	ret    

c0021488 <x87::load(void*)>:
c0021488:	83 ec 0c             	sub    esp,0xc
c002148b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002148f:	83 ec 0c             	sub    esp,0xc
c0021492:	50                   	push   eax
c0021493:	e8 92 0f 00 00       	call   c002242a <x87Load>
c0021498:	83 c4 10             	add    esp,0x10
c002149b:	90                   	nop
c002149c:	83 c4 0c             	add    esp,0xc
c002149f:	c3                   	ret    

c00214a0 <x87::x87()>:
c00214a0:	83 ec 0c             	sub    esp,0xc
c00214a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a7:	83 ec 08             	sub    esp,0x8
c00214aa:	68 50 6f 02 c0       	push   0xc0026f50
c00214af:	50                   	push   eax
c00214b0:	e8 cf d2 fe ff       	call   c000e784 <FPU::FPU(char const*)>
c00214b5:	83 c4 10             	add    esp,0x10
c00214b8:	ba 60 6f 02 c0       	mov    edx,0xc0026f60
c00214bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c1:	89 10                	mov    DWORD PTR [eax],edx
c00214c3:	90                   	nop
c00214c4:	83 c4 0c             	add    esp,0xc
c00214c7:	c3                   	ret    

c00214c8 <APIC::disable()>:
c00214c8:	90                   	nop
c00214c9:	c3                   	ret    

c00214ca <APIC::close(int, int, void*)>:
c00214ca:	55                   	push   ebp
c00214cb:	89 e5                	mov    ebp,esp
c00214cd:	83 ec 08             	sub    esp,0x8
c00214d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00214d5:	83 c0 3c             	add    eax,0x3c
c00214d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00214da:	83 ec 0c             	sub    esp,0xc
c00214dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00214e0:	ff d0                	call   eax
c00214e2:	83 c4 10             	add    esp,0x10
c00214e5:	b8 00 00 00 00       	mov    eax,0x0
c00214ea:	c9                   	leave  
c00214eb:	c3                   	ret    

c00214ec <IOAPIC::close(int, int, void*)>:
c00214ec:	b8 00 00 00 00       	mov    eax,0x0
c00214f1:	c3                   	ret    

c00214f2 <APIC::io_wait()>:
c00214f2:	eb 00                	jmp    c00214f4 <APIC::io_wait()+0x2>
c00214f4:	eb 00                	jmp    c00214f6 <APIC::io_wait()+0x4>
c00214f6:	90                   	nop
c00214f7:	c3                   	ret    

c00214f8 <APIC::getBase()>:
c00214f8:	55                   	push   ebp
c00214f9:	89 e5                	mov    ebp,esp
c00214fb:	83 ec 18             	sub    esp,0x18
c00214fe:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0021503:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021509:	83 e0 08             	and    eax,0x8
c002150c:	84 c0                	test   al,al
c002150e:	75 07                	jne    c0021517 <APIC::getBase()+0x1f>
c0021510:	b8 00 00 00 00       	mov    eax,0x0
c0021515:	eb 21                	jmp    c0021538 <APIC::getBase()+0x40>
c0021517:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c002151c:	83 ec 08             	sub    esp,0x8
c002151f:	6a 1b                	push   0x1b
c0021521:	50                   	push   eax
c0021522:	e8 03 7a fe ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0021527:	83 c4 10             	add    esp,0x10
c002152a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002152d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021530:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021533:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021538:	c9                   	leave  
c0021539:	c3                   	ret    

c002153a <APIC::eoi(unsigned char)>:
c002153a:	55                   	push   ebp
c002153b:	89 e5                	mov    ebp,esp
c002153d:	83 ec 28             	sub    esp,0x28
c0021540:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021543:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021546:	83 ec 0c             	sub    esp,0xc
c0021549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002154c:	e8 a7 ff ff ff       	call   c00214f8 <APIC::getBase()>
c0021551:	83 c4 10             	add    esp,0x10
c0021554:	05 b0 00 00 00       	add    eax,0xb0
c0021559:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002155c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002155f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021565:	90                   	nop
c0021566:	c9                   	leave  
c0021567:	c3                   	ret    

c0021568 <APIC::open(int, int, void*)>:
c0021568:	55                   	push   ebp
c0021569:	89 e5                	mov    ebp,esp
c002156b:	57                   	push   edi
c002156c:	56                   	push   esi
c002156d:	53                   	push   ebx
c002156e:	83 ec 2c             	sub    esp,0x2c
c0021571:	83 ec 0c             	sub    esp,0xc
c0021574:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021577:	e8 7c ff ff ff       	call   c00214f8 <APIC::getBase()>
c002157c:	83 c4 10             	add    esp,0x10
c002157f:	89 c2                	mov    edx,eax
c0021581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021584:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002158a:	0f b6 f8             	movzx  edi,al
c002158d:	89 d0                	mov    eax,edx
c002158f:	ba 00 00 00 00       	mov    edx,0x0
c0021594:	89 c1                	mov    ecx,eax
c0021596:	80 e5 ff             	and    ch,0xff
c0021599:	89 cb                	mov    ebx,ecx
c002159b:	0f b6 f2             	movzx  esi,dl
c002159e:	89 d8                	mov    eax,ebx
c00215a0:	89 f2                	mov    edx,esi
c00215a2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00215a5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00215a8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00215ac:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00215b0:	83 e0 00             	and    eax,0x0
c00215b3:	09 d0                	or     eax,edx
c00215b5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00215b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215bc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00215c2:	8d 50 01             	lea    edx,[eax+0x1]
c00215c5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00215c8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00215ce:	0f b6 d0             	movzx  edx,al
c00215d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215d4:	83 c2 08             	add    edx,0x8
c00215d7:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00215db:	0f b6 c9             	movzx  ecx,cl
c00215de:	81 c9 00 00 01 00    	or     ecx,0x10000
c00215e4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00215e8:	83 ec 0c             	sub    esp,0xc
c00215eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00215ee:	e8 05 ff ff ff       	call   c00214f8 <APIC::getBase()>
c00215f3:	83 c4 10             	add    esp,0x10
c00215f6:	05 f0 00 00 00       	add    eax,0xf0
c00215fb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00215fe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021601:	8b 00                	mov    eax,DWORD PTR [eax]
c0021603:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021606:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002160d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021614:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021617:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002161a:	89 10                	mov    DWORD PTR [eax],edx
c002161c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021623:	a1 d0 87 02 c0       	mov    eax,ds:0xc00287d0
c0021628:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002162b:	7d 7c                	jge    c00216a9 <APIC::open(int, int, void*)+0x141>
c002162d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021630:	8b 04 85 e0 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7820]
c0021637:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002163a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002163d:	8b 04 85 e0 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7820]
c0021644:	c1 e8 08             	shr    eax,0x8
c0021647:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002164b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002164e:	8b 04 85 e0 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7820]
c0021655:	c1 e8 18             	shr    eax,0x18
c0021658:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002165b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002165f:	75 40                	jne    c00216a1 <APIC::open(int, int, void*)+0x139>
c0021661:	83 ec 0c             	sub    esp,0xc
c0021664:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021667:	e8 8c fe ff ff       	call   c00214f8 <APIC::getBase()>
c002166c:	83 c4 10             	add    esp,0x10
c002166f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021673:	75 07                	jne    c002167c <APIC::open(int, int, void*)+0x114>
c0021675:	ba 60 03 00 00       	mov    edx,0x360
c002167a:	eb 05                	jmp    c0021681 <APIC::open(int, int, void*)+0x119>
c002167c:	ba 50 03 00 00       	mov    edx,0x350
c0021681:	01 d0                	add    eax,edx
c0021683:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021686:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021689:	8b 00                	mov    eax,DWORD PTR [eax]
c002168b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002168e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021695:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021699:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002169c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002169f:	89 10                	mov    DWORD PTR [eax],edx
c00216a1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00216a4:	e9 7a ff ff ff       	jmp    c0021623 <APIC::open(int, int, void*)+0xbb>
c00216a9:	b8 00 00 00 00       	mov    eax,0x0
c00216ae:	8d 65 f4             	lea    esp,[ebp-0xc]
c00216b1:	5b                   	pop    ebx
c00216b2:	5e                   	pop    esi
c00216b3:	5f                   	pop    edi
c00216b4:	5d                   	pop    ebp
c00216b5:	c3                   	ret    

c00216b6 <IOAPIC::IOAPIC()>:
c00216b6:	83 ec 0c             	sub    esp,0xc
c00216b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216bd:	83 ec 08             	sub    esp,0x8
c00216c0:	68 90 6f 02 c0       	push   0xc0026f90
c00216c5:	50                   	push   eax
c00216c6:	e8 a7 cd fe ff       	call   c000e472 <Device::Device(char const*)>
c00216cb:	83 c4 10             	add    esp,0x10
c00216ce:	ba b8 70 02 c0       	mov    edx,0xc00270b8
c00216d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216d7:	89 10                	mov    DWORD PTR [eax],edx
c00216d9:	90                   	nop
c00216da:	83 c4 0c             	add    esp,0xc
c00216dd:	c3                   	ret    

c00216de <APIC::APIC()>:
c00216de:	53                   	push   ebx
c00216df:	83 ec 18             	sub    esp,0x18
c00216e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216e6:	83 ec 08             	sub    esp,0x8
c00216e9:	68 98 6f 02 c0       	push   0xc0026f98
c00216ee:	50                   	push   eax
c00216ef:	e8 f6 d4 fe ff       	call   c000ebea <InterruptController::InterruptController(char const*)>
c00216f4:	83 c4 10             	add    esp,0x10
c00216f7:	ba 70 70 02 c0       	mov    edx,0xc0027070
c00216fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021700:	89 10                	mov    DWORD PTR [eax],edx
c0021702:	a0 00 9f 02 c0       	mov    al,ds:0xc0029f00
c0021707:	83 f0 01             	xor    eax,0x1
c002170a:	84 c0                	test   al,al
c002170c:	0f 84 a1 00 00 00    	je     c00217b3 <APIC::APIC()+0xd5>
c0021712:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021717:	a0 80 88 02 c0       	mov    al,ds:0xc0028880
c002171c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021720:	0f 83 86 00 00 00    	jae    c00217ac <APIC::APIC()+0xce>
c0021726:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002172e:	83 ec 0c             	sub    esp,0xc
c0021731:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021735:	e8 d5 82 fe ff       	call   c0009a0f <malloc>
c002173a:	83 c4 10             	add    esp,0x10
c002173d:	89 c3                	mov    ebx,eax
c002173f:	83 ec 0c             	sub    esp,0xc
c0021742:	53                   	push   ebx
c0021743:	e8 6e ff ff ff       	call   c00216b6 <IOAPIC::IOAPIC()>
c0021748:	83 c4 10             	add    esp,0x10
c002174b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002174f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021754:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021758:	89 14 85 e0 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6120],edx
c002175f:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c0021764:	40                   	inc    eax
c0021765:	a3 c0 9e 02 c0       	mov    ds:0xc0029ec0,eax
c002176a:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c002176f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021775:	83 ec 08             	sub    esp,0x8
c0021778:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002177c:	50                   	push   eax
c002177d:	e8 ec ca fe ff       	call   c000e26e <Device::addChild(Device*)>
c0021782:	83 c4 10             	add    esp,0x10
c0021785:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021789:	8b 00                	mov    eax,DWORD PTR [eax]
c002178b:	83 c0 08             	add    eax,0x8
c002178e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021790:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021795:	6a 00                	push   0x0
c0021797:	6a 00                	push   0x0
c0021799:	52                   	push   edx
c002179a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002179e:	ff d0                	call   eax
c00217a0:	83 c4 10             	add    esp,0x10
c00217a3:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00217a7:	e9 6b ff ff ff       	jmp    c0021717 <APIC::APIC()+0x39>
c00217ac:	c6 05 00 9f 02 c0 01 	mov    BYTE PTR ds:0xc0029f00,0x1
c00217b3:	90                   	nop
c00217b4:	83 c4 18             	add    esp,0x18
c00217b7:	5b                   	pop    ebx
c00217b8:	c3                   	ret    
c00217b9:	90                   	nop

c00217ba <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00217ba:	55                   	push   ebp
c00217bb:	89 e5                	mov    ebp,esp
c00217bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00217c6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00217c9:	72 1d                	jb     c00217e8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00217cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217ce:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00217d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217d7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00217dd:	01 d0                	add    eax,edx
c00217df:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00217e2:	73 04                	jae    c00217e8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00217e4:	b0 01                	mov    al,0x1
c00217e6:	eb 02                	jmp    c00217ea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00217e8:	b0 00                	mov    al,0x0
c00217ea:	5d                   	pop    ebp
c00217eb:	c3                   	ret    

c00217ec <IOAPIC::read(int)>:
c00217ec:	55                   	push   ebp
c00217ed:	89 e5                	mov    ebp,esp
c00217ef:	83 ec 10             	sub    esp,0x10
c00217f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00217fb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00217fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021801:	0f b6 d0             	movzx  edx,al
c0021804:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021807:	89 10                	mov    DWORD PTR [eax],edx
c0021809:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002180c:	83 c0 10             	add    eax,0x10
c002180f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021811:	c9                   	leave  
c0021812:	c3                   	ret    
c0021813:	90                   	nop

c0021814 <IOAPIC::open(int, int, void*)>:
c0021814:	55                   	push   ebp
c0021815:	89 e5                	mov    ebp,esp
c0021817:	57                   	push   edi
c0021818:	56                   	push   esi
c0021819:	53                   	push   ebx
c002181a:	83 ec 0c             	sub    esp,0xc
c002181d:	83 ec 0c             	sub    esp,0xc
c0021820:	68 c3 6f 02 c0       	push   0xc0026fc3
c0021825:	e8 d1 b4 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c002182a:	83 c4 10             	add    esp,0x10
c002182d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021830:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021833:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002183c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021842:	8b 14 85 c0 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7740]
c0021849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002184c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021855:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002185b:	8b 14 85 40 89 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd76c0]
c0021862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021865:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002186b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002186e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021877:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002187d:	0f b6 f8             	movzx  edi,al
c0021880:	89 d0                	mov    eax,edx
c0021882:	ba 00 00 00 00       	mov    edx,0x0
c0021887:	89 c1                	mov    ecx,eax
c0021889:	80 e5 ff             	and    ch,0xff
c002188c:	89 cb                	mov    ebx,ecx
c002188e:	0f b6 f2             	movzx  esi,dl
c0021891:	89 d8                	mov    eax,ebx
c0021893:	89 f2                	mov    edx,esi
c0021895:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021898:	8d 5f 08             	lea    ebx,[edi+0x8]
c002189b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002189f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00218a3:	83 e0 00             	and    eax,0x0
c00218a6:	09 d0                	or     eax,edx
c00218a8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00218ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218af:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00218b5:	8d 50 01             	lea    edx,[eax+0x1]
c00218b8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218bb:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00218c1:	0f b6 d0             	movzx  edx,al
c00218c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218c7:	83 c2 08             	add    edx,0x8
c00218ca:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00218ce:	0f b6 c9             	movzx  ecx,cl
c00218d1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00218d7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00218db:	83 ec 08             	sub    esp,0x8
c00218de:	6a 01                	push   0x1
c00218e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218e3:	e8 04 ff ff ff       	call   c00217ec <IOAPIC::read(int)>
c00218e8:	83 c4 10             	add    esp,0x10
c00218eb:	c1 f8 10             	sar    eax,0x10
c00218ee:	0f b6 c0             	movzx  eax,al
c00218f1:	8d 50 01             	lea    edx,[eax+0x1]
c00218f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218f7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00218fd:	b8 00 00 00 00       	mov    eax,0x0
c0021902:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021905:	5b                   	pop    ebx
c0021906:	5e                   	pop    esi
c0021907:	5f                   	pop    edi
c0021908:	5d                   	pop    ebp
c0021909:	c3                   	ret    

c002190a <IOAPIC::write(int, int)>:
c002190a:	55                   	push   ebp
c002190b:	89 e5                	mov    ebp,esp
c002190d:	83 ec 10             	sub    esp,0x10
c0021910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021913:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021919:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002191c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002191f:	0f b6 d0             	movzx  edx,al
c0021922:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021925:	89 10                	mov    DWORD PTR [eax],edx
c0021927:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002192a:	8d 50 10             	lea    edx,[eax+0x10]
c002192d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021930:	89 02                	mov    DWORD PTR [edx],eax
c0021932:	90                   	nop
c0021933:	c9                   	leave  
c0021934:	c3                   	ret    
c0021935:	90                   	nop

c0021936 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0021936:	55                   	push   ebp
c0021937:	89 e5                	mov    ebp,esp
c0021939:	53                   	push   ebx
c002193a:	83 ec 2c             	sub    esp,0x2c
c002193d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021940:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021943:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0021946:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021949:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002194c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002194f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021952:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021955:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021958:	88 d8                	mov    al,bl
c002195a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002195d:	88 c8                	mov    al,cl
c002195f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021962:	88 d0                	mov    al,dl
c0021964:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0021967:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002196b:	83 c0 08             	add    eax,0x8
c002196e:	01 c0                	add    eax,eax
c0021970:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021973:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021977:	83 c0 08             	add    eax,0x8
c002197a:	01 c0                	add    eax,eax
c002197c:	40                   	inc    eax
c002197d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0021980:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021983:	50                   	push   eax
c0021984:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021987:	e8 60 fe ff ff       	call   c00217ec <IOAPIC::read(int)>
c002198c:	83 c4 08             	add    esp,0x8
c002198f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021992:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0021999:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002199c:	c1 e0 18             	shl    eax,0x18
c002199f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00219a2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00219a5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00219a8:	52                   	push   edx
c00219a9:	50                   	push   eax
c00219aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00219ad:	e8 58 ff ff ff       	call   c002190a <IOAPIC::write(int, int)>
c00219b2:	83 c4 0c             	add    esp,0xc
c00219b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00219b8:	50                   	push   eax
c00219b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00219bc:	e8 2b fe ff ff       	call   c00217ec <IOAPIC::read(int)>
c00219c1:	83 c4 08             	add    esp,0x8
c00219c4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00219c7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00219ce:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00219d5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00219dc:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00219e0:	74 09                	je     c00219eb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00219e2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00219e9:	eb 07                	jmp    c00219f2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00219eb:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00219f2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00219f6:	74 09                	je     c0021a01 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00219f8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00219ff:	eb 07                	jmp    c0021a08 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021a01:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021a08:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021a0f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021a13:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021a16:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021a19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021a1c:	52                   	push   edx
c0021a1d:	50                   	push   eax
c0021a1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a21:	e8 e4 fe ff ff       	call   c002190a <IOAPIC::write(int, int)>
c0021a26:	83 c4 0c             	add    esp,0xc
c0021a29:	90                   	nop
c0021a2a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021a2d:	c9                   	leave  
c0021a2e:	c3                   	ret    
c0021a2f:	90                   	nop

c0021a30 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021a30:	55                   	push   ebp
c0021a31:	89 e5                	mov    ebp,esp
c0021a33:	57                   	push   edi
c0021a34:	56                   	push   esi
c0021a35:	53                   	push   ebx
c0021a36:	83 ec 2c             	sub    esp,0x2c
c0021a39:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021a3c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021a3f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021a43:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0021a47:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021a4b:	74 5a                	je     c0021aa7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021a4d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021a51:	7f 44                	jg     c0021a97 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0021a53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a56:	05 60 76 02 c0       	add    eax,0xc0027660
c0021a5b:	8a 00                	mov    al,BYTE PTR [eax]
c0021a5d:	0f b6 c0             	movzx  eax,al
c0021a60:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0021a63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a66:	66 8b 84 00 60 88 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd77a0]
c0021a6e:	0f b7 c0             	movzx  eax,ax
c0021a71:	83 e0 02             	and    eax,0x2
c0021a74:	85 c0                	test   eax,eax
c0021a76:	74 04                	je     c0021a7c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021a78:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0021a7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a7f:	66 8b 84 00 60 88 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd77a0]
c0021a87:	0f b7 c0             	movzx  eax,ax
c0021a8a:	83 e0 08             	and    eax,0x8
c0021a8d:	85 c0                	test   eax,eax
c0021a8f:	74 16                	je     c0021aa7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021a91:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021a95:	eb 10                	jmp    c0021aa7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021a97:	83 ec 0c             	sub    esp,0xc
c0021a9a:	68 d4 6f 02 c0       	push   0xc0026fd4
c0021a9f:	e8 63 2f ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0021aa4:	83 c4 10             	add    esp,0x10
c0021aa7:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0021aab:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c0021ab0:	83 ec 08             	sub    esp,0x8
c0021ab3:	50                   	push   eax
c0021ab4:	68 0c 70 02 c0       	push   0xc002700c
c0021ab9:	e8 3d b2 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0021abe:	83 c4 10             	add    esp,0x10
c0021ac1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0021ac8:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c0021acd:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0021ad0:	7d 67                	jge    c0021b39 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021ad2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021ad5:	8b 04 85 e0 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6120]
c0021adc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021adf:	83 ec 08             	sub    esp,0x8
c0021ae2:	52                   	push   edx
c0021ae3:	50                   	push   eax
c0021ae4:	e8 d1 fc ff ff       	call   c00217ba <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021ae9:	83 c4 10             	add    esp,0x10
c0021aec:	84 c0                	test   al,al
c0021aee:	74 44                	je     c0021b34 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021af0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021af3:	8b 1c 85 e0 9e 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6120]
c0021afa:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0021afe:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021b01:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0021b05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b08:	83 c0 20             	add    eax,0x20
c0021b0b:	0f b6 f0             	movzx  esi,al
c0021b0e:	b8 00 00 00 00       	mov    eax,0x0
c0021b13:	99                   	cdq    
c0021b14:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021b17:	0f b6 c9             	movzx  ecx,cl
c0021b1a:	83 ec 04             	sub    esp,0x4
c0021b1d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021b20:	57                   	push   edi
c0021b21:	56                   	push   esi
c0021b22:	52                   	push   edx
c0021b23:	50                   	push   eax
c0021b24:	51                   	push   ecx
c0021b25:	53                   	push   ebx
c0021b26:	e8 0b fe ff ff       	call   c0021936 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021b2b:	83 c4 20             	add    esp,0x20
c0021b2e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0021b32:	eb 05                	jmp    c0021b39 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021b34:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021b37:	eb 8f                	jmp    c0021ac8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021b39:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021b3c:	83 f0 01             	xor    eax,0x1
c0021b3f:	84 c0                	test   al,al
c0021b41:	74 10                	je     c0021b53 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0021b43:	83 ec 0c             	sub    esp,0xc
c0021b46:	68 23 70 02 c0       	push   0xc0027023
c0021b4b:	e8 b7 2e ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0021b50:	83 c4 10             	add    esp,0x10
c0021b53:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021b57:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021b5e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0021b62:	7f 65                	jg     c0021bc9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0021b64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b67:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021b6a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021b71:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021b74:	01 ca                	add    edx,ecx
c0021b76:	83 c2 54             	add    edx,0x54
c0021b79:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021b7d:	85 c0                	test   eax,eax
c0021b7f:	75 43                	jne    c0021bc4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021b81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b84:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021b87:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021b8e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021b91:	01 ca                	add    edx,ecx
c0021b93:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021b96:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021b99:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ba0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021ba3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021baa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021bad:	01 ca                	add    edx,ecx
c0021baf:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0021bb5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021bb8:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021bbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021bbf:	83 e8 20             	sub    eax,0x20
c0021bc2:	eb 1a                	jmp    c0021bde <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021bc4:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021bc7:	eb 95                	jmp    c0021b5e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021bc9:	83 ec 0c             	sub    esp,0xc
c0021bcc:	68 30 70 02 c0       	push   0xc0027030
c0021bd1:	e8 31 2e ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0021bd6:	83 c4 10             	add    esp,0x10
c0021bd9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021bde:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021be1:	5b                   	pop    ebx
c0021be2:	5e                   	pop    esi
c0021be3:	5f                   	pop    edi
c0021be4:	5d                   	pop    ebp
c0021be5:	c3                   	ret    

c0021be6 <PIC::disable()>:
c0021be6:	55                   	push   ebp
c0021be7:	89 e5                	mov    ebp,esp
c0021be9:	83 ec 10             	sub    esp,0x10
c0021bec:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021bf2:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0021bf6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021bf9:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021bfd:	ee                   	out    dx,al
c0021bfe:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0021c04:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021c08:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021c0b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021c0f:	ee                   	out    dx,al
c0021c10:	90                   	nop
c0021c11:	c9                   	leave  
c0021c12:	c3                   	ret    
c0021c13:	90                   	nop

c0021c14 <PIC::close(int, int, void*)>:
c0021c14:	55                   	push   ebp
c0021c15:	89 e5                	mov    ebp,esp
c0021c17:	83 ec 08             	sub    esp,0x8
c0021c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c1f:	83 c0 3c             	add    eax,0x3c
c0021c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c24:	83 ec 0c             	sub    esp,0xc
c0021c27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c2a:	ff d0                	call   eax
c0021c2c:	83 c4 10             	add    esp,0x10
c0021c2f:	b8 00 00 00 00       	mov    eax,0x0
c0021c34:	c9                   	leave  
c0021c35:	c3                   	ret    

c0021c36 <PIC::PIC()>:
c0021c36:	83 ec 0c             	sub    esp,0xc
c0021c39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c3d:	83 ec 08             	sub    esp,0x8
c0021c40:	68 dc 70 02 c0       	push   0xc00270dc
c0021c45:	50                   	push   eax
c0021c46:	e8 9f cf fe ff       	call   c000ebea <InterruptController::InterruptController(char const*)>
c0021c4b:	83 c4 10             	add    esp,0x10
c0021c4e:	ba 08 71 02 c0       	mov    edx,0xc0027108
c0021c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c57:	89 10                	mov    DWORD PTR [eax],edx
c0021c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c5d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c63:	0f b6 d0             	movzx  edx,al
c0021c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c6a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c75:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c7b:	0f b6 d0             	movzx  edx,al
c0021c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c82:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c8b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c91:	8d 50 01             	lea    edx,[eax+0x1]
c0021c94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c98:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021c9e:	0f b6 d0             	movzx  edx,al
c0021ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021ca9:	83 e1 3f             	and    ecx,0x3f
c0021cac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021cba:	0f b6 d0             	movzx  edx,al
c0021cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc1:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ccc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021cd2:	0f b6 d0             	movzx  edx,al
c0021cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cd9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021ce8:	8d 50 01             	lea    edx,[eax+0x1]
c0021ceb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021cef:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021cf5:	0f b6 d0             	movzx  edx,al
c0021cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cfc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021d00:	83 e1 3f             	and    ecx,0x3f
c0021d03:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021d07:	90                   	nop
c0021d08:	83 c4 0c             	add    esp,0xc
c0021d0b:	c3                   	ret    

c0021d0c <PIC::ioWait()>:
c0021d0c:	eb 00                	jmp    c0021d0e <PIC::ioWait()+0x2>
c0021d0e:	eb 00                	jmp    c0021d10 <PIC::ioWait()+0x4>
c0021d10:	90                   	nop
c0021d11:	c3                   	ret    

c0021d12 <PIC::getIRQReg(int)>:
c0021d12:	55                   	push   ebp
c0021d13:	89 e5                	mov    ebp,esp
c0021d15:	83 ec 10             	sub    esp,0x10
c0021d18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d1b:	0f b6 c0             	movzx  eax,al
c0021d1e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021d24:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021d27:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021d2a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021d2e:	ee                   	out    dx,al
c0021d2f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d32:	0f b6 c0             	movzx  eax,al
c0021d35:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021d3b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021d3e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021d41:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021d45:	ee                   	out    dx,al
c0021d46:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021d4c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021d50:	89 c2                	mov    edx,eax
c0021d52:	ec                   	in     al,dx
c0021d53:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021d56:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021d59:	0f b6 c0             	movzx  eax,al
c0021d5c:	c1 e0 08             	shl    eax,0x8
c0021d5f:	89 c1                	mov    ecx,eax
c0021d61:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021d67:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021d6b:	89 c2                	mov    edx,eax
c0021d6d:	ec                   	in     al,dx
c0021d6e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021d71:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021d74:	0f b6 c0             	movzx  eax,al
c0021d77:	09 c8                	or     eax,ecx
c0021d79:	c9                   	leave  
c0021d7a:	c3                   	ret    
c0021d7b:	90                   	nop

c0021d7c <PIC::eoi(unsigned char)>:
c0021d7c:	55                   	push   ebp
c0021d7d:	89 e5                	mov    ebp,esp
c0021d7f:	83 ec 14             	sub    esp,0x14
c0021d82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d85:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021d88:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021d8c:	75 1e                	jne    c0021dac <PIC::eoi(unsigned char)+0x30>
c0021d8e:	6a 0b                	push   0xb
c0021d90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d93:	e8 7a ff ff ff       	call   c0021d12 <PIC::getIRQReg(int)>
c0021d98:	83 c4 08             	add    esp,0x8
c0021d9b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021d9f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0021da3:	25 80 00 00 00       	and    eax,0x80
c0021da8:	85 c0                	test   eax,eax
c0021daa:	74 5f                	je     c0021e0b <PIC::eoi(unsigned char)+0x8f>
c0021dac:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0021db0:	75 2d                	jne    c0021ddf <PIC::eoi(unsigned char)+0x63>
c0021db2:	6a 0b                	push   0xb
c0021db4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021db7:	e8 56 ff ff ff       	call   c0021d12 <PIC::getIRQReg(int)>
c0021dbc:	83 c4 08             	add    esp,0x8
c0021dbf:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0021dc3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021dc6:	66 85 c0             	test   ax,ax
c0021dc9:	78 14                	js     c0021ddf <PIC::eoi(unsigned char)+0x63>
c0021dcb:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0021dd1:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0021dd5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021dd8:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021ddc:	ee                   	out    dx,al
c0021ddd:	eb 2d                	jmp    c0021e0c <PIC::eoi(unsigned char)+0x90>
c0021ddf:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021de3:	76 12                	jbe    c0021df7 <PIC::eoi(unsigned char)+0x7b>
c0021de5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021deb:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0021def:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021df2:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021df6:	ee                   	out    dx,al
c0021df7:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021dfd:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0021e01:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021e04:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021e08:	ee                   	out    dx,al
c0021e09:	eb 01                	jmp    c0021e0c <PIC::eoi(unsigned char)+0x90>
c0021e0b:	90                   	nop
c0021e0c:	c9                   	leave  
c0021e0d:	c3                   	ret    

c0021e0e <PIC::remap()>:
c0021e0e:	55                   	push   ebp
c0021e0f:	89 e5                	mov    ebp,esp
c0021e11:	83 ec 48             	sub    esp,0x48
c0021e14:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021e1b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021e22:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021e28:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021e2b:	89 c2                	mov    edx,eax
c0021e2d:	ec                   	in     al,dx
c0021e2e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021e31:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021e34:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021e37:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021e3d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021e40:	89 c2                	mov    edx,eax
c0021e42:	ec                   	in     al,dx
c0021e43:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021e46:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021e49:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021e4c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021e52:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021e56:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021e59:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021e5c:	ee                   	out    dx,al
c0021e5d:	83 ec 0c             	sub    esp,0xc
c0021e60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e63:	e8 a4 fe ff ff       	call   c0021d0c <PIC::ioWait()>
c0021e68:	83 c4 10             	add    esp,0x10
c0021e6b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021e71:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021e75:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021e78:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021e7b:	ee                   	out    dx,al
c0021e7c:	83 ec 0c             	sub    esp,0xc
c0021e7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e82:	e8 85 fe ff ff       	call   c0021d0c <PIC::ioWait()>
c0021e87:	83 c4 10             	add    esp,0x10
c0021e8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021e8d:	0f b6 c0             	movzx  eax,al
c0021e90:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021e96:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021e99:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021e9c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021e9f:	ee                   	out    dx,al
c0021ea0:	83 ec 0c             	sub    esp,0xc
c0021ea3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ea6:	e8 61 fe ff ff       	call   c0021d0c <PIC::ioWait()>
c0021eab:	83 c4 10             	add    esp,0x10
c0021eae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021eb1:	0f b6 c0             	movzx  eax,al
c0021eb4:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021eba:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021ebd:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021ec0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021ec3:	ee                   	out    dx,al
c0021ec4:	83 ec 0c             	sub    esp,0xc
c0021ec7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021eca:	e8 3d fe ff ff       	call   c0021d0c <PIC::ioWait()>
c0021ecf:	83 c4 10             	add    esp,0x10
c0021ed2:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021ed8:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021edc:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021edf:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021ee2:	ee                   	out    dx,al
c0021ee3:	83 ec 0c             	sub    esp,0xc
c0021ee6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ee9:	e8 1e fe ff ff       	call   c0021d0c <PIC::ioWait()>
c0021eee:	83 c4 10             	add    esp,0x10
c0021ef1:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021ef7:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021efb:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021efe:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021f01:	ee                   	out    dx,al
c0021f02:	83 ec 0c             	sub    esp,0xc
c0021f05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f08:	e8 ff fd ff ff       	call   c0021d0c <PIC::ioWait()>
c0021f0d:	83 c4 10             	add    esp,0x10
c0021f10:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021f16:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021f1a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021f1d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021f20:	ee                   	out    dx,al
c0021f21:	83 ec 0c             	sub    esp,0xc
c0021f24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f27:	e8 e0 fd ff ff       	call   c0021d0c <PIC::ioWait()>
c0021f2c:	83 c4 10             	add    esp,0x10
c0021f2f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021f35:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021f39:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021f3c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021f3f:	ee                   	out    dx,al
c0021f40:	83 ec 0c             	sub    esp,0xc
c0021f43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f46:	e8 c1 fd ff ff       	call   c0021d0c <PIC::ioWait()>
c0021f4b:	83 c4 10             	add    esp,0x10
c0021f4e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021f52:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021f58:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021f5b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021f5e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021f61:	ee                   	out    dx,al
c0021f62:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021f66:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021f6c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021f6f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021f72:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021f75:	ee                   	out    dx,al
c0021f76:	90                   	nop
c0021f77:	c9                   	leave  
c0021f78:	c3                   	ret    
c0021f79:	90                   	nop

c0021f7a <PIC::open(int, int, void*)>:
c0021f7a:	55                   	push   ebp
c0021f7b:	89 e5                	mov    ebp,esp
c0021f7d:	83 ec 18             	sub    esp,0x18
c0021f80:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021f86:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021f8a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021f8d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021f91:	ee                   	out    dx,al
c0021f92:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021f98:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021f9c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021f9f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021fa3:	ee                   	out    dx,al
c0021fa4:	83 ec 0c             	sub    esp,0xc
c0021fa7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021faa:	e8 5f fe ff ff       	call   c0021e0e <PIC::remap()>
c0021faf:	83 c4 10             	add    esp,0x10
c0021fb2:	b8 00 00 00 00       	mov    eax,0x0
c0021fb7:	c9                   	leave  
c0021fb8:	c3                   	ret    
c0021fb9:	66 90                	xchg   ax,ax
c0021fbb:	90                   	nop

c0021fbc <APICTimer::close(int, int, void*)>:
c0021fbc:	b8 00 00 00 00       	mov    eax,0x0
c0021fc1:	c3                   	ret    
c0021fc2:	66 90                	xchg   ax,ax

c0021fc4 <apicTimerHandler(regs*, void*)>:
c0021fc4:	83 ec 0c             	sub    esp,0xc
c0021fc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021fcb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021fcd:	b8 10 27 00 00       	mov    eax,0x2710
c0021fd2:	ba 00 00 00 00       	mov    edx,0x0
c0021fd7:	f7 f1                	div    ecx
c0021fd9:	83 ec 0c             	sub    esp,0xc
c0021fdc:	50                   	push   eax
c0021fdd:	e8 57 eb fe ff       	call   c0010b39 <timerHandler(unsigned int)>
c0021fe2:	83 c4 10             	add    esp,0x10
c0021fe5:	90                   	nop
c0021fe6:	83 c4 0c             	add    esp,0xc
c0021fe9:	c3                   	ret    
c0021fea:	66 90                	xchg   ax,ax

c0021fec <APICTimer::write(int)>:
c0021fec:	83 ec 1c             	sub    esp,0x1c
c0021fef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ff3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021ff7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021ffd:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0022002:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022008:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002200e:	83 ec 0c             	sub    esp,0xc
c0022011:	50                   	push   eax
c0022012:	e8 e1 f4 ff ff       	call   c00214f8 <APIC::getBase()>
c0022017:	83 c4 10             	add    esp,0x10
c002201a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002201e:	a1 8c 85 02 c0       	mov    eax,ds:0xc002858c
c0022023:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022027:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002202b:	05 e0 03 00 00       	add    eax,0x3e0
c0022030:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022036:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002203a:	05 80 03 00 00       	add    eax,0x380
c002203f:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022045:	fb                   	sti    
c0022046:	66 90                	xchg   ax,ax
c0022048:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002204c:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0022052:	a1 8c 85 02 c0       	mov    eax,ds:0xc002858c
c0022057:	39 c2                	cmp    edx,eax
c0022059:	76 05                	jbe    c0022060 <APICTimer::write(int)+0x74>
c002205b:	eb eb                	jmp    c0022048 <APICTimer::write(int)+0x5c>
c002205d:	8d 76 00             	lea    esi,[esi+0x0]
c0022060:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022064:	05 20 03 00 00       	add    eax,0x320
c0022069:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002206f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022073:	05 90 03 00 00       	add    eax,0x390
c0022078:	8b 00                	mov    eax,DWORD PTR [eax]
c002207a:	f7 d0                	not    eax
c002207c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022080:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022088:	ba 00 00 00 00       	mov    edx,0x0
c002208d:	f7 f1                	div    ecx
c002208f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022096:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002209c:	0d 00 00 02 00       	or     eax,0x20000
c00220a1:	89 c2                	mov    edx,eax
c00220a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220a7:	05 20 03 00 00       	add    eax,0x320
c00220ac:	89 10                	mov    DWORD PTR [eax],edx
c00220ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220b2:	05 e0 03 00 00       	add    eax,0x3e0
c00220b7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00220bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220c1:	05 80 03 00 00       	add    eax,0x380
c00220c6:	89 c2                	mov    edx,eax
c00220c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00220cb:	89 02                	mov    DWORD PTR [edx],eax
c00220cd:	90                   	nop
c00220ce:	83 c4 1c             	add    esp,0x1c
c00220d1:	c3                   	ret    
c00220d2:	66 90                	xchg   ax,ax

c00220d4 <APICTimer::open(int, int, void*)>:
c00220d4:	57                   	push   edi
c00220d5:	56                   	push   esi
c00220d6:	53                   	push   ebx
c00220d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220db:	8b 00                	mov    eax,DWORD PTR [eax]
c00220dd:	83 c0 24             	add    eax,0x24
c00220e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00220e2:	83 ec 08             	sub    esp,0x8
c00220e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220ed:	ff d0                	call   eax
c00220ef:	83 c4 10             	add    esp,0x10
c00220f2:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c00220f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00220fd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022103:	83 ec 0c             	sub    esp,0xc
c0022106:	50                   	push   eax
c0022107:	e8 ec f3 ff ff       	call   c00214f8 <APIC::getBase()>
c002210c:	83 c4 10             	add    esp,0x10
c002210f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022119:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002211f:	0f b6 f8             	movzx  edi,al
c0022122:	89 d0                	mov    eax,edx
c0022124:	ba 00 00 00 00       	mov    edx,0x0
c0022129:	89 c1                	mov    ecx,eax
c002212b:	80 e5 ff             	and    ch,0xff
c002212e:	89 cb                	mov    ebx,ecx
c0022130:	0f b6 f2             	movzx  esi,dl
c0022133:	89 d8                	mov    eax,ebx
c0022135:	89 f2                	mov    edx,esi
c0022137:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002213b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002213e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022142:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022146:	83 e0 00             	and    eax,0x0
c0022149:	09 d0                	or     eax,edx
c002214b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002214f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022153:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022159:	8d 50 01             	lea    edx,[eax+0x1]
c002215c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022160:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022166:	0f b6 d0             	movzx  edx,al
c0022169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216d:	83 c2 08             	add    edx,0x8
c0022170:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022174:	0f b6 c9             	movzx  ecx,cl
c0022177:	81 c9 00 00 01 00    	or     ecx,0x10000
c002217d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022185:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022189:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002218f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022193:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022197:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002219d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00221a1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00221a7:	83 ec 0c             	sub    esp,0xc
c00221aa:	51                   	push   ecx
c00221ab:	6a 01                	push   0x1
c00221ad:	68 c4 1f 02 c0       	push   0xc0021fc4
c00221b2:	52                   	push   edx
c00221b3:	50                   	push   eax
c00221b4:	e8 2d c0 fe ff       	call   c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00221b9:	83 c4 20             	add    esp,0x20
c00221bc:	89 c2                	mov    edx,eax
c00221be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00221c8:	b8 00 00 00 00       	mov    eax,0x0
c00221cd:	5b                   	pop    ebx
c00221ce:	5e                   	pop    esi
c00221cf:	5f                   	pop    edi
c00221d0:	c3                   	ret    
c00221d1:	90                   	nop
c00221d2:	66 90                	xchg   ax,ax

c00221d4 <APICTimer::APICTimer()>:
c00221d4:	83 ec 0c             	sub    esp,0xc
c00221d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221db:	83 ec 08             	sub    esp,0x8
c00221de:	68 48 71 02 c0       	push   0xc0027148
c00221e3:	50                   	push   eax
c00221e4:	e8 bf e8 fe ff       	call   c0010aa8 <Timer::Timer(char const*)>
c00221e9:	83 c4 10             	add    esp,0x10
c00221ec:	ba 5c 71 02 c0       	mov    edx,0xc002715c
c00221f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f5:	89 10                	mov    DWORD PTR [eax],edx
c00221f7:	90                   	nop
c00221f8:	83 c4 0c             	add    esp,0xc
c00221fb:	c3                   	ret    

c00221fc <PIT::write(int)>:
c00221fc:	83 ec 10             	sub    esp,0x10
c00221ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022203:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022207:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002220d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022211:	a3 04 9f 02 c0       	mov    ds:0xc0029f04,eax
c0022216:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002221b:	99                   	cdq    
c002221c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022220:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022224:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002222b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022230:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022234:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022239:	ee                   	out    dx,al
c002223a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002223e:	0f b6 c0             	movzx  eax,al
c0022241:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022248:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002224c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022250:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022255:	ee                   	out    dx,al
c0022256:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002225a:	c1 f8 08             	sar    eax,0x8
c002225d:	0f b6 c0             	movzx  eax,al
c0022260:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022267:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002226b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002226f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022274:	ee                   	out    dx,al
c0022275:	90                   	nop
c0022276:	83 c4 10             	add    esp,0x10
c0022279:	c3                   	ret    
c002227a:	66 90                	xchg   ax,ax

c002227c <pitHandler(regs*, void*)>:
c002227c:	83 ec 0c             	sub    esp,0xc
c002227f:	8b 0d 04 9f 02 c0    	mov    ecx,DWORD PTR ds:0xc0029f04
c0022285:	b8 10 27 00 00       	mov    eax,0x2710
c002228a:	99                   	cdq    
c002228b:	f7 f9                	idiv   ecx
c002228d:	83 ec 0c             	sub    esp,0xc
c0022290:	50                   	push   eax
c0022291:	e8 a3 e8 fe ff       	call   c0010b39 <timerHandler(unsigned int)>
c0022296:	83 c4 10             	add    esp,0x10
c0022299:	90                   	nop
c002229a:	83 c4 0c             	add    esp,0xc
c002229d:	c3                   	ret    
c002229e:	66 90                	xchg   ax,ax

c00222a0 <PIT::open(int, int, void*)>:
c00222a0:	83 ec 0c             	sub    esp,0xc
c00222a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00222a9:	83 c0 24             	add    eax,0x24
c00222ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00222ae:	83 ec 08             	sub    esp,0x8
c00222b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222b9:	ff d0                	call   eax
c00222bb:	83 c4 10             	add    esp,0x10
c00222be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c2:	83 ec 0c             	sub    esp,0xc
c00222c5:	6a 00                	push   0x0
c00222c7:	6a 01                	push   0x1
c00222c9:	68 7c 22 02 c0       	push   0xc002227c
c00222ce:	6a 00                	push   0x0
c00222d0:	50                   	push   eax
c00222d1:	e8 10 bf fe ff       	call   c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00222d6:	83 c4 20             	add    esp,0x20
c00222d9:	89 c2                	mov    edx,eax
c00222db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222df:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00222e5:	b8 00 00 00 00       	mov    eax,0x0
c00222ea:	83 c4 0c             	add    esp,0xc
c00222ed:	c3                   	ret    
c00222ee:	66 90                	xchg   ax,ax

c00222f0 <PIT::close(int, int, void*)>:
c00222f0:	83 ec 0c             	sub    esp,0xc
c00222f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222f7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022305:	6a 01                	push   0x1
c0022307:	68 7c 22 02 c0       	push   0xc002227c
c002230c:	6a 00                	push   0x0
c002230e:	50                   	push   eax
c002230f:	e8 1c bf fe ff       	call   c000e230 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022314:	83 c4 10             	add    esp,0x10
c0022317:	b8 00 00 00 00       	mov    eax,0x0
c002231c:	83 c4 0c             	add    esp,0xc
c002231f:	c3                   	ret    

c0022320 <PIT::PIT()>:
c0022320:	83 ec 0c             	sub    esp,0xc
c0022323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022327:	83 ec 08             	sub    esp,0x8
c002232a:	68 84 71 02 c0       	push   0xc0027184
c002232f:	50                   	push   eax
c0022330:	e8 73 e7 fe ff       	call   c0010aa8 <Timer::Timer(char const*)>
c0022335:	83 c4 10             	add    esp,0x10
c0022338:	ba ac 71 02 c0       	mov    edx,0xc00271ac
c002233d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022341:	89 10                	mov    DWORD PTR [eax],edx
c0022343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022347:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002234d:	0f b6 d0             	movzx  edx,al
c0022350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022354:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002235b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002235f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022365:	0f b6 d0             	movzx  edx,al
c0022368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022375:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002237b:	8d 50 01             	lea    edx,[eax+0x1]
c002237e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022382:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022388:	0f b6 d0             	movzx  edx,al
c002238b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002238f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022393:	83 e1 3f             	and    ecx,0x3f
c0022396:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002239a:	90                   	nop
c002239b:	83 c4 0c             	add    esp,0xc
c002239e:	c3                   	ret    
c002239f:	90                   	nop

c00223a0 <avxDetect>:
c00223a0:	b8 00 00 00 00       	mov    eax,0x0
c00223a5:	c3                   	ret    

c00223a6 <avxSave>:
c00223a6:	c3                   	ret    

c00223a7 <avxLoad>:
c00223a7:	c3                   	ret    

c00223a8 <avxInit>:
c00223a8:	c3                   	ret    

c00223a9 <avxClose>:
c00223a9:	c3                   	ret    

c00223aa <wouldSheSayYes>:
c00223aa:	c3                   	ret    
c00223ab:	49                   	dec    ecx
c00223ac:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00223b0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00223b4:	75 20                	jne    c00223d6 <sseDetect.noSSE+0x1>
c00223b6:	4e                   	dec    esi
c00223b7:	79 61                	jns    c002241a <x87Detect+0x14>
c00223b9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00223be:	66 90                	xchg   ax,ax

c00223c0 <absolutelyNoChanceInHell>:
c00223c0:	b8 01 00 00 00       	mov    eax,0x1
c00223c5:	0f a2                	cpuid  
c00223c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00223cd:	74 06                	je     c00223d5 <sseDetect.noSSE>
c00223cf:	b8 01 00 00 00       	mov    eax,0x1
c00223d4:	c3                   	ret    

c00223d5 <sseDetect.noSSE>:
c00223d5:	31 c0                	xor    eax,eax
c00223d7:	c3                   	ret    

c00223d8 <sseSave>:
c00223d8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00223dd:	c3                   	ret    

c00223de <sseLoad>:
c00223de:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00223e3:	c3                   	ret    

c00223e4 <sseInit>:
c00223e4:	e8 49 00 00 00       	call   c0022432 <x87Init>
c00223e9:	0f 20 e0             	mov    eax,cr4
c00223ec:	66 0d 00 06          	or     ax,0x600
c00223f0:	0f 22 e0             	mov    cr4,eax
c00223f3:	c3                   	ret    

c00223f4 <sseClose>:
c00223f4:	c3                   	ret    
c00223f5:	66 90                	xchg   ax,ax
c00223f7:	66 90                	xchg   ax,ax
c00223f9:	66 90                	xchg   ax,ax
c00223fb:	66 90                	xchg   ax,ax
c00223fd:	66 90                	xchg   ax,ax
c00223ff:	90                   	nop

c0022400 <value_37F>:
c0022400:	7f 03                	jg     c0022405 <value_37A+0x1>

c0022402 <value_37E>:
c0022402:	7e 03                	jle    c0022407 <x87Detect+0x1>

c0022404 <value_37A>:
c0022404:	7a 03                	jp     c0022409 <x87Detect+0x3>

c0022406 <x87Detect>:
c0022406:	b8 01 00 00 00       	mov    eax,0x1
c002240b:	0f a2                	cpuid  
c002240d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022413:	74 06                	je     c002241b <x87Detect.nox87>
c0022415:	b8 01 00 00 00       	mov    eax,0x1
c002241a:	c3                   	ret    

c002241b <x87Detect.nox87>:
c002241b:	b8 00 00 00 00       	mov    eax,0x0
c0022420:	c3                   	ret    

c0022421 <x87Save>:
c0022421:	55                   	push   ebp
c0022422:	89 e5                	mov    ebp,esp
c0022424:	9b dd 75 08          	fsave  [ebp+0x8]
c0022428:	c9                   	leave  
c0022429:	c3                   	ret    

c002242a <x87Load>:
c002242a:	55                   	push   ebp
c002242b:	89 e5                	mov    ebp,esp
c002242d:	dd 65 08             	frstor [ebp+0x8]
c0022430:	c9                   	leave  
c0022431:	c3                   	ret    

c0022432 <x87Init>:
c0022432:	9b db e3             	finit  
c0022435:	0f 20 c0             	mov    eax,cr0
c0022438:	66 25 fb ff          	and    ax,0xfffb
c002243c:	66 0d 22 00          	or     ax,0x22
c0022440:	0f 22 c0             	mov    cr0,eax
c0022443:	0f 06                	clts   
c0022445:	d9 2d 04 24 02 c0    	fldcw  WORD PTR ds:0xc0022404
c002244b:	c3                   	ret    

c002244c <x87Close>:
c002244c:	c3                   	ret    
c002244d:	66 90                	xchg   ax,ax
c002244f:	90                   	nop

c0022450 <__do_global_ctors_aux>:
c0022450:	a1 ec 35 02 c0       	mov    eax,ds:0xc00235ec
c0022455:	83 f8 ff             	cmp    eax,0xffffffff
c0022458:	74 1a                	je     c0022474 <__do_global_ctors_aux+0x24>
c002245a:	55                   	push   ebp
c002245b:	89 e5                	mov    ebp,esp
c002245d:	53                   	push   ebx
c002245e:	52                   	push   edx
c002245f:	bb ec 35 02 c0       	mov    ebx,0xc00235ec
c0022464:	ff d0                	call   eax
c0022466:	83 eb 04             	sub    ebx,0x4
c0022469:	8b 03                	mov    eax,DWORD PTR [ebx]
c002246b:	83 f8 ff             	cmp    eax,0xffffffff
c002246e:	75 f4                	jne    c0022464 <__do_global_ctors_aux+0x14>
c0022470:	58                   	pop    eax
c0022471:	5b                   	pop    ebx
c0022472:	5d                   	pop    ebp
c0022473:	c3                   	ret    
c0022474:	c3                   	ret    
c0022475:	66 90                	xchg   ax,ax
c0022477:	90                   	nop

c0022478 <__divdi3>:
c0022478:	55                   	push   ebp
c0022479:	57                   	push   edi
c002247a:	56                   	push   esi
c002247b:	53                   	push   ebx
c002247c:	83 ec 1c             	sub    esp,0x1c
c002247f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022483:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022487:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002248a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002248e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022492:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022496:	85 db                	test   ebx,ebx
c0022498:	0f 88 8e 00 00 00    	js     c002252c <__divdi3+0xb4>
c002249e:	89 dd                	mov    ebp,ebx
c00224a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00224a8:	89 d3                	mov    ebx,edx
c00224aa:	85 d2                	test   edx,edx
c00224ac:	79 0d                	jns    c00224bb <__divdi3+0x43>
c00224ae:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00224b2:	f7 d8                	neg    eax
c00224b4:	83 d2 00             	adc    edx,0x0
c00224b7:	f7 da                	neg    edx
c00224b9:	89 d3                	mov    ebx,edx
c00224bb:	89 c7                	mov    edi,eax
c00224bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00224c0:	85 db                	test   ebx,ebx
c00224c2:	75 48                	jne    c002250c <__divdi3+0x94>
c00224c4:	39 ef                	cmp    edi,ebp
c00224c6:	76 24                	jbe    c00224ec <__divdi3+0x74>
c00224c8:	89 ea                	mov    edx,ebp
c00224ca:	f7 f7                	div    edi
c00224cc:	89 c1                	mov    ecx,eax
c00224ce:	31 f6                	xor    esi,esi
c00224d0:	89 c8                	mov    eax,ecx
c00224d2:	89 f2                	mov    edx,esi
c00224d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00224d8:	85 c9                	test   ecx,ecx
c00224da:	74 07                	je     c00224e3 <__divdi3+0x6b>
c00224dc:	f7 d8                	neg    eax
c00224de:	83 d2 00             	adc    edx,0x0
c00224e1:	f7 da                	neg    edx
c00224e3:	83 c4 1c             	add    esp,0x1c
c00224e6:	5b                   	pop    ebx
c00224e7:	5e                   	pop    esi
c00224e8:	5f                   	pop    edi
c00224e9:	5d                   	pop    ebp
c00224ea:	c3                   	ret    
c00224eb:	90                   	nop
c00224ec:	85 ff                	test   edi,edi
c00224ee:	75 0b                	jne    c00224fb <__divdi3+0x83>
c00224f0:	b8 01 00 00 00       	mov    eax,0x1
c00224f5:	31 d2                	xor    edx,edx
c00224f7:	f7 f3                	div    ebx
c00224f9:	89 c7                	mov    edi,eax
c00224fb:	31 d2                	xor    edx,edx
c00224fd:	89 e8                	mov    eax,ebp
c00224ff:	f7 f7                	div    edi
c0022501:	89 c6                	mov    esi,eax
c0022503:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022506:	f7 f7                	div    edi
c0022508:	89 c1                	mov    ecx,eax
c002250a:	eb c4                	jmp    c00224d0 <__divdi3+0x58>
c002250c:	39 eb                	cmp    ebx,ebp
c002250e:	77 3c                	ja     c002254c <__divdi3+0xd4>
c0022510:	0f bd f3             	bsr    esi,ebx
c0022513:	83 f6 1f             	xor    esi,0x1f
c0022516:	75 40                	jne    c0022558 <__divdi3+0xe0>
c0022518:	39 eb                	cmp    ebx,ebp
c002251a:	72 09                	jb     c0022525 <__divdi3+0xad>
c002251c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002251f:	0f 87 97 00 00 00    	ja     c00225bc <__divdi3+0x144>
c0022525:	b9 01 00 00 00       	mov    ecx,0x1
c002252a:	eb a4                	jmp    c00224d0 <__divdi3+0x58>
c002252c:	f7 d9                	neg    ecx
c002252e:	83 d3 00             	adc    ebx,0x0
c0022531:	f7 db                	neg    ebx
c0022533:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022536:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002253a:	89 dd                	mov    ebp,ebx
c002253c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022544:	e9 5f ff ff ff       	jmp    c00224a8 <__divdi3+0x30>
c0022549:	8d 76 00             	lea    esi,[esi+0x0]
c002254c:	31 f6                	xor    esi,esi
c002254e:	31 c9                	xor    ecx,ecx
c0022550:	e9 7b ff ff ff       	jmp    c00224d0 <__divdi3+0x58>
c0022555:	8d 76 00             	lea    esi,[esi+0x0]
c0022558:	b8 20 00 00 00       	mov    eax,0x20
c002255d:	29 f0                	sub    eax,esi
c002255f:	89 f1                	mov    ecx,esi
c0022561:	d3 e3                	shl    ebx,cl
c0022563:	89 fa                	mov    edx,edi
c0022565:	88 c1                	mov    cl,al
c0022567:	d3 ea                	shr    edx,cl
c0022569:	09 da                	or     edx,ebx
c002256b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002256f:	89 f1                	mov    ecx,esi
c0022571:	d3 e7                	shl    edi,cl
c0022573:	89 eb                	mov    ebx,ebp
c0022575:	88 c1                	mov    cl,al
c0022577:	d3 eb                	shr    ebx,cl
c0022579:	89 f1                	mov    ecx,esi
c002257b:	d3 e5                	shl    ebp,cl
c002257d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022580:	88 c1                	mov    cl,al
c0022582:	d3 ea                	shr    edx,cl
c0022584:	09 d5                	or     ebp,edx
c0022586:	89 e8                	mov    eax,ebp
c0022588:	89 da                	mov    edx,ebx
c002258a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002258e:	89 d3                	mov    ebx,edx
c0022590:	89 c5                	mov    ebp,eax
c0022592:	f7 e7                	mul    edi
c0022594:	39 d3                	cmp    ebx,edx
c0022596:	72 18                	jb     c00225b0 <__divdi3+0x138>
c0022598:	74 0a                	je     c00225a4 <__divdi3+0x12c>
c002259a:	89 e9                	mov    ecx,ebp
c002259c:	31 f6                	xor    esi,esi
c002259e:	e9 2d ff ff ff       	jmp    c00224d0 <__divdi3+0x58>
c00225a3:	90                   	nop
c00225a4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00225a7:	89 f1                	mov    ecx,esi
c00225a9:	d3 e7                	shl    edi,cl
c00225ab:	39 c7                	cmp    edi,eax
c00225ad:	73 eb                	jae    c002259a <__divdi3+0x122>
c00225af:	90                   	nop
c00225b0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00225b3:	31 f6                	xor    esi,esi
c00225b5:	e9 16 ff ff ff       	jmp    c00224d0 <__divdi3+0x58>
c00225ba:	66 90                	xchg   ax,ax
c00225bc:	31 c9                	xor    ecx,ecx
c00225be:	e9 0d ff ff ff       	jmp    c00224d0 <__divdi3+0x58>
c00225c3:	90                   	nop

c00225c4 <__moddi3>:
c00225c4:	55                   	push   ebp
c00225c5:	57                   	push   edi
c00225c6:	56                   	push   esi
c00225c7:	53                   	push   ebx
c00225c8:	83 ec 2c             	sub    esp,0x2c
c00225cb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00225cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00225d3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00225d7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00225db:	85 db                	test   ebx,ebx
c00225dd:	0f 88 85 00 00 00    	js     c0022668 <__moddi3+0xa4>
c00225e3:	89 de                	mov    esi,ebx
c00225e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00225ed:	89 d7                	mov    edi,edx
c00225ef:	85 d2                	test   edx,edx
c00225f1:	79 09                	jns    c00225fc <__moddi3+0x38>
c00225f3:	f7 d8                	neg    eax
c00225f5:	83 d2 00             	adc    edx,0x0
c00225f8:	f7 da                	neg    edx
c00225fa:	89 d7                	mov    edi,edx
c00225fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022600:	89 cd                	mov    ebp,ecx
c0022602:	85 ff                	test   edi,edi
c0022604:	75 52                	jne    c0022658 <__moddi3+0x94>
c0022606:	89 c3                	mov    ebx,eax
c0022608:	39 f0                	cmp    eax,esi
c002260a:	76 24                	jbe    c0022630 <__moddi3+0x6c>
c002260c:	89 c8                	mov    eax,ecx
c002260e:	89 f2                	mov    edx,esi
c0022610:	f7 f3                	div    ebx
c0022612:	89 d6                	mov    esi,edx
c0022614:	89 f0                	mov    eax,esi
c0022616:	31 d2                	xor    edx,edx
c0022618:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002261c:	85 c9                	test   ecx,ecx
c002261e:	74 07                	je     c0022627 <__moddi3+0x63>
c0022620:	f7 d8                	neg    eax
c0022622:	83 d2 00             	adc    edx,0x0
c0022625:	f7 da                	neg    edx
c0022627:	83 c4 2c             	add    esp,0x2c
c002262a:	5b                   	pop    ebx
c002262b:	5e                   	pop    esi
c002262c:	5f                   	pop    edi
c002262d:	5d                   	pop    ebp
c002262e:	c3                   	ret    
c002262f:	90                   	nop
c0022630:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022634:	85 db                	test   ebx,ebx
c0022636:	75 0d                	jne    c0022645 <__moddi3+0x81>
c0022638:	b8 01 00 00 00       	mov    eax,0x1
c002263d:	31 d2                	xor    edx,edx
c002263f:	f7 f7                	div    edi
c0022641:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022645:	89 f0                	mov    eax,esi
c0022647:	31 d2                	xor    edx,edx
c0022649:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002264d:	f7 f7                	div    edi
c002264f:	89 e8                	mov    eax,ebp
c0022651:	f7 f7                	div    edi
c0022653:	89 d6                	mov    esi,edx
c0022655:	eb bd                	jmp    c0022614 <__moddi3+0x50>
c0022657:	90                   	nop
c0022658:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002265c:	39 f7                	cmp    edi,esi
c002265e:	76 20                	jbe    c0022680 <__moddi3+0xbc>
c0022660:	89 c8                	mov    eax,ecx
c0022662:	89 f2                	mov    edx,esi
c0022664:	eb b2                	jmp    c0022618 <__moddi3+0x54>
c0022666:	66 90                	xchg   ax,ax
c0022668:	f7 d9                	neg    ecx
c002266a:	83 d3 00             	adc    ebx,0x0
c002266d:	f7 db                	neg    ebx
c002266f:	89 de                	mov    esi,ebx
c0022671:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022679:	e9 6f ff ff ff       	jmp    c00225ed <__moddi3+0x29>
c002267e:	66 90                	xchg   ax,ax
c0022680:	0f bd c7             	bsr    eax,edi
c0022683:	83 f0 1f             	xor    eax,0x1f
c0022686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002268a:	75 24                	jne    c00226b0 <__moddi3+0xec>
c002268c:	39 f7                	cmp    edi,esi
c002268e:	72 06                	jb     c0022696 <__moddi3+0xd2>
c0022690:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022694:	77 0c                	ja     c00226a2 <__moddi3+0xde>
c0022696:	89 e9                	mov    ecx,ebp
c0022698:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002269c:	19 fe                	sbb    esi,edi
c002269e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00226a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00226a6:	89 f2                	mov    edx,esi
c00226a8:	e9 6b ff ff ff       	jmp    c0022618 <__moddi3+0x54>
c00226ad:	8d 76 00             	lea    esi,[esi+0x0]
c00226b0:	b8 20 00 00 00       	mov    eax,0x20
c00226b5:	89 c2                	mov    edx,eax
c00226b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00226bb:	29 da                	sub    edx,ebx
c00226bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00226c1:	88 d9                	mov    cl,bl
c00226c3:	d3 e7                	shl    edi,cl
c00226c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00226c9:	88 d1                	mov    cl,dl
c00226cb:	d3 e8                	shr    eax,cl
c00226cd:	09 c7                	or     edi,eax
c00226cf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00226d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00226d7:	89 d8                	mov    eax,ebx
c00226d9:	88 d9                	mov    cl,bl
c00226db:	d3 e7                	shl    edi,cl
c00226dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00226e1:	89 f3                	mov    ebx,esi
c00226e3:	88 d1                	mov    cl,dl
c00226e5:	d3 eb                	shr    ebx,cl
c00226e7:	89 c7                	mov    edi,eax
c00226e9:	88 c1                	mov    cl,al
c00226eb:	d3 e6                	shl    esi,cl
c00226ed:	89 e8                	mov    eax,ebp
c00226ef:	88 d1                	mov    cl,dl
c00226f1:	d3 e8                	shr    eax,cl
c00226f3:	09 f0                	or     eax,esi
c00226f5:	89 f9                	mov    ecx,edi
c00226f7:	d3 e5                	shl    ebp,cl
c00226f9:	89 da                	mov    edx,ebx
c00226fb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00226ff:	89 d3                	mov    ebx,edx
c0022701:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022705:	89 c6                	mov    esi,eax
c0022707:	89 d1                	mov    ecx,edx
c0022709:	39 d3                	cmp    ebx,edx
c002270b:	72 27                	jb     c0022734 <__moddi3+0x170>
c002270d:	74 21                	je     c0022730 <__moddi3+0x16c>
c002270f:	29 f5                	sub    ebp,esi
c0022711:	19 cb                	sbb    ebx,ecx
c0022713:	89 de                	mov    esi,ebx
c0022715:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022719:	d3 e6                	shl    esi,cl
c002271b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002271f:	89 f9                	mov    ecx,edi
c0022721:	d3 ed                	shr    ebp,cl
c0022723:	09 ee                	or     esi,ebp
c0022725:	89 f0                	mov    eax,esi
c0022727:	d3 eb                	shr    ebx,cl
c0022729:	89 da                	mov    edx,ebx
c002272b:	e9 e8 fe ff ff       	jmp    c0022618 <__moddi3+0x54>
c0022730:	39 c5                	cmp    ebp,eax
c0022732:	73 db                	jae    c002270f <__moddi3+0x14b>
c0022734:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022738:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002273c:	89 d1                	mov    ecx,edx
c002273e:	89 c6                	mov    esi,eax
c0022740:	eb cd                	jmp    c002270f <__moddi3+0x14b>
c0022742:	66 90                	xchg   ax,ax

c0022744 <__udivdi3>:
c0022744:	55                   	push   ebp
c0022745:	57                   	push   edi
c0022746:	56                   	push   esi
c0022747:	53                   	push   ebx
c0022748:	83 ec 1c             	sub    esp,0x1c
c002274b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002274f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022753:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022757:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002275b:	85 d2                	test   edx,edx
c002275d:	75 41                	jne    c00227a0 <__udivdi3+0x5c>
c002275f:	39 f7                	cmp    edi,esi
c0022761:	76 15                	jbe    c0022778 <__udivdi3+0x34>
c0022763:	89 e8                	mov    eax,ebp
c0022765:	89 f2                	mov    edx,esi
c0022767:	f7 f7                	div    edi
c0022769:	31 db                	xor    ebx,ebx
c002276b:	89 da                	mov    edx,ebx
c002276d:	83 c4 1c             	add    esp,0x1c
c0022770:	5b                   	pop    ebx
c0022771:	5e                   	pop    esi
c0022772:	5f                   	pop    edi
c0022773:	5d                   	pop    ebp
c0022774:	c3                   	ret    
c0022775:	8d 76 00             	lea    esi,[esi+0x0]
c0022778:	89 f9                	mov    ecx,edi
c002277a:	85 ff                	test   edi,edi
c002277c:	75 0b                	jne    c0022789 <__udivdi3+0x45>
c002277e:	b8 01 00 00 00       	mov    eax,0x1
c0022783:	31 d2                	xor    edx,edx
c0022785:	f7 f7                	div    edi
c0022787:	89 c1                	mov    ecx,eax
c0022789:	31 d2                	xor    edx,edx
c002278b:	89 f0                	mov    eax,esi
c002278d:	f7 f1                	div    ecx
c002278f:	89 c3                	mov    ebx,eax
c0022791:	89 e8                	mov    eax,ebp
c0022793:	f7 f1                	div    ecx
c0022795:	89 da                	mov    edx,ebx
c0022797:	83 c4 1c             	add    esp,0x1c
c002279a:	5b                   	pop    ebx
c002279b:	5e                   	pop    esi
c002279c:	5f                   	pop    edi
c002279d:	5d                   	pop    ebp
c002279e:	c3                   	ret    
c002279f:	90                   	nop
c00227a0:	39 f2                	cmp    edx,esi
c00227a2:	77 1c                	ja     c00227c0 <__udivdi3+0x7c>
c00227a4:	0f bd da             	bsr    ebx,edx
c00227a7:	83 f3 1f             	xor    ebx,0x1f
c00227aa:	75 24                	jne    c00227d0 <__udivdi3+0x8c>
c00227ac:	39 f2                	cmp    edx,esi
c00227ae:	72 08                	jb     c00227b8 <__udivdi3+0x74>
c00227b0:	39 ef                	cmp    edi,ebp
c00227b2:	0f 87 84 00 00 00    	ja     c002283c <__udivdi3+0xf8>
c00227b8:	b8 01 00 00 00       	mov    eax,0x1
c00227bd:	eb ac                	jmp    c002276b <__udivdi3+0x27>
c00227bf:	90                   	nop
c00227c0:	31 db                	xor    ebx,ebx
c00227c2:	31 c0                	xor    eax,eax
c00227c4:	89 da                	mov    edx,ebx
c00227c6:	83 c4 1c             	add    esp,0x1c
c00227c9:	5b                   	pop    ebx
c00227ca:	5e                   	pop    esi
c00227cb:	5f                   	pop    edi
c00227cc:	5d                   	pop    ebp
c00227cd:	c3                   	ret    
c00227ce:	66 90                	xchg   ax,ax
c00227d0:	b8 20 00 00 00       	mov    eax,0x20
c00227d5:	29 d8                	sub    eax,ebx
c00227d7:	88 d9                	mov    cl,bl
c00227d9:	d3 e2                	shl    edx,cl
c00227db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00227df:	89 fa                	mov    edx,edi
c00227e1:	88 c1                	mov    cl,al
c00227e3:	d3 ea                	shr    edx,cl
c00227e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00227e9:	09 d1                	or     ecx,edx
c00227eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00227ef:	88 d9                	mov    cl,bl
c00227f1:	d3 e7                	shl    edi,cl
c00227f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00227f7:	89 f7                	mov    edi,esi
c00227f9:	88 c1                	mov    cl,al
c00227fb:	d3 ef                	shr    edi,cl
c00227fd:	88 d9                	mov    cl,bl
c00227ff:	d3 e6                	shl    esi,cl
c0022801:	89 ea                	mov    edx,ebp
c0022803:	88 c1                	mov    cl,al
c0022805:	d3 ea                	shr    edx,cl
c0022807:	09 d6                	or     esi,edx
c0022809:	89 f0                	mov    eax,esi
c002280b:	89 fa                	mov    edx,edi
c002280d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022811:	89 d7                	mov    edi,edx
c0022813:	89 c6                	mov    esi,eax
c0022815:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022819:	39 d7                	cmp    edi,edx
c002281b:	72 13                	jb     c0022830 <__udivdi3+0xec>
c002281d:	74 09                	je     c0022828 <__udivdi3+0xe4>
c002281f:	89 f0                	mov    eax,esi
c0022821:	31 db                	xor    ebx,ebx
c0022823:	e9 43 ff ff ff       	jmp    c002276b <__udivdi3+0x27>
c0022828:	88 d9                	mov    cl,bl
c002282a:	d3 e5                	shl    ebp,cl
c002282c:	39 c5                	cmp    ebp,eax
c002282e:	73 ef                	jae    c002281f <__udivdi3+0xdb>
c0022830:	8d 46 ff             	lea    eax,[esi-0x1]
c0022833:	31 db                	xor    ebx,ebx
c0022835:	e9 31 ff ff ff       	jmp    c002276b <__udivdi3+0x27>
c002283a:	66 90                	xchg   ax,ax
c002283c:	31 c0                	xor    eax,eax
c002283e:	e9 28 ff ff ff       	jmp    c002276b <__udivdi3+0x27>
c0022843:	90                   	nop

c0022844 <__umoddi3>:
c0022844:	55                   	push   ebp
c0022845:	57                   	push   edi
c0022846:	56                   	push   esi
c0022847:	53                   	push   ebx
c0022848:	83 ec 1c             	sub    esp,0x1c
c002284b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002284f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022853:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022857:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002285b:	89 da                	mov    edx,ebx
c002285d:	85 c0                	test   eax,eax
c002285f:	75 37                	jne    c0022898 <__umoddi3+0x54>
c0022861:	39 df                	cmp    edi,ebx
c0022863:	76 13                	jbe    c0022878 <__umoddi3+0x34>
c0022865:	89 f0                	mov    eax,esi
c0022867:	f7 f7                	div    edi
c0022869:	89 d0                	mov    eax,edx
c002286b:	31 d2                	xor    edx,edx
c002286d:	83 c4 1c             	add    esp,0x1c
c0022870:	5b                   	pop    ebx
c0022871:	5e                   	pop    esi
c0022872:	5f                   	pop    edi
c0022873:	5d                   	pop    ebp
c0022874:	c3                   	ret    
c0022875:	8d 76 00             	lea    esi,[esi+0x0]
c0022878:	89 fd                	mov    ebp,edi
c002287a:	85 ff                	test   edi,edi
c002287c:	75 0b                	jne    c0022889 <__umoddi3+0x45>
c002287e:	b8 01 00 00 00       	mov    eax,0x1
c0022883:	31 d2                	xor    edx,edx
c0022885:	f7 f7                	div    edi
c0022887:	89 c5                	mov    ebp,eax
c0022889:	89 d8                	mov    eax,ebx
c002288b:	31 d2                	xor    edx,edx
c002288d:	f7 f5                	div    ebp
c002288f:	89 f0                	mov    eax,esi
c0022891:	f7 f5                	div    ebp
c0022893:	89 d0                	mov    eax,edx
c0022895:	eb d4                	jmp    c002286b <__umoddi3+0x27>
c0022897:	90                   	nop
c0022898:	89 f1                	mov    ecx,esi
c002289a:	39 d8                	cmp    eax,ebx
c002289c:	76 0a                	jbe    c00228a8 <__umoddi3+0x64>
c002289e:	89 f0                	mov    eax,esi
c00228a0:	83 c4 1c             	add    esp,0x1c
c00228a3:	5b                   	pop    ebx
c00228a4:	5e                   	pop    esi
c00228a5:	5f                   	pop    edi
c00228a6:	5d                   	pop    ebp
c00228a7:	c3                   	ret    
c00228a8:	0f bd e8             	bsr    ebp,eax
c00228ab:	83 f5 1f             	xor    ebp,0x1f
c00228ae:	75 1c                	jne    c00228cc <__umoddi3+0x88>
c00228b0:	39 d8                	cmp    eax,ebx
c00228b2:	72 04                	jb     c00228b8 <__umoddi3+0x74>
c00228b4:	39 f7                	cmp    edi,esi
c00228b6:	77 08                	ja     c00228c0 <__umoddi3+0x7c>
c00228b8:	89 da                	mov    edx,ebx
c00228ba:	29 fe                	sub    esi,edi
c00228bc:	19 c2                	sbb    edx,eax
c00228be:	89 f1                	mov    ecx,esi
c00228c0:	89 c8                	mov    eax,ecx
c00228c2:	83 c4 1c             	add    esp,0x1c
c00228c5:	5b                   	pop    ebx
c00228c6:	5e                   	pop    esi
c00228c7:	5f                   	pop    edi
c00228c8:	5d                   	pop    ebp
c00228c9:	c3                   	ret    
c00228ca:	66 90                	xchg   ax,ax
c00228cc:	ba 20 00 00 00       	mov    edx,0x20
c00228d1:	29 ea                	sub    edx,ebp
c00228d3:	89 e9                	mov    ecx,ebp
c00228d5:	d3 e0                	shl    eax,cl
c00228d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00228db:	89 f8                	mov    eax,edi
c00228dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00228e1:	88 d1                	mov    cl,dl
c00228e3:	d3 e8                	shr    eax,cl
c00228e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00228e9:	09 c1                	or     ecx,eax
c00228eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00228ef:	89 e9                	mov    ecx,ebp
c00228f1:	d3 e7                	shl    edi,cl
c00228f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00228f7:	89 d8                	mov    eax,ebx
c00228f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00228fd:	88 d1                	mov    cl,dl
c00228ff:	d3 e8                	shr    eax,cl
c0022901:	89 c7                	mov    edi,eax
c0022903:	89 e9                	mov    ecx,ebp
c0022905:	d3 e3                	shl    ebx,cl
c0022907:	89 f0                	mov    eax,esi
c0022909:	88 d1                	mov    cl,dl
c002290b:	d3 e8                	shr    eax,cl
c002290d:	09 d8                	or     eax,ebx
c002290f:	89 e9                	mov    ecx,ebp
c0022911:	d3 e6                	shl    esi,cl
c0022913:	89 f3                	mov    ebx,esi
c0022915:	89 fa                	mov    edx,edi
c0022917:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002291b:	89 d1                	mov    ecx,edx
c002291d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022921:	89 c6                	mov    esi,eax
c0022923:	89 d7                	mov    edi,edx
c0022925:	39 d1                	cmp    ecx,edx
c0022927:	72 27                	jb     c0022950 <__umoddi3+0x10c>
c0022929:	74 21                	je     c002294c <__umoddi3+0x108>
c002292b:	89 ca                	mov    edx,ecx
c002292d:	29 f3                	sub    ebx,esi
c002292f:	19 fa                	sbb    edx,edi
c0022931:	89 d0                	mov    eax,edx
c0022933:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022937:	d3 e0                	shl    eax,cl
c0022939:	89 e9                	mov    ecx,ebp
c002293b:	d3 eb                	shr    ebx,cl
c002293d:	09 d8                	or     eax,ebx
c002293f:	d3 ea                	shr    edx,cl
c0022941:	83 c4 1c             	add    esp,0x1c
c0022944:	5b                   	pop    ebx
c0022945:	5e                   	pop    esi
c0022946:	5f                   	pop    edi
c0022947:	5d                   	pop    ebp
c0022948:	c3                   	ret    
c0022949:	8d 76 00             	lea    esi,[esi+0x0]
c002294c:	39 c3                	cmp    ebx,eax
c002294e:	73 db                	jae    c002292b <__umoddi3+0xe7>
c0022950:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022954:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022958:	89 d7                	mov    edi,edx
c002295a:	89 c6                	mov    esi,eax
c002295c:	eb cd                	jmp    c002292b <__umoddi3+0xe7>

Disassembly of section .init:

c002295e <_init>:
c002295e:	55                   	push   ebp
c002295f:	89 e5                	mov    ebp,esp
c0022961:	e8 b2 d7 fd ff       	call   c0000118 <frame_dummy>
c0022966:	e8 e5 fa ff ff       	call   c0022450 <__do_global_ctors_aux>
c002296b:	5d                   	pop    ebp
c002296c:	c3                   	ret    

Disassembly of section .fini:

c002296d <_fini>:
c002296d:	55                   	push   ebp
c002296e:	89 e5                	mov    ebp,esp
c0022970:	e8 33 d7 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022975:	5d                   	pop    ebp
c0022976:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022978 <Computer::~Computer()>:
c0022978:	83 ec 0c             	sub    esp,0xc
c002297b:	ba 94 3f 02 c0       	mov    edx,0xc0023f94
c0022980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022984:	89 10                	mov    DWORD PTR [eax],edx
c0022986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002298a:	83 ec 0c             	sub    esp,0xc
c002298d:	50                   	push   eax
c002298e:	e8 a9 b7 fe ff       	call   c000e13c <Device::~Device()>
c0022993:	83 c4 10             	add    esp,0x10
c0022996:	90                   	nop
c0022997:	83 c4 0c             	add    esp,0xc
c002299a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002299c <Computer::~Computer()>:
c002299c:	83 ec 0c             	sub    esp,0xc
c002299f:	83 ec 0c             	sub    esp,0xc
c00229a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229a6:	e8 cd ff ff ff       	call   c0022978 <Computer::~Computer()>
c00229ab:	83 c4 10             	add    esp,0x10
c00229ae:	83 ec 08             	sub    esp,0x8
c00229b1:	68 ec 01 00 00       	push   0x1ec
c00229b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229ba:	e8 5b a2 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00229bf:	83 c4 10             	add    esp,0x10
c00229c2:	83 c4 0c             	add    esp,0xc
c00229c5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00229c6 <idleCommon()>:
c00229c6:	83 ec 0c             	sub    esp,0xc
c00229c9:	fa                   	cli    
c00229ca:	ff 05 88 94 02 c0    	inc    DWORD PTR ds:0xc0029488
c00229d0:	e8 e7 5c ff ff       	call   c00186bc <schedule()>
c00229d5:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c00229da:	48                   	dec    eax
c00229db:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c00229e0:	75 01                	jne    c00229e3 <idleCommon()+0x1d>
c00229e2:	fb                   	sti    
c00229e3:	83 c4 0c             	add    esp,0xc
c00229e6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00229e8 <LinkedList<UnixFile>::~LinkedList()>:
c00229e8:	90                   	nop
c00229e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00229ea <LinkedList<UnixFile>::LinkedList()>:
c00229ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00229f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00229ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a03:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a0e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022a1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a23:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a2a:	90                   	nop
c0022a2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0022a2c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0022a2c:	83 ec 0c             	sub    esp,0xc
c0022a2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022a34:	75 10                	jne    c0022a46 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022a36:	83 ec 0c             	sub    esp,0xc
c0022a39:	68 64 43 02 c0       	push   0xc0024364
c0022a3e:	e8 c4 1f ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022a43:	83 c4 10             	add    esp,0x10
c0022a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a4c:	85 c0                	test   eax,eax
c0022a4e:	74 34                	je     c0022a84 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a57:	85 c0                	test   eax,eax
c0022a59:	74 29                	je     c0022a84 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a7b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a82:	eb 65                	jmp    c0022ae9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a8a:	85 c0                	test   eax,eax
c0022a8c:	75 4b                	jne    c0022ad9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a95:	85 c0                	test   eax,eax
c0022a97:	75 40                	jne    c0022ad9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022aa1:	89 10                	mov    DWORD PTR [eax],edx
c0022aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022aab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ab5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ac3:	85 c0                	test   eax,eax
c0022ac5:	74 22                	je     c0022ae9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022ac7:	83 ec 0c             	sub    esp,0xc
c0022aca:	68 86 43 02 c0       	push   0xc0024386
c0022acf:	e8 33 1f ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022ad4:	83 c4 10             	add    esp,0x10
c0022ad7:	eb 10                	jmp    c0022ae9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022ad9:	83 ec 0c             	sub    esp,0xc
c0022adc:	68 90 43 02 c0       	push   0xc0024390
c0022ae1:	e8 21 1f ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022ae6:	83 c4 10             	add    esp,0x10
c0022ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022af0:	8d 50 01             	lea    edx,[eax+0x1]
c0022af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022afa:	90                   	nop
c0022afb:	83 c4 0c             	add    esp,0xc
c0022afe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022b00 <LinkedList<UnixFile>::getFirstElement()>:
c0022b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b06:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022b08 <LinkedList<UnixFile>::removeFirst()>:
c0022b08:	83 ec 0c             	sub    esp,0xc
c0022b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b11:	85 c0                	test   eax,eax
c0022b13:	75 12                	jne    c0022b27 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022b15:	83 ec 0c             	sub    esp,0xc
c0022b18:	68 9c 43 02 c0       	push   0xc002439c
c0022b1d:	e8 e5 1e ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022b22:	83 c4 10             	add    esp,0x10
c0022b25:	eb 7e                	jmp    c0022ba5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b31:	85 c0                	test   eax,eax
c0022b33:	74 10                	je     c0022b45 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022b35:	83 ec 0c             	sub    esp,0xc
c0022b38:	68 e7 43 02 c0       	push   0xc00243e7
c0022b3d:	e8 c5 1e ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022b42:	83 c4 10             	add    esp,0x10
c0022b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b49:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b4b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b4e:	85 c0                	test   eax,eax
c0022b50:	75 33                	jne    c0022b85 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b6b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b6e:	83 f8 01             	cmp    eax,0x1
c0022b71:	74 21                	je     c0022b94 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022b73:	83 ec 0c             	sub    esp,0xc
c0022b76:	68 c0 43 02 c0       	push   0xc00243c0
c0022b7b:	e8 87 1e ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022b80:	83 c4 10             	add    esp,0x10
c0022b83:	eb 0f                	jmp    c0022b94 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b8b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b92:	89 10                	mov    DWORD PTR [eax],edx
c0022b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b9b:	8d 50 ff             	lea    edx,[eax-0x1]
c0022b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022ba5:	83 c4 0c             	add    esp,0xc
c0022ba8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022baa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022baa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022bae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bb1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022bb2 <DriverlessDevice::~DriverlessDevice()>:
c0022bb2:	ba fc 4b 02 c0       	mov    edx,0xc0024bfc
c0022bb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bbb:	89 10                	mov    DWORD PTR [eax],edx
c0022bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bc1:	50                   	push   eax
c0022bc2:	e8 75 b5 fe ff       	call   c000e13c <Device::~Device()>
c0022bc7:	83 c4 04             	add    esp,0x4
c0022bca:	90                   	nop
c0022bcb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022bcc <DriverlessDevice::~DriverlessDevice()>:
c0022bcc:	83 ec 0c             	sub    esp,0xc
c0022bcf:	83 ec 0c             	sub    esp,0xc
c0022bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bd6:	e8 d7 ff ff ff       	call   c0022bb2 <DriverlessDevice::~DriverlessDevice()>
c0022bdb:	83 c4 10             	add    esp,0x10
c0022bde:	83 ec 08             	sub    esp,0x8
c0022be1:	68 58 01 00 00       	push   0x158
c0022be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bea:	e8 2b a0 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0022bef:	83 c4 10             	add    esp,0x10
c0022bf2:	83 c4 0c             	add    esp,0xc
c0022bf5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022bf6 <LinkedList<Device>::addElement(Device*)>:
c0022bf6:	83 ec 0c             	sub    esp,0xc
c0022bf9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022bfe:	75 10                	jne    c0022c10 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022c00:	83 ec 0c             	sub    esp,0xc
c0022c03:	68 64 43 02 c0       	push   0xc0024364
c0022c08:	e8 fa 1d ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022c0d:	83 c4 10             	add    esp,0x10
c0022c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c16:	85 c0                	test   eax,eax
c0022c18:	74 3a                	je     c0022c54 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c21:	85 c0                	test   eax,eax
c0022c23:	74 2f                	je     c0022c54 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c30:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c3e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c48:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022c52:	eb 68                	jmp    c0022cbc <LinkedList<Device>::addElement(Device*)+0xc6>
c0022c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c5a:	85 c0                	test   eax,eax
c0022c5c:	75 4e                	jne    c0022cac <LinkedList<Device>::addElement(Device*)+0xb6>
c0022c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c65:	85 c0                	test   eax,eax
c0022c67:	75 43                	jne    c0022cac <LinkedList<Device>::addElement(Device*)+0xb6>
c0022c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c71:	89 10                	mov    DWORD PTR [eax],edx
c0022c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c7b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c85:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c93:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c96:	85 c0                	test   eax,eax
c0022c98:	74 22                	je     c0022cbc <LinkedList<Device>::addElement(Device*)+0xc6>
c0022c9a:	83 ec 0c             	sub    esp,0xc
c0022c9d:	68 86 43 02 c0       	push   0xc0024386
c0022ca2:	e8 60 1d ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022ca7:	83 c4 10             	add    esp,0x10
c0022caa:	eb 10                	jmp    c0022cbc <LinkedList<Device>::addElement(Device*)+0xc6>
c0022cac:	83 ec 0c             	sub    esp,0xc
c0022caf:	68 90 43 02 c0       	push   0xc0024390
c0022cb4:	e8 4e 1d ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022cb9:	83 c4 10             	add    esp,0x10
c0022cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cc3:	8d 50 01             	lea    edx,[eax+0x1]
c0022cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022ccd:	90                   	nop
c0022cce:	83 c4 0c             	add    esp,0xc
c0022cd1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022cd2 <LinkedList<Device>::LinkedList()>:
c0022cd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cd6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ce0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022ce7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ceb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cf6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022d07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d0b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022d12:	90                   	nop
c0022d13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022d14 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d18:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d1a:	85 c0                	test   eax,eax
c0022d1c:	75 0e                	jne    c0022d2c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022d1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d25:	85 c0                	test   eax,eax
c0022d27:	75 03                	jne    c0022d2c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022d29:	b0 01                	mov    al,0x1
c0022d2b:	c3                   	ret    
c0022d2c:	b0 00                	mov    al,0x0
c0022d2e:	90                   	nop
c0022d2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022d30 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d34:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d36:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022d38 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022d38:	83 ec 0c             	sub    esp,0xc
c0022d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d41:	85 c0                	test   eax,eax
c0022d43:	75 17                	jne    c0022d5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022d45:	83 ec 0c             	sub    esp,0xc
c0022d48:	68 9c 43 02 c0       	push   0xc002439c
c0022d4d:	e8 b5 1c ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022d52:	83 c4 10             	add    esp,0x10
c0022d55:	e9 92 00 00 00       	jmp    c0022dec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022d5a:	66 90                	xchg   ax,ax
c0022d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d63:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022d66:	85 c0                	test   eax,eax
c0022d68:	0f 95 c0             	setne  al
c0022d6b:	84 c0                	test   al,al
c0022d6d:	74 11                	je     c0022d80 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022d6f:	83 ec 0c             	sub    esp,0xc
c0022d72:	68 e7 43 02 c0       	push   0xc00243e7
c0022d77:	e8 8b 1c ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022d7c:	83 c4 10             	add    esp,0x10
c0022d7f:	90                   	nop
c0022d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d84:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022d89:	85 c0                	test   eax,eax
c0022d8b:	0f 94 c0             	sete   al
c0022d8e:	84 c0                	test   al,al
c0022d90:	74 36                	je     c0022dc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d96:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022da0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022dae:	83 f8 01             	cmp    eax,0x1
c0022db1:	74 25                	je     c0022dd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022db3:	83 ec 0c             	sub    esp,0xc
c0022db6:	68 c0 43 02 c0       	push   0xc00243c0
c0022dbb:	e8 47 1c ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022dc0:	83 c4 10             	add    esp,0x10
c0022dc3:	eb 13                	jmp    c0022dd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0022dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd5:	89 10                	mov    DWORD PTR [eax],edx
c0022dd7:	90                   	nop
c0022dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ddc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ddf:	8d 50 ff             	lea    edx,[eax-0x1]
c0022de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022de6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022de9:	8d 76 00             	lea    esi,[esi+0x0]
c0022dec:	83 c4 0c             	add    esp,0xc
c0022def:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022df0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022df0:	83 ec 0c             	sub    esp,0xc
c0022df3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022df8:	75 12                	jne    c0022e0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022dfa:	83 ec 0c             	sub    esp,0xc
c0022dfd:	68 64 43 02 c0       	push   0xc0024364
c0022e02:	e8 00 1c ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022e07:	83 c4 10             	add    esp,0x10
c0022e0a:	66 90                	xchg   ax,ax
c0022e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e12:	85 c0                	test   eax,eax
c0022e14:	74 36                	je     c0022e4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e1d:	85 c0                	test   eax,eax
c0022e1f:	74 2b                	je     c0022e4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e2c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e41:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022e48:	eb 6a                	jmp    c0022eb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022e4a:	66 90                	xchg   ax,ax
c0022e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e50:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e52:	85 c0                	test   eax,eax
c0022e54:	75 4e                	jne    c0022ea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e5d:	85 c0                	test   eax,eax
c0022e5f:	75 43                	jne    c0022ea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e69:	89 10                	mov    DWORD PTR [eax],edx
c0022e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e7d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e8b:	85 c0                	test   eax,eax
c0022e8d:	74 25                	je     c0022eb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022e8f:	83 ec 0c             	sub    esp,0xc
c0022e92:	68 86 43 02 c0       	push   0xc0024386
c0022e97:	e8 6b 1b ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022e9c:	83 c4 10             	add    esp,0x10
c0022e9f:	eb 13                	jmp    c0022eb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0022ea4:	83 ec 0c             	sub    esp,0xc
c0022ea7:	68 90 43 02 c0       	push   0xc0024390
c0022eac:	e8 56 1b ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022eb1:	83 c4 10             	add    esp,0x10
c0022eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ebb:	8d 50 01             	lea    edx,[eax+0x1]
c0022ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022ec5:	90                   	nop
c0022ec6:	83 c4 0c             	add    esp,0xc
c0022ec9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022ecc <ACPI::~ACPI()>:
c0022ecc:	83 ec 0c             	sub    esp,0xc
c0022ecf:	ba 88 56 02 c0       	mov    edx,0xc0025688
c0022ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed8:	89 10                	mov    DWORD PTR [eax],edx
c0022eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ede:	83 ec 0c             	sub    esp,0xc
c0022ee1:	50                   	push   eax
c0022ee2:	e8 55 b2 fe ff       	call   c000e13c <Device::~Device()>
c0022ee7:	83 c4 10             	add    esp,0x10
c0022eea:	90                   	nop
c0022eeb:	83 c4 0c             	add    esp,0xc
c0022eee:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022ef0 <ACPI::~ACPI()>:
c0022ef0:	83 ec 0c             	sub    esp,0xc
c0022ef3:	83 ec 0c             	sub    esp,0xc
c0022ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022efa:	e8 cd ff ff ff       	call   c0022ecc <ACPI::~ACPI()>
c0022eff:	83 c4 10             	add    esp,0x10
c0022f02:	83 ec 08             	sub    esp,0x8
c0022f05:	68 64 12 00 00       	push   0x1264
c0022f0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f0e:	e8 07 9d fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0022f13:	83 c4 10             	add    esp,0x10
c0022f16:	83 c4 0c             	add    esp,0xc
c0022f19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022f1c <LinkedList<Device>::~LinkedList()>:
c0022f1c:	90                   	nop
c0022f1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022f20 <LinkedList<Device>::isEmpty()>:
c0022f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f24:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f26:	85 c0                	test   eax,eax
c0022f28:	75 0e                	jne    c0022f38 <LinkedList<Device>::isEmpty()+0x18>
c0022f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022f31:	85 c0                	test   eax,eax
c0022f33:	75 03                	jne    c0022f38 <LinkedList<Device>::isEmpty()+0x18>
c0022f35:	b0 01                	mov    al,0x1
c0022f37:	c3                   	ret    
c0022f38:	b0 00                	mov    al,0x0
c0022f3a:	90                   	nop
c0022f3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022f3c <LinkedList<Device>::getFirstElement()>:
c0022f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f40:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022f44 <LinkedList<Device>::removeFirst()>:
c0022f44:	83 ec 0c             	sub    esp,0xc
c0022f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f4d:	85 c0                	test   eax,eax
c0022f4f:	75 17                	jne    c0022f68 <LinkedList<Device>::removeFirst()+0x24>
c0022f51:	83 ec 0c             	sub    esp,0xc
c0022f54:	68 9c 43 02 c0       	push   0xc002439c
c0022f59:	e8 a9 1a ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022f5e:	83 c4 10             	add    esp,0x10
c0022f61:	e9 92 00 00 00       	jmp    c0022ff8 <LinkedList<Device>::removeFirst()+0xb4>
c0022f66:	66 90                	xchg   ax,ax
c0022f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022f6f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022f75:	85 c0                	test   eax,eax
c0022f77:	74 13                	je     c0022f8c <LinkedList<Device>::removeFirst()+0x48>
c0022f79:	83 ec 0c             	sub    esp,0xc
c0022f7c:	68 e7 43 02 c0       	push   0xc00243e7
c0022f81:	e8 81 1a ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022f86:	83 c4 10             	add    esp,0x10
c0022f89:	8d 76 00             	lea    esi,[esi+0x0]
c0022f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f90:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f92:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022f98:	85 c0                	test   eax,eax
c0022f9a:	75 34                	jne    c0022fd0 <LinkedList<Device>::removeFirst()+0x8c>
c0022f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fa0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022faa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022fb8:	83 f8 01             	cmp    eax,0x1
c0022fbb:	74 27                	je     c0022fe4 <LinkedList<Device>::removeFirst()+0xa0>
c0022fbd:	83 ec 0c             	sub    esp,0xc
c0022fc0:	68 c0 43 02 c0       	push   0xc00243c0
c0022fc5:	e8 3d 1a ff ff       	call   c0014a07 <Krnl::panic(char const*)>
c0022fca:	83 c4 10             	add    esp,0x10
c0022fcd:	eb 15                	jmp    c0022fe4 <LinkedList<Device>::removeFirst()+0xa0>
c0022fcf:	90                   	nop
c0022fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fd6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fe0:	89 10                	mov    DWORD PTR [eax],edx
c0022fe2:	66 90                	xchg   ax,ax
c0022fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fe8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022feb:	8d 50 ff             	lea    edx,[eax-0x1]
c0022fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ff2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0022ff8:	83 c4 0c             	add    esp,0xc
c0022ffb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022ffc <CPU::~CPU()>:
c0022ffc:	83 ec 0c             	sub    esp,0xc
c0022fff:	ba 64 5a 02 c0       	mov    edx,0xc0025a64
c0023004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023008:	89 10                	mov    DWORD PTR [eax],edx
c002300a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002300e:	83 ec 0c             	sub    esp,0xc
c0023011:	50                   	push   eax
c0023012:	e8 25 b1 fe ff       	call   c000e13c <Device::~Device()>
c0023017:	83 c4 10             	add    esp,0x10
c002301a:	90                   	nop
c002301b:	83 c4 0c             	add    esp,0xc
c002301e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0023020 <CPU::~CPU()>:
c0023020:	83 ec 0c             	sub    esp,0xc
c0023023:	83 ec 0c             	sub    esp,0xc
c0023026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002302a:	e8 cd ff ff ff       	call   c0022ffc <CPU::~CPU()>
c002302f:	83 c4 10             	add    esp,0x10
c0023032:	83 ec 08             	sub    esp,0x8
c0023035:	68 98 11 00 00       	push   0x1198
c002303a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002303e:	e8 d7 9b fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023043:	83 c4 10             	add    esp,0x10
c0023046:	83 c4 0c             	add    esp,0xc
c0023049:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002304c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002304c:	90                   	nop
c002304d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0023050 <ThreadControlBlock::ThreadControlBlock()>:
c0023050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023054:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002305b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002305f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0023066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002306a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0023071:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023075:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002307c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023080:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0023087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002308b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002308f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023093:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0023097:	90                   	nop
c0023098:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002309c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002309c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00230a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00230b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00230bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00230c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00230d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00230dc:	90                   	nop
c00230dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00230e0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00230e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00230e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00230e7:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00230e8 <Vm::_FPUState::_FPUState()>:
c00230e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230ec:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00230f3:	90                   	nop
c00230f4:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00230f6 <PCI::~PCI()>:
c00230f6:	83 ec 0c             	sub    esp,0xc
c00230f9:	ba 6c 68 02 c0       	mov    edx,0xc002686c
c00230fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023102:	89 10                	mov    DWORD PTR [eax],edx
c0023104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023108:	83 ec 0c             	sub    esp,0xc
c002310b:	50                   	push   eax
c002310c:	e8 fb a9 fe ff       	call   c000db0c <Bus::~Bus()>
c0023111:	83 c4 10             	add    esp,0x10
c0023114:	90                   	nop
c0023115:	83 c4 0c             	add    esp,0xc
c0023118:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002311a <PCI::~PCI()>:
c002311a:	83 ec 0c             	sub    esp,0xc
c002311d:	83 ec 0c             	sub    esp,0xc
c0023120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023124:	e8 cd ff ff ff       	call   c00230f6 <PCI::~PCI()>
c0023129:	83 c4 10             	add    esp,0x10
c002312c:	83 ec 08             	sub    esp,0x8
c002312f:	68 5c 01 00 00       	push   0x15c
c0023134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023138:	e8 dd 9a fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002313d:	83 c4 10             	add    esp,0x10
c0023140:	83 c4 0c             	add    esp,0xc
c0023143:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0023144 <IDE::~IDE()>:
c0023144:	83 ec 0c             	sub    esp,0xc
c0023147:	ba 20 69 02 c0       	mov    edx,0xc0026920
c002314c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023150:	89 10                	mov    DWORD PTR [eax],edx
c0023152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023156:	83 ec 0c             	sub    esp,0xc
c0023159:	50                   	push   eax
c002315a:	e8 f5 b4 fe ff       	call   c000e654 <HardDiskController::~HardDiskController()>
c002315f:	83 c4 10             	add    esp,0x10
c0023162:	90                   	nop
c0023163:	83 c4 0c             	add    esp,0xc
c0023166:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023168 <IDE::~IDE()>:
c0023168:	83 ec 0c             	sub    esp,0xc
c002316b:	83 ec 0c             	sub    esp,0xc
c002316e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023172:	e8 cd ff ff ff       	call   c0023144 <IDE::~IDE()>
c0023177:	83 c4 10             	add    esp,0x10
c002317a:	83 ec 08             	sub    esp,0x8
c002317d:	68 70 02 00 00       	push   0x270
c0023182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023186:	e8 8f 9a fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002318b:	83 c4 10             	add    esp,0x10
c002318e:	83 c4 0c             	add    esp,0xc
c0023191:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0023192 <SATABus::~SATABus()>:
c0023192:	83 ec 0c             	sub    esp,0xc
c0023195:	ba dc 69 02 c0       	mov    edx,0xc00269dc
c002319a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002319e:	89 10                	mov    DWORD PTR [eax],edx
c00231a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231a4:	83 ec 0c             	sub    esp,0xc
c00231a7:	50                   	push   eax
c00231a8:	e8 a7 b4 fe ff       	call   c000e654 <HardDiskController::~HardDiskController()>
c00231ad:	83 c4 10             	add    esp,0x10
c00231b0:	90                   	nop
c00231b1:	83 c4 0c             	add    esp,0xc
c00231b4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00231b6 <SATABus::~SATABus()>:
c00231b6:	83 ec 0c             	sub    esp,0xc
c00231b9:	83 ec 0c             	sub    esp,0xc
c00231bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231c0:	e8 cd ff ff ff       	call   c0023192 <SATABus::~SATABus()>
c00231c5:	83 c4 10             	add    esp,0x10
c00231c8:	83 ec 08             	sub    esp,0x8
c00231cb:	68 64 01 00 00       	push   0x164
c00231d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231d4:	e8 41 9a fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00231d9:	83 c4 10             	add    esp,0x10
c00231dc:	83 c4 0c             	add    esp,0xc
c00231df:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00231e0 <ATA::~ATA()>:
c00231e0:	83 ec 0c             	sub    esp,0xc
c00231e3:	ba 54 6a 02 c0       	mov    edx,0xc0026a54
c00231e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231ec:	89 10                	mov    DWORD PTR [eax],edx
c00231ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f2:	83 ec 0c             	sub    esp,0xc
c00231f5:	50                   	push   eax
c00231f6:	e8 3b b5 fe ff       	call   c000e736 <PhysicalDisk::~PhysicalDisk()>
c00231fb:	83 c4 10             	add    esp,0x10
c00231fe:	90                   	nop
c00231ff:	83 c4 0c             	add    esp,0xc
c0023202:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023204 <ATA::~ATA()>:
c0023204:	83 ec 0c             	sub    esp,0xc
c0023207:	83 ec 0c             	sub    esp,0xc
c002320a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002320e:	e8 cd ff ff ff       	call   c00231e0 <ATA::~ATA()>
c0023213:	83 c4 10             	add    esp,0x10
c0023216:	83 ec 08             	sub    esp,0x8
c0023219:	68 7c 01 00 00       	push   0x17c
c002321e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023222:	e8 f3 99 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023227:	83 c4 10             	add    esp,0x10
c002322a:	83 c4 0c             	add    esp,0xc
c002322d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002322e <ATAPI::~ATAPI()>:
c002322e:	83 ec 0c             	sub    esp,0xc
c0023231:	ba b8 6a 02 c0       	mov    edx,0xc0026ab8
c0023236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002323a:	89 10                	mov    DWORD PTR [eax],edx
c002323c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023240:	83 ec 0c             	sub    esp,0xc
c0023243:	50                   	push   eax
c0023244:	e8 ed b4 fe ff       	call   c000e736 <PhysicalDisk::~PhysicalDisk()>
c0023249:	83 c4 10             	add    esp,0x10
c002324c:	90                   	nop
c002324d:	83 c4 0c             	add    esp,0xc
c0023250:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0023252 <ATAPI::~ATAPI()>:
c0023252:	83 ec 0c             	sub    esp,0xc
c0023255:	83 ec 0c             	sub    esp,0xc
c0023258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002325c:	e8 cd ff ff ff       	call   c002322e <ATAPI::~ATAPI()>
c0023261:	83 c4 10             	add    esp,0x10
c0023264:	83 ec 08             	sub    esp,0x8
c0023267:	68 84 01 00 00       	push   0x184
c002326c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023270:	e8 a5 99 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023275:	83 c4 10             	add    esp,0x10
c0023278:	83 c4 0c             	add    esp,0xc
c002327b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002327c <SATA::~SATA()>:
c002327c:	83 ec 0c             	sub    esp,0xc
c002327f:	ba f4 6c 02 c0       	mov    edx,0xc0026cf4
c0023284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023288:	89 10                	mov    DWORD PTR [eax],edx
c002328a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002328e:	83 ec 0c             	sub    esp,0xc
c0023291:	50                   	push   eax
c0023292:	e8 9f b4 fe ff       	call   c000e736 <PhysicalDisk::~PhysicalDisk()>
c0023297:	83 c4 10             	add    esp,0x10
c002329a:	90                   	nop
c002329b:	83 c4 0c             	add    esp,0xc
c002329e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00232a0 <SATA::~SATA()>:
c00232a0:	83 ec 0c             	sub    esp,0xc
c00232a3:	83 ec 0c             	sub    esp,0xc
c00232a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232aa:	e8 cd ff ff ff       	call   c002327c <SATA::~SATA()>
c00232af:	83 c4 10             	add    esp,0x10
c00232b2:	83 ec 08             	sub    esp,0x8
c00232b5:	68 7c 01 00 00       	push   0x17c
c00232ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232be:	e8 57 99 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00232c3:	83 c4 10             	add    esp,0x10
c00232c6:	83 c4 0c             	add    esp,0xc
c00232c9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00232ca <SATAPI::~SATAPI()>:
c00232ca:	83 ec 0c             	sub    esp,0xc
c00232cd:	ba 60 6e 02 c0       	mov    edx,0xc0026e60
c00232d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232d6:	89 10                	mov    DWORD PTR [eax],edx
c00232d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232dc:	83 ec 0c             	sub    esp,0xc
c00232df:	50                   	push   eax
c00232e0:	e8 51 b4 fe ff       	call   c000e736 <PhysicalDisk::~PhysicalDisk()>
c00232e5:	83 c4 10             	add    esp,0x10
c00232e8:	90                   	nop
c00232e9:	83 c4 0c             	add    esp,0xc
c00232ec:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00232ee <SATAPI::~SATAPI()>:
c00232ee:	83 ec 0c             	sub    esp,0xc
c00232f1:	83 ec 0c             	sub    esp,0xc
c00232f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232f8:	e8 cd ff ff ff       	call   c00232ca <SATAPI::~SATAPI()>
c00232fd:	83 c4 10             	add    esp,0x10
c0023300:	83 ec 08             	sub    esp,0x8
c0023303:	68 84 01 00 00       	push   0x184
c0023308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002330c:	e8 09 99 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023311:	83 c4 10             	add    esp,0x10
c0023314:	83 c4 0c             	add    esp,0xc
c0023317:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023318 <AVX::~AVX()>:
c0023318:	83 ec 0c             	sub    esp,0xc
c002331b:	ba a0 6e 02 c0       	mov    edx,0xc0026ea0
c0023320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023324:	89 10                	mov    DWORD PTR [eax],edx
c0023326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332a:	83 ec 0c             	sub    esp,0xc
c002332d:	50                   	push   eax
c002332e:	e8 89 b4 fe ff       	call   c000e7bc <FPU::~FPU()>
c0023333:	83 c4 10             	add    esp,0x10
c0023336:	90                   	nop
c0023337:	83 c4 0c             	add    esp,0xc
c002333a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002333c <AVX::~AVX()>:
c002333c:	83 ec 0c             	sub    esp,0xc
c002333f:	83 ec 0c             	sub    esp,0xc
c0023342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023346:	e8 cd ff ff ff       	call   c0023318 <AVX::~AVX()>
c002334b:	83 c4 10             	add    esp,0x10
c002334e:	83 ec 08             	sub    esp,0x8
c0023351:	68 58 01 00 00       	push   0x158
c0023356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002335a:	e8 bb 98 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002335f:	83 c4 10             	add    esp,0x10
c0023362:	83 c4 0c             	add    esp,0xc
c0023365:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023368 <MMX::~MMX()>:
c0023368:	83 ec 0c             	sub    esp,0xc
c002336b:	ba e0 6e 02 c0       	mov    edx,0xc0026ee0
c0023370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023374:	89 10                	mov    DWORD PTR [eax],edx
c0023376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002337a:	83 ec 0c             	sub    esp,0xc
c002337d:	50                   	push   eax
c002337e:	e8 39 b4 fe ff       	call   c000e7bc <FPU::~FPU()>
c0023383:	83 c4 10             	add    esp,0x10
c0023386:	90                   	nop
c0023387:	83 c4 0c             	add    esp,0xc
c002338a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002338c <MMX::~MMX()>:
c002338c:	83 ec 0c             	sub    esp,0xc
c002338f:	83 ec 0c             	sub    esp,0xc
c0023392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023396:	e8 cd ff ff ff       	call   c0023368 <MMX::~MMX()>
c002339b:	83 c4 10             	add    esp,0x10
c002339e:	83 ec 08             	sub    esp,0x8
c00233a1:	68 58 01 00 00       	push   0x158
c00233a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233aa:	e8 6b 98 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00233af:	83 c4 10             	add    esp,0x10
c00233b2:	83 c4 0c             	add    esp,0xc
c00233b5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00233b8 <SSE::~SSE()>:
c00233b8:	83 ec 0c             	sub    esp,0xc
c00233bb:	ba 20 6f 02 c0       	mov    edx,0xc0026f20
c00233c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c4:	89 10                	mov    DWORD PTR [eax],edx
c00233c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ca:	83 ec 0c             	sub    esp,0xc
c00233cd:	50                   	push   eax
c00233ce:	e8 e9 b3 fe ff       	call   c000e7bc <FPU::~FPU()>
c00233d3:	83 c4 10             	add    esp,0x10
c00233d6:	90                   	nop
c00233d7:	83 c4 0c             	add    esp,0xc
c00233da:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00233dc <SSE::~SSE()>:
c00233dc:	83 ec 0c             	sub    esp,0xc
c00233df:	83 ec 0c             	sub    esp,0xc
c00233e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233e6:	e8 cd ff ff ff       	call   c00233b8 <SSE::~SSE()>
c00233eb:	83 c4 10             	add    esp,0x10
c00233ee:	83 ec 08             	sub    esp,0x8
c00233f1:	68 58 01 00 00       	push   0x158
c00233f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233fa:	e8 1b 98 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00233ff:	83 c4 10             	add    esp,0x10
c0023402:	83 c4 0c             	add    esp,0xc
c0023405:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023408 <x87::~x87()>:
c0023408:	83 ec 0c             	sub    esp,0xc
c002340b:	ba 60 6f 02 c0       	mov    edx,0xc0026f60
c0023410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023414:	89 10                	mov    DWORD PTR [eax],edx
c0023416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002341a:	83 ec 0c             	sub    esp,0xc
c002341d:	50                   	push   eax
c002341e:	e8 99 b3 fe ff       	call   c000e7bc <FPU::~FPU()>
c0023423:	83 c4 10             	add    esp,0x10
c0023426:	90                   	nop
c0023427:	83 c4 0c             	add    esp,0xc
c002342a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002342c <x87::~x87()>:
c002342c:	83 ec 0c             	sub    esp,0xc
c002342f:	83 ec 0c             	sub    esp,0xc
c0023432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023436:	e8 cd ff ff ff       	call   c0023408 <x87::~x87()>
c002343b:	83 c4 10             	add    esp,0x10
c002343e:	83 ec 08             	sub    esp,0x8
c0023441:	68 58 01 00 00       	push   0x158
c0023446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002344a:	e8 cb 97 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002344f:	83 c4 10             	add    esp,0x10
c0023452:	83 c4 0c             	add    esp,0xc
c0023455:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023456 <IOAPIC::~IOAPIC()>:
c0023456:	83 ec 0c             	sub    esp,0xc
c0023459:	ba b8 70 02 c0       	mov    edx,0xc00270b8
c002345e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023462:	89 10                	mov    DWORD PTR [eax],edx
c0023464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023468:	83 ec 0c             	sub    esp,0xc
c002346b:	50                   	push   eax
c002346c:	e8 cb ac fe ff       	call   c000e13c <Device::~Device()>
c0023471:	83 c4 10             	add    esp,0x10
c0023474:	90                   	nop
c0023475:	83 c4 0c             	add    esp,0xc
c0023478:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002347a <IOAPIC::~IOAPIC()>:
c002347a:	83 ec 0c             	sub    esp,0xc
c002347d:	83 ec 0c             	sub    esp,0xc
c0023480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023484:	e8 cd ff ff ff       	call   c0023456 <IOAPIC::~IOAPIC()>
c0023489:	83 c4 10             	add    esp,0x10
c002348c:	83 ec 08             	sub    esp,0x8
c002348f:	68 68 01 00 00       	push   0x168
c0023494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023498:	e8 7d 97 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002349d:	83 c4 10             	add    esp,0x10
c00234a0:	83 c4 0c             	add    esp,0xc
c00234a3:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00234a4 <APIC::~APIC()>:
c00234a4:	83 ec 0c             	sub    esp,0xc
c00234a7:	ba 70 70 02 c0       	mov    edx,0xc0027070
c00234ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b0:	89 10                	mov    DWORD PTR [eax],edx
c00234b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b6:	83 ec 0c             	sub    esp,0xc
c00234b9:	50                   	push   eax
c00234ba:	e8 d1 b7 fe ff       	call   c000ec90 <InterruptController::~InterruptController()>
c00234bf:	83 c4 10             	add    esp,0x10
c00234c2:	90                   	nop
c00234c3:	83 c4 0c             	add    esp,0xc
c00234c6:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00234c8 <APIC::~APIC()>:
c00234c8:	83 ec 0c             	sub    esp,0xc
c00234cb:	83 ec 0c             	sub    esp,0xc
c00234ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234d2:	e8 cd ff ff ff       	call   c00234a4 <APIC::~APIC()>
c00234d7:	83 c4 10             	add    esp,0x10
c00234da:	83 ec 08             	sub    esp,0x8
c00234dd:	68 58 21 00 00       	push   0x2158
c00234e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234e6:	e8 2f 97 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00234eb:	83 c4 10             	add    esp,0x10
c00234ee:	83 c4 0c             	add    esp,0xc
c00234f1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00234f2 <PIC::~PIC()>:
c00234f2:	83 ec 0c             	sub    esp,0xc
c00234f5:	ba 08 71 02 c0       	mov    edx,0xc0027108
c00234fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234fe:	89 10                	mov    DWORD PTR [eax],edx
c0023500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023504:	83 ec 0c             	sub    esp,0xc
c0023507:	50                   	push   eax
c0023508:	e8 83 b7 fe ff       	call   c000ec90 <InterruptController::~InterruptController()>
c002350d:	83 c4 10             	add    esp,0x10
c0023510:	90                   	nop
c0023511:	83 c4 0c             	add    esp,0xc
c0023514:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023516 <PIC::~PIC()>:
c0023516:	83 ec 0c             	sub    esp,0xc
c0023519:	83 ec 0c             	sub    esp,0xc
c002351c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023520:	e8 cd ff ff ff       	call   c00234f2 <PIC::~PIC()>
c0023525:	83 c4 10             	add    esp,0x10
c0023528:	83 ec 08             	sub    esp,0x8
c002352b:	68 58 21 00 00       	push   0x2158
c0023530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023534:	e8 e1 96 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023539:	83 c4 10             	add    esp,0x10
c002353c:	83 c4 0c             	add    esp,0xc
c002353f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023540 <APICTimer::~APICTimer()>:
c0023540:	83 ec 0c             	sub    esp,0xc
c0023543:	ba 5c 71 02 c0       	mov    edx,0xc002715c
c0023548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002354c:	89 10                	mov    DWORD PTR [eax],edx
c002354e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023552:	83 ec 0c             	sub    esp,0xc
c0023555:	50                   	push   eax
c0023556:	e8 85 d5 fe ff       	call   c0010ae0 <Timer::~Timer()>
c002355b:	83 c4 10             	add    esp,0x10
c002355e:	90                   	nop
c002355f:	83 c4 0c             	add    esp,0xc
c0023562:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023564 <APICTimer::~APICTimer()>:
c0023564:	83 ec 0c             	sub    esp,0xc
c0023567:	83 ec 0c             	sub    esp,0xc
c002356a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002356e:	e8 cd ff ff ff       	call   c0023540 <APICTimer::~APICTimer()>
c0023573:	83 c4 10             	add    esp,0x10
c0023576:	83 ec 08             	sub    esp,0x8
c0023579:	68 60 01 00 00       	push   0x160
c002357e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023582:	e8 93 96 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023587:	83 c4 10             	add    esp,0x10
c002358a:	83 c4 0c             	add    esp,0xc
c002358d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023590 <PIT::~PIT()>:
c0023590:	83 ec 0c             	sub    esp,0xc
c0023593:	ba ac 71 02 c0       	mov    edx,0xc00271ac
c0023598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002359c:	89 10                	mov    DWORD PTR [eax],edx
c002359e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235a2:	83 ec 0c             	sub    esp,0xc
c00235a5:	50                   	push   eax
c00235a6:	e8 35 d5 fe ff       	call   c0010ae0 <Timer::~Timer()>
c00235ab:	83 c4 10             	add    esp,0x10
c00235ae:	90                   	nop
c00235af:	83 c4 0c             	add    esp,0xc
c00235b2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00235b4 <PIT::~PIT()>:
c00235b4:	83 ec 0c             	sub    esp,0xc
c00235b7:	83 ec 0c             	sub    esp,0xc
c00235ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235be:	e8 cd ff ff ff       	call   c0023590 <PIT::~PIT()>
c00235c3:	83 c4 10             	add    esp,0x10
c00235c6:	83 ec 08             	sub    esp,0x8
c00235c9:	68 5c 01 00 00       	push   0x15c
c00235ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235d2:	e8 43 96 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00235d7:	83 c4 10             	add    esp,0x10
c00235da:	83 c4 0c             	add    esp,0xc
c00235dd:	c3                   	ret    
