
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 13 7f 00 00       	call   c0007f33 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 35 c3 01 00       	call   c001c35a <_init>
c0000025:	c3                   	ret    
c0000026:	bb f6 cd 01 c0       	mov    ebx,0xc001cdf6
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 00 ce 01 c0    	cmp    ebx,0xc001ce00
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 f8 01 c0       	mov    eax,0xc001f8f8
c0000049:	3d f8 f8 01 c0       	cmp    eax,0xc001f8f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 f8 01 c0       	push   0xc001f8f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 f8 01 c0       	mov    eax,0xc001f8f8
c0000075:	2d f8 f8 01 c0       	sub    eax,0xc001f8f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 f8 01 c0       	push   0xc001f8f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 20 fb 01 c0 00 	cmp    BYTE PTR ds:0xc001fb20,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 08 ce 01 c0       	mov    ebx,0xc001ce08
c00000bb:	81 eb 04 ce 01 c0    	sub    ebx,0xc001ce04
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 04 ce 01 c0       	mov    esi,0xc001ce04
c00000ca:	a1 24 fb 01 c0       	mov    eax,ds:0xc001fb24
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 24 fb 01 c0       	mov    ds:0xc001fb24,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 24 fb 01 c0       	mov    eax,ds:0xc001fb24
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 f8 01 c0       	push   0xc001f8f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 20 fb 01 c0 01 	mov    BYTE PTR ds:0xc001fb20,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 28 fb 01 c0       	push   0xc001fb28
c000012c:	68 f8 f8 01 c0       	push   0xc001f8f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 70 30 01 00       	call   c0013340 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 14 a7 00 00       	call   c000a9fc <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 4e 30 01 00       	call   c0013340 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 1f 35 01 00       	call   c0013830 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 6e 3b 01 00       	call   c0013e88 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 20 09 02 c0 	lgdtd  ds:0xc0020920
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 9c 6b 00 00       	jmp    c0006f3e <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 40 fb 01 c0       	mov    ds:0xc001fb40,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 40 fb 01 c0    	mov    DWORD PTR ds:0xc001fb40,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 40 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fb40
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 20 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe31e0],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 20 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe31e0],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 20 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe31e0],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 20 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe31e0],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 20 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe31e0],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 60 fb 01 c0    	mov    ecx,DWORD PTR ds:0xc001fb60
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 60 fb 01 c0    	mov    DWORD PTR ds:0xc001fb60,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 64 fb 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe049c]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 64 fb 01 c0 	mov    DWORD PTR [eax*4-0x3ffe049c],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 60 fb 01 c0    	mov    DWORD PTR ds:0xc001fb60,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 8c fb 01 c0    	cmp    DWORD PTR ds:0xc001fb8c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 9c fb 01 c0    	mov    ecx,DWORD PTR ds:0xc001fb9c
c0000d5d:	c7 42 0c 94 fb 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fb94
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 9c fb 01 c0    	mov    DWORD PTR ds:0xc001fb9c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 8c fb 01 c0    	mov    DWORD PTR ds:0xc001fb8c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 60 fb 01 c0 02 	test   BYTE PTR ds:0xc001fb60,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 60 fb 01 c0       	mov    eax,0xc001fb60
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 06 6f 00 00       	call   c0007d44 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 48 6e 00 00       	call   c0007d44 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 32 6e 00 00       	call   c0007d44 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 0e 6e 00 00       	call   c0007d44 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 60 fb 01 c0    	mov    edi,DWORD PTR ds:0xc001fb60
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 60 fb 01 c0       	mov    eax,0xc001fb60
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 64 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe049c]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 64 fb 01 c0 	mov    DWORD PTR [edx*4-0x3ffe049c],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 94 fb 01 c0 	lea    edx,[eax*8-0x3ffe046c]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 60 fb 01 c0       	mov    eax,0xc001fb60
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d a0 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fba0
c00010df:	81 fb 94 fb 01 c0    	cmp    ebx,0xc001fb94
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 94 fb 01 c0       	cmp    eax,0xc001fb94
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 90 fb 01 c0    	cmp    DWORD PTR ds:0xc001fb90,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 9c fb 01 c0       	mov    ds:0xc001fb9c,eax
c000111b:	a3 a0 fb 01 c0       	mov    ds:0xc001fba0,eax
c0001120:	a3 90 fb 01 c0       	mov    ds:0xc001fb90,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 94 fb 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fb94
c000112e:	c7 40 0c 94 fb 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fb94
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 a0 fb 01 c0       	mov    ds:0xc001fba0,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 94 fb 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fb94
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 58 fb 01 c0 	lea    ebp,[edx*4-0x3ffe04a8]
c000117f:	8b 14 95 60 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe04a0]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 60 fb 01 c0 	lea    ecx,[edx*4-0x3ffe04a0]
c000119a:	8b 14 95 60 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe04a0]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 94 fe 01 c0 	or     DWORD PTR [edi*4-0x3ffe016c],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 94 fb 01 c0 	lea    eax,[eax*8-0x3ffe046c]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 9c fb 01 c0    	mov    DWORD PTR ds:0xc001fb9c,ecx
c0001254:	89 0d a0 fb 01 c0    	mov    DWORD PTR ds:0xc001fba0,ecx
c000125a:	c7 41 08 94 fb 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fb94
c0001261:	c7 41 0c 94 fb 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fb94
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 8c fb 01 c0 	lea    edx,[ecx*8-0x3ffe0474]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 94 fe 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe016c]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 94 fe 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe016c]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 8c fb 01 c0 	lea    edx,[eax*4-0x3ffe0474]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 94 fe 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe016c],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 9c fb 01 c0    	mov    DWORD PTR ds:0xc001fb9c,edi
c0001327:	89 3d a0 fb 01 c0    	mov    DWORD PTR ds:0xc001fba0,edi
c000132d:	c7 47 08 94 fb 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fb94
c0001334:	c7 47 0c 94 fb 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fb94
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 90 fb 01 c0    	mov    DWORD PTR ds:0xc001fb90,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 8c fb 01 c0       	mov    eax,ds:0xc001fb8c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 8c fb 01 c0    	mov    DWORD PTR ds:0xc001fb8c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 60 fb 01 c0       	mov    edx,0xc001fb60
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 60 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb60,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 60 fb 01 c0       	mov    eax,0xc001fb60
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d b4 fe 01 c0    	mov    ebx,DWORD PTR ds:0xc001feb4
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 b4 fe 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001feb4,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d b4 fe 01 c0    	mov    DWORD PTR ds:0xc001feb4,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 8c fb 01 c0    	cmp    DWORD PTR ds:0xc001fb8c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 8c fb 01 c0    	mov    DWORD PTR ds:0xc001fb8c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 60 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb60,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 60 fb 01 c0       	mov    eax,0xc001fb60
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 bc fe 01 c0    	push   DWORD PTR ds:0xc001febc
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 60 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb60,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 60 fb 01 c0       	mov    eax,0xc001fb60
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 bc fe 01 c0       	mov    eax,ds:0xc001febc
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 60 fb 01 c0       	mov    eax,0xc001fb60
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 8c fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb8c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 60 fb 01 c0       	mov    eax,0xc001fb60
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 8c fb 01 c0       	mov    eax,ds:0xc001fb8c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 64 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe049c]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 94 fb 01 c0       	mov    eax,0xc001fb94
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 8c fe 01 c0       	cmp    eax,0xc001fe8c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 c8 fe 01 c0       	mov    eax,ds:0xc001fec8
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 b0 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001feb0
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 c4 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fec4
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 d4 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fed4
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 60 fb 01 c0       	mov    eax,0xc001fb60
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 24 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe30dc]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 60 fb 01 c0       	mov    eax,ds:0xc001fb60
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 60 fb 01 c0       	mov    ds:0xc001fb60,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d a4 fe 01 c0    	mov    DWORD PTR ds:0xc001fea4,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d a8 fe 01 c0    	mov    DWORD PTR ds:0xc001fea8,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d ac fe 01 c0    	mov    DWORD PTR ds:0xc001feac,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 b4 fe 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001feb4,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 40 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0c0]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 a6 53 01 00       	jmp    c00170b0 <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 40 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0c0]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 d4 53 01 00       	jmp    c00170f4 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 40 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0c0]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 f9 53 01 00       	jmp    c0017138 <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 80 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2f80]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 80 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2f80]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba 88 ee 01 c0       	mov    edx,0xc001ee88
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba 3c cf 01 c0       	mov    edx,0xc001cf3c
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 00 ff 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0100]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 e0 fe 01 c0    	mov    ax,ds:0xc001fee0
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 e0 fe 01 c0    	mov    ds:0xc001fee0,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 42 cf 01 c0       	mov    eax,0xc001cf42
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad 00 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3000]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 4b cf 01 c0       	mov    eax,0xc001cf4b
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 80 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2f80]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 00 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0100]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 00 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0100],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 d0 cf 01 c0       	mov    eax,0xc001cfd0
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 00 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0100]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb c0 cf 01 c0       	mov    ebx,0xc001cfc0
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba a0 cf 01 c0       	mov    edx,0xc001cfa0
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba b0 cf 01 c0       	mov    edx,0xc001cfb0
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba 52 cf 01 c0       	mov    edx,0xc001cf52
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba 5e cf 01 c0       	mov    edx,0xc001cf5e
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba 72 cf 01 c0       	mov    edx,0xc001cf72
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 d2 23 00 00       	call   c0007e6d <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 ca 23 00 00       	call   c0007e7d <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c a0 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d3a0
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 a0 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d3a0
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 a0 d1 01 c0       	mov    eax,0xc001d1a0
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 e0 d0 01 c0       	mov    eax,0xc001d0e0
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 a0 d0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2f60]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	56                   	push   esi
c0005d66:	53                   	push   ebx
c0005d67:	89 d7                	mov    edi,edx
c0005d69:	47                   	inc    edi
c0005d6a:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0005d6d:	0f be cb             	movsx  ecx,bl
c0005d70:	89 ce                	mov    esi,ecx
c0005d72:	c1 fe 08             	sar    esi,0x8
c0005d75:	89 f2                	mov    edx,esi
c0005d77:	88 10                	mov    BYTE PTR [eax],dl
c0005d79:	83 c0 02             	add    eax,0x2
c0005d7c:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005d7f:	85 c9                	test   ecx,ecx
c0005d81:	75 e6                	jne    c0005d69 <utf2ucs+0x5>
c0005d83:	5b                   	pop    ebx
c0005d84:	5e                   	pop    esi
c0005d85:	5f                   	pop    edi
c0005d86:	c3                   	ret    

c0005d87 <ucs2utfn>:
c0005d87:	57                   	push   edi
c0005d88:	56                   	push   esi
c0005d89:	53                   	push   ebx
c0005d8a:	89 cb                	mov    ebx,ecx
c0005d8c:	d1 eb                	shr    ebx,1
c0005d8e:	83 f9 01             	cmp    ecx,0x1
c0005d91:	76 17                	jbe    c0005daa <ucs2utfn+0x23>
c0005d93:	8d 7b ff             	lea    edi,[ebx-0x1]
c0005d96:	0f be 32             	movsx  esi,BYTE PTR [edx]
c0005d99:	c1 e6 08             	shl    esi,0x8
c0005d9c:	8d 4a 02             	lea    ecx,[edx+0x2]
c0005d9f:	0f be 52 01          	movsx  edx,BYTE PTR [edx+0x1]
c0005da3:	09 f2                	or     edx,esi
c0005da5:	83 fa 3b             	cmp    edx,0x3b
c0005da8:	75 40                	jne    c0005dea <ucs2utfn+0x63>
c0005daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	c3                   	ret    
c0005db1:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0005db7:	7f 3d                	jg     c0005df6 <ucs2utfn+0x6f>
c0005db9:	89 d6                	mov    esi,edx
c0005dbb:	c1 fe 06             	sar    esi,0x6
c0005dbe:	83 ce c0             	or     esi,0xffffffc0
c0005dc1:	89 f3                	mov    ebx,esi
c0005dc3:	88 18                	mov    BYTE PTR [eax],bl
c0005dc5:	83 e2 3f             	and    edx,0x3f
c0005dc8:	83 ca 80             	or     edx,0xffffff80
c0005dcb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005dce:	8d 40 02             	lea    eax,[eax+0x2]
c0005dd1:	85 ff                	test   edi,edi
c0005dd3:	74 d5                	je     c0005daa <ucs2utfn+0x23>
c0005dd5:	4f                   	dec    edi
c0005dd6:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0005dd9:	c1 e2 08             	shl    edx,0x8
c0005ddc:	83 c1 02             	add    ecx,0x2
c0005ddf:	0f be 71 ff          	movsx  esi,BYTE PTR [ecx-0x1]
c0005de3:	09 f2                	or     edx,esi
c0005de5:	83 fa 3b             	cmp    edx,0x3b
c0005de8:	74 c0                	je     c0005daa <ucs2utfn+0x23>
c0005dea:	83 fa 7f             	cmp    edx,0x7f
c0005ded:	7f c2                	jg     c0005db1 <ucs2utfn+0x2a>
c0005def:	88 10                	mov    BYTE PTR [eax],dl
c0005df1:	8d 40 01             	lea    eax,[eax+0x1]
c0005df4:	eb db                	jmp    c0005dd1 <ucs2utfn+0x4a>
c0005df6:	89 d6                	mov    esi,edx
c0005df8:	c1 fe 0c             	sar    esi,0xc
c0005dfb:	83 ce e0             	or     esi,0xffffffe0
c0005dfe:	89 f3                	mov    ebx,esi
c0005e00:	88 18                	mov    BYTE PTR [eax],bl
c0005e02:	89 d6                	mov    esi,edx
c0005e04:	c1 fe 06             	sar    esi,0x6
c0005e07:	83 e6 3f             	and    esi,0x3f
c0005e0a:	83 ce 80             	or     esi,0xffffff80
c0005e0d:	89 f3                	mov    ebx,esi
c0005e0f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005e12:	83 e2 3f             	and    edx,0x3f
c0005e15:	83 ca 80             	or     edx,0xffffff80
c0005e18:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005e1b:	8d 40 03             	lea    eax,[eax+0x3]
c0005e1e:	eb b1                	jmp    c0005dd1 <ucs2utfn+0x4a>

c0005e20 <isjoliet>:
c0005e20:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e23:	74 06                	je     c0005e2b <isjoliet+0xb>
c0005e25:	b8 00 00 00 00       	mov    eax,0x0
c0005e2a:	c3                   	ret    
c0005e2b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e2f:	74 06                	je     c0005e37 <isjoliet+0x17>
c0005e31:	b8 00 00 00 00       	mov    eax,0x0
c0005e36:	c3                   	ret    
c0005e37:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e3a:	3c 43                	cmp    al,0x43
c0005e3c:	74 0f                	je     c0005e4d <isjoliet+0x2d>
c0005e3e:	3c 45                	cmp    al,0x45
c0005e40:	74 11                	je     c0005e53 <isjoliet+0x33>
c0005e42:	3c 40                	cmp    al,0x40
c0005e44:	0f 94 c0             	sete   al
c0005e47:	25 ff 00 00 00       	and    eax,0xff
c0005e4c:	c3                   	ret    
c0005e4d:	b8 02 00 00 00       	mov    eax,0x2
c0005e52:	c3                   	ret    
c0005e53:	b8 03 00 00 00       	mov    eax,0x3
c0005e58:	c3                   	ret    

c0005e59 <htohl_32>:
c0005e59:	31 d2                	xor    edx,edx
c0005e5b:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0005e5e:	c1 e2 08             	shl    edx,0x8
c0005e61:	31 c9                	xor    ecx,ecx
c0005e63:	8a 48 02             	mov    cl,BYTE PTR [eax+0x2]
c0005e66:	c1 e1 10             	shl    ecx,0x10
c0005e69:	09 ca                	or     edx,ecx
c0005e6b:	31 c9                	xor    ecx,ecx
c0005e6d:	8a 08                	mov    cl,BYTE PTR [eax]
c0005e6f:	09 ca                	or     edx,ecx
c0005e71:	31 c9                	xor    ecx,ecx
c0005e73:	8a 48 03             	mov    cl,BYTE PTR [eax+0x3]
c0005e76:	89 c8                	mov    eax,ecx
c0005e78:	c1 e0 18             	shl    eax,0x18
c0005e7b:	09 d0                	or     eax,edx
c0005e7d:	c3                   	ret    

c0005e7e <iso_733>:
c0005e7e:	e8 d6 ff ff ff       	call   c0005e59 <htohl_32>
c0005e83:	c3                   	ret    

c0005e84 <bclear_cache>:
c0005e84:	b8 00 00 00 00       	mov    eax,0x0
c0005e89:	8b 14 85 80 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0580]
c0005e90:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e96:	8b 14 85 e0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0520]
c0005e9d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005ea3:	40                   	inc    eax
c0005ea4:	83 f8 10             	cmp    eax,0x10
c0005ea7:	75 e0                	jne    c0005e89 <bclear_cache+0x5>
c0005ea9:	c3                   	ret    

c0005eaa <bgrad_cache>:
c0005eaa:	83 fa 0e             	cmp    edx,0xe
c0005ead:	77 1c                	ja     c0005ecb <bgrad_cache+0x21>
c0005eaf:	56                   	push   esi
c0005eb0:	53                   	push   ebx
c0005eb1:	8d 14 90             	lea    edx,[eax+edx*4]
c0005eb4:	8b 32                	mov    esi,DWORD PTR [edx]
c0005eb6:	8d 58 3c             	lea    ebx,[eax+0x3c]
c0005eb9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0005ebc:	89 0a                	mov    DWORD PTR [edx],ecx
c0005ebe:	83 c2 04             	add    edx,0x4
c0005ec1:	39 da                	cmp    edx,ebx
c0005ec3:	75 f4                	jne    c0005eb9 <bgrad_cache+0xf>
c0005ec5:	89 70 3c             	mov    DWORD PTR [eax+0x3c],esi
c0005ec8:	5b                   	pop    ebx
c0005ec9:	5e                   	pop    esi
c0005eca:	c3                   	ret    
c0005ecb:	c3                   	ret    

c0005ecc <bclear>:
c0005ecc:	e8 b3 ff ff ff       	call   c0005e84 <bclear_cache>
c0005ed1:	c3                   	ret    

c0005ed2 <iso_break_all>:
c0005ed2:	b8 30 00 02 c0       	mov    eax,0xc0020030
c0005ed7:	ba 70 09 02 c0       	mov    edx,0xc0020970
c0005edc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0005ee2:	05 94 00 00 00       	add    eax,0x94
c0005ee7:	39 d0                	cmp    eax,edx
c0005ee9:	75 f1                	jne    c0005edc <iso_break_all+0xa>
c0005eeb:	c3                   	ret    

c0005eec <ucscompare>:
c0005eec:	55                   	push   ebp
c0005eed:	57                   	push   edi
c0005eee:	56                   	push   esi
c0005eef:	53                   	push   ebx
c0005ef0:	83 ec 1c             	sub    esp,0x1c
c0005ef3:	89 d7                	mov    edi,edx
c0005ef5:	85 c9                	test   ecx,ecx
c0005ef7:	0f 8e ab 00 00 00    	jle    c0005fa8 <ucscompare+0xbc>
c0005efd:	89 c5                	mov    ebp,eax
c0005eff:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0005f02:	c1 e0 08             	shl    eax,0x8
c0005f05:	0f be 55 01          	movsx  edx,BYTE PTR [ebp+0x1]
c0005f09:	09 d0                	or     eax,edx
c0005f0b:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0005f0e:	c1 e6 08             	shl    esi,0x8
c0005f11:	0f be 57 01          	movsx  edx,BYTE PTR [edi+0x1]
c0005f15:	09 d6                	or     esi,edx
c0005f17:	83 f8 3b             	cmp    eax,0x3b
c0005f1a:	0f 84 92 00 00 00    	je     c0005fb2 <ucscompare+0xc6>
c0005f20:	49                   	dec    ecx
c0005f21:	83 e1 fe             	and    ecx,0xfffffffe
c0005f24:	83 c1 02             	add    ecx,0x2
c0005f27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f2b:	bb 00 00 00 00       	mov    ebx,0x0
c0005f30:	83 ec 0c             	sub    esp,0xc
c0005f33:	50                   	push   eax
c0005f34:	e8 b7 a9 ff ff       	call   c00008f0 <tolower>
c0005f39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005f40:	e8 ab a9 ff ff       	call   c00008f0 <tolower>
c0005f45:	83 c4 10             	add    esp,0x10
c0005f48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0005f4c:	75 6e                	jne    c0005fbc <ucscompare+0xd0>
c0005f4e:	83 c3 02             	add    ebx,0x2
c0005f51:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0005f55:	74 26                	je     c0005f7d <ucscompare+0x91>
c0005f57:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005f5c:	c1 e0 08             	shl    eax,0x8
c0005f5f:	0f be 54 1d 01       	movsx  edx,BYTE PTR [ebp+ebx*1+0x1]
c0005f64:	09 d0                	or     eax,edx
c0005f66:	0f be 34 1f          	movsx  esi,BYTE PTR [edi+ebx*1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	0f be 54 1f 01       	movsx  edx,BYTE PTR [edi+ebx*1+0x1]
c0005f72:	09 d6                	or     esi,edx
c0005f74:	83 f8 3b             	cmp    eax,0x3b
c0005f77:	75 b7                	jne    c0005f30 <ucscompare+0x44>
c0005f79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0005f7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f81:	0f be 04 0f          	movsx  eax,BYTE PTR [edi+ecx*1]
c0005f85:	c1 e0 08             	shl    eax,0x8
c0005f88:	0f be 54 0f 01       	movsx  edx,BYTE PTR [edi+ecx*1+0x1]
c0005f8d:	09 d0                	or     eax,edx
c0005f8f:	83 f8 2f             	cmp    eax,0x2f
c0005f92:	74 2f                	je     c0005fc3 <ucscompare+0xd7>
c0005f94:	85 c0                	test   eax,eax
c0005f96:	0f 95 c0             	setne  al
c0005f99:	25 ff 00 00 00       	and    eax,0xff
c0005f9e:	f7 d8                	neg    eax
c0005fa0:	83 c4 1c             	add    esp,0x1c
c0005fa3:	5b                   	pop    ebx
c0005fa4:	5e                   	pop    esi
c0005fa5:	5f                   	pop    edi
c0005fa6:	5d                   	pop    ebp
c0005fa7:	c3                   	ret    
c0005fa8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fb0:	eb cb                	jmp    c0005f7d <ucscompare+0x91>
c0005fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fba:	eb c1                	jmp    c0005f7d <ucscompare+0x91>
c0005fbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0005fc1:	eb dd                	jmp    c0005fa0 <ucscompare+0xb4>
c0005fc3:	b8 00 00 00 00       	mov    eax,0x0
c0005fc8:	eb d6                	jmp    c0005fa0 <ucscompare+0xb4>

c0005fca <fncompare>:
c0005fca:	55                   	push   ebp
c0005fcb:	57                   	push   edi
c0005fcc:	56                   	push   esi
c0005fcd:	53                   	push   ebx
c0005fce:	83 ec 1c             	sub    esp,0x1c
c0005fd1:	89 cd                	mov    ebp,ecx
c0005fd3:	85 d2                	test   edx,edx
c0005fd5:	7e 71                	jle    c0006048 <fncompare+0x7e>
c0005fd7:	89 c7                	mov    edi,eax
c0005fd9:	89 d6                	mov    esi,edx
c0005fdb:	8a 00                	mov    al,BYTE PTR [eax]
c0005fdd:	3c 3b                	cmp    al,0x3b
c0005fdf:	74 6e                	je     c000604f <fncompare+0x85>
c0005fe1:	bb 00 00 00 00       	mov    ebx,0x0
c0005fe6:	eb 32                	jmp    c000601a <fncompare+0x50>
c0005fe8:	83 ec 0c             	sub    esp,0xc
c0005feb:	0f be c0             	movsx  eax,al
c0005fee:	50                   	push   eax
c0005fef:	e8 fc a8 ff ff       	call   c00008f0 <tolower>
c0005ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ff8:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006000:	e8 eb a8 ff ff       	call   c00008f0 <tolower>
c0006005:	83 c4 10             	add    esp,0x10
c0006008:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000600c:	75 48                	jne    c0006056 <fncompare+0x8c>
c000600e:	43                   	inc    ebx
c000600f:	39 de                	cmp    esi,ebx
c0006011:	74 19                	je     c000602c <fncompare+0x62>
c0006013:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0006016:	3c 3b                	cmp    al,0x3b
c0006018:	74 12                	je     c000602c <fncompare+0x62>
c000601a:	3c 2e                	cmp    al,0x2e
c000601c:	75 ca                	jne    c0005fe8 <fncompare+0x1e>
c000601e:	8d 56 ff             	lea    edx,[esi-0x1]
c0006021:	39 da                	cmp    edx,ebx
c0006023:	74 07                	je     c000602c <fncompare+0x62>
c0006025:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000602a:	75 bc                	jne    c0005fe8 <fncompare+0x1e>
c000602c:	8a 44 1d 00          	mov    al,BYTE PTR [ebp+ebx*1+0x0]
c0006030:	3c 2f                	cmp    al,0x2f
c0006032:	74 29                	je     c000605d <fncompare+0x93>
c0006034:	84 c0                	test   al,al
c0006036:	0f 95 c0             	setne  al
c0006039:	25 ff 00 00 00       	and    eax,0xff
c000603e:	f7 d8                	neg    eax
c0006040:	83 c4 1c             	add    esp,0x1c
c0006043:	5b                   	pop    ebx
c0006044:	5e                   	pop    esi
c0006045:	5f                   	pop    edi
c0006046:	5d                   	pop    ebp
c0006047:	c3                   	ret    
c0006048:	bb 00 00 00 00       	mov    ebx,0x0
c000604d:	eb dd                	jmp    c000602c <fncompare+0x62>
c000604f:	bb 00 00 00 00       	mov    ebx,0x0
c0006054:	eb d6                	jmp    c000602c <fncompare+0x62>
c0006056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000605b:	eb e3                	jmp    c0006040 <fncompare+0x76>
c000605d:	b8 00 00 00 00       	mov    eax,0x0
c0006062:	eb dc                	jmp    c0006040 <fncompare+0x76>

c0006064 <isoReadDiscSector>:
c0006064:	83 ec 0c             	sub    esp,0xc
c0006067:	0f be 05 c0 fa 01 c0 	movsx  eax,BYTE PTR ds:0xc001fac0
c000606e:	50                   	push   eax
c000606f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000607b:	e8 0c 19 01 00       	call   c001798c <isoReadDiscSectorHelper>
c0006080:	83 c4 1c             	add    esp,0x1c
c0006083:	c3                   	ret    

c0006084 <bread_cache>:
c0006084:	55                   	push   ebp
c0006085:	57                   	push   edi
c0006086:	56                   	push   esi
c0006087:	53                   	push   ebx
c0006088:	83 ec 0c             	sub    esp,0xc
c000608b:	89 c6                	mov    esi,eax
c000608d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006090:	3b 10                	cmp    edx,DWORD PTR [eax]
c0006092:	74 6a                	je     c00060fe <bread_cache+0x7a>
c0006094:	89 d7                	mov    edi,edx
c0006096:	ba 0e 00 00 00       	mov    edx,0xe
c000609b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000609e:	39 38                	cmp    DWORD PTR [eax],edi
c00060a0:	74 61                	je     c0006103 <bread_cache+0x7f>
c00060a2:	4a                   	dec    edx
c00060a3:	83 fa ff             	cmp    edx,0xffffffff
c00060a6:	75 f3                	jne    c000609b <bread_cache+0x17>
c00060a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00060aa:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ad:	74 69                	je     c0006118 <bread_cache+0x94>
c00060af:	bb 01 00 00 00       	mov    ebx,0x1
c00060b4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060b7:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ba:	74 0b                	je     c00060c7 <bread_cache+0x43>
c00060bc:	43                   	inc    ebx
c00060bd:	83 fb 10             	cmp    ebx,0x10
c00060c0:	75 f2                	jne    c00060b4 <bread_cache+0x30>
c00060c2:	bb 00 00 00 00       	mov    ebx,0x0
c00060c7:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060ca:	83 ec 04             	sub    esp,0x4
c00060cd:	6a 01                	push   0x1
c00060cf:	57                   	push   edi
c00060d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060d3:	83 c0 04             	add    eax,0x4
c00060d6:	50                   	push   eax
c00060d7:	e8 88 ff ff ff       	call   c0006064 <isoReadDiscSector>
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	85 c0                	test   eax,eax
c00060e1:	78 2e                	js     c0006111 <bread_cache+0x8d>
c00060e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060e6:	89 38                	mov    DWORD PTR [eax],edi
c00060e8:	89 da                	mov    edx,ebx
c00060ea:	89 f0                	mov    eax,esi
c00060ec:	e8 b9 fd ff ff       	call   c0005eaa <bgrad_cache>
c00060f1:	b8 0f 00 00 00       	mov    eax,0xf
c00060f6:	83 c4 0c             	add    esp,0xc
c00060f9:	5b                   	pop    ebx
c00060fa:	5e                   	pop    esi
c00060fb:	5f                   	pop    edi
c00060fc:	5d                   	pop    ebp
c00060fd:	c3                   	ret    
c00060fe:	ba 0f 00 00 00       	mov    edx,0xf
c0006103:	89 f0                	mov    eax,esi
c0006105:	e8 a0 fd ff ff       	call   c0005eaa <bgrad_cache>
c000610a:	b8 0f 00 00 00       	mov    eax,0xf
c000610f:	eb e5                	jmp    c00060f6 <bread_cache+0x72>
c0006111:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006116:	eb de                	jmp    c00060f6 <bread_cache+0x72>
c0006118:	bb 00 00 00 00       	mov    ebx,0x0
c000611d:	eb a8                	jmp    c00060c7 <bread_cache+0x43>

c000611f <biread>:
c000611f:	83 ec 0c             	sub    esp,0xc
c0006122:	89 c2                	mov    edx,eax
c0006124:	b8 e0 fa 01 c0       	mov    eax,0xc001fae0
c0006129:	e8 56 ff ff ff       	call   c0006084 <bread_cache>
c000612e:	83 c4 0c             	add    esp,0xc
c0006131:	c3                   	ret    

c0006132 <bdread>:
c0006132:	83 ec 0c             	sub    esp,0xc
c0006135:	89 c2                	mov    edx,eax
c0006137:	b8 80 fa 01 c0       	mov    eax,0xc001fa80
c000613c:	e8 43 ff ff ff       	call   c0006084 <bread_cache>
c0006141:	83 c4 0c             	add    esp,0xc
c0006144:	c3                   	ret    

c0006145 <strnicmp>:
c0006145:	55                   	push   ebp
c0006146:	57                   	push   edi
c0006147:	56                   	push   esi
c0006148:	53                   	push   ebx
c0006149:	83 ec 0c             	sub    esp,0xc
c000614c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006150:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006154:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006158:	85 ff                	test   edi,edi
c000615a:	74 51                	je     c00061ad <strnicmp+0x68>
c000615c:	8a 03                	mov    al,BYTE PTR [ebx]
c000615e:	84 c0                	test   al,al
c0006160:	74 52                	je     c00061b4 <strnicmp+0x6f>
c0006162:	8a 16                	mov    dl,BYTE PTR [esi]
c0006164:	84 d2                	test   dl,dl
c0006166:	74 53                	je     c00061bb <strnicmp+0x76>
c0006168:	01 df                	add    edi,ebx
c000616a:	eb 32                	jmp    c000619e <strnicmp+0x59>
c000616c:	83 ec 0c             	sub    esp,0xc
c000616f:	0f be c0             	movsx  eax,al
c0006172:	50                   	push   eax
c0006173:	e8 78 a7 ff ff       	call   c00008f0 <tolower>
c0006178:	89 c5                	mov    ebp,eax
c000617a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000617d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006180:	e8 6b a7 ff ff       	call   c00008f0 <tolower>
c0006185:	43                   	inc    ebx
c0006186:	46                   	inc    esi
c0006187:	83 c4 10             	add    esp,0x10
c000618a:	29 c5                	sub    ebp,eax
c000618c:	75 39                	jne    c00061c7 <strnicmp+0x82>
c000618e:	39 fb                	cmp    ebx,edi
c0006190:	74 30                	je     c00061c2 <strnicmp+0x7d>
c0006192:	8a 03                	mov    al,BYTE PTR [ebx]
c0006194:	84 c0                	test   al,al
c0006196:	74 39                	je     c00061d1 <strnicmp+0x8c>
c0006198:	8a 16                	mov    dl,BYTE PTR [esi]
c000619a:	84 d2                	test   dl,dl
c000619c:	74 08                	je     c00061a6 <strnicmp+0x61>
c000619e:	38 d0                	cmp    al,dl
c00061a0:	75 ca                	jne    c000616c <strnicmp+0x27>
c00061a2:	43                   	inc    ebx
c00061a3:	46                   	inc    esi
c00061a4:	eb e8                	jmp    c000618e <strnicmp+0x49>
c00061a6:	bd 00 00 00 00       	mov    ebp,0x0
c00061ab:	eb 1a                	jmp    c00061c7 <strnicmp+0x82>
c00061ad:	bd 00 00 00 00       	mov    ebp,0x0
c00061b2:	eb 13                	jmp    c00061c7 <strnicmp+0x82>
c00061b4:	bd 00 00 00 00       	mov    ebp,0x0
c00061b9:	eb 0c                	jmp    c00061c7 <strnicmp+0x82>
c00061bb:	bd 00 00 00 00       	mov    ebp,0x0
c00061c0:	eb 05                	jmp    c00061c7 <strnicmp+0x82>
c00061c2:	bd 00 00 00 00       	mov    ebp,0x0
c00061c7:	89 e8                	mov    eax,ebp
c00061c9:	83 c4 0c             	add    esp,0xc
c00061cc:	5b                   	pop    ebx
c00061cd:	5e                   	pop    esi
c00061ce:	5f                   	pop    edi
c00061cf:	5d                   	pop    ebp
c00061d0:	c3                   	ret    
c00061d1:	bd 00 00 00 00       	mov    ebp,0x0
c00061d6:	eb ef                	jmp    c00061c7 <strnicmp+0x82>

c00061d8 <find_object>:
c00061d8:	55                   	push   ebp
c00061d9:	57                   	push   edi
c00061da:	56                   	push   esi
c00061db:	53                   	push   ebx
c00061dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061e6:	89 d3                	mov    ebx,edx
c00061e8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00061ec:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c00061f3:	83 3d 14 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020914,0x0
c00061fa:	75 14                	jne    c0006210 <find_object+0x38>
c00061fc:	85 f6                	test   esi,esi
c00061fe:	0f 8e f0 01 00 00    	jle    c00063f4 <find_object+0x21c>
c0006204:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000620b:	e9 9f 01 00 00       	jmp    c00063af <find_object+0x1d7>
c0006210:	89 c2                	mov    edx,eax
c0006212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006216:	e8 49 fb ff ff       	call   c0005d64 <utf2ucs>
c000621b:	eb df                	jmp    c00061fc <find_object+0x24>
c000621d:	31 d2                	xor    edx,edx
c000621f:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c0006222:	89 c6                	mov    esi,eax
c0006224:	81 e6 ff 00 00 00    	and    esi,0xff
c000622a:	29 d6                	sub    esi,edx
c000622c:	8d 5c 15 21          	lea    ebx,[ebp+edx*1+0x21]
c0006230:	f6 45 20 01          	test   BYTE PTR [ebp+0x20],0x1
c0006234:	74 3d                	je     c0006273 <find_object+0x9b>
c0006236:	83 ee 21             	sub    esi,0x21
c0006239:	83 fe 03             	cmp    esi,0x3
c000623c:	7e 08                	jle    c0006246 <find_object+0x6e>
c000623e:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c0006241:	48                   	dec    eax
c0006242:	3c 01                	cmp    al,0x1
c0006244:	76 69                	jbe    c00062af <find_object+0xd7>
c0006246:	31 d2                	xor    edx,edx
c0006248:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c000624b:	8d 45 21             	lea    eax,[ebp+0x21]
c000624e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006252:	e8 73 fd ff ff       	call   c0005fca <fncompare>
c0006257:	85 c0                	test   eax,eax
c0006259:	0f 85 b1 00 00 00    	jne    c0006310 <find_object+0x138>
c000625f:	31 c0                	xor    eax,eax
c0006261:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006264:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006268:	0f 85 a2 00 00 00    	jne    c0006310 <find_object+0x138>
c000626e:	e9 02 01 00 00       	jmp    c0006375 <find_object+0x19d>
c0006273:	43                   	inc    ebx
c0006274:	83 ee 22             	sub    esi,0x22
c0006277:	eb c0                	jmp    c0006239 <find_object+0x61>
c0006279:	0f be 7b 02          	movsx  edi,BYTE PTR [ebx+0x2]
c000627d:	83 ef 05             	sub    edi,0x5
c0006280:	83 ec 04             	sub    esp,0x4
c0006283:	57                   	push   edi
c0006284:	8d 43 05             	lea    eax,[ebx+0x5]
c0006287:	50                   	push   eax
c0006288:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000628c:	50                   	push   eax
c000628d:	e8 be a3 ff ff       	call   c0000650 <strncpy>
c0006292:	c6 44 3c 30 00       	mov    BYTE PTR [esp+edi*1+0x30],0x0
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	0f be 43 02          	movsx  eax,BYTE PTR [ebx+0x2]
c000629e:	29 c6                	sub    esi,eax
c00062a0:	01 c3                	add    ebx,eax
c00062a2:	83 fe 03             	cmp    esi,0x3
c00062a5:	7e 21                	jle    c00062c8 <find_object+0xf0>
c00062a7:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c00062aa:	48                   	dec    eax
c00062ab:	3c 01                	cmp    al,0x1
c00062ad:	77 19                	ja     c00062c8 <find_object+0xf0>
c00062af:	83 ec 04             	sub    esp,0x4
c00062b2:	6a 02                	push   0x2
c00062b4:	68 a0 d4 01 c0       	push   0xc001d4a0
c00062b9:	53                   	push   ebx
c00062ba:	e8 c1 a4 ff ff       	call   c0000780 <strncmp>
c00062bf:	83 c4 10             	add    esp,0x10
c00062c2:	85 c0                	test   eax,eax
c00062c4:	75 d4                	jne    c000629a <find_object+0xc2>
c00062c6:	eb b1                	jmp    c0006279 <find_object+0xa1>
c00062c8:	85 ff                	test   edi,edi
c00062ca:	0f 8e 76 ff ff ff    	jle    c0006246 <find_object+0x6e>
c00062d0:	83 ec 08             	sub    esp,0x8
c00062d3:	6a 2f                	push   0x2f
c00062d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00062d9:	57                   	push   edi
c00062da:	e8 71 a4 ff ff       	call   c0000750 <strchr>
c00062df:	83 c4 10             	add    esp,0x10
c00062e2:	85 c0                	test   eax,eax
c00062e4:	0f 84 98 00 00 00    	je     c0006382 <find_object+0x1aa>
c00062ea:	29 f8                	sub    eax,edi
c00062ec:	83 ec 04             	sub    esp,0x4
c00062ef:	50                   	push   eax
c00062f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062f4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062f8:	50                   	push   eax
c00062f9:	e8 47 fe ff ff       	call   c0006145 <strnicmp>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	85 c0                	test   eax,eax
c0006303:	75 0b                	jne    c0006310 <find_object+0x138>
c0006305:	31 c0                	xor    eax,eax
c0006307:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000630a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000630e:	74 65                	je     c0006375 <find_object+0x19d>
c0006310:	31 c0                	xor    eax,eax
c0006312:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006315:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000631d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006323:	7f 71                	jg     c0006396 <find_object+0x1be>
c0006325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006329:	39 c1                	cmp    ecx,eax
c000632b:	7d 69                	jge    c0006396 <find_object+0x1be>
c000632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006331:	8b 04 85 e0 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0520]
c0006338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000633c:	8d 6c 10 04          	lea    ebp,[eax+edx*1+0x4]
c0006340:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006343:	84 c0                	test   al,al
c0006345:	74 4f                	je     c0006396 <find_object+0x1be>
c0006347:	8b 3d 14 09 02 c0    	mov    edi,DWORD PTR ds:0xc0020914
c000634d:	85 ff                	test   edi,edi
c000634f:	0f 84 c8 fe ff ff    	je     c000621d <find_object+0x45>
c0006355:	31 c9                	xor    ecx,ecx
c0006357:	8a 4d 20             	mov    cl,BYTE PTR [ebp+0x20]
c000635a:	8d 45 21             	lea    eax,[ebp+0x21]
c000635d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006361:	e8 86 fb ff ff       	call   c0005eec <ucscompare>
c0006366:	85 c0                	test   eax,eax
c0006368:	75 a6                	jne    c0006310 <find_object+0x138>
c000636a:	31 c0                	xor    eax,eax
c000636c:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000636f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0006373:	75 9b                	jne    c0006310 <find_object+0x138>
c0006375:	89 e8                	mov    eax,ebp
c0006377:	81 c4 2c 01 00 00    	add    esp,0x12c
c000637d:	5b                   	pop    ebx
c000637e:	5e                   	pop    esi
c000637f:	5f                   	pop    edi
c0006380:	5d                   	pop    ebp
c0006381:	c3                   	ret    
c0006382:	83 ec 0c             	sub    esp,0xc
c0006385:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006389:	e8 d2 a1 ff ff       	call   c0000560 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	e9 56 ff ff ff       	jmp    c00062ec <find_object+0x114>
c0006396:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000639a:	81 ac 24 40 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x140],0x800
c00063a5:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00063ad:	7e 3e                	jle    c00063ed <find_object+0x215>
c00063af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b3:	e8 67 fd ff ff       	call   c000611f <biread>
c00063b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063bc:	85 c0                	test   eax,eax
c00063be:	78 3e                	js     c00063fe <find_object+0x226>
c00063c0:	8b 94 24 40 01 00 00 	mov    edx,DWORD PTR [esp+0x140]
c00063c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063cb:	85 d2                	test   edx,edx
c00063cd:	7e c7                	jle    c0006396 <find_object+0x1be>
c00063cf:	8b 04 85 e0 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0520]
c00063d6:	8d 68 04             	lea    ebp,[eax+0x4]
c00063d9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00063dc:	84 c0                	test   al,al
c00063de:	74 b6                	je     c0006396 <find_object+0x1be>
c00063e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063e8:	e9 5a ff ff ff       	jmp    c0006347 <find_object+0x16f>
c00063ed:	bd 00 00 00 00       	mov    ebp,0x0
c00063f2:	eb 81                	jmp    c0006375 <find_object+0x19d>
c00063f4:	bd 00 00 00 00       	mov    ebp,0x0
c00063f9:	e9 77 ff ff ff       	jmp    c0006375 <find_object+0x19d>
c00063fe:	bd 00 00 00 00       	mov    ebp,0x0
c0006403:	e9 6d ff ff ff       	jmp    c0006375 <find_object+0x19d>

c0006408 <find_object_path>:
c0006408:	55                   	push   ebp
c0006409:	57                   	push   edi
c000640a:	56                   	push   esi
c000640b:	53                   	push   ebx
c000640c:	83 ec 1c             	sub    esp,0x1c
c000640f:	89 c6                	mov    esi,eax
c0006411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006415:	89 cf                	mov    edi,ecx
c0006417:	eb 03                	jmp    c000641c <find_object_path+0x14>
c0006419:	8d 73 01             	lea    esi,[ebx+0x1]
c000641c:	83 ec 08             	sub    esp,0x8
c000641f:	6a 2f                	push   0x2f
c0006421:	56                   	push   esi
c0006422:	e8 29 a3 ff ff       	call   c0000750 <strchr>
c0006427:	89 c3                	mov    ebx,eax
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	74 33                	je     c0006463 <find_object_path+0x5b>
c0006430:	39 de                	cmp    esi,ebx
c0006432:	74 e5                	je     c0006419 <find_object_path+0x11>
c0006434:	8d 47 0a             	lea    eax,[edi+0xa]
c0006437:	e8 42 fa ff ff       	call   c0005e7e <iso_733>
c000643c:	89 c5                	mov    ebp,eax
c000643e:	8d 47 02             	lea    eax,[edi+0x2]
c0006441:	e8 38 fa ff ff       	call   c0005e7e <iso_733>
c0006446:	83 ec 0c             	sub    esp,0xc
c0006449:	55                   	push   ebp
c000644a:	89 c1                	mov    ecx,eax
c000644c:	ba 01 00 00 00       	mov    edx,0x1
c0006451:	89 f0                	mov    eax,esi
c0006453:	e8 80 fd ff ff       	call   c00061d8 <find_object>
c0006458:	89 c7                	mov    edi,eax
c000645a:	83 c4 10             	add    esp,0x10
c000645d:	85 c0                	test   eax,eax
c000645f:	75 b8                	jne    c0006419 <find_object_path+0x11>
c0006461:	eb 0e                	jmp    c0006471 <find_object_path+0x69>
c0006463:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006466:	75 11                	jne    c0006479 <find_object_path+0x71>
c0006468:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000646d:	74 32                	je     c00064a1 <find_object_path+0x99>
c000646f:	89 f8                	mov    eax,edi
c0006471:	83 c4 1c             	add    esp,0x1c
c0006474:	5b                   	pop    ebx
c0006475:	5e                   	pop    esi
c0006476:	5f                   	pop    edi
c0006477:	5d                   	pop    ebp
c0006478:	c3                   	ret    
c0006479:	8d 47 0a             	lea    eax,[edi+0xa]
c000647c:	e8 fd f9 ff ff       	call   c0005e7e <iso_733>
c0006481:	89 c3                	mov    ebx,eax
c0006483:	8d 47 02             	lea    eax,[edi+0x2]
c0006486:	e8 f3 f9 ff ff       	call   c0005e7e <iso_733>
c000648b:	83 ec 0c             	sub    esp,0xc
c000648e:	53                   	push   ebx
c000648f:	89 c1                	mov    ecx,eax
c0006491:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006495:	89 f0                	mov    eax,esi
c0006497:	e8 3c fd ff ff       	call   c00061d8 <find_object>
c000649c:	83 c4 10             	add    esp,0x10
c000649f:	eb d0                	jmp    c0006471 <find_object_path+0x69>
c00064a1:	b8 00 00 00 00       	mov    eax,0x0
c00064a6:	eb c9                	jmp    c0006471 <find_object_path+0x69>

c00064a8 <stricmp>:
c00064a8:	55                   	push   ebp
c00064a9:	57                   	push   edi
c00064aa:	56                   	push   esi
c00064ab:	53                   	push   ebx
c00064ac:	83 ec 0c             	sub    esp,0xc
c00064af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00064b3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00064b7:	46                   	inc    esi
c00064b8:	47                   	inc    edi
c00064b9:	0f b6 6f ff          	movzx  ebp,BYTE PTR [edi-0x1]
c00064bd:	81 e5 ff 00 00 00    	and    ebp,0xff
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	31 c0                	xor    eax,eax
c00064c8:	8a 46 ff             	mov    al,BYTE PTR [esi-0x1]
c00064cb:	50                   	push   eax
c00064cc:	e8 ff a3 ff ff       	call   c00008d0 <toupper>
c00064d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d4:	e8 17 a4 ff ff       	call   c00008f0 <tolower>
c00064d9:	89 c3                	mov    ebx,eax
c00064db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00064de:	e8 ed a3 ff ff       	call   c00008d0 <toupper>
c00064e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e6:	e8 05 a4 ff ff       	call   c00008f0 <tolower>
c00064eb:	83 c4 10             	add    esp,0x10
c00064ee:	39 c3                	cmp    ebx,eax
c00064f0:	75 04                	jne    c00064f6 <stricmp+0x4e>
c00064f2:	85 db                	test   ebx,ebx
c00064f4:	75 c1                	jne    c00064b7 <stricmp+0xf>
c00064f6:	29 c3                	sub    ebx,eax
c00064f8:	89 d8                	mov    eax,ebx
c00064fa:	83 c4 0c             	add    esp,0xc
c00064fd:	5b                   	pop    ebx
c00064fe:	5e                   	pop    esi
c00064ff:	5f                   	pop    edi
c0006500:	5d                   	pop    ebp
c0006501:	c3                   	ret    

c0006502 <iso_open>:
c0006502:	55                   	push   ebp
c0006503:	57                   	push   edi
c0006504:	56                   	push   esi
c0006505:	53                   	push   ebx
c0006506:	83 ec 0c             	sub    esp,0xc
c0006509:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000650e:	0f 95 c0             	setne  al
c0006511:	25 ff 00 00 00       	and    eax,0xff
c0006516:	89 c7                	mov    edi,eax
c0006518:	b9 e0 08 02 c0       	mov    ecx,0xc00208e0
c000651d:	89 c2                	mov    edx,eax
c000651f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006523:	e8 e0 fe ff ff       	call   c0006408 <find_object_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 84 93 00 00 00    	je     c00065c3 <iso_open+0xc1>
c0006530:	89 c6                	mov    esi,eax
c0006532:	83 3d a0 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ffa0,0x0
c0006539:	0f 84 92 00 00 00    	je     c00065d1 <iso_open+0xcf>
c000653f:	ba 34 00 02 c0       	mov    edx,0xc0020034
c0006544:	bb 01 00 00 00       	mov    ebx,0x1
c0006549:	83 3a 00             	cmp    DWORD PTR [edx],0x0
c000654c:	74 13                	je     c0006561 <iso_open+0x5f>
c000654e:	43                   	inc    ebx
c000654f:	81 c2 94 00 00 00    	add    edx,0x94
c0006555:	83 fb 10             	cmp    ebx,0x10
c0006558:	75 ef                	jne    c0006549 <iso_open+0x47>
c000655a:	bb ff ff ff ff       	mov    ebx,0xffffffff
c000655f:	eb 58                	jmp    c00065b9 <iso_open+0xb7>
c0006561:	8d 04 db             	lea    eax,[ebx+ebx*8]
c0006564:	8d 04 83             	lea    eax,[ebx+eax*4]
c0006567:	c7 04 85 a0 ff 01 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffe0060],0xffffffff
c0006572:	83 fb 0f             	cmp    ebx,0xf
c0006575:	7f 53                	jg     c00065ca <iso_open+0xc8>
c0006577:	8d 46 02             	lea    eax,[esi+0x2]
c000657a:	e8 ff f8 ff ff       	call   c0005e7e <iso_733>
c000657f:	8d 14 db             	lea    edx,[ebx+ebx*8]
c0006582:	8d 14 93             	lea    edx,[ebx+edx*4]
c0006585:	c1 e2 02             	shl    edx,0x2
c0006588:	8d aa a0 ff 01 c0    	lea    ebp,[edx-0x3ffe0060]
c000658e:	89 82 a0 ff 01 c0    	mov    DWORD PTR [edx-0x3ffe0060],eax
c0006594:	89 ba a4 ff 01 c0    	mov    DWORD PTR [edx-0x3ffe005c],edi
c000659a:	c7 82 a8 ff 01 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffe0058],0x0
c00065a4:	8d 46 0a             	lea    eax,[esi+0xa]
c00065a7:	e8 d2 f8 ff ff       	call   c0005e7e <iso_733>
c00065ac:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00065af:	c7 85 90 00 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x90],0x0
c00065b9:	89 d8                	mov    eax,ebx
c00065bb:	83 c4 0c             	add    esp,0xc
c00065be:	5b                   	pop    ebx
c00065bf:	5e                   	pop    esi
c00065c0:	5f                   	pop    edi
c00065c1:	5d                   	pop    ebp
c00065c2:	c3                   	ret    
c00065c3:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065c8:	eb ef                	jmp    c00065b9 <iso_open+0xb7>
c00065ca:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065cf:	eb e8                	jmp    c00065b9 <iso_open+0xb7>
c00065d1:	c7 05 a0 ff 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001ffa0,0xffffffff
c00065db:	bb 00 00 00 00       	mov    ebx,0x0
c00065e0:	eb 95                	jmp    c0006577 <iso_open+0x75>

c00065e2 <iso_close>:
c00065e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065e6:	83 f8 0f             	cmp    eax,0xf
c00065e9:	7f 11                	jg     c00065fc <iso_close+0x1a>
c00065eb:	8d 14 c0             	lea    edx,[eax+eax*8]
c00065ee:	8d 04 90             	lea    eax,[eax+edx*4]
c00065f1:	c7 04 85 a0 ff 01 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffe0060],0x0
c00065fc:	c3                   	ret    

c00065fd <iso_read>:
c00065fd:	55                   	push   ebp
c00065fe:	57                   	push   edi
c00065ff:	56                   	push   esi
c0006600:	53                   	push   ebx
c0006601:	83 ec 1c             	sub    esp,0x1c
c0006604:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006608:	83 fd 0f             	cmp    ebp,0xf
c000660b:	0f 8f ba 01 00 00    	jg     c00067cb <iso_read+0x1ce>
c0006611:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006615:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006619:	83 3c 85 a0 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0060],0x0
c0006621:	0f 84 b0 01 00 00    	je     c00067d7 <iso_read+0x1da>
c0006627:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c000662b:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000662f:	8b 04 85 30 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffd0]
c0006636:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000663a:	85 c0                	test   eax,eax
c000663c:	0f 85 a1 01 00 00    	jne    c00067e3 <iso_read+0x1e6>
c0006642:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006647:	0f 84 71 01 00 00    	je     c00067be <iso_read+0x1c1>
c000664d:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006651:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006655:	8d 14 85 a0 ff 01 c0 	lea    edx,[eax*4-0x3ffe0060]
c000665c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c000665f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0006662:	29 c2                	sub    edx,eax
c0006664:	89 d1                	mov    ecx,edx
c0006666:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000666a:	76 04                	jbe    c0006670 <iso_read+0x73>
c000666c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006670:	85 c9                	test   ecx,ecx
c0006672:	0f 84 42 01 00 00    	je     c00067ba <iso_read+0x1bd>
c0006678:	8d 1c ed 00 00 00 00 	lea    ebx,[ebp*8+0x0]
c000667f:	e9 b7 00 00 00       	jmp    c000673b <iso_read+0x13e>
c0006684:	8d 91 ff 07 00 00    	lea    edx,[ecx+0x7ff]
c000668a:	e9 e9 00 00 00       	jmp    c0006778 <iso_read+0x17b>
c000668f:	ba 20 00 00 00       	mov    edx,0x20
c0006694:	e9 e2 00 00 00       	jmp    c000677b <iso_read+0x17e>
c0006699:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000669d:	39 ca                	cmp    edx,ecx
c000669f:	7e 04                	jle    c00066a5 <iso_read+0xa8>
c00066a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00066a5:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c00066a8:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c00066ac:	c1 e8 0b             	shr    eax,0xb
c00066af:	03 04 95 a0 ff 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe0060]
c00066b6:	e8 77 fa ff ff       	call   c0006132 <bdread>
c00066bb:	85 c0                	test   eax,eax
c00066bd:	0f 88 2c 01 00 00    	js     c00067ef <iso_read+0x1f2>
c00066c3:	8b 14 85 80 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0580]
c00066ca:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066cd:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066d1:	8b 04 85 a8 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0058]
c00066d8:	25 ff 07 00 00       	and    eax,0x7ff
c00066dd:	8d 74 02 04          	lea    esi,[edx+eax*1+0x4]
c00066e1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066eb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00066ef:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c00066f3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066f6:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066fa:	8d 14 85 a0 ff 01 c0 	lea    edx,[eax*4-0x3ffe0060]
c0006701:	89 f8                	mov    eax,edi
c0006703:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
c0006706:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006709:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c000670d:	29 7c 24 38          	sub    DWORD PTR [esp+0x38],edi
c0006711:	0f 84 a7 00 00 00    	je     c00067be <iso_read+0x1c1>
c0006717:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000671a:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c000671e:	8b 14 95 ac ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0054]
c0006725:	29 c2                	sub    edx,eax
c0006727:	89 d1                	mov    ecx,edx
c0006729:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000672d:	76 04                	jbe    c0006733 <iso_read+0x136>
c000672f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006733:	85 c9                	test   ecx,ecx
c0006735:	0f 84 83 00 00 00    	je     c00067be <iso_read+0x1c1>
c000673b:	89 c6                	mov    esi,eax
c000673d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006743:	ba 00 08 00 00       	mov    edx,0x800
c0006748:	29 f2                	sub    edx,esi
c000674a:	81 fa 00 08 00 00    	cmp    edx,0x800
c0006750:	0f 85 43 ff ff ff    	jne    c0006699 <iso_read+0x9c>
c0006756:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000675c:	0f 8e 37 ff ff ff    	jle    c0006699 <iso_read+0x9c>
c0006762:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006768:	0f 8f 21 ff ff ff    	jg     c000668f <iso_read+0x92>
c000676e:	89 ca                	mov    edx,ecx
c0006770:	85 c9                	test   ecx,ecx
c0006772:	0f 88 0c ff ff ff    	js     c0006684 <iso_read+0x87>
c0006778:	c1 fa 0b             	sar    edx,0xb
c000677b:	89 d6                	mov    esi,edx
c000677d:	c1 e6 0b             	shl    esi,0xb
c0006780:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006784:	83 ec 04             	sub    esp,0x4
c0006787:	52                   	push   edx
c0006788:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000678b:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c000678f:	c1 e8 0b             	shr    eax,0xb
c0006792:	03 04 95 a0 ff 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe0060]
c0006799:	50                   	push   eax
c000679a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000679e:	e8 c1 f8 ff ff       	call   c0006064 <isoReadDiscSector>
c00067a3:	83 c4 10             	add    esp,0x10
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 8f 3d ff ff ff    	jg     c00066eb <iso_read+0xee>
c00067ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067b8:	eb 09                	jmp    c00067c3 <iso_read+0x1c6>
c00067ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067c2:	99                   	cdq    
c00067c3:	83 c4 1c             	add    esp,0x1c
c00067c6:	5b                   	pop    ebx
c00067c7:	5e                   	pop    esi
c00067c8:	5f                   	pop    edi
c00067c9:	5d                   	pop    ebp
c00067ca:	c3                   	ret    
c00067cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067d5:	eb ec                	jmp    c00067c3 <iso_read+0x1c6>
c00067d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067e1:	eb e0                	jmp    c00067c3 <iso_read+0x1c6>
c00067e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067ed:	eb d4                	jmp    c00067c3 <iso_read+0x1c6>
c00067ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067f9:	eb c8                	jmp    c00067c3 <iso_read+0x1c6>

c00067fb <iso_seek>:
c00067fb:	53                   	push   ebx
c00067fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006800:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006804:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006808:	83 f8 0f             	cmp    eax,0xf
c000680b:	0f 8f a4 00 00 00    	jg     c00068b5 <iso_seek+0xba>
c0006811:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006814:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006817:	83 3c 9d a0 ff 01 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffe0060],0x0
c000681f:	0f 84 9c 00 00 00    	je     c00068c1 <iso_seek+0xc6>
c0006825:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006828:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000682b:	83 3c 9d 30 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdffd0],0x0
c0006833:	0f 85 94 00 00 00    	jne    c00068cd <iso_seek+0xd2>
c0006839:	83 fa 01             	cmp    edx,0x1
c000683c:	74 53                	je     c0006891 <iso_seek+0x96>
c000683e:	83 fa 02             	cmp    edx,0x2
c0006841:	74 5d                	je     c00068a0 <iso_seek+0xa5>
c0006843:	85 d2                	test   edx,edx
c0006845:	74 0c                	je     c0006853 <iso_seek+0x58>
c0006847:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000684c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006851:	eb 3c                	jmp    c000688f <iso_seek+0x94>
c0006853:	89 0c 9d a8 ff 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0058],ecx
c000685a:	8d 14 c0             	lea    edx,[eax+eax*8]
c000685d:	8d 14 90             	lea    edx,[eax+edx*4]
c0006860:	8b 0c 95 ac ff 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe0054]
c0006867:	39 0c 95 a8 ff 01 c0 	cmp    DWORD PTR [edx*4-0x3ffe0058],ecx
c000686e:	76 0d                	jbe    c000687d <iso_seek+0x82>
c0006870:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006873:	8d 14 90             	lea    edx,[eax+edx*4]
c0006876:	89 0c 95 a8 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0058],ecx
c000687d:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006880:	8d 04 90             	lea    eax,[eax+edx*4]
c0006883:	8b 04 85 a8 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0058]
c000688a:	ba 00 00 00 00       	mov    edx,0x0
c000688f:	5b                   	pop    ebx
c0006890:	c3                   	ret    
c0006891:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006894:	8d 14 90             	lea    edx,[eax+edx*4]
c0006897:	01 0c 95 a8 ff 01 c0 	add    DWORD PTR [edx*4-0x3ffe0058],ecx
c000689e:	eb ba                	jmp    c000685a <iso_seek+0x5f>
c00068a0:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068a3:	8d 14 90             	lea    edx,[eax+edx*4]
c00068a6:	8d 14 95 a0 ff 01 c0 	lea    edx,[edx*4-0x3ffe0060]
c00068ad:	03 4a 0c             	add    ecx,DWORD PTR [edx+0xc]
c00068b0:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068b3:	eb a5                	jmp    c000685a <iso_seek+0x5f>
c00068b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068bf:	eb ce                	jmp    c000688f <iso_seek+0x94>
c00068c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068cb:	eb c2                	jmp    c000688f <iso_seek+0x94>
c00068cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068d7:	eb b6                	jmp    c000688f <iso_seek+0x94>

c00068d9 <iso_tell>:
c00068d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068dd:	83 f8 0f             	cmp    eax,0xf
c00068e0:	7f 33                	jg     c0006915 <iso_tell+0x3c>
c00068e2:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068e5:	8d 14 90             	lea    edx,[eax+edx*4]
c00068e8:	83 3c 95 a0 ff 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0060],0x0
c00068f0:	74 2e                	je     c0006920 <iso_tell+0x47>
c00068f2:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068f5:	8d 14 90             	lea    edx,[eax+edx*4]
c00068f8:	83 3c 95 30 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffd0],0x0
c0006900:	75 29                	jne    c000692b <iso_tell+0x52>
c0006902:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006905:	8d 04 90             	lea    eax,[eax+edx*4]
c0006908:	8b 04 85 a8 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0058]
c000690f:	ba 00 00 00 00       	mov    edx,0x0
c0006914:	c3                   	ret    
c0006915:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000691a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000691f:	c3                   	ret    
c0006920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006925:	ba ff ff ff ff       	mov    edx,0xffffffff
c000692a:	c3                   	ret    
c000692b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006930:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006935:	c3                   	ret    

c0006936 <iso_total>:
c0006936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000693a:	83 f8 0f             	cmp    eax,0xf
c000693d:	7f 2e                	jg     c000696d <iso_total+0x37>
c000693f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006942:	8d 14 90             	lea    edx,[eax+edx*4]
c0006945:	83 3c 95 a0 ff 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0060],0x0
c000694d:	74 24                	je     c0006973 <iso_total+0x3d>
c000694f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006952:	8d 14 90             	lea    edx,[eax+edx*4]
c0006955:	83 3c 95 30 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffd0],0x0
c000695d:	75 1a                	jne    c0006979 <iso_total+0x43>
c000695f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006962:	8d 04 90             	lea    eax,[eax+edx*4]
c0006965:	8b 04 85 ac ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0054]
c000696c:	c3                   	ret    
c000696d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006972:	c3                   	ret    
c0006973:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006978:	c3                   	ret    
c0006979:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000697e:	c3                   	ret    

c000697f <fn_postprocess>:
c000697f:	56                   	push   esi
c0006980:	53                   	push   ebx
c0006981:	83 ec 04             	sub    esp,0x4
c0006984:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006988:	8a 06                	mov    al,BYTE PTR [esi]
c000698a:	84 c0                	test   al,al
c000698c:	74 3b                	je     c00069c9 <fn_postprocess+0x4a>
c000698e:	3c 3b                	cmp    al,0x3b
c0006990:	74 37                	je     c00069c9 <fn_postprocess+0x4a>
c0006992:	89 f3                	mov    ebx,esi
c0006994:	83 ec 0c             	sub    esp,0xc
c0006997:	0f be c0             	movsx  eax,al
c000699a:	50                   	push   eax
c000699b:	e8 50 9f ff ff       	call   c00008f0 <tolower>
c00069a0:	88 03                	mov    BYTE PTR [ebx],al
c00069a2:	43                   	inc    ebx
c00069a3:	8a 03                	mov    al,BYTE PTR [ebx]
c00069a5:	83 c4 10             	add    esp,0x10
c00069a8:	84 c0                	test   al,al
c00069aa:	74 04                	je     c00069b0 <fn_postprocess+0x31>
c00069ac:	3c 3b                	cmp    al,0x3b
c00069ae:	75 e4                	jne    c0006994 <fn_postprocess+0x15>
c00069b0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00069b3:	39 de                	cmp    esi,ebx
c00069b5:	73 06                	jae    c00069bd <fn_postprocess+0x3e>
c00069b7:	80 7b ff 2e          	cmp    BYTE PTR [ebx-0x1],0x2e
c00069bb:	74 06                	je     c00069c3 <fn_postprocess+0x44>
c00069bd:	83 c4 04             	add    esp,0x4
c00069c0:	5b                   	pop    ebx
c00069c1:	5e                   	pop    esi
c00069c2:	c3                   	ret    
c00069c3:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00069c7:	eb f4                	jmp    c00069bd <fn_postprocess+0x3e>
c00069c9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00069cc:	eb ef                	jmp    c00069bd <fn_postprocess+0x3e>

c00069ce <iso_readdir>:
c00069ce:	55                   	push   ebp
c00069cf:	57                   	push   edi
c00069d0:	56                   	push   esi
c00069d1:	53                   	push   ebx
c00069d2:	83 ec 1c             	sub    esp,0x1c
c00069d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00069d9:	83 fe 0f             	cmp    esi,0xf
c00069dc:	0f 8f 7a 02 00 00    	jg     c0006c5c <iso_readdir+0x28e>
c00069e2:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069e5:	8d 04 86             	lea    eax,[esi+eax*4]
c00069e8:	83 3c 85 a0 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0060],0x0
c00069f0:	0f 84 70 02 00 00    	je     c0006c66 <iso_readdir+0x298>
c00069f6:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069f9:	8d 04 86             	lea    eax,[esi+eax*4]
c00069fc:	83 3c 85 a4 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe005c],0x0
c0006a04:	0f 84 66 02 00 00    	je     c0006c70 <iso_readdir+0x2a2>
c0006a0a:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a0d:	8d 04 86             	lea    eax,[esi+eax*4]
c0006a10:	83 3c 85 30 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffd0],0x0
c0006a18:	0f 85 5c 02 00 00    	jne    c0006c7a <iso_readdir+0x2ac>
c0006a1e:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a21:	8d 14 86             	lea    edx,[esi+eax*4]
c0006a24:	8b 04 95 a8 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0058]
c0006a2b:	8b 0c 95 ac ff 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe0054]
c0006a32:	39 c8                	cmp    eax,ecx
c0006a34:	73 57                	jae    c0006a8d <iso_readdir+0xbf>
c0006a36:	8d 14 f6             	lea    edx,[esi+esi*8]
c0006a39:	8d 3c 96             	lea    edi,[esi+edx*4]
c0006a3c:	c1 e7 02             	shl    edi,0x2
c0006a3f:	c1 e8 0b             	shr    eax,0xb
c0006a42:	03 87 a0 ff 01 c0    	add    eax,DWORD PTR [edi-0x3ffe0060]
c0006a48:	e8 d2 f6 ff ff       	call   c000611f <biread>
c0006a4d:	85 c0                	test   eax,eax
c0006a4f:	0f 88 2f 02 00 00    	js     c0006c84 <iso_readdir+0x2b6>
c0006a55:	8b 14 85 e0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0520]
c0006a5c:	83 c2 04             	add    edx,0x4
c0006a5f:	8b 87 a8 ff 01 c0    	mov    eax,DWORD PTR [edi-0x3ffe0058]
c0006a65:	89 c3                	mov    ebx,eax
c0006a67:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0006a6d:	01 d3                	add    ebx,edx
c0006a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006a71:	84 c9                	test   cl,cl
c0006a73:	75 22                	jne    c0006a97 <iso_readdir+0xc9>
c0006a75:	25 00 f8 ff ff       	and    eax,0xfffff800
c0006a7a:	05 00 08 00 00       	add    eax,0x800
c0006a7f:	89 87 a8 ff 01 c0    	mov    DWORD PTR [edi-0x3ffe0058],eax
c0006a85:	3b 87 ac ff 01 c0    	cmp    eax,DWORD PTR [edi-0x3ffe0054]
c0006a8b:	72 b2                	jb     c0006a3f <iso_readdir+0x71>
c0006a8d:	b8 00 00 00 00       	mov    eax,0x0
c0006a92:	e9 83 00 00 00       	jmp    c0006b1a <iso_readdir+0x14c>
c0006a97:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006a9a:	8d 3c be             	lea    edi,[esi+edi*4]
c0006a9d:	3b 04 bd ac ff 01 c0 	cmp    eax,DWORD PTR [edi*4-0x3ffe0054]
c0006aa4:	0f 83 e4 01 00 00    	jae    c0006c8e <iso_readdir+0x2c0>
c0006aaa:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006aae:	75 06                	jne    c0006ab6 <iso_readdir+0xe8>
c0006ab0:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006ab4:	74 6c                	je     c0006b22 <iso_readdir+0x154>
c0006ab6:	83 3d 14 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020914,0x0
c0006abd:	0f 84 9d 00 00 00    	je     c0006b60 <iso_readdir+0x192>
c0006ac3:	31 c9                	xor    ecx,ecx
c0006ac5:	8a 4b 20             	mov    cl,BYTE PTR [ebx+0x20]
c0006ac8:	8d 53 21             	lea    edx,[ebx+0x21]
c0006acb:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006ace:	8d 04 86             	lea    eax,[esi+eax*4]
c0006ad1:	8d 04 85 b8 ff 01 c0 	lea    eax,[eax*4-0x3ffe0048]
c0006ad8:	e8 aa f2 ff ff       	call   c0005d87 <ucs2utfn>
c0006add:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006ae1:	0f 85 66 01 00 00    	jne    c0006c4d <iso_readdir+0x27f>
c0006ae7:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006aea:	e8 8f f3 ff ff       	call   c0005e7e <iso_733>
c0006aef:	ba 00 00 00 00       	mov    edx,0x0
c0006af4:	8d 0c f6             	lea    ecx,[esi+esi*8]
c0006af7:	c1 e1 02             	shl    ecx,0x2
c0006afa:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0006afd:	8d 3c bd a0 ff 01 c0 	lea    edi,[edi*4-0x3ffe0060]
c0006b04:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0006b07:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0006b0a:	31 c0                	xor    eax,eax
c0006b0c:	8a 03                	mov    al,BYTE PTR [ebx]
c0006b0e:	01 47 08             	add    DWORD PTR [edi+0x8],eax
c0006b11:	01 ce                	add    esi,ecx
c0006b13:	8d 04 b5 b0 ff 01 c0 	lea    eax,[esi*4-0x3ffe0050]
c0006b1a:	83 c4 1c             	add    esp,0x1c
c0006b1d:	5b                   	pop    ebx
c0006b1e:	5e                   	pop    esi
c0006b1f:	5f                   	pop    edi
c0006b20:	5d                   	pop    ebp
c0006b21:	c3                   	ret    
c0006b22:	81 e1 ff 00 00 00    	and    ecx,0xff
c0006b28:	01 c8                	add    eax,ecx
c0006b2a:	8d 3c bd a0 ff 01 c0 	lea    edi,[edi*4-0x3ffe0060]
c0006b31:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b34:	89 c1                	mov    ecx,eax
c0006b36:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	8a 1c 0a             	mov    bl,BYTE PTR [edx+ecx*1]
c0006b41:	89 d9                	mov    ecx,ebx
c0006b43:	01 c8                	add    eax,ecx
c0006b45:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b48:	25 ff 07 00 00       	and    eax,0x7ff
c0006b4d:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0006b50:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006b53:	0f 85 5d ff ff ff    	jne    c0006ab6 <iso_readdir+0xe8>
c0006b59:	b8 00 00 00 00       	mov    eax,0x0
c0006b5e:	eb ba                	jmp    c0006b1a <iso_readdir+0x14c>
c0006b60:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006b63:	c1 e7 02             	shl    edi,0x2
c0006b66:	8d 04 37             	lea    eax,[edi+esi*1]
c0006b69:	8d 2c 85 b8 ff 01 c0 	lea    ebp,[eax*4-0x3ffe0048]
c0006b70:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0006b74:	83 ec 04             	sub    esp,0x4
c0006b77:	31 c0                	xor    eax,eax
c0006b79:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b7c:	50                   	push   eax
c0006b7d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006b80:	50                   	push   eax
c0006b81:	55                   	push   ebp
c0006b82:	e8 c9 9a ff ff       	call   c0000650 <strncpy>
c0006b87:	31 c0                	xor    eax,eax
c0006b89:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b8c:	01 f7                	add    edi,esi
c0006b8e:	c6 84 b8 b8 ff 01 c0 00 	mov    BYTE PTR [eax+edi*4-0x3ffe0048],0x0
c0006b96:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b99:	e8 e1 fd ff ff       	call   c000697f <fn_postprocess>
c0006b9e:	31 c0                	xor    eax,eax
c0006ba0:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006ba3:	0f b6 2b             	movzx  ebp,BYTE PTR [ebx]
c0006ba6:	81 e5 ff 00 00 00    	and    ebp,0xff
c0006bac:	29 c5                	sub    ebp,eax
c0006bae:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006bb2:	83 c4 10             	add    esp,0x10
c0006bb5:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006bb9:	74 25                	je     c0006be0 <iso_readdir+0x212>
c0006bbb:	83 ed 21             	sub    ebp,0x21
c0006bbe:	83 fd 03             	cmp    ebp,0x3
c0006bc1:	0f 8e 16 ff ff ff    	jle    c0006add <iso_readdir+0x10f>
c0006bc7:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bca:	48                   	dec    eax
c0006bcb:	3c 01                	cmp    al,0x1
c0006bcd:	0f 87 0a ff ff ff    	ja     c0006add <iso_readdir+0x10f>
c0006bd3:	8d 04 f5 00 00 00 00 	lea    eax,[esi*8+0x0]
c0006bda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bde:	eb 23                	jmp    c0006c03 <iso_readdir+0x235>
c0006be0:	47                   	inc    edi
c0006be1:	83 ed 22             	sub    ebp,0x22
c0006be4:	eb d8                	jmp    c0006bbe <iso_readdir+0x1f0>
c0006be6:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bea:	29 c5                	sub    ebp,eax
c0006bec:	01 c7                	add    edi,eax
c0006bee:	83 fd 03             	cmp    ebp,0x3
c0006bf1:	0f 8e e6 fe ff ff    	jle    c0006add <iso_readdir+0x10f>
c0006bf7:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bfa:	48                   	dec    eax
c0006bfb:	3c 01                	cmp    al,0x1
c0006bfd:	0f 87 da fe ff ff    	ja     c0006add <iso_readdir+0x10f>
c0006c03:	83 ec 04             	sub    esp,0x4
c0006c06:	6a 02                	push   0x2
c0006c08:	68 a0 d4 01 c0       	push   0xc001d4a0
c0006c0d:	57                   	push   edi
c0006c0e:	e8 6d 9b ff ff       	call   c0000780 <strncmp>
c0006c13:	83 c4 10             	add    esp,0x10
c0006c16:	85 c0                	test   eax,eax
c0006c18:	75 cc                	jne    c0006be6 <iso_readdir+0x218>
c0006c1a:	83 ec 04             	sub    esp,0x4
c0006c1d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c21:	83 e8 05             	sub    eax,0x5
c0006c24:	50                   	push   eax
c0006c25:	8d 47 05             	lea    eax,[edi+0x5]
c0006c28:	50                   	push   eax
c0006c29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006c2d:	e8 1e 9a ff ff       	call   c0000650 <strncpy>
c0006c32:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006c3a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0006c3d:	8d 14 96             	lea    edx,[esi+edx*4]
c0006c40:	c6 84 90 b3 ff 01 c0 00 	mov    BYTE PTR [eax+edx*4-0x3ffe004d],0x0
c0006c48:	83 c4 10             	add    esp,0x10
c0006c4b:	eb 99                	jmp    c0006be6 <iso_readdir+0x218>
c0006c4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006c52:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c57:	e9 98 fe ff ff       	jmp    c0006af4 <iso_readdir+0x126>
c0006c5c:	b8 00 00 00 00       	mov    eax,0x0
c0006c61:	e9 b4 fe ff ff       	jmp    c0006b1a <iso_readdir+0x14c>
c0006c66:	b8 00 00 00 00       	mov    eax,0x0
c0006c6b:	e9 aa fe ff ff       	jmp    c0006b1a <iso_readdir+0x14c>
c0006c70:	b8 00 00 00 00       	mov    eax,0x0
c0006c75:	e9 a0 fe ff ff       	jmp    c0006b1a <iso_readdir+0x14c>
c0006c7a:	b8 00 00 00 00       	mov    eax,0x0
c0006c7f:	e9 96 fe ff ff       	jmp    c0006b1a <iso_readdir+0x14c>
c0006c84:	b8 00 00 00 00       	mov    eax,0x0
c0006c89:	e9 8c fe ff ff       	jmp    c0006b1a <iso_readdir+0x14c>
c0006c8e:	b8 00 00 00 00       	mov    eax,0x0
c0006c93:	e9 82 fe ff ff       	jmp    c0006b1a <iso_readdir+0x14c>

c0006c98 <iso_reset>:
c0006c98:	e8 35 f2 ff ff       	call   c0005ed2 <iso_break_all>
c0006c9d:	e8 2a f2 ff ff       	call   c0005ecc <bclear>
c0006ca2:	b8 00 00 00 00       	mov    eax,0x0
c0006ca7:	c3                   	ret    

c0006ca8 <init_percd>:
c0006ca8:	57                   	push   edi
c0006ca9:	56                   	push   esi
c0006caa:	53                   	push   ebx
c0006cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006caf:	a2 c0 fa 01 c0       	mov    ds:0xc001fac0,al
c0006cb4:	e8 df ff ff ff       	call   c0006c98 <iso_reset>
c0006cb9:	c7 05 14 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020914,0x0
c0006cc3:	bb 01 00 00 00       	mov    ebx,0x1
c0006cc8:	eb 06                	jmp    c0006cd0 <init_percd+0x28>
c0006cca:	43                   	inc    ebx
c0006ccb:	83 fb 04             	cmp    ebx,0x4
c0006cce:	74 53                	je     c0006d23 <init_percd+0x7b>
c0006cd0:	a1 0c 09 02 c0       	mov    eax,ds:0xc002090c
c0006cd5:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006cd9:	e8 41 f4 ff ff       	call   c000611f <biread>
c0006cde:	89 c6                	mov    esi,eax
c0006ce0:	85 c0                	test   eax,eax
c0006ce2:	0f 88 c1 00 00 00    	js     c0006da9 <init_percd+0x101>
c0006ce8:	83 ec 04             	sub    esp,0x4
c0006ceb:	6a 06                	push   0x6
c0006ced:	68 a3 d4 01 c0       	push   0xc001d4a3
c0006cf2:	8b 04 85 e0 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0520]
c0006cf9:	83 c0 04             	add    eax,0x4
c0006cfc:	50                   	push   eax
c0006cfd:	e8 ae 96 ff ff       	call   c00003b0 <memcmp>
c0006d02:	83 c4 10             	add    esp,0x10
c0006d05:	85 c0                	test   eax,eax
c0006d07:	75 c1                	jne    c0006cca <init_percd+0x22>
c0006d09:	8b 04 b5 e0 fa 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0520]
c0006d10:	83 c0 5c             	add    eax,0x5c
c0006d13:	e8 08 f1 ff ff       	call   c0005e20 <isjoliet>
c0006d18:	a3 14 09 02 c0       	mov    ds:0xc0020914,eax
c0006d1d:	85 c0                	test   eax,eax
c0006d1f:	74 a9                	je     c0006cca <init_percd+0x22>
c0006d21:	eb 09                	jmp    c0006d2c <init_percd+0x84>
c0006d23:	83 3d 14 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020914,0x0
c0006d2a:	74 42                	je     c0006d6e <init_percd+0xc6>
c0006d2c:	8b 34 b5 e0 fa 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0520]
c0006d33:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d39:	bf e0 08 02 c0       	mov    edi,0xc00208e0
c0006d3e:	b9 22 00 00 00       	mov    ecx,0x22
c0006d43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d45:	b8 e2 08 02 c0       	mov    eax,0xc00208e2
c0006d4a:	e8 2f f1 ff ff       	call   c0005e7e <iso_733>
c0006d4f:	a3 08 09 02 c0       	mov    ds:0xc0020908,eax
c0006d54:	b8 ea 08 02 c0       	mov    eax,0xc00208ea
c0006d59:	e8 20 f1 ff ff       	call   c0005e7e <iso_733>
c0006d5e:	a3 04 09 02 c0       	mov    ds:0xc0020904,eax
c0006d63:	bb 00 00 00 00       	mov    ebx,0x0
c0006d68:	89 d8                	mov    eax,ebx
c0006d6a:	5b                   	pop    ebx
c0006d6b:	5e                   	pop    esi
c0006d6c:	5f                   	pop    edi
c0006d6d:	c3                   	ret    
c0006d6e:	a1 0c 09 02 c0       	mov    eax,ds:0xc002090c
c0006d73:	83 c0 10             	add    eax,0x10
c0006d76:	e8 a4 f3 ff ff       	call   c000611f <biread>
c0006d7b:	89 c6                	mov    esi,eax
c0006d7d:	85 c0                	test   eax,eax
c0006d7f:	78 e7                	js     c0006d68 <init_percd+0xc0>
c0006d81:	83 ec 04             	sub    esp,0x4
c0006d84:	6a 06                	push   0x6
c0006d86:	68 aa d4 01 c0       	push   0xc001d4aa
c0006d8b:	8b 04 85 e0 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0520]
c0006d92:	83 c0 04             	add    eax,0x4
c0006d95:	50                   	push   eax
c0006d96:	e8 15 96 ff ff       	call   c00003b0 <memcmp>
c0006d9b:	83 c4 10             	add    esp,0x10
c0006d9e:	85 c0                	test   eax,eax
c0006da0:	74 8a                	je     c0006d2c <init_percd+0x84>
c0006da2:	bb ff ff ff ff       	mov    ebx,0xffffffff
c0006da7:	eb bf                	jmp    c0006d68 <init_percd+0xc0>
c0006da9:	89 c3                	mov    ebx,eax
c0006dab:	eb bb                	jmp    c0006d68 <init_percd+0xc0>

c0006dad <iso_ioctl>:
c0006dad:	e8 e6 fe ff ff       	call   c0006c98 <iso_reset>
c0006db2:	b8 00 00 00 00       	mov    eax,0x0
c0006db7:	c3                   	ret    

c0006db8 <fs_iso9660_init>:
c0006db8:	53                   	push   ebx
c0006db9:	83 ec 0c             	sub    esp,0xc
c0006dbc:	68 40 09 00 00       	push   0x940
c0006dc1:	6a 00                	push   0x0
c0006dc3:	68 a0 ff 01 c0       	push   0xc001ffa0
c0006dc8:	e8 23 97 ff ff       	call   c00004f0 <memset>
c0006dcd:	c7 05 a0 ff 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001ffa0,0xffffffff
c0006dd7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dde:	e8 8a 10 00 00       	call   c0007e6d <malloc>
c0006de3:	a3 10 09 02 c0       	mov    ds:0xc0020910,eax
c0006de8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006def:	e8 79 10 00 00       	call   c0007e6d <malloc>
c0006df4:	a3 80 ff 01 c0       	mov    ds:0xc001ff80,eax
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	bb 00 00 00 00       	mov    ebx,0x0
c0006e01:	83 ec 0c             	sub    esp,0xc
c0006e04:	68 04 08 00 00       	push   0x804
c0006e09:	e8 5f 10 00 00       	call   c0007e6d <malloc>
c0006e0e:	89 04 9d e0 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0520],eax
c0006e15:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e1b:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006e22:	e8 46 10 00 00       	call   c0007e6d <malloc>
c0006e27:	89 04 9d 80 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0580],eax
c0006e2e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e34:	43                   	inc    ebx
c0006e35:	83 c4 10             	add    esp,0x10
c0006e38:	83 fb 10             	cmp    ebx,0x10
c0006e3b:	75 c4                	jne    c0006e01 <fs_iso9660_init+0x49>
c0006e3d:	b8 00 00 00 00       	mov    eax,0x0
c0006e42:	83 c4 08             	add    esp,0x8
c0006e45:	5b                   	pop    ebx
c0006e46:	c3                   	ret    

c0006e47 <fs_iso9660_shutdown>:
c0006e47:	53                   	push   ebx
c0006e48:	83 ec 08             	sub    esp,0x8
c0006e4b:	bb 00 00 00 00       	mov    ebx,0x0
c0006e50:	83 ec 0c             	sub    esp,0xc
c0006e53:	ff 34 9d e0 fa 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0520]
c0006e5a:	e8 1e 10 00 00       	call   c0007e7d <free>
c0006e5f:	83 c4 04             	add    esp,0x4
c0006e62:	ff 34 9d 80 fa 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0580]
c0006e69:	e8 0f 10 00 00       	call   c0007e7d <free>
c0006e6e:	43                   	inc    ebx
c0006e6f:	83 c4 10             	add    esp,0x10
c0006e72:	83 fb 10             	cmp    ebx,0x10
c0006e75:	75 d9                	jne    c0006e50 <fs_iso9660_shutdown+0x9>
c0006e77:	a1 10 09 02 c0       	mov    eax,ds:0xc0020910
c0006e7c:	85 c0                	test   eax,eax
c0006e7e:	74 0c                	je     c0006e8c <fs_iso9660_shutdown+0x45>
c0006e80:	83 ec 0c             	sub    esp,0xc
c0006e83:	50                   	push   eax
c0006e84:	e8 f4 0f 00 00       	call   c0007e7d <free>
c0006e89:	83 c4 10             	add    esp,0x10
c0006e8c:	a1 80 ff 01 c0       	mov    eax,ds:0xc001ff80
c0006e91:	85 c0                	test   eax,eax
c0006e93:	74 0c                	je     c0006ea1 <fs_iso9660_shutdown+0x5a>
c0006e95:	83 ec 0c             	sub    esp,0xc
c0006e98:	50                   	push   eax
c0006e99:	e8 df 0f 00 00       	call   c0007e7d <free>
c0006e9e:	83 c4 10             	add    esp,0x10
c0006ea1:	c7 05 80 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ff80,0x0
c0006eab:	c7 05 10 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020910,0x0
c0006eb5:	b8 00 00 00 00       	mov    eax,0x0
c0006eba:	83 c4 08             	add    esp,0x8
c0006ebd:	5b                   	pop    ebx
c0006ebe:	c3                   	ret    

c0006ebf <CPU::current()>:
c0006ebf:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0006ec4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0006eca:	c3                   	ret    

c0006ecb <operator new(unsigned long)>:
c0006ecb:	e9 9d 0f 00 00       	jmp    c0007e6d <malloc>

c0006ed0 <operator delete(void*)>:
c0006ed0:	e9 b8 0f 00 00       	jmp    c0007e8d <rfree>

c0006ed5 <disableIRQs()>:
c0006ed5:	fa                   	cli    
c0006ed6:	c3                   	ret    

c0006ed7 <enableIRQs()>:
c0006ed7:	fb                   	sti    
c0006ed8:	c3                   	ret    

c0006ed9 <lockScheduler()>:
c0006ed9:	fa                   	cli    
c0006eda:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0006ee0:	c3                   	ret    

c0006ee1 <unlockScheduler()>:
c0006ee1:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0006ee6:	48                   	dec    eax
c0006ee7:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0006eec:	75 01                	jne    c0006eef <unlockScheduler()+0xe>
c0006eee:	fb                   	sti    
c0006eef:	c3                   	ret    

c0006ef0 <lockStuff()>:
c0006ef0:	fa                   	cli    
c0006ef1:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0006ef7:	ff 05 e4 3d 02 c0    	inc    DWORD PTR ds:0xc0023de4
c0006efd:	c3                   	ret    

c0006efe <unlockStuff()>:
c0006efe:	83 ec 0c             	sub    esp,0xc
c0006f01:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c0006f06:	48                   	dec    eax
c0006f07:	a3 e4 3d 02 c0       	mov    ds:0xc0023de4,eax
c0006f0c:	75 18                	jne    c0006f26 <unlockStuff()+0x28>
c0006f0e:	83 3d e0 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023de0,0x0
c0006f15:	74 0f                	je     c0006f26 <unlockStuff()+0x28>
c0006f17:	c7 05 e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x0
c0006f21:	e8 7a cb 00 00       	call   c0013aa0 <schedule()>
c0006f26:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0006f2b:	48                   	dec    eax
c0006f2c:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0006f31:	75 01                	jne    c0006f34 <unlockStuff()+0x36>
c0006f33:	fb                   	sti    
c0006f34:	83 c4 0c             	add    esp,0xc
c0006f37:	c3                   	ret    

c0006f38 <Virt::getAKernelVAS()>:
c0006f38:	a1 10 0a 02 c0       	mov    eax,ds:0xc0020a10
c0006f3d:	c3                   	ret    

c0006f3e <__not_memcpy>:
c0006f3e:	57                   	push   edi
c0006f3f:	56                   	push   esi
c0006f40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f44:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006f48:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006f4c:	89 c7                	mov    edi,eax
c0006f4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006f50:	5e                   	pop    esi
c0006f51:	5f                   	pop    edi
c0006f52:	c3                   	ret    
c0006f53:	90                   	nop

c0006f54 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006f54:	83 ec 0c             	sub    esp,0xc
c0006f57:	83 ec 08             	sub    esp,0x8
c0006f5a:	68 b1 d4 01 c0       	push   0xc001d4b1
c0006f5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f63:	e8 98 97 ff ff       	call   c0000700 <strcmp>
c0006f68:	83 c4 10             	add    esp,0x10
c0006f6b:	85 c0                	test   eax,eax
c0006f6d:	0f 94 c0             	sete   al
c0006f70:	84 c0                	test   al,al
c0006f72:	74 0c                	je     c0006f80 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006f74:	b8 18 09 02 c0       	mov    eax,0xc0020918
c0006f79:	e9 ea 00 00 00       	jmp    c0007068 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f7e:	66 90                	xchg   ax,ax
c0006f80:	83 ec 08             	sub    esp,0x8
c0006f83:	68 ba d4 01 c0       	push   0xc001d4ba
c0006f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f8c:	e8 6f 97 ff ff       	call   c0000700 <strcmp>
c0006f91:	83 c4 10             	add    esp,0x10
c0006f94:	85 c0                	test   eax,eax
c0006f96:	0f 94 c0             	sete   al
c0006f99:	84 c0                	test   al,al
c0006f9b:	74 0b                	je     c0006fa8 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006f9d:	b8 40 c1 01 c0       	mov    eax,0xc001c140
c0006fa2:	e9 c1 00 00 00       	jmp    c0007068 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fa7:	90                   	nop
c0006fa8:	83 ec 08             	sub    esp,0x8
c0006fab:	68 c4 d4 01 c0       	push   0xc001d4c4
c0006fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fb4:	e8 47 97 ff ff       	call   c0000700 <strcmp>
c0006fb9:	83 c4 10             	add    esp,0x10
c0006fbc:	85 c0                	test   eax,eax
c0006fbe:	0f 94 c0             	sete   al
c0006fc1:	84 c0                	test   al,al
c0006fc3:	74 0b                	je     c0006fd0 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006fc5:	b8 74 be 01 c0       	mov    eax,0xc001be74
c0006fca:	e9 99 00 00 00       	jmp    c0007068 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fcf:	90                   	nop
c0006fd0:	83 ec 08             	sub    esp,0x8
c0006fd3:	68 cd d4 01 c0       	push   0xc001d4cd
c0006fd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fdc:	e8 1f 97 ff ff       	call   c0000700 <strcmp>
c0006fe1:	83 c4 10             	add    esp,0x10
c0006fe4:	85 c0                	test   eax,eax
c0006fe6:	0f 94 c0             	sete   al
c0006fe9:	84 c0                	test   al,al
c0006feb:	74 07                	je     c0006ff4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0006fed:	b8 40 c2 01 c0       	mov    eax,0xc001c240
c0006ff2:	eb 74                	jmp    c0007068 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006ff4:	83 ec 08             	sub    esp,0x8
c0006ff7:	68 d7 d4 01 c0       	push   0xc001d4d7
c0006ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007000:	e8 fb 96 ff ff       	call   c0000700 <strcmp>
c0007005:	83 c4 10             	add    esp,0x10
c0007008:	85 c0                	test   eax,eax
c000700a:	0f 94 c0             	sete   al
c000700d:	84 c0                	test   al,al
c000700f:	74 07                	je     c0007018 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0007011:	b8 c0 bf 01 c0       	mov    eax,0xc001bfc0
c0007016:	eb 50                	jmp    c0007068 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007018:	83 ec 08             	sub    esp,0x8
c000701b:	68 e0 d4 01 c0       	push   0xc001d4e0
c0007020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007024:	e8 d7 96 ff ff       	call   c0000700 <strcmp>
c0007029:	83 c4 10             	add    esp,0x10
c000702c:	85 c0                	test   eax,eax
c000702e:	0f 94 c0             	sete   al
c0007031:	84 c0                	test   al,al
c0007033:	74 07                	je     c000703c <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0007035:	b8 1c 09 02 c0       	mov    eax,0xc002091c
c000703a:	eb 2c                	jmp    c0007068 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000703c:	83 ec 08             	sub    esp,0x8
c000703f:	68 ed d4 01 c0       	push   0xc001d4ed
c0007044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007048:	e8 b3 96 ff ff       	call   c0000700 <strcmp>
c000704d:	83 c4 10             	add    esp,0x10
c0007050:	85 c0                	test   eax,eax
c0007052:	0f 94 c0             	sete   al
c0007055:	84 c0                	test   al,al
c0007057:	74 07                	je     c0007060 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0007059:	b8 1d 09 02 c0       	mov    eax,0xc002091d
c000705e:	eb 08                	jmp    c0007068 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007060:	b8 00 00 00 00       	mov    eax,0x0
c0007065:	8d 76 00             	lea    esi,[esi+0x0]
c0007068:	83 c4 0c             	add    esp,0xc
c000706b:	c3                   	ret    

c000706c <Computer::close(int, int, void*)>:
c000706c:	57                   	push   edi
c000706d:	56                   	push   esi
c000706e:	53                   	push   ebx
c000706f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007073:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007077:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000707b:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0007081:	83 ec 0c             	sub    esp,0xc
c0007084:	50                   	push   eax
c0007085:	e8 d0 50 00 00       	call   c000c15a <Device::closeAll()>
c000708a:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0007090:	83 c4 10             	add    esp,0x10
c0007093:	8b 10                	mov    edx,DWORD PTR [eax]
c0007095:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0007099:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00070a1:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00070a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00070a9:	5b                   	pop    ebx
c00070aa:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00070ad:	5e                   	pop    esi
c00070ae:	5f                   	pop    edi
c00070af:	ff e0                	jmp    eax

c00070b1 <Krnl::firstTask()>:
c00070b1:	53                   	push   ebx
c00070b2:	83 ec 14             	sub    esp,0x14
c00070b5:	fb                   	sti    
c00070b6:	68 fa d4 01 c0       	push   0xc001d4fa
c00070bb:	e8 07 0e 00 00       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c00070c0:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00070c7:	e8 a1 0d 00 00       	call   c0007e6d <malloc>
c00070cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00070d3:	89 c3                	mov    ebx,eax
c00070d5:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c00070da:	50                   	push   eax
c00070db:	68 13 d5 01 c0       	push   0xc001d513
c00070e0:	6a 01                	push   0x1
c00070e2:	53                   	push   ebx
c00070e3:	e8 8c c5 00 00       	call   c0013674 <Process::Process(bool, char const*, Process*, char**)>
c00070e8:	83 c4 20             	add    esp,0x20
c00070eb:	68 ff 00 00 00       	push   0xff
c00070f0:	6a 00                	push   0x0
c00070f2:	68 c7 78 00 c0       	push   0xc00078c7
c00070f7:	53                   	push   ebx
c00070f8:	e8 83 c7 00 00       	call   c0013880 <Process::createThread(void (*)(void*), void*, int)>
c00070fd:	8b 15 10 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e10
c0007103:	6a 7a                	push   0x7a
c0007105:	6a 00                	push   0x0
c0007107:	68 d4 42 01 c0       	push   0xc00142d4
c000710c:	52                   	push   edx
c000710d:	e8 6e c7 00 00       	call   c0013880 <Process::createThread(void (*)(void*), void*, int)>
c0007112:	83 c4 14             	add    esp,0x14
c0007115:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000711a:	68 10 d6 01 c0       	push   0xc001d610
c000711f:	c6 05 1d 09 02 c0 01 	mov    BYTE PTR ds:0xc002091d,0x1
c0007126:	e8 9c 0d 00 00       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c000712b:	e8 83 d5 00 00       	call   c00146b3 <Vm::initialise8086()>
c0007130:	e8 69 3e 00 00       	call   c000af9e <Fs::initVFS()>
c0007135:	c7 04 24 20 d5 01 c0 	mov    DWORD PTR [esp],0xc001d520
c000713c:	e8 86 0d 00 00       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c0007141:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0007146:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000714c:	8b 10                	mov    edx,DWORD PTR [eax]
c000714e:	6a 00                	push   0x0
c0007150:	6a 00                	push   0x0
c0007152:	6a 00                	push   0x0
c0007154:	50                   	push   eax
c0007155:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007158:	83 c4 14             	add    esp,0x14
c000715b:	68 10 d6 01 c0       	push   0xc001d610
c0007160:	e8 62 0d 00 00       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c0007165:	e8 9c ad 00 00       	call   c0011f06 <Sys::loadSyscalls()>
c000716a:	e8 d3 94 00 00       	call   c0010642 <Krnl::loadSystemEnv()>
c000716f:	e8 98 97 00 00       	call   c001090c <Krnl::setupPowerManager()>
c0007174:	83 c4 0c             	add    esp,0xc
c0007177:	6a 3a                	push   0x3a
c0007179:	68 3a d5 01 c0       	push   0xc001d53a
c000717e:	68 43 d5 01 c0       	push   0xc001d543
c0007183:	e8 ae 9c 00 00       	call   c0010e36 <Reg::readIntWithDefault(char*, char*, int)>
c0007188:	89 04 24             	mov    DWORD PTR [esp],eax
c000718b:	e8 1c 49 00 00       	call   c000baac <User::loadClockSettings(int)>
c0007190:	c7 04 24 34 d6 01 c0 	mov    DWORD PTR [esp],0xc001d634
c0007197:	e8 2b 0d 00 00       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c000719c:	59                   	pop    ecx
c000719d:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c00071a2:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c00071a8:	53                   	push   ebx
c00071a9:	e8 aa 4f 00 00       	call   c000c158 <Device::loadDriversForAll()>
c00071ae:	c7 04 24 4b d5 01 c0 	mov    DWORD PTR [esp],0xc001d54b
c00071b5:	e8 0d 0d 00 00       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c00071ba:	58                   	pop    eax
c00071bb:	8b 1d 18 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020918
c00071c1:	5a                   	pop    edx
c00071c2:	6a 01                	push   0x1
c00071c4:	68 5c d5 01 c0       	push   0xc001d55c
c00071c9:	e8 e0 be 00 00       	call   c00130ae <Thr::loadDLL(char const*, bool)>
c00071ce:	59                   	pop    ecx
c00071cf:	5a                   	pop    edx
c00071d0:	53                   	push   ebx
c00071d1:	50                   	push   eax
c00071d2:	e8 08 c1 00 00       	call   c00132df <Thr::executeDLL(unsigned long, void*)>
c00071d7:	83 c4 10             	add    esp,0x10
c00071da:	83 ec 0c             	sub    esp,0xc
c00071dd:	6a 02                	push   0x2
c00071df:	e8 b8 ca 00 00       	call   c0013c9c <blockTask(TaskState)>
c00071e4:	83 c4 10             	add    esp,0x10
c00071e7:	eb f1                	jmp    c00071da <Krnl::firstTask()+0x129>
c00071e9:	90                   	nop

c00071ea <Computer::Computer()>:
c00071ea:	83 ec 0c             	sub    esp,0xc
c00071ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f1:	83 ec 08             	sub    esp,0x8
c00071f4:	68 78 d5 01 c0       	push   0xc001d578
c00071f9:	50                   	push   eax
c00071fa:	e8 d5 4f 00 00       	call   c000c1d4 <Device::Device(char const*)>
c00071ff:	83 c4 10             	add    esp,0x10
c0007202:	ba 80 d6 01 c0       	mov    edx,0xc001d680
c0007207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000720b:	89 10                	mov    DWORD PTR [eax],edx
c000720d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007211:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000721b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000721f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0007229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000722d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0007233:	83 ca 04             	or     edx,0x4
c0007236:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000723c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007240:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007246:	31 d2                	xor    edx,edx
c0007248:	88 c2                	mov    dl,al
c000724a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000724e:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007259:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000725f:	31 d2                	xor    edx,edx
c0007261:	88 c2                	mov    dl,al
c0007263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007267:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000726c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007270:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007276:	8d 50 01             	lea    edx,[eax+0x1]
c0007279:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000727d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0007283:	31 d2                	xor    edx,edx
c0007285:	88 c2                	mov    dl,al
c0007287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000728b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000728f:	83 e1 3f             	and    ecx,0x3f
c0007292:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0007296:	90                   	nop
c0007297:	83 c4 0c             	add    esp,0xc
c000729a:	c3                   	ret    
c000729b:	90                   	nop

c000729c <Computer::setBootMessage(char const*)>:
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <Computer::detectFeatures()>:
c000729e:	55                   	push   ebp
c000729f:	57                   	push   edi
c00072a0:	56                   	push   esi
c00072a1:	53                   	push   ebx
c00072a2:	83 ec 1c             	sub    esp,0x1c
c00072a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00072a9:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c00072b3:	e8 61 8f ff ff       	call   c0000219 <detectCPUID>
c00072b8:	85 c0                	test   eax,eax
c00072ba:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072c0:	0f 95 c2             	setne  dl
c00072c3:	83 e0 fd             	and    eax,0xfffffffd
c00072c6:	01 d2                	add    edx,edx
c00072c8:	09 d0                	or     eax,edx
c00072ca:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072d0:	a8 02                	test   al,0x2
c00072d2:	75 46                	jne    c000731a <Computer::detectFeatures()+0x7c>
c00072d4:	f6 05 31 09 02 c0 04 	test   BYTE PTR ds:0xc0020931,0x4
c00072db:	74 07                	je     c00072e4 <Computer::detectFeatures()+0x46>
c00072dd:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c00072e4:	e8 1d 4b 01 00       	call   c001be06 <x87Detect>
c00072e9:	83 e0 01             	and    eax,0x1
c00072ec:	c1 e0 04             	shl    eax,0x4
c00072ef:	88 c2                	mov    dl,al
c00072f1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072f7:	83 e0 ef             	and    eax,0xffffffef
c00072fa:	09 d0                	or     eax,edx
c00072fc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007302:	a8 10                	test   al,0x10
c0007304:	0f 85 2a 01 00 00    	jne    c0007434 <Computer::detectFeatures()+0x196>
c000730a:	84 c0                	test   al,al
c000730c:	0f 88 45 01 00 00    	js     c0007457 <Computer::detectFeatures()+0x1b9>
c0007312:	83 c4 1c             	add    esp,0x1c
c0007315:	5b                   	pop    ebx
c0007316:	5e                   	pop    esi
c0007317:	5f                   	pop    edi
c0007318:	5d                   	pop    ebp
c0007319:	c3                   	ret    
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	6a 20                	push   0x20
c000731f:	e8 40 84 00 00       	call   c000f764 <CPU::cpuidCheckEDX(unsigned int)>
c0007324:	83 e0 01             	and    eax,0x1
c0007327:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000732e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007334:	83 e0 f7             	and    eax,0xfffffff7
c0007337:	09 d0                	or     eax,edx
c0007339:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000733f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0007346:	e8 19 84 00 00       	call   c000f764 <CPU::cpuidCheckEDX(unsigned int)>
c000734b:	83 e0 01             	and    eax,0x1
c000734e:	88 c2                	mov    dl,al
c0007350:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007356:	83 e0 fe             	and    eax,0xfffffffe
c0007359:	09 d0                	or     eax,edx
c000735b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007361:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0007368:	e8 f7 83 00 00       	call   c000f764 <CPU::cpuidCheckEDX(unsigned int)>
c000736d:	c1 e0 07             	shl    eax,0x7
c0007370:	88 c2                	mov    dl,al
c0007372:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007378:	83 e0 7f             	and    eax,0x7f
c000737b:	09 d0                	or     eax,edx
c000737d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007383:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000738a:	e8 d5 83 00 00       	call   c000f764 <CPU::cpuidCheckEDX(unsigned int)>
c000738f:	83 c4 10             	add    esp,0x10
c0007392:	83 e0 01             	and    eax,0x1
c0007395:	c1 e0 05             	shl    eax,0x5
c0007398:	88 c2                	mov    dl,al
c000739a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073a0:	83 e0 df             	and    eax,0xffffffdf
c00073a3:	09 d0                	or     eax,edx
c00073a5:	f7 05 30 09 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020930,0x401
c00073af:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073b5:	0f 84 c2 00 00 00    	je     c000747d <Computer::detectFeatures()+0x1df>
c00073bb:	83 e0 fe             	and    eax,0xfffffffe
c00073be:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073c4:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073ca:	88 c2                	mov    dl,al
c00073cc:	83 e2 09             	and    edx,0x9
c00073cf:	fe ca                	dec    dl
c00073d1:	75 09                	jne    c00073dc <Computer::detectFeatures()+0x13e>
c00073d3:	83 e0 fe             	and    eax,0xfffffffe
c00073d6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073dc:	83 ec 0c             	sub    esp,0xc
c00073df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00073e3:	50                   	push   eax
c00073e4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00073e8:	55                   	push   ebp
c00073e9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00073ed:	57                   	push   edi
c00073ee:	8d 74 24 18          	lea    esi,[esp+0x18]
c00073f2:	56                   	push   esi
c00073f3:	68 00 00 00 80       	push   0x80000000
c00073f8:	e8 e3 82 00 00       	call   c000f6e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00073fd:	83 c4 20             	add    esp,0x20
c0007400:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007407:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000740b:	0f 86 c3 fe ff ff    	jbe    c00072d4 <Computer::detectFeatures()+0x36>
c0007411:	83 ec 0c             	sub    esp,0xc
c0007414:	50                   	push   eax
c0007415:	55                   	push   ebp
c0007416:	57                   	push   edi
c0007417:	56                   	push   esi
c0007418:	68 01 00 00 80       	push   0x80000001
c000741d:	e8 be 82 00 00       	call   c000f6e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007422:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c000742c:	83 c4 20             	add    esp,0x20
c000742f:	e9 a0 fe ff ff       	jmp    c00072d4 <Computer::detectFeatures()+0x36>
c0007434:	e8 87 49 01 00       	call   c001bdc0 <absolutelyNoChanceInHell>
c0007439:	88 c2                	mov    dl,al
c000743b:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007441:	c1 e2 07             	shl    edx,0x7
c0007444:	83 e0 7f             	and    eax,0x7f
c0007447:	09 d0                	or     eax,edx
c0007449:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000744f:	84 c0                	test   al,al
c0007451:	0f 89 bb fe ff ff    	jns    c0007312 <Computer::detectFeatures()+0x74>
c0007457:	e8 e4 46 01 00       	call   c001bb40 <avxDetect>
c000745c:	83 e0 01             	and    eax,0x1
c000745f:	c1 e0 05             	shl    eax,0x5
c0007462:	88 c2                	mov    dl,al
c0007464:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000746a:	83 e0 df             	and    eax,0xffffffdf
c000746d:	09 d0                	or     eax,edx
c000746f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007475:	83 c4 1c             	add    esp,0x1c
c0007478:	5b                   	pop    ebx
c0007479:	5e                   	pop    esi
c000747a:	5f                   	pop    edi
c000747b:	5d                   	pop    ebp
c000747c:	c3                   	ret    
c000747d:	83 ec 0c             	sub    esp,0xc
c0007480:	68 00 02 00 00       	push   0x200
c0007485:	e8 da 82 00 00       	call   c000f764 <CPU::cpuidCheckEDX(unsigned int)>
c000748a:	83 c4 10             	add    esp,0x10
c000748d:	83 e0 01             	and    eax,0x1
c0007490:	88 c2                	mov    dl,al
c0007492:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007498:	83 e0 fe             	and    eax,0xfffffffe
c000749b:	09 d0                	or     eax,edx
c000749d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00074a3:	e9 1c ff ff ff       	jmp    c00073c4 <Computer::detectFeatures()+0x126>

c00074a8 <Computer::displayFeatures()>:
c00074a8:	c3                   	ret    
c00074a9:	90                   	nop

c00074aa <Computer::rdmsr(unsigned int)>:
c00074aa:	83 ec 0c             	sub    esp,0xc
c00074ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074b1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074b8:	74 0a                	je     c00074c4 <Computer::rdmsr(unsigned int)+0x1a>
c00074ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074be:	0f 32                	rdmsr  
c00074c0:	83 c4 0c             	add    esp,0xc
c00074c3:	c3                   	ret    
c00074c4:	83 ec 0c             	sub    esp,0xc
c00074c7:	68 81 d5 01 c0       	push   0xc001d581
c00074cc:	e8 7a 92 00 00       	call   c001074b <Krnl::panic(char const*)>
c00074d1:	83 c4 10             	add    esp,0x10
c00074d4:	eb e4                	jmp    c00074ba <Computer::rdmsr(unsigned int)+0x10>

c00074d6 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00074d6:	57                   	push   edi
c00074d7:	56                   	push   esi
c00074d8:	52                   	push   edx
c00074d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074dd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00074e1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00074e5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074ec:	74 0e                	je     c00074fc <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00074ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074f2:	89 f0                	mov    eax,esi
c00074f4:	89 fa                	mov    edx,edi
c00074f6:	0f 30                	wrmsr  
c00074f8:	58                   	pop    eax
c00074f9:	5e                   	pop    esi
c00074fa:	5f                   	pop    edi
c00074fb:	c3                   	ret    
c00074fc:	83 ec 0c             	sub    esp,0xc
c00074ff:	68 87 d5 01 c0       	push   0xc001d587
c0007504:	e8 42 92 00 00       	call   c001074b <Krnl::panic(char const*)>
c0007509:	83 c4 10             	add    esp,0x10
c000750c:	eb e0                	jmp    c00074ee <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000750e <Computer::shutdown()>:
c000750e:	83 ec 0c             	sub    esp,0xc
c0007511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007515:	8b 10                	mov    edx,DWORD PTR [eax]
c0007517:	6a 00                	push   0x0
c0007519:	6a 00                	push   0x0
c000751b:	6a 00                	push   0x0
c000751d:	50                   	push   eax
c000751e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007521:	83 c4 1c             	add    esp,0x1c
c0007524:	c3                   	ret    
c0007525:	90                   	nop

c0007526 <Computer::restart()>:
c0007526:	83 ec 0c             	sub    esp,0xc
c0007529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000752d:	8b 10                	mov    edx,DWORD PTR [eax]
c000752f:	6a 00                	push   0x0
c0007531:	6a 00                	push   0x0
c0007533:	6a 01                	push   0x1
c0007535:	50                   	push   eax
c0007536:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007539:	83 c4 1c             	add    esp,0x1c
c000753c:	c3                   	ret    
c000753d:	90                   	nop

c000753e <Computer::sleep()>:
c000753e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007542:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007548:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000754c:	e9 8b 7c 00 00       	jmp    c000f1dc <ACPI::sleep()>
c0007551:	90                   	nop

c0007552 <Computer::nmiEnabled()>:
c0007552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007556:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000755c:	c3                   	ret    
c000755d:	90                   	nop

c000755e <Computer::readCMOS(unsigned char)>:
c000755e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007562:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007569:	19 c0                	sbb    eax,eax
c000756b:	83 e0 80             	and    eax,0xffffff80
c000756e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007572:	e6 70                	out    0x70,al
c0007574:	e4 71                	in     al,0x71
c0007576:	c3                   	ret    
c0007577:	90                   	nop

c0007578 <Computer::enableNMI(bool)>:
c0007578:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000757c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007580:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007586:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000758e:	eb ce                	jmp    c000755e <Computer::readCMOS(unsigned char)>

c0007590 <Computer::open(int, int, void*)>:
c0007590:	56                   	push   esi
c0007591:	53                   	push   ebx
c0007592:	83 ec 10             	sub    esp,0x10
c0007595:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007599:	f6 05 30 09 02 c0 04 	test   BYTE PTR ds:0xc0020930,0x4
c00075a0:	68 8d d5 01 c0       	push   0xc001d58d
c00075a5:	0f 94 05 00 f8 01 c0 	sete   BYTE PTR ds:0xc001f800
c00075ac:	e8 16 09 00 00       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c00075b1:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00075b8:	e8 b0 08 00 00       	call   c0007e6d <malloc>
c00075bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00075c0:	89 c6                	mov    esi,eax
c00075c2:	e8 ad 77 00 00       	call   c000ed74 <ACPI::ACPI()>
c00075c7:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00075cd:	58                   	pop    eax
c00075ce:	5a                   	pop    edx
c00075cf:	56                   	push   esi
c00075d0:	53                   	push   ebx
c00075d1:	e8 66 4a 00 00       	call   c000c03c <Device::addChild(Device*)>
c00075d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075d9:	e8 c0 fc ff ff       	call   c000729e <Computer::detectFeatures()>
c00075de:	59                   	pop    ecx
c00075df:	5e                   	pop    esi
c00075e0:	6a 01                	push   0x1
c00075e2:	53                   	push   ebx
c00075e3:	e8 90 ff ff ff       	call   c0007578 <Computer::enableNMI(bool)>
c00075e8:	c7 04 24 a5 d5 01 c0 	mov    DWORD PTR [esp],0xc001d5a5
c00075ef:	e8 d3 08 00 00       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c00075f4:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00075fb:	e8 6d 08 00 00       	call   c0007e6d <malloc>
c0007600:	89 04 24             	mov    DWORD PTR [esp],eax
c0007603:	89 c6                	mov    esi,eax
c0007605:	e8 12 82 00 00       	call   c000f81c <CPU::CPU()>
c000760a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007610:	58                   	pop    eax
c0007611:	5a                   	pop    edx
c0007612:	56                   	push   esi
c0007613:	53                   	push   ebx
c0007614:	e8 23 4a 00 00       	call   c000c03c <Device::addChild(Device*)>
c0007619:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000761f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007623:	8b 10                	mov    edx,DWORD PTR [eax]
c0007625:	51                   	push   ecx
c0007626:	6a 00                	push   0x0
c0007628:	6a 00                	push   0x0
c000762a:	50                   	push   eax
c000762b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000762e:	83 c4 14             	add    esp,0x14
c0007631:	68 54 d6 01 c0       	push   0xc001d654
c0007636:	e8 8c 08 00 00       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c000763b:	e8 34 e1 00 00       	call   c0015774 <HalInitialiseCoprocessor()>
c0007640:	c7 04 24 bf d5 01 c0 	mov    DWORD PTR [esp],0xc001d5bf
c0007647:	e8 7b 08 00 00       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c000764c:	c7 04 24 b1 70 00 c0 	mov    DWORD PTR [esp],0xc00070b1
c0007653:	e8 40 c3 00 00       	call   c0013998 <setupMultitasking(void (*)())>
c0007658:	83 c4 14             	add    esp,0x14
c000765b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007660:	5b                   	pop    ebx
c0007661:	5e                   	pop    esi
c0007662:	c3                   	ret    
c0007663:	90                   	nop

c0007664 <Computer::disableNMI()>:
c0007664:	6a 00                	push   0x0
c0007666:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000766a:	50                   	push   eax
c000766b:	e8 08 ff ff ff       	call   c0007578 <Computer::enableNMI(bool)>
c0007670:	5a                   	pop    edx
c0007671:	59                   	pop    ecx
c0007672:	c3                   	ret    
c0007673:	90                   	nop

c0007674 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007678:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000767f:	19 c0                	sbb    eax,eax
c0007681:	83 e0 80             	and    eax,0xffffff80
c0007684:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007688:	e6 70                	out    0x70,al
c000768a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000768e:	e6 71                	out    0x71,al
c0007690:	c3                   	ret    
c0007691:	90                   	nop

c0007692 <Computer::handleNMI()>:
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 10             	sub    esp,0x10
c0007697:	e4 92                	in     al,0x92
c0007699:	89 c6                	mov    esi,eax
c000769b:	e4 61                	in     al,0x61
c000769d:	68 da d5 01 c0       	push   0xc001d5da
c00076a2:	88 c3                	mov    bl,al
c00076a4:	e8 53 35 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c00076a9:	83 c4 10             	add    esp,0x10
c00076ac:	83 e6 10             	and    esi,0x10
c00076af:	75 0d                	jne    c00076be <Computer::handleNMI()+0x2c>
c00076b1:	f6 c3 40             	test   bl,0x40
c00076b4:	75 1d                	jne    c00076d3 <Computer::handleNMI()+0x41>
c00076b6:	84 db                	test   bl,bl
c00076b8:	78 2d                	js     c00076e7 <Computer::handleNMI()+0x55>
c00076ba:	58                   	pop    eax
c00076bb:	5b                   	pop    ebx
c00076bc:	5e                   	pop    esi
c00076bd:	c3                   	ret    
c00076be:	83 ec 0c             	sub    esp,0xc
c00076c1:	68 eb d5 01 c0       	push   0xc001d5eb
c00076c6:	e8 80 90 00 00       	call   c001074b <Krnl::panic(char const*)>
c00076cb:	83 c4 10             	add    esp,0x10
c00076ce:	f6 c3 40             	test   bl,0x40
c00076d1:	74 e3                	je     c00076b6 <Computer::handleNMI()+0x24>
c00076d3:	83 ec 0c             	sub    esp,0xc
c00076d6:	68 f8 d5 01 c0       	push   0xc001d5f8
c00076db:	e8 6b 90 00 00       	call   c001074b <Krnl::panic(char const*)>
c00076e0:	83 c4 10             	add    esp,0x10
c00076e3:	84 db                	test   bl,bl
c00076e5:	79 d3                	jns    c00076ba <Computer::handleNMI()+0x28>
c00076e7:	c7 44 24 10 02 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d602
c00076ef:	5a                   	pop    edx
c00076f0:	5b                   	pop    ebx
c00076f1:	5e                   	pop    esi
c00076f2:	e9 54 90 00 00       	jmp    c001074b <Krnl::panic(char const*)>
c00076f7:	90                   	nop

c00076f8 <GDTEntry::setBase(unsigned int)>:
c00076f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007700:	89 c1                	mov    ecx,eax
c0007702:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007706:	c1 e9 10             	shr    ecx,0x10
c0007709:	c1 e8 18             	shr    eax,0x18
c000770c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000770f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007712:	c3                   	ret    
c0007713:	90                   	nop

c0007714 <GDTEntry::setLimit(unsigned int)>:
c0007714:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007718:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000771c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000771f:	66 89 01             	mov    WORD PTR [ecx],ax
c0007722:	83 e2 f0             	and    edx,0xfffffff0
c0007725:	c1 e8 10             	shr    eax,0x10
c0007728:	83 e0 0f             	and    eax,0xf
c000772b:	09 d0                	or     eax,edx
c000772d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007730:	c3                   	ret    
c0007731:	90                   	nop

c0007732 <GDT::GDT()>:
c0007732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007736:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000773c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007740:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007746:	90                   	nop
c0007747:	c3                   	ret    

c0007748 <GDT::addEntry(GDTEntry)>:
c0007748:	53                   	push   ebx
c0007749:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000774d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007751:	8b 02                	mov    eax,DWORD PTR [edx]
c0007753:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007757:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000775b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000775f:	8d 48 01             	lea    ecx,[eax+0x1]
c0007762:	c1 e0 03             	shl    eax,0x3
c0007765:	89 0a                	mov    DWORD PTR [edx],ecx
c0007767:	5b                   	pop    ebx
c0007768:	c3                   	ret    
c0007769:	90                   	nop

c000776a <GDT::getNumberOfEntries()>:
c000776a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000776e:	8b 00                	mov    eax,DWORD PTR [eax]
c0007770:	c3                   	ret    
c0007771:	90                   	nop

c0007772 <GDT::flush()>:
c0007772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007776:	8b 10                	mov    edx,DWORD PTR [eax]
c0007778:	83 c0 04             	add    eax,0x4
c000777b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007782:	a3 22 09 02 c0       	mov    ds:0xc0020922,eax
c0007787:	66 89 15 20 09 02 c0 	mov    WORD PTR ds:0xc0020920,dx
c000778e:	e9 ea 8b ff ff       	jmp    c000037d <loadGDT>
c0007793:	90                   	nop

c0007794 <GDT::setup()>:
c0007794:	57                   	push   edi
c0007795:	56                   	push   esi
c0007796:	53                   	push   ebx
c0007797:	83 ec 30             	sub    esp,0x30
c000779a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000779e:	6a 00                	push   0x0
c00077a0:	8d 74 24 14          	lea    esi,[esp+0x14]
c00077a4:	56                   	push   esi
c00077a5:	e8 4e ff ff ff       	call   c00076f8 <GDTEntry::setBase(unsigned int)>
c00077aa:	6a 00                	push   0x0
c00077ac:	56                   	push   esi
c00077ad:	e8 62 ff ff ff       	call   c0007714 <GDTEntry::setLimit(unsigned int)>
c00077b2:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00077ba:	6a 00                	push   0x0
c00077bc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00077c0:	56                   	push   esi
c00077c1:	e8 32 ff ff ff       	call   c00076f8 <GDTEntry::setBase(unsigned int)>
c00077c6:	68 ff ff ff 00       	push   0xffffff
c00077cb:	56                   	push   esi
c00077cc:	e8 43 ff ff ff       	call   c0007714 <GDTEntry::setLimit(unsigned int)>
c00077d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00077d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00077d9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00077dd:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00077e1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00077e6:	0d 00 9a c0 00       	or     eax,0xc09a00
c00077eb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00077ef:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00077f3:	89 f8                	mov    eax,edi
c00077f5:	89 fa                	mov    edx,edi
c00077f7:	80 e4 f7             	and    ah,0xf7
c00077fa:	80 ce 60             	or     dh,0x60
c00077fd:	89 c7                	mov    edi,eax
c00077ff:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007803:	80 cc 60             	or     ah,0x60
c0007806:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000780a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000780e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007812:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007816:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000781a:	83 c4 20             	add    esp,0x20
c000781d:	6a 00                	push   0x0
c000781f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007823:	50                   	push   eax
c0007824:	e8 cf fe ff ff       	call   c00076f8 <GDTEntry::setBase(unsigned int)>
c0007829:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000782d:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007831:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007836:	6a 00                	push   0x0
c0007838:	8d 44 24 34          	lea    eax,[esp+0x34]
c000783c:	50                   	push   eax
c000783d:	e8 b6 fe ff ff       	call   c00076f8 <GDTEntry::setBase(unsigned int)>
c0007842:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007847:	83 c4 0c             	add    esp,0xc
c000784a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000784e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007852:	53                   	push   ebx
c0007853:	e8 f0 fe ff ff       	call   c0007748 <GDT::addEntry(GDTEntry)>
c0007858:	83 c4 0c             	add    esp,0xc
c000785b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000785f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007863:	53                   	push   ebx
c0007864:	e8 df fe ff ff       	call   c0007748 <GDT::addEntry(GDTEntry)>
c0007869:	83 c4 0c             	add    esp,0xc
c000786c:	57                   	push   edi
c000786d:	56                   	push   esi
c000786e:	53                   	push   ebx
c000786f:	e8 d4 fe ff ff       	call   c0007748 <GDT::addEntry(GDTEntry)>
c0007874:	83 c4 0c             	add    esp,0xc
c0007877:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000787b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000787f:	53                   	push   ebx
c0007880:	e8 c3 fe ff ff       	call   c0007748 <GDT::addEntry(GDTEntry)>
c0007885:	83 c4 0c             	add    esp,0xc
c0007888:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000788c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007890:	53                   	push   ebx
c0007891:	e8 b2 fe ff ff       	call   c0007748 <GDT::addEntry(GDTEntry)>
c0007896:	83 c4 0c             	add    esp,0xc
c0007899:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000789d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078a1:	53                   	push   ebx
c00078a2:	e8 a1 fe ff ff       	call   c0007748 <GDT::addEntry(GDTEntry)>
c00078a7:	83 c4 0c             	add    esp,0xc
c00078aa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00078ae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00078b2:	53                   	push   ebx
c00078b3:	e8 90 fe ff ff       	call   c0007748 <GDT::addEntry(GDTEntry)>
c00078b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078bb:	e8 b2 fe ff ff       	call   c0007772 <GDT::flush()>
c00078c0:	83 c4 40             	add    esp,0x40
c00078c3:	5b                   	pop    ebx
c00078c4:	5e                   	pop    esi
c00078c5:	5f                   	pop    edi
c00078c6:	c3                   	ret    

c00078c7 <idleFunction(void*)>:
c00078c7:	83 ec 0c             	sub    esp,0xc
c00078ca:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c00078cf:	48                   	dec    eax
c00078d0:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c00078d5:	75 01                	jne    c00078d8 <idleFunction(void*)+0x11>
c00078d7:	fb                   	sti    
c00078d8:	f4                   	hlt    
c00078d9:	e8 e4 4a 01 00       	call   c001c3c2 <idleCommon()>
c00078de:	eb f8                	jmp    c00078d8 <idleFunction(void*)+0x11>

c00078e0 <IDTEntry::IDTEntry(bool)>:
c00078e0:	83 ec 04             	sub    esp,0x4
c00078e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078e7:	88 04 24             	mov    BYTE PTR [esp],al
c00078ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078ee:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00078f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00078fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007900:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007903:	83 e2 f0             	and    edx,0xfffffff0
c0007906:	83 ca 0e             	or     edx,0xe
c0007909:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000790c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007910:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007913:	83 e2 ef             	and    edx,0xffffffef
c0007916:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007919:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000791d:	74 05                	je     c0007924 <IDTEntry::IDTEntry(bool)+0x44>
c000791f:	b2 03                	mov    dl,0x3
c0007921:	eb 05                	jmp    c0007928 <IDTEntry::IDTEntry(bool)+0x48>
c0007923:	90                   	nop
c0007924:	b2 00                	mov    dl,0x0
c0007926:	66 90                	xchg   ax,ax
c0007928:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000792c:	83 e2 03             	and    edx,0x3
c000792f:	88 d1                	mov    cl,dl
c0007931:	c1 e1 05             	shl    ecx,0x5
c0007934:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007937:	83 e2 9f             	and    edx,0xffffff9f
c000793a:	09 ca                	or     edx,ecx
c000793c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000793f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007943:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007946:	83 ca 80             	or     edx,0xffffff80
c0007949:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000794c:	90                   	nop
c000794d:	83 c4 04             	add    esp,0x4
c0007950:	c3                   	ret    
c0007951:	90                   	nop

c0007952 <IDTEntry::setOffset(unsigned int)>:
c0007952:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007956:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795a:	66 89 02             	mov    WORD PTR [edx],ax
c000795d:	c1 e8 10             	shr    eax,0x10
c0007960:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007964:	c3                   	ret    
c0007965:	90                   	nop
c0007966:	66 90                	xchg   ax,ax

c0007968 <IDT::IDT()>:
c0007968:	90                   	nop
c0007969:	c3                   	ret    

c000796a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000796a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000796e:	83 c0 30             	add    eax,0x30
c0007971:	c3                   	ret    

c0007972 <IDT::addEntry(IDTEntry, int)>:
c0007972:	53                   	push   ebx
c0007973:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007977:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000797b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000797f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007983:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0007986:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000798a:	5b                   	pop    ebx
c000798b:	c3                   	ret    

c000798c <IDT::addEntry(int, void (*)(), bool)>:
c000798c:	53                   	push   ebx
c000798d:	83 ec 10             	sub    esp,0x10
c0007990:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007995:	50                   	push   eax
c0007996:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000799a:	53                   	push   ebx
c000799b:	e8 40 ff ff ff       	call   c00078e0 <IDTEntry::IDTEntry(bool)>
c00079a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079a4:	53                   	push   ebx
c00079a5:	e8 a8 ff ff ff       	call   c0007952 <IDTEntry::setOffset(unsigned int)>
c00079aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00079ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00079ba:	e8 b3 ff ff ff       	call   c0007972 <IDT::addEntry(IDTEntry, int)>
c00079bf:	83 c4 30             	add    esp,0x30
c00079c2:	5b                   	pop    ebx
c00079c3:	c3                   	ret    

c00079c4 <IDT::flush()>:
c00079c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079c8:	66 c7 05 28 09 02 c0 ff 07 	mov    WORD PTR ds:0xc0020928,0x7ff
c00079d1:	a3 2a 09 02 c0       	mov    ds:0xc002092a,eax
c00079d6:	0f 01 1d 28 09 02 c0 	lidtd  ds:0xc0020928
c00079dd:	c3                   	ret    

c00079de <IDT::setup()>:
c00079de:	57                   	push   edi
c00079df:	56                   	push   esi
c00079e0:	53                   	push   ebx
c00079e1:	83 ec 10             	sub    esp,0x10
c00079e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00079e8:	6a 00                	push   0x0
c00079ea:	68 d0 bb 01 c0       	push   0xc001bbd0
c00079ef:	6a 00                	push   0x0
c00079f1:	53                   	push   ebx
c00079f2:	e8 95 ff ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c00079f7:	6a 00                	push   0x0
c00079f9:	68 e0 bb 01 c0       	push   0xc001bbe0
c00079fe:	6a 01                	push   0x1
c0007a00:	53                   	push   ebx
c0007a01:	e8 86 ff ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007a06:	83 c4 20             	add    esp,0x20
c0007a09:	6a 00                	push   0x0
c0007a0b:	68 ea bb 01 c0       	push   0xc001bbea
c0007a10:	6a 02                	push   0x2
c0007a12:	53                   	push   ebx
c0007a13:	e8 74 ff ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007a18:	6a 00                	push   0x0
c0007a1a:	68 f4 bb 01 c0       	push   0xc001bbf4
c0007a1f:	6a 03                	push   0x3
c0007a21:	53                   	push   ebx
c0007a22:	e8 65 ff ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007a27:	83 c4 20             	add    esp,0x20
c0007a2a:	6a 00                	push   0x0
c0007a2c:	68 fe bb 01 c0       	push   0xc001bbfe
c0007a31:	6a 04                	push   0x4
c0007a33:	53                   	push   ebx
c0007a34:	e8 53 ff ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007a39:	6a 00                	push   0x0
c0007a3b:	68 08 bc 01 c0       	push   0xc001bc08
c0007a40:	6a 05                	push   0x5
c0007a42:	53                   	push   ebx
c0007a43:	e8 44 ff ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007a48:	83 c4 20             	add    esp,0x20
c0007a4b:	6a 00                	push   0x0
c0007a4d:	68 12 bc 01 c0       	push   0xc001bc12
c0007a52:	6a 06                	push   0x6
c0007a54:	53                   	push   ebx
c0007a55:	e8 32 ff ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007a5a:	6a 00                	push   0x0
c0007a5c:	68 1c bc 01 c0       	push   0xc001bc1c
c0007a61:	6a 07                	push   0x7
c0007a63:	53                   	push   ebx
c0007a64:	e8 23 ff ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007a69:	83 c4 20             	add    esp,0x20
c0007a6c:	6a 00                	push   0x0
c0007a6e:	68 26 bc 01 c0       	push   0xc001bc26
c0007a73:	6a 08                	push   0x8
c0007a75:	53                   	push   ebx
c0007a76:	e8 11 ff ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007a7b:	6a 00                	push   0x0
c0007a7d:	68 2e bc 01 c0       	push   0xc001bc2e
c0007a82:	6a 09                	push   0x9
c0007a84:	53                   	push   ebx
c0007a85:	e8 02 ff ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007a8a:	83 c4 20             	add    esp,0x20
c0007a8d:	6a 00                	push   0x0
c0007a8f:	68 38 bc 01 c0       	push   0xc001bc38
c0007a94:	6a 0a                	push   0xa
c0007a96:	53                   	push   ebx
c0007a97:	e8 f0 fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007a9c:	6a 00                	push   0x0
c0007a9e:	68 40 bc 01 c0       	push   0xc001bc40
c0007aa3:	6a 0b                	push   0xb
c0007aa5:	53                   	push   ebx
c0007aa6:	e8 e1 fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	6a 00                	push   0x0
c0007ab0:	68 48 bc 01 c0       	push   0xc001bc48
c0007ab5:	6a 0c                	push   0xc
c0007ab7:	53                   	push   ebx
c0007ab8:	e8 cf fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007abd:	6a 00                	push   0x0
c0007abf:	68 50 bc 01 c0       	push   0xc001bc50
c0007ac4:	6a 0d                	push   0xd
c0007ac6:	53                   	push   ebx
c0007ac7:	e8 c0 fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007acc:	83 c4 20             	add    esp,0x20
c0007acf:	6a 00                	push   0x0
c0007ad1:	68 58 bc 01 c0       	push   0xc001bc58
c0007ad6:	6a 0e                	push   0xe
c0007ad8:	53                   	push   ebx
c0007ad9:	e8 ae fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007ade:	6a 00                	push   0x0
c0007ae0:	68 60 bc 01 c0       	push   0xc001bc60
c0007ae5:	6a 0f                	push   0xf
c0007ae7:	53                   	push   ebx
c0007ae8:	e8 9f fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007aed:	83 c4 20             	add    esp,0x20
c0007af0:	6a 00                	push   0x0
c0007af2:	68 6a bc 01 c0       	push   0xc001bc6a
c0007af7:	6a 10                	push   0x10
c0007af9:	53                   	push   ebx
c0007afa:	e8 8d fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007aff:	6a 00                	push   0x0
c0007b01:	68 74 bc 01 c0       	push   0xc001bc74
c0007b06:	6a 11                	push   0x11
c0007b08:	53                   	push   ebx
c0007b09:	e8 7e fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007b0e:	83 c4 20             	add    esp,0x20
c0007b11:	6a 00                	push   0x0
c0007b13:	68 7e bc 01 c0       	push   0xc001bc7e
c0007b18:	6a 12                	push   0x12
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 6c fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007b20:	6a 01                	push   0x1
c0007b22:	68 18 bd 01 c0       	push   0xc001bd18
c0007b27:	6a 60                	push   0x60
c0007b29:	53                   	push   ebx
c0007b2a:	e8 5d fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007b2f:	83 c4 20             	add    esp,0x20
c0007b32:	6a 00                	push   0x0
c0007b34:	68 1f bd 01 c0       	push   0xc001bd1f
c0007b39:	6a 20                	push   0x20
c0007b3b:	53                   	push   ebx
c0007b3c:	e8 4b fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007b41:	6a 00                	push   0x0
c0007b43:	68 0a bd 01 c0       	push   0xc001bd0a
c0007b48:	6a 21                	push   0x21
c0007b4a:	53                   	push   ebx
c0007b4b:	e8 3c fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007b50:	83 c4 20             	add    esp,0x20
c0007b53:	6a 00                	push   0x0
c0007b55:	68 11 bd 01 c0       	push   0xc001bd11
c0007b5a:	6a 22                	push   0x22
c0007b5c:	53                   	push   ebx
c0007b5d:	e8 2a fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007b62:	6a 00                	push   0x0
c0007b64:	68 88 bc 01 c0       	push   0xc001bc88
c0007b69:	6a 23                	push   0x23
c0007b6b:	53                   	push   ebx
c0007b6c:	e8 1b fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007b71:	83 c4 20             	add    esp,0x20
c0007b74:	6a 00                	push   0x0
c0007b76:	68 92 bc 01 c0       	push   0xc001bc92
c0007b7b:	6a 24                	push   0x24
c0007b7d:	53                   	push   ebx
c0007b7e:	e8 09 fe ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007b83:	6a 00                	push   0x0
c0007b85:	68 9c bc 01 c0       	push   0xc001bc9c
c0007b8a:	6a 25                	push   0x25
c0007b8c:	53                   	push   ebx
c0007b8d:	e8 fa fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007b92:	83 c4 20             	add    esp,0x20
c0007b95:	6a 00                	push   0x0
c0007b97:	68 a6 bc 01 c0       	push   0xc001bca6
c0007b9c:	6a 26                	push   0x26
c0007b9e:	53                   	push   ebx
c0007b9f:	e8 e8 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007ba4:	6a 00                	push   0x0
c0007ba6:	68 b0 bc 01 c0       	push   0xc001bcb0
c0007bab:	6a 27                	push   0x27
c0007bad:	53                   	push   ebx
c0007bae:	e8 d9 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007bb3:	83 c4 20             	add    esp,0x20
c0007bb6:	6a 00                	push   0x0
c0007bb8:	68 ba bc 01 c0       	push   0xc001bcba
c0007bbd:	6a 28                	push   0x28
c0007bbf:	53                   	push   ebx
c0007bc0:	e8 c7 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007bc5:	6a 00                	push   0x0
c0007bc7:	68 c4 bc 01 c0       	push   0xc001bcc4
c0007bcc:	6a 29                	push   0x29
c0007bce:	53                   	push   ebx
c0007bcf:	e8 b8 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007bd4:	83 c4 20             	add    esp,0x20
c0007bd7:	6a 00                	push   0x0
c0007bd9:	68 ce bc 01 c0       	push   0xc001bcce
c0007bde:	6a 2a                	push   0x2a
c0007be0:	53                   	push   ebx
c0007be1:	e8 a6 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007be6:	6a 00                	push   0x0
c0007be8:	68 d8 bc 01 c0       	push   0xc001bcd8
c0007bed:	6a 2b                	push   0x2b
c0007bef:	53                   	push   ebx
c0007bf0:	e8 97 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007bf5:	83 c4 20             	add    esp,0x20
c0007bf8:	6a 00                	push   0x0
c0007bfa:	68 e2 bc 01 c0       	push   0xc001bce2
c0007bff:	6a 2c                	push   0x2c
c0007c01:	53                   	push   ebx
c0007c02:	e8 85 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007c07:	6a 00                	push   0x0
c0007c09:	68 ec bc 01 c0       	push   0xc001bcec
c0007c0e:	6a 2d                	push   0x2d
c0007c10:	53                   	push   ebx
c0007c11:	e8 76 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007c16:	83 c4 20             	add    esp,0x20
c0007c19:	6a 00                	push   0x0
c0007c1b:	68 f6 bc 01 c0       	push   0xc001bcf6
c0007c20:	6a 2e                	push   0x2e
c0007c22:	53                   	push   ebx
c0007c23:	e8 64 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007c28:	6a 00                	push   0x0
c0007c2a:	68 00 bd 01 c0       	push   0xc001bd00
c0007c2f:	6a 2f                	push   0x2f
c0007c31:	53                   	push   ebx
c0007c32:	e8 55 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007c37:	83 c4 20             	add    esp,0x20
c0007c3a:	6a 00                	push   0x0
c0007c3c:	68 56 bd 01 c0       	push   0xc001bd56
c0007c41:	6a 30                	push   0x30
c0007c43:	53                   	push   ebx
c0007c44:	e8 43 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007c49:	6a 00                	push   0x0
c0007c4b:	68 60 bd 01 c0       	push   0xc001bd60
c0007c50:	6a 31                	push   0x31
c0007c52:	53                   	push   ebx
c0007c53:	e8 34 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007c58:	83 c4 20             	add    esp,0x20
c0007c5b:	6a 00                	push   0x0
c0007c5d:	68 6a bd 01 c0       	push   0xc001bd6a
c0007c62:	6a 32                	push   0x32
c0007c64:	53                   	push   ebx
c0007c65:	e8 22 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007c6a:	6a 00                	push   0x0
c0007c6c:	68 74 bd 01 c0       	push   0xc001bd74
c0007c71:	6a 33                	push   0x33
c0007c73:	53                   	push   ebx
c0007c74:	e8 13 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007c79:	83 c4 20             	add    esp,0x20
c0007c7c:	6a 00                	push   0x0
c0007c7e:	68 7e bd 01 c0       	push   0xc001bd7e
c0007c83:	6a 34                	push   0x34
c0007c85:	53                   	push   ebx
c0007c86:	e8 01 fd ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007c8b:	6a 00                	push   0x0
c0007c8d:	68 88 bd 01 c0       	push   0xc001bd88
c0007c92:	6a 35                	push   0x35
c0007c94:	53                   	push   ebx
c0007c95:	e8 f2 fc ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007c9a:	83 c4 20             	add    esp,0x20
c0007c9d:	6a 00                	push   0x0
c0007c9f:	68 92 bd 01 c0       	push   0xc001bd92
c0007ca4:	6a 36                	push   0x36
c0007ca6:	53                   	push   ebx
c0007ca7:	e8 e0 fc ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007cac:	6a 00                	push   0x0
c0007cae:	68 9c bd 01 c0       	push   0xc001bd9c
c0007cb3:	6a 37                	push   0x37
c0007cb5:	53                   	push   ebx
c0007cb6:	e8 d1 fc ff ff       	call   c000798c <IDT::addEntry(int, void (*)(), bool)>
c0007cbb:	83 c4 1c             	add    esp,0x1c
c0007cbe:	6a 03                	push   0x3
c0007cc0:	6a 02                	push   0x2
c0007cc2:	ff 35 10 0a 02 c0    	push   DWORD PTR ds:0xc0020a10
c0007cc8:	e8 75 24 00 00       	call   c000a142 <VAS::allocatePages(int, int)>
c0007ccd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007cd4:	89 c6                	mov    esi,eax
c0007cd6:	e8 92 01 00 00       	call   c0007e6d <malloc>
c0007cdb:	81 c6 00 20 00 00    	add    esi,0x2000
c0007ce1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ce4:	89 c7                	mov    edi,eax
c0007ce6:	e8 01 16 00 00       	call   c00092ec <TSS::TSS()>
c0007ceb:	83 c4 0c             	add    esp,0xc
c0007cee:	68 26 bc 01 c0       	push   0xc001bc26
c0007cf3:	56                   	push   esi
c0007cf4:	57                   	push   edi
c0007cf5:	e8 36 16 00 00       	call   c0009330 <TSS::setup(unsigned long, unsigned long)>
c0007cfa:	89 c6                	mov    esi,eax
c0007cfc:	58                   	pop    eax
c0007cfd:	5a                   	pop    edx
c0007cfe:	6a 00                	push   0x0
c0007d00:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007d04:	50                   	push   eax
c0007d05:	e8 d6 fb ff ff       	call   c00078e0 <IDTEntry::IDTEntry(bool)>
c0007d0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d0e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007d13:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007d1a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007d20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d24:	80 ce 05             	or     dh,0x5
c0007d27:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007d2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d32:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007d35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d38:	e8 87 fc ff ff       	call   c00079c4 <IDT::flush()>
c0007d3d:	83 c4 20             	add    esp,0x20
c0007d40:	5b                   	pop    ebx
c0007d41:	5e                   	pop    esi
c0007d42:	5f                   	pop    edi
c0007d43:	c3                   	ret    

c0007d44 <sbrk>:
c0007d44:	55                   	push   ebp
c0007d45:	57                   	push   edi
c0007d46:	56                   	push   esi
c0007d47:	53                   	push   ebx
c0007d48:	83 ec 1c             	sub    esp,0x1c
c0007d4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007d4f:	85 c0                	test   eax,eax
c0007d51:	74 5f                	je     c0007db2 <sbrk+0x6e>
c0007d53:	78 64                	js     c0007db9 <sbrk+0x75>
c0007d55:	8b 15 90 f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f690
c0007d5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007d5f:	05 ff 0f 00 00       	add    eax,0xfff
c0007d64:	89 c5                	mov    ebp,eax
c0007d66:	78 69                	js     c0007dd1 <sbrk+0x8d>
c0007d68:	c1 fd 0c             	sar    ebp,0xc
c0007d6b:	bb 00 00 00 00       	mov    ebx,0x0
c0007d70:	8b 35 10 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020a10
c0007d76:	8b 3d 90 f6 01 c0    	mov    edi,DWORD PTR ds:0xc001f690
c0007d7c:	e8 b9 04 00 00       	call   c000823a <Phys::allocatePage()>
c0007d81:	68 01 04 00 00       	push   0x401
c0007d86:	57                   	push   edi
c0007d87:	50                   	push   eax
c0007d88:	56                   	push   esi
c0007d89:	e8 b0 22 00 00       	call   c000a03e <VAS::mapPage(unsigned long, unsigned long, int)>
c0007d8e:	81 05 90 f6 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f690,0x1000
c0007d98:	43                   	inc    ebx
c0007d99:	83 c4 10             	add    esp,0x10
c0007d9c:	39 dd                	cmp    ebp,ebx
c0007d9e:	75 d0                	jne    c0007d70 <sbrk+0x2c>
c0007da0:	0f 20 d8             	mov    eax,cr3
c0007da3:	0f 22 d8             	mov    cr3,eax
c0007da6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007daa:	83 c4 1c             	add    esp,0x1c
c0007dad:	5b                   	pop    ebx
c0007dae:	5e                   	pop    esi
c0007daf:	5f                   	pop    edi
c0007db0:	5d                   	pop    ebp
c0007db1:	c3                   	ret    
c0007db2:	a1 90 f6 01 c0       	mov    eax,ds:0xc001f690
c0007db7:	eb f1                	jmp    c0007daa <sbrk+0x66>
c0007db9:	83 ec 08             	sub    esp,0x8
c0007dbc:	50                   	push   eax
c0007dbd:	68 a4 d6 01 c0       	push   0xc001d6a4
c0007dc2:	e8 35 2e 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0007dc7:	83 c4 10             	add    esp,0x10
c0007dca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007dcf:	eb d9                	jmp    c0007daa <sbrk+0x66>
c0007dd1:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007dd7:	eb 8f                	jmp    c0007d68 <sbrk+0x24>

c0007dd9 <mmap>:
c0007dd9:	83 ec 18             	sub    esp,0x18
c0007ddc:	68 d4 d6 01 c0       	push   0xc001d6d4
c0007de1:	e8 65 89 00 00       	call   c001074b <Krnl::panic(char const*)>
c0007de6:	b8 00 00 00 00       	mov    eax,0x0
c0007deb:	83 c4 1c             	add    esp,0x1c
c0007dee:	c3                   	ret    

c0007def <munmap>:
c0007def:	83 ec 18             	sub    esp,0x18
c0007df2:	68 d9 d6 01 c0       	push   0xc001d6d9
c0007df7:	e8 4f 89 00 00       	call   c001074b <Krnl::panic(char const*)>
c0007dfc:	b8 00 00 00 00       	mov    eax,0x0
c0007e01:	83 c4 1c             	add    esp,0x1c
c0007e04:	c3                   	ret    

c0007e05 <liballoc_lock()>:
c0007e05:	fa                   	cli    
c0007e06:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0007e0c:	b8 00 00 00 00       	mov    eax,0x0
c0007e11:	c3                   	ret    

c0007e12 <liballoc_unlock()>:
c0007e12:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0007e17:	48                   	dec    eax
c0007e18:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0007e1d:	75 01                	jne    c0007e20 <liballoc_unlock()+0xe>
c0007e1f:	fb                   	sti    
c0007e20:	b8 00 00 00 00       	mov    eax,0x0
c0007e25:	c3                   	ret    

c0007e26 <liballoc_alloc(int)>:
c0007e26:	83 ec 10             	sub    esp,0x10
c0007e29:	6a 01                	push   0x1
c0007e2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e2f:	ff 35 10 0a 02 c0    	push   DWORD PTR ds:0xc0020a10
c0007e35:	e8 08 23 00 00       	call   c000a142 <VAS::allocatePages(int, int)>
c0007e3a:	83 c4 1c             	add    esp,0x1c
c0007e3d:	c3                   	ret    

c0007e3e <liballoc_free(void*, int)>:
c0007e3e:	83 ec 14             	sub    esp,0x14
c0007e41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e45:	ff 35 10 0a 02 c0    	push   DWORD PTR ds:0xc0020a10
c0007e4b:	e8 ae 1f 00 00       	call   c0009dfe <VAS::freeAllocatedPages(unsigned long)>
c0007e50:	b8 00 00 00 00       	mov    eax,0x0
c0007e55:	83 c4 1c             	add    esp,0x1c
c0007e58:	c3                   	ret    

c0007e59 <realloc>:
c0007e59:	83 ec 14             	sub    esp,0x14
c0007e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e64:	e8 e8 96 ff ff       	call   c0001551 <dlrealloc>
c0007e69:	83 c4 1c             	add    esp,0x1c
c0007e6c:	c3                   	ret    

c0007e6d <malloc>:
c0007e6d:	83 ec 18             	sub    esp,0x18
c0007e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e74:	e8 9b 91 ff ff       	call   c0001014 <dlmalloc>
c0007e79:	83 c4 1c             	add    esp,0x1c
c0007e7c:	c3                   	ret    

c0007e7d <free>:
c0007e7d:	83 ec 18             	sub    esp,0x18
c0007e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e84:	e8 30 8e ff ff       	call   c0000cb9 <dlfree>
c0007e89:	83 c4 1c             	add    esp,0x1c
c0007e8c:	c3                   	ret    

c0007e8d <rfree>:
c0007e8d:	83 ec 18             	sub    esp,0x18
c0007e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e94:	e8 20 8e ff ff       	call   c0000cb9 <dlfree>
c0007e99:	83 c4 1c             	add    esp,0x1c
c0007e9c:	c3                   	ret    

c0007e9d <calloc>:
c0007e9d:	56                   	push   esi
c0007e9e:	53                   	push   ebx
c0007e9f:	83 ec 10             	sub    esp,0x10
c0007ea2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ea6:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007eab:	53                   	push   ebx
c0007eac:	e8 bc ff ff ff       	call   c0007e6d <malloc>
c0007eb1:	89 c6                	mov    esi,eax
c0007eb3:	83 c4 0c             	add    esp,0xc
c0007eb6:	53                   	push   ebx
c0007eb7:	6a 00                	push   0x0
c0007eb9:	50                   	push   eax
c0007eba:	e8 31 86 ff ff       	call   c00004f0 <memset>
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	83 c4 14             	add    esp,0x14
c0007ec4:	5b                   	pop    ebx
c0007ec5:	5e                   	pop    esi
c0007ec6:	c3                   	ret    

c0007ec7 <Krnl::setBootMessage(char const*)>:
c0007ec7:	57                   	push   edi
c0007ec8:	56                   	push   esi
c0007ec9:	53                   	push   ebx
c0007eca:	81 ec a4 00 00 00    	sub    esp,0xa4
c0007ed0:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0007ed7:	68 9e 00 00 00       	push   0x9e
c0007edc:	6a 00                	push   0x0
c0007ede:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0007ee2:	56                   	push   esi
c0007ee3:	e8 08 86 ff ff       	call   c00004f0 <memset>
c0007ee8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007eeb:	e8 70 86 ff ff       	call   c0000560 <strlen>
c0007ef0:	ba 50 00 00 00       	mov    edx,0x50
c0007ef5:	83 c4 10             	add    esp,0x10
c0007ef8:	29 c2                	sub    edx,eax
c0007efa:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0007efe:	d1 ea                	shr    edx,1
c0007f00:	84 c0                	test   al,al
c0007f02:	74 19                	je     c0007f1d <Krnl::setBootMessage(char const*)+0x56>
c0007f04:	01 d2                	add    edx,edx
c0007f06:	43                   	inc    ebx
c0007f07:	01 f2                	add    edx,esi
c0007f09:	80 cc 0f             	or     ah,0xf
c0007f0c:	83 c2 02             	add    edx,0x2
c0007f0f:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0007f13:	43                   	inc    ebx
c0007f14:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0007f19:	84 c0                	test   al,al
c0007f1b:	75 ec                	jne    c0007f09 <Krnl::setBootMessage(char const*)+0x42>
c0007f1d:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0007f22:	b9 9e 00 00 00       	mov    ecx,0x9e
c0007f27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f29:	81 c4 a0 00 00 00    	add    esp,0xa0
c0007f2f:	5b                   	pop    ebx
c0007f30:	5e                   	pop    esi
c0007f31:	5f                   	pop    edi
c0007f32:	c3                   	ret    

c0007f33 <kernel_main>:
c0007f33:	55                   	push   ebp
c0007f34:	57                   	push   edi
c0007f35:	bf f9 03 00 00       	mov    edi,0x3f9
c0007f3a:	56                   	push   esi
c0007f3b:	89 fa                	mov    edx,edi
c0007f3d:	53                   	push   ebx
c0007f3e:	31 f6                	xor    esi,esi
c0007f40:	83 ec 38             	sub    esp,0x38
c0007f43:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007f48:	a3 30 09 02 c0       	mov    ds:0xc0020930,eax
c0007f4d:	89 f0                	mov    eax,esi
c0007f4f:	ee                   	out    dx,al
c0007f50:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007f55:	b0 80                	mov    al,0x80
c0007f57:	89 da                	mov    edx,ebx
c0007f59:	ee                   	out    dx,al
c0007f5a:	b1 03                	mov    cl,0x3
c0007f5c:	ba f8 03 00 00       	mov    edx,0x3f8
c0007f61:	88 c8                	mov    al,cl
c0007f63:	ee                   	out    dx,al
c0007f64:	89 f0                	mov    eax,esi
c0007f66:	89 fa                	mov    edx,edi
c0007f68:	ee                   	out    dx,al
c0007f69:	88 c8                	mov    al,cl
c0007f6b:	89 da                	mov    edx,ebx
c0007f6d:	ee                   	out    dx,al
c0007f6e:	b0 c7                	mov    al,0xc7
c0007f70:	ba fa 03 00 00       	mov    edx,0x3fa
c0007f75:	ee                   	out    dx,al
c0007f76:	b0 0b                	mov    al,0xb
c0007f78:	ba fc 03 00 00       	mov    edx,0x3fc
c0007f7d:	ee                   	out    dx,al
c0007f7e:	68 e0 d6 01 c0       	push   0xc001d6e0
c0007f83:	e8 74 2c 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0007f88:	0f be 05 a0 f6 01 c0 	movsx  eax,BYTE PTR ds:0xc001f6a0
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	84 c0                	test   al,al
c0007f94:	74 5c                	je     c0007ff2 <kernel_main+0xbf>
c0007f96:	31 db                	xor    ebx,ebx
c0007f98:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f9d:	bf 05 00 00 00       	mov    edi,0x5
c0007fa2:	31 f6                	xor    esi,esi
c0007fa4:	eb 14                	jmp    c0007fba <kernel_main+0x87>
c0007fa6:	47                   	inc    edi
c0007fa7:	bd 0a 00 00 00       	mov    ebp,0xa
c0007fac:	31 f6                	xor    esi,esi
c0007fae:	43                   	inc    ebx
c0007faf:	0f be 83 a0 f6 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0960]
c0007fb6:	84 c0                	test   al,al
c0007fb8:	74 38                	je     c0007ff2 <kernel_main+0xbf>
c0007fba:	80 be d6 f6 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe092a],0xdb
c0007fc1:	0f 84 97 00 00 00    	je     c000805e <kernel_main+0x12b>
c0007fc7:	3c 0d                	cmp    al,0xd
c0007fc9:	74 e3                	je     c0007fae <kernel_main+0x7b>
c0007fcb:	3c 0a                	cmp    al,0xa
c0007fcd:	74 d7                	je     c0007fa6 <kernel_main+0x73>
c0007fcf:	83 ec 0c             	sub    esp,0xc
c0007fd2:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0007fd6:	57                   	push   edi
c0007fd7:	43                   	inc    ebx
c0007fd8:	52                   	push   edx
c0007fd9:	46                   	inc    esi
c0007fda:	6a 00                	push   0x0
c0007fdc:	6a 0e                	push   0xe
c0007fde:	50                   	push   eax
c0007fdf:	e8 c4 e4 00 00       	call   c00164a8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007fe4:	83 c4 20             	add    esp,0x20
c0007fe7:	0f be 83 a0 f6 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0960]
c0007fee:	84 c0                	test   al,al
c0007ff0:	75 c8                	jne    c0007fba <kernel_main+0x87>
c0007ff2:	83 ec 0c             	sub    esp,0xc
c0007ff5:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007ffa:	05 ff 0f 00 00       	add    eax,0xfff
c0007fff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008004:	50                   	push   eax
c0008005:	e8 82 03 00 00       	call   c000838c <Phys::physicalMemorySetup(unsigned int)>
c000800a:	e8 59 1b 00 00       	call   c0009b68 <Virt::virtualMemorySetup()>
c000800f:	58                   	pop    eax
c0008010:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0008014:	53                   	push   ebx
c0008015:	e8 0a 1c 00 00       	call   c0009c24 <VAS::VAS()>
c000801a:	89 1d 10 0a 02 c0    	mov    DWORD PTR ds:0xc0020a10,ebx
c0008020:	e8 fb 7f ff ff       	call   c0000020 <callGlobalConstructors>
c0008025:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c000802c:	e8 3c fe ff ff       	call   c0007e6d <malloc>
c0008031:	89 04 24             	mov    DWORD PTR [esp],eax
c0008034:	89 c6                	mov    esi,eax
c0008036:	e8 af f1 ff ff       	call   c00071ea <Computer::Computer()>
c000803b:	6a 00                	push   0x0
c000803d:	89 35 18 09 02 c0    	mov    DWORD PTR ds:0xc0020918,esi
c0008043:	6a 00                	push   0x0
c0008045:	6a 00                	push   0x0
c0008047:	56                   	push   esi
c0008048:	e8 43 f5 ff ff       	call   c0007590 <Computer::open(int, int, void*)>
c000804d:	83 c4 14             	add    esp,0x14
c0008050:	53                   	push   ebx
c0008051:	e8 84 1e 00 00       	call   c0009eda <VAS::~VAS()>
c0008056:	83 c4 3c             	add    esp,0x3c
c0008059:	5b                   	pop    ebx
c000805a:	5e                   	pop    esi
c000805b:	5f                   	pop    edi
c000805c:	5d                   	pop    ebp
c000805d:	c3                   	ret    
c000805e:	31 d2                	xor    edx,edx
c0008060:	8a 96 d5 f6 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe092b]
c0008066:	83 e2 fe             	and    edx,0xfffffffe
c0008069:	81 fa ba 00 00 00    	cmp    edx,0xba
c000806f:	0f 85 52 ff ff ff    	jne    c0007fc7 <kernel_main+0x94>
c0008075:	45                   	inc    ebp
c0008076:	e9 4c ff ff ff       	jmp    c0007fc7 <kernel_main+0x94>

c000807b <Phys::allocateDMA(unsigned long)>:
c000807b:	55                   	push   ebp
c000807c:	31 ed                	xor    ebp,ebp
c000807e:	57                   	push   edi
c000807f:	56                   	push   esi
c0008080:	53                   	push   ebx
c0008081:	31 db                	xor    ebx,ebx
c0008083:	83 ec 1c             	sub    esp,0x1c
c0008086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000808a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008092:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0008098:	31 c0                	xor    eax,eax
c000809a:	c1 ef 0c             	shr    edi,0xc
c000809d:	eb 19                	jmp    c00080b8 <Phys::allocateDMA(unsigned long)+0x3d>
c000809f:	85 c0                	test   eax,eax
c00080a1:	75 06                	jne    c00080a9 <Phys::allocateDMA(unsigned long)+0x2e>
c00080a3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080a7:	89 dd                	mov    ebp,ebx
c00080a9:	8d 70 01             	lea    esi,[eax+0x1]
c00080ac:	39 f7                	cmp    edi,esi
c00080ae:	74 33                	je     c00080e3 <Phys::allocateDMA(unsigned long)+0x68>
c00080b0:	89 f0                	mov    eax,esi
c00080b2:	43                   	inc    ebx
c00080b3:	83 fb 0f             	cmp    ebx,0xf
c00080b6:	7f 11                	jg     c00080c9 <Phys::allocateDMA(unsigned long)+0x4e>
c00080b8:	80 bb 4c 09 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf6b4],0x0
c00080bf:	74 de                	je     c000809f <Phys::allocateDMA(unsigned long)+0x24>
c00080c1:	31 c0                	xor    eax,eax
c00080c3:	43                   	inc    ebx
c00080c4:	83 fb 0f             	cmp    ebx,0xf
c00080c7:	7e ef                	jle    c00080b8 <Phys::allocateDMA(unsigned long)+0x3d>
c00080c9:	83 ec 0c             	sub    esp,0xc
c00080cc:	68 f8 d6 01 c0       	push   0xc001d6f8
c00080d1:	e8 75 86 00 00       	call   c001074b <Krnl::panic(char const*)>
c00080d6:	83 c4 10             	add    esp,0x10
c00080d9:	31 c0                	xor    eax,eax
c00080db:	83 c4 1c             	add    esp,0x1c
c00080de:	5b                   	pop    ebx
c00080df:	5e                   	pop    esi
c00080e0:	5f                   	pop    edi
c00080e1:	5d                   	pop    ebp
c00080e2:	c3                   	ret    
c00080e3:	89 e9                	mov    ecx,ebp
c00080e5:	c1 f9 04             	sar    ecx,0x4
c00080e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00080ec:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00080f0:	89 ca                	mov    edx,ecx
c00080f2:	4a                   	dec    edx
c00080f3:	79 03                	jns    c00080f8 <Phys::allocateDMA(unsigned long)+0x7d>
c00080f5:	8d 51 0e             	lea    edx,[ecx+0xe]
c00080f8:	c1 fa 04             	sar    edx,0x4
c00080fb:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00080ff:	74 08                	je     c0008109 <Phys::allocateDMA(unsigned long)+0x8e>
c0008101:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008105:	31 c0                	xor    eax,eax
c0008107:	eb ba                	jmp    c00080c3 <Phys::allocateDMA(unsigned long)+0x48>
c0008109:	85 f6                	test   esi,esi
c000810b:	74 15                	je     c0008122 <Phys::allocateDMA(unsigned long)+0xa7>
c000810d:	8d 95 4c 09 02 c0    	lea    edx,[ebp-0x3ffdf6b4]
c0008113:	8d 84 05 4d 09 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf6b3]
c000811a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000811d:	42                   	inc    edx
c000811e:	39 d0                	cmp    eax,edx
c0008120:	75 f8                	jne    c000811a <Phys::allocateDMA(unsigned long)+0x9f>
c0008122:	01 3d 44 09 02 c0    	add    DWORD PTR ds:0xc0020944,edi
c0008128:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000812c:	85 c0                	test   eax,eax
c000812e:	74 17                	je     c0008147 <Phys::allocateDMA(unsigned long)+0xcc>
c0008130:	83 ec 0c             	sub    esp,0xc
c0008133:	68 f8 d6 01 c0       	push   0xc001d6f8
c0008138:	e8 0e 86 00 00       	call   c001074b <Krnl::panic(char const*)>
c000813d:	83 c4 10             	add    esp,0x10
c0008140:	89 f0                	mov    eax,esi
c0008142:	e9 6b ff ff ff       	jmp    c00080b2 <Phys::allocateDMA(unsigned long)+0x37>
c0008147:	c1 e5 0c             	shl    ebp,0xc
c000814a:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0008150:	eb 89                	jmp    c00080db <Phys::allocateDMA(unsigned long)+0x60>

c0008152 <Phys::freeDMA(unsigned long, unsigned long)>:
c0008152:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008156:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000815c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008160:	c1 ea 0c             	shr    edx,0xc
c0008163:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0008168:	29 15 44 09 02 c0    	sub    DWORD PTR ds:0xc0020944,edx
c000816e:	c1 e8 0c             	shr    eax,0xc
c0008171:	85 d2                	test   edx,edx
c0008173:	74 0f                	je     c0008184 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0008175:	05 4c 09 02 c0       	add    eax,0xc002094c
c000817a:	01 c2                	add    edx,eax
c000817c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000817f:	40                   	inc    eax
c0008180:	39 d0                	cmp    eax,edx
c0008182:	75 f8                	jne    c000817c <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0008184:	c3                   	ret    

c0008185 <Phys::setPageState(unsigned long, bool)>:
c0008185:	56                   	push   esi
c0008186:	ba 01 00 00 00       	mov    edx,0x1
c000818b:	53                   	push   ebx
c000818c:	8b 35 e4 f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f7e4
c0008192:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000819a:	89 c8                	mov    eax,ecx
c000819c:	83 e1 07             	and    ecx,0x7
c000819f:	c1 e8 03             	shr    eax,0x3
c00081a2:	d3 e3                	shl    ebx,cl
c00081a4:	01 c6                	add    esi,eax
c00081a6:	d3 e2                	shl    edx,cl
c00081a8:	f7 d2                	not    edx
c00081aa:	20 16                	and    BYTE PTR [esi],dl
c00081ac:	03 05 e4 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7e4
c00081b2:	08 18                	or     BYTE PTR [eax],bl
c00081b4:	5b                   	pop    ebx
c00081b5:	5e                   	pop    esi
c00081b6:	c3                   	ret    

c00081b7 <Phys::getPageState(unsigned long)>:
c00081b7:	53                   	push   ebx
c00081b8:	8b 15 e4 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f7e4
c00081be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00081c2:	31 db                	xor    ebx,ebx
c00081c4:	89 c8                	mov    eax,ecx
c00081c6:	83 e1 07             	and    ecx,0x7
c00081c9:	c1 e8 03             	shr    eax,0x3
c00081cc:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c00081cf:	89 d8                	mov    eax,ebx
c00081d1:	5b                   	pop    ebx
c00081d2:	d3 f8                	sar    eax,cl
c00081d4:	83 e0 01             	and    eax,0x1
c00081d7:	c3                   	ret    

c00081d8 <Phys::freePage(unsigned long)>:
c00081d8:	53                   	push   ebx
c00081d9:	83 ec 08             	sub    esp,0x8
c00081dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081e0:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00081e6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00081ec:	76 3a                	jbe    c0008228 <Phys::freePage(unsigned long)+0x50>
c00081ee:	c1 e8 0c             	shr    eax,0xc
c00081f1:	50                   	push   eax
c00081f2:	89 c3                	mov    ebx,eax
c00081f4:	e8 be ff ff ff       	call   c00081b7 <Phys::getPageState(unsigned long)>
c00081f9:	5a                   	pop    edx
c00081fa:	84 c0                	test   al,al
c00081fc:	74 19                	je     c0008217 <Phys::freePage(unsigned long)+0x3f>
c00081fe:	83 ec 08             	sub    esp,0x8
c0008201:	ff 0d 44 09 02 c0    	dec    DWORD PTR ds:0xc0020944
c0008207:	6a 00                	push   0x0
c0008209:	53                   	push   ebx
c000820a:	e8 76 ff ff ff       	call   c0008185 <Phys::setPageState(unsigned long, bool)>
c000820f:	83 c4 10             	add    esp,0x10
c0008212:	83 c4 08             	add    esp,0x8
c0008215:	5b                   	pop    ebx
c0008216:	c3                   	ret    
c0008217:	c7 44 24 10 9d d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d79d
c000821f:	83 c4 08             	add    esp,0x8
c0008222:	5b                   	pop    ebx
c0008223:	e9 23 85 00 00       	jmp    c001074b <Krnl::panic(char const*)>
c0008228:	68 00 10 00 00       	push   0x1000
c000822d:	50                   	push   eax
c000822e:	e8 1f ff ff ff       	call   c0008152 <Phys::freeDMA(unsigned long, unsigned long)>
c0008233:	59                   	pop    ecx
c0008234:	5b                   	pop    ebx
c0008235:	83 c4 08             	add    esp,0x8
c0008238:	5b                   	pop    ebx
c0008239:	c3                   	ret    

c000823a <Phys::allocatePage()>:
c000823a:	56                   	push   esi
c000823b:	53                   	push   ebx
c000823c:	83 ec 14             	sub    esp,0x14
c000823f:	8b 35 38 09 02 c0    	mov    esi,DWORD PTR ds:0xc0020938
c0008245:	89 f3                	mov    ebx,esi
c0008247:	eb 0a                	jmp    c0008253 <Phys::allocatePage()+0x19>
c0008249:	89 1d 38 09 02 c0    	mov    DWORD PTR ds:0xc0020938,ebx
c000824f:	39 de                	cmp    esi,ebx
c0008251:	74 24                	je     c0008277 <Phys::allocatePage()+0x3d>
c0008253:	53                   	push   ebx
c0008254:	e8 5e ff ff ff       	call   c00081b7 <Phys::getPageState(unsigned long)>
c0008259:	5a                   	pop    edx
c000825a:	84 c0                	test   al,al
c000825c:	74 5f                	je     c00082bd <Phys::allocatePage()+0x83>
c000825e:	43                   	inc    ebx
c000825f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008265:	75 e2                	jne    c0008249 <Phys::allocatePage()+0xf>
c0008267:	31 db                	xor    ebx,ebx
c0008269:	c7 05 38 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020938,0x0
c0008273:	39 de                	cmp    esi,ebx
c0008275:	75 dc                	jne    c0008253 <Phys::allocatePage()+0x19>
c0008277:	83 ec 0c             	sub    esp,0xc
c000827a:	80 35 5c 09 02 c0 01 	xor    BYTE PTR ds:0xc002095c,0x1
c0008281:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008286:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008289:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000828f:	50                   	push   eax
c0008290:	e8 87 26 00 00       	call   c000a91c <VAS::scanForEviction()>
c0008295:	83 c4 10             	add    esp,0x10
c0008298:	85 c0                	test   eax,eax
c000829a:	75 3f                	jne    c00082db <Phys::allocatePage()+0xa1>
c000829c:	83 ec 0c             	sub    esp,0xc
c000829f:	68 20 d7 01 c0       	push   0xc001d720
c00082a4:	e8 a2 84 00 00       	call   c001074b <Krnl::panic(char const*)>
c00082a9:	83 c4 10             	add    esp,0x10
c00082ac:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c00082b2:	53                   	push   ebx
c00082b3:	e8 ff fe ff ff       	call   c00081b7 <Phys::getPageState(unsigned long)>
c00082b8:	5a                   	pop    edx
c00082b9:	84 c0                	test   al,al
c00082bb:	75 a1                	jne    c000825e <Phys::allocatePage()+0x24>
c00082bd:	6a 01                	push   0x1
c00082bf:	53                   	push   ebx
c00082c0:	e8 c0 fe ff ff       	call   c0008185 <Phys::setPageState(unsigned long, bool)>
c00082c5:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00082ca:	5a                   	pop    edx
c00082cb:	ff 05 44 09 02 c0    	inc    DWORD PTR ds:0xc0020944
c00082d1:	c1 e0 0c             	shl    eax,0xc
c00082d4:	59                   	pop    ecx
c00082d5:	83 c4 14             	add    esp,0x14
c00082d8:	5b                   	pop    ebx
c00082d9:	5e                   	pop    esi
c00082da:	c3                   	ret    
c00082db:	83 ec 08             	sub    esp,0x8
c00082de:	89 c2                	mov    edx,eax
c00082e0:	6a 01                	push   0x1
c00082e2:	c1 ea 0c             	shr    edx,0xc
c00082e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00082e9:	52                   	push   edx
c00082ea:	e8 96 fe ff ff       	call   c0008185 <Phys::setPageState(unsigned long, bool)>
c00082ef:	83 c4 10             	add    esp,0x10
c00082f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082f6:	eb dd                	jmp    c00082d5 <Phys::allocatePage()+0x9b>

c00082f8 <Phys::allocateContiguousPages(int)>:
c00082f8:	57                   	push   edi
c00082f9:	56                   	push   esi
c00082fa:	53                   	push   ebx
c00082fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082ff:	fa                   	cli    
c0008300:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0008306:	31 db                	xor    ebx,ebx
c0008308:	85 db                	test   ebx,ebx
c000830a:	75 11                	jne    c000831d <Phys::allocateContiguousPages(int)+0x25>
c000830c:	e8 29 ff ff ff       	call   c000823a <Phys::allocatePage()>
c0008311:	83 fe 01             	cmp    esi,0x1
c0008314:	89 c7                	mov    edi,eax
c0008316:	74 21                	je     c0008339 <Phys::allocateContiguousPages(int)+0x41>
c0008318:	bb 01 00 00 00       	mov    ebx,0x1
c000831d:	e8 18 ff ff ff       	call   c000823a <Phys::allocatePage()>
c0008322:	89 da                	mov    edx,ebx
c0008324:	c1 e2 0c             	shl    edx,0xc
c0008327:	01 fa                	add    edx,edi
c0008329:	39 c2                	cmp    edx,eax
c000832b:	74 20                	je     c000834d <Phys::allocateContiguousPages(int)+0x55>
c000832d:	bb 01 00 00 00       	mov    ebx,0x1
c0008332:	89 c7                	mov    edi,eax
c0008334:	83 fe 01             	cmp    esi,0x1
c0008337:	75 e4                	jne    c000831d <Phys::allocateContiguousPages(int)+0x25>
c0008339:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000833e:	48                   	dec    eax
c000833f:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0008344:	75 01                	jne    c0008347 <Phys::allocateContiguousPages(int)+0x4f>
c0008346:	fb                   	sti    
c0008347:	89 f8                	mov    eax,edi
c0008349:	5b                   	pop    ebx
c000834a:	5e                   	pop    esi
c000834b:	5f                   	pop    edi
c000834c:	c3                   	ret    
c000834d:	43                   	inc    ebx
c000834e:	39 f3                	cmp    ebx,esi
c0008350:	75 b6                	jne    c0008308 <Phys::allocateContiguousPages(int)+0x10>
c0008352:	eb e5                	jmp    c0008339 <Phys::allocateContiguousPages(int)+0x41>

c0008354 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0008354:	56                   	push   esi
c0008355:	53                   	push   ebx
c0008356:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000835a:	39 1d 3c 09 02 c0    	cmp    DWORD PTR ds:0xc002093c,ebx
c0008360:	73 06                	jae    c0008368 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0008362:	89 1d 3c 09 02 c0    	mov    DWORD PTR ds:0xc002093c,ebx
c0008368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000836c:	c1 eb 0c             	shr    ebx,0xc
c000836f:	c1 e8 0c             	shr    eax,0xc
c0008372:	39 d8                	cmp    eax,ebx
c0008374:	73 13                	jae    c0008389 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0008376:	6a 00                	push   0x0
c0008378:	8d 70 01             	lea    esi,[eax+0x1]
c000837b:	50                   	push   eax
c000837c:	e8 04 fe ff ff       	call   c0008185 <Phys::setPageState(unsigned long, bool)>
c0008381:	5a                   	pop    edx
c0008382:	89 f0                	mov    eax,esi
c0008384:	59                   	pop    ecx
c0008385:	39 f3                	cmp    ebx,esi
c0008387:	75 ed                	jne    c0008376 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0008389:	5b                   	pop    ebx
c000838a:	5e                   	pop    esi
c000838b:	c3                   	ret    

c000838c <Phys::physicalMemorySetup(unsigned int)>:
c000838c:	55                   	push   ebp
c000838d:	57                   	push   edi
c000838e:	56                   	push   esi
c000838f:	53                   	push   ebx
c0008390:	31 db                	xor    ebx,ebx
c0008392:	83 ec 40             	sub    esp,0x40
c0008395:	6a 10                	push   0x10
c0008397:	6a 00                	push   0x0
c0008399:	68 4c 09 02 c0       	push   0xc002094c
c000839e:	e8 4d 81 ff ff       	call   c00004f0 <memset>
c00083a3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00083a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00083ac:	05 00 10 00 00       	add    eax,0x1000
c00083b1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b5:	5a                   	pop    edx
c00083b6:	59                   	pop    ecx
c00083b7:	50                   	push   eax
c00083b8:	68 b3 d7 01 c0       	push   0xc001d7b3
c00083bd:	e8 3a 28 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c00083c2:	83 c4 10             	add    esp,0x10
c00083c5:	83 ec 08             	sub    esp,0x8
c00083c8:	6a 01                	push   0x1
c00083ca:	53                   	push   ebx
c00083cb:	43                   	inc    ebx
c00083cc:	e8 b4 fd ff ff       	call   c0008185 <Phys::setPageState(unsigned long, bool)>
c00083d1:	83 c4 10             	add    esp,0x10
c00083d4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00083da:	75 e9                	jne    c00083c5 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00083dc:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00083e2:	66 85 c0             	test   ax,ax
c00083e5:	0f 84 97 01 00 00    	je     c0008582 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00083eb:	89 c7                	mov    edi,eax
c00083ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00083f5:	81 e7 ff ff 00 00    	and    edi,0xffff
c00083fb:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0008400:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0008404:	eb 15                	jmp    c000841b <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0008406:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000840a:	83 c3 18             	add    ebx,0x18
c000840d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008411:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008415:	0f 84 77 01 00 00    	je     c0008592 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000841b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000841e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008421:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000842c:	8b 33                	mov    esi,DWORD PTR [ebx]
c000842e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008431:	01 f0                	add    eax,esi
c0008433:	55                   	push   ebp
c0008434:	11 fa                	adc    edx,edi
c0008436:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000843a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000843e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008442:	50                   	push   eax
c0008443:	56                   	push   esi
c0008444:	68 50 d7 01 c0       	push   0xc001d750
c0008449:	e8 ae 27 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c000844e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	09 f8                	or     eax,edi
c0008457:	0f 85 35 01 00 00    	jne    c0008592 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000845d:	4d                   	dec    ebp
c000845e:	75 a6                	jne    c0008406 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008460:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008464:	ba 00 00 08 00       	mov    edx,0x80000
c0008469:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000846d:	39 f2                	cmp    edx,esi
c000846f:	89 c1                	mov    ecx,eax
c0008471:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0008479:	19 f9                	sbb    ecx,edi
c000847b:	0f 82 a7 00 00 00    	jb     c0008528 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0008481:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008485:	89 c1                	mov    ecx,eax
c0008487:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000848b:	0f 83 97 00 00 00    	jae    c0008528 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0008491:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008496:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000849a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000849e:	39 fa                	cmp    edx,edi
c00084a0:	19 e8                	sbb    eax,ebp
c00084a2:	0f 82 9a 01 00 00    	jb     c0008642 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c00084a8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00084ac:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00084b0:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00084b6:	ba ff 1f 00 00       	mov    edx,0x1fff
c00084bb:	83 d5 ff             	adc    ebp,0xffffffff
c00084be:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00084c2:	31 c0                	xor    eax,eax
c00084c4:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00084c8:	39 fa                	cmp    edx,edi
c00084ca:	89 c1                	mov    ecx,eax
c00084cc:	19 e9                	sbb    ecx,ebp
c00084ce:	0f 83 32 ff ff ff    	jae    c0008406 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00084d4:	be 00 00 08 00       	mov    esi,0x80000
c00084d9:	51                   	push   ecx
c00084da:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00084de:	57                   	push   edi
c00084df:	56                   	push   esi
c00084e0:	68 74 d7 01 c0       	push   0xc001d774
c00084e5:	e8 12 27 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c00084ea:	5d                   	pop    ebp
c00084eb:	58                   	pop    eax
c00084ec:	57                   	push   edi
c00084ed:	56                   	push   esi
c00084ee:	e8 61 fe ff ff       	call   c0008354 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00084f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00084f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00084fb:	83 c4 0c             	add    esp,0xc
c00084fe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008502:	03 05 48 09 02 c0    	add    eax,DWORD PTR ds:0xc0020948
c0008508:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000850f:	a3 48 09 02 c0       	mov    ds:0xc0020948,eax
c0008514:	52                   	push   edx
c0008515:	50                   	push   eax
c0008516:	68 d9 d7 01 c0       	push   0xc001d7d9
c000851b:	e8 dc 26 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0008520:	83 c4 10             	add    esp,0x10
c0008523:	e9 de fe ff ff       	jmp    c0008406 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008528:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000852c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008530:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008534:	39 ea                	cmp    edx,ebp
c0008536:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000853a:	0f 82 c6 fe ff ff    	jb     c0008406 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008540:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008545:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0008549:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000854d:	0f 83 b3 fe ff ff    	jae    c0008406 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008553:	39 ee                	cmp    esi,ebp
c0008555:	89 f8                	mov    eax,edi
c0008557:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000855b:	0f 83 78 ff ff ff    	jae    c00084d9 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0008561:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008565:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008569:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000856d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008571:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008575:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008579:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000857d:	e9 57 ff ff ff       	jmp    c00084d9 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0008582:	83 ec 0c             	sub    esp,0xc
c0008585:	68 cb d7 01 c0       	push   0xc001d7cb
c000858a:	e8 bc 81 00 00       	call   c001074b <Krnl::panic(char const*)>
c000858f:	83 c4 10             	add    esp,0x10
c0008592:	83 ec 08             	sub    esp,0x8
c0008595:	bb 60 00 00 00       	mov    ebx,0x60
c000859a:	6a 00                	push   0x0
c000859c:	6a 06                	push   0x6
c000859e:	e8 e2 fb ff ff       	call   c0008185 <Phys::setPageState(unsigned long, bool)>
c00085a3:	58                   	pop    eax
c00085a4:	5a                   	pop    edx
c00085a5:	6a 00                	push   0x0
c00085a7:	6a 07                	push   0x7
c00085a9:	e8 d7 fb ff ff       	call   c0008185 <Phys::setPageState(unsigned long, bool)>
c00085ae:	83 05 48 09 02 c0 02 	add    DWORD PTR ds:0xc0020948,0x2
c00085b5:	83 c4 10             	add    esp,0x10
c00085b8:	83 ec 08             	sub    esp,0x8
c00085bb:	6a 00                	push   0x0
c00085bd:	53                   	push   ebx
c00085be:	43                   	inc    ebx
c00085bf:	e8 c1 fb ff ff       	call   c0008185 <Phys::setPageState(unsigned long, bool)>
c00085c4:	83 c4 10             	add    esp,0x10
c00085c7:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00085cd:	75 e9                	jne    c00085b8 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00085cf:	a1 48 09 02 c0       	mov    eax,ds:0xc0020948
c00085d4:	bb 40 01 00 00       	mov    ebx,0x140
c00085d9:	83 c0 20             	add    eax,0x20
c00085dc:	a3 48 09 02 c0       	mov    ds:0xc0020948,eax
c00085e1:	eb 22                	jmp    c0008605 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00085e3:	83 ec 08             	sub    esp,0x8
c00085e6:	6a 00                	push   0x0
c00085e8:	53                   	push   ebx
c00085e9:	43                   	inc    ebx
c00085ea:	e8 96 fb ff ff       	call   c0008185 <Phys::setPageState(unsigned long, bool)>
c00085ef:	a1 48 09 02 c0       	mov    eax,ds:0xc0020948
c00085f4:	83 c4 10             	add    esp,0x10
c00085f7:	40                   	inc    eax
c00085f8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00085fe:	a3 48 09 02 c0       	mov    ds:0xc0020948,eax
c0008603:	74 07                	je     c000860c <Phys::physicalMemorySetup(unsigned int)+0x280>
c0008605:	3d ff 03 00 00       	cmp    eax,0x3ff
c000860a:	7e d7                	jle    c00085e3 <Phys::physicalMemorySetup(unsigned int)+0x257>
c000860c:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008611:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008616:	7f 22                	jg     c000863a <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0008618:	83 ec 08             	sub    esp,0x8
c000861b:	6a 00                	push   0x0
c000861d:	53                   	push   ebx
c000861e:	43                   	inc    ebx
c000861f:	e8 61 fb ff ff       	call   c0008185 <Phys::setPageState(unsigned long, bool)>
c0008624:	a1 48 09 02 c0       	mov    eax,ds:0xc0020948
c0008629:	83 c4 10             	add    esp,0x10
c000862c:	40                   	inc    eax
c000862d:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008633:	a3 48 09 02 c0       	mov    ds:0xc0020948,eax
c0008638:	75 d7                	jne    c0008611 <Phys::physicalMemorySetup(unsigned int)+0x285>
c000863a:	83 c4 3c             	add    esp,0x3c
c000863d:	5b                   	pop    ebx
c000863e:	5e                   	pop    esi
c000863f:	5f                   	pop    edi
c0008640:	5d                   	pop    ebp
c0008641:	c3                   	ret    
c0008642:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000864a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008652:	e9 51 fe ff ff       	jmp    c00084a8 <Phys::physicalMemorySetup(unsigned int)+0x11c>
c0008657:	90                   	nop

c0008658 <Pipe::isAtty()>:
c0008658:	31 c0                	xor    eax,eax
c000865a:	c3                   	ret    
c000865b:	90                   	nop

c000865c <Pipe::~Pipe()>:
c000865c:	83 ec 0c             	sub    esp,0xc
c000865f:	ba 38 d8 01 c0       	mov    edx,0xc001d838
c0008664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008668:	89 10                	mov    DWORD PTR [eax],edx
c000866a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866e:	83 ec 0c             	sub    esp,0xc
c0008671:	50                   	push   eax
c0008672:	e8 d1 10 00 00       	call   c0009748 <UnixFile::~UnixFile()>
c0008677:	83 c4 10             	add    esp,0x10
c000867a:	90                   	nop
c000867b:	83 c4 0c             	add    esp,0xc
c000867e:	c3                   	ret    
c000867f:	90                   	nop

c0008680 <Pipe::~Pipe()>:
c0008680:	83 ec 0c             	sub    esp,0xc
c0008683:	83 ec 0c             	sub    esp,0xc
c0008686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000868a:	e8 cd ff ff ff       	call   c000865c <Pipe::~Pipe()>
c000868f:	83 c4 10             	add    esp,0x10
c0008692:	83 ec 08             	sub    esp,0x8
c0008695:	6a 20                	push   0x20
c0008697:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000869b:	e8 66 24 00 00       	call   c000ab06 <operator delete(void*, unsigned long)>
c00086a0:	83 c4 10             	add    esp,0x10
c00086a3:	83 c4 0c             	add    esp,0xc
c00086a6:	c3                   	ret    
c00086a7:	90                   	nop

c00086a8 <Pipe::write(unsigned long long, void*, int*)>:
c00086a8:	55                   	push   ebp
c00086a9:	57                   	push   edi
c00086aa:	56                   	push   esi
c00086ab:	53                   	push   ebx
c00086ac:	83 ec 1c             	sub    esp,0x1c
c00086af:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00086b7:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00086ba:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00086be:	89 04 24             	mov    DWORD PTR [esp],eax
c00086c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00086c5:	89 d8                	mov    eax,ebx
c00086c7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00086ca:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00086ce:	89 d6                	mov    esi,edx
c00086d0:	89 d7                	mov    edi,edx
c00086d2:	c1 ff 1f             	sar    edi,0x1f
c00086d5:	03 34 24             	add    esi,DWORD PTR [esp]
c00086d8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00086dc:	c1 f8 1f             	sar    eax,0x1f
c00086df:	39 f3                	cmp    ebx,esi
c00086e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086e9:	19 f8                	sbb    eax,edi
c00086eb:	b8 01 00 00 00       	mov    eax,0x1
c00086f0:	72 6e                	jb     c0008760 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00086f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00086f5:	01 d0                	add    eax,edx
c00086f7:	99                   	cdq    
c00086f8:	f7 fb                	idiv   ebx
c00086fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086fe:	29 d3                	sub    ebx,edx
c0008700:	89 d7                	mov    edi,edx
c0008702:	89 de                	mov    esi,ebx
c0008704:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008707:	c1 fb 1f             	sar    ebx,0x1f
c000870a:	39 f2                	cmp    edx,esi
c000870c:	19 d8                	sbb    eax,ebx
c000870e:	b8 00 00 00 00       	mov    eax,0x0
c0008713:	72 04                	jb     c0008719 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008715:	89 d0                	mov    eax,edx
c0008717:	29 f0                	sub    eax,esi
c0008719:	89 d3                	mov    ebx,edx
c000871b:	29 c3                	sub    ebx,eax
c000871d:	74 0b                	je     c000872a <Pipe::write(unsigned long long, void*, int*)+0x82>
c000871f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008722:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008726:	89 d9                	mov    ecx,ebx
c0008728:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000872a:	85 c0                	test   eax,eax
c000872c:	74 0d                	je     c000873b <Pipe::write(unsigned long long, void*, int*)+0x93>
c000872e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008732:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008735:	89 de                	mov    esi,ebx
c0008737:	89 c1                	mov    ecx,eax
c0008739:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000873b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000873e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008743:	75 10                	jne    c0008755 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008745:	83 ec 0c             	sub    esp,0xc
c0008748:	68 f5 d7 01 c0       	push   0xc001d7f5
c000874d:	e8 f9 7f 00 00       	call   c001074b <Krnl::panic(char const*)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008759:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000875c:	89 08                	mov    DWORD PTR [eax],ecx
c000875e:	31 c0                	xor    eax,eax
c0008760:	83 c4 1c             	add    esp,0x1c
c0008763:	5b                   	pop    ebx
c0008764:	5e                   	pop    esi
c0008765:	5f                   	pop    edi
c0008766:	5d                   	pop    ebp
c0008767:	c3                   	ret    

c0008768 <Pipe::read(unsigned long long, void*, int*)>:
c0008768:	55                   	push   ebp
c0008769:	57                   	push   edi
c000876a:	56                   	push   esi
c000876b:	53                   	push   ebx
c000876c:	83 ec 1c             	sub    esp,0x1c
c000876f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008773:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008777:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000877b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000877e:	89 c8                	mov    eax,ecx
c0008780:	99                   	cdq    
c0008781:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008785:	74 24                	je     c00087ab <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008787:	39 f9                	cmp    ecx,edi
c0008789:	89 d1                	mov    ecx,edx
c000878b:	19 f1                	sbb    ecx,esi
c000878d:	73 1c                	jae    c00087ab <Pipe::read(unsigned long long, void*, int*)+0x43>
c000878f:	fa                   	cli    
c0008790:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0008796:	e8 05 b3 00 00       	call   c0013aa0 <schedule()>
c000879b:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c00087a0:	48                   	dec    eax
c00087a1:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c00087a6:	75 d3                	jne    c000877b <Pipe::read(unsigned long long, void*, int*)+0x13>
c00087a8:	fb                   	sti    
c00087a9:	eb d0                	jmp    c000877b <Pipe::read(unsigned long long, void*, int*)+0x13>
c00087ab:	39 f8                	cmp    eax,edi
c00087ad:	89 d1                	mov    ecx,edx
c00087af:	89 3c 24             	mov    DWORD PTR [esp],edi
c00087b2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00087b6:	19 f1                	sbb    ecx,esi
c00087b8:	73 07                	jae    c00087c1 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00087ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00087bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00087c1:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00087c4:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00087c7:	29 f7                	sub    edi,esi
c00087c9:	89 f8                	mov    eax,edi
c00087cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00087cf:	99                   	cdq    
c00087d0:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00087d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087d7:	19 d0                	sbb    eax,edx
c00087d9:	73 07                	jae    c00087e2 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00087db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00087de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087e2:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00087e5:	89 ea                	mov    edx,ebp
c00087e7:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00087eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00087f0:	74 0d                	je     c00087ff <Pipe::read(unsigned long long, void*, int*)+0x97>
c00087f2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087f5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00087f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00087fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087ff:	85 d2                	test   edx,edx
c0008801:	74 11                	je     c0008814 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008807:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000880a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000880e:	89 d1                	mov    ecx,edx
c0008810:	89 c7                	mov    edi,eax
c0008812:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008814:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008817:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000881a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000881d:	99                   	cdq    
c000881e:	89 f7                	mov    edi,esi
c0008820:	03 04 24             	add    eax,DWORD PTR [esp]
c0008823:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008827:	c1 ff 1f             	sar    edi,0x1f
c000882a:	57                   	push   edi
c000882b:	56                   	push   esi
c000882c:	52                   	push   edx
c000882d:	50                   	push   eax
c000882e:	e8 0d 3a 01 00       	call   c001c240 <__umoddi3>
c0008833:	83 c4 10             	add    esp,0x10
c0008836:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008839:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000883e:	75 10                	jne    c0008850 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008840:	83 ec 0c             	sub    esp,0xc
c0008843:	68 12 d8 01 c0       	push   0xc001d812
c0008848:	e8 fe 7e 00 00       	call   c001074b <Krnl::panic(char const*)>
c000884d:	83 c4 10             	add    esp,0x10
c0008850:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008857:	89 10                	mov    DWORD PTR [eax],edx
c0008859:	83 c4 1c             	add    esp,0x1c
c000885c:	31 c0                	xor    eax,eax
c000885e:	5b                   	pop    ebx
c000885f:	5e                   	pop    esi
c0008860:	5f                   	pop    edi
c0008861:	5d                   	pop    ebp
c0008862:	c3                   	ret    
c0008863:	90                   	nop

c0008864 <Pipe::Pipe(int)>:
c0008864:	83 ec 0c             	sub    esp,0xc
c0008867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000886b:	83 ec 08             	sub    esp,0x8
c000886e:	6a 00                	push   0x0
c0008870:	50                   	push   eax
c0008871:	e8 f0 0c 00 00       	call   c0009566 <UnixFile::UnixFile(int)>
c0008876:	83 c4 10             	add    esp,0x10
c0008879:	ba 38 d8 01 c0       	mov    edx,0xc001d838
c000887e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008882:	89 10                	mov    DWORD PTR [eax],edx
c0008884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008888:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000888c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000888f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008893:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000889a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000889e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00088a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00088a9:	83 ec 0c             	sub    esp,0xc
c00088ac:	50                   	push   eax
c00088ad:	e8 bb f5 ff ff       	call   c0007e6d <malloc>
c00088b2:	83 c4 10             	add    esp,0x10
c00088b5:	89 c2                	mov    edx,eax
c00088b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088bb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00088be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088c2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00088c6:	90                   	nop
c00088c7:	83 c4 0c             	add    esp,0xc
c00088ca:	c3                   	ret    
c00088cb:	90                   	nop

c00088cc <VgaText::isAtty()>:
c00088cc:	b0 01                	mov    al,0x1
c00088ce:	c3                   	ret    
c00088cf:	90                   	nop

c00088d0 <VgaText::~VgaText()>:
c00088d0:	83 ec 0c             	sub    esp,0xc
c00088d3:	ba c0 d8 01 c0       	mov    edx,0xc001d8c0
c00088d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088dc:	89 10                	mov    DWORD PTR [eax],edx
c00088de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	50                   	push   eax
c00088e6:	e8 5d 0e 00 00       	call   c0009748 <UnixFile::~UnixFile()>
c00088eb:	83 c4 10             	add    esp,0x10
c00088ee:	90                   	nop
c00088ef:	83 c4 0c             	add    esp,0xc
c00088f2:	c3                   	ret    
c00088f3:	90                   	nop

c00088f4 <VgaText::~VgaText()>:
c00088f4:	83 ec 0c             	sub    esp,0xc
c00088f7:	83 ec 0c             	sub    esp,0xc
c00088fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088fe:	e8 cd ff ff ff       	call   c00088d0 <VgaText::~VgaText()>
c0008903:	83 c4 10             	add    esp,0x10
c0008906:	83 ec 08             	sub    esp,0x8
c0008909:	68 34 01 00 00       	push   0x134
c000890e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008912:	e8 ef 21 00 00       	call   c000ab06 <operator delete(void*, unsigned long)>
c0008917:	83 c4 10             	add    esp,0x10
c000891a:	83 c4 0c             	add    esp,0xc
c000891d:	c3                   	ret    

c000891e <VgaText::read(unsigned long long, void*, int*)>:
c000891e:	83 ec 10             	sub    esp,0x10
c0008921:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008925:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000892d:	e8 24 45 00 00       	call   c000ce56 <readKeyboard(VgaText*, char*, unsigned long)>
c0008932:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008936:	89 02                	mov    DWORD PTR [edx],eax
c0008938:	31 c0                	xor    eax,eax
c000893a:	83 c4 1c             	add    esp,0x1c
c000893d:	c3                   	ret    

c000893e <setTerminalScrollLock(bool)>:
c000893e:	c3                   	ret    

c000893f <doTerminalCycle()>:
c000893f:	c3                   	ret    

c0008940 <addToTerminalCycle(VgaText*)>:
c0008940:	c3                   	ret    

c0008941 <scrollTerminalScrollLock(int)>:
c0008941:	c3                   	ret    

c0008942 <VgaText::updateTitle()>:
c0008942:	c3                   	ret    
c0008943:	90                   	nop

c0008944 <VgaText::load()>:
c0008944:	c3                   	ret    
c0008945:	90                   	nop

c0008946 <VgaText::updateCursor()>:
c0008946:	83 ec 14             	sub    esp,0x14
c0008949:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000894d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008950:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008953:	e8 bc db 00 00       	call   c0016514 <HalConsoleCursorUpdate(int, int)>
c0008958:	83 c4 1c             	add    esp,0x1c
c000895b:	c3                   	ret    

c000895c <VgaText::doANSI_SGR(int)>:
c000895c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008964:	85 d2                	test   edx,edx
c0008966:	75 0b                	jne    c0008973 <VgaText::doANSI_SGR(int)+0x17>
c0008968:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000896b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000896e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008971:	eb 59                	jmp    c00089cc <VgaText::doANSI_SGR(int)+0x70>
c0008973:	83 fa 07             	cmp    edx,0x7
c0008976:	75 0b                	jne    c0008983 <VgaText::doANSI_SGR(int)+0x27>
c0008978:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000897b:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000897e:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008981:	eb 49                	jmp    c00089cc <VgaText::doANSI_SGR(int)+0x70>
c0008983:	83 fa 1b             	cmp    edx,0x1b
c0008986:	74 e0                	je     c0008968 <VgaText::doANSI_SGR(int)+0xc>
c0008988:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000898b:	83 f9 07             	cmp    ecx,0x7
c000898e:	77 09                	ja     c0008999 <VgaText::doANSI_SGR(int)+0x3d>
c0008990:	8b 14 8d 20 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe07e0]
c0008997:	eb 20                	jmp    c00089b9 <VgaText::doANSI_SGR(int)+0x5d>
c0008999:	8d 4a d8             	lea    ecx,[edx-0x28]
c000899c:	83 f9 07             	cmp    ecx,0x7
c000899f:	77 09                	ja     c00089aa <VgaText::doANSI_SGR(int)+0x4e>
c00089a1:	8b 14 8d 20 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe07e0]
c00089a8:	eb 22                	jmp    c00089cc <VgaText::doANSI_SGR(int)+0x70>
c00089aa:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00089ad:	83 f9 07             	cmp    ecx,0x7
c00089b0:	77 0b                	ja     c00089bd <VgaText::doANSI_SGR(int)+0x61>
c00089b2:	8b 14 95 d8 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0928]
c00089b9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089bc:	c3                   	ret    
c00089bd:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00089c0:	83 f9 07             	cmp    ecx,0x7
c00089c3:	77 0a                	ja     c00089cf <VgaText::doANSI_SGR(int)+0x73>
c00089c5:	8b 14 95 b0 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0950]
c00089cc:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089cf:	c3                   	ret    

c00089d0 <VgaText::setDefaultBgColour(VgaColour)>:
c00089d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089d8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00089db:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089de:	c3                   	ret    
c00089df:	90                   	nop

c00089e0 <VgaText::setDefaultFgColour(VgaColour)>:
c00089e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089e8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00089eb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089ee:	c3                   	ret    
c00089ef:	90                   	nop

c00089f0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00089f0:	53                   	push   ebx
c00089f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00089f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00089fd:	51                   	push   ecx
c00089fe:	e8 cd ff ff ff       	call   c00089d0 <VgaText::setDefaultBgColour(VgaColour)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008a09:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008a0d:	5b                   	pop    ebx
c0008a0e:	eb d0                	jmp    c00089e0 <VgaText::setDefaultFgColour(VgaColour)>

c0008a10 <VgaText::setTitleTextColour(VgaColour)>:
c0008a10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a18:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008a1b:	c3                   	ret    

c0008a1c <VgaText::setTitleColour(VgaColour)>:
c0008a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a24:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008a27:	c3                   	ret    

c0008a28 <VgaText::setTitle(char*)>:
c0008a28:	c3                   	ret    
c0008a29:	90                   	nop

c0008a2a <VgaText::combineColours(unsigned char, unsigned char)>:
c0008a2a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008a2e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008a33:	83 e0 0f             	and    eax,0xf
c0008a36:	c1 e2 04             	shl    edx,0x4
c0008a39:	09 d0                	or     eax,edx
c0008a3b:	c3                   	ret    

c0008a3c <VgaText::scrollScreen()>:
c0008a3c:	55                   	push   ebp
c0008a3d:	b9 01 00 00 00       	mov    ecx,0x1
c0008a42:	57                   	push   edi
c0008a43:	56                   	push   esi
c0008a44:	53                   	push   ebx
c0008a45:	83 ec 0c             	sub    esp,0xc
c0008a48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a4c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008a52:	31 ff                	xor    edi,edi
c0008a54:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a57:	83 f9 18             	cmp    ecx,0x18
c0008a5a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008a5d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008a64:	75 27                	jne    c0008a8d <VgaText::scrollScreen()+0x51>
c0008a66:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008a69:	01 f5                	add    ebp,esi
c0008a6b:	f7 c7 01 00 00 00    	test   edi,0x1
c0008a71:	74 16                	je     c0008a89 <VgaText::scrollScreen()+0x4d>
c0008a73:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008a77:	50                   	push   eax
c0008a78:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008a7c:	50                   	push   eax
c0008a7d:	e8 a8 ff ff ff       	call   c0008a2a <VgaText::combineColours(unsigned char, unsigned char)>
c0008a82:	5a                   	pop    edx
c0008a83:	5a                   	pop    edx
c0008a84:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008a87:	eb 04                	jmp    c0008a8d <VgaText::scrollScreen()+0x51>
c0008a89:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0008a8d:	47                   	inc    edi
c0008a8e:	46                   	inc    esi
c0008a8f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008a95:	75 bd                	jne    c0008a54 <VgaText::scrollScreen()+0x18>
c0008a97:	41                   	inc    ecx
c0008a98:	83 f9 19             	cmp    ecx,0x19
c0008a9b:	75 af                	jne    c0008a4c <VgaText::scrollScreen()+0x10>
c0008a9d:	39 1d 64 09 02 c0    	cmp    DWORD PTR ds:0xc0020964,ebx
c0008aa3:	75 1f                	jne    c0008ac4 <VgaText::scrollScreen()+0x88>
c0008aa5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008aa9:	74 05                	je     c0008ab0 <VgaText::scrollScreen()+0x74>
c0008aab:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008aae:	eb 14                	jmp    c0008ac4 <VgaText::scrollScreen()+0x88>
c0008ab0:	50                   	push   eax
c0008ab1:	50                   	push   eax
c0008ab2:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008ab6:	50                   	push   eax
c0008ab7:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008abb:	50                   	push   eax
c0008abc:	e8 df d8 00 00       	call   c00163a0 <HalConsoleScroll(int, int)>
c0008ac1:	83 c4 10             	add    esp,0x10
c0008ac4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008ac8:	83 c4 0c             	add    esp,0xc
c0008acb:	5b                   	pop    ebx
c0008acc:	5e                   	pop    esi
c0008acd:	5f                   	pop    edi
c0008ace:	5d                   	pop    ebp
c0008acf:	e9 72 fe ff ff       	jmp    c0008946 <VgaText::updateCursor()>

c0008ad4 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008ad4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008ad9:	c1 e0 08             	shl    eax,0x8
c0008adc:	89 c2                	mov    edx,eax
c0008ade:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008ae3:	09 d0                	or     eax,edx
c0008ae5:	c3                   	ret    

c0008ae6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008ae6:	55                   	push   ebp
c0008ae7:	57                   	push   edi
c0008ae8:	56                   	push   esi
c0008ae9:	53                   	push   ebx
c0008aea:	83 ec 1c             	sub    esp,0x1c
c0008aed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008af1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008af5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008af9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008afd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008b01:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008b05:	0f b6 c3             	movzx  eax,bl
c0008b08:	50                   	push   eax
c0008b09:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008b0e:	50                   	push   eax
c0008b0f:	e8 16 ff ff ff       	call   c0008a2a <VgaText::combineColours(unsigned char, unsigned char)>
c0008b14:	5a                   	pop    edx
c0008b15:	0f b6 c0             	movzx  eax,al
c0008b18:	59                   	pop    ecx
c0008b19:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008b1e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008b22:	50                   	push   eax
c0008b23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008b27:	e8 a8 ff ff ff       	call   c0008ad4 <VgaText::combineCharAndColour(char, unsigned char)>
c0008b2c:	5a                   	pop    edx
c0008b2d:	66 6b d7 50          	imul   dx,di,0x50
c0008b31:	59                   	pop    ecx
c0008b32:	01 f2                	add    edx,esi
c0008b34:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008b37:	0f b7 d2             	movzx  edx,dx
c0008b3a:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008b3e:	39 2d 64 09 02 c0    	cmp    DWORD PTR ds:0xc0020964,ebp
c0008b44:	75 28                	jne    c0008b6e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4a:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008b4e:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008b52:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008b56:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008b5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008b62:	83 c4 1c             	add    esp,0x1c
c0008b65:	5b                   	pop    ebx
c0008b66:	5e                   	pop    esi
c0008b67:	5f                   	pop    edi
c0008b68:	5d                   	pop    ebp
c0008b69:	e9 3a d9 00 00       	jmp    c00164a8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008b6e:	83 c4 1c             	add    esp,0x1c
c0008b71:	5b                   	pop    ebx
c0008b72:	5e                   	pop    esi
c0008b73:	5f                   	pop    edi
c0008b74:	5d                   	pop    ebp
c0008b75:	c3                   	ret    

c0008b76 <VgaText::getCursorX()>:
c0008b76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b7a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008b7d:	c3                   	ret    

c0008b7e <VgaText::getCursorY()>:
c0008b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b82:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008b85:	c3                   	ret    

c0008b86 <VgaText::setCursor(int, int)>:
c0008b86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b8e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008b91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008b95:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008b98:	e9 a9 fd ff ff       	jmp    c0008946 <VgaText::updateCursor()>

c0008b9d <setActiveTerminal(VgaText*)>:
c0008b9d:	53                   	push   ebx
c0008b9e:	83 ec 08             	sub    esp,0x8
c0008ba1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ba5:	85 db                	test   ebx,ebx
c0008ba7:	75 11                	jne    c0008bba <setActiveTerminal(VgaText*)+0x1d>
c0008ba9:	c7 44 24 10 4c d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d84c
c0008bb1:	83 c4 08             	add    esp,0x8
c0008bb4:	5b                   	pop    ebx
c0008bb5:	e9 91 7b 00 00       	jmp    c001074b <Krnl::panic(char const*)>
c0008bba:	a1 64 09 02 c0       	mov    eax,ds:0xc0020964
c0008bbf:	85 c0                	test   eax,eax
c0008bc1:	74 0c                	je     c0008bcf <setActiveTerminal(VgaText*)+0x32>
c0008bc3:	83 ec 0c             	sub    esp,0xc
c0008bc6:	50                   	push   eax
c0008bc7:	e8 7a fd ff ff       	call   c0008946 <VgaText::updateCursor()>
c0008bcc:	83 c4 10             	add    esp,0x10
c0008bcf:	89 1d 64 09 02 c0    	mov    DWORD PTR ds:0xc0020964,ebx
c0008bd5:	50                   	push   eax
c0008bd6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bd9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 a4 ff ff ff       	call   c0008b86 <VgaText::setCursor(int, int)>
c0008be2:	83 c4 18             	add    esp,0x18
c0008be5:	5b                   	pop    ebx
c0008be6:	c3                   	ret    
c0008be7:	90                   	nop

c0008be8 <VgaText::clearScreen()>:
c0008be8:	57                   	push   edi
c0008be9:	56                   	push   esi
c0008bea:	31 f6                	xor    esi,esi
c0008bec:	53                   	push   ebx
c0008bed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008bf1:	52                   	push   edx
c0008bf2:	6a 00                	push   0x0
c0008bf4:	6a 00                	push   0x0
c0008bf6:	53                   	push   ebx
c0008bf7:	e8 8a ff ff ff       	call   c0008b86 <VgaText::setCursor(int, int)>
c0008bfc:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008c03:	83 c4 10             	add    esp,0x10
c0008c06:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008c09:	7e 20                	jle    c0008c2b <VgaText::clearScreen()+0x43>
c0008c0b:	31 ff                	xor    edi,edi
c0008c0d:	50                   	push   eax
c0008c0e:	50                   	push   eax
c0008c0f:	56                   	push   esi
c0008c10:	57                   	push   edi
c0008c11:	47                   	inc    edi
c0008c12:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c15:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c18:	6a 20                	push   0x20
c0008c1a:	53                   	push   ebx
c0008c1b:	e8 c6 fe ff ff       	call   c0008ae6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c20:	83 c4 20             	add    esp,0x20
c0008c23:	83 ff 50             	cmp    edi,0x50
c0008c26:	75 e5                	jne    c0008c0d <VgaText::clearScreen()+0x25>
c0008c28:	46                   	inc    esi
c0008c29:	eb db                	jmp    c0008c06 <VgaText::clearScreen()+0x1e>
c0008c2b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c32:	5b                   	pop    ebx
c0008c33:	5e                   	pop    esi
c0008c34:	5f                   	pop    edi
c0008c35:	c3                   	ret    

c0008c36 <VgaText::setCursorX(int)>:
c0008c36:	83 ec 10             	sub    esp,0x10
c0008c39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c3d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c44:	50                   	push   eax
c0008c45:	e8 3c ff ff ff       	call   c0008b86 <VgaText::setCursor(int, int)>
c0008c4a:	83 c4 1c             	add    esp,0x1c
c0008c4d:	c3                   	ret    

c0008c4e <VgaText::setCursorY(int)>:
c0008c4e:	83 ec 10             	sub    esp,0x10
c0008c51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008c59:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008c5c:	50                   	push   eax
c0008c5d:	e8 24 ff ff ff       	call   c0008b86 <VgaText::setCursor(int, int)>
c0008c62:	83 c4 1c             	add    esp,0x1c
c0008c65:	c3                   	ret    

c0008c66 <VgaText::incrementCursor(bool)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	51                   	push   ecx
c0008c69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c71:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008c74:	40                   	inc    eax
c0008c75:	83 f8 50             	cmp    eax,0x50
c0008c78:	74 05                	je     c0008c7f <VgaText::incrementCursor(bool)+0x19>
c0008c7a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c7d:	eb 24                	jmp    c0008ca3 <VgaText::incrementCursor(bool)+0x3d>
c0008c7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008c82:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c89:	8d 50 01             	lea    edx,[eax+0x1]
c0008c8c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008c8f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008c92:	75 0f                	jne    c0008ca3 <VgaText::incrementCursor(bool)+0x3d>
c0008c94:	83 ec 0c             	sub    esp,0xc
c0008c97:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008c9a:	53                   	push   ebx
c0008c9b:	e8 9c fd ff ff       	call   c0008a3c <VgaText::scrollScreen()>
c0008ca0:	83 c4 10             	add    esp,0x10
c0008ca3:	89 f0                	mov    eax,esi
c0008ca5:	84 c0                	test   al,al
c0008ca7:	74 0c                	je     c0008cb5 <VgaText::incrementCursor(bool)+0x4f>
c0008ca9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cad:	5a                   	pop    edx
c0008cae:	5b                   	pop    ebx
c0008caf:	5e                   	pop    esi
c0008cb0:	e9 91 fc ff ff       	jmp    c0008946 <VgaText::updateCursor()>
c0008cb5:	58                   	pop    eax
c0008cb6:	5b                   	pop    ebx
c0008cb7:	5e                   	pop    esi
c0008cb8:	c3                   	ret    
c0008cb9:	90                   	nop

c0008cba <VgaText::decrementCursor(bool)>:
c0008cba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008cc2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008cc5:	85 c0                	test   eax,eax
c0008cc7:	74 04                	je     c0008ccd <VgaText::decrementCursor(bool)+0x13>
c0008cc9:	48                   	dec    eax
c0008cca:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008ccd:	84 c9                	test   cl,cl
c0008ccf:	74 09                	je     c0008cda <VgaText::decrementCursor(bool)+0x20>
c0008cd1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008cd5:	e9 6c fc ff ff       	jmp    c0008946 <VgaText::updateCursor()>
c0008cda:	c3                   	ret    
c0008cdb:	90                   	nop

c0008cdc <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008cdc:	53                   	push   ebx
c0008cdd:	83 ec 08             	sub    esp,0x8
c0008ce0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ce4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ce8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008cec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008cf0:	3c 07                	cmp    al,0x7
c0008cf2:	75 21                	jne    c0008d15 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008cf4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008cfc:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008d04:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008d0c:	83 c4 08             	add    esp,0x8
c0008d0f:	5b                   	pop    ebx
c0008d10:	e9 3e 2d 00 00       	jmp    c000ba53 <Krnl::beep(int, int, bool)>
c0008d15:	3c 0d                	cmp    al,0xd
c0008d17:	75 09                	jne    c0008d22 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008d19:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d20:	eb 2c                	jmp    c0008d4e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008d22:	3c 0a                	cmp    al,0xa
c0008d24:	75 31                	jne    c0008d57 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008d26:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008d29:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d30:	8d 50 01             	lea    edx,[eax+0x1]
c0008d33:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008d36:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008d39:	75 0f                	jne    c0008d4a <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008d3b:	83 ec 0c             	sub    esp,0xc
c0008d3e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008d41:	53                   	push   ebx
c0008d42:	e8 f5 fc ff ff       	call   c0008a3c <VgaText::scrollScreen()>
c0008d47:	83 c4 10             	add    esp,0x10
c0008d4a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008d4e:	83 c4 08             	add    esp,0x8
c0008d51:	5b                   	pop    ebx
c0008d52:	e9 ef fb ff ff       	jmp    c0008946 <VgaText::updateCursor()>
c0008d57:	3c 08                	cmp    al,0x8
c0008d59:	75 25                	jne    c0008d80 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008d5b:	50                   	push   eax
c0008d5c:	50                   	push   eax
c0008d5d:	6a 01                	push   0x1
c0008d5f:	53                   	push   ebx
c0008d60:	e8 55 ff ff ff       	call   c0008cba <VgaText::decrementCursor(bool)>
c0008d65:	5a                   	pop    edx
c0008d66:	59                   	pop    ecx
c0008d67:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d6a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d6d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008d70:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008d73:	6a 20                	push   0x20
c0008d75:	53                   	push   ebx
c0008d76:	e8 6b fd ff ff       	call   c0008ae6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d7b:	83 c4 28             	add    esp,0x28
c0008d7e:	5b                   	pop    ebx
c0008d7f:	c3                   	ret    
c0008d80:	83 ec 08             	sub    esp,0x8
c0008d83:	0f be c0             	movsx  eax,al
c0008d86:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d8c:	51                   	push   ecx
c0008d8d:	52                   	push   edx
c0008d8e:	50                   	push   eax
c0008d8f:	53                   	push   ebx
c0008d90:	e8 51 fd ff ff       	call   c0008ae6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d95:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008d99:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008da1:	83 c4 28             	add    esp,0x28
c0008da4:	5b                   	pop    ebx
c0008da5:	e9 bc fe ff ff       	jmp    c0008c66 <VgaText::incrementCursor(bool)>

c0008daa <VgaText::putchar(char)>:
c0008daa:	56                   	push   esi
c0008dab:	53                   	push   ebx
c0008dac:	83 ec 14             	sub    esp,0x14
c0008daf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008db3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008db7:	3c 5b                	cmp    al,0x5b
c0008db9:	75 18                	jne    c0008dd3 <VgaText::putchar(char)+0x29>
c0008dbb:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008dbf:	74 1f                	je     c0008de0 <VgaText::putchar(char)+0x36>
c0008dc1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008dc7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008dce:	e9 bd 00 00 00       	jmp    c0008e90 <VgaText::putchar(char)+0xe6>
c0008dd3:	3c 1b                	cmp    al,0x1b
c0008dd5:	75 09                	jne    c0008de0 <VgaText::putchar(char)+0x36>
c0008dd7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008ddb:	e9 b0 00 00 00       	jmp    c0008e90 <VgaText::putchar(char)+0xe6>
c0008de0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008de3:	84 c9                	test   cl,cl
c0008de5:	0f 84 92 00 00 00    	je     c0008e7d <VgaText::putchar(char)+0xd3>
c0008deb:	8d 50 c0             	lea    edx,[eax-0x40]
c0008dee:	80 fa 3e             	cmp    dl,0x3e
c0008df1:	77 76                	ja     c0008e69 <VgaText::putchar(char)+0xbf>
c0008df3:	3c 6d                	cmp    al,0x6d
c0008df5:	75 47                	jne    c0008e3e <VgaText::putchar(char)+0x94>
c0008df7:	31 f6                	xor    esi,esi
c0008df9:	31 d2                	xor    edx,edx
c0008dfb:	31 c0                	xor    eax,eax
c0008dfd:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008e00:	7e 2d                	jle    c0008e2f <VgaText::putchar(char)+0x85>
c0008e02:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008e07:	80 fa 3b             	cmp    dl,0x3b
c0008e0a:	75 17                	jne    c0008e23 <VgaText::putchar(char)+0x79>
c0008e0c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008e10:	50                   	push   eax
c0008e11:	53                   	push   ebx
c0008e12:	e8 45 fb ff ff       	call   c000895c <VgaText::doANSI_SGR(int)>
c0008e17:	59                   	pop    ecx
c0008e18:	31 d2                	xor    edx,edx
c0008e1a:	58                   	pop    eax
c0008e1b:	31 c0                	xor    eax,eax
c0008e1d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008e21:	eb 09                	jmp    c0008e2c <VgaText::putchar(char)+0x82>
c0008e23:	6b c0 0a             	imul   eax,eax,0xa
c0008e26:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008e2a:	88 ca                	mov    dl,cl
c0008e2c:	46                   	inc    esi
c0008e2d:	eb ce                	jmp    c0008dfd <VgaText::putchar(char)+0x53>
c0008e2f:	84 d2                	test   dl,dl
c0008e31:	74 2e                	je     c0008e61 <VgaText::putchar(char)+0xb7>
c0008e33:	50                   	push   eax
c0008e34:	53                   	push   ebx
c0008e35:	e8 22 fb ff ff       	call   c000895c <VgaText::doANSI_SGR(int)>
c0008e3a:	58                   	pop    eax
c0008e3b:	5a                   	pop    edx
c0008e3c:	eb 23                	jmp    c0008e61 <VgaText::putchar(char)+0xb7>
c0008e3e:	3c 4a                	cmp    al,0x4a
c0008e40:	75 1f                	jne    c0008e61 <VgaText::putchar(char)+0xb7>
c0008e42:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008e46:	75 19                	jne    c0008e61 <VgaText::putchar(char)+0xb7>
c0008e48:	83 ec 0c             	sub    esp,0xc
c0008e4b:	53                   	push   ebx
c0008e4c:	e8 97 fd ff ff       	call   c0008be8 <VgaText::clearScreen()>
c0008e51:	83 c4 0c             	add    esp,0xc
c0008e54:	6a 00                	push   0x0
c0008e56:	6a 00                	push   0x0
c0008e58:	53                   	push   ebx
c0008e59:	e8 28 fd ff ff       	call   c0008b86 <VgaText::setCursor(int, int)>
c0008e5e:	83 c4 10             	add    esp,0x10
c0008e61:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008e67:	eb 27                	jmp    c0008e90 <VgaText::putchar(char)+0xe6>
c0008e69:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008e6c:	83 fa 0e             	cmp    edx,0xe
c0008e6f:	7f 1f                	jg     c0008e90 <VgaText::putchar(char)+0xe6>
c0008e71:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008e74:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008e77:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008e7b:	eb 13                	jmp    c0008e90 <VgaText::putchar(char)+0xe6>
c0008e7d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e80:	0f be c0             	movsx  eax,al
c0008e83:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e86:	50                   	push   eax
c0008e87:	53                   	push   ebx
c0008e88:	e8 4f fe ff ff       	call   c0008cdc <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e8d:	83 c4 10             	add    esp,0x10
c0008e90:	83 c4 14             	add    esp,0x14
c0008e93:	5b                   	pop    ebx
c0008e94:	5e                   	pop    esi
c0008e95:	c3                   	ret    

c0008e96 <VgaText::putx(unsigned int)>:
c0008e96:	57                   	push   edi
c0008e97:	b9 11 00 00 00       	mov    ecx,0x11
c0008e9c:	56                   	push   esi
c0008e9d:	be 5a d8 01 c0       	mov    esi,0xc001d85a
c0008ea2:	53                   	push   ebx
c0008ea3:	83 ec 20             	sub    esp,0x20
c0008ea6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008eaa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008eae:	fc                   	cld    
c0008eaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008eb1:	be 08 00 00 00       	mov    esi,0x8
c0008eb6:	50                   	push   eax
c0008eb7:	50                   	push   eax
c0008eb8:	89 d8                	mov    eax,ebx
c0008eba:	c1 e3 04             	shl    ebx,0x4
c0008ebd:	c1 e8 1c             	shr    eax,0x1c
c0008ec0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008ec5:	50                   	push   eax
c0008ec6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008eca:	e8 db fe ff ff       	call   c0008daa <VgaText::putchar(char)>
c0008ecf:	83 c4 10             	add    esp,0x10
c0008ed2:	4e                   	dec    esi
c0008ed3:	75 e1                	jne    c0008eb6 <VgaText::putx(unsigned int)+0x20>
c0008ed5:	83 c4 20             	add    esp,0x20
c0008ed8:	5b                   	pop    ebx
c0008ed9:	5e                   	pop    esi
c0008eda:	5f                   	pop    edi
c0008edb:	c3                   	ret    

c0008edc <VgaText::puts(char const*)>:
c0008edc:	53                   	push   ebx
c0008edd:	83 ec 08             	sub    esp,0x8
c0008ee0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ee4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ee7:	84 c0                	test   al,al
c0008ee9:	74 12                	je     c0008efd <VgaText::puts(char const*)+0x21>
c0008eeb:	43                   	inc    ebx
c0008eec:	51                   	push   ecx
c0008eed:	51                   	push   ecx
c0008eee:	50                   	push   eax
c0008eef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ef3:	e8 b2 fe ff ff       	call   c0008daa <VgaText::putchar(char)>
c0008ef8:	83 c4 10             	add    esp,0x10
c0008efb:	eb e7                	jmp    c0008ee4 <VgaText::puts(char const*)+0x8>
c0008efd:	83 c4 08             	add    esp,0x8
c0008f00:	5b                   	pop    ebx
c0008f01:	c3                   	ret    

c0008f02 <VgaText::write(unsigned long long, void*, int*)>:
c0008f02:	55                   	push   ebp
c0008f03:	57                   	push   edi
c0008f04:	56                   	push   esi
c0008f05:	53                   	push   ebx
c0008f06:	83 ec 0c             	sub    esp,0xc
c0008f09:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008f0d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f11:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008f15:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008f1c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008f1f:	39 eb                	cmp    ebx,ebp
c0008f21:	74 13                	je     c0008f36 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008f23:	43                   	inc    ebx
c0008f24:	50                   	push   eax
c0008f25:	50                   	push   eax
c0008f26:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008f2a:	50                   	push   eax
c0008f2b:	56                   	push   esi
c0008f2c:	e8 79 fe ff ff       	call   c0008daa <VgaText::putchar(char)>
c0008f31:	83 c4 10             	add    esp,0x10
c0008f34:	eb e9                	jmp    c0008f1f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008f36:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008f3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f41:	89 38                	mov    DWORD PTR [eax],edi
c0008f43:	83 c4 0c             	add    esp,0xc
c0008f46:	31 c0                	xor    eax,eax
c0008f48:	5b                   	pop    ebx
c0008f49:	5e                   	pop    esi
c0008f4a:	5f                   	pop    edi
c0008f4b:	5d                   	pop    ebp
c0008f4c:	c3                   	ret    
c0008f4d:	90                   	nop

c0008f4e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008f4e:	55                   	push   ebp
c0008f4f:	57                   	push   edi
c0008f50:	56                   	push   esi
c0008f51:	53                   	push   ebx
c0008f52:	83 ec 0c             	sub    esp,0xc
c0008f55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008f59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f5e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008f65:	50                   	push   eax
c0008f66:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f6b:	50                   	push   eax
c0008f6c:	e8 b9 fa ff ff       	call   c0008a2a <VgaText::combineColours(unsigned char, unsigned char)>
c0008f71:	5a                   	pop    edx
c0008f72:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f77:	59                   	pop    ecx
c0008f78:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f7b:	89 c5                	mov    ebp,eax
c0008f7d:	0f b7 f6             	movzx  esi,si
c0008f80:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f84:	01 f6                	add    esi,esi
c0008f86:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f89:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008f8c:	84 c0                	test   al,al
c0008f8e:	0f 84 f4 00 00 00    	je     c0009088 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008f94:	3c 0d                	cmp    al,0xd
c0008f96:	75 0c                	jne    c0008fa4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008f98:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f9f:	e9 de 00 00 00       	jmp    c0009082 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008fa4:	3c 0a                	cmp    al,0xa
c0008fa6:	75 45                	jne    c0008fed <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008fa8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008fab:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008fb2:	8d 48 01             	lea    ecx,[eax+0x1]
c0008fb5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008fb8:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008fbb:	75 0f                	jne    c0008fcc <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008fbd:	83 ec 0c             	sub    esp,0xc
c0008fc0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008fc3:	53                   	push   ebx
c0008fc4:	e8 73 fa ff ff       	call   c0008a3c <VgaText::scrollScreen()>
c0008fc9:	83 c4 10             	add    esp,0x10
c0008fcc:	83 ec 0c             	sub    esp,0xc
c0008fcf:	53                   	push   ebx
c0008fd0:	e8 71 f9 ff ff       	call   c0008946 <VgaText::updateCursor()>
c0008fd5:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008fda:	83 c4 10             	add    esp,0x10
c0008fdd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008fe0:	0f b7 f6             	movzx  esi,si
c0008fe3:	01 f6                	add    esi,esi
c0008fe5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008fe8:	e9 95 00 00 00       	jmp    c0009082 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008fed:	3c 08                	cmp    al,0x8
c0008fef:	75 35                	jne    c0009026 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008ff1:	51                   	push   ecx
c0008ff2:	51                   	push   ecx
c0008ff3:	6a 01                	push   0x1
c0008ff5:	53                   	push   ebx
c0008ff6:	e8 bf fc ff ff       	call   c0008cba <VgaText::decrementCursor(bool)>
c0008ffb:	5e                   	pop    esi
c0008ffc:	58                   	pop    eax
c0008ffd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009000:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009003:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0009006:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0009009:	6a 20                	push   0x20
c000900b:	53                   	push   ebx
c000900c:	e8 d5 fa ff ff       	call   c0008ae6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0009011:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009016:	83 c4 20             	add    esp,0x20
c0009019:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000901c:	0f b7 f6             	movzx  esi,si
c000901f:	01 f6                	add    esi,esi
c0009021:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009024:	eb 5c                	jmp    c0009082 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009026:	52                   	push   edx
c0009027:	52                   	push   edx
c0009028:	89 ea                	mov    edx,ebp
c000902a:	0f b6 ca             	movzx  ecx,dl
c000902d:	51                   	push   ecx
c000902e:	50                   	push   eax
c000902f:	e8 a0 fa ff ff       	call   c0008ad4 <VgaText::combineCharAndColour(char, unsigned char)>
c0009034:	83 c4 10             	add    esp,0x10
c0009037:	66 89 06             	mov    WORD PTR [esi],ax
c000903a:	39 1d 64 09 02 c0    	cmp    DWORD PTR ds:0xc0020964,ebx
c0009040:	75 1d                	jne    c000905f <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0009042:	83 ec 0c             	sub    esp,0xc
c0009045:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009048:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000904b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000904f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009053:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0009056:	50                   	push   eax
c0009057:	e8 4c d4 00 00       	call   c00164a8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000905c:	83 c4 20             	add    esp,0x20
c000905f:	83 c6 02             	add    esi,0x2
c0009062:	50                   	push   eax
c0009063:	50                   	push   eax
c0009064:	6a 00                	push   0x0
c0009066:	53                   	push   ebx
c0009067:	e8 fa fb ff ff       	call   c0008c66 <VgaText::incrementCursor(bool)>
c000906c:	83 c4 10             	add    esp,0x10
c000906f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0009073:	75 0d                	jne    c0009082 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009075:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000907a:	0f b7 f6             	movzx  esi,si
c000907d:	01 f6                	add    esi,esi
c000907f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009082:	47                   	inc    edi
c0009083:	e9 01 ff ff ff       	jmp    c0008f89 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0009088:	83 ec 0c             	sub    esp,0xc
c000908b:	53                   	push   ebx
c000908c:	e8 b5 f8 ff ff       	call   c0008946 <VgaText::updateCursor()>
c0009091:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0009098:	83 c4 1c             	add    esp,0x1c
c000909b:	5b                   	pop    ebx
c000909c:	5e                   	pop    esi
c000909d:	5f                   	pop    edi
c000909e:	5d                   	pop    ebp
c000909f:	c3                   	ret    

c00090a0 <VgaText::VgaText(char const*)>:
c00090a0:	56                   	push   esi
c00090a1:	53                   	push   ebx
c00090a2:	83 ec 04             	sub    esp,0x4
c00090a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a9:	83 ec 08             	sub    esp,0x8
c00090ac:	6a 00                	push   0x0
c00090ae:	50                   	push   eax
c00090af:	e8 b2 04 00 00       	call   c0009566 <UnixFile::UnixFile(int)>
c00090b4:	83 c4 10             	add    esp,0x10
c00090b7:	ba c0 d8 01 c0       	mov    edx,0xc001d8c0
c00090bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00090cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00090e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00090e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ec:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00090f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00090fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009102:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0009109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000910d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0009114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009118:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c000911f:	83 ec 0c             	sub    esp,0xc
c0009122:	6a 01                	push   0x1
c0009124:	e8 80 08 00 00       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c0009129:	83 c4 10             	add    esp,0x10
c000912c:	89 c2                	mov    edx,eax
c000912e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009132:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009135:	8b 1d 10 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a10
c000913b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000913f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009142:	89 c6                	mov    esi,eax
c0009144:	e8 f1 f0 ff ff       	call   c000823a <Phys::allocatePage()>
c0009149:	68 05 0c 00 00       	push   0xc05
c000914e:	56                   	push   esi
c000914f:	50                   	push   eax
c0009150:	53                   	push   ebx
c0009151:	e8 e8 0e 00 00       	call   c000a03e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009156:	83 c4 10             	add    esp,0x10
c0009159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000915d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009160:	83 ec 04             	sub    esp,0x4
c0009163:	68 a0 0f 00 00       	push   0xfa0
c0009168:	6a 00                	push   0x0
c000916a:	50                   	push   eax
c000916b:	e8 80 73 ff ff       	call   c00004f0 <memset>
c0009170:	83 c4 10             	add    esp,0x10
c0009173:	83 ec 04             	sub    esp,0x4
c0009176:	6a 00                	push   0x0
c0009178:	6a 07                	push   0x7
c000917a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000917e:	e8 6d f8 ff ff       	call   c00089f0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0009183:	83 c4 10             	add    esp,0x10
c0009186:	83 ec 04             	sub    esp,0x4
c0009189:	6a 00                	push   0x0
c000918b:	6a 00                	push   0x0
c000918d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009191:	e8 f0 f9 ff ff       	call   c0008b86 <VgaText::setCursor(int, int)>
c0009196:	83 c4 10             	add    esp,0x10
c0009199:	83 ec 0c             	sub    esp,0xc
c000919c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091a0:	e8 43 fa ff ff       	call   c0008be8 <VgaText::clearScreen()>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091ac:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00091b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091b4:	05 82 00 00 00       	add    eax,0x82
c00091b9:	83 ec 04             	sub    esp,0x4
c00091bc:	6a 30                	push   0x30
c00091be:	6a 00                	push   0x0
c00091c0:	50                   	push   eax
c00091c1:	e8 2a 73 ff ff       	call   c00004f0 <memset>
c00091c6:	83 c4 10             	add    esp,0x10
c00091c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091cd:	05 b2 00 00 00       	add    eax,0xb2
c00091d2:	83 ec 04             	sub    esp,0x4
c00091d5:	68 80 00 00 00       	push   0x80
c00091da:	6a 00                	push   0x0
c00091dc:	50                   	push   eax
c00091dd:	e8 0e 73 ff ff       	call   c00004f0 <memset>
c00091e2:	83 c4 10             	add    esp,0x10
c00091e5:	90                   	nop
c00091e6:	83 c4 04             	add    esp,0x4
c00091e9:	5b                   	pop    ebx
c00091ea:	5e                   	pop    esi
c00091eb:	c3                   	ret    

c00091ec <VgaText::receiveKey(unsigned char)>:
c00091ec:	57                   	push   edi
c00091ed:	56                   	push   esi
c00091ee:	53                   	push   ebx
c00091ef:	83 ec 10             	sub    esp,0x10
c00091f2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00091f6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00091fa:	84 db                	test   bl,bl
c00091fc:	0f 84 ba 00 00 00    	je     c00092bc <VgaText::receiveKey(unsigned char)+0xd0>
c0009202:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0009208:	80 fb 08             	cmp    bl,0x8
c000920b:	75 2c                	jne    c0009239 <VgaText::receiveKey(unsigned char)+0x4d>
c000920d:	83 ec 0c             	sub    esp,0xc
c0009210:	57                   	push   edi
c0009211:	e8 4a 73 ff ff       	call   c0000560 <strlen>
c0009216:	83 c4 10             	add    esp,0x10
c0009219:	85 c0                	test   eax,eax
c000921b:	74 41                	je     c000925e <VgaText::receiveKey(unsigned char)+0x72>
c000921d:	50                   	push   eax
c000921e:	50                   	push   eax
c000921f:	6a 08                	push   0x8
c0009221:	56                   	push   esi
c0009222:	e8 83 fb ff ff       	call   c0008daa <VgaText::putchar(char)>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	e8 31 73 ff ff       	call   c0000560 <strlen>
c000922f:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0009237:	eb 22                	jmp    c000925b <VgaText::receiveKey(unsigned char)+0x6f>
c0009239:	0f be c3             	movsx  eax,bl
c000923c:	52                   	push   edx
c000923d:	52                   	push   edx
c000923e:	50                   	push   eax
c000923f:	56                   	push   esi
c0009240:	e8 65 fb ff ff       	call   c0008daa <VgaText::putchar(char)>
c0009245:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0009249:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000924e:	59                   	pop    ecx
c000924f:	58                   	pop    eax
c0009250:	8d 44 24 16          	lea    eax,[esp+0x16]
c0009254:	50                   	push   eax
c0009255:	57                   	push   edi
c0009256:	e8 85 75 ff ff       	call   c00007e0 <strcat>
c000925b:	83 c4 10             	add    esp,0x10
c000925e:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0009265:	75 05                	jne    c000926c <VgaText::receiveKey(unsigned char)+0x80>
c0009267:	80 fb 0a             	cmp    bl,0xa
c000926a:	75 50                	jne    c00092bc <VgaText::receiveKey(unsigned char)+0xd0>
c000926c:	83 ec 0c             	sub    esp,0xc
c000926f:	81 c6 b2 00 00 00    	add    esi,0xb2
c0009275:	56                   	push   esi
c0009276:	e8 e5 72 ff ff       	call   c0000560 <strlen>
c000927b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000927e:	89 c3                	mov    ebx,eax
c0009280:	e8 db 72 ff ff       	call   c0000560 <strlen>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c000928c:	3d 80 00 00 00       	cmp    eax,0x80
c0009291:	76 10                	jbe    c00092a3 <VgaText::receiveKey(unsigned char)+0xb7>
c0009293:	83 ec 0c             	sub    esp,0xc
c0009296:	68 6b d8 01 c0       	push   0xc001d86b
c000929b:	e8 ab 74 00 00       	call   c001074b <Krnl::panic(char const*)>
c00092a0:	83 c4 10             	add    esp,0x10
c00092a3:	50                   	push   eax
c00092a4:	50                   	push   eax
c00092a5:	57                   	push   edi
c00092a6:	56                   	push   esi
c00092a7:	e8 34 75 ff ff       	call   c00007e0 <strcat>
c00092ac:	83 c4 0c             	add    esp,0xc
c00092af:	6a 30                	push   0x30
c00092b1:	6a 00                	push   0x0
c00092b3:	57                   	push   edi
c00092b4:	e8 37 72 ff ff       	call   c00004f0 <memset>
c00092b9:	83 c4 10             	add    esp,0x10
c00092bc:	83 c4 10             	add    esp,0x10
c00092bf:	5b                   	pop    ebx
c00092c0:	5e                   	pop    esi
c00092c1:	5f                   	pop    edi
c00092c2:	c3                   	ret    
c00092c3:	90                   	nop

c00092c4 <VgaText::doUpdate()>:
c00092c4:	c3                   	ret    

c00092c5 <newTerminal(char*)>:
c00092c5:	83 ec 28             	sub    esp,0x28
c00092c8:	68 34 01 00 00       	push   0x134
c00092cd:	e8 9b eb ff ff       	call   c0007e6d <malloc>
c00092d2:	5a                   	pop    edx
c00092d3:	59                   	pop    ecx
c00092d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092d8:	50                   	push   eax
c00092d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092dd:	e8 be fd ff ff       	call   c00090a0 <VgaText::VgaText(char const*)>
c00092e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092e6:	83 c4 2c             	add    esp,0x2c
c00092e9:	c3                   	ret    
c00092ea:	66 90                	xchg   ax,ax

c00092ec <TSS::TSS()>:
c00092ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092f7:	90                   	nop
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop
c00092fa:	66 90                	xchg   ax,ax

c00092fc <TSS::setESP(unsigned long)>:
c00092fc:	55                   	push   ebp
c00092fd:	89 e5                	mov    ebp,esp
c00092ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009302:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009305:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009308:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000930b:	90                   	nop
c000930c:	5d                   	pop    ebp
c000930d:	c3                   	ret    
c000930e:	66 90                	xchg   ax,ax

c0009310 <TSS::flush()>:
c0009310:	55                   	push   ebp
c0009311:	89 e5                	mov    ebp,esp
c0009313:	83 ec 10             	sub    esp,0x10
c0009316:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009319:	8b 00                	mov    eax,DWORD PTR [eax]
c000931b:	83 c8 03             	or     eax,0x3
c000931e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0009322:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0009326:	66 89 d0             	mov    ax,dx
c0009329:	0f 00 d8             	ltr    ax
c000932c:	90                   	nop
c000932d:	c9                   	leave  
c000932e:	c3                   	ret    
c000932f:	90                   	nop

c0009330 <TSS::setup(unsigned long, unsigned long)>:
c0009330:	55                   	push   ebp
c0009331:	89 e5                	mov    ebp,esp
c0009333:	83 ec 18             	sub    esp,0x18
c0009336:	83 ec 0c             	sub    esp,0xc
c0009339:	6a 68                	push   0x68
c000933b:	e8 2d eb ff ff       	call   c0007e6d <malloc>
c0009340:	83 c4 10             	add    esp,0x10
c0009343:	89 c2                	mov    edx,eax
c0009345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009348:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000934b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000934e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009351:	83 ec 04             	sub    esp,0x4
c0009354:	6a 68                	push   0x68
c0009356:	6a 00                	push   0x0
c0009358:	50                   	push   eax
c0009359:	e8 92 71 ff ff       	call   c00004f0 <memset>
c000935e:	83 c4 10             	add    esp,0x10
c0009361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009364:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009367:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000936d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009370:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009373:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000937c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000937f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009382:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009388:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000938b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009397:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000939d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00093a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093af:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00093b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093bb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00093c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093c7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00093cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093d3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00093d6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00093d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00093e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00093e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093eb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00093f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093f8:	0f 20 da             	mov    edx,cr3
c00093fb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00093fe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009401:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009407:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000940a:	83 ec 08             	sub    esp,0x8
c000940d:	50                   	push   eax
c000940e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009411:	50                   	push   eax
c0009412:	e8 e1 e2 ff ff       	call   c00076f8 <GDTEntry::setBase(unsigned int)>
c0009417:	83 c4 10             	add    esp,0x10
c000941a:	83 ec 08             	sub    esp,0x8
c000941d:	6a 68                	push   0x68
c000941f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009422:	50                   	push   eax
c0009423:	e8 ec e2 ff ff       	call   c0007714 <GDTEntry::setLimit(unsigned int)>
c0009428:	83 c4 10             	add    esp,0x10
c000942b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000942f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009432:	83 e0 0f             	and    eax,0xf
c0009435:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009438:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000943b:	83 c8 40             	or     eax,0x40
c000943e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009441:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0009446:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000944c:	05 78 01 00 00       	add    eax,0x178
c0009451:	83 ec 04             	sub    esp,0x4
c0009454:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009457:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000945a:	50                   	push   eax
c000945b:	e8 e8 e2 ff ff       	call   c0007748 <GDT::addEntry(GDTEntry)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	89 c2                	mov    edx,eax
c0009465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009468:	89 10                	mov    DWORD PTR [eax],edx
c000946a:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000946f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009475:	05 78 01 00 00       	add    eax,0x178
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 ef e2 ff ff       	call   c0007772 <GDT::flush()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009489:	8b 00                	mov    eax,DWORD PTR [eax]
c000948b:	c9                   	leave  
c000948c:	c3                   	ret    
c000948d:	90                   	nop

c000948e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000948e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009492:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009496:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009499:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000949e:	75 08                	jne    c00094a8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00094a0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00094a6:	eb 38                	jmp    c00094e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00094a8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00094ad:	75 17                	jne    c00094c6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00094af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00094b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00094b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00094bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00094bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00094c3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00094c6:	89 c1                	mov    ecx,eax
c00094c8:	83 e1 fd             	and    ecx,0xfffffffd
c00094cb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00094d1:	74 cd                	je     c00094a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094d3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00094d8:	83 e0 ef             	and    eax,0xffffffef
c00094db:	83 f8 08             	cmp    eax,0x8
c00094de:	76 c0                	jbe    c00094a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094e0:	31 c0                	xor    eax,eax
c00094e2:	c3                   	ret    
c00094e3:	90                   	nop

c00094e4 <ReservedFilename::isAtty()>:
c00094e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094e8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00094eb:	31 c0                	xor    eax,eax
c00094ed:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00094f3:	74 09                	je     c00094fe <ReservedFilename::isAtty()+0x1a>
c00094f5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00094fb:	0f 94 c0             	sete   al
c00094fe:	c3                   	ret    
c00094ff:	90                   	nop

c0009500 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009504:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000950b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000950f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009514:	75 08                	jne    c000951e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009516:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000951c:	eb 3d                	jmp    c000955b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000951e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009523:	75 17                	jne    c000953c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009525:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000952a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000952d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009533:	8b 10                	mov    edx,DWORD PTR [eax]
c0009535:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009539:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000953c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009541:	75 04                	jne    c0009547 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009543:	89 0a                	mov    DWORD PTR [edx],ecx
c0009545:	eb 14                	jmp    c000955b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009547:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000954c:	74 c8                	je     c0009516 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000954e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009553:	83 e0 ef             	and    eax,0xffffffef
c0009556:	83 f8 08             	cmp    eax,0x8
c0009559:	76 bb                	jbe    c0009516 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000955b:	31 c0                	xor    eax,eax
c000955d:	c3                   	ret    

c000955e <UnixFile::getFileDescriptor()>:
c000955e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009562:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009565:	c3                   	ret    

c0009566 <UnixFile::UnixFile(int)>:
c0009566:	53                   	push   ebx
c0009567:	83 ec 28             	sub    esp,0x28
c000956a:	ba 88 d9 01 c0       	mov    edx,0xc001d988
c000956f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009573:	89 10                	mov    DWORD PTR [eax],edx
c0009575:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000957d:	0f 8f 8c 01 00 00    	jg     c000970f <UnixFile::UnixFile(int)+0x1a9>
c0009583:	a1 60 f8 01 c0       	mov    eax,ds:0xc001f860
c0009588:	8d 50 01             	lea    edx,[eax+0x1]
c000958b:	89 15 60 f8 01 c0    	mov    DWORD PTR ds:0xc001f860,edx
c0009591:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009595:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009598:	83 ec 08             	sub    esp,0x8
c000959b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000959f:	68 f8 09 02 c0       	push   0xc00209f8
c00095a4:	e8 7f 2e 01 00       	call   c001c428 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	a0 f4 09 02 c0       	mov    al,ds:0xc00209f4
c00095b1:	83 f0 01             	xor    eax,0x1
c00095b4:	84 c0                	test   al,al
c00095b6:	0f 84 54 01 00 00    	je     c0009710 <UnixFile::UnixFile(int)+0x1aa>
c00095bc:	c6 05 f4 09 02 c0 01 	mov    BYTE PTR ds:0xc00209f4,0x1
c00095c3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00095cb:	83 ec 0c             	sub    esp,0xc
c00095ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00095d2:	e8 96 e8 ff ff       	call   c0007e6d <malloc>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	89 c3                	mov    ebx,eax
c00095dc:	83 ec 08             	sub    esp,0x8
c00095df:	68 03 ff ff 0f       	push   0xfffff03
c00095e4:	53                   	push   ebx
c00095e5:	e8 2c 01 00 00       	call   c0009716 <ReservedFilename::ReservedFilename(int)>
c00095ea:	83 c4 10             	add    esp,0x10
c00095ed:	89 1d ec 09 02 c0    	mov    DWORD PTR ds:0xc00209ec,ebx
c00095f3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00095fb:	83 ec 0c             	sub    esp,0xc
c00095fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009602:	e8 66 e8 ff ff       	call   c0007e6d <malloc>
c0009607:	83 c4 10             	add    esp,0x10
c000960a:	89 c3                	mov    ebx,eax
c000960c:	83 ec 08             	sub    esp,0x8
c000960f:	68 01 ff ff 0f       	push   0xfffff01
c0009614:	53                   	push   ebx
c0009615:	e8 fc 00 00 00       	call   c0009716 <ReservedFilename::ReservedFilename(int)>
c000961a:	83 c4 10             	add    esp,0x10
c000961d:	89 1d f0 09 02 c0    	mov    DWORD PTR ds:0xc00209f0,ebx
c0009623:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000962b:	83 ec 0c             	sub    esp,0xc
c000962e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009632:	e8 36 e8 ff ff       	call   c0007e6d <malloc>
c0009637:	83 c4 10             	add    esp,0x10
c000963a:	89 c3                	mov    ebx,eax
c000963c:	83 ec 08             	sub    esp,0x8
c000963f:	68 00 ff ff 0f       	push   0xfffff00
c0009644:	53                   	push   ebx
c0009645:	e8 cc 00 00 00       	call   c0009716 <ReservedFilename::ReservedFilename(int)>
c000964a:	83 c4 10             	add    esp,0x10
c000964d:	89 1d e4 09 02 c0    	mov    DWORD PTR ds:0xc00209e4,ebx
c0009653:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000965b:	83 ec 0c             	sub    esp,0xc
c000965e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009662:	e8 06 e8 ff ff       	call   c0007e6d <malloc>
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	89 c3                	mov    ebx,eax
c000966c:	83 ec 08             	sub    esp,0x8
c000966f:	68 02 ff ff 0f       	push   0xfffff02
c0009674:	53                   	push   ebx
c0009675:	e8 9c 00 00 00       	call   c0009716 <ReservedFilename::ReservedFilename(int)>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	89 1d e8 09 02 c0    	mov    DWORD PTR ds:0xc00209e8,ebx
c0009683:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000968b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009690:	7f 7e                	jg     c0009710 <UnixFile::UnixFile(int)+0x1aa>
c0009692:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000969a:	83 ec 0c             	sub    esp,0xc
c000969d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096a1:	e8 c7 e7 ff ff       	call   c0007e6d <malloc>
c00096a6:	83 c4 10             	add    esp,0x10
c00096a9:	89 c3                	mov    ebx,eax
c00096ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096af:	05 10 ff ff 0f       	add    eax,0xfffff10
c00096b4:	83 ec 08             	sub    esp,0x8
c00096b7:	50                   	push   eax
c00096b8:	53                   	push   ebx
c00096b9:	e8 58 00 00 00       	call   c0009716 <ReservedFilename::ReservedFilename(int)>
c00096be:	83 c4 10             	add    esp,0x10
c00096c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096c5:	89 1c 85 c0 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf640],ebx
c00096cc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00096d4:	83 ec 0c             	sub    esp,0xc
c00096d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096db:	e8 8d e7 ff ff       	call   c0007e6d <malloc>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	89 c3                	mov    ebx,eax
c00096e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096e9:	05 20 ff ff 0f       	add    eax,0xfffff20
c00096ee:	83 ec 08             	sub    esp,0x8
c00096f1:	50                   	push   eax
c00096f2:	53                   	push   ebx
c00096f3:	e8 1e 00 00 00       	call   c0009716 <ReservedFilename::ReservedFilename(int)>
c00096f8:	83 c4 10             	add    esp,0x10
c00096fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096ff:	89 1c 85 80 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf680],ebx
c0009706:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000970a:	e9 7c ff ff ff       	jmp    c000968b <UnixFile::UnixFile(int)+0x125>
c000970f:	90                   	nop
c0009710:	83 c4 28             	add    esp,0x28
c0009713:	5b                   	pop    ebx
c0009714:	c3                   	ret    
c0009715:	90                   	nop

c0009716 <ReservedFilename::ReservedFilename(int)>:
c0009716:	83 ec 0c             	sub    esp,0xc
c0009719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000971d:	83 ec 08             	sub    esp,0x8
c0009720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009724:	50                   	push   eax
c0009725:	e8 3c fe ff ff       	call   c0009566 <UnixFile::UnixFile(int)>
c000972a:	83 c4 10             	add    esp,0x10
c000972d:	ba a4 d9 01 c0       	mov    edx,0xc001d9a4
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	89 10                	mov    DWORD PTR [eax],edx
c0009738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000973c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009740:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009743:	90                   	nop
c0009744:	83 c4 0c             	add    esp,0xc
c0009747:	c3                   	ret    

c0009748 <UnixFile::~UnixFile()>:
c0009748:	83 ec 1c             	sub    esp,0x1c
c000974b:	ba 88 d9 01 c0       	mov    edx,0xc001d988
c0009750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009754:	89 10                	mov    DWORD PTR [eax],edx
c0009756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000975a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000975d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009762:	7f 73                	jg     c00097d7 <UnixFile::~UnixFile()+0x8f>
c0009764:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000976c:	83 ec 0c             	sub    esp,0xc
c000976f:	68 f8 09 02 c0       	push   0xc00209f8
c0009774:	e8 83 2d 01 00       	call   c001c4fc <LinkedList<UnixFile>::getFirstElement()>
c0009779:	83 c4 10             	add    esp,0x10
c000977c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009780:	83 ec 0c             	sub    esp,0xc
c0009783:	68 f8 09 02 c0       	push   0xc00209f8
c0009788:	e8 77 2d 01 00       	call   c001c504 <LinkedList<UnixFile>::removeFirst()>
c000978d:	83 c4 10             	add    esp,0x10
c0009790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009794:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009798:	74 40                	je     c00097da <UnixFile::~UnixFile()+0x92>
c000979a:	83 ec 08             	sub    esp,0x8
c000979d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00097a1:	68 f8 09 02 c0       	push   0xc00209f8
c00097a6:	e8 7d 2c 01 00       	call   c001c428 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00097ab:	83 c4 10             	add    esp,0x10
c00097ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097b2:	8d 50 01             	lea    edx,[eax+0x1]
c00097b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097b9:	3d 88 13 00 00       	cmp    eax,0x1388
c00097be:	0f 94 c0             	sete   al
c00097c1:	84 c0                	test   al,al
c00097c3:	74 a7                	je     c000976c <UnixFile::~UnixFile()+0x24>
c00097c5:	83 ec 0c             	sub    esp,0xc
c00097c8:	68 60 d9 01 c0       	push   0xc001d960
c00097cd:	e8 79 6f 00 00       	call   c001074b <Krnl::panic(char const*)>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	eb 95                	jmp    c000976c <UnixFile::~UnixFile()+0x24>
c00097d7:	90                   	nop
c00097d8:	eb 01                	jmp    c00097db <UnixFile::~UnixFile()+0x93>
c00097da:	90                   	nop
c00097db:	90                   	nop
c00097dc:	83 c4 1c             	add    esp,0x1c
c00097df:	c3                   	ret    

c00097e0 <UnixFile::~UnixFile()>:
c00097e0:	83 ec 0c             	sub    esp,0xc
c00097e3:	83 ec 0c             	sub    esp,0xc
c00097e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097ea:	e8 59 ff ff ff       	call   c0009748 <UnixFile::~UnixFile()>
c00097ef:	83 c4 10             	add    esp,0x10
c00097f2:	83 ec 08             	sub    esp,0x8
c00097f5:	6a 0c                	push   0xc
c00097f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097fb:	e8 06 13 00 00       	call   c000ab06 <operator delete(void*, unsigned long)>
c0009800:	83 c4 10             	add    esp,0x10
c0009803:	83 c4 0c             	add    esp,0xc
c0009806:	c3                   	ret    
c0009807:	90                   	nop

c0009808 <ReservedFilename::~ReservedFilename()>:
c0009808:	83 ec 0c             	sub    esp,0xc
c000980b:	ba a4 d9 01 c0       	mov    edx,0xc001d9a4
c0009810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009814:	89 10                	mov    DWORD PTR [eax],edx
c0009816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000981a:	83 ec 0c             	sub    esp,0xc
c000981d:	50                   	push   eax
c000981e:	e8 25 ff ff ff       	call   c0009748 <UnixFile::~UnixFile()>
c0009823:	83 c4 10             	add    esp,0x10
c0009826:	90                   	nop
c0009827:	83 c4 0c             	add    esp,0xc
c000982a:	c3                   	ret    
c000982b:	90                   	nop

c000982c <ReservedFilename::~ReservedFilename()>:
c000982c:	83 ec 0c             	sub    esp,0xc
c000982f:	83 ec 0c             	sub    esp,0xc
c0009832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009836:	e8 cd ff ff ff       	call   c0009808 <ReservedFilename::~ReservedFilename()>
c000983b:	83 c4 10             	add    esp,0x10
c000983e:	83 ec 08             	sub    esp,0x8
c0009841:	6a 0c                	push   0xc
c0009843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009847:	e8 ba 12 00 00       	call   c000ab06 <operator delete(void*, unsigned long)>
c000984c:	83 c4 10             	add    esp,0x10
c000984f:	83 c4 0c             	add    esp,0xc
c0009852:	c3                   	ret    

c0009853 <getFromFileDescriptor(int)>:
c0009853:	53                   	push   ebx
c0009854:	83 ec 08             	sub    esp,0x8
c0009857:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000985b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009861:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009867:	7f 2c                	jg     c0009895 <getFromFileDescriptor(int)+0x42>
c0009869:	83 ec 0c             	sub    esp,0xc
c000986c:	68 f8 09 02 c0       	push   0xc00209f8
c0009871:	e8 86 2c 01 00       	call   c001c4fc <LinkedList<UnixFile>::getFirstElement()>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	85 c0                	test   eax,eax
c000987b:	75 04                	jne    c0009881 <getFromFileDescriptor(int)+0x2e>
c000987d:	31 c0                	xor    eax,eax
c000987f:	eb 6e                	jmp    c00098ef <getFromFileDescriptor(int)+0x9c>
c0009881:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009884:	74 69                	je     c00098ef <getFromFileDescriptor(int)+0x9c>
c0009886:	52                   	push   edx
c0009887:	52                   	push   edx
c0009888:	50                   	push   eax
c0009889:	68 f8 09 02 c0       	push   0xc00209f8
c000988e:	e8 13 2d 01 00       	call   c001c5a6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009893:	eb e1                	jmp    c0009876 <getFromFileDescriptor(int)+0x23>
c0009895:	a1 ec 09 02 c0       	mov    eax,ds:0xc00209ec
c000989a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00098a0:	74 4d                	je     c00098ef <getFromFileDescriptor(int)+0x9c>
c00098a2:	a1 f0 09 02 c0       	mov    eax,ds:0xc00209f0
c00098a7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00098ad:	74 40                	je     c00098ef <getFromFileDescriptor(int)+0x9c>
c00098af:	a1 e8 09 02 c0       	mov    eax,ds:0xc00209e8
c00098b4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00098ba:	74 33                	je     c00098ef <getFromFileDescriptor(int)+0x9c>
c00098bc:	a1 e4 09 02 c0       	mov    eax,ds:0xc00209e4
c00098c1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00098c7:	74 26                	je     c00098ef <getFromFileDescriptor(int)+0x9c>
c00098c9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00098cf:	83 f8 08             	cmp    eax,0x8
c00098d2:	77 09                	ja     c00098dd <getFromFileDescriptor(int)+0x8a>
c00098d4:	8b 04 85 c0 09 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf640]
c00098db:	eb 12                	jmp    c00098ef <getFromFileDescriptor(int)+0x9c>
c00098dd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00098e3:	83 fb 08             	cmp    ebx,0x8
c00098e6:	77 95                	ja     c000987d <getFromFileDescriptor(int)+0x2a>
c00098e8:	8b 04 9d 80 09 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf680]
c00098ef:	83 c4 08             	add    esp,0x8
c00098f2:	5b                   	pop    ebx
c00098f3:	c3                   	ret    

c00098f4 <__static_initialization_and_destruction_0(int, int)>:
c00098f4:	83 ec 0c             	sub    esp,0xc
c00098f7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00098fc:	75 34                	jne    c0009932 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098fe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009906:	75 2a                	jne    c0009932 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009908:	83 ec 0c             	sub    esp,0xc
c000990b:	68 f8 09 02 c0       	push   0xc00209f8
c0009910:	e8 d1 2a 01 00       	call   c001c3e6 <LinkedList<UnixFile>::LinkedList()>
c0009915:	83 c4 10             	add    esp,0x10
c0009918:	83 ec 04             	sub    esp,0x4
c000991b:	68 8c f6 01 c0       	push   0xc001f68c
c0009920:	68 f8 09 02 c0       	push   0xc00209f8
c0009925:	68 e4 c3 01 c0       	push   0xc001c3e4
c000992a:	e8 87 11 00 00       	call   c000aab6 <__cxa_atexit>
c000992f:	83 c4 10             	add    esp,0x10
c0009932:	90                   	nop
c0009933:	83 c4 0c             	add    esp,0xc
c0009936:	c3                   	ret    

c0009937 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009937:	83 ec 0c             	sub    esp,0xc
c000993a:	83 ec 08             	sub    esp,0x8
c000993d:	68 ff ff 00 00       	push   0xffff
c0009942:	6a 01                	push   0x1
c0009944:	e8 ab ff ff ff       	call   c00098f4 <__static_initialization_and_destruction_0(int, int)>
c0009949:	83 c4 10             	add    esp,0x10
c000994c:	83 c4 0c             	add    esp,0xc
c000994f:	c3                   	ret    

c0009950 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009950:	53                   	push   ebx
c0009951:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009955:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009959:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000995f:	89 c8                	mov    eax,ecx
c0009961:	d1 e8                	shr    eax,1
c0009963:	03 05 68 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f868
c0009969:	83 e1 01             	and    ecx,0x1
c000996c:	8a 10                	mov    dl,BYTE PTR [eax]
c000996e:	75 09                	jne    c0009979 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009970:	83 e2 f0             	and    edx,0xfffffff0
c0009973:	09 da                	or     edx,ebx
c0009975:	88 10                	mov    BYTE PTR [eax],dl
c0009977:	5b                   	pop    ebx
c0009978:	c3                   	ret    
c0009979:	c1 e3 04             	shl    ebx,0x4
c000997c:	83 e2 0f             	and    edx,0xf
c000997f:	09 da                	or     edx,ebx
c0009981:	88 10                	mov    BYTE PTR [eax],dl
c0009983:	5b                   	pop    ebx
c0009984:	c3                   	ret    

c0009985 <Virt::getPageState(unsigned long)>:
c0009985:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009989:	8b 0d 68 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f868
c000998f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009995:	89 d0                	mov    eax,edx
c0009997:	d1 e8                	shr    eax,1
c0009999:	83 e2 01             	and    edx,0x1
c000999c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000999f:	75 04                	jne    c00099a5 <Virt::getPageState(unsigned long)+0x20>
c00099a1:	83 e0 0f             	and    eax,0xf
c00099a4:	c3                   	ret    
c00099a5:	c0 e8 04             	shr    al,0x4
c00099a8:	c3                   	ret    

c00099a9 <Virt::allocateKernelVirtualPages(int)>:
c00099a9:	55                   	push   ebp
c00099aa:	31 ed                	xor    ebp,ebp
c00099ac:	57                   	push   edi
c00099ad:	56                   	push   esi
c00099ae:	53                   	push   ebx
c00099af:	31 db                	xor    ebx,ebx
c00099b1:	83 ec 1c             	sub    esp,0x1c
c00099b4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00099b8:	8b 3d 64 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f864
c00099be:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00099c3:	57                   	push   edi
c00099c4:	e8 bc ff ff ff       	call   c0009985 <Virt::getPageState(unsigned long)>
c00099c9:	5a                   	pop    edx
c00099ca:	84 c0                	test   al,al
c00099cc:	75 3a                	jne    c0009a08 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00099ce:	85 db                	test   ebx,ebx
c00099d0:	75 02                	jne    c00099d4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00099d2:	89 fd                	mov    ebp,edi
c00099d4:	43                   	inc    ebx
c00099d5:	39 f3                	cmp    ebx,esi
c00099d7:	74 5a                	je     c0009a33 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00099d9:	47                   	inc    edi
c00099da:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099e0:	76 31                	jbe    c0009a13 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00099e2:	c7 05 64 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f864,0xc8000
c00099ec:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00099f1:	75 28                	jne    c0009a1b <Virt::allocateKernelVirtualPages(int)+0x72>
c00099f3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00099f8:	bf 00 80 0c 00       	mov    edi,0xc8000
c00099fd:	57                   	push   edi
c00099fe:	e8 82 ff ff ff       	call   c0009985 <Virt::getPageState(unsigned long)>
c0009a03:	5a                   	pop    edx
c0009a04:	84 c0                	test   al,al
c0009a06:	74 c6                	je     c00099ce <Virt::allocateKernelVirtualPages(int)+0x25>
c0009a08:	31 db                	xor    ebx,ebx
c0009a0a:	47                   	inc    edi
c0009a0b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009a11:	77 cf                	ja     c00099e2 <Virt::allocateKernelVirtualPages(int)+0x39>
c0009a13:	89 3d 64 f8 01 c0    	mov    DWORD PTR ds:0xc001f864,edi
c0009a19:	eb a8                	jmp    c00099c3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a1b:	83 ec 0c             	sub    esp,0xc
c0009a1e:	68 b8 d9 01 c0       	push   0xc001d9b8
c0009a23:	e8 23 6d 00 00       	call   c001074b <Krnl::panic(char const*)>
c0009a28:	8b 3d 64 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f864
c0009a2e:	83 c4 10             	add    esp,0x10
c0009a31:	eb 90                	jmp    c00099c3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a33:	89 2d 64 f8 01 c0    	mov    DWORD PTR ds:0xc001f864,ebp
c0009a39:	4b                   	dec    ebx
c0009a3a:	74 5f                	je     c0009a9b <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009a3c:	85 f6                	test   esi,esi
c0009a3e:	74 3d                	je     c0009a7d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a40:	89 e8                	mov    eax,ebp
c0009a42:	31 db                	xor    ebx,ebx
c0009a44:	8d 7e ff             	lea    edi,[esi-0x1]
c0009a47:	eb 14                	jmp    c0009a5d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009a49:	6a 01                	push   0x1
c0009a4b:	43                   	inc    ebx
c0009a4c:	50                   	push   eax
c0009a4d:	e8 fe fe ff ff       	call   c0009950 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a52:	58                   	pop    eax
c0009a53:	39 f3                	cmp    ebx,esi
c0009a55:	5a                   	pop    edx
c0009a56:	74 25                	je     c0009a7d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a58:	a1 64 f8 01 c0       	mov    eax,ds:0xc001f864
c0009a5d:	8d 50 01             	lea    edx,[eax+0x1]
c0009a60:	85 db                	test   ebx,ebx
c0009a62:	89 15 64 f8 01 c0    	mov    DWORD PTR ds:0xc001f864,edx
c0009a68:	74 20                	je     c0009a8a <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009a6a:	39 df                	cmp    edi,ebx
c0009a6c:	75 db                	jne    c0009a49 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009a6e:	6a 03                	push   0x3
c0009a70:	43                   	inc    ebx
c0009a71:	50                   	push   eax
c0009a72:	e8 d9 fe ff ff       	call   c0009950 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a77:	59                   	pop    ecx
c0009a78:	39 f3                	cmp    ebx,esi
c0009a7a:	58                   	pop    eax
c0009a7b:	75 db                	jne    c0009a58 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a7d:	83 c4 1c             	add    esp,0x1c
c0009a80:	89 e8                	mov    eax,ebp
c0009a82:	5b                   	pop    ebx
c0009a83:	c1 e0 0c             	shl    eax,0xc
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	5d                   	pop    ebp
c0009a89:	c3                   	ret    
c0009a8a:	6a 02                	push   0x2
c0009a8c:	bb 01 00 00 00       	mov    ebx,0x1
c0009a91:	50                   	push   eax
c0009a92:	e8 b9 fe ff ff       	call   c0009950 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a97:	58                   	pop    eax
c0009a98:	5a                   	pop    edx
c0009a99:	eb bd                	jmp    c0009a58 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a9b:	6a 04                	push   0x4
c0009a9d:	8d 45 01             	lea    eax,[ebp+0x1]
c0009aa0:	55                   	push   ebp
c0009aa1:	a3 64 f8 01 c0       	mov    ds:0xc001f864,eax
c0009aa6:	e8 a5 fe ff ff       	call   c0009950 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009aab:	59                   	pop    ecx
c0009aac:	89 e8                	mov    eax,ebp
c0009aae:	5b                   	pop    ebx
c0009aaf:	c1 e0 0c             	shl    eax,0xc
c0009ab2:	83 c4 1c             	add    esp,0x1c
c0009ab5:	5b                   	pop    ebx
c0009ab6:	5e                   	pop    esi
c0009ab7:	5f                   	pop    edi
c0009ab8:	5d                   	pop    ebp
c0009ab9:	c3                   	ret    

c0009aba <Virt::freeSwapfilePage(unsigned long)>:
c0009aba:	53                   	push   ebx
c0009abb:	8b 15 0c 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a0c
c0009ac1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ac5:	b8 01 00 00 00       	mov    eax,0x1
c0009aca:	89 cb                	mov    ebx,ecx
c0009acc:	d3 e0                	shl    eax,cl
c0009ace:	c1 eb 05             	shr    ebx,0x5
c0009ad1:	f7 d0                	not    eax
c0009ad3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009ad6:	5b                   	pop    ebx
c0009ad7:	c3                   	ret    

c0009ad8 <Virt::swapIDToSector(unsigned long)>:
c0009ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009adc:	0f af 05 6c f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f86c
c0009ae3:	03 05 74 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f874
c0009ae9:	c3                   	ret    

c0009aea <Virt::allocateSwapfilePage()>:
c0009aea:	55                   	push   ebp
c0009aeb:	31 d2                	xor    edx,edx
c0009aed:	57                   	push   edi
c0009aee:	56                   	push   esi
c0009aef:	53                   	push   ebx
c0009af0:	83 ec 0c             	sub    esp,0xc
c0009af3:	8b 0d 6c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f86c
c0009af9:	a1 70 f8 01 c0       	mov    eax,ds:0xc001f870
c0009afe:	f7 f1                	div    ecx
c0009b00:	39 0d 70 f8 01 c0    	cmp    DWORD PTR ds:0xc001f870,ecx
c0009b06:	72 2d                	jb     c0009b35 <Virt::allocateSwapfilePage()+0x4b>
c0009b08:	8b 35 0c 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020a0c
c0009b0e:	8b 16                	mov    edx,DWORD PTR [esi]
c0009b10:	f6 c2 01             	test   dl,0x1
c0009b13:	74 3c                	je     c0009b51 <Virt::allocateSwapfilePage()+0x67>
c0009b15:	31 c9                	xor    ecx,ecx
c0009b17:	bf 01 00 00 00       	mov    edi,0x1
c0009b1c:	eb 12                	jmp    c0009b30 <Virt::allocateSwapfilePage()+0x46>
c0009b1e:	89 fd                	mov    ebp,edi
c0009b20:	89 ca                	mov    edx,ecx
c0009b22:	d3 e5                	shl    ebp,cl
c0009b24:	c1 ea 05             	shr    edx,0x5
c0009b27:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009b2a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009b2c:	85 ea                	test   edx,ebp
c0009b2e:	74 2a                	je     c0009b5a <Virt::allocateSwapfilePage()+0x70>
c0009b30:	41                   	inc    ecx
c0009b31:	39 c8                	cmp    eax,ecx
c0009b33:	77 e9                	ja     c0009b1e <Virt::allocateSwapfilePage()+0x34>
c0009b35:	83 ec 0c             	sub    esp,0xc
c0009b38:	68 1f db 01 c0       	push   0xc001db1f
c0009b3d:	e8 09 6c 00 00       	call   c001074b <Krnl::panic(char const*)>
c0009b42:	83 c4 10             	add    esp,0x10
c0009b45:	31 c9                	xor    ecx,ecx
c0009b47:	83 c4 0c             	add    esp,0xc
c0009b4a:	89 c8                	mov    eax,ecx
c0009b4c:	5b                   	pop    ebx
c0009b4d:	5e                   	pop    esi
c0009b4e:	5f                   	pop    edi
c0009b4f:	5d                   	pop    ebp
c0009b50:	c3                   	ret    
c0009b51:	89 f3                	mov    ebx,esi
c0009b53:	bd 01 00 00 00       	mov    ebp,0x1
c0009b58:	31 c9                	xor    ecx,ecx
c0009b5a:	09 ea                	or     edx,ebp
c0009b5c:	89 c8                	mov    eax,ecx
c0009b5e:	89 13                	mov    DWORD PTR [ebx],edx
c0009b60:	83 c4 0c             	add    esp,0xc
c0009b63:	5b                   	pop    ebx
c0009b64:	5e                   	pop    esi
c0009b65:	5f                   	pop    edi
c0009b66:	5d                   	pop    ebp
c0009b67:	c3                   	ret    

c0009b68 <Virt::virtualMemorySetup()>:
c0009b68:	53                   	push   ebx
c0009b69:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b6e:	6a 0f                	push   0xf
c0009b70:	53                   	push   ebx
c0009b71:	43                   	inc    ebx
c0009b72:	e8 d9 fd ff ff       	call   c0009950 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b77:	58                   	pop    eax
c0009b78:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b7e:	5a                   	pop    edx
c0009b7f:	75 ed                	jne    c0009b6e <Virt::virtualMemorySetup()+0x6>
c0009b81:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b86:	6a 00                	push   0x0
c0009b88:	53                   	push   ebx
c0009b89:	43                   	inc    ebx
c0009b8a:	e8 c1 fd ff ff       	call   c0009950 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b8f:	59                   	pop    ecx
c0009b90:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b96:	58                   	pop    eax
c0009b97:	75 ed                	jne    c0009b86 <Virt::virtualMemorySetup()+0x1e>
c0009b99:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009b9e:	6a 0f                	push   0xf
c0009ba0:	53                   	push   ebx
c0009ba1:	43                   	inc    ebx
c0009ba2:	e8 a9 fd ff ff       	call   c0009950 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009ba7:	58                   	pop    eax
c0009ba8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009bae:	5a                   	pop    edx
c0009baf:	75 ed                	jne    c0009b9e <Virt::virtualMemorySetup()+0x36>
c0009bb1:	5b                   	pop    ebx
c0009bb2:	c3                   	ret    

c0009bb3 <Virt::setupPageSwapping(int)>:
c0009bb3:	53                   	push   ebx
c0009bb4:	83 ec 0c             	sub    esp,0xc
c0009bb7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009bbb:	a1 88 2e 02 c0       	mov    eax,ds:0xc0022e88
c0009bc0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009bc6:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bc8:	53                   	push   ebx
c0009bc9:	c1 e3 0b             	shl    ebx,0xb
c0009bcc:	68 36 db 01 c0       	push   0xc001db36
c0009bd1:	50                   	push   eax
c0009bd2:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009bd5:	89 1d 70 f8 01 c0    	mov    DWORD PTR ds:0xc001f870,ebx
c0009bdb:	c6 05 78 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f878,0x43
c0009be2:	c1 eb 08             	shr    ebx,0x8
c0009be5:	a3 74 f8 01 c0       	mov    ds:0xc001f874,eax
c0009bea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009bed:	c7 05 6c f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f86c,0x8
c0009bf7:	e8 71 e2 ff ff       	call   c0007e6d <malloc>
c0009bfc:	83 c4 0c             	add    esp,0xc
c0009bff:	89 c1                	mov    ecx,eax
c0009c01:	a3 0c 0a 02 c0       	mov    ds:0xc0020a0c,eax
c0009c06:	31 d2                	xor    edx,edx
c0009c08:	a1 70 f8 01 c0       	mov    eax,ds:0xc001f870
c0009c0d:	f7 35 6c f8 01 c0    	div    DWORD PTR ds:0xc001f86c
c0009c13:	c1 e8 05             	shr    eax,0x5
c0009c16:	50                   	push   eax
c0009c17:	6a 00                	push   0x0
c0009c19:	51                   	push   ecx
c0009c1a:	e8 d1 68 ff ff       	call   c00004f0 <memset>
c0009c1f:	83 c4 18             	add    esp,0x18
c0009c22:	5b                   	pop    ebx
c0009c23:	c3                   	ret    

c0009c24 <VAS::VAS()>:
c0009c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c28:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c33:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c3e:	a3 10 0a 02 c0       	mov    ds:0xc0020a10,eax
c0009c43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c47:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009c4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c4f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c56:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009c5d:	90                   	nop
c0009c5e:	c3                   	ret    
c0009c5f:	90                   	nop

c0009c60 <VAS::VAS(VAS*)>:
c0009c60:	83 ec 0c             	sub    esp,0xc
c0009c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c72:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c79:	83 ec 0c             	sub    esp,0xc
c0009c7c:	68 d8 d9 01 c0       	push   0xc001d9d8
c0009c81:	e8 c5 6a 00 00       	call   c001074b <Krnl::panic(char const*)>
c0009c86:	83 c4 10             	add    esp,0x10
c0009c89:	90                   	nop
c0009c8a:	83 c4 0c             	add    esp,0xc
c0009c8d:	c3                   	ret    

c0009c8e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009c8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c92:	89 c2                	mov    edx,eax
c0009c94:	c1 e8 0a             	shr    eax,0xa
c0009c97:	c1 ea 16             	shr    edx,0x16
c0009c9a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009c9f:	19 c9                	sbb    ecx,ecx
c0009ca1:	c1 e2 0c             	shl    edx,0xc
c0009ca4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009caa:	25 fc 0f 00 00       	and    eax,0xffc
c0009caf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009cb6:	01 d0                	add    eax,edx
c0009cb8:	c3                   	ret    
c0009cb9:	90                   	nop

c0009cba <VAS::getPageTableEntry(unsigned long)>:
c0009cba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009cbe:	89 ca                	mov    edx,ecx
c0009cc0:	c1 e9 0a             	shr    ecx,0xa
c0009cc3:	c1 ea 16             	shr    edx,0x16
c0009cc6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009ccc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009cd2:	c1 e0 0c             	shl    eax,0xc
c0009cd5:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009cd8:	c3                   	ret    

c0009cd9 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009cd9:	57                   	push   edi
c0009cda:	56                   	push   esi
c0009cdb:	be 01 00 00 00       	mov    esi,0x1
c0009ce0:	53                   	push   ebx
c0009ce1:	83 ec 10             	sub    esp,0x10
c0009ce4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009ce8:	c1 eb 0c             	shr    ebx,0xc
c0009ceb:	eb 3f                	jmp    c0009d2c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009ced:	83 ec 08             	sub    esp,0x8
c0009cf0:	a1 10 0a 02 c0       	mov    eax,ds:0xc0020a10
c0009cf5:	57                   	push   edi
c0009cf6:	50                   	push   eax
c0009cf7:	e8 be ff ff ff       	call   c0009cba <VAS::getPageTableEntry(unsigned long)>
c0009cfc:	83 c4 10             	add    esp,0x10
c0009cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d01:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d05:	f6 c4 04             	test   ah,0x4
c0009d08:	75 60                	jne    c0009d6a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009d0a:	80 fa 04             	cmp    dl,0x4
c0009d0d:	74 79                	je     c0009d88 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009d0f:	80 fa 02             	cmp    dl,0x2
c0009d12:	0f 84 89 00 00 00    	je     c0009da1 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009d18:	80 fa 03             	cmp    dl,0x3
c0009d1b:	0f 84 ae 00 00 00    	je     c0009dcf <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009d21:	fe ca                	dec    dl
c0009d23:	0f 84 93 00 00 00    	je     c0009dbc <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d29:	43                   	inc    ebx
c0009d2a:	31 f6                	xor    esi,esi
c0009d2c:	53                   	push   ebx
c0009d2d:	89 df                	mov    edi,ebx
c0009d2f:	e8 51 fc ff ff       	call   c0009985 <Virt::getPageState(unsigned long)>
c0009d34:	c1 e7 0c             	shl    edi,0xc
c0009d37:	5a                   	pop    edx
c0009d38:	84 c0                	test   al,al
c0009d3a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009d3e:	75 ad                	jne    c0009ced <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009d40:	83 ec 0c             	sub    esp,0xc
c0009d43:	68 4d db 01 c0       	push   0xc001db4d
c0009d48:	e8 fe 69 00 00       	call   c001074b <Krnl::panic(char const*)>
c0009d4d:	5a                   	pop    edx
c0009d4e:	59                   	pop    ecx
c0009d4f:	57                   	push   edi
c0009d50:	8b 3d 10 0a 02 c0    	mov    edi,DWORD PTR ds:0xc0020a10
c0009d56:	57                   	push   edi
c0009d57:	e8 5e ff ff ff       	call   c0009cba <VAS::getPageTableEntry(unsigned long)>
c0009d5c:	83 c4 10             	add    esp,0x10
c0009d5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d61:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d65:	f6 c4 04             	test   ah,0x4
c0009d68:	74 bf                	je     c0009d29 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009d6a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009d6e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d73:	83 ec 0c             	sub    esp,0xc
c0009d76:	50                   	push   eax
c0009d77:	e8 5c e4 ff ff       	call   c00081d8 <Phys::freePage(unsigned long)>
c0009d7c:	83 c4 10             	add    esp,0x10
c0009d7f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d83:	80 fa 04             	cmp    dl,0x4
c0009d86:	75 87                	jne    c0009d0f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009d88:	89 f0                	mov    eax,esi
c0009d8a:	84 c0                	test   al,al
c0009d8c:	75 47                	jne    c0009dd5 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009d8e:	c7 44 24 20 fc d9 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d9fc
c0009d96:	83 c4 10             	add    esp,0x10
c0009d99:	5b                   	pop    ebx
c0009d9a:	5e                   	pop    esi
c0009d9b:	5f                   	pop    edi
c0009d9c:	e9 aa 69 00 00       	jmp    c001074b <Krnl::panic(char const*)>
c0009da1:	89 f0                	mov    eax,esi
c0009da3:	84 c0                	test   al,al
c0009da5:	75 15                	jne    c0009dbc <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009da7:	83 ec 0c             	sub    esp,0xc
c0009daa:	68 69 db 01 c0       	push   0xc001db69
c0009daf:	e8 97 69 00 00       	call   c001074b <Krnl::panic(char const*)>
c0009db4:	83 c4 10             	add    esp,0x10
c0009db7:	e9 6d ff ff ff       	jmp    c0009d29 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009dbc:	83 ec 08             	sub    esp,0x8
c0009dbf:	6a 00                	push   0x0
c0009dc1:	53                   	push   ebx
c0009dc2:	e8 89 fb ff ff       	call   c0009950 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	e9 5a ff ff ff       	jmp    c0009d29 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009dcf:	89 f0                	mov    eax,esi
c0009dd1:	84 c0                	test   al,al
c0009dd3:	75 15                	jne    c0009dea <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009dd5:	83 ec 08             	sub    esp,0x8
c0009dd8:	6a 00                	push   0x0
c0009dda:	53                   	push   ebx
c0009ddb:	e8 70 fb ff ff       	call   c0009950 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009de0:	83 c4 10             	add    esp,0x10
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	5b                   	pop    ebx
c0009de7:	5e                   	pop    esi
c0009de8:	5f                   	pop    edi
c0009de9:	c3                   	ret    
c0009dea:	c7 44 24 20 85 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001db85
c0009df2:	83 c4 10             	add    esp,0x10
c0009df5:	5b                   	pop    ebx
c0009df6:	5e                   	pop    esi
c0009df7:	5f                   	pop    edi
c0009df8:	e9 4e 69 00 00       	jmp    c001074b <Krnl::panic(char const*)>
c0009dfd:	90                   	nop

c0009dfe <VAS::freeAllocatedPages(unsigned long)>:
c0009dfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009e02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e06:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009e0a:	74 09                	je     c0009e15 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009e0c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009e10:	e9 c4 fe ff ff       	jmp    c0009cd9 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e15:	c7 44 24 04 20 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da20
c0009e1d:	e9 da 0d 00 00       	jmp    c000abfc <Dbg::kprintf(char const*, ...)>

c0009e22 <VAS::virtualToPhysical(unsigned long)>:
c0009e22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e26:	50                   	push   eax
c0009e27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e2b:	52                   	push   edx
c0009e2c:	e8 89 fe ff ff       	call   c0009cba <VAS::getPageTableEntry(unsigned long)>
c0009e31:	59                   	pop    ecx
c0009e32:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e34:	5a                   	pop    edx
c0009e35:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009e3a:	c3                   	ret    
c0009e3b:	90                   	nop

c0009e3c <VAS::reflagRange(unsigned long, int, int, int)>:
c0009e3c:	55                   	push   ebp
c0009e3d:	57                   	push   edi
c0009e3e:	56                   	push   esi
c0009e3f:	53                   	push   ebx
c0009e40:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009e48:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009e4c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009e50:	85 db                	test   ebx,ebx
c0009e52:	7e 22                	jle    c0009e76 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009e54:	c1 e3 0c             	shl    ebx,0xc
c0009e57:	01 f3                	add    ebx,esi
c0009e59:	56                   	push   esi
c0009e5a:	81 c6 00 10 00 00    	add    esi,0x1000
c0009e60:	55                   	push   ebp
c0009e61:	e8 54 fe ff ff       	call   c0009cba <VAS::getPageTableEntry(unsigned long)>
c0009e66:	5a                   	pop    edx
c0009e67:	59                   	pop    ecx
c0009e68:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009e6a:	21 f9                	and    ecx,edi
c0009e6c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009e70:	39 f3                	cmp    ebx,esi
c0009e72:	89 08                	mov    DWORD PTR [eax],ecx
c0009e74:	75 e3                	jne    c0009e59 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009e76:	5b                   	pop    ebx
c0009e77:	5e                   	pop    esi
c0009e78:	5f                   	pop    edi
c0009e79:	5d                   	pop    ebp
c0009e7a:	c3                   	ret    
c0009e7b:	90                   	nop

c0009e7c <VAS::setToWriteCombining(unsigned long, int)>:
c0009e7c:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0009e81:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e87:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009e8e:	75 01                	jne    c0009e91 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009e90:	c3                   	ret    
c0009e91:	68 80 00 00 00       	push   0x80
c0009e96:	6a ff                	push   0xffffffff
c0009e98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e9c:	50                   	push   eax
c0009e9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009ea1:	52                   	push   edx
c0009ea2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009ea6:	51                   	push   ecx
c0009ea7:	e8 90 ff ff ff       	call   c0009e3c <VAS::reflagRange(unsigned long, int, int, int)>
c0009eac:	83 c4 14             	add    esp,0x14
c0009eaf:	c3                   	ret    

c0009eb0 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009eb0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009eb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009eb9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009ebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ec0:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009ec3:	19 c0                	sbb    eax,eax
c0009ec5:	83 ca 03             	or     edx,0x3
c0009ec8:	83 e0 fc             	and    eax,0xfffffffc
c0009ecb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009ed2:	0f 20 d8             	mov    eax,cr3
c0009ed5:	0f 22 d8             	mov    cr3,eax
c0009ed8:	c3                   	ret    
c0009ed9:	90                   	nop

c0009eda <VAS::~VAS()>:
c0009eda:	83 ec 2c             	sub    esp,0x2c
c0009edd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ee5:	fa                   	cli    
c0009ee6:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0009eeb:	40                   	inc    eax
c0009eec:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0009ef1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ef6:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ef8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009efb:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009f01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009f05:	6a 01                	push   0x1
c0009f07:	50                   	push   eax
c0009f08:	e8 a3 ff ff ff       	call   c0009eb0 <VAS::mapOtherVASIn(bool, VAS*)>
c0009f0d:	83 c4 0c             	add    esp,0xc
c0009f10:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009f18:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009f20:	0f 8f d4 00 00 00    	jg     c0009ffa <VAS::~VAS()+0x120>
c0009f26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f31:	c1 e2 02             	shl    edx,0x2
c0009f34:	01 d0                	add    eax,edx
c0009f36:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f40:	83 e0 01             	and    eax,0x1
c0009f43:	0f 84 a8 00 00 00    	je     c0009ff1 <VAS::~VAS()+0x117>
c0009f49:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009f51:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009f59:	7f 72                	jg     c0009fcd <VAS::~VAS()+0xf3>
c0009f5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f5f:	c1 e0 0a             	shl    eax,0xa
c0009f62:	89 c2                	mov    edx,eax
c0009f64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009f68:	01 d0                	add    eax,edx
c0009f6a:	c1 e0 0c             	shl    eax,0xc
c0009f6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f71:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009f76:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009f7b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009f81:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009f85:	6a 01                	push   0x1
c0009f87:	50                   	push   eax
c0009f88:	e8 01 fd ff ff       	call   c0009c8e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009f8d:	83 c4 0c             	add    esp,0xc
c0009f90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f98:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009fa2:	25 01 04 00 00       	and    eax,0x401
c0009fa7:	3d 01 04 00 00       	cmp    eax,0x401
c0009fac:	75 19                	jne    c0009fc7 <VAS::~VAS()+0xed>
c0009fae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009fb2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fb7:	83 ec 0c             	sub    esp,0xc
c0009fba:	50                   	push   eax
c0009fbb:	e8 18 e2 ff ff       	call   c00081d8 <Phys::freePage(unsigned long)>
c0009fc0:	83 c4 10             	add    esp,0x10
c0009fc3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fc7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fcb:	eb 84                	jmp    c0009f51 <VAS::~VAS()+0x77>
c0009fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fd1:	25 00 04 00 00       	and    eax,0x400
c0009fd6:	74 19                	je     c0009ff1 <VAS::~VAS()+0x117>
c0009fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fdc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fe1:	83 ec 0c             	sub    esp,0xc
c0009fe4:	50                   	push   eax
c0009fe5:	e8 ee e1 ff ff       	call   c00081d8 <Phys::freePage(unsigned long)>
c0009fea:	83 c4 10             	add    esp,0x10
c0009fed:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009ff1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009ff5:	e9 1e ff ff ff       	jmp    c0009f18 <VAS::~VAS()+0x3e>
c0009ffa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ffe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a001:	83 ec 0c             	sub    esp,0xc
c000a004:	50                   	push   eax
c000a005:	e8 cf fc ff ff       	call   c0009cd9 <Virt::freeKernelVirtualPages(unsigned long)>
c000a00a:	83 c4 10             	add    esp,0x10
c000a00d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a011:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a014:	83 ec 0c             	sub    esp,0xc
c000a017:	50                   	push   eax
c000a018:	e8 bb e1 ff ff       	call   c00081d8 <Phys::freePage(unsigned long)>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a024:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000a029:	48                   	dec    eax
c000a02a:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000a02f:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000a034:	85 c0                	test   eax,eax
c000a036:	75 01                	jne    c000a039 <VAS::~VAS()+0x15f>
c000a038:	fb                   	sti    
c000a039:	90                   	nop
c000a03a:	83 c4 2c             	add    esp,0x2c
c000a03d:	c3                   	ret    

c000a03e <VAS::mapPage(unsigned long, unsigned long, int)>:
c000a03e:	55                   	push   ebp
c000a03f:	57                   	push   edi
c000a040:	56                   	push   esi
c000a041:	53                   	push   ebx
c000a042:	83 ec 1c             	sub    esp,0x1c
c000a045:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a049:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a04d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000a053:	77 0b                	ja     c000a060 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000a055:	0f 20 d8             	mov    eax,cr3
c000a058:	0f 20 d8             	mov    eax,cr3
c000a05b:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000a05e:	75 47                	jne    c000a0a7 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000a060:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a064:	09 d8                	or     eax,ebx
c000a066:	a9 ff 0f 00 00       	test   eax,0xfff
c000a06b:	75 57                	jne    c000a0c4 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000a06d:	89 de                	mov    esi,ebx
c000a06f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a072:	c1 ee 16             	shr    esi,0x16
c000a075:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000a07c:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000a080:	74 54                	je     c000a0d6 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000a082:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a086:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000a08c:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a090:	c1 e6 0c             	shl    esi,0xc
c000a093:	c1 eb 0a             	shr    ebx,0xa
c000a096:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a09c:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000a09f:	83 c4 1c             	add    esp,0x1c
c000a0a2:	5b                   	pop    ebx
c000a0a3:	5e                   	pop    esi
c000a0a4:	5f                   	pop    edi
c000a0a5:	5d                   	pop    ebp
c000a0a6:	c3                   	ret    
c000a0a7:	83 ec 0c             	sub    esp,0xc
c000a0aa:	68 44 da 01 c0       	push   0xc001da44
c000a0af:	e8 48 0b 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0bb:	09 d8                	or     eax,ebx
c000a0bd:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0c2:	74 a9                	je     c000a06d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0c4:	83 ec 0c             	sub    esp,0xc
c000a0c7:	68 ac da 01 c0       	push   0xc001daac
c000a0cc:	e8 7a 66 00 00       	call   c001074b <Krnl::panic(char const*)>
c000a0d1:	83 c4 10             	add    esp,0x10
c000a0d4:	eb 97                	jmp    c000a06d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0da:	e8 5b e1 ff ff       	call   c000823a <Phys::allocatePage()>
c000a0df:	83 ec 0c             	sub    esp,0xc
c000a0e2:	89 c5                	mov    ebp,eax
c000a0e4:	8b 0d 10 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a10
c000a0ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0ee:	6a 01                	push   0x1
c000a0f0:	e8 b4 f8 ff ff       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c000a0f5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a0fc:	6a 01                	push   0x1
c000a0fe:	50                   	push   eax
c000a0ff:	55                   	push   ebp
c000a100:	81 cd 07 04 00 00    	or     ebp,0x407
c000a106:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a10a:	51                   	push   ecx
c000a10b:	e8 28 02 00 00       	call   c000a338 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a110:	83 c4 1c             	add    esp,0x1c
c000a113:	68 00 10 00 00       	push   0x1000
c000a118:	6a 00                	push   0x0
c000a11a:	50                   	push   eax
c000a11b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a11f:	e8 cc 63 ff ff       	call   c00004f0 <memset>
c000a124:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a128:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a12b:	e8 a9 fb ff ff       	call   c0009cd9 <Virt::freeKernelVirtualPages(unsigned long)>
c000a130:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a134:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a137:	83 c4 10             	add    esp,0x10
c000a13a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000a13d:	e9 40 ff ff ff       	jmp    c000a082 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000a142 <VAS::allocatePages(int, int)>:
c000a142:	55                   	push   ebp
c000a143:	57                   	push   edi
c000a144:	56                   	push   esi
c000a145:	53                   	push   ebx
c000a146:	83 ec 1c             	sub    esp,0x1c
c000a149:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a14d:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000a152:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a158:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a15e:	83 e0 01             	and    eax,0x1
c000a161:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000a165:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a169:	0f 85 cc 00 00 00    	jne    c000a23b <VAS::allocatePages(int, int)+0xf9>
c000a16f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a172:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a176:	85 c0                	test   eax,eax
c000a178:	0f 84 a1 00 00 00    	je     c000a21f <VAS::allocatePages(int, int)+0xdd>
c000a17e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a182:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a186:	c1 e6 0c             	shl    esi,0xc
c000a189:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000a18d:	85 c0                	test   eax,eax
c000a18f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000a192:	7e 33                	jle    c000a1c7 <VAS::allocatePages(int, int)+0x85>
c000a194:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a198:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a19c:	81 cd 00 04 00 00    	or     ebp,0x400
c000a1a2:	e8 93 e0 ff ff       	call   c000823a <Phys::allocatePage()>
c000a1a7:	55                   	push   ebp
c000a1a8:	53                   	push   ebx
c000a1a9:	50                   	push   eax
c000a1aa:	57                   	push   edi
c000a1ab:	e8 8e fe ff ff       	call   c000a03e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a1b0:	83 c4 10             	add    esp,0x10
c000a1b3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1b8:	74 03                	je     c000a1bd <VAS::allocatePages(int, int)+0x7b>
c000a1ba:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1bd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1c3:	39 de                	cmp    esi,ebx
c000a1c5:	75 db                	jne    c000a1a2 <VAS::allocatePages(int, int)+0x60>
c000a1c7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1cc:	75 12                	jne    c000a1e0 <VAS::allocatePages(int, int)+0x9e>
c000a1ce:	0f 20 d8             	mov    eax,cr3
c000a1d1:	0f 22 d8             	mov    cr3,eax
c000a1d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1d8:	83 c4 1c             	add    esp,0x1c
c000a1db:	5b                   	pop    ebx
c000a1dc:	5e                   	pop    esi
c000a1dd:	5f                   	pop    edi
c000a1de:	5d                   	pop    ebp
c000a1df:	c3                   	ret    
c000a1e0:	c1 ee 0a             	shr    esi,0xa
c000a1e3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a1e7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a1ed:	c1 eb 0a             	shr    ebx,0xa
c000a1f0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000a1f6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a1fc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a202:	39 c3                	cmp    ebx,eax
c000a204:	77 ce                	ja     c000a1d4 <VAS::allocatePages(int, int)+0x92>
c000a206:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a209:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a20f:	39 d8                	cmp    eax,ebx
c000a211:	73 f3                	jae    c000a206 <VAS::allocatePages(int, int)+0xc4>
c000a213:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a217:	83 c4 1c             	add    esp,0x1c
c000a21a:	5b                   	pop    ebx
c000a21b:	5e                   	pop    esi
c000a21c:	5f                   	pop    edi
c000a21d:	5d                   	pop    ebp
c000a21e:	c3                   	ret    
c000a21f:	83 ec 0c             	sub    esp,0xc
c000a222:	68 d0 da 01 c0       	push   0xc001dad0
c000a227:	e8 1f 65 00 00       	call   c001074b <Krnl::panic(char const*)>
c000a22c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a22f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a233:	83 c4 10             	add    esp,0x10
c000a236:	e9 43 ff ff ff       	jmp    c000a17e <VAS::allocatePages(int, int)+0x3c>
c000a23b:	83 ec 0c             	sub    esp,0xc
c000a23e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000a242:	51                   	push   ecx
c000a243:	e8 61 f7 ff ff       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c000a248:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a24c:	83 c4 10             	add    esp,0x10
c000a24f:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000a254:	0f 87 9b 00 00 00    	ja     c000a2f5 <VAS::allocatePages(int, int)+0x1b3>
c000a25a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a25e:	85 d2                	test   edx,edx
c000a260:	7e 3c                	jle    c000a29e <VAS::allocatePages(int, int)+0x15c>
c000a262:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a266:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a26a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a26e:	c1 e5 0c             	shl    ebp,0xc
c000a271:	81 ce 00 04 00 00    	or     esi,0x400
c000a277:	01 dd                	add    ebp,ebx
c000a279:	e8 bc df ff ff       	call   c000823a <Phys::allocatePage()>
c000a27e:	56                   	push   esi
c000a27f:	53                   	push   ebx
c000a280:	50                   	push   eax
c000a281:	57                   	push   edi
c000a282:	e8 b7 fd ff ff       	call   c000a03e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a287:	83 c4 10             	add    esp,0x10
c000a28a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a28f:	74 03                	je     c000a294 <VAS::allocatePages(int, int)+0x152>
c000a291:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a294:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a29a:	39 dd                	cmp    ebp,ebx
c000a29c:	75 db                	jne    c000a279 <VAS::allocatePages(int, int)+0x137>
c000a29e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a2a3:	0f 84 25 ff ff ff    	je     c000a1ce <VAS::allocatePages(int, int)+0x8c>
c000a2a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a2ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a2b1:	89 d3                	mov    ebx,edx
c000a2b3:	c1 e0 0c             	shl    eax,0xc
c000a2b6:	c1 eb 0a             	shr    ebx,0xa
c000a2b9:	01 d0                	add    eax,edx
c000a2bb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a2c1:	c1 e8 0a             	shr    eax,0xa
c000a2c4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a2ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2cf:	2d 00 00 40 00       	sub    eax,0x400000
c000a2d4:	39 c3                	cmp    ebx,eax
c000a2d6:	0f 87 f8 fe ff ff    	ja     c000a1d4 <VAS::allocatePages(int, int)+0x92>
c000a2dc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a2df:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a2e5:	39 d8                	cmp    eax,ebx
c000a2e7:	73 f3                	jae    c000a2dc <VAS::allocatePages(int, int)+0x19a>
c000a2e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2ed:	83 c4 1c             	add    esp,0x1c
c000a2f0:	5b                   	pop    ebx
c000a2f1:	5e                   	pop    esi
c000a2f2:	5f                   	pop    edi
c000a2f3:	5d                   	pop    ebp
c000a2f4:	c3                   	ret    
c000a2f5:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000a2fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a300:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a307:	0f 84 4d ff ff ff    	je     c000a25a <VAS::allocatePages(int, int)+0x118>
c000a30d:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000a315:	e9 40 ff ff ff       	jmp    c000a25a <VAS::allocatePages(int, int)+0x118>

c000a31a <VAS::setCPUSpecific(unsigned long)>:
c000a31a:	83 ec 0c             	sub    esp,0xc
c000a31d:	6a 05                	push   0x5
c000a31f:	68 00 00 40 c2       	push   0xc2400000
c000a324:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a328:	50                   	push   eax
c000a329:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a32d:	52                   	push   edx
c000a32e:	e8 0b fd ff ff       	call   c000a03e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a333:	83 c4 1c             	add    esp,0x1c
c000a336:	c3                   	ret    
c000a337:	90                   	nop

c000a338 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a338:	55                   	push   ebp
c000a339:	57                   	push   edi
c000a33a:	56                   	push   esi
c000a33b:	53                   	push   ebx
c000a33c:	83 ec 1c             	sub    esp,0x1c
c000a33f:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000a344:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a348:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a34e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a352:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a358:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a35c:	83 e0 01             	and    eax,0x1
c000a35f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a363:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a367:	85 c0                	test   eax,eax
c000a369:	7e 39                	jle    c000a3a4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000a36b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a36f:	89 f3                	mov    ebx,esi
c000a371:	c1 e0 0c             	shl    eax,0xc
c000a374:	01 f0                	add    eax,esi
c000a376:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a37a:	55                   	push   ebp
c000a37b:	53                   	push   ebx
c000a37c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a380:	29 f0                	sub    eax,esi
c000a382:	01 d8                	add    eax,ebx
c000a384:	50                   	push   eax
c000a385:	57                   	push   edi
c000a386:	e8 b3 fc ff ff       	call   c000a03e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a38b:	83 c4 10             	add    esp,0x10
c000a38e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a393:	74 03                	je     c000a398 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000a395:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a398:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a39e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000a3a2:	75 d6                	jne    c000a37a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a3a4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a3a9:	75 10                	jne    c000a3bb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000a3ab:	0f 20 d8             	mov    eax,cr3
c000a3ae:	0f 22 d8             	mov    cr3,eax
c000a3b1:	83 c4 1c             	add    esp,0x1c
c000a3b4:	89 f0                	mov    eax,esi
c000a3b6:	5b                   	pop    ebx
c000a3b7:	5e                   	pop    esi
c000a3b8:	5f                   	pop    edi
c000a3b9:	5d                   	pop    ebp
c000a3ba:	c3                   	ret    
c000a3bb:	89 f3                	mov    ebx,esi
c000a3bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a3c1:	c1 eb 0a             	shr    ebx,0xa
c000a3c4:	c1 e0 0c             	shl    eax,0xc
c000a3c7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3cd:	01 f0                	add    eax,esi
c000a3cf:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a3d5:	c1 e8 0a             	shr    eax,0xa
c000a3d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3dd:	2d 00 00 40 00       	sub    eax,0x400000
c000a3e2:	39 c3                	cmp    ebx,eax
c000a3e4:	77 cb                	ja     c000a3b1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000a3e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a3e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a3ef:	39 d8                	cmp    eax,ebx
c000a3f1:	73 f3                	jae    c000a3e6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000a3f3:	83 c4 1c             	add    esp,0x1c
c000a3f6:	89 f0                	mov    eax,esi
c000a3f8:	5b                   	pop    ebx
c000a3f9:	5e                   	pop    esi
c000a3fa:	5f                   	pop    edi
c000a3fb:	5d                   	pop    ebp
c000a3fc:	c3                   	ret    
c000a3fd:	90                   	nop

c000a3fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a3fe:	55                   	push   ebp
c000a3ff:	57                   	push   edi
c000a400:	56                   	push   esi
c000a401:	53                   	push   ebx
c000a402:	83 ec 1c             	sub    esp,0x1c
c000a405:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a409:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a40d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000a411:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a415:	a9 ff 0f 00 00       	test   eax,0xfff
c000a41a:	75 4a                	jne    c000a466 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000a41c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a420:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a423:	c1 eb 16             	shr    ebx,0x16
c000a426:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000a42d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000a431:	74 4d                	je     c000a480 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000a433:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a437:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a43b:	c1 e8 0a             	shr    eax,0xa
c000a43e:	80 fa 01             	cmp    dl,0x1
c000a441:	19 d2                	sbb    edx,edx
c000a443:	c1 e3 0c             	shl    ebx,0xc
c000a446:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000a44a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a450:	25 fc 0f 00 00       	and    eax,0xffc
c000a455:	01 d8                	add    eax,ebx
c000a457:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a45e:	83 c4 1c             	add    esp,0x1c
c000a461:	5b                   	pop    ebx
c000a462:	5e                   	pop    esi
c000a463:	5f                   	pop    edi
c000a464:	5d                   	pop    ebp
c000a465:	c3                   	ret    
c000a466:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a46a:	83 ec 0c             	sub    esp,0xc
c000a46d:	68 fc da 01 c0       	push   0xc001dafc
c000a472:	e8 d4 62 00 00       	call   c001074b <Krnl::panic(char const*)>
c000a477:	83 c4 10             	add    esp,0x10
c000a47a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a47e:	eb 9c                	jmp    c000a41c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000a480:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a484:	e8 b1 dd ff ff       	call   c000823a <Phys::allocatePage()>
c000a489:	83 ec 0c             	sub    esp,0xc
c000a48c:	89 c5                	mov    ebp,eax
c000a48e:	8b 0d 10 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a10
c000a494:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a498:	6a 01                	push   0x1
c000a49a:	e8 0a f5 ff ff       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c000a49f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a4a6:	6a 01                	push   0x1
c000a4a8:	50                   	push   eax
c000a4a9:	55                   	push   ebp
c000a4aa:	81 cd 07 04 00 00    	or     ebp,0x407
c000a4b0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a4b4:	51                   	push   ecx
c000a4b5:	e8 7e fe ff ff       	call   c000a338 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a4ba:	83 c4 1c             	add    esp,0x1c
c000a4bd:	68 00 10 00 00       	push   0x1000
c000a4c2:	6a 00                	push   0x0
c000a4c4:	50                   	push   eax
c000a4c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4c9:	e8 22 60 ff ff       	call   c00004f0 <memset>
c000a4ce:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4d2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a4d5:	e8 ff f7 ff ff       	call   c0009cd9 <Virt::freeKernelVirtualPages(unsigned long)>
c000a4da:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a4dd:	83 c4 10             	add    esp,0x10
c000a4e0:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a4e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a4e7:	e9 47 ff ff ff       	jmp    c000a433 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a4ec <VAS::VAS(bool)>:
c000a4ec:	53                   	push   ebx
c000a4ed:	83 ec 28             	sub    esp,0x28
c000a4f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a4f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a4f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a503:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a507:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a50e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a512:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a516:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a519:	e8 1c dd ff ff       	call   c000823a <Phys::allocatePage()>
c000a51e:	89 c2                	mov    edx,eax
c000a520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a524:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a527:	8b 1d 10 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a10
c000a52d:	83 ec 0c             	sub    esp,0xc
c000a530:	6a 01                	push   0x1
c000a532:	e8 72 f4 ff ff       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c000a537:	83 c4 10             	add    esp,0x10
c000a53a:	89 c2                	mov    edx,eax
c000a53c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a540:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a543:	83 ec 0c             	sub    esp,0xc
c000a546:	6a 03                	push   0x3
c000a548:	6a 01                	push   0x1
c000a54a:	52                   	push   edx
c000a54b:	50                   	push   eax
c000a54c:	53                   	push   ebx
c000a54d:	e8 e6 fd ff ff       	call   c000a338 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a552:	83 c4 20             	add    esp,0x20
c000a555:	89 c2                	mov    edx,eax
c000a557:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a55b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a55e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a566:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a56e:	7f 1c                	jg     c000a58c <VAS::VAS(bool)+0xa0>
c000a570:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a574:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a577:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a57b:	c1 e2 02             	shl    edx,0x2
c000a57e:	01 d0                	add    eax,edx
c000a580:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a586:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a58a:	eb da                	jmp    c000a566 <VAS::VAS(bool)+0x7a>
c000a58c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a594:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a59c:	7f 7a                	jg     c000a618 <VAS::VAS(bool)+0x12c>
c000a59e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5a2:	2d 00 02 00 00       	sub    eax,0x200
c000a5a7:	c1 e0 0c             	shl    eax,0xc
c000a5aa:	83 c8 03             	or     eax,0x3
c000a5ad:	89 c2                	mov    edx,eax
c000a5af:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000a5b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a5ba:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a5c0:	83 e0 10             	and    eax,0x10
c000a5c3:	84 c0                	test   al,al
c000a5c5:	74 07                	je     c000a5ce <VAS::VAS(bool)+0xe2>
c000a5c7:	b8 00 01 00 00       	mov    eax,0x100
c000a5cc:	eb 05                	jmp    c000a5d3 <VAS::VAS(bool)+0xe7>
c000a5ce:	b8 00 00 00 00       	mov    eax,0x0
c000a5d3:	09 d0                	or     eax,edx
c000a5d5:	89 c1                	mov    ecx,eax
c000a5d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5e2:	c1 e2 02             	shl    edx,0x2
c000a5e5:	01 d0                	add    eax,edx
c000a5e7:	89 ca                	mov    edx,ecx
c000a5e9:	89 10                	mov    DWORD PTR [eax],edx
c000a5eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5ef:	2d 40 03 00 00       	sub    eax,0x340
c000a5f4:	83 f8 7f             	cmp    eax,0x7f
c000a5f7:	77 16                	ja     c000a60f <VAS::VAS(bool)+0x123>
c000a5f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5fd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a600:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a604:	c1 e2 02             	shl    edx,0x2
c000a607:	01 d0                	add    eax,edx
c000a609:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a60f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a613:	e9 7c ff ff ff       	jmp    c000a594 <VAS::VAS(bool)+0xa8>
c000a618:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000a61d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a623:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a629:	83 e0 10             	and    eax,0x10
c000a62c:	84 c0                	test   al,al
c000a62e:	74 07                	je     c000a637 <VAS::VAS(bool)+0x14b>
c000a630:	b8 03 41 00 00       	mov    eax,0x4103
c000a635:	eb 05                	jmp    c000a63c <VAS::VAS(bool)+0x150>
c000a637:	b8 03 40 00 00       	mov    eax,0x4003
c000a63c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a640:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a643:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a649:	89 02                	mov    DWORD PTR [edx],eax
c000a64b:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000a650:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a656:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a65c:	83 ec 08             	sub    esp,0x8
c000a65f:	50                   	push   eax
c000a660:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a664:	e8 b1 fc ff ff       	call   c000a31a <VAS::setCPUSpecific(unsigned long)>
c000a669:	83 c4 10             	add    esp,0x10
c000a66c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a670:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a673:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000a678:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a67e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a684:	83 e0 10             	and    eax,0x10
c000a687:	84 c0                	test   al,al
c000a689:	74 07                	je     c000a692 <VAS::VAS(bool)+0x1a6>
c000a68b:	b8 00 01 00 00       	mov    eax,0x100
c000a690:	eb 05                	jmp    c000a697 <VAS::VAS(bool)+0x1ab>
c000a692:	b8 00 00 00 00       	mov    eax,0x0
c000a697:	09 c2                	or     edx,eax
c000a699:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a69d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a6a0:	05 fc 0f 00 00       	add    eax,0xffc
c000a6a5:	83 ca 03             	or     edx,0x3
c000a6a8:	89 10                	mov    DWORD PTR [eax],edx
c000a6aa:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000a6af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6b5:	83 ec 0c             	sub    esp,0xc
c000a6b8:	50                   	push   eax
c000a6b9:	e8 12 1c 00 00       	call   c000c2d0 <Device::getName()>
c000a6be:	83 c4 10             	add    esp,0x10
c000a6c1:	83 ec 08             	sub    esp,0x8
c000a6c4:	68 9f db 01 c0       	push   0xc001db9f
c000a6c9:	50                   	push   eax
c000a6ca:	e8 31 60 ff ff       	call   c0000700 <strcmp>
c000a6cf:	83 c4 10             	add    esp,0x10
c000a6d2:	85 c0                	test   eax,eax
c000a6d4:	0f 94 c0             	sete   al
c000a6d7:	84 c0                	test   al,al
c000a6d9:	0f 84 87 00 00 00    	je     c000a766 <VAS::VAS(bool)+0x27a>
c000a6df:	fa                   	cli    
c000a6e0:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000a6e5:	40                   	inc    eax
c000a6e6:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000a6eb:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000a6f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6f6:	05 7c 09 00 00       	add    eax,0x97c
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	50                   	push   eax
c000a6ff:	e8 66 d2 ff ff       	call   c000796a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a704:	83 c4 10             	add    esp,0x10
c000a707:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a70c:	89 c3                	mov    ebx,eax
c000a70e:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000a713:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a719:	05 7c 09 00 00       	add    eax,0x97c
c000a71e:	83 ec 0c             	sub    esp,0xc
c000a721:	50                   	push   eax
c000a722:	e8 43 d2 ff ff       	call   c000796a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a727:	83 c4 10             	add    esp,0x10
c000a72a:	83 ec 08             	sub    esp,0x8
c000a72d:	50                   	push   eax
c000a72e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a732:	e8 83 f5 ff ff       	call   c0009cba <VAS::getPageTableEntry(unsigned long)>
c000a737:	83 c4 10             	add    esp,0x10
c000a73a:	8b 00                	mov    eax,DWORD PTR [eax]
c000a73c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a741:	6a 11                	push   0x11
c000a743:	53                   	push   ebx
c000a744:	50                   	push   eax
c000a745:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a749:	e8 f0 f8 ff ff       	call   c000a03e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a74e:	83 c4 10             	add    esp,0x10
c000a751:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000a756:	48                   	dec    eax
c000a757:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000a75c:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000a761:	85 c0                	test   eax,eax
c000a763:	75 01                	jne    c000a766 <VAS::VAS(bool)+0x27a>
c000a765:	fb                   	sti    
c000a766:	90                   	nop
c000a767:	83 c4 28             	add    esp,0x28
c000a76a:	5b                   	pop    ebx
c000a76b:	c3                   	ret    

c000a76c <VAS::evict(unsigned long)>:
c000a76c:	55                   	push   ebp
c000a76d:	57                   	push   edi
c000a76e:	56                   	push   esi
c000a76f:	53                   	push   ebx
c000a770:	83 ec 1c             	sub    esp,0x1c
c000a773:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a777:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a77b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a77f:	e8 66 f3 ff ff       	call   c0009aea <Virt::allocateSwapfilePage()>
c000a784:	8b 0d 6c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f86c
c000a78a:	89 c7                	mov    edi,eax
c000a78c:	85 c9                	test   ecx,ecx
c000a78e:	7e 3e                	jle    c000a7ce <VAS::evict(unsigned long)+0x62>
c000a790:	89 ee                	mov    esi,ebp
c000a792:	31 db                	xor    ebx,ebx
c000a794:	83 ec 0c             	sub    esp,0xc
c000a797:	57                   	push   edi
c000a798:	e8 3b f3 ff ff       	call   c0009ad8 <Virt::swapIDToSector(unsigned long)>
c000a79d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a7a0:	01 d8                	add    eax,ebx
c000a7a2:	6a 01                	push   0x1
c000a7a4:	31 d2                	xor    edx,edx
c000a7a6:	43                   	inc    ebx
c000a7a7:	52                   	push   edx
c000a7a8:	81 c6 00 02 00 00    	add    esi,0x200
c000a7ae:	50                   	push   eax
c000a7af:	0f be 05 78 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f878
c000a7b6:	8b 14 85 7c 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd284]
c000a7bd:	52                   	push   edx
c000a7be:	e8 8d 2b 00 00       	call   c000d350 <LogicalDisk::write(unsigned long long, int, void*)>
c000a7c3:	83 c4 20             	add    esp,0x20
c000a7c6:	39 1d 6c f8 01 c0    	cmp    DWORD PTR ds:0xc001f86c,ebx
c000a7cc:	7f c6                	jg     c000a794 <VAS::evict(unsigned long)+0x28>
c000a7ce:	83 ec 08             	sub    esp,0x8
c000a7d1:	c1 e7 0b             	shl    edi,0xb
c000a7d4:	55                   	push   ebp
c000a7d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7d9:	50                   	push   eax
c000a7da:	e8 db f4 ff ff       	call   c0009cba <VAS::getPageTableEntry(unsigned long)>
c000a7df:	8b 10                	mov    edx,DWORD PTR [eax]
c000a7e1:	89 d1                	mov    ecx,edx
c000a7e3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a7e9:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a7ef:	09 cf                	or     edi,ecx
c000a7f1:	89 38                	mov    DWORD PTR [eax],edi
c000a7f3:	89 14 24             	mov    DWORD PTR [esp],edx
c000a7f6:	ff 05 08 0a 02 c0    	inc    DWORD PTR ds:0xc0020a08
c000a7fc:	e8 d7 d9 ff ff       	call   c00081d8 <Phys::freePage(unsigned long)>
c000a801:	0f 20 d8             	mov    eax,cr3
c000a804:	0f 22 d8             	mov    cr3,eax
c000a807:	a1 04 0a 02 c0       	mov    eax,ds:0xc0020a04
c000a80c:	c7 44 24 40 ad db 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dbad
c000a814:	8d 50 01             	lea    edx,[eax+0x1]
c000a817:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a81b:	89 15 04 0a 02 c0    	mov    DWORD PTR ds:0xc0020a04,edx
c000a821:	83 c4 2c             	add    esp,0x2c
c000a824:	5b                   	pop    ebx
c000a825:	5e                   	pop    esi
c000a826:	5f                   	pop    edi
c000a827:	5d                   	pop    ebp
c000a828:	e9 cf 03 00 00       	jmp    c000abfc <Dbg::kprintf(char const*, ...)>
c000a82d:	90                   	nop

c000a82e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a82e:	55                   	push   ebp
c000a82f:	57                   	push   edi
c000a830:	56                   	push   esi
c000a831:	53                   	push   ebx
c000a832:	83 ec 14             	sub    esp,0x14
c000a835:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a839:	53                   	push   ebx
c000a83a:	68 be db 01 c0       	push   0xc001dbbe
c000a83f:	e8 b8 03 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c000a844:	83 c4 10             	add    esp,0x10
c000a847:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a84d:	74 21                	je     c000a870 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a84f:	83 ec 08             	sub    esp,0x8
c000a852:	53                   	push   ebx
c000a853:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a857:	57                   	push   edi
c000a858:	e8 5d f4 ff ff       	call   c0009cba <VAS::getPageTableEntry(unsigned long)>
c000a85d:	83 c4 10             	add    esp,0x10
c000a860:	89 c6                	mov    esi,eax
c000a862:	85 c0                	test   eax,eax
c000a864:	74 0a                	je     c000a870 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a866:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a868:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a86e:	74 0a                	je     c000a87a <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a870:	31 c0                	xor    eax,eax
c000a872:	83 c4 0c             	add    esp,0xc
c000a875:	5b                   	pop    ebx
c000a876:	5e                   	pop    esi
c000a877:	5f                   	pop    edi
c000a878:	5d                   	pop    ebp
c000a879:	c3                   	ret    
c000a87a:	e8 bb d9 ff ff       	call   c000823a <Phys::allocatePage()>
c000a87f:	c1 ed 0b             	shr    ebp,0xb
c000a882:	8b 16                	mov    edx,DWORD PTR [esi]
c000a884:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a88a:	09 c2                	or     edx,eax
c000a88c:	81 ca 01 08 00 00    	or     edx,0x801
c000a892:	89 16                	mov    DWORD PTR [esi],edx
c000a894:	8b 35 6c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f86c
c000a89a:	85 f6                	test   esi,esi
c000a89c:	7e 3e                	jle    c000a8dc <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a89e:	89 df                	mov    edi,ebx
c000a8a0:	31 f6                	xor    esi,esi
c000a8a2:	83 ec 0c             	sub    esp,0xc
c000a8a5:	55                   	push   ebp
c000a8a6:	e8 2d f2 ff ff       	call   c0009ad8 <Virt::swapIDToSector(unsigned long)>
c000a8ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a8ae:	01 f0                	add    eax,esi
c000a8b0:	6a 01                	push   0x1
c000a8b2:	31 d2                	xor    edx,edx
c000a8b4:	46                   	inc    esi
c000a8b5:	52                   	push   edx
c000a8b6:	81 c7 00 02 00 00    	add    edi,0x200
c000a8bc:	50                   	push   eax
c000a8bd:	0f be 05 78 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f878
c000a8c4:	8b 0c 85 7c 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd284]
c000a8cb:	51                   	push   ecx
c000a8cc:	e8 13 2a 00 00       	call   c000d2e4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a8d1:	83 c4 20             	add    esp,0x20
c000a8d4:	39 35 6c f8 01 c0    	cmp    DWORD PTR ds:0xc001f86c,esi
c000a8da:	7f c6                	jg     c000a8a2 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a8dc:	a1 08 0a 02 c0       	mov    eax,ds:0xc0020a08
c000a8e1:	48                   	dec    eax
c000a8e2:	52                   	push   edx
c000a8e3:	a3 08 0a 02 c0       	mov    ds:0xc0020a08,eax
c000a8e8:	50                   	push   eax
c000a8e9:	53                   	push   ebx
c000a8ea:	68 d1 db 01 c0       	push   0xc001dbd1
c000a8ef:	e8 08 03 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c000a8f4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a8f7:	e8 be f1 ff ff       	call   c0009aba <Virt::freeSwapfilePage(unsigned long)>
c000a8fc:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000a901:	83 c4 10             	add    esp,0x10
c000a904:	48                   	dec    eax
c000a905:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000a90a:	85 c0                	test   eax,eax
c000a90c:	75 01                	jne    c000a90f <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a90e:	fb                   	sti    
c000a90f:	0f 20 d8             	mov    eax,cr3
c000a912:	0f 22 d8             	mov    cr3,eax
c000a915:	b0 01                	mov    al,0x1
c000a917:	e9 56 ff ff ff       	jmp    c000a872 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a91c <VAS::scanForEviction()>:
c000a91c:	57                   	push   edi
c000a91d:	31 ff                	xor    edi,edi
c000a91f:	56                   	push   esi
c000a920:	53                   	push   ebx
c000a921:	83 ec 10             	sub    esp,0x10
c000a924:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a928:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a92b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a931:	75 0e                	jne    c000a941 <VAS::scanForEviction()+0x25>
c000a933:	89 da                	mov    edx,ebx
c000a935:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a938:	c1 ea 16             	shr    edx,0x16
c000a93b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a93f:	74 4e                	je     c000a98f <VAS::scanForEviction()+0x73>
c000a941:	53                   	push   ebx
c000a942:	56                   	push   esi
c000a943:	e8 72 f3 ff ff       	call   c0009cba <VAS::getPageTableEntry(unsigned long)>
c000a948:	5a                   	pop    edx
c000a949:	8b 10                	mov    edx,DWORD PTR [eax]
c000a94b:	59                   	pop    ecx
c000a94c:	89 d1                	mov    ecx,edx
c000a94e:	81 e1 01 08 00 00    	and    ecx,0x801
c000a954:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a95a:	74 3e                	je     c000a99a <VAS::scanForEviction()+0x7e>
c000a95c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a962:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a968:	76 2b                	jbe    c000a995 <VAS::scanForEviction()+0x79>
c000a96a:	47                   	inc    edi
c000a96b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a972:	83 ff 03             	cmp    edi,0x3
c000a975:	74 32                	je     c000a9a9 <VAS::scanForEviction()+0x8d>
c000a977:	31 db                	xor    ebx,ebx
c000a979:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a97f:	75 c0                	jne    c000a941 <VAS::scanForEviction()+0x25>
c000a981:	89 da                	mov    edx,ebx
c000a983:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a986:	c1 ea 16             	shr    edx,0x16
c000a989:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a98d:	75 b2                	jne    c000a941 <VAS::scanForEviction()+0x25>
c000a98f:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a995:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a998:	eb 91                	jmp    c000a92b <VAS::scanForEviction()+0xf>
c000a99a:	f6 c2 20             	test   dl,0x20
c000a99d:	74 13                	je     c000a9b2 <VAS::scanForEviction()+0x96>
c000a99f:	83 e2 df             	and    edx,0xffffffdf
c000a9a2:	89 10                	mov    DWORD PTR [eax],edx
c000a9a4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a9a7:	eb b3                	jmp    c000a95c <VAS::scanForEviction()+0x40>
c000a9a9:	83 c4 10             	add    esp,0x10
c000a9ac:	31 c0                	xor    eax,eax
c000a9ae:	5b                   	pop    ebx
c000a9af:	5e                   	pop    esi
c000a9b0:	5f                   	pop    edi
c000a9b1:	c3                   	ret    
c000a9b2:	83 ec 08             	sub    esp,0x8
c000a9b5:	89 d0                	mov    eax,edx
c000a9b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a9bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a9c0:	53                   	push   ebx
c000a9c1:	68 e6 db 01 c0       	push   0xc001dbe6
c000a9c6:	e8 31 02 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c000a9cb:	58                   	pop    eax
c000a9cc:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a9cf:	5a                   	pop    edx
c000a9d0:	51                   	push   ecx
c000a9d1:	56                   	push   esi
c000a9d2:	e8 95 fd ff ff       	call   c000a76c <VAS::evict(unsigned long)>
c000a9d7:	5b                   	pop    ebx
c000a9d8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a9db:	5f                   	pop    edi
c000a9dc:	50                   	push   eax
c000a9dd:	68 fa db 01 c0       	push   0xc001dbfa
c000a9e2:	e8 15 02 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c000a9e7:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a9ee:	83 c4 10             	add    esp,0x10
c000a9f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	5b                   	pop    ebx
c000a9f9:	5e                   	pop    esi
c000a9fa:	5f                   	pop    edi
c000a9fb:	c3                   	ret    

c000a9fc <mapVASFirstTime>:
c000a9fc:	55                   	push   ebp
c000a9fd:	57                   	push   edi
c000a9fe:	56                   	push   esi
c000a9ff:	53                   	push   ebx
c000aa00:	83 ec 0c             	sub    esp,0xc
c000aa03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000aa08:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000aa0b:	4a                   	dec    edx
c000aa0c:	0f 84 8c 00 00 00    	je     c000aa9e <mapVASFirstTime+0xa2>
c000aa12:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000aa15:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000aa18:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000aa1d:	c1 e5 15             	shl    ebp,0x15
c000aa20:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000aa25:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000aa2b:	29 eb                	sub    ebx,ebp
c000aa2d:	29 ef                	sub    edi,ebp
c000aa2f:	e8 06 d8 ff ff       	call   c000823a <Phys::allocatePage()>
c000aa34:	83 ec 0c             	sub    esp,0xc
c000aa37:	68 03 04 00 00       	push   0x403
c000aa3c:	6a 01                	push   0x1
c000aa3e:	53                   	push   ebx
c000aa3f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa45:	50                   	push   eax
c000aa46:	56                   	push   esi
c000aa47:	e8 ec f8 ff ff       	call   c000a338 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa4c:	83 c4 20             	add    esp,0x20
c000aa4f:	39 fb                	cmp    ebx,edi
c000aa51:	75 dc                	jne    c000aa2f <mapVASFirstTime+0x33>
c000aa53:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000aa58:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000aa5d:	29 eb                	sub    ebx,ebp
c000aa5f:	29 ef                	sub    edi,ebp
c000aa61:	e8 d4 d7 ff ff       	call   c000823a <Phys::allocatePage()>
c000aa66:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000aa6a:	19 d2                	sbb    edx,edx
c000aa6c:	83 ec 0c             	sub    esp,0xc
c000aa6f:	83 e2 04             	and    edx,0x4
c000aa72:	81 c2 03 04 00 00    	add    edx,0x403
c000aa78:	52                   	push   edx
c000aa79:	6a 01                	push   0x1
c000aa7b:	53                   	push   ebx
c000aa7c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa82:	50                   	push   eax
c000aa83:	56                   	push   esi
c000aa84:	e8 af f8 ff ff       	call   c000a338 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa89:	83 c4 20             	add    esp,0x20
c000aa8c:	39 df                	cmp    edi,ebx
c000aa8e:	75 d1                	jne    c000aa61 <mapVASFirstTime+0x65>
c000aa90:	0f 20 d8             	mov    eax,cr3
c000aa93:	0f 22 d8             	mov    cr3,eax
c000aa96:	83 c4 0c             	add    esp,0xc
c000aa99:	5b                   	pop    ebx
c000aa9a:	5e                   	pop    esi
c000aa9b:	5f                   	pop    edi
c000aa9c:	5d                   	pop    ebp
c000aa9d:	c3                   	ret    
c000aa9e:	83 ec 0c             	sub    esp,0xc
c000aaa1:	68 0d dc 01 c0       	push   0xc001dc0d
c000aaa6:	e8 51 01 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c000aaab:	83 c4 10             	add    esp,0x10
c000aaae:	83 c4 0c             	add    esp,0xc
c000aab1:	5b                   	pop    ebx
c000aab2:	5e                   	pop    esi
c000aab3:	5f                   	pop    edi
c000aab4:	5d                   	pop    ebp
c000aab5:	c3                   	ret    

c000aab6 <__cxa_atexit>:
c000aab6:	31 c0                	xor    eax,eax
c000aab8:	c3                   	ret    

c000aab9 <__cxa_finalize>:
c000aab9:	c3                   	ret    

c000aaba <__stack_chk_fail>:
c000aaba:	55                   	push   ebp
c000aabb:	89 e5                	mov    ebp,esp
c000aabd:	83 ec 10             	sub    esp,0x10
c000aac0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aac3:	68 26 dc 01 c0       	push   0xc001dc26
c000aac8:	e8 2f 01 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c000aacd:	58                   	pop    eax
c000aace:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000aad1:	5a                   	pop    edx
c000aad2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000aad5:	68 26 dc 01 c0       	push   0xc001dc26
c000aada:	e8 1d 01 00 00       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c000aadf:	c7 04 24 2e dc 01 c0 	mov    DWORD PTR [esp],0xc001dc2e
c000aae6:	e8 60 5c 00 00       	call   c001074b <Krnl::panic(char const*)>
c000aaeb:	83 c4 10             	add    esp,0x10
c000aaee:	c9                   	leave  
c000aaef:	c3                   	ret    

c000aaf0 <__cxa_pure_virtual>:
c000aaf0:	83 ec 18             	sub    esp,0x18
c000aaf3:	68 46 dc 01 c0       	push   0xc001dc46
c000aaf8:	e8 4e 5c 00 00       	call   c001074b <Krnl::panic(char const*)>
c000aafd:	83 c4 1c             	add    esp,0x1c
c000ab00:	c3                   	ret    

c000ab01 <operator new[](unsigned long)>:
c000ab01:	e9 67 d3 ff ff       	jmp    c0007e6d <malloc>

c000ab06 <operator delete(void*, unsigned long)>:
c000ab06:	e9 82 d3 ff ff       	jmp    c0007e8d <rfree>

c000ab0b <operator delete[](void*)>:
c000ab0b:	e9 7d d3 ff ff       	jmp    c0007e8d <rfree>

c000ab10 <operator delete[](void*, unsigned long)>:
c000ab10:	e9 78 d3 ff ff       	jmp    c0007e8d <rfree>

c000ab15 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ab15:	55                   	push   ebp
c000ab16:	b9 04 00 00 00       	mov    ecx,0x4
c000ab1b:	57                   	push   edi
c000ab1c:	56                   	push   esi
c000ab1d:	be 5b d8 01 c0       	mov    esi,0xc001d85b
c000ab22:	53                   	push   ebx
c000ab23:	83 ec 20             	sub    esp,0x20
c000ab26:	a1 5a d8 01 c0       	mov    eax,ds:0xc001d85a
c000ab2b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ab2f:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000ab33:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ab37:	a1 67 d8 01 c0       	mov    eax,ds:0xc001d867
c000ab3c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ab40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab44:	fc                   	cld    
c000ab45:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ab47:	89 ee                	mov    esi,ebp
c000ab49:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ab4d:	eb 02                	jmp    c000ab51 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ab4f:	89 c6                	mov    esi,eax
c000ab51:	31 d2                	xor    edx,edx
c000ab53:	41                   	inc    ecx
c000ab54:	89 f0                	mov    eax,esi
c000ab56:	f7 f3                	div    ebx
c000ab58:	39 de                	cmp    esi,ebx
c000ab5a:	73 f3                	jae    c000ab4f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ab5c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ab5f:	eb 02                	jmp    c000ab63 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000ab61:	89 c5                	mov    ebp,eax
c000ab63:	31 d2                	xor    edx,edx
c000ab65:	49                   	dec    ecx
c000ab66:	89 e8                	mov    eax,ebp
c000ab68:	f7 f3                	div    ebx
c000ab6a:	39 dd                	cmp    ebp,ebx
c000ab6c:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ab70:	88 11                	mov    BYTE PTR [ecx],dl
c000ab72:	73 ed                	jae    c000ab61 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000ab74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ab78:	83 c4 20             	add    esp,0x20
c000ab7b:	5b                   	pop    ebx
c000ab7c:	5e                   	pop    esi
c000ab7d:	5f                   	pop    edi
c000ab7e:	5d                   	pop    ebp
c000ab7f:	c3                   	ret    

c000ab80 <Dbg::logc(char)>:
c000ab80:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ab84:	f6 05 30 09 02 c0 10 	test   BYTE PTR ds:0xc0020930,0x10
c000ab8b:	75 12                	jne    c000ab9f <Dbg::logc(char)+0x1f>
c000ab8d:	ba fd 03 00 00       	mov    edx,0x3fd
c000ab92:	ec                   	in     al,dx
c000ab93:	a8 20                	test   al,0x20
c000ab95:	74 fb                	je     c000ab92 <Dbg::logc(char)+0x12>
c000ab97:	ba f8 03 00 00       	mov    edx,0x3f8
c000ab9c:	88 c8                	mov    al,cl
c000ab9e:	ee                   	out    dx,al
c000ab9f:	c3                   	ret    

c000aba0 <Dbg::logs(char*)>:
c000aba0:	53                   	push   ebx
c000aba1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000aba5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aba8:	84 c0                	test   al,al
c000abaa:	74 0f                	je     c000abbb <Dbg::logs(char*)+0x1b>
c000abac:	50                   	push   eax
c000abad:	43                   	inc    ebx
c000abae:	e8 cd ff ff ff       	call   c000ab80 <Dbg::logc(char)>
c000abb3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000abb6:	5a                   	pop    edx
c000abb7:	84 c0                	test   al,al
c000abb9:	75 f1                	jne    c000abac <Dbg::logs(char*)+0xc>
c000abbb:	5b                   	pop    ebx
c000abbc:	c3                   	ret    

c000abbd <Dbg::logWriteInt(unsigned int)>:
c000abbd:	83 ec 10             	sub    esp,0x10
c000abc0:	6a 0a                	push   0xa
c000abc2:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abc6:	50                   	push   eax
c000abc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000abcb:	50                   	push   eax
c000abcc:	e8 44 ff ff ff       	call   c000ab15 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abd1:	50                   	push   eax
c000abd2:	e8 c9 ff ff ff       	call   c000aba0 <Dbg::logs(char*)>
c000abd7:	83 c4 20             	add    esp,0x20
c000abda:	c3                   	ret    

c000abdb <Dbg::logWriteIntBase(unsigned int, int)>:
c000abdb:	83 ec 10             	sub    esp,0x10
c000abde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000abe2:	50                   	push   eax
c000abe3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abe7:	50                   	push   eax
c000abe8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000abec:	52                   	push   edx
c000abed:	e8 23 ff ff ff       	call   c000ab15 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abf2:	50                   	push   eax
c000abf3:	e8 a8 ff ff ff       	call   c000aba0 <Dbg::logs(char*)>
c000abf8:	83 c4 20             	add    esp,0x20
c000abfb:	c3                   	ret    

c000abfc <Dbg::kprintf(char const*, ...)>:
c000abfc:	55                   	push   ebp
c000abfd:	57                   	push   edi
c000abfe:	56                   	push   esi
c000abff:	53                   	push   ebx
c000ac00:	83 ec 0c             	sub    esp,0xc
c000ac03:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ac07:	f6 05 30 09 02 c0 10 	test   BYTE PTR ds:0xc0020930,0x10
c000ac0e:	74 08                	je     c000ac18 <Dbg::kprintf(char const*, ...)+0x1c>
c000ac10:	83 c4 0c             	add    esp,0xc
c000ac13:	5b                   	pop    ebx
c000ac14:	5e                   	pop    esi
c000ac15:	5f                   	pop    edi
c000ac16:	5d                   	pop    ebp
c000ac17:	c3                   	ret    
c000ac18:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ac1c:	31 ff                	xor    edi,edi
c000ac1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac22:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ac25:	84 c0                	test   al,al
c000ac27:	74 e7                	je     c000ac10 <Dbg::kprintf(char const*, ...)+0x14>
c000ac29:	8d 77 01             	lea    esi,[edi+0x1]
c000ac2c:	3c 25                	cmp    al,0x25
c000ac2e:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac31:	75 47                	jne    c000ac7a <Dbg::kprintf(char const*, ...)+0x7e>
c000ac33:	83 c7 02             	add    edi,0x2
c000ac36:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ac39:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000ac3c:	83 e8 25             	sub    eax,0x25
c000ac3f:	3c 53                	cmp    al,0x53
c000ac41:	0f 87 d2 00 00 00    	ja     c000ad19 <Dbg::kprintf(char const*, ...)+0x11d>
c000ac47:	25 ff 00 00 00       	and    eax,0xff
c000ac4c:	ff 24 85 5c dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe23a4]
c000ac53:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac57:	89 c8                	mov    eax,ecx
c000ac59:	83 c1 04             	add    ecx,0x4
c000ac5c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac60:	8b 28                	mov    ebp,DWORD PTR [eax]
c000ac62:	55                   	push   ebp
c000ac63:	e8 55 ff ff ff       	call   c000abbd <Dbg::logWriteInt(unsigned int)>
c000ac68:	58                   	pop    eax
c000ac69:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ac6c:	84 c0                	test   al,al
c000ac6e:	74 a0                	je     c000ac10 <Dbg::kprintf(char const*, ...)+0x14>
c000ac70:	8d 77 01             	lea    esi,[edi+0x1]
c000ac73:	3c 25                	cmp    al,0x25
c000ac75:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac78:	74 b9                	je     c000ac33 <Dbg::kprintf(char const*, ...)+0x37>
c000ac7a:	50                   	push   eax
c000ac7b:	89 f7                	mov    edi,esi
c000ac7d:	e8 fe fe ff ff       	call   c000ab80 <Dbg::logc(char)>
c000ac82:	89 ee                	mov    esi,ebp
c000ac84:	58                   	pop    eax
c000ac85:	eb e2                	jmp    c000ac69 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac8b:	89 c8                	mov    eax,ecx
c000ac8d:	83 c1 04             	add    ecx,0x4
c000ac90:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac92:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac96:	50                   	push   eax
c000ac97:	e8 04 ff ff ff       	call   c000aba0 <Dbg::logs(char*)>
c000ac9c:	58                   	pop    eax
c000ac9d:	eb ca                	jmp    c000ac69 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac9f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aca3:	89 d0                	mov    eax,edx
c000aca5:	83 c2 04             	add    edx,0x4
c000aca8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acac:	8b 00                	mov    eax,DWORD PTR [eax]
c000acae:	50                   	push   eax
c000acaf:	e8 09 ff ff ff       	call   c000abbd <Dbg::logWriteInt(unsigned int)>
c000acb4:	58                   	pop    eax
c000acb5:	eb b2                	jmp    c000ac69 <Dbg::kprintf(char const*, ...)+0x6d>
c000acb7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000acbb:	89 d0                	mov    eax,edx
c000acbd:	83 c2 04             	add    edx,0x4
c000acc0:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000acc3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acc7:	50                   	push   eax
c000acc8:	e8 b3 fe ff ff       	call   c000ab80 <Dbg::logc(char)>
c000accd:	58                   	pop    eax
c000acce:	eb 99                	jmp    c000ac69 <Dbg::kprintf(char const*, ...)+0x6d>
c000acd0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acd4:	89 c8                	mov    eax,ecx
c000acd6:	83 c1 04             	add    ecx,0x4
c000acd9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000acdd:	6a 10                	push   0x10
c000acdf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ace1:	51                   	push   ecx
c000ace2:	e8 f4 fe ff ff       	call   c000abdb <Dbg::logWriteIntBase(unsigned int, int)>
c000ace7:	5d                   	pop    ebp
c000ace8:	58                   	pop    eax
c000ace9:	e9 7b ff ff ff       	jmp    c000ac69 <Dbg::kprintf(char const*, ...)+0x6d>
c000acee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000acf2:	89 d0                	mov    eax,edx
c000acf4:	83 c2 08             	add    edx,0x8
c000acf7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acfb:	6a 10                	push   0x10
c000acfd:	8b 00                	mov    eax,DWORD PTR [eax]
c000acff:	50                   	push   eax
c000ad00:	e8 d6 fe ff ff       	call   c000abdb <Dbg::logWriteIntBase(unsigned int, int)>
c000ad05:	58                   	pop    eax
c000ad06:	5a                   	pop    edx
c000ad07:	e9 5d ff ff ff       	jmp    c000ac69 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad0c:	6a 25                	push   0x25
c000ad0e:	e8 6d fe ff ff       	call   c000ab80 <Dbg::logc(char)>
c000ad13:	5a                   	pop    edx
c000ad14:	e9 50 ff ff ff       	jmp    c000ac69 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad19:	6a 25                	push   0x25
c000ad1b:	e8 60 fe ff ff       	call   c000ab80 <Dbg::logc(char)>
c000ad20:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ad24:	50                   	push   eax
c000ad25:	e8 56 fe ff ff       	call   c000ab80 <Dbg::logc(char)>
c000ad2a:	5a                   	pop    edx
c000ad2b:	59                   	pop    ecx
c000ad2c:	e9 38 ff ff ff       	jmp    c000ac69 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad31:	90                   	nop

c000ad32 <File::read(unsigned long long, void*, int*)>:
c000ad32:	53                   	push   ebx
c000ad33:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad3b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad42:	3c 19                	cmp    al,0x19
c000ad44:	77 35                	ja     c000ad7b <File::read(unsigned long long, void*, int*)+0x49>
c000ad46:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c000ad4d:	85 c0                	test   eax,eax
c000ad4f:	74 2a                	je     c000ad7b <File::read(unsigned long long, void*, int*)+0x49>
c000ad51:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad57:	85 c0                	test   eax,eax
c000ad59:	74 20                	je     c000ad7b <File::read(unsigned long long, void*, int*)+0x49>
c000ad5b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad5f:	74 21                	je     c000ad82 <File::read(unsigned long long, void*, int*)+0x50>
c000ad61:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad63:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad67:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad75:	5b                   	pop    ebx
c000ad76:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad79:	ff e0                	jmp    eax
c000ad7b:	b8 0b 00 00 00       	mov    eax,0xb
c000ad80:	eb 05                	jmp    c000ad87 <File::read(unsigned long long, void*, int*)+0x55>
c000ad82:	b8 05 00 00 00       	mov    eax,0x5
c000ad87:	5b                   	pop    ebx
c000ad88:	c3                   	ret    
c000ad89:	90                   	nop

c000ad8a <File::write(unsigned long long, void*, int*)>:
c000ad8a:	53                   	push   ebx
c000ad8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad8f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad93:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad9a:	3c 19                	cmp    al,0x19
c000ad9c:	77 35                	ja     c000add3 <File::write(unsigned long long, void*, int*)+0x49>
c000ad9e:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c000ada5:	85 c0                	test   eax,eax
c000ada7:	74 2a                	je     c000add3 <File::write(unsigned long long, void*, int*)+0x49>
c000ada9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000adaf:	85 c0                	test   eax,eax
c000adb1:	74 20                	je     c000add3 <File::write(unsigned long long, void*, int*)+0x49>
c000adb3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adb7:	74 21                	je     c000adda <File::write(unsigned long long, void*, int*)+0x50>
c000adb9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adbb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adbf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000adc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adcd:	5b                   	pop    ebx
c000adce:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000add1:	ff e0                	jmp    eax
c000add3:	b8 0b 00 00 00       	mov    eax,0xb
c000add8:	eb 05                	jmp    c000addf <File::write(unsigned long long, void*, int*)+0x55>
c000adda:	b8 05 00 00 00       	mov    eax,0x5
c000addf:	5b                   	pop    ebx
c000ade0:	c3                   	ret    
c000ade1:	90                   	nop

c000ade2 <Directory::read(unsigned long long, void*, int*)>:
c000ade2:	53                   	push   ebx
c000ade3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ade7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000adeb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000adf2:	3c 19                	cmp    al,0x19
c000adf4:	77 35                	ja     c000ae2b <Directory::read(unsigned long long, void*, int*)+0x49>
c000adf6:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c000adfd:	85 c0                	test   eax,eax
c000adff:	74 2a                	je     c000ae2b <Directory::read(unsigned long long, void*, int*)+0x49>
c000ae01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ae07:	85 c0                	test   eax,eax
c000ae09:	74 20                	je     c000ae2b <Directory::read(unsigned long long, void*, int*)+0x49>
c000ae0b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae0f:	74 21                	je     c000ae32 <Directory::read(unsigned long long, void*, int*)+0x50>
c000ae11:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ae13:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae17:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae25:	5b                   	pop    ebx
c000ae26:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae29:	ff e0                	jmp    eax
c000ae2b:	b8 0b 00 00 00       	mov    eax,0xb
c000ae30:	eb 05                	jmp    c000ae37 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ae32:	b8 05 00 00 00       	mov    eax,0x5
c000ae37:	5b                   	pop    ebx
c000ae38:	c3                   	ret    
c000ae39:	90                   	nop

c000ae3a <Directory::write(unsigned long long, void*, int*)>:
c000ae3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae3e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae45:	b8 0b 00 00 00       	mov    eax,0xb
c000ae4a:	80 fa 19             	cmp    dl,0x19
c000ae4d:	77 18                	ja     c000ae67 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae4f:	8b 14 95 80 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd180]
c000ae56:	85 d2                	test   edx,edx
c000ae58:	74 0d                	je     c000ae67 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae5a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ae61:	19 c0                	sbb    eax,eax
c000ae63:	83 e0 0a             	and    eax,0xa
c000ae66:	40                   	inc    eax
c000ae67:	c3                   	ret    

c000ae68 <File::isAtty()>:
c000ae68:	31 c0                	xor    eax,eax
c000ae6a:	c3                   	ret    
c000ae6b:	90                   	nop

c000ae6c <Directory::isAtty()>:
c000ae6c:	31 c0                	xor    eax,eax
c000ae6e:	c3                   	ret    
c000ae6f:	90                   	nop

c000ae70 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae70:	b8 0a 00 00 00       	mov    eax,0xa
c000ae75:	c3                   	ret    

c000ae76 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae76:	b8 0a 00 00 00       	mov    eax,0xa
c000ae7b:	c3                   	ret    

c000ae7c <Filesystem::allocateSwapfile(char const*, int)>:
c000ae7c:	31 c0                	xor    eax,eax
c000ae7e:	31 d2                	xor    edx,edx
c000ae80:	c3                   	ret    
c000ae81:	90                   	nop

c000ae82 <File::~File()>:
c000ae82:	83 ec 0c             	sub    esp,0xc
c000ae85:	ba 1c de 01 c0       	mov    edx,0xc001de1c
c000ae8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8e:	89 10                	mov    DWORD PTR [eax],edx
c000ae90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae94:	83 ec 0c             	sub    esp,0xc
c000ae97:	50                   	push   eax
c000ae98:	e8 ab e8 ff ff       	call   c0009748 <UnixFile::~UnixFile()>
c000ae9d:	83 c4 10             	add    esp,0x10
c000aea0:	90                   	nop
c000aea1:	83 c4 0c             	add    esp,0xc
c000aea4:	c3                   	ret    
c000aea5:	90                   	nop

c000aea6 <File::~File()>:
c000aea6:	83 ec 0c             	sub    esp,0xc
c000aea9:	83 ec 0c             	sub    esp,0xc
c000aeac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb0:	e8 cd ff ff ff       	call   c000ae82 <File::~File()>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	83 ec 08             	sub    esp,0x8
c000aebb:	68 14 01 00 00       	push   0x114
c000aec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aec4:	e8 3d fc ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000aec9:	83 c4 10             	add    esp,0x10
c000aecc:	83 c4 0c             	add    esp,0xc
c000aecf:	c3                   	ret    

c000aed0 <Directory::~Directory()>:
c000aed0:	83 ec 0c             	sub    esp,0xc
c000aed3:	ba 38 de 01 c0       	mov    edx,0xc001de38
c000aed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aedc:	89 10                	mov    DWORD PTR [eax],edx
c000aede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee2:	83 ec 0c             	sub    esp,0xc
c000aee5:	50                   	push   eax
c000aee6:	e8 5d e8 ff ff       	call   c0009748 <UnixFile::~UnixFile()>
c000aeeb:	83 c4 10             	add    esp,0x10
c000aeee:	90                   	nop
c000aeef:	83 c4 0c             	add    esp,0xc
c000aef2:	c3                   	ret    
c000aef3:	90                   	nop

c000aef4 <Directory::~Directory()>:
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	83 ec 0c             	sub    esp,0xc
c000aefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aefe:	e8 cd ff ff ff       	call   c000aed0 <Directory::~Directory()>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	83 ec 08             	sub    esp,0x8
c000af09:	68 14 01 00 00       	push   0x114
c000af0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af12:	e8 ef fb ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000af17:	83 c4 10             	add    esp,0x10
c000af1a:	83 c4 0c             	add    esp,0xc
c000af1d:	c3                   	ret    

c000af1e <Filesystem::Filesystem()>:
c000af1e:	ba b4 dd 01 c0       	mov    edx,0xc001ddb4
c000af23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af27:	89 10                	mov    DWORD PTR [eax],edx
c000af29:	8b 15 14 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a14
c000af2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af3a:	a3 14 0a 02 c0       	mov    ds:0xc0020a14,eax
c000af3f:	90                   	nop
c000af40:	c3                   	ret    
c000af41:	90                   	nop

c000af42 <Filesystem::~Filesystem()>:
c000af42:	ba b4 dd 01 c0       	mov    edx,0xc001ddb4
c000af47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af4b:	89 10                	mov    DWORD PTR [eax],edx
c000af4d:	90                   	nop
c000af4e:	c3                   	ret    
c000af4f:	90                   	nop

c000af50 <Filesystem::~Filesystem()>:
c000af50:	83 ec 0c             	sub    esp,0xc
c000af53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af57:	e8 e6 ff ff ff       	call   c000af42 <Filesystem::~Filesystem()>
c000af5c:	83 c4 04             	add    esp,0x4
c000af5f:	83 ec 08             	sub    esp,0x8
c000af62:	6a 08                	push   0x8
c000af64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af68:	e8 99 fb ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000af6d:	83 c4 10             	add    esp,0x10
c000af70:	83 c4 0c             	add    esp,0xc
c000af73:	c3                   	ret    

c000af74 <Fs::getcwd(Process*, char*, int)>:
c000af74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af78:	31 c0                	xor    eax,eax
c000af7a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af7d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af81:	7d 15                	jge    c000af98 <Fs::getcwd(Process*, char*, int)+0x24>
c000af83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af87:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000af8e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000af91:	84 c9                	test   cl,cl
c000af93:	74 06                	je     c000af9b <Fs::getcwd(Process*, char*, int)+0x27>
c000af95:	40                   	inc    eax
c000af96:	eb e2                	jmp    c000af7a <Fs::getcwd(Process*, char*, int)+0x6>
c000af98:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000af9b:	31 c0                	xor    eax,eax
c000af9d:	c3                   	ret    

c000af9e <Fs::initVFS()>:
c000af9e:	83 ec 18             	sub    esp,0x18
c000afa1:	6a 08                	push   0x8
c000afa3:	e8 c5 ce ff ff       	call   c0007e6d <malloc>
c000afa8:	89 04 24             	mov    DWORD PTR [esp],eax
c000afab:	e8 a4 c2 00 00       	call   c0017254 <FAT::FAT()>
c000afb0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000afb7:	e8 b1 ce ff ff       	call   c0007e6d <malloc>
c000afbc:	89 04 24             	mov    DWORD PTR [esp],eax
c000afbf:	e8 ea ce 00 00       	call   c0017eae <ISO9660::ISO9660()>
c000afc4:	83 c4 1c             	add    esp,0x1c
c000afc7:	c3                   	ret    

c000afc8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000afc8:	55                   	push   ebp
c000afc9:	57                   	push   edi
c000afca:	56                   	push   esi
c000afcb:	53                   	push   ebx
c000afcc:	81 ec 10 04 00 00    	sub    esp,0x410
c000afd2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000afd9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000afe0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000afe7:	68 00 04 00 00       	push   0x400
c000afec:	6a 00                	push   0x0
c000afee:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000aff2:	56                   	push   esi
c000aff3:	e8 f8 54 ff ff       	call   c00004f0 <memset>
c000aff8:	83 c4 10             	add    esp,0x10
c000affb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000afff:	75 0b                	jne    c000b00c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b001:	50                   	push   eax
c000b002:	50                   	push   eax
c000b003:	57                   	push   edi
c000b004:	56                   	push   esi
c000b005:	e8 16 56 ff ff       	call   c0000620 <strcpy>
c000b00a:	eb 41                	jmp    c000b04d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000b00c:	8a 07                	mov    al,BYTE PTR [edi]
c000b00e:	3c 5c                	cmp    al,0x5c
c000b010:	74 04                	je     c000b016 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000b012:	3c 2f                	cmp    al,0x2f
c000b014:	75 18                	jne    c000b02e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000b016:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b019:	3c 60                	cmp    al,0x60
c000b01b:	7e 03                	jle    c000b020 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000b01d:	83 e8 20             	sub    eax,0x20
c000b020:	88 04 24             	mov    BYTE PTR [esp],al
c000b023:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b02a:	50                   	push   eax
c000b02b:	50                   	push   eax
c000b02c:	eb 18                	jmp    c000b046 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000b02e:	50                   	push   eax
c000b02f:	50                   	push   eax
c000b030:	55                   	push   ebp
c000b031:	56                   	push   esi
c000b032:	e8 e9 55 ff ff       	call   c0000620 <strcpy>
c000b037:	5a                   	pop    edx
c000b038:	59                   	pop    ecx
c000b039:	68 5f ea 01 c0       	push   0xc001ea5f
c000b03e:	56                   	push   esi
c000b03f:	e8 9c 57 ff ff       	call   c00007e0 <strcat>
c000b044:	5d                   	pop    ebp
c000b045:	58                   	pop    eax
c000b046:	57                   	push   edi
c000b047:	56                   	push   esi
c000b048:	e8 93 57 ff ff       	call   c00007e0 <strcat>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b053:	3c 60                	cmp    al,0x60
c000b055:	7e 03                	jle    c000b05a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000b057:	83 e8 20             	sub    eax,0x20
c000b05a:	88 04 24             	mov    BYTE PTR [esp],al
c000b05d:	88 03                	mov    BYTE PTR [ebx],al
c000b05f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b066:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b06c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b070:	bf 03 00 00 00       	mov    edi,0x3
c000b075:	b8 03 00 00 00       	mov    eax,0x3
c000b07a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000b07d:	84 d2                	test   dl,dl
c000b07f:	0f 84 91 00 00 00    	je     c000b116 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000b085:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b088:	80 fa 5c             	cmp    dl,0x5c
c000b08b:	74 05                	je     c000b092 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000b08d:	80 fa 2f             	cmp    dl,0x2f
c000b090:	75 12                	jne    c000b0a4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b092:	89 c5                	mov    ebp,eax
c000b094:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b099:	74 09                	je     c000b0a4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b09b:	40                   	inc    eax
c000b09c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b0a0:	89 cf                	mov    edi,ecx
c000b0a2:	eb d6                	jmp    c000b07a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000b0a4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b0a9:	75 5b                	jne    c000b106 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b0ab:	80 fa 2e             	cmp    dl,0x2e
c000b0ae:	75 56                	jne    c000b106 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b0b0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b0b4:	74 19                	je     c000b0cf <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000b0b6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0bb:	74 53                	je     c000b110 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0bd:	89 f9                	mov    ecx,edi
c000b0bf:	41                   	inc    ecx
c000b0c0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0c3:	80 fa 2f             	cmp    dl,0x2f
c000b0c6:	74 f7                	je     c000b0bf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0c8:	80 fa 5c             	cmp    dl,0x5c
c000b0cb:	74 f2                	je     c000b0bf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0cd:	eb d1                	jmp    c000b0a0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0cf:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0d4:	74 3a                	je     c000b110 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0d6:	83 f8 03             	cmp    eax,0x3
c000b0d9:	74 c5                	je     c000b0a0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0db:	41                   	inc    ecx
c000b0dc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0df:	80 fa 2f             	cmp    dl,0x2f
c000b0e2:	74 f7                	je     c000b0db <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0e4:	80 fa 5c             	cmp    dl,0x5c
c000b0e7:	74 f2                	je     c000b0db <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0e9:	48                   	dec    eax
c000b0ea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0ee:	75 06                	jne    c000b0f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0f0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0f4:	eb f3                	jmp    c000b0e9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000b0f6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0fa:	74 07                	je     c000b103 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0fc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b100:	48                   	dec    eax
c000b101:	eb f3                	jmp    c000b0f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b103:	40                   	inc    eax
c000b104:	eb 9a                	jmp    c000b0a0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b106:	80 fa 2f             	cmp    dl,0x2f
c000b109:	74 95                	je     c000b0a0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b10b:	80 fa 5c             	cmp    dl,0x5c
c000b10e:	74 90                	je     c000b0a0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b110:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b113:	40                   	inc    eax
c000b114:	eb 8a                	jmp    c000b0a0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b116:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b11a:	83 ec 0c             	sub    esp,0xc
c000b11d:	53                   	push   ebx
c000b11e:	e8 3d 54 ff ff       	call   c0000560 <strlen>
c000b123:	83 c4 10             	add    esp,0x10
c000b126:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b12b:	75 26                	jne    c000b153 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000b12d:	83 ec 0c             	sub    esp,0xc
c000b130:	53                   	push   ebx
c000b131:	e8 2a 54 ff ff       	call   c0000560 <strlen>
c000b136:	83 c4 10             	add    esp,0x10
c000b139:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b13e:	74 26                	je     c000b166 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000b140:	83 ec 0c             	sub    esp,0xc
c000b143:	53                   	push   ebx
c000b144:	e8 17 54 ff ff       	call   c0000560 <strlen>
c000b149:	83 c4 10             	add    esp,0x10
c000b14c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b151:	eb c7                	jmp    c000b11a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000b153:	83 ec 0c             	sub    esp,0xc
c000b156:	53                   	push   ebx
c000b157:	e8 04 54 ff ff       	call   c0000560 <strlen>
c000b15c:	83 c4 10             	add    esp,0x10
c000b15f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b164:	74 c7                	je     c000b12d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000b166:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b16c:	5b                   	pop    ebx
c000b16d:	5e                   	pop    esi
c000b16e:	5f                   	pop    edi
c000b16f:	5d                   	pop    ebp
c000b170:	c3                   	ret    
c000b171:	90                   	nop

c000b172 <File::File(char const*, Process*)>:
c000b172:	83 ec 0c             	sub    esp,0xc
c000b175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b179:	83 ec 08             	sub    esp,0x8
c000b17c:	6a 00                	push   0x0
c000b17e:	50                   	push   eax
c000b17f:	e8 e2 e3 ff ff       	call   c0009566 <UnixFile::UnixFile(int)>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	ba 1c de 01 c0       	mov    edx,0xc001de1c
c000b18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b190:	89 10                	mov    DWORD PTR [eax],edx
c000b192:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b196:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a0:	83 c0 0d             	add    eax,0xd
c000b1a3:	83 ec 04             	sub    esp,0x4
c000b1a6:	52                   	push   edx
c000b1a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1ab:	50                   	push   eax
c000b1ac:	e8 17 fe ff ff       	call   c000afc8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b1b1:	83 c4 10             	add    esp,0x10
c000b1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b1bb:	8d 50 bf             	lea    edx,[eax-0x41]
c000b1be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1da:	25 ff 00 00 00       	and    eax,0xff
c000b1df:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c000b1e6:	85 c0                	test   eax,eax
c000b1e8:	74 42                	je     c000b22c <File::File(char const*, Process*)+0xba>
c000b1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ee:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1f4:	25 ff 00 00 00       	and    eax,0xff
c000b1f9:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c000b200:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b206:	85 c0                	test   eax,eax
c000b208:	75 22                	jne    c000b22c <File::File(char const*, Process*)+0xba>
c000b20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b20e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b214:	25 ff 00 00 00       	and    eax,0xff
c000b219:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c000b220:	83 ec 0c             	sub    esp,0xc
c000b223:	50                   	push   eax
c000b224:	e8 f9 1f 00 00       	call   c000d222 <LogicalDisk::mount()>
c000b229:	83 c4 10             	add    esp,0x10
c000b22c:	90                   	nop
c000b22d:	83 c4 0c             	add    esp,0xc
c000b230:	c3                   	ret    
c000b231:	90                   	nop

c000b232 <File::open(FileOpenMode)>:
c000b232:	53                   	push   ebx
c000b233:	b8 0b 00 00 00       	mov    eax,0xb
c000b238:	83 ec 08             	sub    esp,0x8
c000b23b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b23f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b246:	80 fa 19             	cmp    dl,0x19
c000b249:	77 40                	ja     c000b28b <File::open(FileOpenMode)+0x59>
c000b24b:	8b 14 95 80 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd180]
c000b252:	85 d2                	test   edx,edx
c000b254:	74 35                	je     c000b28b <File::open(FileOpenMode)+0x59>
c000b256:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b25c:	85 d2                	test   edx,edx
c000b25e:	74 2b                	je     c000b28b <File::open(FileOpenMode)+0x59>
c000b260:	b8 06 00 00 00       	mov    eax,0x6
c000b265:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b269:	75 20                	jne    c000b28b <File::open(FileOpenMode)+0x59>
c000b26b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b26d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b273:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b277:	51                   	push   ecx
c000b278:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b27b:	51                   	push   ecx
c000b27c:	52                   	push   edx
c000b27d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b280:	83 c4 10             	add    esp,0x10
c000b283:	85 c0                	test   eax,eax
c000b285:	75 04                	jne    c000b28b <File::open(FileOpenMode)+0x59>
c000b287:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b28b:	83 c4 08             	add    esp,0x8
c000b28e:	5b                   	pop    ebx
c000b28f:	c3                   	ret    

c000b290 <File::close()>:
c000b290:	53                   	push   ebx
c000b291:	b8 0b 00 00 00       	mov    eax,0xb
c000b296:	83 ec 08             	sub    esp,0x8
c000b299:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b29d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b2a4:	80 fa 19             	cmp    dl,0x19
c000b2a7:	77 41                	ja     c000b2ea <File::close()+0x5a>
c000b2a9:	8b 1c 95 80 2e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd180]
c000b2b0:	85 db                	test   ebx,ebx
c000b2b2:	74 36                	je     c000b2ea <File::close()+0x5a>
c000b2b4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b2bb:	74 2d                	je     c000b2ea <File::close()+0x5a>
c000b2bd:	b8 05 00 00 00       	mov    eax,0x5
c000b2c2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b2c6:	74 22                	je     c000b2ea <File::close()+0x5a>
c000b2c8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b2cc:	8b 04 95 80 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd180]
c000b2d3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b2d9:	53                   	push   ebx
c000b2da:	53                   	push   ebx
c000b2db:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2dd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b2e3:	50                   	push   eax
c000b2e4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b2e7:	83 c4 10             	add    esp,0x10
c000b2ea:	83 c4 08             	add    esp,0x8
c000b2ed:	5b                   	pop    ebx
c000b2ee:	c3                   	ret    
c000b2ef:	90                   	nop

c000b2f0 <File::seek(unsigned long long)>:
c000b2f0:	56                   	push   esi
c000b2f1:	53                   	push   ebx
c000b2f2:	b8 0b 00 00 00       	mov    eax,0xb
c000b2f7:	51                   	push   ecx
c000b2f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b300:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b307:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b30b:	80 fa 19             	cmp    dl,0x19
c000b30e:	77 31                	ja     c000b341 <File::seek(unsigned long long)+0x51>
c000b310:	8b 14 95 80 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd180]
c000b317:	85 d2                	test   edx,edx
c000b319:	74 26                	je     c000b341 <File::seek(unsigned long long)+0x51>
c000b31b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b321:	85 d2                	test   edx,edx
c000b323:	74 1c                	je     c000b341 <File::seek(unsigned long long)+0x51>
c000b325:	b8 05 00 00 00       	mov    eax,0x5
c000b32a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b32e:	74 11                	je     c000b341 <File::seek(unsigned long long)+0x51>
c000b330:	8b 02                	mov    eax,DWORD PTR [edx]
c000b332:	53                   	push   ebx
c000b333:	51                   	push   ecx
c000b334:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b33a:	52                   	push   edx
c000b33b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b33e:	83 c4 10             	add    esp,0x10
c000b341:	5a                   	pop    edx
c000b342:	5b                   	pop    ebx
c000b343:	5e                   	pop    esi
c000b344:	c3                   	ret    
c000b345:	90                   	nop

c000b346 <File::tell(unsigned long long*)>:
c000b346:	83 ec 0c             	sub    esp,0xc
c000b349:	b8 0b 00 00 00       	mov    eax,0xb
c000b34e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b352:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b359:	80 fa 19             	cmp    dl,0x19
c000b35c:	77 34                	ja     c000b392 <File::tell(unsigned long long*)+0x4c>
c000b35e:	8b 14 95 80 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd180]
c000b365:	85 d2                	test   edx,edx
c000b367:	74 29                	je     c000b392 <File::tell(unsigned long long*)+0x4c>
c000b369:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b36f:	85 d2                	test   edx,edx
c000b371:	74 1f                	je     c000b392 <File::tell(unsigned long long*)+0x4c>
c000b373:	b8 05 00 00 00       	mov    eax,0x5
c000b378:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b37c:	74 14                	je     c000b392 <File::tell(unsigned long long*)+0x4c>
c000b37e:	50                   	push   eax
c000b37f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b381:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b385:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b38b:	52                   	push   edx
c000b38c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b38f:	83 c4 10             	add    esp,0x10
c000b392:	83 c4 0c             	add    esp,0xc
c000b395:	c3                   	ret    

c000b396 <File::rewind()>:
c000b396:	83 ec 10             	sub    esp,0x10
c000b399:	6a 00                	push   0x0
c000b39b:	6a 00                	push   0x0
c000b39d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a1:	e8 4a ff ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c000b3a6:	83 c4 1c             	add    esp,0x1c
c000b3a9:	c3                   	ret    

c000b3aa <File::unlink()>:
c000b3aa:	83 ec 0c             	sub    esp,0xc
c000b3ad:	b8 0b 00 00 00       	mov    eax,0xb
c000b3b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3bd:	80 f9 19             	cmp    cl,0x19
c000b3c0:	77 2f                	ja     c000b3f1 <File::unlink()+0x47>
c000b3c2:	8b 0c 8d 80 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd180]
c000b3c9:	85 c9                	test   ecx,ecx
c000b3cb:	74 24                	je     c000b3f1 <File::unlink()+0x47>
c000b3cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3d3:	85 c9                	test   ecx,ecx
c000b3d5:	74 1a                	je     c000b3f1 <File::unlink()+0x47>
c000b3d7:	b8 06 00 00 00       	mov    eax,0x6
c000b3dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3e0:	75 0f                	jne    c000b3f1 <File::unlink()+0x47>
c000b3e2:	83 c2 0d             	add    edx,0xd
c000b3e5:	50                   	push   eax
c000b3e6:	50                   	push   eax
c000b3e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3e9:	52                   	push   edx
c000b3ea:	51                   	push   ecx
c000b3eb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	83 c4 0c             	add    esp,0xc
c000b3f4:	c3                   	ret    
c000b3f5:	90                   	nop

c000b3f6 <File::rename(char const*)>:
c000b3f6:	83 ec 0c             	sub    esp,0xc
c000b3f9:	b8 0b 00 00 00       	mov    eax,0xb
c000b3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b402:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b409:	80 f9 19             	cmp    cl,0x19
c000b40c:	77 32                	ja     c000b440 <File::rename(char const*)+0x4a>
c000b40e:	8b 0c 8d 80 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd180]
c000b415:	85 c9                	test   ecx,ecx
c000b417:	74 27                	je     c000b440 <File::rename(char const*)+0x4a>
c000b419:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b41f:	85 c9                	test   ecx,ecx
c000b421:	74 1d                	je     c000b440 <File::rename(char const*)+0x4a>
c000b423:	b8 06 00 00 00       	mov    eax,0x6
c000b428:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b42c:	75 12                	jne    c000b440 <File::rename(char const*)+0x4a>
c000b42e:	83 c2 0d             	add    edx,0xd
c000b431:	50                   	push   eax
c000b432:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b438:	52                   	push   edx
c000b439:	51                   	push   ecx
c000b43a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b43d:	83 c4 10             	add    esp,0x10
c000b440:	83 c4 0c             	add    esp,0xc
c000b443:	c3                   	ret    

c000b444 <File::chfatattr(unsigned char, unsigned char)>:
c000b444:	57                   	push   edi
c000b445:	b8 0b 00 00 00       	mov    eax,0xb
c000b44a:	56                   	push   esi
c000b44b:	53                   	push   ebx
c000b44c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b450:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b454:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b45b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b45f:	80 f9 19             	cmp    cl,0x19
c000b462:	77 37                	ja     c000b49b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b464:	8b 0c 8d 80 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd180]
c000b46b:	85 c9                	test   ecx,ecx
c000b46d:	74 2c                	je     c000b49b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b46f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b475:	85 c9                	test   ecx,ecx
c000b477:	74 22                	je     c000b49b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b479:	b8 06 00 00 00       	mov    eax,0x6
c000b47e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b482:	75 17                	jne    c000b49b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b484:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b486:	89 f0                	mov    eax,esi
c000b488:	83 c2 0d             	add    edx,0xd
c000b48b:	0f b6 f0             	movzx  esi,al
c000b48e:	0f b6 db             	movzx  ebx,bl
c000b491:	56                   	push   esi
c000b492:	53                   	push   ebx
c000b493:	52                   	push   edx
c000b494:	51                   	push   ecx
c000b495:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b498:	83 c4 10             	add    esp,0x10
c000b49b:	5b                   	pop    ebx
c000b49c:	5e                   	pop    esi
c000b49d:	5f                   	pop    edi
c000b49e:	c3                   	ret    
c000b49f:	90                   	nop

c000b4a0 <File::exists()>:
c000b4a0:	83 ec 0c             	sub    esp,0xc
c000b4a3:	31 c0                	xor    eax,eax
c000b4a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4a9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4b0:	80 f9 19             	cmp    cl,0x19
c000b4b3:	77 24                	ja     c000b4d9 <File::exists()+0x39>
c000b4b5:	8b 0c 8d 80 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd180]
c000b4bc:	85 c9                	test   ecx,ecx
c000b4be:	74 19                	je     c000b4d9 <File::exists()+0x39>
c000b4c0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4c6:	85 c9                	test   ecx,ecx
c000b4c8:	74 0f                	je     c000b4d9 <File::exists()+0x39>
c000b4ca:	83 c2 0d             	add    edx,0xd
c000b4cd:	50                   	push   eax
c000b4ce:	50                   	push   eax
c000b4cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4d1:	52                   	push   edx
c000b4d2:	51                   	push   ecx
c000b4d3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b4d6:	83 c4 10             	add    esp,0x10
c000b4d9:	83 c4 0c             	add    esp,0xc
c000b4dc:	c3                   	ret    
c000b4dd:	90                   	nop

c000b4de <File::stat(unsigned long long*, bool*)>:
c000b4de:	56                   	push   esi
c000b4df:	53                   	push   ebx
c000b4e0:	50                   	push   eax
c000b4e1:	b8 0b 00 00 00       	mov    eax,0xb
c000b4e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4f5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b4f9:	80 f9 19             	cmp    cl,0x19
c000b4fc:	77 3d                	ja     c000b53b <File::stat(unsigned long long*, bool*)+0x5d>
c000b4fe:	8b 0c 8d 80 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd180]
c000b505:	85 c9                	test   ecx,ecx
c000b507:	74 32                	je     c000b53b <File::stat(unsigned long long*, bool*)+0x5d>
c000b509:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b50f:	85 c9                	test   ecx,ecx
c000b511:	74 28                	je     c000b53b <File::stat(unsigned long long*, bool*)+0x5d>
c000b513:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b515:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b519:	74 13                	je     c000b52e <File::stat(unsigned long long*, bool*)+0x50>
c000b51b:	83 ec 04             	sub    esp,0x4
c000b51e:	56                   	push   esi
c000b51f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b525:	51                   	push   ecx
c000b526:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b529:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b52c:	eb 0a                	jmp    c000b538 <File::stat(unsigned long long*, bool*)+0x5a>
c000b52e:	53                   	push   ebx
c000b52f:	83 c2 0d             	add    edx,0xd
c000b532:	56                   	push   esi
c000b533:	52                   	push   edx
c000b534:	51                   	push   ecx
c000b535:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	5a                   	pop    edx
c000b53c:	5b                   	pop    ebx
c000b53d:	5e                   	pop    esi
c000b53e:	c3                   	ret    

c000b53f <Fs::setcwd(Process*, char*)>:
c000b53f:	55                   	push   ebp
c000b540:	57                   	push   edi
c000b541:	56                   	push   esi
c000b542:	53                   	push   ebx
c000b543:	81 ec 20 02 00 00    	sub    esp,0x220
c000b549:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b550:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b556:	57                   	push   edi
c000b557:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b55e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b562:	56                   	push   esi
c000b563:	e8 60 fa ff ff       	call   c000afc8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b568:	89 34 24             	mov    DWORD PTR [esp],esi
c000b56b:	e8 f0 4f ff ff       	call   c0000560 <strlen>
c000b570:	83 c4 10             	add    esp,0x10
c000b573:	83 f8 02             	cmp    eax,0x2
c000b576:	77 15                	ja     c000b58d <Fs::setcwd(Process*, char*)+0x4e>
c000b578:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b57d:	83 eb 41             	sub    ebx,0x41
c000b580:	8b 04 9d 80 2e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd180]
c000b587:	85 c0                	test   eax,eax
c000b589:	75 1c                	jne    c000b5a7 <Fs::setcwd(Process*, char*)+0x68>
c000b58b:	eb 2f                	jmp    c000b5bc <Fs::setcwd(Process*, char*)+0x7d>
c000b58d:	83 ec 0c             	sub    esp,0xc
c000b590:	56                   	push   esi
c000b591:	e8 ca 4f ff ff       	call   c0000560 <strlen>
c000b596:	83 c4 10             	add    esp,0x10
c000b599:	83 f8 03             	cmp    eax,0x3
c000b59c:	75 57                	jne    c000b5f5 <Fs::setcwd(Process*, char*)+0xb6>
c000b59e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b5a3:	75 50                	jne    c000b5f5 <Fs::setcwd(Process*, char*)+0xb6>
c000b5a5:	eb d1                	jmp    c000b578 <Fs::setcwd(Process*, char*)+0x39>
c000b5a7:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b5ae:	75 0c                	jne    c000b5bc <Fs::setcwd(Process*, char*)+0x7d>
c000b5b0:	83 ec 0c             	sub    esp,0xc
c000b5b3:	50                   	push   eax
c000b5b4:	e8 69 1c 00 00       	call   c000d222 <LogicalDisk::mount()>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	b8 03 00 00 00       	mov    eax,0x3
c000b5c1:	83 fb 19             	cmp    ebx,0x19
c000b5c4:	0f 87 c6 00 00 00    	ja     c000b690 <Fs::setcwd(Process*, char*)+0x151>
c000b5ca:	8b 14 9d 80 2e 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd180]
c000b5d1:	b8 05 00 00 00       	mov    eax,0x5
c000b5d6:	85 d2                	test   edx,edx
c000b5d8:	0f 84 b2 00 00 00    	je     c000b690 <Fs::setcwd(Process*, char*)+0x151>
c000b5de:	b8 06 00 00 00       	mov    eax,0x6
c000b5e3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b5ea:	0f 85 92 00 00 00    	jne    c000b682 <Fs::setcwd(Process*, char*)+0x143>
c000b5f0:	e9 9b 00 00 00       	jmp    c000b690 <Fs::setcwd(Process*, char*)+0x151>
c000b5f5:	83 ec 0c             	sub    esp,0xc
c000b5f8:	68 14 01 00 00       	push   0x114
c000b5fd:	e8 6b c8 ff ff       	call   c0007e6d <malloc>
c000b602:	83 c4 0c             	add    esp,0xc
c000b605:	89 c3                	mov    ebx,eax
c000b607:	55                   	push   ebp
c000b608:	56                   	push   esi
c000b609:	50                   	push   eax
c000b60a:	e8 63 fb ff ff       	call   c000b172 <File::File(char const*, Process*)>
c000b60f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b614:	83 c4 0c             	add    esp,0xc
c000b617:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b61b:	50                   	push   eax
c000b61c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b620:	50                   	push   eax
c000b621:	53                   	push   ebx
c000b622:	e8 b7 fe ff ff       	call   c000b4de <File::stat(unsigned long long*, bool*)>
c000b627:	83 c4 10             	add    esp,0x10
c000b62a:	83 f8 02             	cmp    eax,0x2
c000b62d:	74 04                	je     c000b633 <Fs::setcwd(Process*, char*)+0xf4>
c000b62f:	85 c0                	test   eax,eax
c000b631:	74 1c                	je     c000b64f <Fs::setcwd(Process*, char*)+0x110>
c000b633:	b8 01 00 00 00       	mov    eax,0x1
c000b638:	85 db                	test   ebx,ebx
c000b63a:	74 54                	je     c000b690 <Fs::setcwd(Process*, char*)+0x151>
c000b63c:	83 ec 0c             	sub    esp,0xc
c000b63f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b641:	53                   	push   ebx
c000b642:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b645:	83 c4 10             	add    esp,0x10
c000b648:	b8 01 00 00 00       	mov    eax,0x1
c000b64d:	eb 41                	jmp    c000b690 <Fs::setcwd(Process*, char*)+0x151>
c000b64f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b654:	75 1c                	jne    c000b672 <Fs::setcwd(Process*, char*)+0x133>
c000b656:	b8 02 00 00 00       	mov    eax,0x2
c000b65b:	85 db                	test   ebx,ebx
c000b65d:	74 31                	je     c000b690 <Fs::setcwd(Process*, char*)+0x151>
c000b65f:	83 ec 0c             	sub    esp,0xc
c000b662:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b664:	53                   	push   ebx
c000b665:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b668:	83 c4 10             	add    esp,0x10
c000b66b:	b8 02 00 00 00       	mov    eax,0x2
c000b670:	eb 1e                	jmp    c000b690 <Fs::setcwd(Process*, char*)+0x151>
c000b672:	85 db                	test   ebx,ebx
c000b674:	74 0c                	je     c000b682 <Fs::setcwd(Process*, char*)+0x143>
c000b676:	83 ec 0c             	sub    esp,0xc
c000b679:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b67b:	53                   	push   ebx
c000b67c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b67f:	83 c4 10             	add    esp,0x10
c000b682:	50                   	push   eax
c000b683:	50                   	push   eax
c000b684:	56                   	push   esi
c000b685:	57                   	push   edi
c000b686:	e8 95 4f ff ff       	call   c0000620 <strcpy>
c000b68b:	83 c4 10             	add    esp,0x10
c000b68e:	31 c0                	xor    eax,eax
c000b690:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b696:	5b                   	pop    ebx
c000b697:	5e                   	pop    esi
c000b698:	5f                   	pop    edi
c000b699:	5d                   	pop    ebp
c000b69a:	c3                   	ret    
c000b69b:	90                   	nop

c000b69c <Directory::Directory(char const*, Process*)>:
c000b69c:	83 ec 0c             	sub    esp,0xc
c000b69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6a3:	83 ec 08             	sub    esp,0x8
c000b6a6:	6a 00                	push   0x0
c000b6a8:	50                   	push   eax
c000b6a9:	e8 b8 de ff ff       	call   c0009566 <UnixFile::UnixFile(int)>
c000b6ae:	83 c4 10             	add    esp,0x10
c000b6b1:	ba 38 de 01 c0       	mov    edx,0xc001de38
c000b6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ba:	89 10                	mov    DWORD PTR [eax],edx
c000b6bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6c0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ca:	83 c0 0d             	add    eax,0xd
c000b6cd:	83 ec 04             	sub    esp,0x4
c000b6d0:	52                   	push   edx
c000b6d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6d5:	50                   	push   eax
c000b6d6:	e8 ed f8 ff ff       	call   c000afc8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b6db:	83 c4 10             	add    esp,0x10
c000b6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b6e5:	8d 50 bf             	lea    edx,[eax-0x41]
c000b6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ec:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6fe:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b704:	25 ff 00 00 00       	and    eax,0xff
c000b709:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c000b710:	85 c0                	test   eax,eax
c000b712:	74 42                	je     c000b756 <Directory::Directory(char const*, Process*)+0xba>
c000b714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b718:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b71e:	25 ff 00 00 00       	and    eax,0xff
c000b723:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c000b72a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b730:	85 c0                	test   eax,eax
c000b732:	75 22                	jne    c000b756 <Directory::Directory(char const*, Process*)+0xba>
c000b734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b738:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b73e:	25 ff 00 00 00       	and    eax,0xff
c000b743:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c000b74a:	83 ec 0c             	sub    esp,0xc
c000b74d:	50                   	push   eax
c000b74e:	e8 cf 1a 00 00       	call   c000d222 <LogicalDisk::mount()>
c000b753:	83 c4 10             	add    esp,0x10
c000b756:	90                   	nop
c000b757:	83 c4 0c             	add    esp,0xc
c000b75a:	c3                   	ret    
c000b75b:	90                   	nop

c000b75c <Directory::open()>:
c000b75c:	53                   	push   ebx
c000b75d:	b8 0b 00 00 00       	mov    eax,0xb
c000b762:	83 ec 08             	sub    esp,0x8
c000b765:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b769:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b770:	80 fa 19             	cmp    dl,0x19
c000b773:	77 3d                	ja     c000b7b2 <Directory::open()+0x56>
c000b775:	8b 14 95 80 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd180]
c000b77c:	85 d2                	test   edx,edx
c000b77e:	74 32                	je     c000b7b2 <Directory::open()+0x56>
c000b780:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b786:	85 d2                	test   edx,edx
c000b788:	74 28                	je     c000b7b2 <Directory::open()+0x56>
c000b78a:	b8 06 00 00 00       	mov    eax,0x6
c000b78f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b793:	75 1d                	jne    c000b7b2 <Directory::open()+0x56>
c000b795:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b79b:	50                   	push   eax
c000b79c:	8b 02                	mov    eax,DWORD PTR [edx]
c000b79e:	51                   	push   ecx
c000b79f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7a2:	51                   	push   ecx
c000b7a3:	52                   	push   edx
c000b7a4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b7a7:	83 c4 10             	add    esp,0x10
c000b7aa:	85 c0                	test   eax,eax
c000b7ac:	75 04                	jne    c000b7b2 <Directory::open()+0x56>
c000b7ae:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7b2:	83 c4 08             	add    esp,0x8
c000b7b5:	5b                   	pop    ebx
c000b7b6:	c3                   	ret    
c000b7b7:	90                   	nop

c000b7b8 <Directory::close()>:
c000b7b8:	53                   	push   ebx
c000b7b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b7be:	83 ec 08             	sub    esp,0x8
c000b7c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b7c5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b7cc:	80 fa 19             	cmp    dl,0x19
c000b7cf:	77 41                	ja     c000b812 <Directory::close()+0x5a>
c000b7d1:	8b 1c 95 80 2e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd180]
c000b7d8:	85 db                	test   ebx,ebx
c000b7da:	74 36                	je     c000b812 <Directory::close()+0x5a>
c000b7dc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b7e3:	74 2d                	je     c000b812 <Directory::close()+0x5a>
c000b7e5:	b8 05 00 00 00       	mov    eax,0x5
c000b7ea:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b7ee:	74 22                	je     c000b812 <Directory::close()+0x5a>
c000b7f0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b7f4:	8b 04 95 80 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd180]
c000b7fb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b801:	53                   	push   ebx
c000b802:	53                   	push   ebx
c000b803:	8b 10                	mov    edx,DWORD PTR [eax]
c000b805:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b80b:	50                   	push   eax
c000b80c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	83 c4 08             	add    esp,0x8
c000b815:	5b                   	pop    ebx
c000b816:	c3                   	ret    
c000b817:	90                   	nop

c000b818 <Directory::unlink()>:
c000b818:	83 ec 0c             	sub    esp,0xc
c000b81b:	b8 0b 00 00 00       	mov    eax,0xb
c000b820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b824:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b82b:	80 f9 19             	cmp    cl,0x19
c000b82e:	77 2f                	ja     c000b85f <Directory::unlink()+0x47>
c000b830:	8b 0c 8d 80 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd180]
c000b837:	85 c9                	test   ecx,ecx
c000b839:	74 24                	je     c000b85f <Directory::unlink()+0x47>
c000b83b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b841:	85 c9                	test   ecx,ecx
c000b843:	74 1a                	je     c000b85f <Directory::unlink()+0x47>
c000b845:	b8 06 00 00 00       	mov    eax,0x6
c000b84a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b84e:	75 0f                	jne    c000b85f <Directory::unlink()+0x47>
c000b850:	83 c2 0d             	add    edx,0xd
c000b853:	50                   	push   eax
c000b854:	50                   	push   eax
c000b855:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b857:	52                   	push   edx
c000b858:	51                   	push   ecx
c000b859:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b85c:	83 c4 10             	add    esp,0x10
c000b85f:	83 c4 0c             	add    esp,0xc
c000b862:	c3                   	ret    
c000b863:	90                   	nop

c000b864 <Directory::rename(char const*)>:
c000b864:	83 ec 0c             	sub    esp,0xc
c000b867:	b8 0b 00 00 00       	mov    eax,0xb
c000b86c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b870:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b877:	80 f9 19             	cmp    cl,0x19
c000b87a:	77 32                	ja     c000b8ae <Directory::rename(char const*)+0x4a>
c000b87c:	8b 0c 8d 80 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd180]
c000b883:	85 c9                	test   ecx,ecx
c000b885:	74 27                	je     c000b8ae <Directory::rename(char const*)+0x4a>
c000b887:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b88d:	85 c9                	test   ecx,ecx
c000b88f:	74 1d                	je     c000b8ae <Directory::rename(char const*)+0x4a>
c000b891:	b8 06 00 00 00       	mov    eax,0x6
c000b896:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b89a:	75 12                	jne    c000b8ae <Directory::rename(char const*)+0x4a>
c000b89c:	83 c2 0d             	add    edx,0xd
c000b89f:	50                   	push   eax
c000b8a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8a6:	52                   	push   edx
c000b8a7:	51                   	push   ecx
c000b8a8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b8ab:	83 c4 10             	add    esp,0x10
c000b8ae:	83 c4 0c             	add    esp,0xc
c000b8b1:	c3                   	ret    

c000b8b2 <Directory::exists()>:
c000b8b2:	83 ec 0c             	sub    esp,0xc
c000b8b5:	31 c0                	xor    eax,eax
c000b8b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8c2:	80 f9 19             	cmp    cl,0x19
c000b8c5:	77 24                	ja     c000b8eb <Directory::exists()+0x39>
c000b8c7:	8b 0c 8d 80 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd180]
c000b8ce:	85 c9                	test   ecx,ecx
c000b8d0:	74 19                	je     c000b8eb <Directory::exists()+0x39>
c000b8d2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b8d8:	85 c9                	test   ecx,ecx
c000b8da:	74 0f                	je     c000b8eb <Directory::exists()+0x39>
c000b8dc:	83 c2 0d             	add    edx,0xd
c000b8df:	50                   	push   eax
c000b8e0:	50                   	push   eax
c000b8e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8e3:	52                   	push   edx
c000b8e4:	51                   	push   ecx
c000b8e5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b8e8:	83 c4 10             	add    esp,0x10
c000b8eb:	83 c4 0c             	add    esp,0xc
c000b8ee:	c3                   	ret    
c000b8ef:	90                   	nop

c000b8f0 <Directory::read(dirent*)>:
c000b8f0:	83 ec 1c             	sub    esp,0x1c
c000b8f3:	b8 0b 00 00 00       	mov    eax,0xb
c000b8f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b8fc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b903:	80 fa 19             	cmp    dl,0x19
c000b906:	77 30                	ja     c000b938 <Directory::read(dirent*)+0x48>
c000b908:	8b 14 95 80 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd180]
c000b90f:	85 d2                	test   edx,edx
c000b911:	74 25                	je     c000b938 <Directory::read(dirent*)+0x48>
c000b913:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b91a:	74 1c                	je     c000b938 <Directory::read(dirent*)+0x48>
c000b91c:	83 ec 0c             	sub    esp,0xc
c000b91f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b921:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b925:	52                   	push   edx
c000b926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b92a:	6a 00                	push   0x0
c000b92c:	68 10 01 00 00       	push   0x110
c000b931:	51                   	push   ecx
c000b932:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b935:	83 c4 20             	add    esp,0x20
c000b938:	83 c4 1c             	add    esp,0x1c
c000b93b:	c3                   	ret    

c000b93c <Directory::create()>:
c000b93c:	83 ec 0c             	sub    esp,0xc
c000b93f:	b8 0b 00 00 00       	mov    eax,0xb
c000b944:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b948:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b94f:	80 f9 19             	cmp    cl,0x19
c000b952:	77 2f                	ja     c000b983 <Directory::create()+0x47>
c000b954:	8b 0c 8d 80 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd180]
c000b95b:	85 c9                	test   ecx,ecx
c000b95d:	74 24                	je     c000b983 <Directory::create()+0x47>
c000b95f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b965:	85 c9                	test   ecx,ecx
c000b967:	74 1a                	je     c000b983 <Directory::create()+0x47>
c000b969:	b8 06 00 00 00       	mov    eax,0x6
c000b96e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b972:	75 0f                	jne    c000b983 <Directory::create()+0x47>
c000b974:	83 c2 0d             	add    edx,0xd
c000b977:	50                   	push   eax
c000b978:	50                   	push   eax
c000b979:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b97b:	52                   	push   edx
c000b97c:	51                   	push   ecx
c000b97d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b980:	83 c4 10             	add    esp,0x10
c000b983:	83 c4 0c             	add    esp,0xc
c000b986:	c3                   	ret    
c000b987:	90                   	nop

c000b988 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b988:	b8 0a 00 00 00       	mov    eax,0xa
c000b98d:	c3                   	ret    
c000b98e:	66 90                	xchg   ax,ax

c000b990 <Bus::Bus(char const*)>:
c000b990:	83 ec 0c             	sub    esp,0xc
c000b993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b997:	83 ec 08             	sub    esp,0x8
c000b99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b99e:	50                   	push   eax
c000b99f:	e8 30 08 00 00       	call   c000c1d4 <Device::Device(char const*)>
c000b9a4:	83 c4 10             	add    esp,0x10
c000b9a7:	ba 54 de 01 c0       	mov    edx,0xc001de54
c000b9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9b0:	89 10                	mov    DWORD PTR [eax],edx
c000b9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9b6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b9c0:	90                   	nop
c000b9c1:	83 c4 0c             	add    esp,0xc
c000b9c4:	c3                   	ret    
c000b9c5:	90                   	nop
c000b9c6:	66 90                	xchg   ax,ax

c000b9c8 <Bus::~Bus()>:
c000b9c8:	83 ec 0c             	sub    esp,0xc
c000b9cb:	ba 54 de 01 c0       	mov    edx,0xc001de54
c000b9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9d4:	89 10                	mov    DWORD PTR [eax],edx
c000b9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9da:	83 ec 0c             	sub    esp,0xc
c000b9dd:	50                   	push   eax
c000b9de:	e8 5b 05 00 00       	call   c000bf3e <Device::~Device()>
c000b9e3:	83 c4 10             	add    esp,0x10
c000b9e6:	90                   	nop
c000b9e7:	83 c4 0c             	add    esp,0xc
c000b9ea:	c3                   	ret    
c000b9eb:	90                   	nop

c000b9ec <Bus::~Bus()>:
c000b9ec:	83 ec 0c             	sub    esp,0xc
c000b9ef:	83 ec 0c             	sub    esp,0xc
c000b9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9f6:	e8 cd ff ff ff       	call   c000b9c8 <Bus::~Bus()>
c000b9fb:	83 c4 10             	add    esp,0x10
c000b9fe:	83 ec 08             	sub    esp,0x8
c000ba01:	68 58 01 00 00       	push   0x158
c000ba06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba0a:	e8 f7 f0 ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000ba0f:	83 c4 10             	add    esp,0x10
c000ba12:	83 c4 0c             	add    esp,0xc
c000ba15:	c3                   	ret    

c000ba16 <beepThread(void*)>:
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000ba1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba22:	48                   	dec    eax
c000ba23:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000ba28:	75 01                	jne    c000ba2b <beepThread(void*)+0x15>
c000ba2a:	fb                   	sti    
c000ba2b:	83 ec 0c             	sub    esp,0xc
c000ba2e:	6b c2 0a             	imul   eax,edx,0xa
c000ba31:	50                   	push   eax
c000ba32:	e8 69 83 00 00       	call   c0013da0 <milliTenthSleep(unsigned int)>
c000ba37:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba3e:	e8 a5 9f 00 00       	call   c00159e8 <HalMakeBeep(int)>
c000ba43:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba4b:	83 c4 1c             	add    esp,0x1c
c000ba4e:	e9 49 82 00 00       	jmp    c0013c9c <blockTask(TaskState)>

c000ba53 <Krnl::beep(int, int, bool)>:
c000ba53:	56                   	push   esi
c000ba54:	53                   	push   ebx
c000ba55:	83 ec 10             	sub    esp,0x10
c000ba58:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba64:	e8 7f 9f 00 00       	call   c00159e8 <HalMakeBeep(int)>
c000ba69:	83 c4 10             	add    esp,0x10
c000ba6c:	89 f0                	mov    eax,esi
c000ba6e:	84 c0                	test   al,al
c000ba70:	74 1e                	je     c000ba90 <Krnl::beep(int, int, bool)+0x3d>
c000ba72:	83 ec 0c             	sub    esp,0xc
c000ba75:	6b db 0a             	imul   ebx,ebx,0xa
c000ba78:	53                   	push   ebx
c000ba79:	e8 22 83 00 00       	call   c0013da0 <milliTenthSleep(unsigned int)>
c000ba7e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ba86:	83 c4 14             	add    esp,0x14
c000ba89:	5b                   	pop    ebx
c000ba8a:	5e                   	pop    esi
c000ba8b:	e9 58 9f 00 00       	jmp    c00159e8 <HalMakeBeep(int)>
c000ba90:	68 e6 00 00 00       	push   0xe6
c000ba95:	53                   	push   ebx
c000ba96:	68 16 ba 00 c0       	push   0xc000ba16
c000ba9b:	ff 35 10 3e 02 c0    	push   DWORD PTR ds:0xc0023e10
c000baa1:	e8 da 7d 00 00       	call   c0013880 <Process::createThread(void (*)(void*), void*, int)>
c000baa6:	83 c4 14             	add    esp,0x14
c000baa9:	5b                   	pop    ebx
c000baaa:	5e                   	pop    esi
c000baab:	c3                   	ret    

c000baac <User::loadClockSettings(int)>:
c000baac:	53                   	push   ebx
c000baad:	83 ec 14             	sub    esp,0x14
c000bab0:	68 14 01 00 00       	push   0x114
c000bab5:	e8 b3 c3 ff ff       	call   c0007e6d <malloc>
c000baba:	83 c4 0c             	add    esp,0xc
c000babd:	89 c3                	mov    ebx,eax
c000babf:	ff 35 10 3e 02 c0    	push   DWORD PTR ds:0xc0023e10
c000bac5:	68 78 de 01 c0       	push   0xc001de78
c000baca:	50                   	push   eax
c000bacb:	e8 a2 f6 ff ff       	call   c000b172 <File::File(char const*, Process*)>
c000bad0:	58                   	pop    eax
c000bad1:	5a                   	pop    edx
c000bad2:	6a 01                	push   0x1
c000bad4:	53                   	push   ebx
c000bad5:	e8 58 f7 ff ff       	call   c000b232 <File::open(FileOpenMode)>
c000bada:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000badd:	e8 ae f7 ff ff       	call   c000b290 <File::close()>
c000bae2:	83 c4 10             	add    esp,0x10
c000bae5:	85 db                	test   ebx,ebx
c000bae7:	74 0f                	je     c000baf8 <User::loadClockSettings(int)+0x4c>
c000bae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baeb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000baef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000baf2:	83 c4 08             	add    esp,0x8
c000baf5:	5b                   	pop    ebx
c000baf6:	ff e0                	jmp    eax
c000baf8:	83 c4 08             	add    esp,0x8
c000bafb:	5b                   	pop    ebx
c000bafc:	c3                   	ret    
c000bafd:	90                   	nop

c000bafe <Clock::Clock(char const*)>:
c000bafe:	83 ec 0c             	sub    esp,0xc
c000bb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb05:	83 ec 08             	sub    esp,0x8
c000bb08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb0c:	50                   	push   eax
c000bb0d:	e8 c2 06 00 00       	call   c000c1d4 <Device::Device(char const*)>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	ba a0 de 01 c0       	mov    edx,0xc001dea0
c000bb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb1e:	89 10                	mov    DWORD PTR [eax],edx
c000bb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb24:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb2e:	90                   	nop
c000bb2f:	83 c4 0c             	add    esp,0xc
c000bb32:	c3                   	ret    
c000bb33:	90                   	nop

c000bb34 <Clock::~Clock()>:
c000bb34:	83 ec 0c             	sub    esp,0xc
c000bb37:	ba a0 de 01 c0       	mov    edx,0xc001dea0
c000bb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb40:	89 10                	mov    DWORD PTR [eax],edx
c000bb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb46:	83 ec 0c             	sub    esp,0xc
c000bb49:	50                   	push   eax
c000bb4a:	e8 ef 03 00 00       	call   c000bf3e <Device::~Device()>
c000bb4f:	83 c4 10             	add    esp,0x10
c000bb52:	90                   	nop
c000bb53:	83 c4 0c             	add    esp,0xc
c000bb56:	c3                   	ret    
c000bb57:	90                   	nop

c000bb58 <Clock::~Clock()>:
c000bb58:	83 ec 0c             	sub    esp,0xc
c000bb5b:	83 ec 0c             	sub    esp,0xc
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	e8 cd ff ff ff       	call   c000bb34 <Clock::~Clock()>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	83 ec 08             	sub    esp,0x8
c000bb6d:	68 58 01 00 00       	push   0x158
c000bb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb76:	e8 8b ef ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000bb7b:	83 c4 10             	add    esp,0x10
c000bb7e:	83 c4 0c             	add    esp,0xc
c000bb81:	c3                   	ret    

c000bb82 <Clock::timeInSecondsLocal()>:
c000bb82:	53                   	push   ebx
c000bb83:	83 ec 14             	sub    esp,0x14
c000bb86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb8a:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb8c:	50                   	push   eax
c000bb8d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bb90:	0f b6 0d 18 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020a18
c000bb97:	03 0d 1c 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020a1c
c000bb9d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bba3:	89 cb                	mov    ebx,ecx
c000bba5:	c1 fb 1f             	sar    ebx,0x1f
c000bba8:	01 c8                	add    eax,ecx
c000bbaa:	11 da                	adc    edx,ebx
c000bbac:	83 c4 10             	add    esp,0x10
c000bbaf:	31 c9                	xor    ecx,ecx
c000bbb1:	80 3d 19 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a19,0x0
c000bbb8:	74 05                	je     c000bbbf <Clock::timeInSecondsLocal()+0x3d>
c000bbba:	b9 08 07 00 00       	mov    ecx,0x708
c000bbbf:	31 db                	xor    ebx,ebx
c000bbc1:	01 c8                	add    eax,ecx
c000bbc3:	11 da                	adc    edx,ebx
c000bbc5:	83 c4 08             	add    esp,0x8
c000bbc8:	5b                   	pop    ebx
c000bbc9:	c3                   	ret    

c000bbca <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bbca:	57                   	push   edi
c000bbcb:	56                   	push   esi
c000bbcc:	53                   	push   ebx
c000bbcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bbd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbd5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbd7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbdb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bbde:	0f b6 05 18 0a 02 c0 	movzx  eax,BYTE PTR ds:0xc0020a18
c000bbe5:	03 05 1c 0a 02 c0    	add    eax,DWORD PTR ds:0xc0020a1c
c000bbeb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bbf1:	99                   	cdq    
c000bbf2:	29 c6                	sub    esi,eax
c000bbf4:	19 d7                	sbb    edi,edx
c000bbf6:	89 f0                	mov    eax,esi
c000bbf8:	89 fa                	mov    edx,edi
c000bbfa:	31 f6                	xor    esi,esi
c000bbfc:	80 3d 19 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a19,0x0
c000bc03:	74 05                	je     c000bc0a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bc05:	be 08 07 00 00       	mov    esi,0x708
c000bc0a:	31 ff                	xor    edi,edi
c000bc0c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bc10:	29 f0                	sub    eax,esi
c000bc12:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc16:	19 fa                	sbb    edx,edi
c000bc18:	89 d8                	mov    eax,ebx
c000bc1a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc1e:	5b                   	pop    ebx
c000bc1f:	5e                   	pop    esi
c000bc20:	5f                   	pop    edi
c000bc21:	ff e0                	jmp    eax

c000bc23 <datetimeToSeconds(datetime_t)>:
c000bc23:	55                   	push   ebp
c000bc24:	57                   	push   edi
c000bc25:	56                   	push   esi
c000bc26:	53                   	push   ebx
c000bc27:	83 ec 14             	sub    esp,0x14
c000bc2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc2e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bc32:	89 d3                	mov    ebx,edx
c000bc34:	0f b6 c6             	movzx  eax,dh
c000bc37:	c1 eb 10             	shr    ebx,0x10
c000bc3a:	48                   	dec    eax
c000bc3b:	66 81 eb 6c 07       	sub    bx,0x76c
c000bc40:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bc44:	0f b6 f5             	movzx  esi,ch
c000bc47:	89 cf                	mov    edi,ecx
c000bc49:	6b f6 3c             	imul   esi,esi,0x3c
c000bc4c:	c1 ef 10             	shr    edi,0x10
c000bc4f:	0f b6 c9             	movzx  ecx,cl
c000bc52:	89 f8                	mov    eax,edi
c000bc54:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bc5a:	0f b6 f8             	movzx  edi,al
c000bc5d:	0f b6 d2             	movzx  edx,dl
c000bc60:	01 fe                	add    esi,edi
c000bc62:	01 f1                	add    ecx,esi
c000bc64:	0f b7 f3             	movzx  esi,bx
c000bc67:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000bc6b:	c1 f9 1f             	sar    ecx,0x1f
c000bc6e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000bc73:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bc77:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000bc7c:	8b 0c 8d e0 de 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2120]
c000bc83:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bc87:	76 29                	jbe    c000bcb2 <datetimeToSeconds(datetime_t)+0x8f>
c000bc89:	f6 c3 03             	test   bl,0x3
c000bc8c:	75 24                	jne    c000bcb2 <datetimeToSeconds(datetime_t)+0x8f>
c000bc8e:	31 d2                	xor    edx,edx
c000bc90:	bf 64 00 00 00       	mov    edi,0x64
c000bc95:	89 d8                	mov    eax,ebx
c000bc97:	66 f7 f7             	div    di
c000bc9a:	66 85 d2             	test   dx,dx
c000bc9d:	75 12                	jne    c000bcb1 <datetimeToSeconds(datetime_t)+0x8e>
c000bc9f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bca5:	bf 90 01 00 00       	mov    edi,0x190
c000bcaa:	99                   	cdq    
c000bcab:	f7 ff                	idiv   edi
c000bcad:	85 d2                	test   edx,edx
c000bcaf:	75 01                	jne    c000bcb2 <datetimeToSeconds(datetime_t)+0x8f>
c000bcb1:	41                   	inc    ecx
c000bcb2:	66 83 fb 46          	cmp    bx,0x46
c000bcb6:	76 45                	jbe    c000bcfd <datetimeToSeconds(datetime_t)+0xda>
c000bcb8:	bb 46 00 00 00       	mov    ebx,0x46
c000bcbd:	bf 64 00 00 00       	mov    edi,0x64
c000bcc2:	bd 90 01 00 00       	mov    ebp,0x190
c000bcc7:	b8 6d 01 00 00       	mov    eax,0x16d
c000bccc:	f6 c3 03             	test   bl,0x3
c000bccf:	75 23                	jne    c000bcf4 <datetimeToSeconds(datetime_t)+0xd1>
c000bcd1:	89 d8                	mov    eax,ebx
c000bcd3:	99                   	cdq    
c000bcd4:	f7 ff                	idiv   edi
c000bcd6:	b8 6e 01 00 00       	mov    eax,0x16e
c000bcdb:	85 d2                	test   edx,edx
c000bcdd:	75 15                	jne    c000bcf4 <datetimeToSeconds(datetime_t)+0xd1>
c000bcdf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bce5:	99                   	cdq    
c000bce6:	f7 fd                	idiv   ebp
c000bce8:	31 c0                	xor    eax,eax
c000bcea:	85 d2                	test   edx,edx
c000bcec:	0f 94 c0             	sete   al
c000bcef:	05 6d 01 00 00       	add    eax,0x16d
c000bcf4:	01 c1                	add    ecx,eax
c000bcf6:	43                   	inc    ebx
c000bcf7:	39 f3                	cmp    ebx,esi
c000bcf9:	7c cc                	jl     c000bcc7 <datetimeToSeconds(datetime_t)+0xa4>
c000bcfb:	eb 3b                	jmp    c000bd38 <datetimeToSeconds(datetime_t)+0x115>
c000bcfd:	74 39                	je     c000bd38 <datetimeToSeconds(datetime_t)+0x115>
c000bcff:	b8 45 00 00 00       	mov    eax,0x45
c000bd04:	89 c2                	mov    edx,eax
c000bd06:	83 e2 03             	and    edx,0x3
c000bd09:	39 f0                	cmp    eax,esi
c000bd0b:	7e 13                	jle    c000bd20 <datetimeToSeconds(datetime_t)+0xfd>
c000bd0d:	85 d2                	test   edx,edx
c000bd0f:	0f 94 c2             	sete   dl
c000bd12:	48                   	dec    eax
c000bd13:	0f b6 d2             	movzx  edx,dl
c000bd16:	81 c2 6d 01 00 00    	add    edx,0x16d
c000bd1c:	29 d1                	sub    ecx,edx
c000bd1e:	eb e4                	jmp    c000bd04 <datetimeToSeconds(datetime_t)+0xe1>
c000bd20:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd25:	85 d2                	test   edx,edx
c000bd27:	75 0d                	jne    c000bd36 <datetimeToSeconds(datetime_t)+0x113>
c000bd29:	31 c0                	xor    eax,eax
c000bd2b:	66 85 db             	test   bx,bx
c000bd2e:	0f 95 c0             	setne  al
c000bd31:	05 6d 01 00 00       	add    eax,0x16d
c000bd36:	29 c1                	sub    ecx,eax
c000bd38:	b8 80 51 01 00       	mov    eax,0x15180
c000bd3d:	f7 e9                	imul   ecx
c000bd3f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bd43:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000bd47:	83 c4 14             	add    esp,0x14
c000bd4a:	5b                   	pop    ebx
c000bd4b:	5e                   	pop    esi
c000bd4c:	5f                   	pop    edi
c000bd4d:	5d                   	pop    ebp
c000bd4e:	c3                   	ret    
c000bd4f:	90                   	nop

c000bd50 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd50:	57                   	push   edi
c000bd51:	56                   	push   esi
c000bd52:	53                   	push   ebx
c000bd53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd57:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd59:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd64:	e8 ba fe ff ff       	call   c000bc23 <datetimeToSeconds(datetime_t)>
c000bd69:	59                   	pop    ecx
c000bd6a:	0f b6 0d 18 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020a18
c000bd71:	5b                   	pop    ebx
c000bd72:	03 0d 1c 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020a1c
c000bd78:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bd7e:	89 cb                	mov    ebx,ecx
c000bd80:	c1 fb 1f             	sar    ebx,0x1f
c000bd83:	29 c8                	sub    eax,ecx
c000bd85:	19 da                	sbb    edx,ebx
c000bd87:	31 c9                	xor    ecx,ecx
c000bd89:	80 3d 19 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a19,0x0
c000bd90:	74 05                	je     c000bd97 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bd92:	b9 08 07 00 00       	mov    ecx,0x708
c000bd97:	31 db                	xor    ebx,ebx
c000bd99:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bd9d:	29 c8                	sub    eax,ecx
c000bd9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bda3:	19 da                	sbb    edx,ebx
c000bda5:	89 f8                	mov    eax,edi
c000bda7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bdab:	5b                   	pop    ebx
c000bdac:	5e                   	pop    esi
c000bdad:	5f                   	pop    edi
c000bdae:	ff e0                	jmp    eax

c000bdb0 <secondsToDatetime(unsigned long long)>:
c000bdb0:	55                   	push   ebp
c000bdb1:	57                   	push   edi
c000bdb2:	56                   	push   esi
c000bdb3:	53                   	push   ebx
c000bdb4:	83 ec 1c             	sub    esp,0x1c
c000bdb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdbb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bdbf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bdc3:	6a 00                	push   0x0
c000bdc5:	68 80 51 01 00       	push   0x15180
c000bdca:	55                   	push   ebp
c000bdcb:	57                   	push   edi
c000bdcc:	e8 6f 03 01 00       	call   c001c140 <__udivdi3>
c000bdd1:	83 c4 10             	add    esp,0x10
c000bdd4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bdda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdde:	6a 00                	push   0x0
c000bde0:	68 80 51 01 00       	push   0x15180
c000bde5:	55                   	push   ebp
c000bde6:	57                   	push   edi
c000bde7:	bf 10 0e 00 00       	mov    edi,0xe10
c000bdec:	e8 4f 04 01 00       	call   c001c240 <__umoddi3>
c000bdf1:	83 c4 10             	add    esp,0x10
c000bdf4:	99                   	cdq    
c000bdf5:	f7 ff                	idiv   edi
c000bdf7:	bf 3c 00 00 00       	mov    edi,0x3c
c000bdfc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bdff:	89 d0                	mov    eax,edx
c000be01:	99                   	cdq    
c000be02:	f7 ff                	idiv   edi
c000be04:	85 db                	test   ebx,ebx
c000be06:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000be09:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000be0c:	79 11                	jns    c000be1f <secondsToDatetime(unsigned long long)+0x6f>
c000be0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be12:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be18:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be1d:	eb 07                	jmp    c000be26 <secondsToDatetime(unsigned long long)+0x76>
c000be1f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be24:	89 d8                	mov    eax,ebx
c000be26:	bf b4 05 00 00       	mov    edi,0x5b4
c000be2b:	99                   	cdq    
c000be2c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be31:	f7 f9                	idiv   ecx
c000be33:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be3c:	31 d2                	xor    edx,edx
c000be3e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be46:	01 c3                	add    ebx,eax
c000be48:	89 d8                	mov    eax,ebx
c000be4a:	f7 f1                	div    ecx
c000be4c:	31 d2                	xor    edx,edx
c000be4e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be51:	89 d8                	mov    eax,ebx
c000be53:	f7 f7                	div    edi
c000be55:	31 d2                	xor    edx,edx
c000be57:	29 c1                	sub    ecx,eax
c000be59:	89 d8                	mov    eax,ebx
c000be5b:	f7 f5                	div    ebp
c000be5d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be62:	29 c1                	sub    ecx,eax
c000be64:	31 d2                	xor    edx,edx
c000be66:	89 c8                	mov    eax,ecx
c000be68:	f7 f5                	div    ebp
c000be6a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000be6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be73:	31 d2                	xor    edx,edx
c000be75:	89 c8                	mov    eax,ecx
c000be77:	f7 f5                	div    ebp
c000be79:	31 d2                	xor    edx,edx
c000be7b:	01 c3                	add    ebx,eax
c000be7d:	89 c8                	mov    eax,ecx
c000be7f:	f7 f7                	div    edi
c000be81:	bf 99 00 00 00       	mov    edi,0x99
c000be86:	29 c3                	sub    ebx,eax
c000be88:	31 d2                	xor    edx,edx
c000be8a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000be92:	29 c3                	sub    ebx,eax
c000be94:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000be97:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be9a:	bb 05 00 00 00       	mov    ebx,0x5
c000be9f:	83 c1 02             	add    ecx,0x2
c000bea2:	89 c8                	mov    eax,ecx
c000bea4:	f7 f7                	div    edi
c000bea6:	31 d2                	xor    edx,edx
c000bea8:	89 c7                	mov    edi,eax
c000beaa:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000beb0:	83 c0 02             	add    eax,0x2
c000beb3:	f7 f3                	div    ebx
c000beb5:	89 eb                	mov    ebx,ebp
c000beb7:	29 c3                	sub    ebx,eax
c000beb9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bebf:	88 1e                	mov    BYTE PTR [esi],bl
c000bec1:	19 c0                	sbb    eax,eax
c000bec3:	31 d2                	xor    edx,edx
c000bec5:	83 e0 0c             	and    eax,0xc
c000bec8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000becc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bed4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bed8:	83 f9 01             	cmp    ecx,0x1
c000bedb:	0f 96 c2             	setbe  dl
c000bede:	41                   	inc    ecx
c000bedf:	01 d0                	add    eax,edx
c000bee1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bee4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bee8:	83 c4 1c             	add    esp,0x1c
c000beeb:	89 f0                	mov    eax,esi
c000beed:	5b                   	pop    ebx
c000beee:	5e                   	pop    esi
c000beef:	5f                   	pop    edi
c000bef0:	5d                   	pop    ebp
c000bef1:	c2 04 00             	ret    0x4

c000bef4 <Clock::timeInDatetimeLocal()>:
c000bef4:	53                   	push   ebx
c000bef5:	83 ec 14             	sub    esp,0x14
c000bef8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000befc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf00:	e8 7d fc ff ff       	call   c000bb82 <Clock::timeInSecondsLocal()>
c000bf05:	83 c4 0c             	add    esp,0xc
c000bf08:	52                   	push   edx
c000bf09:	50                   	push   eax
c000bf0a:	53                   	push   ebx
c000bf0b:	e8 a0 fe ff ff       	call   c000bdb0 <secondsToDatetime(unsigned long long)>
c000bf10:	89 d8                	mov    eax,ebx
c000bf12:	83 c4 14             	add    esp,0x14
c000bf15:	5b                   	pop    ebx
c000bf16:	c2 04 00             	ret    0x4
c000bf19:	90                   	nop

c000bf1a <Device::hibernate()>:
c000bf1a:	c3                   	ret    
c000bf1b:	90                   	nop

c000bf1c <Device::wake()>:
c000bf1c:	c3                   	ret    
c000bf1d:	90                   	nop

c000bf1e <Device::detect()>:
c000bf1e:	c3                   	ret    
c000bf1f:	90                   	nop

c000bf20 <Device::disableLegacy()>:
c000bf20:	c3                   	ret    
c000bf21:	90                   	nop

c000bf22 <Device::powerSaving(PowerSavingLevel)>:
c000bf22:	c3                   	ret    
c000bf23:	90                   	nop

c000bf24 <DriverlessDevice::close(int, int, void*)>:
c000bf24:	31 c0                	xor    eax,eax
c000bf26:	c3                   	ret    
c000bf27:	90                   	nop

c000bf28 <DriverlessDevice::detect()>:
c000bf28:	c3                   	ret    
c000bf29:	90                   	nop

c000bf2a <DriverlessDevice::open(int, int, void*)>:
c000bf2a:	83 ec 18             	sub    esp,0x18
c000bf2d:	68 10 df 01 c0       	push   0xc001df10
c000bf32:	e8 14 48 00 00       	call   c001074b <Krnl::panic(char const*)>
c000bf37:	83 c8 ff             	or     eax,0xffffffff
c000bf3a:	83 c4 1c             	add    esp,0x1c
c000bf3d:	c3                   	ret    

c000bf3e <Device::~Device()>:
c000bf3e:	ba 70 df 01 c0       	mov    edx,0xc001df70
c000bf43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf47:	89 10                	mov    DWORD PTR [eax],edx
c000bf49:	90                   	nop
c000bf4a:	c3                   	ret    
c000bf4b:	90                   	nop

c000bf4c <Device::~Device()>:
c000bf4c:	83 ec 0c             	sub    esp,0xc
c000bf4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf53:	e8 e6 ff ff ff       	call   c000bf3e <Device::~Device()>
c000bf58:	83 c4 04             	add    esp,0x4
c000bf5b:	83 ec 08             	sub    esp,0x8
c000bf5e:	68 58 01 00 00       	push   0x158
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 9a eb ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	83 c4 0c             	add    esp,0xc
c000bf72:	c3                   	ret    
c000bf73:	90                   	nop

c000bf74 <Device::findAndLoadDriver()>:
c000bf74:	c7 44 24 04 2e df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001df2e
c000bf7c:	e9 7b ec ff ff       	jmp    c000abfc <Dbg::kprintf(char const*, ...)>
c000bf81:	90                   	nop

c000bf82 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bf82:	57                   	push   edi
c000bf83:	b9 09 00 00 00       	mov    ecx,0x9
c000bf88:	56                   	push   esi
c000bf89:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bf8d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bf91:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bf9b:	81 c7 18 01 00 00    	add    edi,0x118
c000bfa1:	fc                   	cld    
c000bfa2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bfa4:	5e                   	pop    esi
c000bfa5:	5f                   	pop    edi
c000bfa6:	c3                   	ret    
c000bfa7:	90                   	nop

c000bfa8 <Device::preOpenACPI(void*, char*, char*)>:
c000bfa8:	57                   	push   edi
c000bfa9:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bfae:	56                   	push   esi
c000bfaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfb7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bfc1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bfc7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bfcd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfd1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfd3:	b9 0e 00 00 00       	mov    ecx,0xe
c000bfd8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bfde:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bfe2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfe4:	5e                   	pop    esi
c000bfe5:	5f                   	pop    edi
c000bfe6:	c3                   	ret    
c000bfe7:	90                   	nop

c000bfe8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfe8:	53                   	push   ebx
c000bfe9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bff1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bff5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bff9:	0f b6 c0             	movzx  eax,al
c000bffc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c000:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c004:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c008:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c00c:	5b                   	pop    ebx
c000c00d:	e9 a6 05 00 00       	jmp    c000c5b8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c012 <Device::getParent()>:
c000c012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c016:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c01c:	c3                   	ret    
c000c01d:	90                   	nop

c000c01e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c022:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c026:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c02b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c02f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c033:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c037:	e9 e8 06 00 00       	jmp    c000c724 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c03c <Device::addChild(Device*)>:
c000c03c:	53                   	push   ebx
c000c03d:	83 ec 08             	sub    esp,0x8
c000c040:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c044:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c048:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c04e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c054:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c056:	85 d2                	test   edx,edx
c000c058:	74 04                	je     c000c05e <Device::addChild(Device*)+0x22>
c000c05a:	89 d3                	mov    ebx,edx
c000c05c:	eb f6                	jmp    c000c054 <Device::addChild(Device*)+0x18>
c000c05e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c061:	83 ec 0c             	sub    esp,0xc
c000c064:	6a 08                	push   0x8
c000c066:	e8 02 be ff ff       	call   c0007e6d <malloc>
c000c06b:	89 03                	mov    DWORD PTR [ebx],eax
c000c06d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c073:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c07a:	83 c4 18             	add    esp,0x18
c000c07d:	5b                   	pop    ebx
c000c07e:	c3                   	ret    
c000c07f:	90                   	nop

c000c080 <Device::removeAllChildren()>:
c000c080:	56                   	push   esi
c000c081:	53                   	push   ebx
c000c082:	52                   	push   edx
c000c083:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c087:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c08d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c090:	74 17                	je     c000c0a9 <Device::removeAllChildren()+0x29>
c000c092:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c095:	85 c0                	test   eax,eax
c000c097:	74 0c                	je     c000c0a5 <Device::removeAllChildren()+0x25>
c000c099:	83 ec 0c             	sub    esp,0xc
c000c09c:	8b 10                	mov    edx,DWORD PTR [eax]
c000c09e:	50                   	push   eax
c000c09f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c0a2:	83 c4 10             	add    esp,0x10
c000c0a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0a7:	eb e4                	jmp    c000c08d <Device::removeAllChildren()+0xd>
c000c0a9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0b5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0c2:	58                   	pop    eax
c000c0c3:	5b                   	pop    ebx
c000c0c4:	5e                   	pop    esi
c000c0c5:	c3                   	ret    

c000c0c6 <Device::hibernateAll()>:
c000c0c6:	53                   	push   ebx
c000c0c7:	83 ec 14             	sub    esp,0x14
c000c0ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0d0:	53                   	push   ebx
c000c0d1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c0d4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0da:	83 c4 10             	add    esp,0x10
c000c0dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0e0:	74 0f                	je     c000c0f1 <Device::hibernateAll()+0x2b>
c000c0e2:	83 ec 0c             	sub    esp,0xc
c000c0e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0e8:	e8 d9 ff ff ff       	call   c000c0c6 <Device::hibernateAll()>
c000c0ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0ef:	eb e9                	jmp    c000c0da <Device::hibernateAll()+0x14>
c000c0f1:	83 c4 08             	add    esp,0x8
c000c0f4:	5b                   	pop    ebx
c000c0f5:	c3                   	ret    

c000c0f6 <Device::wakeAll()>:
c000c0f6:	53                   	push   ebx
c000c0f7:	83 ec 14             	sub    esp,0x14
c000c0fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c100:	53                   	push   ebx
c000c101:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c104:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c10a:	83 c4 10             	add    esp,0x10
c000c10d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c110:	74 0f                	je     c000c121 <Device::wakeAll()+0x2b>
c000c112:	83 ec 0c             	sub    esp,0xc
c000c115:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c118:	e8 d9 ff ff ff       	call   c000c0f6 <Device::wakeAll()>
c000c11d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c11f:	eb e9                	jmp    c000c10a <Device::wakeAll()+0x14>
c000c121:	83 c4 08             	add    esp,0x8
c000c124:	5b                   	pop    ebx
c000c125:	c3                   	ret    

c000c126 <Device::detectAll()>:
c000c126:	53                   	push   ebx
c000c127:	83 ec 14             	sub    esp,0x14
c000c12a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c12e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c130:	53                   	push   ebx
c000c131:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c134:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c13a:	83 c4 10             	add    esp,0x10
c000c13d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c140:	74 0f                	je     c000c151 <Device::detectAll()+0x2b>
c000c142:	83 ec 0c             	sub    esp,0xc
c000c145:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c148:	e8 d9 ff ff ff       	call   c000c126 <Device::detectAll()>
c000c14d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c14f:	eb e9                	jmp    c000c13a <Device::detectAll()+0x14>
c000c151:	83 c4 08             	add    esp,0x8
c000c154:	5b                   	pop    ebx
c000c155:	c3                   	ret    

c000c156 <Device::disableLegacyAll()>:
c000c156:	c3                   	ret    
c000c157:	90                   	nop

c000c158 <Device::loadDriversForAll()>:
c000c158:	c3                   	ret    
c000c159:	90                   	nop

c000c15a <Device::closeAll()>:
c000c15a:	53                   	push   ebx
c000c15b:	83 ec 08             	sub    esp,0x8
c000c15e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c162:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c164:	6a 00                	push   0x0
c000c166:	6a 00                	push   0x0
c000c168:	6a 00                	push   0x0
c000c16a:	53                   	push   ebx
c000c16b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c16e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c174:	83 c4 10             	add    esp,0x10
c000c177:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c17a:	74 0f                	je     c000c18b <Device::closeAll()+0x31>
c000c17c:	83 ec 0c             	sub    esp,0xc
c000c17f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c182:	e8 d3 ff ff ff       	call   c000c15a <Device::closeAll()>
c000c187:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c189:	eb e9                	jmp    c000c174 <Device::closeAll()+0x1a>
c000c18b:	83 c4 08             	add    esp,0x8
c000c18e:	5b                   	pop    ebx
c000c18f:	c3                   	ret    

c000c190 <Device::powerSavingAll(PowerSavingLevel)>:
c000c190:	56                   	push   esi
c000c191:	53                   	push   ebx
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c199:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c19d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c19f:	56                   	push   esi
c000c1a0:	53                   	push   ebx
c000c1a1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c1a4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1aa:	83 c4 10             	add    esp,0x10
c000c1ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1b0:	74 0f                	je     c000c1c1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c1b2:	52                   	push   edx
c000c1b3:	52                   	push   edx
c000c1b4:	56                   	push   esi
c000c1b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1b8:	e8 d3 ff ff ff       	call   c000c190 <Device::powerSavingAll(PowerSavingLevel)>
c000c1bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1bf:	eb e9                	jmp    c000c1aa <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c1c1:	58                   	pop    eax
c000c1c2:	5b                   	pop    ebx
c000c1c3:	5e                   	pop    esi
c000c1c4:	c3                   	ret    
c000c1c5:	90                   	nop

c000c1c6 <Device::setName(char const*)>:
c000c1c6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c1ce:	e9 4d 44 ff ff       	jmp    c0000620 <strcpy>
c000c1d3:	90                   	nop

c000c1d4 <Device::Device(char const*)>:
c000c1d4:	83 ec 1c             	sub    esp,0x1c
c000c1d7:	ba 70 df 01 c0       	mov    edx,0xc001df70
c000c1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e0:	89 10                	mov    DWORD PTR [eax],edx
c000c1e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c1f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1f4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c1fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c202:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c20c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c210:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c21a:	83 ec 08             	sub    esp,0x8
c000c21d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c221:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c225:	e8 9c ff ff ff       	call   c000c1c6 <Device::setName(char const*)>
c000c22a:	83 c4 10             	add    esp,0x10
c000c22d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c235:	83 ec 0c             	sub    esp,0xc
c000c238:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c23c:	e8 2c bc ff ff       	call   c0007e6d <malloc>
c000c241:	83 c4 10             	add    esp,0x10
c000c244:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c24a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c251:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c255:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c25b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c25f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c265:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c26b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c26f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c275:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c27c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c280:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c287:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c28b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c296:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c2a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2a4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c2ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2b2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c2bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2c0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c2ca:	90                   	nop
c000c2cb:	83 c4 1c             	add    esp,0x1c
c000c2ce:	c3                   	ret    
c000c2cf:	90                   	nop

c000c2d0 <Device::getName()>:
c000c2d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2d4:	05 d0 00 00 00       	add    eax,0xd0
c000c2d9:	c3                   	ret    

c000c2da <DriverlessDevice::DriverlessDevice(char const*)>:
c000c2da:	83 ec 0c             	sub    esp,0xc
c000c2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e1:	83 ec 08             	sub    esp,0x8
c000c2e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2e8:	50                   	push   eax
c000c2e9:	e8 e6 fe ff ff       	call   c000c1d4 <Device::Device(char const*)>
c000c2ee:	83 c4 10             	add    esp,0x10
c000c2f1:	ba 9c df 01 c0       	mov    edx,0xc001df9c
c000c2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2fa:	89 10                	mov    DWORD PTR [eax],edx
c000c2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c300:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000c30a:	90                   	nop
c000c30b:	83 c4 0c             	add    esp,0xc
c000c30e:	c3                   	ret    
c000c30f:	90                   	nop

c000c310 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c310:	57                   	push   edi
c000c311:	56                   	push   esi
c000c312:	53                   	push   ebx
c000c313:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c317:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c31b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c31f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c325:	75 0c                	jne    c000c333 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c327:	52                   	push   edx
c000c328:	52                   	push   edx
c000c329:	53                   	push   ebx
c000c32a:	56                   	push   esi
c000c32b:	e8 c2 02 01 00       	call   c001c5f2 <LinkedList<Device>::addElement(Device*)>
c000c330:	83 c4 10             	add    esp,0x10
c000c333:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c339:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c33c:	74 12                	je     c000c350 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c33e:	50                   	push   eax
c000c33f:	57                   	push   edi
c000c340:	56                   	push   esi
c000c341:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c344:	e8 c7 ff ff ff       	call   c000c310 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c349:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c34b:	83 c4 10             	add    esp,0x10
c000c34e:	eb e9                	jmp    c000c339 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c350:	5b                   	pop    ebx
c000c351:	5e                   	pop    esi
c000c352:	5f                   	pop    edi
c000c353:	c3                   	ret    

c000c354 <getDevicesOfType(DeviceType)>:
c000c354:	53                   	push   ebx
c000c355:	83 ec 14             	sub    esp,0x14
c000c358:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c35c:	53                   	push   ebx
c000c35d:	e8 6c 03 01 00       	call   c001c6ce <LinkedList<Device>::LinkedList()>
c000c362:	83 c4 0c             	add    esp,0xc
c000c365:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c369:	53                   	push   ebx
c000c36a:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c000c370:	e8 9b ff ff ff       	call   c000c310 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c375:	89 d8                	mov    eax,ebx
c000c377:	83 c4 18             	add    esp,0x18
c000c37a:	5b                   	pop    ebx
c000c37b:	c2 04 00             	ret    0x4
c000c37e:	66 90                	xchg   ax,ax

c000c380 <HardDiskController::HardDiskController(char const*)>:
c000c380:	83 ec 0c             	sub    esp,0xc
c000c383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c387:	83 ec 08             	sub    esp,0x8
c000c38a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38e:	50                   	push   eax
c000c38f:	e8 40 fe ff ff       	call   c000c1d4 <Device::Device(char const*)>
c000c394:	83 c4 10             	add    esp,0x10
c000c397:	ba c8 df 01 c0       	mov    edx,0xc001dfc8
c000c39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a0:	89 10                	mov    DWORD PTR [eax],edx
c000c3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c3b0:	90                   	nop
c000c3b1:	83 c4 0c             	add    esp,0xc
c000c3b4:	c3                   	ret    
c000c3b5:	90                   	nop
c000c3b6:	66 90                	xchg   ax,ax

c000c3b8 <HardDiskController::~HardDiskController()>:
c000c3b8:	83 ec 0c             	sub    esp,0xc
c000c3bb:	ba c8 df 01 c0       	mov    edx,0xc001dfc8
c000c3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3c4:	89 10                	mov    DWORD PTR [eax],edx
c000c3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ca:	83 ec 0c             	sub    esp,0xc
c000c3cd:	50                   	push   eax
c000c3ce:	e8 6b fb ff ff       	call   c000bf3e <Device::~Device()>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	90                   	nop
c000c3d7:	83 c4 0c             	add    esp,0xc
c000c3da:	c3                   	ret    
c000c3db:	90                   	nop

c000c3dc <HardDiskController::~HardDiskController()>:
c000c3dc:	83 ec 0c             	sub    esp,0xc
c000c3df:	83 ec 0c             	sub    esp,0xc
c000c3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3e6:	e8 cd ff ff ff       	call   c000c3b8 <HardDiskController::~HardDiskController()>
c000c3eb:	83 c4 10             	add    esp,0x10
c000c3ee:	83 ec 08             	sub    esp,0x8
c000c3f1:	68 58 01 00 00       	push   0x158
c000c3f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fa:	e8 07 e7 ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000c3ff:	83 c4 10             	add    esp,0x10
c000c402:	83 c4 0c             	add    esp,0xc
c000c405:	c3                   	ret    

c000c406 <PhysicalDisk::eject()>:
c000c406:	83 c8 ff             	or     eax,0xffffffff
c000c409:	c3                   	ret    

c000c40a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c40a:	83 ec 0c             	sub    esp,0xc
c000c40d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c411:	83 ec 08             	sub    esp,0x8
c000c414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c418:	50                   	push   eax
c000c419:	e8 b6 fd ff ff       	call   c000c1d4 <Device::Device(char const*)>
c000c41e:	83 c4 10             	add    esp,0x10
c000c421:	ba f4 df 01 c0       	mov    edx,0xc001dff4
c000c426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c42a:	89 10                	mov    DWORD PTR [eax],edx
c000c42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c430:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c43b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c446:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c454:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c458:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c45e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c462:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c46c:	90                   	nop
c000c46d:	83 c4 0c             	add    esp,0xc
c000c470:	c3                   	ret    
c000c471:	90                   	nop

c000c472 <PhysicalDisk::startCache()>:
c000c472:	56                   	push   esi
c000c473:	53                   	push   ebx
c000c474:	83 ec 10             	sub    esp,0x10
c000c477:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c47b:	6a 44                	push   0x44
c000c47d:	e8 eb b9 ff ff       	call   c0007e6d <malloc>
c000c482:	89 c6                	mov    esi,eax
c000c484:	58                   	pop    eax
c000c485:	5a                   	pop    edx
c000c486:	53                   	push   ebx
c000c487:	56                   	push   esi
c000c488:	e8 ab 15 00 00       	call   c000da38 <VCache::VCache(PhysicalDisk*)>
c000c48d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c493:	83 c4 14             	add    esp,0x14
c000c496:	5b                   	pop    ebx
c000c497:	5e                   	pop    esi
c000c498:	c3                   	ret    
c000c499:	90                   	nop

c000c49a <PhysicalDisk::~PhysicalDisk()>:
c000c49a:	83 ec 0c             	sub    esp,0xc
c000c49d:	ba f4 df 01 c0       	mov    edx,0xc001dff4
c000c4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a6:	89 10                	mov    DWORD PTR [eax],edx
c000c4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ac:	83 ec 0c             	sub    esp,0xc
c000c4af:	50                   	push   eax
c000c4b0:	e8 89 fa ff ff       	call   c000bf3e <Device::~Device()>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	90                   	nop
c000c4b9:	83 c4 0c             	add    esp,0xc
c000c4bc:	c3                   	ret    
c000c4bd:	90                   	nop

c000c4be <PhysicalDisk::~PhysicalDisk()>:
c000c4be:	83 ec 0c             	sub    esp,0xc
c000c4c1:	83 ec 0c             	sub    esp,0xc
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	e8 cd ff ff ff       	call   c000c49a <PhysicalDisk::~PhysicalDisk()>
c000c4cd:	83 c4 10             	add    esp,0x10
c000c4d0:	83 ec 08             	sub    esp,0x8
c000c4d3:	68 6c 01 00 00       	push   0x16c
c000c4d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4dc:	e8 25 e6 ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000c4e1:	83 c4 10             	add    esp,0x10
c000c4e4:	83 c4 0c             	add    esp,0xc
c000c4e7:	c3                   	ret    

c000c4e8 <int_handler>:
c000c4e8:	55                   	push   ebp
c000c4e9:	57                   	push   edi
c000c4ea:	56                   	push   esi
c000c4eb:	53                   	push   ebx
c000c4ec:	83 ec 0c             	sub    esp,0xc
c000c4ef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c4f3:	80 3d a0 33 02 c0 00 	cmp    BYTE PTR ds:0xc00233a0,0x0
c000c4fa:	74 0b                	je     c000c507 <int_handler+0x1f>
c000c4fc:	fa                   	cli    
c000c4fd:	f4                   	hlt    
c000c4fe:	80 3d a0 33 02 c0 00 	cmp    BYTE PTR ds:0xc00233a0,0x0
c000c505:	75 f5                	jne    c000c4fc <int_handler+0x14>
c000c507:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c50a:	8d 46 e0             	lea    eax,[esi-0x20]
c000c50d:	83 f8 17             	cmp    eax,0x17
c000c510:	76 3e                	jbe    c000c550 <int_handler+0x68>
c000c512:	c1 e6 04             	shl    esi,0x4
c000c515:	31 db                	xor    ebx,ebx
c000c517:	8d ae 20 1a 02 c0    	lea    ebp,[esi-0x3ffde5e0]
c000c51d:	81 c6 20 0a 02 c0    	add    esi,0xc0020a20
c000c523:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c527:	85 c0                	test   eax,eax
c000c529:	74 13                	je     c000c53e <int_handler+0x56>
c000c52b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c52e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c532:	74 2a                	je     c000c55e <int_handler+0x76>
c000c534:	83 ec 08             	sub    esp,0x8
c000c537:	52                   	push   edx
c000c538:	57                   	push   edi
c000c539:	ff d0                	call   eax
c000c53b:	83 c4 10             	add    esp,0x10
c000c53e:	43                   	inc    ebx
c000c53f:	83 fb 04             	cmp    ebx,0x4
c000c542:	75 df                	jne    c000c523 <int_handler+0x3b>
c000c544:	83 c4 0c             	add    esp,0xc
c000c547:	31 c0                	xor    eax,eax
c000c549:	5b                   	pop    ebx
c000c54a:	31 d2                	xor    edx,edx
c000c54c:	5e                   	pop    esi
c000c54d:	5f                   	pop    edi
c000c54e:	5d                   	pop    ebp
c000c54f:	c3                   	ret    
c000c550:	83 ec 0c             	sub    esp,0xc
c000c553:	50                   	push   eax
c000c554:	e8 cc 94 00 00       	call   c0015a25 <HalEndOfInterrupt(int)>
c000c559:	83 c4 10             	add    esp,0x10
c000c55c:	eb b4                	jmp    c000c512 <int_handler+0x2a>
c000c55e:	83 ec 08             	sub    esp,0x8
c000c561:	52                   	push   edx
c000c562:	57                   	push   edi
c000c563:	ff d0                	call   eax
c000c565:	83 c4 10             	add    esp,0x10
c000c568:	83 c4 0c             	add    esp,0xc
c000c56b:	5b                   	pop    ebx
c000c56c:	5e                   	pop    esi
c000c56d:	5f                   	pop    edi
c000c56e:	5d                   	pop    ebp
c000c56f:	c3                   	ret    

c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c570:	56                   	push   esi
c000c571:	31 c0                	xor    eax,eax
c000c573:	53                   	push   ebx
c000c574:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c578:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c57c:	89 ca                	mov    edx,ecx
c000c57e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c582:	c1 e2 04             	shl    edx,0x4
c000c585:	83 bc 82 20 1a 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde5e0],0x0
c000c58d:	74 15                	je     c000c5a4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c58f:	40                   	inc    eax
c000c590:	83 f8 04             	cmp    eax,0x4
c000c593:	75 f0                	jne    c000c585 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c595:	c7 44 24 0c 24 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e024
c000c59d:	5b                   	pop    ebx
c000c59e:	5e                   	pop    esi
c000c59f:	e9 a7 41 00 00       	jmp    c001074b <Krnl::panic(char const*)>
c000c5a4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c5a7:	89 1c 85 20 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde5e0],ebx
c000c5ae:	89 34 85 20 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5e0],esi
c000c5b5:	5b                   	pop    ebx
c000c5b6:	5e                   	pop    esi
c000c5b7:	c3                   	ret    

c000c5b8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5b8:	57                   	push   edi
c000c5b9:	8b 15 18 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020918
c000c5bf:	56                   	push   esi
c000c5c0:	53                   	push   ebx
c000c5c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c5c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5c9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5d0:	74 5b                	je     c000c62d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c5d2:	89 c7                	mov    edi,eax
c000c5d4:	84 c0                	test   al,al
c000c5d6:	74 24                	je     c000c5fc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c5d8:	83 fe 0f             	cmp    esi,0xf
c000c5db:	0f 8f d9 00 00 00    	jg     c000c6ba <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c5e1:	8a 86 80 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0780]
c000c5e7:	25 ff 00 00 00       	and    eax,0xff
c000c5ec:	66 8b bc 00 c0 31 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdce40]
c000c5f4:	89 c6                	mov    esi,eax
c000c5f6:	66 d1 ef             	shr    di,1
c000c5f9:	83 e7 01             	and    edi,0x1
c000c5fc:	83 ec 08             	sub    esp,0x8
c000c5ff:	a1 e0 47 02 c0       	mov    eax,ds:0xc00247e0
c000c604:	31 db                	xor    ebx,ebx
c000c606:	50                   	push   eax
c000c607:	68 31 e0 01 c0       	push   0xc001e031
c000c60c:	e8 eb e5 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c000c611:	83 c4 10             	add    esp,0x10
c000c614:	a1 e0 47 02 c0       	mov    eax,ds:0xc00247e0
c000c619:	85 c0                	test   eax,eax
c000c61b:	7f 51                	jg     c000c66e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c61d:	83 ec 0c             	sub    esp,0xc
c000c620:	68 48 e0 01 c0       	push   0xc001e048
c000c625:	e8 21 41 00 00       	call   c001074b <Krnl::panic(char const*)>
c000c62a:	83 c4 10             	add    esp,0x10
c000c62d:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c630:	31 d2                	xor    edx,edx
c000c632:	89 c8                	mov    eax,ecx
c000c634:	c1 e0 04             	shl    eax,0x4
c000c637:	8b 9c 90 20 1a 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde5e0]
c000c63e:	85 db                	test   ebx,ebx
c000c640:	0f 84 8b 00 00 00    	je     c000c6d1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c646:	42                   	inc    edx
c000c647:	83 fa 04             	cmp    edx,0x4
c000c64a:	75 eb                	jne    c000c637 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c64c:	83 ec 0c             	sub    esp,0xc
c000c64f:	68 9c e0 01 c0       	push   0xc001e09c
c000c654:	e8 f2 40 00 00       	call   c001074b <Krnl::panic(char const*)>
c000c659:	83 c4 10             	add    esp,0x10
c000c65c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c661:	5b                   	pop    ebx
c000c662:	5e                   	pop    esi
c000c663:	5f                   	pop    edi
c000c664:	c3                   	ret    
c000c665:	43                   	inc    ebx
c000c666:	39 1d e0 47 02 c0    	cmp    DWORD PTR ds:0xc00247e0,ebx
c000c66c:	7e af                	jle    c000c61d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c66e:	83 ec 08             	sub    esp,0x8
c000c671:	8b 04 9d 00 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb800]
c000c678:	56                   	push   esi
c000c679:	50                   	push   eax
c000c67a:	e8 9f ef 00 00       	call   c001b61e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c67f:	83 c4 10             	add    esp,0x10
c000c682:	84 c0                	test   al,al
c000c684:	74 df                	je     c000c665 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c686:	81 e7 ff 00 00 00    	and    edi,0xff
c000c68c:	50                   	push   eax
c000c68d:	8d 46 20             	lea    eax,[esi+0x20]
c000c690:	57                   	push   edi
c000c691:	25 ff 00 00 00       	and    eax,0xff
c000c696:	6a 00                	push   0x0
c000c698:	50                   	push   eax
c000c699:	89 f0                	mov    eax,esi
c000c69b:	6a 00                	push   0x0
c000c69d:	25 ff 00 00 00       	and    eax,0xff
c000c6a2:	6a 00                	push   0x0
c000c6a4:	50                   	push   eax
c000c6a5:	8b 04 9d 00 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb800]
c000c6ac:	50                   	push   eax
c000c6ad:	e8 e6 f0 00 00       	call   c001b798 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c6b2:	83 c4 20             	add    esp,0x20
c000c6b5:	e9 73 ff ff ff       	jmp    c000c62d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c6ba:	83 ec 0c             	sub    esp,0xc
c000c6bd:	31 ff                	xor    edi,edi
c000c6bf:	68 64 e0 01 c0       	push   0xc001e064
c000c6c4:	e8 82 40 00 00       	call   c001074b <Krnl::panic(char const*)>
c000c6c9:	83 c4 10             	add    esp,0x10
c000c6cc:	e9 2b ff ff ff       	jmp    c000c5fc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c6d1:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c6d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6d8:	89 14 85 20 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde5e0],edx
c000c6df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6e3:	5b                   	pop    ebx
c000c6e4:	89 14 85 20 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5e0],edx
c000c6eb:	89 f0                	mov    eax,esi
c000c6ed:	5e                   	pop    esi
c000c6ee:	5f                   	pop    edi
c000c6ef:	c3                   	ret    

c000c6f0 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c6f8:	c1 e0 04             	shl    eax,0x4
c000c6fb:	8d 50 10             	lea    edx,[eax+0x10]
c000c6fe:	39 88 20 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde5e0],ecx
c000c704:	74 08                	je     c000c70e <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c706:	83 c0 04             	add    eax,0x4
c000c709:	39 d0                	cmp    eax,edx
c000c70b:	75 f1                	jne    c000c6fe <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c70d:	c3                   	ret    
c000c70e:	c7 80 20 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5e0],0x0
c000c718:	c7 80 20 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5e0],0x0
c000c722:	eb e2                	jmp    c000c706 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c724 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c724:	53                   	push   ebx
c000c725:	83 ec 08             	sub    esp,0x8
c000c728:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c72c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c731:	74 0e                	je     c000c741 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c733:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000c738:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c73f:	75 37                	jne    c000c778 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c745:	83 c0 20             	add    eax,0x20
c000c748:	c1 e0 04             	shl    eax,0x4
c000c74b:	8d 50 10             	lea    edx,[eax+0x10]
c000c74e:	39 98 20 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde5e0],ebx
c000c754:	74 0c                	je     c000c762 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c756:	83 c0 04             	add    eax,0x4
c000c759:	39 d0                	cmp    eax,edx
c000c75b:	75 f1                	jne    c000c74e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c75d:	83 c4 08             	add    esp,0x8
c000c760:	5b                   	pop    ebx
c000c761:	c3                   	ret    
c000c762:	c7 80 20 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5e0],0x0
c000c76c:	c7 80 20 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5e0],0x0
c000c776:	eb de                	jmp    c000c756 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c778:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c77d:	7f 12                	jg     c000c791 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c77f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c783:	31 c0                	xor    eax,eax
c000c785:	8a 81 80 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0780]
c000c78b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c78f:	eb b0                	jmp    c000c741 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c791:	83 ec 0c             	sub    esp,0xc
c000c794:	68 55 e0 01 c0       	push   0xc001e055
c000c799:	e8 ad 3f 00 00       	call   c001074b <Krnl::panic(char const*)>
c000c79e:	83 c4 10             	add    esp,0x10
c000c7a1:	eb 9e                	jmp    c000c741 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c7a3 <setupINTS()>:
c000c7a3:	31 c0                	xor    eax,eax
c000c7a5:	c7 80 20 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5e0],0x0
c000c7af:	c7 80 20 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5e0],0x0
c000c7b9:	c7 80 24 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5dc],0x0
c000c7c3:	c7 80 24 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5dc],0x0
c000c7cd:	c7 80 28 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5d8],0x0
c000c7d7:	c7 80 28 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5d8],0x0
c000c7e1:	c7 80 2c 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5d4],0x0
c000c7eb:	c7 80 2c 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5d4],0x0
c000c7f5:	83 c0 10             	add    eax,0x10
c000c7f8:	3d 00 10 00 00       	cmp    eax,0x1000
c000c7fd:	75 a6                	jne    c000c7a5 <setupINTS()+0x2>
c000c7ff:	c3                   	ret    

c000c800 <convertLegacyIRQNumber(int)>:
c000c800:	83 ec 0c             	sub    esp,0xc
c000c803:	8b 15 18 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020918
c000c809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c80d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c814:	74 0f                	je     c000c825 <convertLegacyIRQNumber(int)+0x25>
c000c816:	83 f8 0f             	cmp    eax,0xf
c000c819:	7f 0e                	jg     c000c829 <convertLegacyIRQNumber(int)+0x29>
c000c81b:	31 c9                	xor    ecx,ecx
c000c81d:	8a 88 80 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0780]
c000c823:	89 c8                	mov    eax,ecx
c000c825:	83 c4 0c             	add    esp,0xc
c000c828:	c3                   	ret    
c000c829:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c82d:	83 ec 0c             	sub    esp,0xc
c000c830:	68 64 e0 01 c0       	push   0xc001e064
c000c835:	e8 11 3f 00 00       	call   c001074b <Krnl::panic(char const*)>
c000c83a:	83 c4 10             	add    esp,0x10
c000c83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c841:	83 c4 0c             	add    esp,0xc
c000c844:	c3                   	ret    
c000c845:	90                   	nop

c000c846 <startGUI(void*)>:
c000c846:	55                   	push   ebp
c000c847:	89 e5                	mov    ebp,esp
c000c849:	53                   	push   ebx
c000c84a:	83 ec 04             	sub    esp,0x4
c000c84d:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000c852:	48                   	dec    eax
c000c853:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000c858:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000c85d:	85 c0                	test   eax,eax
c000c85f:	75 01                	jne    c000c862 <startGUI(void*)+0x1c>
c000c861:	fb                   	sti    
c000c862:	8b 1d 18 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020918
c000c868:	83 ec 08             	sub    esp,0x8
c000c86b:	6a 01                	push   0x1
c000c86d:	68 c1 e0 01 c0       	push   0xc001e0c1
c000c872:	e8 37 68 00 00       	call   c00130ae <Thr::loadDLL(char const*, bool)>
c000c877:	83 c4 10             	add    esp,0x10
c000c87a:	83 ec 08             	sub    esp,0x8
c000c87d:	53                   	push   ebx
c000c87e:	50                   	push   eax
c000c87f:	e8 5b 6a 00 00       	call   c00132df <Thr::executeDLL(unsigned long, void*)>
c000c884:	83 c4 10             	add    esp,0x10
c000c887:	8b 1d 18 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020918
c000c88d:	83 ec 08             	sub    esp,0x8
c000c890:	6a 01                	push   0x1
c000c892:	68 db e0 01 c0       	push   0xc001e0db
c000c897:	e8 12 68 00 00       	call   c00130ae <Thr::loadDLL(char const*, bool)>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	83 ec 08             	sub    esp,0x8
c000c8a2:	53                   	push   ebx
c000c8a3:	50                   	push   eax
c000c8a4:	e8 36 6a 00 00       	call   c00132df <Thr::executeDLL(unsigned long, void*)>
c000c8a9:	83 c4 10             	add    esp,0x10
c000c8ac:	90                   	nop
c000c8ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c8b0:	c9                   	leave  
c000c8b1:	c3                   	ret    

c000c8b2 <startGUIVESA(void*)>:
c000c8b2:	55                   	push   ebp
c000c8b3:	89 e5                	mov    ebp,esp
c000c8b5:	53                   	push   ebx
c000c8b6:	83 ec 04             	sub    esp,0x4
c000c8b9:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000c8be:	48                   	dec    eax
c000c8bf:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000c8c4:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000c8c9:	85 c0                	test   eax,eax
c000c8cb:	75 01                	jne    c000c8ce <startGUIVESA(void*)+0x1c>
c000c8cd:	fb                   	sti    
c000c8ce:	8b 1d 18 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020918
c000c8d4:	83 ec 08             	sub    esp,0x8
c000c8d7:	6a 01                	push   0x1
c000c8d9:	68 f9 e0 01 c0       	push   0xc001e0f9
c000c8de:	e8 cb 67 00 00       	call   c00130ae <Thr::loadDLL(char const*, bool)>
c000c8e3:	83 c4 10             	add    esp,0x10
c000c8e6:	83 ec 08             	sub    esp,0x8
c000c8e9:	53                   	push   ebx
c000c8ea:	50                   	push   eax
c000c8eb:	e8 ef 69 00 00       	call   c00132df <Thr::executeDLL(unsigned long, void*)>
c000c8f0:	83 c4 10             	add    esp,0x10
c000c8f3:	8b 1d 18 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020918
c000c8f9:	83 ec 08             	sub    esp,0x8
c000c8fc:	6a 01                	push   0x1
c000c8fe:	68 db e0 01 c0       	push   0xc001e0db
c000c903:	e8 a6 67 00 00       	call   c00130ae <Thr::loadDLL(char const*, bool)>
c000c908:	83 c4 10             	add    esp,0x10
c000c90b:	83 ec 08             	sub    esp,0x8
c000c90e:	53                   	push   ebx
c000c90f:	50                   	push   eax
c000c910:	e8 ca 69 00 00       	call   c00132df <Thr::executeDLL(unsigned long, void*)>
c000c915:	83 c4 10             	add    esp,0x10
c000c918:	90                   	nop
c000c919:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c91c:	c9                   	leave  
c000c91d:	c3                   	ret    

c000c91e <sendKeyToTerminal(unsigned char)>:
c000c91e:	55                   	push   ebp
c000c91f:	89 e5                	mov    ebp,esp
c000c921:	83 ec 28             	sub    esp,0x28
c000c924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c927:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c92a:	8b 15 64 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020964
c000c930:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c933:	25 ff 00 00 00       	and    eax,0xff
c000c938:	83 ec 08             	sub    esp,0x8
c000c93b:	50                   	push   eax
c000c93c:	52                   	push   edx
c000c93d:	e8 aa c8 ff ff       	call   c00091ec <VgaText::receiveKey(unsigned char)>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c949:	0f 85 8f 00 00 00    	jne    c000c9de <sendKeyToTerminal(unsigned char)+0xc0>
c000c94f:	fa                   	cli    
c000c950:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000c955:	40                   	inc    eax
c000c956:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000c95b:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c000c960:	40                   	inc    eax
c000c961:	a3 e4 3d 02 c0       	mov    ds:0xc0023de4,eax
c000c966:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c000c96b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c96e:	c7 05 20 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a20,0x0
c000c978:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c97c:	74 1f                	je     c000c99d <sendKeyToTerminal(unsigned char)+0x7f>
c000c97e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c981:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c984:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c987:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c98a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c98d:	83 ec 0c             	sub    esp,0xc
c000c990:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c993:	e8 cc 75 00 00       	call   c0013f64 <unblockTask(ThreadControlBlock*)>
c000c998:	83 c4 10             	add    esp,0x10
c000c99b:	eb db                	jmp    c000c978 <sendKeyToTerminal(unsigned char)+0x5a>
c000c99d:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c000c9a2:	48                   	dec    eax
c000c9a3:	a3 e4 3d 02 c0       	mov    ds:0xc0023de4,eax
c000c9a8:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c000c9ad:	85 c0                	test   eax,eax
c000c9af:	75 18                	jne    c000c9c9 <sendKeyToTerminal(unsigned char)+0xab>
c000c9b1:	a1 e0 3d 02 c0       	mov    eax,ds:0xc0023de0
c000c9b6:	85 c0                	test   eax,eax
c000c9b8:	74 0f                	je     c000c9c9 <sendKeyToTerminal(unsigned char)+0xab>
c000c9ba:	c7 05 e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x0
c000c9c4:	e8 d7 70 00 00       	call   c0013aa0 <schedule()>
c000c9c9:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000c9ce:	48                   	dec    eax
c000c9cf:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000c9d4:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000c9d9:	85 c0                	test   eax,eax
c000c9db:	75 01                	jne    c000c9de <sendKeyToTerminal(unsigned char)+0xc0>
c000c9dd:	fb                   	sti    
c000c9de:	90                   	nop
c000c9df:	c9                   	leave  
c000c9e0:	c3                   	ret    

c000c9e1 <sendKeyboardToken(KeyboardToken)>:
c000c9e1:	55                   	push   ebp
c000c9e2:	89 e5                	mov    ebp,esp
c000c9e4:	83 ec 18             	sub    esp,0x18
c000c9e7:	e8 ab 3e 00 00       	call   c0010897 <Krnl::userIOReceived()>
c000c9ec:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c9ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9f2:	25 ff ff 00 00       	and    eax,0xffff
c000c9f7:	83 f2 01             	xor    edx,0x1
c000c9fa:	88 90 40 2a 02 c0    	mov    BYTE PTR [eax-0x3ffdd5c0],dl
c000ca00:	a1 28 2a 02 c0       	mov    eax,ds:0xc0022a28
c000ca05:	85 c0                	test   eax,eax
c000ca07:	74 24                	je     c000ca2d <sendKeyboardToken(KeyboardToken)+0x4c>
c000ca09:	8b 0d 28 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a28
c000ca0f:	83 ec 04             	sub    esp,0x4
c000ca12:	68 40 2a 02 c0       	push   0xc0022a40
c000ca17:	83 ec 08             	sub    esp,0x8
c000ca1a:	89 e2                	mov    edx,esp
c000ca1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca1f:	89 02                	mov    DWORD PTR [edx],eax
c000ca21:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca24:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ca28:	ff d1                	call   ecx
c000ca2a:	83 c4 10             	add    esp,0x10
c000ca2d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca31:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca34:	a0 48 2e 02 c0       	mov    al,ds:0xc0022e48
c000ca39:	38 c2                	cmp    dl,al
c000ca3b:	74 1e                	je     c000ca5b <sendKeyboardToken(KeyboardToken)+0x7a>
c000ca3d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ca40:	a2 48 2e 02 c0       	mov    ds:0xc0022e48,al
c000ca45:	a0 48 2e 02 c0       	mov    al,ds:0xc0022e48
c000ca4a:	25 ff 00 00 00       	and    eax,0xff
c000ca4f:	83 ec 0c             	sub    esp,0xc
c000ca52:	50                   	push   eax
c000ca53:	e8 e6 be ff ff       	call   c000893e <setTerminalScrollLock(bool)>
c000ca58:	83 c4 10             	add    esp,0x10
c000ca5b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ca5e:	84 c0                	test   al,al
c000ca60:	0f 84 ae 00 00 00    	je     c000cb14 <sendKeyboardToken(KeyboardToken)+0x133>
c000ca66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca69:	66 3d 10 03          	cmp    ax,0x310
c000ca6d:	75 06                	jne    c000ca75 <sendKeyboardToken(KeyboardToken)+0x94>
c000ca6f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ca75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca78:	66 3d 11 03          	cmp    ax,0x311
c000ca7c:	75 06                	jne    c000ca84 <sendKeyboardToken(KeyboardToken)+0xa3>
c000ca7e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000ca84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca87:	66 3d 12 03          	cmp    ax,0x312
c000ca8b:	75 06                	jne    c000ca93 <sendKeyboardToken(KeyboardToken)+0xb2>
c000ca8d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000ca93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca96:	66 3d 13 03          	cmp    ax,0x313
c000ca9a:	75 06                	jne    c000caa2 <sendKeyboardToken(KeyboardToken)+0xc1>
c000ca9c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000caa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa5:	66 3d 14 03          	cmp    ax,0x314
c000caa9:	75 06                	jne    c000cab1 <sendKeyboardToken(KeyboardToken)+0xd0>
c000caab:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000cab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab4:	66 3d 15 03          	cmp    ax,0x315
c000cab8:	75 06                	jne    c000cac0 <sendKeyboardToken(KeyboardToken)+0xdf>
c000caba:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac3:	66 3d 16 03          	cmp    ax,0x316
c000cac7:	75 06                	jne    c000cacf <sendKeyboardToken(KeyboardToken)+0xee>
c000cac9:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cacf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad2:	66 3d 17 03          	cmp    ax,0x317
c000cad6:	75 06                	jne    c000cade <sendKeyboardToken(KeyboardToken)+0xfd>
c000cad8:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae1:	66 3d 18 03          	cmp    ax,0x318
c000cae5:	75 06                	jne    c000caed <sendKeyboardToken(KeyboardToken)+0x10c>
c000cae7:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000caed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caf0:	66 3d 19 03          	cmp    ax,0x319
c000caf4:	75 06                	jne    c000cafc <sendKeyboardToken(KeyboardToken)+0x11b>
c000caf6:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cafc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caff:	66 3d 1a 03          	cmp    ax,0x31a
c000cb03:	0f 85 c9 00 00 00    	jne    c000cbd2 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cb09:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cb0f:	e9 be 00 00 00       	jmp    c000cbd2 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cb14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb17:	66 3d 10 03          	cmp    ax,0x310
c000cb1b:	75 0a                	jne    c000cb27 <sendKeyboardToken(KeyboardToken)+0x146>
c000cb1d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cb23:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb2a:	66 3d 11 03          	cmp    ax,0x311
c000cb2e:	75 0a                	jne    c000cb3a <sendKeyboardToken(KeyboardToken)+0x159>
c000cb30:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cb36:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb3d:	66 3d 12 03          	cmp    ax,0x312
c000cb41:	75 0a                	jne    c000cb4d <sendKeyboardToken(KeyboardToken)+0x16c>
c000cb43:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cb49:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb50:	66 3d 13 03          	cmp    ax,0x313
c000cb54:	75 0a                	jne    c000cb60 <sendKeyboardToken(KeyboardToken)+0x17f>
c000cb56:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cb5c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb63:	66 3d 14 03          	cmp    ax,0x314
c000cb67:	75 0a                	jne    c000cb73 <sendKeyboardToken(KeyboardToken)+0x192>
c000cb69:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cb6f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb76:	66 3d 15 03          	cmp    ax,0x315
c000cb7a:	75 0a                	jne    c000cb86 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000cb7c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb82:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb89:	66 3d 16 03          	cmp    ax,0x316
c000cb8d:	75 0a                	jne    c000cb99 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000cb8f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cb95:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9c:	66 3d 17 03          	cmp    ax,0x317
c000cba0:	75 0a                	jne    c000cbac <sendKeyboardToken(KeyboardToken)+0x1cb>
c000cba2:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cba8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbaf:	66 3d 18 03          	cmp    ax,0x318
c000cbb3:	75 0a                	jne    c000cbbf <sendKeyboardToken(KeyboardToken)+0x1de>
c000cbb5:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cbbb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc2:	66 3d 19 03          	cmp    ax,0x319
c000cbc6:	75 0a                	jne    c000cbd2 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cbc8:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cbce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd5:	66 3d 00 02          	cmp    ax,0x200
c000cbd9:	75 2c                	jne    c000cc07 <sendKeyboardToken(KeyboardToken)+0x226>
c000cbdb:	a0 40 2e 02 c0       	mov    al,ds:0xc0022e40
c000cbe0:	83 f0 01             	xor    eax,0x1
c000cbe3:	84 c0                	test   al,al
c000cbe5:	74 20                	je     c000cc07 <sendKeyboardToken(KeyboardToken)+0x226>
c000cbe7:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c000cbec:	6a 01                	push   0x1
c000cbee:	6a 00                	push   0x0
c000cbf0:	68 46 c8 00 c0       	push   0xc000c846
c000cbf5:	50                   	push   eax
c000cbf6:	e8 85 6c 00 00       	call   c0013880 <Process::createThread(void (*)(void*), void*, int)>
c000cbfb:	83 c4 10             	add    esp,0x10
c000cbfe:	c6 05 40 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e40,0x1
c000cc05:	eb 33                	jmp    c000cc3a <sendKeyboardToken(KeyboardToken)+0x259>
c000cc07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc0a:	66 3d 01 02          	cmp    ax,0x201
c000cc0e:	75 2a                	jne    c000cc3a <sendKeyboardToken(KeyboardToken)+0x259>
c000cc10:	a0 40 2e 02 c0       	mov    al,ds:0xc0022e40
c000cc15:	83 f0 01             	xor    eax,0x1
c000cc18:	84 c0                	test   al,al
c000cc1a:	74 1e                	je     c000cc3a <sendKeyboardToken(KeyboardToken)+0x259>
c000cc1c:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c000cc21:	6a 01                	push   0x1
c000cc23:	6a 00                	push   0x0
c000cc25:	68 b2 c8 00 c0       	push   0xc000c8b2
c000cc2a:	50                   	push   eax
c000cc2b:	e8 50 6c 00 00       	call   c0013880 <Process::createThread(void (*)(void*), void*, int)>
c000cc30:	83 c4 10             	add    esp,0x10
c000cc33:	c6 05 40 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e40,0x1
c000cc3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc3d:	66 3d 1d 03          	cmp    ax,0x31d
c000cc41:	75 06                	jne    c000cc49 <sendKeyboardToken(KeyboardToken)+0x268>
c000cc43:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cc49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc4c:	66 3d 1c 03          	cmp    ax,0x31c
c000cc50:	75 06                	jne    c000cc58 <sendKeyboardToken(KeyboardToken)+0x277>
c000cc52:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cc58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc5b:	66 3d 1b 03          	cmp    ax,0x31b
c000cc5f:	75 06                	jne    c000cc67 <sendKeyboardToken(KeyboardToken)+0x286>
c000cc61:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cc67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc6a:	66 3d 1e 03          	cmp    ax,0x31e
c000cc6e:	75 06                	jne    c000cc76 <sendKeyboardToken(KeyboardToken)+0x295>
c000cc70:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cc76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc79:	66 3d 1f 03          	cmp    ax,0x31f
c000cc7d:	75 06                	jne    c000cc85 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000cc7f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cc85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc88:	66 3d 1a 03          	cmp    ax,0x31a
c000cc8c:	75 06                	jne    c000cc94 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000cc8e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cc94:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cc98:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc9b:	83 f0 01             	xor    eax,0x1
c000cc9e:	84 c0                	test   al,al
c000cca0:	74 7b                	je     c000cd1d <sendKeyboardToken(KeyboardToken)+0x33c>
c000cca2:	a0 41 2b 02 c0       	mov    al,ds:0xc0022b41
c000cca7:	84 c0                	test   al,al
c000cca9:	74 43                	je     c000ccee <sendKeyboardToken(KeyboardToken)+0x30d>
c000ccab:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ccaf:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000ccb3:	74 2d                	je     c000cce2 <sendKeyboardToken(KeyboardToken)+0x301>
c000ccb5:	8b 15 44 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e44
c000ccbb:	89 d0                	mov    eax,edx
c000ccbd:	c1 e0 02             	shl    eax,0x2
c000ccc0:	01 d0                	add    eax,edx
c000ccc2:	01 c0                	add    eax,eax
c000ccc4:	a3 44 2e 02 c0       	mov    ds:0xc0022e44,eax
c000ccc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cccc:	25 ff ff 00 00       	and    eax,0xffff
c000ccd1:	8d 50 d0             	lea    edx,[eax-0x30]
c000ccd4:	a1 44 2e 02 c0       	mov    eax,ds:0xc0022e44
c000ccd9:	01 d0                	add    eax,edx
c000ccdb:	a3 44 2e 02 c0       	mov    ds:0xc0022e44,eax
c000cce0:	eb 71                	jmp    c000cd53 <sendKeyboardToken(KeyboardToken)+0x372>
c000cce2:	c7 05 44 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e44,0x0
c000ccec:	eb 65                	jmp    c000cd53 <sendKeyboardToken(KeyboardToken)+0x372>
c000ccee:	a1 44 2e 02 c0       	mov    eax,ds:0xc0022e44
c000ccf3:	85 c0                	test   eax,eax
c000ccf5:	74 1a                	je     c000cd11 <sendKeyboardToken(KeyboardToken)+0x330>
c000ccf7:	a1 44 2e 02 c0       	mov    eax,ds:0xc0022e44
c000ccfc:	25 ff 00 00 00       	and    eax,0xff
c000cd01:	83 ec 0c             	sub    esp,0xc
c000cd04:	50                   	push   eax
c000cd05:	e8 14 fc ff ff       	call   c000c91e <sendKeyToTerminal(unsigned char)>
c000cd0a:	83 c4 10             	add    esp,0x10
c000cd0d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd11:	c7 05 44 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e44,0x0
c000cd1b:	eb 36                	jmp    c000cd53 <sendKeyboardToken(KeyboardToken)+0x372>
c000cd1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd20:	66 3d 01 01          	cmp    ax,0x101
c000cd24:	75 2d                	jne    c000cd53 <sendKeyboardToken(KeyboardToken)+0x372>
c000cd26:	a1 44 2e 02 c0       	mov    eax,ds:0xc0022e44
c000cd2b:	85 c0                	test   eax,eax
c000cd2d:	74 1a                	je     c000cd49 <sendKeyboardToken(KeyboardToken)+0x368>
c000cd2f:	a1 44 2e 02 c0       	mov    eax,ds:0xc0022e44
c000cd34:	25 ff 00 00 00       	and    eax,0xff
c000cd39:	83 ec 0c             	sub    esp,0xc
c000cd3c:	50                   	push   eax
c000cd3d:	e8 dc fb ff ff       	call   c000c91e <sendKeyToTerminal(unsigned char)>
c000cd42:	83 c4 10             	add    esp,0x10
c000cd45:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd49:	c7 05 44 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e44,0x0
c000cd53:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd56:	83 f0 01             	xor    eax,0x1
c000cd59:	84 c0                	test   al,al
c000cd5b:	74 4e                	je     c000cdab <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd5d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd60:	83 f0 01             	xor    eax,0x1
c000cd63:	84 c0                	test   al,al
c000cd65:	74 44                	je     c000cdab <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd67:	a0 40 2b 02 c0       	mov    al,ds:0xc0022b40
c000cd6c:	83 f0 01             	xor    eax,0x1
c000cd6f:	84 c0                	test   al,al
c000cd71:	74 38                	je     c000cdab <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd76:	66 83 f8 1f          	cmp    ax,0x1f
c000cd7a:	76 09                	jbe    c000cd85 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000cd7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd7f:	66 83 f8 7e          	cmp    ax,0x7e
c000cd83:	76 12                	jbe    c000cd97 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd88:	66 83 f8 0a          	cmp    ax,0xa
c000cd8c:	74 09                	je     c000cd97 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd91:	66 83 f8 08          	cmp    ax,0x8
c000cd95:	75 14                	jne    c000cdab <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd9a:	25 ff 00 00 00       	and    eax,0xff
c000cd9f:	83 ec 0c             	sub    esp,0xc
c000cda2:	50                   	push   eax
c000cda3:	e8 76 fb ff ff       	call   c000c91e <sendKeyToTerminal(unsigned char)>
c000cda8:	83 c4 10             	add    esp,0x10
c000cdab:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cdae:	83 f0 01             	xor    eax,0x1
c000cdb1:	84 c0                	test   al,al
c000cdb3:	74 51                	je     c000ce06 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdb5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cdb8:	83 f0 01             	xor    eax,0x1
c000cdbb:	84 c0                	test   al,al
c000cdbd:	74 47                	je     c000ce06 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdbf:	a0 40 2b 02 c0       	mov    al,ds:0xc0022b40
c000cdc4:	84 c0                	test   al,al
c000cdc6:	74 3e                	je     c000ce06 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdcb:	66 83 f8 3f          	cmp    ax,0x3f
c000cdcf:	76 35                	jbe    c000ce06 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdd4:	66 83 f8 7f          	cmp    ax,0x7f
c000cdd8:	77 2c                	ja     c000ce06 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cddd:	88 c2                	mov    dl,al
c000cddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cde2:	66 83 f8 5f          	cmp    ax,0x5f
c000cde6:	76 04                	jbe    c000cdec <sendKeyboardToken(KeyboardToken)+0x40b>
c000cde8:	b0 20                	mov    al,0x20
c000cdea:	eb 02                	jmp    c000cdee <sendKeyboardToken(KeyboardToken)+0x40d>
c000cdec:	b0 00                	mov    al,0x0
c000cdee:	29 c2                	sub    edx,eax
c000cdf0:	88 d0                	mov    al,dl
c000cdf2:	83 e8 40             	sub    eax,0x40
c000cdf5:	25 ff 00 00 00       	and    eax,0xff
c000cdfa:	83 ec 0c             	sub    esp,0xc
c000cdfd:	50                   	push   eax
c000cdfe:	e8 1b fb ff ff       	call   c000c91e <sendKeyToTerminal(unsigned char)>
c000ce03:	83 c4 10             	add    esp,0x10
c000ce06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce09:	66 3d 00 03          	cmp    ax,0x300
c000ce0d:	75 0f                	jne    c000ce1e <sendKeyboardToken(KeyboardToken)+0x43d>
c000ce0f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce12:	83 f0 01             	xor    eax,0x1
c000ce15:	84 c0                	test   al,al
c000ce17:	74 05                	je     c000ce1e <sendKeyboardToken(KeyboardToken)+0x43d>
c000ce19:	e8 21 bb ff ff       	call   c000893f <doTerminalCycle()>
c000ce1e:	90                   	nop
c000ce1f:	c9                   	leave  
c000ce20:	c3                   	ret    

c000ce21 <clearInternalKeybuffer(VgaText*)>:
c000ce21:	55                   	push   ebp
c000ce22:	89 e5                	mov    ebp,esp
c000ce24:	83 ec 08             	sub    esp,0x8
c000ce27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce2a:	05 b2 00 00 00       	add    eax,0xb2
c000ce2f:	83 ec 0c             	sub    esp,0xc
c000ce32:	50                   	push   eax
c000ce33:	e8 28 37 ff ff       	call   c0000560 <strlen>
c000ce38:	83 c4 10             	add    esp,0x10
c000ce3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce3e:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ce44:	83 ec 04             	sub    esp,0x4
c000ce47:	50                   	push   eax
c000ce48:	6a 00                	push   0x0
c000ce4a:	52                   	push   edx
c000ce4b:	e8 a0 36 ff ff       	call   c00004f0 <memset>
c000ce50:	83 c4 10             	add    esp,0x10
c000ce53:	90                   	nop
c000ce54:	c9                   	leave  
c000ce55:	c3                   	ret    

c000ce56 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ce56:	55                   	push   ebp
c000ce57:	89 e5                	mov    ebp,esp
c000ce59:	83 ec 18             	sub    esp,0x18
c000ce5c:	a1 28 2a 02 c0       	mov    eax,ds:0xc0022a28
c000ce61:	85 c0                	test   eax,eax
c000ce63:	74 2a                	je     c000ce8f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ce65:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ce6b:	8b 0d 28 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a28
c000ce71:	83 ec 04             	sub    esp,0x4
c000ce74:	68 40 2a 02 c0       	push   0xc0022a40
c000ce79:	83 ec 08             	sub    esp,0x8
c000ce7c:	89 e2                	mov    edx,esp
c000ce7e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ce81:	89 02                	mov    DWORD PTR [edx],eax
c000ce83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ce86:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ce8a:	ff d1                	call   ecx
c000ce8c:	83 c4 10             	add    esp,0x10
c000ce8f:	fb                   	sti    
c000ce90:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ce97:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ce9b:	0f 84 a1 00 00 00    	je     c000cf42 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000cea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cea4:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ceaa:	84 c0                	test   al,al
c000ceac:	75 28                	jne    c000ced6 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ceae:	fa                   	cli    
c000ceaf:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000ceb4:	40                   	inc    eax
c000ceb5:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000ceba:	e8 e1 6b 00 00       	call   c0013aa0 <schedule()>
c000cebf:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000cec4:	48                   	dec    eax
c000cec5:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000ceca:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000cecf:	85 c0                	test   eax,eax
c000ced1:	75 ce                	jne    c000cea1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ced3:	fb                   	sti    
c000ced4:	eb cb                	jmp    c000cea1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ced6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ced9:	8d 50 01             	lea    edx,[eax+0x1]
c000cedc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cedf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cee2:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000cee8:	88 10                	mov    BYTE PTR [eax],dl
c000ceea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ceed:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000cef3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cef9:	05 b2 00 00 00       	add    eax,0xb2
c000cefe:	83 ec 0c             	sub    esp,0xc
c000cf01:	50                   	push   eax
c000cf02:	e8 59 36 ff ff       	call   c0000560 <strlen>
c000cf07:	83 c4 10             	add    esp,0x10
c000cf0a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf0d:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cf13:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cf16:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf19:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cf1f:	83 ec 04             	sub    esp,0x4
c000cf22:	50                   	push   eax
c000cf23:	51                   	push   ecx
c000cf24:	52                   	push   edx
c000cf25:	e8 d6 34 ff ff       	call   c0000400 <memmove>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cf30:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cf33:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cf37:	0f 85 5a ff ff ff    	jne    c000ce97 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cf3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf40:	eb 03                	jmp    c000cf45 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000cf42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf45:	c9                   	leave  
c000cf46:	c3                   	ret    
c000cf47:	90                   	nop

c000cf48 <Keyboard::Keyboard(char const*)>:
c000cf48:	83 ec 0c             	sub    esp,0xc
c000cf4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf4f:	83 ec 08             	sub    esp,0x8
c000cf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf56:	50                   	push   eax
c000cf57:	e8 78 f2 ff ff       	call   c000c1d4 <Device::Device(char const*)>
c000cf5c:	83 c4 10             	add    esp,0x10
c000cf5f:	ba 1c e1 01 c0       	mov    edx,0xc001e11c
c000cf64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf68:	89 10                	mov    DWORD PTR [eax],edx
c000cf6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf6e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cf78:	c6 05 24 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a24,0x1
c000cf7f:	90                   	nop
c000cf80:	83 c4 0c             	add    esp,0xc
c000cf83:	c3                   	ret    

c000cf84 <Keyboard::~Keyboard()>:
c000cf84:	83 ec 0c             	sub    esp,0xc
c000cf87:	ba 1c e1 01 c0       	mov    edx,0xc001e11c
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	89 10                	mov    DWORD PTR [eax],edx
c000cf92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf96:	83 ec 0c             	sub    esp,0xc
c000cf99:	50                   	push   eax
c000cf9a:	e8 9f ef ff ff       	call   c000bf3e <Device::~Device()>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	90                   	nop
c000cfa3:	83 c4 0c             	add    esp,0xc
c000cfa6:	c3                   	ret    
c000cfa7:	90                   	nop

c000cfa8 <Keyboard::~Keyboard()>:
c000cfa8:	83 ec 0c             	sub    esp,0xc
c000cfab:	83 ec 0c             	sub    esp,0xc
c000cfae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb2:	e8 cd ff ff ff       	call   c000cf84 <Keyboard::~Keyboard()>
c000cfb7:	83 c4 10             	add    esp,0x10
c000cfba:	83 ec 08             	sub    esp,0x8
c000cfbd:	68 5c 01 00 00       	push   0x15c
c000cfc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfc6:	e8 3b db ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000cfcb:	83 c4 10             	add    esp,0x10
c000cfce:	83 c4 0c             	add    esp,0xc
c000cfd1:	c3                   	ret    

c000cfd2 <LogicalDisk::close(int, int, void*)>:
c000cfd2:	83 c8 ff             	or     eax,0xffffffff
c000cfd5:	c3                   	ret    

c000cfd6 <LogicalDisk::~LogicalDisk()>:
c000cfd6:	83 ec 0c             	sub    esp,0xc
c000cfd9:	ba 94 e1 01 c0       	mov    edx,0xc001e194
c000cfde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe2:	89 10                	mov    DWORD PTR [eax],edx
c000cfe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe8:	83 ec 0c             	sub    esp,0xc
c000cfeb:	50                   	push   eax
c000cfec:	e8 4d ef ff ff       	call   c000bf3e <Device::~Device()>
c000cff1:	83 c4 10             	add    esp,0x10
c000cff4:	90                   	nop
c000cff5:	83 c4 0c             	add    esp,0xc
c000cff8:	c3                   	ret    
c000cff9:	90                   	nop

c000cffa <LogicalDisk::~LogicalDisk()>:
c000cffa:	83 ec 0c             	sub    esp,0xc
c000cffd:	83 ec 0c             	sub    esp,0xc
c000d000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d004:	e8 cd ff ff ff       	call   c000cfd6 <LogicalDisk::~LogicalDisk()>
c000d009:	83 c4 10             	add    esp,0x10
c000d00c:	83 ec 08             	sub    esp,0x8
c000d00f:	68 74 01 00 00       	push   0x174
c000d014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d018:	e8 e9 da ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000d01d:	83 c4 10             	add    esp,0x10
c000d020:	83 c4 0c             	add    esp,0xc
c000d023:	c3                   	ret    

c000d024 <LogicalDisk::open(int, int, void*)>:
c000d024:	83 ec 18             	sub    esp,0x18
c000d027:	68 48 e1 01 c0       	push   0xc001e148
c000d02c:	e8 1a 37 00 00       	call   c001074b <Krnl::panic(char const*)>
c000d031:	83 c8 ff             	or     eax,0xffffffff
c000d034:	83 c4 1c             	add    esp,0x1c
c000d037:	c3                   	ret    

c000d038 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d038:	53                   	push   ebx
c000d039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d03d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d041:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d045:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d04b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d051:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d057:	77 10                	ja     c000d069 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d059:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d05f:	89 d3                	mov    ebx,edx
c000d061:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d067:	72 05                	jb     c000d06e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d069:	83 c8 ff             	or     eax,0xffffffff
c000d06c:	89 c2                	mov    edx,eax
c000d06e:	5b                   	pop    ebx
c000d06f:	c3                   	ret    

c000d070 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d070:	56                   	push   esi
c000d071:	83 c8 ff             	or     eax,0xffffffff
c000d074:	53                   	push   ebx
c000d075:	89 c2                	mov    edx,eax
c000d077:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d07b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d07f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d083:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d089:	77 27                	ja     c000d0b2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d08b:	89 d8                	mov    eax,ebx
c000d08d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d093:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d099:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d09e:	89 c2                	mov    edx,eax
c000d0a0:	73 10                	jae    c000d0b2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d0a2:	89 c8                	mov    eax,ecx
c000d0a4:	89 da                	mov    edx,ebx
c000d0a6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d0ac:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d0b2:	5b                   	pop    ebx
c000d0b3:	5e                   	pop    esi
c000d0b4:	c3                   	ret    
c000d0b5:	90                   	nop

c000d0b6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d0b6:	83 ec 1c             	sub    esp,0x1c
c000d0b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d0c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d0cd:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0d0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0dc:	83 ec 08             	sub    esp,0x8
c000d0df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0e3:	50                   	push   eax
c000d0e4:	e8 eb f0 ff ff       	call   c000c1d4 <Device::Device(char const*)>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	ba 94 e1 01 c0       	mov    edx,0xc001e194
c000d0f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0f5:	89 10                	mov    DWORD PTR [eax],edx
c000d0f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0fb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d106:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d10d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d111:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d11b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d11f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d123:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d127:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d12d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d133:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d137:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d13a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d13e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d144:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d14a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d14e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d152:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d15c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d166:	90                   	nop
c000d167:	83 c4 1c             	add    esp,0x1c
c000d16a:	c3                   	ret    
c000d16b:	90                   	nop

c000d16c <LogicalDisk::assignDriveLetter()>:
c000d16c:	55                   	push   ebp
c000d16d:	57                   	push   edi
c000d16e:	56                   	push   esi
c000d16f:	53                   	push   ebx
c000d170:	83 ec 14             	sub    esp,0x14
c000d173:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d177:	8b 3d 60 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022e60
c000d17d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d187:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000d18d:	8b 3d 64 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022e64
c000d193:	3c 01                	cmp    al,0x1
c000d195:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000d199:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000d19d:	19 c0                	sbb    eax,eax
c000d19f:	83 e0 02             	and    eax,0x2
c000d1a2:	83 c0 41             	add    eax,0x41
c000d1a5:	0f be e8             	movsx  ebp,al
c000d1a8:	3c 43                	cmp    al,0x43
c000d1aa:	75 10                	jne    c000d1bc <LogicalDisk::assignDriveLetter()+0x50>
c000d1ac:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d1b3:	75 5d                	jne    c000d212 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1b5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000d1ba:	75 56                	jne    c000d212 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1bc:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d1bf:	ba 01 00 00 00       	mov    edx,0x1
c000d1c4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000d1c8:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d1cc:	d3 e2                	shl    edx,cl
c000d1ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d1d2:	89 d7                	mov    edi,edx
c000d1d4:	89 d6                	mov    esi,edx
c000d1d6:	c1 ff 1f             	sar    edi,0x1f
c000d1d9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d1dd:	21 f9                	and    ecx,edi
c000d1df:	09 d1                	or     ecx,edx
c000d1e1:	75 2f                	jne    c000d212 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1e3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d1e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1eb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d1f1:	09 f2                	or     edx,esi
c000d1f3:	89 15 60 2e 02 c0    	mov    DWORD PTR ds:0xc0022e60,edx
c000d1f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1fd:	09 fa                	or     edx,edi
c000d1ff:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d203:	89 15 64 2e 02 c0    	mov    DWORD PTR ds:0xc0022e64,edx
c000d209:	89 1c bd 80 2e 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd180],ebx
c000d210:	eb 08                	jmp    c000d21a <LogicalDisk::assignDriveLetter()+0xae>
c000d212:	45                   	inc    ebp
c000d213:	40                   	inc    eax
c000d214:	3c 5b                	cmp    al,0x5b
c000d216:	75 90                	jne    c000d1a8 <LogicalDisk::assignDriveLetter()+0x3c>
c000d218:	31 c0                	xor    eax,eax
c000d21a:	83 c4 14             	add    esp,0x14
c000d21d:	5b                   	pop    ebx
c000d21e:	5e                   	pop    esi
c000d21f:	5f                   	pop    edi
c000d220:	5d                   	pop    ebp
c000d221:	c3                   	ret    

c000d222 <LogicalDisk::mount()>:
c000d222:	56                   	push   esi
c000d223:	53                   	push   ebx
c000d224:	53                   	push   ebx
c000d225:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d229:	8b 1d 14 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a14
c000d22f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000d239:	85 db                	test   ebx,ebx
c000d23b:	74 27                	je     c000d264 <LogicalDisk::mount()+0x42>
c000d23d:	51                   	push   ecx
c000d23e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d245:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d247:	83 e8 41             	sub    eax,0x41
c000d24a:	50                   	push   eax
c000d24b:	56                   	push   esi
c000d24c:	53                   	push   ebx
c000d24d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d250:	83 c4 10             	add    esp,0x10
c000d253:	84 c0                	test   al,al
c000d255:	74 08                	je     c000d25f <LogicalDisk::mount()+0x3d>
c000d257:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000d25d:	eb 07                	jmp    c000d266 <LogicalDisk::mount()+0x44>
c000d25f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d262:	eb d5                	jmp    c000d239 <LogicalDisk::mount()+0x17>
c000d264:	31 c0                	xor    eax,eax
c000d266:	5a                   	pop    edx
c000d267:	5b                   	pop    ebx
c000d268:	5e                   	pop    esi
c000d269:	c3                   	ret    

c000d26a <LogicalDisk::unmount()>:
c000d26a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d26e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d278:	c3                   	ret    
c000d279:	90                   	nop

c000d27a <LogicalDisk::eject()>:
c000d27a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d27e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d284:	8b 10                	mov    edx,DWORD PTR [eax]
c000d286:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d28a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d28d:	90                   	nop

c000d28e <LogicalDisk::unassignDriveLetter()>:
c000d28e:	57                   	push   edi
c000d28f:	56                   	push   esi
c000d290:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d294:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d29b:	84 c9                	test   cl,cl
c000d29d:	75 0f                	jne    c000d2ae <LogicalDisk::unassignDriveLetter()+0x20>
c000d29f:	c7 44 24 0c 6c e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e16c
c000d2a7:	5e                   	pop    esi
c000d2a8:	5f                   	pop    edi
c000d2a9:	e9 9d 34 00 00       	jmp    c001074b <Krnl::panic(char const*)>
c000d2ae:	83 e9 41             	sub    ecx,0x41
c000d2b1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d2b8:	b8 01 00 00 00       	mov    eax,0x1
c000d2bd:	c7 04 8d 80 2e 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd180],0x0
c000d2c8:	d3 e0                	shl    eax,cl
c000d2ca:	89 c7                	mov    edi,eax
c000d2cc:	f7 d0                	not    eax
c000d2ce:	c1 ff 1f             	sar    edi,0x1f
c000d2d1:	21 05 60 2e 02 c0    	and    DWORD PTR ds:0xc0022e60,eax
c000d2d7:	89 fe                	mov    esi,edi
c000d2d9:	f7 d6                	not    esi
c000d2db:	21 35 64 2e 02 c0    	and    DWORD PTR ds:0xc0022e64,esi
c000d2e1:	5e                   	pop    esi
c000d2e2:	5f                   	pop    edi
c000d2e3:	c3                   	ret    

c000d2e4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d2e4:	57                   	push   edi
c000d2e5:	56                   	push   esi
c000d2e6:	53                   	push   ebx
c000d2e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2ef:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d2f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d2f7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d2fd:	77 41                	ja     c000d340 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d2ff:	99                   	cdq    
c000d300:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d306:	01 c8                	add    eax,ecx
c000d308:	11 da                	adc    edx,ebx
c000d30a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d310:	19 d7                	sbb    edi,edx
c000d312:	72 33                	jb     c000d347 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d314:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d31a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d320:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d324:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d328:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d32e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d334:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d338:	5b                   	pop    ebx
c000d339:	5e                   	pop    esi
c000d33a:	5f                   	pop    edi
c000d33b:	e9 32 0a 00 00       	jmp    c000dd72 <VCache::read(unsigned long long, int, void*)>
c000d340:	b8 05 00 00 00       	mov    eax,0x5
c000d345:	eb 05                	jmp    c000d34c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d347:	b8 07 00 00 00       	mov    eax,0x7
c000d34c:	5b                   	pop    ebx
c000d34d:	5e                   	pop    esi
c000d34e:	5f                   	pop    edi
c000d34f:	c3                   	ret    

c000d350 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d350:	57                   	push   edi
c000d351:	56                   	push   esi
c000d352:	53                   	push   ebx
c000d353:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d357:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d35b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d35f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d363:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d369:	77 41                	ja     c000d3ac <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d36b:	99                   	cdq    
c000d36c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d372:	01 c8                	add    eax,ecx
c000d374:	11 da                	adc    edx,ebx
c000d376:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d37c:	19 d7                	sbb    edi,edx
c000d37e:	72 33                	jb     c000d3b3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d380:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d386:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d38c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d390:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d394:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d39a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d3a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d3a4:	5b                   	pop    ebx
c000d3a5:	5e                   	pop    esi
c000d3a6:	5f                   	pop    edi
c000d3a7:	e9 cc 08 00 00       	jmp    c000dc78 <VCache::write(unsigned long long, int, void*)>
c000d3ac:	b8 05 00 00 00       	mov    eax,0x5
c000d3b1:	eb 05                	jmp    c000d3b8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d3b3:	b8 07 00 00 00       	mov    eax,0x7
c000d3b8:	5b                   	pop    ebx
c000d3b9:	5e                   	pop    esi
c000d3ba:	5f                   	pop    edi
c000d3bb:	c3                   	ret    

c000d3bc <Mouse::Mouse(char const*)>:
c000d3bc:	83 ec 0c             	sub    esp,0xc
c000d3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c3:	83 ec 08             	sub    esp,0x8
c000d3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ca:	50                   	push   eax
c000d3cb:	e8 04 ee ff ff       	call   c000c1d4 <Device::Device(char const*)>
c000d3d0:	83 c4 10             	add    esp,0x10
c000d3d3:	ba c0 e1 01 c0       	mov    edx,0xc001e1c0
c000d3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3dc:	89 10                	mov    DWORD PTR [eax],edx
c000d3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d3ec:	90                   	nop
c000d3ed:	83 c4 0c             	add    esp,0xc
c000d3f0:	c3                   	ret    
c000d3f1:	90                   	nop
c000d3f2:	66 90                	xchg   ax,ax

c000d3f4 <Mouse::~Mouse()>:
c000d3f4:	83 ec 0c             	sub    esp,0xc
c000d3f7:	ba c0 e1 01 c0       	mov    edx,0xc001e1c0
c000d3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d400:	89 10                	mov    DWORD PTR [eax],edx
c000d402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d406:	83 ec 0c             	sub    esp,0xc
c000d409:	50                   	push   eax
c000d40a:	e8 2f eb ff ff       	call   c000bf3e <Device::~Device()>
c000d40f:	83 c4 10             	add    esp,0x10
c000d412:	90                   	nop
c000d413:	83 c4 0c             	add    esp,0xc
c000d416:	c3                   	ret    
c000d417:	90                   	nop

c000d418 <Mouse::~Mouse()>:
c000d418:	83 ec 0c             	sub    esp,0xc
c000d41b:	83 ec 0c             	sub    esp,0xc
c000d41e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d422:	e8 cd ff ff ff       	call   c000d3f4 <Mouse::~Mouse()>
c000d427:	83 c4 10             	add    esp,0x10
c000d42a:	83 ec 08             	sub    esp,0x8
c000d42d:	68 58 01 00 00       	push   0x158
c000d432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d436:	e8 cb d6 ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000d43b:	83 c4 10             	add    esp,0x10
c000d43e:	83 c4 0c             	add    esp,0xc
c000d441:	c3                   	ret    

c000d442 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d442:	55                   	push   ebp
c000d443:	57                   	push   edi
c000d444:	56                   	push   esi
c000d445:	53                   	push   ebx
c000d446:	81 ec 28 01 00 00    	sub    esp,0x128
c000d44c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d453:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d45a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d461:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d468:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d46c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d470:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d477:	e8 54 ee ff ff       	call   c000c2d0 <Device::getName()>
c000d47c:	5a                   	pop    edx
c000d47d:	59                   	pop    ecx
c000d47e:	50                   	push   eax
c000d47f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d483:	55                   	push   ebp
c000d484:	e8 97 31 ff ff       	call   c0000620 <strcpy>
c000d489:	5b                   	pop    ebx
c000d48a:	58                   	pop    eax
c000d48b:	68 e4 e1 01 c0       	push   0xc001e1e4
c000d490:	55                   	push   ebp
c000d491:	e8 4a 33 ff ff       	call   c00007e0 <strcat>
c000d496:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000d49d:	e8 cb a9 ff ff       	call   c0007e6d <malloc>
c000d4a2:	83 c4 0c             	add    esp,0xc
c000d4a5:	89 c3                	mov    ebx,eax
c000d4a7:	57                   	push   edi
c000d4a8:	56                   	push   esi
c000d4a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4b1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d4b8:	55                   	push   ebp
c000d4b9:	50                   	push   eax
c000d4ba:	e8 f7 fb ff ff       	call   c000d0b6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d4bf:	83 c4 14             	add    esp,0x14
c000d4c2:	53                   	push   ebx
c000d4c3:	e8 a4 fc ff ff       	call   c000d16c <LogicalDisk::assignDriveLetter()>
c000d4c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d4cb:	e8 52 fd ff ff       	call   c000d222 <LogicalDisk::mount()>
c000d4d0:	58                   	pop    eax
c000d4d1:	5a                   	pop    edx
c000d4d2:	53                   	push   ebx
c000d4d3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d4da:	e8 5d eb ff ff       	call   c000c03c <Device::addChild(Device*)>
c000d4df:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d4e5:	5b                   	pop    ebx
c000d4e6:	5e                   	pop    esi
c000d4e7:	5f                   	pop    edi
c000d4e8:	5d                   	pop    ebp
c000d4e9:	c3                   	ret    

c000d4ea <createPartitionsForDisk(PhysicalDisk*)>:
c000d4ea:	55                   	push   ebp
c000d4eb:	57                   	push   edi
c000d4ec:	56                   	push   esi
c000d4ed:	53                   	push   ebx
c000d4ee:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4f4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4fb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d501:	3d 00 02 00 00       	cmp    eax,0x200
c000d506:	74 27                	je     c000d52f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d508:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d50e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d514:	83 ec 10             	sub    esp,0x10
c000d517:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d51b:	99                   	cdq    
c000d51c:	c1 e6 0a             	shl    esi,0xa
c000d51f:	52                   	push   edx
c000d520:	89 fd                	mov    ebp,edi
c000d522:	50                   	push   eax
c000d523:	55                   	push   ebp
c000d524:	56                   	push   esi
c000d525:	e8 16 ec 00 00       	call   c001c140 <__udivdi3>
c000d52a:	e9 b1 00 00 00       	jmp    c000d5e0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d52f:	83 ec 0c             	sub    esp,0xc
c000d532:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d534:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d538:	56                   	push   esi
c000d539:	6a 01                	push   0x1
c000d53b:	6a 00                	push   0x0
c000d53d:	6a 00                	push   0x0
c000d53f:	53                   	push   ebx
c000d540:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d543:	83 c4 20             	add    esp,0x20
c000d546:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d54e:	75 0a                	jne    c000d55a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d550:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d558:	74 2c                	je     c000d586 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d55a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d560:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d566:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d56c:	83 ec 10             	sub    esp,0x10
c000d56f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d573:	89 f7                	mov    edi,esi
c000d575:	c1 e0 0a             	shl    eax,0xa
c000d578:	c1 ff 1f             	sar    edi,0x1f
c000d57b:	57                   	push   edi
c000d57c:	56                   	push   esi
c000d57d:	52                   	push   edx
c000d57e:	50                   	push   eax
c000d57f:	e8 bc eb 00 00       	call   c001c140 <__udivdi3>
c000d584:	eb 5a                	jmp    c000d5e0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d586:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d58d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d594:	83 e1 7f             	and    ecx,0x7f
c000d597:	83 e0 7f             	and    eax,0x7f
c000d59a:	01 c1                	add    ecx,eax
c000d59c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d5a3:	83 e0 7f             	and    eax,0x7f
c000d5a6:	01 c1                	add    ecx,eax
c000d5a8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d5af:	83 e0 7f             	and    eax,0x7f
c000d5b2:	00 c1                	add    cl,al
c000d5b4:	74 41                	je     c000d5f7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d5b6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5bc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5c2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5c8:	83 ec 10             	sub    esp,0x10
c000d5cb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d5cf:	89 f7                	mov    edi,esi
c000d5d1:	c1 e0 0a             	shl    eax,0xa
c000d5d4:	c1 ff 1f             	sar    edi,0x1f
c000d5d7:	57                   	push   edi
c000d5d8:	56                   	push   esi
c000d5d9:	52                   	push   edx
c000d5da:	50                   	push   eax
c000d5db:	e8 60 eb 00 00       	call   c001c140 <__udivdi3>
c000d5e0:	83 c4 14             	add    esp,0x14
c000d5e3:	52                   	push   edx
c000d5e4:	50                   	push   eax
c000d5e5:	6a 00                	push   0x0
c000d5e7:	6a 00                	push   0x0
c000d5e9:	53                   	push   ebx
c000d5ea:	e8 53 fe ff ff       	call   c000d442 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5ef:	83 c4 20             	add    esp,0x20
c000d5f2:	e9 79 01 00 00       	jmp    c000d770 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d5f7:	89 f0                	mov    eax,esi
c000d5f9:	31 f6                	xor    esi,esi
c000d5fb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d602:	75 02                	jne    c000d606 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d604:	89 f1                	mov    ecx,esi
c000d606:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d60d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d614:	c1 e2 08             	shl    edx,0x8
c000d617:	c1 e7 10             	shl    edi,0x10
c000d61a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d622:	09 fa                	or     edx,edi
c000d624:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d62c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d633:	83 c0 10             	add    eax,0x10
c000d636:	09 fa                	or     edx,edi
c000d638:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d63f:	c1 e7 18             	shl    edi,0x18
c000d642:	09 fa                	or     edx,edi
c000d644:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d64b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d64f:	c1 e7 10             	shl    edi,0x10
c000d652:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d659:	c1 e2 08             	shl    edx,0x8
c000d65c:	09 fa                	or     edx,edi
c000d65e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d665:	09 fa                	or     edx,edi
c000d667:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d66e:	c1 e7 18             	shl    edi,0x18
c000d671:	09 fa                	or     edx,edi
c000d673:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d677:	46                   	inc    esi
c000d678:	83 fe 04             	cmp    esi,0x4
c000d67b:	0f 85 7a ff ff ff    	jne    c000d5fb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d685:	83 f0 01             	xor    eax,0x1
c000d688:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d68c:	75 57                	jne    c000d6e5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d68e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d692:	83 f0 01             	xor    eax,0x1
c000d695:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d699:	75 4a                	jne    c000d6e5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d69b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d69f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d6a7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d6af:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d6b5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d6bb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d6c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d6c5:	89 f7                	mov    edi,esi
c000d6c7:	c1 e0 0a             	shl    eax,0xa
c000d6ca:	c1 ff 1f             	sar    edi,0x1f
c000d6cd:	57                   	push   edi
c000d6ce:	56                   	push   esi
c000d6cf:	52                   	push   edx
c000d6d0:	50                   	push   eax
c000d6d1:	e8 6a ea 00 00       	call   c001c140 <__udivdi3>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d6e5:	84 c9                	test   cl,cl
c000d6e7:	74 53                	je     c000d73c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d6e9:	0f b6 c9             	movzx  ecx,cl
c000d6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6f4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6f8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d700:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d704:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d708:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d70c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d710:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d718:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d71c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d720:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d724:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d728:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d72c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d730:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d734:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d738:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d73c:	31 ed                	xor    ebp,ebp
c000d73e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d742:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d746:	89 f8                	mov    eax,edi
c000d748:	09 f0                	or     eax,esi
c000d74a:	74 1e                	je     c000d76a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d74c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d750:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d754:	89 d1                	mov    ecx,edx
c000d756:	09 c1                	or     ecx,eax
c000d758:	74 10                	je     c000d76a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d75a:	83 ec 0c             	sub    esp,0xc
c000d75d:	57                   	push   edi
c000d75e:	56                   	push   esi
c000d75f:	52                   	push   edx
c000d760:	50                   	push   eax
c000d761:	53                   	push   ebx
c000d762:	e8 db fc ff ff       	call   c000d442 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d767:	83 c4 20             	add    esp,0x20
c000d76a:	45                   	inc    ebp
c000d76b:	83 fd 04             	cmp    ebp,0x4
c000d76e:	75 ce                	jne    c000d73e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d770:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d776:	5b                   	pop    ebx
c000d777:	5e                   	pop    esi
c000d778:	5f                   	pop    edi
c000d779:	5d                   	pop    ebp
c000d77a:	c3                   	ret    
c000d77b:	90                   	nop

c000d77c <Serial::Serial(char const*)>:
c000d77c:	83 ec 0c             	sub    esp,0xc
c000d77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d783:	83 ec 08             	sub    esp,0x8
c000d786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d78a:	50                   	push   eax
c000d78b:	e8 44 ea ff ff       	call   c000c1d4 <Device::Device(char const*)>
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	ba f8 e1 01 c0       	mov    edx,0xc001e1f8
c000d798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79c:	89 10                	mov    DWORD PTR [eax],edx
c000d79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d7ac:	90                   	nop
c000d7ad:	83 c4 0c             	add    esp,0xc
c000d7b0:	c3                   	ret    
c000d7b1:	90                   	nop
c000d7b2:	66 90                	xchg   ax,ax

c000d7b4 <Serial::~Serial()>:
c000d7b4:	83 ec 0c             	sub    esp,0xc
c000d7b7:	ba f8 e1 01 c0       	mov    edx,0xc001e1f8
c000d7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c0:	89 10                	mov    DWORD PTR [eax],edx
c000d7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c6:	83 ec 0c             	sub    esp,0xc
c000d7c9:	50                   	push   eax
c000d7ca:	e8 6f e7 ff ff       	call   c000bf3e <Device::~Device()>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	90                   	nop
c000d7d3:	83 c4 0c             	add    esp,0xc
c000d7d6:	c3                   	ret    
c000d7d7:	90                   	nop

c000d7d8 <Serial::~Serial()>:
c000d7d8:	83 ec 0c             	sub    esp,0xc
c000d7db:	83 ec 0c             	sub    esp,0xc
c000d7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e2:	e8 cd ff ff ff       	call   c000d7b4 <Serial::~Serial()>
c000d7e7:	83 c4 10             	add    esp,0x10
c000d7ea:	83 ec 08             	sub    esp,0x8
c000d7ed:	68 58 01 00 00       	push   0x158
c000d7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7f6:	e8 0b d3 ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000d7fb:	83 c4 10             	add    esp,0x10
c000d7fe:	83 c4 0c             	add    esp,0xc
c000d801:	c3                   	ret    
c000d802:	66 90                	xchg   ax,ax

c000d804 <Timer::Timer(char const*)>:
c000d804:	83 ec 0c             	sub    esp,0xc
c000d807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80b:	83 ec 08             	sub    esp,0x8
c000d80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d812:	50                   	push   eax
c000d813:	e8 bc e9 ff ff       	call   c000c1d4 <Device::Device(char const*)>
c000d818:	83 c4 10             	add    esp,0x10
c000d81b:	ba 3c e2 01 c0       	mov    edx,0xc001e23c
c000d820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d824:	89 10                	mov    DWORD PTR [eax],edx
c000d826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d82a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d834:	90                   	nop
c000d835:	83 c4 0c             	add    esp,0xc
c000d838:	c3                   	ret    
c000d839:	90                   	nop
c000d83a:	66 90                	xchg   ax,ax

c000d83c <Timer::~Timer()>:
c000d83c:	83 ec 0c             	sub    esp,0xc
c000d83f:	ba 3c e2 01 c0       	mov    edx,0xc001e23c
c000d844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d848:	89 10                	mov    DWORD PTR [eax],edx
c000d84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84e:	83 ec 0c             	sub    esp,0xc
c000d851:	50                   	push   eax
c000d852:	e8 e7 e6 ff ff       	call   c000bf3e <Device::~Device()>
c000d857:	83 c4 10             	add    esp,0x10
c000d85a:	90                   	nop
c000d85b:	83 c4 0c             	add    esp,0xc
c000d85e:	c3                   	ret    
c000d85f:	90                   	nop

c000d860 <Timer::~Timer()>:
c000d860:	83 ec 0c             	sub    esp,0xc
c000d863:	83 ec 0c             	sub    esp,0xc
c000d866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d86a:	e8 cd ff ff ff       	call   c000d83c <Timer::~Timer()>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	83 ec 08             	sub    esp,0x8
c000d875:	68 5c 01 00 00       	push   0x15c
c000d87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d87e:	e8 83 d2 ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000d883:	83 c4 10             	add    esp,0x10
c000d886:	83 c4 0c             	add    esp,0xc
c000d889:	c3                   	ret    

c000d88a <Timer::read()>:
c000d88a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d88e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d894:	c3                   	ret    

c000d895 <setupTimer(int)>:
c000d895:	53                   	push   ebx
c000d896:	83 ec 14             	sub    esp,0x14
c000d899:	68 5c 01 00 00       	push   0x15c
c000d89e:	e8 ca a5 ff ff       	call   c0007e6d <malloc>
c000d8a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8a6:	89 c3                	mov    ebx,eax
c000d8a8:	e8 0b e2 00 00       	call   c001bab8 <PIT::PIT()>
c000d8ad:	58                   	pop    eax
c000d8ae:	5a                   	pop    edx
c000d8af:	53                   	push   ebx
c000d8b0:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c000d8b6:	e8 81 e7 ff ff       	call   c000c03c <Device::addChild(Device*)>
c000d8bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8bd:	6a 00                	push   0x0
c000d8bf:	6a 00                	push   0x0
c000d8c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8c5:	53                   	push   ebx
c000d8c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d8c9:	89 d8                	mov    eax,ebx
c000d8cb:	83 c4 28             	add    esp,0x28
c000d8ce:	5b                   	pop    ebx
c000d8cf:	c3                   	ret    

c000d8d0 <timerHandler(unsigned int)>:
c000d8d0:	56                   	push   esi
c000d8d1:	53                   	push   ebx
c000d8d2:	51                   	push   ecx
c000d8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8d7:	01 05 ec 2e 02 c0    	add    DWORD PTR ds:0xc0022eec,eax
c000d8dd:	80 3d 1d 09 02 c0 00 	cmp    BYTE PTR ds:0xc002091d,0x0
c000d8e4:	0f 84 4a 01 00 00    	je     c000da34 <timerHandler(unsigned int)+0x164>
c000d8ea:	fa                   	cli    
c000d8eb:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c000d8f1:	83 ec 0c             	sub    esp,0xc
c000d8f4:	ff 05 e4 3d 02 c0    	inc    DWORD PTR ds:0xc0023de4
c000d8fa:	68 f8 3d 02 c0       	push   0xc0023df8
c000d8ff:	e8 0c ee 00 00       	call   c001c710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d904:	83 c4 10             	add    esp,0x10
c000d907:	84 c0                	test   al,al
c000d909:	0f 85 a1 00 00 00    	jne    c000d9b0 <timerHandler(unsigned int)+0xe0>
c000d90f:	83 ec 0c             	sub    esp,0xc
c000d912:	68 f8 3d 02 c0       	push   0xc0023df8
c000d917:	e8 10 ee 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d91c:	83 c4 10             	add    esp,0x10
c000d91f:	89 c6                	mov    esi,eax
c000d921:	8d 76 00             	lea    esi,[esi+0x0]
c000d924:	83 ec 0c             	sub    esp,0xc
c000d927:	68 f8 3d 02 c0       	push   0xc0023df8
c000d92c:	e8 fb ed 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d931:	c7 04 24 f8 3d 02 c0 	mov    DWORD PTR [esp],0xc0023df8
c000d938:	89 c3                	mov    ebx,eax
c000d93a:	e8 f5 ed 00 00       	call   c001c734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d93f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d942:	83 c4 10             	add    esp,0x10
c000d945:	3b 05 ec 2e 02 c0    	cmp    eax,DWORD PTR ds:0xc0022eec
c000d94b:	77 23                	ja     c000d970 <timerHandler(unsigned int)+0xa0>
c000d94d:	83 ec 0c             	sub    esp,0xc
c000d950:	53                   	push   ebx
c000d951:	e8 0e 66 00 00       	call   c0013f64 <unblockTask(ThreadControlBlock*)>
c000d956:	83 c4 10             	add    esp,0x10
c000d959:	39 de                	cmp    esi,ebx
c000d95b:	75 27                	jne    c000d984 <timerHandler(unsigned int)+0xb4>
c000d95d:	83 ec 0c             	sub    esp,0xc
c000d960:	68 f8 3d 02 c0       	push   0xc0023df8
c000d965:	e8 c2 ed 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d96a:	89 c6                	mov    esi,eax
c000d96c:	eb 12                	jmp    c000d980 <timerHandler(unsigned int)+0xb0>
c000d96e:	66 90                	xchg   ax,ax
c000d970:	52                   	push   edx
c000d971:	52                   	push   edx
c000d972:	53                   	push   ebx
c000d973:	68 f8 3d 02 c0       	push   0xc0023df8
c000d978:	e8 6f ee 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d97d:	8d 76 00             	lea    esi,[esi+0x0]
c000d980:	83 c4 10             	add    esp,0x10
c000d983:	90                   	nop
c000d984:	83 ec 0c             	sub    esp,0xc
c000d987:	68 f8 3d 02 c0       	push   0xc0023df8
c000d98c:	e8 7f ed 00 00       	call   c001c710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d991:	83 c4 10             	add    esp,0x10
c000d994:	84 c0                	test   al,al
c000d996:	75 18                	jne    c000d9b0 <timerHandler(unsigned int)+0xe0>
c000d998:	83 ec 0c             	sub    esp,0xc
c000d99b:	68 f8 3d 02 c0       	push   0xc0023df8
c000d9a0:	e8 87 ed 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d9a5:	83 c4 10             	add    esp,0x10
c000d9a8:	39 f0                	cmp    eax,esi
c000d9aa:	0f 85 74 ff ff ff    	jne    c000d924 <timerHandler(unsigned int)+0x54>
c000d9b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d9b5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d9b9:	74 41                	je     c000d9fc <timerHandler(unsigned int)+0x12c>
c000d9bb:	80 3d 1c 09 02 c0 00 	cmp    BYTE PTR ds:0xc002091c,0x0
c000d9c2:	74 38                	je     c000d9fc <timerHandler(unsigned int)+0x12c>
c000d9c4:	fa                   	cli    
c000d9c5:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c000d9cb:	a1 ec 2e 02 c0       	mov    eax,ds:0xc0022eec
c000d9d0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9d6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d9d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9df:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d9e2:	72 08                	jb     c000d9ec <timerHandler(unsigned int)+0x11c>
c000d9e4:	e8 b7 60 00 00       	call   c0013aa0 <schedule()>
c000d9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9ec:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000d9f1:	48                   	dec    eax
c000d9f2:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000d9f7:	75 03                	jne    c000d9fc <timerHandler(unsigned int)+0x12c>
c000d9f9:	fb                   	sti    
c000d9fa:	66 90                	xchg   ax,ax
c000d9fc:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c000da01:	48                   	dec    eax
c000da02:	a3 e4 3d 02 c0       	mov    ds:0xc0023de4,eax
c000da07:	75 1b                	jne    c000da24 <timerHandler(unsigned int)+0x154>
c000da09:	83 3d e0 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023de0,0x0
c000da10:	74 12                	je     c000da24 <timerHandler(unsigned int)+0x154>
c000da12:	c7 05 e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x0
c000da1c:	e8 7f 60 00 00       	call   c0013aa0 <schedule()>
c000da21:	8d 76 00             	lea    esi,[esi+0x0]
c000da24:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000da29:	48                   	dec    eax
c000da2a:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c000da2f:	75 03                	jne    c000da34 <timerHandler(unsigned int)+0x164>
c000da31:	fb                   	sti    
c000da32:	66 90                	xchg   ax,ax
c000da34:	58                   	pop    eax
c000da35:	5b                   	pop    ebx
c000da36:	5e                   	pop    esi
c000da37:	c3                   	ret    

c000da38 <VCache::VCache(PhysicalDisk*)>:
c000da38:	53                   	push   ebx
c000da39:	83 ec 18             	sub    esp,0x18
c000da3c:	ba 6c e2 01 c0       	mov    edx,0xc001e26c
c000da41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da45:	89 10                	mov    DWORD PTR [eax],edx
c000da47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000da52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da56:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da61:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da68:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da73:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da7a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da85:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da90:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da98:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da9f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000daa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daaa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000daae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000dab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daba:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dabe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dac9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dad1:	83 ec 0c             	sub    esp,0xc
c000dad4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dad8:	e8 90 a3 ff ff       	call   c0007e6d <malloc>
c000dadd:	83 c4 10             	add    esp,0x10
c000dae0:	89 c3                	mov    ebx,eax
c000dae2:	83 ec 0c             	sub    esp,0xc
c000dae5:	53                   	push   ebx
c000dae6:	e8 81 5d 00 00       	call   c001386c <Mutex::Mutex()>
c000daeb:	83 c4 10             	add    esp,0x10
c000daee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000daf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dafd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000db00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db04:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000db0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db0f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db19:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db20:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000db26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000db2c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db30:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000db33:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000db36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db3a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000db3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db42:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db48:	05 00 01 00 00       	add    eax,0x100
c000db4d:	c1 e0 04             	shl    eax,0x4
c000db50:	83 ec 0c             	sub    esp,0xc
c000db53:	50                   	push   eax
c000db54:	e8 14 a3 ff ff       	call   c0007e6d <malloc>
c000db59:	83 c4 10             	add    esp,0x10
c000db5c:	89 c2                	mov    edx,eax
c000db5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db62:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db69:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db74:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db7c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db82:	c1 e0 06             	shl    eax,0x6
c000db85:	83 ec 0c             	sub    esp,0xc
c000db88:	50                   	push   eax
c000db89:	e8 df a2 ff ff       	call   c0007e6d <malloc>
c000db8e:	83 c4 10             	add    esp,0x10
c000db91:	89 c2                	mov    edx,eax
c000db93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db97:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db9a:	90                   	nop
c000db9b:	83 c4 18             	add    esp,0x18
c000db9e:	5b                   	pop    ebx
c000db9f:	c3                   	ret    

c000dba0 <VCache::invalidateReadBuffer()>:
c000dba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dba4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000dbaa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dbae:	c3                   	ret    
c000dbaf:	90                   	nop

c000dbb0 <VCache::writeWriteBuffer()>:
c000dbb0:	53                   	push   ebx
c000dbb1:	83 ec 08             	sub    esp,0x8
c000dbb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbb8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dbbc:	74 1e                	je     c000dbdc <VCache::writeWriteBuffer()+0x2c>
c000dbbe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dbc1:	83 ec 0c             	sub    esp,0xc
c000dbc4:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbc6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dbc9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dbcc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000dbcf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dbd2:	50                   	push   eax
c000dbd3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dbd6:	83 c4 20             	add    esp,0x20
c000dbd9:	8d 76 00             	lea    esi,[esi+0x0]
c000dbdc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dbe3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000dbea:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000dbee:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dbf5:	83 c4 08             	add    esp,0x8
c000dbf8:	5b                   	pop    ebx
c000dbf9:	c3                   	ret    
c000dbfa:	66 90                	xchg   ax,ax

c000dbfc <VCache::~VCache()>:
c000dbfc:	83 ec 0c             	sub    esp,0xc
c000dbff:	ba 6c e2 01 c0       	mov    edx,0xc001e26c
c000dc04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc08:	89 10                	mov    DWORD PTR [eax],edx
c000dc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc0e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dc11:	84 c0                	test   al,al
c000dc13:	74 0f                	je     c000dc24 <VCache::~VCache()+0x28>
c000dc15:	83 ec 0c             	sub    esp,0xc
c000dc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1c:	e8 8f ff ff ff       	call   c000dbb0 <VCache::writeWriteBuffer()>
c000dc21:	83 c4 10             	add    esp,0x10
c000dc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc28:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dc2b:	83 ec 0c             	sub    esp,0xc
c000dc2e:	50                   	push   eax
c000dc2f:	e8 49 a2 ff ff       	call   c0007e7d <free>
c000dc34:	83 c4 10             	add    esp,0x10
c000dc37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc3b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dc3e:	83 ec 0c             	sub    esp,0xc
c000dc41:	50                   	push   eax
c000dc42:	e8 36 a2 ff ff       	call   c0007e7d <free>
c000dc47:	83 c4 10             	add    esp,0x10
c000dc4a:	90                   	nop
c000dc4b:	83 c4 0c             	add    esp,0xc
c000dc4e:	c3                   	ret    
c000dc4f:	90                   	nop

c000dc50 <VCache::~VCache()>:
c000dc50:	83 ec 0c             	sub    esp,0xc
c000dc53:	83 ec 0c             	sub    esp,0xc
c000dc56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc5a:	e8 9d ff ff ff       	call   c000dbfc <VCache::~VCache()>
c000dc5f:	83 c4 10             	add    esp,0x10
c000dc62:	83 ec 08             	sub    esp,0x8
c000dc65:	6a 44                	push   0x44
c000dc67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6b:	e8 96 ce ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000dc70:	83 c4 10             	add    esp,0x10
c000dc73:	83 c4 0c             	add    esp,0xc
c000dc76:	c3                   	ret    
c000dc77:	90                   	nop

c000dc78 <VCache::write(unsigned long long, int, void*)>:
c000dc78:	55                   	push   ebp
c000dc79:	31 c0                	xor    eax,eax
c000dc7b:	57                   	push   edi
c000dc7c:	56                   	push   esi
c000dc7d:	53                   	push   ebx
c000dc7e:	83 ec 0c             	sub    esp,0xc
c000dc81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dc85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc89:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc8d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc90:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000dc94:	7d 1a                	jge    c000dcb0 <VCache::write(unsigned long long, int, void*)+0x38>
c000dc96:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dc99:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dc9f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dca3:	0f af c8             	imul   ecx,eax
c000dca6:	01 ca                	add    edx,ecx
c000dca8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000dcaa:	40                   	inc    eax
c000dcab:	eb e3                	jmp    c000dc90 <VCache::write(unsigned long long, int, void*)+0x18>
c000dcad:	8d 76 00             	lea    esi,[esi+0x0]
c000dcb0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dcb4:	74 0a                	je     c000dcc0 <VCache::write(unsigned long long, int, void*)+0x48>
c000dcb6:	53                   	push   ebx
c000dcb7:	e8 e4 fe ff ff       	call   c000dba0 <VCache::invalidateReadBuffer()>
c000dcbc:	58                   	pop    eax
c000dcbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dcc0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dcc4:	74 5e                	je     c000dd24 <VCache::write(unsigned long long, int, void*)+0xac>
c000dcc6:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000dcc9:	89 e8                	mov    eax,ebp
c000dccb:	99                   	cdq    
c000dccc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dccf:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dcd2:	89 c1                	mov    ecx,eax
c000dcd4:	89 d0                	mov    eax,edx
c000dcd6:	31 f1                	xor    ecx,esi
c000dcd8:	31 f8                	xor    eax,edi
c000dcda:	09 c1                	or     ecx,eax
c000dcdc:	75 3a                	jne    c000dd18 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dcde:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000dce3:	75 33                	jne    c000dd18 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dce5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dce8:	89 ef                	mov    edi,ebp
c000dcea:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcf0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dcf4:	0f af f9             	imul   edi,ecx
c000dcf7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dcfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcfc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dcff:	40                   	inc    eax
c000dd00:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dd03:	83 f8 40             	cmp    eax,0x40
c000dd06:	75 60                	jne    c000dd68 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dd08:	83 ec 0c             	sub    esp,0xc
c000dd0b:	53                   	push   ebx
c000dd0c:	e8 9f fe ff ff       	call   c000dbb0 <VCache::writeWriteBuffer()>
c000dd11:	83 c4 10             	add    esp,0x10
c000dd14:	eb 52                	jmp    c000dd68 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dd16:	66 90                	xchg   ax,ax
c000dd18:	83 ec 0c             	sub    esp,0xc
c000dd1b:	53                   	push   ebx
c000dd1c:	e8 8f fe ff ff       	call   c000dbb0 <VCache::writeWriteBuffer()>
c000dd21:	83 c4 10             	add    esp,0x10
c000dd24:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd27:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000dd2c:	7f 22                	jg     c000dd50 <VCache::write(unsigned long long, int, void*)+0xd8>
c000dd2e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000dd31:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000dd34:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dd38:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dd3c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000dd3f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dd42:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd48:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd4e:	eb 18                	jmp    c000dd68 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dd50:	83 ec 0c             	sub    esp,0xc
c000dd53:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd55:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dd59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dd5d:	57                   	push   edi
c000dd5e:	56                   	push   esi
c000dd5f:	50                   	push   eax
c000dd60:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dd63:	83 c4 20             	add    esp,0x20
c000dd66:	66 90                	xchg   ax,ax
c000dd68:	83 c4 0c             	add    esp,0xc
c000dd6b:	31 c0                	xor    eax,eax
c000dd6d:	5b                   	pop    ebx
c000dd6e:	5e                   	pop    esi
c000dd6f:	5f                   	pop    edi
c000dd70:	5d                   	pop    ebp
c000dd71:	c3                   	ret    

c000dd72 <VCache::read(unsigned long long, int, void*)>:
c000dd72:	55                   	push   ebp
c000dd73:	31 c0                	xor    eax,eax
c000dd75:	57                   	push   edi
c000dd76:	56                   	push   esi
c000dd77:	53                   	push   ebx
c000dd78:	83 ec 1c             	sub    esp,0x1c
c000dd7b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd7f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000dd83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000dd87:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd8b:	90                   	nop
c000dd8c:	39 e8                	cmp    eax,ebp
c000dd8e:	7d 18                	jge    c000dda8 <VCache::read(unsigned long long, int, void*)+0x36>
c000dd90:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dd93:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dd99:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dd9d:	0f af c8             	imul   ecx,eax
c000dda0:	01 ca                	add    edx,ecx
c000dda2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000dda4:	40                   	inc    eax
c000dda5:	eb e5                	jmp    c000dd8c <VCache::read(unsigned long long, int, void*)+0x1a>
c000dda7:	90                   	nop
c000dda8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ddac:	74 0e                	je     c000ddbc <VCache::read(unsigned long long, int, void*)+0x4a>
c000ddae:	83 ec 0c             	sub    esp,0xc
c000ddb1:	53                   	push   ebx
c000ddb2:	e8 f9 fd ff ff       	call   c000dbb0 <VCache::writeWriteBuffer()>
c000ddb7:	83 c4 10             	add    esp,0x10
c000ddba:	66 90                	xchg   ax,ax
c000ddbc:	83 fd 01             	cmp    ebp,0x1
c000ddbf:	0f 85 87 00 00 00    	jne    c000de4c <VCache::read(unsigned long long, int, void*)+0xda>
c000ddc5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ddc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddcc:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ddd3:	75 77                	jne    c000de4c <VCache::read(unsigned long long, int, void*)+0xda>
c000ddd5:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ddd8:	89 e9                	mov    ecx,ebp
c000ddda:	f7 d9                	neg    ecx
c000dddc:	89 c8                	mov    eax,ecx
c000ddde:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dde2:	c1 f8 1f             	sar    eax,0x1f
c000dde5:	21 f1                	and    ecx,esi
c000dde7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ddeb:	89 c8                	mov    eax,ecx
c000dded:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ddf1:	21 f9                	and    ecx,edi
c000ddf3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ddf7:	89 ca                	mov    edx,ecx
c000ddf9:	74 0d                	je     c000de08 <VCache::read(unsigned long long, int, void*)+0x96>
c000ddfb:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ddfe:	75 08                	jne    c000de08 <VCache::read(unsigned long long, int, void*)+0x96>
c000de00:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000de03:	74 27                	je     c000de2c <VCache::read(unsigned long long, int, void*)+0xba>
c000de05:	8d 76 00             	lea    esi,[esi+0x0]
c000de08:	83 ec 0c             	sub    esp,0xc
c000de0b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000de0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000de13:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000de16:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de19:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000de1b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000de1e:	55                   	push   ebp
c000de1f:	52                   	push   edx
c000de20:	50                   	push   eax
c000de21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000de25:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000de28:	83 c4 20             	add    esp,0x20
c000de2b:	90                   	nop
c000de2c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000de2f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de33:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000de39:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000de3c:	48                   	dec    eax
c000de3d:	21 c6                	and    esi,eax
c000de3f:	0f af f1             	imul   esi,ecx
c000de42:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000de45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de47:	eb 23                	jmp    c000de6c <VCache::read(unsigned long long, int, void*)+0xfa>
c000de49:	8d 76 00             	lea    esi,[esi+0x0]
c000de4c:	83 ec 0c             	sub    esp,0xc
c000de4f:	53                   	push   ebx
c000de50:	e8 4b fd ff ff       	call   c000dba0 <VCache::invalidateReadBuffer()>
c000de55:	5a                   	pop    edx
c000de56:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000de59:	8b 10                	mov    edx,DWORD PTR [eax]
c000de5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000de5f:	55                   	push   ebp
c000de60:	57                   	push   edi
c000de61:	56                   	push   esi
c000de62:	50                   	push   eax
c000de63:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000de66:	83 c4 20             	add    esp,0x20
c000de69:	8d 76 00             	lea    esi,[esi+0x0]
c000de6c:	83 c4 1c             	add    esp,0x1c
c000de6f:	31 c0                	xor    eax,eax
c000de71:	5b                   	pop    ebx
c000de72:	5e                   	pop    esi
c000de73:	5f                   	pop    edi
c000de74:	5d                   	pop    ebp
c000de75:	c3                   	ret    

c000de76 <Video::putrect(int, int, int, int, unsigned int)>:
c000de76:	55                   	push   ebp
c000de77:	57                   	push   edi
c000de78:	56                   	push   esi
c000de79:	53                   	push   ebx
c000de7a:	83 ec 1c             	sub    esp,0x1c
c000de7d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de85:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de89:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de8d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de95:	01 df                	add    edi,ebx
c000de97:	39 fb                	cmp    ebx,edi
c000de99:	7d 1f                	jge    c000deba <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de9b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de9f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000dea3:	7d 12                	jge    c000deb7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000dea5:	8b 16                	mov    edx,DWORD PTR [esi]
c000dea7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000deab:	53                   	push   ebx
c000deac:	55                   	push   ebp
c000dead:	45                   	inc    ebp
c000deae:	56                   	push   esi
c000deaf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000deb2:	83 c4 10             	add    esp,0x10
c000deb5:	eb e8                	jmp    c000de9f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000deb7:	43                   	inc    ebx
c000deb8:	eb dd                	jmp    c000de97 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000deba:	83 c4 1c             	add    esp,0x1c
c000debd:	5b                   	pop    ebx
c000debe:	5e                   	pop    esi
c000debf:	5f                   	pop    edi
c000dec0:	5d                   	pop    ebp
c000dec1:	c3                   	ret    

c000dec2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000dec2:	55                   	push   ebp
c000dec3:	57                   	push   edi
c000dec4:	31 ff                	xor    edi,edi
c000dec6:	56                   	push   esi
c000dec7:	53                   	push   ebx
c000dec8:	83 ec 1c             	sub    esp,0x1c
c000decb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000decf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ded3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000deda:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000dedf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dee3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000dee7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000deeb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000deee:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000def2:	01 f9                	add    ecx,edi
c000def4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000def8:	7d 2f                	jge    c000df29 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000defa:	31 f6                	xor    esi,esi
c000defc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000df00:	01 f2                	add    edx,esi
c000df02:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000df06:	7d 1a                	jge    c000df22 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000df08:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000df0b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000df0e:	46                   	inc    esi
c000df0f:	51                   	push   ecx
c000df10:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000df14:	52                   	push   edx
c000df15:	55                   	push   ebp
c000df16:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df19:	83 c4 10             	add    esp,0x10
c000df1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000df20:	eb da                	jmp    c000defc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000df22:	47                   	inc    edi
c000df23:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000df27:	eb c5                	jmp    c000deee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000df29:	83 c4 1c             	add    esp,0x1c
c000df2c:	5b                   	pop    ebx
c000df2d:	5e                   	pop    esi
c000df2e:	5f                   	pop    edi
c000df2f:	5d                   	pop    ebp
c000df30:	c3                   	ret    
c000df31:	90                   	nop

c000df32 <Video::blit(unsigned int*, int, int, int, int)>:
c000df32:	55                   	push   ebp
c000df33:	57                   	push   edi
c000df34:	56                   	push   esi
c000df35:	53                   	push   ebx
c000df36:	83 ec 1c             	sub    esp,0x1c
c000df39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000df41:	85 c0                	test   eax,eax
c000df43:	79 02                	jns    c000df47 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000df45:	31 c0                	xor    eax,eax
c000df47:	c1 e0 02             	shl    eax,0x2
c000df4a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000df4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df52:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df56:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000df5a:	39 d8                	cmp    eax,ebx
c000df5c:	7e 49                	jle    c000dfa7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df5e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df64:	7c 41                	jl     c000dfa7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df66:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df6a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000df6e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df72:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000df76:	39 f9                	cmp    ecx,edi
c000df78:	7e 22                	jle    c000df9c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000df7a:	83 c5 04             	add    ebp,0x4
c000df7d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df83:	7c 14                	jl     c000df99 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000df85:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df87:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000df8a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df8e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df92:	56                   	push   esi
c000df93:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df96:	83 c4 10             	add    esp,0x10
c000df99:	47                   	inc    edi
c000df9a:	eb d2                	jmp    c000df6e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000df9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfa0:	43                   	inc    ebx
c000dfa1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dfa5:	eb ab                	jmp    c000df52 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000dfa7:	83 c4 1c             	add    esp,0x1c
c000dfaa:	5b                   	pop    ebx
c000dfab:	5e                   	pop    esi
c000dfac:	5f                   	pop    edi
c000dfad:	5d                   	pop    ebp
c000dfae:	c3                   	ret    
c000dfaf:	90                   	nop

c000dfb0 <Video::clearScreen(unsigned int)>:
c000dfb0:	57                   	push   edi
c000dfb1:	56                   	push   esi
c000dfb2:	53                   	push   ebx
c000dfb3:	31 db                	xor    ebx,ebx
c000dfb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfb9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dfbf:	7e 1f                	jle    c000dfe0 <Video::clearScreen(unsigned int)+0x30>
c000dfc1:	31 ff                	xor    edi,edi
c000dfc3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dfc9:	7e 12                	jle    c000dfdd <Video::clearScreen(unsigned int)+0x2d>
c000dfcb:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd1:	53                   	push   ebx
c000dfd2:	57                   	push   edi
c000dfd3:	47                   	inc    edi
c000dfd4:	56                   	push   esi
c000dfd5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfd8:	83 c4 10             	add    esp,0x10
c000dfdb:	eb e6                	jmp    c000dfc3 <Video::clearScreen(unsigned int)+0x13>
c000dfdd:	43                   	inc    ebx
c000dfde:	eb d9                	jmp    c000dfb9 <Video::clearScreen(unsigned int)+0x9>
c000dfe0:	5b                   	pop    ebx
c000dfe1:	5e                   	pop    esi
c000dfe2:	5f                   	pop    edi
c000dfe3:	c3                   	ret    

c000dfe4 <Video::putpixel(int, int, unsigned int)>:
c000dfe4:	c7 44 24 04 74 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e274
c000dfec:	e9 5a 27 00 00       	jmp    c001074b <Krnl::panic(char const*)>
c000dff1:	90                   	nop

c000dff2 <Video::Video(char const*)>:
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff9:	83 ec 08             	sub    esp,0x8
c000dffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e000:	50                   	push   eax
c000e001:	e8 ce e1 ff ff       	call   c000c1d4 <Device::Device(char const*)>
c000e006:	83 c4 10             	add    esp,0x10
c000e009:	ba e4 e2 01 c0       	mov    edx,0xc001e2e4
c000e00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e012:	89 10                	mov    DWORD PTR [eax],edx
c000e014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e018:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e022:	90                   	nop
c000e023:	83 c4 0c             	add    esp,0xc
c000e026:	c3                   	ret    
c000e027:	90                   	nop

c000e028 <Video::~Video()>:
c000e028:	83 ec 0c             	sub    esp,0xc
c000e02b:	ba e4 e2 01 c0       	mov    edx,0xc001e2e4
c000e030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e034:	89 10                	mov    DWORD PTR [eax],edx
c000e036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03a:	83 ec 0c             	sub    esp,0xc
c000e03d:	50                   	push   eax
c000e03e:	e8 fb de ff ff       	call   c000bf3e <Device::~Device()>
c000e043:	83 c4 10             	add    esp,0x10
c000e046:	90                   	nop
c000e047:	83 c4 0c             	add    esp,0xc
c000e04a:	c3                   	ret    
c000e04b:	90                   	nop

c000e04c <Video::~Video()>:
c000e04c:	83 ec 0c             	sub    esp,0xc
c000e04f:	83 ec 0c             	sub    esp,0xc
c000e052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e056:	e8 cd ff ff ff       	call   c000e028 <Video::~Video()>
c000e05b:	83 c4 10             	add    esp,0x10
c000e05e:	83 ec 08             	sub    esp,0x8
c000e061:	68 64 01 00 00       	push   0x164
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 97 ca ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c000e06f:	83 c4 10             	add    esp,0x10
c000e072:	83 c4 0c             	add    esp,0xc
c000e075:	c3                   	ret    

c000e076 <Video::isMonochrome()>:
c000e076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e07a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e080:	c3                   	ret    
c000e081:	90                   	nop

c000e082 <Video::getWidth()>:
c000e082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e086:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e08c:	c3                   	ret    
c000e08d:	90                   	nop

c000e08e <Video::getHeight()>:
c000e08e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e092:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e098:	c3                   	ret    
c000e099:	90                   	nop

c000e09a <Video::drawCursor(int, int, unsigned char*, int)>:
c000e09a:	55                   	push   ebp
c000e09b:	57                   	push   edi
c000e09c:	56                   	push   esi
c000e09d:	53                   	push   ebx
c000e09e:	83 ec 2c             	sub    esp,0x2c
c000e0a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e0a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e0a9:	83 f8 01             	cmp    eax,0x1
c000e0ac:	19 c9                	sbb    ecx,ecx
c000e0ae:	31 db                	xor    ebx,ebx
c000e0b0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e0b4:	89 cd                	mov    ebp,ecx
c000e0b6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e0be:	f7 d5                	not    ebp
c000e0c0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e0c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e0ca:	01 d8                	add    eax,ebx
c000e0cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0d0:	56                   	push   esi
c000e0d1:	e8 b8 ff ff ff       	call   c000e08e <Video::getHeight()>
c000e0d6:	59                   	pop    ecx
c000e0d7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e0db:	7e 70                	jle    c000e14d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000e0dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0e1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e0e5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e0e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e0ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0f0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e0f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0fb:	89 f8                	mov    eax,edi
c000e0fd:	83 c0 20             	add    eax,0x20
c000e100:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e104:	56                   	push   esi
c000e105:	e8 78 ff ff ff       	call   c000e082 <Video::getWidth()>
c000e10a:	5a                   	pop    edx
c000e10b:	39 c7                	cmp    edi,eax
c000e10d:	7d 34                	jge    c000e143 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000e10f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e114:	74 05                	je     c000e11b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000e116:	8b 06                	mov    eax,DWORD PTR [esi]
c000e118:	55                   	push   ebp
c000e119:	eb 0d                	jmp    c000e128 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000e11b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e120:	74 12                	je     c000e134 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000e122:	8b 06                	mov    eax,DWORD PTR [esi]
c000e124:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e128:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e12c:	57                   	push   edi
c000e12d:	56                   	push   esi
c000e12e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e131:	83 c4 10             	add    esp,0x10
c000e134:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e138:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e13c:	47                   	inc    edi
c000e13d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e141:	75 c1                	jne    c000e104 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000e143:	43                   	inc    ebx
c000e144:	83 fb 20             	cmp    ebx,0x20
c000e147:	0f 85 79 ff ff ff    	jne    c000e0c6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000e14d:	83 c4 2c             	add    esp,0x2c
c000e150:	5b                   	pop    ebx
c000e151:	5e                   	pop    esi
c000e152:	5f                   	pop    edi
c000e153:	5d                   	pop    ebp
c000e154:	c3                   	ret    
c000e155:	90                   	nop

c000e156 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e156:	55                   	push   ebp
c000e157:	57                   	push   edi
c000e158:	56                   	push   esi
c000e159:	53                   	push   ebx
c000e15a:	83 ec 28             	sub    esp,0x28
c000e15d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e161:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e165:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e169:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e16d:	c1 e6 08             	shl    esi,0x8
c000e170:	01 c6                	add    esi,eax
c000e172:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e176:	c1 e0 08             	shl    eax,0x8
c000e179:	01 d0                	add    eax,edx
c000e17b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e17f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e183:	0f af c6             	imul   eax,esi
c000e186:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e18d:	50                   	push   eax
c000e18e:	e8 da 9c ff ff       	call   c0007e6d <malloc>
c000e193:	83 c4 10             	add    esp,0x10
c000e196:	89 c7                	mov    edi,eax
c000e198:	85 c0                	test   eax,eax
c000e19a:	75 10                	jne    c000e1ac <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e19c:	83 ec 0c             	sub    esp,0xc
c000e19f:	68 95 e2 01 c0       	push   0xc001e295
c000e1a4:	e8 a2 25 00 00       	call   c001074b <Krnl::panic(char const*)>
c000e1a9:	83 c4 10             	add    esp,0x10
c000e1ac:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e1af:	ba 12 00 00 00       	mov    edx,0x12
c000e1b4:	84 c0                	test   al,al
c000e1b6:	74 11                	je     c000e1c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000e1b8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e1bc:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e1c0:	c1 fa 03             	sar    edx,0x3
c000e1c3:	0f af d1             	imul   edx,ecx
c000e1c6:	83 c2 12             	add    edx,0x12
c000e1c9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e1cd:	74 04                	je     c000e1d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000e1cf:	85 f6                	test   esi,esi
c000e1d1:	75 12                	jne    c000e1e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000e1d3:	83 ec 0c             	sub    esp,0xc
c000e1d6:	68 a5 e2 01 c0       	push   0xc001e2a5
c000e1db:	e8 1c ca ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c000e1e0:	e9 b8 00 00 00       	jmp    c000e29d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000e1e5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e1e9:	80 f9 02             	cmp    cl,0x2
c000e1ec:	0f 85 96 00 00 00    	jne    c000e288 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000e1f2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e1f7:	75 0e                	jne    c000e207 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e1f9:	84 c0                	test   al,al
c000e1fb:	75 0a                	jne    c000e207 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e1fd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e200:	83 e8 18             	sub    eax,0x18
c000e203:	a8 f7                	test   al,0xf7
c000e205:	74 0a                	je     c000e211 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000e207:	83 ec 0c             	sub    esp,0xc
c000e20a:	68 ba e2 01 c0       	push   0xc001e2ba
c000e20f:	eb 7f                	jmp    c000e290 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000e211:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e219:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e221:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e225:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e22d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e231:	75 0c                	jne    c000e23f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000e233:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e238:	c1 e0 18             	shl    eax,0x18
c000e23b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e23f:	45                   	inc    ebp
c000e240:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e245:	c1 e1 10             	shl    ecx,0x10
c000e248:	89 c8                	mov    eax,ecx
c000e24a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e24f:	c1 e1 08             	shl    ecx,0x8
c000e252:	09 c1                	or     ecx,eax
c000e254:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e258:	09 c1                	or     ecx,eax
c000e25a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e25e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e262:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e266:	c1 f8 03             	sar    eax,0x3
c000e269:	01 c2                	add    edx,eax
c000e26b:	89 e8                	mov    eax,ebp
c000e26d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e271:	39 c6                	cmp    esi,eax
c000e273:	7f b0                	jg     c000e225 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000e275:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e279:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e27d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e280:	7e 22                	jle    c000e2a4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000e282:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e286:	eb 99                	jmp    c000e221 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000e288:	50                   	push   eax
c000e289:	50                   	push   eax
c000e28a:	51                   	push   ecx
c000e28b:	68 c8 e2 01 c0       	push   0xc001e2c8
c000e290:	e8 67 c9 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c000e295:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e298:	e8 e0 9b ff ff       	call   c0007e7d <free>
c000e29d:	83 c4 10             	add    esp,0x10
c000e2a0:	31 ff                	xor    edi,edi
c000e2a2:	eb 0f                	jmp    c000e2b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000e2a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e2a8:	89 30                	mov    DWORD PTR [eax],esi
c000e2aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e2ae:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e2b1:	89 30                	mov    DWORD PTR [eax],esi
c000e2b3:	83 c4 1c             	add    esp,0x1c
c000e2b6:	89 f8                	mov    eax,edi
c000e2b8:	5b                   	pop    ebx
c000e2b9:	5e                   	pop    esi
c000e2ba:	5f                   	pop    edi
c000e2bb:	5d                   	pop    ebp
c000e2bc:	c3                   	ret    
c000e2bd:	90                   	nop

c000e2be <Video::putTGA(int, int, unsigned char*, int)>:
c000e2be:	55                   	push   ebp
c000e2bf:	57                   	push   edi
c000e2c0:	56                   	push   esi
c000e2c1:	53                   	push   ebx
c000e2c2:	83 ec 28             	sub    esp,0x28
c000e2c5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e2c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2cd:	50                   	push   eax
c000e2ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2d2:	50                   	push   eax
c000e2d3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2d7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2db:	56                   	push   esi
c000e2dc:	e8 75 fe ff ff       	call   c000e156 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e2e1:	83 c4 20             	add    esp,0x20
c000e2e4:	85 c0                	test   eax,eax
c000e2e6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e2ea:	74 35                	je     c000e321 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2ec:	89 c7                	mov    edi,eax
c000e2ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2f2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2f6:	39 d8                	cmp    eax,ebx
c000e2f8:	7e 27                	jle    c000e321 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2fa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e302:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e306:	39 e8                	cmp    eax,ebp
c000e308:	7e 14                	jle    c000e31e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e30a:	8b 06                	mov    eax,DWORD PTR [esi]
c000e30c:	83 c7 04             	add    edi,0x4
c000e30f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e312:	53                   	push   ebx
c000e313:	55                   	push   ebp
c000e314:	45                   	inc    ebp
c000e315:	56                   	push   esi
c000e316:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	eb e0                	jmp    c000e2fe <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e31e:	43                   	inc    ebx
c000e31f:	eb cd                	jmp    c000e2ee <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e321:	83 c4 1c             	add    esp,0x1c
c000e324:	5b                   	pop    ebx
c000e325:	5e                   	pop    esi
c000e326:	5f                   	pop    edi
c000e327:	5d                   	pop    ebp
c000e328:	c3                   	ret    
c000e329:	66 90                	xchg   ax,ax
c000e32b:	90                   	nop

c000e32c <ACPI::close(int, int, void*)>:
c000e32c:	83 ec 1c             	sub    esp,0x1c
c000e32f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e337:	74 0b                	je     c000e344 <ACPI::close(int, int, void*)+0x18>
c000e339:	b8 00 00 00 00       	mov    eax,0x0
c000e33e:	e9 9d 00 00 00       	jmp    c000e3e0 <ACPI::close(int, int, void*)+0xb4>
c000e343:	90                   	nop
c000e344:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e349:	75 29                	jne    c000e374 <ACPI::close(int, int, void*)+0x48>
c000e34b:	a1 08 2f 02 c0       	mov    eax,ds:0xc0022f08
c000e350:	85 c0                	test   eax,eax
c000e352:	74 08                	je     c000e35c <ACPI::close(int, int, void*)+0x30>
c000e354:	a1 08 2f 02 c0       	mov    eax,ds:0xc0022f08
c000e359:	ff d0                	call   eax
c000e35b:	90                   	nop
c000e35c:	83 ec 0c             	sub    esp,0xc
c000e35f:	68 24 e3 01 c0       	push   0xc001e324
c000e364:	e8 e2 23 00 00       	call   c001074b <Krnl::panic(char const*)>
c000e369:	83 c4 10             	add    esp,0x10
c000e36c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e371:	eb 6d                	jmp    c000e3e0 <ACPI::close(int, int, void*)+0xb4>
c000e373:	90                   	nop
c000e374:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e379:	75 5d                	jne    c000e3d8 <ACPI::close(int, int, void*)+0xac>
c000e37b:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000e380:	85 c0                	test   eax,eax
c000e382:	74 08                	je     c000e38c <ACPI::close(int, int, void*)+0x60>
c000e384:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000e389:	ff d0                	call   eax
c000e38b:	90                   	nop
c000e38c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e391:	8d 76 00             	lea    esi,[esi+0x0]
c000e394:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e398:	25 ff 00 00 00       	and    eax,0xff
c000e39d:	83 e0 02             	and    eax,0x2
c000e3a0:	74 1e                	je     c000e3c0 <ACPI::close(int, int, void*)+0x94>
c000e3a2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e3a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ad:	89 c2                	mov    edx,eax
c000e3af:	ec                   	in     al,dx
c000e3b0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e3b4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e3b8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e3bc:	eb d6                	jmp    c000e394 <ACPI::close(int, int, void*)+0x68>
c000e3be:	66 90                	xchg   ax,ax
c000e3c0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e3c7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e3cc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e3d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3d4:	ee                   	out    dx,al
c000e3d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e3dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e3e0:	83 c4 1c             	add    esp,0x1c
c000e3e3:	c3                   	ret    

c000e3e4 <findRSDP()>:
c000e3e4:	83 ec 1c             	sub    esp,0x1c
c000e3e7:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000e3ec:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3f2:	83 e0 04             	and    eax,0x4
c000e3f5:	84 c0                	test   al,al
c000e3f7:	75 07                	jne    c000e400 <findRSDP()+0x1c>
c000e3f9:	b8 00 00 00 00       	mov    eax,0x0
c000e3fe:	eb 70                	jmp    c000e470 <findRSDP()+0x8c>
c000e400:	a1 48 09 02 c0       	mov    eax,ds:0xc0020948
c000e405:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e40a:	7f 1c                	jg     c000e428 <findRSDP()+0x44>
c000e40c:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000e411:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e417:	83 e2 fb             	and    edx,0xfffffffb
c000e41a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e420:	b8 00 00 00 00       	mov    eax,0x0
c000e425:	eb 49                	jmp    c000e470 <findRSDP()+0x8c>
c000e427:	90                   	nop
c000e428:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e430:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e438:	77 2e                	ja     c000e468 <findRSDP()+0x84>
c000e43a:	83 ec 04             	sub    esp,0x4
c000e43d:	6a 08                	push   0x8
c000e43f:	68 bf e3 01 c0       	push   0xc001e3bf
c000e444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e448:	e8 63 1f ff ff       	call   c00003b0 <memcmp>
c000e44d:	83 c4 10             	add    esp,0x10
c000e450:	85 c0                	test   eax,eax
c000e452:	0f 94 c0             	sete   al
c000e455:	84 c0                	test   al,al
c000e457:	74 07                	je     c000e460 <findRSDP()+0x7c>
c000e459:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e45d:	eb 11                	jmp    c000e470 <findRSDP()+0x8c>
c000e45f:	90                   	nop
c000e460:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e465:	eb c9                	jmp    c000e430 <findRSDP()+0x4c>
c000e467:	90                   	nop
c000e468:	b8 00 00 00 00       	mov    eax,0x0
c000e46d:	8d 76 00             	lea    esi,[esi+0x0]
c000e470:	83 c4 1c             	add    esp,0x1c
c000e473:	c3                   	ret    

c000e474 <loadACPITables(unsigned char*)>:
c000e474:	57                   	push   edi
c000e475:	56                   	push   esi
c000e476:	53                   	push   ebx
c000e477:	83 ec 60             	sub    esp,0x60
c000e47a:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000e47f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e485:	83 e0 04             	and    eax,0x4
c000e488:	84 c0                	test   al,al
c000e48a:	0f 84 3c 02 00 00    	je     c000e6cc <loadACPITables(unsigned char*)+0x258>
c000e490:	a0 20 31 02 c0       	mov    al,ds:0xc0023120
c000e495:	84 c0                	test   al,al
c000e497:	74 77                	je     c000e510 <loadACPITables(unsigned char*)+0x9c>
c000e499:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e49d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e4a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e4a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4a8:	83 e8 24             	sub    eax,0x24
c000e4ab:	c1 e8 03             	shr    eax,0x3
c000e4ae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e4b2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e4ba:	66 90                	xchg   ax,ax
c000e4bc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4c0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e4c4:	0f 8d b6 00 00 00    	jge    c000e580 <loadACPITables(unsigned char*)+0x10c>
c000e4ca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4ce:	83 c0 24             	add    eax,0x24
c000e4d1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e4d5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e4d9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e4dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4e1:	c1 e0 03             	shl    eax,0x3
c000e4e4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e4e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e4ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4f1:	89 c1                	mov    ecx,eax
c000e4f3:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000e4f8:	8d 50 01             	lea    edx,[eax+0x1]
c000e4fb:	89 15 0c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f0c,edx
c000e501:	89 ca                	mov    edx,ecx
c000e503:	89 14 c5 24 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0dc],edx
c000e50a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e50e:	eb ac                	jmp    c000e4bc <loadACPITables(unsigned char*)+0x48>
c000e510:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e514:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e518:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e51c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e51f:	83 e8 24             	sub    eax,0x24
c000e522:	c1 e8 02             	shr    eax,0x2
c000e525:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e529:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e531:	8d 76 00             	lea    esi,[esi+0x0]
c000e534:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e538:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e53c:	7d 42                	jge    c000e580 <loadACPITables(unsigned char*)+0x10c>
c000e53e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e542:	83 c0 24             	add    eax,0x24
c000e545:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e549:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e54d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e551:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e555:	c1 e0 02             	shl    eax,0x2
c000e558:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e55c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e560:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e562:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000e567:	8d 50 01             	lea    edx,[eax+0x1]
c000e56a:	89 15 0c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f0c,edx
c000e570:	89 ca                	mov    edx,ecx
c000e572:	89 14 c5 24 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0dc],edx
c000e579:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e57d:	eb b5                	jmp    c000e534 <loadACPITables(unsigned char*)+0xc0>
c000e57f:	90                   	nop
c000e580:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e588:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000e58d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e591:	0f 8d 39 01 00 00    	jge    c000e6d0 <loadACPITables(unsigned char*)+0x25c>
c000e597:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e59b:	8b 04 c5 24 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd0dc]
c000e5a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5b2:	25 ff 0f 00 00       	and    eax,0xfff
c000e5b7:	89 c6                	mov    esi,eax
c000e5b9:	8b 1d 10 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a10
c000e5bf:	83 ec 0c             	sub    esp,0xc
c000e5c2:	6a 01                	push   0x1
c000e5c4:	e8 e0 b3 ff ff       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c000e5c9:	83 c4 10             	add    esp,0x10
c000e5cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5d0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e5d6:	83 ec 0c             	sub    esp,0xc
c000e5d9:	6a 01                	push   0x1
c000e5db:	6a 01                	push   0x1
c000e5dd:	50                   	push   eax
c000e5de:	52                   	push   edx
c000e5df:	53                   	push   ebx
c000e5e0:	e8 53 bd ff ff       	call   c000a338 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5e5:	83 c4 20             	add    esp,0x20
c000e5e8:	09 f0                	or     eax,esi
c000e5ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5ee:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5f2:	c1 e0 03             	shl    eax,0x3
c000e5f5:	05 20 2f 02 c0       	add    eax,0xc0022f20
c000e5fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e602:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e606:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e60e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e612:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e616:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e61a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e61e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e622:	89 c6                	mov    esi,eax
c000e624:	89 d7                	mov    edi,edx
c000e626:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e628:	89 c8                	mov    eax,ecx
c000e62a:	89 fa                	mov    edx,edi
c000e62c:	89 f3                	mov    ebx,esi
c000e62e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e632:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e636:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e63a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e641:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e645:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e649:	05 00 10 00 00       	add    eax,0x1000
c000e64e:	c1 e8 0c             	shr    eax,0xc
c000e651:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e655:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e659:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e65d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e661:	25 ff 0f 00 00       	and    eax,0xfff
c000e666:	89 c6                	mov    esi,eax
c000e668:	8b 1d 10 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a10
c000e66e:	83 ec 0c             	sub    esp,0xc
c000e671:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e675:	e8 2f b3 ff ff       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c000e67a:	83 c4 10             	add    esp,0x10
c000e67d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e681:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e687:	83 ec 0c             	sub    esp,0xc
c000e68a:	6a 01                	push   0x1
c000e68c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e690:	50                   	push   eax
c000e691:	52                   	push   edx
c000e692:	53                   	push   ebx
c000e693:	e8 a0 bc ff ff       	call   c000a338 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e698:	83 c4 20             	add    esp,0x20
c000e69b:	09 f0                	or     eax,esi
c000e69d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a5:	83 ec 0c             	sub    esp,0xc
c000e6a8:	50                   	push   eax
c000e6a9:	e8 2b b6 ff ff       	call   c0009cd9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e6ae:	83 c4 10             	add    esp,0x10
c000e6b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e6b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e6b9:	89 14 c5 24 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0dc],edx
c000e6c0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e6c4:	e9 bf fe ff ff       	jmp    c000e588 <loadACPITables(unsigned char*)+0x114>
c000e6c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6cc:	90                   	nop
c000e6cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6d0:	83 c4 60             	add    esp,0x60
c000e6d3:	5b                   	pop    ebx
c000e6d4:	5e                   	pop    esi
c000e6d5:	5f                   	pop    edi
c000e6d6:	c3                   	ret    
c000e6d7:	90                   	nop

c000e6d8 <findRSDT(unsigned char*)>:
c000e6d8:	57                   	push   edi
c000e6d9:	56                   	push   esi
c000e6da:	53                   	push   ebx
c000e6db:	83 ec 50             	sub    esp,0x50
c000e6de:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000e6e3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6e9:	83 e0 04             	and    eax,0x4
c000e6ec:	84 c0                	test   al,al
c000e6ee:	75 0c                	jne    c000e6fc <findRSDT(unsigned char*)+0x24>
c000e6f0:	b8 00 00 00 00       	mov    eax,0x0
c000e6f5:	e9 26 01 00 00       	jmp    c000e820 <findRSDT(unsigned char*)+0x148>
c000e6fa:	66 90                	xchg   ax,ax
c000e6fc:	89 e0                	mov    eax,esp
c000e6fe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e702:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e706:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e70a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e712:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e716:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e71a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e71e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e722:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e726:	89 c6                	mov    esi,eax
c000e728:	89 d7                	mov    edi,edx
c000e72a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e72c:	89 c8                	mov    eax,ecx
c000e72e:	89 fa                	mov    edx,edi
c000e730:	89 f3                	mov    ebx,esi
c000e732:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e736:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e73a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e73e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e742:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e746:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e74e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e752:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e756:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e762:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e766:	25 ff 0f 00 00       	and    eax,0xfff
c000e76b:	89 c6                	mov    esi,eax
c000e76d:	8b 1d 10 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a10
c000e773:	83 ec 0c             	sub    esp,0xc
c000e776:	6a 02                	push   0x2
c000e778:	e8 2c b2 ff ff       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c000e77d:	83 c4 10             	add    esp,0x10
c000e780:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e784:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e78a:	83 ec 0c             	sub    esp,0xc
c000e78d:	6a 01                	push   0x1
c000e78f:	6a 02                	push   0x2
c000e791:	50                   	push   eax
c000e792:	52                   	push   edx
c000e793:	53                   	push   ebx
c000e794:	e8 9f bb ff ff       	call   c000a338 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e799:	83 c4 20             	add    esp,0x20
c000e79c:	09 f0                	or     eax,esi
c000e79e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e7a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7a6:	25 ff 0f 00 00       	and    eax,0xfff
c000e7ab:	89 c6                	mov    esi,eax
c000e7ad:	8b 1d 10 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a10
c000e7b3:	83 ec 0c             	sub    esp,0xc
c000e7b6:	6a 02                	push   0x2
c000e7b8:	e8 ec b1 ff ff       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c000e7bd:	83 c4 10             	add    esp,0x10
c000e7c0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7ca:	83 ec 0c             	sub    esp,0xc
c000e7cd:	6a 01                	push   0x1
c000e7cf:	6a 02                	push   0x2
c000e7d1:	50                   	push   eax
c000e7d2:	52                   	push   edx
c000e7d3:	53                   	push   ebx
c000e7d4:	e8 5f bb ff ff       	call   c000a338 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7d9:	83 c4 20             	add    esp,0x20
c000e7dc:	09 f0                	or     eax,esi
c000e7de:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e7e2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e7e7:	75 13                	jne    c000e7fc <findRSDT(unsigned char*)+0x124>
c000e7e9:	c6 05 20 31 02 c0 00 	mov    BYTE PTR ds:0xc0023120,0x0
c000e7f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7f4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7f8:	eb 22                	jmp    c000e81c <findRSDT(unsigned char*)+0x144>
c000e7fa:	66 90                	xchg   ax,ax
c000e7fc:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e801:	75 11                	jne    c000e814 <findRSDT(unsigned char*)+0x13c>
c000e803:	c6 05 20 31 02 c0 01 	mov    BYTE PTR ds:0xc0023120,0x1
c000e80a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e80e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e812:	eb 08                	jmp    c000e81c <findRSDT(unsigned char*)+0x144>
c000e814:	b8 00 00 00 00       	mov    eax,0x0
c000e819:	eb 05                	jmp    c000e820 <findRSDT(unsigned char*)+0x148>
c000e81b:	90                   	nop
c000e81c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e820:	83 c4 50             	add    esp,0x50
c000e823:	5b                   	pop    ebx
c000e824:	5e                   	pop    esi
c000e825:	5f                   	pop    edi
c000e826:	c3                   	ret    
c000e827:	90                   	nop

c000e828 <findDataTable(unsigned char*, char*)>:
c000e828:	83 ec 1c             	sub    esp,0x1c
c000e82b:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000e830:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e836:	83 e0 04             	and    eax,0x4
c000e839:	84 c0                	test   al,al
c000e83b:	75 07                	jne    c000e844 <findDataTable(unsigned char*, char*)+0x1c>
c000e83d:	b8 00 00 00 00       	mov    eax,0x0
c000e842:	eb 58                	jmp    c000e89c <findDataTable(unsigned char*, char*)+0x74>
c000e844:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e84c:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000e851:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e855:	7d 3d                	jge    c000e894 <findDataTable(unsigned char*, char*)+0x6c>
c000e857:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e85b:	c1 e0 03             	shl    eax,0x3
c000e85e:	05 20 2f 02 c0       	add    eax,0xc0022f20
c000e863:	83 ec 04             	sub    esp,0x4
c000e866:	6a 04                	push   0x4
c000e868:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e86c:	50                   	push   eax
c000e86d:	e8 3e 1b ff ff       	call   c00003b0 <memcmp>
c000e872:	83 c4 10             	add    esp,0x10
c000e875:	85 c0                	test   eax,eax
c000e877:	0f 94 c0             	sete   al
c000e87a:	84 c0                	test   al,al
c000e87c:	74 0e                	je     c000e88c <findDataTable(unsigned char*, char*)+0x64>
c000e87e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e882:	8b 04 c5 24 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd0dc]
c000e889:	eb 11                	jmp    c000e89c <findDataTable(unsigned char*, char*)+0x74>
c000e88b:	90                   	nop
c000e88c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e890:	eb ba                	jmp    c000e84c <findDataTable(unsigned char*, char*)+0x24>
c000e892:	66 90                	xchg   ax,ax
c000e894:	b8 00 00 00 00       	mov    eax,0x0
c000e899:	8d 76 00             	lea    esi,[esi+0x0]
c000e89c:	83 c4 1c             	add    esp,0x1c
c000e89f:	c3                   	ret    

c000e8a0 <scanMADT()>:
c000e8a0:	53                   	push   ebx
c000e8a1:	83 ec 38             	sub    esp,0x38
c000e8a4:	a1 30 09 02 c0       	mov    eax,ds:0xc0020930
c000e8a9:	25 00 04 00 00       	and    eax,0x400
c000e8ae:	74 14                	je     c000e8c4 <scanMADT()+0x24>
c000e8b0:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000e8b5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8bb:	83 e2 fb             	and    edx,0xfffffffb
c000e8be:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8c4:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000e8c9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8cf:	83 e0 04             	and    eax,0x4
c000e8d2:	84 c0                	test   al,al
c000e8d4:	0f 84 8a 04 00 00    	je     c000ed64 <scanMADT()+0x4c4>
c000e8da:	e8 05 fb ff ff       	call   c000e3e4 <findRSDP()>
c000e8df:	a3 2c 31 02 c0       	mov    ds:0xc002312c,eax
c000e8e4:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000e8e9:	85 c0                	test   eax,eax
c000e8eb:	75 1b                	jne    c000e908 <scanMADT()+0x68>
c000e8ed:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000e8f2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8f8:	83 e2 fb             	and    edx,0xfffffffb
c000e8fb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e901:	e9 66 04 00 00       	jmp    c000ed6c <scanMADT()+0x4cc>
c000e906:	66 90                	xchg   ax,ax
c000e908:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000e90d:	83 ec 0c             	sub    esp,0xc
c000e910:	50                   	push   eax
c000e911:	e8 c2 fd ff ff       	call   c000e6d8 <findRSDT(unsigned char*)>
c000e916:	83 c4 10             	add    esp,0x10
c000e919:	a3 28 31 02 c0       	mov    ds:0xc0023128,eax
c000e91e:	a1 28 31 02 c0       	mov    eax,ds:0xc0023128
c000e923:	85 c0                	test   eax,eax
c000e925:	75 19                	jne    c000e940 <scanMADT()+0xa0>
c000e927:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000e92c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e932:	83 e2 fb             	and    edx,0xfffffffb
c000e935:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e93b:	e9 2c 04 00 00       	jmp    c000ed6c <scanMADT()+0x4cc>
c000e940:	a1 28 31 02 c0       	mov    eax,ds:0xc0023128
c000e945:	83 ec 0c             	sub    esp,0xc
c000e948:	50                   	push   eax
c000e949:	e8 26 fb ff ff       	call   c000e474 <loadACPITables(unsigned char*)>
c000e94e:	83 c4 10             	add    esp,0x10
c000e951:	a1 28 31 02 c0       	mov    eax,ds:0xc0023128
c000e956:	83 ec 08             	sub    esp,0x8
c000e959:	68 c8 e3 01 c0       	push   0xc001e3c8
c000e95e:	50                   	push   eax
c000e95f:	e8 c4 fe ff ff       	call   c000e828 <findDataTable(unsigned char*, char*)>
c000e964:	83 c4 10             	add    esp,0x10
c000e967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e96b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e970:	75 1a                	jne    c000e98c <scanMADT()+0xec>
c000e972:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000e977:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e97d:	83 e2 fe             	and    edx,0xfffffffe
c000e980:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e986:	e9 e1 03 00 00       	jmp    c000ed6c <scanMADT()+0x4cc>
c000e98b:	90                   	nop
c000e98c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e994:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e998:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e99b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e99f:	0f 87 c7 03 00 00    	ja     c000ed6c <scanMADT()+0x4cc>
c000e9a5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e9ad:	0f 87 b9 03 00 00    	ja     c000ed6c <scanMADT()+0x4cc>
c000e9b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e9bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9bf:	8d 50 01             	lea    edx,[eax+0x1]
c000e9c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9ca:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9ce:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e9d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9d6:	8d 50 01             	lea    edx,[eax+0x1]
c000e9d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9e1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9e5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e9e9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e9ee:	0f 86 74 03 00 00    	jbe    c000ed68 <scanMADT()+0x4c8>
c000e9f4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e9f9:	75 5d                	jne    c000ea58 <scanMADT()+0x1b8>
c000e9fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ff:	8d 50 01             	lea    edx,[eax+0x1]
c000ea02:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea06:	8a 15 20 33 02 c0    	mov    dl,BYTE PTR ds:0xc0023320
c000ea0c:	81 e2 ff 00 00 00    	and    edx,0xff
c000ea12:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea16:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea1a:	88 82 60 33 02 c0    	mov    BYTE PTR [edx-0x3ffdcca0],al
c000ea20:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ea24:	8d 42 01             	lea    eax,[edx+0x1]
c000ea27:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ea2b:	a0 20 33 02 c0       	mov    al,ds:0xc0023320
c000ea30:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea33:	88 0d 20 33 02 c0    	mov    BYTE PTR ds:0xc0023320,cl
c000ea39:	25 ff 00 00 00       	and    eax,0xff
c000ea3e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea42:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000ea46:	88 90 40 33 02 c0    	mov    BYTE PTR [eax-0x3ffdccc0],dl
c000ea4c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea51:	e9 f6 02 00 00       	jmp    c000ed4c <scanMADT()+0x4ac>
c000ea56:	66 90                	xchg   ax,ax
c000ea58:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000ea5d:	0f 85 29 01 00 00    	jne    c000eb8c <scanMADT()+0x2ec>
c000ea63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea67:	8d 50 01             	lea    edx,[eax+0x1]
c000ea6a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea6e:	8a 15 e0 31 02 c0    	mov    dl,BYTE PTR ds:0xc00231e0
c000ea74:	81 e2 ff 00 00 00    	and    edx,0xff
c000ea7a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea7e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea82:	88 82 00 32 02 c0    	mov    BYTE PTR [edx-0x3ffdce00],al
c000ea88:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ea8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea94:	01 d0                	add    eax,edx
c000ea96:	83 c0 2c             	add    eax,0x2c
c000ea99:	8a 00                	mov    al,BYTE PTR [eax]
c000ea9b:	31 d2                	xor    edx,edx
c000ea9d:	88 c2                	mov    dl,al
c000ea9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaa3:	8d 48 01             	lea    ecx,[eax+0x1]
c000eaa6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaaa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eaae:	25 ff 00 00 00       	and    eax,0xff
c000eab3:	c1 e0 08             	shl    eax,0x8
c000eab6:	89 d1                	mov    ecx,edx
c000eab8:	09 c1                	or     ecx,eax
c000eaba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eabe:	8d 50 02             	lea    edx,[eax+0x2]
c000eac1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eac5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eac9:	25 ff 00 00 00       	and    eax,0xff
c000eace:	c1 e0 10             	shl    eax,0x10
c000ead1:	09 c1                	or     ecx,eax
c000ead3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ead7:	8d 50 03             	lea    edx,[eax+0x3]
c000eada:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eade:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eae2:	25 ff 00 00 00       	and    eax,0xff
c000eae7:	c1 e0 18             	shl    eax,0x18
c000eaea:	09 c1                	or     ecx,eax
c000eaec:	89 ca                	mov    edx,ecx
c000eaee:	a0 e0 31 02 c0       	mov    al,ds:0xc00231e0
c000eaf3:	25 ff 00 00 00       	and    eax,0xff
c000eaf8:	89 14 85 20 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcde0],edx
c000eaff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb0c:	01 d0                	add    eax,edx
c000eb0e:	83 c0 2c             	add    eax,0x2c
c000eb11:	8a 00                	mov    al,BYTE PTR [eax]
c000eb13:	31 d2                	xor    edx,edx
c000eb15:	88 c2                	mov    dl,al
c000eb17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb1b:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb22:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb26:	25 ff 00 00 00       	and    eax,0xff
c000eb2b:	c1 e0 08             	shl    eax,0x8
c000eb2e:	89 d1                	mov    ecx,edx
c000eb30:	09 c1                	or     ecx,eax
c000eb32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb36:	8d 50 02             	lea    edx,[eax+0x2]
c000eb39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb3d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb41:	25 ff 00 00 00       	and    eax,0xff
c000eb46:	c1 e0 10             	shl    eax,0x10
c000eb49:	09 c1                	or     ecx,eax
c000eb4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb4f:	8d 50 03             	lea    edx,[eax+0x3]
c000eb52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb56:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb5a:	25 ff 00 00 00       	and    eax,0xff
c000eb5f:	c1 e0 18             	shl    eax,0x18
c000eb62:	09 c1                	or     ecx,eax
c000eb64:	89 ca                	mov    edx,ecx
c000eb66:	a0 e0 31 02 c0       	mov    al,ds:0xc00231e0
c000eb6b:	25 ff 00 00 00       	and    eax,0xff
c000eb70:	89 14 85 a0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd60],edx
c000eb77:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb7c:	a0 e0 31 02 c0       	mov    al,ds:0xc00231e0
c000eb81:	40                   	inc    eax
c000eb82:	a2 e0 31 02 c0       	mov    ds:0xc00231e0,al
c000eb87:	e9 c0 01 00 00       	jmp    c000ed4c <scanMADT()+0x4ac>
c000eb8c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000eb91:	0f 85 fd 00 00 00    	jne    c000ec94 <scanMADT()+0x3f4>
c000eb97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb9b:	8d 50 01             	lea    edx,[eax+0x1]
c000eb9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eba2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eba6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebaa:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000ebae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebb2:	8d 50 01             	lea    edx,[eax+0x1]
c000ebb5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebbd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebc1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ebc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebcd:	01 d0                	add    eax,edx
c000ebcf:	83 c0 2c             	add    eax,0x2c
c000ebd2:	8a 00                	mov    al,BYTE PTR [eax]
c000ebd4:	31 d2                	xor    edx,edx
c000ebd6:	88 c2                	mov    dl,al
c000ebd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebdc:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebe3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebe7:	25 ff 00 00 00       	and    eax,0xff
c000ebec:	c1 e0 08             	shl    eax,0x8
c000ebef:	89 d1                	mov    ecx,edx
c000ebf1:	09 c1                	or     ecx,eax
c000ebf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebf7:	8d 50 02             	lea    edx,[eax+0x2]
c000ebfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebfe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ec02:	25 ff 00 00 00       	and    eax,0xff
c000ec07:	c1 e0 10             	shl    eax,0x10
c000ec0a:	09 c1                	or     ecx,eax
c000ec0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec10:	8d 50 03             	lea    edx,[eax+0x3]
c000ec13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec17:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ec1b:	25 ff 00 00 00       	and    eax,0xff
c000ec20:	c1 e0 18             	shl    eax,0x18
c000ec23:	09 c8                	or     eax,ecx
c000ec25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec29:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec36:	01 d0                	add    eax,edx
c000ec38:	83 c0 2c             	add    eax,0x2c
c000ec3b:	8a 00                	mov    al,BYTE PTR [eax]
c000ec3d:	25 ff 00 00 00       	and    eax,0xff
c000ec42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ec46:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec49:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec4d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ec51:	81 e2 ff 00 00 00    	and    edx,0xff
c000ec57:	c1 e2 08             	shl    edx,0x8
c000ec5a:	09 d0                	or     eax,edx
c000ec5c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec61:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec66:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec6a:	25 ff 00 00 00       	and    eax,0xff
c000ec6f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec73:	88 90 80 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe0780],dl
c000ec79:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec7d:	31 d2                	xor    edx,edx
c000ec7f:	88 c2                	mov    dl,al
c000ec81:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ec86:	66 89 84 12 c0 31 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdce40],ax
c000ec8e:	e9 b9 00 00 00       	jmp    c000ed4c <scanMADT()+0x4ac>
c000ec93:	90                   	nop
c000ec94:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000ec99:	0f 85 a1 00 00 00    	jne    c000ed40 <scanMADT()+0x4a0>
c000ec9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eca3:	8d 50 01             	lea    edx,[eax+0x1]
c000eca6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecaa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecae:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ecb2:	25 ff 00 00 00       	and    eax,0xff
c000ecb7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ecbb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecc3:	01 d0                	add    eax,edx
c000ecc5:	83 c0 2c             	add    eax,0x2c
c000ecc8:	8a 00                	mov    al,BYTE PTR [eax]
c000ecca:	31 d2                	xor    edx,edx
c000eccc:	88 c2                	mov    dl,al
c000ecce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecd2:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecd5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ecd9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ecdd:	25 ff 00 00 00       	and    eax,0xff
c000ece2:	c1 e0 08             	shl    eax,0x8
c000ece5:	09 d0                	or     eax,edx
c000ece7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eceb:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ecf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecf4:	8d 50 01             	lea    edx,[eax+0x1]
c000ecf7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecfb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecff:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ed03:	25 ff 00 00 00       	and    eax,0xff
c000ed08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed10:	c1 e0 08             	shl    eax,0x8
c000ed13:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ed17:	89 c1                	mov    ecx,eax
c000ed19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed1d:	c1 e0 18             	shl    eax,0x18
c000ed20:	89 c3                	mov    ebx,eax
c000ed22:	a1 30 31 02 c0       	mov    eax,ds:0xc0023130
c000ed27:	8d 50 01             	lea    edx,[eax+0x1]
c000ed2a:	89 15 30 31 02 c0    	mov    DWORD PTR ds:0xc0023130,edx
c000ed30:	09 d9                	or     ecx,ebx
c000ed32:	89 ca                	mov    edx,ecx
c000ed34:	89 14 85 40 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcec0],edx
c000ed3b:	eb 0f                	jmp    c000ed4c <scanMADT()+0x4ac>
c000ed3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed40:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000ed45:	75 05                	jne    c000ed4c <scanMADT()+0x4ac>
c000ed47:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ed4c:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000ed50:	31 d2                	xor    edx,edx
c000ed52:	88 c2                	mov    dl,al
c000ed54:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed58:	01 d0                	add    eax,edx
c000ed5a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed5e:	e9 31 fc ff ff       	jmp    c000e994 <scanMADT()+0xf4>
c000ed63:	90                   	nop
c000ed64:	90                   	nop
c000ed65:	eb 05                	jmp    c000ed6c <scanMADT()+0x4cc>
c000ed67:	90                   	nop
c000ed68:	90                   	nop
c000ed69:	8d 76 00             	lea    esi,[esi+0x0]
c000ed6c:	83 c4 38             	add    esp,0x38
c000ed6f:	5b                   	pop    ebx
c000ed70:	c3                   	ret    
c000ed71:	90                   	nop
c000ed72:	66 90                	xchg   ax,ax

c000ed74 <ACPI::ACPI()>:
c000ed74:	83 ec 0c             	sub    esp,0xc
c000ed77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed7b:	83 ec 08             	sub    esp,0x8
c000ed7e:	68 cd e3 01 c0       	push   0xc001e3cd
c000ed83:	50                   	push   eax
c000ed84:	e8 4b d4 ff ff       	call   c000c1d4 <Device::Device(char const*)>
c000ed89:	83 c4 10             	add    esp,0x10
c000ed8c:	ba 04 e5 01 c0       	mov    edx,0xc001e504
c000ed91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed95:	89 10                	mov    DWORD PTR [eax],edx
c000ed97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed9b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000eda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eda6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000edb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edb4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000edbe:	e8 dd fa ff ff       	call   c000e8a0 <scanMADT()>
c000edc3:	90                   	nop
c000edc4:	83 c4 0c             	add    esp,0xc
c000edc7:	c3                   	ret    

c000edc8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000edc8:	83 ec 2c             	sub    esp,0x2c
c000edcb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000edcf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edd3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000edd7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000eddb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ede0:	88 d0                	mov    al,dl
c000ede2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ede6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000edeb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000edf3:	90                   	nop
c000edf4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edf8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ee02:	0f 8d 9c 00 00 00    	jge    c000eea4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000ee08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee10:	83 c2 2a             	add    edx,0x2a
c000ee13:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ee17:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000ee1c:	75 7a                	jne    c000ee98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ee1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee22:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee26:	83 c2 2a             	add    edx,0x2a
c000ee29:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ee2d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000ee31:	75 65                	jne    c000ee98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ee33:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ee38:	74 3a                	je     c000ee74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000ee3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee42:	83 c2 2a             	add    edx,0x2a
c000ee45:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee50:	39 c2                	cmp    edx,eax
c000ee52:	74 10                	je     c000ee64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000ee54:	83 ec 0c             	sub    esp,0xc
c000ee57:	68 48 e3 01 c0       	push   0xc001e348
c000ee5c:	e8 ea 18 00 00       	call   c001074b <Krnl::panic(char const*)>
c000ee61:	83 c4 10             	add    esp,0x10
c000ee64:	83 ec 0c             	sub    esp,0xc
c000ee67:	68 d2 e3 01 c0       	push   0xc001e3d2
c000ee6c:	e8 da 18 00 00       	call   c001074b <Krnl::panic(char const*)>
c000ee71:	83 c4 10             	add    esp,0x10
c000ee74:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee80:	83 c2 2a             	add    edx,0x2a
c000ee83:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee87:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee89:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee8c:	89 01                	mov    DWORD PTR [ecx],eax
c000ee8e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee91:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee96:	66 90                	xchg   ax,ax
c000ee98:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee9c:	e9 53 ff ff ff       	jmp    c000edf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000eea1:	8d 76 00             	lea    esi,[esi+0x0]
c000eea4:	90                   	nop
c000eea5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eea9:	83 c4 2c             	add    esp,0x2c
c000eeac:	c2 04 00             	ret    0x4
c000eeaf:	90                   	nop

c000eeb0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000eeb0:	83 ec 1c             	sub    esp,0x1c
c000eeb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eeb7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000eebb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eebf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eec4:	88 c8                	mov    al,cl
c000eec6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eeca:	88 d0                	mov    al,dl
c000eecc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eeda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eede:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eee1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000eee5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000eee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eef3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000eef7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000eefa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eefe:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ef03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef07:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef0d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ef11:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef18:	83 c2 2a             	add    edx,0x2a
c000ef1b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ef1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef23:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef2d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ef30:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef34:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ef38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef3c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef42:	8d 50 01             	lea    edx,[eax+0x1]
c000ef45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef49:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef53:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef59:	3d 00 02 00 00       	cmp    eax,0x200
c000ef5e:	75 10                	jne    c000ef70 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ef60:	83 ec 0c             	sub    esp,0xc
c000ef63:	68 e1 e3 01 c0       	push   0xc001e3e1
c000ef68:	e8 de 17 00 00       	call   c001074b <Krnl::panic(char const*)>
c000ef6d:	83 c4 10             	add    esp,0x10
c000ef70:	90                   	nop
c000ef71:	83 c4 1c             	add    esp,0x1c
c000ef74:	c3                   	ret    
c000ef75:	90                   	nop
c000ef76:	66 90                	xchg   ax,ax

c000ef78 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef78:	b8 00 00 00 00       	mov    eax,0x0
c000ef7d:	c3                   	ret    
c000ef7e:	66 90                	xchg   ax,ax

c000ef80 <ACPI::detectPCI()>:
c000ef80:	53                   	push   ebx
c000ef81:	83 ec 28             	sub    esp,0x28
c000ef84:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef89:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef8e:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000ef93:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef99:	83 e0 04             	and    eax,0x4
c000ef9c:	84 c0                	test   al,al
c000ef9e:	74 2c                	je     c000efcc <ACPI::detectPCI()+0x4c>
c000efa0:	a1 28 31 02 c0       	mov    eax,ds:0xc0023128
c000efa5:	83 ec 08             	sub    esp,0x8
c000efa8:	68 fe e3 01 c0       	push   0xc001e3fe
c000efad:	50                   	push   eax
c000efae:	e8 75 f8 ff ff       	call   c000e828 <findDataTable(unsigned char*, char*)>
c000efb3:	83 c4 10             	add    esp,0x10
c000efb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efba:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efbf:	74 0b                	je     c000efcc <ACPI::detectPCI()+0x4c>
c000efc1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efc6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efcb:	90                   	nop
c000efcc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000efd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efd8:	8a 00                	mov    al,BYTE PTR [eax]
c000efda:	3c 01                	cmp    al,0x1
c000efdc:	75 0e                	jne    c000efec <ACPI::detectPCI()+0x6c>
c000efde:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efe3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efe8:	eb 2a                	jmp    c000f014 <ACPI::detectPCI()+0x94>
c000efea:	66 90                	xchg   ax,ax
c000efec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eff0:	8a 00                	mov    al,BYTE PTR [eax]
c000eff2:	3c 02                	cmp    al,0x2
c000eff4:	75 1e                	jne    c000f014 <ACPI::detectPCI()+0x94>
c000eff6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000effb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f000:	74 12                	je     c000f014 <ACPI::detectPCI()+0x94>
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 78 e3 01 c0       	push   0xc001e378
c000f00a:	e8 3c 17 00 00       	call   c001074b <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	66 90                	xchg   ax,ax
c000f014:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f018:	83 f0 01             	xor    eax,0x1
c000f01b:	84 c0                	test   al,al
c000f01d:	74 41                	je     c000f060 <ACPI::detectPCI()+0xe0>
c000f01f:	e8 2c 11 ff ff       	call   c0000150 <manualPCIProbe>
c000f024:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f028:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f02d:	75 0d                	jne    c000f03c <ACPI::detectPCI()+0xbc>
c000f02f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f034:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f039:	eb 25                	jmp    c000f060 <ACPI::detectPCI()+0xe0>
c000f03b:	90                   	nop
c000f03c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f041:	75 1d                	jne    c000f060 <ACPI::detectPCI()+0xe0>
c000f043:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f048:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f04d:	74 11                	je     c000f060 <ACPI::detectPCI()+0xe0>
c000f04f:	83 ec 0c             	sub    esp,0xc
c000f052:	68 78 e3 01 c0       	push   0xc001e378
c000f057:	e8 ef 16 00 00       	call   c001074b <Krnl::panic(char const*)>
c000f05c:	83 c4 10             	add    esp,0x10
c000f05f:	90                   	nop
c000f060:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000f065:	0f 84 85 00 00 00    	je     c000f0f0 <ACPI::detectPCI()+0x170>
c000f06b:	83 ec 0c             	sub    esp,0xc
c000f06e:	68 03 e4 01 c0       	push   0xc001e403
c000f073:	e8 4f 8e ff ff       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c000f078:	83 c4 10             	add    esp,0x10
c000f07b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f083:	83 ec 0c             	sub    esp,0xc
c000f086:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f08a:	e8 de 8d ff ff       	call   c0007e6d <malloc>
c000f08f:	83 c4 10             	add    esp,0x10
c000f092:	89 c3                	mov    ebx,eax
c000f094:	83 ec 0c             	sub    esp,0xc
c000f097:	53                   	push   ebx
c000f098:	e8 41 94 00 00       	call   c00184de <PCI::PCI()>
c000f09d:	83 c4 10             	add    esp,0x10
c000f0a0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f0a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0a8:	83 ec 08             	sub    esp,0x8
c000f0ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0af:	50                   	push   eax
c000f0b0:	e8 87 cf ff ff       	call   c000c03c <Device::addChild(Device*)>
c000f0b5:	83 c4 10             	add    esp,0x10
c000f0b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0be:	83 c0 08             	add    eax,0x8
c000f0c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0c3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f0c8:	74 0a                	je     c000f0d4 <ACPI::detectPCI()+0x154>
c000f0ca:	ba 01 00 00 00       	mov    edx,0x1
c000f0cf:	eb 0b                	jmp    c000f0dc <ACPI::detectPCI()+0x15c>
c000f0d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d4:	ba 02 00 00 00       	mov    edx,0x2
c000f0d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0dc:	6a 00                	push   0x0
c000f0de:	6a 00                	push   0x0
c000f0e0:	52                   	push   edx
c000f0e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0e5:	ff d0                	call   eax
c000f0e7:	83 c4 10             	add    esp,0x10
c000f0ea:	e9 91 00 00 00       	jmp    c000f180 <ACPI::detectPCI()+0x200>
c000f0ef:	90                   	nop
c000f0f0:	83 ec 0c             	sub    esp,0xc
c000f0f3:	68 1b e4 01 c0       	push   0xc001e41b
c000f0f8:	e8 ca 8d ff ff       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c000f0fd:	83 c4 10             	add    esp,0x10
c000f100:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f107:	83 ec 0c             	sub    esp,0xc
c000f10a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f10e:	e8 5a 8d ff ff       	call   c0007e6d <malloc>
c000f113:	83 c4 10             	add    esp,0x10
c000f116:	89 c3                	mov    ebx,eax
c000f118:	83 ec 0c             	sub    esp,0xc
c000f11b:	53                   	push   ebx
c000f11c:	e8 e9 9e 00 00       	call   c001900a <IDE::IDE()>
c000f121:	83 c4 10             	add    esp,0x10
c000f124:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f12c:	83 ec 08             	sub    esp,0x8
c000f12f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f133:	50                   	push   eax
c000f134:	e8 03 cf ff ff       	call   c000c03c <Device::addChild(Device*)>
c000f139:	83 c4 10             	add    esp,0x10
c000f13c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f140:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f14a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f14e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f157:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f15b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f164:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f168:	8b 00                	mov    eax,DWORD PTR [eax]
c000f16a:	83 c0 08             	add    eax,0x8
c000f16d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f16f:	6a 00                	push   0x0
c000f171:	6a 00                	push   0x0
c000f173:	6a 00                	push   0x0
c000f175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f179:	ff d0                	call   eax
c000f17b:	83 c4 10             	add    esp,0x10
c000f17e:	66 90                	xchg   ax,ax
c000f180:	90                   	nop
c000f181:	83 c4 28             	add    esp,0x28
c000f184:	5b                   	pop    ebx
c000f185:	c3                   	ret    
c000f186:	66 90                	xchg   ax,ax

c000f188 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f188:	83 ec 1c             	sub    esp,0x1c
c000f18b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f18f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f192:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f196:	8b 15 18 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020918
c000f19c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f1a0:	25 ff 00 00 00       	and    eax,0xff
c000f1a5:	83 ec 08             	sub    esp,0x8
c000f1a8:	50                   	push   eax
c000f1a9:	52                   	push   edx
c000f1aa:	e8 af 83 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c000f1af:	83 c4 10             	add    esp,0x10
c000f1b2:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f1b6:	8b 15 18 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020918
c000f1bc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f1c0:	25 ff 00 00 00       	and    eax,0xff
c000f1c5:	83 ec 04             	sub    esp,0x4
c000f1c8:	6a 01                	push   0x1
c000f1ca:	50                   	push   eax
c000f1cb:	52                   	push   edx
c000f1cc:	e8 a3 84 ff ff       	call   c0007674 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f1d1:	83 c4 10             	add    esp,0x10
c000f1d4:	90                   	nop
c000f1d5:	83 c4 1c             	add    esp,0x1c
c000f1d8:	c3                   	ret    
c000f1d9:	90                   	nop
c000f1da:	66 90                	xchg   ax,ax

c000f1dc <ACPI::sleep()>:
c000f1dc:	83 ec 0c             	sub    esp,0xc
c000f1df:	a1 00 2f 02 c0       	mov    eax,ds:0xc0022f00
c000f1e4:	85 c0                	test   eax,eax
c000f1e6:	74 08                	je     c000f1f0 <ACPI::sleep()+0x14>
c000f1e8:	a1 00 2f 02 c0       	mov    eax,ds:0xc0022f00
c000f1ed:	ff d0                	call   eax
c000f1ef:	90                   	nop
c000f1f0:	90                   	nop
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	c3                   	ret    
c000f1f5:	90                   	nop
c000f1f6:	66 90                	xchg   ax,ax

c000f1f8 <ACPI::open(int, int, void*)>:
c000f1f8:	57                   	push   edi
c000f1f9:	56                   	push   esi
c000f1fa:	53                   	push   ebx
c000f1fb:	81 ec 70 01 00 00    	sub    esp,0x170
c000f201:	83 ec 0c             	sub    esp,0xc
c000f204:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f20b:	e8 70 fd ff ff       	call   c000ef80 <ACPI::detectPCI()>
c000f210:	83 c4 10             	add    esp,0x10
c000f213:	83 ec 0c             	sub    esp,0xc
c000f216:	68 a0 e3 01 c0       	push   0xc001e3a0
c000f21b:	e8 a7 8c ff ff       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c000f220:	83 c4 10             	add    esp,0x10
c000f223:	83 ec 0c             	sub    esp,0xc
c000f226:	68 30 e4 01 c0       	push   0xc001e430
c000f22b:	e8 07 34 00 00       	call   c0012637 <Thr::loadKernelSymbolTable(char const*)>
c000f230:	83 c4 10             	add    esp,0x10
c000f233:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f23b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f246:	83 ec 0c             	sub    esp,0xc
c000f249:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f250:	e8 18 8c ff ff       	call   c0007e6d <malloc>
c000f255:	83 c4 10             	add    esp,0x10
c000f258:	89 c3                	mov    ebx,eax
c000f25a:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c000f25f:	83 ec 04             	sub    esp,0x4
c000f262:	50                   	push   eax
c000f263:	68 4e e4 01 c0       	push   0xc001e44e
c000f268:	53                   	push   ebx
c000f269:	e8 04 bf ff ff       	call   c000b172 <File::File(char const*, Process*)>
c000f26e:	83 c4 10             	add    esp,0x10
c000f271:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f278:	83 ec 08             	sub    esp,0x8
c000f27b:	6a 01                	push   0x1
c000f27d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f284:	e8 a9 bf ff ff       	call   c000b232 <File::open(FileOpenMode)>
c000f289:	83 c4 10             	add    esp,0x10
c000f28c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f293:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f29b:	75 17                	jne    c000f2b4 <ACPI::open(int, int, void*)+0xbc>
c000f29d:	83 ec 0c             	sub    esp,0xc
c000f2a0:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2a7:	e8 e4 bf ff ff       	call   c000b290 <File::close()>
c000f2ac:	83 c4 10             	add    esp,0x10
c000f2af:	eb 0b                	jmp    c000f2bc <ACPI::open(int, int, void*)+0xc4>
c000f2b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2b4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f2bc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f2c4:	74 1e                	je     c000f2e4 <ACPI::open(int, int, void*)+0xec>
c000f2c6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f2cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2cf:	83 c0 08             	add    eax,0x8
c000f2d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2d4:	83 ec 0c             	sub    esp,0xc
c000f2d7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2de:	ff d0                	call   eax
c000f2e0:	83 c4 10             	add    esp,0x10
c000f2e3:	90                   	nop
c000f2e4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f2eb:	83 f0 01             	xor    eax,0x1
c000f2ee:	84 c0                	test   al,al
c000f2f0:	74 42                	je     c000f334 <ACPI::open(int, int, void*)+0x13c>
c000f2f2:	83 ec 0c             	sub    esp,0xc
c000f2f5:	68 6c e4 01 c0       	push   0xc001e46c
c000f2fa:	e8 c8 8b ff ff       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c000f2ff:	83 c4 10             	add    esp,0x10
c000f302:	83 ec 04             	sub    esp,0x4
c000f305:	6a 0c                	push   0xc
c000f307:	68 87 e4 01 c0       	push   0xc001e487
c000f30c:	68 98 e4 01 c0       	push   0xc001e498
c000f311:	e8 20 1b 00 00       	call   c0010e36 <Reg::readIntWithDefault(char*, char*, int)>
c000f316:	83 c4 10             	add    esp,0x10
c000f319:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f320:	83 ec 0c             	sub    esp,0xc
c000f323:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f32a:	e8 84 a8 ff ff       	call   c0009bb3 <Virt::setupPageSwapping(int)>
c000f32f:	83 c4 10             	add    esp,0x10
c000f332:	66 90                	xchg   ax,ax
c000f334:	83 ec 0c             	sub    esp,0xc
c000f337:	68 20 d5 01 c0       	push   0xc001d520
c000f33c:	e8 86 8b ff ff       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c000f341:	83 c4 10             	add    esp,0x10
c000f344:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f34b:	83 ec 08             	sub    esp,0x8
c000f34e:	6a 12                	push   0x12
c000f350:	50                   	push   eax
c000f351:	e8 fe cf ff ff       	call   c000c354 <getDevicesOfType(DeviceType)>
c000f356:	83 c4 0c             	add    esp,0xc
c000f359:	8d 76 00             	lea    esi,[esi+0x0]
c000f35c:	83 ec 0c             	sub    esp,0xc
c000f35f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f366:	50                   	push   eax
c000f367:	e8 b0 d5 00 00       	call   c001c91c <LinkedList<Device>::isEmpty()>
c000f36c:	83 c4 10             	add    esp,0x10
c000f36f:	83 f0 01             	xor    eax,0x1
c000f372:	84 c0                	test   al,al
c000f374:	0f 84 46 01 00 00    	je     c000f4c0 <ACPI::open(int, int, void*)+0x2c8>
c000f37a:	83 ec 0c             	sub    esp,0xc
c000f37d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f384:	50                   	push   eax
c000f385:	e8 ae d5 00 00       	call   c001c938 <LinkedList<Device>::getFirstElement()>
c000f38a:	83 c4 10             	add    esp,0x10
c000f38d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f394:	83 ec 0c             	sub    esp,0xc
c000f397:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f39e:	50                   	push   eax
c000f39f:	e8 9c d5 00 00       	call   c001c940 <LinkedList<Device>::removeFirst()>
c000f3a4:	83 c4 10             	add    esp,0x10
c000f3a7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f3ae:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f3b5:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f3bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3c0:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f3c6:	ba 09 00 00 00       	mov    edx,0x9
c000f3cb:	fc                   	cld    
c000f3cc:	89 c7                	mov    edi,eax
c000f3ce:	89 de                	mov    esi,ebx
c000f3d0:	89 d1                	mov    ecx,edx
c000f3d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f3d4:	83 ec 08             	sub    esp,0x8
c000f3d7:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f3db:	50                   	push   eax
c000f3dc:	83 ec 24             	sub    esp,0x24
c000f3df:	89 e0                	mov    eax,esp
c000f3e1:	89 c3                	mov    ebx,eax
c000f3e3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f3e7:	ba 09 00 00 00       	mov    edx,0x9
c000f3ec:	89 df                	mov    edi,ebx
c000f3ee:	89 c6                	mov    esi,eax
c000f3f0:	89 d1                	mov    ecx,edx
c000f3f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f3f4:	e8 c7 95 00 00       	call   c00189c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f3f9:	83 c4 30             	add    esp,0x30
c000f3fc:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f403:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f40b:	0f 84 4b ff ff ff    	je     c000f35c <ACPI::open(int, int, void*)+0x164>
c000f411:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f41c:	83 ec 0c             	sub    esp,0xc
c000f41f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f426:	e8 42 8a ff ff       	call   c0007e6d <malloc>
c000f42b:	83 c4 10             	add    esp,0x10
c000f42e:	89 c3                	mov    ebx,eax
c000f430:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c000f435:	83 ec 04             	sub    esp,0x4
c000f438:	50                   	push   eax
c000f439:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f440:	53                   	push   ebx
c000f441:	e8 2c bd ff ff       	call   c000b172 <File::File(char const*, Process*)>
c000f446:	83 c4 10             	add    esp,0x10
c000f449:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f450:	83 ec 0c             	sub    esp,0xc
c000f453:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f45a:	e8 41 c0 ff ff       	call   c000b4a0 <File::exists()>
c000f45f:	83 c4 10             	add    esp,0x10
c000f462:	84 c0                	test   al,al
c000f464:	74 2a                	je     c000f490 <ACPI::open(int, int, void*)+0x298>
c000f466:	83 ec 08             	sub    esp,0x8
c000f469:	6a 01                	push   0x1
c000f46b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f472:	e8 37 3c 00 00       	call   c00130ae <Thr::loadDLL(char const*, bool)>
c000f477:	83 c4 10             	add    esp,0x10
c000f47a:	83 ec 08             	sub    esp,0x8
c000f47d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f484:	50                   	push   eax
c000f485:	e8 55 3e 00 00       	call   c00132df <Thr::executeDLL(unsigned long, void*)>
c000f48a:	83 c4 10             	add    esp,0x10
c000f48d:	8d 76 00             	lea    esi,[esi+0x0]
c000f490:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f498:	0f 84 be fe ff ff    	je     c000f35c <ACPI::open(int, int, void*)+0x164>
c000f49e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f4a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a7:	83 c0 08             	add    eax,0x8
c000f4aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ac:	83 ec 0c             	sub    esp,0xc
c000f4af:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f4b6:	ff d0                	call   eax
c000f4b8:	83 c4 10             	add    esp,0x10
c000f4bb:	e9 9c fe ff ff       	jmp    c000f35c <ACPI::open(int, int, void*)+0x164>
c000f4c0:	83 ec 0c             	sub    esp,0xc
c000f4c3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f4ca:	50                   	push   eax
c000f4cb:	e8 48 d4 00 00       	call   c001c918 <LinkedList<Device>::~LinkedList()>
c000f4d0:	83 c4 10             	add    esp,0x10
c000f4d3:	8b 1d 18 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020918
c000f4d9:	83 ec 08             	sub    esp,0x8
c000f4dc:	6a 01                	push   0x1
c000f4de:	68 9f e4 01 c0       	push   0xc001e49f
c000f4e3:	e8 c6 3b 00 00       	call   c00130ae <Thr::loadDLL(char const*, bool)>
c000f4e8:	83 c4 10             	add    esp,0x10
c000f4eb:	83 ec 08             	sub    esp,0x8
c000f4ee:	53                   	push   ebx
c000f4ef:	50                   	push   eax
c000f4f0:	e8 ea 3d 00 00       	call   c00132df <Thr::executeDLL(unsigned long, void*)>
c000f4f5:	83 c4 10             	add    esp,0x10
c000f4f8:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000f4fd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f503:	83 e0 04             	and    eax,0x4
c000f506:	84 c0                	test   al,al
c000f508:	0f 84 16 01 00 00    	je     c000f624 <ACPI::open(int, int, void*)+0x42c>
c000f50e:	83 ec 0c             	sub    esp,0xc
c000f511:	68 bc e4 01 c0       	push   0xc001e4bc
c000f516:	e8 ac 89 ff ff       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c000f51b:	83 c4 10             	add    esp,0x10
c000f51e:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f529:	83 ec 0c             	sub    esp,0xc
c000f52c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f533:	e8 35 89 ff ff       	call   c0007e6d <malloc>
c000f538:	83 c4 10             	add    esp,0x10
c000f53b:	89 c3                	mov    ebx,eax
c000f53d:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c000f542:	83 ec 04             	sub    esp,0x4
c000f545:	50                   	push   eax
c000f546:	68 d9 e4 01 c0       	push   0xc001e4d9
c000f54b:	53                   	push   ebx
c000f54c:	e8 21 bc ff ff       	call   c000b172 <File::File(char const*, Process*)>
c000f551:	83 c4 10             	add    esp,0x10
c000f554:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f55b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f563:	74 1b                	je     c000f580 <ACPI::open(int, int, void*)+0x388>
c000f565:	83 ec 0c             	sub    esp,0xc
c000f568:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f56f:	e8 2c bf ff ff       	call   c000b4a0 <File::exists()>
c000f574:	83 c4 10             	add    esp,0x10
c000f577:	84 c0                	test   al,al
c000f579:	74 05                	je     c000f580 <ACPI::open(int, int, void*)+0x388>
c000f57b:	b0 01                	mov    al,0x1
c000f57d:	eb 05                	jmp    c000f584 <ACPI::open(int, int, void*)+0x38c>
c000f57f:	90                   	nop
c000f580:	b0 00                	mov    al,0x0
c000f582:	66 90                	xchg   ax,ax
c000f584:	84 c0                	test   al,al
c000f586:	74 28                	je     c000f5b0 <ACPI::open(int, int, void*)+0x3b8>
c000f588:	83 ec 08             	sub    esp,0x8
c000f58b:	6a 01                	push   0x1
c000f58d:	68 d9 e4 01 c0       	push   0xc001e4d9
c000f592:	e8 17 3b 00 00       	call   c00130ae <Thr::loadDLL(char const*, bool)>
c000f597:	83 c4 10             	add    esp,0x10
c000f59a:	83 ec 08             	sub    esp,0x8
c000f59d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f5a4:	50                   	push   eax
c000f5a5:	e8 35 3d 00 00       	call   c00132df <Thr::executeDLL(unsigned long, void*)>
c000f5aa:	83 c4 10             	add    esp,0x10
c000f5ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f5b0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5b8:	74 2a                	je     c000f5e4 <ACPI::open(int, int, void*)+0x3ec>
c000f5ba:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5c2:	74 20                	je     c000f5e4 <ACPI::open(int, int, void*)+0x3ec>
c000f5c4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f5cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5cd:	83 c0 08             	add    eax,0x8
c000f5d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d2:	83 ec 0c             	sub    esp,0xc
c000f5d5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f5dc:	ff d0                	call   eax
c000f5de:	83 c4 10             	add    esp,0x10
c000f5e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5e4:	a1 28 31 02 c0       	mov    eax,ds:0xc0023128
c000f5e9:	83 ec 08             	sub    esp,0x8
c000f5ec:	68 f6 e4 01 c0       	push   0xc001e4f6
c000f5f1:	50                   	push   eax
c000f5f2:	e8 31 f2 ff ff       	call   c000e828 <findDataTable(unsigned char*, char*)>
c000f5f7:	83 c4 10             	add    esp,0x10
c000f5fa:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f601:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f609:	74 19                	je     c000f624 <ACPI::open(int, int, void*)+0x42c>
c000f60b:	83 ec 08             	sub    esp,0x8
c000f60e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f615:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f61c:	e8 67 fb ff ff       	call   c000f188 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	b8 00 00 00 00       	mov    eax,0x0
c000f629:	81 c4 70 01 00 00    	add    esp,0x170
c000f62f:	5b                   	pop    ebx
c000f630:	5e                   	pop    esi
c000f631:	5f                   	pop    edi
c000f632:	c3                   	ret    
c000f633:	90                   	nop

c000f634 <CPU::close(int, int, void*)>:
c000f634:	31 c0                	xor    eax,eax
c000f636:	c3                   	ret    
c000f637:	90                   	nop

c000f638 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f638:	60                   	pusha  
c000f639:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f63d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f641:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f645:	9c                   	pushf  
c000f646:	fa                   	cli    
c000f647:	0f 09                	wbinvd 
c000f649:	0f 30                	wrmsr  
c000f64b:	9d                   	popf   
c000f64c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f650:	89 02                	mov    DWORD PTR [edx],eax
c000f652:	61                   	popa   
c000f653:	c3                   	ret    

c000f654 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f654:	60                   	pusha  
c000f655:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f659:	9c                   	pushf  
c000f65a:	fa                   	cli    
c000f65b:	0f 09                	wbinvd 
c000f65d:	31 c0                	xor    eax,eax
c000f65f:	31 d2                	xor    edx,edx
c000f661:	0f 32                	rdmsr  
c000f663:	9d                   	popf   
c000f664:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f668:	89 02                	mov    DWORD PTR [edx],eax
c000f66a:	61                   	popa   
c000f66b:	c3                   	ret    

c000f66c <CPU::AMD_K6_writeback(int, int, int)>:
c000f66c:	56                   	push   esi
c000f66d:	53                   	push   ebx
c000f66e:	83 ec 10             	sub    esp,0x10
c000f671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f675:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f67a:	75 5d                	jne    c000f6d9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f67c:	83 f8 08             	cmp    eax,0x8
c000f67f:	75 09                	jne    c000f68a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f681:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f686:	7e 13                	jle    c000f69b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f688:	eb 30                	jmp    c000f6ba <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f68a:	83 f8 06             	cmp    eax,0x6
c000f68d:	7c 4a                	jl     c000f6d9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f68f:	83 f8 07             	cmp    eax,0x7
c000f692:	7e 07                	jle    c000f69b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f694:	83 f8 09             	cmp    eax,0x9
c000f697:	74 21                	je     c000f6ba <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f699:	eb 3e                	jmp    c000f6d9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f69b:	89 e6                	mov    esi,esp
c000f69d:	8b 1d 3c 09 02 c0    	mov    ebx,DWORD PTR ds:0xc002093c
c000f6a3:	56                   	push   esi
c000f6a4:	c1 eb 15             	shr    ebx,0x15
c000f6a7:	68 82 00 00 c0       	push   0xc0000082
c000f6ac:	83 e3 7e             	and    ebx,0x7e
c000f6af:	e8 a0 ff ff ff       	call   c000f654 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f6b4:	56                   	push   esi
c000f6b5:	6a 00                	push   0x0
c000f6b7:	53                   	push   ebx
c000f6b8:	eb 12                	jmp    c000f6cc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f6ba:	89 e3                	mov    ebx,esp
c000f6bc:	53                   	push   ebx
c000f6bd:	68 82 00 00 c0       	push   0xc0000082
c000f6c2:	e8 8d ff ff ff       	call   c000f654 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f6c7:	53                   	push   ebx
c000f6c8:	6a 00                	push   0x0
c000f6ca:	6a 00                	push   0x0
c000f6cc:	68 82 00 00 c0       	push   0xc0000082
c000f6d1:	e8 62 ff ff ff       	call   c000f638 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f6d6:	83 c4 18             	add    esp,0x18
c000f6d9:	83 c4 10             	add    esp,0x10
c000f6dc:	5b                   	pop    ebx
c000f6dd:	5e                   	pop    esi
c000f6de:	c3                   	ret    
c000f6df:	90                   	nop

c000f6e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f6e0:	55                   	push   ebp
c000f6e1:	57                   	push   edi
c000f6e2:	56                   	push   esi
c000f6e3:	53                   	push   ebx
c000f6e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6e8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f6ec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f6f0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f6f4:	39 05 90 f8 01 c0    	cmp    DWORD PTR ds:0xc001f890,eax
c000f6fa:	75 23                	jne    c000f71f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f6fc:	a1 8c 33 02 c0       	mov    eax,ds:0xc002338c
c000f701:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f705:	89 06                	mov    DWORD PTR [esi],eax
c000f707:	a1 88 33 02 c0       	mov    eax,ds:0xc0023388
c000f70c:	89 07                	mov    DWORD PTR [edi],eax
c000f70e:	a1 84 33 02 c0       	mov    eax,ds:0xc0023384
c000f713:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f716:	a1 80 33 02 c0       	mov    eax,ds:0xc0023380
c000f71b:	89 02                	mov    DWORD PTR [edx],eax
c000f71d:	eb 3f                	jmp    c000f75e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f71f:	31 c9                	xor    ecx,ecx
c000f721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f725:	0f a2                	cpuid  
c000f727:	89 06                	mov    DWORD PTR [esi],eax
c000f729:	89 1f                	mov    DWORD PTR [edi],ebx
c000f72b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f72f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f732:	89 10                	mov    DWORD PTR [eax],edx
c000f734:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f738:	a3 90 f8 01 c0       	mov    ds:0xc001f890,eax
c000f73d:	8b 06                	mov    eax,DWORD PTR [esi]
c000f73f:	a3 8c 33 02 c0       	mov    ds:0xc002338c,eax
c000f744:	8b 07                	mov    eax,DWORD PTR [edi]
c000f746:	a3 88 33 02 c0       	mov    ds:0xc0023388,eax
c000f74b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f74e:	a3 84 33 02 c0       	mov    ds:0xc0023384,eax
c000f753:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f757:	8b 00                	mov    eax,DWORD PTR [eax]
c000f759:	a3 80 33 02 c0       	mov    ds:0xc0023380,eax
c000f75e:	5b                   	pop    ebx
c000f75f:	5e                   	pop    esi
c000f760:	5f                   	pop    edi
c000f761:	5d                   	pop    ebp
c000f762:	c3                   	ret    
c000f763:	90                   	nop

c000f764 <CPU::cpuidCheckEDX(unsigned int)>:
c000f764:	83 ec 10             	sub    esp,0x10
c000f767:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76b:	50                   	push   eax
c000f76c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f770:	50                   	push   eax
c000f771:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f775:	50                   	push   eax
c000f776:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f77a:	50                   	push   eax
c000f77b:	6a 01                	push   0x1
c000f77d:	e8 5e ff ff ff       	call   c000f6e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f782:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f786:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f78a:	0f 95 c0             	setne  al
c000f78d:	83 c4 24             	add    esp,0x24
c000f790:	c3                   	ret    
c000f791:	90                   	nop

c000f792 <CPU::cpuidCheckECX(unsigned int)>:
c000f792:	83 ec 10             	sub    esp,0x10
c000f795:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f799:	50                   	push   eax
c000f79a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f79e:	50                   	push   eax
c000f79f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a3:	50                   	push   eax
c000f7a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a8:	50                   	push   eax
c000f7a9:	6a 01                	push   0x1
c000f7ab:	e8 30 ff ff ff       	call   c000f6e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7b4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7b8:	0f 95 c0             	setne  al
c000f7bb:	83 c4 24             	add    esp,0x24
c000f7be:	c3                   	ret    
c000f7bf:	90                   	nop

c000f7c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f7c0:	83 ec 10             	sub    esp,0x10
c000f7c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c7:	50                   	push   eax
c000f7c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7cc:	50                   	push   eax
c000f7cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7d1:	50                   	push   eax
c000f7d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7d6:	50                   	push   eax
c000f7d7:	6a 07                	push   0x7
c000f7d9:	e8 02 ff ff ff       	call   c000f6e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7e2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f7e6:	0f 95 c0             	setne  al
c000f7e9:	83 c4 24             	add    esp,0x24
c000f7ec:	c3                   	ret    
c000f7ed:	90                   	nop

c000f7ee <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f7ee:	83 ec 10             	sub    esp,0x10
c000f7f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7f5:	50                   	push   eax
c000f7f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7fa:	50                   	push   eax
c000f7fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ff:	50                   	push   eax
c000f800:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f804:	50                   	push   eax
c000f805:	6a 07                	push   0x7
c000f807:	e8 d4 fe ff ff       	call   c000f6e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f80c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f810:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f814:	0f 95 c0             	setne  al
c000f817:	83 c4 24             	add    esp,0x24
c000f81a:	c3                   	ret    
c000f81b:	90                   	nop

c000f81c <CPU::CPU()>:
c000f81c:	83 ec 0c             	sub    esp,0xc
c000f81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f823:	83 ec 08             	sub    esp,0x8
c000f826:	68 19 e6 01 c0       	push   0xc001e619
c000f82b:	50                   	push   eax
c000f82c:	e8 a3 c9 ff ff       	call   c000c1d4 <Device::Device(char const*)>
c000f831:	83 c4 10             	add    esp,0x10
c000f834:	ba a0 e6 01 c0       	mov    edx,0xc001e6a0
c000f839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f83d:	89 10                	mov    DWORD PTR [eax],edx
c000f83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f843:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f851:	05 78 01 00 00       	add    eax,0x178
c000f856:	83 ec 0c             	sub    esp,0xc
c000f859:	50                   	push   eax
c000f85a:	e8 d3 7e ff ff       	call   c0007732 <GDT::GDT()>
c000f85f:	83 c4 10             	add    esp,0x10
c000f862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f866:	05 7c 09 00 00       	add    eax,0x97c
c000f86b:	83 ec 0c             	sub    esp,0xc
c000f86e:	50                   	push   eax
c000f86f:	e8 f4 80 ff ff       	call   c0007968 <IDT::IDT()>
c000f874:	83 c4 10             	add    esp,0x10
c000f877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f87b:	05 7c 11 00 00       	add    eax,0x117c
c000f880:	83 ec 0c             	sub    esp,0xc
c000f883:	50                   	push   eax
c000f884:	e8 63 9a ff ff       	call   c00092ec <TSS::TSS()>
c000f889:	83 c4 10             	add    esp,0x10
c000f88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f890:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f89b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f8a5:	90                   	nop
c000f8a6:	83 c4 0c             	add    esp,0xc
c000f8a9:	c3                   	ret    

c000f8aa <CPU::displayFeatures()>:
c000f8aa:	c3                   	ret    
c000f8ab:	90                   	nop

c000f8ac <CPU::detectFeatures()>:
c000f8ac:	55                   	push   ebp
c000f8ad:	57                   	push   edi
c000f8ae:	56                   	push   esi
c000f8af:	53                   	push   ebx
c000f8b0:	83 ec 30             	sub    esp,0x30
c000f8b3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f8b7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f8c1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f8c8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f8ce:	6a 0d                	push   0xd
c000f8d0:	6a 00                	push   0x0
c000f8d2:	55                   	push   ebp
c000f8d3:	e8 18 0c ff ff       	call   c00004f0 <memset>
c000f8d8:	83 c4 10             	add    esp,0x10
c000f8db:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000f8e0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f8e7:	0f 84 d5 05 00 00    	je     c000fec2 <CPU::detectFeatures()+0x616>
c000f8ed:	83 ec 0c             	sub    esp,0xc
c000f8f0:	89 ef                	mov    edi,ebp
c000f8f2:	6a 10                	push   0x10
c000f8f4:	e8 6b fe ff ff       	call   c000f764 <CPU::cpuidCheckEDX(unsigned int)>
c000f8f9:	83 e0 01             	and    eax,0x1
c000f8fc:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f905:	83 e0 fd             	and    eax,0xfffffffd
c000f908:	09 d0                	or     eax,edx
c000f90a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f910:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f917:	e8 48 fe ff ff       	call   c000f764 <CPU::cpuidCheckEDX(unsigned int)>
c000f91c:	83 e0 01             	and    eax,0x1
c000f91f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f926:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f92c:	83 e0 fb             	and    eax,0xfffffffb
c000f92f:	09 d0                	or     eax,edx
c000f931:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f937:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f93e:	e8 21 fe ff ff       	call   c000f764 <CPU::cpuidCheckEDX(unsigned int)>
c000f943:	83 e0 01             	and    eax,0x1
c000f946:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f94d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f953:	83 e0 f7             	and    eax,0xfffffff7
c000f956:	09 d0                	or     eax,edx
c000f958:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f95e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f965:	e8 fa fd ff ff       	call   c000f764 <CPU::cpuidCheckEDX(unsigned int)>
c000f96a:	83 e0 01             	and    eax,0x1
c000f96d:	c1 e0 04             	shl    eax,0x4
c000f970:	88 c2                	mov    dl,al
c000f972:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f978:	83 e0 ef             	and    eax,0xffffffef
c000f97b:	09 d0                	or     eax,edx
c000f97d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f983:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f98a:	e8 d5 fd ff ff       	call   c000f764 <CPU::cpuidCheckEDX(unsigned int)>
c000f98f:	83 e0 01             	and    eax,0x1
c000f992:	c1 e0 05             	shl    eax,0x5
c000f995:	88 c2                	mov    dl,al
c000f997:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f99d:	83 e0 df             	and    eax,0xffffffdf
c000f9a0:	09 d0                	or     eax,edx
c000f9a2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f9af:	e8 b0 fd ff ff       	call   c000f764 <CPU::cpuidCheckEDX(unsigned int)>
c000f9b4:	83 e0 01             	and    eax,0x1
c000f9b7:	8d 14 00             	lea    edx,[eax+eax*1]
c000f9ba:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f9c0:	83 e0 fd             	and    eax,0xfffffffd
c000f9c3:	09 d0                	or     eax,edx
c000f9c5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f9cb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f9d2:	e8 8d fd ff ff       	call   c000f764 <CPU::cpuidCheckEDX(unsigned int)>
c000f9d7:	83 e0 01             	and    eax,0x1
c000f9da:	c1 e0 06             	shl    eax,0x6
c000f9dd:	88 c2                	mov    dl,al
c000f9df:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f9e5:	83 e0 bf             	and    eax,0xffffffbf
c000f9e8:	09 d0                	or     eax,edx
c000f9ea:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f9f0:	58                   	pop    eax
c000f9f1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9f5:	50                   	push   eax
c000f9f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9fa:	50                   	push   eax
c000f9fb:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f9ff:	56                   	push   esi
c000fa00:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa04:	50                   	push   eax
c000fa05:	6a 00                	push   0x0
c000fa07:	e8 d4 fc ff ff       	call   c000f6e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa0c:	b8 04 00 00 00       	mov    eax,0x4
c000fa11:	89 c1                	mov    ecx,eax
c000fa13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa15:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fa1b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fa1f:	89 c1                	mov    ecx,eax
c000fa21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa23:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fa29:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fa2d:	89 c1                	mov    ecx,eax
c000fa2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa31:	83 c4 18             	add    esp,0x18
c000fa34:	68 28 e5 01 c0       	push   0xc001e528
c000fa39:	55                   	push   ebp
c000fa3a:	e8 c1 0c ff ff       	call   c0000700 <strcmp>
c000fa3f:	83 c4 10             	add    esp,0x10
c000fa42:	85 c0                	test   eax,eax
c000fa44:	75 0f                	jne    c000fa55 <CPU::detectFeatures()+0x1a9>
c000fa46:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fa50:	e9 22 02 00 00       	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000fa55:	50                   	push   eax
c000fa56:	50                   	push   eax
c000fa57:	68 35 e5 01 c0       	push   0xc001e535
c000fa5c:	55                   	push   ebp
c000fa5d:	e8 9e 0c ff ff       	call   c0000700 <strcmp>
c000fa62:	83 c4 10             	add    esp,0x10
c000fa65:	85 c0                	test   eax,eax
c000fa67:	74 dd                	je     c000fa46 <CPU::detectFeatures()+0x19a>
c000fa69:	50                   	push   eax
c000fa6a:	50                   	push   eax
c000fa6b:	68 42 e5 01 c0       	push   0xc001e542
c000fa70:	55                   	push   ebp
c000fa71:	e8 8a 0c ff ff       	call   c0000700 <strcmp>
c000fa76:	83 c4 10             	add    esp,0x10
c000fa79:	85 c0                	test   eax,eax
c000fa7b:	74 2a                	je     c000faa7 <CPU::detectFeatures()+0x1fb>
c000fa7d:	50                   	push   eax
c000fa7e:	50                   	push   eax
c000fa7f:	68 4f e5 01 c0       	push   0xc001e54f
c000fa84:	55                   	push   ebp
c000fa85:	e8 76 0c ff ff       	call   c0000700 <strcmp>
c000fa8a:	83 c4 10             	add    esp,0x10
c000fa8d:	85 c0                	test   eax,eax
c000fa8f:	74 16                	je     c000faa7 <CPU::detectFeatures()+0x1fb>
c000fa91:	50                   	push   eax
c000fa92:	50                   	push   eax
c000fa93:	68 5c e5 01 c0       	push   0xc001e55c
c000fa98:	55                   	push   ebp
c000fa99:	e8 62 0c ff ff       	call   c0000700 <strcmp>
c000fa9e:	83 c4 10             	add    esp,0x10
c000faa1:	85 c0                	test   eax,eax
c000faa3:	74 48                	je     c000faed <CPU::detectFeatures()+0x241>
c000faa5:	eb 0f                	jmp    c000fab6 <CPU::detectFeatures()+0x20a>
c000faa7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fab1:	e9 c1 01 00 00       	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000fab6:	50                   	push   eax
c000fab7:	50                   	push   eax
c000fab8:	68 69 e5 01 c0       	push   0xc001e569
c000fabd:	55                   	push   ebp
c000fabe:	e8 3d 0c ff ff       	call   c0000700 <strcmp>
c000fac3:	83 c4 10             	add    esp,0x10
c000fac6:	85 c0                	test   eax,eax
c000fac8:	74 23                	je     c000faed <CPU::detectFeatures()+0x241>
c000faca:	57                   	push   edi
c000facb:	57                   	push   edi
c000facc:	68 76 e5 01 c0       	push   0xc001e576
c000fad1:	55                   	push   ebp
c000fad2:	e8 29 0c ff ff       	call   c0000700 <strcmp>
c000fad7:	83 c4 10             	add    esp,0x10
c000fada:	85 c0                	test   eax,eax
c000fadc:	75 1e                	jne    c000fafc <CPU::detectFeatures()+0x250>
c000fade:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fae8:	e9 8a 01 00 00       	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000faed:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000faf7:	e9 7b 01 00 00       	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000fafc:	56                   	push   esi
c000fafd:	56                   	push   esi
c000fafe:	68 83 e5 01 c0       	push   0xc001e583
c000fb03:	55                   	push   ebp
c000fb04:	e8 f7 0b ff ff       	call   c0000700 <strcmp>
c000fb09:	83 c4 10             	add    esp,0x10
c000fb0c:	85 c0                	test   eax,eax
c000fb0e:	75 0f                	jne    c000fb1f <CPU::detectFeatures()+0x273>
c000fb10:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fb1a:	e9 58 01 00 00       	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000fb1f:	51                   	push   ecx
c000fb20:	51                   	push   ecx
c000fb21:	68 42 e5 01 c0       	push   0xc001e542
c000fb26:	55                   	push   ebp
c000fb27:	e8 d4 0b ff ff       	call   c0000700 <strcmp>
c000fb2c:	83 c4 10             	add    esp,0x10
c000fb2f:	85 c0                	test   eax,eax
c000fb31:	75 0f                	jne    c000fb42 <CPU::detectFeatures()+0x296>
c000fb33:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fb3d:	e9 35 01 00 00       	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000fb42:	52                   	push   edx
c000fb43:	52                   	push   edx
c000fb44:	68 90 e5 01 c0       	push   0xc001e590
c000fb49:	55                   	push   ebp
c000fb4a:	e8 b1 0b ff ff       	call   c0000700 <strcmp>
c000fb4f:	83 c4 10             	add    esp,0x10
c000fb52:	85 c0                	test   eax,eax
c000fb54:	75 0f                	jne    c000fb65 <CPU::detectFeatures()+0x2b9>
c000fb56:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fb60:	e9 12 01 00 00       	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000fb65:	50                   	push   eax
c000fb66:	50                   	push   eax
c000fb67:	68 9d e5 01 c0       	push   0xc001e59d
c000fb6c:	55                   	push   ebp
c000fb6d:	e8 8e 0b ff ff       	call   c0000700 <strcmp>
c000fb72:	83 c4 10             	add    esp,0x10
c000fb75:	85 c0                	test   eax,eax
c000fb77:	75 0f                	jne    c000fb88 <CPU::detectFeatures()+0x2dc>
c000fb79:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb83:	e9 ef 00 00 00       	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000fb88:	50                   	push   eax
c000fb89:	50                   	push   eax
c000fb8a:	68 aa e5 01 c0       	push   0xc001e5aa
c000fb8f:	55                   	push   ebp
c000fb90:	e8 6b 0b ff ff       	call   c0000700 <strcmp>
c000fb95:	83 c4 10             	add    esp,0x10
c000fb98:	85 c0                	test   eax,eax
c000fb9a:	75 0f                	jne    c000fbab <CPU::detectFeatures()+0x2ff>
c000fb9c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fba6:	e9 cc 00 00 00       	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000fbab:	50                   	push   eax
c000fbac:	50                   	push   eax
c000fbad:	68 b7 e5 01 c0       	push   0xc001e5b7
c000fbb2:	55                   	push   ebp
c000fbb3:	e8 48 0b ff ff       	call   c0000700 <strcmp>
c000fbb8:	83 c4 10             	add    esp,0x10
c000fbbb:	85 c0                	test   eax,eax
c000fbbd:	75 0f                	jne    c000fbce <CPU::detectFeatures()+0x322>
c000fbbf:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fbc9:	e9 a9 00 00 00       	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000fbce:	50                   	push   eax
c000fbcf:	50                   	push   eax
c000fbd0:	68 c4 e5 01 c0       	push   0xc001e5c4
c000fbd5:	55                   	push   ebp
c000fbd6:	e8 25 0b ff ff       	call   c0000700 <strcmp>
c000fbdb:	83 c4 10             	add    esp,0x10
c000fbde:	85 c0                	test   eax,eax
c000fbe0:	75 0f                	jne    c000fbf1 <CPU::detectFeatures()+0x345>
c000fbe2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fbec:	e9 86 00 00 00       	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000fbf1:	50                   	push   eax
c000fbf2:	50                   	push   eax
c000fbf3:	68 d1 e5 01 c0       	push   0xc001e5d1
c000fbf8:	55                   	push   ebp
c000fbf9:	e8 02 0b ff ff       	call   c0000700 <strcmp>
c000fbfe:	83 c4 10             	add    esp,0x10
c000fc01:	85 c0                	test   eax,eax
c000fc03:	75 0c                	jne    c000fc11 <CPU::detectFeatures()+0x365>
c000fc05:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fc0f:	eb 66                	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000fc11:	50                   	push   eax
c000fc12:	50                   	push   eax
c000fc13:	68 de e5 01 c0       	push   0xc001e5de
c000fc18:	55                   	push   ebp
c000fc19:	e8 e2 0a ff ff       	call   c0000700 <strcmp>
c000fc1e:	83 c4 10             	add    esp,0x10
c000fc21:	85 c0                	test   eax,eax
c000fc23:	75 0c                	jne    c000fc31 <CPU::detectFeatures()+0x385>
c000fc25:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fc2f:	eb 46                	jmp    c000fc77 <CPU::detectFeatures()+0x3cb>
c000fc31:	57                   	push   edi
c000fc32:	57                   	push   edi
c000fc33:	68 eb e5 01 c0       	push   0xc001e5eb
c000fc38:	55                   	push   ebp
c000fc39:	e8 c2 0a ff ff       	call   c0000700 <strcmp>
c000fc3e:	83 c4 10             	add    esp,0x10
c000fc41:	85 c0                	test   eax,eax
c000fc43:	74 e0                	je     c000fc25 <CPU::detectFeatures()+0x379>
c000fc45:	56                   	push   esi
c000fc46:	56                   	push   esi
c000fc47:	68 f8 e5 01 c0       	push   0xc001e5f8
c000fc4c:	55                   	push   ebp
c000fc4d:	e8 ae 0a ff ff       	call   c0000700 <strcmp>
c000fc52:	83 c4 10             	add    esp,0x10
c000fc55:	85 c0                	test   eax,eax
c000fc57:	74 cc                	je     c000fc25 <CPU::detectFeatures()+0x379>
c000fc59:	51                   	push   ecx
c000fc5a:	51                   	push   ecx
c000fc5b:	68 05 e6 01 c0       	push   0xc001e605
c000fc60:	55                   	push   ebp
c000fc61:	e8 9a 0a ff ff       	call   c0000700 <strcmp>
c000fc66:	83 c4 10             	add    esp,0x10
c000fc69:	85 c0                	test   eax,eax
c000fc6b:	74 b8                	je     c000fc25 <CPU::detectFeatures()+0x379>
c000fc6d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fc77:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fc7c:	0f 86 be 00 00 00    	jbe    c000fd40 <CPU::detectFeatures()+0x494>
c000fc82:	83 ec 0c             	sub    esp,0xc
c000fc85:	68 80 00 00 00       	push   0x80
c000fc8a:	e8 31 fb ff ff       	call   c000f7c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc8f:	83 e0 01             	and    eax,0x1
c000fc92:	c1 e0 06             	shl    eax,0x6
c000fc95:	88 c2                	mov    dl,al
c000fc97:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc9d:	83 e0 bf             	and    eax,0xffffffbf
c000fca0:	09 d0                	or     eax,edx
c000fca2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fca8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fcaf:	e8 0c fb ff ff       	call   c000f7c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fcb4:	83 e0 01             	and    eax,0x1
c000fcb7:	c1 e0 04             	shl    eax,0x4
c000fcba:	88 c2                	mov    dl,al
c000fcbc:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fcc2:	83 e0 ef             	and    eax,0xffffffef
c000fcc5:	09 d0                	or     eax,edx
c000fcc7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fccd:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fcd4:	e8 e7 fa ff ff       	call   c000f7c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fcd9:	c1 e0 07             	shl    eax,0x7
c000fcdc:	88 c2                	mov    dl,al
c000fcde:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fce4:	83 e0 7f             	and    eax,0x7f
c000fce7:	09 d0                	or     eax,edx
c000fce9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fcef:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fcf6:	e8 f3 fa ff ff       	call   c000f7ee <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fcfb:	83 e0 01             	and    eax,0x1
c000fcfe:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fd05:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd0b:	83 e0 f7             	and    eax,0xfffffff7
c000fd0e:	09 d0                	or     eax,edx
c000fd10:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd16:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fd1d:	e8 cc fa ff ff       	call   c000f7ee <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd22:	83 c4 10             	add    esp,0x10
c000fd25:	83 e0 01             	and    eax,0x1
c000fd28:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd2f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fd35:	83 e0 fb             	and    eax,0xfffffffb
c000fd38:	09 d0                	or     eax,edx
c000fd3a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fd40:	83 ec 0c             	sub    esp,0xc
c000fd43:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd47:	50                   	push   eax
c000fd48:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd4c:	50                   	push   eax
c000fd4d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fd51:	56                   	push   esi
c000fd52:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd56:	50                   	push   eax
c000fd57:	6a 01                	push   0x1
c000fd59:	e8 82 f9 ff ff       	call   c000f6e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd5e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fd62:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000fd68:	88 ca                	mov    dl,cl
c000fd6a:	83 e0 f0             	and    eax,0xfffffff0
c000fd6d:	83 e2 0f             	and    edx,0xf
c000fd70:	09 d0                	or     eax,edx
c000fd72:	88 ca                	mov    dl,cl
c000fd74:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000fd7a:	c0 ea 04             	shr    dl,0x4
c000fd7d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000fd81:	0f b6 c2             	movzx  eax,dl
c000fd84:	83 c4 20             	add    esp,0x20
c000fd87:	c1 e0 06             	shl    eax,0x6
c000fd8a:	89 c7                	mov    edi,eax
c000fd8c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000fd92:	66 25 3f c0          	and    ax,0xc03f
c000fd96:	09 f8                	or     eax,edi
c000fd98:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000fd9f:	89 c8                	mov    eax,ecx
c000fda1:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000fda8:	c1 e8 08             	shr    eax,0x8
c000fdab:	83 e5 3f             	and    ebp,0x3f
c000fdae:	83 e0 0f             	and    eax,0xf
c000fdb1:	89 c7                	mov    edi,eax
c000fdb3:	c1 e7 06             	shl    edi,0x6
c000fdb6:	09 ef                	or     edi,ebp
c000fdb8:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000fdbf:	89 fa                	mov    edx,edi
c000fdc1:	83 e5 c0             	and    ebp,0xffffffc0
c000fdc4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdca:	88 c2                	mov    dl,al
c000fdcc:	c0 ea 02             	shr    dl,0x2
c000fdcf:	89 d7                	mov    edi,edx
c000fdd1:	09 ef                	or     edi,ebp
c000fdd3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fdd9:	89 fa                	mov    edx,edi
c000fddb:	83 e5 cf             	and    ebp,0xffffffcf
c000fdde:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fde4:	89 cf                	mov    edi,ecx
c000fde6:	c1 ef 0c             	shr    edi,0xc
c000fde9:	83 e7 03             	and    edi,0x3
c000fdec:	c1 e7 04             	shl    edi,0x4
c000fdef:	09 ef                	or     edi,ebp
c000fdf1:	3c 06                	cmp    al,0x6
c000fdf3:	89 fa                	mov    edx,edi
c000fdf5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fdfb:	74 04                	je     c000fe01 <CPU::detectFeatures()+0x555>
c000fdfd:	3c 0f                	cmp    al,0xf
c000fdff:	75 5c                	jne    c000fe5d <CPU::detectFeatures()+0x5b1>
c000fe01:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000fe05:	89 cf                	mov    edi,ecx
c000fe07:	c1 ef 10             	shr    edi,0x10
c000fe0a:	c1 e7 04             	shl    edi,0x4
c000fe0d:	09 fa                	or     edx,edi
c000fe0f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000fe15:	0f b6 d2             	movzx  edx,dl
c000fe18:	66 81 e7 3f c0       	and    di,0xc03f
c000fe1d:	c1 e2 06             	shl    edx,0x6
c000fe20:	09 fa                	or     edx,edi
c000fe22:	3c 0f                	cmp    al,0xf
c000fe24:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fe2b:	75 30                	jne    c000fe5d <CPU::detectFeatures()+0x5b1>
c000fe2d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000fe33:	c1 e9 14             	shr    ecx,0x14
c000fe36:	83 e0 3f             	and    eax,0x3f
c000fe39:	83 c1 0f             	add    ecx,0xf
c000fe3c:	88 ca                	mov    dl,cl
c000fe3e:	c0 e9 02             	shr    cl,0x2
c000fe41:	c1 e2 06             	shl    edx,0x6
c000fe44:	09 d0                	or     eax,edx
c000fe46:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000fe4c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000fe52:	83 e0 c0             	and    eax,0xffffffc0
c000fe55:	09 c1                	or     ecx,eax
c000fe57:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fe5d:	83 ec 0c             	sub    esp,0xc
c000fe60:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fe67:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe6b:	50                   	push   eax
c000fe6c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe70:	55                   	push   ebp
c000fe71:	56                   	push   esi
c000fe72:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fe76:	57                   	push   edi
c000fe77:	68 00 00 00 80       	push   0x80000000
c000fe7c:	e8 5f f8 ff ff       	call   c000f6e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe81:	83 c4 20             	add    esp,0x20
c000fe84:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe8c:	76 22                	jbe    c000feb0 <CPU::detectFeatures()+0x604>
c000fe8e:	83 ec 0c             	sub    esp,0xc
c000fe91:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe95:	50                   	push   eax
c000fe96:	55                   	push   ebp
c000fe97:	56                   	push   esi
c000fe98:	57                   	push   edi
c000fe99:	68 01 00 00 80       	push   0x80000001
c000fe9e:	e8 3d f8 ff ff       	call   c000f6e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fea3:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fead:	83 c4 20             	add    esp,0x20
c000feb0:	52                   	push   edx
c000feb1:	52                   	push   edx
c000feb2:	68 11 e6 01 c0       	push   0xc001e611
c000feb7:	53                   	push   ebx
c000feb8:	e8 09 c3 ff ff       	call   c000c1c6 <Device::setName(char const*)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	eb 67                	jmp    c000ff29 <CPU::detectFeatures()+0x67d>
c000fec2:	50                   	push   eax
c000fec3:	50                   	push   eax
c000fec4:	68 76 e5 01 c0       	push   0xc001e576
c000fec9:	55                   	push   ebp
c000feca:	e8 51 07 ff ff       	call   c0000620 <strcpy>
c000fecf:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fed9:	e8 05 03 ff ff       	call   c00001e3 <is486>
c000fede:	83 c4 10             	add    esp,0x10
c000fee1:	85 c0                	test   eax,eax
c000fee3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fee9:	74 1d                	je     c000ff08 <CPU::detectFeatures()+0x65c>
c000feeb:	83 c8 07             	or     eax,0x7
c000feee:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fef4:	0f 20 c0             	mov    eax,cr0
c000fef7:	83 e0 14             	and    eax,0x14
c000fefa:	83 f8 04             	cmp    eax,0x4
c000fefd:	75 0e                	jne    c000ff0d <CPU::detectFeatures()+0x661>
c000feff:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000ff06:	eb 21                	jmp    c000ff29 <CPU::detectFeatures()+0x67d>
c000ff08:	83 e0 f8             	and    eax,0xfffffff8
c000ff0b:	eb e1                	jmp    c000feee <CPU::detectFeatures()+0x642>
c000ff0d:	e8 ac 02 ff ff       	call   c00001be <hasLegacyFPU>
c000ff12:	83 e0 01             	and    eax,0x1
c000ff15:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff18:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff1e:	83 e0 fd             	and    eax,0xfffffffd
c000ff21:	09 d0                	or     eax,edx
c000ff23:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff29:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ff30:	74 0e                	je     c000ff40 <CPU::detectFeatures()+0x694>
c000ff32:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000ff37:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000ff3e:	eb 20                	jmp    c000ff60 <CPU::detectFeatures()+0x6b4>
c000ff40:	e8 79 02 ff ff       	call   c00001be <hasLegacyFPU>
c000ff45:	83 e0 01             	and    eax,0x1
c000ff48:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff4b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff51:	83 e0 fd             	and    eax,0xfffffffd
c000ff54:	09 d0                	or     eax,edx
c000ff56:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff5c:	a8 02                	test   al,0x2
c000ff5e:	75 d2                	jne    c000ff32 <CPU::detectFeatures()+0x686>
c000ff60:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff67:	83 c4 2c             	add    esp,0x2c
c000ff6a:	5b                   	pop    ebx
c000ff6b:	5e                   	pop    esi
c000ff6c:	5f                   	pop    edi
c000ff6d:	5d                   	pop    ebp
c000ff6e:	c3                   	ret    
c000ff6f:	90                   	nop

c000ff70 <CPU::setupSMEP()>:
c000ff70:	0f 20 e0             	mov    eax,cr4
c000ff73:	0d 00 00 10 00       	or     eax,0x100000
c000ff78:	0f 22 e0             	mov    cr4,eax
c000ff7b:	c3                   	ret    

c000ff7c <CPU::setupUMIP()>:
c000ff7c:	0f 20 e0             	mov    eax,cr4
c000ff7f:	80 cc 08             	or     ah,0x8
c000ff82:	0f 22 e0             	mov    cr4,eax
c000ff85:	c3                   	ret    

c000ff86 <CPU::setupTSC()>:
c000ff86:	0f 20 e0             	mov    eax,cr4
c000ff89:	83 c8 04             	or     eax,0x4
c000ff8c:	0f 22 e0             	mov    cr4,eax
c000ff8f:	c3                   	ret    

c000ff90 <CPU::setupLargePages()>:
c000ff90:	0f 20 e0             	mov    eax,cr4
c000ff93:	83 c8 10             	or     eax,0x10
c000ff96:	0f 22 e0             	mov    cr4,eax
c000ff99:	c3                   	ret    

c000ff9a <CPU::setupPAT()>:
c000ff9a:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c000ff9f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ffa6:	74 2c                	je     c000ffd4 <CPU::setupPAT()+0x3a>
c000ffa8:	53                   	push   ebx
c000ffa9:	83 ec 10             	sub    esp,0x10
c000ffac:	68 77 02 00 00       	push   0x277
c000ffb1:	50                   	push   eax
c000ffb2:	e8 f3 74 ff ff       	call   c00074aa <Computer::rdmsr(unsigned int)>
c000ffb7:	83 e2 f8             	and    edx,0xfffffff8
c000ffba:	83 ca 01             	or     edx,0x1
c000ffbd:	52                   	push   edx
c000ffbe:	50                   	push   eax
c000ffbf:	68 77 02 00 00       	push   0x277
c000ffc4:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c000ffca:	e8 07 75 ff ff       	call   c00074d6 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ffcf:	83 c4 28             	add    esp,0x28
c000ffd2:	5b                   	pop    ebx
c000ffd3:	c3                   	ret    
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <CPU::setupMTRR()>:
c000ffd6:	c3                   	ret    
c000ffd7:	90                   	nop

c000ffd8 <CPU::setupGlobalPages()>:
c000ffd8:	0f 20 e0             	mov    eax,cr4
c000ffdb:	0c 80                	or     al,0x80
c000ffdd:	0f 22 e0             	mov    cr4,eax
c000ffe0:	c3                   	ret    
c000ffe1:	90                   	nop

c000ffe2 <CPU::allowUsermodeDataAccess()>:
c000ffe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffe6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffed:	74 03                	je     c000fff2 <CPU::allowUsermodeDataAccess()+0x10>
c000ffef:	0f 01 cb             	stac   
c000fff2:	c3                   	ret    
c000fff3:	90                   	nop

c000fff4 <CPU::prohibitUsermodeDataAccess()>:
c000fff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fff8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffff:	74 03                	je     c0010004 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010001:	0f 01 ca             	clac   
c0010004:	c3                   	ret    
c0010005:	90                   	nop

c0010006 <CPU::setupSMAP()>:
c0010006:	0f 20 e0             	mov    eax,cr4
c0010009:	0d 00 00 20 00       	or     eax,0x200000
c001000e:	0f 22 e0             	mov    cr4,eax
c0010011:	eb e1                	jmp    c000fff4 <CPU::prohibitUsermodeDataAccess()>
c0010013:	90                   	nop

c0010014 <CPU::setupFeatures()>:
c0010014:	53                   	push   ebx
c0010015:	83 ec 08             	sub    esp,0x8
c0010018:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001001c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010023:	74 18                	je     c001003d <CPU::setupFeatures()+0x29>
c0010025:	83 ec 0c             	sub    esp,0xc
c0010028:	68 1d e6 01 c0       	push   0xc001e61d
c001002d:	e8 ca ab ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0010032:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010035:	e8 42 ff ff ff       	call   c000ff7c <CPU::setupUMIP()>
c001003a:	83 c4 10             	add    esp,0x10
c001003d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010044:	74 18                	je     c001005e <CPU::setupFeatures()+0x4a>
c0010046:	83 ec 0c             	sub    esp,0xc
c0010049:	68 27 e6 01 c0       	push   0xc001e627
c001004e:	e8 a9 ab ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0010053:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010056:	e8 2b ff ff ff       	call   c000ff86 <CPU::setupTSC()>
c001005b:	83 c4 10             	add    esp,0x10
c001005e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010065:	74 18                	je     c001007f <CPU::setupFeatures()+0x6b>
c0010067:	83 ec 0c             	sub    esp,0xc
c001006a:	68 30 e6 01 c0       	push   0xc001e630
c001006f:	e8 88 ab ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0010074:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010077:	e8 14 ff ff ff       	call   c000ff90 <CPU::setupLargePages()>
c001007c:	83 c4 10             	add    esp,0x10
c001007f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010086:	74 18                	je     c00100a0 <CPU::setupFeatures()+0x8c>
c0010088:	83 ec 0c             	sub    esp,0xc
c001008b:	68 39 e6 01 c0       	push   0xc001e639
c0010090:	e8 67 ab ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0010095:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010098:	e8 3b ff ff ff       	call   c000ffd8 <CPU::setupGlobalPages()>
c001009d:	83 c4 10             	add    esp,0x10
c00100a0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00100a7:	74 18                	je     c00100c1 <CPU::setupFeatures()+0xad>
c00100a9:	83 ec 0c             	sub    esp,0xc
c00100ac:	68 4b e6 01 c0       	push   0xc001e64b
c00100b1:	e8 46 ab ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c00100b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100b9:	e8 dc fe ff ff       	call   c000ff9a <CPU::setupPAT()>
c00100be:	83 c4 10             	add    esp,0x10
c00100c1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00100c8:	74 11                	je     c00100db <CPU::setupFeatures()+0xc7>
c00100ca:	c7 44 24 10 54 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e654
c00100d2:	83 c4 08             	add    esp,0x8
c00100d5:	5b                   	pop    ebx
c00100d6:	e9 21 ab ff ff       	jmp    c000abfc <Dbg::kprintf(char const*, ...)>
c00100db:	83 c4 08             	add    esp,0x8
c00100de:	5b                   	pop    ebx
c00100df:	c3                   	ret    

c00100e0 <CPU::open(int, int, void*)>:
c00100e0:	57                   	push   edi
c00100e1:	56                   	push   esi
c00100e2:	53                   	push   ebx
c00100e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100eb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00100f1:	83 ec 0c             	sub    esp,0xc
c00100f4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00100fa:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0010100:	50                   	push   eax
c0010101:	e8 8e 76 ff ff       	call   c0007794 <GDT::setup()>
c0010106:	83 c4 0c             	add    esp,0xc
c0010109:	6a 00                	push   0x0
c001010b:	68 ef be ad de       	push   0xdeadbeef
c0010110:	57                   	push   edi
c0010111:	e8 1a 92 ff ff       	call   c0009330 <TSS::setup(unsigned long, unsigned long)>
c0010116:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010119:	e8 f2 91 ff ff       	call   c0009310 <TSS::flush()>
c001011e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010124:	89 04 24             	mov    DWORD PTR [esp],eax
c0010127:	e8 b2 78 ff ff       	call   c00079de <IDT::setup()>
c001012c:	b8 00 04 00 00       	mov    eax,0x400
c0010131:	0f 23 f8             	mov    db7,eax
c0010134:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001013e:	e8 f7 80 ff ff       	call   c000823a <Phys::allocatePage()>
c0010143:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010149:	89 30                	mov    DWORD PTR [eax],esi
c001014b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010151:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010154:	58                   	pop    eax
c0010155:	5a                   	pop    edx
c0010156:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001015c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010160:	e8 b5 a1 ff ff       	call   c000a31a <VAS::setCPUSpecific(unsigned long)>
c0010165:	c7 04 24 5e e6 01 c0 	mov    DWORD PTR [esp],0xc001e65e
c001016c:	e8 56 7d ff ff       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c0010171:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010174:	e8 33 f7 ff ff       	call   c000f8ac <CPU::detectFeatures()>
c0010179:	c7 04 24 81 e6 01 c0 	mov    DWORD PTR [esp],0xc001e681
c0010180:	e8 42 7d ff ff       	call   c0007ec7 <Krnl::setBootMessage(char const*)>
c0010185:	e8 b8 56 00 00       	call   c0015842 <HalInitialise()>
c001018a:	a1 30 09 02 c0       	mov    eax,ds:0xc0020930
c001018f:	83 e0 10             	and    eax,0x10
c0010192:	83 f8 01             	cmp    eax,0x1
c0010195:	19 c0                	sbb    eax,eax
c0010197:	83 e0 46             	and    eax,0x46
c001019a:	83 c0 1e             	add    eax,0x1e
c001019d:	89 04 24             	mov    DWORD PTR [esp],eax
c00101a0:	e8 f0 d6 ff ff       	call   c000d895 <setupTimer(int)>
c00101a5:	83 c4 10             	add    esp,0x10
c00101a8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00101ae:	f6 05 30 09 02 c0 20 	test   BYTE PTR ds:0xc0020930,0x20
c00101b5:	74 0c                	je     c00101c3 <CPU::open(int, int, void*)+0xe3>
c00101b7:	83 ec 0c             	sub    esp,0xc
c00101ba:	53                   	push   ebx
c00101bb:	e8 54 fe ff ff       	call   c0010014 <CPU::setupFeatures()>
c00101c0:	83 c4 10             	add    esp,0x10
c00101c3:	5b                   	pop    ebx
c00101c4:	31 c0                	xor    eax,eax
c00101c6:	5e                   	pop    esi
c00101c7:	5f                   	pop    edi
c00101c8:	c3                   	ret    
c00101c9:	90                   	nop

c00101ca <EnvVarContainer::getEnv(char const*)>:
c00101ca:	57                   	push   edi
c00101cb:	56                   	push   esi
c00101cc:	53                   	push   ebx
c00101cd:	31 db                	xor    ebx,ebx
c00101cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101d3:	39 1e                	cmp    DWORD PTR [esi],ebx
c00101d5:	7e 2b                	jle    c0010202 <EnvVarContainer::getEnv(char const*)+0x38>
c00101d7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00101de:	50                   	push   eax
c00101df:	50                   	push   eax
c00101e0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101e3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00101e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00101ea:	e8 11 05 ff ff       	call   c0000700 <strcmp>
c00101ef:	83 c4 10             	add    esp,0x10
c00101f2:	85 c0                	test   eax,eax
c00101f4:	75 09                	jne    c00101ff <EnvVarContainer::getEnv(char const*)+0x35>
c00101f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101f9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00101fd:	eb 05                	jmp    c0010204 <EnvVarContainer::getEnv(char const*)+0x3a>
c00101ff:	43                   	inc    ebx
c0010200:	eb d1                	jmp    c00101d3 <EnvVarContainer::getEnv(char const*)+0x9>
c0010202:	31 c0                	xor    eax,eax
c0010204:	5b                   	pop    ebx
c0010205:	5e                   	pop    esi
c0010206:	5f                   	pop    edi
c0010207:	c3                   	ret    

c0010208 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010208:	55                   	push   ebp
c0010209:	57                   	push   edi
c001020a:	56                   	push   esi
c001020b:	53                   	push   ebx
c001020c:	83 ec 28             	sub    esp,0x28
c001020f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010213:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010217:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001021b:	56                   	push   esi
c001021c:	e8 3f 03 ff ff       	call   c0000560 <strlen>
c0010221:	40                   	inc    eax
c0010222:	89 04 24             	mov    DWORD PTR [esp],eax
c0010225:	e8 43 7c ff ff       	call   c0007e6d <malloc>
c001022a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001022d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010231:	e8 2a 03 ff ff       	call   c0000560 <strlen>
c0010236:	40                   	inc    eax
c0010237:	89 04 24             	mov    DWORD PTR [esp],eax
c001023a:	e8 2e 7c ff ff       	call   c0007e6d <malloc>
c001023f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010242:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010246:	e8 15 03 ff ff       	call   c0000560 <strlen>
c001024b:	83 c4 0c             	add    esp,0xc
c001024e:	40                   	inc    eax
c001024f:	50                   	push   eax
c0010250:	6a 00                	push   0x0
c0010252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010256:	e8 95 02 ff ff       	call   c00004f0 <memset>
c001025b:	89 34 24             	mov    DWORD PTR [esp],esi
c001025e:	e8 fd 02 ff ff       	call   c0000560 <strlen>
c0010263:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010267:	8d 48 01             	lea    ecx,[eax+0x1]
c001026a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001026c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001026f:	89 de                	mov    esi,ebx
c0010271:	e8 ea 02 ff ff       	call   c0000560 <strlen>
c0010276:	83 c4 0c             	add    esp,0xc
c0010279:	40                   	inc    eax
c001027a:	50                   	push   eax
c001027b:	6a 00                	push   0x0
c001027d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010281:	e8 6a 02 ff ff       	call   c00004f0 <memset>
c0010286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010289:	e8 d2 02 ff ff       	call   c0000560 <strlen>
c001028e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010292:	8d 48 01             	lea    ecx,[eax+0x1]
c0010295:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010297:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001029a:	40                   	inc    eax
c001029b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001029e:	c1 e0 03             	shl    eax,0x3
c00102a1:	5a                   	pop    edx
c00102a2:	59                   	pop    ecx
c00102a3:	50                   	push   eax
c00102a4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00102a7:	e8 ad 7b ff ff       	call   c0007e59 <realloc>
c00102ac:	8d 74 24 18          	lea    esi,[esp+0x18]
c00102b0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00102b3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00102b6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00102ba:	b9 08 00 00 00       	mov    ecx,0x8
c00102bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102c1:	83 c4 2c             	add    esp,0x2c
c00102c4:	5b                   	pop    ebx
c00102c5:	5e                   	pop    esi
c00102c6:	5f                   	pop    edi
c00102c7:	5d                   	pop    ebp
c00102c8:	c3                   	ret    
c00102c9:	90                   	nop

c00102ca <EnvVarContainer::deleteEnv(char const*)>:
c00102ca:	c3                   	ret    
c00102cb:	90                   	nop

c00102cc <EnvVarContainer::loadFrom(char const*, char const*)>:
c00102cc:	55                   	push   ebp
c00102cd:	57                   	push   edi
c00102ce:	56                   	push   esi
c00102cf:	53                   	push   ebx
c00102d0:	81 ec 38 01 00 00    	sub    esp,0x138
c00102d6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00102dd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00102e4:	68 14 01 00 00       	push   0x114
c00102e9:	e8 7f 7b ff ff       	call   c0007e6d <malloc>
c00102ee:	83 c4 0c             	add    esp,0xc
c00102f1:	89 c3                	mov    ebx,eax
c00102f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00102f6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00102fd:	50                   	push   eax
c00102fe:	e8 6f ae ff ff       	call   c000b172 <File::File(char const*, Process*)>
c0010303:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010306:	e8 95 b1 ff ff       	call   c000b4a0 <File::exists()>
c001030b:	83 c4 10             	add    esp,0x10
c001030e:	84 c0                	test   al,al
c0010310:	75 31                	jne    c0010343 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010312:	50                   	push   eax
c0010313:	50                   	push   eax
c0010314:	6a 12                	push   0x12
c0010316:	53                   	push   ebx
c0010317:	e8 16 af ff ff       	call   c000b232 <File::open(FileOpenMode)>
c001031c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001031e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010321:	89 34 24             	mov    DWORD PTR [esp],esi
c0010324:	e8 37 02 ff ff       	call   c0000560 <strlen>
c0010329:	5a                   	pop    edx
c001032a:	31 d2                	xor    edx,edx
c001032c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010330:	51                   	push   ecx
c0010331:	56                   	push   esi
c0010332:	52                   	push   edx
c0010333:	50                   	push   eax
c0010334:	53                   	push   ebx
c0010335:	ff d7                	call   edi
c0010337:	83 c4 14             	add    esp,0x14
c001033a:	53                   	push   ebx
c001033b:	e8 50 af ff ff       	call   c000b290 <File::close()>
c0010340:	83 c4 10             	add    esp,0x10
c0010343:	56                   	push   esi
c0010344:	31 f6                	xor    esi,esi
c0010346:	68 00 01 00 00       	push   0x100
c001034b:	6a 00                	push   0x0
c001034d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010351:	50                   	push   eax
c0010352:	e8 99 01 ff ff       	call   c00004f0 <memset>
c0010357:	5f                   	pop    edi
c0010358:	58                   	pop    eax
c0010359:	6a 01                	push   0x1
c001035b:	53                   	push   ebx
c001035c:	e8 d1 ae ff ff       	call   c000b232 <File::open(FileOpenMode)>
c0010361:	83 c4 10             	add    esp,0x10
c0010364:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001036c:	83 ec 0c             	sub    esp,0xc
c001036f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010371:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010375:	51                   	push   ecx
c0010376:	8d 54 24 23          	lea    edx,[esp+0x23]
c001037a:	52                   	push   edx
c001037b:	6a 00                	push   0x0
c001037d:	6a 01                	push   0x1
c001037f:	53                   	push   ebx
c0010380:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010383:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0010387:	83 c4 20             	add    esp,0x20
c001038a:	3c 0d                	cmp    al,0xd
c001038c:	0f 84 09 01 00 00    	je     c001049b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010392:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010397:	0f 84 ef 00 00 00    	je     c001048c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001039d:	3c 0a                	cmp    al,0xa
c001039f:	74 13                	je     c00103b4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00103a1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00103a6:	74 0c                	je     c00103b4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00103a8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00103ae:	0f 8e d8 00 00 00    	jle    c001048c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00103b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103b8:	83 ec 0c             	sub    esp,0xc
c00103bb:	8d 78 01             	lea    edi,[eax+0x1]
c00103be:	57                   	push   edi
c00103bf:	e8 a9 7a ff ff       	call   c0007e6d <malloc>
c00103c4:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00103c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103cc:	8d 56 04             	lea    edx,[esi+0x4]
c00103cf:	89 14 24             	mov    DWORD PTR [esp],edx
c00103d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00103d6:	e8 92 7a ff ff       	call   c0007e6d <malloc>
c00103db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00103df:	83 c4 0c             	add    esp,0xc
c00103e2:	57                   	push   edi
c00103e3:	6a 00                	push   0x0
c00103e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00103e9:	e8 02 01 ff ff       	call   c00004f0 <memset>
c00103ee:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103f2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00103f6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00103fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103fc:	83 c4 0c             	add    esp,0xc
c00103ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010403:	52                   	push   edx
c0010404:	6a 00                	push   0x0
c0010406:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001040a:	e8 e1 00 ff ff       	call   c00004f0 <memset>
c001040f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010413:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010417:	89 34 24             	mov    DWORD PTR [esp],esi
c001041a:	e8 41 01 ff ff       	call   c0000560 <strlen>
c001041f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010423:	89 c1                	mov    ecx,eax
c0010425:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010427:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001042a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001042d:	40                   	inc    eax
c001042e:	83 c4 10             	add    esp,0x10
c0010431:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010434:	85 d2                	test   edx,edx
c0010436:	75 0c                	jne    c0010444 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010438:	83 ec 0c             	sub    esp,0xc
c001043b:	6a 08                	push   0x8
c001043d:	e8 2b 7a ff ff       	call   c0007e6d <malloc>
c0010442:	eb 0c                	jmp    c0010450 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0010444:	c1 e0 03             	shl    eax,0x3
c0010447:	51                   	push   ecx
c0010448:	51                   	push   ecx
c0010449:	50                   	push   eax
c001044a:	52                   	push   edx
c001044b:	e8 09 7a ff ff       	call   c0007e59 <realloc>
c0010450:	83 c4 10             	add    esp,0x10
c0010453:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010456:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010459:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001045c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010460:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010464:	b9 08 00 00 00       	mov    ecx,0x8
c0010469:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001046b:	31 f6                	xor    esi,esi
c001046d:	50                   	push   eax
c001046e:	68 00 01 00 00       	push   0x100
c0010473:	6a 00                	push   0x0
c0010475:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010479:	50                   	push   eax
c001047a:	e8 71 00 ff ff       	call   c00004f0 <memset>
c001047f:	83 c4 10             	add    esp,0x10
c0010482:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001048a:	eb 0f                	jmp    c001049b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001048c:	3c 3d                	cmp    al,0x3d
c001048e:	74 07                	je     c0010497 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010490:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010494:	46                   	inc    esi
c0010495:	eb 04                	jmp    c001049b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010497:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001049b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00104a0:	0f 85 c6 fe ff ff    	jne    c001036c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00104a6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00104ac:	5b                   	pop    ebx
c00104ad:	5e                   	pop    esi
c00104ae:	5f                   	pop    edi
c00104af:	5d                   	pop    ebp
c00104b0:	c3                   	ret    
c00104b1:	90                   	nop

c00104b2 <EnvVarContainer::__loadSystem()>:
c00104b2:	83 ec 10             	sub    esp,0x10
c00104b5:	68 a0 f8 01 c0       	push   0xc001f8a0
c00104ba:	68 c4 e6 01 c0       	push   0xc001e6c4
c00104bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104c3:	e8 04 fe ff ff       	call   c00102cc <EnvVarContainer::loadFrom(char const*, char const*)>
c00104c8:	83 c4 1c             	add    esp,0x1c
c00104cb:	c3                   	ret    

c00104cc <EnvVarContainer::__loadUser()>:
c00104cc:	c3                   	ret    
c00104cd:	90                   	nop

c00104ce <EnvVarContainer::EnvVarContainer(Process*)>:
c00104ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00104e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104ee:	90                   	nop
c00104ef:	c3                   	ret    

c00104f0 <EnvVarContainer::~EnvVarContainer()>:
c00104f0:	83 ec 0c             	sub    esp,0xc
c00104f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104fa:	85 c0                	test   eax,eax
c00104fc:	74 1d                	je     c001051b <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010502:	8b 00                	mov    eax,DWORD PTR [eax]
c0010504:	85 c0                	test   eax,eax
c0010506:	74 13                	je     c001051b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001050f:	83 ec 0c             	sub    esp,0xc
c0010512:	50                   	push   eax
c0010513:	e8 65 79 ff ff       	call   c0007e7d <free>
c0010518:	83 c4 10             	add    esp,0x10
c001051b:	90                   	nop
c001051c:	83 c4 0c             	add    esp,0xc
c001051f:	c3                   	ret    

c0010520 <Krnl::getEnv(Process*, char const*)>:
c0010520:	53                   	push   ebx
c0010521:	83 ec 08             	sub    esp,0x8
c0010524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010528:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001052c:	39 05 10 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e10,eax
c0010532:	74 04                	je     c0010538 <Krnl::getEnv(Process*, char const*)+0x18>
c0010534:	85 c0                	test   eax,eax
c0010536:	75 0b                	jne    c0010543 <Krnl::getEnv(Process*, char const*)+0x23>
c0010538:	a1 90 33 02 c0       	mov    eax,ds:0xc0023390
c001053d:	85 c0                	test   eax,eax
c001053f:	75 19                	jne    c001055a <Krnl::getEnv(Process*, char const*)+0x3a>
c0010541:	eb 27                	jmp    c001056a <Krnl::getEnv(Process*, char const*)+0x4a>
c0010543:	52                   	push   edx
c0010544:	52                   	push   edx
c0010545:	53                   	push   ebx
c0010546:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001054c:	e8 79 fc ff ff       	call   c00101ca <EnvVarContainer::getEnv(char const*)>
c0010551:	83 c4 10             	add    esp,0x10
c0010554:	85 c0                	test   eax,eax
c0010556:	75 28                	jne    c0010580 <Krnl::getEnv(Process*, char const*)+0x60>
c0010558:	eb de                	jmp    c0010538 <Krnl::getEnv(Process*, char const*)+0x18>
c001055a:	52                   	push   edx
c001055b:	52                   	push   edx
c001055c:	53                   	push   ebx
c001055d:	50                   	push   eax
c001055e:	e8 67 fc ff ff       	call   c00101ca <EnvVarContainer::getEnv(char const*)>
c0010563:	83 c4 10             	add    esp,0x10
c0010566:	85 c0                	test   eax,eax
c0010568:	75 16                	jne    c0010580 <Krnl::getEnv(Process*, char const*)+0x60>
c001056a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001056e:	a1 94 33 02 c0       	mov    eax,ds:0xc0023394
c0010573:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010577:	83 c4 08             	add    esp,0x8
c001057a:	5b                   	pop    ebx
c001057b:	e9 4a fc ff ff       	jmp    c00101ca <EnvVarContainer::getEnv(char const*)>
c0010580:	83 c4 08             	add    esp,0x8
c0010583:	5b                   	pop    ebx
c0010584:	c3                   	ret    

c0010585 <Krnl::setEnvSystem(char const*, char const*)>:
c0010585:	83 ec 10             	sub    esp,0x10
c0010588:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001058c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010590:	ff 35 94 33 02 c0    	push   DWORD PTR ds:0xc0023394
c0010596:	e8 6d fc ff ff       	call   c0010208 <EnvVarContainer::setEnv(char const*, char const*)>
c001059b:	83 c4 1c             	add    esp,0x1c
c001059e:	c3                   	ret    

c001059f <Krnl::setEnvUser(char const*, char const*)>:
c001059f:	a1 90 33 02 c0       	mov    eax,ds:0xc0023390
c00105a4:	85 c0                	test   eax,eax
c00105a6:	74 15                	je     c00105bd <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00105a8:	83 ec 10             	sub    esp,0x10
c00105ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105b3:	50                   	push   eax
c00105b4:	e8 4f fc ff ff       	call   c0010208 <EnvVarContainer::setEnv(char const*, char const*)>
c00105b9:	83 c4 1c             	add    esp,0x1c
c00105bc:	c3                   	ret    
c00105bd:	c3                   	ret    

c00105be <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00105be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00105c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00105cc:	e9 37 fc ff ff       	jmp    c0010208 <EnvVarContainer::setEnv(char const*, char const*)>

c00105d1 <Krnl::deleteEnvSystem(char const*)>:
c00105d1:	c3                   	ret    

c00105d2 <Krnl::deleteEnvUser(char const*)>:
c00105d2:	c3                   	ret    

c00105d3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00105d3:	c3                   	ret    

c00105d4 <Krnl::newProcessEnv(Process*)>:
c00105d4:	83 ec 28             	sub    esp,0x28
c00105d7:	6a 0c                	push   0xc
c00105d9:	e8 8f 78 ff ff       	call   c0007e6d <malloc>
c00105de:	5a                   	pop    edx
c00105df:	59                   	pop    ecx
c00105e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00105e4:	50                   	push   eax
c00105e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00105e9:	e8 e0 fe ff ff       	call   c00104ce <EnvVarContainer::EnvVarContainer(Process*)>
c00105ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105f2:	83 c4 2c             	add    esp,0x2c
c00105f5:	c3                   	ret    

c00105f6 <Krnl::copyProcessEnv(Process*, Process*)>:
c00105f6:	57                   	push   edi
c00105f7:	56                   	push   esi
c00105f8:	53                   	push   ebx
c00105f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fd:	83 ec 0c             	sub    esp,0xc
c0010600:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010606:	6a 0c                	push   0xc
c0010608:	e8 60 78 ff ff       	call   c0007e6d <malloc>
c001060d:	89 c3                	mov    ebx,eax
c001060f:	58                   	pop    eax
c0010610:	5a                   	pop    edx
c0010611:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010615:	53                   	push   ebx
c0010616:	e8 b3 fe ff ff       	call   c00104ce <EnvVarContainer::EnvVarContainer(Process*)>
c001061b:	8b 07                	mov    eax,DWORD PTR [edi]
c001061d:	89 03                	mov    DWORD PTR [ebx],eax
c001061f:	c1 e0 03             	shl    eax,0x3
c0010622:	89 04 24             	mov    DWORD PTR [esp],eax
c0010625:	e8 43 78 ff ff       	call   c0007e6d <malloc>
c001062a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001062d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001062f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010632:	c1 e1 03             	shl    ecx,0x3
c0010635:	89 c7                	mov    edi,eax
c0010637:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010639:	83 c4 10             	add    esp,0x10
c001063c:	89 d8                	mov    eax,ebx
c001063e:	5b                   	pop    ebx
c001063f:	5e                   	pop    esi
c0010640:	5f                   	pop    edi
c0010641:	c3                   	ret    

c0010642 <Krnl::loadSystemEnv()>:
c0010642:	53                   	push   ebx
c0010643:	83 ec 14             	sub    esp,0x14
c0010646:	6a 0c                	push   0xc
c0010648:	e8 20 78 ff ff       	call   c0007e6d <malloc>
c001064d:	89 c3                	mov    ebx,eax
c001064f:	58                   	pop    eax
c0010650:	5a                   	pop    edx
c0010651:	ff 35 10 3e 02 c0    	push   DWORD PTR ds:0xc0023e10
c0010657:	53                   	push   ebx
c0010658:	e8 71 fe ff ff       	call   c00104ce <EnvVarContainer::EnvVarContainer(Process*)>
c001065d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010660:	89 1d 94 33 02 c0    	mov    DWORD PTR ds:0xc0023394,ebx
c0010666:	e8 47 fe ff ff       	call   c00104b2 <EnvVarContainer::__loadSystem()>
c001066b:	83 c4 18             	add    esp,0x18
c001066e:	5b                   	pop    ebx
c001066f:	c3                   	ret    

c0010670 <Krnl::loadUserEnv()>:
c0010670:	53                   	push   ebx
c0010671:	83 ec 14             	sub    esp,0x14
c0010674:	6a 0c                	push   0xc
c0010676:	e8 f2 77 ff ff       	call   c0007e6d <malloc>
c001067b:	89 c3                	mov    ebx,eax
c001067d:	58                   	pop    eax
c001067e:	5a                   	pop    edx
c001067f:	ff 35 10 3e 02 c0    	push   DWORD PTR ds:0xc0023e10
c0010685:	53                   	push   ebx
c0010686:	e8 43 fe ff ff       	call   c00104ce <EnvVarContainer::EnvVarContainer(Process*)>
c001068b:	89 1d 90 33 02 c0    	mov    DWORD PTR ds:0xc0023390,ebx
c0010691:	83 c4 18             	add    esp,0x18
c0010694:	5b                   	pop    ebx
c0010695:	c3                   	ret    

c0010696 <Krnl::flushEnv()>:
c0010696:	c3                   	ret    

c0010697 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010697:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001069b:	8b 15 90 33 02 c0    	mov    edx,DWORD PTR ds:0xc0023390
c00106a1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106a7:	a1 94 33 02 c0       	mov    eax,ds:0xc0023394
c00106ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00106ae:	03 01                	add    eax,DWORD PTR [ecx]
c00106b0:	85 d2                	test   edx,edx
c00106b2:	74 02                	je     c00106b6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00106b4:	03 02                	add    eax,DWORD PTR [edx]
c00106b6:	c3                   	ret    

c00106b7 <Krnl::getProcessEnvPair(Process*, int)>:
c00106b7:	57                   	push   edi
c00106b8:	56                   	push   esi
c00106b9:	8b 35 90 33 02 c0    	mov    esi,DWORD PTR ds:0xc0023390
c00106bf:	53                   	push   ebx
c00106c0:	85 f6                	test   esi,esi
c00106c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106ca:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106d4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00106d6:	75 16                	jne    c00106ee <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00106d8:	39 c2                	cmp    edx,eax
c00106da:	7c 16                	jl     c00106f2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106dc:	8b 0d 94 33 02 c0    	mov    ecx,DWORD PTR ds:0xc0023394
c00106e2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00106e4:	01 c6                	add    esi,eax
c00106e6:	39 d6                	cmp    esi,edx
c00106e8:	7e 3c                	jle    c0010726 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106ea:	29 c2                	sub    edx,eax
c00106ec:	eb 04                	jmp    c00106f2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106ee:	39 c2                	cmp    edx,eax
c00106f0:	7d 05                	jge    c00106f7 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00106f2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00106f5:	eb 20                	jmp    c0010717 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00106f7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00106f9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00106fc:	39 d1                	cmp    ecx,edx
c00106fe:	7e 04                	jle    c0010704 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010700:	29 c2                	sub    edx,eax
c0010702:	eb 10                	jmp    c0010714 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010704:	8b 35 94 33 02 c0    	mov    esi,DWORD PTR ds:0xc0023394
c001070a:	03 0e                	add    ecx,DWORD PTR [esi]
c001070c:	39 d1                	cmp    ecx,edx
c001070e:	7e 16                	jle    c0010726 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010710:	29 c2                	sub    edx,eax
c0010712:	29 fa                	sub    edx,edi
c0010714:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010717:	8d 14 d0             	lea    edx,[eax+edx*8]
c001071a:	8b 02                	mov    eax,DWORD PTR [edx]
c001071c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001071f:	89 03                	mov    DWORD PTR [ebx],eax
c0010721:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010724:	eb 1d                	jmp    c0010743 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010726:	83 ec 0c             	sub    esp,0xc
c0010729:	68 e6 e6 01 c0       	push   0xc001e6e6
c001072e:	e8 18 00 00 00       	call   c001074b <Krnl::panic(char const*)>
c0010733:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010739:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010740:	83 c4 10             	add    esp,0x10
c0010743:	89 d8                	mov    eax,ebx
c0010745:	5b                   	pop    ebx
c0010746:	5e                   	pop    esi
c0010747:	5f                   	pop    edi
c0010748:	c2 04 00             	ret    0x4

c001074b <Krnl::panic(char const*)>:
c001074b:	53                   	push   ebx
c001074c:	83 ec 10             	sub    esp,0x10
c001074f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010753:	fa                   	cli    
c0010754:	c6 05 a0 33 02 c0 01 	mov    BYTE PTR ds:0xc00233a0,0x1
c001075b:	53                   	push   ebx
c001075c:	68 00 e7 01 c0       	push   0xc001e700
c0010761:	e8 96 a4 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0010766:	83 c4 0c             	add    esp,0xc
c0010769:	a1 64 09 02 c0       	mov    eax,ds:0xc0020964
c001076e:	6a 01                	push   0x1
c0010770:	6a 0f                	push   0xf
c0010772:	50                   	push   eax
c0010773:	e8 78 82 ff ff       	call   c00089f0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010778:	5a                   	pop    edx
c0010779:	8b 0d 64 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020964
c001077f:	51                   	push   ecx
c0010780:	e8 63 84 ff ff       	call   c0008be8 <VgaText::clearScreen()>
c0010785:	58                   	pop    eax
c0010786:	8b 0d 64 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020964
c001078c:	5a                   	pop    edx
c001078d:	68 31 e7 01 c0       	push   0xc001e731
c0010792:	51                   	push   ecx
c0010793:	e8 90 82 ff ff       	call   c0008a28 <VgaText::setTitle(char*)>
c0010798:	83 c4 0c             	add    esp,0xc
c001079b:	a1 64 09 02 c0       	mov    eax,ds:0xc0020964
c00107a0:	6a 01                	push   0x1
c00107a2:	6a 0f                	push   0xf
c00107a4:	50                   	push   eax
c00107a5:	e8 46 82 ff ff       	call   c00089f0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107aa:	58                   	pop    eax
c00107ab:	8b 0d 64 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020964
c00107b1:	5a                   	pop    edx
c00107b2:	68 19 e7 01 c0       	push   0xc001e719
c00107b7:	51                   	push   ecx
c00107b8:	e8 1f 87 ff ff       	call   c0008edc <VgaText::puts(char const*)>
c00107bd:	83 c4 0c             	add    esp,0xc
c00107c0:	a1 64 09 02 c0       	mov    eax,ds:0xc0020964
c00107c5:	6a 0f                	push   0xf
c00107c7:	6a 01                	push   0x1
c00107c9:	50                   	push   eax
c00107ca:	e8 21 82 ff ff       	call   c00089f0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107cf:	58                   	pop    eax
c00107d0:	8b 0d 64 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020964
c00107d6:	5a                   	pop    edx
c00107d7:	68 22 e7 01 c0       	push   0xc001e722
c00107dc:	51                   	push   ecx
c00107dd:	e8 fa 86 ff ff       	call   c0008edc <VgaText::puts(char const*)>
c00107e2:	83 c4 0c             	add    esp,0xc
c00107e5:	a1 64 09 02 c0       	mov    eax,ds:0xc0020964
c00107ea:	6a 01                	push   0x1
c00107ec:	6a 0f                	push   0xf
c00107ee:	50                   	push   eax
c00107ef:	e8 fc 81 ff ff       	call   c00089f0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107f4:	58                   	pop    eax
c00107f5:	8b 0d 64 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020964
c00107fb:	5a                   	pop    edx
c00107fc:	68 2f e7 01 c0       	push   0xc001e72f
c0010801:	51                   	push   ecx
c0010802:	e8 d5 86 ff ff       	call   c0008edc <VgaText::puts(char const*)>
c0010807:	58                   	pop    eax
c0010808:	8b 0d 64 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020964
c001080e:	5a                   	pop    edx
c001080f:	68 40 e7 01 c0       	push   0xc001e740
c0010814:	51                   	push   ecx
c0010815:	e8 c2 86 ff ff       	call   c0008edc <VgaText::puts(char const*)>
c001081a:	58                   	pop    eax
c001081b:	8b 0d 64 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020964
c0010821:	5a                   	pop    edx
c0010822:	68 32 e7 01 c0       	push   0xc001e732
c0010827:	51                   	push   ecx
c0010828:	e8 af 86 ff ff       	call   c0008edc <VgaText::puts(char const*)>
c001082d:	58                   	pop    eax
c001082e:	8b 0d 64 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020964
c0010834:	5a                   	pop    edx
c0010835:	53                   	push   ebx
c0010836:	51                   	push   ecx
c0010837:	e8 a0 86 ff ff       	call   c0008edc <VgaText::puts(char const*)>
c001083c:	5b                   	pop    ebx
c001083d:	58                   	pop    eax
c001083e:	a1 64 09 02 c0       	mov    eax,ds:0xc0020964
c0010843:	68 2f e7 01 c0       	push   0xc001e72f
c0010848:	50                   	push   eax
c0010849:	e8 8e 86 ff ff       	call   c0008edc <VgaText::puts(char const*)>
c001084e:	83 c4 10             	add    esp,0x10
c0010851:	eb fe                	jmp    c0010851 <Krnl::panic(char const*)+0x106>

c0010853 <Krnl::powerThread(void*)>:
c0010853:	83 ec 0c             	sub    esp,0xc
c0010856:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c001085b:	48                   	dec    eax
c001085c:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0010861:	75 01                	jne    c0010864 <Krnl::powerThread(void*)+0x11>
c0010863:	fb                   	sti    
c0010864:	83 ec 0c             	sub    esp,0xc
c0010867:	c6 05 c0 33 02 c0 00 	mov    BYTE PTR ds:0xc00233c0,0x0
c001086e:	6a 0a                	push   0xa
c0010870:	e8 3b 35 00 00       	call   c0013db0 <sleep(unsigned int)>
c0010875:	83 05 04 34 02 c0 0a 	add    DWORD PTR ds:0xc0023404,0xa
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	eb e3                	jmp    c0010864 <Krnl::powerThread(void*)+0x11>

c0010881 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010881:	57                   	push   edi
c0010882:	b9 09 00 00 00       	mov    ecx,0x9
c0010887:	56                   	push   esi
c0010888:	bf e0 33 02 c0       	mov    edi,0xc00233e0
c001088d:	fc                   	cld    
c001088e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010892:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010894:	5e                   	pop    esi
c0010895:	5f                   	pop    edi
c0010896:	c3                   	ret    

c0010897 <Krnl::userIOReceived()>:
c0010897:	c7 05 04 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023404,0x0
c00108a1:	c3                   	ret    

c00108a2 <Krnl::handlePowerButton()>:
c00108a2:	83 ec 0c             	sub    esp,0xc
c00108a5:	a1 e0 33 02 c0       	mov    eax,ds:0xc00233e0
c00108aa:	83 f8 02             	cmp    eax,0x2
c00108ad:	75 10                	jne    c00108bf <Krnl::handlePowerButton()+0x1d>
c00108af:	83 ec 0c             	sub    esp,0xc
c00108b2:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c00108b8:	e8 51 6c ff ff       	call   c000750e <Computer::shutdown()>
c00108bd:	eb 11                	jmp    c00108d0 <Krnl::handlePowerButton()+0x2e>
c00108bf:	48                   	dec    eax
c00108c0:	75 11                	jne    c00108d3 <Krnl::handlePowerButton()+0x31>
c00108c2:	83 ec 0c             	sub    esp,0xc
c00108c5:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c00108cb:	e8 6e 6c ff ff       	call   c000753e <Computer::sleep()>
c00108d0:	83 c4 10             	add    esp,0x10
c00108d3:	83 c4 0c             	add    esp,0xc
c00108d6:	c3                   	ret    

c00108d7 <Krnl::handleSleepButton()>:
c00108d7:	83 ec 0c             	sub    esp,0xc
c00108da:	a1 e4 33 02 c0       	mov    eax,ds:0xc00233e4
c00108df:	83 f8 02             	cmp    eax,0x2
c00108e2:	75 10                	jne    c00108f4 <Krnl::handleSleepButton()+0x1d>
c00108e4:	83 ec 0c             	sub    esp,0xc
c00108e7:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c00108ed:	e8 1c 6c ff ff       	call   c000750e <Computer::shutdown()>
c00108f2:	eb 11                	jmp    c0010905 <Krnl::handleSleepButton()+0x2e>
c00108f4:	48                   	dec    eax
c00108f5:	75 11                	jne    c0010908 <Krnl::handleSleepButton()+0x31>
c00108f7:	83 ec 0c             	sub    esp,0xc
c00108fa:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0010900:	e8 39 6c ff ff       	call   c000753e <Computer::sleep()>
c0010905:	83 c4 10             	add    esp,0x10
c0010908:	83 c4 0c             	add    esp,0xc
c001090b:	c3                   	ret    

c001090c <Krnl::setupPowerManager()>:
c001090c:	83 ec 0c             	sub    esp,0xc
c001090f:	c7 05 04 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023404,0x0
c0010919:	68 f0 00 00 00       	push   0xf0
c001091e:	c6 05 c0 33 02 c0 00 	mov    BYTE PTR ds:0xc00233c0,0x0
c0010925:	6a 00                	push   0x0
c0010927:	68 53 08 01 c0       	push   0xc0010853
c001092c:	ff 35 10 3e 02 c0    	push   DWORD PTR ds:0xc0023e10
c0010932:	e8 49 2f 00 00       	call   c0013880 <Process::createThread(void (*)(void*), void*, int)>
c0010937:	c7 05 e0 33 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00233e0,0x2
c0010941:	c7 05 e4 33 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00233e4,0x1
c001094b:	c7 05 e8 33 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00233e8,0x3
c0010955:	c7 05 ec 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00233ec,0x0
c001095f:	c7 05 f8 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00233f8,0x0
c0010969:	c7 05 f0 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00233f0,0x0
c0010973:	c7 05 fc 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00233fc,0x0
c001097d:	c7 05 f4 33 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00233f4,0x3c
c0010987:	c7 05 00 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023400,0x3c
c0010991:	83 c4 1c             	add    esp,0x1c
c0010994:	c3                   	ret    

c0010995 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0010995:	55                   	push   ebp
c0010996:	57                   	push   edi
c0010997:	56                   	push   esi
c0010998:	53                   	push   ebx
c0010999:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001099f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00109a6:	8a 1e                	mov    bl,BYTE PTR [esi]
c00109a8:	8d 6e 01             	lea    ebp,[esi+0x1]
c00109ab:	80 fb 40             	cmp    bl,0x40
c00109ae:	75 1b                	jne    c00109cb <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00109b0:	8a 16                	mov    dl,BYTE PTR [esi]
c00109b2:	84 d2                	test   dl,dl
c00109b4:	0f 84 f1 00 00 00    	je     c0010aab <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109ba:	8d 46 01             	lea    eax,[esi+0x1]
c00109bd:	80 fa 3a             	cmp    dl,0x3a
c00109c0:	74 04                	je     c00109c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00109c2:	89 c6                	mov    esi,eax
c00109c4:	eb ea                	jmp    c00109b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00109c6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00109c9:	89 c6                	mov    esi,eax
c00109cb:	50                   	push   eax
c00109cc:	6a 40                	push   0x40
c00109ce:	6a 00                	push   0x0
c00109d0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00109d4:	50                   	push   eax
c00109d5:	e8 16 fb fe ff       	call   c00004f0 <memset>
c00109da:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00109e1:	31 c0                	xor    eax,eax
c00109e3:	83 c4 10             	add    esp,0x10
c00109e6:	8a 0f                	mov    cl,BYTE PTR [edi]
c00109e8:	84 c9                	test   cl,cl
c00109ea:	0f 84 bb 00 00 00    	je     c0010aab <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109f0:	3d c7 00 00 00       	cmp    eax,0xc7
c00109f5:	0f 8f b0 00 00 00    	jg     c0010aab <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109fb:	80 f9 0a             	cmp    cl,0xa
c00109fe:	0f 85 98 00 00 00    	jne    c0010a9c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0010a04:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0010a09:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0010a0d:	a8 df                	test   al,0xdf
c0010a0f:	0f 94 c1             	sete   cl
c0010a12:	3c 23                	cmp    al,0x23
c0010a14:	0f 94 c2             	sete   dl
c0010a17:	08 d1                	or     cl,dl
c0010a19:	75 4a                	jne    c0010a65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a1b:	8d 50 f7             	lea    edx,[eax-0x9]
c0010a1e:	80 fa 01             	cmp    dl,0x1
c0010a21:	76 42                	jbe    c0010a65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a23:	3c 5b                	cmp    al,0x5b
c0010a25:	75 42                	jne    c0010a69 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0010a27:	80 fb 40             	cmp    bl,0x40
c0010a2a:	75 39                	jne    c0010a65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a2c:	83 ec 0c             	sub    esp,0xc
c0010a2f:	8d 54 24 65          	lea    edx,[esp+0x65]
c0010a33:	52                   	push   edx
c0010a34:	e8 27 fb fe ff       	call   c0000560 <strlen>
c0010a39:	83 c4 10             	add    esp,0x10
c0010a3c:	83 f8 3f             	cmp    eax,0x3f
c0010a3f:	77 6a                	ja     c0010aab <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a41:	50                   	push   eax
c0010a42:	50                   	push   eax
c0010a43:	8d 54 24 61          	lea    edx,[esp+0x61]
c0010a47:	52                   	push   edx
c0010a48:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010a4c:	52                   	push   edx
c0010a4d:	e8 ce fb fe ff       	call   c0000620 <strcpy>
c0010a52:	58                   	pop    eax
c0010a53:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010a57:	52                   	push   edx
c0010a58:	e8 03 fb fe ff       	call   c0000560 <strlen>
c0010a5d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0010a62:	83 c4 10             	add    esp,0x10
c0010a65:	31 d2                	xor    edx,edx
c0010a67:	eb 3a                	jmp    c0010aa3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0010a69:	80 fb 40             	cmp    bl,0x40
c0010a6c:	74 06                	je     c0010a74 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0010a6e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0010a72:	eb 20                	jmp    c0010a94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0010a74:	50                   	push   eax
c0010a75:	50                   	push   eax
c0010a76:	55                   	push   ebp
c0010a77:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010a7b:	50                   	push   eax
c0010a7c:	e8 7f fc fe ff       	call   c0000700 <strcmp>
c0010a81:	83 c4 10             	add    esp,0x10
c0010a84:	85 c0                	test   eax,eax
c0010a86:	75 dd                	jne    c0010a65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a88:	eb e4                	jmp    c0010a6e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0010a8a:	8d 50 01             	lea    edx,[eax+0x1]
c0010a8d:	80 f9 3d             	cmp    cl,0x3d
c0010a90:	74 1d                	je     c0010aaf <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0010a92:	89 d0                	mov    eax,edx
c0010a94:	8a 08                	mov    cl,BYTE PTR [eax]
c0010a96:	84 c9                	test   cl,cl
c0010a98:	75 f0                	jne    c0010a8a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0010a9a:	eb 0f                	jmp    c0010aab <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a9c:	8d 50 01             	lea    edx,[eax+0x1]
c0010a9f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0010aa3:	47                   	inc    edi
c0010aa4:	89 d0                	mov    eax,edx
c0010aa6:	e9 3b ff ff ff       	jmp    c00109e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0010aab:	31 c0                	xor    eax,eax
c0010aad:	eb 33                	jmp    c0010ae2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0010aaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010ab3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010ab6:	50                   	push   eax
c0010ab7:	50                   	push   eax
c0010ab8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0010abc:	50                   	push   eax
c0010abd:	56                   	push   esi
c0010abe:	e8 3d fc fe ff       	call   c0000700 <strcmp>
c0010ac3:	83 c4 10             	add    esp,0x10
c0010ac6:	85 c0                	test   eax,eax
c0010ac8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010acc:	75 97                	jne    c0010a65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010ace:	51                   	push   ecx
c0010acf:	51                   	push   ecx
c0010ad0:	52                   	push   edx
c0010ad1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0010ad8:	e8 43 fb fe ff       	call   c0000620 <strcpy>
c0010add:	83 c4 10             	add    esp,0x10
c0010ae0:	b0 01                	mov    al,0x1
c0010ae2:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010ae8:	5b                   	pop    ebx
c0010ae9:	5e                   	pop    esi
c0010aea:	5f                   	pop    edi
c0010aeb:	5d                   	pop    ebp
c0010aec:	c3                   	ret    

c0010aed <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0010aed:	57                   	push   edi
c0010aee:	56                   	push   esi
c0010aef:	53                   	push   ebx
c0010af0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010af6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0010afd:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0010b04:	53                   	push   ebx
c0010b05:	e8 56 fa fe ff       	call   c0000560 <strlen>
c0010b0a:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b0d:	89 c7                	mov    edi,eax
c0010b0f:	e8 4c fa fe ff       	call   c0000560 <strlen>
c0010b14:	83 c4 10             	add    esp,0x10
c0010b17:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0010b1b:	3d ff 00 00 00       	cmp    eax,0xff
c0010b20:	0f 87 d3 00 00 00    	ja     c0010bf9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b26:	57                   	push   edi
c0010b27:	57                   	push   edi
c0010b28:	56                   	push   esi
c0010b29:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0010b2d:	56                   	push   esi
c0010b2e:	e8 ed fa fe ff       	call   c0000620 <strcpy>
c0010b33:	58                   	pop    eax
c0010b34:	5a                   	pop    edx
c0010b35:	68 5f ea 01 c0       	push   0xc001ea5f
c0010b3a:	56                   	push   esi
c0010b3b:	e8 a0 fc fe ff       	call   c00007e0 <strcat>
c0010b40:	59                   	pop    ecx
c0010b41:	5f                   	pop    edi
c0010b42:	53                   	push   ebx
c0010b43:	56                   	push   esi
c0010b44:	e8 97 fc fe ff       	call   c00007e0 <strcat>
c0010b49:	58                   	pop    eax
c0010b4a:	5a                   	pop    edx
c0010b4b:	68 7a e7 01 c0       	push   0xc001e77a
c0010b50:	56                   	push   esi
c0010b51:	e8 8a fc fe ff       	call   c00007e0 <strcat>
c0010b56:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010b5d:	e8 0b 73 ff ff       	call   c0007e6d <malloc>
c0010b62:	83 c4 0c             	add    esp,0xc
c0010b65:	89 c3                	mov    ebx,eax
c0010b67:	ff 35 10 3e 02 c0    	push   DWORD PTR ds:0xc0023e10
c0010b6d:	56                   	push   esi
c0010b6e:	50                   	push   eax
c0010b6f:	e8 fe a5 ff ff       	call   c000b172 <File::File(char const*, Process*)>
c0010b74:	83 c4 10             	add    esp,0x10
c0010b77:	85 db                	test   ebx,ebx
c0010b79:	74 7e                	je     c0010bf9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b7b:	51                   	push   ecx
c0010b7c:	51                   	push   ecx
c0010b7d:	6a 01                	push   0x1
c0010b7f:	53                   	push   ebx
c0010b80:	e8 ad a6 ff ff       	call   c000b232 <File::open(FileOpenMode)>
c0010b85:	83 c4 10             	add    esp,0x10
c0010b88:	85 c0                	test   eax,eax
c0010b8a:	74 08                	je     c0010b94 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b91:	53                   	push   ebx
c0010b92:	eb 5f                	jmp    c0010bf3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0010b94:	52                   	push   edx
c0010b95:	8d 44 24 17          	lea    eax,[esp+0x17]
c0010b99:	50                   	push   eax
c0010b9a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0010b9e:	50                   	push   eax
c0010b9f:	53                   	push   ebx
c0010ba0:	e8 39 a9 ff ff       	call   c000b4de <File::stat(unsigned long long*, bool*)>
c0010ba5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010ba9:	83 c4 10             	add    esp,0x10
c0010bac:	89 c1                	mov    ecx,eax
c0010bae:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0010bb2:	74 31                	je     c0010be5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010bb4:	83 ec 0c             	sub    esp,0xc
c0010bb7:	50                   	push   eax
c0010bb8:	e8 b0 72 ff ff       	call   c0007e6d <malloc>
c0010bbd:	89 c6                	mov    esi,eax
c0010bbf:	58                   	pop    eax
c0010bc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bc2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010bc6:	52                   	push   edx
c0010bc7:	56                   	push   esi
c0010bc8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010bcc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010bd0:	53                   	push   ebx
c0010bd1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010bd4:	83 c4 20             	add    esp,0x20
c0010bd7:	85 c0                	test   eax,eax
c0010bd9:	75 0a                	jne    c0010be5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010bdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bdf:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010be3:	74 18                	je     c0010bfd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0010be5:	83 ec 0c             	sub    esp,0xc
c0010be8:	53                   	push   ebx
c0010be9:	e8 a2 a6 ff ff       	call   c000b290 <File::close()>
c0010bee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bf3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010bf6:	83 c4 10             	add    esp,0x10
c0010bf9:	31 c0                	xor    eax,eax
c0010bfb:	eb 3b                	jmp    c0010c38 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0010bfd:	83 ec 0c             	sub    esp,0xc
c0010c00:	53                   	push   ebx
c0010c01:	e8 8a a6 ff ff       	call   c000b290 <File::close()>
c0010c06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c0e:	83 c4 0c             	add    esp,0xc
c0010c11:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010c18:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010c1f:	56                   	push   esi
c0010c20:	e8 70 fd ff ff       	call   c0010995 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0010c25:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c28:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0010c2c:	e8 4c 72 ff ff       	call   c0007e7d <free>
c0010c31:	83 c4 10             	add    esp,0x10
c0010c34:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010c38:	81 c4 20 01 00 00    	add    esp,0x120
c0010c3e:	5b                   	pop    ebx
c0010c3f:	5e                   	pop    esi
c0010c40:	5f                   	pop    edi
c0010c41:	c3                   	ret    

c0010c42 <Reg::getLine(char*, char*, char*)>:
c0010c42:	57                   	push   edi
c0010c43:	56                   	push   esi
c0010c44:	53                   	push   ebx
c0010c45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010c4d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c51:	57                   	push   edi
c0010c52:	56                   	push   esi
c0010c53:	53                   	push   ebx
c0010c54:	68 7f e7 01 c0       	push   0xc001e77f
c0010c59:	e8 8f fe ff ff       	call   c0010aed <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c5e:	83 c4 10             	add    esp,0x10
c0010c61:	84 c0                	test   al,al
c0010c63:	75 10                	jne    c0010c75 <Reg::getLine(char*, char*, char*)+0x33>
c0010c65:	57                   	push   edi
c0010c66:	56                   	push   esi
c0010c67:	53                   	push   ebx
c0010c68:	68 a4 e7 01 c0       	push   0xc001e7a4
c0010c6d:	e8 7b fe ff ff       	call   c0010aed <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c72:	83 c4 10             	add    esp,0x10
c0010c75:	5b                   	pop    ebx
c0010c76:	5e                   	pop    esi
c0010c77:	5f                   	pop    edi
c0010c78:	c3                   	ret    

c0010c79 <Reg::readInt(char*, char*, int*)>:
c0010c79:	55                   	push   ebp
c0010c7a:	57                   	push   edi
c0010c7b:	56                   	push   esi
c0010c7c:	53                   	push   ebx
c0010c7d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0010c83:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0010c87:	57                   	push   edi
c0010c88:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c8f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c96:	e8 a7 ff ff ff       	call   c0010c42 <Reg::getLine(char*, char*, char*)>
c0010c9b:	83 c4 10             	add    esp,0x10
c0010c9e:	84 c0                	test   al,al
c0010ca0:	0f 84 b3 00 00 00    	je     c0010d59 <Reg::readInt(char*, char*, int*)+0xe0>
c0010ca6:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0010caa:	80 fa 2b             	cmp    dl,0x2b
c0010cad:	74 0c                	je     c0010cbb <Reg::readInt(char*, char*, int*)+0x42>
c0010caf:	80 fa 2d             	cmp    dl,0x2d
c0010cb2:	75 0e                	jne    c0010cc2 <Reg::readInt(char*, char*, int*)+0x49>
c0010cb4:	ba 01 00 00 00       	mov    edx,0x1
c0010cb9:	eb 0b                	jmp    c0010cc6 <Reg::readInt(char*, char*, int*)+0x4d>
c0010cbb:	ba 01 00 00 00       	mov    edx,0x1
c0010cc0:	eb 02                	jmp    c0010cc4 <Reg::readInt(char*, char*, int*)+0x4b>
c0010cc2:	31 d2                	xor    edx,edx
c0010cc4:	31 c0                	xor    eax,eax
c0010cc6:	be 0a 00 00 00       	mov    esi,0xa
c0010ccb:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0010cd0:	75 20                	jne    c0010cf2 <Reg::readInt(char*, char*, int*)+0x79>
c0010cd2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0010cd6:	80 f9 78             	cmp    cl,0x78
c0010cd9:	75 0a                	jne    c0010ce5 <Reg::readInt(char*, char*, int*)+0x6c>
c0010cdb:	83 c2 02             	add    edx,0x2
c0010cde:	be 10 00 00 00       	mov    esi,0x10
c0010ce3:	eb 0d                	jmp    c0010cf2 <Reg::readInt(char*, char*, int*)+0x79>
c0010ce5:	80 f9 62             	cmp    cl,0x62
c0010ce8:	75 08                	jne    c0010cf2 <Reg::readInt(char*, char*, int*)+0x79>
c0010cea:	83 c2 02             	add    edx,0x2
c0010ced:	be 02 00 00 00       	mov    esi,0x2
c0010cf2:	01 d7                	add    edi,edx
c0010cf4:	31 d2                	xor    edx,edx
c0010cf6:	8a 1f                	mov    bl,BYTE PTR [edi]
c0010cf8:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0010cfc:	80 fb 0d             	cmp    bl,0xd
c0010cff:	0f 94 c3             	sete   bl
c0010d02:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010d07:	0f 94 c1             	sete   cl
c0010d0a:	08 cb                	or     bl,cl
c0010d0c:	75 3a                	jne    c0010d48 <Reg::readInt(char*, char*, int*)+0xcf>
c0010d0e:	0f af d6             	imul   edx,esi
c0010d11:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0010d16:	83 fe 10             	cmp    esi,0x10
c0010d19:	75 26                	jne    c0010d41 <Reg::readInt(char*, char*, int*)+0xc8>
c0010d1b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010d1f:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0010d22:	89 e9                	mov    ecx,ebp
c0010d24:	80 f9 05             	cmp    cl,0x5
c0010d27:	77 06                	ja     c0010d2f <Reg::readInt(char*, char*, int*)+0xb6>
c0010d29:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0010d2d:	eb 16                	jmp    c0010d45 <Reg::readInt(char*, char*, int*)+0xcc>
c0010d2f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010d33:	83 e9 61             	sub    ecx,0x61
c0010d36:	80 f9 05             	cmp    cl,0x5
c0010d39:	77 06                	ja     c0010d41 <Reg::readInt(char*, char*, int*)+0xc8>
c0010d3b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0010d3f:	eb 04                	jmp    c0010d45 <Reg::readInt(char*, char*, int*)+0xcc>
c0010d41:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0010d45:	47                   	inc    edi
c0010d46:	eb ae                	jmp    c0010cf6 <Reg::readInt(char*, char*, int*)+0x7d>
c0010d48:	84 c0                	test   al,al
c0010d4a:	74 02                	je     c0010d4e <Reg::readInt(char*, char*, int*)+0xd5>
c0010d4c:	f7 da                	neg    edx
c0010d4e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0010d55:	89 10                	mov    DWORD PTR [eax],edx
c0010d57:	88 d8                	mov    al,bl
c0010d59:	81 c4 ec 00 00 00    	add    esp,0xec
c0010d5f:	5b                   	pop    ebx
c0010d60:	5e                   	pop    esi
c0010d61:	5f                   	pop    edi
c0010d62:	5d                   	pop    ebp
c0010d63:	c3                   	ret    

c0010d64 <Reg::readString(char*, char*, char*, int)>:
c0010d64:	57                   	push   edi
c0010d65:	56                   	push   esi
c0010d66:	53                   	push   ebx
c0010d67:	81 ec d4 00 00 00    	sub    esp,0xd4
c0010d6d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0010d74:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0010d78:	57                   	push   edi
c0010d79:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d80:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d87:	e8 b6 fe ff ff       	call   c0010c42 <Reg::getLine(char*, char*, char*)>
c0010d8c:	83 c4 10             	add    esp,0x10
c0010d8f:	89 c6                	mov    esi,eax
c0010d91:	84 c0                	test   al,al
c0010d93:	74 44                	je     c0010dd9 <Reg::readString(char*, char*, char*, int)+0x75>
c0010d95:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0010d9c:	31 c0                	xor    eax,eax
c0010d9e:	4a                   	dec    edx
c0010d9f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0010da2:	84 c9                	test   cl,cl
c0010da4:	74 0f                	je     c0010db5 <Reg::readString(char*, char*, char*, int)+0x51>
c0010da6:	39 c2                	cmp    edx,eax
c0010da8:	7e 0b                	jle    c0010db5 <Reg::readString(char*, char*, char*, int)+0x51>
c0010daa:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0010dad:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0010db2:	40                   	inc    eax
c0010db3:	eb ea                	jmp    c0010d9f <Reg::readString(char*, char*, char*, int)+0x3b>
c0010db5:	83 ec 0c             	sub    esp,0xc
c0010db8:	53                   	push   ebx
c0010db9:	e8 a2 f7 fe ff       	call   c0000560 <strlen>
c0010dbe:	83 c4 10             	add    esp,0x10
c0010dc1:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0010dc6:	75 11                	jne    c0010dd9 <Reg::readString(char*, char*, char*, int)+0x75>
c0010dc8:	83 ec 0c             	sub    esp,0xc
c0010dcb:	53                   	push   ebx
c0010dcc:	e8 8f f7 fe ff       	call   c0000560 <strlen>
c0010dd1:	83 c4 10             	add    esp,0x10
c0010dd4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0010dd9:	81 c4 d0 00 00 00    	add    esp,0xd0
c0010ddf:	89 f0                	mov    eax,esi
c0010de1:	5b                   	pop    ebx
c0010de2:	5e                   	pop    esi
c0010de3:	5f                   	pop    edi
c0010de4:	c3                   	ret    

c0010de5 <Reg::readBool(char*, char*, bool*)>:
c0010de5:	83 ec 20             	sub    esp,0x20
c0010de8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010dec:	50                   	push   eax
c0010ded:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010df1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010df5:	e8 7f fe ff ff       	call   c0010c79 <Reg::readInt(char*, char*, int*)>
c0010dfa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010dff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010e03:	0f 95 02             	setne  BYTE PTR [edx]
c0010e06:	83 c4 2c             	add    esp,0x2c
c0010e09:	c3                   	ret    

c0010e0a <Reg::readBoolWithDefault(char*, char*, bool)>:
c0010e0a:	53                   	push   ebx
c0010e0b:	83 ec 1c             	sub    esp,0x1c
c0010e0e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0010e12:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010e16:	50                   	push   eax
c0010e17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e1f:	e8 c1 ff ff ff       	call   c0010de5 <Reg::readBool(char*, char*, bool*)>
c0010e24:	83 c4 10             	add    esp,0x10
c0010e27:	84 c0                	test   al,al
c0010e29:	74 04                	je     c0010e2f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0010e2b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0010e2f:	88 d8                	mov    al,bl
c0010e31:	83 c4 18             	add    esp,0x18
c0010e34:	5b                   	pop    ebx
c0010e35:	c3                   	ret    

c0010e36 <Reg::readIntWithDefault(char*, char*, int)>:
c0010e36:	53                   	push   ebx
c0010e37:	83 ec 1c             	sub    esp,0x1c
c0010e3a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010e3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010e42:	50                   	push   eax
c0010e43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e4b:	e8 29 fe ff ff       	call   c0010c79 <Reg::readInt(char*, char*, int*)>
c0010e50:	83 c4 10             	add    esp,0x10
c0010e53:	84 c0                	test   al,al
c0010e55:	74 04                	je     c0010e5b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0010e57:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010e5b:	89 d8                	mov    eax,ebx
c0010e5d:	83 c4 18             	add    esp,0x18
c0010e60:	5b                   	pop    ebx
c0010e61:	c3                   	ret    

c0010e62 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0010e62:	57                   	push   edi
c0010e63:	56                   	push   esi
c0010e64:	56                   	push   esi
c0010e65:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010e69:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010e6d:	56                   	push   esi
c0010e6e:	57                   	push   edi
c0010e6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e77:	e8 e8 fe ff ff       	call   c0010d64 <Reg::readString(char*, char*, char*, int)>
c0010e7c:	83 c4 10             	add    esp,0x10
c0010e7f:	84 c0                	test   al,al
c0010e81:	75 1a                	jne    c0010e9d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0010e83:	51                   	push   ecx
c0010e84:	56                   	push   esi
c0010e85:	6a 00                	push   0x0
c0010e87:	57                   	push   edi
c0010e88:	e8 63 f6 fe ff       	call   c00004f0 <memset>
c0010e8d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0010e90:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e96:	83 c4 10             	add    esp,0x10
c0010e99:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010e9d:	89 f8                	mov    eax,edi
c0010e9f:	5a                   	pop    edx
c0010ea0:	5e                   	pop    esi
c0010ea1:	5f                   	pop    edi
c0010ea2:	c3                   	ret    

c0010ea3 <Sys::eject(regs*)>:
c0010ea3:	83 ec 0c             	sub    esp,0xc
c0010ea6:	83 ca ff             	or     edx,0xffffffff
c0010ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ead:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010eb0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010eb5:	83 e9 41             	sub    ecx,0x41
c0010eb8:	83 f9 19             	cmp    ecx,0x19
c0010ebb:	77 18                	ja     c0010ed5 <Sys::eject(regs*)+0x32>
c0010ebd:	8b 0c 8d 80 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd180]
c0010ec4:	85 c9                	test   ecx,ecx
c0010ec6:	74 0d                	je     c0010ed5 <Sys::eject(regs*)+0x32>
c0010ec8:	83 ec 0c             	sub    esp,0xc
c0010ecb:	51                   	push   ecx
c0010ecc:	e8 a9 c3 ff ff       	call   c000d27a <LogicalDisk::eject()>
c0010ed1:	83 c4 10             	add    esp,0x10
c0010ed4:	99                   	cdq    
c0010ed5:	83 c4 0c             	add    esp,0xc
c0010ed8:	c3                   	ret    

c0010ed9 <Sys::exit(regs*)>:
c0010ed9:	83 ec 18             	sub    esp,0x18
c0010edc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ee0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010ee3:	e8 dc 34 00 00       	call   c00143c4 <terminateTask(int)>
c0010ee8:	83 c8 ff             	or     eax,0xffffffff
c0010eeb:	83 c4 1c             	add    esp,0x1c
c0010eee:	89 c2                	mov    edx,eax
c0010ef0:	c3                   	ret    

c0010ef1 <Sys::getCwd(regs*)>:
c0010ef1:	83 ec 10             	sub    esp,0x10
c0010ef4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ef8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010efb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010efe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f03:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010f06:	e8 69 a0 ff ff       	call   c000af74 <Fs::getcwd(Process*, char*, int)>
c0010f0b:	83 c4 1c             	add    esp,0x1c
c0010f0e:	99                   	cdq    
c0010f0f:	c3                   	ret    

c0010f10 <Sys::getPID(regs*)>:
c0010f10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f15:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f18:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f1a:	99                   	cdq    
c0010f1b:	c3                   	ret    

c0010f1c <Sys::getRAMData(regs*)>:
c0010f1c:	8b 0d 48 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020948
c0010f22:	69 05 44 09 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020944,0xc8
c0010f2c:	99                   	cdq    
c0010f2d:	f7 f9                	idiv   ecx
c0010f2f:	c1 e0 18             	shl    eax,0x18
c0010f32:	09 c8                	or     eax,ecx
c0010f34:	99                   	cdq    
c0010f35:	c3                   	ret    

c0010f36 <Sys::getVGAPtr(regs*)>:
c0010f36:	55                   	push   ebp
c0010f37:	57                   	push   edi
c0010f38:	56                   	push   esi
c0010f39:	53                   	push   ebx
c0010f3a:	83 ec 18             	sub    esp,0x18
c0010f3d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f41:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f44:	e8 7b 2f 00 00       	call   c0013ec4 <Thr::processFromPID(int)>
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	89 c1                	mov    ecx,eax
c0010f4e:	b8 01 00 00 00       	mov    eax,0x1
c0010f53:	85 c9                	test   ecx,ecx
c0010f55:	74 57                	je     c0010fae <Sys::getVGAPtr(regs*)+0x78>
c0010f57:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0010f5d:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0010f61:	74 0c                	je     c0010f6f <Sys::getVGAPtr(regs*)+0x39>
c0010f63:	83 ec 0c             	sub    esp,0xc
c0010f66:	55                   	push   ebp
c0010f67:	e8 31 7c ff ff       	call   c0008b9d <setActiveTerminal(VgaText*)>
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0010f72:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010f75:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0010f7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f7c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010f7f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f82:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0010f88:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f8b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0010f8e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0010f94:	50                   	push   eax
c0010f95:	50                   	push   eax
c0010f96:	68 bf e7 01 c0       	push   0xc001e7bf
c0010f9b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f9e:	05 a8 0f 00 00       	add    eax,0xfa8
c0010fa3:	50                   	push   eax
c0010fa4:	e8 77 f6 fe ff       	call   c0000620 <strcpy>
c0010fa9:	83 c4 10             	add    esp,0x10
c0010fac:	31 c0                	xor    eax,eax
c0010fae:	83 c4 0c             	add    esp,0xc
c0010fb1:	31 d2                	xor    edx,edx
c0010fb3:	5b                   	pop    ebx
c0010fb4:	5e                   	pop    esi
c0010fb5:	5f                   	pop    edi
c0010fb6:	5d                   	pop    ebp
c0010fb7:	c3                   	ret    

c0010fb8 <Sys::loadDLL(regs*)>:
c0010fb8:	56                   	push   esi
c0010fb9:	53                   	push   ebx
c0010fba:	31 d2                	xor    edx,edx
c0010fbc:	51                   	push   ecx
c0010fbd:	b8 01 00 00 00       	mov    eax,0x1
c0010fc2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fc6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0010fca:	0f 84 8c 00 00 00    	je     c001105c <Sys::loadDLL(regs*)+0xa4>
c0010fd0:	83 ec 0c             	sub    esp,0xc
c0010fd3:	68 14 01 00 00       	push   0x114
c0010fd8:	e8 90 6e ff ff       	call   c0007e6d <malloc>
c0010fdd:	83 c4 0c             	add    esp,0xc
c0010fe0:	89 c3                	mov    ebx,eax
c0010fe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fe7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010fea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010fed:	53                   	push   ebx
c0010fee:	e8 7f a1 ff ff       	call   c000b172 <File::File(char const*, Process*)>
c0010ff3:	83 c4 10             	add    esp,0x10
c0010ff6:	31 d2                	xor    edx,edx
c0010ff8:	b8 02 00 00 00       	mov    eax,0x2
c0010ffd:	85 db                	test   ebx,ebx
c0010fff:	74 5b                	je     c001105c <Sys::loadDLL(regs*)+0xa4>
c0011001:	83 ec 0c             	sub    esp,0xc
c0011004:	53                   	push   ebx
c0011005:	e8 96 a4 ff ff       	call   c000b4a0 <File::exists()>
c001100a:	83 c4 10             	add    esp,0x10
c001100d:	84 c0                	test   al,al
c001100f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011011:	75 11                	jne    c0011024 <Sys::loadDLL(regs*)+0x6c>
c0011013:	83 ec 0c             	sub    esp,0xc
c0011016:	53                   	push   ebx
c0011017:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001101a:	83 c4 10             	add    esp,0x10
c001101d:	b8 03 00 00 00       	mov    eax,0x3
c0011022:	eb 36                	jmp    c001105a <Sys::loadDLL(regs*)+0xa2>
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	53                   	push   ebx
c0011028:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001102b:	58                   	pop    eax
c001102c:	5a                   	pop    edx
c001102d:	6a 00                	push   0x0
c001102f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011032:	e8 77 20 00 00       	call   c00130ae <Thr::loadDLL(char const*, bool)>
c0011037:	83 c4 10             	add    esp,0x10
c001103a:	89 c1                	mov    ecx,eax
c001103c:	31 d2                	xor    edx,edx
c001103e:	b8 04 00 00 00       	mov    eax,0x4
c0011043:	85 c9                	test   ecx,ecx
c0011045:	74 15                	je     c001105c <Sys::loadDLL(regs*)+0xa4>
c0011047:	53                   	push   ebx
c0011048:	53                   	push   ebx
c0011049:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c001104f:	51                   	push   ecx
c0011050:	e8 8a 22 00 00       	call   c00132df <Thr::executeDLL(unsigned long, void*)>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	31 c0                	xor    eax,eax
c001105a:	31 d2                	xor    edx,edx
c001105c:	59                   	pop    ecx
c001105d:	5b                   	pop    ebx
c001105e:	5e                   	pop    esi
c001105f:	c3                   	ret    

c0011060 <Sys::read(regs*)>:
c0011060:	57                   	push   edi
c0011061:	56                   	push   esi
c0011062:	53                   	push   ebx
c0011063:	83 ec 10             	sub    esp,0x10
c0011066:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001106a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001106d:	83 f8 02             	cmp    eax,0x2
c0011070:	77 10                	ja     c0011082 <Sys::read(regs*)+0x22>
c0011072:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011077:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001107a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011080:	eb 0e                	jmp    c0011090 <Sys::read(regs*)+0x30>
c0011082:	83 ec 0c             	sub    esp,0xc
c0011085:	50                   	push   eax
c0011086:	e8 c8 87 ff ff       	call   c0009853 <getFromFileDescriptor(int)>
c001108b:	83 c4 10             	add    esp,0x10
c001108e:	89 c1                	mov    ecx,eax
c0011090:	83 c8 ff             	or     eax,0xffffffff
c0011093:	85 c9                	test   ecx,ecx
c0011095:	89 c2                	mov    edx,eax
c0011097:	74 28                	je     c00110c1 <Sys::read(regs*)+0x61>
c0011099:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00110a1:	31 ff                	xor    edi,edi
c00110a3:	83 ec 0c             	sub    esp,0xc
c00110a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00110a8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00110ac:	52                   	push   edx
c00110ad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00110b0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00110b3:	57                   	push   edi
c00110b4:	56                   	push   esi
c00110b5:	51                   	push   ecx
c00110b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00110b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110bd:	83 c4 20             	add    esp,0x20
c00110c0:	99                   	cdq    
c00110c1:	83 c4 10             	add    esp,0x10
c00110c4:	5b                   	pop    ebx
c00110c5:	5e                   	pop    esi
c00110c6:	5f                   	pop    edi
c00110c7:	c3                   	ret    

c00110c8 <Sys::sbrk(regs*)>:
c00110c8:	56                   	push   esi
c00110c9:	53                   	push   ebx
c00110ca:	50                   	push   eax
c00110cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00110d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110d7:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00110da:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00110e0:	85 db                	test   ebx,ebx
c00110e2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00110e5:	74 02                	je     c00110e9 <Sys::sbrk(regs*)+0x21>
c00110e7:	79 06                	jns    c00110ef <Sys::sbrk(regs*)+0x27>
c00110e9:	89 f0                	mov    eax,esi
c00110eb:	31 d2                	xor    edx,edx
c00110ed:	eb 2a                	jmp    c0011119 <Sys::sbrk(regs*)+0x51>
c00110ef:	83 c8 ff             	or     eax,0xffffffff
c00110f2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00110f8:	89 c2                	mov    edx,eax
c00110fa:	77 1d                	ja     c0011119 <Sys::sbrk(regs*)+0x51>
c00110fc:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011102:	50                   	push   eax
c0011103:	c1 ea 0c             	shr    edx,0xc
c0011106:	68 07 0c 00 00       	push   0xc07
c001110b:	52                   	push   edx
c001110c:	51                   	push   ecx
c001110d:	e8 30 90 ff ff       	call   c000a142 <VAS::allocatePages(int, int)>
c0011112:	89 f0                	mov    eax,esi
c0011114:	31 d2                	xor    edx,edx
c0011116:	83 c4 10             	add    esp,0x10
c0011119:	59                   	pop    ecx
c001111a:	5b                   	pop    ebx
c001111b:	5e                   	pop    esi
c001111c:	c3                   	ret    

c001111d <Sys::setCwd(regs*)>:
c001111d:	83 ec 14             	sub    esp,0x14
c0011120:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011124:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001112c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001112f:	e8 0b a4 ff ff       	call   c000b53f <Fs::setcwd(Process*, char*)>
c0011134:	83 c4 1c             	add    esp,0x1c
c0011137:	99                   	cdq    
c0011138:	c3                   	ret    

c0011139 <Sys::setTime(regs*)>:
c0011139:	55                   	push   ebp
c001113a:	31 c9                	xor    ecx,ecx
c001113c:	57                   	push   edi
c001113d:	bd 0c 00 00 00       	mov    ebp,0xc
c0011142:	56                   	push   esi
c0011143:	53                   	push   ebx
c0011144:	31 db                	xor    ebx,ebx
c0011146:	83 ec 10             	sub    esp,0x10
c0011149:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001114d:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011150:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011153:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011156:	89 c2                	mov    edx,eax
c0011158:	66 81 ef 6c 07       	sub    di,0x76c
c001115d:	83 e2 1f             	and    edx,0x1f
c0011160:	c1 e7 10             	shl    edi,0x10
c0011163:	42                   	inc    edx
c0011164:	c1 e8 05             	shr    eax,0x5
c0011167:	88 d1                	mov    cl,dl
c0011169:	31 d2                	xor    edx,edx
c001116b:	f7 f5                	div    ebp
c001116d:	89 dd                	mov    ebp,ebx
c001116f:	88 d5                	mov    ch,dl
c0011171:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011177:	0f b7 c1             	movzx  eax,cx
c001117a:	31 d2                	xor    edx,edx
c001117c:	09 f8                	or     eax,edi
c001117e:	bf 3c 00 00 00       	mov    edi,0x3c
c0011183:	89 c1                	mov    ecx,eax
c0011185:	89 f0                	mov    eax,esi
c0011187:	f7 f7                	div    edi
c0011189:	c1 e2 10             	shl    edx,0x10
c001118c:	09 d5                	or     ebp,edx
c001118e:	31 d2                	xor    edx,edx
c0011190:	89 eb                	mov    ebx,ebp
c0011192:	f7 f7                	div    edi
c0011194:	bf 10 0e 00 00       	mov    edi,0xe10
c0011199:	88 d7                	mov    bh,dl
c001119b:	89 f0                	mov    eax,esi
c001119d:	31 d2                	xor    edx,edx
c001119f:	f7 f7                	div    edi
c00111a1:	bf 18 00 00 00       	mov    edi,0x18
c00111a6:	31 d2                	xor    edx,edx
c00111a8:	f7 f7                	div    edi
c00111aa:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c00111af:	88 d3                	mov    bl,dl
c00111b1:	53                   	push   ebx
c00111b2:	51                   	push   ecx
c00111b3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00111b9:	e8 92 ab ff ff       	call   c000bd50 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00111be:	83 c4 1c             	add    esp,0x1c
c00111c1:	83 f0 01             	xor    eax,0x1
c00111c4:	5b                   	pop    ebx
c00111c5:	0f b6 c0             	movzx  eax,al
c00111c8:	5e                   	pop    esi
c00111c9:	31 d2                	xor    edx,edx
c00111cb:	5f                   	pop    edi
c00111cc:	5d                   	pop    ebp
c00111cd:	c3                   	ret    

c00111ce <Sys::timezone(regs*)>:
c00111ce:	53                   	push   ebx
c00111cf:	83 ec 08             	sub    esp,0x8
c00111d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111d6:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00111da:	75 17                	jne    c00111f3 <Sys::timezone(regs*)+0x25>
c00111dc:	83 ec 0c             	sub    esp,0xc
c00111df:	68 c9 e7 01 c0       	push   0xc001e7c9
c00111e4:	e8 13 9a ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c00111e9:	83 c8 ff             	or     eax,0xffffffff
c00111ec:	83 c4 10             	add    esp,0x10
c00111ef:	89 c2                	mov    edx,eax
c00111f1:	eb 20                	jmp    c0011213 <Sys::timezone(regs*)+0x45>
c00111f3:	83 ec 0c             	sub    esp,0xc
c00111f6:	68 de e7 01 c0       	push   0xc001e7de
c00111fb:	e8 fc 99 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0011200:	58                   	pop    eax
c0011201:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011204:	e8 a3 a8 ff ff       	call   c000baac <User::loadClockSettings(int)>
c0011209:	83 c4 10             	add    esp,0x10
c001120c:	b8 01 00 00 00       	mov    eax,0x1
c0011211:	31 d2                	xor    edx,edx
c0011213:	83 c4 08             	add    esp,0x8
c0011216:	5b                   	pop    ebx
c0011217:	c3                   	ret    

c0011218 <Sys::write(regs*)>:
c0011218:	57                   	push   edi
c0011219:	56                   	push   esi
c001121a:	53                   	push   ebx
c001121b:	83 ec 10             	sub    esp,0x10
c001121e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011222:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011225:	83 f8 02             	cmp    eax,0x2
c0011228:	77 10                	ja     c001123a <Sys::write(regs*)+0x22>
c001122a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001122f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011232:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011238:	eb 0e                	jmp    c0011248 <Sys::write(regs*)+0x30>
c001123a:	83 ec 0c             	sub    esp,0xc
c001123d:	50                   	push   eax
c001123e:	e8 10 86 ff ff       	call   c0009853 <getFromFileDescriptor(int)>
c0011243:	83 c4 10             	add    esp,0x10
c0011246:	89 c1                	mov    ecx,eax
c0011248:	83 c8 ff             	or     eax,0xffffffff
c001124b:	85 c9                	test   ecx,ecx
c001124d:	89 c2                	mov    edx,eax
c001124f:	74 28                	je     c0011279 <Sys::write(regs*)+0x61>
c0011251:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011259:	31 ff                	xor    edi,edi
c001125b:	83 ec 0c             	sub    esp,0xc
c001125e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011260:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011264:	52                   	push   edx
c0011265:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011268:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001126b:	57                   	push   edi
c001126c:	56                   	push   esi
c001126d:	51                   	push   ecx
c001126e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011271:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011275:	83 c4 20             	add    esp,0x20
c0011278:	99                   	cdq    
c0011279:	83 c4 10             	add    esp,0x10
c001127c:	5b                   	pop    ebx
c001127d:	5e                   	pop    esi
c001127e:	5f                   	pop    edi
c001127f:	c3                   	ret    

c0011280 <Sys::wsbe(regs*)>:
c0011280:	57                   	push   edi
c0011281:	b9 0b 00 00 00       	mov    ecx,0xb
c0011286:	56                   	push   esi
c0011287:	be 1d e8 01 c0       	mov    esi,0xc001e81d
c001128c:	53                   	push   ebx
c001128d:	83 ec 30             	sub    esp,0x30
c0011290:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011294:	fc                   	cld    
c0011295:	83 ec 0c             	sub    esp,0xc
c0011298:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001129a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001129e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112a6:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00112ac:	8b 06                	mov    eax,DWORD PTR [esi]
c00112ae:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00112b1:	57                   	push   edi
c00112b2:	e8 a9 f2 fe ff       	call   c0000560 <strlen>
c00112b7:	5a                   	pop    edx
c00112b8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00112bc:	52                   	push   edx
c00112bd:	31 d2                	xor    edx,edx
c00112bf:	57                   	push   edi
c00112c0:	52                   	push   edx
c00112c1:	50                   	push   eax
c00112c2:	56                   	push   esi
c00112c3:	ff d3                	call   ebx
c00112c5:	83 c4 14             	add    esp,0x14
c00112c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00112cc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00112cf:	e8 f0 30 00 00       	call   c00143c4 <terminateTask(int)>
c00112d4:	83 c4 40             	add    esp,0x40
c00112d7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00112dc:	5b                   	pop    ebx
c00112dd:	31 d2                	xor    edx,edx
c00112df:	5e                   	pop    esi
c00112e0:	5f                   	pop    edi
c00112e1:	c3                   	ret    

c00112e2 <Sys::yield(regs*)>:
c00112e2:	83 ec 0c             	sub    esp,0xc
c00112e5:	fa                   	cli    
c00112e6:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c00112ec:	e8 af 27 00 00       	call   c0013aa0 <schedule()>
c00112f1:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c00112f6:	48                   	dec    eax
c00112f7:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c00112fc:	75 01                	jne    c00112ff <Sys::yield(regs*)+0x1d>
c00112fe:	fb                   	sti    
c00112ff:	31 c0                	xor    eax,eax
c0011301:	31 d2                	xor    edx,edx
c0011303:	83 c4 0c             	add    esp,0xc
c0011306:	c3                   	ret    

c0011307 <sysCallSeekDir(regs*)>:
c0011307:	31 c0                	xor    eax,eax
c0011309:	31 d2                	xor    edx,edx
c001130b:	c3                   	ret    

c001130c <sysCallTellDir(regs*)>:
c001130c:	31 c0                	xor    eax,eax
c001130e:	31 d2                	xor    edx,edx
c0011310:	c3                   	ret    

c0011311 <sysCallVerify(regs*)>:
c0011311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011315:	31 d2                	xor    edx,edx
c0011317:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001131a:	c3                   	ret    

c001131b <sysCallGetArgc(regs*)>:
c001131b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011320:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011323:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011329:	99                   	cdq    
c001132a:	c3                   	ret    

c001132b <sysCallTTYName(regs*)>:
c001132b:	b8 01 00 00 00       	mov    eax,0x1
c0011330:	31 d2                	xor    edx,edx
c0011332:	c3                   	ret    

c0011333 <sysFormatDisk(regs*)>:
c0011333:	56                   	push   esi
c0011334:	53                   	push   ebx
c0011335:	50                   	push   eax
c0011336:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001133a:	8b 1d 14 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a14
c0011340:	eb 28                	jmp    c001136a <sysFormatDisk(regs*)+0x37>
c0011342:	83 ec 0c             	sub    esp,0xc
c0011345:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011348:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001134b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001134d:	51                   	push   ecx
c001134e:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011351:	51                   	push   ecx
c0011352:	50                   	push   eax
c0011353:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c001135a:	50                   	push   eax
c001135b:	53                   	push   ebx
c001135c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001135f:	83 c4 20             	add    esp,0x20
c0011362:	83 f8 08             	cmp    eax,0x8
c0011365:	75 12                	jne    c0011379 <sysFormatDisk(regs*)+0x46>
c0011367:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001136a:	85 db                	test   ebx,ebx
c001136c:	75 d4                	jne    c0011342 <sysFormatDisk(regs*)+0xf>
c001136e:	59                   	pop    ecx
c001136f:	b8 03 00 00 00       	mov    eax,0x3
c0011374:	31 d2                	xor    edx,edx
c0011376:	5b                   	pop    ebx
c0011377:	5e                   	pop    esi
c0011378:	c3                   	ret    
c0011379:	85 c0                	test   eax,eax
c001137b:	74 1b                	je     c0011398 <sysFormatDisk(regs*)+0x65>
c001137d:	83 f8 09             	cmp    eax,0x9
c0011380:	74 0b                	je     c001138d <sysFormatDisk(regs*)+0x5a>
c0011382:	59                   	pop    ecx
c0011383:	b8 02 00 00 00       	mov    eax,0x2
c0011388:	31 d2                	xor    edx,edx
c001138a:	5b                   	pop    ebx
c001138b:	5e                   	pop    esi
c001138c:	c3                   	ret    
c001138d:	59                   	pop    ecx
c001138e:	b8 01 00 00 00       	mov    eax,0x1
c0011393:	31 d2                	xor    edx,edx
c0011395:	5b                   	pop    ebx
c0011396:	5e                   	pop    esi
c0011397:	c3                   	ret    
c0011398:	59                   	pop    ecx
c0011399:	31 c0                	xor    eax,eax
c001139b:	31 d2                	xor    edx,edx
c001139d:	5b                   	pop    ebx
c001139e:	5e                   	pop    esi
c001139f:	c3                   	ret    

c00113a0 <sysSetDiskVolumeLabel(regs*)>:
c00113a0:	56                   	push   esi
c00113a1:	53                   	push   ebx
c00113a2:	53                   	push   ebx
c00113a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00113a7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00113aa:	83 f8 19             	cmp    eax,0x19
c00113ad:	77 2d                	ja     c00113dc <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113af:	8b 0c 85 80 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd180]
c00113b6:	85 c9                	test   ecx,ecx
c00113b8:	74 22                	je     c00113dc <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113ba:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00113bd:	85 db                	test   ebx,ebx
c00113bf:	74 1b                	je     c00113dc <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113c1:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00113c7:	85 d2                	test   edx,edx
c00113c9:	74 11                	je     c00113dc <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113cb:	8b 32                	mov    esi,DWORD PTR [edx]
c00113cd:	53                   	push   ebx
c00113ce:	50                   	push   eax
c00113cf:	51                   	push   ecx
c00113d0:	52                   	push   edx
c00113d1:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00113d4:	83 c4 10             	add    esp,0x10
c00113d7:	99                   	cdq    
c00113d8:	59                   	pop    ecx
c00113d9:	5b                   	pop    ebx
c00113da:	5e                   	pop    esi
c00113db:	c3                   	ret    
c00113dc:	59                   	pop    ecx
c00113dd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113e7:	5b                   	pop    ebx
c00113e8:	5e                   	pop    esi
c00113e9:	c3                   	ret    

c00113ea <sysGetDiskVolumeLabel(regs*)>:
c00113ea:	57                   	push   edi
c00113eb:	56                   	push   esi
c00113ec:	53                   	push   ebx
c00113ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113f1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00113f4:	83 fa 19             	cmp    edx,0x19
c00113f7:	77 38                	ja     c0011431 <sysGetDiskVolumeLabel(regs*)+0x47>
c00113f9:	8b 0c 95 80 2e 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd180]
c0011400:	85 c9                	test   ecx,ecx
c0011402:	74 2d                	je     c0011431 <sysGetDiskVolumeLabel(regs*)+0x47>
c0011404:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011407:	85 db                	test   ebx,ebx
c0011409:	74 26                	je     c0011431 <sysGetDiskVolumeLabel(regs*)+0x47>
c001140b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001140e:	85 f6                	test   esi,esi
c0011410:	74 1f                	je     c0011431 <sysGetDiskVolumeLabel(regs*)+0x47>
c0011412:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0011418:	85 c0                	test   eax,eax
c001141a:	74 15                	je     c0011431 <sysGetDiskVolumeLabel(regs*)+0x47>
c001141c:	83 ec 0c             	sub    esp,0xc
c001141f:	8b 38                	mov    edi,DWORD PTR [eax]
c0011421:	56                   	push   esi
c0011422:	53                   	push   ebx
c0011423:	52                   	push   edx
c0011424:	51                   	push   ecx
c0011425:	50                   	push   eax
c0011426:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011429:	83 c4 20             	add    esp,0x20
c001142c:	99                   	cdq    
c001142d:	5b                   	pop    ebx
c001142e:	5e                   	pop    esi
c001142f:	5f                   	pop    edi
c0011430:	c3                   	ret    
c0011431:	5b                   	pop    ebx
c0011432:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011437:	ba ff ff ff ff       	mov    edx,0xffffffff
c001143c:	5e                   	pop    esi
c001143d:	5f                   	pop    edi
c001143e:	c3                   	ret    

c001143f <sysShutdown(regs*)>:
c001143f:	83 ec 0c             	sub    esp,0xc
c0011442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011446:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011449:	85 c0                	test   eax,eax
c001144b:	74 18                	je     c0011465 <sysShutdown(regs*)+0x26>
c001144d:	83 f8 01             	cmp    eax,0x1
c0011450:	74 38                	je     c001148a <sysShutdown(regs*)+0x4b>
c0011452:	83 f8 02             	cmp    eax,0x2
c0011455:	74 24                	je     c001147b <sysShutdown(regs*)+0x3c>
c0011457:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001145c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011461:	83 c4 0c             	add    esp,0xc
c0011464:	c3                   	ret    
c0011465:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c001146a:	8b 10                	mov    edx,DWORD PTR [eax]
c001146c:	6a 00                	push   0x0
c001146e:	6a 00                	push   0x0
c0011470:	6a 00                	push   0x0
c0011472:	50                   	push   eax
c0011473:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011476:	83 c4 10             	add    esp,0x10
c0011479:	eb dc                	jmp    c0011457 <sysShutdown(regs*)+0x18>
c001147b:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0011480:	8b 10                	mov    edx,DWORD PTR [eax]
c0011482:	6a 00                	push   0x0
c0011484:	6a 00                	push   0x0
c0011486:	6a 01                	push   0x1
c0011488:	eb e8                	jmp    c0011472 <sysShutdown(regs*)+0x33>
c001148a:	a1 00 2f 02 c0       	mov    eax,ds:0xc0022f00
c001148f:	85 c0                	test   eax,eax
c0011491:	74 02                	je     c0011495 <sysShutdown(regs*)+0x56>
c0011493:	ff d0                	call   eax
c0011495:	31 c0                	xor    eax,eax
c0011497:	31 d2                	xor    edx,edx
c0011499:	83 c4 0c             	add    esp,0xc
c001149c:	c3                   	ret    

c001149d <sysCallRealpath(regs*)>:
c001149d:	83 ec 0c             	sub    esp,0xc
c00114a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114a4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00114a7:	85 d2                	test   edx,edx
c00114a9:	74 07                	je     c00114b2 <sysCallRealpath(regs*)+0x15>
c00114ab:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00114ae:	85 c0                	test   eax,eax
c00114b0:	75 0b                	jne    c00114bd <sysCallRealpath(regs*)+0x20>
c00114b2:	b8 01 00 00 00       	mov    eax,0x1
c00114b7:	31 d2                	xor    edx,edx
c00114b9:	83 c4 0c             	add    esp,0xc
c00114bc:	c3                   	ret    
c00114bd:	51                   	push   ecx
c00114be:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00114c4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00114c7:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00114cd:	51                   	push   ecx
c00114ce:	52                   	push   edx
c00114cf:	50                   	push   eax
c00114d0:	e8 f3 9a ff ff       	call   c000afc8 <Fs::standardiseFiles(char*, char const*, char const*)>
c00114d5:	83 c4 10             	add    esp,0x10
c00114d8:	31 c0                	xor    eax,eax
c00114da:	31 d2                	xor    edx,edx
c00114dc:	83 c4 0c             	add    esp,0xc
c00114df:	c3                   	ret    

c00114e0 <sysCallReadDir(regs*)>:
c00114e0:	53                   	push   ebx
c00114e1:	83 ec 18             	sub    esp,0x18
c00114e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114e8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00114eb:	83 f8 02             	cmp    eax,0x2
c00114ee:	76 61                	jbe    c0011551 <sysCallReadDir(regs*)+0x71>
c00114f0:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00114f7:	77 49                	ja     c0011542 <sysCallReadDir(regs*)+0x62>
c00114f9:	83 ec 0c             	sub    esp,0xc
c00114fc:	50                   	push   eax
c00114fd:	e8 51 83 ff ff       	call   c0009853 <getFromFileDescriptor(int)>
c0011502:	83 c4 10             	add    esp,0x10
c0011505:	85 c0                	test   eax,eax
c0011507:	74 39                	je     c0011542 <sysCallReadDir(regs*)+0x62>
c0011509:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011511:	83 ec 0c             	sub    esp,0xc
c0011514:	8b 10                	mov    edx,DWORD PTR [eax]
c0011516:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001151a:	51                   	push   ecx
c001151b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001151e:	51                   	push   ecx
c001151f:	6a 00                	push   0x0
c0011521:	68 10 01 00 00       	push   0x110
c0011526:	50                   	push   eax
c0011527:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001152a:	83 c4 20             	add    esp,0x20
c001152d:	85 c0                	test   eax,eax
c001152f:	74 29                	je     c001155a <sysCallReadDir(regs*)+0x7a>
c0011531:	83 f8 07             	cmp    eax,0x7
c0011534:	74 1b                	je     c0011551 <sysCallReadDir(regs*)+0x71>
c0011536:	b8 02 00 00 00       	mov    eax,0x2
c001153b:	31 d2                	xor    edx,edx
c001153d:	83 c4 18             	add    esp,0x18
c0011540:	5b                   	pop    ebx
c0011541:	c3                   	ret    
c0011542:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011547:	ba ff ff ff ff       	mov    edx,0xffffffff
c001154c:	83 c4 18             	add    esp,0x18
c001154f:	5b                   	pop    ebx
c0011550:	c3                   	ret    
c0011551:	b8 01 00 00 00       	mov    eax,0x1
c0011556:	31 d2                	xor    edx,edx
c0011558:	eb e3                	jmp    c001153d <sysCallReadDir(regs*)+0x5d>
c001155a:	31 c0                	xor    eax,eax
c001155c:	31 d2                	xor    edx,edx
c001155e:	eb dd                	jmp    c001153d <sysCallReadDir(regs*)+0x5d>

c0011560 <sysCallIsATTY(regs*)>:
c0011560:	83 ec 0c             	sub    esp,0xc
c0011563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011567:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001156a:	83 f8 02             	cmp    eax,0x2
c001156d:	76 07                	jbe    c0011576 <sysCallIsATTY(regs*)+0x16>
c001156f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011574:	75 28                	jne    c001159e <sysCallIsATTY(regs*)+0x3e>
c0011576:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001157b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001157e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011584:	85 c0                	test   eax,eax
c0011586:	74 26                	je     c00115ae <sysCallIsATTY(regs*)+0x4e>
c0011588:	83 ec 0c             	sub    esp,0xc
c001158b:	8b 10                	mov    edx,DWORD PTR [eax]
c001158d:	50                   	push   eax
c001158e:	ff 12                	call   DWORD PTR [edx]
c0011590:	31 d2                	xor    edx,edx
c0011592:	25 ff 00 00 00       	and    eax,0xff
c0011597:	83 c4 10             	add    esp,0x10
c001159a:	83 c4 0c             	add    esp,0xc
c001159d:	c3                   	ret    
c001159e:	83 ec 0c             	sub    esp,0xc
c00115a1:	50                   	push   eax
c00115a2:	e8 ac 82 ff ff       	call   c0009853 <getFromFileDescriptor(int)>
c00115a7:	83 c4 10             	add    esp,0x10
c00115aa:	85 c0                	test   eax,eax
c00115ac:	75 da                	jne    c0011588 <sysCallIsATTY(regs*)+0x28>
c00115ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115b8:	83 c4 0c             	add    esp,0xc
c00115bb:	c3                   	ret    

c00115bc <sysCallSeek(regs*)>:
c00115bc:	53                   	push   ebx
c00115bd:	83 ec 08             	sub    esp,0x8
c00115c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115c7:	8d 50 fd             	lea    edx,[eax-0x3]
c00115ca:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00115d0:	77 34                	ja     c0011606 <sysCallSeek(regs*)+0x4a>
c00115d2:	83 ec 0c             	sub    esp,0xc
c00115d5:	50                   	push   eax
c00115d6:	e8 78 82 ff ff       	call   c0009853 <getFromFileDescriptor(int)>
c00115db:	83 c4 0c             	add    esp,0xc
c00115de:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00115e1:	31 db                	xor    ebx,ebx
c00115e3:	53                   	push   ebx
c00115e4:	51                   	push   ecx
c00115e5:	50                   	push   eax
c00115e6:	e8 05 9d ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c00115eb:	83 c4 10             	add    esp,0x10
c00115ee:	85 c0                	test   eax,eax
c00115f0:	0f 95 c0             	setne  al
c00115f3:	31 d2                	xor    edx,edx
c00115f5:	25 ff 00 00 00       	and    eax,0xff
c00115fa:	f7 d8                	neg    eax
c00115fc:	83 d2 00             	adc    edx,0x0
c00115ff:	83 c4 08             	add    esp,0x8
c0011602:	f7 da                	neg    edx
c0011604:	5b                   	pop    ebx
c0011605:	c3                   	ret    
c0011606:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001160b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011610:	83 c4 08             	add    esp,0x8
c0011613:	5b                   	pop    ebx
c0011614:	c3                   	ret    

c0011615 <sysCallTell(regs*)>:
c0011615:	53                   	push   ebx
c0011616:	83 ec 08             	sub    esp,0x8
c0011619:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001161d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011620:	83 f8 02             	cmp    eax,0x2
c0011623:	76 50                	jbe    c0011675 <sysCallTell(regs*)+0x60>
c0011625:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001162a:	76 19                	jbe    c0011645 <sysCallTell(regs*)+0x30>
c001162c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001162f:	31 d2                	xor    edx,edx
c0011631:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011637:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001163e:	31 c0                	xor    eax,eax
c0011640:	83 c4 08             	add    esp,0x8
c0011643:	5b                   	pop    ebx
c0011644:	c3                   	ret    
c0011645:	83 ec 0c             	sub    esp,0xc
c0011648:	50                   	push   eax
c0011649:	e8 05 82 ff ff       	call   c0009853 <getFromFileDescriptor(int)>
c001164e:	5a                   	pop    edx
c001164f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011652:	59                   	pop    ecx
c0011653:	53                   	push   ebx
c0011654:	50                   	push   eax
c0011655:	e8 ec 9c ff ff       	call   c000b346 <File::tell(unsigned long long*)>
c001165a:	83 c4 10             	add    esp,0x10
c001165d:	85 c0                	test   eax,eax
c001165f:	0f 95 c0             	setne  al
c0011662:	31 d2                	xor    edx,edx
c0011664:	25 ff 00 00 00       	and    eax,0xff
c0011669:	f7 d8                	neg    eax
c001166b:	83 d2 00             	adc    edx,0x0
c001166e:	83 c4 08             	add    esp,0x8
c0011671:	f7 da                	neg    edx
c0011673:	5b                   	pop    ebx
c0011674:	c3                   	ret    
c0011675:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001167a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001167f:	83 c4 08             	add    esp,0x8
c0011682:	5b                   	pop    ebx
c0011683:	c3                   	ret    

c0011684 <sysCallSize(regs*)>:
c0011684:	53                   	push   ebx
c0011685:	83 ec 18             	sub    esp,0x18
c0011688:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001168c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001168f:	83 f8 02             	cmp    eax,0x2
c0011692:	76 56                	jbe    c00116ea <sysCallSize(regs*)+0x66>
c0011694:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011699:	76 19                	jbe    c00116b4 <sysCallSize(regs*)+0x30>
c001169b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001169e:	31 d2                	xor    edx,edx
c00116a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00116a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116ad:	31 c0                	xor    eax,eax
c00116af:	83 c4 18             	add    esp,0x18
c00116b2:	5b                   	pop    ebx
c00116b3:	c3                   	ret    
c00116b4:	83 ec 0c             	sub    esp,0xc
c00116b7:	50                   	push   eax
c00116b8:	e8 96 81 ff ff       	call   c0009853 <getFromFileDescriptor(int)>
c00116bd:	83 c4 0c             	add    esp,0xc
c00116c0:	8d 54 24 13          	lea    edx,[esp+0x13]
c00116c4:	52                   	push   edx
c00116c5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116c8:	52                   	push   edx
c00116c9:	50                   	push   eax
c00116ca:	e8 0f 9e ff ff       	call   c000b4de <File::stat(unsigned long long*, bool*)>
c00116cf:	83 c4 10             	add    esp,0x10
c00116d2:	85 c0                	test   eax,eax
c00116d4:	0f 95 c0             	setne  al
c00116d7:	31 d2                	xor    edx,edx
c00116d9:	25 ff 00 00 00       	and    eax,0xff
c00116de:	f7 d8                	neg    eax
c00116e0:	83 d2 00             	adc    edx,0x0
c00116e3:	83 c4 18             	add    esp,0x18
c00116e6:	f7 da                	neg    edx
c00116e8:	5b                   	pop    ebx
c00116e9:	c3                   	ret    
c00116ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116f4:	83 c4 18             	add    esp,0x18
c00116f7:	5b                   	pop    ebx
c00116f8:	c3                   	ret    

c00116f9 <sysCallSizeFromFilename(regs*)>:
c00116f9:	57                   	push   edi
c00116fa:	56                   	push   esi
c00116fb:	53                   	push   ebx
c00116fc:	83 ec 20             	sub    esp,0x20
c00116ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011703:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011706:	83 fb 02             	cmp    ebx,0x2
c0011709:	0f 86 8c 00 00 00    	jbe    c001179b <sysCallSizeFromFilename(regs*)+0xa2>
c001170f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011715:	76 1b                	jbe    c0011732 <sysCallSizeFromFilename(regs*)+0x39>
c0011717:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001171a:	31 d2                	xor    edx,edx
c001171c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011722:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011729:	83 c4 20             	add    esp,0x20
c001172c:	31 c0                	xor    eax,eax
c001172e:	5b                   	pop    ebx
c001172f:	5e                   	pop    esi
c0011730:	5f                   	pop    edi
c0011731:	c3                   	ret    
c0011732:	83 ec 0c             	sub    esp,0xc
c0011735:	68 14 01 00 00       	push   0x114
c001173a:	e8 2e 67 ff ff       	call   c0007e6d <malloc>
c001173f:	83 c4 0c             	add    esp,0xc
c0011742:	89 c7                	mov    edi,eax
c0011744:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011749:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001174c:	50                   	push   eax
c001174d:	53                   	push   ebx
c001174e:	57                   	push   edi
c001174f:	e8 1e 9a ff ff       	call   c000b172 <File::File(char const*, Process*)>
c0011754:	83 c4 0c             	add    esp,0xc
c0011757:	8d 44 24 23          	lea    eax,[esp+0x23]
c001175b:	50                   	push   eax
c001175c:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001175f:	52                   	push   edx
c0011760:	57                   	push   edi
c0011761:	e8 78 9d ff ff       	call   c000b4de <File::stat(unsigned long long*, bool*)>
c0011766:	83 c4 10             	add    esp,0x10
c0011769:	85 ff                	test   edi,edi
c001176b:	74 14                	je     c0011781 <sysCallSizeFromFilename(regs*)+0x88>
c001176d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011771:	8b 17                	mov    edx,DWORD PTR [edi]
c0011773:	83 ec 0c             	sub    esp,0xc
c0011776:	57                   	push   edi
c0011777:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001177a:	83 c4 10             	add    esp,0x10
c001177d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011781:	85 c0                	test   eax,eax
c0011783:	0f 95 c0             	setne  al
c0011786:	31 d2                	xor    edx,edx
c0011788:	25 ff 00 00 00       	and    eax,0xff
c001178d:	f7 d8                	neg    eax
c001178f:	83 d2 00             	adc    edx,0x0
c0011792:	83 c4 20             	add    esp,0x20
c0011795:	f7 da                	neg    edx
c0011797:	5b                   	pop    ebx
c0011798:	5e                   	pop    esi
c0011799:	5f                   	pop    edi
c001179a:	c3                   	ret    
c001179b:	83 c4 20             	add    esp,0x20
c001179e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117a3:	5b                   	pop    ebx
c00117a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117a9:	5e                   	pop    esi
c00117aa:	5f                   	pop    edi
c00117ab:	c3                   	ret    

c00117ac <sysCallClose(regs*)>:
c00117ac:	53                   	push   ebx
c00117ad:	83 ec 08             	sub    esp,0x8
c00117b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117b4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117b7:	83 f8 02             	cmp    eax,0x2
c00117ba:	76 41                	jbe    c00117fd <sysCallClose(regs*)+0x51>
c00117bc:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00117c2:	83 fa 01             	cmp    edx,0x1
c00117c5:	76 2d                	jbe    c00117f4 <sysCallClose(regs*)+0x48>
c00117c7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117cc:	77 2f                	ja     c00117fd <sysCallClose(regs*)+0x51>
c00117ce:	83 ec 0c             	sub    esp,0xc
c00117d1:	50                   	push   eax
c00117d2:	e8 7c 80 ff ff       	call   c0009853 <getFromFileDescriptor(int)>
c00117d7:	89 c3                	mov    ebx,eax
c00117d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00117dc:	e8 af 9a ff ff       	call   c000b290 <File::close()>
c00117e1:	83 c4 10             	add    esp,0x10
c00117e4:	85 db                	test   ebx,ebx
c00117e6:	74 0c                	je     c00117f4 <sysCallClose(regs*)+0x48>
c00117e8:	83 ec 0c             	sub    esp,0xc
c00117eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117ed:	53                   	push   ebx
c00117ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117f1:	83 c4 10             	add    esp,0x10
c00117f4:	31 c0                	xor    eax,eax
c00117f6:	31 d2                	xor    edx,edx
c00117f8:	83 c4 08             	add    esp,0x8
c00117fb:	5b                   	pop    ebx
c00117fc:	c3                   	ret    
c00117fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011802:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011807:	83 c4 08             	add    esp,0x8
c001180a:	5b                   	pop    ebx
c001180b:	c3                   	ret    

c001180c <sysCallOpenDir(regs*)>:
c001180c:	56                   	push   esi
c001180d:	53                   	push   ebx
c001180e:	50                   	push   eax
c001180f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011813:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011816:	85 c0                	test   eax,eax
c0011818:	74 5b                	je     c0011875 <sysCallOpenDir(regs*)+0x69>
c001181a:	83 ec 0c             	sub    esp,0xc
c001181d:	68 14 01 00 00       	push   0x114
c0011822:	e8 46 66 ff ff       	call   c0007e6d <malloc>
c0011827:	83 c4 0c             	add    esp,0xc
c001182a:	89 c6                	mov    esi,eax
c001182c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011831:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011834:	50                   	push   eax
c0011835:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011838:	50                   	push   eax
c0011839:	56                   	push   esi
c001183a:	e8 5d 9e ff ff       	call   c000b69c <Directory::Directory(char const*, Process*)>
c001183f:	83 c4 10             	add    esp,0x10
c0011842:	85 f6                	test   esi,esi
c0011844:	74 2f                	je     c0011875 <sysCallOpenDir(regs*)+0x69>
c0011846:	83 ec 0c             	sub    esp,0xc
c0011849:	56                   	push   esi
c001184a:	e8 0d 9f ff ff       	call   c000b75c <Directory::open()>
c001184f:	83 c4 10             	add    esp,0x10
c0011852:	85 c0                	test   eax,eax
c0011854:	75 1f                	jne    c0011875 <sysCallOpenDir(regs*)+0x69>
c0011856:	83 ec 0c             	sub    esp,0xc
c0011859:	56                   	push   esi
c001185a:	e8 ff 7c ff ff       	call   c000955e <UnixFile::getFileDescriptor()>
c001185f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011862:	83 c4 10             	add    esp,0x10
c0011865:	89 02                	mov    DWORD PTR [edx],eax
c0011867:	c1 f8 1f             	sar    eax,0x1f
c001186a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001186d:	31 c0                	xor    eax,eax
c001186f:	59                   	pop    ecx
c0011870:	31 d2                	xor    edx,edx
c0011872:	5b                   	pop    ebx
c0011873:	5e                   	pop    esi
c0011874:	c3                   	ret    
c0011875:	59                   	pop    ecx
c0011876:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001187b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011880:	5b                   	pop    ebx
c0011881:	5e                   	pop    esi
c0011882:	c3                   	ret    

c0011883 <sysCallCloseDir(regs*)>:
c0011883:	53                   	push   ebx
c0011884:	83 ec 08             	sub    esp,0x8
c0011887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001188b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001188e:	8d 50 fd             	lea    edx,[eax-0x3]
c0011891:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011897:	77 2f                	ja     c00118c8 <sysCallCloseDir(regs*)+0x45>
c0011899:	83 ec 0c             	sub    esp,0xc
c001189c:	50                   	push   eax
c001189d:	e8 b1 7f ff ff       	call   c0009853 <getFromFileDescriptor(int)>
c00118a2:	89 c3                	mov    ebx,eax
c00118a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00118a7:	e8 0c 9f ff ff       	call   c000b7b8 <Directory::close()>
c00118ac:	83 c4 10             	add    esp,0x10
c00118af:	85 db                	test   ebx,ebx
c00118b1:	74 0c                	je     c00118bf <sysCallCloseDir(regs*)+0x3c>
c00118b3:	83 ec 0c             	sub    esp,0xc
c00118b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118b8:	53                   	push   ebx
c00118b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118bc:	83 c4 10             	add    esp,0x10
c00118bf:	31 c0                	xor    eax,eax
c00118c1:	31 d2                	xor    edx,edx
c00118c3:	83 c4 08             	add    esp,0x8
c00118c6:	5b                   	pop    ebx
c00118c7:	c3                   	ret    
c00118c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118d2:	83 c4 08             	add    esp,0x8
c00118d5:	5b                   	pop    ebx
c00118d6:	c3                   	ret    

c00118d7 <sysCallMakeDir(regs*)>:
c00118d7:	56                   	push   esi
c00118d8:	53                   	push   ebx
c00118d9:	83 ec 10             	sub    esp,0x10
c00118dc:	68 14 01 00 00       	push   0x114
c00118e1:	e8 87 65 ff ff       	call   c0007e6d <malloc>
c00118e6:	83 c4 0c             	add    esp,0xc
c00118e9:	89 c3                	mov    ebx,eax
c00118eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118f0:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c00118f3:	56                   	push   esi
c00118f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118f8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00118fb:	50                   	push   eax
c00118fc:	53                   	push   ebx
c00118fd:	e8 9a 9d ff ff       	call   c000b69c <Directory::Directory(char const*, Process*)>
c0011902:	83 c4 10             	add    esp,0x10
c0011905:	85 db                	test   ebx,ebx
c0011907:	74 32                	je     c001193b <sysCallMakeDir(regs*)+0x64>
c0011909:	83 ec 0c             	sub    esp,0xc
c001190c:	53                   	push   ebx
c001190d:	e8 2a a0 ff ff       	call   c000b93c <Directory::create()>
c0011912:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011915:	89 c6                	mov    esi,eax
c0011917:	e8 9c 9e ff ff       	call   c000b7b8 <Directory::close()>
c001191c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001191e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011921:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011924:	83 c4 10             	add    esp,0x10
c0011927:	31 c0                	xor    eax,eax
c0011929:	59                   	pop    ecx
c001192a:	85 f6                	test   esi,esi
c001192c:	5b                   	pop    ebx
c001192d:	0f 95 c0             	setne  al
c0011930:	5e                   	pop    esi
c0011931:	31 d2                	xor    edx,edx
c0011933:	f7 d8                	neg    eax
c0011935:	83 d2 00             	adc    edx,0x0
c0011938:	f7 da                	neg    edx
c001193a:	c3                   	ret    
c001193b:	59                   	pop    ecx
c001193c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011941:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011946:	5b                   	pop    ebx
c0011947:	5e                   	pop    esi
c0011948:	c3                   	ret    

c0011949 <sysCallWait(regs*)>:
c0011949:	83 ec 10             	sub    esp,0x10
c001194c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011950:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011953:	52                   	push   edx
c0011954:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011957:	51                   	push   ecx
c0011958:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001195b:	50                   	push   eax
c001195c:	e8 6b 23 00 00       	call   c0013ccc <waitTask(int, int*, int)>
c0011961:	83 c4 1c             	add    esp,0x1c
c0011964:	99                   	cdq    
c0011965:	c3                   	ret    

c0011966 <sysCallNotImpl(regs*)>:
c0011966:	83 ec 18             	sub    esp,0x18
c0011969:	68 49 e8 01 c0       	push   0xc001e849
c001196e:	e8 d8 ed ff ff       	call   c001074b <Krnl::panic(char const*)>
c0011973:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011978:	ba ff ff ff ff       	mov    edx,0xffffffff
c001197d:	83 c4 1c             	add    esp,0x1c
c0011980:	c3                   	ret    

c0011981 <sysPanic(regs*)>:
c0011981:	83 ec 18             	sub    esp,0x18
c0011984:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011988:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001198b:	50                   	push   eax
c001198c:	e8 ba ed ff ff       	call   c001074b <Krnl::panic(char const*)>
c0011991:	b8 01 00 00 00       	mov    eax,0x1
c0011996:	31 d2                	xor    edx,edx
c0011998:	83 c4 1c             	add    esp,0x1c
c001199b:	c3                   	ret    

c001199c <sysCallRmdir(regs*)>:
c001199c:	56                   	push   esi
c001199d:	53                   	push   ebx
c001199e:	83 ec 20             	sub    esp,0x20
c00119a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119a5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119a8:	68 14 01 00 00       	push   0x114
c00119ad:	e8 bb 64 ff ff       	call   c0007e6d <malloc>
c00119b2:	83 c4 0c             	add    esp,0xc
c00119b5:	89 c3                	mov    ebx,eax
c00119b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119bf:	50                   	push   eax
c00119c0:	56                   	push   esi
c00119c1:	53                   	push   ebx
c00119c2:	e8 ab 97 ff ff       	call   c000b172 <File::File(char const*, Process*)>
c00119c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119ca:	e8 db 99 ff ff       	call   c000b3aa <File::unlink()>
c00119cf:	83 c4 10             	add    esp,0x10
c00119d2:	85 db                	test   ebx,ebx
c00119d4:	74 14                	je     c00119ea <sysCallRmdir(regs*)+0x4e>
c00119d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119da:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119dc:	83 ec 0c             	sub    esp,0xc
c00119df:	53                   	push   ebx
c00119e0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119e3:	83 c4 10             	add    esp,0x10
c00119e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ea:	85 c0                	test   eax,eax
c00119ec:	0f 95 c0             	setne  al
c00119ef:	31 d2                	xor    edx,edx
c00119f1:	25 ff 00 00 00       	and    eax,0xff
c00119f6:	f7 d8                	neg    eax
c00119f8:	83 d2 00             	adc    edx,0x0
c00119fb:	83 c4 14             	add    esp,0x14
c00119fe:	f7 da                	neg    edx
c0011a00:	5b                   	pop    ebx
c0011a01:	5e                   	pop    esi
c0011a02:	c3                   	ret    

c0011a03 <sysCallUnlink(regs*)>:
c0011a03:	56                   	push   esi
c0011a04:	53                   	push   ebx
c0011a05:	83 ec 20             	sub    esp,0x20
c0011a08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a0c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011a0f:	68 14 01 00 00       	push   0x114
c0011a14:	e8 54 64 ff ff       	call   c0007e6d <malloc>
c0011a19:	83 c4 0c             	add    esp,0xc
c0011a1c:	89 c3                	mov    ebx,eax
c0011a1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a26:	50                   	push   eax
c0011a27:	56                   	push   esi
c0011a28:	53                   	push   ebx
c0011a29:	e8 44 97 ff ff       	call   c000b172 <File::File(char const*, Process*)>
c0011a2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a31:	e8 74 99 ff ff       	call   c000b3aa <File::unlink()>
c0011a36:	83 c4 10             	add    esp,0x10
c0011a39:	85 db                	test   ebx,ebx
c0011a3b:	74 14                	je     c0011a51 <sysCallUnlink(regs*)+0x4e>
c0011a3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a43:	83 ec 0c             	sub    esp,0xc
c0011a46:	53                   	push   ebx
c0011a47:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011a4a:	83 c4 10             	add    esp,0x10
c0011a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a51:	85 c0                	test   eax,eax
c0011a53:	0f 95 c0             	setne  al
c0011a56:	31 d2                	xor    edx,edx
c0011a58:	25 ff 00 00 00       	and    eax,0xff
c0011a5d:	f7 d8                	neg    eax
c0011a5f:	83 d2 00             	adc    edx,0x0
c0011a62:	83 c4 14             	add    esp,0x14
c0011a65:	f7 da                	neg    edx
c0011a67:	5b                   	pop    ebx
c0011a68:	5e                   	pop    esi
c0011a69:	c3                   	ret    

c0011a6a <sysCallGetArgv(regs*)>:
c0011a6a:	83 ec 0c             	sub    esp,0xc
c0011a6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a71:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a74:	85 c0                	test   eax,eax
c0011a76:	78 2c                	js     c0011aa4 <sysCallGetArgv(regs*)+0x3a>
c0011a78:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a7e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011a81:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011a87:	7d 1b                	jge    c0011aa4 <sysCallGetArgv(regs*)+0x3a>
c0011a89:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011a90:	85 c0                	test   eax,eax
c0011a92:	74 18                	je     c0011aac <sysCallGetArgv(regs*)+0x42>
c0011a94:	83 ec 08             	sub    esp,0x8
c0011a97:	50                   	push   eax
c0011a98:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a9b:	50                   	push   eax
c0011a9c:	e8 7f eb fe ff       	call   c0000620 <strcpy>
c0011aa1:	83 c4 10             	add    esp,0x10
c0011aa4:	31 c0                	xor    eax,eax
c0011aa6:	31 d2                	xor    edx,edx
c0011aa8:	83 c4 0c             	add    esp,0xc
c0011aab:	c3                   	ret    
c0011aac:	b8 01 00 00 00       	mov    eax,0x1
c0011ab1:	31 d2                	xor    edx,edx
c0011ab3:	83 c4 0c             	add    esp,0xc
c0011ab6:	c3                   	ret    

c0011ab7 <sysCallUSleep(regs*)>:
c0011ab7:	83 ec 1c             	sub    esp,0x1c
c0011aba:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011abe:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011ac1:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011ac4:	6a 00                	push   0x0
c0011ac6:	6a 64                	push   0x64
c0011ac8:	52                   	push   edx
c0011ac9:	50                   	push   eax
c0011aca:	e8 71 a6 00 00       	call   c001c140 <__udivdi3>
c0011acf:	83 c4 14             	add    esp,0x14
c0011ad2:	50                   	push   eax
c0011ad3:	e8 c8 22 00 00       	call   c0013da0 <milliTenthSleep(unsigned int)>
c0011ad8:	31 c0                	xor    eax,eax
c0011ada:	31 d2                	xor    edx,edx
c0011adc:	83 c4 1c             	add    esp,0x1c
c0011adf:	c3                   	ret    

c0011ae0 <sysCallSpawn(regs*)>:
c0011ae0:	56                   	push   esi
c0011ae1:	53                   	push   ebx
c0011ae2:	50                   	push   eax
c0011ae3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ae7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011aea:	85 c0                	test   eax,eax
c0011aec:	75 08                	jne    c0011af6 <sysCallSpawn(regs*)+0x16>
c0011aee:	59                   	pop    ecx
c0011aef:	31 c0                	xor    eax,eax
c0011af1:	31 d2                	xor    edx,edx
c0011af3:	5b                   	pop    ebx
c0011af4:	5e                   	pop    esi
c0011af5:	c3                   	ret    
c0011af6:	83 ec 0c             	sub    esp,0xc
c0011af9:	68 1f 07 00 00       	push   0x71f
c0011afe:	e8 6a 63 ff ff       	call   c0007e6d <malloc>
c0011b03:	83 c4 10             	add    esp,0x10
c0011b06:	89 c6                	mov    esi,eax
c0011b08:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b0b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b0e:	85 c0                	test   eax,eax
c0011b10:	75 33                	jne    c0011b45 <sysCallSpawn(regs*)+0x65>
c0011b12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b1a:	52                   	push   edx
c0011b1b:	50                   	push   eax
c0011b1c:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011b1f:	53                   	push   ebx
c0011b20:	56                   	push   esi
c0011b21:	e8 5e 19 00 00       	call   c0013484 <Process::Process(char const*, Process*, char**)>
c0011b26:	83 c4 10             	add    esp,0x10
c0011b29:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011b30:	75 bc                	jne    c0011aee <sysCallSpawn(regs*)+0xe>
c0011b32:	83 ec 0c             	sub    esp,0xc
c0011b35:	56                   	push   esi
c0011b36:	e8 3d 1e 00 00       	call   c0013978 <Process::createUserThread()>
c0011b3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b3d:	83 c4 10             	add    esp,0x10
c0011b40:	99                   	cdq    
c0011b41:	59                   	pop    ecx
c0011b42:	5b                   	pop    ebx
c0011b43:	5e                   	pop    esi
c0011b44:	c3                   	ret    
c0011b45:	31 c0                	xor    eax,eax
c0011b47:	eb d1                	jmp    c0011b1a <sysCallSpawn(regs*)+0x3a>

c0011b49 <sysCallGetEnv(regs*)>:
c0011b49:	57                   	push   edi
c0011b4a:	56                   	push   esi
c0011b4b:	53                   	push   ebx
c0011b4c:	83 ec 1c             	sub    esp,0x1c
c0011b4f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b58:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b5b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b5e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b61:	50                   	push   eax
c0011b62:	e8 30 eb ff ff       	call   c0010697 <Krnl::getProcessTotalEnvCount(Process*)>
c0011b67:	83 c4 10             	add    esp,0x10
c0011b6a:	39 c7                	cmp    edi,eax
c0011b6c:	7c 14                	jl     c0011b82 <sysCallGetEnv(regs*)+0x39>
c0011b6e:	85 f6                	test   esi,esi
c0011b70:	75 0b                	jne    c0011b7d <sysCallGetEnv(regs*)+0x34>
c0011b72:	83 c4 10             	add    esp,0x10
c0011b75:	31 c0                	xor    eax,eax
c0011b77:	5b                   	pop    ebx
c0011b78:	31 d2                	xor    edx,edx
c0011b7a:	5e                   	pop    esi
c0011b7b:	5f                   	pop    edi
c0011b7c:	c3                   	ret    
c0011b7d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b80:	eb f0                	jmp    c0011b72 <sysCallGetEnv(regs*)+0x29>
c0011b82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b86:	52                   	push   edx
c0011b87:	57                   	push   edi
c0011b88:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b8e:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011b91:	51                   	push   ecx
c0011b92:	50                   	push   eax
c0011b93:	e8 1f eb ff ff       	call   c00106b7 <Krnl::getProcessEnvPair(Process*, int)>
c0011b98:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011b9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b9f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011ba3:	83 c4 0c             	add    esp,0xc
c0011ba6:	85 db                	test   ebx,ebx
c0011ba8:	75 23                	jne    c0011bcd <sysCallGetEnv(regs*)+0x84>
c0011baa:	83 ec 0c             	sub    esp,0xc
c0011bad:	50                   	push   eax
c0011bae:	e8 ad e9 fe ff       	call   c0000560 <strlen>
c0011bb3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011bb6:	89 c3                	mov    ebx,eax
c0011bb8:	e8 a3 e9 fe ff       	call   c0000560 <strlen>
c0011bbd:	31 d2                	xor    edx,edx
c0011bbf:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011bc3:	83 c4 10             	add    esp,0x10
c0011bc6:	83 c4 10             	add    esp,0x10
c0011bc9:	5b                   	pop    ebx
c0011bca:	5e                   	pop    esi
c0011bcb:	5f                   	pop    edi
c0011bcc:	c3                   	ret    
c0011bcd:	83 ec 08             	sub    esp,0x8
c0011bd0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011bd3:	50                   	push   eax
c0011bd4:	56                   	push   esi
c0011bd5:	e8 46 ea fe ff       	call   c0000620 <strcpy>
c0011bda:	58                   	pop    eax
c0011bdb:	5a                   	pop    edx
c0011bdc:	68 63 e8 01 c0       	push   0xc001e863
c0011be1:	56                   	push   esi
c0011be2:	e8 f9 eb fe ff       	call   c00007e0 <strcat>
c0011be7:	59                   	pop    ecx
c0011be8:	5b                   	pop    ebx
c0011be9:	57                   	push   edi
c0011bea:	56                   	push   esi
c0011beb:	e8 f0 eb fe ff       	call   c00007e0 <strcat>
c0011bf0:	83 c4 10             	add    esp,0x10
c0011bf3:	e9 7a ff ff ff       	jmp    c0011b72 <sysCallGetEnv(regs*)+0x29>

c0011bf8 <sysSetFatAttrib(regs*)>:
c0011bf8:	57                   	push   edi
c0011bf9:	56                   	push   esi
c0011bfa:	53                   	push   ebx
c0011bfb:	83 ec 1c             	sub    esp,0x1c
c0011bfe:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011c02:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011c05:	68 14 01 00 00       	push   0x114
c0011c0a:	e8 5e 62 ff ff       	call   c0007e6d <malloc>
c0011c0f:	83 c4 0c             	add    esp,0xc
c0011c12:	89 c3                	mov    ebx,eax
c0011c14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c1c:	50                   	push   eax
c0011c1d:	57                   	push   edi
c0011c1e:	53                   	push   ebx
c0011c1f:	e8 4e 95 ff ff       	call   c000b172 <File::File(char const*, Process*)>
c0011c24:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011c27:	83 c4 0c             	add    esp,0xc
c0011c2a:	0f b6 d4             	movzx  edx,ah
c0011c2d:	25 ff 00 00 00       	and    eax,0xff
c0011c32:	52                   	push   edx
c0011c33:	50                   	push   eax
c0011c34:	53                   	push   ebx
c0011c35:	e8 0a 98 ff ff       	call   c000b444 <File::chfatattr(unsigned char, unsigned char)>
c0011c3a:	83 c4 10             	add    esp,0x10
c0011c3d:	85 db                	test   ebx,ebx
c0011c3f:	74 14                	je     c0011c55 <sysSetFatAttrib(regs*)+0x5d>
c0011c41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c45:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c47:	83 ec 0c             	sub    esp,0xc
c0011c4a:	53                   	push   ebx
c0011c4b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c4e:	83 c4 10             	add    esp,0x10
c0011c51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c55:	85 c0                	test   eax,eax
c0011c57:	0f 95 c0             	setne  al
c0011c5a:	31 d2                	xor    edx,edx
c0011c5c:	25 ff 00 00 00       	and    eax,0xff
c0011c61:	f7 d8                	neg    eax
c0011c63:	83 d2 00             	adc    edx,0x0
c0011c66:	83 c4 10             	add    esp,0x10
c0011c69:	f7 da                	neg    edx
c0011c6b:	5b                   	pop    ebx
c0011c6c:	5e                   	pop    esi
c0011c6d:	5f                   	pop    edi
c0011c6e:	c3                   	ret    

c0011c6f <sysPipe(regs*)>:
c0011c6f:	57                   	push   edi
c0011c70:	56                   	push   esi
c0011c71:	53                   	push   ebx
c0011c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c76:	83 ec 0c             	sub    esp,0xc
c0011c79:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c7c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c7f:	6a 20                	push   0x20
c0011c81:	e8 e7 61 ff ff       	call   c0007e6d <malloc>
c0011c86:	89 c3                	mov    ebx,eax
c0011c88:	58                   	pop    eax
c0011c89:	5a                   	pop    edx
c0011c8a:	68 00 50 00 00       	push   0x5000
c0011c8f:	53                   	push   ebx
c0011c90:	e8 cf 6b ff ff       	call   c0008864 <Pipe::Pipe(int)>
c0011c95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c98:	e8 c1 78 ff ff       	call   c000955e <UnixFile::getFileDescriptor()>
c0011c9d:	89 07                	mov    DWORD PTR [edi],eax
c0011c9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ca2:	e8 b7 78 ff ff       	call   c000955e <UnixFile::getFileDescriptor()>
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	89 06                	mov    DWORD PTR [esi],eax
c0011cac:	31 d2                	xor    edx,edx
c0011cae:	5b                   	pop    ebx
c0011caf:	31 c0                	xor    eax,eax
c0011cb1:	5e                   	pop    esi
c0011cb2:	5f                   	pop    edi
c0011cb3:	c3                   	ret    

c0011cb4 <sysGetUnixTime(regs*)>:
c0011cb4:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0011cb9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011cbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cc3:	e9 ba 9e ff ff       	jmp    c000bb82 <Clock::timeInSecondsLocal()>

c0011cc8 <string_ends_with(char const*, char const*)>:
c0011cc8:	57                   	push   edi
c0011cc9:	56                   	push   esi
c0011cca:	53                   	push   ebx
c0011ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ccf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011cd3:	83 ec 0c             	sub    esp,0xc
c0011cd6:	53                   	push   ebx
c0011cd7:	e8 84 e8 fe ff       	call   c0000560 <strlen>
c0011cdc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011cdf:	89 c6                	mov    esi,eax
c0011ce1:	e8 7a e8 fe ff       	call   c0000560 <strlen>
c0011ce6:	83 c4 10             	add    esp,0x10
c0011ce9:	39 c6                	cmp    esi,eax
c0011ceb:	7d 06                	jge    c0011cf3 <string_ends_with(char const*, char const*)+0x2b>
c0011ced:	5b                   	pop    ebx
c0011cee:	31 c0                	xor    eax,eax
c0011cf0:	5e                   	pop    esi
c0011cf1:	5f                   	pop    edi
c0011cf2:	c3                   	ret    
c0011cf3:	83 ec 08             	sub    esp,0x8
c0011cf6:	29 c6                	sub    esi,eax
c0011cf8:	57                   	push   edi
c0011cf9:	01 f3                	add    ebx,esi
c0011cfb:	53                   	push   ebx
c0011cfc:	e8 ff e9 fe ff       	call   c0000700 <strcmp>
c0011d01:	83 c4 10             	add    esp,0x10
c0011d04:	85 c0                	test   eax,eax
c0011d06:	5b                   	pop    ebx
c0011d07:	0f 94 c0             	sete   al
c0011d0a:	5e                   	pop    esi
c0011d0b:	25 ff 00 00 00       	and    eax,0xff
c0011d10:	5f                   	pop    edi
c0011d11:	c3                   	ret    

c0011d12 <sysCallOpen(regs*)>:
c0011d12:	56                   	push   esi
c0011d13:	53                   	push   ebx
c0011d14:	81 ec 04 01 00 00    	sub    esp,0x104
c0011d1a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011d21:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011d24:	85 c9                	test   ecx,ecx
c0011d26:	0f 84 b9 01 00 00    	je     c0011ee5 <sysCallOpen(regs*)+0x1d3>
c0011d2c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d2f:	85 c0                	test   eax,eax
c0011d31:	0f 84 ae 01 00 00    	je     c0011ee5 <sysCallOpen(regs*)+0x1d3>
c0011d37:	52                   	push   edx
c0011d38:	68 65 e8 01 c0       	push   0xc001e865
c0011d3d:	50                   	push   eax
c0011d3e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011d42:	56                   	push   esi
c0011d43:	e8 80 92 ff ff       	call   c000afc8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011d48:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d4b:	e8 10 e8 fe ff       	call   c0000560 <strlen>
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	48                   	dec    eax
c0011d54:	74 1d                	je     c0011d73 <sysCallOpen(regs*)+0x61>
c0011d56:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011d59:	eb 0f                	jmp    c0011d6a <sysCallOpen(regs*)+0x58>
c0011d5b:	80 fa 3a             	cmp    dl,0x3a
c0011d5e:	74 0f                	je     c0011d6f <sysCallOpen(regs*)+0x5d>
c0011d60:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011d64:	48                   	dec    eax
c0011d65:	74 0c                	je     c0011d73 <sysCallOpen(regs*)+0x61>
c0011d67:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011d6a:	80 fa 2e             	cmp    dl,0x2e
c0011d6d:	75 ec                	jne    c0011d5b <sysCallOpen(regs*)+0x49>
c0011d6f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011d73:	83 ec 08             	sub    esp,0x8
c0011d76:	68 69 e8 01 c0       	push   0xc001e869
c0011d7b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d7e:	50                   	push   eax
c0011d7f:	e8 44 ff ff ff       	call   c0011cc8 <string_ends_with(char const*, char const*)>
c0011d84:	83 c4 10             	add    esp,0x10
c0011d87:	85 c0                	test   eax,eax
c0011d89:	74 1d                	je     c0011da8 <sysCallOpen(regs*)+0x96>
c0011d8b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d8e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d9b:	81 c4 04 01 00 00    	add    esp,0x104
c0011da1:	31 c0                	xor    eax,eax
c0011da3:	31 d2                	xor    edx,edx
c0011da5:	5b                   	pop    ebx
c0011da6:	5e                   	pop    esi
c0011da7:	c3                   	ret    
c0011da8:	83 ec 08             	sub    esp,0x8
c0011dab:	68 6e e8 01 c0       	push   0xc001e86e
c0011db0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011db3:	50                   	push   eax
c0011db4:	e8 0f ff ff ff       	call   c0011cc8 <string_ends_with(char const*, char const*)>
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	85 c0                	test   eax,eax
c0011dbe:	75 cb                	jne    c0011d8b <sysCallOpen(regs*)+0x79>
c0011dc0:	83 ec 08             	sub    esp,0x8
c0011dc3:	68 6a e8 01 c0       	push   0xc001e86a
c0011dc8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dcb:	50                   	push   eax
c0011dcc:	e8 2f e9 fe ff       	call   c0000700 <strcmp>
c0011dd1:	83 c4 10             	add    esp,0x10
c0011dd4:	85 c0                	test   eax,eax
c0011dd6:	74 b3                	je     c0011d8b <sysCallOpen(regs*)+0x79>
c0011dd8:	83 ec 08             	sub    esp,0x8
c0011ddb:	68 69 e8 01 c0       	push   0xc001e869
c0011de0:	56                   	push   esi
c0011de1:	e8 e2 fe ff ff       	call   c0011cc8 <string_ends_with(char const*, char const*)>
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	85 c0                	test   eax,eax
c0011deb:	75 9e                	jne    c0011d8b <sysCallOpen(regs*)+0x79>
c0011ded:	83 ec 08             	sub    esp,0x8
c0011df0:	68 73 e8 01 c0       	push   0xc001e873
c0011df5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011df8:	50                   	push   eax
c0011df9:	e8 ca fe ff ff       	call   c0011cc8 <string_ends_with(char const*, char const*)>
c0011dfe:	83 c4 10             	add    esp,0x10
c0011e01:	85 c0                	test   eax,eax
c0011e03:	0f 85 ef 00 00 00    	jne    c0011ef8 <sysCallOpen(regs*)+0x1e6>
c0011e09:	83 ec 08             	sub    esp,0x8
c0011e0c:	68 78 e8 01 c0       	push   0xc001e878
c0011e11:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e14:	50                   	push   eax
c0011e15:	e8 ae fe ff ff       	call   c0011cc8 <string_ends_with(char const*, char const*)>
c0011e1a:	83 c4 10             	add    esp,0x10
c0011e1d:	85 c0                	test   eax,eax
c0011e1f:	0f 85 d3 00 00 00    	jne    c0011ef8 <sysCallOpen(regs*)+0x1e6>
c0011e25:	83 ec 08             	sub    esp,0x8
c0011e28:	68 74 e8 01 c0       	push   0xc001e874
c0011e2d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e30:	51                   	push   ecx
c0011e31:	e8 ca e8 fe ff       	call   c0000700 <strcmp>
c0011e36:	83 c4 10             	add    esp,0x10
c0011e39:	85 c0                	test   eax,eax
c0011e3b:	0f 84 b7 00 00 00    	je     c0011ef8 <sysCallOpen(regs*)+0x1e6>
c0011e41:	83 ec 08             	sub    esp,0x8
c0011e44:	68 73 e8 01 c0       	push   0xc001e873
c0011e49:	56                   	push   esi
c0011e4a:	e8 79 fe ff ff       	call   c0011cc8 <string_ends_with(char const*, char const*)>
c0011e4f:	83 c4 10             	add    esp,0x10
c0011e52:	85 c0                	test   eax,eax
c0011e54:	0f 85 9e 00 00 00    	jne    c0011ef8 <sysCallOpen(regs*)+0x1e6>
c0011e5a:	83 ec 0c             	sub    esp,0xc
c0011e5d:	68 14 01 00 00       	push   0x114
c0011e62:	e8 06 60 ff ff       	call   c0007e6d <malloc>
c0011e67:	83 c4 0c             	add    esp,0xc
c0011e6a:	89 c6                	mov    esi,eax
c0011e6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e74:	50                   	push   eax
c0011e75:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e78:	52                   	push   edx
c0011e79:	56                   	push   esi
c0011e7a:	e8 f3 92 ff ff       	call   c000b172 <File::File(char const*, Process*)>
c0011e7f:	83 c4 10             	add    esp,0x10
c0011e82:	85 f6                	test   esi,esi
c0011e84:	74 5f                	je     c0011ee5 <sysCallOpen(regs*)+0x1d3>
c0011e86:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e89:	89 d0                	mov    eax,edx
c0011e8b:	25 ff 00 00 00       	and    eax,0xff
c0011e90:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e93:	89 d0                	mov    eax,edx
c0011e95:	83 e0 01             	and    eax,0x1
c0011e98:	f6 c2 02             	test   dl,0x2
c0011e9b:	74 03                	je     c0011ea0 <sysCallOpen(regs*)+0x18e>
c0011e9d:	83 c8 02             	or     eax,0x2
c0011ea0:	f6 c2 04             	test   dl,0x4
c0011ea3:	74 03                	je     c0011ea8 <sysCallOpen(regs*)+0x196>
c0011ea5:	83 c8 04             	or     eax,0x4
c0011ea8:	f6 c2 08             	test   dl,0x8
c0011eab:	74 03                	je     c0011eb0 <sysCallOpen(regs*)+0x19e>
c0011ead:	83 c8 0a             	or     eax,0xa
c0011eb0:	83 e2 10             	and    edx,0x10
c0011eb3:	74 03                	je     c0011eb8 <sysCallOpen(regs*)+0x1a6>
c0011eb5:	83 c8 12             	or     eax,0x12
c0011eb8:	83 ec 08             	sub    esp,0x8
c0011ebb:	50                   	push   eax
c0011ebc:	56                   	push   esi
c0011ebd:	e8 70 93 ff ff       	call   c000b232 <File::open(FileOpenMode)>
c0011ec2:	83 c4 10             	add    esp,0x10
c0011ec5:	85 c0                	test   eax,eax
c0011ec7:	75 1c                	jne    c0011ee5 <sysCallOpen(regs*)+0x1d3>
c0011ec9:	83 ec 0c             	sub    esp,0xc
c0011ecc:	56                   	push   esi
c0011ecd:	e8 8c 76 ff ff       	call   c000955e <UnixFile::getFileDescriptor()>
c0011ed2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ed5:	83 c4 10             	add    esp,0x10
c0011ed8:	89 02                	mov    DWORD PTR [edx],eax
c0011eda:	c1 f8 1f             	sar    eax,0x1f
c0011edd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ee0:	e9 b6 fe ff ff       	jmp    c0011d9b <sysCallOpen(regs*)+0x89>
c0011ee5:	81 c4 04 01 00 00    	add    esp,0x104
c0011eeb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ef0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ef5:	5b                   	pop    ebx
c0011ef6:	5e                   	pop    esi
c0011ef7:	c3                   	ret    
c0011ef8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011efb:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011f01:	e9 8e fe ff ff       	jmp    c0011d94 <sysCallOpen(regs*)+0x82>

c0011f06 <Sys::loadSyscalls()>:
c0011f06:	c7 05 20 34 02 c0 e2 12 01 c0 	mov    DWORD PTR ds:0xc0023420,0xc00112e2
c0011f10:	c7 05 24 34 02 c0 d9 0e 01 c0 	mov    DWORD PTR ds:0xc0023424,0xc0010ed9
c0011f1a:	c7 05 28 34 02 c0 c8 10 01 c0 	mov    DWORD PTR ds:0xc0023428,0xc00110c8
c0011f24:	c7 05 2c 34 02 c0 18 12 01 c0 	mov    DWORD PTR ds:0xc002342c,0xc0011218
c0011f2e:	c7 05 30 34 02 c0 60 10 01 c0 	mov    DWORD PTR ds:0xc0023430,0xc0011060
c0011f38:	c7 05 34 34 02 c0 10 0f 01 c0 	mov    DWORD PTR ds:0xc0023434,0xc0010f10
c0011f42:	c7 05 38 34 02 c0 f1 0e 01 c0 	mov    DWORD PTR ds:0xc0023438,0xc0010ef1
c0011f4c:	c7 05 3c 34 02 c0 1d 11 01 c0 	mov    DWORD PTR ds:0xc002343c,0xc001111d
c0011f56:	c7 05 44 34 02 c0 ac 17 01 c0 	mov    DWORD PTR ds:0xc0023444,0xc00117ac
c0011f60:	c7 05 40 34 02 c0 12 1d 01 c0 	mov    DWORD PTR ds:0xc0023440,0xc0011d12
c0011f6a:	c7 05 48 34 02 c0 0c 18 01 c0 	mov    DWORD PTR ds:0xc0023448,0xc001180c
c0011f74:	c7 05 4c 34 02 c0 e0 14 01 c0 	mov    DWORD PTR ds:0xc002344c,0xc00114e0
c0011f7e:	c7 05 50 34 02 c0 07 13 01 c0 	mov    DWORD PTR ds:0xc0023450,0xc0011307
c0011f88:	c7 05 54 34 02 c0 0c 13 01 c0 	mov    DWORD PTR ds:0xc0023454,0xc001130c
c0011f92:	c7 05 58 34 02 c0 d7 18 01 c0 	mov    DWORD PTR ds:0xc0023458,0xc00118d7
c0011f9c:	c7 05 5c 34 02 c0 83 18 01 c0 	mov    DWORD PTR ds:0xc002345c,0xc0011883
c0011fa6:	c7 05 60 34 02 c0 bc 15 01 c0 	mov    DWORD PTR ds:0xc0023460,0xc00115bc
c0011fb0:	c7 05 64 34 02 c0 15 16 01 c0 	mov    DWORD PTR ds:0xc0023464,0xc0011615
c0011fba:	c7 05 68 34 02 c0 84 16 01 c0 	mov    DWORD PTR ds:0xc0023468,0xc0011684
c0011fc4:	c7 05 6c 34 02 c0 11 13 01 c0 	mov    DWORD PTR ds:0xc002346c,0xc0011311
c0011fce:	c7 05 70 34 02 c0 49 19 01 c0 	mov    DWORD PTR ds:0xc0023470,0xc0011949
c0011fd8:	c7 05 74 34 02 c0 66 19 01 c0 	mov    DWORD PTR ds:0xc0023474,0xc0011966
c0011fe2:	c7 05 78 34 02 c0 66 19 01 c0 	mov    DWORD PTR ds:0xc0023478,0xc0011966
c0011fec:	c7 05 7c 34 02 c0 9c 19 01 c0 	mov    DWORD PTR ds:0xc002347c,0xc001199c
c0011ff6:	c7 05 80 34 02 c0 03 1a 01 c0 	mov    DWORD PTR ds:0xc0023480,0xc0011a03
c0012000:	c7 05 84 34 02 c0 1b 13 01 c0 	mov    DWORD PTR ds:0xc0023484,0xc001131b
c001200a:	c7 05 88 34 02 c0 6a 1a 01 c0 	mov    DWORD PTR ds:0xc0023488,0xc0011a6a
c0012014:	c7 05 8c 34 02 c0 9d 14 01 c0 	mov    DWORD PTR ds:0xc002348c,0xc001149d
c001201e:	c7 05 90 34 02 c0 2b 13 01 c0 	mov    DWORD PTR ds:0xc0023490,0xc001132b
c0012028:	c7 05 94 34 02 c0 60 15 01 c0 	mov    DWORD PTR ds:0xc0023494,0xc0011560
c0012032:	c7 05 98 34 02 c0 b7 1a 01 c0 	mov    DWORD PTR ds:0xc0023498,0xc0011ab7
c001203c:	c7 05 9c 34 02 c0 f9 16 01 c0 	mov    DWORD PTR ds:0xc002349c,0xc00116f9
c0012046:	c7 05 a0 34 02 c0 e0 1a 01 c0 	mov    DWORD PTR ds:0xc00234a0,0xc0011ae0
c0012050:	c7 05 a4 34 02 c0 49 1b 01 c0 	mov    DWORD PTR ds:0xc00234a4,0xc0011b49
c001205a:	c7 05 ac 34 02 c0 33 13 01 c0 	mov    DWORD PTR ds:0xc00234ac,0xc0011333
c0012064:	c7 05 b0 34 02 c0 a0 13 01 c0 	mov    DWORD PTR ds:0xc00234b0,0xc00113a0
c001206e:	c7 05 b4 34 02 c0 ea 13 01 c0 	mov    DWORD PTR ds:0xc00234b4,0xc00113ea
c0012078:	c7 05 b8 34 02 c0 f8 1b 01 c0 	mov    DWORD PTR ds:0xc00234b8,0xc0011bf8
c0012082:	c7 05 bc 34 02 c0 81 19 01 c0 	mov    DWORD PTR ds:0xc00234bc,0xc0011981
c001208c:	c7 05 c0 34 02 c0 3f 14 01 c0 	mov    DWORD PTR ds:0xc00234c0,0xc001143f
c0012096:	c7 05 c4 34 02 c0 6f 1c 01 c0 	mov    DWORD PTR ds:0xc00234c4,0xc0011c6f
c00120a0:	c7 05 c8 34 02 c0 b4 1c 01 c0 	mov    DWORD PTR ds:0xc00234c8,0xc0011cb4
c00120aa:	c7 05 cc 34 02 c0 b8 0f 01 c0 	mov    DWORD PTR ds:0xc00234cc,0xc0010fb8
c00120b4:	c7 05 d0 34 02 c0 39 11 01 c0 	mov    DWORD PTR ds:0xc00234d0,0xc0011139
c00120be:	c7 05 d4 34 02 c0 ce 11 01 c0 	mov    DWORD PTR ds:0xc00234d4,0xc00111ce
c00120c8:	c7 05 d8 34 02 c0 a3 0e 01 c0 	mov    DWORD PTR ds:0xc00234d8,0xc0010ea3
c00120d2:	c7 05 dc 34 02 c0 80 12 01 c0 	mov    DWORD PTR ds:0xc00234dc,0xc0011280
c00120dc:	c7 05 e0 34 02 c0 1c 0f 01 c0 	mov    DWORD PTR ds:0xc00234e0,0xc0010f1c
c00120e6:	c7 05 e4 34 02 c0 36 0f 01 c0 	mov    DWORD PTR ds:0xc00234e4,0xc0010f36
c00120f0:	c3                   	ret    

c00120f1 <Sys::systemCall(regs*, void*)>:
c00120f1:	53                   	push   ebx
c00120f2:	83 ec 08             	sub    esp,0x8
c00120f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120f9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00120fc:	83 f8 7f             	cmp    eax,0x7f
c00120ff:	77 16                	ja     c0012117 <Sys::systemCall(regs*, void*)+0x26>
c0012101:	8b 14 85 20 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcbe0]
c0012108:	85 d2                	test   edx,edx
c001210a:	74 0b                	je     c0012117 <Sys::systemCall(regs*, void*)+0x26>
c001210c:	83 ec 0c             	sub    esp,0xc
c001210f:	53                   	push   ebx
c0012110:	ff d2                	call   edx
c0012112:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012115:	eb 0d                	jmp    c0012124 <Sys::systemCall(regs*, void*)+0x33>
c0012117:	52                   	push   edx
c0012118:	52                   	push   edx
c0012119:	50                   	push   eax
c001211a:	68 7d e8 01 c0       	push   0xc001e87d
c001211f:	e8 d8 8a ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0012124:	83 c4 10             	add    esp,0x10
c0012127:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001212c:	31 d2                	xor    edx,edx
c001212e:	83 c4 08             	add    esp,0x8
c0012131:	5b                   	pop    ebx
c0012132:	c3                   	ret    

c0012133 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0012133:	55                   	push   ebp
c0012134:	57                   	push   edi
c0012135:	56                   	push   esi
c0012136:	53                   	push   ebx
c0012137:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001213d:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0012145:	0f 95 c2             	setne  dl
c0012148:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0012150:	0f 94 c0             	sete   al
c0012153:	84 c2                	test   dl,al
c0012155:	74 34                	je     c001218b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012157:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0012162:	74 27                	je     c001218b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012164:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001216b:	05 00 10 00 00       	add    eax,0x1000
c0012170:	89 c1                	mov    ecx,eax
c0012172:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012177:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001217d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012184:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001218b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0012192:	83 ec 0c             	sub    esp,0xc
c0012195:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001219b:	6a 01                	push   0x1
c001219d:	e8 07 78 ff ff       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c00121a2:	83 c4 10             	add    esp,0x10
c00121a5:	89 c3                	mov    ebx,eax
c00121a7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00121ad:	0f 86 25 01 00 00    	jbe    c00122d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c00121b3:	c1 ee 0c             	shr    esi,0xc
c00121b6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00121bd:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00121c1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121c9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00121d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121d4:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00121db:	29 ef                	sub    edi,ebp
c00121dd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00121e1:	0f 83 f8 00 00 00    	jae    c00122df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c00121e7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00121ed:	76 05                	jbe    c00121f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c00121ef:	bf 00 10 00 00       	mov    edi,0x1000
c00121f4:	83 ec 0c             	sub    esp,0xc
c00121f7:	31 d2                	xor    edx,edx
c00121f9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012200:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012202:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012206:	50                   	push   eax
c0012207:	8d 74 24 30          	lea    esi,[esp+0x30]
c001220b:	56                   	push   esi
c001220c:	52                   	push   edx
c001220d:	57                   	push   edi
c001220e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0012215:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012218:	83 c4 20             	add    esp,0x20
c001221b:	85 c0                	test   eax,eax
c001221d:	75 06                	jne    c0012225 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c001221f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012223:	74 13                	je     c0012238 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0012225:	83 ec 0c             	sub    esp,0xc
c0012228:	53                   	push   ebx
c0012229:	e8 ab 7a ff ff       	call   c0009cd9 <Virt::freeKernelVirtualPages(unsigned long)>
c001222e:	83 c4 10             	add    esp,0x10
c0012231:	31 c0                	xor    eax,eax
c0012233:	e9 7c 01 00 00       	jmp    c00123b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0012238:	fa                   	cli    
c0012239:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c001223f:	e8 f6 5f ff ff       	call   c000823a <Phys::allocatePage()>
c0012244:	6a 07                	push   0x7
c0012246:	89 c7                	mov    edi,eax
c0012248:	53                   	push   ebx
c0012249:	50                   	push   eax
c001224a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001224f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012252:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012258:	e8 e1 7d ff ff       	call   c000a03e <VAS::mapPage(unsigned long, unsigned long, int)>
c001225d:	83 c4 0c             	add    esp,0xc
c0012260:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012267:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001226d:	6a 00                	push   0x0
c001226f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012274:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012277:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001227d:	e8 2e 7c ff ff       	call   c0009eb0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012282:	58                   	pop    eax
c0012283:	5a                   	pop    edx
c0012284:	68 07 0c 00 00       	push   0xc07
c0012289:	55                   	push   ebp
c001228a:	57                   	push   edi
c001228b:	89 df                	mov    edi,ebx
c001228d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012294:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001229a:	6a 00                	push   0x0
c001229c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122a4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122aa:	e8 4f 81 ff ff       	call   c000a3fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00122af:	b9 00 10 00 00       	mov    ecx,0x1000
c00122b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00122b6:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c00122bb:	83 c4 20             	add    esp,0x20
c00122be:	48                   	dec    eax
c00122bf:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c00122c4:	85 c0                	test   eax,eax
c00122c6:	75 01                	jne    c00122c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c00122c8:	fb                   	sti    
c00122c9:	81 c5 00 10 00 00    	add    ebp,0x1000
c00122cf:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00122d3:	e9 f1 fe ff ff       	jmp    c00121c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c00122d8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00122df:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00122e6:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00122ec:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00122f2:	0f 86 ae 00 00 00    	jbe    c00123a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00122f8:	fa                   	cli    
c00122f9:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c00122ff:	c1 ee 0c             	shr    esi,0xc
c0012302:	51                   	push   ecx
c0012303:	31 ff                	xor    edi,edi
c0012305:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001230c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012312:	6a 00                	push   0x0
c0012314:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012319:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001231c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012322:	e8 89 7b ff ff       	call   c0009eb0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012327:	83 c4 10             	add    esp,0x10
c001232a:	e8 0b 5f ff ff       	call   c000823a <Phys::allocatePage()>
c001232f:	47                   	inc    edi
c0012330:	6a 07                	push   0x7
c0012332:	53                   	push   ebx
c0012333:	50                   	push   eax
c0012334:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012338:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001233e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012341:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012347:	e8 f2 7c ff ff       	call   c000a03e <VAS::mapPage(unsigned long, unsigned long, int)>
c001234c:	58                   	pop    eax
c001234d:	5a                   	pop    edx
c001234e:	68 07 0c 00 00       	push   0xc07
c0012353:	55                   	push   ebp
c0012354:	81 c5 00 10 00 00    	add    ebp,0x1000
c001235a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001235e:	50                   	push   eax
c001235f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012366:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001236c:	6a 00                	push   0x0
c001236e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012373:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012376:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001237c:	e8 7d 80 ff ff       	call   c000a3fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012381:	83 c4 1c             	add    esp,0x1c
c0012384:	68 00 10 00 00       	push   0x1000
c0012389:	6a 00                	push   0x0
c001238b:	53                   	push   ebx
c001238c:	e8 5f e1 fe ff       	call   c00004f0 <memset>
c0012391:	83 c4 10             	add    esp,0x10
c0012394:	39 fe                	cmp    esi,edi
c0012396:	77 92                	ja     c001232a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012398:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c001239d:	48                   	dec    eax
c001239e:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c00123a3:	75 01                	jne    c00123a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00123a5:	fb                   	sti    
c00123a6:	83 ec 0c             	sub    esp,0xc
c00123a9:	53                   	push   ebx
c00123aa:	e8 2a 79 ff ff       	call   c0009cd9 <Virt::freeKernelVirtualPages(unsigned long)>
c00123af:	83 c4 10             	add    esp,0x10
c00123b2:	b0 01                	mov    al,0x1
c00123b4:	81 c4 2c 10 00 00    	add    esp,0x102c
c00123ba:	5b                   	pop    ebx
c00123bb:	5e                   	pop    esi
c00123bc:	5f                   	pop    edi
c00123bd:	5d                   	pop    ebp
c00123be:	c3                   	ret    

c00123bf <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00123bf:	55                   	push   ebp
c00123c0:	57                   	push   edi
c00123c1:	56                   	push   esi
c00123c2:	53                   	push   ebx
c00123c3:	83 ec 48             	sub    esp,0x48
c00123c6:	68 14 01 00 00       	push   0x114
c00123cb:	e8 9d 5a ff ff       	call   c0007e6d <malloc>
c00123d0:	83 c4 0c             	add    esp,0xc
c00123d3:	89 c6                	mov    esi,eax
c00123d5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00123d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123dd:	50                   	push   eax
c00123de:	e8 8f 8d ff ff       	call   c000b172 <File::File(char const*, Process*)>
c00123e3:	58                   	pop    eax
c00123e4:	5a                   	pop    edx
c00123e5:	6a 01                	push   0x1
c00123e7:	56                   	push   esi
c00123e8:	e8 45 8e ff ff       	call   c000b232 <File::open(FileOpenMode)>
c00123ed:	83 c4 10             	add    esp,0x10
c00123f0:	85 c0                	test   eax,eax
c00123f2:	0f 85 47 01 00 00    	jne    c001253f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123f8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0012400:	83 ec 0c             	sub    esp,0xc
c0012403:	6a 34                	push   0x34
c0012405:	e8 63 5a ff ff       	call   c0007e6d <malloc>
c001240a:	89 c3                	mov    ebx,eax
c001240c:	58                   	pop    eax
c001240d:	8b 06                	mov    eax,DWORD PTR [esi]
c001240f:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0012413:	57                   	push   edi
c0012414:	53                   	push   ebx
c0012415:	6a 00                	push   0x0
c0012417:	6a 34                	push   0x34
c0012419:	56                   	push   esi
c001241a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001241d:	83 c4 20             	add    esp,0x20
c0012420:	85 c0                	test   eax,eax
c0012422:	0f 85 17 01 00 00    	jne    c001253f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012428:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001242e:	0f 85 0b 01 00 00    	jne    c001253f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012434:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012437:	85 c0                	test   eax,eax
c0012439:	0f 84 00 01 00 00    	je     c001253f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001243f:	31 d2                	xor    edx,edx
c0012441:	55                   	push   ebp
c0012442:	52                   	push   edx
c0012443:	50                   	push   eax
c0012444:	56                   	push   esi
c0012445:	e8 a6 8e ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c001244a:	83 c4 10             	add    esp,0x10
c001244d:	85 c0                	test   eax,eax
c001244f:	0f 85 ea 00 00 00    	jne    c001253f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012455:	83 ec 0c             	sub    esp,0xc
c0012458:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001245b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001245f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012463:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012467:	0f af c2             	imul   eax,edx
c001246a:	50                   	push   eax
c001246b:	e8 fd 59 ff ff       	call   c0007e6d <malloc>
c0012470:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012472:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012476:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012479:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001247d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012481:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012485:	0f af c2             	imul   eax,edx
c0012488:	99                   	cdq    
c0012489:	52                   	push   edx
c001248a:	50                   	push   eax
c001248b:	56                   	push   esi
c001248c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001248f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012492:	83 c4 20             	add    esp,0x20
c0012495:	85 c0                	test   eax,eax
c0012497:	0f 84 a2 00 00 00    	je     c001253f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001249d:	31 d2                	xor    edx,edx
c001249f:	51                   	push   ecx
c00124a0:	52                   	push   edx
c00124a1:	50                   	push   eax
c00124a2:	56                   	push   esi
c00124a3:	e8 48 8e ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c00124a8:	83 c4 10             	add    esp,0x10
c00124ab:	85 c0                	test   eax,eax
c00124ad:	0f 85 8c 00 00 00    	jne    c001253f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00124b3:	83 ec 0c             	sub    esp,0xc
c00124b6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00124ba:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00124be:	31 ed                	xor    ebp,ebp
c00124c0:	0f af c2             	imul   eax,edx
c00124c3:	50                   	push   eax
c00124c4:	e8 a4 59 ff ff       	call   c0007e6d <malloc>
c00124c9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00124cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00124d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00124da:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00124de:	0f af c2             	imul   eax,edx
c00124e1:	99                   	cdq    
c00124e2:	52                   	push   edx
c00124e3:	50                   	push   eax
c00124e4:	56                   	push   esi
c00124e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124e8:	83 c4 20             	add    esp,0x20
c00124eb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00124f3:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00124f7:	0f 86 80 00 00 00    	jbe    c001257d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00124fd:	0f b7 fd             	movzx  edi,bp
c0012500:	c1 e7 05             	shl    edi,0x5
c0012503:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0012507:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001250a:	75 6b                	jne    c0012577 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001250c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001250f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012513:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012516:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001251a:	52                   	push   edx
c001251b:	31 d2                	xor    edx,edx
c001251d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012520:	52                   	push   edx
c0012521:	50                   	push   eax
c0012522:	56                   	push   esi
c0012523:	e8 c8 8d ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c0012528:	83 c4 10             	add    esp,0x10
c001252b:	85 c0                	test   eax,eax
c001252d:	74 17                	je     c0012546 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001252f:	83 ec 0c             	sub    esp,0xc
c0012532:	68 91 e8 01 c0       	push   0xc001e891
c0012537:	e8 c0 86 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001253c:	83 c4 10             	add    esp,0x10
c001253f:	31 c0                	xor    eax,eax
c0012541:	e9 87 00 00 00       	jmp    c00125cd <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012546:	83 ec 0c             	sub    esp,0xc
c0012549:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001254c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001254f:	50                   	push   eax
c0012550:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012554:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012558:	56                   	push   esi
c0012559:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001255d:	e8 d1 fb ff ff       	call   c0012133 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012562:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012566:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001256a:	83 c4 20             	add    esp,0x20
c001256d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012571:	73 04                	jae    c0012577 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012573:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012577:	45                   	inc    ebp
c0012578:	e9 76 ff ff ff       	jmp    c00124f3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001257d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012585:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012589:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001258f:	83 ec 0c             	sub    esp,0xc
c0012592:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012598:	25 00 f0 ff ff       	and    eax,0xfffff000
c001259d:	05 00 10 00 00       	add    eax,0x1000
c00125a2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00125a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a9:	e8 cf 58 ff ff       	call   c0007e7d <free>
c00125ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125b1:	e8 c7 58 ff ff       	call   c0007e7d <free>
c00125b6:	58                   	pop    eax
c00125b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125bb:	e8 bd 58 ff ff       	call   c0007e7d <free>
c00125c0:	89 34 24             	mov    DWORD PTR [esp],esi
c00125c3:	e8 c8 8c ff ff       	call   c000b290 <File::close()>
c00125c8:	83 c4 10             	add    esp,0x10
c00125cb:	b0 01                	mov    al,0x1
c00125cd:	83 c4 3c             	add    esp,0x3c
c00125d0:	5b                   	pop    ebx
c00125d1:	5e                   	pop    esi
c00125d2:	5f                   	pop    edi
c00125d3:	5d                   	pop    ebp
c00125d4:	c3                   	ret    

c00125d5 <Thr::runtimeReferenceHelper()>:
c00125d5:	83 ec 18             	sub    esp,0x18
c00125d8:	68 99 e8 01 c0       	push   0xc001e899
c00125dd:	e8 1a 86 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c00125e2:	fa                   	cli    
c00125e3:	83 c4 10             	add    esp,0x10
c00125e6:	eb fe                	jmp    c00125e6 <Thr::runtimeReferenceHelper()+0x11>

c00125e8 <Thr::getAddressOfKernelSymbol(char const*)>:
c00125e8:	57                   	push   edi
c00125e9:	56                   	push   esi
c00125ea:	53                   	push   ebx
c00125eb:	31 db                	xor    ebx,ebx
c00125ed:	39 1d c0 3d 02 c0    	cmp    DWORD PTR ds:0xc0023dc0,ebx
c00125f3:	7e 3c                	jle    c0012631 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00125f5:	8b 34 9d 40 3d 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc2c0]
c00125fc:	31 ff                	xor    edi,edi
c00125fe:	39 3c 9d 40 3c 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc3c0],edi
c0012605:	7e 27                	jle    c001262e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0012607:	50                   	push   eax
c0012608:	50                   	push   eax
c0012609:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001260d:	8b 06                	mov    eax,DWORD PTR [esi]
c001260f:	03 04 9d c0 3c 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc340]
c0012616:	50                   	push   eax
c0012617:	e8 e4 e0 fe ff       	call   c0000700 <strcmp>
c001261c:	83 c4 10             	add    esp,0x10
c001261f:	85 c0                	test   eax,eax
c0012621:	75 05                	jne    c0012628 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0012623:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012626:	eb 0b                	jmp    c0012633 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012628:	83 c6 10             	add    esi,0x10
c001262b:	47                   	inc    edi
c001262c:	eb d0                	jmp    c00125fe <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001262e:	43                   	inc    ebx
c001262f:	eb bc                	jmp    c00125ed <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0012631:	31 c0                	xor    eax,eax
c0012633:	5b                   	pop    ebx
c0012634:	5e                   	pop    esi
c0012635:	5f                   	pop    edi
c0012636:	c3                   	ret    

c0012637 <Thr::loadKernelSymbolTable(char const*)>:
c0012637:	55                   	push   ebp
c0012638:	57                   	push   edi
c0012639:	56                   	push   esi
c001263a:	53                   	push   ebx
c001263b:	83 ec 68             	sub    esp,0x68
c001263e:	8b 35 10 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023e10
c0012644:	68 14 01 00 00       	push   0x114
c0012649:	e8 1f 58 ff ff       	call   c0007e6d <malloc>
c001264e:	83 c4 0c             	add    esp,0xc
c0012651:	89 c3                	mov    ebx,eax
c0012653:	56                   	push   esi
c0012654:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012658:	50                   	push   eax
c0012659:	e8 14 8b ff ff       	call   c000b172 <File::File(char const*, Process*)>
c001265e:	5e                   	pop    esi
c001265f:	5f                   	pop    edi
c0012660:	6a 01                	push   0x1
c0012662:	53                   	push   ebx
c0012663:	e8 ca 8b ff ff       	call   c000b232 <File::open(FileOpenMode)>
c0012668:	83 c4 10             	add    esp,0x10
c001266b:	85 c0                	test   eax,eax
c001266d:	74 0a                	je     c0012679 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001266f:	83 ec 0c             	sub    esp,0xc
c0012672:	68 bb e8 01 c0       	push   0xc001e8bb
c0012677:	eb 34                	jmp    c00126ad <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012679:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012681:	83 ec 0c             	sub    esp,0xc
c0012684:	6a 34                	push   0x34
c0012686:	e8 e2 57 ff ff       	call   c0007e6d <malloc>
c001268b:	59                   	pop    ecx
c001268c:	89 c7                	mov    edi,eax
c001268e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0012692:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012694:	56                   	push   esi
c0012695:	57                   	push   edi
c0012696:	6a 00                	push   0x0
c0012698:	6a 34                	push   0x34
c001269a:	53                   	push   ebx
c001269b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001269e:	83 c4 20             	add    esp,0x20
c00126a1:	85 c0                	test   eax,eax
c00126a3:	74 17                	je     c00126bc <Thr::loadKernelSymbolTable(char const*)+0x85>
c00126a5:	83 ec 0c             	sub    esp,0xc
c00126a8:	68 d2 e8 01 c0       	push   0xc001e8d2
c00126ad:	e8 99 e0 ff ff       	call   c001074b <Krnl::panic(char const*)>
c00126b2:	83 c4 10             	add    esp,0x10
c00126b5:	31 c0                	xor    eax,eax
c00126b7:	e9 31 02 00 00       	jmp    c00128ed <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00126bc:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00126c2:	75 e1                	jne    c00126a5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126c4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00126c7:	85 c0                	test   eax,eax
c00126c9:	74 da                	je     c00126a5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126cb:	52                   	push   edx
c00126cc:	31 d2                	xor    edx,edx
c00126ce:	52                   	push   edx
c00126cf:	50                   	push   eax
c00126d0:	53                   	push   ebx
c00126d1:	e8 1a 8c ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c00126d6:	83 c4 10             	add    esp,0x10
c00126d9:	85 c0                	test   eax,eax
c00126db:	75 c8                	jne    c00126a5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126dd:	83 ec 0c             	sub    esp,0xc
c00126e0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126e4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126e8:	31 ed                	xor    ebp,ebp
c00126ea:	0f af c2             	imul   eax,edx
c00126ed:	50                   	push   eax
c00126ee:	e8 7a 57 ff ff       	call   c0007e6d <malloc>
c00126f3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00126f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126f9:	89 34 24             	mov    DWORD PTR [esp],esi
c00126fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012700:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012704:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012708:	0f af c2             	imul   eax,edx
c001270b:	99                   	cdq    
c001270c:	52                   	push   edx
c001270d:	50                   	push   eax
c001270e:	53                   	push   ebx
c001270f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012712:	83 c4 20             	add    esp,0x20
c0012715:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001271d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012725:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001272d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012735:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012739:	0f 86 aa 00 00 00    	jbe    c00127e9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001273f:	0f b7 f5             	movzx  esi,bp
c0012742:	6b f6 28             	imul   esi,esi,0x28
c0012745:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012749:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001274c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012750:	50                   	push   eax
c0012751:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012755:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012759:	8b 16                	mov    edx,DWORD PTR [esi]
c001275b:	6b c0 28             	imul   eax,eax,0x28
c001275e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012762:	89 d0                	mov    eax,edx
c0012764:	31 d2                	xor    edx,edx
c0012766:	52                   	push   edx
c0012767:	50                   	push   eax
c0012768:	53                   	push   ebx
c0012769:	e8 82 8b ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c001276e:	83 c4 0c             	add    esp,0xc
c0012771:	6a 20                	push   0x20
c0012773:	6a 00                	push   0x0
c0012775:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012779:	52                   	push   edx
c001277a:	e8 71 dd fe ff       	call   c00004f0 <memset>
c001277f:	58                   	pop    eax
c0012780:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012782:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012786:	51                   	push   ecx
c0012787:	8d 54 24 40          	lea    edx,[esp+0x40]
c001278b:	52                   	push   edx
c001278c:	6a 00                	push   0x0
c001278e:	6a 1f                	push   0x1f
c0012790:	53                   	push   ebx
c0012791:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012794:	83 c4 18             	add    esp,0x18
c0012797:	68 e9 e8 01 c0       	push   0xc001e8e9
c001279c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00127a0:	52                   	push   edx
c00127a1:	e8 5a df fe ff       	call   c0000700 <strcmp>
c00127a6:	83 c4 10             	add    esp,0x10
c00127a9:	85 c0                	test   eax,eax
c00127ab:	75 0f                	jne    c00127bc <Thr::loadKernelSymbolTable(char const*)+0x185>
c00127ad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00127b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127bc:	50                   	push   eax
c00127bd:	50                   	push   eax
c00127be:	68 f1 e8 01 c0       	push   0xc001e8f1
c00127c3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00127c7:	50                   	push   eax
c00127c8:	e8 33 df fe ff       	call   c0000700 <strcmp>
c00127cd:	83 c4 10             	add    esp,0x10
c00127d0:	85 c0                	test   eax,eax
c00127d2:	75 0f                	jne    c00127e3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00127d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00127d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127e3:	45                   	inc    ebp
c00127e4:	e9 4c ff ff ff       	jmp    c0012735 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00127e9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00127ee:	75 10                	jne    c0012800 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00127f0:	83 ec 0c             	sub    esp,0xc
c00127f3:	68 f9 e8 01 c0       	push   0xc001e8f9
c00127f8:	e8 4e df ff ff       	call   c001074b <Krnl::panic(char const*)>
c00127fd:	83 c4 10             	add    esp,0x10
c0012800:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012805:	75 10                	jne    c0012817 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012807:	83 ec 0c             	sub    esp,0xc
c001280a:	68 f9 e8 01 c0       	push   0xc001e8f9
c001280f:	e8 37 df ff ff       	call   c001074b <Krnl::panic(char const*)>
c0012814:	83 c4 10             	add    esp,0x10
c0012817:	31 d2                	xor    edx,edx
c0012819:	50                   	push   eax
c001281a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001281e:	52                   	push   edx
c001281f:	50                   	push   eax
c0012820:	53                   	push   ebx
c0012821:	e8 ca 8a ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c0012826:	5a                   	pop    edx
c0012827:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001282b:	e8 3d 56 ff ff       	call   c0007e6d <malloc>
c0012830:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012834:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012838:	31 c9                	xor    ecx,ecx
c001283a:	5e                   	pop    esi
c001283b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001283d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012841:	55                   	push   ebp
c0012842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012846:	51                   	push   ecx
c0012847:	52                   	push   edx
c0012848:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001284c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012850:	53                   	push   ebx
c0012851:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012854:	83 c4 14             	add    esp,0x14
c0012857:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001285b:	e8 0d 56 ff ff       	call   c0007e6d <malloc>
c0012860:	89 c6                	mov    esi,eax
c0012862:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012864:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012867:	56                   	push   esi
c0012868:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001286c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012870:	51                   	push   ecx
c0012871:	52                   	push   edx
c0012872:	53                   	push   ebx
c0012873:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012876:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001287a:	8b 15 c0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023dc0
c0012880:	83 c4 1c             	add    esp,0x1c
c0012883:	c1 e8 04             	shr    eax,0x4
c0012886:	89 04 95 40 3c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc3c0],eax
c001288d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012891:	31 d2                	xor    edx,edx
c0012893:	52                   	push   edx
c0012894:	50                   	push   eax
c0012895:	53                   	push   ebx
c0012896:	e8 55 8a ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c001289b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001289d:	31 d2                	xor    edx,edx
c001289f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00128a2:	56                   	push   esi
c00128a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128a7:	52                   	push   edx
c00128a8:	50                   	push   eax
c00128a9:	53                   	push   ebx
c00128aa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00128ad:	83 c4 14             	add    esp,0x14
c00128b0:	53                   	push   ebx
c00128b1:	e8 da 89 ff ff       	call   c000b290 <File::close()>
c00128b6:	5d                   	pop    ebp
c00128b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128bb:	e8 bd 55 ff ff       	call   c0007e7d <free>
c00128c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128c3:	e8 b5 55 ff ff       	call   c0007e7d <free>
c00128c8:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c00128cd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00128d1:	8d 50 01             	lea    edx,[eax+0x1]
c00128d4:	89 0c 85 40 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc2c0],ecx
c00128db:	89 34 85 c0 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc340],esi
c00128e2:	89 15 c0 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc0,edx
c00128e8:	83 c4 10             	add    esp,0x10
c00128eb:	b0 01                	mov    al,0x1
c00128ed:	83 c4 5c             	add    esp,0x5c
c00128f0:	5b                   	pop    ebx
c00128f1:	5e                   	pop    esi
c00128f2:	5f                   	pop    edi
c00128f3:	5d                   	pop    ebp
c00128f4:	c3                   	ret    

c00128f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00128f5:	55                   	push   ebp
c00128f6:	57                   	push   edi
c00128f7:	56                   	push   esi
c00128f8:	53                   	push   ebx
c00128f9:	81 ec 68 03 00 00    	sub    esp,0x368
c00128ff:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012906:	8b 1d 10 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e10
c001290c:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0012910:	68 14 01 00 00       	push   0x114
c0012915:	e8 53 55 ff ff       	call   c0007e6d <malloc>
c001291a:	83 c4 0c             	add    esp,0xc
c001291d:	89 c5                	mov    ebp,eax
c001291f:	53                   	push   ebx
c0012920:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012927:	50                   	push   eax
c0012928:	e8 45 88 ff ff       	call   c000b172 <File::File(char const*, Process*)>
c001292d:	5e                   	pop    esi
c001292e:	5f                   	pop    edi
c001292f:	6a 01                	push   0x1
c0012931:	55                   	push   ebp
c0012932:	e8 fb 88 ff ff       	call   c000b232 <File::open(FileOpenMode)>
c0012937:	83 c4 10             	add    esp,0x10
c001293a:	85 c0                	test   eax,eax
c001293c:	0f 85 a7 06 00 00    	jne    c0012fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012942:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001294a:	83 ec 0c             	sub    esp,0xc
c001294d:	6a 34                	push   0x34
c001294f:	e8 19 55 ff ff       	call   c0007e6d <malloc>
c0012954:	5b                   	pop    ebx
c0012955:	89 c7                	mov    edi,eax
c0012957:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001295b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001295e:	53                   	push   ebx
c001295f:	57                   	push   edi
c0012960:	6a 00                	push   0x0
c0012962:	6a 34                	push   0x34
c0012964:	55                   	push   ebp
c0012965:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012968:	83 c4 20             	add    esp,0x20
c001296b:	85 c0                	test   eax,eax
c001296d:	0f 85 76 06 00 00    	jne    c0012fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012973:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012979:	0f 85 6a 06 00 00    	jne    c0012fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001297f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012982:	85 c0                	test   eax,eax
c0012984:	0f 84 5f 06 00 00    	je     c0012fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001298a:	31 d2                	xor    edx,edx
c001298c:	51                   	push   ecx
c001298d:	52                   	push   edx
c001298e:	50                   	push   eax
c001298f:	55                   	push   ebp
c0012990:	e8 5b 89 ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c0012995:	83 c4 10             	add    esp,0x10
c0012998:	85 c0                	test   eax,eax
c001299a:	0f 85 49 06 00 00    	jne    c0012fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129a0:	83 ec 0c             	sub    esp,0xc
c00129a3:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00129a6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00129aa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00129ae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00129b2:	0f af c2             	imul   eax,edx
c00129b5:	50                   	push   eax
c00129b6:	e8 b2 54 ff ff       	call   c0007e6d <malloc>
c00129bb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00129c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129c9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00129cd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00129d1:	0f af c2             	imul   eax,edx
c00129d4:	99                   	cdq    
c00129d5:	52                   	push   edx
c00129d6:	50                   	push   eax
c00129d7:	55                   	push   ebp
c00129d8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129db:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00129de:	83 c4 20             	add    esp,0x20
c00129e1:	85 c0                	test   eax,eax
c00129e3:	0f 84 00 06 00 00    	je     c0012fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129e9:	52                   	push   edx
c00129ea:	31 d2                	xor    edx,edx
c00129ec:	52                   	push   edx
c00129ed:	50                   	push   eax
c00129ee:	55                   	push   ebp
c00129ef:	e8 fc 88 ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c00129f4:	83 c4 10             	add    esp,0x10
c00129f7:	85 c0                	test   eax,eax
c00129f9:	0f 85 ea 05 00 00    	jne    c0012fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129ff:	83 ec 0c             	sub    esp,0xc
c0012a02:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012a06:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012a0a:	31 f6                	xor    esi,esi
c0012a0c:	0f af c2             	imul   eax,edx
c0012a0f:	50                   	push   eax
c0012a10:	e8 58 54 ff ff       	call   c0007e6d <malloc>
c0012a15:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a18:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012a1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a23:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012a27:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012a2b:	0f af c2             	imul   eax,edx
c0012a2e:	99                   	cdq    
c0012a2f:	52                   	push   edx
c0012a30:	50                   	push   eax
c0012a31:	55                   	push   ebp
c0012a32:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a35:	83 c4 20             	add    esp,0x20
c0012a38:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012a3c:	0f 86 8a 00 00 00    	jbe    c0012acc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012a42:	0f b7 de             	movzx  ebx,si
c0012a45:	c1 e3 05             	shl    ebx,0x5
c0012a48:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012a4c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012a4f:	75 75                	jne    c0012ac6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012a51:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012a54:	31 d2                	xor    edx,edx
c0012a56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012a5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a61:	50                   	push   eax
c0012a62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012a65:	52                   	push   edx
c0012a66:	50                   	push   eax
c0012a67:	55                   	push   ebp
c0012a68:	e8 83 88 ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c0012a6d:	83 c4 10             	add    esp,0x10
c0012a70:	85 c0                	test   eax,eax
c0012a72:	0f 85 71 05 00 00    	jne    c0012fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012a78:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012a7f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012a86:	31 d2                	xor    edx,edx
c0012a88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012a8c:	83 ec 0c             	sub    esp,0xc
c0012a8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012a93:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a9a:	50                   	push   eax
c0012a9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aa3:	52                   	push   edx
c0012aa4:	50                   	push   eax
c0012aa5:	55                   	push   ebp
c0012aa6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012aa9:	83 c4 1c             	add    esp,0x1c
c0012aac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012aaf:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012ab2:	50                   	push   eax
c0012ab3:	6a 00                	push   0x0
c0012ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ab9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012abd:	50                   	push   eax
c0012abe:	e8 2d da fe ff       	call   c00004f0 <memset>
c0012ac3:	83 c4 10             	add    esp,0x10
c0012ac6:	46                   	inc    esi
c0012ac7:	e9 6c ff ff ff       	jmp    c0012a38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012acc:	53                   	push   ebx
c0012acd:	31 db                	xor    ebx,ebx
c0012acf:	68 00 01 00 00       	push   0x100
c0012ad4:	6a 00                	push   0x0
c0012ad6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012ada:	50                   	push   eax
c0012adb:	e8 10 da fe ff       	call   c00004f0 <memset>
c0012ae0:	83 c4 0c             	add    esp,0xc
c0012ae3:	68 00 01 00 00       	push   0x100
c0012ae8:	6a 00                	push   0x0
c0012aea:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012af1:	50                   	push   eax
c0012af2:	e8 f9 d9 fe ff       	call   c00004f0 <memset>
c0012af7:	83 c4 10             	add    esp,0x10
c0012afa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012b02:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012b0a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012b12:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b1a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b22:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012b26:	0f 86 30 01 00 00    	jbe    c0012c5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012b2c:	0f b7 f3             	movzx  esi,bx
c0012b2f:	6b f6 28             	imul   esi,esi,0x28
c0012b32:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012b36:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b3d:	52                   	push   edx
c0012b3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012b42:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012b46:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b48:	6b d2 28             	imul   edx,edx,0x28
c0012b4b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012b4f:	31 d2                	xor    edx,edx
c0012b51:	52                   	push   edx
c0012b52:	50                   	push   eax
c0012b53:	55                   	push   ebp
c0012b54:	e8 97 87 ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c0012b59:	83 c4 0c             	add    esp,0xc
c0012b5c:	6a 20                	push   0x20
c0012b5e:	6a 00                	push   0x0
c0012b60:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b67:	51                   	push   ecx
c0012b68:	e8 83 d9 fe ff       	call   c00004f0 <memset>
c0012b6d:	59                   	pop    ecx
c0012b6e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b71:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b75:	52                   	push   edx
c0012b76:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012b7d:	51                   	push   ecx
c0012b7e:	6a 00                	push   0x0
c0012b80:	6a 1f                	push   0x1f
c0012b82:	55                   	push   ebp
c0012b83:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012b86:	83 c4 1c             	add    esp,0x1c
c0012b89:	6a 09                	push   0x9
c0012b8b:	68 13 e9 01 c0       	push   0xc001e913
c0012b90:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b97:	51                   	push   ecx
c0012b98:	e8 13 d8 fe ff       	call   c00003b0 <memcmp>
c0012b9d:	83 c4 10             	add    esp,0x10
c0012ba0:	85 c0                	test   eax,eax
c0012ba2:	75 21                	jne    c0012bc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bac:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012bb0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012bb4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012bb7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012bbe:	89 d0                	mov    eax,edx
c0012bc0:	40                   	inc    eax
c0012bc1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bc5:	50                   	push   eax
c0012bc6:	6a 09                	push   0x9
c0012bc8:	68 1d e9 01 c0       	push   0xc001e91d
c0012bcd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bd4:	50                   	push   eax
c0012bd5:	e8 d6 d7 fe ff       	call   c00003b0 <memcmp>
c0012bda:	83 c4 10             	add    esp,0x10
c0012bdd:	85 c0                	test   eax,eax
c0012bdf:	75 21                	jne    c0012c02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012be1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012be9:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012bed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012bf1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012bf4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012bfb:	89 d0                	mov    eax,edx
c0012bfd:	40                   	inc    eax
c0012bfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c02:	50                   	push   eax
c0012c03:	50                   	push   eax
c0012c04:	68 e9 e8 01 c0       	push   0xc001e8e9
c0012c09:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c10:	50                   	push   eax
c0012c11:	e8 ea da fe ff       	call   c0000700 <strcmp>
c0012c16:	83 c4 10             	add    esp,0x10
c0012c19:	85 c0                	test   eax,eax
c0012c1b:	75 0f                	jne    c0012c2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012c1d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012c20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012c2c:	50                   	push   eax
c0012c2d:	50                   	push   eax
c0012c2e:	68 f1 e8 01 c0       	push   0xc001e8f1
c0012c33:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c3a:	50                   	push   eax
c0012c3b:	e8 c0 da fe ff       	call   c0000700 <strcmp>
c0012c40:	83 c4 10             	add    esp,0x10
c0012c43:	85 c0                	test   eax,eax
c0012c45:	75 0f                	jne    c0012c56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012c47:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012c4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c52:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012c56:	43                   	inc    ebx
c0012c57:	e9 c6 fe ff ff       	jmp    c0012b22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012c5c:	31 d2                	xor    edx,edx
c0012c5e:	50                   	push   eax
c0012c5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c63:	52                   	push   edx
c0012c64:	50                   	push   eax
c0012c65:	55                   	push   ebp
c0012c66:	e8 85 86 ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c0012c6b:	58                   	pop    eax
c0012c6c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c70:	e8 f8 51 ff ff       	call   c0007e6d <malloc>
c0012c75:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c78:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012c7c:	31 d2                	xor    edx,edx
c0012c7e:	58                   	pop    eax
c0012c7f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012c83:	53                   	push   ebx
c0012c84:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012c88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c8c:	52                   	push   edx
c0012c8d:	50                   	push   eax
c0012c8e:	55                   	push   ebp
c0012c8f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012c92:	83 c4 14             	add    esp,0x14
c0012c95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c99:	e8 cf 51 ff ff       	call   c0007e6d <malloc>
c0012c9e:	31 d2                	xor    edx,edx
c0012ca0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012ca4:	83 c4 0c             	add    esp,0xc
c0012ca7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cab:	52                   	push   edx
c0012cac:	50                   	push   eax
c0012cad:	55                   	push   ebp
c0012cae:	e8 3d 86 ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c0012cb3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012cb6:	31 d2                	xor    edx,edx
c0012cb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cbb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012cbf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012cc3:	52                   	push   edx
c0012cc4:	50                   	push   eax
c0012cc5:	55                   	push   ebp
c0012cc6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012cc9:	83 c4 20             	add    esp,0x20
c0012ccc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012cd4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012cd8:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012cdc:	0f 84 0b 03 00 00    	je     c0012fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012ce2:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012ce9:	31 d2                	xor    edx,edx
c0012ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012cef:	c1 e8 03             	shr    eax,0x3
c0012cf2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012cf6:	51                   	push   ecx
c0012cf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cfb:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012cff:	52                   	push   edx
c0012d00:	50                   	push   eax
c0012d01:	55                   	push   ebp
c0012d02:	e8 e9 85 ff ff       	call   c000b2f0 <File::seek(unsigned long long)>
c0012d07:	5b                   	pop    ebx
c0012d08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d0c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012d13:	e8 55 51 ff ff       	call   c0007e6d <malloc>
c0012d18:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012d1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d1f:	31 d2                	xor    edx,edx
c0012d21:	5e                   	pop    esi
c0012d22:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012d26:	50                   	push   eax
c0012d27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d2f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012d36:	52                   	push   edx
c0012d37:	50                   	push   eax
c0012d38:	55                   	push   ebp
c0012d39:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012d3c:	83 c4 20             	add    esp,0x20
c0012d3f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012d47:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012d4b:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012d4f:	0f 8d 7c 02 00 00    	jge    c0012fd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012d55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d5d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012d62:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012d65:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012d69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d6d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012d71:	89 d8                	mov    eax,ebx
c0012d73:	c1 e8 08             	shr    eax,0x8
c0012d76:	89 c6                	mov    esi,eax
c0012d78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d7c:	c1 e6 04             	shl    esi,0x4
c0012d7f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012d83:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012d86:	85 d2                	test   edx,edx
c0012d88:	0f 85 bf 00 00 00    	jne    c0012e4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d8e:	83 ec 0c             	sub    esp,0xc
c0012d91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d95:	03 06                	add    eax,DWORD PTR [esi]
c0012d97:	50                   	push   eax
c0012d98:	e8 4b f8 ff ff       	call   c00125e8 <Thr::getAddressOfKernelSymbol(char const*)>
c0012d9d:	83 c4 10             	add    esp,0x10
c0012da0:	89 c2                	mov    edx,eax
c0012da2:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012da7:	85 c0                	test   eax,eax
c0012da9:	0f 85 9e 00 00 00    	jne    c0012e4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012daf:	83 ec 0c             	sub    esp,0xc
c0012db2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012db6:	03 06                	add    eax,DWORD PTR [esi]
c0012db8:	50                   	push   eax
c0012db9:	e8 96 41 ff ff       	call   c0006f54 <Krnl::resolveCompatibilitySymbol(char*)>
c0012dbe:	83 c4 10             	add    esp,0x10
c0012dc1:	89 c2                	mov    edx,eax
c0012dc3:	85 c0                	test   eax,eax
c0012dc5:	0f 85 82 00 00 00    	jne    c0012e4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012dcb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012dcf:	50                   	push   eax
c0012dd0:	50                   	push   eax
c0012dd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dd5:	03 06                	add    eax,DWORD PTR [esi]
c0012dd7:	50                   	push   eax
c0012dd8:	68 27 e9 01 c0       	push   0xc001e927
c0012ddd:	e8 1a 7e ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0012de2:	58                   	pop    eax
c0012de3:	5a                   	pop    edx
c0012de4:	68 41 e9 01 c0       	push   0xc001e941
c0012de9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012df0:	50                   	push   eax
c0012df1:	e8 2a d8 fe ff       	call   c0000620 <strcpy>
c0012df6:	59                   	pop    ecx
c0012df7:	58                   	pop    eax
c0012df8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dfc:	03 06                	add    eax,DWORD PTR [esi]
c0012dfe:	50                   	push   eax
c0012dff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012e06:	50                   	push   eax
c0012e07:	e8 d4 d9 fe ff       	call   c00007e0 <strcat>
c0012e0c:	58                   	pop    eax
c0012e0d:	5a                   	pop    edx
c0012e0e:	68 d7 e9 01 c0       	push   0xc001e9d7
c0012e13:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012e1a:	50                   	push   eax
c0012e1b:	e8 c0 d9 fe ff       	call   c00007e0 <strcat>
c0012e20:	83 c4 10             	add    esp,0x10
c0012e23:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e28:	0f 84 5d 01 00 00    	je     c0012f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e2e:	83 ec 0c             	sub    esp,0xc
c0012e31:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012e38:	50                   	push   eax
c0012e39:	e8 0d d9 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012e45:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012e49:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012e4d:	80 fb 01             	cmp    bl,0x1
c0012e50:	0f 85 88 00 00 00    	jne    c0012ede <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012e56:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012e5d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012e61:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012e65:	01 ce                	add    esi,ecx
c0012e67:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012e6d:	0f 94 c0             	sete   al
c0012e70:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012e76:	0f 94 c3             	sete   bl
c0012e79:	09 c3                	or     ebx,eax
c0012e7b:	8b 06                	mov    eax,DWORD PTR [esi]
c0012e7d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012e82:	74 41                	je     c0012ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012e84:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e87:	84 db                	test   bl,bl
c0012e89:	75 15                	jne    c0012ea0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012e8b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e8f:	66 83 f8 0c          	cmp    ax,0xc
c0012e93:	76 05                	jbe    c0012e9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012e95:	b8 0c 00 00 00       	mov    eax,0xc
c0012e9a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012e9e:	76 37                	jbe    c0012ed7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ea0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012ea4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ea9:	0f 84 dc 00 00 00    	je     c0012f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012eaf:	83 ec 0c             	sub    esp,0xc
c0012eb2:	68 58 e9 01 c0       	push   0xc001e958
c0012eb7:	e8 8f d8 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0012ebc:	83 c4 10             	add    esp,0x10
c0012ebf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012ec3:	eb 12                	jmp    c0012ed7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ec5:	01 c1                	add    ecx,eax
c0012ec7:	84 db                	test   bl,bl
c0012ec9:	75 0c                	jne    c0012ed7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ecb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012ecf:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012ed3:	77 02                	ja     c0012ed7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ed5:	01 d1                	add    ecx,edx
c0012ed7:	89 0e                	mov    DWORD PTR [esi],ecx
c0012ed9:	e9 ea 00 00 00       	jmp    c0012fc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ede:	80 fb 02             	cmp    bl,0x2
c0012ee1:	75 7c                	jne    c0012f5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012ee3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012eea:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012eee:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012ef2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012ef8:	74 20                	je     c0012f1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012efa:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012f00:	74 18                	je     c0012f1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012f02:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012f06:	b9 0a 00 00 00       	mov    ecx,0xa
c0012f0b:	66 83 f8 0e          	cmp    ax,0xe
c0012f0f:	77 03                	ja     c0012f14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012f11:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012f14:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012f18:	76 1f                	jbe    c0012f39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012f1a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012f1e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012f23:	74 66                	je     c0012f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f25:	83 ec 0c             	sub    esp,0xc
c0012f28:	68 74 e9 01 c0       	push   0xc001e974
c0012f2d:	e8 19 d8 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0012f32:	83 c4 10             	add    esp,0x10
c0012f35:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f39:	8b 06                	mov    eax,DWORD PTR [esi]
c0012f3b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012f40:	74 13                	je     c0012f55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012f42:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012f46:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012f4d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012f51:	01 c8                	add    eax,ecx
c0012f53:	eb 04                	jmp    c0012f59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012f55:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012f59:	01 c2                	add    edx,eax
c0012f5b:	89 16                	mov    DWORD PTR [esi],edx
c0012f5d:	eb 69                	jmp    c0012fc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f5f:	0f b6 db             	movzx  ebx,bl
c0012f62:	50                   	push   eax
c0012f63:	50                   	push   eax
c0012f64:	53                   	push   ebx
c0012f65:	68 90 e9 01 c0       	push   0xc001e990
c0012f6a:	e8 8d 7c ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0012f6f:	83 c4 10             	add    esp,0x10
c0012f72:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012f77:	74 12                	je     c0012f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f79:	83 ec 0c             	sub    esp,0xc
c0012f7c:	68 9b e9 01 c0       	push   0xc001e99b
c0012f81:	e8 c5 d7 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0012f86:	83 c4 10             	add    esp,0x10
c0012f89:	eb 3d                	jmp    c0012fc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f8b:	83 ec 0c             	sub    esp,0xc
c0012f8e:	55                   	push   ebp
c0012f8f:	e8 fc 82 ff ff       	call   c000b290 <File::close()>
c0012f94:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f97:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f9d:	59                   	pop    ecx
c0012f9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fa2:	e8 d6 4e ff ff       	call   c0007e7d <free>
c0012fa7:	5b                   	pop    ebx
c0012fa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fac:	e8 cc 4e ff ff       	call   c0007e7d <free>
c0012fb1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012fb4:	e8 c4 4e ff ff       	call   c0007e7d <free>
c0012fb9:	5e                   	pop    esi
c0012fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fbe:	e8 ba 4e ff ff       	call   c0007e7d <free>
c0012fc3:	83 c4 10             	add    esp,0x10
c0012fc6:	eb 21                	jmp    c0012fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012fc8:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012fcc:	e9 76 fd ff ff       	jmp    c0012d47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012fd1:	83 ec 0c             	sub    esp,0xc
c0012fd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fd8:	e8 a0 4e ff ff       	call   c0007e7d <free>
c0012fdd:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012fe1:	83 c4 10             	add    esp,0x10
c0012fe4:	e9 eb fc ff ff       	jmp    c0012cd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012fe9:	31 c0                	xor    eax,eax
c0012feb:	eb 33                	jmp    c0013020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012fed:	83 ec 0c             	sub    esp,0xc
c0012ff0:	55                   	push   ebp
c0012ff1:	e8 9a 82 ff ff       	call   c000b290 <File::close()>
c0012ff6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ff9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ffc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fff:	58                   	pop    eax
c0013000:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013004:	e8 74 4e ff ff       	call   c0007e7d <free>
c0013009:	89 3c 24             	mov    DWORD PTR [esp],edi
c001300c:	e8 6c 4e ff ff       	call   c0007e7d <free>
c0013011:	5a                   	pop    edx
c0013012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013016:	e8 62 4e ff ff       	call   c0007e7d <free>
c001301b:	83 c4 10             	add    esp,0x10
c001301e:	b0 01                	mov    al,0x1
c0013020:	81 c4 5c 03 00 00    	add    esp,0x35c
c0013026:	5b                   	pop    ebx
c0013027:	5e                   	pop    esi
c0013028:	5f                   	pop    edi
c0013029:	5d                   	pop    ebp
c001302a:	c3                   	ret    

c001302b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001302b:	56                   	push   esi
c001302c:	31 d2                	xor    edx,edx
c001302e:	53                   	push   ebx
c001302f:	8b 1d 20 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023620
c0013035:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013039:	39 d3                	cmp    ebx,edx
c001303b:	7e 1b                	jle    c0013058 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001303d:	8b 04 95 40 38 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc7c0]
c0013044:	39 c8                	cmp    eax,ecx
c0013046:	77 0d                	ja     c0013055 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0013048:	8b 34 95 40 36 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc9c0]
c001304f:	01 c6                	add    esi,eax
c0013051:	39 ce                	cmp    esi,ecx
c0013053:	77 05                	ja     c001305a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013055:	42                   	inc    edx
c0013056:	eb e1                	jmp    c0013039 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0013058:	31 c0                	xor    eax,eax
c001305a:	5b                   	pop    ebx
c001305b:	5e                   	pop    esi
c001305c:	c3                   	ret    

c001305d <Thr::getDriverNameFromAddress(unsigned long)>:
c001305d:	53                   	push   ebx
c001305e:	31 c0                	xor    eax,eax
c0013060:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013064:	8b 1d 20 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023620
c001306a:	39 c3                	cmp    ebx,eax
c001306c:	7e 22                	jle    c0013090 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001306e:	8b 14 85 40 38 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc7c0]
c0013075:	39 ca                	cmp    edx,ecx
c0013077:	77 14                	ja     c001308d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013079:	03 14 85 40 36 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc9c0]
c0013080:	39 ca                	cmp    edx,ecx
c0013082:	76 09                	jbe    c001308d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013084:	8b 04 85 40 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5c0]
c001308b:	eb 05                	jmp    c0013092 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001308d:	40                   	inc    eax
c001308e:	eb da                	jmp    c001306a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013090:	31 c0                	xor    eax,eax
c0013092:	5b                   	pop    ebx
c0013093:	c3                   	ret    

c0013094 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013094:	53                   	push   ebx
c0013095:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013099:	53                   	push   ebx
c001309a:	e8 8c ff ff ff       	call   c001302b <Thr::getDriverBaseFromAddress(unsigned long)>
c001309f:	5a                   	pop    edx
c00130a0:	31 d2                	xor    edx,edx
c00130a2:	85 c0                	test   eax,eax
c00130a4:	74 04                	je     c00130aa <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00130a6:	89 da                	mov    edx,ebx
c00130a8:	29 c2                	sub    edx,eax
c00130aa:	89 d0                	mov    eax,edx
c00130ac:	5b                   	pop    ebx
c00130ad:	c3                   	ret    

c00130ae <Thr::loadDLL(char const*, bool)>:
c00130ae:	55                   	push   ebp
c00130af:	57                   	push   edi
c00130b0:	56                   	push   esi
c00130b1:	53                   	push   ebx
c00130b2:	81 ec 34 01 00 00    	sub    esp,0x134
c00130b8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00130bf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00130c6:	56                   	push   esi
c00130c7:	68 b3 e9 01 c0       	push   0xc001e9b3
c00130cc:	e8 2b 7b ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c00130d1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00130d8:	e8 90 4d ff ff       	call   c0007e6d <malloc>
c00130dd:	83 c4 0c             	add    esp,0xc
c00130e0:	89 c3                	mov    ebx,eax
c00130e2:	ff 35 10 3e 02 c0    	push   DWORD PTR ds:0xc0023e10
c00130e8:	56                   	push   esi
c00130e9:	50                   	push   eax
c00130ea:	e8 83 80 ff ff       	call   c000b172 <File::File(char const*, Process*)>
c00130ef:	83 c4 10             	add    esp,0x10
c00130f2:	85 db                	test   ebx,ebx
c00130f4:	75 3c                	jne    c0013132 <Thr::loadDLL(char const*, bool)+0x84>
c00130f6:	89 f8                	mov    eax,edi
c00130f8:	84 c0                	test   al,al
c00130fa:	0f 84 d2 01 00 00    	je     c00132d2 <Thr::loadDLL(char const*, bool)+0x224>
c0013100:	55                   	push   ebp
c0013101:	55                   	push   ebp
c0013102:	68 c4 e9 01 c0       	push   0xc001e9c4
c0013107:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001310b:	55                   	push   ebp
c001310c:	e8 0f d5 fe ff       	call   c0000620 <strcpy>
c0013111:	58                   	pop    eax
c0013112:	5a                   	pop    edx
c0013113:	56                   	push   esi
c0013114:	55                   	push   ebp
c0013115:	e8 c6 d6 fe ff       	call   c00007e0 <strcat>
c001311a:	59                   	pop    ecx
c001311b:	58                   	pop    eax
c001311c:	68 d7 e9 01 c0       	push   0xc001e9d7
c0013121:	55                   	push   ebp
c0013122:	e8 b9 d6 fe ff       	call   c00007e0 <strcat>
c0013127:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001312a:	e8 1c d6 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001312f:	83 c4 10             	add    esp,0x10
c0013132:	51                   	push   ecx
c0013133:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0013137:	50                   	push   eax
c0013138:	8d 44 24 20          	lea    eax,[esp+0x20]
c001313c:	50                   	push   eax
c001313d:	53                   	push   ebx
c001313e:	e8 9b 83 ff ff       	call   c000b4de <File::stat(unsigned long long*, bool*)>
c0013143:	83 c4 10             	add    esp,0x10
c0013146:	85 db                	test   ebx,ebx
c0013148:	74 0c                	je     c0013156 <Thr::loadDLL(char const*, bool)+0xa8>
c001314a:	83 ec 0c             	sub    esp,0xc
c001314d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001314f:	53                   	push   ebx
c0013150:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001315b:	75 0a                	jne    c0013167 <Thr::loadDLL(char const*, bool)+0xb9>
c001315d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013161:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013165:	75 3c                	jne    c00131a3 <Thr::loadDLL(char const*, bool)+0xf5>
c0013167:	89 f8                	mov    eax,edi
c0013169:	84 c0                	test   al,al
c001316b:	0f 84 49 01 00 00    	je     c00132ba <Thr::loadDLL(char const*, bool)+0x20c>
c0013171:	51                   	push   ecx
c0013172:	51                   	push   ecx
c0013173:	68 c4 e9 01 c0       	push   0xc001e9c4
c0013178:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001317c:	53                   	push   ebx
c001317d:	e8 9e d4 fe ff       	call   c0000620 <strcpy>
c0013182:	5d                   	pop    ebp
c0013183:	58                   	pop    eax
c0013184:	56                   	push   esi
c0013185:	53                   	push   ebx
c0013186:	e8 55 d6 fe ff       	call   c00007e0 <strcat>
c001318b:	58                   	pop    eax
c001318c:	5a                   	pop    edx
c001318d:	68 d7 e9 01 c0       	push   0xc001e9d7
c0013192:	53                   	push   ebx
c0013193:	e8 48 d6 fe ff       	call   c00007e0 <strcat>
c0013198:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001319b:	e8 ab d5 ff ff       	call   c001074b <Krnl::panic(char const*)>
c00131a0:	83 c4 10             	add    esp,0x10
c00131a3:	52                   	push   edx
c00131a4:	6a 03                	push   0x3
c00131a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131aa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00131ae:	05 ff 0f 00 00       	add    eax,0xfff
c00131b3:	83 d2 00             	adc    edx,0x0
c00131b6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00131ba:	50                   	push   eax
c00131bb:	ff 35 10 0a 02 c0    	push   DWORD PTR ds:0xc0020a10
c00131c1:	e8 7c 6f ff ff       	call   c000a142 <VAS::allocatePages(int, int)>
c00131c6:	59                   	pop    ecx
c00131c7:	89 c3                	mov    ebx,eax
c00131c9:	5d                   	pop    ebp
c00131ca:	50                   	push   eax
c00131cb:	68 be d7 01 c0       	push   0xc001d7be
c00131d0:	e8 27 7a ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c00131d5:	89 34 24             	mov    DWORD PTR [esp],esi
c00131d8:	e8 83 d3 fe ff       	call   c0000560 <strlen>
c00131dd:	8b 2d 20 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023620
c00131e3:	40                   	inc    eax
c00131e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00131e7:	e8 81 4c ff ff       	call   c0007e6d <malloc>
c00131ec:	89 04 ad 40 3a 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc5c0],eax
c00131f3:	58                   	pop    eax
c00131f4:	a1 20 36 02 c0       	mov    eax,ds:0xc0023620
c00131f9:	5a                   	pop    edx
c00131fa:	56                   	push   esi
c00131fb:	ff 34 85 40 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc5c0]
c0013202:	e8 19 d4 fe ff       	call   c0000620 <strcpy>
c0013207:	a1 20 36 02 c0       	mov    eax,ds:0xc0023620
c001320c:	8d 50 01             	lea    edx,[eax+0x1]
c001320f:	89 1c 85 40 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7c0],ebx
c0013216:	89 15 20 36 02 c0    	mov    DWORD PTR ds:0xc0023620,edx
c001321c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013220:	83 c4 0c             	add    esp,0xc
c0013223:	89 14 85 40 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9c0],edx
c001322a:	6a 01                	push   0x1
c001322c:	53                   	push   ebx
c001322d:	56                   	push   esi
c001322e:	e8 c2 f6 ff ff       	call   c00128f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0013233:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013237:	83 c4 10             	add    esp,0x10
c001323a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001323f:	0f 85 89 00 00 00    	jne    c00132ce <Thr::loadDLL(char const*, bool)+0x220>
c0013245:	89 f8                	mov    eax,edi
c0013247:	84 c0                	test   al,al
c0013249:	74 73                	je     c00132be <Thr::loadDLL(char const*, bool)+0x210>
c001324b:	83 ec 0c             	sub    esp,0xc
c001324e:	68 d9 e9 01 c0       	push   0xc001e9d9
c0013253:	e8 f3 d4 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0013258:	83 c4 10             	add    esp,0x10
c001325b:	eb 61                	jmp    c00132be <Thr::loadDLL(char const*, bool)+0x210>
c001325d:	50                   	push   eax
c001325e:	50                   	push   eax
c001325f:	89 e8                	mov    eax,ebp
c0013261:	c1 e0 0c             	shl    eax,0xc
c0013264:	01 d8                	add    eax,ebx
c0013266:	50                   	push   eax
c0013267:	ff 35 10 0a 02 c0    	push   DWORD PTR ds:0xc0020a10
c001326d:	e8 48 6a ff ff       	call   c0009cba <VAS::getPageTableEntry(unsigned long)>
c0013272:	83 c4 10             	add    esp,0x10
c0013275:	8b 00                	mov    eax,DWORD PTR [eax]
c0013277:	a8 60                	test   al,0x60
c0013279:	75 11                	jne    c001328c <Thr::loadDLL(char const*, bool)+0x1de>
c001327b:	83 ec 0c             	sub    esp,0xc
c001327e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013283:	50                   	push   eax
c0013284:	e8 4f 4f ff ff       	call   c00081d8 <Phys::freePage(unsigned long)>
c0013289:	83 c4 10             	add    esp,0x10
c001328c:	45                   	inc    ebp
c001328d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013291:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013295:	05 ff 0f 00 00       	add    eax,0xfff
c001329a:	bf 00 00 00 00       	mov    edi,0x0
c001329f:	83 d2 00             	adc    edx,0x0
c00132a2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00132a6:	c1 ea 0c             	shr    edx,0xc
c00132a9:	39 c5                	cmp    ebp,eax
c00132ab:	89 d1                	mov    ecx,edx
c00132ad:	89 f8                	mov    eax,edi
c00132af:	19 c8                	sbb    eax,ecx
c00132b1:	72 aa                	jb     c001325d <Thr::loadDLL(char const*, bool)+0x1af>
c00132b3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00132b8:	75 18                	jne    c00132d2 <Thr::loadDLL(char const*, bool)+0x224>
c00132ba:	31 db                	xor    ebx,ebx
c00132bc:	eb 14                	jmp    c00132d2 <Thr::loadDLL(char const*, bool)+0x224>
c00132be:	83 ec 0c             	sub    esp,0xc
c00132c1:	68 f8 e9 01 c0       	push   0xc001e9f8
c00132c6:	e8 80 d4 ff ff       	call   c001074b <Krnl::panic(char const*)>
c00132cb:	83 c4 10             	add    esp,0x10
c00132ce:	31 ed                	xor    ebp,ebp
c00132d0:	eb bb                	jmp    c001328d <Thr::loadDLL(char const*, bool)+0x1df>
c00132d2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00132d8:	89 d8                	mov    eax,ebx
c00132da:	5b                   	pop    ebx
c00132db:	5e                   	pop    esi
c00132dc:	5f                   	pop    edi
c00132dd:	5d                   	pop    ebp
c00132de:	c3                   	ret    

c00132df <Thr::executeDLL(unsigned long, void*)>:
c00132df:	56                   	push   esi
c00132e0:	53                   	push   ebx
c00132e1:	52                   	push   edx
c00132e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00132ea:	85 db                	test   ebx,ebx
c00132ec:	75 10                	jne    c00132fe <Thr::executeDLL(unsigned long, void*)+0x1f>
c00132ee:	83 ec 0c             	sub    esp,0xc
c00132f1:	68 14 ea 01 c0       	push   0xc001ea14
c00132f6:	e8 50 d4 ff ff       	call   c001074b <Krnl::panic(char const*)>
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	50                   	push   eax
c00132ff:	50                   	push   eax
c0013300:	53                   	push   ebx
c0013301:	68 3e ea 01 c0       	push   0xc001ea3e
c0013306:	e8 f1 78 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001330b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001330f:	89 d8                	mov    eax,ebx
c0013311:	83 c4 14             	add    esp,0x14
c0013314:	5b                   	pop    ebx
c0013315:	5e                   	pop    esi
c0013316:	ff e0                	jmp    eax

c0013318 <userModeEntryPoint(void*)>:
c0013318:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c001331d:	48                   	dec    eax
c001331e:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013323:	75 03                	jne    c0013328 <userModeEntryPoint(void*)+0x10>
c0013325:	fb                   	sti    
c0013326:	66 90                	xchg   ax,ax
c0013328:	fb                   	sti    
c0013329:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001332e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013331:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013337:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001333b:	e9 1f cf fe ff       	jmp    c000025f <goToUsermode>

c0013340 <changeTSS>:
c0013340:	83 ec 14             	sub    esp,0x14
c0013343:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013348:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001334b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013350:	c1 e2 15             	shl    edx,0x15
c0013353:	29 d0                	sub    eax,edx
c0013355:	50                   	push   eax
c0013356:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c001335b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013361:	05 7c 11 00 00       	add    eax,0x117c
c0013366:	50                   	push   eax
c0013367:	e8 90 5f ff ff       	call   c00092fc <TSS::setESP(unsigned long)>
c001336c:	83 c4 1c             	add    esp,0x1c
c001336f:	c3                   	ret    

c0013370 <switchToThread(ThreadControlBlock*)>:
c0013370:	57                   	push   edi
c0013371:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c0013376:	56                   	push   esi
c0013377:	85 c0                	test   eax,eax
c0013379:	53                   	push   ebx
c001337a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001337e:	0f 85 90 00 00 00    	jne    c0013414 <switchToThread(ThreadControlBlock*)+0xa4>
c0013384:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013387:	80 fa ff             	cmp    dl,0xff
c001338a:	0f 84 80 00 00 00    	je     c0013410 <switchToThread(ThreadControlBlock*)+0xa0>
c0013390:	81 e2 ff 00 00 00    	and    edx,0xff
c0013396:	b8 00 04 00 00       	mov    eax,0x400
c001339b:	29 d0                	sub    eax,edx
c001339d:	d1 f8                	sar    eax,1
c001339f:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00133a2:	66 90                	xchg   ax,ax
c00133a4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00133a7:	e8 7b 24 00 00       	call   c0015827 <HalQueryPerformanceCounter()>
c00133ac:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c00133b1:	89 15 2c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e2c,edx
c00133b7:	89 c6                	mov    esi,eax
c00133b9:	89 d7                	mov    edi,edx
c00133bb:	2b 35 18 3e 02 c0    	sub    esi,DWORD PTR ds:0xc0023e18
c00133c1:	a3 18 3e 02 c0       	mov    ds:0xc0023e18,eax
c00133c6:	1b 3d 1c 3e 02 c0    	sbb    edi,DWORD PTR ds:0xc0023e1c
c00133cc:	89 35 20 3e 02 c0    	mov    DWORD PTR ds:0xc0023e20,esi
c00133d2:	89 3d 24 3e 02 c0    	mov    DWORD PTR ds:0xc0023e24,edi
c00133d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00133de:	89 15 1c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e1c,edx
c00133e4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00133e7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00133ea:	01 c6                	add    esi,eax
c00133ec:	11 d7                	adc    edi,edx
c00133ee:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00133f1:	83 ec 0c             	sub    esp,0xc
c00133f4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00133f7:	53                   	push   ebx
c00133f8:	e8 9a ce fe ff       	call   c0000297 <switchToThreadASM>
c00133fd:	0f 20 c0             	mov    eax,cr0
c0013400:	83 c8 08             	or     eax,0x8
c0013403:	0f 22 c0             	mov    cr0,eax
c0013406:	83 c4 10             	add    esp,0x10
c0013409:	5b                   	pop    ebx
c001340a:	5e                   	pop    esi
c001340b:	5f                   	pop    edi
c001340c:	c3                   	ret    
c001340d:	8d 76 00             	lea    esi,[esi+0x0]
c0013410:	31 c0                	xor    eax,eax
c0013412:	eb 90                	jmp    c00133a4 <switchToThread(ThreadControlBlock*)+0x34>
c0013414:	5b                   	pop    ebx
c0013415:	c7 05 e0 3d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x1
c001341f:	5e                   	pop    esi
c0013420:	5f                   	pop    edi
c0013421:	c3                   	ret    
c0013422:	66 90                	xchg   ax,ax

c0013424 <Process::addArgs(char**)>:
c0013424:	57                   	push   edi
c0013425:	56                   	push   esi
c0013426:	53                   	push   ebx
c0013427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001342b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001342f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013439:	85 ff                	test   edi,edi
c001343b:	74 43                	je     c0013480 <Process::addArgs(char**)+0x5c>
c001343d:	8b 07                	mov    eax,DWORD PTR [edi]
c001343f:	85 c0                	test   eax,eax
c0013441:	74 3d                	je     c0013480 <Process::addArgs(char**)+0x5c>
c0013443:	31 db                	xor    ebx,ebx
c0013445:	8d 76 00             	lea    esi,[esi+0x0]
c0013448:	83 ec 0c             	sub    esp,0xc
c001344b:	50                   	push   eax
c001344c:	e8 0f d1 fe ff       	call   c0000560 <strlen>
c0013451:	40                   	inc    eax
c0013452:	89 04 24             	mov    DWORD PTR [esp],eax
c0013455:	e8 13 4a ff ff       	call   c0007e6d <malloc>
c001345a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013461:	5a                   	pop    edx
c0013462:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013465:	59                   	pop    ecx
c0013466:	43                   	inc    ebx
c0013467:	52                   	push   edx
c0013468:	50                   	push   eax
c0013469:	e8 b2 d1 fe ff       	call   c0000620 <strcpy>
c001346e:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013474:	83 c4 10             	add    esp,0x10
c0013477:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001347a:	85 c0                	test   eax,eax
c001347c:	75 ca                	jne    c0013448 <Process::addArgs(char**)+0x24>
c001347e:	66 90                	xchg   ax,ax
c0013480:	5b                   	pop    ebx
c0013481:	5e                   	pop    esi
c0013482:	5f                   	pop    edi
c0013483:	c3                   	ret    

c0013484 <Process::Process(char const*, Process*, char**)>:
c0013484:	56                   	push   esi
c0013485:	53                   	push   ebx
c0013486:	83 ec 14             	sub    esp,0x14
c0013489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001348d:	05 0c 02 00 00       	add    eax,0x20c
c0013492:	bb 07 00 00 00       	mov    ebx,0x7
c0013497:	89 c6                	mov    esi,eax
c0013499:	8d 76 00             	lea    esi,[esi+0x0]
c001349c:	85 db                	test   ebx,ebx
c001349e:	78 14                	js     c00134b4 <Process::Process(char const*, Process*, char**)+0x30>
c00134a0:	83 ec 0c             	sub    esp,0xc
c00134a3:	56                   	push   esi
c00134a4:	e8 a3 95 00 00       	call   c001ca4c <ThreadControlBlock::ThreadControlBlock()>
c00134a9:	83 c4 10             	add    esp,0x10
c00134ac:	83 c6 5f             	add    esi,0x5f
c00134af:	4b                   	dec    ebx
c00134b0:	eb ea                	jmp    c001349c <Process::Process(char const*, Process*, char**)+0x18>
c00134b2:	66 90                	xchg   ax,ax
c00134b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134b8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00134bf:	83 ec 0c             	sub    esp,0xc
c00134c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134c6:	e8 09 d1 ff ff       	call   c00105d4 <Krnl::newProcessEnv(Process*)>
c00134cb:	83 c4 10             	add    esp,0x10
c00134ce:	89 c2                	mov    edx,eax
c00134d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134d4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00134da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134de:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00134e7:	a1 f0 f8 01 c0       	mov    eax,ds:0xc001f8f0
c00134ec:	8d 50 01             	lea    edx,[eax+0x1]
c00134ef:	89 15 f0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8f0,edx
c00134f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134f9:	89 02                	mov    DWORD PTR [edx],eax
c00134fb:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0013503:	83 ec 0c             	sub    esp,0xc
c0013506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001350a:	e8 5e 49 ff ff       	call   c0007e6d <malloc>
c001350f:	83 c4 10             	add    esp,0x10
c0013512:	89 c3                	mov    ebx,eax
c0013514:	83 ec 08             	sub    esp,0x8
c0013517:	6a 00                	push   0x0
c0013519:	53                   	push   ebx
c001351a:	e8 cd 6f ff ff       	call   c000a4ec <VAS::VAS(bool)>
c001351f:	83 c4 10             	add    esp,0x10
c0013522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013526:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001352c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013530:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001353a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001353e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013542:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001354c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013552:	85 c0                	test   eax,eax
c0013554:	74 42                	je     c0013598 <Process::Process(char const*, Process*, char**)+0x114>
c0013556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001355a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013560:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001356a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013574:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001357a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013584:	05 0c 01 00 00       	add    eax,0x10c
c0013589:	83 ec 08             	sub    esp,0x8
c001358c:	52                   	push   edx
c001358d:	50                   	push   eax
c001358e:	e8 8d d0 fe ff       	call   c0000620 <strcpy>
c0013593:	83 c4 10             	add    esp,0x10
c0013596:	eb 64                	jmp    c00135fc <Process::Process(char const*, Process*, char**)+0x178>
c0013598:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c00135a0:	83 ec 0c             	sub    esp,0xc
c00135a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00135a7:	e8 c1 48 ff ff       	call   c0007e6d <malloc>
c00135ac:	83 c4 10             	add    esp,0x10
c00135af:	89 c3                	mov    ebx,eax
c00135b1:	83 ec 08             	sub    esp,0x8
c00135b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135b8:	53                   	push   ebx
c00135b9:	e8 e2 5a ff ff       	call   c00090a0 <VgaText::VgaText(char const*)>
c00135be:	83 c4 10             	add    esp,0x10
c00135c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135c5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00135cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00135d5:	83 ec 0c             	sub    esp,0xc
c00135d8:	50                   	push   eax
c00135d9:	e8 62 53 ff ff       	call   c0008940 <addToTerminalCycle(VgaText*)>
c00135de:	83 c4 10             	add    esp,0x10
c00135e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135e5:	05 0c 01 00 00       	add    eax,0x10c
c00135ea:	83 ec 08             	sub    esp,0x8
c00135ed:	68 5d ea 01 c0       	push   0xc001ea5d
c00135f2:	50                   	push   eax
c00135f3:	e8 28 d0 fe ff       	call   c0000620 <strcpy>
c00135f8:	83 c4 10             	add    esp,0x10
c00135fb:	90                   	nop
c00135fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013600:	83 c0 0c             	add    eax,0xc
c0013603:	83 ec 08             	sub    esp,0x8
c0013606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001360a:	50                   	push   eax
c001360b:	e8 10 d0 fe ff       	call   c0000620 <strcpy>
c0013610:	83 c4 10             	add    esp,0x10
c0013613:	83 ec 08             	sub    esp,0x8
c0013616:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001361a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001361e:	e8 01 fe ff ff       	call   c0013424 <Process::addArgs(char**)>
c0013623:	83 c4 10             	add    esp,0x10
c0013626:	83 ec 08             	sub    esp,0x8
c0013629:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001362d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013631:	e8 89 ed ff ff       	call   c00123bf <Thr::loadProgramIntoMemory(Process*, char const*)>
c0013636:	83 c4 10             	add    esp,0x10
c0013639:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001363d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013641:	83 f0 01             	xor    eax,0x1
c0013644:	88 c2                	mov    dl,al
c0013646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001364a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013650:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013654:	25 ff 00 00 00       	and    eax,0xff
c0013659:	83 ec 08             	sub    esp,0x8
c001365c:	50                   	push   eax
c001365d:	68 b4 ea 01 c0       	push   0xc001eab4
c0013662:	e8 95 75 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0013667:	83 c4 10             	add    esp,0x10
c001366a:	90                   	nop
c001366b:	83 c4 14             	add    esp,0x14
c001366e:	5b                   	pop    ebx
c001366f:	5e                   	pop    esi
c0013670:	c3                   	ret    
c0013671:	90                   	nop
c0013672:	66 90                	xchg   ax,ax

c0013674 <Process::Process(bool, char const*, Process*, char**)>:
c0013674:	56                   	push   esi
c0013675:	53                   	push   ebx
c0013676:	83 ec 24             	sub    esp,0x24
c0013679:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001367d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013681:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013685:	05 0c 02 00 00       	add    eax,0x20c
c001368a:	bb 07 00 00 00       	mov    ebx,0x7
c001368f:	89 c6                	mov    esi,eax
c0013691:	8d 76 00             	lea    esi,[esi+0x0]
c0013694:	85 db                	test   ebx,ebx
c0013696:	78 14                	js     c00136ac <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013698:	83 ec 0c             	sub    esp,0xc
c001369b:	56                   	push   esi
c001369c:	e8 ab 93 00 00       	call   c001ca4c <ThreadControlBlock::ThreadControlBlock()>
c00136a1:	83 c4 10             	add    esp,0x10
c00136a4:	83 c6 5f             	add    esi,0x5f
c00136a7:	4b                   	dec    ebx
c00136a8:	eb ea                	jmp    c0013694 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00136aa:	66 90                	xchg   ax,ax
c00136ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136b0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00136b7:	83 ec 0c             	sub    esp,0xc
c00136ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00136be:	e8 11 cf ff ff       	call   c00105d4 <Krnl::newProcessEnv(Process*)>
c00136c3:	83 c4 10             	add    esp,0x10
c00136c6:	89 c2                	mov    edx,eax
c00136c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136cc:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00136d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136d6:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00136df:	a1 f0 f8 01 c0       	mov    eax,ds:0xc001f8f0
c00136e4:	8d 50 01             	lea    edx,[eax+0x1]
c00136e7:	89 15 f0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8f0,edx
c00136ed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00136f1:	89 02                	mov    DWORD PTR [edx],eax
c00136f3:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00136fb:	83 ec 0c             	sub    esp,0xc
c00136fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013702:	e8 66 47 ff ff       	call   c0007e6d <malloc>
c0013707:	83 c4 10             	add    esp,0x10
c001370a:	89 c3                	mov    ebx,eax
c001370c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013710:	25 ff 00 00 00       	and    eax,0xff
c0013715:	83 ec 08             	sub    esp,0x8
c0013718:	50                   	push   eax
c0013719:	53                   	push   ebx
c001371a:	e8 cd 6d ff ff       	call   c000a4ec <VAS::VAS(bool)>
c001371f:	83 c4 10             	add    esp,0x10
c0013722:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013726:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001372c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013730:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001373a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001373e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013742:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013748:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001374c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013752:	85 c0                	test   eax,eax
c0013754:	74 42                	je     c0013798 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0013756:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001375a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013760:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013766:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001376a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013770:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013774:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001377a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013780:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013784:	05 0c 01 00 00       	add    eax,0x10c
c0013789:	83 ec 08             	sub    esp,0x8
c001378c:	52                   	push   edx
c001378d:	50                   	push   eax
c001378e:	e8 8d ce fe ff       	call   c0000620 <strcpy>
c0013793:	83 c4 10             	add    esp,0x10
c0013796:	eb 64                	jmp    c00137fc <Process::Process(bool, char const*, Process*, char**)+0x188>
c0013798:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00137a0:	83 ec 0c             	sub    esp,0xc
c00137a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00137a7:	e8 c1 46 ff ff       	call   c0007e6d <malloc>
c00137ac:	83 c4 10             	add    esp,0x10
c00137af:	89 c3                	mov    ebx,eax
c00137b1:	83 ec 08             	sub    esp,0x8
c00137b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00137b8:	53                   	push   ebx
c00137b9:	e8 e2 58 ff ff       	call   c00090a0 <VgaText::VgaText(char const*)>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137c5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00137cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00137d5:	83 ec 0c             	sub    esp,0xc
c00137d8:	50                   	push   eax
c00137d9:	e8 62 51 ff ff       	call   c0008940 <addToTerminalCycle(VgaText*)>
c00137de:	83 c4 10             	add    esp,0x10
c00137e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137e5:	05 0c 01 00 00       	add    eax,0x10c
c00137ea:	83 ec 08             	sub    esp,0x8
c00137ed:	68 5d ea 01 c0       	push   0xc001ea5d
c00137f2:	50                   	push   eax
c00137f3:	e8 28 ce fe ff       	call   c0000620 <strcpy>
c00137f8:	83 c4 10             	add    esp,0x10
c00137fb:	90                   	nop
c00137fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013800:	83 c0 0c             	add    eax,0xc
c0013803:	83 ec 08             	sub    esp,0x8
c0013806:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001380a:	50                   	push   eax
c001380b:	e8 10 ce fe ff       	call   c0000620 <strcpy>
c0013810:	83 c4 10             	add    esp,0x10
c0013813:	83 ec 08             	sub    esp,0x8
c0013816:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001381a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001381e:	e8 01 fc ff ff       	call   c0013424 <Process::addArgs(char**)>
c0013823:	83 c4 10             	add    esp,0x10
c0013826:	90                   	nop
c0013827:	83 c4 24             	add    esp,0x24
c001382a:	5b                   	pop    ebx
c001382b:	5e                   	pop    esi
c001382c:	c3                   	ret    
c001382d:	8d 76 00             	lea    esi,[esi+0x0]

c0013830 <taskStartupFunction>:
c0013830:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013835:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013838:	c3                   	ret    
c0013839:	90                   	nop
c001383a:	66 90                	xchg   ax,ax

c001383c <Semaphore::Semaphore(int)>:
c001383c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013840:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013844:	89 10                	mov    DWORD PTR [eax],edx
c0013846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001384a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013855:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001385c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013860:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013867:	90                   	nop
c0013868:	c3                   	ret    
c0013869:	90                   	nop
c001386a:	66 90                	xchg   ax,ax

c001386c <Mutex::Mutex()>:
c001386c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013870:	6a 01                	push   0x1
c0013872:	50                   	push   eax
c0013873:	e8 c4 ff ff ff       	call   c001383c <Semaphore::Semaphore(int)>
c0013878:	83 c4 08             	add    esp,0x8
c001387b:	90                   	nop
c001387c:	c3                   	ret    
c001387d:	90                   	nop
c001387e:	66 90                	xchg   ax,ax

c0013880 <Process::createThread(void (*)(void*), void*, int)>:
c0013880:	57                   	push   edi
c0013881:	31 c9                	xor    ecx,ecx
c0013883:	56                   	push   esi
c0013884:	53                   	push   ebx
c0013885:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013889:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013890:	89 f2                	mov    edx,esi
c0013892:	66 90                	xchg   ax,ax
c0013894:	31 c0                	xor    eax,eax
c0013896:	66 89 d0             	mov    ax,dx
c0013899:	83 e2 01             	and    edx,0x1
c001389c:	74 12                	je     c00138b0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001389e:	d1 f8                	sar    eax,1
c00138a0:	41                   	inc    ecx
c00138a1:	89 c2                	mov    edx,eax
c00138a3:	83 f9 10             	cmp    ecx,0x10
c00138a6:	75 ec                	jne    c0013894 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00138a8:	31 db                	xor    ebx,ebx
c00138aa:	89 d8                	mov    eax,ebx
c00138ac:	5b                   	pop    ebx
c00138ad:	5e                   	pop    esi
c00138ae:	5f                   	pop    edi
c00138af:	c3                   	ret    
c00138b0:	b8 01 00 00 00       	mov    eax,0x1
c00138b5:	d3 e0                	shl    eax,cl
c00138b7:	09 c6                	or     esi,eax
c00138b9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00138bc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00138c3:	01 c0                	add    eax,eax
c00138c5:	01 c8                	add    eax,ecx
c00138c7:	8d 04 80             	lea    eax,[eax+eax*4]
c00138ca:	01 d8                	add    eax,ebx
c00138cc:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00138d3:	75 0b                	jne    c00138e0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00138d5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00138df:	90                   	nop
c00138e0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00138e6:	83 ec 08             	sub    esp,0x8
c00138e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00138ec:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00138ef:	01 c0                	add    eax,eax
c00138f1:	01 c8                	add    eax,ecx
c00138f3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00138f6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00138f9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00138ff:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013905:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013909:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001390f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013915:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001391c:	89 ca                	mov    edx,ecx
c001391e:	f7 da                	neg    edx
c0013920:	c1 e2 15             	shl    edx,0x15
c0013923:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013929:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001392f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013933:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001393d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013943:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013947:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001394d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013957:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013961:	53                   	push   ebx
c0013962:	68 04 3e 02 c0       	push   0xc0023e04
c0013967:	e8 80 8e 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001396c:	83 c4 10             	add    esp,0x10
c001396f:	89 d8                	mov    eax,ebx
c0013971:	5b                   	pop    ebx
c0013972:	5e                   	pop    esi
c0013973:	5f                   	pop    edi
c0013974:	c3                   	ret    
c0013975:	90                   	nop
c0013976:	66 90                	xchg   ax,ax

c0013978 <Process::createUserThread()>:
c0013978:	83 ec 0c             	sub    esp,0xc
c001397b:	68 80 00 00 00       	push   0x80
c0013980:	6a 00                	push   0x0
c0013982:	68 18 33 01 c0       	push   0xc0013318
c0013987:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001398b:	50                   	push   eax
c001398c:	e8 ef fe ff ff       	call   c0013880 <Process::createThread(void (*)(void*), void*, int)>
c0013991:	83 c4 1c             	add    esp,0x1c
c0013994:	c3                   	ret    
c0013995:	8d 76 00             	lea    esi,[esi+0x0]

c0013998 <setupMultitasking(void (*)())>:
c0013998:	56                   	push   esi
c0013999:	53                   	push   ebx
c001399a:	53                   	push   ebx
c001399b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001399f:	eb 13                	jmp    c00139b4 <setupMultitasking(void (*)())+0x1c>
c00139a1:	8d 76 00             	lea    esi,[esi+0x0]
c00139a4:	83 ec 0c             	sub    esp,0xc
c00139a7:	68 04 3e 02 c0       	push   0xc0023e04
c00139ac:	e8 83 8d 00 00       	call   c001c734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	83 ec 0c             	sub    esp,0xc
c00139b7:	68 04 3e 02 c0       	push   0xc0023e04
c00139bc:	e8 4f 8d 00 00       	call   c001c710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	84 c0                	test   al,al
c00139c6:	74 dc                	je     c00139a4 <setupMultitasking(void (*)())+0xc>
c00139c8:	83 ec 0c             	sub    esp,0xc
c00139cb:	68 1f 07 00 00       	push   0x71f
c00139d0:	e8 98 44 ff ff       	call   c0007e6d <malloc>
c00139d5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00139dc:	89 c3                	mov    ebx,eax
c00139de:	6a 00                	push   0x0
c00139e0:	68 61 ea 01 c0       	push   0xc001ea61
c00139e5:	6a 01                	push   0x1
c00139e7:	50                   	push   eax
c00139e8:	e8 87 fc ff ff       	call   c0013674 <Process::Process(bool, char const*, Process*, char**)>
c00139ed:	83 c4 14             	add    esp,0x14
c00139f0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00139f6:	89 1d 10 3e 02 c0    	mov    DWORD PTR ds:0xc0023e10,ebx
c00139fc:	50                   	push   eax
c00139fd:	e8 9b 51 ff ff       	call   c0008b9d <setActiveTerminal(VgaText*)>
c0013a02:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013a0a:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013a14:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013a1a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013a1d:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013a27:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013a2d:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013a33:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013a3d:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013a47:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013a51:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013a57:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013a5d:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013a67:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013a6d:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013a77:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013a7d:	5a                   	pop    edx
c0013a7e:	59                   	pop    ecx
c0013a7f:	68 5d ea 01 c0       	push   0xc001ea5d
c0013a84:	50                   	push   eax
c0013a85:	e8 96 cb fe ff       	call   c0000620 <strcpy>
c0013a8a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013a91:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013a95:	83 c4 14             	add    esp,0x14
c0013a98:	5b                   	pop    ebx
c0013a99:	5e                   	pop    esi
c0013a9a:	e9 ea c7 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0013a9f:	90                   	nop

c0013aa0 <schedule()>:
c0013aa0:	8b 15 e4 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023de4
c0013aa6:	85 d2                	test   edx,edx
c0013aa8:	74 0e                	je     c0013ab8 <schedule()+0x18>
c0013aaa:	c7 05 e0 3d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x1
c0013ab4:	c3                   	ret    
c0013ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ab8:	53                   	push   ebx
c0013ab9:	83 ec 14             	sub    esp,0x14
c0013abc:	68 04 3e 02 c0       	push   0xc0023e04
c0013ac1:	e8 4a 8c 00 00       	call   c001c710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013ac6:	83 c4 10             	add    esp,0x10
c0013ac9:	84 c0                	test   al,al
c0013acb:	75 3b                	jne    c0013b08 <schedule()+0x68>
c0013acd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ad2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013ad5:	4a                   	dec    edx
c0013ad6:	74 38                	je     c0013b10 <schedule()+0x70>
c0013ad8:	83 ec 0c             	sub    esp,0xc
c0013adb:	68 04 3e 02 c0       	push   0xc0023e04
c0013ae0:	e8 47 8c 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ae5:	c7 04 24 04 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e04
c0013aec:	89 c3                	mov    ebx,eax
c0013aee:	e8 41 8c 00 00       	call   c001c734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013af3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013afa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013afd:	e8 6e f8 ff ff       	call   c0013370 <switchToThread(ThreadControlBlock*)>
c0013b02:	83 c4 10             	add    esp,0x10
c0013b05:	8d 76 00             	lea    esi,[esi+0x0]
c0013b08:	83 c4 08             	add    esp,0x8
c0013b0b:	5b                   	pop    ebx
c0013b0c:	c3                   	ret    
c0013b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b10:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013b17:	83 ec 08             	sub    esp,0x8
c0013b1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b1f:	50                   	push   eax
c0013b20:	68 04 3e 02 c0       	push   0xc0023e04
c0013b25:	e8 c2 8c 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b2a:	83 c4 10             	add    esp,0x10
c0013b2d:	eb a9                	jmp    c0013ad8 <schedule()+0x38>
c0013b2f:	90                   	nop

c0013b30 <Semaphore::tryAcquire()>:
c0013b30:	53                   	push   ebx
c0013b31:	83 ec 08             	sub    esp,0x8
c0013b34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013b38:	fa                   	cli    
c0013b39:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0013b3e:	8d 50 01             	lea    edx,[eax+0x1]
c0013b41:	89 15 e8 3d 02 c0    	mov    DWORD PTR ds:0xc0023de8,edx
c0013b47:	8b 15 e4 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023de4
c0013b4d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013b50:	89 1d e4 3d 02 c0    	mov    DWORD PTR ds:0xc0023de4,ebx
c0013b56:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013b59:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013b5b:	7c 33                	jl     c0013b90 <Semaphore::tryAcquire()+0x60>
c0013b5d:	89 15 e4 3d 02 c0    	mov    DWORD PTR ds:0xc0023de4,edx
c0013b63:	85 d2                	test   edx,edx
c0013b65:	75 0d                	jne    c0013b74 <Semaphore::tryAcquire()+0x44>
c0013b67:	8b 15 e0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023de0
c0013b6d:	85 d2                	test   edx,edx
c0013b6f:	75 6b                	jne    c0013bdc <Semaphore::tryAcquire()+0xac>
c0013b71:	8d 76 00             	lea    esi,[esi+0x0]
c0013b74:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013b79:	85 c0                	test   eax,eax
c0013b7b:	74 0b                	je     c0013b88 <Semaphore::tryAcquire()+0x58>
c0013b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b80:	31 c0                	xor    eax,eax
c0013b82:	83 c4 08             	add    esp,0x8
c0013b85:	5b                   	pop    ebx
c0013b86:	c3                   	ret    
c0013b87:	90                   	nop
c0013b88:	fb                   	sti    
c0013b89:	83 c4 08             	add    esp,0x8
c0013b8c:	5b                   	pop    ebx
c0013b8d:	c3                   	ret    
c0013b8e:	66 90                	xchg   ax,ax
c0013b90:	43                   	inc    ebx
c0013b91:	89 15 e4 3d 02 c0    	mov    DWORD PTR ds:0xc0023de4,edx
c0013b97:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013b9a:	85 d2                	test   edx,edx
c0013b9c:	75 22                	jne    c0013bc0 <Semaphore::tryAcquire()+0x90>
c0013b9e:	8b 0d e0 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023de0
c0013ba4:	85 c9                	test   ecx,ecx
c0013ba6:	74 18                	je     c0013bc0 <Semaphore::tryAcquire()+0x90>
c0013ba8:	c7 05 e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x0
c0013bb2:	e8 e9 fe ff ff       	call   c0013aa0 <schedule()>
c0013bb7:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0013bbc:	48                   	dec    eax
c0013bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0013bc0:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013bc5:	85 c0                	test   eax,eax
c0013bc7:	75 0b                	jne    c0013bd4 <Semaphore::tryAcquire()+0xa4>
c0013bc9:	fb                   	sti    
c0013bca:	b0 01                	mov    al,0x1
c0013bcc:	83 c4 08             	add    esp,0x8
c0013bcf:	5b                   	pop    ebx
c0013bd0:	c3                   	ret    
c0013bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013bd4:	b0 01                	mov    al,0x1
c0013bd6:	83 c4 08             	add    esp,0x8
c0013bd9:	5b                   	pop    ebx
c0013bda:	c3                   	ret    
c0013bdb:	90                   	nop
c0013bdc:	c7 05 e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x0
c0013be6:	e8 b5 fe ff ff       	call   c0013aa0 <schedule()>
c0013beb:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0013bf0:	48                   	dec    eax
c0013bf1:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013bf6:	85 c0                	test   eax,eax
c0013bf8:	75 86                	jne    c0013b80 <Semaphore::tryAcquire()+0x50>
c0013bfa:	eb 8c                	jmp    c0013b88 <Semaphore::tryAcquire()+0x58>

c0013bfc <Semaphore::assertLocked(char const*)>:
c0013bfc:	83 ec 0c             	sub    esp,0xc
c0013bff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c03:	fa                   	cli    
c0013c04:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0013c0a:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c0013c0f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c12:	89 0d e4 3d 02 c0    	mov    DWORD PTR ds:0xc0023de4,ecx
c0013c18:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013c1a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013c1d:	7c 29                	jl     c0013c48 <Semaphore::assertLocked(char const*)+0x4c>
c0013c1f:	90                   	nop
c0013c20:	a3 e4 3d 02 c0       	mov    ds:0xc0023de4,eax
c0013c25:	85 c0                	test   eax,eax
c0013c27:	75 0b                	jne    c0013c34 <Semaphore::assertLocked(char const*)+0x38>
c0013c29:	a1 e0 3d 02 c0       	mov    eax,ds:0xc0023de0
c0013c2e:	85 c0                	test   eax,eax
c0013c30:	75 2e                	jne    c0013c60 <Semaphore::assertLocked(char const*)+0x64>
c0013c32:	66 90                	xchg   ax,ax
c0013c34:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0013c39:	48                   	dec    eax
c0013c3a:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013c3f:	75 03                	jne    c0013c44 <Semaphore::assertLocked(char const*)+0x48>
c0013c41:	fb                   	sti    
c0013c42:	66 90                	xchg   ax,ax
c0013c44:	83 c4 0c             	add    esp,0xc
c0013c47:	c3                   	ret    
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c4f:	52                   	push   edx
c0013c50:	e8 f6 ca ff ff       	call   c001074b <Krnl::panic(char const*)>
c0013c55:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c0013c5a:	83 c4 10             	add    esp,0x10
c0013c5d:	48                   	dec    eax
c0013c5e:	eb c0                	jmp    c0013c20 <Semaphore::assertLocked(char const*)+0x24>
c0013c60:	c7 05 e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x0
c0013c6a:	e8 31 fe ff ff       	call   c0013aa0 <schedule()>
c0013c6f:	eb c3                	jmp    c0013c34 <Semaphore::assertLocked(char const*)+0x38>
c0013c71:	8d 76 00             	lea    esi,[esi+0x0]

c0013c74 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013c74:	83 ec 0c             	sub    esp,0xc
c0013c77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c80:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c83:	e8 18 fe ff ff       	call   c0013aa0 <schedule()>
c0013c88:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0013c8d:	48                   	dec    eax
c0013c8e:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013c93:	75 03                	jne    c0013c98 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013c95:	fb                   	sti    
c0013c96:	66 90                	xchg   ax,ax
c0013c98:	83 c4 0c             	add    esp,0xc
c0013c9b:	c3                   	ret    

c0013c9c <blockTask(TaskState)>:
c0013c9c:	83 ec 0c             	sub    esp,0xc
c0013c9f:	fa                   	cli    
c0013ca0:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0013ca6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013caa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013caf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013cb2:	e8 e9 fd ff ff       	call   c0013aa0 <schedule()>
c0013cb7:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0013cbc:	48                   	dec    eax
c0013cbd:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013cc2:	75 04                	jne    c0013cc8 <blockTask(TaskState)+0x2c>
c0013cc4:	fb                   	sti    
c0013cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0013cc8:	83 c4 0c             	add    esp,0xc
c0013ccb:	c3                   	ret    

c0013ccc <waitTask(int, int*, int)>:
c0013ccc:	83 ec 18             	sub    esp,0x18
c0013ccf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013cd8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013cdb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013cdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ce4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013ce7:	6a 07                	push   0x7
c0013ce9:	e8 ae ff ff ff       	call   c0013c9c <blockTask(TaskState)>
c0013cee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cf3:	83 c4 10             	add    esp,0x10
c0013cf6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013cf9:	85 d2                	test   edx,edx
c0013cfb:	74 0b                	je     c0013d08 <waitTask(int, int*, int)+0x3c>
c0013cfd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013d00:	89 02                	mov    DWORD PTR [edx],eax
c0013d02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d07:	90                   	nop
c0013d08:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013d0b:	83 c4 0c             	add    esp,0xc
c0013d0e:	c3                   	ret    
c0013d0f:	90                   	nop

c0013d10 <milliTenthSleepUntil(unsigned int)>:
c0013d10:	83 ec 0c             	sub    esp,0xc
c0013d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d17:	39 05 ec 2e 02 c0    	cmp    DWORD PTR ds:0xc0022eec,eax
c0013d1d:	76 05                	jbe    c0013d24 <milliTenthSleepUntil(unsigned int)+0x14>
c0013d1f:	90                   	nop
c0013d20:	83 c4 0c             	add    esp,0xc
c0013d23:	c3                   	ret    
c0013d24:	fa                   	cli    
c0013d25:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0013d2b:	83 ec 08             	sub    esp,0x8
c0013d2e:	ff 05 e4 3d 02 c0    	inc    DWORD PTR ds:0xc0023de4
c0013d34:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d3a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013d3d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d43:	52                   	push   edx
c0013d44:	68 f8 3d 02 c0       	push   0xc0023df8
c0013d49:	e8 9e 8a 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d4e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013d55:	e8 42 ff ff ff       	call   c0013c9c <blockTask(TaskState)>
c0013d5a:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c0013d5f:	83 c4 10             	add    esp,0x10
c0013d62:	48                   	dec    eax
c0013d63:	a3 e4 3d 02 c0       	mov    ds:0xc0023de4,eax
c0013d68:	85 c0                	test   eax,eax
c0013d6a:	75 0c                	jne    c0013d78 <milliTenthSleepUntil(unsigned int)+0x68>
c0013d6c:	a1 e0 3d 02 c0       	mov    eax,ds:0xc0023de0
c0013d71:	85 c0                	test   eax,eax
c0013d73:	75 17                	jne    c0013d8c <milliTenthSleepUntil(unsigned int)+0x7c>
c0013d75:	8d 76 00             	lea    esi,[esi+0x0]
c0013d78:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0013d7d:	48                   	dec    eax
c0013d7e:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013d83:	75 9b                	jne    c0013d20 <milliTenthSleepUntil(unsigned int)+0x10>
c0013d85:	fb                   	sti    
c0013d86:	83 c4 0c             	add    esp,0xc
c0013d89:	c3                   	ret    
c0013d8a:	66 90                	xchg   ax,ax
c0013d8c:	c7 05 e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x0
c0013d96:	e8 05 fd ff ff       	call   c0013aa0 <schedule()>
c0013d9b:	eb db                	jmp    c0013d78 <milliTenthSleepUntil(unsigned int)+0x68>
c0013d9d:	8d 76 00             	lea    esi,[esi+0x0]

c0013da0 <milliTenthSleep(unsigned int)>:
c0013da0:	a1 ec 2e 02 c0       	mov    eax,ds:0xc0022eec
c0013da5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013da9:	e9 62 ff ff ff       	jmp    c0013d10 <milliTenthSleepUntil(unsigned int)>
c0013dae:	66 90                	xchg   ax,ax

c0013db0 <sleep(unsigned int)>:
c0013db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013db4:	8d 04 80             	lea    eax,[eax+eax*4]
c0013db7:	8d 04 80             	lea    eax,[eax+eax*4]
c0013dba:	8d 04 80             	lea    eax,[eax+eax*4]
c0013dbd:	8d 04 80             	lea    eax,[eax+eax*4]
c0013dc0:	c1 e0 04             	shl    eax,0x4
c0013dc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013dc7:	eb d7                	jmp    c0013da0 <milliTenthSleep(unsigned int)>
c0013dc9:	90                   	nop
c0013dca:	66 90                	xchg   ax,ax

c0013dcc <Semaphore::acquire()>:
c0013dcc:	83 ec 0c             	sub    esp,0xc
c0013dcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013dd3:	fa                   	cli    
c0013dd4:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c0013dd9:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0013ddf:	8d 48 01             	lea    ecx,[eax+0x1]
c0013de2:	89 0d e4 3d 02 c0    	mov    DWORD PTR ds:0xc0023de4,ecx
c0013de8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013deb:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013ded:	7d 2d                	jge    c0013e1c <Semaphore::acquire()+0x50>
c0013def:	41                   	inc    ecx
c0013df0:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013df3:	90                   	nop
c0013df4:	a3 e4 3d 02 c0       	mov    ds:0xc0023de4,eax
c0013df9:	85 c0                	test   eax,eax
c0013dfb:	75 0b                	jne    c0013e08 <Semaphore::acquire()+0x3c>
c0013dfd:	a1 e0 3d 02 c0       	mov    eax,ds:0xc0023de0
c0013e02:	85 c0                	test   eax,eax
c0013e04:	75 62                	jne    c0013e68 <Semaphore::acquire()+0x9c>
c0013e06:	66 90                	xchg   ax,ax
c0013e08:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0013e0d:	48                   	dec    eax
c0013e0e:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013e13:	75 03                	jne    c0013e18 <Semaphore::acquire()+0x4c>
c0013e15:	fb                   	sti    
c0013e16:	66 90                	xchg   ax,ax
c0013e18:	83 c4 0c             	add    esp,0xc
c0013e1b:	c3                   	ret    
c0013e1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e21:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013e28:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013e2b:	85 c9                	test   ecx,ecx
c0013e2d:	74 4d                	je     c0013e7c <Semaphore::acquire()+0xb0>
c0013e2f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013e32:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013e38:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013e3b:	90                   	nop
c0013e3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e41:	83 ec 0c             	sub    esp,0xc
c0013e44:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013e47:	68 dc ea 01 c0       	push   0xc001eadc
c0013e4c:	e8 ab 6d ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0013e51:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013e58:	e8 3f fe ff ff       	call   c0013c9c <blockTask(TaskState)>
c0013e5d:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	48                   	dec    eax
c0013e66:	eb 8c                	jmp    c0013df4 <Semaphore::acquire()+0x28>
c0013e68:	c7 05 e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x0
c0013e72:	e8 29 fc ff ff       	call   c0013aa0 <schedule()>
c0013e77:	eb 8f                	jmp    c0013e08 <Semaphore::acquire()+0x3c>
c0013e79:	8d 76 00             	lea    esi,[esi+0x0]
c0013e7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e81:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013e84:	eb b6                	jmp    c0013e3c <Semaphore::acquire()+0x70>
c0013e86:	66 90                	xchg   ax,ax

c0013e88 <taskReturned>:
c0013e88:	83 ec 18             	sub    esp,0x18
c0013e8b:	68 fc ea 01 c0       	push   0xc001eafc
c0013e90:	e8 b6 c8 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0013e95:	83 c4 10             	add    esp,0x10
c0013e98:	83 ec 0c             	sub    esp,0xc
c0013e9b:	6a 02                	push   0x2
c0013e9d:	e8 fa fd ff ff       	call   c0013c9c <blockTask(TaskState)>
c0013ea2:	fa                   	cli    
c0013ea3:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0013ea9:	e8 f2 fb ff ff       	call   c0013aa0 <schedule()>
c0013eae:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0013eb3:	83 c4 10             	add    esp,0x10
c0013eb6:	48                   	dec    eax
c0013eb7:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013ebc:	85 c0                	test   eax,eax
c0013ebe:	75 d8                	jne    c0013e98 <taskReturned+0x10>
c0013ec0:	fb                   	sti    
c0013ec1:	eb d5                	jmp    c0013e98 <taskReturned+0x10>
c0013ec3:	90                   	nop

c0013ec4 <Thr::processFromPID(int)>:
c0013ec4:	57                   	push   edi
c0013ec5:	56                   	push   esi
c0013ec6:	53                   	push   ebx
c0013ec7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ecb:	fa                   	cli    
c0013ecc:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0013ed2:	83 ec 0c             	sub    esp,0xc
c0013ed5:	68 04 3e 02 c0       	push   0xc0023e04
c0013eda:	e8 4d 88 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013edf:	83 c4 10             	add    esp,0x10
c0013ee2:	89 c7                	mov    edi,eax
c0013ee4:	eb 16                	jmp    c0013efc <Thr::processFromPID(int)+0x38>
c0013ee6:	66 90                	xchg   ax,ax
c0013ee8:	83 ec 0c             	sub    esp,0xc
c0013eeb:	68 04 3e 02 c0       	push   0xc0023e04
c0013ef0:	e8 37 88 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ef5:	83 c4 10             	add    esp,0x10
c0013ef8:	39 f8                	cmp    eax,edi
c0013efa:	74 4c                	je     c0013f48 <Thr::processFromPID(int)+0x84>
c0013efc:	83 ec 0c             	sub    esp,0xc
c0013eff:	68 04 3e 02 c0       	push   0xc0023e04
c0013f04:	e8 23 88 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f09:	c7 04 24 04 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e04
c0013f10:	89 c3                	mov    ebx,eax
c0013f12:	e8 1d 88 00 00       	call   c001c734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013f17:	58                   	pop    eax
c0013f18:	5a                   	pop    edx
c0013f19:	53                   	push   ebx
c0013f1a:	68 04 3e 02 c0       	push   0xc0023e04
c0013f1f:	e8 c8 88 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f24:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f27:	83 c4 10             	add    esp,0x10
c0013f2a:	39 30                	cmp    DWORD PTR [eax],esi
c0013f2c:	75 ba                	jne    c0013ee8 <Thr::processFromPID(int)+0x24>
c0013f2e:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0013f33:	48                   	dec    eax
c0013f34:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013f39:	74 09                	je     c0013f44 <Thr::processFromPID(int)+0x80>
c0013f3b:	90                   	nop
c0013f3c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f3f:	5b                   	pop    ebx
c0013f40:	5e                   	pop    esi
c0013f41:	5f                   	pop    edi
c0013f42:	c3                   	ret    
c0013f43:	90                   	nop
c0013f44:	fb                   	sti    
c0013f45:	eb f5                	jmp    c0013f3c <Thr::processFromPID(int)+0x78>
c0013f47:	90                   	nop
c0013f48:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0013f4d:	48                   	dec    eax
c0013f4e:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013f53:	75 07                	jne    c0013f5c <Thr::processFromPID(int)+0x98>
c0013f55:	fb                   	sti    
c0013f56:	5b                   	pop    ebx
c0013f57:	5e                   	pop    esi
c0013f58:	5f                   	pop    edi
c0013f59:	c3                   	ret    
c0013f5a:	66 90                	xchg   ax,ax
c0013f5c:	5b                   	pop    ebx
c0013f5d:	31 c0                	xor    eax,eax
c0013f5f:	5e                   	pop    esi
c0013f60:	5f                   	pop    edi
c0013f61:	c3                   	ret    
c0013f62:	66 90                	xchg   ax,ax

c0013f64 <unblockTask(ThreadControlBlock*)>:
c0013f64:	53                   	push   ebx
c0013f65:	83 ec 08             	sub    esp,0x8
c0013f68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f6c:	fa                   	cli    
c0013f6d:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0013f73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f76:	85 c0                	test   eax,eax
c0013f78:	74 66                	je     c0013fe0 <unblockTask(ThreadControlBlock*)+0x7c>
c0013f7a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f7d:	48                   	dec    eax
c0013f7e:	74 38                	je     c0013fb8 <unblockTask(ThreadControlBlock*)+0x54>
c0013f80:	83 ec 0c             	sub    esp,0xc
c0013f83:	68 04 3e 02 c0       	push   0xc0023e04
c0013f88:	e8 9f 87 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f8d:	83 c4 10             	add    esp,0x10
c0013f90:	85 c0                	test   eax,eax
c0013f92:	75 1c                	jne    c0013fb0 <unblockTask(ThreadControlBlock*)+0x4c>
c0013f94:	eb 5e                	jmp    c0013ff4 <unblockTask(ThreadControlBlock*)+0x90>
c0013f96:	66 90                	xchg   ax,ax
c0013f98:	83 ec 08             	sub    esp,0x8
c0013f9b:	50                   	push   eax
c0013f9c:	68 04 3e 02 c0       	push   0xc0023e04
c0013fa1:	e8 36 8b 00 00       	call   c001cadc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013fa6:	83 c4 10             	add    esp,0x10
c0013fa9:	85 c0                	test   eax,eax
c0013fab:	74 47                	je     c0013ff4 <unblockTask(ThreadControlBlock*)+0x90>
c0013fad:	8d 76 00             	lea    esi,[esi+0x0]
c0013fb0:	39 c3                	cmp    ebx,eax
c0013fb2:	75 e4                	jne    c0013f98 <unblockTask(ThreadControlBlock*)+0x34>
c0013fb4:	eb 12                	jmp    c0013fc8 <unblockTask(ThreadControlBlock*)+0x64>
c0013fb6:	66 90                	xchg   ax,ax
c0013fb8:	83 ec 0c             	sub    esp,0xc
c0013fbb:	68 7f ea 01 c0       	push   0xc001ea7f
c0013fc0:	e8 37 6c ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0013fc5:	83 c4 10             	add    esp,0x10
c0013fc8:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0013fcd:	48                   	dec    eax
c0013fce:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0013fd3:	75 03                	jne    c0013fd8 <unblockTask(ThreadControlBlock*)+0x74>
c0013fd5:	fb                   	sti    
c0013fd6:	66 90                	xchg   ax,ax
c0013fd8:	83 c4 08             	add    esp,0x8
c0013fdb:	5b                   	pop    ebx
c0013fdc:	c3                   	ret    
c0013fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0013fe0:	83 ec 0c             	sub    esp,0xc
c0013fe3:	68 68 ea 01 c0       	push   0xc001ea68
c0013fe8:	e8 0f 6c ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0013fed:	83 c4 10             	add    esp,0x10
c0013ff0:	eb d6                	jmp    c0013fc8 <unblockTask(ThreadControlBlock*)+0x64>
c0013ff2:	66 90                	xchg   ax,ax
c0013ff4:	83 ec 08             	sub    esp,0x8
c0013ff7:	53                   	push   ebx
c0013ff8:	68 04 3e 02 c0       	push   0xc0023e04
c0013ffd:	e8 ea 87 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014002:	83 c4 10             	add    esp,0x10
c0014005:	eb c1                	jmp    c0013fc8 <unblockTask(ThreadControlBlock*)+0x64>
c0014007:	90                   	nop

c0014008 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0014008:	55                   	push   ebp
c0014009:	57                   	push   edi
c001400a:	56                   	push   esi
c001400b:	53                   	push   ebx
c001400c:	83 ec 1c             	sub    esp,0x1c
c001400f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014013:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014016:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001401c:	85 ed                	test   ebp,ebp
c001401e:	7e 24                	jle    c0014044 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0014020:	31 f6                	xor    esi,esi
c0014022:	66 90                	xchg   ax,ax
c0014024:	83 ec 0c             	sub    esp,0xc
c0014027:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001402e:	46                   	inc    esi
c001402f:	57                   	push   edi
c0014030:	e8 48 3e ff ff       	call   c0007e7d <free>
c0014035:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014038:	83 c4 10             	add    esp,0x10
c001403b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0014041:	7f e1                	jg     c0014024 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0014043:	90                   	nop
c0014044:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001404e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014053:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0014056:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0014059:	d3 c0                	rol    eax,cl
c001405b:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0014062:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014065:	89 f7                	mov    edi,esi
c0014067:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001406f:	0f 85 77 01 00 00    	jne    c00141ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014075:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001407b:	85 ed                	test   ebp,ebp
c001407d:	74 1d                	je     c001409c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001407f:	83 ec 0c             	sub    esp,0xc
c0014082:	55                   	push   ebp
c0014083:	e8 68 c4 ff ff       	call   c00104f0 <EnvVarContainer::~EnvVarContainer()>
c0014088:	59                   	pop    ecx
c0014089:	5e                   	pop    esi
c001408a:	6a 0c                	push   0xc
c001408c:	55                   	push   ebp
c001408d:	e8 74 6a ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c0014092:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014095:	83 c4 10             	add    esp,0x10
c0014098:	89 f7                	mov    edi,esi
c001409a:	66 90                	xchg   ax,ax
c001409c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00140a2:	85 c0                	test   eax,eax
c00140a4:	0f 84 b6 00 00 00    	je     c0014160 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00140aa:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00140ad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00140b1:	31 c9                	xor    ecx,ecx
c00140b3:	eb 17                	jmp    c00140cc <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00140b5:	8d 76 00             	lea    esi,[esi+0x0]
c00140b8:	41                   	inc    ecx
c00140b9:	83 f9 10             	cmp    ecx,0x10
c00140bc:	0f 84 9e 00 00 00    	je     c0014160 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00140c2:	66 90                	xchg   ax,ax
c00140c4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00140ca:	66 90                	xchg   ax,ax
c00140cc:	31 d2                	xor    edx,edx
c00140ce:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c00140d5:	d3 fa                	sar    edx,cl
c00140d7:	83 e2 01             	and    edx,0x1
c00140da:	74 dc                	je     c00140b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140dc:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00140df:	01 d2                	add    edx,edx
c00140e1:	01 ca                	add    edx,ecx
c00140e3:	8d 14 92             	lea    edx,[edx+edx*4]
c00140e6:	01 d0                	add    eax,edx
c00140e8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00140ee:	83 fd 07             	cmp    ebp,0x7
c00140f1:	75 c5                	jne    c00140b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140f3:	05 40 02 00 00       	add    eax,0x240
c00140f8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00140fb:	83 fd ff             	cmp    ebp,0xffffffff
c00140fe:	0f 8c f0 00 00 00    	jl     c00141f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0014104:	0f 84 ae 01 00 00    	je     c00142b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c001410a:	85 ed                	test   ebp,ebp
c001410c:	0f 84 92 01 00 00    	je     c00142a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0014112:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0014114:	75 a2                	jne    c00140b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014116:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001411c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014120:	01 d0                	add    eax,edx
c0014122:	66 90                	xchg   ax,ax
c0014124:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014128:	83 ec 0c             	sub    esp,0xc
c001412b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0014131:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014134:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001413a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0014141:	50                   	push   eax
c0014142:	e8 1d fe ff ff       	call   c0013f64 <unblockTask(ThreadControlBlock*)>
c0014147:	83 c4 10             	add    esp,0x10
c001414a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001414d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014151:	89 f7                	mov    edi,esi
c0014153:	41                   	inc    ecx
c0014154:	83 f9 10             	cmp    ecx,0x10
c0014157:	0f 85 67 ff ff ff    	jne    c00140c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001415d:	8d 76 00             	lea    esi,[esi+0x0]
c0014160:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0014166:	85 c0                	test   eax,eax
c0014168:	74 62                	je     c00141cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c001416a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0014170:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0014176:	74 54                	je     c00141cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014178:	83 ec 0c             	sub    esp,0xc
c001417b:	68 04 3e 02 c0       	push   0xc0023e04
c0014180:	e8 a7 85 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014185:	c7 04 24 04 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e04
c001418c:	89 c7                	mov    edi,eax
c001418e:	e8 7d 85 00 00       	call   c001c710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014193:	83 c4 10             	add    esp,0x10
c0014196:	84 c0                	test   al,al
c0014198:	0f 84 ce 00 00 00    	je     c001426c <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001419e:	66 90                	xchg   ax,ax
c00141a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00141a3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00141a9:	85 d2                	test   edx,edx
c00141ab:	74 0f                	je     c00141bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00141ad:	83 ec 0c             	sub    esp,0xc
c00141b0:	8b 02                	mov    eax,DWORD PTR [edx]
c00141b2:	52                   	push   edx
c00141b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141b6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00141b9:	83 c4 10             	add    esp,0x10
c00141bc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00141c6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00141c9:	8d 76 00             	lea    esi,[esi+0x0]
c00141cc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00141d2:	85 db                	test   ebx,ebx
c00141d4:	74 16                	je     c00141ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00141d6:	83 ec 0c             	sub    esp,0xc
c00141d9:	53                   	push   ebx
c00141da:	e8 fb 5c ff ff       	call   c0009eda <VAS::~VAS()>
c00141df:	58                   	pop    eax
c00141e0:	5a                   	pop    edx
c00141e1:	6a 14                	push   0x14
c00141e3:	53                   	push   ebx
c00141e4:	e8 1d 69 ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c00141e9:	83 c4 10             	add    esp,0x10
c00141ec:	83 c4 1c             	add    esp,0x1c
c00141ef:	5b                   	pop    ebx
c00141f0:	5e                   	pop    esi
c00141f1:	5f                   	pop    edi
c00141f2:	5d                   	pop    ebp
c00141f3:	c3                   	ret    
c00141f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00141f8:	83 ec 0c             	sub    esp,0xc
c00141fb:	68 30 eb 01 c0       	push   0xc001eb30
c0014200:	e8 46 c5 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0014205:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014208:	83 c4 10             	add    esp,0x10
c001420b:	89 f7                	mov    edi,esi
c001420d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014211:	e9 a2 fe ff ff       	jmp    c00140b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014216:	66 90                	xchg   ax,ax
c0014218:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001421e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014224:	75 1e                	jne    c0014244 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014226:	83 ec 0c             	sub    esp,0xc
c0014229:	68 98 eb 01 c0       	push   0xc001eb98
c001422e:	e8 c9 69 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0014233:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001423a:	e8 5d fa ff ff       	call   c0013c9c <blockTask(TaskState)>
c001423f:	83 c4 10             	add    esp,0x10
c0014242:	66 90                	xchg   ax,ax
c0014244:	83 ec 08             	sub    esp,0x8
c0014247:	56                   	push   esi
c0014248:	68 04 3e 02 c0       	push   0xc0023e04
c001424d:	e8 9a 85 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014252:	c7 04 24 04 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e04
c0014259:	e8 ce 84 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001425e:	83 c4 10             	add    esp,0x10
c0014261:	39 f8                	cmp    eax,edi
c0014263:	0f 84 37 ff ff ff    	je     c00141a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014269:	8d 76 00             	lea    esi,[esi+0x0]
c001426c:	83 ec 0c             	sub    esp,0xc
c001426f:	68 04 3e 02 c0       	push   0xc0023e04
c0014274:	e8 b3 84 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014279:	c7 04 24 04 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e04
c0014280:	89 c6                	mov    esi,eax
c0014282:	e8 ad 84 00 00       	call   c001c734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014287:	83 c4 10             	add    esp,0x10
c001428a:	39 f3                	cmp    ebx,esi
c001428c:	74 b6                	je     c0014244 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001428e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014291:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014294:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001429a:	75 a8                	jne    c0014244 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001429c:	e9 77 ff ff ff       	jmp    c0014218 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c00142a1:	8d 76 00             	lea    esi,[esi+0x0]
c00142a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00142a8:	83 ec 0c             	sub    esp,0xc
c00142ab:	68 64 eb 01 c0       	push   0xc001eb64
c00142b0:	e9 4b ff ff ff       	jmp    c0014200 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00142b5:	8d 76 00             	lea    esi,[esi+0x0]
c00142b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00142ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00142be:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00142c1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00142c4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00142ca:	01 d7                	add    edi,edx
c00142cc:	89 f8                	mov    eax,edi
c00142ce:	e9 51 fe ff ff       	jmp    c0014124 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c00142d3:	90                   	nop

c00142d4 <cleanerTaskFunction(void*)>:
c00142d4:	53                   	push   ebx
c00142d5:	83 ec 08             	sub    esp,0x8
c00142d8:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c00142dd:	48                   	dec    eax
c00142de:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c00142e3:	75 03                	jne    c00142e8 <cleanerTaskFunction(void*)+0x14>
c00142e5:	fb                   	sti    
c00142e6:	66 90                	xchg   ax,ax
c00142e8:	fa                   	cli    
c00142e9:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c00142ee:	80 3d cc 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023dcc,0x0
c00142f5:	8d 50 01             	lea    edx,[eax+0x1]
c00142f8:	89 15 e8 3d 02 c0    	mov    DWORD PTR ds:0xc0023de8,edx
c00142fe:	0f 84 ac 00 00 00    	je     c00143b0 <cleanerTaskFunction(void*)+0xdc>
c0014304:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0014309:	85 c0                	test   eax,eax
c001430b:	75 03                	jne    c0014310 <cleanerTaskFunction(void*)+0x3c>
c001430d:	fb                   	sti    
c001430e:	66 90                	xchg   ax,ax
c0014310:	c6 05 cc 3d 02 c0 00 	mov    BYTE PTR ds:0xc0023dcc,0x0
c0014317:	fa                   	cli    
c0014318:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c001431e:	ff 05 e4 3d 02 c0    	inc    DWORD PTR ds:0xc0023de4
c0014324:	fa                   	cli    
c0014325:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c001432b:	eb 2b                	jmp    c0014358 <cleanerTaskFunction(void*)+0x84>
c001432d:	8d 76 00             	lea    esi,[esi+0x0]
c0014330:	83 ec 0c             	sub    esp,0xc
c0014333:	68 ec 3d 02 c0       	push   0xc0023dec
c0014338:	e8 ef 83 00 00       	call   c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001433d:	c7 04 24 ec 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dec
c0014344:	89 c3                	mov    ebx,eax
c0014346:	e8 e9 83 00 00       	call   c001c734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001434b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001434e:	e8 b5 fc ff ff       	call   c0014008 <cleanupTerminatedTask(ThreadControlBlock*)>
c0014353:	83 c4 10             	add    esp,0x10
c0014356:	66 90                	xchg   ax,ax
c0014358:	83 ec 0c             	sub    esp,0xc
c001435b:	68 ec 3d 02 c0       	push   0xc0023dec
c0014360:	e8 ab 83 00 00       	call   c001c710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014365:	83 c4 10             	add    esp,0x10
c0014368:	84 c0                	test   al,al
c001436a:	74 c4                	je     c0014330 <cleanerTaskFunction(void*)+0x5c>
c001436c:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0014371:	48                   	dec    eax
c0014372:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0014377:	75 03                	jne    c001437c <cleanerTaskFunction(void*)+0xa8>
c0014379:	fb                   	sti    
c001437a:	66 90                	xchg   ax,ax
c001437c:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c0014381:	48                   	dec    eax
c0014382:	a3 e4 3d 02 c0       	mov    ds:0xc0023de4,eax
c0014387:	0f 85 4b ff ff ff    	jne    c00142d8 <cleanerTaskFunction(void*)+0x4>
c001438d:	a1 e0 3d 02 c0       	mov    eax,ds:0xc0023de0
c0014392:	85 c0                	test   eax,eax
c0014394:	0f 84 3e ff ff ff    	je     c00142d8 <cleanerTaskFunction(void*)+0x4>
c001439a:	c7 05 e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x0
c00143a4:	e8 f7 f6 ff ff       	call   c0013aa0 <schedule()>
c00143a9:	e9 2a ff ff ff       	jmp    c00142d8 <cleanerTaskFunction(void*)+0x4>
c00143ae:	66 90                	xchg   ax,ax
c00143b0:	83 ec 0c             	sub    esp,0xc
c00143b3:	6a 02                	push   0x2
c00143b5:	e8 ba f8 ff ff       	call   c0013c74 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143ba:	83 c4 10             	add    esp,0x10
c00143bd:	e9 4e ff ff ff       	jmp    c0014310 <cleanerTaskFunction(void*)+0x3c>
c00143c2:	66 90                	xchg   ax,ax

c00143c4 <terminateTask(int)>:
c00143c4:	83 ec 14             	sub    esp,0x14
c00143c7:	fa                   	cli    
c00143c8:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c00143ce:	ff 05 e4 3d 02 c0    	inc    DWORD PTR ds:0xc0023de4
c00143d4:	fa                   	cli    
c00143d5:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c00143db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143e4:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00143e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143ec:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00143ef:	50                   	push   eax
c00143f0:	68 ec 3d 02 c0       	push   0xc0023dec
c00143f5:	e8 f2 83 00 00       	call   c001c7ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00143fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143ff:	83 c4 10             	add    esp,0x10
c0014402:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014409:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c001440e:	85 c0                	test   eax,eax
c0014410:	74 5e                	je     c0014470 <terminateTask(int)+0xac>
c0014412:	83 ec 0c             	sub    esp,0xc
c0014415:	c6 05 cc 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023dcc,0x1
c001441c:	50                   	push   eax
c001441d:	e8 42 fb ff ff       	call   c0013f64 <unblockTask(ThreadControlBlock*)>
c0014422:	83 c4 10             	add    esp,0x10
c0014425:	8d 76 00             	lea    esi,[esi+0x0]
c0014428:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c001442d:	48                   	dec    eax
c001442e:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0014433:	75 03                	jne    c0014438 <terminateTask(int)+0x74>
c0014435:	fb                   	sti    
c0014436:	66 90                	xchg   ax,ax
c0014438:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c001443d:	48                   	dec    eax
c001443e:	a3 e4 3d 02 c0       	mov    ds:0xc0023de4,eax
c0014443:	75 0b                	jne    c0014450 <terminateTask(int)+0x8c>
c0014445:	83 3d e0 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023de0,0x0
c001444c:	75 36                	jne    c0014484 <terminateTask(int)+0xc0>
c001444e:	66 90                	xchg   ax,ax
c0014450:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0014455:	48                   	dec    eax
c0014456:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c001445b:	75 03                	jne    c0014460 <terminateTask(int)+0x9c>
c001445d:	fb                   	sti    
c001445e:	66 90                	xchg   ax,ax
c0014460:	fa                   	cli    
c0014461:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0014467:	90                   	nop
c0014468:	e8 33 f6 ff ff       	call   c0013aa0 <schedule()>
c001446d:	eb e1                	jmp    c0014450 <terminateTask(int)+0x8c>
c001446f:	90                   	nop
c0014470:	83 ec 0c             	sub    esp,0xc
c0014473:	68 96 ea 01 c0       	push   0xc001ea96
c0014478:	e8 7f 67 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001447d:	83 c4 10             	add    esp,0x10
c0014480:	eb a6                	jmp    c0014428 <terminateTask(int)+0x64>
c0014482:	66 90                	xchg   ax,ax
c0014484:	c7 05 e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x0
c001448e:	eb d8                	jmp    c0014468 <terminateTask(int)+0xa4>

c0014490 <Thr::terminateFromIRQ(int)>:
c0014490:	83 ec 18             	sub    esp,0x18
c0014493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014497:	50                   	push   eax
c0014498:	e8 27 ff ff ff       	call   c00143c4 <terminateTask(int)>
c001449d:	90                   	nop
c001449e:	66 90                	xchg   ax,ax

c00144a0 <Semaphore::release()>:
c00144a0:	83 ec 0c             	sub    esp,0xc
c00144a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00144a7:	fa                   	cli    
c00144a8:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c00144ad:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c00144b3:	8d 48 01             	lea    ecx,[eax+0x1]
c00144b6:	89 0d e4 3d 02 c0    	mov    DWORD PTR ds:0xc0023de4,ecx
c00144bc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00144bf:	85 c9                	test   ecx,ecx
c00144c1:	74 41                	je     c0014504 <Semaphore::release()+0x64>
c00144c3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00144c6:	83 ec 0c             	sub    esp,0xc
c00144c9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00144cc:	51                   	push   ecx
c00144cd:	e8 92 fa ff ff       	call   c0013f64 <unblockTask(ThreadControlBlock*)>
c00144d2:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c00144d7:	83 c4 10             	add    esp,0x10
c00144da:	48                   	dec    eax
c00144db:	90                   	nop
c00144dc:	a3 e4 3d 02 c0       	mov    ds:0xc0023de4,eax
c00144e1:	85 c0                	test   eax,eax
c00144e3:	75 0b                	jne    c00144f0 <Semaphore::release()+0x50>
c00144e5:	a1 e0 3d 02 c0       	mov    eax,ds:0xc0023de0
c00144ea:	85 c0                	test   eax,eax
c00144ec:	75 1e                	jne    c001450c <Semaphore::release()+0x6c>
c00144ee:	66 90                	xchg   ax,ax
c00144f0:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c00144f5:	48                   	dec    eax
c00144f6:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c00144fb:	75 03                	jne    c0014500 <Semaphore::release()+0x60>
c00144fd:	fb                   	sti    
c00144fe:	66 90                	xchg   ax,ax
c0014500:	83 c4 0c             	add    esp,0xc
c0014503:	c3                   	ret    
c0014504:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014507:	eb d3                	jmp    c00144dc <Semaphore::release()+0x3c>
c0014509:	8d 76 00             	lea    esi,[esi+0x0]
c001450c:	c7 05 e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x0
c0014516:	e8 85 f5 ff ff       	call   c0013aa0 <schedule()>
c001451b:	eb d3                	jmp    c00144f0 <Semaphore::release()+0x50>
c001451d:	8d 76 00             	lea    esi,[esi+0x0]

c0014520 <__static_initialization_and_destruction_0(int, int)>:
c0014520:	83 ec 0c             	sub    esp,0xc
c0014523:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014528:	0f 85 8e 00 00 00    	jne    c00145bc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001452e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014536:	0f 85 80 00 00 00    	jne    c00145bc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001453c:	83 ec 0c             	sub    esp,0xc
c001453f:	68 04 3e 02 c0       	push   0xc0023e04
c0014544:	e8 4f 85 00 00       	call   c001ca98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014549:	83 c4 10             	add    esp,0x10
c001454c:	83 ec 04             	sub    esp,0x4
c001454f:	68 8c f6 01 c0       	push   0xc001f68c
c0014554:	68 04 3e 02 c0       	push   0xc0023e04
c0014559:	68 48 ca 01 c0       	push   0xc001ca48
c001455e:	e8 53 65 ff ff       	call   c000aab6 <__cxa_atexit>
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	83 ec 0c             	sub    esp,0xc
c0014569:	68 f8 3d 02 c0       	push   0xc0023df8
c001456e:	e8 25 85 00 00       	call   c001ca98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014573:	83 c4 10             	add    esp,0x10
c0014576:	83 ec 04             	sub    esp,0x4
c0014579:	68 8c f6 01 c0       	push   0xc001f68c
c001457e:	68 f8 3d 02 c0       	push   0xc0023df8
c0014583:	68 48 ca 01 c0       	push   0xc001ca48
c0014588:	e8 29 65 ff ff       	call   c000aab6 <__cxa_atexit>
c001458d:	83 c4 10             	add    esp,0x10
c0014590:	83 ec 0c             	sub    esp,0xc
c0014593:	68 ec 3d 02 c0       	push   0xc0023dec
c0014598:	e8 fb 84 00 00       	call   c001ca98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001459d:	83 c4 10             	add    esp,0x10
c00145a0:	83 ec 04             	sub    esp,0x4
c00145a3:	68 8c f6 01 c0       	push   0xc001f68c
c00145a8:	68 ec 3d 02 c0       	push   0xc0023dec
c00145ad:	68 48 ca 01 c0       	push   0xc001ca48
c00145b2:	e8 ff 64 ff ff       	call   c000aab6 <__cxa_atexit>
c00145b7:	83 c4 10             	add    esp,0x10
c00145ba:	66 90                	xchg   ax,ax
c00145bc:	90                   	nop
c00145bd:	83 c4 0c             	add    esp,0xc
c00145c0:	c3                   	ret    
c00145c1:	8d 76 00             	lea    esi,[esi+0x0]

c00145c4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00145c4:	83 ec 0c             	sub    esp,0xc
c00145c7:	83 ec 08             	sub    esp,0x8
c00145ca:	68 ff ff 00 00       	push   0xffff
c00145cf:	6a 01                	push   0x1
c00145d1:	e8 4a ff ff ff       	call   c0014520 <__static_initialization_and_destruction_0(int, int)>
c00145d6:	83 c4 10             	add    esp,0x10
c00145d9:	83 c4 0c             	add    esp,0xc
c00145dc:	c3                   	ret    

c00145dd <Vm::inbv(unsigned short)>:
c00145dd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00145e1:	66 81 fa fe fe       	cmp    dx,0xfefe
c00145e6:	75 06                	jne    c00145ee <Vm::inbv(unsigned short)+0x11>
c00145e8:	a0 4c 3e 02 c0       	mov    al,ds:0xc0023e4c
c00145ed:	c3                   	ret    
c00145ee:	ec                   	in     al,dx
c00145ef:	c3                   	ret    

c00145f0 <Vm::outbv(unsigned short, unsigned char)>:
c00145f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00145f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145f8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00145fd:	75 25                	jne    c0014624 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00145ff:	8b 0d 4c 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e4c
c0014605:	8d 51 01             	lea    edx,[ecx+0x1]
c0014608:	88 81 60 3e 02 c0    	mov    BYTE PTR [ecx-0x3ffdc1a0],al
c001460e:	89 15 4c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e4c,edx
c0014614:	83 fa 20             	cmp    edx,0x20
c0014617:	75 0c                	jne    c0014625 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014619:	c7 05 4c 3e 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023e4c,0x1f
c0014623:	c3                   	ret    
c0014624:	ee                   	out    dx,al
c0014625:	c3                   	ret    

c0014626 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001462b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014630:	c1 e0 04             	shl    eax,0x4
c0014633:	01 d0                	add    eax,edx
c0014635:	c3                   	ret    

c0014636 <Vm::getSegment(unsigned int)>:
c0014636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001463a:	c1 e8 10             	shr    eax,0x10
c001463d:	c3                   	ret    

c001463e <Vm::getOffset(unsigned int)>:
c001463e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014642:	c3                   	ret    

c0014643 <Vm::mainloop2()>:
c0014643:	83 ec 18             	sub    esp,0x18
c0014646:	fa                   	cli    
c0014647:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c001464d:	6a 02                	push   0x2
c001464f:	c6 05 45 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e45,0x1
c0014656:	e8 19 f6 ff ff       	call   c0013c74 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001465b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014660:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014664:	52                   	push   edx
c0014665:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014669:	52                   	push   edx
c001466a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001466e:	52                   	push   edx
c001466f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014673:	50                   	push   eax
c0014674:	e8 b6 bb fe ff       	call   c000022f <goToVM86>
c0014679:	83 c4 2c             	add    esp,0x2c
c001467c:	c3                   	ret    

c001467d <Vm::mainVm8086Loop(void*)>:
c001467d:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0014682:	48                   	dec    eax
c0014683:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0014688:	75 01                	jne    c001468b <Vm::mainVm8086Loop(void*)+0xe>
c001468a:	fb                   	sti    
c001468b:	eb b6                	jmp    c0014643 <Vm::mainloop2()>

c001468d <Vm::mainloop3(unsigned long)>:
c001468d:	83 ec 18             	sub    esp,0x18
c0014690:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014694:	fa                   	cli    
c0014695:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c001469b:	6a 02                	push   0x2
c001469d:	c6 05 44 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e44,0x1
c00146a4:	a3 40 3e 02 c0       	mov    ds:0xc0023e40,eax
c00146a9:	e8 c6 f5 ff ff       	call   c0013c74 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00146ae:	83 c4 1c             	add    esp,0x1c
c00146b1:	eb 90                	jmp    c0014643 <Vm::mainloop2()>

c00146b3 <Vm::initialise8086()>:
c00146b3:	83 ec 0c             	sub    esp,0xc
c00146b6:	68 80 00 00 00       	push   0x80
c00146bb:	6a 00                	push   0x0
c00146bd:	68 7d 46 01 c0       	push   0xc001467d
c00146c2:	ff 35 10 3e 02 c0    	push   DWORD PTR ds:0xc0023e10
c00146c8:	e8 b3 f1 ff ff       	call   c0013880 <Process::createThread(void (*)(void*), void*, int)>
c00146cd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00146d4:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c00146d9:	68 00 01 00 00       	push   0x100
c00146de:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c00146e3:	6a 00                	push   0x0
c00146e5:	6a 00                	push   0x0
c00146e7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00146ed:	e8 46 5c ff ff       	call   c000a338 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00146f2:	83 c4 2c             	add    esp,0x2c
c00146f5:	c3                   	ret    

c00146f6 <Vm::finish8086()>:
c00146f6:	53                   	push   ebx
c00146f7:	83 ec 08             	sub    esp,0x8
c00146fa:	fa                   	cli    
c00146fb:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0014701:	80 3d 44 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e44,0x0
c0014708:	75 15                	jne    c001471f <Vm::finish8086()+0x29>
c001470a:	e8 91 f3 ff ff       	call   c0013aa0 <schedule()>
c001470f:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0014714:	48                   	dec    eax
c0014715:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c001471a:	75 de                	jne    c00146fa <Vm::finish8086()+0x4>
c001471c:	fb                   	sti    
c001471d:	eb db                	jmp    c00146fa <Vm::finish8086()+0x4>
c001471f:	83 ec 0c             	sub    esp,0xc
c0014722:	8b 1d 40 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e40
c0014728:	ff 35 48 3e 02 c0    	push   DWORD PTR ds:0xc0023e48
c001472e:	c6 05 44 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e44,0x0
c0014735:	e8 2a f8 ff ff       	call   c0013f64 <unblockTask(ThreadControlBlock*)>
c001473a:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c001473f:	83 c4 10             	add    esp,0x10
c0014742:	8d 50 ff             	lea    edx,[eax-0x1]
c0014745:	89 15 e8 3d 02 c0    	mov    DWORD PTR ds:0xc0023de8,edx
c001474b:	85 d2                	test   edx,edx
c001474d:	75 01                	jne    c0014750 <Vm::finish8086()+0x5a>
c001474f:	fb                   	sti    
c0014750:	89 d8                	mov    eax,ebx
c0014752:	83 c4 08             	add    esp,0x8
c0014755:	5b                   	pop    ebx
c0014756:	c3                   	ret    

c0014757 <Vm::getOutput8086(unsigned char*)>:
c0014757:	57                   	push   edi
c0014758:	8b 0d 4c 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e4c
c001475e:	56                   	push   esi
c001475f:	be 60 3e 02 c0       	mov    esi,0xc0023e60
c0014764:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014768:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001476a:	a1 4c 3e 02 c0       	mov    eax,ds:0xc0023e4c
c001476f:	5e                   	pop    esi
c0014770:	c7 05 4c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e4c,0x0
c001477a:	5f                   	pop    edi
c001477b:	c3                   	ret    

c001477c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001477c:	55                   	push   ebp
c001477d:	57                   	push   edi
c001477e:	56                   	push   esi
c001477f:	53                   	push   ebx
c0014780:	83 ec 0c             	sub    esp,0xc
c0014783:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014787:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001478b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001478f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014793:	fa                   	cli    
c0014794:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c001479a:	80 3d 45 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e45,0x0
c00147a1:	75 15                	jne    c00147b8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00147a3:	e8 f8 f2 ff ff       	call   c0013aa0 <schedule()>
c00147a8:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c00147ad:	48                   	dec    eax
c00147ae:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c00147b3:	75 de                	jne    c0014793 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00147b5:	fb                   	sti    
c00147b6:	eb db                	jmp    c0014793 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00147b8:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c00147bd:	c7 05 4c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e4c,0x0
c00147c7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00147cb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00147cf:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00147d3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00147d7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00147db:	0f b7 ff             	movzx  edi,di
c00147de:	0f b7 f6             	movzx  esi,si
c00147e1:	50                   	push   eax
c00147e2:	6a 20                	push   0x20
c00147e4:	6a 00                	push   0x0
c00147e6:	68 60 3e 02 c0       	push   0xc0023e60
c00147eb:	e8 00 bd fe ff       	call   c00004f0 <memset>
c00147f0:	5a                   	pop    edx
c00147f1:	59                   	pop    ecx
c00147f2:	57                   	push   edi
c00147f3:	56                   	push   esi
c00147f4:	e8 2d fe ff ff       	call   c0014626 <Vm::realToLinear(unsigned short, unsigned short)>
c00147f9:	83 c4 10             	add    esp,0x10
c00147fc:	89 c7                	mov    edi,eax
c00147fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014802:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014806:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014808:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c001480d:	c6 05 45 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e45,0x0
c0014814:	48                   	dec    eax
c0014815:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c001481a:	75 01                	jne    c001481d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001481c:	fb                   	sti    
c001481d:	83 ec 0c             	sub    esp,0xc
c0014820:	ff 35 48 3e 02 c0    	push   DWORD PTR ds:0xc0023e48
c0014826:	e8 39 f7 ff ff       	call   c0013f64 <unblockTask(ThreadControlBlock*)>
c001482b:	83 c4 1c             	add    esp,0x1c
c001482e:	b0 01                	mov    al,0x1
c0014830:	5b                   	pop    ebx
c0014831:	5e                   	pop    esi
c0014832:	5f                   	pop    edi
c0014833:	5d                   	pop    ebp
c0014834:	c3                   	ret    

c0014835 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014835:	55                   	push   ebp
c0014836:	57                   	push   edi
c0014837:	56                   	push   esi
c0014838:	53                   	push   ebx
c0014839:	83 ec 2c             	sub    esp,0x2c
c001483c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014840:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014844:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014848:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001484c:	fa                   	cli    
c001484d:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c0014853:	0f b6 35 45 3e 02 c0 	movzx  esi,BYTE PTR ds:0xc0023e45
c001485a:	89 f0                	mov    eax,esi
c001485c:	84 c0                	test   al,al
c001485e:	75 1d                	jne    c001487d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014864:	e8 37 f2 ff ff       	call   c0013aa0 <schedule()>
c0014869:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c001486e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014872:	48                   	dec    eax
c0014873:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0014878:	75 d2                	jne    c001484c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001487a:	fb                   	sti    
c001487b:	eb cf                	jmp    c001484c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001487d:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0014882:	c7 05 4c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e4c,0x0
c001488c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014890:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014894:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014898:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001489c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00148a0:	50                   	push   eax
c00148a1:	6a 20                	push   0x20
c00148a3:	6a 00                	push   0x0
c00148a5:	68 60 3e 02 c0       	push   0xc0023e60
c00148aa:	e8 41 bc fe ff       	call   c00004f0 <memset>
c00148af:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00148b6:	e8 b2 35 ff ff       	call   c0007e6d <malloc>
c00148bb:	83 c4 0c             	add    esp,0xc
c00148be:	89 c3                	mov    ebx,eax
c00148c0:	ff 35 10 3e 02 c0    	push   DWORD PTR ds:0xc0023e10
c00148c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00148ca:	50                   	push   eax
c00148cb:	e8 a2 68 ff ff       	call   c000b172 <File::File(char const*, Process*)>
c00148d0:	83 c4 10             	add    esp,0x10
c00148d3:	85 db                	test   ebx,ebx
c00148d5:	75 0a                	jne    c00148e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00148d7:	83 ec 0c             	sub    esp,0xc
c00148da:	68 c0 eb 01 c0       	push   0xc001ebc0
c00148df:	eb 3e                	jmp    c001491f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00148e1:	50                   	push   eax
c00148e2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00148e6:	50                   	push   eax
c00148e7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00148eb:	50                   	push   eax
c00148ec:	53                   	push   ebx
c00148ed:	e8 ec 6b ff ff       	call   c000b4de <File::stat(unsigned long long*, bool*)>
c00148f2:	83 c4 10             	add    esp,0x10
c00148f5:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00148fa:	74 0a                	je     c0014906 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00148fc:	83 ec 0c             	sub    esp,0xc
c00148ff:	68 d4 eb 01 c0       	push   0xc001ebd4
c0014904:	eb 19                	jmp    c001491f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014906:	51                   	push   ecx
c0014907:	51                   	push   ecx
c0014908:	6a 01                	push   0x1
c001490a:	53                   	push   ebx
c001490b:	e8 22 69 ff ff       	call   c000b232 <File::open(FileOpenMode)>
c0014910:	83 c4 10             	add    esp,0x10
c0014913:	85 c0                	test   eax,eax
c0014915:	74 24                	je     c001493b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014917:	83 ec 0c             	sub    esp,0xc
c001491a:	68 ed eb 01 c0       	push   0xc001ebed
c001491f:	e8 27 be ff ff       	call   c001074b <Krnl::panic(char const*)>
c0014924:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0014929:	83 c4 10             	add    esp,0x10
c001492c:	48                   	dec    eax
c001492d:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0014932:	85 c0                	test   eax,eax
c0014934:	75 01                	jne    c0014937 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014936:	fb                   	sti    
c0014937:	31 f6                	xor    esi,esi
c0014939:	eb 58                	jmp    c0014993 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001493b:	0f b7 ed             	movzx  ebp,bp
c001493e:	50                   	push   eax
c001493f:	0f b7 ff             	movzx  edi,di
c0014942:	50                   	push   eax
c0014943:	55                   	push   ebp
c0014944:	57                   	push   edi
c0014945:	e8 dc fc ff ff       	call   c0014626 <Vm::realToLinear(unsigned short, unsigned short)>
c001494a:	5a                   	pop    edx
c001494b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001494d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014951:	51                   	push   ecx
c0014952:	50                   	push   eax
c0014953:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014957:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001495b:	53                   	push   ebx
c001495c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001495f:	83 c4 14             	add    esp,0x14
c0014962:	53                   	push   ebx
c0014963:	e8 28 69 ff ff       	call   c000b290 <File::close()>
c0014968:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c001496d:	83 c4 10             	add    esp,0x10
c0014970:	48                   	dec    eax
c0014971:	c6 05 45 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e45,0x0
c0014978:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c001497d:	85 c0                	test   eax,eax
c001497f:	75 01                	jne    c0014982 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014981:	fb                   	sti    
c0014982:	83 ec 0c             	sub    esp,0xc
c0014985:	ff 35 48 3e 02 c0    	push   DWORD PTR ds:0xc0023e48
c001498b:	e8 d4 f5 ff ff       	call   c0013f64 <unblockTask(ThreadControlBlock*)>
c0014990:	83 c4 10             	add    esp,0x10
c0014993:	83 c4 2c             	add    esp,0x2c
c0014996:	89 f0                	mov    eax,esi
c0014998:	5b                   	pop    ebx
c0014999:	5e                   	pop    esi
c001499a:	5f                   	pop    edi
c001499b:	5d                   	pop    ebp
c001499c:	c3                   	ret    

c001499d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001499d:	57                   	push   edi
c001499e:	56                   	push   esi
c001499f:	53                   	push   ebx
c00149a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149ac:	83 e8 06             	sub    eax,0x6
c00149af:	0f b7 c0             	movzx  eax,ax
c00149b2:	50                   	push   eax
c00149b3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00149b8:	50                   	push   eax
c00149b9:	e8 68 fc ff ff       	call   c0014626 <Vm::realToLinear(unsigned short, unsigned short)>
c00149be:	5a                   	pop    edx
c00149bf:	5e                   	pop    esi
c00149c0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00149c3:	8d 56 fa             	lea    edx,[esi-0x6]
c00149c6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00149cc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00149cf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00149d2:	83 c2 02             	add    edx,0x2
c00149d5:	66 89 10             	mov    WORD PTR [eax],dx
c00149d8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00149db:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00149df:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00149e2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00149e6:	89 d6                	mov    esi,edx
c00149e8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00149ee:	66 81 e6 ff fd       	and    si,0xfdff
c00149f3:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00149f7:	74 07                	je     c0014a00 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00149f9:	89 d6                	mov    esi,edx
c00149fb:	66 81 ce 00 02       	or     si,0x200
c0014a00:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014a04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a09:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014a0d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014a15:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014a18:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014a20:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014a23:	5b                   	pop    ebx
c0014a24:	5e                   	pop    esi
c0014a25:	5f                   	pop    edi
c0014a26:	c3                   	ret    

c0014a27 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014a27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a2c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a31:	c1 e0 04             	shl    eax,0x4
c0014a34:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014a37:	c3                   	ret    

c0014a38 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014a38:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a3d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a42:	c1 e0 04             	shl    eax,0x4
c0014a45:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014a49:	c3                   	ret    

c0014a4a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014a4a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a4f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a54:	c1 e0 04             	shl    eax,0x4
c0014a57:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014a5a:	c3                   	ret    

c0014a5b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014a5b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a60:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a65:	c1 e0 04             	shl    eax,0x4
c0014a68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a6c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014a6f:	c3                   	ret    

c0014a70 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014a70:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a75:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a7a:	c1 e0 04             	shl    eax,0x4
c0014a7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a81:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014a85:	c3                   	ret    

c0014a86 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014a86:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a8b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a90:	c1 e0 04             	shl    eax,0x4
c0014a93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a97:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014a9a:	c3                   	ret    

c0014a9b <Vm::faultHandler(regs*)>:
c0014a9b:	55                   	push   ebp
c0014a9c:	57                   	push   edi
c0014a9d:	56                   	push   esi
c0014a9e:	53                   	push   ebx
c0014a9f:	83 ec 1c             	sub    esp,0x1c
c0014aa2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014aa6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014aa9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014aad:	0f b7 f8             	movzx  edi,ax
c0014ab0:	52                   	push   edx
c0014ab1:	0f b7 c0             	movzx  eax,ax
c0014ab4:	50                   	push   eax
c0014ab5:	e8 6c fb ff ff       	call   c0014626 <Vm::realToLinear(unsigned short, unsigned short)>
c0014aba:	5a                   	pop    edx
c0014abb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014abe:	59                   	pop    ecx
c0014abf:	89 c1                	mov    ecx,eax
c0014ac1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014ac4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ac8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014acd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ad1:	0f b7 c5             	movzx  eax,bp
c0014ad4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ad8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014adc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ae0:	e8 41 fb ff ff       	call   c0014626 <Vm::realToLinear(unsigned short, unsigned short)>
c0014ae5:	5e                   	pop    esi
c0014ae6:	be 06 00 00 00       	mov    esi,0x6
c0014aeb:	5a                   	pop    edx
c0014aec:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014af1:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014af6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014af9:	80 fa 9d             	cmp    dl,0x9d
c0014afc:	0f 84 2c 02 00 00    	je     c0014d2e <Vm::faultHandler(regs*)+0x293>
c0014b02:	0f 87 91 00 00 00    	ja     c0014b99 <Vm::faultHandler(regs*)+0xfe>
c0014b08:	80 fa 66             	cmp    dl,0x66
c0014b0b:	0f 84 98 01 00 00    	je     c0014ca9 <Vm::faultHandler(regs*)+0x20e>
c0014b11:	77 47                	ja     c0014b5a <Vm::faultHandler(regs*)+0xbf>
c0014b13:	80 fa 36             	cmp    dl,0x36
c0014b16:	0f 84 80 01 00 00    	je     c0014c9c <Vm::faultHandler(regs*)+0x201>
c0014b1c:	77 1a                	ja     c0014b38 <Vm::faultHandler(regs*)+0x9d>
c0014b1e:	80 fa 26             	cmp    dl,0x26
c0014b21:	0f 84 4e 01 00 00    	je     c0014c75 <Vm::faultHandler(regs*)+0x1da>
c0014b27:	80 fa 2e             	cmp    dl,0x2e
c0014b2a:	0f 85 e2 05 00 00    	jne    c0015112 <Vm::faultHandler(regs*)+0x677>
c0014b30:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b33:	31 f6                	xor    esi,esi
c0014b35:	41                   	inc    ecx
c0014b36:	eb be                	jmp    c0014af6 <Vm::faultHandler(regs*)+0x5b>
c0014b38:	80 fa 64             	cmp    dl,0x64
c0014b3b:	0f 84 41 01 00 00    	je     c0014c82 <Vm::faultHandler(regs*)+0x1e7>
c0014b41:	0f 87 48 01 00 00    	ja     c0014c8f <Vm::faultHandler(regs*)+0x1f4>
c0014b47:	80 fa 3e             	cmp    dl,0x3e
c0014b4a:	0f 85 c2 05 00 00    	jne    c0015112 <Vm::faultHandler(regs*)+0x677>
c0014b50:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b53:	be 01 00 00 00       	mov    esi,0x1
c0014b58:	eb db                	jmp    c0014b35 <Vm::faultHandler(regs*)+0x9a>
c0014b5a:	80 fa 6d             	cmp    dl,0x6d
c0014b5d:	0f 84 ec 02 00 00    	je     c0014e4f <Vm::faultHandler(regs*)+0x3b4>
c0014b63:	77 17                	ja     c0014b7c <Vm::faultHandler(regs*)+0xe1>
c0014b65:	80 fa 67             	cmp    dl,0x67
c0014b68:	0f 84 48 01 00 00    	je     c0014cb6 <Vm::faultHandler(regs*)+0x21b>
c0014b6e:	80 fa 6c             	cmp    dl,0x6c
c0014b71:	0f 84 69 02 00 00    	je     c0014de0 <Vm::faultHandler(regs*)+0x345>
c0014b77:	e9 96 05 00 00       	jmp    c0015112 <Vm::faultHandler(regs*)+0x677>
c0014b7c:	80 fa 6f             	cmp    dl,0x6f
c0014b7f:	0f 84 f4 03 00 00    	je     c0014f79 <Vm::faultHandler(regs*)+0x4de>
c0014b85:	0f 82 59 03 00 00    	jb     c0014ee4 <Vm::faultHandler(regs*)+0x449>
c0014b8b:	80 fa 9c             	cmp    dl,0x9c
c0014b8e:	0f 84 2f 01 00 00    	je     c0014cc3 <Vm::faultHandler(regs*)+0x228>
c0014b94:	e9 79 05 00 00       	jmp    c0015112 <Vm::faultHandler(regs*)+0x677>
c0014b99:	80 fa ec             	cmp    dl,0xec
c0014b9c:	0f 84 14 05 00 00    	je     c00150b6 <Vm::faultHandler(regs*)+0x61b>
c0014ba2:	77 7b                	ja     c0014c1f <Vm::faultHandler(regs*)+0x184>
c0014ba4:	80 fa e4             	cmp    dl,0xe4
c0014ba7:	0f 84 93 04 00 00    	je     c0015040 <Vm::faultHandler(regs*)+0x5a5>
c0014bad:	77 53                	ja     c0014c02 <Vm::faultHandler(regs*)+0x167>
c0014baf:	80 fa cd             	cmp    dl,0xcd
c0014bb2:	0f 84 d9 01 00 00    	je     c0014d91 <Vm::faultHandler(regs*)+0x2f6>
c0014bb8:	80 fa cf             	cmp    dl,0xcf
c0014bbb:	0f 85 51 05 00 00    	jne    c0015112 <Vm::faultHandler(regs*)+0x677>
c0014bc1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014bc4:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014bc7:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014bcb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014bce:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014bd2:	81 ca 00 02 02 00    	or     edx,0x20200
c0014bd8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014bdb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bdf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014be5:	66 c1 e8 09          	shr    ax,0x9
c0014be9:	83 e0 01             	and    eax,0x1
c0014bec:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bef:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014bf2:	83 c0 06             	add    eax,0x6
c0014bf5:	25 ff ff 00 00       	and    eax,0xffff
c0014bfa:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014bfd:	e9 0c 05 00 00       	jmp    c001510e <Vm::faultHandler(regs*)+0x673>
c0014c02:	80 fa e6             	cmp    dl,0xe6
c0014c05:	0f 84 7f 04 00 00    	je     c001508a <Vm::faultHandler(regs*)+0x5ef>
c0014c0b:	0f 82 4b 04 00 00    	jb     c001505c <Vm::faultHandler(regs*)+0x5c1>
c0014c11:	80 fa e7             	cmp    dl,0xe7
c0014c14:	0f 84 87 04 00 00    	je     c00150a1 <Vm::faultHandler(regs*)+0x606>
c0014c1a:	e9 f3 04 00 00       	jmp    c0015112 <Vm::faultHandler(regs*)+0x677>
c0014c1f:	80 fa ef             	cmp    dl,0xef
c0014c22:	0f 84 d1 04 00 00    	je     c00150f9 <Vm::faultHandler(regs*)+0x65e>
c0014c28:	77 28                	ja     c0014c52 <Vm::faultHandler(regs*)+0x1b7>
c0014c2a:	80 fa ed             	cmp    dl,0xed
c0014c2d:	0f 84 9f 04 00 00    	je     c00150d2 <Vm::faultHandler(regs*)+0x637>
c0014c33:	80 fa ee             	cmp    dl,0xee
c0014c36:	0f 85 d6 04 00 00    	jne    c0015112 <Vm::faultHandler(regs*)+0x677>
c0014c3c:	50                   	push   eax
c0014c3d:	50                   	push   eax
c0014c3e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014c42:	50                   	push   eax
c0014c43:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c47:	50                   	push   eax
c0014c48:	e8 a3 f9 ff ff       	call   c00145f0 <Vm::outbv(unsigned short, unsigned char)>
c0014c4d:	e9 9f 04 00 00       	jmp    c00150f1 <Vm::faultHandler(regs*)+0x656>
c0014c52:	80 fa fa             	cmp    dl,0xfa
c0014c55:	0f 84 69 01 00 00    	je     c0014dc4 <Vm::faultHandler(regs*)+0x329>
c0014c5b:	80 fa fb             	cmp    dl,0xfb
c0014c5e:	0f 84 6e 01 00 00    	je     c0014dd2 <Vm::faultHandler(regs*)+0x337>
c0014c64:	80 fa f3             	cmp    dl,0xf3
c0014c67:	0f 85 a5 04 00 00    	jne    c0015112 <Vm::faultHandler(regs*)+0x677>
c0014c6d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c70:	e9 c0 fe ff ff       	jmp    c0014b35 <Vm::faultHandler(regs*)+0x9a>
c0014c75:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c78:	be 02 00 00 00       	mov    esi,0x2
c0014c7d:	e9 b3 fe ff ff       	jmp    c0014b35 <Vm::faultHandler(regs*)+0x9a>
c0014c82:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c85:	be 03 00 00 00       	mov    esi,0x3
c0014c8a:	e9 a6 fe ff ff       	jmp    c0014b35 <Vm::faultHandler(regs*)+0x9a>
c0014c8f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c92:	be 04 00 00 00       	mov    esi,0x4
c0014c97:	e9 99 fe ff ff       	jmp    c0014b35 <Vm::faultHandler(regs*)+0x9a>
c0014c9c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c9f:	be 05 00 00 00       	mov    esi,0x5
c0014ca4:	e9 8c fe ff ff       	jmp    c0014b35 <Vm::faultHandler(regs*)+0x9a>
c0014ca9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014cac:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014cb1:	e9 7f fe ff ff       	jmp    c0014b35 <Vm::faultHandler(regs*)+0x9a>
c0014cb6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014cb9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014cbe:	e9 72 fe ff ff       	jmp    c0014b35 <Vm::faultHandler(regs*)+0x9a>
c0014cc3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014cc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014cca:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ccf:	74 30                	je     c0014d01 <Vm::faultHandler(regs*)+0x266>
c0014cd1:	83 e9 04             	sub    ecx,0x4
c0014cd4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014cda:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014ce0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014ce3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014ce6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014cec:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014cf0:	0f 84 15 04 00 00    	je     c001510b <Vm::faultHandler(regs*)+0x670>
c0014cf6:	80 ce 02             	or     dh,0x2
c0014cf9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014cfc:	e9 0a 04 00 00       	jmp    c001510b <Vm::faultHandler(regs*)+0x670>
c0014d01:	83 e9 02             	sub    ecx,0x2
c0014d04:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014d0a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014d0d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014d11:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d17:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014d1b:	74 05                	je     c0014d22 <Vm::faultHandler(regs*)+0x287>
c0014d1d:	80 ce 02             	or     dh,0x2
c0014d20:	eb 03                	jmp    c0014d25 <Vm::faultHandler(regs*)+0x28a>
c0014d22:	80 e6 fd             	and    dh,0xfd
c0014d25:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014d29:	e9 dd 03 00 00       	jmp    c001510b <Vm::faultHandler(regs*)+0x670>
c0014d2e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d33:	74 2a                	je     c0014d5f <Vm::faultHandler(regs*)+0x2c4>
c0014d35:	8b 10                	mov    edx,DWORD PTR [eax]
c0014d37:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014d3d:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d43:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d46:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d48:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d4e:	c1 e8 09             	shr    eax,0x9
c0014d51:	83 e0 01             	and    eax,0x1
c0014d54:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d57:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d5a:	83 c0 04             	add    eax,0x4
c0014d5d:	eb 25                	jmp    c0014d84 <Vm::faultHandler(regs*)+0x2e9>
c0014d5f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014d62:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d68:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d6b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d6e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d74:	66 c1 e8 09          	shr    ax,0x9
c0014d78:	83 e0 01             	and    eax,0x1
c0014d7b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d7e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d81:	83 c0 02             	add    eax,0x2
c0014d84:	25 ff ff 00 00       	and    eax,0xffff
c0014d89:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014d8c:	e9 7a 03 00 00       	jmp    c001510b <Vm::faultHandler(regs*)+0x670>
c0014d91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d95:	3c ee                	cmp    al,0xee
c0014d97:	75 10                	jne    c0014da9 <Vm::faultHandler(regs*)+0x30e>
c0014d99:	83 ec 0c             	sub    esp,0xc
c0014d9c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d9f:	e8 e9 f8 ff ff       	call   c001468d <Vm::mainloop3(unsigned long)>
c0014da4:	e9 4b 03 00 00       	jmp    c00150f4 <Vm::faultHandler(regs*)+0x659>
c0014da9:	83 ec 0c             	sub    esp,0xc
c0014dac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014db4:	51                   	push   ecx
c0014db5:	50                   	push   eax
c0014db6:	53                   	push   ebx
c0014db7:	e8 e1 fb ff ff       	call   c001499d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014dbc:	83 c4 20             	add    esp,0x20
c0014dbf:	e9 4a 03 00 00       	jmp    c001510e <Vm::faultHandler(regs*)+0x673>
c0014dc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dc9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014dcd:	e9 39 03 00 00       	jmp    c001510b <Vm::faultHandler(regs*)+0x670>
c0014dd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dd7:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014ddb:	e9 2b 03 00 00       	jmp    c001510b <Vm::faultHandler(regs*)+0x670>
c0014de0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014de3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014de8:	74 2b                	je     c0014e15 <Vm::faultHandler(regs*)+0x37a>
c0014dea:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014df1:	76 22                	jbe    c0014e15 <Vm::faultHandler(regs*)+0x37a>
c0014df3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014df7:	50                   	push   eax
c0014df8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014dfc:	50                   	push   eax
c0014dfd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e01:	50                   	push   eax
c0014e02:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e06:	50                   	push   eax
c0014e07:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e0b:	50                   	push   eax
c0014e0c:	6a 6c                	push   0x6c
c0014e0e:	6a 6c                	push   0x6c
c0014e10:	e9 b9 01 00 00       	jmp    c0014fce <Vm::faultHandler(regs*)+0x533>
c0014e15:	83 ec 0c             	sub    esp,0xc
c0014e18:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e1c:	0f b7 f6             	movzx  esi,si
c0014e1f:	50                   	push   eax
c0014e20:	e8 b8 f7 ff ff       	call   c00145dd <Vm::inbv(unsigned short)>
c0014e25:	83 c4 0c             	add    esp,0xc
c0014e28:	0f b6 c0             	movzx  eax,al
c0014e2b:	50                   	push   eax
c0014e2c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014e30:	50                   	push   eax
c0014e31:	56                   	push   esi
c0014e32:	e8 24 fc ff ff       	call   c0014a5b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014e37:	83 c4 10             	add    esp,0x10
c0014e3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e3d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e41:	74 03                	je     c0014e46 <Vm::faultHandler(regs*)+0x3ab>
c0014e43:	48                   	dec    eax
c0014e44:	eb 01                	jmp    c0014e47 <Vm::faultHandler(regs*)+0x3ac>
c0014e46:	40                   	inc    eax
c0014e47:	0f b7 c0             	movzx  eax,ax
c0014e4a:	e9 8d 00 00 00       	jmp    c0014edc <Vm::faultHandler(regs*)+0x441>
c0014e4f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014e52:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e55:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e5a:	74 29                	je     c0014e85 <Vm::faultHandler(regs*)+0x3ea>
c0014e5c:	3d ff ff 00 00       	cmp    eax,0xffff
c0014e61:	76 22                	jbe    c0014e85 <Vm::faultHandler(regs*)+0x3ea>
c0014e63:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e67:	50                   	push   eax
c0014e68:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e6c:	50                   	push   eax
c0014e6d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e71:	50                   	push   eax
c0014e72:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e76:	50                   	push   eax
c0014e77:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e7b:	50                   	push   eax
c0014e7c:	6a 6d                	push   0x6d
c0014e7e:	6a 6d                	push   0x6d
c0014e80:	e9 49 01 00 00       	jmp    c0014fce <Vm::faultHandler(regs*)+0x533>
c0014e85:	0f b7 c8             	movzx  ecx,ax
c0014e88:	0f b7 f6             	movzx  esi,si
c0014e8b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e8e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e93:	74 20                	je     c0014eb5 <Vm::faultHandler(regs*)+0x41a>
c0014e95:	ed                   	in     eax,dx
c0014e96:	55                   	push   ebp
c0014e97:	50                   	push   eax
c0014e98:	51                   	push   ecx
c0014e99:	56                   	push   esi
c0014e9a:	e8 e7 fb ff ff       	call   c0014a86 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014e9f:	83 c4 10             	add    esp,0x10
c0014ea2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ea5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ea9:	74 05                	je     c0014eb0 <Vm::faultHandler(regs*)+0x415>
c0014eab:	83 e8 04             	sub    eax,0x4
c0014eae:	eb 27                	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x43c>
c0014eb0:	83 c0 04             	add    eax,0x4
c0014eb3:	eb 22                	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x43c>
c0014eb5:	66 ed                	in     ax,dx
c0014eb7:	0f b7 c0             	movzx  eax,ax
c0014eba:	57                   	push   edi
c0014ebb:	50                   	push   eax
c0014ebc:	51                   	push   ecx
c0014ebd:	56                   	push   esi
c0014ebe:	e8 ad fb ff ff       	call   c0014a70 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014ec3:	83 c4 10             	add    esp,0x10
c0014ec6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ec9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ecd:	74 05                	je     c0014ed4 <Vm::faultHandler(regs*)+0x439>
c0014ecf:	83 e8 02             	sub    eax,0x2
c0014ed2:	eb 03                	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x43c>
c0014ed4:	83 c0 02             	add    eax,0x2
c0014ed7:	25 ff ff 00 00       	and    eax,0xffff
c0014edc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014edf:	e9 27 02 00 00       	jmp    c001510b <Vm::faultHandler(regs*)+0x670>
c0014ee4:	8d 46 ff             	lea    eax,[esi-0x1]
c0014ee7:	3c 05                	cmp    al,0x5
c0014ee9:	77 24                	ja     c0014f0f <Vm::faultHandler(regs*)+0x474>
c0014eeb:	0f b6 c0             	movzx  eax,al
c0014eee:	ff 24 85 60 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe13a0]
c0014ef5:	0f b7 fd             	movzx  edi,bp
c0014ef8:	eb 15                	jmp    c0014f0f <Vm::faultHandler(regs*)+0x474>
c0014efa:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014efe:	eb 0f                	jmp    c0014f0f <Vm::faultHandler(regs*)+0x474>
c0014f00:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014f04:	eb 09                	jmp    c0014f0f <Vm::faultHandler(regs*)+0x474>
c0014f06:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014f0a:	eb 03                	jmp    c0014f0f <Vm::faultHandler(regs*)+0x474>
c0014f0c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014f0f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014f12:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014f17:	74 29                	je     c0014f42 <Vm::faultHandler(regs*)+0x4a7>
c0014f19:	3d ff ff 00 00       	cmp    eax,0xffff
c0014f1e:	76 22                	jbe    c0014f42 <Vm::faultHandler(regs*)+0x4a7>
c0014f20:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f24:	50                   	push   eax
c0014f25:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f29:	50                   	push   eax
c0014f2a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f2e:	50                   	push   eax
c0014f2f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f33:	50                   	push   eax
c0014f34:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f38:	50                   	push   eax
c0014f39:	6a 6e                	push   0x6e
c0014f3b:	6a 6e                	push   0x6e
c0014f3d:	e9 8c 00 00 00       	jmp    c0014fce <Vm::faultHandler(regs*)+0x533>
c0014f42:	0f b7 c0             	movzx  eax,ax
c0014f45:	52                   	push   edx
c0014f46:	52                   	push   edx
c0014f47:	50                   	push   eax
c0014f48:	57                   	push   edi
c0014f49:	e8 d9 fa ff ff       	call   c0014a27 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014f4e:	59                   	pop    ecx
c0014f4f:	0f b6 c0             	movzx  eax,al
c0014f52:	5e                   	pop    esi
c0014f53:	50                   	push   eax
c0014f54:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f58:	50                   	push   eax
c0014f59:	e8 92 f6 ff ff       	call   c00145f0 <Vm::outbv(unsigned short, unsigned char)>
c0014f5e:	83 c4 10             	add    esp,0x10
c0014f61:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014f64:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014f68:	74 03                	je     c0014f6d <Vm::faultHandler(regs*)+0x4d2>
c0014f6a:	48                   	dec    eax
c0014f6b:	eb 01                	jmp    c0014f6e <Vm::faultHandler(regs*)+0x4d3>
c0014f6d:	40                   	inc    eax
c0014f6e:	0f b7 c0             	movzx  eax,ax
c0014f71:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014f74:	e9 92 01 00 00       	jmp    c001510b <Vm::faultHandler(regs*)+0x670>
c0014f79:	8d 46 ff             	lea    eax,[esi-0x1]
c0014f7c:	3c 05                	cmp    al,0x5
c0014f7e:	77 1f                	ja     c0014f9f <Vm::faultHandler(regs*)+0x504>
c0014f80:	0f b6 c0             	movzx  eax,al
c0014f83:	ff 24 85 78 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1388]
c0014f8a:	89 ef                	mov    edi,ebp
c0014f8c:	eb 11                	jmp    c0014f9f <Vm::faultHandler(regs*)+0x504>
c0014f8e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014f91:	eb 0c                	jmp    c0014f9f <Vm::faultHandler(regs*)+0x504>
c0014f93:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014f96:	eb 07                	jmp    c0014f9f <Vm::faultHandler(regs*)+0x504>
c0014f98:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014f9b:	eb 02                	jmp    c0014f9f <Vm::faultHandler(regs*)+0x504>
c0014f9d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014f9f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014fa2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014fa7:	74 37                	je     c0014fe0 <Vm::faultHandler(regs*)+0x545>
c0014fa9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014faf:	76 2f                	jbe    c0014fe0 <Vm::faultHandler(regs*)+0x545>
c0014fb1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014fb5:	50                   	push   eax
c0014fb6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014fba:	50                   	push   eax
c0014fbb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014fbf:	50                   	push   eax
c0014fc0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014fc4:	50                   	push   eax
c0014fc5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014fc9:	50                   	push   eax
c0014fca:	6a 6f                	push   0x6f
c0014fcc:	6a 6f                	push   0x6f
c0014fce:	68 06 ec 01 c0       	push   0xc001ec06
c0014fd3:	e8 24 5c ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0014fd8:	83 c4 20             	add    esp,0x20
c0014fdb:	e9 86 01 00 00       	jmp    c0015166 <Vm::faultHandler(regs*)+0x6cb>
c0014fe0:	0f b7 d7             	movzx  edx,di
c0014fe3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014fe6:	0f b7 c6             	movzx  eax,si
c0014fe9:	81 e1 00 04 00 00    	and    ecx,0x400
c0014fef:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014ff2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ff7:	74 1d                	je     c0015016 <Vm::faultHandler(regs*)+0x57b>
c0014ff9:	55                   	push   ebp
c0014ffa:	55                   	push   ebp
c0014ffb:	50                   	push   eax
c0014ffc:	52                   	push   edx
c0014ffd:	e8 48 fa ff ff       	call   c0014a4a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0015002:	83 c4 10             	add    esp,0x10
c0015005:	89 fa                	mov    edx,edi
c0015007:	ef                   	out    dx,eax
c0015008:	85 c9                	test   ecx,ecx
c001500a:	74 05                	je     c0015011 <Vm::faultHandler(regs*)+0x576>
c001500c:	83 ee 04             	sub    esi,0x4
c001500f:	eb 21                	jmp    c0015032 <Vm::faultHandler(regs*)+0x597>
c0015011:	83 c6 04             	add    esi,0x4
c0015014:	eb 1c                	jmp    c0015032 <Vm::faultHandler(regs*)+0x597>
c0015016:	55                   	push   ebp
c0015017:	55                   	push   ebp
c0015018:	50                   	push   eax
c0015019:	52                   	push   edx
c001501a:	e8 19 fa ff ff       	call   c0014a38 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001501f:	83 c4 10             	add    esp,0x10
c0015022:	89 fa                	mov    edx,edi
c0015024:	66 ef                	out    dx,ax
c0015026:	85 c9                	test   ecx,ecx
c0015028:	74 05                	je     c001502f <Vm::faultHandler(regs*)+0x594>
c001502a:	83 ee 02             	sub    esi,0x2
c001502d:	eb 03                	jmp    c0015032 <Vm::faultHandler(regs*)+0x597>
c001502f:	83 c6 02             	add    esi,0x2
c0015032:	81 e6 ff ff 00 00    	and    esi,0xffff
c0015038:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001503b:	e9 cb 00 00 00       	jmp    c001510b <Vm::faultHandler(regs*)+0x670>
c0015040:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015047:	83 ec 0c             	sub    esp,0xc
c001504a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001504e:	50                   	push   eax
c001504f:	e8 89 f5 ff ff       	call   c00145dd <Vm::inbv(unsigned short)>
c0015054:	0f b6 c0             	movzx  eax,al
c0015057:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001505a:	eb 3f                	jmp    c001509b <Vm::faultHandler(regs*)+0x600>
c001505c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015061:	74 07                	je     c001506a <Vm::faultHandler(regs*)+0x5cf>
c0015063:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015067:	ed                   	in     eax,dx
c0015068:	eb 14                	jmp    c001507e <Vm::faultHandler(regs*)+0x5e3>
c001506a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001506d:	66 31 f6             	xor    si,si
c0015070:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0015073:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015077:	66 ed                	in     ax,dx
c0015079:	0f b7 c0             	movzx  eax,ax
c001507c:	09 f0                	or     eax,esi
c001507e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015081:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015085:	e9 84 00 00 00       	jmp    c001510e <Vm::faultHandler(regs*)+0x673>
c001508a:	52                   	push   edx
c001508b:	52                   	push   edx
c001508c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015090:	50                   	push   eax
c0015091:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015095:	50                   	push   eax
c0015096:	e8 55 f5 ff ff       	call   c00145f0 <Vm::outbv(unsigned short, unsigned char)>
c001509b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001509f:	eb 53                	jmp    c00150f4 <Vm::faultHandler(regs*)+0x659>
c00150a1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00150a4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00150a8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150ad:	74 03                	je     c00150b2 <Vm::faultHandler(regs*)+0x617>
c00150af:	ef                   	out    dx,eax
c00150b0:	eb cf                	jmp    c0015081 <Vm::faultHandler(regs*)+0x5e6>
c00150b2:	66 ef                	out    dx,ax
c00150b4:	eb cb                	jmp    c0015081 <Vm::faultHandler(regs*)+0x5e6>
c00150b6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00150bd:	83 ec 0c             	sub    esp,0xc
c00150c0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00150c4:	50                   	push   eax
c00150c5:	e8 13 f5 ff ff       	call   c00145dd <Vm::inbv(unsigned short)>
c00150ca:	0f b6 c0             	movzx  eax,al
c00150cd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00150d0:	eb 1f                	jmp    c00150f1 <Vm::faultHandler(regs*)+0x656>
c00150d2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00150d5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150da:	74 03                	je     c00150df <Vm::faultHandler(regs*)+0x644>
c00150dc:	ed                   	in     eax,dx
c00150dd:	eb 0d                	jmp    c00150ec <Vm::faultHandler(regs*)+0x651>
c00150df:	66 ed                	in     ax,dx
c00150e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00150e4:	0f b7 c0             	movzx  eax,ax
c00150e7:	66 31 d2             	xor    dx,dx
c00150ea:	09 d0                	or     eax,edx
c00150ec:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00150ef:	eb 1a                	jmp    c001510b <Vm::faultHandler(regs*)+0x670>
c00150f1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00150f4:	83 c4 10             	add    esp,0x10
c00150f7:	eb 15                	jmp    c001510e <Vm::faultHandler(regs*)+0x673>
c00150f9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00150fc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00150ff:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015104:	74 03                	je     c0015109 <Vm::faultHandler(regs*)+0x66e>
c0015106:	ef                   	out    dx,eax
c0015107:	eb 02                	jmp    c001510b <Vm::faultHandler(regs*)+0x670>
c0015109:	66 ef                	out    dx,ax
c001510b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001510e:	b0 01                	mov    al,0x1
c0015110:	eb 56                	jmp    c0015168 <Vm::faultHandler(regs*)+0x6cd>
c0015112:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015116:	50                   	push   eax
c0015117:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001511b:	50                   	push   eax
c001511c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015120:	50                   	push   eax
c0015121:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015125:	50                   	push   eax
c0015126:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001512a:	50                   	push   eax
c001512b:	52                   	push   edx
c001512c:	52                   	push   edx
c001512d:	68 33 ec 01 c0       	push   0xc001ec33
c0015132:	e8 c5 5a ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0015137:	83 c4 20             	add    esp,0x20
c001513a:	83 ec 0c             	sub    esp,0xc
c001513d:	6a 60                	push   0x60
c001513f:	e8 99 f4 ff ff       	call   c00145dd <Vm::inbv(unsigned short)>
c0015144:	83 c4 10             	add    esp,0x10
c0015147:	3c 1c                	cmp    al,0x1c
c0015149:	74 04                	je     c001514f <Vm::faultHandler(regs*)+0x6b4>
c001514b:	3c 5a                	cmp    al,0x5a
c001514d:	75 eb                	jne    c001513a <Vm::faultHandler(regs*)+0x69f>
c001514f:	3c 5a                	cmp    al,0x5a
c0015151:	74 04                	je     c0015157 <Vm::faultHandler(regs*)+0x6bc>
c0015153:	3c 1c                	cmp    al,0x1c
c0015155:	75 0f                	jne    c0015166 <Vm::faultHandler(regs*)+0x6cb>
c0015157:	83 ec 0c             	sub    esp,0xc
c001515a:	6a 60                	push   0x60
c001515c:	e8 7c f4 ff ff       	call   c00145dd <Vm::inbv(unsigned short)>
c0015161:	83 c4 10             	add    esp,0x10
c0015164:	eb e9                	jmp    c001514f <Vm::faultHandler(regs*)+0x6b4>
c0015166:	31 c0                	xor    eax,eax
c0015168:	83 c4 1c             	add    esp,0x1c
c001516b:	5b                   	pop    ebx
c001516c:	5e                   	pop    esi
c001516d:	5f                   	pop    edi
c001516e:	5d                   	pop    ebp
c001516f:	c3                   	ret    

c0015170 <noCopro(unsigned long)>:
c0015170:	c3                   	ret    

c0015171 <nmiHandler(regs*, void*)>:
c0015171:	83 ec 0c             	sub    esp,0xc
c0015174:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0015179:	83 ec 0c             	sub    esp,0xc
c001517c:	50                   	push   eax
c001517d:	e8 10 25 ff ff       	call   c0007692 <Computer::handleNMI()>
c0015182:	83 c4 10             	add    esp,0x10
c0015185:	90                   	nop
c0015186:	83 c4 0c             	add    esp,0xc
c0015189:	c3                   	ret    

c001518a <doubleFault(regs*, void*)>:
c001518a:	55                   	push   ebp
c001518b:	89 e5                	mov    ebp,esp
c001518d:	83 ec 08             	sub    esp,0x8
c0015190:	83 ec 0c             	sub    esp,0xc
c0015193:	68 90 ec 01 c0       	push   0xc001ec90
c0015198:	e8 ae b5 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001519d:	83 c4 10             	add    esp,0x10
c00151a0:	90                   	nop
c00151a1:	c9                   	leave  
c00151a2:	c3                   	ret    

c00151a3 <displayDebugInfo(regs*)>:
c00151a3:	83 ec 1c             	sub    esp,0x1c
c00151a6:	0f 20 c0             	mov    eax,cr0
c00151a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151ad:	0f 20 d0             	mov    eax,cr2
c00151b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00151b4:	0f 20 d8             	mov    eax,cr3
c00151b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151bb:	0f 20 e0             	mov    eax,cr4
c00151be:	89 04 24             	mov    DWORD PTR [esp],eax
c00151c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151c5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00151c8:	83 ec 08             	sub    esp,0x8
c00151cb:	50                   	push   eax
c00151cc:	68 ac ec 01 c0       	push   0xc001ecac
c00151d1:	e8 26 5a ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c00151d6:	83 c4 10             	add    esp,0x10
c00151d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151dd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00151e0:	83 ec 08             	sub    esp,0x8
c00151e3:	50                   	push   eax
c00151e4:	68 9d ec 01 c0       	push   0xc001ec9d
c00151e9:	e8 0e 5a ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c00151ee:	83 c4 10             	add    esp,0x10
c00151f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151f5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00151f8:	83 ec 08             	sub    esp,0x8
c00151fb:	50                   	push   eax
c00151fc:	68 a8 ec 01 c0       	push   0xc001eca8
c0015201:	e8 f6 59 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0015206:	83 c4 10             	add    esp,0x10
c0015209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001520d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015210:	83 ec 08             	sub    esp,0x8
c0015213:	50                   	push   eax
c0015214:	68 b7 ec 01 c0       	push   0xc001ecb7
c0015219:	e8 de 59 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001521e:	83 c4 10             	add    esp,0x10
c0015221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015225:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015228:	83 ec 08             	sub    esp,0x8
c001522b:	50                   	push   eax
c001522c:	68 c2 ec 01 c0       	push   0xc001ecc2
c0015231:	e8 c6 59 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0015236:	83 c4 10             	add    esp,0x10
c0015239:	83 ec 08             	sub    esp,0x8
c001523c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015240:	68 cd ec 01 c0       	push   0xc001eccd
c0015245:	e8 b2 59 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001524a:	83 c4 10             	add    esp,0x10
c001524d:	83 ec 08             	sub    esp,0x8
c0015250:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015254:	68 d8 ec 01 c0       	push   0xc001ecd8
c0015259:	e8 9e 59 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001525e:	83 c4 10             	add    esp,0x10
c0015261:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c0015266:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001526c:	83 ec 0c             	sub    esp,0xc
c001526f:	50                   	push   eax
c0015270:	e8 28 39 ff ff       	call   c0008b9d <setActiveTerminal(VgaText*)>
c0015275:	83 c4 10             	add    esp,0x10
c0015278:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c001527d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015283:	83 ec 08             	sub    esp,0x8
c0015286:	68 e3 ec 01 c0       	push   0xc001ece3
c001528b:	50                   	push   eax
c001528c:	e8 4b 3c ff ff       	call   c0008edc <VgaText::puts(char const*)>
c0015291:	83 c4 10             	add    esp,0x10
c0015294:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c0015299:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001529f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00152a4:	8b 12                	mov    edx,DWORD PTR [edx]
c00152a6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00152a9:	83 c2 0c             	add    edx,0xc
c00152ac:	83 ec 08             	sub    esp,0x8
c00152af:	52                   	push   edx
c00152b0:	50                   	push   eax
c00152b1:	e8 26 3c ff ff       	call   c0008edc <VgaText::puts(char const*)>
c00152b6:	83 c4 10             	add    esp,0x10
c00152b9:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c00152be:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152c4:	83 ec 08             	sub    esp,0x8
c00152c7:	68 ec ec 01 c0       	push   0xc001ecec
c00152cc:	50                   	push   eax
c00152cd:	e8 0a 3c ff ff       	call   c0008edc <VgaText::puts(char const*)>
c00152d2:	83 c4 10             	add    esp,0x10
c00152d5:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c00152da:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152e4:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00152e7:	83 ec 08             	sub    esp,0x8
c00152ea:	52                   	push   edx
c00152eb:	50                   	push   eax
c00152ec:	e8 a5 3b ff ff       	call   c0008e96 <VgaText::putx(unsigned int)>
c00152f1:	83 c4 10             	add    esp,0x10
c00152f4:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c00152f9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152ff:	83 ec 08             	sub    esp,0x8
c0015302:	68 f4 ec 01 c0       	push   0xc001ecf4
c0015307:	50                   	push   eax
c0015308:	e8 cf 3b ff ff       	call   c0008edc <VgaText::puts(char const*)>
c001530d:	83 c4 10             	add    esp,0x10
c0015310:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c0015315:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001531b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001531f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015322:	83 ec 08             	sub    esp,0x8
c0015325:	52                   	push   edx
c0015326:	50                   	push   eax
c0015327:	e8 6a 3b ff ff       	call   c0008e96 <VgaText::putx(unsigned int)>
c001532c:	83 c4 10             	add    esp,0x10
c001532f:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c0015334:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001533a:	83 ec 08             	sub    esp,0x8
c001533d:	68 fc ec 01 c0       	push   0xc001ecfc
c0015342:	50                   	push   eax
c0015343:	e8 94 3b ff ff       	call   c0008edc <VgaText::puts(char const*)>
c0015348:	83 c4 10             	add    esp,0x10
c001534b:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c0015350:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015356:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001535a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001535d:	83 ec 08             	sub    esp,0x8
c0015360:	52                   	push   edx
c0015361:	50                   	push   eax
c0015362:	e8 2f 3b ff ff       	call   c0008e96 <VgaText::putx(unsigned int)>
c0015367:	83 c4 10             	add    esp,0x10
c001536a:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c001536f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015375:	83 ec 08             	sub    esp,0x8
c0015378:	68 04 ed 01 c0       	push   0xc001ed04
c001537d:	50                   	push   eax
c001537e:	e8 59 3b ff ff       	call   c0008edc <VgaText::puts(char const*)>
c0015383:	83 c4 10             	add    esp,0x10
c0015386:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c001538b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015391:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015395:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015398:	83 ec 08             	sub    esp,0x8
c001539b:	52                   	push   edx
c001539c:	50                   	push   eax
c001539d:	e8 f4 3a ff ff       	call   c0008e96 <VgaText::putx(unsigned int)>
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c00153aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153b0:	83 ec 08             	sub    esp,0x8
c00153b3:	68 0c ed 01 c0       	push   0xc001ed0c
c00153b8:	50                   	push   eax
c00153b9:	e8 1e 3b ff ff       	call   c0008edc <VgaText::puts(char const*)>
c00153be:	83 c4 10             	add    esp,0x10
c00153c1:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c00153c6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153d0:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00153d3:	83 ec 08             	sub    esp,0x8
c00153d6:	52                   	push   edx
c00153d7:	50                   	push   eax
c00153d8:	e8 b9 3a ff ff       	call   c0008e96 <VgaText::putx(unsigned int)>
c00153dd:	83 c4 10             	add    esp,0x10
c00153e0:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c00153e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153eb:	83 ec 08             	sub    esp,0x8
c00153ee:	68 14 ed 01 c0       	push   0xc001ed14
c00153f3:	50                   	push   eax
c00153f4:	e8 e3 3a ff ff       	call   c0008edc <VgaText::puts(char const*)>
c00153f9:	83 c4 10             	add    esp,0x10
c00153fc:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c0015401:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015407:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001540b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001540e:	83 ec 08             	sub    esp,0x8
c0015411:	52                   	push   edx
c0015412:	50                   	push   eax
c0015413:	e8 7e 3a ff ff       	call   c0008e96 <VgaText::putx(unsigned int)>
c0015418:	83 c4 10             	add    esp,0x10
c001541b:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c0015420:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015426:	83 ec 08             	sub    esp,0x8
c0015429:	68 1c ed 01 c0       	push   0xc001ed1c
c001542e:	50                   	push   eax
c001542f:	e8 a8 3a ff ff       	call   c0008edc <VgaText::puts(char const*)>
c0015434:	83 c4 10             	add    esp,0x10
c0015437:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c001543c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015442:	83 ec 08             	sub    esp,0x8
c0015445:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015449:	50                   	push   eax
c001544a:	e8 47 3a ff ff       	call   c0008e96 <VgaText::putx(unsigned int)>
c001544f:	83 c4 10             	add    esp,0x10
c0015452:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c0015457:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001545d:	83 ec 08             	sub    esp,0x8
c0015460:	68 25 ed 01 c0       	push   0xc001ed25
c0015465:	50                   	push   eax
c0015466:	e8 71 3a ff ff       	call   c0008edc <VgaText::puts(char const*)>
c001546b:	83 c4 10             	add    esp,0x10
c001546e:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c0015473:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015479:	83 ec 08             	sub    esp,0x8
c001547c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015480:	50                   	push   eax
c0015481:	e8 10 3a ff ff       	call   c0008e96 <VgaText::putx(unsigned int)>
c0015486:	83 c4 10             	add    esp,0x10
c0015489:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c001548e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015494:	83 ec 08             	sub    esp,0x8
c0015497:	68 2d ed 01 c0       	push   0xc001ed2d
c001549c:	50                   	push   eax
c001549d:	e8 3a 3a ff ff       	call   c0008edc <VgaText::puts(char const*)>
c00154a2:	83 c4 10             	add    esp,0x10
c00154a5:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c00154aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154b0:	83 ec 08             	sub    esp,0x8
c00154b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00154b7:	50                   	push   eax
c00154b8:	e8 d9 39 ff ff       	call   c0008e96 <VgaText::putx(unsigned int)>
c00154bd:	83 c4 10             	add    esp,0x10
c00154c0:	fa                   	cli    
c00154c1:	f4                   	hlt    
c00154c2:	eb fe                	jmp    c00154c2 <displayDebugInfo(regs*)+0x31f>

c00154c4 <displayProgramFault(char const*)>:
c00154c4:	83 ec 0c             	sub    esp,0xc
c00154c7:	83 ec 0c             	sub    esp,0xc
c00154ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154ce:	e8 29 57 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c00154d3:	83 c4 10             	add    esp,0x10
c00154d6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00154db:	8b 00                	mov    eax,DWORD PTR [eax]
c00154dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154e6:	85 c0                	test   eax,eax
c00154e8:	74 21                	je     c001550b <displayProgramFault(char const*)+0x47>
c00154ea:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00154ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154fa:	6a 04                	push   0x4
c00154fc:	6a 0f                	push   0xf
c00154fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015502:	50                   	push   eax
c0015503:	e8 46 3a ff ff       	call   c0008f4e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015508:	83 c4 10             	add    esp,0x10
c001550b:	90                   	nop
c001550c:	83 c4 0c             	add    esp,0xc
c001550f:	c3                   	ret    

c0015510 <gpFault(regs*, void*)>:
c0015510:	83 ec 1c             	sub    esp,0x1c
c0015513:	c7 05 90 3e 02 c0 9b 4a 01 c0 	mov    DWORD PTR ds:0xc0023e90,0xc0014a9b
c001551d:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c0015522:	85 c0                	test   eax,eax
c0015524:	74 1c                	je     c0015542 <gpFault(regs*, void*)+0x32>
c0015526:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c001552b:	83 ec 0c             	sub    esp,0xc
c001552e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015532:	ff d0                	call   eax
c0015534:	83 c4 10             	add    esp,0x10
c0015537:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001553b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015540:	75 2e                	jne    c0015570 <gpFault(regs*, void*)+0x60>
c0015542:	83 ec 0c             	sub    esp,0xc
c0015545:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015549:	e8 55 fc ff ff       	call   c00151a3 <displayDebugInfo(regs*)>
c001554e:	83 c4 10             	add    esp,0x10
c0015551:	83 ec 0c             	sub    esp,0xc
c0015554:	68 35 ed 01 c0       	push   0xc001ed35
c0015559:	e8 66 ff ff ff       	call   c00154c4 <displayProgramFault(char const*)>
c001555e:	83 c4 10             	add    esp,0x10
c0015561:	83 ec 0c             	sub    esp,0xc
c0015564:	6a 00                	push   0x0
c0015566:	e8 25 ef ff ff       	call   c0014490 <Thr::terminateFromIRQ(int)>
c001556b:	83 c4 10             	add    esp,0x10
c001556e:	eb 01                	jmp    c0015571 <gpFault(regs*, void*)+0x61>
c0015570:	90                   	nop
c0015571:	83 c4 1c             	add    esp,0x1c
c0015574:	c3                   	ret    

c0015575 <pgFault(regs*, void*)>:
c0015575:	83 ec 1c             	sub    esp,0x1c
c0015578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001557c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001557f:	0f 20 d0             	mov    eax,cr2
c0015582:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001558a:	83 ec 04             	sub    esp,0x4
c001558d:	52                   	push   edx
c001558e:	50                   	push   eax
c001558f:	68 a0 ed 01 c0       	push   0xc001eda0
c0015594:	e8 63 56 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0015599:	83 c4 10             	add    esp,0x10
c001559c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00155a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00155a6:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00155ac:	0f 20 d2             	mov    edx,cr2
c00155af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00155b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00155b7:	83 ec 08             	sub    esp,0x8
c00155ba:	52                   	push   edx
c00155bb:	50                   	push   eax
c00155bc:	e8 6d 52 ff ff       	call   c000a82e <VAS::tryLoadBackOffDisk(unsigned long)>
c00155c1:	83 c4 10             	add    esp,0x10
c00155c4:	84 c0                	test   al,al
c00155c6:	75 2e                	jne    c00155f6 <pgFault(regs*, void*)+0x81>
c00155c8:	83 ec 0c             	sub    esp,0xc
c00155cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155cf:	e8 cf fb ff ff       	call   c00151a3 <displayDebugInfo(regs*)>
c00155d4:	83 c4 10             	add    esp,0x10
c00155d7:	83 ec 0c             	sub    esp,0xc
c00155da:	68 4e ed 01 c0       	push   0xc001ed4e
c00155df:	e8 e0 fe ff ff       	call   c00154c4 <displayProgramFault(char const*)>
c00155e4:	83 c4 10             	add    esp,0x10
c00155e7:	83 ec 0c             	sub    esp,0xc
c00155ea:	6a 00                	push   0x0
c00155ec:	e8 9f ee ff ff       	call   c0014490 <Thr::terminateFromIRQ(int)>
c00155f1:	83 c4 10             	add    esp,0x10
c00155f4:	eb 01                	jmp    c00155f7 <pgFault(regs*, void*)+0x82>
c00155f6:	90                   	nop
c00155f7:	83 c4 1c             	add    esp,0x1c
c00155fa:	c3                   	ret    

c00155fb <otherISRHandler(regs*, void*)>:
c00155fb:	83 ec 0c             	sub    esp,0xc
c00155fe:	83 ec 0c             	sub    esp,0xc
c0015601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015605:	e8 99 fb ff ff       	call   c00151a3 <displayDebugInfo(regs*)>
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	83 ec 0c             	sub    esp,0xc
c0015610:	68 c8 ed 01 c0       	push   0xc001edc8
c0015615:	e8 aa fe ff ff       	call   c00154c4 <displayProgramFault(char const*)>
c001561a:	83 c4 10             	add    esp,0x10
c001561d:	83 ec 0c             	sub    esp,0xc
c0015620:	6a 00                	push   0x0
c0015622:	e8 69 ee ff ff       	call   c0014490 <Thr::terminateFromIRQ(int)>
c0015627:	83 c4 10             	add    esp,0x10
c001562a:	90                   	nop
c001562b:	83 c4 0c             	add    esp,0xc
c001562e:	c3                   	ret    

c001562f <opcodeFault(regs*, void*)>:
c001562f:	55                   	push   ebp
c0015630:	89 e5                	mov    ebp,esp
c0015632:	83 ec 08             	sub    esp,0x8
c0015635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015638:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001563b:	83 ec 08             	sub    esp,0x8
c001563e:	50                   	push   eax
c001563f:	68 59 ed 01 c0       	push   0xc001ed59
c0015644:	e8 b3 55 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0015649:	83 c4 10             	add    esp,0x10
c001564c:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0015651:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015657:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001565d:	84 c0                	test   al,al
c001565f:	74 21                	je     c0015682 <opcodeFault(regs*, void*)+0x53>
c0015661:	83 ec 0c             	sub    esp,0xc
c0015664:	68 f0 ed 01 c0       	push   0xc001edf0
c0015669:	e8 8e 55 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001566e:	83 c4 10             	add    esp,0x10
c0015671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015674:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015677:	8d 50 19             	lea    edx,[eax+0x19]
c001567a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015680:	eb 2b                	jmp    c00156ad <opcodeFault(regs*, void*)+0x7e>
c0015682:	83 ec 0c             	sub    esp,0xc
c0015685:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015688:	e8 16 fb ff ff       	call   c00151a3 <displayDebugInfo(regs*)>
c001568d:	83 c4 10             	add    esp,0x10
c0015690:	83 ec 0c             	sub    esp,0xc
c0015693:	68 67 ed 01 c0       	push   0xc001ed67
c0015698:	e8 27 fe ff ff       	call   c00154c4 <displayProgramFault(char const*)>
c001569d:	83 c4 10             	add    esp,0x10
c00156a0:	83 ec 0c             	sub    esp,0xc
c00156a3:	6a 00                	push   0x0
c00156a5:	e8 e6 ed ff ff       	call   c0014490 <Thr::terminateFromIRQ(int)>
c00156aa:	83 c4 10             	add    esp,0x10
c00156ad:	c9                   	leave  
c00156ae:	c3                   	ret    

c00156af <i386SaveCoprocessor(void*)>:
c00156af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156b3:	83 c0 3f             	add    eax,0x3f
c00156b6:	83 e0 c0             	and    eax,0xffffffc0
c00156b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156bd:	ff 25 8c 3e 02 c0    	jmp    DWORD PTR ds:0xc0023e8c

c00156c3 <i386LoadCoprocessor(void*)>:
c00156c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156c7:	83 c0 3f             	add    eax,0x3f
c00156ca:	83 e0 c0             	and    eax,0xffffffc0
c00156cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156d1:	ff 25 88 3e 02 c0    	jmp    DWORD PTR ds:0xc0023e88

c00156d7 <x87EmulHandler(regs*, void*)>:
c00156d7:	53                   	push   ebx
c00156d8:	83 ec 08             	sub    esp,0x8
c00156db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156e0:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00156e4:	74 10                	je     c00156f6 <x87EmulHandler(regs*, void*)+0x1f>
c00156e6:	83 ec 0c             	sub    esp,0xc
c00156e9:	68 74 ed 01 c0       	push   0xc001ed74
c00156ee:	e8 58 b0 ff ff       	call   c001074b <Krnl::panic(char const*)>
c00156f3:	83 c4 10             	add    esp,0x10
c00156f6:	0f 20 c0             	mov    eax,cr0
c00156f9:	a8 08                	test   al,0x8
c00156fb:	74 59                	je     c0015756 <x87EmulHandler(regs*, void*)+0x7f>
c00156fd:	0f 06                	clts   
c00156ff:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0015704:	85 c0                	test   eax,eax
c0015706:	74 0e                	je     c0015716 <x87EmulHandler(regs*, void*)+0x3f>
c0015708:	83 ec 0c             	sub    esp,0xc
c001570b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001570e:	e8 9c ff ff ff       	call   c00156af <i386SaveCoprocessor(void*)>
c0015713:	83 c4 10             	add    esp,0x10
c0015716:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001571c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015720:	75 12                	jne    c0015734 <x87EmulHandler(regs*, void*)+0x5d>
c0015722:	83 ec 0c             	sub    esp,0xc
c0015725:	68 40 02 00 00       	push   0x240
c001572a:	e8 3e 27 ff ff       	call   c0007e6d <malloc>
c001572f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015732:	eb 10                	jmp    c0015744 <x87EmulHandler(regs*, void*)+0x6d>
c0015734:	83 ec 0c             	sub    esp,0xc
c0015737:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c001573c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001573f:	e8 7f ff ff ff       	call   c00156c3 <i386LoadCoprocessor(void*)>
c0015744:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015749:	83 c4 10             	add    esp,0x10
c001574c:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c0015751:	83 c4 08             	add    esp,0x8
c0015754:	5b                   	pop    ebx
c0015755:	c3                   	ret    
c0015756:	83 ec 0c             	sub    esp,0xc
c0015759:	68 88 ed 01 c0       	push   0xc001ed88
c001575e:	e8 99 54 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0015763:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001576b:	83 c4 18             	add    esp,0x18
c001576e:	5b                   	pop    ebx
c001576f:	e9 1c ed ff ff       	jmp    c0014490 <Thr::terminateFromIRQ(int)>

c0015774 <HalInitialiseCoprocessor()>:
c0015774:	83 ec 10             	sub    esp,0x10
c0015777:	c7 05 84 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e84,0x0
c0015781:	6a 00                	push   0x0
c0015783:	68 d7 56 01 c0       	push   0xc00156d7
c0015788:	6a 07                	push   0x7
c001578a:	e8 e1 6d ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001578f:	e8 ac 63 00 00       	call   c001bb40 <avxDetect>
c0015794:	83 c4 10             	add    esp,0x10
c0015797:	85 c0                	test   eax,eax
c0015799:	74 1c                	je     c00157b7 <HalInitialiseCoprocessor()+0x43>
c001579b:	c7 05 8c 3e 02 c0 6a bb 01 c0 	mov    DWORD PTR ds:0xc0023e8c,0xc001bb6a
c00157a5:	c7 05 88 3e 02 c0 7b bb 01 c0 	mov    DWORD PTR ds:0xc0023e88,0xc001bb7b
c00157af:	83 c4 0c             	add    esp,0xc
c00157b2:	e9 d5 63 00 00       	jmp    c001bb8c <avxInit>
c00157b7:	e8 04 66 00 00       	call   c001bdc0 <absolutelyNoChanceInHell>
c00157bc:	85 c0                	test   eax,eax
c00157be:	74 1c                	je     c00157dc <HalInitialiseCoprocessor()+0x68>
c00157c0:	c7 05 8c 3e 02 c0 d8 bd 01 c0 	mov    DWORD PTR ds:0xc0023e8c,0xc001bdd8
c00157ca:	c7 05 88 3e 02 c0 e0 bd 01 c0 	mov    DWORD PTR ds:0xc0023e88,0xc001bde0
c00157d4:	83 c4 0c             	add    esp,0xc
c00157d7:	e9 0c 66 00 00       	jmp    c001bde8 <sseInit>
c00157dc:	e8 25 66 00 00       	call   c001be06 <x87Detect>
c00157e1:	85 c0                	test   eax,eax
c00157e3:	74 1c                	je     c0015801 <HalInitialiseCoprocessor()+0x8d>
c00157e5:	c7 05 8c 3e 02 c0 21 be 01 c0 	mov    DWORD PTR ds:0xc0023e8c,0xc001be21
c00157ef:	c7 05 88 3e 02 c0 28 be 01 c0 	mov    DWORD PTR ds:0xc0023e88,0xc001be28
c00157f9:	83 c4 0c             	add    esp,0xc
c00157fc:	e9 2e 66 00 00       	jmp    c001be2f <x87Init>
c0015801:	c7 05 8c 3e 02 c0 70 51 01 c0 	mov    DWORD PTR ds:0xc0023e8c,0xc0015170
c001580b:	c7 05 88 3e 02 c0 70 51 01 c0 	mov    DWORD PTR ds:0xc0023e88,0xc0015170
c0015815:	0f 20 c0             	mov    eax,cr0
c0015818:	83 c8 04             	or     eax,0x4
c001581b:	0f 22 c0             	mov    cr0,eax
c001581e:	83 c4 0c             	add    esp,0xc
c0015821:	c3                   	ret    

c0015822 <HalPanic(char const*)>:
c0015822:	e9 24 af ff ff       	jmp    c001074b <Krnl::panic(char const*)>

c0015827 <HalQueryPerformanceCounter()>:
c0015827:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c001582c:	31 d2                	xor    edx,edx
c001582e:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015834:	31 c0                	xor    eax,eax
c0015836:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001583d:	74 02                	je     c0015841 <HalQueryPerformanceCounter()+0x1a>
c001583f:	0f 31                	rdtsc  
c0015841:	c3                   	ret    

c0015842 <HalInitialise()>:
c0015842:	53                   	push   ebx
c0015843:	83 ec 08             	sub    esp,0x8
c0015846:	e8 58 6f ff ff       	call   c000c7a3 <setupINTS()>
c001584b:	80 3d e0 31 02 c0 00 	cmp    BYTE PTR ds:0xc00231e0,0x0
c0015852:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0015857:	75 07                	jne    c0015860 <HalInitialise()+0x1e>
c0015859:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015860:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015866:	83 e0 01             	and    eax,0x1
c0015869:	a2 80 3e 02 c0       	mov    ds:0xc0023e80,al
c001586e:	e8 a9 02 00 00       	call   c0015b1c <picOpen()>
c0015873:	80 3d 80 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e80,0x0
c001587a:	74 0a                	je     c0015886 <HalInitialise()+0x44>
c001587c:	e8 e3 01 00 00       	call   c0015a64 <picDisable()>
c0015881:	e8 32 5c 00 00       	call   c001b4b8 <apicOpen()>
c0015886:	bb 0f 00 00 00       	mov    ebx,0xf
c001588b:	50                   	push   eax
c001588c:	6a 00                	push   0x0
c001588e:	68 fb 55 01 c0       	push   0xc00155fb
c0015893:	6a 00                	push   0x0
c0015895:	e8 d6 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001589a:	83 c4 0c             	add    esp,0xc
c001589d:	6a 00                	push   0x0
c001589f:	68 fb 55 01 c0       	push   0xc00155fb
c00158a4:	6a 01                	push   0x1
c00158a6:	e8 c5 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ab:	83 c4 0c             	add    esp,0xc
c00158ae:	6a 00                	push   0x0
c00158b0:	68 71 51 01 c0       	push   0xc0015171
c00158b5:	6a 02                	push   0x2
c00158b7:	e8 b4 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158bc:	83 c4 0c             	add    esp,0xc
c00158bf:	6a 00                	push   0x0
c00158c1:	68 fb 55 01 c0       	push   0xc00155fb
c00158c6:	6a 03                	push   0x3
c00158c8:	e8 a3 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158cd:	83 c4 0c             	add    esp,0xc
c00158d0:	6a 00                	push   0x0
c00158d2:	68 fb 55 01 c0       	push   0xc00155fb
c00158d7:	6a 04                	push   0x4
c00158d9:	e8 92 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158de:	83 c4 0c             	add    esp,0xc
c00158e1:	6a 00                	push   0x0
c00158e3:	68 fb 55 01 c0       	push   0xc00155fb
c00158e8:	6a 05                	push   0x5
c00158ea:	e8 81 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ef:	83 c4 0c             	add    esp,0xc
c00158f2:	6a 00                	push   0x0
c00158f4:	68 2f 56 01 c0       	push   0xc001562f
c00158f9:	6a 06                	push   0x6
c00158fb:	e8 70 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015900:	83 c4 0c             	add    esp,0xc
c0015903:	6a 00                	push   0x0
c0015905:	68 8a 51 01 c0       	push   0xc001518a
c001590a:	6a 08                	push   0x8
c001590c:	e8 5f 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015911:	83 c4 0c             	add    esp,0xc
c0015914:	6a 00                	push   0x0
c0015916:	68 fb 55 01 c0       	push   0xc00155fb
c001591b:	6a 09                	push   0x9
c001591d:	e8 4e 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015922:	83 c4 0c             	add    esp,0xc
c0015925:	6a 00                	push   0x0
c0015927:	68 fb 55 01 c0       	push   0xc00155fb
c001592c:	6a 0a                	push   0xa
c001592e:	e8 3d 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015933:	83 c4 0c             	add    esp,0xc
c0015936:	6a 00                	push   0x0
c0015938:	68 fb 55 01 c0       	push   0xc00155fb
c001593d:	6a 0b                	push   0xb
c001593f:	e8 2c 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015944:	83 c4 0c             	add    esp,0xc
c0015947:	6a 00                	push   0x0
c0015949:	68 10 55 01 c0       	push   0xc0015510
c001594e:	6a 0d                	push   0xd
c0015950:	e8 1b 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015955:	83 c4 0c             	add    esp,0xc
c0015958:	6a 00                	push   0x0
c001595a:	68 75 55 01 c0       	push   0xc0015575
c001595f:	6a 0e                	push   0xe
c0015961:	e8 0a 6c ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015966:	83 c4 10             	add    esp,0x10
c0015969:	50                   	push   eax
c001596a:	6a 00                	push   0x0
c001596c:	68 fb 55 01 c0       	push   0xc00155fb
c0015971:	53                   	push   ebx
c0015972:	43                   	inc    ebx
c0015973:	e8 f8 6b ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015978:	83 c4 10             	add    esp,0x10
c001597b:	83 fb 1e             	cmp    ebx,0x1e
c001597e:	75 e9                	jne    c0015969 <HalInitialise()+0x127>
c0015980:	50                   	push   eax
c0015981:	6a 00                	push   0x0
c0015983:	68 f1 20 01 c0       	push   0xc00120f1
c0015988:	6a 60                	push   0x60
c001598a:	e8 e1 6b ff ff       	call   c000c570 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001598f:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0015994:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001599e:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00159a5:	e8 c3 24 ff ff       	call   c0007e6d <malloc>
c00159aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00159ad:	89 c3                	mov    ebx,eax
c00159af:	e8 30 09 00 00       	call   c00162e4 <RTC::RTC()>
c00159b4:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00159be:	5a                   	pop    edx
c00159bf:	59                   	pop    ecx
c00159c0:	53                   	push   ebx
c00159c1:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c00159c7:	e8 70 66 ff ff       	call   c000c03c <Device::addChild(Device*)>
c00159cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159ce:	6a 00                	push   0x0
c00159d0:	6a 00                	push   0x0
c00159d2:	6a 00                	push   0x0
c00159d4:	53                   	push   ebx
c00159d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159d8:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c00159dd:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00159e3:	83 c4 28             	add    esp,0x28
c00159e6:	5b                   	pop    ebx
c00159e7:	c3                   	ret    

c00159e8 <HalMakeBeep(int)>:
c00159e8:	53                   	push   ebx
c00159e9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00159ed:	85 db                	test   ebx,ebx
c00159ef:	75 07                	jne    c00159f8 <HalMakeBeep(int)+0x10>
c00159f1:	e4 61                	in     al,0x61
c00159f3:	83 e0 fc             	and    eax,0xfffffffc
c00159f6:	eb 26                	jmp    c0015a1e <HalMakeBeep(int)+0x36>
c00159f8:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00159fd:	99                   	cdq    
c00159fe:	f7 fb                	idiv   ebx
c0015a00:	89 c1                	mov    ecx,eax
c0015a02:	b0 b6                	mov    al,0xb6
c0015a04:	e6 43                	out    0x43,al
c0015a06:	88 c8                	mov    al,cl
c0015a08:	e6 42                	out    0x42,al
c0015a0a:	89 c8                	mov    eax,ecx
c0015a0c:	c1 e8 08             	shr    eax,0x8
c0015a0f:	e6 42                	out    0x42,al
c0015a11:	e4 61                	in     al,0x61
c0015a13:	88 c2                	mov    dl,al
c0015a15:	83 ca 03             	or     edx,0x3
c0015a18:	38 c2                	cmp    dl,al
c0015a1a:	74 04                	je     c0015a20 <HalMakeBeep(int)+0x38>
c0015a1c:	88 d0                	mov    al,dl
c0015a1e:	e6 61                	out    0x61,al
c0015a20:	5b                   	pop    ebx
c0015a21:	c3                   	ret    

c0015a22 <HalGetRand()>:
c0015a22:	31 c0                	xor    eax,eax
c0015a24:	c3                   	ret    

c0015a25 <HalEndOfInterrupt(int)>:
c0015a25:	80 3d 80 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e80,0x0
c0015a2c:	74 23                	je     c0015a51 <HalEndOfInterrupt(int)+0x2c>
c0015a2e:	83 ec 14             	sub    esp,0x14
c0015a31:	6a 1b                	push   0x1b
c0015a33:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015a39:	e8 6c 1a ff ff       	call   c00074aa <Computer::rdmsr(unsigned int)>
c0015a3e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a43:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015a4d:	83 c4 1c             	add    esp,0x1c
c0015a50:	c3                   	ret    
c0015a51:	e9 56 02 00 00       	jmp    c0015cac <picEOI(int)>

c0015a56 <HalRestart()>:
c0015a56:	c3                   	ret    

c0015a57 <HalShutdown()>:
c0015a57:	c3                   	ret    

c0015a58 <HalSleep()>:
c0015a58:	c3                   	ret    
c0015a59:	66 90                	xchg   ax,ax
c0015a5b:	90                   	nop

c0015a5c <picIoWait()>:
c0015a5c:	eb 00                	jmp    c0015a5e <picIoWait()+0x2>
c0015a5e:	eb 00                	jmp    c0015a60 <picIoWait()+0x4>
c0015a60:	90                   	nop
c0015a61:	c3                   	ret    
c0015a62:	66 90                	xchg   ax,ax

c0015a64 <picDisable()>:
c0015a64:	83 ec 10             	sub    esp,0x10
c0015a67:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a6e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a73:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a77:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a7c:	ee                   	out    dx,al
c0015a7d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a84:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a89:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a8d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a92:	ee                   	out    dx,al
c0015a93:	90                   	nop
c0015a94:	83 c4 10             	add    esp,0x10
c0015a97:	c3                   	ret    

c0015a98 <picGetIRQReg(int)>:
c0015a98:	83 ec 10             	sub    esp,0x10
c0015a9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a9f:	25 ff 00 00 00       	and    eax,0xff
c0015aa4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015aab:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015aaf:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015ab3:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015ab8:	ee                   	out    dx,al
c0015ab9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015abd:	25 ff 00 00 00       	and    eax,0xff
c0015ac2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015ac9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015acd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015ad1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015ad6:	ee                   	out    dx,al
c0015ad7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015ade:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015ae3:	89 c2                	mov    edx,eax
c0015ae5:	ec                   	in     al,dx
c0015ae6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015aea:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015aee:	25 ff 00 00 00       	and    eax,0xff
c0015af3:	c1 e0 08             	shl    eax,0x8
c0015af6:	89 c1                	mov    ecx,eax
c0015af8:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015aff:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b04:	89 c2                	mov    edx,eax
c0015b06:	ec                   	in     al,dx
c0015b07:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015b0b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015b0f:	25 ff 00 00 00       	and    eax,0xff
c0015b14:	09 c8                	or     eax,ecx
c0015b16:	83 c4 10             	add    esp,0x10
c0015b19:	c3                   	ret    
c0015b1a:	66 90                	xchg   ax,ax

c0015b1c <picOpen()>:
c0015b1c:	83 ec 50             	sub    esp,0x50
c0015b1f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015b26:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015b2b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b33:	ee                   	out    dx,al
c0015b34:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015b3b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015b40:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015b44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b48:	ee                   	out    dx,al
c0015b49:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015b51:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b59:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b64:	89 c2                	mov    edx,eax
c0015b66:	ec                   	in     al,dx
c0015b67:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b6b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b6f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b73:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b7e:	89 c2                	mov    edx,eax
c0015b80:	ec                   	in     al,dx
c0015b81:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b85:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b89:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b8d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b94:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b99:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ba1:	ee                   	out    dx,al
c0015ba2:	e8 b5 fe ff ff       	call   c0015a5c <picIoWait()>
c0015ba7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015bae:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015bb3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015bb7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015bbb:	ee                   	out    dx,al
c0015bbc:	e8 9b fe ff ff       	call   c0015a5c <picIoWait()>
c0015bc1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015bc5:	25 ff 00 00 00       	and    eax,0xff
c0015bca:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015bd1:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015bd5:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015bd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bdd:	ee                   	out    dx,al
c0015bde:	e8 79 fe ff ff       	call   c0015a5c <picIoWait()>
c0015be3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015be7:	25 ff 00 00 00       	and    eax,0xff
c0015bec:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015bf3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015bf7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015bfb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015bff:	ee                   	out    dx,al
c0015c00:	e8 57 fe ff ff       	call   c0015a5c <picIoWait()>
c0015c05:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015c0c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015c11:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015c15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c19:	ee                   	out    dx,al
c0015c1a:	e8 3d fe ff ff       	call   c0015a5c <picIoWait()>
c0015c1f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015c26:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015c2b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015c2f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015c33:	ee                   	out    dx,al
c0015c34:	e8 23 fe ff ff       	call   c0015a5c <picIoWait()>
c0015c39:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015c40:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015c45:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c49:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015c4d:	ee                   	out    dx,al
c0015c4e:	e8 09 fe ff ff       	call   c0015a5c <picIoWait()>
c0015c53:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c5a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c5f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c63:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c67:	ee                   	out    dx,al
c0015c68:	e8 ef fd ff ff       	call   c0015a5c <picIoWait()>
c0015c6d:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c71:	25 ff 00 00 00       	and    eax,0xff
c0015c76:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c7d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c81:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c85:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c89:	ee                   	out    dx,al
c0015c8a:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c8e:	25 ff 00 00 00       	and    eax,0xff
c0015c93:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c9a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c9e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015ca2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015ca6:	ee                   	out    dx,al
c0015ca7:	90                   	nop
c0015ca8:	83 c4 50             	add    esp,0x50
c0015cab:	c3                   	ret    

c0015cac <picEOI(int)>:
c0015cac:	83 ec 10             	sub    esp,0x10
c0015caf:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015cb4:	75 22                	jne    c0015cd8 <picEOI(int)+0x2c>
c0015cb6:	6a 0b                	push   0xb
c0015cb8:	e8 db fd ff ff       	call   c0015a98 <picGetIRQReg(int)>
c0015cbd:	83 c4 04             	add    esp,0x4
c0015cc0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015cc5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015cca:	25 ff ff 00 00       	and    eax,0xffff
c0015ccf:	25 80 00 00 00       	and    eax,0x80
c0015cd4:	74 72                	je     c0015d48 <picEOI(int)+0x9c>
c0015cd6:	66 90                	xchg   ax,ax
c0015cd8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015cdd:	75 31                	jne    c0015d10 <picEOI(int)+0x64>
c0015cdf:	6a 0b                	push   0xb
c0015ce1:	e8 b2 fd ff ff       	call   c0015a98 <picGetIRQReg(int)>
c0015ce6:	83 c4 04             	add    esp,0x4
c0015ce9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cf2:	66 85 c0             	test   ax,ax
c0015cf5:	78 19                	js     c0015d10 <picEOI(int)+0x64>
c0015cf7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015cfe:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015d03:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015d07:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015d0c:	ee                   	out    dx,al
c0015d0d:	eb 3d                	jmp    c0015d4c <picEOI(int)+0xa0>
c0015d0f:	90                   	nop
c0015d10:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015d15:	7e 19                	jle    c0015d30 <picEOI(int)+0x84>
c0015d17:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015d1e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015d23:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015d27:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015d2c:	ee                   	out    dx,al
c0015d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d30:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015d37:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015d3c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015d40:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015d45:	ee                   	out    dx,al
c0015d46:	eb 04                	jmp    c0015d4c <picEOI(int)+0xa0>
c0015d48:	90                   	nop
c0015d49:	8d 76 00             	lea    esi,[esi+0x0]
c0015d4c:	83 c4 10             	add    esp,0x10
c0015d4f:	c3                   	ret    

c0015d50 <RTC::open(int, int, void*)>:
c0015d50:	31 c0                	xor    eax,eax
c0015d52:	c3                   	ret    
c0015d53:	90                   	nop

c0015d54 <RTC::close(int, int, void*)>:
c0015d54:	31 c0                	xor    eax,eax
c0015d56:	c3                   	ret    
c0015d57:	90                   	nop

c0015d58 <RTC::timeInSecondsUTC()>:
c0015d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d5c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d62:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d68:	c3                   	ret    
c0015d69:	90                   	nop

c0015d6a <RTC::timeInDatetimeUTC()>:
c0015d6a:	53                   	push   ebx
c0015d6b:	83 ec 14             	sub    esp,0x14
c0015d6e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d76:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d78:	50                   	push   eax
c0015d79:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d7c:	83 c4 0c             	add    esp,0xc
c0015d7f:	52                   	push   edx
c0015d80:	50                   	push   eax
c0015d81:	53                   	push   ebx
c0015d82:	e8 29 60 ff ff       	call   c000bdb0 <secondsToDatetime(unsigned long long)>
c0015d87:	89 d8                	mov    eax,ebx
c0015d89:	83 c4 14             	add    esp,0x14
c0015d8c:	5b                   	pop    ebx
c0015d8d:	c2 04 00             	ret    0x4

c0015d90 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d90:	56                   	push   esi
c0015d91:	53                   	push   ebx
c0015d92:	83 ec 14             	sub    esp,0x14
c0015d95:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d9b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d9e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015da2:	52                   	push   edx
c0015da3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015da7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dab:	50                   	push   eax
c0015dac:	e8 ff 5f ff ff       	call   c000bdb0 <secondsToDatetime(unsigned long long)>
c0015db1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015db5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015db9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015dbd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015dc1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015dc5:	89 f0                	mov    eax,esi
c0015dc7:	83 c4 20             	add    esp,0x20
c0015dca:	5b                   	pop    ebx
c0015dcb:	5e                   	pop    esi
c0015dcc:	ff e0                	jmp    eax

c0015dce <RTC::~RTC()>:
c0015dce:	83 ec 0c             	sub    esp,0xc
c0015dd1:	ba 30 ee 01 c0       	mov    edx,0xc001ee30
c0015dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dda:	89 10                	mov    DWORD PTR [eax],edx
c0015ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015de0:	83 ec 0c             	sub    esp,0xc
c0015de3:	50                   	push   eax
c0015de4:	e8 4b 5d ff ff       	call   c000bb34 <Clock::~Clock()>
c0015de9:	83 c4 10             	add    esp,0x10
c0015dec:	90                   	nop
c0015ded:	83 c4 0c             	add    esp,0xc
c0015df0:	c3                   	ret    
c0015df1:	90                   	nop

c0015df2 <RTC::~RTC()>:
c0015df2:	83 ec 0c             	sub    esp,0xc
c0015df5:	83 ec 0c             	sub    esp,0xc
c0015df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dfc:	e8 cd ff ff ff       	call   c0015dce <RTC::~RTC()>
c0015e01:	83 c4 10             	add    esp,0x10
c0015e04:	83 ec 08             	sub    esp,0x8
c0015e07:	68 60 01 00 00       	push   0x160
c0015e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e10:	e8 f1 4c ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c0015e15:	83 c4 10             	add    esp,0x10
c0015e18:	83 c4 0c             	add    esp,0xc
c0015e1b:	c3                   	ret    

c0015e1c <RTC::get_update_in_progress_flag()>:
c0015e1c:	83 ec 14             	sub    esp,0x14
c0015e1f:	6a 0a                	push   0xa
c0015e21:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015e27:	e8 32 17 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015e2c:	83 c4 1c             	add    esp,0x1c
c0015e2f:	c0 e8 07             	shr    al,0x7
c0015e32:	c3                   	ret    
c0015e33:	90                   	nop

c0015e34 <RTC::completeRTCRefresh()>:
c0015e34:	55                   	push   ebp
c0015e35:	57                   	push   edi
c0015e36:	56                   	push   esi
c0015e37:	53                   	push   ebx
c0015e38:	83 ec 2c             	sub    esp,0x2c
c0015e3b:	8b 1d ec 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eec
c0015e41:	83 ec 0c             	sub    esp,0xc
c0015e44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e48:	e8 cf ff ff ff       	call   c0015e1c <RTC::get_update_in_progress_flag()>
c0015e4d:	83 c4 10             	add    esp,0x10
c0015e50:	84 c0                	test   al,al
c0015e52:	74 0e                	je     c0015e62 <RTC::completeRTCRefresh()+0x2e>
c0015e54:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e5a:	3b 05 ec 2e 02 c0    	cmp    eax,DWORD PTR ds:0xc0022eec
c0015e60:	73 df                	jae    c0015e41 <RTC::completeRTCRefresh()+0xd>
c0015e62:	55                   	push   ebp
c0015e63:	55                   	push   ebp
c0015e64:	6a 00                	push   0x0
c0015e66:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015e6c:	e8 ed 16 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015e71:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e75:	58                   	pop    eax
c0015e76:	5a                   	pop    edx
c0015e77:	6a 02                	push   0x2
c0015e79:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015e7f:	e8 da 16 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015e84:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e88:	59                   	pop    ecx
c0015e89:	5b                   	pop    ebx
c0015e8a:	6a 04                	push   0x4
c0015e8c:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015e92:	e8 c7 16 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015e97:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e9b:	5e                   	pop    esi
c0015e9c:	5f                   	pop    edi
c0015e9d:	6a 07                	push   0x7
c0015e9f:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015ea5:	e8 b4 16 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015eaa:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015eae:	5d                   	pop    ebp
c0015eaf:	58                   	pop    eax
c0015eb0:	6a 08                	push   0x8
c0015eb2:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015eb8:	e8 a1 16 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015ebd:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015ec1:	58                   	pop    eax
c0015ec2:	5a                   	pop    edx
c0015ec3:	6a 09                	push   0x9
c0015ec5:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015ecb:	e8 8e 16 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015ed0:	83 c4 10             	add    esp,0x10
c0015ed3:	0f b6 e8             	movzx  ebp,al
c0015ed6:	8b 1d ec 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eec
c0015edc:	83 ec 0c             	sub    esp,0xc
c0015edf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ee3:	e8 34 ff ff ff       	call   c0015e1c <RTC::get_update_in_progress_flag()>
c0015ee8:	83 c4 10             	add    esp,0x10
c0015eeb:	84 c0                	test   al,al
c0015eed:	74 0e                	je     c0015efd <RTC::completeRTCRefresh()+0xc9>
c0015eef:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015ef5:	3b 05 ec 2e 02 c0    	cmp    eax,DWORD PTR ds:0xc0022eec
c0015efb:	73 df                	jae    c0015edc <RTC::completeRTCRefresh()+0xa8>
c0015efd:	50                   	push   eax
c0015efe:	50                   	push   eax
c0015eff:	6a 00                	push   0x0
c0015f01:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015f07:	e8 52 16 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015f0c:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015f10:	58                   	pop    eax
c0015f11:	5a                   	pop    edx
c0015f12:	6a 02                	push   0x2
c0015f14:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015f1a:	e8 3f 16 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015f1f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f23:	59                   	pop    ecx
c0015f24:	5b                   	pop    ebx
c0015f25:	6a 04                	push   0x4
c0015f27:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015f2d:	e8 2c 16 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015f32:	5e                   	pop    esi
c0015f33:	88 c3                	mov    bl,al
c0015f35:	5f                   	pop    edi
c0015f36:	6a 07                	push   0x7
c0015f38:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015f3e:	e8 1b 16 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015f43:	89 c6                	mov    esi,eax
c0015f45:	58                   	pop    eax
c0015f46:	5a                   	pop    edx
c0015f47:	6a 08                	push   0x8
c0015f49:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015f4f:	e8 0a 16 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015f54:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f58:	59                   	pop    ecx
c0015f59:	5f                   	pop    edi
c0015f5a:	6a 09                	push   0x9
c0015f5c:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015f62:	e8 f7 15 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015f67:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f6b:	0f b6 f8             	movzx  edi,al
c0015f6e:	83 c4 10             	add    esp,0x10
c0015f71:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f75:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f79:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f7d:	89 f1                	mov    ecx,esi
c0015f7f:	0f 94 c0             	sete   al
c0015f82:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f86:	0f 94 c2             	sete   dl
c0015f89:	21 d0                	and    eax,edx
c0015f8b:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f8f:	0f 94 c2             	sete   dl
c0015f92:	21 c2                	and    edx,eax
c0015f94:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f98:	0f 94 c0             	sete   al
c0015f9b:	21 d0                	and    eax,edx
c0015f9d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015fa1:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015fa5:	0f 94 c1             	sete   cl
c0015fa8:	84 c8                	test   al,cl
c0015faa:	75 29                	jne    c0015fd5 <RTC::completeRTCRefresh()+0x1a1>
c0015fac:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015fb0:	89 fd                	mov    ebp,edi
c0015fb2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015fb6:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015fba:	89 f0                	mov    eax,esi
c0015fbc:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015fc0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fc4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fc8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fcc:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fd0:	e9 01 ff ff ff       	jmp    c0015ed6 <RTC::completeRTCRefresh()+0xa2>
c0015fd5:	39 fd                	cmp    ebp,edi
c0015fd7:	75 d3                	jne    c0015fac <RTC::completeRTCRefresh()+0x178>
c0015fd9:	55                   	push   ebp
c0015fda:	55                   	push   ebp
c0015fdb:	6a 0b                	push   0xb
c0015fdd:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0015fe3:	e8 76 15 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c0015fe8:	83 c4 10             	add    esp,0x10
c0015feb:	89 c5                	mov    ebp,eax
c0015fed:	a8 04                	test   al,0x4
c0015fef:	75 78                	jne    c0016069 <RTC::completeRTCRefresh()+0x235>
c0015ff1:	b1 0a                	mov    cl,0xa
c0015ff3:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015ff7:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015ffb:	83 e2 0f             	and    edx,0xf
c0015ffe:	c0 e8 04             	shr    al,0x4
c0016001:	c1 ef 04             	shr    edi,0x4
c0016004:	f6 e1                	mul    cl
c0016006:	6b ff 0a             	imul   edi,edi,0xa
c0016009:	01 d0                	add    eax,edx
c001600b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001600f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0016013:	83 e2 0f             	and    edx,0xf
c0016016:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001601a:	c0 e8 04             	shr    al,0x4
c001601d:	f6 e1                	mul    cl
c001601f:	01 d0                	add    eax,edx
c0016021:	88 da                	mov    dl,bl
c0016023:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016027:	83 e2 0f             	and    edx,0xf
c001602a:	88 d8                	mov    al,bl
c001602c:	83 e3 80             	and    ebx,0xffffff80
c001602f:	c0 e8 04             	shr    al,0x4
c0016032:	83 e0 07             	and    eax,0x7
c0016035:	f6 e1                	mul    cl
c0016037:	01 d0                	add    eax,edx
c0016039:	89 f2                	mov    edx,esi
c001603b:	09 c3                	or     ebx,eax
c001603d:	83 e2 0f             	and    edx,0xf
c0016040:	89 f0                	mov    eax,esi
c0016042:	c0 e8 04             	shr    al,0x4
c0016045:	f6 e1                	mul    cl
c0016047:	8d 34 02             	lea    esi,[edx+eax*1]
c001604a:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001604e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016052:	83 e2 0f             	and    edx,0xf
c0016055:	c0 e8 04             	shr    al,0x4
c0016058:	f6 e1                	mul    cl
c001605a:	01 d0                	add    eax,edx
c001605c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016060:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016064:	83 e0 0f             	and    eax,0xf
c0016067:	01 c7                	add    edi,eax
c0016069:	83 e5 02             	and    ebp,0x2
c001606c:	75 14                	jne    c0016082 <RTC::completeRTCRefresh()+0x24e>
c001606e:	84 db                	test   bl,bl
c0016070:	79 10                	jns    c0016082 <RTC::completeRTCRefresh()+0x24e>
c0016072:	83 e3 7f             	and    ebx,0x7f
c0016075:	b9 18 00 00 00       	mov    ecx,0x18
c001607a:	8d 43 0c             	lea    eax,[ebx+0xc]
c001607d:	99                   	cdq    
c001607e:	f7 f9                	idiv   ecx
c0016080:	88 d3                	mov    bl,dl
c0016082:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0016088:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001608e:	77 06                	ja     c0016096 <RTC::completeRTCRefresh()+0x262>
c0016090:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0016096:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001609b:	31 d2                	xor    edx,edx
c001609d:	c1 e1 10             	shl    ecx,0x10
c00160a0:	89 d7                	mov    edi,edx
c00160a2:	c1 e5 10             	shl    ebp,0x10
c00160a5:	31 c0                	xor    eax,eax
c00160a7:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c00160ad:	09 cf                	or     edi,ecx
c00160af:	89 fa                	mov    edx,edi
c00160b1:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c00160b5:	88 da                	mov    dl,bl
c00160b7:	89 f3                	mov    ebx,esi
c00160b9:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c00160bd:	88 d8                	mov    al,bl
c00160bf:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c00160c3:	0f b7 c8             	movzx  ecx,ax
c00160c6:	09 e9                	or     ecx,ebp
c00160c8:	89 c8                	mov    eax,ecx
c00160ca:	51                   	push   ecx
c00160cb:	51                   	push   ecx
c00160cc:	52                   	push   edx
c00160cd:	50                   	push   eax
c00160ce:	e8 50 5b ff ff       	call   c000bc23 <datetimeToSeconds(datetime_t)>
c00160d3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00160d7:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00160dd:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00160e3:	83 c4 3c             	add    esp,0x3c
c00160e6:	5b                   	pop    ebx
c00160e7:	5e                   	pop    esi
c00160e8:	5f                   	pop    edi
c00160e9:	5d                   	pop    ebp
c00160ea:	c3                   	ret    
c00160eb:	90                   	nop

c00160ec <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00160ec:	55                   	push   ebp
c00160ed:	57                   	push   edi
c00160ee:	56                   	push   esi
c00160ef:	53                   	push   ebx
c00160f0:	83 ec 30             	sub    esp,0x30
c00160f3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00160f7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00160fb:	6a 00                	push   0x0
c00160fd:	6a 00                	push   0x0
c00160ff:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0016105:	e8 6a 15 ff ff       	call   c0007674 <Computer::writeCMOS(unsigned char, unsigned char)>
c001610a:	83 c4 0c             	add    esp,0xc
c001610d:	6a 00                	push   0x0
c001610f:	6a 02                	push   0x2
c0016111:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0016117:	e8 58 15 ff ff       	call   c0007674 <Computer::writeCMOS(unsigned char, unsigned char)>
c001611c:	31 d2                	xor    edx,edx
c001611e:	89 f9                	mov    ecx,edi
c0016120:	89 f8                	mov    eax,edi
c0016122:	c1 e9 10             	shr    ecx,0x10
c0016125:	0f b6 c4             	movzx  eax,ah
c0016128:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c001612c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016130:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016134:	b9 64 00 00 00       	mov    ecx,0x64
c0016139:	89 f0                	mov    eax,esi
c001613b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001613f:	89 f0                	mov    eax,esi
c0016141:	0f b6 c4             	movzx  eax,ah
c0016144:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016148:	89 f0                	mov    eax,esi
c001614a:	c1 e8 10             	shr    eax,0x10
c001614d:	66 f7 f1             	div    cx
c0016150:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016155:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001615a:	59                   	pop    ecx
c001615b:	5b                   	pop    ebx
c001615c:	89 fb                	mov    ebx,edi
c001615e:	6a 0b                	push   0xb
c0016160:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0016166:	e8 f3 13 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c001616b:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001616f:	83 c4 10             	add    esp,0x10
c0016172:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016177:	75 74                	jne    c00161ed <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016179:	b2 0a                	mov    dl,0xa
c001617b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001617f:	0f b6 c1             	movzx  eax,cl
c0016182:	f6 f2                	div    dl
c0016184:	88 c3                	mov    bl,al
c0016186:	88 e0                	mov    al,ah
c0016188:	c1 e3 04             	shl    ebx,0x4
c001618b:	09 c3                	or     ebx,eax
c001618d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016192:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016196:	f6 f2                	div    dl
c0016198:	88 c1                	mov    cl,al
c001619a:	88 e0                	mov    al,ah
c001619c:	c1 e1 04             	shl    ecx,0x4
c001619f:	09 c1                	or     ecx,eax
c00161a1:	89 f8                	mov    eax,edi
c00161a3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00161a7:	0f b6 c0             	movzx  eax,al
c00161aa:	f6 f2                	div    dl
c00161ac:	88 c3                	mov    bl,al
c00161ae:	88 e0                	mov    al,ah
c00161b0:	c1 e3 04             	shl    ebx,0x4
c00161b3:	09 c3                	or     ebx,eax
c00161b5:	89 f0                	mov    eax,esi
c00161b7:	0f b6 c0             	movzx  eax,al
c00161ba:	f6 f2                	div    dl
c00161bc:	88 c1                	mov    cl,al
c00161be:	88 e0                	mov    al,ah
c00161c0:	c1 e1 04             	shl    ecx,0x4
c00161c3:	09 c1                	or     ecx,eax
c00161c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161ca:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00161ce:	f6 f2                	div    dl
c00161d0:	88 c1                	mov    cl,al
c00161d2:	88 e0                	mov    al,ah
c00161d4:	c1 e1 04             	shl    ecx,0x4
c00161d7:	09 c1                	or     ecx,eax
c00161d9:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00161de:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00161e2:	f6 f2                	div    dl
c00161e4:	89 c5                	mov    ebp,eax
c00161e6:	88 e0                	mov    al,ah
c00161e8:	c1 e5 04             	shl    ebp,0x4
c00161eb:	09 c5                	or     ebp,eax
c00161ed:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00161f2:	75 17                	jne    c001620b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161f4:	80 fb 0b             	cmp    bl,0xb
c00161f7:	76 0c                	jbe    c0016205 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00161f9:	80 eb 0c             	sub    bl,0xc
c00161fc:	75 02                	jne    c0016200 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00161fe:	b3 0c                	mov    bl,0xc
c0016200:	83 cb 80             	or     ebx,0xffffff80
c0016203:	eb 06                	jmp    c001620b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016205:	84 db                	test   bl,bl
c0016207:	75 02                	jne    c001620b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016209:	b3 0c                	mov    bl,0xc
c001620b:	0f b6 db             	movzx  ebx,bl
c001620e:	50                   	push   eax
c001620f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016214:	50                   	push   eax
c0016215:	6a 00                	push   0x0
c0016217:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c001621d:	e8 52 14 ff ff       	call   c0007674 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016222:	83 c4 0c             	add    esp,0xc
c0016225:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001622a:	50                   	push   eax
c001622b:	6a 02                	push   0x2
c001622d:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0016233:	e8 3c 14 ff ff       	call   c0007674 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016238:	83 c4 0c             	add    esp,0xc
c001623b:	53                   	push   ebx
c001623c:	6a 04                	push   0x4
c001623e:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0016244:	e8 2b 14 ff ff       	call   c0007674 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016249:	83 c4 0c             	add    esp,0xc
c001624c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016251:	50                   	push   eax
c0016252:	6a 07                	push   0x7
c0016254:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c001625a:	e8 15 14 ff ff       	call   c0007674 <Computer::writeCMOS(unsigned char, unsigned char)>
c001625f:	83 c4 0c             	add    esp,0xc
c0016262:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016267:	50                   	push   eax
c0016268:	6a 08                	push   0x8
c001626a:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0016270:	e8 ff 13 ff ff       	call   c0007674 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016275:	83 c4 0c             	add    esp,0xc
c0016278:	89 e8                	mov    eax,ebp
c001627a:	0f b6 e8             	movzx  ebp,al
c001627d:	55                   	push   ebp
c001627e:	6a 09                	push   0x9
c0016280:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c0016286:	e8 e9 13 ff ff       	call   c0007674 <Computer::writeCMOS(unsigned char, unsigned char)>
c001628b:	5a                   	pop    edx
c001628c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016290:	e8 9f fb ff ff       	call   c0015e34 <RTC::completeRTCRefresh()>
c0016295:	83 c4 3c             	add    esp,0x3c
c0016298:	b0 01                	mov    al,0x1
c001629a:	5b                   	pop    ebx
c001629b:	5e                   	pop    esi
c001629c:	5f                   	pop    edi
c001629d:	5d                   	pop    ebp
c001629e:	c3                   	ret    

c001629f <rtcIRQHandler(regs*, void*)>:
c001629f:	53                   	push   ebx
c00162a0:	83 ec 10             	sub    esp,0x10
c00162a3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00162a7:	6a 0c                	push   0xc
c00162a9:	ff 35 18 09 02 c0    	push   DWORD PTR ds:0xc0020918
c00162af:	e8 aa 12 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c00162b4:	83 c4 10             	add    esp,0x10
c00162b7:	84 c0                	test   al,al
c00162b9:	79 24                	jns    c00162df <rtcIRQHandler(regs*, void*)+0x40>
c00162bb:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00162c2:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00162c9:	66 ff 05 94 3e 02 c0 	inc    WORD PTR ds:0xc0023e94
c00162d0:	75 0d                	jne    c00162df <rtcIRQHandler(regs*, void*)+0x40>
c00162d2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00162d6:	83 c4 08             	add    esp,0x8
c00162d9:	5b                   	pop    ebx
c00162da:	e9 55 fb ff ff       	jmp    c0015e34 <RTC::completeRTCRefresh()>
c00162df:	83 c4 08             	add    esp,0x8
c00162e2:	5b                   	pop    ebx
c00162e3:	c3                   	ret    

c00162e4 <RTC::RTC()>:
c00162e4:	83 ec 1c             	sub    esp,0x1c
c00162e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162eb:	83 ec 08             	sub    esp,0x8
c00162ee:	68 13 ee 01 c0       	push   0xc001ee13
c00162f3:	50                   	push   eax
c00162f4:	e8 05 58 ff ff       	call   c000bafe <Clock::Clock(char const*)>
c00162f9:	83 c4 10             	add    esp,0x10
c00162fc:	ba 30 ee 01 c0       	mov    edx,0xc001ee30
c0016301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016305:	89 10                	mov    DWORD PTR [eax],edx
c0016307:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001630b:	83 ec 0c             	sub    esp,0xc
c001630e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016312:	6a 01                	push   0x1
c0016314:	68 9f 62 01 c0       	push   0xc001629f
c0016319:	6a 08                	push   0x8
c001631b:	50                   	push   eax
c001631c:	e8 c7 5c ff ff       	call   c000bfe8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016321:	83 c4 20             	add    esp,0x20
c0016324:	89 c2                	mov    edx,eax
c0016326:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001632a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016330:	fa                   	cli    
c0016331:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0016336:	40                   	inc    eax
c0016337:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c001633c:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0016341:	83 ec 08             	sub    esp,0x8
c0016344:	6a 0b                	push   0xb
c0016346:	50                   	push   eax
c0016347:	e8 12 12 ff ff       	call   c000755e <Computer::readCMOS(unsigned char)>
c001634c:	83 c4 10             	add    esp,0x10
c001634f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016353:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0016358:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001635c:	83 ca 10             	or     edx,0x10
c001635f:	81 e2 ff 00 00 00    	and    edx,0xff
c0016365:	83 ec 04             	sub    esp,0x4
c0016368:	52                   	push   edx
c0016369:	6a 0b                	push   0xb
c001636b:	50                   	push   eax
c001636c:	e8 03 13 ff ff       	call   c0007674 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016371:	83 c4 10             	add    esp,0x10
c0016374:	83 ec 0c             	sub    esp,0xc
c0016377:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001637b:	e8 b4 fa ff ff       	call   c0015e34 <RTC::completeRTCRefresh()>
c0016380:	83 c4 10             	add    esp,0x10
c0016383:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0016388:	48                   	dec    eax
c0016389:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c001638e:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0016393:	85 c0                	test   eax,eax
c0016395:	75 01                	jne    c0016398 <RTC::RTC()+0xb4>
c0016397:	fb                   	sti    
c0016398:	90                   	nop
c0016399:	83 c4 1c             	add    esp,0x1c
c001639c:	c3                   	ret    
c001639d:	66 90                	xchg   ax,ax
c001639f:	90                   	nop

c00163a0 <HalConsoleScroll(int, int)>:
c00163a0:	83 ec 10             	sub    esp,0x10
c00163a3:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00163ab:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00163b3:	90                   	nop
c00163b4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163b9:	0f 8f e1 00 00 00    	jg     c00164a0 <HalConsoleScroll(int, int)+0x100>
c00163bf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163c7:	90                   	nop
c00163c8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00163d0:	0f 8f be 00 00 00    	jg     c0016494 <HalConsoleScroll(int, int)+0xf4>
c00163d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163da:	89 d0                	mov    eax,edx
c00163dc:	c1 e0 02             	shl    eax,0x2
c00163df:	01 d0                	add    eax,edx
c00163e1:	c1 e0 05             	shl    eax,0x5
c00163e4:	89 c2                	mov    edx,eax
c00163e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ea:	01 d0                	add    eax,edx
c00163ec:	89 c2                	mov    edx,eax
c00163ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163f2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00163f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163f9:	89 d0                	mov    eax,edx
c00163fb:	c1 e0 02             	shl    eax,0x2
c00163fe:	01 d0                	add    eax,edx
c0016400:	c1 e0 05             	shl    eax,0x5
c0016403:	89 c2                	mov    edx,eax
c0016405:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016409:	01 d0                	add    eax,edx
c001640b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016415:	01 c2                	add    edx,eax
c0016417:	8a 01                	mov    al,BYTE PTR [ecx]
c0016419:	88 02                	mov    BYTE PTR [edx],al
c001641b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016420:	75 66                	jne    c0016488 <HalConsoleScroll(int, int)+0xe8>
c0016422:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016426:	83 e0 01             	and    eax,0x1
c0016429:	74 39                	je     c0016464 <HalConsoleScroll(int, int)+0xc4>
c001642b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001642f:	83 e0 0f             	and    eax,0xf
c0016432:	88 c2                	mov    dl,al
c0016434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016438:	c1 e0 04             	shl    eax,0x4
c001643b:	88 d1                	mov    cl,dl
c001643d:	09 c1                	or     ecx,eax
c001643f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016443:	89 d0                	mov    eax,edx
c0016445:	c1 e0 02             	shl    eax,0x2
c0016448:	01 d0                	add    eax,edx
c001644a:	c1 e0 05             	shl    eax,0x5
c001644d:	89 c2                	mov    edx,eax
c001644f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016453:	01 d0                	add    eax,edx
c0016455:	89 c2                	mov    edx,eax
c0016457:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001645b:	01 d0                	add    eax,edx
c001645d:	88 ca                	mov    dl,cl
c001645f:	88 10                	mov    BYTE PTR [eax],dl
c0016461:	eb 25                	jmp    c0016488 <HalConsoleScroll(int, int)+0xe8>
c0016463:	90                   	nop
c0016464:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016468:	89 d0                	mov    eax,edx
c001646a:	c1 e0 02             	shl    eax,0x2
c001646d:	01 d0                	add    eax,edx
c001646f:	c1 e0 05             	shl    eax,0x5
c0016472:	89 c2                	mov    edx,eax
c0016474:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016478:	01 d0                	add    eax,edx
c001647a:	89 c2                	mov    edx,eax
c001647c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016480:	01 d0                	add    eax,edx
c0016482:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016485:	8d 76 00             	lea    esi,[esi+0x0]
c0016488:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001648c:	e9 37 ff ff ff       	jmp    c00163c8 <HalConsoleScroll(int, int)+0x28>
c0016491:	8d 76 00             	lea    esi,[esi+0x0]
c0016494:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016498:	e9 17 ff ff ff       	jmp    c00163b4 <HalConsoleScroll(int, int)+0x14>
c001649d:	8d 76 00             	lea    esi,[esi+0x0]
c00164a0:	90                   	nop
c00164a1:	83 c4 10             	add    esp,0x10
c00164a4:	c3                   	ret    
c00164a5:	8d 76 00             	lea    esi,[esi+0x0]

c00164a8 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00164a8:	83 ec 14             	sub    esp,0x14
c00164ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164af:	88 04 24             	mov    BYTE PTR [esp],al
c00164b2:	8a 04 24             	mov    al,BYTE PTR [esp]
c00164b5:	25 ff 00 00 00       	and    eax,0xff
c00164ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164be:	89 d1                	mov    ecx,edx
c00164c0:	83 e1 0f             	and    ecx,0xf
c00164c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164c7:	c1 e2 04             	shl    edx,0x4
c00164ca:	81 e2 ff 00 00 00    	and    edx,0xff
c00164d0:	09 ca                	or     edx,ecx
c00164d2:	c1 e2 08             	shl    edx,0x8
c00164d5:	09 d0                	or     eax,edx
c00164d7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00164dc:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00164e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164e8:	89 d0                	mov    eax,edx
c00164ea:	c1 e0 02             	shl    eax,0x2
c00164ed:	01 d0                	add    eax,edx
c00164ef:	c1 e0 04             	shl    eax,0x4
c00164f2:	89 c2                	mov    edx,eax
c00164f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164f8:	01 d0                	add    eax,edx
c00164fa:	01 c0                	add    eax,eax
c00164fc:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016500:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016504:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016509:	66 89 02             	mov    WORD PTR [edx],ax
c001650c:	90                   	nop
c001650d:	83 c4 14             	add    esp,0x14
c0016510:	c3                   	ret    
c0016511:	8d 76 00             	lea    esi,[esi+0x0]

c0016514 <HalConsoleCursorUpdate(int, int)>:
c0016514:	83 ec 20             	sub    esp,0x20
c0016517:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001651b:	89 c2                	mov    edx,eax
c001651d:	89 d0                	mov    eax,edx
c001651f:	c1 e0 02             	shl    eax,0x2
c0016522:	01 d0                	add    eax,edx
c0016524:	c1 e0 04             	shl    eax,0x4
c0016527:	89 c2                	mov    edx,eax
c0016529:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001652d:	01 d0                	add    eax,edx
c001652f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016534:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001653b:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016540:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016544:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016548:	ee                   	out    dx,al
c0016549:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001654e:	25 ff 00 00 00       	and    eax,0xff
c0016553:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001655a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001655e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016562:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016566:	ee                   	out    dx,al
c0016567:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001656e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016573:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016577:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001657b:	ee                   	out    dx,al
c001657c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016581:	66 c1 e8 08          	shr    ax,0x8
c0016585:	25 ff 00 00 00       	and    eax,0xff
c001658a:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016591:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016595:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016599:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001659d:	ee                   	out    dx,al
c001659e:	90                   	nop
c001659f:	83 c4 20             	add    esp,0x20
c00165a2:	c3                   	ret    
c00165a3:	90                   	nop

c00165a4 <FAT::getName()>:
c00165a4:	b8 64 ee 01 c0       	mov    eax,0xc001ee64
c00165a9:	c3                   	ret    
c00165aa:	66 90                	xchg   ax,ax

c00165ac <FAT::tell(void*, unsigned long long*)>:
c00165ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165b1:	75 09                	jne    c00165bc <FAT::tell(void*, unsigned long long*)+0x10>
c00165b3:	b8 04 00 00 00       	mov    eax,0x4
c00165b8:	c3                   	ret    
c00165b9:	8d 76 00             	lea    esi,[esi+0x0]
c00165bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165c1:	75 09                	jne    c00165cc <FAT::tell(void*, unsigned long long*)+0x20>
c00165c3:	b8 04 00 00 00       	mov    eax,0x4
c00165c8:	c3                   	ret    
c00165c9:	8d 76 00             	lea    esi,[esi+0x0]
c00165cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165d0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00165d3:	ba 00 00 00 00       	mov    edx,0x0
c00165d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165dc:	89 01                	mov    DWORD PTR [ecx],eax
c00165de:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165e1:	b8 00 00 00 00       	mov    eax,0x0
c00165e6:	c3                   	ret    
c00165e7:	90                   	nop

c00165e8 <FAT::stat(void*, unsigned long long*)>:
c00165e8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165ed:	75 09                	jne    c00165f8 <FAT::stat(void*, unsigned long long*)+0x10>
c00165ef:	b8 04 00 00 00       	mov    eax,0x4
c00165f4:	c3                   	ret    
c00165f5:	8d 76 00             	lea    esi,[esi+0x0]
c00165f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165fd:	75 09                	jne    c0016608 <FAT::stat(void*, unsigned long long*)+0x20>
c00165ff:	b8 04 00 00 00       	mov    eax,0x4
c0016604:	c3                   	ret    
c0016605:	8d 76 00             	lea    esi,[esi+0x0]
c0016608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001660c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001660f:	ba 00 00 00 00       	mov    edx,0x0
c0016614:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016618:	89 01                	mov    DWORD PTR [ecx],eax
c001661a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001661d:	b8 00 00 00 00       	mov    eax,0x0
c0016622:	c3                   	ret    
c0016623:	90                   	nop

c0016624 <FAT::~FAT()>:
c0016624:	83 ec 0c             	sub    esp,0xc
c0016627:	ba b0 ee 01 c0       	mov    edx,0xc001eeb0
c001662c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016630:	89 10                	mov    DWORD PTR [eax],edx
c0016632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016636:	83 ec 0c             	sub    esp,0xc
c0016639:	50                   	push   eax
c001663a:	e8 03 49 ff ff       	call   c000af42 <Filesystem::~Filesystem()>
c001663f:	83 c4 10             	add    esp,0x10
c0016642:	90                   	nop
c0016643:	83 c4 0c             	add    esp,0xc
c0016646:	c3                   	ret    
c0016647:	90                   	nop

c0016648 <FAT::~FAT()>:
c0016648:	83 ec 0c             	sub    esp,0xc
c001664b:	83 ec 0c             	sub    esp,0xc
c001664e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016652:	e8 cd ff ff ff       	call   c0016624 <FAT::~FAT()>
c0016657:	83 c4 10             	add    esp,0x10
c001665a:	83 ec 08             	sub    esp,0x8
c001665d:	6a 08                	push   0x8
c001665f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016663:	e8 9e 44 ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c0016668:	83 c4 10             	add    esp,0x10
c001666b:	83 c4 0c             	add    esp,0xc
c001666e:	c3                   	ret    
c001666f:	90                   	nop

c0016670 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016670:	83 ec 1c             	sub    esp,0x1c
c0016673:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001667a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001667f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016683:	8b 04 85 c0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc140]
c001668a:	83 f8 ff             	cmp    eax,0xffffffff
c001668d:	75 35                	jne    c00166c4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001668f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016693:	88 c2                	mov    dl,al
c0016695:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c001669a:	01 d0                	add    eax,edx
c001669c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166a0:	8b 15 a0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ea0
c00166a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166aa:	89 14 85 c0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc140],edx
c00166b1:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c00166b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166ba:	89 14 85 40 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0c0],edx
c00166c1:	eb 19                	jmp    c00166dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00166c3:	90                   	nop
c00166c4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00166c8:	88 c2                	mov    dl,al
c00166ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166ce:	8b 04 85 c0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc140]
c00166d5:	01 d0                	add    eax,edx
c00166d7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166db:	90                   	nop
c00166dc:	83 ec 04             	sub    esp,0x4
c00166df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166e7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00166eb:	50                   	push   eax
c00166ec:	e8 83 e7 fe ff       	call   c0004e74 <f_getlabel>
c00166f1:	83 c4 10             	add    esp,0x10
c00166f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00166fd:	75 09                	jne    c0016708 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00166ff:	b8 00 00 00 00       	mov    eax,0x0
c0016704:	eb 0a                	jmp    c0016710 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016706:	66 90                	xchg   ax,ax
c0016708:	b8 01 00 00 00       	mov    eax,0x1
c001670d:	8d 76 00             	lea    esi,[esi+0x0]
c0016710:	83 c4 1c             	add    esp,0x1c
c0016713:	c3                   	ret    

c0016714 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016714:	57                   	push   edi
c0016715:	83 ec 58             	sub    esp,0x58
c0016718:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016720:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016724:	b8 00 00 00 00       	mov    eax,0x0
c0016729:	b9 0f 00 00 00       	mov    ecx,0xf
c001672e:	fc                   	cld    
c001672f:	89 d7                	mov    edi,edx
c0016731:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016733:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016737:	8b 04 85 c0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc140]
c001673e:	83 f8 ff             	cmp    eax,0xffffffff
c0016741:	75 35                	jne    c0016778 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016743:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016747:	88 c2                	mov    dl,al
c0016749:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c001674e:	01 d0                	add    eax,edx
c0016750:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016754:	8b 15 a0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ea0
c001675a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001675e:	89 14 85 c0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc140],edx
c0016765:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c001676a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001676e:	89 14 85 40 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0c0],edx
c0016775:	eb 19                	jmp    c0016790 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016777:	90                   	nop
c0016778:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001677c:	88 c2                	mov    dl,al
c001677e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016782:	8b 04 85 c0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc140]
c0016789:	01 d0                	add    eax,edx
c001678b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001678f:	90                   	nop
c0016790:	83 ec 08             	sub    esp,0x8
c0016793:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016797:	8d 44 24 18          	lea    eax,[esp+0x18]
c001679b:	50                   	push   eax
c001679c:	e8 3f a0 fe ff       	call   c00007e0 <strcat>
c00167a1:	83 c4 10             	add    esp,0x10
c00167a4:	83 ec 0c             	sub    esp,0xc
c00167a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00167ab:	50                   	push   eax
c00167ac:	e8 14 e8 fe ff       	call   c0004fc5 <f_setlabel>
c00167b1:	83 c4 10             	add    esp,0x10
c00167b4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00167b8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00167bd:	75 09                	jne    c00167c8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00167bf:	b8 00 00 00 00       	mov    eax,0x0
c00167c4:	eb 0a                	jmp    c00167d0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00167c6:	66 90                	xchg   ax,ax
c00167c8:	b8 01 00 00 00       	mov    eax,0x1
c00167cd:	8d 76 00             	lea    esi,[esi+0x0]
c00167d0:	83 c4 58             	add    esp,0x58
c00167d3:	5f                   	pop    edi
c00167d4:	c3                   	ret    
c00167d5:	90                   	nop
c00167d6:	66 90                	xchg   ax,ax

c00167d8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00167d8:	83 ec 2c             	sub    esp,0x2c
c00167db:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167e3:	83 ec 08             	sub    esp,0x8
c00167e6:	68 88 ee 01 c0       	push   0xc001ee88
c00167eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167ef:	e8 0c 9f fe ff       	call   c0000700 <strcmp>
c00167f4:	83 c4 10             	add    esp,0x10
c00167f7:	85 c0                	test   eax,eax
c00167f9:	0f 94 c0             	sete   al
c00167fc:	84 c0                	test   al,al
c00167fe:	74 10                	je     c0016810 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016800:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016808:	e9 b3 00 00 00       	jmp    c00168c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001680d:	8d 76 00             	lea    esi,[esi+0x0]
c0016810:	83 ec 08             	sub    esp,0x8
c0016813:	68 7a ee 01 c0       	push   0xc001ee7a
c0016818:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001681c:	e8 df 9e fe ff       	call   c0000700 <strcmp>
c0016821:	83 c4 10             	add    esp,0x10
c0016824:	85 c0                	test   eax,eax
c0016826:	0f 94 c0             	sete   al
c0016829:	84 c0                	test   al,al
c001682b:	74 0f                	je     c001683c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001682d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016835:	e9 86 00 00 00       	jmp    c00168c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001683a:	66 90                	xchg   ax,ax
c001683c:	83 ec 08             	sub    esp,0x8
c001683f:	68 80 ee 01 c0       	push   0xc001ee80
c0016844:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016848:	e8 b3 9e fe ff       	call   c0000700 <strcmp>
c001684d:	83 c4 10             	add    esp,0x10
c0016850:	85 c0                	test   eax,eax
c0016852:	0f 94 c0             	sete   al
c0016855:	84 c0                	test   al,al
c0016857:	74 0b                	je     c0016864 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016859:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016861:	eb 5d                	jmp    c00168c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016863:	90                   	nop
c0016864:	83 ec 08             	sub    esp,0x8
c0016867:	68 3c cf 01 c0       	push   0xc001cf3c
c001686c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016870:	e8 8b 9e fe ff       	call   c0000700 <strcmp>
c0016875:	83 c4 10             	add    esp,0x10
c0016878:	85 c0                	test   eax,eax
c001687a:	0f 94 c0             	sete   al
c001687d:	84 c0                	test   al,al
c001687f:	74 0b                	je     c001688c <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016881:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016889:	eb 35                	jmp    c00168c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001688b:	90                   	nop
c001688c:	83 ec 08             	sub    esp,0x8
c001688f:	68 86 ee 01 c0       	push   0xc001ee86
c0016894:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016898:	e8 63 9e fe ff       	call   c0000700 <strcmp>
c001689d:	83 c4 10             	add    esp,0x10
c00168a0:	85 c0                	test   eax,eax
c00168a2:	0f 94 c0             	sete   al
c00168a5:	84 c0                	test   al,al
c00168a7:	74 0b                	je     c00168b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00168a9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00168b1:	eb 0d                	jmp    c00168c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00168b3:	90                   	nop
c00168b4:	b8 08 00 00 00       	mov    eax,0x8
c00168b9:	e9 ea 00 00 00       	jmp    c00169a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168be:	66 90                	xchg   ax,ax
c00168c0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00168c7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00168cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168d0:	8b 04 85 c0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc140]
c00168d7:	83 f8 ff             	cmp    eax,0xffffffff
c00168da:	75 34                	jne    c0016910 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00168dc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168e0:	88 c2                	mov    dl,al
c00168e2:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c00168e7:	01 d0                	add    eax,edx
c00168e9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168ed:	8b 15 a0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ea0
c00168f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168f7:	89 14 85 c0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc140],edx
c00168fe:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0016903:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016907:	89 14 85 40 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0c0],edx
c001690e:	eb 18                	jmp    c0016928 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016910:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016914:	88 c2                	mov    dl,al
c0016916:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001691a:	8b 04 85 c0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc140]
c0016921:	01 d0                	add    eax,edx
c0016923:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016927:	90                   	nop
c0016928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001692c:	88 04 24             	mov    BYTE PTR [esp],al
c001692f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016933:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016937:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001693f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016944:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001694c:	83 ec 0c             	sub    esp,0xc
c001694f:	68 00 20 00 00       	push   0x2000
c0016954:	e8 14 15 ff ff       	call   c0007e6d <malloc>
c0016959:	83 c4 10             	add    esp,0x10
c001695c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016960:	68 00 20 00 00       	push   0x2000
c0016965:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016969:	8d 44 24 08          	lea    eax,[esp+0x8]
c001696d:	50                   	push   eax
c001696e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016972:	50                   	push   eax
c0016973:	e8 3d e9 fe ff       	call   c00052b5 <f_mkfs>
c0016978:	83 c4 10             	add    esp,0x10
c001697b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001697f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016984:	75 0a                	jne    c0016990 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016986:	b8 00 00 00 00       	mov    eax,0x0
c001698b:	eb 1b                	jmp    c00169a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001698d:	8d 76 00             	lea    esi,[esi+0x0]
c0016990:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016995:	75 09                	jne    c00169a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016997:	b8 09 00 00 00       	mov    eax,0x9
c001699c:	eb 0a                	jmp    c00169a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001699e:	66 90                	xchg   ax,ax
c00169a0:	b8 01 00 00 00       	mov    eax,0x1
c00169a5:	8d 76 00             	lea    esi,[esi+0x0]
c00169a8:	83 c4 2c             	add    esp,0x2c
c00169ab:	c3                   	ret    

c00169ac <FAT::tryMount(LogicalDisk*, int)>:
c00169ac:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00169b2:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c00169b7:	83 f8 14             	cmp    eax,0x14
c00169ba:	75 18                	jne    c00169d4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00169bc:	83 ec 0c             	sub    esp,0xc
c00169bf:	68 8c ee 01 c0       	push   0xc001ee8c
c00169c4:	e8 82 9d ff ff       	call   c001074b <Krnl::panic(char const*)>
c00169c9:	83 c4 10             	add    esp,0x10
c00169cc:	b0 00                	mov    al,0x0
c00169ce:	e9 e9 01 00 00       	jmp    c0016bbc <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169d3:	90                   	nop
c00169d4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00169db:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00169e1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169e7:	3d 00 02 00 00       	cmp    eax,0x200
c00169ec:	74 0a                	je     c00169f8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00169ee:	b0 00                	mov    al,0x0
c00169f0:	e9 c7 01 00 00       	jmp    c0016bbc <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169f5:	8d 76 00             	lea    esi,[esi+0x0]
c00169f8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016a00:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a07:	8b 04 85 c0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc140]
c0016a0e:	83 f8 ff             	cmp    eax,0xffffffff
c0016a11:	74 09                	je     c0016a1c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016a13:	b0 01                	mov    al,0x1
c0016a15:	e9 a2 01 00 00       	jmp    c0016bbc <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a1a:	66 90                	xchg   ax,ax
c0016a1c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016a26:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016a2e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016a35:	88 c2                	mov    dl,al
c0016a37:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0016a3c:	01 d0                	add    eax,edx
c0016a3e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016a45:	8b 15 a0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ea0
c0016a4b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a52:	89 14 85 c0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc140],edx
c0016a59:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0016a5e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a65:	89 14 85 40 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0c0],edx
c0016a6c:	83 ec 0c             	sub    esp,0xc
c0016a6f:	68 34 02 00 00       	push   0x234
c0016a74:	e8 f4 13 ff ff       	call   c0007e6d <malloc>
c0016a79:	83 c4 10             	add    esp,0x10
c0016a7c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a83:	83 ec 04             	sub    esp,0x4
c0016a86:	6a 00                	push   0x0
c0016a88:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a8f:	50                   	push   eax
c0016a90:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a97:	e8 3f d0 fe ff       	call   c0003adb <f_mount>
c0016a9c:	83 c4 10             	add    esp,0x10
c0016a9f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016aa6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016aae:	74 1c                	je     c0016acc <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016ab0:	83 ec 0c             	sub    esp,0xc
c0016ab3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016aba:	e8 ce 13 ff ff       	call   c0007e8d <rfree>
c0016abf:	83 c4 10             	add    esp,0x10
c0016ac2:	b0 00                	mov    al,0x0
c0016ac4:	e9 f3 00 00 00       	jmp    c0016bbc <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0016acc:	83 ec 04             	sub    esp,0x4
c0016acf:	68 00 01 00 00       	push   0x100
c0016ad4:	6a 00                	push   0x0
c0016ad6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016add:	50                   	push   eax
c0016ade:	e8 0d 9a fe ff       	call   c00004f0 <memset>
c0016ae3:	83 c4 10             	add    esp,0x10
c0016ae6:	83 ec 08             	sub    esp,0x8
c0016ae9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016af0:	50                   	push   eax
c0016af1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016af8:	50                   	push   eax
c0016af9:	e8 e2 9c fe ff       	call   c00007e0 <strcat>
c0016afe:	83 c4 10             	add    esp,0x10
c0016b01:	83 ec 08             	sub    esp,0x8
c0016b04:	68 9a ee 01 c0       	push   0xc001ee9a
c0016b09:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016b10:	50                   	push   eax
c0016b11:	e8 ca 9c fe ff       	call   c00007e0 <strcat>
c0016b16:	83 c4 10             	add    esp,0x10
c0016b19:	83 ec 04             	sub    esp,0x4
c0016b1c:	6a 01                	push   0x1
c0016b1e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016b25:	50                   	push   eax
c0016b26:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b2a:	50                   	push   eax
c0016b2b:	e8 0d d0 fe ff       	call   c0003b3d <f_open>
c0016b30:	83 c4 10             	add    esp,0x10
c0016b33:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016b3a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016b41:	85 c0                	test   eax,eax
c0016b43:	74 0b                	je     c0016b50 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016b45:	78 31                	js     c0016b78 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b47:	83 e8 04             	sub    eax,0x4
c0016b4a:	83 f8 01             	cmp    eax,0x1
c0016b4d:	77 29                	ja     c0016b78 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b4f:	90                   	nop
c0016b50:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b58:	83 ec 0c             	sub    esp,0xc
c0016b5b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b5f:	50                   	push   eax
c0016b60:	e8 8b d7 fe ff       	call   c00042f0 <f_close>
c0016b65:	83 c4 10             	add    esp,0x10
c0016b68:	90                   	nop
c0016b69:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b71:	74 41                	je     c0016bb4 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b73:	eb 33                	jmp    c0016ba8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b75:	8d 76 00             	lea    esi,[esi+0x0]
c0016b78:	83 ec 0c             	sub    esp,0xc
c0016b7b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b82:	e8 06 13 ff ff       	call   c0007e8d <rfree>
c0016b87:	83 c4 10             	add    esp,0x10
c0016b8a:	83 ec 04             	sub    esp,0x4
c0016b8d:	6a 00                	push   0x0
c0016b8f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b96:	50                   	push   eax
c0016b97:	6a 00                	push   0x0
c0016b99:	e8 3d cf fe ff       	call   c0003adb <f_mount>
c0016b9e:	83 c4 10             	add    esp,0x10
c0016ba1:	b0 00                	mov    al,0x0
c0016ba3:	eb 17                	jmp    c0016bbc <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ba8:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0016bad:	40                   	inc    eax
c0016bae:	a3 a0 3e 02 c0       	mov    ds:0xc0023ea0,eax
c0016bb3:	90                   	nop
c0016bb4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016bbb:	90                   	nop
c0016bbc:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016bc2:	c3                   	ret    
c0016bc3:	90                   	nop

c0016bc4 <FAT::allocateSwapfile(char const*, int)>:
c0016bc4:	55                   	push   ebp
c0016bc5:	57                   	push   edi
c0016bc6:	56                   	push   esi
c0016bc7:	53                   	push   ebx
c0016bc8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016bce:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016bd9:	83 ec 0c             	sub    esp,0xc
c0016bdc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016be3:	e8 85 12 ff ff       	call   c0007e6d <malloc>
c0016be8:	83 c4 10             	add    esp,0x10
c0016beb:	89 c7                	mov    edi,eax
c0016bed:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c0016bf2:	83 ec 04             	sub    esp,0x4
c0016bf5:	50                   	push   eax
c0016bf6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016bfd:	57                   	push   edi
c0016bfe:	e8 6f 45 ff ff       	call   c000b172 <File::File(char const*, Process*)>
c0016c03:	83 c4 10             	add    esp,0x10
c0016c06:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016c0d:	83 ec 04             	sub    esp,0x4
c0016c10:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016c14:	50                   	push   eax
c0016c15:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c19:	50                   	push   eax
c0016c1a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c21:	e8 b8 48 ff ff       	call   c000b4de <File::stat(unsigned long long*, bool*)>
c0016c26:	83 c4 10             	add    esp,0x10
c0016c29:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c30:	c1 e0 14             	shl    eax,0x14
c0016c33:	89 c7                	mov    edi,eax
c0016c35:	89 c5                	mov    ebp,eax
c0016c37:	c1 fd 1f             	sar    ebp,0x1f
c0016c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c42:	89 f9                	mov    ecx,edi
c0016c44:	31 c1                	xor    ecx,eax
c0016c46:	89 cb                	mov    ebx,ecx
c0016c48:	89 e9                	mov    ecx,ebp
c0016c4a:	31 d1                	xor    ecx,edx
c0016c4c:	89 ce                	mov    esi,ecx
c0016c4e:	89 f0                	mov    eax,esi
c0016c50:	09 d8                	or     eax,ebx
c0016c52:	0f 84 9c 00 00 00    	je     c0016cf4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c58:	83 ec 0c             	sub    esp,0xc
c0016c5b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c62:	e8 43 47 ff ff       	call   c000b3aa <File::unlink()>
c0016c67:	83 c4 10             	add    esp,0x10
c0016c6a:	83 ec 08             	sub    esp,0x8
c0016c6d:	6a 12                	push   0x12
c0016c6f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c76:	e8 b7 45 ff ff       	call   c000b232 <File::open(FileOpenMode)>
c0016c7b:	83 c4 10             	add    esp,0x10
c0016c7e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c85:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c8b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c92:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c99:	c1 e0 14             	shl    eax,0x14
c0016c9c:	83 ec 04             	sub    esp,0x4
c0016c9f:	6a 01                	push   0x1
c0016ca1:	50                   	push   eax
c0016ca2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016ca9:	e8 a7 e4 fe ff       	call   c0005155 <f_expand>
c0016cae:	83 c4 10             	add    esp,0x10
c0016cb1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cba:	83 c0 10             	add    eax,0x10
c0016cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cbf:	83 ec 0c             	sub    esp,0xc
c0016cc2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016cc6:	52                   	push   edx
c0016cc7:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016ccb:	52                   	push   edx
c0016ccc:	6a 00                	push   0x0
c0016cce:	68 00 04 00 00       	push   0x400
c0016cd3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cda:	ff d0                	call   eax
c0016cdc:	83 c4 20             	add    esp,0x20
c0016cdf:	83 ec 0c             	sub    esp,0xc
c0016ce2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ce9:	e8 a2 45 ff ff       	call   c000b290 <File::close()>
c0016cee:	83 c4 10             	add    esp,0x10
c0016cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0016cf4:	83 ec 08             	sub    esp,0x8
c0016cf7:	6a 01                	push   0x1
c0016cf9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d00:	e8 2d 45 ff ff       	call   c000b232 <File::open(FileOpenMode)>
c0016d05:	83 c4 10             	add    esp,0x10
c0016d08:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d11:	83 c0 0c             	add    eax,0xc
c0016d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d16:	83 ec 0c             	sub    esp,0xc
c0016d19:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016d1d:	52                   	push   edx
c0016d1e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016d22:	52                   	push   edx
c0016d23:	6a 00                	push   0x0
c0016d25:	6a 04                	push   0x4
c0016d27:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016d2e:	ff d0                	call   eax
c0016d30:	83 c4 20             	add    esp,0x20
c0016d33:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d3a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016d40:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016d47:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016d4e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d51:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d58:	83 ec 0c             	sub    esp,0xc
c0016d5b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d62:	e8 29 45 ff ff       	call   c000b290 <File::close()>
c0016d67:	83 c4 10             	add    esp,0x10
c0016d6a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d71:	ba 00 00 00 00       	mov    edx,0x0
c0016d76:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d7c:	5b                   	pop    ebx
c0016d7d:	5e                   	pop    esi
c0016d7e:	5f                   	pop    edi
c0016d7f:	5d                   	pop    ebp
c0016d80:	c3                   	ret    
c0016d81:	90                   	nop
c0016d82:	66 90                	xchg   ax,ax

c0016d84 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d84:	57                   	push   edi
c0016d85:	56                   	push   esi
c0016d86:	53                   	push   ebx
c0016d87:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d8d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d95:	74 0d                	je     c0016da4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d97:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d9f:	75 0f                	jne    c0016db0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016da1:	8d 76 00             	lea    esi,[esi+0x0]
c0016da4:	b8 04 00 00 00       	mov    eax,0x4
c0016da9:	e9 36 01 00 00       	jmp    c0016ee4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016dae:	66 90                	xchg   ax,ax
c0016db0:	83 ec 08             	sub    esp,0x8
c0016db3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016dba:	50                   	push   eax
c0016dbb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016dc2:	e8 ec d7 fe ff       	call   c00045b3 <f_readdir>
c0016dc7:	83 c4 10             	add    esp,0x10
c0016dca:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016dd1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016dd8:	83 ec 0c             	sub    esp,0xc
c0016ddb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016de2:	83 c0 16             	add    eax,0x16
c0016de5:	50                   	push   eax
c0016de6:	e8 75 97 fe ff       	call   c0000560 <strlen>
c0016deb:	83 c4 10             	add    esp,0x10
c0016dee:	ba 00 00 00 00       	mov    edx,0x0
c0016df3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016df7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016dfb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016e02:	25 ff 00 00 00       	and    eax,0xff
c0016e07:	83 e0 10             	and    eax,0x10
c0016e0a:	74 08                	je     c0016e14 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016e0c:	b8 02 00 00 00       	mov    eax,0x2
c0016e11:	eb 09                	jmp    c0016e1c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016e13:	90                   	nop
c0016e14:	b8 01 00 00 00       	mov    eax,0x1
c0016e19:	8d 76 00             	lea    esi,[esi+0x0]
c0016e1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e20:	83 ec 08             	sub    esp,0x8
c0016e23:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016e2a:	83 c0 16             	add    eax,0x16
c0016e2d:	50                   	push   eax
c0016e2e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e32:	83 c0 10             	add    eax,0x10
c0016e35:	50                   	push   eax
c0016e36:	e8 e5 97 fe ff       	call   c0000620 <strcpy>
c0016e3b:	83 c4 10             	add    esp,0x10
c0016e3e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016e45:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016e4c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e50:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e57:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e5e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e65:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e6c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e73:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e7a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e81:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e88:	89 c6                	mov    esi,eax
c0016e8a:	89 d7                	mov    edi,edx
c0016e8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e8e:	89 c8                	mov    eax,ecx
c0016e90:	89 fa                	mov    edx,edi
c0016e92:	89 f3                	mov    ebx,esi
c0016e94:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e9b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016ea2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016ea9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016eb0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016eb6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016ebd:	84 c0                	test   al,al
c0016ebf:	75 07                	jne    c0016ec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016ec1:	b8 07 00 00 00       	mov    eax,0x7
c0016ec6:	eb 1c                	jmp    c0016ee4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ec8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016ecf:	85 c0                	test   eax,eax
c0016ed1:	75 09                	jne    c0016edc <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016ed3:	b8 00 00 00 00       	mov    eax,0x0
c0016ed8:	eb 0a                	jmp    c0016ee4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016eda:	66 90                	xchg   ax,ax
c0016edc:	b8 01 00 00 00       	mov    eax,0x1
c0016ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee4:	81 c4 50 02 00 00    	add    esp,0x250
c0016eea:	5b                   	pop    ebx
c0016eeb:	5e                   	pop    esi
c0016eec:	5f                   	pop    edi
c0016eed:	c3                   	ret    
c0016eee:	66 90                	xchg   ax,ax

c0016ef0 <FAT::read(void*, unsigned long, void*, int*)>:
c0016ef0:	83 ec 1c             	sub    esp,0x1c
c0016ef3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ef8:	74 0a                	je     c0016f04 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016efa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016eff:	75 0b                	jne    c0016f0c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016f01:	8d 76 00             	lea    esi,[esi+0x0]
c0016f04:	b8 04 00 00 00       	mov    eax,0x4
c0016f09:	eb 41                	jmp    c0016f4c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f0b:	90                   	nop
c0016f0c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f10:	50                   	push   eax
c0016f11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f1d:	e8 e6 ce fe ff       	call   c0003e08 <f_read>
c0016f22:	83 c4 10             	add    esp,0x10
c0016f25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f2d:	89 c2                	mov    edx,eax
c0016f2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f33:	89 10                	mov    DWORD PTR [eax],edx
c0016f35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f39:	85 c0                	test   eax,eax
c0016f3b:	75 07                	jne    c0016f44 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016f3d:	b8 00 00 00 00       	mov    eax,0x0
c0016f42:	eb 08                	jmp    c0016f4c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f44:	b8 01 00 00 00       	mov    eax,0x1
c0016f49:	8d 76 00             	lea    esi,[esi+0x0]
c0016f4c:	83 c4 1c             	add    esp,0x1c
c0016f4f:	c3                   	ret    

c0016f50 <FAT::write(void*, unsigned long, void*, int*)>:
c0016f50:	83 ec 1c             	sub    esp,0x1c
c0016f53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f58:	74 0a                	je     c0016f64 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f5a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f5f:	75 0b                	jne    c0016f6c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f61:	8d 76 00             	lea    esi,[esi+0x0]
c0016f64:	b8 04 00 00 00       	mov    eax,0x4
c0016f69:	eb 41                	jmp    c0016fac <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f6b:	90                   	nop
c0016f6c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f70:	50                   	push   eax
c0016f71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f7d:	e8 85 d0 fe ff       	call   c0004007 <f_write>
c0016f82:	83 c4 10             	add    esp,0x10
c0016f85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f8d:	89 c2                	mov    edx,eax
c0016f8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f93:	89 10                	mov    DWORD PTR [eax],edx
c0016f95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f99:	85 c0                	test   eax,eax
c0016f9b:	75 07                	jne    c0016fa4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f9d:	b8 00 00 00 00       	mov    eax,0x0
c0016fa2:	eb 08                	jmp    c0016fac <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016fa4:	b8 01 00 00 00       	mov    eax,0x1
c0016fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fac:	83 c4 1c             	add    esp,0x1c
c0016faf:	c3                   	ret    

c0016fb0 <FAT::close(void*)>:
c0016fb0:	83 ec 1c             	sub    esp,0x1c
c0016fb3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fb8:	75 0a                	jne    c0016fc4 <FAT::close(void*)+0x14>
c0016fba:	b8 04 00 00 00       	mov    eax,0x4
c0016fbf:	eb 3f                	jmp    c0017000 <FAT::close(void*)+0x50>
c0016fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fc4:	83 ec 0c             	sub    esp,0xc
c0016fc7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fcb:	e8 20 d3 fe ff       	call   c00042f0 <f_close>
c0016fd0:	83 c4 10             	add    esp,0x10
c0016fd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fd7:	83 ec 0c             	sub    esp,0xc
c0016fda:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fde:	e8 9a 0e ff ff       	call   c0007e7d <free>
c0016fe3:	83 c4 10             	add    esp,0x10
c0016fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fea:	85 c0                	test   eax,eax
c0016fec:	75 0a                	jne    c0016ff8 <FAT::close(void*)+0x48>
c0016fee:	b8 00 00 00 00       	mov    eax,0x0
c0016ff3:	eb 0b                	jmp    c0017000 <FAT::close(void*)+0x50>
c0016ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff8:	b8 01 00 00 00       	mov    eax,0x1
c0016ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0017000:	83 c4 1c             	add    esp,0x1c
c0017003:	c3                   	ret    

c0017004 <FAT::closeDir(void*)>:
c0017004:	83 ec 1c             	sub    esp,0x1c
c0017007:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001700c:	75 0a                	jne    c0017018 <FAT::closeDir(void*)+0x14>
c001700e:	b8 04 00 00 00       	mov    eax,0x4
c0017013:	eb 3f                	jmp    c0017054 <FAT::closeDir(void*)+0x50>
c0017015:	8d 76 00             	lea    esi,[esi+0x0]
c0017018:	83 ec 0c             	sub    esp,0xc
c001701b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001701f:	e8 6d d5 fe ff       	call   c0004591 <f_closedir>
c0017024:	83 c4 10             	add    esp,0x10
c0017027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001702b:	83 ec 0c             	sub    esp,0xc
c001702e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017032:	e8 46 0e ff ff       	call   c0007e7d <free>
c0017037:	83 c4 10             	add    esp,0x10
c001703a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001703e:	85 c0                	test   eax,eax
c0017040:	75 0a                	jne    c001704c <FAT::closeDir(void*)+0x48>
c0017042:	b8 00 00 00 00       	mov    eax,0x0
c0017047:	eb 0b                	jmp    c0017054 <FAT::closeDir(void*)+0x50>
c0017049:	8d 76 00             	lea    esi,[esi+0x0]
c001704c:	b8 01 00 00 00       	mov    eax,0x1
c0017051:	8d 76 00             	lea    esi,[esi+0x0]
c0017054:	83 c4 1c             	add    esp,0x1c
c0017057:	c3                   	ret    

c0017058 <FAT::seek(void*, unsigned long long)>:
c0017058:	83 ec 2c             	sub    esp,0x2c
c001705b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001705f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017063:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001706b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017070:	75 0a                	jne    c001707c <FAT::seek(void*, unsigned long long)+0x24>
c0017072:	b8 04 00 00 00       	mov    eax,0x4
c0017077:	eb 33                	jmp    c00170ac <FAT::seek(void*, unsigned long long)+0x54>
c0017079:	8d 76 00             	lea    esi,[esi+0x0]
c001707c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017080:	83 ec 08             	sub    esp,0x8
c0017083:	50                   	push   eax
c0017084:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017088:	e8 92 d2 fe ff       	call   c000431f <f_lseek>
c001708d:	83 c4 10             	add    esp,0x10
c0017090:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017094:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017098:	85 c0                	test   eax,eax
c001709a:	75 08                	jne    c00170a4 <FAT::seek(void*, unsigned long long)+0x4c>
c001709c:	b8 00 00 00 00       	mov    eax,0x0
c00170a1:	eb 09                	jmp    c00170ac <FAT::seek(void*, unsigned long long)+0x54>
c00170a3:	90                   	nop
c00170a4:	b8 01 00 00 00       	mov    eax,0x1
c00170a9:	8d 76 00             	lea    esi,[esi+0x0]
c00170ac:	83 c4 2c             	add    esp,0x2c
c00170af:	c3                   	ret    

c00170b0 <fatWrapperReadDisk>:
c00170b0:	53                   	push   ebx
c00170b1:	83 ec 18             	sub    esp,0x18
c00170b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170bc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170c0:	25 ff 00 00 00       	and    eax,0xff
c00170c5:	8b 0c 85 80 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd180]
c00170cc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170d4:	ba 00 00 00 00       	mov    edx,0x0
c00170d9:	83 ec 0c             	sub    esp,0xc
c00170dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170e0:	53                   	push   ebx
c00170e1:	52                   	push   edx
c00170e2:	50                   	push   eax
c00170e3:	51                   	push   ecx
c00170e4:	e8 fb 61 ff ff       	call   c000d2e4 <LogicalDisk::read(unsigned long long, int, void*)>
c00170e9:	83 c4 20             	add    esp,0x20
c00170ec:	83 c4 18             	add    esp,0x18
c00170ef:	5b                   	pop    ebx
c00170f0:	c3                   	ret    
c00170f1:	8d 76 00             	lea    esi,[esi+0x0]

c00170f4 <fatWrapperWriteDisk>:
c00170f4:	53                   	push   ebx
c00170f5:	83 ec 18             	sub    esp,0x18
c00170f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017100:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017104:	25 ff 00 00 00       	and    eax,0xff
c0017109:	8b 0c 85 80 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd180]
c0017110:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017114:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017118:	ba 00 00 00 00       	mov    edx,0x0
c001711d:	83 ec 0c             	sub    esp,0xc
c0017120:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017124:	53                   	push   ebx
c0017125:	52                   	push   edx
c0017126:	50                   	push   eax
c0017127:	51                   	push   ecx
c0017128:	e8 23 62 ff ff       	call   c000d350 <LogicalDisk::write(unsigned long long, int, void*)>
c001712d:	83 c4 20             	add    esp,0x20
c0017130:	83 c4 18             	add    esp,0x18
c0017133:	5b                   	pop    ebx
c0017134:	c3                   	ret    
c0017135:	8d 76 00             	lea    esi,[esi+0x0]

c0017138 <fatWrapperIoctl>:
c0017138:	53                   	push   ebx
c0017139:	83 ec 28             	sub    esp,0x28
c001713c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017140:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017144:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017148:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001714c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017151:	75 35                	jne    c0017188 <fatWrapperIoctl+0x50>
c0017153:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017157:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001715b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001715f:	25 ff 00 00 00       	and    eax,0xff
c0017164:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c001716b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017171:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017177:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001717b:	66 89 02             	mov    WORD PTR [edx],ax
c001717e:	b8 00 00 00 00       	mov    eax,0x0
c0017183:	e9 c4 00 00 00       	jmp    c001724c <fatWrapperIoctl+0x114>
c0017188:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001718d:	75 75                	jne    c0017204 <fatWrapperIoctl+0xcc>
c001718f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017193:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017197:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001719b:	25 ff 00 00 00       	and    eax,0xff
c00171a0:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c00171a7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00171ad:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00171b3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00171b9:	89 c8                	mov    eax,ecx
c00171bb:	89 da                	mov    edx,ebx
c00171bd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00171c1:	c1 e0 0a             	shl    eax,0xa
c00171c4:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171c8:	81 e1 ff 00 00 00    	and    ecx,0xff
c00171ce:	8b 0c 8d 80 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd180]
c00171d5:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00171db:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00171e1:	89 cb                	mov    ebx,ecx
c00171e3:	c1 fb 1f             	sar    ebx,0x1f
c00171e6:	53                   	push   ebx
c00171e7:	51                   	push   ecx
c00171e8:	52                   	push   edx
c00171e9:	50                   	push   eax
c00171ea:	e8 51 4f 00 00       	call   c001c140 <__udivdi3>
c00171ef:	83 c4 10             	add    esp,0x10
c00171f2:	89 c2                	mov    edx,eax
c00171f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171f8:	89 10                	mov    DWORD PTR [eax],edx
c00171fa:	b8 00 00 00 00       	mov    eax,0x0
c00171ff:	eb 4b                	jmp    c001724c <fatWrapperIoctl+0x114>
c0017201:	8d 76 00             	lea    esi,[esi+0x0]
c0017204:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017209:	75 09                	jne    c0017214 <fatWrapperIoctl+0xdc>
c001720b:	b8 00 00 00 00       	mov    eax,0x0
c0017210:	eb 3a                	jmp    c001724c <fatWrapperIoctl+0x114>
c0017212:	66 90                	xchg   ax,ax
c0017214:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017219:	75 19                	jne    c0017234 <fatWrapperIoctl+0xfc>
c001721b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001721f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017223:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017227:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001722d:	b8 00 00 00 00       	mov    eax,0x0
c0017232:	eb 18                	jmp    c001724c <fatWrapperIoctl+0x114>
c0017234:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017239:	75 09                	jne    c0017244 <fatWrapperIoctl+0x10c>
c001723b:	b8 00 00 00 00       	mov    eax,0x0
c0017240:	eb 0a                	jmp    c001724c <fatWrapperIoctl+0x114>
c0017242:	66 90                	xchg   ax,ax
c0017244:	b8 04 00 00 00       	mov    eax,0x4
c0017249:	8d 76 00             	lea    esi,[esi+0x0]
c001724c:	83 c4 28             	add    esp,0x28
c001724f:	5b                   	pop    ebx
c0017250:	c3                   	ret    
c0017251:	90                   	nop
c0017252:	66 90                	xchg   ax,ax

c0017254 <FAT::FAT()>:
c0017254:	83 ec 1c             	sub    esp,0x1c
c0017257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001725b:	83 ec 0c             	sub    esp,0xc
c001725e:	50                   	push   eax
c001725f:	e8 ba 3c ff ff       	call   c000af1e <Filesystem::Filesystem()>
c0017264:	83 c4 10             	add    esp,0x10
c0017267:	ba b0 ee 01 c0       	mov    edx,0xc001eeb0
c001726c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017270:	89 10                	mov    DWORD PTR [eax],edx
c0017272:	c7 05 a0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea0,0x0
c001727c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017284:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017289:	7f 15                	jg     c00172a0 <FAT::FAT()+0x4c>
c001728b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001728f:	c7 04 85 c0 3e 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc140],0xffffffff
c001729a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001729e:	eb e4                	jmp    c0017284 <FAT::FAT()+0x30>
c00172a0:	90                   	nop
c00172a1:	83 c4 1c             	add    esp,0x1c
c00172a4:	c3                   	ret    
c00172a5:	90                   	nop
c00172a6:	66 90                	xchg   ax,ax

c00172a8 <FAT::fixFilepath(char*)>:
c00172a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172ac:	8a 00                	mov    al,BYTE PTR [eax]
c00172ae:	3c 40                	cmp    al,0x40
c00172b0:	7e 2e                	jle    c00172e0 <FAT::fixFilepath(char*)+0x38>
c00172b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172b6:	8a 00                	mov    al,BYTE PTR [eax]
c00172b8:	83 e8 41             	sub    eax,0x41
c00172bb:	88 c2                	mov    dl,al
c00172bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172c1:	88 10                	mov    BYTE PTR [eax],dl
c00172c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172c7:	8a 00                	mov    al,BYTE PTR [eax]
c00172c9:	0f be c0             	movsx  eax,al
c00172cc:	8b 04 85 c0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc140]
c00172d3:	83 c0 30             	add    eax,0x30
c00172d6:	88 c2                	mov    dl,al
c00172d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172dc:	88 10                	mov    BYTE PTR [eax],dl
c00172de:	66 90                	xchg   ax,ax
c00172e0:	90                   	nop
c00172e1:	c3                   	ret    
c00172e2:	66 90                	xchg   ax,ax

c00172e4 <FAT::open(char const*, void**, FileOpenMode)>:
c00172e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172f2:	74 0c                	je     c0017300 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00172f4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172fc:	75 0e                	jne    c001730c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00172fe:	66 90                	xchg   ax,ax
c0017300:	b8 04 00 00 00       	mov    eax,0x4
c0017305:	e9 0a 01 00 00       	jmp    c0017414 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001730a:	66 90                	xchg   ax,ax
c001730c:	83 ec 08             	sub    esp,0x8
c001730f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017316:	8d 44 24 14          	lea    eax,[esp+0x14]
c001731a:	50                   	push   eax
c001731b:	e8 00 93 fe ff       	call   c0000620 <strcpy>
c0017320:	83 c4 10             	add    esp,0x10
c0017323:	83 ec 08             	sub    esp,0x8
c0017326:	8d 44 24 10          	lea    eax,[esp+0x10]
c001732a:	50                   	push   eax
c001732b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017332:	e8 71 ff ff ff       	call   c00172a8 <FAT::fixFilepath(char*)>
c0017337:	83 c4 10             	add    esp,0x10
c001733a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017342:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017349:	83 e0 01             	and    eax,0x1
c001734c:	74 0a                	je     c0017358 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001734e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0017356:	66 90                	xchg   ax,ax
c0017358:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001735f:	83 e0 04             	and    eax,0x4
c0017362:	74 10                	je     c0017374 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017364:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001736c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017374:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001737b:	83 e0 02             	and    eax,0x2
c001737e:	74 08                	je     c0017388 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017380:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017388:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001738f:	83 e0 08             	and    eax,0x8
c0017392:	74 08                	je     c001739c <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017394:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001739c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00173a3:	83 e0 10             	and    eax,0x10
c00173a6:	74 08                	je     c00173b0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00173a8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00173b0:	83 ec 0c             	sub    esp,0xc
c00173b3:	68 28 02 00 00       	push   0x228
c00173b8:	e8 b0 0a ff ff       	call   c0007e6d <malloc>
c00173bd:	83 c4 10             	add    esp,0x10
c00173c0:	89 c2                	mov    edx,eax
c00173c2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173c9:	89 10                	mov    DWORD PTR [eax],edx
c00173cb:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00173d2:	31 d2                	xor    edx,edx
c00173d4:	88 c2                	mov    dl,al
c00173d6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00173df:	83 ec 04             	sub    esp,0x4
c00173e2:	52                   	push   edx
c00173e3:	8d 54 24 10          	lea    edx,[esp+0x10]
c00173e7:	52                   	push   edx
c00173e8:	50                   	push   eax
c00173e9:	e8 4f c7 fe ff       	call   c0003b3d <f_open>
c00173ee:	83 c4 10             	add    esp,0x10
c00173f1:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00173f8:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017400:	74 0a                	je     c001740c <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0017402:	b8 01 00 00 00       	mov    eax,0x1
c0017407:	eb 0b                	jmp    c0017414 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017409:	8d 76 00             	lea    esi,[esi+0x0]
c001740c:	b8 00 00 00 00       	mov    eax,0x0
c0017411:	8d 76 00             	lea    esi,[esi+0x0]
c0017414:	81 c4 1c 01 00 00    	add    esp,0x11c
c001741a:	c3                   	ret    
c001741b:	90                   	nop

c001741c <FAT::openDir(char const*, void**)>:
c001741c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017422:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001742a:	74 0c                	je     c0017438 <FAT::openDir(char const*, void**)+0x1c>
c001742c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017434:	75 0e                	jne    c0017444 <FAT::openDir(char const*, void**)+0x28>
c0017436:	66 90                	xchg   ax,ax
c0017438:	b8 04 00 00 00       	mov    eax,0x4
c001743d:	e9 82 00 00 00       	jmp    c00174c4 <FAT::openDir(char const*, void**)+0xa8>
c0017442:	66 90                	xchg   ax,ax
c0017444:	83 ec 08             	sub    esp,0x8
c0017447:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001744e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017452:	50                   	push   eax
c0017453:	e8 c8 91 fe ff       	call   c0000620 <strcpy>
c0017458:	83 c4 10             	add    esp,0x10
c001745b:	83 ec 08             	sub    esp,0x8
c001745e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017462:	50                   	push   eax
c0017463:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001746a:	e8 39 fe ff ff       	call   c00172a8 <FAT::fixFilepath(char*)>
c001746f:	83 c4 10             	add    esp,0x10
c0017472:	83 ec 0c             	sub    esp,0xc
c0017475:	6a 30                	push   0x30
c0017477:	e8 f1 09 ff ff       	call   c0007e6d <malloc>
c001747c:	83 c4 10             	add    esp,0x10
c001747f:	89 c2                	mov    edx,eax
c0017481:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017488:	89 10                	mov    DWORD PTR [eax],edx
c001748a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017491:	8b 00                	mov    eax,DWORD PTR [eax]
c0017493:	83 ec 08             	sub    esp,0x8
c0017496:	8d 54 24 14          	lea    edx,[esp+0x14]
c001749a:	52                   	push   edx
c001749b:	50                   	push   eax
c001749c:	e8 25 d0 fe ff       	call   c00044c6 <f_opendir>
c00174a1:	83 c4 10             	add    esp,0x10
c00174a4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00174ab:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00174b3:	74 07                	je     c00174bc <FAT::openDir(char const*, void**)+0xa0>
c00174b5:	b8 01 00 00 00       	mov    eax,0x1
c00174ba:	eb 08                	jmp    c00174c4 <FAT::openDir(char const*, void**)+0xa8>
c00174bc:	b8 00 00 00 00       	mov    eax,0x0
c00174c1:	8d 76 00             	lea    esi,[esi+0x0]
c00174c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174ca:	c3                   	ret    
c00174cb:	90                   	nop

c00174cc <FAT::stat(char const*, unsigned long long*, bool*)>:
c00174cc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00174d2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00174da:	75 0c                	jne    c00174e8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00174dc:	b8 04 00 00 00       	mov    eax,0x4
c00174e1:	e9 d6 00 00 00       	jmp    c00175bc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174e6:	66 90                	xchg   ax,ax
c00174e8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00174f0:	75 0a                	jne    c00174fc <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00174f2:	b8 04 00 00 00       	mov    eax,0x4
c00174f7:	e9 c0 00 00 00       	jmp    c00175bc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174fc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017504:	75 0a                	jne    c0017510 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017506:	b8 04 00 00 00       	mov    eax,0x4
c001750b:	e9 ac 00 00 00       	jmp    c00175bc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017510:	83 ec 08             	sub    esp,0x8
c0017513:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001751a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017521:	50                   	push   eax
c0017522:	e8 f9 90 fe ff       	call   c0000620 <strcpy>
c0017527:	83 c4 10             	add    esp,0x10
c001752a:	83 ec 08             	sub    esp,0x8
c001752d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017534:	50                   	push   eax
c0017535:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001753c:	e8 67 fd ff ff       	call   c00172a8 <FAT::fixFilepath(char*)>
c0017541:	83 c4 10             	add    esp,0x10
c0017544:	83 ec 08             	sub    esp,0x8
c0017547:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001754b:	50                   	push   eax
c001754c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017553:	50                   	push   eax
c0017554:	e8 ec d0 fe ff       	call   c0004645 <f_stat>
c0017559:	83 c4 10             	add    esp,0x10
c001755c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017563:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001756a:	85 c0                	test   eax,eax
c001756c:	74 0a                	je     c0017578 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001756e:	83 f8 04             	cmp    eax,0x4
c0017571:	74 39                	je     c00175ac <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017573:	eb 3f                	jmp    c00175b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017575:	8d 76 00             	lea    esi,[esi+0x0]
c0017578:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001757c:	25 ff 00 00 00       	and    eax,0xff
c0017581:	83 e0 10             	and    eax,0x10
c0017584:	0f 95 c2             	setne  dl
c0017587:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001758e:	88 10                	mov    BYTE PTR [eax],dl
c0017590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017594:	ba 00 00 00 00       	mov    edx,0x0
c0017599:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00175a0:	89 01                	mov    DWORD PTR [ecx],eax
c00175a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00175a5:	b8 00 00 00 00       	mov    eax,0x0
c00175aa:	eb 10                	jmp    c00175bc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175ac:	b8 02 00 00 00       	mov    eax,0x2
c00175b1:	eb 09                	jmp    c00175bc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175b3:	90                   	nop
c00175b4:	b8 01 00 00 00       	mov    eax,0x1
c00175b9:	8d 76 00             	lea    esi,[esi+0x0]
c00175bc:	81 c4 2c 02 00 00    	add    esp,0x22c
c00175c2:	c3                   	ret    
c00175c3:	90                   	nop

c00175c4 <FAT::unlink(char const*)>:
c00175c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00175ca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00175d2:	75 08                	jne    c00175dc <FAT::unlink(char const*)+0x18>
c00175d4:	b8 04 00 00 00       	mov    eax,0x4
c00175d9:	eb 61                	jmp    c001763c <FAT::unlink(char const*)+0x78>
c00175db:	90                   	nop
c00175dc:	83 ec 08             	sub    esp,0x8
c00175df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175ea:	50                   	push   eax
c00175eb:	e8 30 90 fe ff       	call   c0000620 <strcpy>
c00175f0:	83 c4 10             	add    esp,0x10
c00175f3:	83 ec 08             	sub    esp,0x8
c00175f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00175fa:	50                   	push   eax
c00175fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017602:	e8 a1 fc ff ff       	call   c00172a8 <FAT::fixFilepath(char*)>
c0017607:	83 c4 10             	add    esp,0x10
c001760a:	83 ec 0c             	sub    esp,0xc
c001760d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017611:	50                   	push   eax
c0017612:	e8 93 d2 fe ff       	call   c00048aa <f_unlink>
c0017617:	83 c4 10             	add    esp,0x10
c001761a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017621:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017628:	85 c0                	test   eax,eax
c001762a:	75 08                	jne    c0017634 <FAT::unlink(char const*)+0x70>
c001762c:	b8 00 00 00 00       	mov    eax,0x0
c0017631:	eb 09                	jmp    c001763c <FAT::unlink(char const*)+0x78>
c0017633:	90                   	nop
c0017634:	b8 01 00 00 00       	mov    eax,0x1
c0017639:	8d 76 00             	lea    esi,[esi+0x0]
c001763c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017642:	c3                   	ret    
c0017643:	90                   	nop

c0017644 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017644:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001764a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017651:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017658:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001765c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017660:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017668:	75 0a                	jne    c0017674 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001766a:	b8 04 00 00 00       	mov    eax,0x4
c001766f:	e9 54 01 00 00       	jmp    c00177c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017674:	83 ec 08             	sub    esp,0x8
c0017677:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001767e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017682:	50                   	push   eax
c0017683:	e8 98 8f fe ff       	call   c0000620 <strcpy>
c0017688:	83 c4 10             	add    esp,0x10
c001768b:	83 ec 08             	sub    esp,0x8
c001768e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017692:	50                   	push   eax
c0017693:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001769a:	e8 09 fc ff ff       	call   c00172a8 <FAT::fixFilepath(char*)>
c001769f:	83 c4 10             	add    esp,0x10
c00176a2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00176aa:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00176b2:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176b6:	25 ff 00 00 00       	and    eax,0xff
c00176bb:	83 e0 01             	and    eax,0x1
c00176be:	74 08                	je     c00176c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00176c0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00176c8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176cc:	25 ff 00 00 00       	and    eax,0xff
c00176d1:	83 e0 02             	and    eax,0x2
c00176d4:	74 0a                	je     c00176e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00176d6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00176de:	66 90                	xchg   ax,ax
c00176e0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176e4:	25 ff 00 00 00       	and    eax,0xff
c00176e9:	83 e0 04             	and    eax,0x4
c00176ec:	74 0a                	je     c00176f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00176ee:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00176f6:	66 90                	xchg   ax,ax
c00176f8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176fc:	25 ff 00 00 00       	and    eax,0xff
c0017701:	83 e0 08             	and    eax,0x8
c0017704:	74 0a                	je     c0017710 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017706:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001770e:	66 90                	xchg   ax,ax
c0017710:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017714:	25 ff 00 00 00       	and    eax,0xff
c0017719:	83 e0 01             	and    eax,0x1
c001771c:	74 0a                	je     c0017728 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001771e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017726:	66 90                	xchg   ax,ax
c0017728:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001772c:	25 ff 00 00 00       	and    eax,0xff
c0017731:	83 e0 02             	and    eax,0x2
c0017734:	74 0a                	je     c0017740 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017736:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001773e:	66 90                	xchg   ax,ax
c0017740:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017744:	25 ff 00 00 00       	and    eax,0xff
c0017749:	83 e0 04             	and    eax,0x4
c001774c:	74 0a                	je     c0017758 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001774e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017756:	66 90                	xchg   ax,ax
c0017758:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001775c:	25 ff 00 00 00       	and    eax,0xff
c0017761:	83 e0 08             	and    eax,0x8
c0017764:	74 0a                	je     c0017770 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017766:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001776e:	66 90                	xchg   ax,ax
c0017770:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017777:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001777e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017785:	31 d2                	xor    edx,edx
c0017787:	88 c2                	mov    dl,al
c0017789:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017790:	25 ff 00 00 00       	and    eax,0xff
c0017795:	83 ec 04             	sub    esp,0x4
c0017798:	52                   	push   edx
c0017799:	50                   	push   eax
c001779a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001779e:	50                   	push   eax
c001779f:	e8 79 d5 fe ff       	call   c0004d1d <f_chmod>
c00177a4:	83 c4 10             	add    esp,0x10
c00177a7:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00177ae:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00177b5:	85 c0                	test   eax,eax
c00177b7:	75 07                	jne    c00177c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00177b9:	b8 00 00 00 00       	mov    eax,0x0
c00177be:	eb 08                	jmp    c00177c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00177c0:	b8 01 00 00 00       	mov    eax,0x1
c00177c5:	8d 76 00             	lea    esi,[esi+0x0]
c00177c8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177ce:	c3                   	ret    
c00177cf:	90                   	nop

c00177d0 <FAT::rename(char const*, char const*)>:
c00177d0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00177d6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00177de:	74 0c                	je     c00177ec <FAT::rename(char const*, char const*)+0x1c>
c00177e0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00177e8:	75 0e                	jne    c00177f8 <FAT::rename(char const*, char const*)+0x28>
c00177ea:	66 90                	xchg   ax,ax
c00177ec:	b8 04 00 00 00       	mov    eax,0x4
c00177f1:	e9 9e 00 00 00       	jmp    c0017894 <FAT::rename(char const*, char const*)+0xc4>
c00177f6:	66 90                	xchg   ax,ax
c00177f8:	83 ec 08             	sub    esp,0x8
c00177fb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017802:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017809:	50                   	push   eax
c001780a:	e8 11 8e fe ff       	call   c0000620 <strcpy>
c001780f:	83 c4 10             	add    esp,0x10
c0017812:	83 ec 08             	sub    esp,0x8
c0017815:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001781c:	50                   	push   eax
c001781d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017824:	e8 7f fa ff ff       	call   c00172a8 <FAT::fixFilepath(char*)>
c0017829:	83 c4 10             	add    esp,0x10
c001782c:	83 ec 08             	sub    esp,0x8
c001782f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017836:	8d 44 24 18          	lea    eax,[esp+0x18]
c001783a:	50                   	push   eax
c001783b:	e8 e0 8d fe ff       	call   c0000620 <strcpy>
c0017840:	83 c4 10             	add    esp,0x10
c0017843:	83 ec 08             	sub    esp,0x8
c0017846:	8d 44 24 14          	lea    eax,[esp+0x14]
c001784a:	50                   	push   eax
c001784b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017852:	e8 51 fa ff ff       	call   c00172a8 <FAT::fixFilepath(char*)>
c0017857:	83 c4 10             	add    esp,0x10
c001785a:	83 ec 08             	sub    esp,0x8
c001785d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017861:	50                   	push   eax
c0017862:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017869:	50                   	push   eax
c001786a:	e8 f8 d2 fe ff       	call   c0004b67 <f_rename>
c001786f:	83 c4 10             	add    esp,0x10
c0017872:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017879:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017880:	85 c0                	test   eax,eax
c0017882:	75 08                	jne    c001788c <FAT::rename(char const*, char const*)+0xbc>
c0017884:	b8 00 00 00 00       	mov    eax,0x0
c0017889:	eb 09                	jmp    c0017894 <FAT::rename(char const*, char const*)+0xc4>
c001788b:	90                   	nop
c001788c:	b8 01 00 00 00       	mov    eax,0x1
c0017891:	8d 76 00             	lea    esi,[esi+0x0]
c0017894:	81 c4 1c 02 00 00    	add    esp,0x21c
c001789a:	c3                   	ret    
c001789b:	90                   	nop

c001789c <FAT::mkdir(char const*)>:
c001789c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00178a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00178aa:	75 08                	jne    c00178b4 <FAT::mkdir(char const*)+0x18>
c00178ac:	b8 04 00 00 00       	mov    eax,0x4
c00178b1:	eb 61                	jmp    c0017914 <FAT::mkdir(char const*)+0x78>
c00178b3:	90                   	nop
c00178b4:	83 ec 08             	sub    esp,0x8
c00178b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178c2:	50                   	push   eax
c00178c3:	e8 58 8d fe ff       	call   c0000620 <strcpy>
c00178c8:	83 c4 10             	add    esp,0x10
c00178cb:	83 ec 08             	sub    esp,0x8
c00178ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178d2:	50                   	push   eax
c00178d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178da:	e8 c9 f9 ff ff       	call   c00172a8 <FAT::fixFilepath(char*)>
c00178df:	83 c4 10             	add    esp,0x10
c00178e2:	83 ec 0c             	sub    esp,0xc
c00178e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178e9:	50                   	push   eax
c00178ea:	e8 dd d0 fe ff       	call   c00049cc <f_mkdir>
c00178ef:	83 c4 10             	add    esp,0x10
c00178f2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00178f9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017900:	85 c0                	test   eax,eax
c0017902:	75 08                	jne    c001790c <FAT::mkdir(char const*)+0x70>
c0017904:	b8 00 00 00 00       	mov    eax,0x0
c0017909:	eb 09                	jmp    c0017914 <FAT::mkdir(char const*)+0x78>
c001790b:	90                   	nop
c001790c:	b8 01 00 00 00       	mov    eax,0x1
c0017911:	8d 76 00             	lea    esi,[esi+0x0]
c0017914:	81 c4 1c 01 00 00    	add    esp,0x11c
c001791a:	c3                   	ret    
c001791b:	90                   	nop

c001791c <FAT::exists(char const*)>:
c001791c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017922:	83 ec 08             	sub    esp,0x8
c0017925:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001792c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017930:	50                   	push   eax
c0017931:	e8 ea 8c fe ff       	call   c0000620 <strcpy>
c0017936:	83 c4 10             	add    esp,0x10
c0017939:	83 ec 08             	sub    esp,0x8
c001793c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017940:	50                   	push   eax
c0017941:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017948:	e8 5b f9 ff ff       	call   c00172a8 <FAT::fixFilepath(char*)>
c001794d:	83 c4 10             	add    esp,0x10
c0017950:	83 ec 08             	sub    esp,0x8
c0017953:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001795a:	50                   	push   eax
c001795b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001795f:	50                   	push   eax
c0017960:	e8 e0 cc fe ff       	call   c0004645 <f_stat>
c0017965:	83 c4 10             	add    esp,0x10
c0017968:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001796f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017976:	85 c0                	test   eax,eax
c0017978:	75 06                	jne    c0017980 <FAT::exists(char const*)+0x64>
c001797a:	b0 01                	mov    al,0x1
c001797c:	eb 06                	jmp    c0017984 <FAT::exists(char const*)+0x68>
c001797e:	66 90                	xchg   ax,ax
c0017980:	b0 00                	mov    al,0x0
c0017982:	66 90                	xchg   ax,ax
c0017984:	81 c4 2c 02 00 00    	add    esp,0x22c
c001798a:	c3                   	ret    
c001798b:	90                   	nop

c001798c <isoReadDiscSectorHelper>:
c001798c:	83 ec 2c             	sub    esp,0x2c
c001798f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017993:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017997:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001799c:	83 e8 41             	sub    eax,0x41
c001799f:	8b 0c 85 80 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd180]
c00179a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179aa:	ba 00 00 00 00       	mov    edx,0x0
c00179af:	83 ec 0c             	sub    esp,0xc
c00179b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00179b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179ba:	52                   	push   edx
c00179bb:	50                   	push   eax
c00179bc:	51                   	push   ecx
c00179bd:	e8 22 59 ff ff       	call   c000d2e4 <LogicalDisk::read(unsigned long long, int, void*)>
c00179c2:	83 c4 20             	add    esp,0x20
c00179c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179c9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00179ce:	74 0c                	je     c00179dc <isoReadDiscSectorHelper+0x50>
c00179d0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179d4:	c1 e0 0b             	shl    eax,0xb
c00179d7:	eb 0b                	jmp    c00179e4 <isoReadDiscSectorHelper+0x58>
c00179d9:	8d 76 00             	lea    esi,[esi+0x0]
c00179dc:	b8 00 00 00 00       	mov    eax,0x0
c00179e1:	8d 76 00             	lea    esi,[esi+0x0]
c00179e4:	83 c4 2c             	add    esp,0x2c
c00179e7:	c3                   	ret    

c00179e8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00179e8:	b8 08 00 00 00       	mov    eax,0x8
c00179ed:	c3                   	ret    

c00179ee <ISO9660::getName()>:
c00179ee:	b8 10 ef 01 c0       	mov    eax,0xc001ef10
c00179f3:	c3                   	ret    

c00179f4 <ISO9660::closeDir(void*)>:
c00179f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00179fa:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00179fd:	90                   	nop

c00179fe <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00179fe:	b8 01 00 00 00       	mov    eax,0x1
c0017a03:	c3                   	ret    

c0017a04 <ISO9660::unlink(char const*)>:
c0017a04:	b8 01 00 00 00       	mov    eax,0x1
c0017a09:	c3                   	ret    

c0017a0a <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017a0a:	b8 03 00 00 00       	mov    eax,0x3
c0017a0f:	c3                   	ret    

c0017a10 <ISO9660::rename(char const*, char const*)>:
c0017a10:	b8 01 00 00 00       	mov    eax,0x1
c0017a15:	c3                   	ret    

c0017a16 <ISO9660::mkdir(char const*)>:
c0017a16:	b8 01 00 00 00       	mov    eax,0x1
c0017a1b:	c3                   	ret    

c0017a1c <ISO9660::~ISO9660()>:
c0017a1c:	83 ec 0c             	sub    esp,0xc
c0017a1f:	ba c4 ef 01 c0       	mov    edx,0xc001efc4
c0017a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a28:	89 10                	mov    DWORD PTR [eax],edx
c0017a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a2e:	83 ec 0c             	sub    esp,0xc
c0017a31:	50                   	push   eax
c0017a32:	e8 0b 35 ff ff       	call   c000af42 <Filesystem::~Filesystem()>
c0017a37:	83 c4 10             	add    esp,0x10
c0017a3a:	90                   	nop
c0017a3b:	83 c4 0c             	add    esp,0xc
c0017a3e:	c3                   	ret    
c0017a3f:	90                   	nop

c0017a40 <ISO9660::~ISO9660()>:
c0017a40:	83 ec 0c             	sub    esp,0xc
c0017a43:	83 ec 0c             	sub    esp,0xc
c0017a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a4a:	e8 cd ff ff ff       	call   c0017a1c <ISO9660::~ISO9660()>
c0017a4f:	83 c4 10             	add    esp,0x10
c0017a52:	83 ec 08             	sub    esp,0x8
c0017a55:	6a 08                	push   0x8
c0017a57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a5b:	e8 a6 30 ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c0017a60:	83 c4 10             	add    esp,0x10
c0017a63:	83 c4 0c             	add    esp,0xc
c0017a66:	c3                   	ret    
c0017a67:	90                   	nop

c0017a68 <ISO9660::exists(char const*)>:
c0017a68:	83 ec 18             	sub    esp,0x18
c0017a6b:	68 2b ef 01 c0       	push   0xc001ef2b
c0017a70:	e8 ad dd ff ff       	call   c0015822 <HalPanic(char const*)>
c0017a75:	31 c0                	xor    eax,eax
c0017a77:	83 c4 1c             	add    esp,0x1c
c0017a7a:	c3                   	ret    
c0017a7b:	90                   	nop

c0017a7c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017a7c:	53                   	push   ebx
c0017a7d:	83 ec 08             	sub    esp,0x8
c0017a80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a84:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a88:	85 c0                	test   eax,eax
c0017a8a:	0f 94 c3             	sete   bl
c0017a8d:	85 d2                	test   edx,edx
c0017a8f:	0f 94 c1             	sete   cl
c0017a92:	08 cb                	or     bl,cl
c0017a94:	75 2e                	jne    c0017ac4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x48>
c0017a96:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a9b:	74 27                	je     c0017ac4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x48>
c0017a9d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0017aa0:	83 ec 0c             	sub    esp,0xc
c0017aa3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0017aa9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017ab0:	68 49 ef 01 c0       	push   0xc001ef49
c0017ab5:	e8 68 dd ff ff       	call   c0015822 <HalPanic(char const*)>
c0017aba:	83 c4 10             	add    esp,0x10
c0017abd:	b8 01 00 00 00       	mov    eax,0x1
c0017ac2:	eb 05                	jmp    c0017ac9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x4d>
c0017ac4:	b8 04 00 00 00       	mov    eax,0x4
c0017ac9:	83 c4 08             	add    esp,0x8
c0017acc:	5b                   	pop    ebx
c0017acd:	c3                   	ret    

c0017ace <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017ace:	56                   	push   esi
c0017acf:	53                   	push   ebx
c0017ad0:	53                   	push   ebx
c0017ad1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017ad5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ad9:	85 db                	test   ebx,ebx
c0017adb:	74 72                	je     c0017b4f <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017add:	85 f6                	test   esi,esi
c0017adf:	74 6e                	je     c0017b4f <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017ae1:	ba 03 00 00 00       	mov    edx,0x3
c0017ae6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017aeb:	75 67                	jne    c0017b54 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017aed:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017af0:	3a 05 a0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fa0
c0017af6:	74 34                	je     c0017b2c <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c0017af8:	83 ec 0c             	sub    esp,0xc
c0017afb:	50                   	push   eax
c0017afc:	e8 a7 f1 fe ff       	call   c0006ca8 <init_percd>
c0017b01:	83 c4 10             	add    esp,0x10
c0017b04:	ba 0b 00 00 00       	mov    edx,0xb
c0017b09:	40                   	inc    eax
c0017b0a:	74 48                	je     c0017b54 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017b0c:	80 3d a0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fa0,0x0
c0017b13:	74 10                	je     c0017b25 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0017b15:	83 ec 0c             	sub    esp,0xc
c0017b18:	68 69 ef 01 c0       	push   0xc001ef69
c0017b1d:	e8 00 dd ff ff       	call   c0015822 <HalPanic(char const*)>
c0017b22:	83 c4 10             	add    esp,0x10
c0017b25:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b27:	a2 a0 3f 02 c0       	mov    ds:0xc0023fa0,al
c0017b2c:	83 c3 03             	add    ebx,0x3
c0017b2f:	51                   	push   ecx
c0017b30:	51                   	push   ecx
c0017b31:	6a 00                	push   0x0
c0017b33:	53                   	push   ebx
c0017b34:	e8 c9 e9 fe ff       	call   c0006502 <iso_open>
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	ba 01 00 00 00       	mov    edx,0x1
c0017b41:	83 f8 ff             	cmp    eax,0xffffffff
c0017b44:	74 0e                	je     c0017b54 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017b46:	83 c0 64             	add    eax,0x64
c0017b49:	31 d2                	xor    edx,edx
c0017b4b:	89 06                	mov    DWORD PTR [esi],eax
c0017b4d:	eb 05                	jmp    c0017b54 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017b4f:	ba 04 00 00 00       	mov    edx,0x4
c0017b54:	89 d0                	mov    eax,edx
c0017b56:	5a                   	pop    edx
c0017b57:	5b                   	pop    ebx
c0017b58:	5e                   	pop    esi
c0017b59:	c3                   	ret    

c0017b5a <ISO9660::openDir(char const*, void**)>:
c0017b5a:	57                   	push   edi
c0017b5b:	56                   	push   esi
c0017b5c:	53                   	push   ebx
c0017b5d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b61:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0017b65:	85 db                	test   ebx,ebx
c0017b67:	74 77                	je     c0017be0 <ISO9660::openDir(char const*, void**)+0x86>
c0017b69:	85 ff                	test   edi,edi
c0017b6b:	74 73                	je     c0017be0 <ISO9660::openDir(char const*, void**)+0x86>
c0017b6d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b70:	3a 05 a0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fa0
c0017b76:	74 34                	je     c0017bac <ISO9660::openDir(char const*, void**)+0x52>
c0017b78:	83 ec 0c             	sub    esp,0xc
c0017b7b:	50                   	push   eax
c0017b7c:	e8 27 f1 fe ff       	call   c0006ca8 <init_percd>
c0017b81:	83 c4 10             	add    esp,0x10
c0017b84:	ba 0b 00 00 00       	mov    edx,0xb
c0017b89:	40                   	inc    eax
c0017b8a:	74 59                	je     c0017be5 <ISO9660::openDir(char const*, void**)+0x8b>
c0017b8c:	80 3d a0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fa0,0x0
c0017b93:	74 10                	je     c0017ba5 <ISO9660::openDir(char const*, void**)+0x4b>
c0017b95:	83 ec 0c             	sub    esp,0xc
c0017b98:	68 69 ef 01 c0       	push   0xc001ef69
c0017b9d:	e8 80 dc ff ff       	call   c0015822 <HalPanic(char const*)>
c0017ba2:	83 c4 10             	add    esp,0x10
c0017ba5:	8a 03                	mov    al,BYTE PTR [ebx]
c0017ba7:	a2 a0 3f 02 c0       	mov    ds:0xc0023fa0,al
c0017bac:	83 c3 03             	add    ebx,0x3
c0017baf:	50                   	push   eax
c0017bb0:	50                   	push   eax
c0017bb1:	6a 01                	push   0x1
c0017bb3:	53                   	push   ebx
c0017bb4:	e8 49 e9 fe ff       	call   c0006502 <iso_open>
c0017bb9:	83 c4 0c             	add    esp,0xc
c0017bbc:	89 c6                	mov    esi,eax
c0017bbe:	53                   	push   ebx
c0017bbf:	50                   	push   eax
c0017bc0:	68 79 ef 01 c0       	push   0xc001ef79
c0017bc5:	e8 32 30 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0017bca:	83 c4 10             	add    esp,0x10
c0017bcd:	ba 01 00 00 00       	mov    edx,0x1
c0017bd2:	83 fe ff             	cmp    esi,0xffffffff
c0017bd5:	74 0e                	je     c0017be5 <ISO9660::openDir(char const*, void**)+0x8b>
c0017bd7:	83 c6 64             	add    esi,0x64
c0017bda:	31 d2                	xor    edx,edx
c0017bdc:	89 37                	mov    DWORD PTR [edi],esi
c0017bde:	eb 05                	jmp    c0017be5 <ISO9660::openDir(char const*, void**)+0x8b>
c0017be0:	ba 04 00 00 00       	mov    edx,0x4
c0017be5:	5b                   	pop    ebx
c0017be6:	89 d0                	mov    eax,edx
c0017be8:	5e                   	pop    esi
c0017be9:	5f                   	pop    edi
c0017bea:	c3                   	ret    
c0017beb:	90                   	nop

c0017bec <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017bec:	53                   	push   ebx
c0017bed:	83 ec 08             	sub    esp,0x8
c0017bf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bf4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017bf8:	85 c0                	test   eax,eax
c0017bfa:	74 25                	je     c0017c21 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bfc:	85 db                	test   ebx,ebx
c0017bfe:	74 21                	je     c0017c21 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017c00:	83 e8 64             	sub    eax,0x64
c0017c03:	52                   	push   edx
c0017c04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c0c:	50                   	push   eax
c0017c0d:	e8 eb e9 fe ff       	call   c00065fd <iso_read>
c0017c12:	83 c4 10             	add    esp,0x10
c0017c15:	89 03                	mov    DWORD PTR [ebx],eax
c0017c17:	09 d0                	or     eax,edx
c0017c19:	0f 94 c0             	sete   al
c0017c1c:	0f b6 c0             	movzx  eax,al
c0017c1f:	eb 05                	jmp    c0017c26 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017c21:	b8 04 00 00 00       	mov    eax,0x4
c0017c26:	83 c4 08             	add    esp,0x8
c0017c29:	5b                   	pop    ebx
c0017c2a:	c3                   	ret    
c0017c2b:	90                   	nop

c0017c2c <ISO9660::seek(void*, unsigned long long)>:
c0017c2c:	57                   	push   edi
c0017c2d:	56                   	push   esi
c0017c2e:	b8 04 00 00 00       	mov    eax,0x4
c0017c33:	51                   	push   ecx
c0017c34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c38:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017c3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017c40:	85 d2                	test   edx,edx
c0017c42:	74 1c                	je     c0017c60 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017c44:	6a 00                	push   0x0
c0017c46:	83 ea 64             	sub    edx,0x64
c0017c49:	57                   	push   edi
c0017c4a:	56                   	push   esi
c0017c4b:	52                   	push   edx
c0017c4c:	e8 aa eb fe ff       	call   c00067fb <iso_seek>
c0017c51:	83 c4 10             	add    esp,0x10
c0017c54:	31 f0                	xor    eax,esi
c0017c56:	31 fa                	xor    edx,edi
c0017c58:	09 d0                	or     eax,edx
c0017c5a:	0f 95 c0             	setne  al
c0017c5d:	0f b6 c0             	movzx  eax,al
c0017c60:	5a                   	pop    edx
c0017c61:	5e                   	pop    esi
c0017c62:	5f                   	pop    edi
c0017c63:	c3                   	ret    

c0017c64 <ISO9660::tell(void*, unsigned long long*)>:
c0017c64:	53                   	push   ebx
c0017c65:	83 ec 08             	sub    esp,0x8
c0017c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c6c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c70:	85 c0                	test   eax,eax
c0017c72:	74 1c                	je     c0017c90 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c74:	85 db                	test   ebx,ebx
c0017c76:	74 18                	je     c0017c90 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c78:	83 ec 0c             	sub    esp,0xc
c0017c7b:	83 e8 64             	sub    eax,0x64
c0017c7e:	50                   	push   eax
c0017c7f:	e8 55 ec fe ff       	call   c00068d9 <iso_tell>
c0017c84:	83 c4 10             	add    esp,0x10
c0017c87:	89 03                	mov    DWORD PTR [ebx],eax
c0017c89:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c8c:	31 c0                	xor    eax,eax
c0017c8e:	eb 05                	jmp    c0017c95 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c90:	b8 04 00 00 00       	mov    eax,0x4
c0017c95:	83 c4 08             	add    esp,0x8
c0017c98:	5b                   	pop    ebx
c0017c99:	c3                   	ret    

c0017c9a <ISO9660::stat(void*, unsigned long long*)>:
c0017c9a:	53                   	push   ebx
c0017c9b:	83 ec 08             	sub    esp,0x8
c0017c9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ca2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017ca6:	85 c0                	test   eax,eax
c0017ca8:	74 20                	je     c0017cca <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017caa:	85 db                	test   ebx,ebx
c0017cac:	74 1c                	je     c0017cca <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017cae:	83 ec 0c             	sub    esp,0xc
c0017cb1:	83 e8 64             	sub    eax,0x64
c0017cb4:	50                   	push   eax
c0017cb5:	e8 7c ec fe ff       	call   c0006936 <iso_total>
c0017cba:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017cc1:	89 03                	mov    DWORD PTR [ebx],eax
c0017cc3:	83 c4 10             	add    esp,0x10
c0017cc6:	31 c0                	xor    eax,eax
c0017cc8:	eb 05                	jmp    c0017ccf <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017cca:	b8 04 00 00 00       	mov    eax,0x4
c0017ccf:	83 c4 08             	add    esp,0x8
c0017cd2:	5b                   	pop    ebx
c0017cd3:	c3                   	ret    

c0017cd4 <ISO9660::close(void*)>:
c0017cd4:	83 ec 0c             	sub    esp,0xc
c0017cd7:	b8 04 00 00 00       	mov    eax,0x4
c0017cdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ce0:	85 d2                	test   edx,edx
c0017ce2:	74 11                	je     c0017cf5 <ISO9660::close(void*)+0x21>
c0017ce4:	83 ec 0c             	sub    esp,0xc
c0017ce7:	83 ea 64             	sub    edx,0x64
c0017cea:	52                   	push   edx
c0017ceb:	e8 f2 e8 fe ff       	call   c00065e2 <iso_close>
c0017cf0:	83 c4 10             	add    esp,0x10
c0017cf3:	31 c0                	xor    eax,eax
c0017cf5:	83 c4 0c             	add    esp,0xc
c0017cf8:	c3                   	ret    
c0017cf9:	90                   	nop

c0017cfa <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017cfa:	57                   	push   edi
c0017cfb:	56                   	push   esi
c0017cfc:	53                   	push   ebx
c0017cfd:	81 ec 10 01 00 00    	sub    esp,0x110
c0017d03:	8b 84 24 24 01 00 00 	mov    eax,DWORD PTR [esp+0x124]
c0017d0a:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017d11:	85 c0                	test   eax,eax
c0017d13:	0f 84 8a 00 00 00    	je     c0017da3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xa9>
c0017d19:	85 db                	test   ebx,ebx
c0017d1b:	0f 84 82 00 00 00    	je     c0017da3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xa9>
c0017d21:	83 ec 0c             	sub    esp,0xc
c0017d24:	83 e8 64             	sub    eax,0x64
c0017d27:	50                   	push   eax
c0017d28:	e8 a1 ec fe ff       	call   c00069ce <iso_readdir>
c0017d2d:	83 c4 10             	add    esp,0x10
c0017d30:	89 c6                	mov    esi,eax
c0017d32:	b8 01 00 00 00       	mov    eax,0x1
c0017d37:	85 f6                	test   esi,esi
c0017d39:	74 6d                	je     c0017da8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xae>
c0017d3b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017d41:	8d 7e 08             	lea    edi,[esi+0x8]
c0017d44:	83 ec 0c             	sub    esp,0xc
c0017d47:	57                   	push   edi
c0017d48:	e8 13 88 fe ff       	call   c0000560 <strlen>
c0017d4d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d59:	83 c4 10             	add    esp,0x10
c0017d5c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017d60:	75 0a                	jne    c0017d6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x72>
c0017d62:	b8 02 00 00 00       	mov    eax,0x2
c0017d67:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017d6a:	74 05                	je     c0017d71 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x77>
c0017d6c:	b8 01 00 00 00       	mov    eax,0x1
c0017d71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d75:	50                   	push   eax
c0017d76:	50                   	push   eax
c0017d77:	57                   	push   edi
c0017d78:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017d7c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017d80:	50                   	push   eax
c0017d81:	e8 9a 88 fe ff       	call   c0000620 <strcpy>
c0017d86:	8b 8c 24 38 01 00 00 	mov    ecx,DWORD PTR [esp+0x138]
c0017d8d:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017d94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d96:	31 c0                	xor    eax,eax
c0017d98:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017d9e:	83 c4 10             	add    esp,0x10
c0017da1:	eb 05                	jmp    c0017da8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xae>
c0017da3:	b8 04 00 00 00       	mov    eax,0x4
c0017da8:	81 c4 10 01 00 00    	add    esp,0x110
c0017dae:	5b                   	pop    ebx
c0017daf:	5e                   	pop    esi
c0017db0:	5f                   	pop    edi
c0017db1:	c3                   	ret    

c0017db2 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017db2:	57                   	push   edi
c0017db3:	56                   	push   esi
c0017db4:	53                   	push   ebx
c0017db5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017db9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017dbd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017dc1:	39 35 a4 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fa4,esi
c0017dc7:	75 08                	jne    c0017dd1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017dc9:	38 1d f4 f8 01 c0    	cmp    BYTE PTR ds:0xc001f8f4,bl
c0017dcf:	74 59                	je     c0017e2a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017dd1:	83 ec 0c             	sub    esp,0xc
c0017dd4:	31 d2                	xor    edx,edx
c0017dd6:	68 c0 3f 02 c0       	push   0xc0023fc0
c0017ddb:	0f be c3             	movsx  eax,bl
c0017dde:	6a 01                	push   0x1
c0017de0:	52                   	push   edx
c0017de1:	56                   	push   esi
c0017de2:	ff 34 85 7c 2d 02 c0 	push   DWORD PTR [eax*4-0x3ffdd284]
c0017de9:	e8 f6 54 ff ff       	call   c000d2e4 <LogicalDisk::read(unsigned long long, int, void*)>
c0017dee:	83 c4 20             	add    esp,0x20
c0017df1:	85 c0                	test   eax,eax
c0017df3:	75 0e                	jne    c0017e03 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017df5:	89 35 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,esi
c0017dfb:	88 1d f4 f8 01 c0    	mov    BYTE PTR ds:0xc001f8f4,bl
c0017e01:	eb 27                	jmp    c0017e2a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e03:	83 ec 0c             	sub    esp,0xc
c0017e06:	68 a0 ef 01 c0       	push   0xc001efa0
c0017e0b:	e8 ec 2d ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0017e10:	83 c4 0c             	add    esp,0xc
c0017e13:	68 00 08 00 00       	push   0x800
c0017e18:	6a 00                	push   0x0
c0017e1a:	57                   	push   edi
c0017e1b:	e8 d0 86 fe ff       	call   c00004f0 <memset>
c0017e20:	83 c4 10             	add    esp,0x10
c0017e23:	b8 01 00 00 00       	mov    eax,0x1
c0017e28:	eb 0e                	jmp    c0017e38 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017e2a:	be c0 3f 02 c0       	mov    esi,0xc0023fc0
c0017e2f:	b9 00 08 00 00       	mov    ecx,0x800
c0017e34:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e36:	31 c0                	xor    eax,eax
c0017e38:	5b                   	pop    ebx
c0017e39:	5e                   	pop    esi
c0017e3a:	5f                   	pop    edi
c0017e3b:	c3                   	ret    

c0017e3c <ISO9660::tryMount(LogicalDisk*, int)>:
c0017e3c:	53                   	push   ebx
c0017e3d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e43:	c7 05 a4 3f 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023fa4,0xdeadbeef
c0017e4d:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017e54:	8d 58 41             	lea    ebx,[eax+0x41]
c0017e57:	0f be db             	movsx  ebx,bl
c0017e5a:	53                   	push   ebx
c0017e5b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e5f:	50                   	push   eax
c0017e60:	6a 10                	push   0x10
c0017e62:	e8 4b ff ff ff       	call   c0017db2 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017e67:	83 c4 10             	add    esp,0x10
c0017e6a:	31 d2                	xor    edx,edx
c0017e6c:	85 c0                	test   eax,eax
c0017e6e:	75 33                	jne    c0017ea3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e70:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017e75:	75 2c                	jne    c0017ea3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e77:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017e7c:	75 25                	jne    c0017ea3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e7e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017e83:	75 1e                	jne    c0017ea3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e85:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017e8a:	75 17                	jne    c0017ea3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e8c:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017e91:	75 10                	jne    c0017ea3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e93:	83 ec 0c             	sub    esp,0xc
c0017e96:	53                   	push   ebx
c0017e97:	e8 0c ee fe ff       	call   c0006ca8 <init_percd>
c0017e9c:	83 c4 10             	add    esp,0x10
c0017e9f:	40                   	inc    eax
c0017ea0:	0f 95 c2             	setne  dl
c0017ea3:	88 d0                	mov    al,dl
c0017ea5:	81 c4 08 08 00 00    	add    esp,0x808
c0017eab:	5b                   	pop    ebx
c0017eac:	c3                   	ret    
c0017ead:	90                   	nop

c0017eae <ISO9660::ISO9660()>:
c0017eae:	83 ec 0c             	sub    esp,0xc
c0017eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eb5:	83 ec 0c             	sub    esp,0xc
c0017eb8:	50                   	push   eax
c0017eb9:	e8 60 30 ff ff       	call   c000af1e <Filesystem::Filesystem()>
c0017ebe:	83 c4 10             	add    esp,0x10
c0017ec1:	ba c4 ef 01 c0       	mov    edx,0xc001efc4
c0017ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eca:	89 10                	mov    DWORD PTR [eax],edx
c0017ecc:	e8 e7 ee fe ff       	call   c0006db8 <fs_iso9660_init>
c0017ed1:	90                   	nop
c0017ed2:	83 c4 0c             	add    esp,0xc
c0017ed5:	c3                   	ret    

c0017ed6 <SoundCard::beginPlayback()>:
c0017ed6:	c7 44 24 04 24 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f024
c0017ede:	e9 68 88 ff ff       	jmp    c001074b <Krnl::panic(char const*)>
c0017ee3:	90                   	nop

c0017ee4 <SoundCard::stopPlayback()>:
c0017ee4:	c7 44 24 04 24 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f024
c0017eec:	e9 5a 88 ff ff       	jmp    c001074b <Krnl::panic(char const*)>
c0017ef1:	90                   	nop

c0017ef2 <SoundCard::SoundCard(char const*)>:
c0017ef2:	83 ec 1c             	sub    esp,0x1c
c0017ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef9:	83 ec 08             	sub    esp,0x8
c0017efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f00:	50                   	push   eax
c0017f01:	e8 ce 42 ff ff       	call   c000c1d4 <Device::Device(char const*)>
c0017f06:	83 c4 10             	add    esp,0x10
c0017f09:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c0017f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f12:	89 10                	mov    DWORD PTR [eax],edx
c0017f14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f18:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f23:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f31:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017f3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f3f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017f49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017f57:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f5f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017f64:	7f 19                	jg     c0017f7f <SoundCard::SoundCard(char const*)+0x8d>
c0017f66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f6e:	83 c2 54             	add    edx,0x54
c0017f71:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017f79:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017f7d:	eb e0                	jmp    c0017f5f <SoundCard::SoundCard(char const*)+0x6d>
c0017f7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f83:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f8a:	90                   	nop
c0017f8b:	83 c4 1c             	add    esp,0x1c
c0017f8e:	c3                   	ret    
c0017f8f:	90                   	nop

c0017f90 <SoundCard::~SoundCard()>:
c0017f90:	83 ec 0c             	sub    esp,0xc
c0017f93:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c0017f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f9c:	89 10                	mov    DWORD PTR [eax],edx
c0017f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fa2:	83 ec 0c             	sub    esp,0xc
c0017fa5:	50                   	push   eax
c0017fa6:	e8 93 3f ff ff       	call   c000bf3e <Device::~Device()>
c0017fab:	83 c4 10             	add    esp,0x10
c0017fae:	90                   	nop
c0017faf:	83 c4 0c             	add    esp,0xc
c0017fb2:	c3                   	ret    
c0017fb3:	90                   	nop

c0017fb4 <SoundCard::~SoundCard()>:
c0017fb4:	83 ec 0c             	sub    esp,0xc
c0017fb7:	83 ec 0c             	sub    esp,0xc
c0017fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fbe:	e8 cd ff ff ff       	call   c0017f90 <SoundCard::~SoundCard()>
c0017fc3:	83 c4 10             	add    esp,0x10
c0017fc6:	83 ec 08             	sub    esp,0x8
c0017fc9:	68 e8 01 00 00       	push   0x1e8
c0017fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fd2:	e8 2f 2b ff ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c0017fd7:	83 c4 10             	add    esp,0x10
c0017fda:	83 c4 0c             	add    esp,0xc
c0017fdd:	c3                   	ret    

c0017fde <SoundCard::configureRates(int, int, int)>:
c0017fde:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017fe2:	31 c0                	xor    eax,eax
c0017fe4:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017feb:	75 20                	jne    c001800d <SoundCard::configureRates(int, int, int)+0x2f>
c0017fed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ff1:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017ff7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ffb:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0018001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018005:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001800b:	b0 01                	mov    al,0x1
c001800d:	c3                   	ret    

c001800e <SoundCard::getSamples16(int, short*)>:
c001800e:	55                   	push   ebp
c001800f:	57                   	push   edi
c0018010:	31 ff                	xor    edi,edi
c0018012:	56                   	push   esi
c0018013:	53                   	push   ebx
c0018014:	31 db                	xor    ebx,ebx
c0018016:	83 ec 10             	sub    esp,0x10
c0018019:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001801d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018021:	8d 04 36             	lea    eax,[esi+esi*1]
c0018024:	50                   	push   eax
c0018025:	6a 00                	push   0x0
c0018027:	55                   	push   ebp
c0018028:	e8 c3 84 fe ff       	call   c00004f0 <memset>
c001802d:	83 c4 10             	add    esp,0x10
c0018030:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018034:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001803b:	85 c0                	test   eax,eax
c001803d:	74 1b                	je     c001805a <SoundCard::getSamples16(int, short*)+0x4c>
c001803f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018043:	75 15                	jne    c001805a <SoundCard::getSamples16(int, short*)+0x4c>
c0018045:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018049:	55                   	push   ebp
c001804a:	56                   	push   esi
c001804b:	50                   	push   eax
c001804c:	e8 ef 02 00 00       	call   c0018340 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018051:	83 c4 10             	add    esp,0x10
c0018054:	39 c7                	cmp    edi,eax
c0018056:	7d 02                	jge    c001805a <SoundCard::getSamples16(int, short*)+0x4c>
c0018058:	89 c7                	mov    edi,eax
c001805a:	43                   	inc    ebx
c001805b:	83 fb 20             	cmp    ebx,0x20
c001805e:	75 d0                	jne    c0018030 <SoundCard::getSamples16(int, short*)+0x22>
c0018060:	83 c4 0c             	add    esp,0xc
c0018063:	89 f8                	mov    eax,edi
c0018065:	5b                   	pop    ebx
c0018066:	5e                   	pop    esi
c0018067:	5f                   	pop    edi
c0018068:	5d                   	pop    ebp
c0018069:	c3                   	ret    

c001806a <SoundCard::getSamples32(int, int*)>:
c001806a:	55                   	push   ebp
c001806b:	57                   	push   edi
c001806c:	31 ff                	xor    edi,edi
c001806e:	56                   	push   esi
c001806f:	31 f6                	xor    esi,esi
c0018071:	53                   	push   ebx
c0018072:	83 ec 10             	sub    esp,0x10
c0018075:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018079:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001807d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018081:	c1 e0 02             	shl    eax,0x2
c0018084:	50                   	push   eax
c0018085:	6a 00                	push   0x0
c0018087:	55                   	push   ebp
c0018088:	e8 63 84 fe ff       	call   c00004f0 <memset>
c001808d:	83 c4 10             	add    esp,0x10
c0018090:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018097:	85 c0                	test   eax,eax
c0018099:	74 1b                	je     c00180b6 <SoundCard::getSamples32(int, int*)+0x4c>
c001809b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001809f:	75 15                	jne    c00180b6 <SoundCard::getSamples32(int, int*)+0x4c>
c00180a1:	53                   	push   ebx
c00180a2:	55                   	push   ebp
c00180a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180a7:	50                   	push   eax
c00180a8:	e8 57 03 00 00       	call   c0018404 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00180ad:	83 c4 10             	add    esp,0x10
c00180b0:	39 c6                	cmp    esi,eax
c00180b2:	7d 02                	jge    c00180b6 <SoundCard::getSamples32(int, int*)+0x4c>
c00180b4:	89 c6                	mov    esi,eax
c00180b6:	47                   	inc    edi
c00180b7:	83 ff 20             	cmp    edi,0x20
c00180ba:	75 d4                	jne    c0018090 <SoundCard::getSamples32(int, int*)+0x26>
c00180bc:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00180c2:	85 f6                	test   esi,esi
c00180c4:	75 0f                	jne    c00180d5 <SoundCard::getSamples32(int, int*)+0x6b>
c00180c6:	84 c0                	test   al,al
c00180c8:	74 1b                	je     c00180e5 <SoundCard::getSamples32(int, int*)+0x7b>
c00180ca:	83 ec 0c             	sub    esp,0xc
c00180cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180cf:	53                   	push   ebx
c00180d0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00180d3:	eb 0d                	jmp    c00180e2 <SoundCard::getSamples32(int, int*)+0x78>
c00180d5:	84 c0                	test   al,al
c00180d7:	75 0c                	jne    c00180e5 <SoundCard::getSamples32(int, int*)+0x7b>
c00180d9:	83 ec 0c             	sub    esp,0xc
c00180dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180de:	53                   	push   ebx
c00180df:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00180e2:	83 c4 10             	add    esp,0x10
c00180e5:	83 c4 0c             	add    esp,0xc
c00180e8:	89 f0                	mov    eax,esi
c00180ea:	5b                   	pop    ebx
c00180eb:	5e                   	pop    esi
c00180ec:	5f                   	pop    edi
c00180ed:	5d                   	pop    ebp
c00180ee:	c3                   	ret    
c00180ef:	90                   	nop

c00180f0 <SoundCard::addChannel(SoundPort*)>:
c00180f0:	83 ec 0c             	sub    esp,0xc
c00180f3:	31 c0                	xor    eax,eax
c00180f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180f9:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018101:	74 1b                	je     c001811e <SoundCard::addChannel(SoundPort*)+0x2e>
c0018103:	40                   	inc    eax
c0018104:	83 f8 20             	cmp    eax,0x20
c0018107:	75 f0                	jne    c00180f9 <SoundCard::addChannel(SoundPort*)+0x9>
c0018109:	83 ec 0c             	sub    esp,0xc
c001810c:	68 49 f0 01 c0       	push   0xc001f049
c0018111:	e8 35 86 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0018116:	83 c4 10             	add    esp,0x10
c0018119:	83 c8 ff             	or     eax,0xffffffff
c001811c:	eb 0b                	jmp    c0018129 <SoundCard::addChannel(SoundPort*)+0x39>
c001811e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018122:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018129:	83 c4 0c             	add    esp,0xc
c001812c:	c3                   	ret    
c001812d:	90                   	nop

c001812e <SoundCard::removeChannel(int)>:
c001812e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018132:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018136:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018141:	c3                   	ret    
c0018142:	66 90                	xchg   ax,ax

c0018144 <SoundPort::SoundPort(int, int, int, int)>:
c0018144:	83 ec 0c             	sub    esp,0xc
c0018147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001814b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018156:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001815a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001815e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018162:	89 10                	mov    DWORD PTR [eax],edx
c0018164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018168:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001816c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001816f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018177:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001817a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001817f:	75 13                	jne    c0018194 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018185:	8b 00                	mov    eax,DWORD PTR [eax]
c0018187:	05 a0 0f 00 00       	add    eax,0xfa0
c001818c:	01 c0                	add    eax,eax
c001818e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018192:	66 90                	xchg   ax,ax
c0018194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018198:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001819c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001819f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00181aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181b1:	c1 e0 02             	shl    eax,0x2
c00181b4:	83 ec 0c             	sub    esp,0xc
c00181b7:	50                   	push   eax
c00181b8:	e8 b0 fc fe ff       	call   c0007e6d <malloc>
c00181bd:	83 c4 10             	add    esp,0x10
c00181c0:	89 c2                	mov    edx,eax
c00181c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00181c9:	90                   	nop
c00181ca:	83 c4 0c             	add    esp,0xc
c00181cd:	c3                   	ret    
c00181ce:	66 90                	xchg   ax,ax

c00181d0 <SoundPort::~SoundPort()>:
c00181d0:	83 ec 0c             	sub    esp,0xc
c00181d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00181da:	85 c0                	test   eax,eax
c00181dc:	74 1e                	je     c00181fc <SoundPort::~SoundPort()+0x2c>
c00181de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00181e5:	83 ec 0c             	sub    esp,0xc
c00181e8:	50                   	push   eax
c00181e9:	e8 8f fc fe ff       	call   c0007e7d <free>
c00181ee:	83 c4 10             	add    esp,0x10
c00181f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181fc:	90                   	nop
c00181fd:	83 c4 0c             	add    esp,0xc
c0018200:	c3                   	ret    
c0018201:	90                   	nop
c0018202:	66 90                	xchg   ax,ax

c0018204 <SoundPort::unpause()>:
c0018204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018208:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001820c:	c3                   	ret    
c001820d:	90                   	nop
c001820e:	66 90                	xchg   ax,ax

c0018210 <SoundPort::pause()>:
c0018210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018214:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018218:	c3                   	ret    
c0018219:	90                   	nop
c001821a:	66 90                	xchg   ax,ax

c001821c <SoundPort::getBufferUsed()>:
c001821c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018220:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018223:	c3                   	ret    

c0018224 <SoundPort::getBufferSize()>:
c0018224:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018228:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001822b:	c3                   	ret    

c001822c <SoundPort::buffer16(short*, int)>:
c001822c:	55                   	push   ebp
c001822d:	57                   	push   edi
c001822e:	56                   	push   esi
c001822f:	53                   	push   ebx
c0018230:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018234:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018238:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001823b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001823e:	74 68                	je     c00182a8 <SoundPort::buffer16(short*, int)+0x7c>
c0018240:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018244:	85 c9                	test   ecx,ecx
c0018246:	7e 60                	jle    c00182a8 <SoundPort::buffer16(short*, int)+0x7c>
c0018248:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001824c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001824f:	c1 e1 0f             	shl    ecx,0xf
c0018252:	8d 70 01             	lea    esi,[eax+0x1]
c0018255:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018258:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001825b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001825e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018261:	74 4d                	je     c00182b0 <SoundPort::buffer16(short*, int)+0x84>
c0018263:	31 f6                	xor    esi,esi
c0018265:	eb 21                	jmp    c0018288 <SoundPort::buffer16(short*, int)+0x5c>
c0018267:	90                   	nop
c0018268:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001826d:	8d 79 01             	lea    edi,[ecx+0x1]
c0018270:	c1 e3 0f             	shl    ebx,0xf
c0018273:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0018276:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018279:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001827c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001827f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018282:	74 1c                	je     c00182a0 <SoundPort::buffer16(short*, int)+0x74>
c0018284:	89 c6                	mov    esi,eax
c0018286:	66 90                	xchg   ax,ax
c0018288:	8d 46 01             	lea    eax,[esi+0x1]
c001828b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001828f:	75 d7                	jne    c0018268 <SoundPort::buffer16(short*, int)+0x3c>
c0018291:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018295:	8d 76 00             	lea    esi,[esi+0x0]
c0018298:	5b                   	pop    ebx
c0018299:	5e                   	pop    esi
c001829a:	5f                   	pop    edi
c001829b:	5d                   	pop    ebp
c001829c:	c3                   	ret    
c001829d:	8d 76 00             	lea    esi,[esi+0x0]
c00182a0:	5b                   	pop    ebx
c00182a1:	8d 46 02             	lea    eax,[esi+0x2]
c00182a4:	5e                   	pop    esi
c00182a5:	5f                   	pop    edi
c00182a6:	5d                   	pop    ebp
c00182a7:	c3                   	ret    
c00182a8:	5b                   	pop    ebx
c00182a9:	31 c0                	xor    eax,eax
c00182ab:	5e                   	pop    esi
c00182ac:	5f                   	pop    edi
c00182ad:	5d                   	pop    ebp
c00182ae:	c3                   	ret    
c00182af:	90                   	nop
c00182b0:	b8 01 00 00 00       	mov    eax,0x1
c00182b5:	eb e1                	jmp    c0018298 <SoundPort::buffer16(short*, int)+0x6c>
c00182b7:	90                   	nop

c00182b8 <SoundPort::buffer32(int*, int)>:
c00182b8:	55                   	push   ebp
c00182b9:	57                   	push   edi
c00182ba:	56                   	push   esi
c00182bb:	53                   	push   ebx
c00182bc:	51                   	push   ecx
c00182bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182c5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182c8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00182cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00182cf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182d2:	74 5c                	je     c0018330 <SoundPort::buffer32(int*, int)+0x78>
c00182d4:	85 c0                	test   eax,eax
c00182d6:	7e 58                	jle    c0018330 <SoundPort::buffer32(int*, int)+0x78>
c00182d8:	8d 71 01             	lea    esi,[ecx+0x1]
c00182db:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00182de:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00182e1:	8b 37                	mov    esi,DWORD PTR [edi]
c00182e3:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00182e6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182e9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182ec:	74 4a                	je     c0018338 <SoundPort::buffer32(int*, int)+0x80>
c00182ee:	31 f6                	xor    esi,esi
c00182f0:	eb 1e                	jmp    c0018310 <SoundPort::buffer32(int*, int)+0x58>
c00182f2:	66 90                	xchg   ax,ax
c00182f4:	8d 69 01             	lea    ebp,[ecx+0x1]
c00182f7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00182fa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00182fd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018300:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018304:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018307:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001830a:	74 18                	je     c0018324 <SoundPort::buffer32(int*, int)+0x6c>
c001830c:	89 de                	mov    esi,ebx
c001830e:	66 90                	xchg   ax,ax
c0018310:	8d 5e 01             	lea    ebx,[esi+0x1]
c0018313:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018316:	75 dc                	jne    c00182f4 <SoundPort::buffer32(int*, int)+0x3c>
c0018318:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001831b:	90                   	nop
c001831c:	5a                   	pop    edx
c001831d:	5b                   	pop    ebx
c001831e:	5e                   	pop    esi
c001831f:	5f                   	pop    edi
c0018320:	5d                   	pop    ebp
c0018321:	c3                   	ret    
c0018322:	66 90                	xchg   ax,ax
c0018324:	5a                   	pop    edx
c0018325:	8d 46 02             	lea    eax,[esi+0x2]
c0018328:	5b                   	pop    ebx
c0018329:	5e                   	pop    esi
c001832a:	5f                   	pop    edi
c001832b:	5d                   	pop    ebp
c001832c:	c3                   	ret    
c001832d:	8d 76 00             	lea    esi,[esi+0x0]
c0018330:	5a                   	pop    edx
c0018331:	31 c0                	xor    eax,eax
c0018333:	5b                   	pop    ebx
c0018334:	5e                   	pop    esi
c0018335:	5f                   	pop    edi
c0018336:	5d                   	pop    ebp
c0018337:	c3                   	ret    
c0018338:	b8 01 00 00 00       	mov    eax,0x1
c001833d:	eb dd                	jmp    c001831c <SoundPort::buffer32(int*, int)+0x64>
c001833f:	90                   	nop

c0018340 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018340:	57                   	push   edi
c0018341:	56                   	push   esi
c0018342:	53                   	push   ebx
c0018343:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018347:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001834b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018351:	39 03                	cmp    DWORD PTR [ebx],eax
c0018353:	74 13                	je     c0018368 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018355:	83 ec 0c             	sub    esp,0xc
c0018358:	68 9c f0 01 c0       	push   0xc001f09c
c001835d:	e8 e9 83 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0018362:	83 c4 10             	add    esp,0x10
c0018365:	8d 76 00             	lea    esi,[esi+0x0]
c0018368:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001836e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018371:	74 11                	je     c0018384 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018373:	83 ec 0c             	sub    esp,0xc
c0018376:	68 db f0 01 c0       	push   0xc001f0db
c001837b:	e8 cb 83 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0018380:	83 c4 10             	add    esp,0x10
c0018383:	90                   	nop
c0018384:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001838a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001838d:	74 11                	je     c00183a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001838f:	83 ec 0c             	sub    esp,0xc
c0018392:	68 db f0 01 c0       	push   0xc001f0db
c0018397:	e8 af 83 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001839c:	83 c4 10             	add    esp,0x10
c001839f:	90                   	nop
c00183a0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00183a3:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00183a7:	7e 07                	jle    c00183b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00183a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00183ad:	8d 76 00             	lea    esi,[esi+0x0]
c00183b0:	85 f6                	test   esi,esi
c00183b2:	7e 2c                	jle    c00183e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00183b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183b8:	8d 3c 36             	lea    edi,[esi+esi*1]
c00183bb:	31 c9                	xor    ecx,ecx
c00183bd:	01 d7                	add    edi,edx
c00183bf:	90                   	nop
c00183c0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00183c3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00183c6:	85 c0                	test   eax,eax
c00183c8:	79 06                	jns    c00183d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00183ca:	05 ff 7f 00 00       	add    eax,0x7fff
c00183cf:	90                   	nop
c00183d0:	c1 f8 0f             	sar    eax,0xf
c00183d3:	83 c1 04             	add    ecx,0x4
c00183d6:	66 01 02             	add    WORD PTR [edx],ax
c00183d9:	83 c2 02             	add    edx,0x2
c00183dc:	39 d7                	cmp    edi,edx
c00183de:	75 e0                	jne    c00183c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00183e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00183e3:	50                   	push   eax
c00183e4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00183e7:	29 f0                	sub    eax,esi
c00183e9:	c1 e0 02             	shl    eax,0x2
c00183ec:	50                   	push   eax
c00183ed:	8d 04 b2             	lea    eax,[edx+esi*4]
c00183f0:	50                   	push   eax
c00183f1:	52                   	push   edx
c00183f2:	e8 09 80 fe ff       	call   c0000400 <memmove>
c00183f7:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00183fa:	83 c4 10             	add    esp,0x10
c00183fd:	89 f0                	mov    eax,esi
c00183ff:	5b                   	pop    ebx
c0018400:	5e                   	pop    esi
c0018401:	5f                   	pop    edi
c0018402:	c3                   	ret    
c0018403:	90                   	nop

c0018404 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018404:	57                   	push   edi
c0018405:	56                   	push   esi
c0018406:	53                   	push   ebx
c0018407:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001840b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001840f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018413:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018419:	39 06                	cmp    DWORD PTR [esi],eax
c001841b:	74 13                	je     c0018430 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001841d:	83 ec 0c             	sub    esp,0xc
c0018420:	68 bc f0 01 c0       	push   0xc001f0bc
c0018425:	e8 21 83 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001842a:	83 c4 10             	add    esp,0x10
c001842d:	8d 76 00             	lea    esi,[esi+0x0]
c0018430:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018436:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018439:	74 11                	je     c001844c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001843b:	83 ec 0c             	sub    esp,0xc
c001843e:	68 f7 f0 01 c0       	push   0xc001f0f7
c0018443:	e8 03 83 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0018448:	83 c4 10             	add    esp,0x10
c001844b:	90                   	nop
c001844c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018452:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018455:	74 11                	je     c0018468 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018457:	83 ec 0c             	sub    esp,0xc
c001845a:	68 f7 f0 01 c0       	push   0xc001f0f7
c001845f:	e8 e7 82 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0018464:	83 c4 10             	add    esp,0x10
c0018467:	90                   	nop
c0018468:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001846b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001846f:	7e 07                	jle    c0018478 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018471:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018475:	8d 76 00             	lea    esi,[esi+0x0]
c0018478:	85 ff                	test   edi,edi
c001847a:	7e 1c                	jle    c0018498 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001847c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018483:	31 c0                	xor    eax,eax
c0018485:	8d 76 00             	lea    esi,[esi+0x0]
c0018488:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001848b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001848e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018491:	83 c0 04             	add    eax,0x4
c0018494:	39 c1                	cmp    ecx,eax
c0018496:	75 f0                	jne    c0018488 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018498:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001849b:	50                   	push   eax
c001849c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001849f:	29 f8                	sub    eax,edi
c00184a1:	c1 e0 02             	shl    eax,0x2
c00184a4:	50                   	push   eax
c00184a5:	8d 04 ba             	lea    eax,[edx+edi*4]
c00184a8:	50                   	push   eax
c00184a9:	52                   	push   edx
c00184aa:	e8 51 7f fe ff       	call   c0000400 <memmove>
c00184af:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00184b2:	83 c4 10             	add    esp,0x10
c00184b5:	89 f8                	mov    eax,edi
c00184b7:	5b                   	pop    ebx
c00184b8:	5e                   	pop    esi
c00184b9:	5f                   	pop    edi
c00184ba:	c3                   	ret    
c00184bb:	90                   	nop

c00184bc <PCI::open(int, int, void*)>:
c00184bc:	83 ec 18             	sub    esp,0x18
c00184bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184c7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00184cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00184cf:	50                   	push   eax
c00184d0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00184d3:	31 c0                	xor    eax,eax
c00184d5:	83 c4 1c             	add    esp,0x1c
c00184d8:	c3                   	ret    
c00184d9:	90                   	nop

c00184da <PCI::close(int, int, void*)>:
c00184da:	31 c0                	xor    eax,eax
c00184dc:	c3                   	ret    
c00184dd:	90                   	nop

c00184de <PCI::PCI()>:
c00184de:	83 ec 0c             	sub    esp,0xc
c00184e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184e5:	83 ec 08             	sub    esp,0x8
c00184e8:	68 13 f1 01 c0       	push   0xc001f113
c00184ed:	50                   	push   eax
c00184ee:	e8 9d 34 ff ff       	call   c000b990 <Bus::Bus(char const*)>
c00184f3:	83 c4 10             	add    esp,0x10
c00184f6:	ba bc f1 01 c0       	mov    edx,0xc001f1bc
c00184fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ff:	89 10                	mov    DWORD PTR [eax],edx
c0018501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018505:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001850f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018513:	a3 c0 47 02 c0       	mov    ds:0xc00247c0,eax
c0018518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001851c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018522:	31 d2                	xor    edx,edx
c0018524:	88 c2                	mov    dl,al
c0018526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001852a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018535:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001853b:	31 d2                	xor    edx,edx
c001853d:	88 c2                	mov    dl,al
c001853f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018543:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001854c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018552:	8d 50 01             	lea    edx,[eax+0x1]
c0018555:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018559:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001855f:	31 d2                	xor    edx,edx
c0018561:	88 c2                	mov    dl,al
c0018563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018567:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001856b:	83 c9 c0             	or     ecx,0xffffffc0
c001856e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018572:	90                   	nop
c0018573:	83 c4 0c             	add    esp,0xc
c0018576:	c3                   	ret    
c0018577:	90                   	nop

c0018578 <PCI::readBAR8(unsigned int, int)>:
c0018578:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001857c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018580:	f6 c2 01             	test   dl,0x1
c0018583:	74 07                	je     c001858c <PCI::readBAR8(unsigned int, int)+0x14>
c0018585:	83 e2 fc             	and    edx,0xfffffffc
c0018588:	01 c2                	add    edx,eax
c001858a:	ec                   	in     al,dx
c001858b:	c3                   	ret    
c001858c:	83 e2 f0             	and    edx,0xfffffff0
c001858f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018592:	c3                   	ret    
c0018593:	90                   	nop

c0018594 <PCI::readBAR16(unsigned int, int)>:
c0018594:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001859c:	f6 c2 01             	test   dl,0x1
c001859f:	74 08                	je     c00185a9 <PCI::readBAR16(unsigned int, int)+0x15>
c00185a1:	83 e2 fc             	and    edx,0xfffffffc
c00185a4:	01 c2                	add    edx,eax
c00185a6:	66 ed                	in     ax,dx
c00185a8:	c3                   	ret    
c00185a9:	83 e2 f0             	and    edx,0xfffffff0
c00185ac:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00185b0:	c3                   	ret    
c00185b1:	90                   	nop

c00185b2 <PCI::readBAR32(unsigned int, int)>:
c00185b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185ba:	f6 c2 01             	test   dl,0x1
c00185bd:	74 07                	je     c00185c6 <PCI::readBAR32(unsigned int, int)+0x14>
c00185bf:	83 e2 fc             	and    edx,0xfffffffc
c00185c2:	01 c2                	add    edx,eax
c00185c4:	ed                   	in     eax,dx
c00185c5:	c3                   	ret    
c00185c6:	83 e2 f0             	and    edx,0xfffffff0
c00185c9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00185cc:	c3                   	ret    
c00185cd:	90                   	nop

c00185ce <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00185ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185da:	f6 c2 01             	test   dl,0x1
c00185dd:	74 07                	je     c00185e6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00185df:	83 e2 fc             	and    edx,0xfffffffc
c00185e2:	01 ca                	add    edx,ecx
c00185e4:	ee                   	out    dx,al
c00185e5:	c3                   	ret    
c00185e6:	83 e2 f0             	and    edx,0xfffffff0
c00185e9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00185ec:	c3                   	ret    
c00185ed:	90                   	nop

c00185ee <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00185ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185fa:	f6 c2 01             	test   dl,0x1
c00185fd:	74 08                	je     c0018607 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00185ff:	83 e2 fc             	and    edx,0xfffffffc
c0018602:	01 ca                	add    edx,ecx
c0018604:	66 ef                	out    dx,ax
c0018606:	c3                   	ret    
c0018607:	83 e2 f0             	and    edx,0xfffffff0
c001860a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001860e:	c3                   	ret    
c001860f:	90                   	nop

c0018610 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018618:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001861c:	f6 c2 01             	test   dl,0x1
c001861f:	74 07                	je     c0018628 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018621:	83 e2 fc             	and    edx,0xfffffffc
c0018624:	01 ca                	add    edx,ecx
c0018626:	ef                   	out    dx,eax
c0018627:	c3                   	ret    
c0018628:	83 e2 f0             	and    edx,0xfffffff0
c001862b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001862e:	c3                   	ret    
c001862f:	90                   	nop

c0018630 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018630:	55                   	push   ebp
c0018631:	57                   	push   edi
c0018632:	56                   	push   esi
c0018633:	53                   	push   ebx
c0018634:	83 ec 0c             	sub    esp,0xc
c0018637:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001863b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001863f:	89 f0                	mov    eax,esi
c0018641:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018645:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018649:	3c 07                	cmp    al,0x7
c001864b:	76 10                	jbe    c001865d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001864d:	83 ec 0c             	sub    esp,0xc
c0018650:	68 1b f1 01 c0       	push   0xc001f11b
c0018655:	e8 f1 80 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001865a:	83 c4 10             	add    esp,0x10
c001865d:	80 fb 0f             	cmp    bl,0xf
c0018660:	76 10                	jbe    c0018672 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018662:	83 ec 0c             	sub    esp,0xc
c0018665:	68 4b f1 01 c0       	push   0xc001f14b
c001866a:	e8 dc 80 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001866f:	83 c4 10             	add    esp,0x10
c0018672:	8d 04 36             	lea    eax,[esi+esi*1]
c0018675:	ba f8 0c 00 00       	mov    edx,0xcf8
c001867a:	83 c8 f0             	or     eax,0xfffffff0
c001867d:	ee                   	out    dx,al
c001867e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018683:	89 e8                	mov    eax,ebp
c0018685:	ee                   	out    dx,al
c0018686:	83 c4 0c             	add    esp,0xc
c0018689:	89 d8                	mov    eax,ebx
c001868b:	66 81 e7 fc 00       	and    di,0xfc
c0018690:	5b                   	pop    ebx
c0018691:	c1 e0 08             	shl    eax,0x8
c0018694:	5e                   	pop    esi
c0018695:	09 f8                	or     eax,edi
c0018697:	5f                   	pop    edi
c0018698:	66 0d 00 c0          	or     ax,0xc000
c001869c:	5d                   	pop    ebp
c001869d:	c3                   	ret    

c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001869e:	57                   	push   edi
c001869f:	56                   	push   esi
c00186a0:	53                   	push   ebx
c00186a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00186a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186a9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00186af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186b3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00186b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186bb:	83 ff 01             	cmp    edi,0x1
c00186be:	75 3e                	jne    c00186fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00186c0:	89 de                	mov    esi,ebx
c00186c2:	0f b6 c0             	movzx  eax,al
c00186c5:	81 e6 fc 00 00 00    	and    esi,0xfc
c00186cb:	c1 e0 10             	shl    eax,0x10
c00186ce:	0f b6 c9             	movzx  ecx,cl
c00186d1:	09 f0                	or     eax,esi
c00186d3:	c1 e1 08             	shl    ecx,0x8
c00186d6:	0f b6 d2             	movzx  edx,dl
c00186d9:	09 c8                	or     eax,ecx
c00186db:	c1 e2 0b             	shl    edx,0xb
c00186de:	09 d0                	or     eax,edx
c00186e0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186e5:	0d 00 00 00 80       	or     eax,0x80000000
c00186ea:	ef                   	out    dx,eax
c00186eb:	ba fc 0c 00 00       	mov    edx,0xcfc
c00186f0:	ed                   	in     eax,dx
c00186f1:	83 e3 02             	and    ebx,0x2
c00186f4:	0f b6 cb             	movzx  ecx,bl
c00186f7:	c1 e1 03             	shl    ecx,0x3
c00186fa:	d3 e8                	shr    eax,cl
c00186fc:	eb 43                	jmp    c0018741 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00186fe:	83 ff 02             	cmp    edi,0x2
c0018701:	75 2c                	jne    c001872f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018703:	83 ec 0c             	sub    esp,0xc
c0018706:	0f b6 c9             	movzx  ecx,cl
c0018709:	0f b6 d2             	movzx  edx,dl
c001870c:	0f b6 fb             	movzx  edi,bl
c001870f:	0f b6 c0             	movzx  eax,al
c0018712:	57                   	push   edi
c0018713:	51                   	push   ecx
c0018714:	52                   	push   edx
c0018715:	50                   	push   eax
c0018716:	56                   	push   esi
c0018717:	e8 14 ff ff ff       	call   c0018630 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001871c:	89 c2                	mov    edx,eax
c001871e:	ed                   	in     eax,dx
c001871f:	83 e3 02             	and    ebx,0x2
c0018722:	83 c4 20             	add    esp,0x20
c0018725:	0f b6 cb             	movzx  ecx,bl
c0018728:	c1 e1 03             	shl    ecx,0x3
c001872b:	d3 e8                	shr    eax,cl
c001872d:	eb 12                	jmp    c0018741 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001872f:	83 ec 0c             	sub    esp,0xc
c0018732:	68 7b f1 01 c0       	push   0xc001f17b
c0018737:	e8 0f 80 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001873c:	83 c4 10             	add    esp,0x10
c001873f:	31 c0                	xor    eax,eax
c0018741:	5b                   	pop    ebx
c0018742:	5e                   	pop    esi
c0018743:	5f                   	pop    edi
c0018744:	c3                   	ret    
c0018745:	90                   	nop

c0018746 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018746:	83 ec 18             	sub    esp,0x18
c0018749:	6a 00                	push   0x0
c001874b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018750:	50                   	push   eax
c0018751:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018756:	50                   	push   eax
c0018757:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001875c:	50                   	push   eax
c001875d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018761:	e8 38 ff ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018766:	83 c4 2c             	add    esp,0x2c
c0018769:	c3                   	ret    

c001876a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001876a:	83 ec 18             	sub    esp,0x18
c001876d:	6a 0e                	push   0xe
c001876f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018774:	50                   	push   eax
c0018775:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001877a:	50                   	push   eax
c001877b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018780:	50                   	push   eax
c0018781:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018785:	e8 14 ff ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001878a:	83 c4 2c             	add    esp,0x2c
c001878d:	0f b6 c0             	movzx  eax,al
c0018790:	c3                   	ret    
c0018791:	90                   	nop

c0018792 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018792:	55                   	push   ebp
c0018793:	57                   	push   edi
c0018794:	56                   	push   esi
c0018795:	53                   	push   ebx
c0018796:	83 ec 18             	sub    esp,0x18
c0018799:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001879e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00187a3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00187a8:	6a 0a                	push   0xa
c00187aa:	56                   	push   esi
c00187ab:	55                   	push   ebp
c00187ac:	57                   	push   edi
c00187ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187b1:	e8 e8 fe ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187b6:	83 c4 14             	add    esp,0x14
c00187b9:	89 c3                	mov    ebx,eax
c00187bb:	6a 0a                	push   0xa
c00187bd:	0f b6 db             	movzx  ebx,bl
c00187c0:	56                   	push   esi
c00187c1:	55                   	push   ebp
c00187c2:	57                   	push   edi
c00187c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187c7:	e8 d2 fe ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187cc:	83 c4 2c             	add    esp,0x2c
c00187cf:	25 00 ff 00 00       	and    eax,0xff00
c00187d4:	09 d8                	or     eax,ebx
c00187d6:	5b                   	pop    ebx
c00187d7:	5e                   	pop    esi
c00187d8:	5f                   	pop    edi
c00187d9:	5d                   	pop    ebp
c00187da:	c3                   	ret    
c00187db:	90                   	nop

c00187dc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00187dc:	83 ec 18             	sub    esp,0x18
c00187df:	6a 08                	push   0x8
c00187e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187e6:	50                   	push   eax
c00187e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ec:	50                   	push   eax
c00187ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187f2:	50                   	push   eax
c00187f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187f7:	e8 a2 fe ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187fc:	83 c4 2c             	add    esp,0x2c
c00187ff:	0f b6 c4             	movzx  eax,ah
c0018802:	c3                   	ret    
c0018803:	90                   	nop

c0018804 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018804:	83 ec 18             	sub    esp,0x18
c0018807:	6a 08                	push   0x8
c0018809:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001880e:	50                   	push   eax
c001880f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018814:	50                   	push   eax
c0018815:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881a:	50                   	push   eax
c001881b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001881f:	e8 7a fe ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018824:	83 c4 2c             	add    esp,0x2c
c0018827:	c3                   	ret    

c0018828 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018828:	83 ec 18             	sub    esp,0x18
c001882b:	6a 3c                	push   0x3c
c001882d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018832:	50                   	push   eax
c0018833:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018838:	50                   	push   eax
c0018839:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001883e:	50                   	push   eax
c001883f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018843:	e8 56 fe ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018848:	83 c4 2c             	add    esp,0x2c
c001884b:	c3                   	ret    

c001884c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001884c:	83 ec 18             	sub    esp,0x18
c001884f:	6a 18                	push   0x18
c0018851:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018856:	50                   	push   eax
c0018857:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001885c:	50                   	push   eax
c001885d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018862:	50                   	push   eax
c0018863:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018867:	e8 32 fe ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001886c:	83 c4 2c             	add    esp,0x2c
c001886f:	0f b6 c4             	movzx  eax,ah
c0018872:	c3                   	ret    
c0018873:	90                   	nop

c0018874 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018874:	55                   	push   ebp
c0018875:	57                   	push   edi
c0018876:	56                   	push   esi
c0018877:	53                   	push   ebx
c0018878:	83 ec 28             	sub    esp,0x28
c001887b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001887f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018884:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018889:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001888e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018895:	8d 43 12             	lea    eax,[ebx+0x12]
c0018898:	83 c3 10             	add    ebx,0x10
c001889b:	0f b6 c0             	movzx  eax,al
c001889e:	0f b6 db             	movzx  ebx,bl
c00188a1:	50                   	push   eax
c00188a2:	51                   	push   ecx
c00188a3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00188a7:	57                   	push   edi
c00188a8:	55                   	push   ebp
c00188a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188ad:	e8 ec fd ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188b2:	83 c4 14             	add    esp,0x14
c00188b5:	89 c6                	mov    esi,eax
c00188b7:	53                   	push   ebx
c00188b8:	c1 e6 10             	shl    esi,0x10
c00188bb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00188bf:	51                   	push   ecx
c00188c0:	57                   	push   edi
c00188c1:	55                   	push   ebp
c00188c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188c6:	e8 d3 fd ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188cb:	83 c4 3c             	add    esp,0x3c
c00188ce:	0f b7 c0             	movzx  eax,ax
c00188d1:	5b                   	pop    ebx
c00188d2:	09 f0                	or     eax,esi
c00188d4:	5e                   	pop    esi
c00188d5:	5f                   	pop    edi
c00188d6:	5d                   	pop    ebp
c00188d7:	c3                   	ret    

c00188d8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00188d8:	55                   	push   ebp
c00188d9:	57                   	push   edi
c00188da:	56                   	push   esi
c00188db:	53                   	push   ebx
c00188dc:	83 ec 0c             	sub    esp,0xc
c00188df:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00188e3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00188e7:	89 f5                	mov    ebp,esi
c00188e9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00188ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00188f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00188fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00188ff:	83 f9 01             	cmp    ecx,0x1
c0018902:	75 5d                	jne    c0018961 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018904:	0f b6 c8             	movzx  ecx,al
c0018907:	0f b6 d2             	movzx  edx,dl
c001890a:	c1 e1 10             	shl    ecx,0x10
c001890d:	c1 e2 0b             	shl    edx,0xb
c0018910:	89 f0                	mov    eax,esi
c0018912:	25 fc 00 00 00       	and    eax,0xfc
c0018917:	09 c1                	or     ecx,eax
c0018919:	89 e8                	mov    eax,ebp
c001891b:	0f b6 c0             	movzx  eax,al
c001891e:	c1 e0 08             	shl    eax,0x8
c0018921:	09 c1                	or     ecx,eax
c0018923:	09 d1                	or     ecx,edx
c0018925:	ba f8 0c 00 00       	mov    edx,0xcf8
c001892a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018930:	89 c8                	mov    eax,ecx
c0018932:	ef                   	out    dx,eax
c0018933:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018938:	ed                   	in     eax,dx
c0018939:	0f b7 db             	movzx  ebx,bx
c001893c:	83 e6 02             	and    esi,0x2
c001893f:	74 0a                	je     c001894b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018941:	0f b7 d0             	movzx  edx,ax
c0018944:	c1 e3 10             	shl    ebx,0x10
c0018947:	09 d3                	or     ebx,edx
c0018949:	eb 05                	jmp    c0018950 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001894b:	66 31 c0             	xor    ax,ax
c001894e:	09 c3                	or     ebx,eax
c0018950:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018955:	89 c8                	mov    eax,ecx
c0018957:	ef                   	out    dx,eax
c0018958:	ba fc 0c 00 00       	mov    edx,0xcfc
c001895d:	89 d8                	mov    eax,ebx
c001895f:	eb 41                	jmp    c00189a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018961:	83 f9 02             	cmp    ecx,0x2
c0018964:	75 45                	jne    c00189ab <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018966:	83 ec 0c             	sub    esp,0xc
c0018969:	0f b6 d2             	movzx  edx,dl
c001896c:	89 f1                	mov    ecx,esi
c001896e:	0f b6 c0             	movzx  eax,al
c0018971:	0f b6 f1             	movzx  esi,cl
c0018974:	89 e9                	mov    ecx,ebp
c0018976:	56                   	push   esi
c0018977:	0f b6 c9             	movzx  ecx,cl
c001897a:	51                   	push   ecx
c001897b:	52                   	push   edx
c001897c:	50                   	push   eax
c001897d:	57                   	push   edi
c001897e:	e8 ad fc ff ff       	call   c0018630 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018983:	89 c2                	mov    edx,eax
c0018985:	ed                   	in     eax,dx
c0018986:	83 c4 20             	add    esp,0x20
c0018989:	0f b7 db             	movzx  ebx,bx
c001898c:	f6 c2 02             	test   dl,0x2
c001898f:	74 0c                	je     c001899d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018991:	0f b7 c8             	movzx  ecx,ax
c0018994:	89 d8                	mov    eax,ebx
c0018996:	c1 e0 10             	shl    eax,0x10
c0018999:	09 c8                	or     eax,ecx
c001899b:	eb 05                	jmp    c00189a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001899d:	66 31 c0             	xor    ax,ax
c00189a0:	09 d8                	or     eax,ebx
c00189a2:	ef                   	out    dx,eax
c00189a3:	83 c4 0c             	add    esp,0xc
c00189a6:	5b                   	pop    ebx
c00189a7:	5e                   	pop    esi
c00189a8:	5f                   	pop    edi
c00189a9:	5d                   	pop    ebp
c00189aa:	c3                   	ret    
c00189ab:	c7 44 24 20 7b f1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f17b
c00189b3:	83 c4 0c             	add    esp,0xc
c00189b6:	5b                   	pop    ebx
c00189b7:	5e                   	pop    esi
c00189b8:	5f                   	pop    edi
c00189b9:	5d                   	pop    ebp
c00189ba:	e9 8c 7d ff ff       	jmp    c001074b <Krnl::panic(char const*)>
c00189bf:	90                   	nop

c00189c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00189c0:	55                   	push   ebp
c00189c1:	57                   	push   edi
c00189c2:	56                   	push   esi
c00189c3:	53                   	push   ebx
c00189c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00189ca:	80 3d cc 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247cc,0x0
c00189d1:	0f 85 84 00 00 00    	jne    c0018a5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00189d7:	83 ec 0c             	sub    esp,0xc
c00189da:	68 14 01 00 00       	push   0x114
c00189df:	e8 89 f4 fe ff       	call   c0007e6d <malloc>
c00189e4:	83 c4 0c             	add    esp,0xc
c00189e7:	89 c3                	mov    ebx,eax
c00189e9:	ff 35 10 3e 02 c0    	push   DWORD PTR ds:0xc0023e10
c00189ef:	68 81 f1 01 c0       	push   0xc001f181
c00189f4:	50                   	push   eax
c00189f5:	e8 78 27 ff ff       	call   c000b172 <File::File(char const*, Process*)>
c00189fa:	5a                   	pop    edx
c00189fb:	59                   	pop    ecx
c00189fc:	6a 01                	push   0x1
c00189fe:	53                   	push   ebx
c00189ff:	e8 2e 28 ff ff       	call   c000b232 <File::open(FileOpenMode)>
c0018a04:	83 c4 0c             	add    esp,0xc
c0018a07:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a0b:	50                   	push   eax
c0018a0c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a10:	50                   	push   eax
c0018a11:	53                   	push   ebx
c0018a12:	e8 c7 2a ff ff       	call   c000b4de <File::stat(unsigned long long*, bool*)>
c0018a17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a1b:	40                   	inc    eax
c0018a1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a1f:	e8 49 f4 fe ff       	call   c0007e6d <malloc>
c0018a24:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a28:	a3 c8 47 02 c0       	mov    ds:0xc00247c8,eax
c0018a2d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018a31:	5e                   	pop    esi
c0018a32:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018a34:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018a38:	51                   	push   ecx
c0018a39:	50                   	push   eax
c0018a3a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a3e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a42:	53                   	push   ebx
c0018a43:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a46:	83 c4 14             	add    esp,0x14
c0018a49:	53                   	push   ebx
c0018a4a:	e8 41 28 ff ff       	call   c000b290 <File::close()>
c0018a4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a53:	83 c4 10             	add    esp,0x10
c0018a56:	a3 c4 47 02 c0       	mov    ds:0xc00247c4,eax
c0018a5b:	a1 c4 47 02 c0       	mov    eax,ds:0xc00247c4
c0018a60:	8b 15 c8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247c8
c0018a66:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a69:	31 ff                	xor    edi,edi
c0018a6b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018a73:	31 f6                	xor    esi,esi
c0018a75:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018a7a:	31 db                	xor    ebx,ebx
c0018a7c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018a84:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018a89:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018a90:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018a94:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018a9b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018a9f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018aa2:	0f 8e 6b 01 00 00    	jle    c0018c13 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018aa8:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018aab:	d4 40                	aam    0x40
c0018aad:	d5 39                	aad    0x39
c0018aaf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ab3:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018ab7:	d4 40                	aam    0x40
c0018ab9:	d5 39                	aad    0x39
c0018abb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018abf:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018ac3:	d4 40                	aam    0x40
c0018ac5:	d5 39                	aad    0x39
c0018ac7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018acb:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018acf:	d4 40                	aam    0x40
c0018ad1:	d5 39                	aad    0x39
c0018ad3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018ad7:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018adb:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018adf:	3c 56                	cmp    al,0x56
c0018ae1:	74 45                	je     c0018b28 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018ae3:	d4 40                	aam    0x40
c0018ae5:	d5 39                	aad    0x39
c0018ae7:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018aea:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018aee:	0f b6 c9             	movzx  ecx,cl
c0018af1:	c1 e1 04             	shl    ecx,0x4
c0018af4:	d4 40                	aam    0x40
c0018af6:	d5 39                	aad    0x39
c0018af8:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018afb:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018aff:	0f b6 db             	movzx  ebx,bl
c0018b02:	09 cb                	or     ebx,ecx
c0018b04:	c1 e3 04             	shl    ebx,0x4
c0018b07:	d4 40                	aam    0x40
c0018b09:	d5 39                	aad    0x39
c0018b0b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b0e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018b12:	0f b6 c9             	movzx  ecx,cl
c0018b15:	09 cb                	or     ebx,ecx
c0018b17:	c1 e3 04             	shl    ebx,0x4
c0018b1a:	89 d9                	mov    ecx,ebx
c0018b1c:	d4 40                	aam    0x40
c0018b1e:	d5 39                	aad    0x39
c0018b20:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b23:	0f b6 db             	movzx  ebx,bl
c0018b26:	09 cb                	or     ebx,ecx
c0018b28:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018b2c:	80 f9 44             	cmp    cl,0x44
c0018b2f:	74 47                	je     c0018b78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018b31:	88 c8                	mov    al,cl
c0018b33:	d4 40                	aam    0x40
c0018b35:	d5 39                	aad    0x39
c0018b37:	83 e8 30             	sub    eax,0x30
c0018b3a:	0f b6 e8             	movzx  ebp,al
c0018b3d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018b41:	c1 e5 04             	shl    ebp,0x4
c0018b44:	d4 40                	aam    0x40
c0018b46:	d5 39                	aad    0x39
c0018b48:	83 e8 30             	sub    eax,0x30
c0018b4b:	0f b6 f0             	movzx  esi,al
c0018b4e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018b52:	09 ee                	or     esi,ebp
c0018b54:	c1 e6 04             	shl    esi,0x4
c0018b57:	d4 40                	aam    0x40
c0018b59:	d5 39                	aad    0x39
c0018b5b:	83 e8 30             	sub    eax,0x30
c0018b5e:	0f b6 e8             	movzx  ebp,al
c0018b61:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018b65:	09 ee                	or     esi,ebp
c0018b67:	c1 e6 04             	shl    esi,0x4
c0018b6a:	89 f5                	mov    ebp,esi
c0018b6c:	d4 40                	aam    0x40
c0018b6e:	d5 39                	aad    0x39
c0018b70:	83 e8 30             	sub    eax,0x30
c0018b73:	0f b6 f0             	movzx  esi,al
c0018b76:	09 ee                	or     esi,ebp
c0018b78:	83 c7 10             	add    edi,0x10
c0018b7b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018b7f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b82:	3c 0a                	cmp    al,0xa
c0018b84:	74 09                	je     c0018b8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018b86:	45                   	inc    ebp
c0018b87:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b8a:	75 16                	jne    c0018ba2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018b8c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018b8f:	3c 0a                	cmp    al,0xa
c0018b91:	0f 94 c0             	sete   al
c0018b94:	0f b6 c0             	movzx  eax,al
c0018b97:	01 c7                	add    edi,eax
c0018b99:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018b9e:	75 0c                	jne    c0018bac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018ba0:	eb 15                	jmp    c0018bb7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018ba2:	47                   	inc    edi
c0018ba3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018ba6:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018baa:	eb d3                	jmp    c0018b7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018bac:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018bb1:	0f 85 e8 fe ff ff    	jne    c0018a9f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bb7:	80 f9 44             	cmp    cl,0x44
c0018bba:	74 0b                	je     c0018bc7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018bbc:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018bc1:	0f 85 d8 fe ff ff    	jne    c0018a9f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bc7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018bcb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018bcf:	c1 e1 04             	shl    ecx,0x4
c0018bd2:	83 e8 30             	sub    eax,0x30
c0018bd5:	09 c8                	or     eax,ecx
c0018bd7:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018bdb:	0f 85 be fe ff ff    	jne    c0018a9f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018be1:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018be5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018be9:	c1 e1 04             	shl    ecx,0x4
c0018bec:	83 e8 30             	sub    eax,0x30
c0018bef:	09 c8                	or     eax,ecx
c0018bf1:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018bf5:	0f 85 a4 fe ff ff    	jne    c0018a9f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bfb:	50                   	push   eax
c0018bfc:	50                   	push   eax
c0018bfd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c01:	50                   	push   eax
c0018c02:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c09:	e8 12 7a fe ff       	call   c0000620 <strcpy>
c0018c0e:	83 c4 10             	add    esp,0x10
c0018c11:	eb 15                	jmp    c0018c28 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018c13:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c1a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018c25:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018c28:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c2f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c35:	5b                   	pop    ebx
c0018c36:	5e                   	pop    esi
c0018c37:	5f                   	pop    edi
c0018c38:	5d                   	pop    ebp
c0018c39:	c3                   	ret    

c0018c3a <PCI::checkBus(unsigned char)>:
c0018c3a:	56                   	push   esi
c0018c3b:	53                   	push   ebx
c0018c3c:	31 f6                	xor    esi,esi
c0018c3e:	51                   	push   ecx
c0018c3f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018c43:	0f b6 c3             	movzx  eax,bl
c0018c46:	52                   	push   edx
c0018c47:	56                   	push   esi
c0018c48:	46                   	inc    esi
c0018c49:	50                   	push   eax
c0018c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c4e:	e8 f3 02 00 00       	call   c0018f46 <PCI::checkDevice(unsigned char, unsigned char)>
c0018c53:	83 c4 10             	add    esp,0x10
c0018c56:	83 fe 20             	cmp    esi,0x20
c0018c59:	75 e8                	jne    c0018c43 <PCI::checkBus(unsigned char)+0x9>
c0018c5b:	58                   	pop    eax
c0018c5c:	5b                   	pop    ebx
c0018c5d:	5e                   	pop    esi
c0018c5e:	c3                   	ret    
c0018c5f:	90                   	nop

c0018c60 <PCI::foundDevice(PCIDeviceInfo)>:
c0018c60:	55                   	push   ebp
c0018c61:	57                   	push   edi
c0018c62:	56                   	push   esi
c0018c63:	53                   	push   ebx
c0018c64:	83 ec 1c             	sub    esp,0x1c
c0018c67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018c6b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018c71:	0f 84 52 01 00 00    	je     c0018dc9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c77:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018c7b:	66 81 f9 06 04       	cmp    cx,0x406
c0018c80:	75 2c                	jne    c0018cae <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018c82:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018c87:	50                   	push   eax
c0018c88:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018c8d:	50                   	push   eax
c0018c8e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018c93:	50                   	push   eax
c0018c94:	56                   	push   esi
c0018c95:	e8 b2 fb ff ff       	call   c001884c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018c9a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018c9e:	0f b6 c0             	movzx  eax,al
c0018ca1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018ca5:	83 c4 2c             	add    esp,0x2c
c0018ca8:	5b                   	pop    ebx
c0018ca9:	5e                   	pop    esi
c0018caa:	5f                   	pop    edi
c0018cab:	5d                   	pop    ebp
c0018cac:	eb 8c                	jmp    c0018c3a <PCI::checkBus(unsigned char)>
c0018cae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018cb2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018cb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018cbc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018cc0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018cc4:	88 d3                	mov    bl,dl
c0018cc6:	85 c0                	test   eax,eax
c0018cc8:	74 33                	je     c0018cfd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018cca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018ccd:	85 d2                	test   edx,edx
c0018ccf:	74 28                	je     c0018cf9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018cd1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018cd7:	31 ef                	xor    edi,ebp
c0018cd9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018cdf:	75 18                	jne    c0018cf9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018ce1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018ce5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018ceb:	75 0c                	jne    c0018cf9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018ced:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018cf3:	0f 84 d0 00 00 00    	je     c0018dc9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cfb:	eb c9                	jmp    c0018cc6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018cfd:	66 81 f9 01 06       	cmp    cx,0x601
c0018d02:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d06:	75 19                	jne    c0018d21 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d08:	83 ec 0c             	sub    esp,0xc
c0018d0b:	68 64 01 00 00       	push   0x164
c0018d10:	e8 58 f1 fe ff       	call   c0007e6d <malloc>
c0018d15:	89 c5                	mov    ebp,eax
c0018d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d1a:	e8 47 0e 00 00       	call   c0019b66 <SATABus::SATABus()>
c0018d1f:	eb 1e                	jmp    c0018d3f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018d21:	66 81 f9 01 01       	cmp    cx,0x101
c0018d26:	75 60                	jne    c0018d88 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018d28:	83 ec 0c             	sub    esp,0xc
c0018d2b:	68 70 02 00 00       	push   0x270
c0018d30:	e8 38 f1 fe ff       	call   c0007e6d <malloc>
c0018d35:	89 c5                	mov    ebp,eax
c0018d37:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d3a:	e8 cb 02 00 00       	call   c001900a <IDE::IDE()>
c0018d3f:	58                   	pop    eax
c0018d40:	5a                   	pop    edx
c0018d41:	55                   	push   ebp
c0018d42:	56                   	push   esi
c0018d43:	e8 f4 32 ff ff       	call   c000c03c <Device::addChild(Device*)>
c0018d48:	83 ec 1c             	sub    esp,0x1c
c0018d4b:	b9 09 00 00 00       	mov    ecx,0x9
c0018d50:	fc                   	cld    
c0018d51:	89 e7                	mov    edi,esp
c0018d53:	89 de                	mov    esi,ebx
c0018d55:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d57:	55                   	push   ebp
c0018d58:	e8 25 32 ff ff       	call   c000bf82 <Device::preOpenPCI(PCIDeviceInfo)>
c0018d5d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d60:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018d64:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018d6c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018d74:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018d7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018d7f:	83 c4 4c             	add    esp,0x4c
c0018d82:	5b                   	pop    ebx
c0018d83:	5e                   	pop    esi
c0018d84:	5f                   	pop    edi
c0018d85:	5d                   	pop    ebp
c0018d86:	ff e0                	jmp    eax
c0018d88:	83 ec 0c             	sub    esp,0xc
c0018d8b:	68 58 01 00 00       	push   0x158
c0018d90:	e8 d8 f0 fe ff       	call   c0007e6d <malloc>
c0018d95:	89 c5                	mov    ebp,eax
c0018d97:	58                   	pop    eax
c0018d98:	5a                   	pop    edx
c0018d99:	68 9a f1 01 c0       	push   0xc001f19a
c0018d9e:	55                   	push   ebp
c0018d9f:	e8 36 35 ff ff       	call   c000c2da <DriverlessDevice::DriverlessDevice(char const*)>
c0018da4:	59                   	pop    ecx
c0018da5:	5f                   	pop    edi
c0018da6:	55                   	push   ebp
c0018da7:	56                   	push   esi
c0018da8:	e8 8f 32 ff ff       	call   c000c03c <Device::addChild(Device*)>
c0018dad:	b9 09 00 00 00       	mov    ecx,0x9
c0018db2:	fc                   	cld    
c0018db3:	89 df                	mov    edi,ebx
c0018db5:	89 de                	mov    esi,ebx
c0018db7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018db9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018dbd:	83 c4 2c             	add    esp,0x2c
c0018dc0:	5b                   	pop    ebx
c0018dc1:	5e                   	pop    esi
c0018dc2:	5f                   	pop    edi
c0018dc3:	5d                   	pop    ebp
c0018dc4:	e9 b9 31 ff ff       	jmp    c000bf82 <Device::preOpenPCI(PCIDeviceInfo)>
c0018dc9:	83 c4 1c             	add    esp,0x1c
c0018dcc:	5b                   	pop    ebx
c0018dcd:	5e                   	pop    esi
c0018dce:	5f                   	pop    edi
c0018dcf:	5d                   	pop    ebp
c0018dd0:	c3                   	ret    
c0018dd1:	90                   	nop

c0018dd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018dd2:	55                   	push   ebp
c0018dd3:	57                   	push   edi
c0018dd4:	56                   	push   esi
c0018dd5:	53                   	push   ebx
c0018dd6:	83 ec 68             	sub    esp,0x68
c0018dd9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018ddd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018de4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018de8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018def:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018df4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018df8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018dff:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e04:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e08:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e0d:	6a 0c                	push   0xc
c0018e0f:	57                   	push   edi
c0018e10:	53                   	push   ebx
c0018e11:	56                   	push   esi
c0018e12:	55                   	push   ebp
c0018e13:	e8 86 f8 ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e18:	83 c4 20             	add    esp,0x20
c0018e1b:	57                   	push   edi
c0018e1c:	53                   	push   ebx
c0018e1d:	56                   	push   esi
c0018e1e:	55                   	push   ebp
c0018e1f:	e8 6e f9 ff ff       	call   c0018792 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018e24:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018e29:	57                   	push   edi
c0018e2a:	53                   	push   ebx
c0018e2b:	56                   	push   esi
c0018e2c:	55                   	push   ebp
c0018e2d:	e8 f6 f9 ff ff       	call   c0018828 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018e32:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018e36:	83 c4 14             	add    esp,0x14
c0018e39:	6a 3c                	push   0x3c
c0018e3b:	57                   	push   edi
c0018e3c:	53                   	push   ebx
c0018e3d:	56                   	push   esi
c0018e3e:	55                   	push   ebp
c0018e3f:	e8 5a f8 ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e44:	0f b6 c4             	movzx  eax,ah
c0018e47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018e4b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018e4f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018e53:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c0018e58:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018e5e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018e64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018e68:	83 c4 20             	add    esp,0x20
c0018e6b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e70:	74 30                	je     c0018ea2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e72:	31 c0                	xor    eax,eax
c0018e74:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018e78:	7e 28                	jle    c0018ea2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e7a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018e82:	39 cb                	cmp    ebx,ecx
c0018e84:	75 19                	jne    c0018e9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e86:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018e8e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018e92:	75 0b                	jne    c0018e9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e94:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018e9b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018e9f:	40                   	inc    eax
c0018ea0:	eb d2                	jmp    c0018e74 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018ea2:	31 d2                	xor    edx,edx
c0018ea4:	83 ec 0c             	sub    esp,0xc
c0018ea7:	57                   	push   edi
c0018ea8:	53                   	push   ebx
c0018ea9:	56                   	push   esi
c0018eaa:	52                   	push   edx
c0018eab:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018eaf:	55                   	push   ebp
c0018eb0:	e8 bf f9 ff ff       	call   c0018874 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018eb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018eb9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018ebd:	42                   	inc    edx
c0018ebe:	83 c4 20             	add    esp,0x20
c0018ec1:	83 fa 06             	cmp    edx,0x6
c0018ec4:	75 de                	jne    c0018ea4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018ec6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018ecb:	83 ec 0c             	sub    esp,0xc
c0018ece:	86 e0                	xchg   al,ah
c0018ed0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018ed5:	6a 02                	push   0x2
c0018ed7:	57                   	push   edi
c0018ed8:	53                   	push   ebx
c0018ed9:	56                   	push   esi
c0018eda:	55                   	push   ebp
c0018edb:	e8 be f7 ff ff       	call   c001869e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ee0:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018ee5:	83 c4 20             	add    esp,0x20
c0018ee8:	57                   	push   edi
c0018ee9:	53                   	push   ebx
c0018eea:	56                   	push   esi
c0018eeb:	55                   	push   ebp
c0018eec:	e8 eb f8 ff ff       	call   c00187dc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018ef1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018ef5:	57                   	push   edi
c0018ef6:	53                   	push   ebx
c0018ef7:	56                   	push   esi
c0018ef8:	55                   	push   ebp
c0018ef9:	e8 48 f8 ff ff       	call   c0018746 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018efe:	b9 09 00 00 00       	mov    ecx,0x9
c0018f03:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f08:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f0c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018f10:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f14:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f18:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f1c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018f20:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018f24:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018f28:	83 ec 0c             	sub    esp,0xc
c0018f2b:	fc                   	cld    
c0018f2c:	89 e7                	mov    edi,esp
c0018f2e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018f32:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018f34:	55                   	push   ebp
c0018f35:	e8 26 fd ff ff       	call   c0018c60 <PCI::foundDevice(PCIDeviceInfo)>
c0018f3a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018f40:	5b                   	pop    ebx
c0018f41:	5e                   	pop    esi
c0018f42:	5f                   	pop    edi
c0018f43:	5d                   	pop    ebp
c0018f44:	c3                   	ret    
c0018f45:	90                   	nop

c0018f46 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f46:	55                   	push   ebp
c0018f47:	57                   	push   edi
c0018f48:	56                   	push   esi
c0018f49:	53                   	push   ebx
c0018f4a:	83 ec 0c             	sub    esp,0xc
c0018f4d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f51:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018f56:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018f5b:	6a 00                	push   0x0
c0018f5d:	56                   	push   esi
c0018f5e:	57                   	push   edi
c0018f5f:	55                   	push   ebp
c0018f60:	e8 e1 f7 ff ff       	call   c0018746 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f65:	6a 00                	push   0x0
c0018f67:	56                   	push   esi
c0018f68:	57                   	push   edi
c0018f69:	55                   	push   ebp
c0018f6a:	e8 63 fe ff ff       	call   c0018dd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f6f:	83 c4 20             	add    esp,0x20
c0018f72:	6a 00                	push   0x0
c0018f74:	56                   	push   esi
c0018f75:	57                   	push   edi
c0018f76:	55                   	push   ebp
c0018f77:	e8 ee f7 ff ff       	call   c001876a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f7c:	83 c4 10             	add    esp,0x10
c0018f7f:	84 c0                	test   al,al
c0018f81:	79 27                	jns    c0018faa <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018f83:	bb 01 00 00 00       	mov    ebx,0x1
c0018f88:	53                   	push   ebx
c0018f89:	56                   	push   esi
c0018f8a:	57                   	push   edi
c0018f8b:	55                   	push   ebp
c0018f8c:	e8 b5 f7 ff ff       	call   c0018746 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f91:	83 c4 10             	add    esp,0x10
c0018f94:	66 40                	inc    ax
c0018f96:	74 0c                	je     c0018fa4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018f98:	53                   	push   ebx
c0018f99:	56                   	push   esi
c0018f9a:	57                   	push   edi
c0018f9b:	55                   	push   ebp
c0018f9c:	e8 31 fe ff ff       	call   c0018dd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fa1:	83 c4 10             	add    esp,0x10
c0018fa4:	43                   	inc    ebx
c0018fa5:	83 fb 08             	cmp    ebx,0x8
c0018fa8:	75 de                	jne    c0018f88 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018faa:	83 c4 0c             	add    esp,0xc
c0018fad:	5b                   	pop    ebx
c0018fae:	5e                   	pop    esi
c0018faf:	5f                   	pop    edi
c0018fb0:	5d                   	pop    ebp
c0018fb1:	c3                   	ret    

c0018fb2 <PCI::detect()>:
c0018fb2:	56                   	push   esi
c0018fb3:	53                   	push   ebx
c0018fb4:	53                   	push   ebx
c0018fb5:	31 db                	xor    ebx,ebx
c0018fb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018fbb:	6a 00                	push   0x0
c0018fbd:	6a 00                	push   0x0
c0018fbf:	6a 00                	push   0x0
c0018fc1:	56                   	push   esi
c0018fc2:	e8 a3 f7 ff ff       	call   c001876a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	a8 80                	test   al,0x80
c0018fcc:	75 21                	jne    c0018fef <PCI::detect()+0x3d>
c0018fce:	51                   	push   ecx
c0018fcf:	51                   	push   ecx
c0018fd0:	6a 00                	push   0x0
c0018fd2:	56                   	push   esi
c0018fd3:	e8 62 fc ff ff       	call   c0018c3a <PCI::checkBus(unsigned char)>
c0018fd8:	83 c4 10             	add    esp,0x10
c0018fdb:	eb 24                	jmp    c0019001 <PCI::detect()+0x4f>
c0018fdd:	52                   	push   edx
c0018fde:	52                   	push   edx
c0018fdf:	53                   	push   ebx
c0018fe0:	43                   	inc    ebx
c0018fe1:	56                   	push   esi
c0018fe2:	e8 53 fc ff ff       	call   c0018c3a <PCI::checkBus(unsigned char)>
c0018fe7:	83 c4 10             	add    esp,0x10
c0018fea:	83 fb 08             	cmp    ebx,0x8
c0018fed:	74 12                	je     c0019001 <PCI::detect()+0x4f>
c0018fef:	53                   	push   ebx
c0018ff0:	6a 00                	push   0x0
c0018ff2:	6a 00                	push   0x0
c0018ff4:	56                   	push   esi
c0018ff5:	e8 4c f7 ff ff       	call   c0018746 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ffa:	83 c4 10             	add    esp,0x10
c0018ffd:	66 40                	inc    ax
c0018fff:	74 dc                	je     c0018fdd <PCI::detect()+0x2b>
c0019001:	58                   	pop    eax
c0019002:	5b                   	pop    ebx
c0019003:	5e                   	pop    esi
c0019004:	c3                   	ret    
c0019005:	90                   	nop

c0019006 <IDE::close(int, int, void*)>:
c0019006:	83 c8 ff             	or     eax,0xffffffff
c0019009:	c3                   	ret    

c001900a <IDE::IDE()>:
c001900a:	83 ec 0c             	sub    esp,0xc
c001900d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019011:	83 ec 08             	sub    esp,0x8
c0019014:	68 e0 f1 01 c0       	push   0xc001f1e0
c0019019:	50                   	push   eax
c001901a:	e8 61 33 ff ff       	call   c000c380 <HardDiskController::HardDiskController(char const*)>
c001901f:	83 c4 10             	add    esp,0x10
c0019022:	ba 70 f2 01 c0       	mov    edx,0xc001f270
c0019027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001902b:	89 10                	mov    DWORD PTR [eax],edx
c001902d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019031:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0019038:	90                   	nop
c0019039:	83 c4 0c             	add    esp,0xc
c001903c:	c3                   	ret    
c001903d:	90                   	nop

c001903e <IDE::prepareInterrupt(unsigned char)>:
c001903e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019043:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019047:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001904f:	c3                   	ret    

c0019050 <selectDrive(unsigned char, unsigned char)>:
c0019050:	c3                   	ret    
c0019051:	90                   	nop

c0019052 <IDE::getBase(unsigned char)>:
c0019052:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0019057:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001905b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019063:	c3                   	ret    

c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019064:	55                   	push   ebp
c0019065:	57                   	push   edi
c0019066:	56                   	push   esi
c0019067:	53                   	push   ebx
c0019068:	83 ec 1c             	sub    esp,0x1c
c001906b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001906f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019073:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0019076:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001907a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001907e:	80 f9 03             	cmp    cl,0x3
c0019081:	77 51                	ja     c00190d4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0019083:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019087:	0f b6 f2             	movzx  esi,dl
c001908a:	0f b6 db             	movzx  ebx,bl
c001908d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019090:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019094:	83 ca 80             	or     edx,0xffffff80
c0019097:	0f b6 d2             	movzx  edx,dl
c001909a:	52                   	push   edx
c001909b:	6a 0c                	push   0xc
c001909d:	56                   	push   esi
c001909e:	57                   	push   edi
c001909f:	e8 c0 ff ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190a4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00190a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190ad:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00190b1:	ee                   	out    dx,al
c00190b2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00190b7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00190bb:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00190bf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190c3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00190cb:	83 c4 2c             	add    esp,0x2c
c00190ce:	5b                   	pop    ebx
c00190cf:	5e                   	pop    esi
c00190d0:	5f                   	pop    edi
c00190d1:	5d                   	pop    ebp
c00190d2:	eb 90                	jmp    c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190d4:	80 fb 07             	cmp    bl,0x7
c00190d7:	77 12                	ja     c00190eb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00190d9:	0f b6 d2             	movzx  edx,dl
c00190dc:	0f b6 db             	movzx  ebx,bl
c00190df:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00190e7:	89 da                	mov    edx,ebx
c00190e9:	eb 2f                	jmp    c001911a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00190eb:	80 fb 0d             	cmp    bl,0xd
c00190ee:	77 13                	ja     c0019103 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00190f0:	0f b6 d2             	movzx  edx,dl
c00190f3:	0f b6 db             	movzx  ebx,bl
c00190f6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00190fd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019101:	eb 17                	jmp    c001911a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019103:	80 fb 15             	cmp    bl,0x15
c0019106:	77 13                	ja     c001911b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019108:	0f b6 d2             	movzx  edx,dl
c001910b:	0f b6 db             	movzx  ebx,bl
c001910e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019116:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001911a:	ee                   	out    dx,al
c001911b:	83 c4 1c             	add    esp,0x1c
c001911e:	5b                   	pop    ebx
c001911f:	5e                   	pop    esi
c0019120:	5f                   	pop    edi
c0019121:	5d                   	pop    ebp
c0019122:	c3                   	ret    
c0019123:	90                   	nop

c0019124 <IDE::read(unsigned char, unsigned char)>:
c0019124:	55                   	push   ebp
c0019125:	57                   	push   edi
c0019126:	56                   	push   esi
c0019127:	53                   	push   ebx
c0019128:	83 ec 1c             	sub    esp,0x1c
c001912b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001912f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019133:	8d 43 f8             	lea    eax,[ebx-0x8]
c0019136:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001913a:	3c 03                	cmp    al,0x3
c001913c:	77 43                	ja     c0019181 <IDE::read(unsigned char, unsigned char)+0x5d>
c001913e:	0f b6 f2             	movzx  esi,dl
c0019141:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019144:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019148:	83 c8 80             	or     eax,0xffffff80
c001914b:	0f b6 c0             	movzx  eax,al
c001914e:	50                   	push   eax
c001914f:	6a 0c                	push   0xc
c0019151:	56                   	push   esi
c0019152:	57                   	push   edi
c0019153:	e8 0c ff ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019158:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001915d:	0f b6 c3             	movzx  eax,bl
c0019160:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019164:	ec                   	in     al,dx
c0019165:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019169:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001916e:	52                   	push   edx
c001916f:	6a 0c                	push   0xc
c0019171:	56                   	push   esi
c0019172:	57                   	push   edi
c0019173:	e8 ec fe ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019178:	83 c4 20             	add    esp,0x20
c001917b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001917f:	eb 49                	jmp    c00191ca <IDE::read(unsigned char, unsigned char)+0xa6>
c0019181:	80 fb 07             	cmp    bl,0x7
c0019184:	77 12                	ja     c0019198 <IDE::read(unsigned char, unsigned char)+0x74>
c0019186:	0f b6 d2             	movzx  edx,dl
c0019189:	0f b6 c3             	movzx  eax,bl
c001918c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019194:	89 c2                	mov    edx,eax
c0019196:	eb 31                	jmp    c00191c9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019198:	80 fb 0d             	cmp    bl,0xd
c001919b:	77 13                	ja     c00191b0 <IDE::read(unsigned char, unsigned char)+0x8c>
c001919d:	0f b6 d2             	movzx  edx,dl
c00191a0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00191a7:	0f b6 d3             	movzx  edx,bl
c00191aa:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00191ae:	eb 19                	jmp    c00191c9 <IDE::read(unsigned char, unsigned char)+0xa5>
c00191b0:	31 c0                	xor    eax,eax
c00191b2:	80 fb 15             	cmp    bl,0x15
c00191b5:	77 13                	ja     c00191ca <IDE::read(unsigned char, unsigned char)+0xa6>
c00191b7:	0f b6 d2             	movzx  edx,dl
c00191ba:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00191c2:	0f b6 d3             	movzx  edx,bl
c00191c5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00191c9:	ec                   	in     al,dx
c00191ca:	83 c4 1c             	add    esp,0x1c
c00191cd:	5b                   	pop    ebx
c00191ce:	5e                   	pop    esi
c00191cf:	5f                   	pop    edi
c00191d0:	5d                   	pop    ebp
c00191d1:	c3                   	ret    

c00191d2 <IDE::waitInterrupt(unsigned char)>:
c00191d2:	57                   	push   edi
c00191d3:	56                   	push   esi
c00191d4:	31 f6                	xor    esi,esi
c00191d6:	53                   	push   ebx
c00191d7:	83 ec 10             	sub    esp,0x10
c00191da:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00191de:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00191e2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00191e6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00191eb:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00191f2:	84 db                	test   bl,bl
c00191f4:	75 33                	jne    c0019229 <IDE::waitInterrupt(unsigned char)+0x57>
c00191f6:	52                   	push   edx
c00191f7:	6a 0c                	push   0xc
c00191f9:	50                   	push   eax
c00191fa:	57                   	push   edi
c00191fb:	e8 24 ff ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019200:	83 c4 10             	add    esp,0x10
c0019203:	a8 01                	test   al,0x1
c0019205:	75 2a                	jne    c0019231 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019207:	f7 c6 04 00 00 00    	test   esi,0x4
c001920d:	75 12                	jne    c0019221 <IDE::waitInterrupt(unsigned char)+0x4f>
c001920f:	83 fe 32             	cmp    esi,0x32
c0019212:	7e 0d                	jle    c0019221 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019214:	83 ec 0c             	sub    esp,0xc
c0019217:	6a 64                	push   0x64
c0019219:	e8 82 ab ff ff       	call   c0013da0 <milliTenthSleep(unsigned int)>
c001921e:	83 c4 10             	add    esp,0x10
c0019221:	83 fe 3c             	cmp    esi,0x3c
c0019224:	74 0b                	je     c0019231 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019226:	46                   	inc    esi
c0019227:	eb bd                	jmp    c00191e6 <IDE::waitInterrupt(unsigned char)+0x14>
c0019229:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019231:	83 c4 10             	add    esp,0x10
c0019234:	88 d8                	mov    al,bl
c0019236:	5b                   	pop    ebx
c0019237:	5e                   	pop    esi
c0019238:	5f                   	pop    edi
c0019239:	c3                   	ret    

c001923a <ideChannel0IRQHandler(regs*, void*)>:
c001923a:	83 ec 10             	sub    esp,0x10
c001923d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019241:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019248:	6a 07                	push   0x7
c001924a:	6a 00                	push   0x0
c001924c:	50                   	push   eax
c001924d:	e8 d2 fe ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019252:	83 c4 1c             	add    esp,0x1c
c0019255:	c3                   	ret    

c0019256 <ideChannel1IRQHandler(regs*, void*)>:
c0019256:	83 ec 10             	sub    esp,0x10
c0019259:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001925d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019264:	6a 07                	push   0x7
c0019266:	6a 01                	push   0x1
c0019268:	50                   	push   eax
c0019269:	e8 b6 fe ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c001926e:	83 c4 1c             	add    esp,0x1c
c0019271:	c3                   	ret    

c0019272 <IDE::enableIRQs(unsigned char, bool)>:
c0019272:	57                   	push   edi
c0019273:	56                   	push   esi
c0019274:	be 04 00 00 00       	mov    esi,0x4
c0019279:	53                   	push   ebx
c001927a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001927f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019283:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019288:	0f 94 c0             	sete   al
c001928b:	01 c0                	add    eax,eax
c001928d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019294:	0f b6 c0             	movzx  eax,al
c0019297:	50                   	push   eax
c0019298:	6a 0c                	push   0xc
c001929a:	57                   	push   edi
c001929b:	53                   	push   ebx
c001929c:	e8 c3 fd ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192a1:	83 c4 10             	add    esp,0x10
c00192a4:	50                   	push   eax
c00192a5:	6a 0c                	push   0xc
c00192a7:	57                   	push   edi
c00192a8:	53                   	push   ebx
c00192a9:	e8 76 fe ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	4e                   	dec    esi
c00192b2:	75 f0                	jne    c00192a4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00192b4:	5b                   	pop    ebx
c00192b5:	5e                   	pop    esi
c00192b6:	5f                   	pop    edi
c00192b7:	c3                   	ret    

c00192b8 <IDE::open(int, int, void*)>:
c00192b8:	55                   	push   ebp
c00192b9:	57                   	push   edi
c00192ba:	56                   	push   esi
c00192bb:	53                   	push   ebx
c00192bc:	83 ec 1c             	sub    esp,0x1c
c00192bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00192c3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00192cc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00192d5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00192dc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00192e3:	0f 85 b0 02 00 00    	jne    c0019599 <IDE::open(int, int, void*)+0x2e1>
c00192e9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00192ef:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00192f3:	83 e0 7f             	and    eax,0x7f
c00192f6:	3c 05                	cmp    al,0x5
c00192f8:	74 04                	je     c00192fe <IDE::open(int, int, void*)+0x46>
c00192fa:	3c 0f                	cmp    al,0xf
c00192fc:	75 32                	jne    c0019330 <IDE::open(int, int, void*)+0x78>
c00192fe:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019304:	83 e0 fc             	and    eax,0xfffffffc
c0019307:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001930e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019314:	83 e0 fc             	and    eax,0xfffffffc
c0019317:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001931e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019324:	83 e0 fc             	and    eax,0xfffffffc
c0019327:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001932e:	eb 14                	jmp    c0019344 <IDE::open(int, int, void*)+0x8c>
c0019330:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001933a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019344:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001934b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019356:	89 c6                	mov    esi,eax
c0019358:	bf f8 0c 00 00       	mov    edi,0xcf8
c001935d:	c1 e6 10             	shl    esi,0x10
c0019360:	89 e8                	mov    eax,ebp
c0019362:	89 fa                	mov    edx,edi
c0019364:	c1 e0 0b             	shl    eax,0xb
c0019367:	09 f0                	or     eax,esi
c0019369:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019370:	c1 e6 08             	shl    esi,0x8
c0019373:	09 c6                	or     esi,eax
c0019375:	89 f0                	mov    eax,esi
c0019377:	0d 08 00 00 80       	or     eax,0x80000008
c001937c:	ef                   	out    dx,eax
c001937d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019382:	89 ca                	mov    edx,ecx
c0019384:	ed                   	in     eax,dx
c0019385:	c1 e8 10             	shr    eax,0x10
c0019388:	3d ff ff 00 00       	cmp    eax,0xffff
c001938d:	0f 84 f5 00 00 00    	je     c0019488 <IDE::open(int, int, void*)+0x1d0>
c0019393:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019399:	89 fa                	mov    edx,edi
c001939b:	89 f0                	mov    eax,esi
c001939d:	ef                   	out    dx,eax
c001939e:	b0 fe                	mov    al,0xfe
c00193a0:	89 ca                	mov    edx,ecx
c00193a2:	ee                   	out    dx,al
c00193a3:	89 f0                	mov    eax,esi
c00193a5:	89 fa                	mov    edx,edi
c00193a7:	ef                   	out    dx,eax
c00193a8:	89 ca                	mov    edx,ecx
c00193aa:	ed                   	in     eax,dx
c00193ab:	3c fe                	cmp    al,0xfe
c00193ad:	0f 85 a9 00 00 00    	jne    c001945c <IDE::open(int, int, void*)+0x1a4>
c00193b3:	8b 15 18 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020918
c00193b9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c00193c0:	74 33                	je     c00193f5 <IDE::open(int, int, void*)+0x13d>
c00193c2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00193c8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00193cc:	40                   	inc    eax
c00193cd:	83 ec 0c             	sub    esp,0xc
c00193d0:	0f b6 c0             	movzx  eax,al
c00193d3:	50                   	push   eax
c00193d4:	55                   	push   ebp
c00193d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193d9:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c00193df:	51                   	push   ecx
c00193e0:	e8 e3 59 ff ff       	call   c000edc8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00193e5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00193ea:	83 c4 1c             	add    esp,0x1c
c00193ed:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00193f3:	eb 0a                	jmp    c00193ff <IDE::open(int, int, void*)+0x147>
c00193f5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00193ff:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019406:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001940d:	c1 e1 10             	shl    ecx,0x10
c0019410:	c1 e0 08             	shl    eax,0x8
c0019413:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019418:	09 c1                	or     ecx,eax
c001941a:	89 fa                	mov    edx,edi
c001941c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0019423:	c1 e0 0b             	shl    eax,0xb
c0019426:	09 c1                	or     ecx,eax
c0019428:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001942e:	89 c8                	mov    eax,ecx
c0019430:	ef                   	out    dx,eax
c0019431:	be fc 0c 00 00       	mov    esi,0xcfc
c0019436:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001943c:	89 f2                	mov    edx,esi
c001943e:	ee                   	out    dx,al
c001943f:	89 c8                	mov    eax,ecx
c0019441:	89 fa                	mov    edx,edi
c0019443:	ef                   	out    dx,eax
c0019444:	89 f2                	mov    edx,esi
c0019446:	ed                   	in     eax,dx
c0019447:	0f b6 c0             	movzx  eax,al
c001944a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019450:	74 46                	je     c0019498 <IDE::open(int, int, void*)+0x1e0>
c0019452:	83 ec 0c             	sub    esp,0xc
c0019455:	68 f8 f1 01 c0       	push   0xc001f1f8
c001945a:	eb 34                	jmp    c0019490 <IDE::open(int, int, void*)+0x1d8>
c001945c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019465:	75 17                	jne    c001947e <IDE::open(int, int, void*)+0x1c6>
c0019467:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001946c:	74 07                	je     c0019475 <IDE::open(int, int, void*)+0x1bd>
c001946e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019473:	75 09                	jne    c001947e <IDE::open(int, int, void*)+0x1c6>
c0019475:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001947c:	eb 1a                	jmp    c0019498 <IDE::open(int, int, void*)+0x1e0>
c001947e:	83 ec 0c             	sub    esp,0xc
c0019481:	68 00 f2 01 c0       	push   0xc001f200
c0019486:	eb 08                	jmp    c0019490 <IDE::open(int, int, void*)+0x1d8>
c0019488:	83 ec 0c             	sub    esp,0xc
c001948b:	68 31 f2 01 c0       	push   0xc001f231
c0019490:	e8 b6 72 ff ff       	call   c001074b <Krnl::panic(char const*)>
c0019495:	83 c4 10             	add    esp,0x10
c0019498:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001949f:	79 1a                	jns    c00194bb <IDE::open(int, int, void*)+0x203>
c00194a1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00194a7:	83 e0 fc             	and    eax,0xfffffffc
c00194aa:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00194b1:	83 c0 08             	add    eax,0x8
c00194b4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00194bb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194c1:	89 c2                	mov    edx,eax
c00194c3:	83 e2 0f             	and    edx,0xf
c00194c6:	66 83 fa 08          	cmp    dx,0x8
c00194ca:	75 0a                	jne    c00194d6 <IDE::open(int, int, void*)+0x21e>
c00194cc:	83 e8 02             	sub    eax,0x2
c00194cf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00194d6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00194dc:	89 c2                	mov    edx,eax
c00194de:	83 e2 0f             	and    edx,0xf
c00194e1:	66 83 fa 08          	cmp    dx,0x8
c00194e5:	75 0a                	jne    c00194f1 <IDE::open(int, int, void*)+0x239>
c00194e7:	83 e8 02             	sub    eax,0x2
c00194ea:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00194f1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00194f8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00194ff:	89 d0                	mov    eax,edx
c0019501:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019504:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019508:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001950c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001950f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019514:	0f b6 c9             	movzx  ecx,cl
c0019517:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001951e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019521:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019525:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019529:	8d 50 02             	lea    edx,[eax+0x2]
c001952c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019531:	0f b6 d2             	movzx  edx,dl
c0019534:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001953a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001953d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019541:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019545:	8d 48 03             	lea    ecx,[eax+0x3]
c0019548:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001954d:	0f b6 c9             	movzx  ecx,cl
c0019550:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019556:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019559:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001955d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019561:	8d 50 04             	lea    edx,[eax+0x4]
c0019564:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001956a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001956f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019576:	66 85 f6             	test   si,si
c0019579:	74 5b                	je     c00195d6 <IDE::open(int, int, void*)+0x31e>
c001957b:	0f b6 d2             	movzx  edx,dl
c001957e:	83 c0 05             	add    eax,0x5
c0019581:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019584:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019588:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001958c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019592:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019597:	eb 3d                	jmp    c00195d6 <IDE::open(int, int, void*)+0x31e>
c0019599:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001959f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00195a6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00195ad:	66 05 06 02          	add    ax,0x206
c00195b1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195b8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00195bf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00195c6:	66 05 06 02          	add    ax,0x206
c00195ca:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00195d1:	e9 e5 fe ff ff       	jmp    c00194bb <IDE::open(int, int, void*)+0x203>
c00195d6:	50                   	push   eax
c00195d7:	50                   	push   eax
c00195d8:	6a 00                	push   0x0
c00195da:	53                   	push   ebx
c00195db:	e8 5e fa ff ff       	call   c001903e <IDE::prepareInterrupt(unsigned char)>
c00195e0:	5a                   	pop    edx
c00195e1:	59                   	pop    ecx
c00195e2:	6a 01                	push   0x1
c00195e4:	53                   	push   ebx
c00195e5:	e8 54 fa ff ff       	call   c001903e <IDE::prepareInterrupt(unsigned char)>
c00195ea:	83 c4 0c             	add    esp,0xc
c00195ed:	6a 00                	push   0x0
c00195ef:	6a 00                	push   0x0
c00195f1:	53                   	push   ebx
c00195f2:	e8 7b fc ff ff       	call   c0019272 <IDE::enableIRQs(unsigned char, bool)>
c00195f7:	83 c4 0c             	add    esp,0xc
c00195fa:	6a 00                	push   0x0
c00195fc:	6a 01                	push   0x1
c00195fe:	53                   	push   ebx
c00195ff:	e8 6e fc ff ff       	call   c0019272 <IDE::enableIRQs(unsigned char, bool)>
c0019604:	83 c4 10             	add    esp,0x10
c0019607:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001960e:	74 34                	je     c0019644 <IDE::open(int, int, void*)+0x38c>
c0019610:	83 ec 0c             	sub    esp,0xc
c0019613:	53                   	push   ebx
c0019614:	6a 01                	push   0x1
c0019616:	68 3a 92 01 c0       	push   0xc001923a
c001961b:	6a 0e                	push   0xe
c001961d:	53                   	push   ebx
c001961e:	e8 c5 29 ff ff       	call   c000bfe8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019623:	83 c4 14             	add    esp,0x14
c0019626:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001962c:	53                   	push   ebx
c001962d:	6a 01                	push   0x1
c001962f:	68 56 92 01 c0       	push   0xc0019256
c0019634:	6a 0f                	push   0xf
c0019636:	53                   	push   ebx
c0019637:	e8 ac 29 ff ff       	call   c000bfe8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001963c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019642:	eb 38                	jmp    c001967c <IDE::open(int, int, void*)+0x3c4>
c0019644:	83 ec 0c             	sub    esp,0xc
c0019647:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019651:	53                   	push   ebx
c0019652:	6a 00                	push   0x0
c0019654:	68 3a 92 01 c0       	push   0xc001923a
c0019659:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001965f:	53                   	push   ebx
c0019660:	e8 83 29 ff ff       	call   c000bfe8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019665:	83 c4 14             	add    esp,0x14
c0019668:	53                   	push   ebx
c0019669:	6a 00                	push   0x0
c001966b:	68 56 92 01 c0       	push   0xc0019256
c0019670:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019676:	53                   	push   ebx
c0019677:	e8 6c 29 ff ff       	call   c000bfe8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001967c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001967e:	83 c4 20             	add    esp,0x20
c0019681:	83 ec 0c             	sub    esp,0xc
c0019684:	53                   	push   ebx
c0019685:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019688:	83 c4 0c             	add    esp,0xc
c001968b:	6a 07                	push   0x7
c001968d:	6a 00                	push   0x0
c001968f:	53                   	push   ebx
c0019690:	e8 8f fa ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019695:	83 c4 0c             	add    esp,0xc
c0019698:	6a 07                	push   0x7
c001969a:	6a 01                	push   0x1
c001969c:	53                   	push   ebx
c001969d:	e8 82 fa ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c00196a2:	83 c4 0c             	add    esp,0xc
c00196a5:	6a 01                	push   0x1
c00196a7:	6a 00                	push   0x0
c00196a9:	53                   	push   ebx
c00196aa:	e8 c3 fb ff ff       	call   c0019272 <IDE::enableIRQs(unsigned char, bool)>
c00196af:	83 c4 0c             	add    esp,0xc
c00196b2:	6a 01                	push   0x1
c00196b4:	6a 01                	push   0x1
c00196b6:	53                   	push   ebx
c00196b7:	e8 b6 fb ff ff       	call   c0019272 <IDE::enableIRQs(unsigned char, bool)>
c00196bc:	83 c4 2c             	add    esp,0x2c
c00196bf:	31 c0                	xor    eax,eax
c00196c1:	5b                   	pop    ebx
c00196c2:	5e                   	pop    esi
c00196c3:	5f                   	pop    edi
c00196c4:	5d                   	pop    ebp
c00196c5:	c3                   	ret    

c00196c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00196c6:	55                   	push   ebp
c00196c7:	57                   	push   edi
c00196c8:	56                   	push   esi
c00196c9:	53                   	push   ebx
c00196ca:	83 ec 1c             	sub    esp,0x1c
c00196cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00196d5:	8d 50 f8             	lea    edx,[eax-0x8]
c00196d8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00196dc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00196e0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00196e4:	80 fa 03             	cmp    dl,0x3
c00196e7:	77 5d                	ja     c0019746 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00196e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00196ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196f1:	0f b6 db             	movzx  ebx,bl
c00196f4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00196f7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00196fb:	83 ca 80             	or     edx,0xffffff80
c00196fe:	0f b6 d2             	movzx  edx,dl
c0019701:	52                   	push   edx
c0019702:	6a 0c                	push   0xc
c0019704:	53                   	push   ebx
c0019705:	56                   	push   esi
c0019706:	e8 59 f9 ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001970b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019710:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019714:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019718:	0f b6 c0             	movzx  eax,al
c001971b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001971f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019721:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019726:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001972a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001972e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019732:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001973a:	83 c4 2c             	add    esp,0x2c
c001973d:	5b                   	pop    ebx
c001973e:	5e                   	pop    esi
c001973f:	5f                   	pop    edi
c0019740:	5d                   	pop    ebp
c0019741:	e9 1e f9 ff ff       	jmp    c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019746:	3c 07                	cmp    al,0x7
c0019748:	77 10                	ja     c001975a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001974a:	0f b6 db             	movzx  ebx,bl
c001974d:	0f b6 d0             	movzx  edx,al
c0019750:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019758:	eb 2d                	jmp    c0019787 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001975a:	3c 0d                	cmp    al,0xd
c001975c:	77 13                	ja     c0019771 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001975e:	0f b6 db             	movzx  ebx,bl
c0019761:	0f b6 c0             	movzx  eax,al
c0019764:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001976b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001976f:	eb 16                	jmp    c0019787 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019771:	3c 15                	cmp    al,0x15
c0019773:	77 14                	ja     c0019789 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019775:	0f b6 db             	movzx  ebx,bl
c0019778:	0f b6 c0             	movzx  eax,al
c001977b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019783:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019787:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019789:	83 c4 1c             	add    esp,0x1c
c001978c:	5b                   	pop    ebx
c001978d:	5e                   	pop    esi
c001978e:	5f                   	pop    edi
c001978f:	5d                   	pop    ebp
c0019790:	c3                   	ret    
c0019791:	90                   	nop

c0019792 <IDE::detect()>:
c0019792:	55                   	push   ebp
c0019793:	57                   	push   edi
c0019794:	56                   	push   esi
c0019795:	53                   	push   ebx
c0019796:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001979c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00197a3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00197aa:	0f 85 97 02 00 00    	jne    c0019a47 <IDE::detect()+0x2b5>
c00197b0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00197b7:	31 f6                	xor    esi,esi
c00197b9:	31 ed                	xor    ebp,ebp
c00197bb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00197c3:	89 e8                	mov    eax,ebp
c00197c5:	c1 e0 06             	shl    eax,0x6
c00197c8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00197d0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00197d4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00197d8:	c1 e0 04             	shl    eax,0x4
c00197db:	83 c8 a0             	or     eax,0xffffffa0
c00197de:	0f b6 c0             	movzx  eax,al
c00197e1:	50                   	push   eax
c00197e2:	6a 06                	push   0x6
c00197e4:	56                   	push   esi
c00197e5:	53                   	push   ebx
c00197e6:	e8 79 f8 ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197eb:	83 c4 0c             	add    esp,0xc
c00197ee:	6a 0c                	push   0xc
c00197f0:	56                   	push   esi
c00197f1:	53                   	push   ebx
c00197f2:	e8 2d f9 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c00197f7:	83 c4 0c             	add    esp,0xc
c00197fa:	6a 0c                	push   0xc
c00197fc:	56                   	push   esi
c00197fd:	53                   	push   ebx
c00197fe:	e8 21 f9 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019803:	83 c4 0c             	add    esp,0xc
c0019806:	6a 0c                	push   0xc
c0019808:	56                   	push   esi
c0019809:	53                   	push   ebx
c001980a:	e8 15 f9 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c001980f:	83 c4 0c             	add    esp,0xc
c0019812:	6a 0c                	push   0xc
c0019814:	56                   	push   esi
c0019815:	53                   	push   ebx
c0019816:	e8 09 f9 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c001981b:	68 ec 00 00 00       	push   0xec
c0019820:	6a 07                	push   0x7
c0019822:	56                   	push   esi
c0019823:	53                   	push   ebx
c0019824:	e8 3b f8 ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019829:	83 c4 1c             	add    esp,0x1c
c001982c:	6a 0c                	push   0xc
c001982e:	56                   	push   esi
c001982f:	53                   	push   ebx
c0019830:	e8 ef f8 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019835:	83 c4 0c             	add    esp,0xc
c0019838:	6a 0c                	push   0xc
c001983a:	56                   	push   esi
c001983b:	53                   	push   ebx
c001983c:	e8 e3 f8 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019841:	83 c4 0c             	add    esp,0xc
c0019844:	6a 0c                	push   0xc
c0019846:	56                   	push   esi
c0019847:	53                   	push   ebx
c0019848:	e8 d7 f8 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c001984d:	83 c4 0c             	add    esp,0xc
c0019850:	6a 0c                	push   0xc
c0019852:	56                   	push   esi
c0019853:	53                   	push   ebx
c0019854:	e8 cb f8 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019859:	83 c4 0c             	add    esp,0xc
c001985c:	6a 0c                	push   0xc
c001985e:	56                   	push   esi
c001985f:	53                   	push   ebx
c0019860:	e8 bf f8 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019865:	83 c4 10             	add    esp,0x10
c0019868:	84 c0                	test   al,al
c001986a:	0f 84 5f 01 00 00    	je     c00199cf <IDE::detect()+0x23d>
c0019870:	31 ff                	xor    edi,edi
c0019872:	50                   	push   eax
c0019873:	6a 0c                	push   0xc
c0019875:	56                   	push   esi
c0019876:	53                   	push   ebx
c0019877:	e8 a8 f8 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c001987c:	83 c4 10             	add    esp,0x10
c001987f:	a8 01                	test   al,0x1
c0019881:	0f 85 69 01 00 00    	jne    c00199f0 <IDE::detect()+0x25e>
c0019887:	84 c0                	test   al,al
c0019889:	78 04                	js     c001988f <IDE::detect()+0xfd>
c001988b:	a8 08                	test   al,0x8
c001988d:	75 23                	jne    c00198b2 <IDE::detect()+0x120>
c001988f:	47                   	inc    edi
c0019890:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019896:	7e da                	jle    c0019872 <IDE::detect()+0xe0>
c0019898:	83 ec 0c             	sub    esp,0xc
c001989b:	6a 32                	push   0x32
c001989d:	e8 fe a4 ff ff       	call   c0013da0 <milliTenthSleep(unsigned int)>
c00198a2:	83 c4 10             	add    esp,0x10
c00198a5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00198ab:	75 c5                	jne    c0019872 <IDE::detect()+0xe0>
c00198ad:	e9 3e 01 00 00       	jmp    c00199f0 <IDE::detect()+0x25e>
c00198b2:	31 c9                	xor    ecx,ecx
c00198b4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00198b8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00198bc:	83 ec 0c             	sub    esp,0xc
c00198bf:	68 80 00 00 00       	push   0x80
c00198c4:	57                   	push   edi
c00198c5:	6a 00                	push   0x0
c00198c7:	56                   	push   esi
c00198c8:	53                   	push   ebx
c00198c9:	e8 f8 fd ff ff       	call   c00196c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00198ce:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00198d3:	89 e8                	mov    eax,ebp
c00198d5:	89 d1                	mov    ecx,edx
c00198d7:	c1 e0 06             	shl    eax,0x6
c00198da:	01 d8                	add    eax,ebx
c00198dc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00198e3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00198ea:	89 f2                	mov    edx,esi
c00198ec:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00198f2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00198f6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00198fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019900:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019907:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001990f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019916:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001991e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019924:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001992b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019931:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019935:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019939:	83 c4 20             	add    esp,0x20
c001993c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001993f:	83 c0 02             	add    eax,0x2
c0019942:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019948:	83 c7 02             	add    edi,0x2
c001994b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001994e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019954:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019958:	75 e2                	jne    c001993c <IDE::detect()+0x1aa>
c001995a:	89 e8                	mov    eax,ebp
c001995c:	c1 e0 06             	shl    eax,0x6
c001995f:	01 d8                	add    eax,ebx
c0019961:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019967:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001996e:	66 c1 ea 09          	shr    dx,0x9
c0019972:	83 e2 01             	and    edx,0x1
c0019975:	84 c9                	test   cl,cl
c0019977:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001997d:	75 22                	jne    c00199a1 <IDE::detect()+0x20f>
c001997f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019986:	74 46                	je     c00199ce <IDE::detect()+0x23c>
c0019988:	83 ec 0c             	sub    esp,0xc
c001998b:	68 7c 01 00 00       	push   0x17c
c0019990:	e8 d8 e4 fe ff       	call   c0007e6d <malloc>
c0019995:	89 c7                	mov    edi,eax
c0019997:	89 04 24             	mov    DWORD PTR [esp],eax
c001999a:	e8 11 05 00 00       	call   c0019eb0 <ATA::ATA()>
c001999f:	eb 17                	jmp    c00199b8 <IDE::detect()+0x226>
c00199a1:	83 ec 0c             	sub    esp,0xc
c00199a4:	68 84 01 00 00       	push   0x184
c00199a9:	e8 bf e4 fe ff       	call   c0007e6d <malloc>
c00199ae:	89 c7                	mov    edi,eax
c00199b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00199b3:	e8 f0 0a 00 00       	call   c001a4a8 <ATAPI::ATAPI()>
c00199b8:	5a                   	pop    edx
c00199b9:	59                   	pop    ecx
c00199ba:	57                   	push   edi
c00199bb:	53                   	push   ebx
c00199bc:	e8 7b 26 ff ff       	call   c000c03c <Device::addChild(Device*)>
c00199c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00199c3:	53                   	push   ebx
c00199c4:	55                   	push   ebp
c00199c5:	6a 00                	push   0x0
c00199c7:	57                   	push   edi
c00199c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00199cb:	83 c4 20             	add    esp,0x20
c00199ce:	45                   	inc    ebp
c00199cf:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00199d4:	74 0d                	je     c00199e3 <IDE::detect()+0x251>
c00199d6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00199de:	e9 e0 fd ff ff       	jmp    c00197c3 <IDE::detect()+0x31>
c00199e3:	4e                   	dec    esi
c00199e4:	74 61                	je     c0019a47 <IDE::detect()+0x2b5>
c00199e6:	be 01 00 00 00       	mov    esi,0x1
c00199eb:	e9 cb fd ff ff       	jmp    c00197bb <IDE::detect()+0x29>
c00199f0:	50                   	push   eax
c00199f1:	6a 04                	push   0x4
c00199f3:	56                   	push   esi
c00199f4:	53                   	push   ebx
c00199f5:	e8 2a f7 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c00199fa:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00199fe:	83 c4 0c             	add    esp,0xc
c0019a01:	6a 05                	push   0x5
c0019a03:	56                   	push   esi
c0019a04:	53                   	push   ebx
c0019a05:	e8 1a f7 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019a0a:	83 c4 10             	add    esp,0x10
c0019a0d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a11:	80 fa 14             	cmp    dl,0x14
c0019a14:	75 04                	jne    c0019a1a <IDE::detect()+0x288>
c0019a16:	3c eb                	cmp    al,0xeb
c0019a18:	eb 07                	jmp    c0019a21 <IDE::detect()+0x28f>
c0019a1a:	3c 96                	cmp    al,0x96
c0019a1c:	75 b1                	jne    c00199cf <IDE::detect()+0x23d>
c0019a1e:	80 fa 69             	cmp    dl,0x69
c0019a21:	75 ac                	jne    c00199cf <IDE::detect()+0x23d>
c0019a23:	68 a1 00 00 00       	push   0xa1
c0019a28:	6a 07                	push   0x7
c0019a2a:	56                   	push   esi
c0019a2b:	53                   	push   ebx
c0019a2c:	e8 33 f6 ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a31:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019a38:	e8 63 a3 ff ff       	call   c0013da0 <milliTenthSleep(unsigned int)>
c0019a3d:	83 c4 10             	add    esp,0x10
c0019a40:	b1 01                	mov    cl,0x1
c0019a42:	e9 6d fe ff ff       	jmp    c00198b4 <IDE::detect()+0x122>
c0019a47:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019a4d:	5b                   	pop    ebx
c0019a4e:	5e                   	pop    esi
c0019a4f:	5f                   	pop    edi
c0019a50:	5d                   	pop    ebp
c0019a51:	c3                   	ret    

c0019a52 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019a52:	55                   	push   ebp
c0019a53:	57                   	push   edi
c0019a54:	56                   	push   esi
c0019a55:	53                   	push   ebx
c0019a56:	83 ec 1c             	sub    esp,0x1c
c0019a59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a5d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a61:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019a65:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019a69:	88 c3                	mov    bl,al
c0019a6b:	84 c0                	test   al,al
c0019a6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a71:	0f 84 81 00 00 00    	je     c0019af8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a77:	83 ec 0c             	sub    esp,0xc
c0019a7a:	68 5b f2 01 c0       	push   0xc001f25b
c0019a7f:	e8 78 11 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c0019a84:	83 c4 10             	add    esp,0x10
c0019a87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a8b:	3c 01                	cmp    al,0x1
c0019a8d:	74 63                	je     c0019af2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019a8f:	3c 02                	cmp    al,0x2
c0019a91:	75 53                	jne    c0019ae6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019a93:	01 f6                	add    esi,esi
c0019a95:	09 ee                	or     esi,ebp
c0019a97:	50                   	push   eax
c0019a98:	89 f0                	mov    eax,esi
c0019a9a:	6a 01                	push   0x1
c0019a9c:	0f b6 f0             	movzx  esi,al
c0019a9f:	c1 e6 06             	shl    esi,0x6
c0019aa2:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019aaa:	50                   	push   eax
c0019aab:	57                   	push   edi
c0019aac:	e8 73 f6 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019ab1:	83 c4 10             	add    esp,0x10
c0019ab4:	a8 01                	test   al,0x1
c0019ab6:	74 02                	je     c0019aba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019ab8:	b3 07                	mov    bl,0x7
c0019aba:	a8 02                	test   al,0x2
c0019abc:	74 02                	je     c0019ac0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019abe:	b3 03                	mov    bl,0x3
c0019ac0:	a8 04                	test   al,0x4
c0019ac2:	74 02                	je     c0019ac6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019ac4:	b3 14                	mov    bl,0x14
c0019ac6:	a8 08                	test   al,0x8
c0019ac8:	74 02                	je     c0019acc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019aca:	b3 03                	mov    bl,0x3
c0019acc:	a8 10                	test   al,0x10
c0019ace:	74 02                	je     c0019ad2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019ad0:	b3 15                	mov    bl,0x15
c0019ad2:	a8 20                	test   al,0x20
c0019ad4:	74 02                	je     c0019ad8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019ad6:	b3 03                	mov    bl,0x3
c0019ad8:	a8 40                	test   al,0x40
c0019ada:	74 02                	je     c0019ade <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019adc:	b3 16                	mov    bl,0x16
c0019ade:	84 c0                	test   al,al
c0019ae0:	79 16                	jns    c0019af8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ae2:	b3 0d                	mov    bl,0xd
c0019ae4:	eb 12                	jmp    c0019af8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ae6:	3c 03                	cmp    al,0x3
c0019ae8:	74 0c                	je     c0019af6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019aea:	3c 04                	cmp    al,0x4
c0019aec:	75 0a                	jne    c0019af8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aee:	b3 08                	mov    bl,0x8
c0019af0:	eb 06                	jmp    c0019af8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019af2:	b3 13                	mov    bl,0x13
c0019af4:	eb 02                	jmp    c0019af8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019af6:	b3 17                	mov    bl,0x17
c0019af8:	83 c4 1c             	add    esp,0x1c
c0019afb:	88 d8                	mov    al,bl
c0019afd:	5b                   	pop    ebx
c0019afe:	5e                   	pop    esi
c0019aff:	5f                   	pop    edi
c0019b00:	5d                   	pop    ebp
c0019b01:	c3                   	ret    

c0019b02 <IDE::polling(unsigned char, unsigned int)>:
c0019b02:	55                   	push   ebp
c0019b03:	bd 04 00 00 00       	mov    ebp,0x4
c0019b08:	57                   	push   edi
c0019b09:	56                   	push   esi
c0019b0a:	53                   	push   ebx
c0019b0b:	83 ec 0c             	sub    esp,0xc
c0019b0e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b12:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b16:	0f b6 f3             	movzx  esi,bl
c0019b19:	52                   	push   edx
c0019b1a:	6a 0c                	push   0xc
c0019b1c:	56                   	push   esi
c0019b1d:	57                   	push   edi
c0019b1e:	e8 01 f6 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019b23:	83 c4 10             	add    esp,0x10
c0019b26:	4d                   	dec    ebp
c0019b27:	75 ed                	jne    c0019b16 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019b29:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b2e:	50                   	push   eax
c0019b2f:	6a 0c                	push   0xc
c0019b31:	56                   	push   esi
c0019b32:	57                   	push   edi
c0019b33:	e8 ec f5 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019b38:	83 c4 10             	add    esp,0x10
c0019b3b:	a8 01                	test   al,0x1
c0019b3d:	75 17                	jne    c0019b56 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b3f:	a8 20                	test   al,0x20
c0019b41:	75 0f                	jne    c0019b52 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019b43:	4b                   	dec    ebx
c0019b44:	74 10                	je     c0019b56 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b46:	84 c0                	test   al,al
c0019b48:	78 e4                	js     c0019b2e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b4a:	a8 08                	test   al,0x8
c0019b4c:	74 e0                	je     c0019b2e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b4e:	31 c0                	xor    eax,eax
c0019b50:	eb 06                	jmp    c0019b58 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b52:	b0 01                	mov    al,0x1
c0019b54:	eb 02                	jmp    c0019b58 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b56:	b0 02                	mov    al,0x2
c0019b58:	83 c4 0c             	add    esp,0xc
c0019b5b:	5b                   	pop    ebx
c0019b5c:	5e                   	pop    esi
c0019b5d:	5f                   	pop    edi
c0019b5e:	5d                   	pop    ebp
c0019b5f:	c3                   	ret    

c0019b60 <SATABus::close(int, int, void*)>:
c0019b60:	31 c0                	xor    eax,eax
c0019b62:	c3                   	ret    
c0019b63:	90                   	nop

c0019b64 <SATABus::detect()>:
c0019b64:	c3                   	ret    
c0019b65:	90                   	nop

c0019b66 <SATABus::SATABus()>:
c0019b66:	83 ec 0c             	sub    esp,0xc
c0019b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b6d:	83 ec 08             	sub    esp,0x8
c0019b70:	68 94 f2 01 c0       	push   0xc001f294
c0019b75:	50                   	push   eax
c0019b76:	e8 05 28 ff ff       	call   c000c380 <HardDiskController::HardDiskController(char const*)>
c0019b7b:	83 c4 10             	add    esp,0x10
c0019b7e:	ba c0 f2 01 c0       	mov    edx,0xc001f2c0
c0019b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b87:	89 10                	mov    DWORD PTR [eax],edx
c0019b89:	83 ec 0c             	sub    esp,0xc
c0019b8c:	6a 50                	push   0x50
c0019b8e:	e8 65 e7 fe ff       	call   c00082f8 <Phys::allocateContiguousPages(int)>
c0019b93:	83 c4 10             	add    esp,0x10
c0019b96:	89 c2                	mov    edx,eax
c0019b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b9c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019ba2:	83 ec 0c             	sub    esp,0xc
c0019ba5:	6a 50                	push   0x50
c0019ba7:	e8 fd fd fe ff       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c0019bac:	83 c4 10             	add    esp,0x10
c0019baf:	89 c2                	mov    edx,eax
c0019bb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bb5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019bbb:	a1 10 0a 02 c0       	mov    eax,ds:0xc0020a10
c0019bc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bc4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019bca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bce:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019bd4:	83 ec 0c             	sub    esp,0xc
c0019bd7:	6a 03                	push   0x3
c0019bd9:	6a 50                	push   0x50
c0019bdb:	51                   	push   ecx
c0019bdc:	52                   	push   edx
c0019bdd:	50                   	push   eax
c0019bde:	e8 55 07 ff ff       	call   c000a338 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019be3:	83 c4 20             	add    esp,0x20
c0019be6:	90                   	nop
c0019be7:	83 c4 0c             	add    esp,0xc
c0019bea:	c3                   	ret    
c0019beb:	90                   	nop

c0019bec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019bec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bf0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019bf3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019bf6:	09 c2                	or     edx,eax
c0019bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bfc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c02:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c04:	31 c0                	xor    eax,eax
c0019c06:	c1 e9 08             	shr    ecx,0x8
c0019c09:	83 e1 0f             	and    ecx,0xf
c0019c0c:	39 c8                	cmp    eax,ecx
c0019c0e:	74 0a                	je     c0019c1a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019c10:	f6 c2 01             	test   dl,0x1
c0019c13:	74 08                	je     c0019c1d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c15:	d1 ea                	shr    edx,1
c0019c17:	40                   	inc    eax
c0019c18:	eb f2                	jmp    c0019c0c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c1a:	83 c8 ff             	or     eax,0xffffffff
c0019c1d:	c3                   	ret    

c0019c1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c22:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019c25:	89 c2                	mov    edx,eax
c0019c27:	c1 ea 08             	shr    edx,0x8
c0019c2a:	83 e2 0f             	and    edx,0xf
c0019c2d:	fe ca                	dec    dl
c0019c2f:	75 31                	jne    c0019c62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c31:	83 e0 0f             	and    eax,0xf
c0019c34:	3c 03                	cmp    al,0x3
c0019c36:	75 2a                	jne    c0019c62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c38:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019c3b:	b8 02 00 00 00       	mov    eax,0x2
c0019c40:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c46:	74 1c                	je     c0019c64 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c48:	b8 04 00 00 00       	mov    eax,0x4
c0019c4d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019c53:	74 0f                	je     c0019c64 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c55:	31 c0                	xor    eax,eax
c0019c57:	83 fa 03             	cmp    edx,0x3
c0019c5a:	0f 94 c0             	sete   al
c0019c5d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019c61:	c3                   	ret    
c0019c62:	31 c0                	xor    eax,eax
c0019c64:	c3                   	ret    
c0019c65:	90                   	nop

c0019c66 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c6a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c6d:	0f ba e2 0f          	bt     edx,0xf
c0019c71:	72 f7                	jb     c0019c6a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019c73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c76:	83 ca 10             	or     edx,0x10
c0019c79:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c7c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c7f:	83 ca 01             	or     edx,0x1
c0019c82:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c85:	c3                   	ret    

c0019c86 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c8a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c8d:	83 e2 fe             	and    edx,0xfffffffe
c0019c90:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c93:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c96:	83 e2 ef             	and    edx,0xffffffef
c0019c99:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c9c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c9f:	0f ba e2 0e          	bt     edx,0xe
c0019ca3:	72 f7                	jb     c0019c9c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019ca5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ca8:	0f ba e2 0f          	bt     edx,0xf
c0019cac:	72 ee                	jb     c0019c9c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019cae:	c3                   	ret    
c0019caf:	90                   	nop

c0019cb0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019cb0:	55                   	push   ebp
c0019cb1:	57                   	push   edi
c0019cb2:	56                   	push   esi
c0019cb3:	53                   	push   ebx
c0019cb4:	83 ec 1c             	sub    esp,0x1c
c0019cb7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019cbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019cbf:	53                   	push   ebx
c0019cc0:	56                   	push   esi
c0019cc1:	e8 c0 ff ff ff       	call   c0019c86 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019cc6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019cca:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019cd0:	83 ec 0c             	sub    esp,0xc
c0019cd3:	c1 e5 0a             	shl    ebp,0xa
c0019cd6:	01 e8                	add    eax,ebp
c0019cd8:	89 03                	mov    DWORD PTR [ebx],eax
c0019cda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cdc:	68 00 04 00 00       	push   0x400
c0019ce1:	6a 00                	push   0x0
c0019ce3:	50                   	push   eax
c0019ce4:	e8 07 68 fe ff       	call   c00004f0 <memset>
c0019ce9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019cef:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019cf3:	01 e8                	add    eax,ebp
c0019cf5:	83 c4 1c             	add    esp,0x1c
c0019cf8:	89 03                	mov    DWORD PTR [ebx],eax
c0019cfa:	c1 e2 08             	shl    edx,0x8
c0019cfd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d04:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d0a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d10:	01 f8                	add    eax,edi
c0019d12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d15:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d18:	68 00 01 00 00       	push   0x100
c0019d1d:	6a 00                	push   0x0
c0019d1f:	50                   	push   eax
c0019d20:	e8 cb 67 fe ff       	call   c00004f0 <memset>
c0019d25:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019d2b:	01 fa                	add    edx,edi
c0019d2d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d31:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019d34:	c1 e7 0d             	shl    edi,0xd
c0019d37:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019d3e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d44:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019d4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d4e:	31 ff                	xor    edi,edi
c0019d50:	83 c4 10             	add    esp,0x10
c0019d53:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019d59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d5d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019d63:	83 c5 20             	add    ebp,0x20
c0019d66:	01 f8                	add    eax,edi
c0019d68:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d6b:	52                   	push   edx
c0019d6c:	68 00 01 00 00       	push   0x100
c0019d71:	6a 00                	push   0x0
c0019d73:	50                   	push   eax
c0019d74:	e8 77 67 fe ff       	call   c00004f0 <memset>
c0019d79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d7d:	83 c4 10             	add    esp,0x10
c0019d80:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019d86:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019d8d:	01 f8                	add    eax,edi
c0019d8f:	81 c7 00 01 00 00    	add    edi,0x100
c0019d95:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d98:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019d9e:	75 b3                	jne    c0019d53 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019da0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019da7:	50                   	push   eax
c0019da8:	50                   	push   eax
c0019da9:	53                   	push   ebx
c0019daa:	56                   	push   esi
c0019dab:	e8 b6 fe ff ff       	call   c0019c66 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019db0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019db7:	83 c4 2c             	add    esp,0x2c
c0019dba:	5b                   	pop    ebx
c0019dbb:	5e                   	pop    esi
c0019dbc:	5f                   	pop    edi
c0019dbd:	5d                   	pop    ebp
c0019dbe:	c3                   	ret    
c0019dbf:	90                   	nop

c0019dc0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019dc0:	55                   	push   ebp
c0019dc1:	57                   	push   edi
c0019dc2:	56                   	push   esi
c0019dc3:	53                   	push   ebx
c0019dc4:	31 db                	xor    ebx,ebx
c0019dc6:	83 ec 0c             	sub    esp,0xc
c0019dc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019dcd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019dd1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019dd4:	f7 c7 01 00 00 00    	test   edi,0x1
c0019dda:	74 7a                	je     c0019e56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ddc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019de0:	89 d8                	mov    eax,ebx
c0019de2:	c1 e0 07             	shl    eax,0x7
c0019de5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019dec:	55                   	push   ebp
c0019ded:	56                   	push   esi
c0019dee:	e8 2b fe ff ff       	call   c0019c1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019df3:	5a                   	pop    edx
c0019df4:	83 f8 01             	cmp    eax,0x1
c0019df7:	59                   	pop    ecx
c0019df8:	75 21                	jne    c0019e1b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019dfa:	50                   	push   eax
c0019dfb:	53                   	push   ebx
c0019dfc:	55                   	push   ebp
c0019dfd:	56                   	push   esi
c0019dfe:	e8 ad fe ff ff       	call   c0019cb0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e03:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e0a:	e8 5e e0 fe ff       	call   c0007e6d <malloc>
c0019e0f:	89 c5                	mov    ebp,eax
c0019e11:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e14:	e8 43 0d 00 00       	call   c001ab5c <SATA::SATA()>
c0019e19:	eb 24                	jmp    c0019e3f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e1b:	83 f8 04             	cmp    eax,0x4
c0019e1e:	75 36                	jne    c0019e56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e20:	51                   	push   ecx
c0019e21:	53                   	push   ebx
c0019e22:	55                   	push   ebp
c0019e23:	56                   	push   esi
c0019e24:	e8 87 fe ff ff       	call   c0019cb0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e29:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019e30:	e8 38 e0 fe ff       	call   c0007e6d <malloc>
c0019e35:	89 c5                	mov    ebp,eax
c0019e37:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e3a:	e8 71 11 00 00       	call   c001afb0 <SATAPI::SATAPI()>
c0019e3f:	58                   	pop    eax
c0019e40:	5a                   	pop    edx
c0019e41:	55                   	push   ebp
c0019e42:	56                   	push   esi
c0019e43:	e8 f4 21 ff ff       	call   c000c03c <Device::addChild(Device*)>
c0019e48:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e4b:	56                   	push   esi
c0019e4c:	6a 00                	push   0x0
c0019e4e:	53                   	push   ebx
c0019e4f:	55                   	push   ebp
c0019e50:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019e53:	83 c4 20             	add    esp,0x20
c0019e56:	d1 ef                	shr    edi,1
c0019e58:	43                   	inc    ebx
c0019e59:	83 fb 20             	cmp    ebx,0x20
c0019e5c:	0f 85 72 ff ff ff    	jne    c0019dd4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019e62:	83 c4 0c             	add    esp,0xc
c0019e65:	5b                   	pop    ebx
c0019e66:	5e                   	pop    esi
c0019e67:	5f                   	pop    edi
c0019e68:	5d                   	pop    ebp
c0019e69:	c3                   	ret    

c0019e6a <SATABus::open(int, int, void*)>:
c0019e6a:	83 ec 14             	sub    esp,0x14
c0019e6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e71:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019e77:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019e7d:	52                   	push   edx
c0019e7e:	50                   	push   eax
c0019e7f:	e8 3c ff ff ff       	call   c0019dc0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019e84:	31 c0                	xor    eax,eax
c0019e86:	83 c4 1c             	add    esp,0x1c
c0019e89:	c3                   	ret    

c0019e8a <ATA::close(int, int, void*)>:
c0019e8a:	83 ec 0c             	sub    esp,0xc
c0019e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e91:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019e97:	85 c0                	test   eax,eax
c0019e99:	74 0c                	je     c0019ea7 <ATA::close(int, int, void*)+0x1d>
c0019e9b:	83 ec 0c             	sub    esp,0xc
c0019e9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ea0:	50                   	push   eax
c0019ea1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019ea4:	83 c4 10             	add    esp,0x10
c0019ea7:	31 c0                	xor    eax,eax
c0019ea9:	83 c4 0c             	add    esp,0xc
c0019eac:	c3                   	ret    
c0019ead:	90                   	nop

c0019eae <ATA::powerSaving(PowerSavingLevel)>:
c0019eae:	c3                   	ret    
c0019eaf:	90                   	nop

c0019eb0 <ATA::ATA()>:
c0019eb0:	83 ec 0c             	sub    esp,0xc
c0019eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eb7:	83 ec 04             	sub    esp,0x4
c0019eba:	68 00 02 00 00       	push   0x200
c0019ebf:	68 8d f3 01 c0       	push   0xc001f38d
c0019ec4:	50                   	push   eax
c0019ec5:	e8 40 25 ff ff       	call   c000c40a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019eca:	83 c4 10             	add    esp,0x10
c0019ecd:	ba 00 f3 01 c0       	mov    edx,0xc001f300
c0019ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ed6:	89 10                	mov    DWORD PTR [eax],edx
c0019ed8:	90                   	nop
c0019ed9:	83 c4 0c             	add    esp,0xc
c0019edc:	c3                   	ret    
c0019edd:	90                   	nop

c0019ede <ATA::flush(bool)>:
c0019ede:	53                   	push   ebx
c0019edf:	83 ec 08             	sub    esp,0x8
c0019ee2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019ee7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019eeb:	19 c0                	sbb    eax,eax
c0019eed:	83 e0 fd             	and    eax,0xfffffffd
c0019ef0:	05 ea 00 00 00       	add    eax,0xea
c0019ef5:	50                   	push   eax
c0019ef6:	6a 07                	push   0x7
c0019ef8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019eff:	50                   	push   eax
c0019f00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f06:	e8 59 f1 ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f0b:	83 c4 0c             	add    esp,0xc
c0019f0e:	6a 00                	push   0x0
c0019f10:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f17:	50                   	push   eax
c0019f18:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f1e:	e8 df fb ff ff       	call   c0019b02 <IDE::polling(unsigned char, unsigned int)>
c0019f23:	83 c4 18             	add    esp,0x18
c0019f26:	5b                   	pop    ebx
c0019f27:	c3                   	ret    

c0019f28 <ATA::readyForCommand()>:
c0019f28:	56                   	push   esi
c0019f29:	53                   	push   ebx
c0019f2a:	53                   	push   ebx
c0019f2b:	31 db                	xor    ebx,ebx
c0019f2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f31:	51                   	push   ecx
c0019f32:	6a 0c                	push   0xc
c0019f34:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f3b:	50                   	push   eax
c0019f3c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f42:	e8 dd f1 ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c0019f47:	83 c4 10             	add    esp,0x10
c0019f4a:	a8 88                	test   al,0x88
c0019f4c:	74 1f                	je     c0019f6d <ATA::readyForCommand()+0x45>
c0019f4e:	43                   	inc    ebx
c0019f4f:	83 fb 63             	cmp    ebx,0x63
c0019f52:	7e dd                	jle    c0019f31 <ATA::readyForCommand()+0x9>
c0019f54:	83 ec 0c             	sub    esp,0xc
c0019f57:	6a 0a                	push   0xa
c0019f59:	e8 42 9e ff ff       	call   c0013da0 <milliTenthSleep(unsigned int)>
c0019f5e:	83 c4 10             	add    esp,0x10
c0019f61:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019f67:	75 c8                	jne    c0019f31 <ATA::readyForCommand()+0x9>
c0019f69:	31 c0                	xor    eax,eax
c0019f6b:	eb 02                	jmp    c0019f6f <ATA::readyForCommand()+0x47>
c0019f6d:	b0 01                	mov    al,0x1
c0019f6f:	5a                   	pop    edx
c0019f70:	5b                   	pop    ebx
c0019f71:	5e                   	pop    esi
c0019f72:	c3                   	ret    
c0019f73:	90                   	nop

c0019f74 <ATA::access(unsigned long long, int, void*, bool)>:
c0019f74:	55                   	push   ebp
c0019f75:	57                   	push   edi
c0019f76:	56                   	push   esi
c0019f77:	53                   	push   ebx
c0019f78:	83 ec 2c             	sub    esp,0x2c
c0019f7b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019f7f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019f83:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f8b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019f8f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019f93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f97:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fa1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019fa7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019fab:	c1 e0 06             	shl    eax,0x6
c0019fae:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019fb6:	74 5d                	je     c001a015 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019fb8:	89 fa                	mov    edx,edi
c0019fba:	89 f0                	mov    eax,esi
c0019fbc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019fc0:	c1 ea 1c             	shr    edx,0x1c
c0019fc3:	89 d1                	mov    ecx,edx
c0019fc5:	09 c1                	or     ecx,eax
c0019fc7:	74 25                	je     c0019fee <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019fc9:	31 ed                	xor    ebp,ebp
c0019fcb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019fd2:	89 fa                	mov    edx,edi
c0019fd4:	89 f0                	mov    eax,esi
c0019fd6:	0f ad d0             	shrd   eax,edx,cl
c0019fd9:	d3 ea                	shr    edx,cl
c0019fdb:	f6 c1 20             	test   cl,0x20
c0019fde:	74 02                	je     c0019fe2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019fe0:	89 d0                	mov    eax,edx
c0019fe2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019fe6:	45                   	inc    ebp
c0019fe7:	83 fd 06             	cmp    ebp,0x6
c0019fea:	75 df                	jne    c0019fcb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019fec:	eb 76                	jmp    c001a064 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019fee:	89 f0                	mov    eax,esi
c0019ff0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019ff5:	89 fa                	mov    edx,edi
c0019ff7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019ffe:	0f ac d0 10          	shrd   eax,edx,0x10
c001a002:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a007:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a00b:	c1 ee 18             	shr    esi,0x18
c001a00e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a013:	eb 56                	jmp    c001a06b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a015:	6a 00                	push   0x0
c001a017:	6a 3f                	push   0x3f
c001a019:	57                   	push   edi
c001a01a:	56                   	push   esi
c001a01b:	e8 20 22 00 00       	call   c001c240 <__umoddi3>
c001a020:	83 c4 10             	add    esp,0x10
c001a023:	40                   	inc    eax
c001a024:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a028:	6a 00                	push   0x0
c001a02a:	68 f0 03 00 00       	push   0x3f0
c001a02f:	57                   	push   edi
c001a030:	56                   	push   esi
c001a031:	e8 0a 21 00 00       	call   c001c140 <__udivdi3>
c001a036:	83 c4 10             	add    esp,0x10
c001a039:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a03e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a045:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a04a:	6a 00                	push   0x0
c001a04c:	6a 3f                	push   0x3f
c001a04e:	57                   	push   edi
c001a04f:	56                   	push   esi
c001a050:	e8 eb 20 00 00       	call   c001c140 <__udivdi3>
c001a055:	83 c4 10             	add    esp,0x10
c001a058:	89 c6                	mov    esi,eax
c001a05a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a05f:	83 e6 0f             	and    esi,0xf
c001a062:	eb 07                	jmp    c001a06b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a064:	31 f6                	xor    esi,esi
c001a066:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a06b:	bf 01 00 00 00       	mov    edi,0x1
c001a070:	50                   	push   eax
c001a071:	6a 00                	push   0x0
c001a073:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a07a:	50                   	push   eax
c001a07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a07f:	e8 ee f1 ff ff       	call   c0019272 <IDE::enableIRQs(unsigned char, bool)>
c001a084:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a087:	e8 9c fe ff ff       	call   c0019f28 <ATA::readyForCommand()>
c001a08c:	83 c4 10             	add    esp,0x10
c001a08f:	84 c0                	test   al,al
c001a091:	0f 84 4e 02 00 00    	je     c001a2e5 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a097:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a09d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a0a3:	c1 e0 04             	shl    eax,0x4
c001a0a6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a0ad:	09 c6                	or     esi,eax
c001a0af:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a0b4:	75 05                	jne    c001a0bb <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a0b6:	83 ce a0             	or     esi,0xffffffa0
c001a0b9:	eb 03                	jmp    c001a0be <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a0bb:	83 ce e0             	or     esi,0xffffffe0
c001a0be:	89 f0                	mov    eax,esi
c001a0c0:	0f b6 f0             	movzx  esi,al
c001a0c3:	56                   	push   esi
c001a0c4:	6a 06                	push   0x6
c001a0c6:	51                   	push   ecx
c001a0c7:	52                   	push   edx
c001a0c8:	e8 97 ef ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0cd:	83 c4 10             	add    esp,0x10
c001a0d0:	6a 00                	push   0x0
c001a0d2:	6a 01                	push   0x1
c001a0d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0db:	50                   	push   eax
c001a0dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0e2:	e8 7d ef ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0e7:	83 c4 10             	add    esp,0x10
c001a0ea:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a0ef:	75 6e                	jne    c001a15f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a0f1:	6a 00                	push   0x0
c001a0f3:	6a 08                	push   0x8
c001a0f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0fc:	50                   	push   eax
c001a0fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a103:	e8 5c ef ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a108:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a10d:	50                   	push   eax
c001a10e:	6a 09                	push   0x9
c001a110:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a117:	50                   	push   eax
c001a118:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a11e:	e8 41 ef ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a123:	83 c4 20             	add    esp,0x20
c001a126:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a12b:	50                   	push   eax
c001a12c:	6a 0a                	push   0xa
c001a12e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a135:	50                   	push   eax
c001a136:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a13c:	e8 23 ef ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a141:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a146:	50                   	push   eax
c001a147:	6a 0b                	push   0xb
c001a149:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a150:	50                   	push   eax
c001a151:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a157:	e8 08 ef ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a15c:	83 c4 20             	add    esp,0x20
c001a15f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a164:	50                   	push   eax
c001a165:	6a 02                	push   0x2
c001a167:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a16e:	50                   	push   eax
c001a16f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a175:	e8 ea ee ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a17a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a17f:	50                   	push   eax
c001a180:	6a 03                	push   0x3
c001a182:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a189:	50                   	push   eax
c001a18a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a190:	e8 cf ee ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a195:	83 c4 20             	add    esp,0x20
c001a198:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a19d:	50                   	push   eax
c001a19e:	6a 04                	push   0x4
c001a1a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1a7:	50                   	push   eax
c001a1a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ae:	e8 b1 ee ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1b8:	50                   	push   eax
c001a1b9:	6a 05                	push   0x5
c001a1bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c2:	50                   	push   eax
c001a1c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c9:	e8 96 ee ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ce:	83 c4 20             	add    esp,0x20
c001a1d1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a1d6:	0f 94 c0             	sete   al
c001a1d9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a1de:	74 09                	je     c001a1e9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a1e0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a1e7:	eb 07                	jmp    c001a1f0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a1e9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a1f0:	0f b6 c0             	movzx  eax,al
c001a1f3:	50                   	push   eax
c001a1f4:	6a 07                	push   0x7
c001a1f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1fd:	50                   	push   eax
c001a1fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a204:	e8 5b ee ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a209:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a20d:	83 c4 10             	add    esp,0x10
c001a210:	85 f6                	test   esi,esi
c001a212:	0f 84 ae 00 00 00    	je     c001a2c6 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a218:	50                   	push   eax
c001a219:	6a 01                	push   0x1
c001a21b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a222:	50                   	push   eax
c001a223:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a229:	e8 d4 f8 ff ff       	call   c0019b02 <IDE::polling(unsigned char, unsigned int)>
c001a22e:	83 c4 10             	add    esp,0x10
c001a231:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a237:	84 c0                	test   al,al
c001a239:	74 20                	je     c001a25b <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a23b:	0f b6 f8             	movzx  edi,al
c001a23e:	0f b6 d2             	movzx  edx,dl
c001a241:	57                   	push   edi
c001a242:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a249:	50                   	push   eax
c001a24a:	52                   	push   edx
c001a24b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a251:	e8 fc f7 ff ff       	call   c0019a52 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a256:	e9 87 00 00 00       	jmp    c001a2e2 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a25b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a260:	74 33                	je     c001a295 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a262:	31 ed                	xor    ebp,ebp
c001a264:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a268:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a26c:	50                   	push   eax
c001a26d:	50                   	push   eax
c001a26e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a275:	50                   	push   eax
c001a276:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a27c:	e8 d1 ed ff ff       	call   c0019052 <IDE::getBase(unsigned char)>
c001a281:	89 c2                	mov    edx,eax
c001a283:	89 f8                	mov    eax,edi
c001a285:	66 ef                	out    dx,ax
c001a287:	45                   	inc    ebp
c001a288:	83 c4 10             	add    esp,0x10
c001a28b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a291:	75 d1                	jne    c001a264 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a293:	eb 23                	jmp    c001a2b8 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a295:	0f b6 d2             	movzx  edx,dl
c001a298:	51                   	push   ecx
c001a299:	51                   	push   ecx
c001a29a:	52                   	push   edx
c001a29b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2a1:	e8 ac ed ff ff       	call   c0019052 <IDE::getBase(unsigned char)>
c001a2a6:	b9 00 01 00 00       	mov    ecx,0x100
c001a2ab:	89 c2                	mov    edx,eax
c001a2ad:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a2b1:	fc                   	cld    
c001a2b2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a2b5:	83 c4 10             	add    esp,0x10
c001a2b8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a2c0:	4e                   	dec    esi
c001a2c1:	e9 4a ff ff ff       	jmp    c001a210 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a2c6:	31 ff                	xor    edi,edi
c001a2c8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a2cd:	74 16                	je     c001a2e5 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a2cf:	50                   	push   eax
c001a2d0:	50                   	push   eax
c001a2d1:	31 c0                	xor    eax,eax
c001a2d3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a2d8:	0f 94 c0             	sete   al
c001a2db:	50                   	push   eax
c001a2dc:	53                   	push   ebx
c001a2dd:	e8 fc fb ff ff       	call   c0019ede <ATA::flush(bool)>
c001a2e2:	83 c4 10             	add    esp,0x10
c001a2e5:	83 c4 2c             	add    esp,0x2c
c001a2e8:	89 f8                	mov    eax,edi
c001a2ea:	5b                   	pop    ebx
c001a2eb:	5e                   	pop    esi
c001a2ec:	5f                   	pop    edi
c001a2ed:	5d                   	pop    ebp
c001a2ee:	c3                   	ret    
c001a2ef:	90                   	nop

c001a2f0 <ATA::read(unsigned long long, int, void*)>:
c001a2f0:	57                   	push   edi
c001a2f1:	b8 04 00 00 00       	mov    eax,0x4
c001a2f6:	56                   	push   esi
c001a2f7:	53                   	push   ebx
c001a2f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a300:	8d 7a ff             	lea    edi,[edx-0x1]
c001a303:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a307:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a30b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a311:	77 25                	ja     c001a338 <ATA::read(unsigned long long, int, void*)+0x48>
c001a313:	b8 06 00 00 00       	mov    eax,0x6
c001a318:	85 f6                	test   esi,esi
c001a31a:	74 1c                	je     c001a338 <ATA::read(unsigned long long, int, void*)+0x48>
c001a31c:	50                   	push   eax
c001a31d:	50                   	push   eax
c001a31e:	6a 00                	push   0x0
c001a320:	56                   	push   esi
c001a321:	52                   	push   edx
c001a322:	53                   	push   ebx
c001a323:	51                   	push   ecx
c001a324:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a328:	e8 47 fc ff ff       	call   c0019f74 <ATA::access(unsigned long long, int, void*, bool)>
c001a32d:	83 c4 20             	add    esp,0x20
c001a330:	85 c0                	test   eax,eax
c001a332:	0f 95 c0             	setne  al
c001a335:	0f b6 c0             	movzx  eax,al
c001a338:	5b                   	pop    ebx
c001a339:	5e                   	pop    esi
c001a33a:	5f                   	pop    edi
c001a33b:	c3                   	ret    

c001a33c <ATA::write(unsigned long long, int, void*)>:
c001a33c:	57                   	push   edi
c001a33d:	b8 04 00 00 00       	mov    eax,0x4
c001a342:	56                   	push   esi
c001a343:	53                   	push   ebx
c001a344:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a348:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a34c:	8d 7a ff             	lea    edi,[edx-0x1]
c001a34f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a353:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a357:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a35d:	77 25                	ja     c001a384 <ATA::write(unsigned long long, int, void*)+0x48>
c001a35f:	b8 06 00 00 00       	mov    eax,0x6
c001a364:	85 f6                	test   esi,esi
c001a366:	74 1c                	je     c001a384 <ATA::write(unsigned long long, int, void*)+0x48>
c001a368:	50                   	push   eax
c001a369:	50                   	push   eax
c001a36a:	6a 01                	push   0x1
c001a36c:	56                   	push   esi
c001a36d:	52                   	push   edx
c001a36e:	53                   	push   ebx
c001a36f:	51                   	push   ecx
c001a370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a374:	e8 fb fb ff ff       	call   c0019f74 <ATA::access(unsigned long long, int, void*, bool)>
c001a379:	83 c4 20             	add    esp,0x20
c001a37c:	85 c0                	test   eax,eax
c001a37e:	0f 95 c0             	setne  al
c001a381:	0f b6 c0             	movzx  eax,al
c001a384:	5b                   	pop    ebx
c001a385:	5e                   	pop    esi
c001a386:	5f                   	pop    edi
c001a387:	c3                   	ret    

c001a388 <ATA::detectCHS()>:
c001a388:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a38c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a392:	c1 e0 06             	shl    eax,0x6
c001a395:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a39b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a3a5:	c7 44 24 04 e4 f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f2e4
c001a3ad:	e9 99 63 ff ff       	jmp    c001074b <Krnl::panic(char const*)>

c001a3b2 <ATA::open(int, int, void*)>:
c001a3b2:	53                   	push   ebx
c001a3b3:	83 ec 08             	sub    esp,0x8
c001a3b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3c2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a3c8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a3ce:	c1 e0 06             	shl    eax,0x6
c001a3d1:	01 d0                	add    eax,edx
c001a3d3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a3da:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a3e0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a3e7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a3f1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a3f7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a3fe:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a405:	75 0c                	jne    c001a413 <ATA::open(int, int, void*)+0x61>
c001a407:	83 ec 0c             	sub    esp,0xc
c001a40a:	53                   	push   ebx
c001a40b:	e8 78 ff ff ff       	call   c001a388 <ATA::detectCHS()>
c001a410:	83 c4 10             	add    esp,0x10
c001a413:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a419:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a41f:	c1 e0 06             	shl    eax,0x6
c001a422:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a429:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a433:	d1 e8                	shr    eax,1
c001a435:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a43b:	6a 04                	push   0x4
c001a43d:	6a 0c                	push   0xc
c001a43f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a446:	50                   	push   eax
c001a447:	52                   	push   edx
c001a448:	e8 17 ec ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a44d:	90                   	nop
c001a44e:	90                   	nop
c001a44f:	6a 00                	push   0x0
c001a451:	6a 0c                	push   0xc
c001a453:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a45a:	50                   	push   eax
c001a45b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a461:	e8 fe eb ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a466:	83 c4 14             	add    esp,0x14
c001a469:	53                   	push   ebx
c001a46a:	e8 03 20 ff ff       	call   c000c472 <PhysicalDisk::startCache()>
c001a46f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a472:	e8 73 30 ff ff       	call   c000d4ea <createPartitionsForDisk(PhysicalDisk*)>
c001a477:	31 c0                	xor    eax,eax
c001a479:	83 c4 18             	add    esp,0x18
c001a47c:	5b                   	pop    ebx
c001a47d:	c3                   	ret    

c001a47e <ATAPI::write(unsigned long long, int, void*)>:
c001a47e:	b8 03 00 00 00       	mov    eax,0x3
c001a483:	c3                   	ret    

c001a484 <ATAPI::close(int, int, void*)>:
c001a484:	83 ec 0c             	sub    esp,0xc
c001a487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a48b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a491:	85 c0                	test   eax,eax
c001a493:	74 0c                	je     c001a4a1 <ATAPI::close(int, int, void*)+0x1d>
c001a495:	83 ec 0c             	sub    esp,0xc
c001a498:	8b 10                	mov    edx,DWORD PTR [eax]
c001a49a:	50                   	push   eax
c001a49b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a49e:	83 c4 10             	add    esp,0x10
c001a4a1:	31 c0                	xor    eax,eax
c001a4a3:	83 c4 0c             	add    esp,0xc
c001a4a6:	c3                   	ret    
c001a4a7:	90                   	nop

c001a4a8 <ATAPI::ATAPI()>:
c001a4a8:	83 ec 0c             	sub    esp,0xc
c001a4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4af:	83 ec 04             	sub    esp,0x4
c001a4b2:	68 00 08 00 00       	push   0x800
c001a4b7:	68 51 f4 01 c0       	push   0xc001f451
c001a4bc:	50                   	push   eax
c001a4bd:	e8 48 1f ff ff       	call   c000c40a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a4c2:	83 c4 10             	add    esp,0x10
c001a4c5:	ba 48 f3 01 c0       	mov    edx,0xc001f348
c001a4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4ce:	89 10                	mov    DWORD PTR [eax],edx
c001a4d0:	90                   	nop
c001a4d1:	83 c4 0c             	add    esp,0xc
c001a4d4:	c3                   	ret    
c001a4d5:	90                   	nop

c001a4d6 <ATAPI::readyForCommand()>:
c001a4d6:	56                   	push   esi
c001a4d7:	53                   	push   ebx
c001a4d8:	53                   	push   ebx
c001a4d9:	31 db                	xor    ebx,ebx
c001a4db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4df:	51                   	push   ecx
c001a4e0:	6a 0c                	push   0xc
c001a4e2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a4e9:	50                   	push   eax
c001a4ea:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a4f0:	e8 2f ec ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c001a4f5:	83 c4 10             	add    esp,0x10
c001a4f8:	a8 88                	test   al,0x88
c001a4fa:	74 25                	je     c001a521 <ATAPI::readyForCommand()+0x4b>
c001a4fc:	43                   	inc    ebx
c001a4fd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a503:	7e da                	jle    c001a4df <ATAPI::readyForCommand()+0x9>
c001a505:	83 ec 0c             	sub    esp,0xc
c001a508:	68 5e 01 00 00       	push   0x15e
c001a50d:	e8 8e 98 ff ff       	call   c0013da0 <milliTenthSleep(unsigned int)>
c001a512:	83 c4 10             	add    esp,0x10
c001a515:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a51b:	75 c2                	jne    c001a4df <ATAPI::readyForCommand()+0x9>
c001a51d:	31 c0                	xor    eax,eax
c001a51f:	eb 02                	jmp    c001a523 <ATAPI::readyForCommand()+0x4d>
c001a521:	b0 01                	mov    al,0x1
c001a523:	5a                   	pop    edx
c001a524:	5b                   	pop    ebx
c001a525:	5e                   	pop    esi
c001a526:	c3                   	ret    
c001a527:	90                   	nop

c001a528 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a528:	55                   	push   ebp
c001a529:	57                   	push   edi
c001a52a:	56                   	push   esi
c001a52b:	53                   	push   ebx
c001a52c:	83 ec 20             	sub    esp,0x20
c001a52f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a533:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a537:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a53b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a53f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a543:	6a 01                	push   0x1
c001a545:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a54c:	50                   	push   eax
c001a54d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a553:	e8 1a ed ff ff       	call   c0019272 <IDE::enableIRQs(unsigned char, bool)>
c001a558:	5e                   	pop    esi
c001a559:	58                   	pop    eax
c001a55a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a561:	50                   	push   eax
c001a562:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a568:	e8 d1 ea ff ff       	call   c001903e <IDE::prepareInterrupt(unsigned char)>
c001a56d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a570:	e8 61 ff ff ff       	call   c001a4d6 <ATAPI::readyForCommand()>
c001a575:	83 c4 10             	add    esp,0x10
c001a578:	84 c0                	test   al,al
c001a57a:	75 0a                	jne    c001a586 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a57c:	bb 01 00 00 00       	mov    ebx,0x1
c001a581:	e9 57 02 00 00       	jmp    c001a7dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a586:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a58c:	c1 e0 04             	shl    eax,0x4
c001a58f:	0f b6 c0             	movzx  eax,al
c001a592:	50                   	push   eax
c001a593:	6a 06                	push   0x6
c001a595:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a59c:	50                   	push   eax
c001a59d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5a3:	e8 bc ea ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5a8:	6a 00                	push   0x0
c001a5aa:	6a 01                	push   0x1
c001a5ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5b3:	50                   	push   eax
c001a5b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5ba:	e8 a5 ea ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5bf:	83 c4 20             	add    esp,0x20
c001a5c2:	0f b6 c3             	movzx  eax,bl
c001a5c5:	0f b6 df             	movzx  ebx,bh
c001a5c8:	50                   	push   eax
c001a5c9:	6a 04                	push   0x4
c001a5cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5d2:	50                   	push   eax
c001a5d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5d9:	e8 86 ea ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5de:	53                   	push   ebx
c001a5df:	6a 05                	push   0x5
c001a5e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5e8:	50                   	push   eax
c001a5e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5ef:	e8 70 ea ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5f4:	83 c4 20             	add    esp,0x20
c001a5f7:	68 a0 00 00 00       	push   0xa0
c001a5fc:	6a 07                	push   0x7
c001a5fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a605:	50                   	push   eax
c001a606:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a60c:	e8 53 ea ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a611:	83 c4 0c             	add    esp,0xc
c001a614:	6a 01                	push   0x1
c001a616:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a61d:	50                   	push   eax
c001a61e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a624:	e8 d9 f4 ff ff       	call   c0019b02 <IDE::polling(unsigned char, unsigned int)>
c001a629:	83 c4 10             	add    esp,0x10
c001a62c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a632:	84 c0                	test   al,al
c001a634:	74 23                	je     c001a659 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a636:	0f b6 d8             	movzx  ebx,al
c001a639:	0f b6 d2             	movzx  edx,dl
c001a63c:	53                   	push   ebx
c001a63d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a644:	50                   	push   eax
c001a645:	52                   	push   edx
c001a646:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a64c:	e8 01 f4 ff ff       	call   c0019a52 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a651:	83 c4 10             	add    esp,0x10
c001a654:	e9 84 01 00 00       	jmp    c001a7dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a659:	0f b6 d2             	movzx  edx,dl
c001a65c:	53                   	push   ebx
c001a65d:	53                   	push   ebx
c001a65e:	52                   	push   edx
c001a65f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a665:	e8 e8 e9 ff ff       	call   c0019052 <IDE::getBase(unsigned char)>
c001a66a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a66e:	b9 06 00 00 00       	mov    ecx,0x6
c001a673:	89 c2                	mov    edx,eax
c001a675:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a678:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a67c:	83 c4 10             	add    esp,0x10
c001a67f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a685:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a68c:	85 db                	test   ebx,ebx
c001a68e:	0f 84 ec 00 00 00    	je     c001a780 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a694:	51                   	push   ecx
c001a695:	51                   	push   ecx
c001a696:	52                   	push   edx
c001a697:	50                   	push   eax
c001a698:	e8 35 eb ff ff       	call   c00191d2 <IDE::waitInterrupt(unsigned char)>
c001a69d:	83 c4 10             	add    esp,0x10
c001a6a0:	84 c0                	test   al,al
c001a6a2:	0f 84 d4 fe ff ff    	je     c001a57c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a6a8:	56                   	push   esi
c001a6a9:	56                   	push   esi
c001a6aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6b1:	50                   	push   eax
c001a6b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6b8:	e8 81 e9 ff ff       	call   c001903e <IDE::prepareInterrupt(unsigned char)>
c001a6bd:	83 c4 0c             	add    esp,0xc
c001a6c0:	6a 04                	push   0x4
c001a6c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6c9:	50                   	push   eax
c001a6ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6d0:	e8 4f ea ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c001a6d5:	83 c4 0c             	add    esp,0xc
c001a6d8:	89 c6                	mov    esi,eax
c001a6da:	6a 05                	push   0x5
c001a6dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6e3:	50                   	push   eax
c001a6e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6ea:	e8 35 ea ff ff       	call   c0019124 <IDE::read(unsigned char, unsigned char)>
c001a6ef:	89 f1                	mov    ecx,esi
c001a6f1:	0f b6 c0             	movzx  eax,al
c001a6f4:	0f b6 f1             	movzx  esi,cl
c001a6f7:	c1 e0 08             	shl    eax,0x8
c001a6fa:	09 c6                	or     esi,eax
c001a6fc:	d1 fe                	sar    esi,1
c001a6fe:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a702:	83 c4 10             	add    esp,0x10
c001a705:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a70a:	74 41                	je     c001a74d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a70c:	31 c9                	xor    ecx,ecx
c001a70e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a714:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a71b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a71f:	75 0a                	jne    c001a72b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a721:	01 c9                	add    ecx,ecx
c001a723:	01 cd                	add    ebp,ecx
c001a725:	4b                   	dec    ebx
c001a726:	e9 54 ff ff ff       	jmp    c001a67f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a72b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a730:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a734:	51                   	push   ecx
c001a735:	51                   	push   ecx
c001a736:	52                   	push   edx
c001a737:	50                   	push   eax
c001a738:	e8 15 e9 ff ff       	call   c0019052 <IDE::getBase(unsigned char)>
c001a73d:	89 c2                	mov    edx,eax
c001a73f:	89 f0                	mov    eax,esi
c001a741:	66 ef                	out    dx,ax
c001a743:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a747:	83 c4 10             	add    esp,0x10
c001a74a:	41                   	inc    ecx
c001a74b:	eb c1                	jmp    c001a70e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a74d:	31 f6                	xor    esi,esi
c001a74f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a755:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a75c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a760:	75 06                	jne    c001a768 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a762:	01 f6                	add    esi,esi
c001a764:	01 f5                	add    ebp,esi
c001a766:	eb bd                	jmp    c001a725 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a768:	51                   	push   ecx
c001a769:	51                   	push   ecx
c001a76a:	52                   	push   edx
c001a76b:	50                   	push   eax
c001a76c:	e8 e1 e8 ff ff       	call   c0019052 <IDE::getBase(unsigned char)>
c001a771:	89 c2                	mov    edx,eax
c001a773:	66 ed                	in     ax,dx
c001a775:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a77a:	83 c4 10             	add    esp,0x10
c001a77d:	46                   	inc    esi
c001a77e:	eb cf                	jmp    c001a74f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a780:	51                   	push   ecx
c001a781:	51                   	push   ecx
c001a782:	52                   	push   edx
c001a783:	50                   	push   eax
c001a784:	e8 49 ea ff ff       	call   c00191d2 <IDE::waitInterrupt(unsigned char)>
c001a789:	83 c4 10             	add    esp,0x10
c001a78c:	84 c0                	test   al,al
c001a78e:	0f 84 e8 fd ff ff    	je     c001a57c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a794:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a799:	52                   	push   edx
c001a79a:	52                   	push   edx
c001a79b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7a2:	50                   	push   eax
c001a7a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7a9:	e8 90 e8 ff ff       	call   c001903e <IDE::prepareInterrupt(unsigned char)>
c001a7ae:	83 c4 10             	add    esp,0x10
c001a7b1:	50                   	push   eax
c001a7b2:	50                   	push   eax
c001a7b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7ba:	50                   	push   eax
c001a7bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7c1:	e8 8c e8 ff ff       	call   c0019052 <IDE::getBase(unsigned char)>
c001a7c6:	8d 50 07             	lea    edx,[eax+0x7]
c001a7c9:	ec                   	in     al,dx
c001a7ca:	83 c4 10             	add    esp,0x10
c001a7cd:	a8 88                	test   al,0x88
c001a7cf:	74 0a                	je     c001a7db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a7d1:	4b                   	dec    ebx
c001a7d2:	75 dd                	jne    c001a7b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a7d4:	bb 02 00 00 00       	mov    ebx,0x2
c001a7d9:	eb 02                	jmp    c001a7dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a7db:	31 db                	xor    ebx,ebx
c001a7dd:	83 c4 1c             	add    esp,0x1c
c001a7e0:	89 d8                	mov    eax,ebx
c001a7e2:	5b                   	pop    ebx
c001a7e3:	5e                   	pop    esi
c001a7e4:	5f                   	pop    edi
c001a7e5:	5d                   	pop    ebp
c001a7e6:	c3                   	ret    
c001a7e7:	90                   	nop

c001a7e8 <ATAPI::diskRemoved()>:
c001a7e8:	53                   	push   ebx
c001a7e9:	83 ec 14             	sub    esp,0x14
c001a7ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a7f0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a7f7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a7fd:	e8 68 2a ff ff       	call   c000d26a <LogicalDisk::unmount()>
c001a802:	58                   	pop    eax
c001a803:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a809:	e8 a2 33 ff ff       	call   c000dbb0 <VCache::writeWriteBuffer()>
c001a80e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a814:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a818:	83 c4 18             	add    esp,0x18
c001a81b:	5b                   	pop    ebx
c001a81c:	e9 7f 33 ff ff       	jmp    c000dba0 <VCache::invalidateReadBuffer()>
c001a821:	90                   	nop

c001a822 <ATAPI::eject()>:
c001a822:	57                   	push   edi
c001a823:	b9 03 00 00 00       	mov    ecx,0x3
c001a828:	53                   	push   ebx
c001a829:	83 ec 14             	sub    esp,0x14
c001a82c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a830:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a834:	fc                   	cld    
c001a835:	31 c0                	xor    eax,eax
c001a837:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a839:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a83e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a843:	50                   	push   eax
c001a844:	50                   	push   eax
c001a845:	6a 00                	push   0x0
c001a847:	6a 00                	push   0x0
c001a849:	6a 00                	push   0x0
c001a84b:	6a 02                	push   0x2
c001a84d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a851:	50                   	push   eax
c001a852:	53                   	push   ebx
c001a853:	e8 d0 fc ff ff       	call   c001a528 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a858:	83 c4 14             	add    esp,0x14
c001a85b:	53                   	push   ebx
c001a85c:	e8 87 ff ff ff       	call   c001a7e8 <ATAPI::diskRemoved()>
c001a861:	83 c4 24             	add    esp,0x24
c001a864:	31 c0                	xor    eax,eax
c001a866:	5b                   	pop    ebx
c001a867:	5f                   	pop    edi
c001a868:	c3                   	ret    
c001a869:	90                   	nop

c001a86a <ATAPI::diskInserted()>:
c001a86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a86e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a875:	c3                   	ret    

c001a876 <ATAPI::detectMedia()>:
c001a876:	56                   	push   esi
c001a877:	53                   	push   ebx
c001a878:	83 ec 28             	sub    esp,0x28
c001a87b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a87f:	6a 0c                	push   0xc
c001a881:	6a 00                	push   0x0
c001a883:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a887:	56                   	push   esi
c001a888:	e8 63 5c fe ff       	call   c00004f0 <memset>
c001a88d:	58                   	pop    eax
c001a88e:	5a                   	pop    edx
c001a88f:	6a 00                	push   0x0
c001a891:	6a 00                	push   0x0
c001a893:	6a 00                	push   0x0
c001a895:	6a 00                	push   0x0
c001a897:	56                   	push   esi
c001a898:	53                   	push   ebx
c001a899:	e8 8a fc ff ff       	call   c001a528 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a89e:	83 c4 1c             	add    esp,0x1c
c001a8a1:	6a 0c                	push   0xc
c001a8a3:	6a 00                	push   0x0
c001a8a5:	56                   	push   esi
c001a8a6:	e8 45 5c fe ff       	call   c00004f0 <memset>
c001a8ab:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a8b0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a8b5:	59                   	pop    ecx
c001a8b6:	58                   	pop    eax
c001a8b7:	6a 01                	push   0x1
c001a8b9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a8bd:	50                   	push   eax
c001a8be:	6a 00                	push   0x0
c001a8c0:	6a 12                	push   0x12
c001a8c2:	56                   	push   esi
c001a8c3:	53                   	push   ebx
c001a8c4:	e8 5f fc ff ff       	call   c001a528 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8c9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a8cd:	83 c4 20             	add    esp,0x20
c001a8d0:	83 e0 7f             	and    eax,0x7f
c001a8d3:	3c 70                	cmp    al,0x70
c001a8d5:	74 15                	je     c001a8ec <ATAPI::detectMedia()+0x76>
c001a8d7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a8de:	75 0c                	jne    c001a8ec <ATAPI::detectMedia()+0x76>
c001a8e0:	83 ec 0c             	sub    esp,0xc
c001a8e3:	53                   	push   ebx
c001a8e4:	e8 81 ff ff ff       	call   c001a86a <ATAPI::diskInserted()>
c001a8e9:	83 c4 10             	add    esp,0x10
c001a8ec:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a8f0:	83 e0 0f             	and    eax,0xf
c001a8f3:	3c 02                	cmp    al,0x2
c001a8f5:	75 1b                	jne    c001a912 <ATAPI::detectMedia()+0x9c>
c001a8f7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a8fc:	75 2d                	jne    c001a92b <ATAPI::detectMedia()+0xb5>
c001a8fe:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a905:	74 24                	je     c001a92b <ATAPI::detectMedia()+0xb5>
c001a907:	83 ec 0c             	sub    esp,0xc
c001a90a:	53                   	push   ebx
c001a90b:	e8 d8 fe ff ff       	call   c001a7e8 <ATAPI::diskRemoved()>
c001a910:	eb 16                	jmp    c001a928 <ATAPI::detectMedia()+0xb2>
c001a912:	84 c0                	test   al,al
c001a914:	75 15                	jne    c001a92b <ATAPI::detectMedia()+0xb5>
c001a916:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a91d:	75 0c                	jne    c001a92b <ATAPI::detectMedia()+0xb5>
c001a91f:	83 ec 0c             	sub    esp,0xc
c001a922:	53                   	push   ebx
c001a923:	e8 42 ff ff ff       	call   c001a86a <ATAPI::diskInserted()>
c001a928:	83 c4 10             	add    esp,0x10
c001a92b:	83 c4 24             	add    esp,0x24
c001a92e:	5b                   	pop    ebx
c001a92f:	5e                   	pop    esi
c001a930:	c3                   	ret    
c001a931:	90                   	nop

c001a932 <ATAPI::open(int, int, void*)>:
c001a932:	56                   	push   esi
c001a933:	53                   	push   ebx
c001a934:	50                   	push   eax
c001a935:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a939:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a93d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a941:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a947:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a94d:	c1 e0 06             	shl    eax,0x6
c001a950:	01 d0                	add    eax,edx
c001a952:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a959:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a95f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a966:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a970:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a976:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a97d:	6a 04                	push   0x4
c001a97f:	6a 0c                	push   0xc
c001a981:	51                   	push   ecx
c001a982:	52                   	push   edx
c001a983:	e8 dc e6 ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a988:	90                   	nop
c001a989:	90                   	nop
c001a98a:	6a 00                	push   0x0
c001a98c:	6a 0c                	push   0xc
c001a98e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a995:	50                   	push   eax
c001a996:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a99c:	e8 c3 e6 ff ff       	call   c0019064 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9a1:	83 c4 14             	add    esp,0x14
c001a9a4:	68 74 01 00 00       	push   0x174
c001a9a9:	e8 bf d4 fe ff       	call   c0007e6d <malloc>
c001a9ae:	83 c4 0c             	add    esp,0xc
c001a9b1:	89 c6                	mov    esi,eax
c001a9b3:	6a 00                	push   0x0
c001a9b5:	68 ff ff ff 7f       	push   0x7fffffff
c001a9ba:	6a 00                	push   0x0
c001a9bc:	6a 00                	push   0x0
c001a9be:	53                   	push   ebx
c001a9bf:	68 43 f4 01 c0       	push   0xc001f443
c001a9c4:	50                   	push   eax
c001a9c5:	e8 ec 26 ff ff       	call   c000d0b6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a9ca:	83 c4 14             	add    esp,0x14
c001a9cd:	56                   	push   esi
c001a9ce:	e8 99 27 ff ff       	call   c000d16c <LogicalDisk::assignDriveLetter()>
c001a9d3:	5a                   	pop    edx
c001a9d4:	0f be c0             	movsx  eax,al
c001a9d7:	59                   	pop    ecx
c001a9d8:	50                   	push   eax
c001a9d9:	68 30 f3 01 c0       	push   0xc001f330
c001a9de:	e8 19 02 ff ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001a9e3:	58                   	pop    eax
c001a9e4:	5a                   	pop    edx
c001a9e5:	56                   	push   esi
c001a9e6:	53                   	push   ebx
c001a9e7:	e8 50 16 ff ff       	call   c000c03c <Device::addChild(Device*)>
c001a9ec:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a9f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9f5:	e8 78 1a ff ff       	call   c000c472 <PhysicalDisk::startCache()>
c001a9fa:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aa01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa04:	e8 6d fe ff ff       	call   c001a876 <ATAPI::detectMedia()>
c001aa09:	83 c4 14             	add    esp,0x14
c001aa0c:	31 c0                	xor    eax,eax
c001aa0e:	5b                   	pop    ebx
c001aa0f:	5e                   	pop    esi
c001aa10:	c3                   	ret    
c001aa11:	90                   	nop

c001aa12 <ATAPI::read(unsigned long long, int, void*)>:
c001aa12:	55                   	push   ebp
c001aa13:	57                   	push   edi
c001aa14:	56                   	push   esi
c001aa15:	53                   	push   ebx
c001aa16:	83 ec 1c             	sub    esp,0x1c
c001aa19:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa1d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aa21:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aa25:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa2c:	74 3c                	je     c001aa6a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aa2e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aa32:	b9 03 00 00 00       	mov    ecx,0x3
c001aa37:	fc                   	cld    
c001aa38:	31 c0                	xor    eax,eax
c001aa3a:	0f ce                	bswap  esi
c001aa3c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa3e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aa43:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aa47:	89 e8                	mov    eax,ebp
c001aa49:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aa4d:	50                   	push   eax
c001aa4e:	50                   	push   eax
c001aa4f:	55                   	push   ebp
c001aa50:	c1 e5 0b             	shl    ebp,0xb
c001aa53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aa57:	6a 00                	push   0x0
c001aa59:	55                   	push   ebp
c001aa5a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa5e:	50                   	push   eax
c001aa5f:	53                   	push   ebx
c001aa60:	e8 c3 fa ff ff       	call   c001a528 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aa65:	83 c4 20             	add    esp,0x20
c001aa68:	eb 1a                	jmp    c001aa84 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aa6a:	83 ec 0c             	sub    esp,0xc
c001aa6d:	53                   	push   ebx
c001aa6e:	e8 03 fe ff ff       	call   c001a876 <ATAPI::detectMedia()>
c001aa73:	83 c4 10             	add    esp,0x10
c001aa76:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa7d:	75 af                	jne    c001aa2e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aa7f:	b8 02 00 00 00       	mov    eax,0x2
c001aa84:	83 c4 1c             	add    esp,0x1c
c001aa87:	5b                   	pop    ebx
c001aa88:	5e                   	pop    esi
c001aa89:	5f                   	pop    edi
c001aa8a:	5d                   	pop    ebp
c001aa8b:	c3                   	ret    

c001aa8c <SATA::close(int, int, void*)>:
c001aa8c:	83 ec 0c             	sub    esp,0xc
c001aa8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa93:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa99:	85 c0                	test   eax,eax
c001aa9b:	74 0c                	je     c001aaa9 <SATA::close(int, int, void*)+0x1d>
c001aa9d:	83 ec 0c             	sub    esp,0xc
c001aaa0:	8b 10                	mov    edx,DWORD PTR [eax]
c001aaa2:	50                   	push   eax
c001aaa3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aaa6:	83 c4 10             	add    esp,0x10
c001aaa9:	31 c0                	xor    eax,eax
c001aaab:	83 c4 0c             	add    esp,0xc
c001aaae:	c3                   	ret    
c001aaaf:	90                   	nop

c001aab0 <SATA::powerSaving(PowerSavingLevel)>:
c001aab0:	c3                   	ret    
c001aab1:	90                   	nop

c001aab2 <SATA::open(int, int, void*)>:
c001aab2:	56                   	push   esi
c001aab3:	53                   	push   ebx
c001aab4:	50                   	push   eax
c001aab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aab9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aabd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aac7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aacd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aad7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aadb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aae5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aaeb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aaf2:	e8 43 d7 fe ff       	call   c000823a <Phys::allocatePage()>
c001aaf7:	89 c6                	mov    esi,eax
c001aaf9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aaff:	81 c6 00 10 00 00    	add    esi,0x1000
c001ab05:	e8 30 d7 fe ff       	call   c000823a <Phys::allocatePage()>
c001ab0a:	39 c6                	cmp    esi,eax
c001ab0c:	74 10                	je     c001ab1e <SATA::open(int, int, void*)+0x6c>
c001ab0e:	83 ec 0c             	sub    esp,0xc
c001ab11:	68 78 f3 01 c0       	push   0xc001f378
c001ab16:	e8 30 5c ff ff       	call   c001074b <Krnl::panic(char const*)>
c001ab1b:	83 c4 10             	add    esp,0x10
c001ab1e:	83 ec 0c             	sub    esp,0xc
c001ab21:	6a 02                	push   0x2
c001ab23:	e8 81 ee fe ff       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c001ab28:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ab2e:	6a 03                	push   0x3
c001ab30:	50                   	push   eax
c001ab31:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ab37:	ff 35 10 0a 02 c0    	push   DWORD PTR ds:0xc0020a10
c001ab3d:	e8 fc f4 fe ff       	call   c000a03e <VAS::mapPage(unsigned long, unsigned long, int)>
c001ab42:	83 c4 14             	add    esp,0x14
c001ab45:	53                   	push   ebx
c001ab46:	e8 27 19 ff ff       	call   c000c472 <PhysicalDisk::startCache()>
c001ab4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab4e:	e8 97 29 ff ff       	call   c000d4ea <createPartitionsForDisk(PhysicalDisk*)>
c001ab53:	83 c4 14             	add    esp,0x14
c001ab56:	31 c0                	xor    eax,eax
c001ab58:	5b                   	pop    ebx
c001ab59:	5e                   	pop    esi
c001ab5a:	c3                   	ret    
c001ab5b:	90                   	nop

c001ab5c <SATA::SATA()>:
c001ab5c:	83 ec 0c             	sub    esp,0xc
c001ab5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab63:	83 ec 04             	sub    esp,0x4
c001ab66:	68 00 02 00 00       	push   0x200
c001ab6b:	68 8c f3 01 c0       	push   0xc001f38c
c001ab70:	50                   	push   eax
c001ab71:	e8 94 18 ff ff       	call   c000c40a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ab76:	83 c4 10             	add    esp,0x10
c001ab79:	ba fc f3 01 c0       	mov    edx,0xc001f3fc
c001ab7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab82:	89 10                	mov    DWORD PTR [eax],edx
c001ab84:	90                   	nop
c001ab85:	83 c4 0c             	add    esp,0xc
c001ab88:	c3                   	ret    
c001ab89:	90                   	nop

c001ab8a <SATA::access(unsigned long long, int, void*, bool)>:
c001ab8a:	55                   	push   ebp
c001ab8b:	57                   	push   edi
c001ab8c:	56                   	push   esi
c001ab8d:	53                   	push   ebx
c001ab8e:	83 ec 2c             	sub    esp,0x2c
c001ab91:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ab95:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ab99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab9d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001aba1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aba5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001abaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abae:	7e 10                	jle    c001abc0 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001abb0:	83 ec 0c             	sub    esp,0xc
c001abb3:	68 9c f3 01 c0       	push   0xc001f39c
c001abb8:	e8 8e 5b ff ff       	call   c001074b <Krnl::panic(char const*)>
c001abbd:	83 c4 10             	add    esp,0x10
c001abc0:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001abc6:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001abcc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001abd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001abd6:	89 d0                	mov    eax,edx
c001abd8:	c1 e0 07             	shl    eax,0x7
c001abdb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001abdf:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001abe9:	51                   	push   ecx
c001abea:	8d 42 02             	lea    eax,[edx+0x2]
c001abed:	51                   	push   ecx
c001abee:	c1 e0 07             	shl    eax,0x7
c001abf1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001abf5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001abf9:	50                   	push   eax
c001abfa:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ac00:	e8 e7 ef ff ff       	call   c0019bec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ac05:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac09:	83 c4 10             	add    esp,0x10
c001ac0c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ac11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac15:	0f 84 4f 01 00 00    	je     c001ad6a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ac1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac1f:	c1 e0 09             	shl    eax,0x9
c001ac22:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ac27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac2b:	74 0e                	je     c001ac3b <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ac2d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ac33:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ac37:	89 c1                	mov    ecx,eax
c001ac39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac3f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac45:	8d 42 02             	lea    eax,[edx+0x2]
c001ac48:	c1 e0 07             	shl    eax,0x7
c001ac4b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac4f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac51:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ac57:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ac5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac61:	c1 e1 05             	shl    ecx,0x5
c001ac64:	01 c8                	add    eax,ecx
c001ac66:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ac6a:	83 e1 01             	and    ecx,0x1
c001ac6d:	89 ce                	mov    esi,ecx
c001ac6f:	8a 08                	mov    cl,BYTE PTR [eax]
c001ac71:	c1 e6 06             	shl    esi,0x6
c001ac74:	83 e1 bf             	and    ecx,0xffffffbf
c001ac77:	09 f1                	or     ecx,esi
c001ac79:	88 08                	mov    BYTE PTR [eax],cl
c001ac7b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ac7d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ac83:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ac89:	89 08                	mov    DWORD PTR [eax],ecx
c001ac8b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac91:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ac97:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ac9d:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001aca0:	50                   	push   eax
c001aca1:	68 90 00 00 00       	push   0x90
c001aca6:	6a 00                	push   0x0
c001aca8:	56                   	push   esi
c001aca9:	e8 42 58 fe ff       	call   c00004f0 <memset>
c001acae:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001acb4:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001acb8:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001acbe:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001acc2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001acc6:	83 c4 10             	add    esp,0x10
c001acc9:	48                   	dec    eax
c001acca:	25 ff ff 3f 00       	and    eax,0x3fffff
c001accf:	89 c1                	mov    ecx,eax
c001acd1:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001acd7:	25 00 00 c0 ff       	and    eax,0xffc00000
c001acdc:	09 c8                	or     eax,ecx
c001acde:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ace4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ace7:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001acee:	66 25 00 7f          	and    ax,0x7f00
c001acf2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001acf6:	66 0d 27 80          	or     ax,0x8027
c001acfa:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001acff:	66 89 06             	mov    WORD PTR [esi],ax
c001ad02:	19 c0                	sbb    eax,eax
c001ad04:	83 e0 f0             	and    eax,0xfffffff0
c001ad07:	83 c0 35             	add    eax,0x35
c001ad0a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ad0d:	89 e8                	mov    eax,ebp
c001ad0f:	c1 e8 10             	shr    eax,0x10
c001ad12:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ad15:	89 e8                	mov    eax,ebp
c001ad17:	c1 e8 18             	shr    eax,0x18
c001ad1a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ad1d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ad21:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ad24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad28:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ad2b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ad2f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ad33:	89 d6                	mov    esi,edx
c001ad35:	31 c0                	xor    eax,eax
c001ad37:	c1 e6 07             	shl    esi,0x7
c001ad3a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ad3e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ad44:	80 e1 88             	and    cl,0x88
c001ad47:	74 0a                	je     c001ad53 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ad49:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad4e:	74 0a                	je     c001ad5a <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ad50:	40                   	inc    eax
c001ad51:	eb eb                	jmp    c001ad3e <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ad53:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad58:	75 17                	jne    c001ad71 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ad5a:	83 ec 0c             	sub    esp,0xc
c001ad5d:	68 d5 f3 01 c0       	push   0xc001f3d5
c001ad62:	e8 95 fe fe ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001ad67:	83 c4 10             	add    esp,0x10
c001ad6a:	b8 01 00 00 00       	mov    eax,0x1
c001ad6f:	eb 5d                	jmp    c001adce <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad71:	b8 01 00 00 00       	mov    eax,0x1
c001ad76:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ad7a:	c1 e2 07             	shl    edx,0x7
c001ad7d:	d3 e0                	shl    eax,cl
c001ad7f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ad83:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ad89:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ad8f:	85 c8                	test   eax,ecx
c001ad91:	74 16                	je     c001ada9 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ad93:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ad99:	0f ba e1 1e          	bt     ecx,0x1e
c001ad9d:	73 ea                	jae    c001ad89 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ad9f:	83 ec 0c             	sub    esp,0xc
c001ada2:	68 e3 f3 01 c0       	push   0xc001f3e3
c001ada7:	eb b9                	jmp    c001ad62 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ada9:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001adaf:	0f ba e0 1e          	bt     eax,0x1e
c001adb3:	72 b5                	jb     c001ad6a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001adb5:	31 c0                	xor    eax,eax
c001adb7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001adbc:	75 10                	jne    c001adce <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001adbe:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001adc4:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001adc8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001adcc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adce:	83 c4 2c             	add    esp,0x2c
c001add1:	5b                   	pop    ebx
c001add2:	5e                   	pop    esi
c001add3:	5f                   	pop    edi
c001add4:	5d                   	pop    ebp
c001add5:	c3                   	ret    

c001add6 <SATA::read(unsigned long long, int, void*)>:
c001add6:	57                   	push   edi
c001add7:	b8 04 00 00 00       	mov    eax,0x4
c001addc:	56                   	push   esi
c001addd:	53                   	push   ebx
c001adde:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ade2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ade6:	8d 7a ff             	lea    edi,[edx-0x1]
c001ade9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aded:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001adf1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001adf7:	77 25                	ja     c001ae1e <SATA::read(unsigned long long, int, void*)+0x48>
c001adf9:	b8 06 00 00 00       	mov    eax,0x6
c001adfe:	85 f6                	test   esi,esi
c001ae00:	74 1c                	je     c001ae1e <SATA::read(unsigned long long, int, void*)+0x48>
c001ae02:	50                   	push   eax
c001ae03:	50                   	push   eax
c001ae04:	6a 00                	push   0x0
c001ae06:	56                   	push   esi
c001ae07:	52                   	push   edx
c001ae08:	53                   	push   ebx
c001ae09:	51                   	push   ecx
c001ae0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae0e:	e8 77 fd ff ff       	call   c001ab8a <SATA::access(unsigned long long, int, void*, bool)>
c001ae13:	83 c4 20             	add    esp,0x20
c001ae16:	85 c0                	test   eax,eax
c001ae18:	0f 95 c0             	setne  al
c001ae1b:	0f b6 c0             	movzx  eax,al
c001ae1e:	5b                   	pop    ebx
c001ae1f:	5e                   	pop    esi
c001ae20:	5f                   	pop    edi
c001ae21:	c3                   	ret    

c001ae22 <SATA::write(unsigned long long, int, void*)>:
c001ae22:	55                   	push   ebp
c001ae23:	b8 04 00 00 00       	mov    eax,0x4
c001ae28:	57                   	push   edi
c001ae29:	56                   	push   esi
c001ae2a:	53                   	push   ebx
c001ae2b:	83 ec 0c             	sub    esp,0xc
c001ae2e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ae32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae36:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ae39:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ae3d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ae41:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ae47:	77 3d                	ja     c001ae86 <SATA::write(unsigned long long, int, void*)+0x64>
c001ae49:	b8 06 00 00 00       	mov    eax,0x6
c001ae4e:	85 ed                	test   ebp,ebp
c001ae50:	74 34                	je     c001ae86 <SATA::write(unsigned long long, int, void*)+0x64>
c001ae52:	c1 e3 09             	shl    ebx,0x9
c001ae55:	01 eb                	add    ebx,ebp
c001ae57:	89 d6                	mov    esi,edx
c001ae59:	89 cf                	mov    edi,ecx
c001ae5b:	83 c6 01             	add    esi,0x1
c001ae5e:	83 d7 00             	adc    edi,0x0
c001ae61:	50                   	push   eax
c001ae62:	50                   	push   eax
c001ae63:	6a 01                	push   0x1
c001ae65:	55                   	push   ebp
c001ae66:	81 c5 00 02 00 00    	add    ebp,0x200
c001ae6c:	6a 01                	push   0x1
c001ae6e:	51                   	push   ecx
c001ae6f:	52                   	push   edx
c001ae70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae74:	e8 11 fd ff ff       	call   c001ab8a <SATA::access(unsigned long long, int, void*, bool)>
c001ae79:	83 c4 20             	add    esp,0x20
c001ae7c:	89 f2                	mov    edx,esi
c001ae7e:	89 f9                	mov    ecx,edi
c001ae80:	39 dd                	cmp    ebp,ebx
c001ae82:	75 d3                	jne    c001ae57 <SATA::write(unsigned long long, int, void*)+0x35>
c001ae84:	31 c0                	xor    eax,eax
c001ae86:	83 c4 0c             	add    esp,0xc
c001ae89:	5b                   	pop    ebx
c001ae8a:	5e                   	pop    esi
c001ae8b:	5f                   	pop    edi
c001ae8c:	5d                   	pop    ebp
c001ae8d:	c3                   	ret    

c001ae8e <SATAPI::write(unsigned long long, int, void*)>:
c001ae8e:	b8 03 00 00 00       	mov    eax,0x3
c001ae93:	c3                   	ret    

c001ae94 <SATAPI::close(int, int, void*)>:
c001ae94:	83 ec 0c             	sub    esp,0xc
c001ae97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae9b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aea1:	85 c0                	test   eax,eax
c001aea3:	74 0c                	je     c001aeb1 <SATAPI::close(int, int, void*)+0x1d>
c001aea5:	83 ec 0c             	sub    esp,0xc
c001aea8:	8b 10                	mov    edx,DWORD PTR [eax]
c001aeaa:	50                   	push   eax
c001aeab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aeae:	83 c4 10             	add    esp,0x10
c001aeb1:	31 c0                	xor    eax,eax
c001aeb3:	83 c4 0c             	add    esp,0xc
c001aeb6:	c3                   	ret    
c001aeb7:	90                   	nop

c001aeb8 <SATAPI::open(int, int, void*)>:
c001aeb8:	56                   	push   esi
c001aeb9:	53                   	push   ebx
c001aeba:	51                   	push   ecx
c001aebb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aebf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aec3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aecd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aed3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aedd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aee1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001aeeb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aef1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001aef8:	e8 3d d3 fe ff       	call   c000823a <Phys::allocatePage()>
c001aefd:	89 c6                	mov    esi,eax
c001aeff:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001af05:	81 c6 00 10 00 00    	add    esi,0x1000
c001af0b:	e8 2a d3 fe ff       	call   c000823a <Phys::allocatePage()>
c001af10:	39 c6                	cmp    esi,eax
c001af12:	74 10                	je     c001af24 <SATAPI::open(int, int, void*)+0x6c>
c001af14:	83 ec 0c             	sub    esp,0xc
c001af17:	68 2c f4 01 c0       	push   0xc001f42c
c001af1c:	e8 2a 58 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001af21:	83 c4 10             	add    esp,0x10
c001af24:	83 ec 0c             	sub    esp,0xc
c001af27:	6a 02                	push   0x2
c001af29:	e8 7b ea fe ff       	call   c00099a9 <Virt::allocateKernelVirtualPages(int)>
c001af2e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001af34:	6a 03                	push   0x3
c001af36:	50                   	push   eax
c001af37:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001af3d:	ff 35 10 0a 02 c0    	push   DWORD PTR ds:0xc0020a10
c001af43:	e8 f6 f0 fe ff       	call   c000a03e <VAS::mapPage(unsigned long, unsigned long, int)>
c001af48:	83 c4 14             	add    esp,0x14
c001af4b:	68 74 01 00 00       	push   0x174
c001af50:	e8 18 cf fe ff       	call   c0007e6d <malloc>
c001af55:	83 c4 0c             	add    esp,0xc
c001af58:	89 c6                	mov    esi,eax
c001af5a:	6a 00                	push   0x0
c001af5c:	68 ff ff ff 7f       	push   0x7fffffff
c001af61:	6a 00                	push   0x0
c001af63:	6a 00                	push   0x0
c001af65:	53                   	push   ebx
c001af66:	68 42 f4 01 c0       	push   0xc001f442
c001af6b:	50                   	push   eax
c001af6c:	e8 45 21 ff ff       	call   c000d0b6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001af71:	83 c4 14             	add    esp,0x14
c001af74:	56                   	push   esi
c001af75:	e8 f2 21 ff ff       	call   c000d16c <LogicalDisk::assignDriveLetter()>
c001af7a:	5a                   	pop    edx
c001af7b:	0f be c0             	movsx  eax,al
c001af7e:	59                   	pop    ecx
c001af7f:	50                   	push   eax
c001af80:	68 30 f3 01 c0       	push   0xc001f330
c001af85:	e8 72 fc fe ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001af8a:	58                   	pop    eax
c001af8b:	5a                   	pop    edx
c001af8c:	56                   	push   esi
c001af8d:	53                   	push   ebx
c001af8e:	e8 a9 10 ff ff       	call   c000c03c <Device::addChild(Device*)>
c001af93:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af9c:	e8 d1 14 ff ff       	call   c000c472 <PhysicalDisk::startCache()>
c001afa1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001afa8:	31 c0                	xor    eax,eax
c001afaa:	83 c4 14             	add    esp,0x14
c001afad:	5b                   	pop    ebx
c001afae:	5e                   	pop    esi
c001afaf:	c3                   	ret    

c001afb0 <SATAPI::SATAPI()>:
c001afb0:	83 ec 0c             	sub    esp,0xc
c001afb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb7:	83 ec 04             	sub    esp,0x4
c001afba:	68 00 08 00 00       	push   0x800
c001afbf:	68 50 f4 01 c0       	push   0xc001f450
c001afc4:	50                   	push   eax
c001afc5:	e8 40 14 ff ff       	call   c000c40a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001afca:	83 c4 10             	add    esp,0x10
c001afcd:	ba 8c f5 01 c0       	mov    edx,0xc001f58c
c001afd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afd6:	89 10                	mov    DWORD PTR [eax],edx
c001afd8:	90                   	nop
c001afd9:	83 c4 0c             	add    esp,0xc
c001afdc:	c3                   	ret    
c001afdd:	90                   	nop

c001afde <SATAPI::diskRemoved()>:
c001afde:	c3                   	ret    
c001afdf:	90                   	nop

c001afe0 <SATAPI::diskInserted()>:
c001afe0:	83 ec 18             	sub    esp,0x18
c001afe3:	68 5c f4 01 c0       	push   0xc001f45c
c001afe8:	e8 0f fc fe ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001afed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aff1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001aff8:	83 c4 1c             	add    esp,0x1c
c001affb:	c3                   	ret    

c001affc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001affc:	55                   	push   ebp
c001affd:	57                   	push   edi
c001affe:	56                   	push   esi
c001afff:	53                   	push   ebx
c001b000:	83 ec 38             	sub    esp,0x38
c001b003:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001b007:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b00b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b00f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b013:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b017:	68 74 f4 01 c0       	push   0xc001f474
c001b01c:	e8 db fb fe ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001b021:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b027:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b02d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b031:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b037:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b03b:	c1 e0 07             	shl    eax,0x7
c001b03e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b042:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b046:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b050:	58                   	pop    eax
c001b051:	5a                   	pop    edx
c001b052:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b056:	8d 58 02             	lea    ebx,[eax+0x2]
c001b059:	c1 e3 07             	shl    ebx,0x7
c001b05c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001b060:	53                   	push   ebx
c001b061:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b067:	e8 80 eb ff ff       	call   c0019bec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b06c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b070:	83 c4 10             	add    esp,0x10
c001b073:	b8 01 00 00 00       	mov    eax,0x1
c001b078:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b07d:	0f 84 4c 02 00 00    	je     c001b2cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b083:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b089:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b08b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b091:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b097:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b09b:	c1 e1 05             	shl    ecx,0x5
c001b09e:	01 c8                	add    eax,ecx
c001b0a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b0a2:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b0a8:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b0ae:	89 08                	mov    DWORD PTR [eax],ecx
c001b0b0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b0b6:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b0bc:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b0c2:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b0c5:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b0c8:	50                   	push   eax
c001b0c9:	68 90 00 00 00       	push   0x90
c001b0ce:	6a 00                	push   0x0
c001b0d0:	53                   	push   ebx
c001b0d1:	e8 1a 54 fe ff       	call   c00004f0 <memset>
c001b0d6:	b9 0c 00 00 00       	mov    ecx,0xc
c001b0db:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b0df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0e1:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b0e7:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b0eb:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b0f1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b0f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b0f9:	48                   	dec    eax
c001b0fa:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b0ff:	89 c1                	mov    ecx,eax
c001b101:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b107:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b10c:	09 c8                	or     eax,ecx
c001b10e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b114:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b117:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b11e:	66 25 00 7f          	and    ax,0x7f00
c001b122:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b126:	66 0d 27 80          	or     ax,0x8027
c001b12a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b12e:	66 89 03             	mov    WORD PTR [ebx],ax
c001b131:	89 d0                	mov    eax,edx
c001b133:	c1 ea 18             	shr    edx,0x18
c001b136:	c1 e8 10             	shr    eax,0x10
c001b139:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b13c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b13f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b143:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b146:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b14a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b14d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b151:	83 c4 10             	add    esp,0x10
c001b154:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b158:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b15c:	31 c0                	xor    eax,eax
c001b15e:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b164:	80 e1 88             	and    cl,0x88
c001b167:	74 0a                	je     c001b173 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b169:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b16e:	74 0a                	je     c001b17a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b170:	40                   	inc    eax
c001b171:	eb eb                	jmp    c001b15e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b173:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b178:	75 16                	jne    c001b190 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b17a:	83 ec 0c             	sub    esp,0xc
c001b17d:	68 8e f4 01 c0       	push   0xc001f48e
c001b182:	e8 75 fa fe ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001b187:	5f                   	pop    edi
c001b188:	5d                   	pop    ebp
c001b189:	68 a3 f4 01 c0       	push   0xc001f4a3
c001b18e:	eb 4f                	jmp    c001b1df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b190:	be 01 00 00 00       	mov    esi,0x1
c001b195:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b199:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b19d:	d3 e6                	shl    esi,cl
c001b19f:	c1 e7 07             	shl    edi,0x7
c001b1a2:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b1a8:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b1ad:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b1b1:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b1b7:	85 c6                	test   esi,eax
c001b1b9:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b1bf:	0f 84 cb 00 00 00    	je     c001b290 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b1c5:	0f ba e0 1e          	bt     eax,0x1e
c001b1c9:	73 2c                	jae    c001b1f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b1cb:	83 ec 0c             	sub    esp,0xc
c001b1ce:	68 b5 f4 01 c0       	push   0xc001f4b5
c001b1d3:	e8 24 fa fe ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001b1d8:	5b                   	pop    ebx
c001b1d9:	5e                   	pop    esi
c001b1da:	68 c8 f4 01 c0       	push   0xc001f4c8
c001b1df:	ff 35 64 09 02 c0    	push   DWORD PTR ds:0xc0020964
c001b1e5:	e8 f2 dc fe ff       	call   c0008edc <VgaText::puts(char const*)>
c001b1ea:	83 c4 10             	add    esp,0x10
c001b1ed:	b8 01 00 00 00       	mov    eax,0x1
c001b1f2:	e9 d8 00 00 00       	jmp    c001b2cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b1f7:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b1fd:	83 f8 0d             	cmp    eax,0xd
c001b200:	77 0a                	ja     c001b20c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b202:	83 ec 0c             	sub    esp,0xc
c001b205:	68 c8 00 00 00       	push   0xc8
c001b20a:	eb 28                	jmp    c001b234 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b20c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b212:	83 f8 0d             	cmp    eax,0xd
c001b215:	77 0a                	ja     c001b221 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b217:	83 ec 0c             	sub    esp,0xc
c001b21a:	68 58 02 00 00       	push   0x258
c001b21f:	eb 13                	jmp    c001b234 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b221:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b227:	83 f8 06             	cmp    eax,0x6
c001b22a:	77 10                	ja     c001b23c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b22c:	83 ec 0c             	sub    esp,0xc
c001b22f:	68 dc 05 00 00       	push   0x5dc
c001b234:	e8 67 8b ff ff       	call   c0013da0 <milliTenthSleep(unsigned int)>
c001b239:	83 c4 10             	add    esp,0x10
c001b23c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b240:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b243:	75 06                	jne    c001b24b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b245:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b249:	74 15                	je     c001b260 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b24b:	83 fb 06             	cmp    ebx,0x6
c001b24e:	77 10                	ja     c001b260 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b250:	83 ec 0c             	sub    esp,0xc
c001b253:	68 c4 09 00 00       	push   0x9c4
c001b258:	e8 43 8b ff ff       	call   c0013da0 <milliTenthSleep(unsigned int)>
c001b25d:	83 c4 10             	add    esp,0x10
c001b260:	43                   	inc    ebx
c001b261:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b267:	0f 85 44 ff ff ff    	jne    c001b1b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b26d:	51                   	push   ecx
c001b26e:	51                   	push   ecx
c001b26f:	68 d9 f4 01 c0       	push   0xc001f4d9
c001b274:	ff 35 64 09 02 c0    	push   DWORD PTR ds:0xc0020964
c001b27a:	e8 5d dc fe ff       	call   c0008edc <VgaText::puts(char const*)>
c001b27f:	c7 04 24 e9 f4 01 c0 	mov    DWORD PTR [esp],0xc001f4e9
c001b286:	e8 71 f9 fe ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001b28b:	e9 5a ff ff ff       	jmp    c001b1ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b290:	0f ba e0 1e          	bt     eax,0x1e
c001b294:	73 19                	jae    c001b2af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b296:	83 ec 0c             	sub    esp,0xc
c001b299:	68 fd f4 01 c0       	push   0xc001f4fd
c001b29e:	e8 59 f9 fe ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001b2a3:	58                   	pop    eax
c001b2a4:	5a                   	pop    edx
c001b2a5:	68 12 f5 01 c0       	push   0xc001f512
c001b2aa:	e9 30 ff ff ff       	jmp    c001b1df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b2af:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b2b4:	74 17                	je     c001b2cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b2b6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b2bb:	74 10                	je     c001b2cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b2bd:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b2c3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b2c7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b2cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2cd:	31 c0                	xor    eax,eax
c001b2cf:	83 c4 2c             	add    esp,0x2c
c001b2d2:	5b                   	pop    ebx
c001b2d3:	5e                   	pop    esi
c001b2d4:	5f                   	pop    edi
c001b2d5:	5d                   	pop    ebp
c001b2d6:	c3                   	ret    
c001b2d7:	90                   	nop

c001b2d8 <SATAPI::eject()>:
c001b2d8:	57                   	push   edi
c001b2d9:	b9 03 00 00 00       	mov    ecx,0x3
c001b2de:	83 ec 18             	sub    esp,0x18
c001b2e1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b2e5:	fc                   	cld    
c001b2e6:	31 c0                	xor    eax,eax
c001b2e8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b2ea:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b2ef:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b2f4:	50                   	push   eax
c001b2f5:	6a 00                	push   0x0
c001b2f7:	6a 00                	push   0x0
c001b2f9:	6a 00                	push   0x0
c001b2fb:	6a 00                	push   0x0
c001b2fd:	6a 02                	push   0x2
c001b2ff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b303:	50                   	push   eax
c001b304:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b308:	e8 ef fc ff ff       	call   c001affc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b30d:	31 c0                	xor    eax,eax
c001b30f:	83 c4 38             	add    esp,0x38
c001b312:	5f                   	pop    edi
c001b313:	c3                   	ret    

c001b314 <SATAPI::read(unsigned long long, int, void*)>:
c001b314:	57                   	push   edi
c001b315:	56                   	push   esi
c001b316:	53                   	push   ebx
c001b317:	83 ec 3c             	sub    esp,0x3c
c001b31a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b31e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b322:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b326:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b32a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b32e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b332:	68 25 f5 01 c0       	push   0xc001f525
c001b337:	e8 c0 f8 fe ff       	call   c000abfc <Dbg::kprintf(char const*, ...)>
c001b33c:	83 c4 10             	add    esp,0x10
c001b33f:	83 fe 04             	cmp    esi,0x4
c001b342:	7e 10                	jle    c001b354 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b344:	83 ec 0c             	sub    esp,0xc
c001b347:	68 36 f5 01 c0       	push   0xc001f536
c001b34c:	e8 fa 53 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001b351:	83 c4 10             	add    esp,0x10
c001b354:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b35a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b360:	51                   	push   ecx
c001b361:	50                   	push   eax
c001b362:	83 c0 02             	add    eax,0x2
c001b365:	c1 e0 07             	shl    eax,0x7
c001b368:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b36e:	50                   	push   eax
c001b36f:	52                   	push   edx
c001b370:	e8 3b e9 ff ff       	call   c0019cb0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b375:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b379:	b9 03 00 00 00       	mov    ecx,0x3
c001b37e:	fc                   	cld    
c001b37f:	31 c0                	xor    eax,eax
c001b381:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b383:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b388:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b38d:	83 c4 0c             	add    esp,0xc
c001b390:	6a 00                	push   0x0
c001b392:	6a 00                	push   0x0
c001b394:	6a 00                	push   0x0
c001b396:	6a 00                	push   0x0
c001b398:	6a 02                	push   0x2
c001b39a:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b39e:	50                   	push   eax
c001b39f:	53                   	push   ebx
c001b3a0:	e8 57 fc ff ff       	call   c001affc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b3a5:	83 c4 20             	add    esp,0x20
c001b3a8:	85 c0                	test   eax,eax
c001b3aa:	74 1f                	je     c001b3cb <SATAPI::read(unsigned long long, int, void*)+0xb7>
c001b3ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3b0:	50                   	push   eax
c001b3b1:	50                   	push   eax
c001b3b2:	68 60 f5 01 c0       	push   0xc001f560
c001b3b7:	ff 35 64 09 02 c0    	push   DWORD PTR ds:0xc0020964
c001b3bd:	e8 1a db fe ff       	call   c0008edc <VgaText::puts(char const*)>
c001b3c2:	58                   	pop    eax
c001b3c3:	5a                   	pop    edx
c001b3c4:	68 68 f5 01 c0       	push   0xc001f568
c001b3c9:	eb 61                	jmp    c001b42c <SATAPI::read(unsigned long long, int, void*)+0x118>
c001b3cb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b3cf:	b9 03 00 00 00       	mov    ecx,0x3
c001b3d4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3da:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b3df:	0f c8                	bswap  eax
c001b3e1:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b3e5:	89 f0                	mov    eax,esi
c001b3e7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b3eb:	57                   	push   edi
c001b3ec:	56                   	push   esi
c001b3ed:	c1 e6 0b             	shl    esi,0xb
c001b3f0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b3f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3fc:	56                   	push   esi
c001b3fd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b401:	50                   	push   eax
c001b402:	53                   	push   ebx
c001b403:	e8 f4 fb ff ff       	call   c001affc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b408:	83 c4 20             	add    esp,0x20
c001b40b:	85 c0                	test   eax,eax
c001b40d:	74 2f                	je     c001b43e <SATAPI::read(unsigned long long, int, void*)+0x12a>
c001b40f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b413:	50                   	push   eax
c001b414:	50                   	push   eax
c001b415:	68 72 f5 01 c0       	push   0xc001f572
c001b41a:	ff 35 64 09 02 c0    	push   DWORD PTR ds:0xc0020964
c001b420:	e8 b7 da fe ff       	call   c0008edc <VgaText::puts(char const*)>
c001b425:	5a                   	pop    edx
c001b426:	59                   	pop    ecx
c001b427:	68 7a f5 01 c0       	push   0xc001f57a
c001b42c:	ff 35 64 09 02 c0    	push   DWORD PTR ds:0xc0020964
c001b432:	e8 a5 da fe ff       	call   c0008edc <VgaText::puts(char const*)>
c001b437:	83 c4 10             	add    esp,0x10
c001b43a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b43e:	83 c4 30             	add    esp,0x30
c001b441:	5b                   	pop    ebx
c001b442:	5e                   	pop    esi
c001b443:	5f                   	pop    edi
c001b444:	c3                   	ret    
c001b445:	90                   	nop

c001b446 <SATAPI::detectMedia()>:
c001b446:	c3                   	ret    
c001b447:	90                   	nop

c001b448 <IOAPIC::close(int, int, void*)>:
c001b448:	b8 00 00 00 00       	mov    eax,0x0
c001b44d:	c3                   	ret    

c001b44e <apicGetBase()>:
c001b44e:	55                   	push   ebp
c001b44f:	89 e5                	mov    ebp,esp
c001b451:	83 ec 18             	sub    esp,0x18
c001b454:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c001b459:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b45f:	83 e0 08             	and    eax,0x8
c001b462:	84 c0                	test   al,al
c001b464:	75 07                	jne    c001b46d <apicGetBase()+0x1f>
c001b466:	b8 00 00 00 00       	mov    eax,0x0
c001b46b:	eb 21                	jmp    c001b48e <apicGetBase()+0x40>
c001b46d:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c001b472:	83 ec 08             	sub    esp,0x8
c001b475:	6a 1b                	push   0x1b
c001b477:	50                   	push   eax
c001b478:	e8 2d c0 fe ff       	call   c00074aa <Computer::rdmsr(unsigned int)>
c001b47d:	83 c4 10             	add    esp,0x10
c001b480:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b483:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b486:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b489:	25 00 00 ff ff       	and    eax,0xffff0000
c001b48e:	c9                   	leave  
c001b48f:	c3                   	ret    

c001b490 <IOAPIC::IOAPIC()>:
c001b490:	83 ec 0c             	sub    esp,0xc
c001b493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b497:	83 ec 08             	sub    esp,0x8
c001b49a:	68 bc f5 01 c0       	push   0xc001f5bc
c001b49f:	50                   	push   eax
c001b4a0:	e8 2f 0d ff ff       	call   c000c1d4 <Device::Device(char const*)>
c001b4a5:	83 c4 10             	add    esp,0x10
c001b4a8:	ba cc f5 01 c0       	mov    edx,0xc001f5cc
c001b4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4b1:	89 10                	mov    DWORD PTR [eax],edx
c001b4b3:	90                   	nop
c001b4b4:	83 c4 0c             	add    esp,0xc
c001b4b7:	c3                   	ret    

c001b4b8 <apicOpen()>:
c001b4b8:	55                   	push   ebp
c001b4b9:	89 e5                	mov    ebp,esp
c001b4bb:	53                   	push   ebx
c001b4bc:	83 ec 34             	sub    esp,0x34
c001b4bf:	a0 20 48 02 c0       	mov    al,ds:0xc0024820
c001b4c4:	83 f0 01             	xor    eax,0x1
c001b4c7:	84 c0                	test   al,al
c001b4c9:	0f 84 9d 00 00 00    	je     c001b56c <apicOpen()+0xb4>
c001b4cf:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b4d3:	a0 e0 31 02 c0       	mov    al,ds:0xc00231e0
c001b4d8:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b4db:	0f 83 84 00 00 00    	jae    c001b565 <apicOpen()+0xad>
c001b4e1:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b4e8:	83 ec 0c             	sub    esp,0xc
c001b4eb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b4ee:	e8 7a c9 fe ff       	call   c0007e6d <malloc>
c001b4f3:	83 c4 10             	add    esp,0x10
c001b4f6:	89 c3                	mov    ebx,eax
c001b4f8:	83 ec 0c             	sub    esp,0xc
c001b4fb:	53                   	push   ebx
c001b4fc:	e8 8f ff ff ff       	call   c001b490 <IOAPIC::IOAPIC()>
c001b501:	83 c4 10             	add    esp,0x10
c001b504:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b507:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b50a:	25 ff 00 00 00       	and    eax,0xff
c001b50f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b512:	89 14 85 00 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb800],edx
c001b519:	a1 e0 47 02 c0       	mov    eax,ds:0xc00247e0
c001b51e:	40                   	inc    eax
c001b51f:	a3 e0 47 02 c0       	mov    ds:0xc00247e0,eax
c001b524:	a1 18 09 02 c0       	mov    eax,ds:0xc0020918
c001b529:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b52f:	83 ec 08             	sub    esp,0x8
c001b532:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b535:	50                   	push   eax
c001b536:	e8 01 0b ff ff       	call   c000c03c <Device::addChild(Device*)>
c001b53b:	83 c4 10             	add    esp,0x10
c001b53e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b541:	8b 00                	mov    eax,DWORD PTR [eax]
c001b543:	83 c0 08             	add    eax,0x8
c001b546:	8b 10                	mov    edx,DWORD PTR [eax]
c001b548:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b54b:	25 ff 00 00 00       	and    eax,0xff
c001b550:	6a 00                	push   0x0
c001b552:	6a 00                	push   0x0
c001b554:	50                   	push   eax
c001b555:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b558:	ff d2                	call   edx
c001b55a:	83 c4 10             	add    esp,0x10
c001b55d:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b560:	e9 6e ff ff ff       	jmp    c001b4d3 <apicOpen()+0x1b>
c001b565:	c6 05 20 48 02 c0 01 	mov    BYTE PTR ds:0xc0024820,0x1
c001b56c:	e8 dd fe ff ff       	call   c001b44e <apicGetBase()>
c001b571:	05 f0 00 00 00       	add    eax,0xf0
c001b576:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b579:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b57c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b57e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b581:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b588:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b58f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b592:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b595:	89 10                	mov    DWORD PTR [eax],edx
c001b597:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b59e:	a1 30 31 02 c0       	mov    eax,ds:0xc0023130
c001b5a3:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b5a6:	7d 70                	jge    c001b618 <apicOpen()+0x160>
c001b5a8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5ab:	8b 04 85 40 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcec0]
c001b5b2:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b5b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5b8:	8b 04 85 40 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcec0]
c001b5bf:	c1 e8 08             	shr    eax,0x8
c001b5c2:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b5c6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5c9:	8b 04 85 40 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcec0]
c001b5d0:	c1 e8 18             	shr    eax,0x18
c001b5d3:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b5d6:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b5da:	75 37                	jne    c001b613 <apicOpen()+0x15b>
c001b5dc:	e8 6d fe ff ff       	call   c001b44e <apicGetBase()>
c001b5e1:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b5e5:	75 07                	jne    c001b5ee <apicOpen()+0x136>
c001b5e7:	ba 60 03 00 00       	mov    edx,0x360
c001b5ec:	eb 05                	jmp    c001b5f3 <apicOpen()+0x13b>
c001b5ee:	ba 50 03 00 00       	mov    edx,0x350
c001b5f3:	01 d0                	add    eax,edx
c001b5f5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b5f8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b5fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5fd:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b600:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b607:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b60b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b60e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b611:	89 10                	mov    DWORD PTR [eax],edx
c001b613:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b616:	eb 86                	jmp    c001b59e <apicOpen()+0xe6>
c001b618:	90                   	nop
c001b619:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b61c:	c9                   	leave  
c001b61d:	c3                   	ret    

c001b61e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b61e:	55                   	push   ebp
c001b61f:	89 e5                	mov    ebp,esp
c001b621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b624:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b62a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b62d:	72 1d                	jb     c001b64c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b62f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b632:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b63b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b641:	01 d0                	add    eax,edx
c001b643:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b646:	73 04                	jae    c001b64c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b648:	b0 01                	mov    al,0x1
c001b64a:	eb 02                	jmp    c001b64e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b64c:	b0 00                	mov    al,0x0
c001b64e:	5d                   	pop    ebp
c001b64f:	c3                   	ret    

c001b650 <IOAPIC::read(int)>:
c001b650:	55                   	push   ebp
c001b651:	89 e5                	mov    ebp,esp
c001b653:	83 ec 10             	sub    esp,0x10
c001b656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b659:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b65f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b662:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b665:	31 d2                	xor    edx,edx
c001b667:	88 c2                	mov    dl,al
c001b669:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b66c:	89 10                	mov    DWORD PTR [eax],edx
c001b66e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b671:	83 c0 10             	add    eax,0x10
c001b674:	8b 00                	mov    eax,DWORD PTR [eax]
c001b676:	c9                   	leave  
c001b677:	c3                   	ret    

c001b678 <IOAPIC::open(int, int, void*)>:
c001b678:	55                   	push   ebp
c001b679:	89 e5                	mov    ebp,esp
c001b67b:	57                   	push   edi
c001b67c:	56                   	push   esi
c001b67d:	53                   	push   ebx
c001b67e:	83 ec 04             	sub    esp,0x4
c001b681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b684:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b687:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b690:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b696:	8b 14 85 20 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcde0]
c001b69d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6a0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b6a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6a9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b6af:	8b 14 85 a0 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd60]
c001b6b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6b9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b6bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6c2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b6c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6cb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b6d1:	89 c6                	mov    esi,eax
c001b6d3:	81 e6 ff 00 00 00    	and    esi,0xff
c001b6d9:	89 d0                	mov    eax,edx
c001b6db:	ba 00 00 00 00       	mov    edx,0x0
c001b6e0:	89 c7                	mov    edi,eax
c001b6e2:	83 e7 ff             	and    edi,0xffffffff
c001b6e5:	89 f9                	mov    ecx,edi
c001b6e7:	89 d0                	mov    eax,edx
c001b6e9:	25 ff 00 00 00       	and    eax,0xff
c001b6ee:	89 c3                	mov    ebx,eax
c001b6f0:	89 c8                	mov    eax,ecx
c001b6f2:	89 da                	mov    edx,ebx
c001b6f4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b6f7:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b6fa:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b6fe:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b702:	83 e0 00             	and    eax,0x0
c001b705:	09 d0                	or     eax,edx
c001b707:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b70b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b70e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b714:	8d 50 01             	lea    edx,[eax+0x1]
c001b717:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b71a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b720:	31 d2                	xor    edx,edx
c001b722:	88 c2                	mov    dl,al
c001b724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b727:	83 c2 08             	add    edx,0x8
c001b72a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b72e:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b734:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b73a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b73e:	6a 01                	push   0x1
c001b740:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b743:	e8 08 ff ff ff       	call   c001b650 <IOAPIC::read(int)>
c001b748:	83 c4 08             	add    esp,0x8
c001b74b:	c1 f8 10             	sar    eax,0x10
c001b74e:	25 ff 00 00 00       	and    eax,0xff
c001b753:	8d 50 01             	lea    edx,[eax+0x1]
c001b756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b759:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b75f:	b8 00 00 00 00       	mov    eax,0x0
c001b764:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b767:	5b                   	pop    ebx
c001b768:	5e                   	pop    esi
c001b769:	5f                   	pop    edi
c001b76a:	5d                   	pop    ebp
c001b76b:	c3                   	ret    

c001b76c <IOAPIC::write(int, int)>:
c001b76c:	55                   	push   ebp
c001b76d:	89 e5                	mov    ebp,esp
c001b76f:	83 ec 10             	sub    esp,0x10
c001b772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b775:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b77b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b77e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b781:	31 d2                	xor    edx,edx
c001b783:	88 c2                	mov    dl,al
c001b785:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b788:	89 10                	mov    DWORD PTR [eax],edx
c001b78a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b78d:	8d 50 10             	lea    edx,[eax+0x10]
c001b790:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b793:	89 02                	mov    DWORD PTR [edx],eax
c001b795:	90                   	nop
c001b796:	c9                   	leave  
c001b797:	c3                   	ret    

c001b798 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b798:	55                   	push   ebp
c001b799:	89 e5                	mov    ebp,esp
c001b79b:	53                   	push   ebx
c001b79c:	83 ec 2c             	sub    esp,0x2c
c001b79f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b7a2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b7a5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b7a8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b7ab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b7ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7b1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b7b4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b7b7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b7ba:	88 d8                	mov    al,bl
c001b7bc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b7bf:	88 c8                	mov    al,cl
c001b7c1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b7c4:	88 d0                	mov    al,dl
c001b7c6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b7c9:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b7cc:	25 ff 00 00 00       	and    eax,0xff
c001b7d1:	83 c0 08             	add    eax,0x8
c001b7d4:	01 c0                	add    eax,eax
c001b7d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b7d9:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b7dc:	25 ff 00 00 00       	and    eax,0xff
c001b7e1:	83 c0 08             	add    eax,0x8
c001b7e4:	01 c0                	add    eax,eax
c001b7e6:	40                   	inc    eax
c001b7e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b7ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b7ed:	50                   	push   eax
c001b7ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7f1:	e8 5a fe ff ff       	call   c001b650 <IOAPIC::read(int)>
c001b7f6:	83 c4 08             	add    esp,0x8
c001b7f9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b7fc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b803:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b806:	c1 e0 18             	shl    eax,0x18
c001b809:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b80c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b80f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b812:	52                   	push   edx
c001b813:	50                   	push   eax
c001b814:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b817:	e8 50 ff ff ff       	call   c001b76c <IOAPIC::write(int, int)>
c001b81c:	83 c4 0c             	add    esp,0xc
c001b81f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b822:	50                   	push   eax
c001b823:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b826:	e8 25 fe ff ff       	call   c001b650 <IOAPIC::read(int)>
c001b82b:	83 c4 08             	add    esp,0x8
c001b82e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b831:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b838:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b83f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b846:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b84a:	74 09                	je     c001b855 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b84c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b853:	eb 07                	jmp    c001b85c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b855:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b85c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b860:	74 09                	je     c001b86b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b862:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b869:	eb 07                	jmp    c001b872 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b86b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b872:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b879:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b87c:	25 ff 00 00 00       	and    eax,0xff
c001b881:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b884:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b887:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b88a:	52                   	push   edx
c001b88b:	50                   	push   eax
c001b88c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b88f:	e8 d8 fe ff ff       	call   c001b76c <IOAPIC::write(int, int)>
c001b894:	83 c4 0c             	add    esp,0xc
c001b897:	90                   	nop
c001b898:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b89b:	c9                   	leave  
c001b89c:	c3                   	ret    
c001b89d:	66 90                	xchg   ax,ax
c001b89f:	90                   	nop

c001b8a0 <APICTimer::close(int, int, void*)>:
c001b8a0:	b8 00 00 00 00       	mov    eax,0x0
c001b8a5:	c3                   	ret    
c001b8a6:	66 90                	xchg   ax,ax

c001b8a8 <apicTimerHandler(regs*, void*)>:
c001b8a8:	83 ec 0c             	sub    esp,0xc
c001b8ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8af:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b8b1:	b8 10 27 00 00       	mov    eax,0x2710
c001b8b6:	ba 00 00 00 00       	mov    edx,0x0
c001b8bb:	f7 f1                	div    ecx
c001b8bd:	83 ec 0c             	sub    esp,0xc
c001b8c0:	50                   	push   eax
c001b8c1:	e8 0a 20 ff ff       	call   c000d8d0 <timerHandler(unsigned int)>
c001b8c6:	83 c4 10             	add    esp,0x10
c001b8c9:	90                   	nop
c001b8ca:	83 c4 0c             	add    esp,0xc
c001b8cd:	c3                   	ret    
c001b8ce:	66 90                	xchg   ax,ax

c001b8d0 <APICTimer::open(int, int, void*)>:
c001b8d0:	83 ec 0c             	sub    esp,0xc
c001b8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b8d9:	83 c0 24             	add    eax,0x24
c001b8dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001b8de:	83 ec 08             	sub    esp,0x8
c001b8e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8e9:	ff d0                	call   eax
c001b8eb:	83 c4 10             	add    esp,0x10
c001b8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8f6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b900:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b904:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b90a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b90e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b914:	83 ec 0c             	sub    esp,0xc
c001b917:	51                   	push   ecx
c001b918:	6a 01                	push   0x1
c001b91a:	68 a8 b8 01 c0       	push   0xc001b8a8
c001b91f:	52                   	push   edx
c001b920:	50                   	push   eax
c001b921:	e8 c2 06 ff ff       	call   c000bfe8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b926:	83 c4 20             	add    esp,0x20
c001b929:	89 c2                	mov    edx,eax
c001b92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b92f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b935:	b8 00 00 00 00       	mov    eax,0x0
c001b93a:	83 c4 0c             	add    esp,0xc
c001b93d:	c3                   	ret    
c001b93e:	66 90                	xchg   ax,ax

c001b940 <APICTimer::write(int)>:
c001b940:	83 ec 0c             	sub    esp,0xc
c001b943:	83 ec 0c             	sub    esp,0xc
c001b946:	68 f0 f5 01 c0       	push   0xc001f5f0
c001b94b:	e8 fb 4d ff ff       	call   c001074b <Krnl::panic(char const*)>
c001b950:	83 c4 10             	add    esp,0x10
c001b953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b957:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b95b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b961:	90                   	nop
c001b962:	83 c4 0c             	add    esp,0xc
c001b965:	c3                   	ret    
c001b966:	66 90                	xchg   ax,ax

c001b968 <APICTimer::APICTimer()>:
c001b968:	83 ec 0c             	sub    esp,0xc
c001b96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b96f:	83 ec 08             	sub    esp,0x8
c001b972:	68 00 f6 01 c0       	push   0xc001f600
c001b977:	50                   	push   eax
c001b978:	e8 87 1e ff ff       	call   c000d804 <Timer::Timer(char const*)>
c001b97d:	83 c4 10             	add    esp,0x10
c001b980:	ba 14 f6 01 c0       	mov    edx,0xc001f614
c001b985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b989:	89 10                	mov    DWORD PTR [eax],edx
c001b98b:	90                   	nop
c001b98c:	83 c4 0c             	add    esp,0xc
c001b98f:	c3                   	ret    

c001b990 <PIT::write(int)>:
c001b990:	83 ec 10             	sub    esp,0x10
c001b993:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b997:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b99b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b9a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9a5:	a3 24 48 02 c0       	mov    ds:0xc0024824,eax
c001b9aa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b9af:	99                   	cdq    
c001b9b0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b9b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9b8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b9bf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b9c4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b9c8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b9cd:	ee                   	out    dx,al
c001b9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9d2:	25 ff 00 00 00       	and    eax,0xff
c001b9d7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b9de:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b9e2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b9e6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b9eb:	ee                   	out    dx,al
c001b9ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9f0:	c1 f8 08             	sar    eax,0x8
c001b9f3:	25 ff 00 00 00       	and    eax,0xff
c001b9f8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b9ff:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ba03:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ba07:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ba0c:	ee                   	out    dx,al
c001ba0d:	90                   	nop
c001ba0e:	83 c4 10             	add    esp,0x10
c001ba11:	c3                   	ret    
c001ba12:	66 90                	xchg   ax,ax

c001ba14 <pitHandler(regs*, void*)>:
c001ba14:	83 ec 0c             	sub    esp,0xc
c001ba17:	8b 0d 24 48 02 c0    	mov    ecx,DWORD PTR ds:0xc0024824
c001ba1d:	b8 10 27 00 00       	mov    eax,0x2710
c001ba22:	99                   	cdq    
c001ba23:	f7 f9                	idiv   ecx
c001ba25:	83 ec 0c             	sub    esp,0xc
c001ba28:	50                   	push   eax
c001ba29:	e8 a2 1e ff ff       	call   c000d8d0 <timerHandler(unsigned int)>
c001ba2e:	83 c4 10             	add    esp,0x10
c001ba31:	90                   	nop
c001ba32:	83 c4 0c             	add    esp,0xc
c001ba35:	c3                   	ret    
c001ba36:	66 90                	xchg   ax,ax

c001ba38 <PIT::open(int, int, void*)>:
c001ba38:	83 ec 0c             	sub    esp,0xc
c001ba3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba41:	83 c0 24             	add    eax,0x24
c001ba44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba46:	83 ec 08             	sub    esp,0x8
c001ba49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba51:	ff d0                	call   eax
c001ba53:	83 c4 10             	add    esp,0x10
c001ba56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5a:	83 ec 0c             	sub    esp,0xc
c001ba5d:	6a 00                	push   0x0
c001ba5f:	6a 01                	push   0x1
c001ba61:	68 14 ba 01 c0       	push   0xc001ba14
c001ba66:	6a 00                	push   0x0
c001ba68:	50                   	push   eax
c001ba69:	e8 7a 05 ff ff       	call   c000bfe8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba6e:	83 c4 20             	add    esp,0x20
c001ba71:	89 c2                	mov    edx,eax
c001ba73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba77:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba7d:	b8 00 00 00 00       	mov    eax,0x0
c001ba82:	83 c4 0c             	add    esp,0xc
c001ba85:	c3                   	ret    
c001ba86:	66 90                	xchg   ax,ax

c001ba88 <PIT::close(int, int, void*)>:
c001ba88:	83 ec 0c             	sub    esp,0xc
c001ba8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ba99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba9d:	6a 01                	push   0x1
c001ba9f:	68 14 ba 01 c0       	push   0xc001ba14
c001baa4:	6a 00                	push   0x0
c001baa6:	50                   	push   eax
c001baa7:	e8 72 05 ff ff       	call   c000c01e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001baac:	83 c4 10             	add    esp,0x10
c001baaf:	b8 00 00 00 00       	mov    eax,0x0
c001bab4:	83 c4 0c             	add    esp,0xc
c001bab7:	c3                   	ret    

c001bab8 <PIT::PIT()>:
c001bab8:	83 ec 0c             	sub    esp,0xc
c001babb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babf:	83 ec 08             	sub    esp,0x8
c001bac2:	68 3c f6 01 c0       	push   0xc001f63c
c001bac7:	50                   	push   eax
c001bac8:	e8 37 1d ff ff       	call   c000d804 <Timer::Timer(char const*)>
c001bacd:	83 c4 10             	add    esp,0x10
c001bad0:	ba 64 f6 01 c0       	mov    edx,0xc001f664
c001bad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bad9:	89 10                	mov    DWORD PTR [eax],edx
c001badb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001badf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bae5:	31 d2                	xor    edx,edx
c001bae7:	88 c2                	mov    dl,al
c001bae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baed:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001baf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bafe:	31 d2                	xor    edx,edx
c001bb00:	88 c2                	mov    dl,al
c001bb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb06:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bb0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb15:	8d 50 01             	lea    edx,[eax+0x1]
c001bb18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb1c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bb22:	31 d2                	xor    edx,edx
c001bb24:	88 c2                	mov    dl,al
c001bb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bb2e:	83 e1 3f             	and    ecx,0x3f
c001bb31:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bb35:	90                   	nop
c001bb36:	83 c4 0c             	add    esp,0xc
c001bb39:	c3                   	ret    
c001bb3a:	66 90                	xchg   ax,ax
c001bb3c:	66 90                	xchg   ax,ax
c001bb3e:	66 90                	xchg   ax,ax

c001bb40 <avxDetect>:
c001bb40:	b8 01 00 00 00       	mov    eax,0x1
c001bb45:	0f a2                	cpuid  
c001bb47:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bb4d:	74 15                	je     c001bb64 <avxDetect.noAVX>
c001bb4f:	b8 01 00 00 00       	mov    eax,0x1
c001bb54:	0f a2                	cpuid  
c001bb56:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bb5c:	74 06                	je     c001bb64 <avxDetect.noAVX>
c001bb5e:	b8 01 00 00 00       	mov    eax,0x1
c001bb63:	c3                   	ret    

c001bb64 <avxDetect.noAVX>:
c001bb64:	b8 00 00 00 00       	mov    eax,0x0
c001bb69:	c3                   	ret    

c001bb6a <avxSave>:
c001bb6a:	53                   	push   ebx
c001bb6b:	52                   	push   edx
c001bb6c:	31 c0                	xor    eax,eax
c001bb6e:	48                   	dec    eax
c001bb6f:	89 c2                	mov    edx,eax
c001bb71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb75:	0f ae 23             	xsave  [ebx]
c001bb78:	5a                   	pop    edx
c001bb79:	5b                   	pop    ebx
c001bb7a:	c3                   	ret    

c001bb7b <avxLoad>:
c001bb7b:	53                   	push   ebx
c001bb7c:	52                   	push   edx
c001bb7d:	31 c0                	xor    eax,eax
c001bb7f:	48                   	dec    eax
c001bb80:	89 c2                	mov    edx,eax
c001bb82:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb86:	0f ae 2b             	xrstor [ebx]
c001bb89:	5a                   	pop    edx
c001bb8a:	5b                   	pop    ebx
c001bb8b:	c3                   	ret    

c001bb8c <avxInit>:
c001bb8c:	e8 57 02 00 00       	call   c001bde8 <sseInit>
c001bb91:	50                   	push   eax
c001bb92:	51                   	push   ecx
c001bb93:	0f 20 e0             	mov    eax,cr4
c001bb96:	0d 00 00 04 00       	or     eax,0x40000
c001bb9b:	0f 22 e0             	mov    cr4,eax
c001bb9e:	31 c9                	xor    ecx,ecx
c001bba0:	0f 01 d0             	xgetbv 
c001bba3:	0d 07 00 00 00       	or     eax,0x7
c001bba8:	0f 01 d1             	xsetbv 
c001bbab:	59                   	pop    ecx
c001bbac:	58                   	pop    eax
c001bbad:	c3                   	ret    

c001bbae <avxClose>:
c001bbae:	c3                   	ret    

c001bbaf <wouldSheSayYes>:
c001bbaf:	c3                   	ret    
c001bbb0:	49                   	dec    ecx
c001bbb1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bbb5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bbb9:	75 20                	jne    c001bbdb <isr0+0xb>
c001bbbb:	4e                   	dec    esi
c001bbbc:	79 61                	jns    c001bc1f <isr7+0x3>
c001bbbe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bbc3:	66 90                	xchg   ax,ax
c001bbc5:	66 90                	xchg   ax,ax
c001bbc7:	66 90                	xchg   ax,ax
c001bbc9:	66 90                	xchg   ax,ax
c001bbcb:	66 90                	xchg   ax,ax
c001bbcd:	66 90                	xchg   ax,ax
c001bbcf:	90                   	nop

c001bbd0 <isr0>:
c001bbd0:	fa                   	cli    
c001bbd1:	68 00 00 00 00       	push   0x0
c001bbd6:	68 00 00 00 00       	push   0x0
c001bbdb:	e9 44 01 00 00       	jmp    c001bd24 <int_common_stub>

c001bbe0 <isr1>:
c001bbe0:	fa                   	cli    
c001bbe1:	6a 00                	push   0x0
c001bbe3:	6a 01                	push   0x1
c001bbe5:	e9 3a 01 00 00       	jmp    c001bd24 <int_common_stub>

c001bbea <isr2>:
c001bbea:	fa                   	cli    
c001bbeb:	6a 00                	push   0x0
c001bbed:	6a 02                	push   0x2
c001bbef:	e9 30 01 00 00       	jmp    c001bd24 <int_common_stub>

c001bbf4 <isr3>:
c001bbf4:	fa                   	cli    
c001bbf5:	6a 00                	push   0x0
c001bbf7:	6a 03                	push   0x3
c001bbf9:	e9 26 01 00 00       	jmp    c001bd24 <int_common_stub>

c001bbfe <isr4>:
c001bbfe:	fa                   	cli    
c001bbff:	6a 00                	push   0x0
c001bc01:	6a 04                	push   0x4
c001bc03:	e9 1c 01 00 00       	jmp    c001bd24 <int_common_stub>

c001bc08 <isr5>:
c001bc08:	fa                   	cli    
c001bc09:	6a 00                	push   0x0
c001bc0b:	6a 05                	push   0x5
c001bc0d:	e9 12 01 00 00       	jmp    c001bd24 <int_common_stub>

c001bc12 <isr6>:
c001bc12:	fa                   	cli    
c001bc13:	6a 00                	push   0x0
c001bc15:	6a 06                	push   0x6
c001bc17:	e9 08 01 00 00       	jmp    c001bd24 <int_common_stub>

c001bc1c <isr7>:
c001bc1c:	fa                   	cli    
c001bc1d:	6a 00                	push   0x0
c001bc1f:	6a 07                	push   0x7
c001bc21:	e9 fe 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc26 <isr8>:
c001bc26:	fa                   	cli    
c001bc27:	6a 08                	push   0x8
c001bc29:	e9 f6 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc2e <isr9>:
c001bc2e:	fa                   	cli    
c001bc2f:	6a 00                	push   0x0
c001bc31:	6a 09                	push   0x9
c001bc33:	e9 ec 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc38 <isr10>:
c001bc38:	fa                   	cli    
c001bc39:	6a 0a                	push   0xa
c001bc3b:	e9 e4 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc40 <isr11>:
c001bc40:	fa                   	cli    
c001bc41:	6a 0b                	push   0xb
c001bc43:	e9 dc 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc48 <isr12>:
c001bc48:	fa                   	cli    
c001bc49:	6a 0c                	push   0xc
c001bc4b:	e9 d4 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc50 <isr13>:
c001bc50:	fa                   	cli    
c001bc51:	6a 0d                	push   0xd
c001bc53:	e9 cc 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc58 <isr14>:
c001bc58:	fa                   	cli    
c001bc59:	6a 0e                	push   0xe
c001bc5b:	e9 c4 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc60 <isr15>:
c001bc60:	fa                   	cli    
c001bc61:	6a 00                	push   0x0
c001bc63:	6a 0f                	push   0xf
c001bc65:	e9 ba 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc6a <isr16>:
c001bc6a:	fa                   	cli    
c001bc6b:	6a 00                	push   0x0
c001bc6d:	6a 10                	push   0x10
c001bc6f:	e9 b0 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc74 <isr17>:
c001bc74:	fa                   	cli    
c001bc75:	6a 00                	push   0x0
c001bc77:	6a 11                	push   0x11
c001bc79:	e9 a6 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc7e <isr18>:
c001bc7e:	fa                   	cli    
c001bc7f:	6a 00                	push   0x0
c001bc81:	6a 12                	push   0x12
c001bc83:	e9 9c 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc88 <irq3>:
c001bc88:	fa                   	cli    
c001bc89:	6a 00                	push   0x0
c001bc8b:	6a 23                	push   0x23
c001bc8d:	e9 92 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc92 <irq4>:
c001bc92:	fa                   	cli    
c001bc93:	6a 00                	push   0x0
c001bc95:	6a 24                	push   0x24
c001bc97:	e9 88 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bc9c <irq5>:
c001bc9c:	fa                   	cli    
c001bc9d:	6a 00                	push   0x0
c001bc9f:	6a 25                	push   0x25
c001bca1:	e9 7e 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bca6 <irq6>:
c001bca6:	fa                   	cli    
c001bca7:	6a 00                	push   0x0
c001bca9:	6a 26                	push   0x26
c001bcab:	e9 74 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bcb0 <irq7>:
c001bcb0:	fa                   	cli    
c001bcb1:	6a 00                	push   0x0
c001bcb3:	6a 27                	push   0x27
c001bcb5:	e9 6a 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bcba <irq8>:
c001bcba:	fa                   	cli    
c001bcbb:	6a 00                	push   0x0
c001bcbd:	6a 28                	push   0x28
c001bcbf:	e9 60 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bcc4 <irq9>:
c001bcc4:	fa                   	cli    
c001bcc5:	6a 00                	push   0x0
c001bcc7:	6a 29                	push   0x29
c001bcc9:	e9 56 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bcce <irq10>:
c001bcce:	fa                   	cli    
c001bccf:	6a 00                	push   0x0
c001bcd1:	6a 2a                	push   0x2a
c001bcd3:	e9 4c 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bcd8 <irq11>:
c001bcd8:	fa                   	cli    
c001bcd9:	6a 00                	push   0x0
c001bcdb:	6a 2b                	push   0x2b
c001bcdd:	e9 42 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bce2 <irq12>:
c001bce2:	fa                   	cli    
c001bce3:	6a 00                	push   0x0
c001bce5:	6a 2c                	push   0x2c
c001bce7:	e9 38 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bcec <irq13>:
c001bcec:	fa                   	cli    
c001bced:	6a 00                	push   0x0
c001bcef:	6a 2d                	push   0x2d
c001bcf1:	e9 2e 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bcf6 <irq14>:
c001bcf6:	fa                   	cli    
c001bcf7:	6a 00                	push   0x0
c001bcf9:	6a 2e                	push   0x2e
c001bcfb:	e9 24 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bd00 <irq15>:
c001bd00:	fa                   	cli    
c001bd01:	6a 00                	push   0x0
c001bd03:	6a 2f                	push   0x2f
c001bd05:	e9 1a 00 00 00       	jmp    c001bd24 <int_common_stub>

c001bd0a <irq1>:
c001bd0a:	fa                   	cli    
c001bd0b:	6a 00                	push   0x0
c001bd0d:	6a 21                	push   0x21
c001bd0f:	eb 13                	jmp    c001bd24 <int_common_stub>

c001bd11 <irq2>:
c001bd11:	fa                   	cli    
c001bd12:	6a 00                	push   0x0
c001bd14:	6a 22                	push   0x22
c001bd16:	eb 0c                	jmp    c001bd24 <int_common_stub>

c001bd18 <isr96>:
c001bd18:	6a 00                	push   0x0
c001bd1a:	6a 60                	push   0x60
c001bd1c:	fb                   	sti    
c001bd1d:	eb 05                	jmp    c001bd24 <int_common_stub>

c001bd1f <irq0>:
c001bd1f:	fa                   	cli    
c001bd20:	6a 00                	push   0x0
c001bd22:	6a 20                	push   0x20

c001bd24 <int_common_stub>:
c001bd24:	60                   	pusha  
c001bd25:	1e                   	push   ds
c001bd26:	06                   	push   es
c001bd27:	0f a0                	push   fs
c001bd29:	0f a8                	push   gs
c001bd2b:	66 b8 10 00          	mov    ax,0x10
c001bd2f:	66 8e d8             	mov    ds,ax
c001bd32:	66 8e c0             	mov    es,ax
c001bd35:	66 8e e0             	mov    fs,ax
c001bd38:	66 8e e8             	mov    gs,ax
c001bd3b:	54                   	push   esp
c001bd3c:	fc                   	cld    
c001bd3d:	e8 a6 07 ff ff       	call   c000c4e8 <int_handler>
c001bd42:	81 c4 04 00 00 00    	add    esp,0x4
c001bd48:	0f a9                	pop    gs
c001bd4a:	0f a1                	pop    fs
c001bd4c:	07                   	pop    es
c001bd4d:	1f                   	pop    ds
c001bd4e:	61                   	popa   
c001bd4f:	81 c4 08 00 00 00    	add    esp,0x8
c001bd55:	cf                   	iret   

c001bd56 <irq16>:
c001bd56:	fa                   	cli    
c001bd57:	6a 00                	push   0x0
c001bd59:	6a 30                	push   0x30
c001bd5b:	e9 c4 ff ff ff       	jmp    c001bd24 <int_common_stub>

c001bd60 <irq17>:
c001bd60:	fa                   	cli    
c001bd61:	6a 00                	push   0x0
c001bd63:	6a 31                	push   0x31
c001bd65:	e9 ba ff ff ff       	jmp    c001bd24 <int_common_stub>

c001bd6a <irq18>:
c001bd6a:	fa                   	cli    
c001bd6b:	6a 00                	push   0x0
c001bd6d:	6a 32                	push   0x32
c001bd6f:	e9 b0 ff ff ff       	jmp    c001bd24 <int_common_stub>

c001bd74 <irq19>:
c001bd74:	fa                   	cli    
c001bd75:	6a 00                	push   0x0
c001bd77:	6a 33                	push   0x33
c001bd79:	e9 a6 ff ff ff       	jmp    c001bd24 <int_common_stub>

c001bd7e <irq20>:
c001bd7e:	fa                   	cli    
c001bd7f:	6a 00                	push   0x0
c001bd81:	6a 34                	push   0x34
c001bd83:	e9 9c ff ff ff       	jmp    c001bd24 <int_common_stub>

c001bd88 <irq21>:
c001bd88:	fa                   	cli    
c001bd89:	6a 00                	push   0x0
c001bd8b:	6a 35                	push   0x35
c001bd8d:	e9 92 ff ff ff       	jmp    c001bd24 <int_common_stub>

c001bd92 <irq22>:
c001bd92:	fa                   	cli    
c001bd93:	6a 00                	push   0x0
c001bd95:	6a 36                	push   0x36
c001bd97:	e9 88 ff ff ff       	jmp    c001bd24 <int_common_stub>

c001bd9c <irq23>:
c001bd9c:	fa                   	cli    
c001bd9d:	6a 00                	push   0x0
c001bd9f:	6a 37                	push   0x37
c001bda1:	e9 7e ff ff ff       	jmp    c001bd24 <int_common_stub>
c001bda6:	66 90                	xchg   ax,ax
c001bda8:	66 90                	xchg   ax,ax
c001bdaa:	66 90                	xchg   ax,ax
c001bdac:	66 90                	xchg   ax,ax
c001bdae:	66 90                	xchg   ax,ax

c001bdb0 <i386GetRDRAND>:
c001bdb0:	b9 64 00 00 00       	mov    ecx,0x64

c001bdb5 <retry>:
c001bdb5:	0f c7 f0             	rdrand eax
c001bdb8:	72 05                	jb     c001bdbf <retry.done>
c001bdba:	e2 f9                	loop   c001bdb5 <retry>

c001bdbc <retry.fail>:
c001bdbc:	31 c0                	xor    eax,eax
c001bdbe:	c3                   	ret    

c001bdbf <retry.done>:
c001bdbf:	c3                   	ret    

c001bdc0 <absolutelyNoChanceInHell>:
c001bdc0:	b8 01 00 00 00       	mov    eax,0x1
c001bdc5:	0f a2                	cpuid  
c001bdc7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bdcd:	74 06                	je     c001bdd5 <sseDetect.noSSE>
c001bdcf:	b8 01 00 00 00       	mov    eax,0x1
c001bdd4:	c3                   	ret    

c001bdd5 <sseDetect.noSSE>:
c001bdd5:	31 c0                	xor    eax,eax
c001bdd7:	c3                   	ret    

c001bdd8 <sseSave>:
c001bdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bddc:	0f ae 00             	fxsave [eax]
c001bddf:	c3                   	ret    

c001bde0 <sseLoad>:
c001bde0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bde4:	0f ae 08             	fxrstor [eax]
c001bde7:	c3                   	ret    

c001bde8 <sseInit>:
c001bde8:	e8 42 00 00 00       	call   c001be2f <x87Init>
c001bded:	0f 20 e0             	mov    eax,cr4
c001bdf0:	66 0d 00 06          	or     ax,0x600
c001bdf4:	0f 22 e0             	mov    cr4,eax
c001bdf7:	c3                   	ret    

c001bdf8 <sseClose>:
c001bdf8:	c3                   	ret    
c001bdf9:	66 90                	xchg   ax,ax
c001bdfb:	66 90                	xchg   ax,ax
c001bdfd:	66 90                	xchg   ax,ax
c001bdff:	90                   	nop

c001be00 <value_37F>:
c001be00:	7f 03                	jg     c001be05 <value_37A+0x1>

c001be02 <value_37E>:
c001be02:	7e 03                	jle    c001be07 <x87Detect+0x1>

c001be04 <value_37A>:
c001be04:	7a 03                	jp     c001be09 <x87Detect+0x3>

c001be06 <x87Detect>:
c001be06:	b8 01 00 00 00       	mov    eax,0x1
c001be0b:	0f a2                	cpuid  
c001be0d:	f7 c2 01 00 00 00    	test   edx,0x1
c001be13:	74 06                	je     c001be1b <x87Detect.nox87>
c001be15:	b8 01 00 00 00       	mov    eax,0x1
c001be1a:	c3                   	ret    

c001be1b <x87Detect.nox87>:
c001be1b:	b8 00 00 00 00       	mov    eax,0x0
c001be20:	c3                   	ret    

c001be21 <x87Save>:
c001be21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be25:	dd 30                	fnsave [eax]
c001be27:	c3                   	ret    

c001be28 <x87Load>:
c001be28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be2c:	dd 20                	frstor [eax]
c001be2e:	c3                   	ret    

c001be2f <x87Init>:
c001be2f:	0f 20 c0             	mov    eax,cr0
c001be32:	66 25 fb ff          	and    ax,0xfffb
c001be36:	66 0d 22 00          	or     ax,0x22
c001be3a:	0f 22 c0             	mov    cr0,eax
c001be3d:	db e3                	fninit 
c001be3f:	0f 06                	clts   
c001be41:	d9 2d 04 be 01 c0    	fldcw  WORD PTR ds:0xc001be04
c001be47:	c3                   	ret    

c001be48 <x87Close>:
c001be48:	c3                   	ret    
c001be49:	66 90                	xchg   ax,ax
c001be4b:	90                   	nop

c001be4c <__do_global_ctors_aux>:
c001be4c:	a1 fc cd 01 c0       	mov    eax,ds:0xc001cdfc
c001be51:	83 f8 ff             	cmp    eax,0xffffffff
c001be54:	74 1a                	je     c001be70 <__do_global_ctors_aux+0x24>
c001be56:	55                   	push   ebp
c001be57:	89 e5                	mov    ebp,esp
c001be59:	53                   	push   ebx
c001be5a:	52                   	push   edx
c001be5b:	bb fc cd 01 c0       	mov    ebx,0xc001cdfc
c001be60:	ff d0                	call   eax
c001be62:	83 eb 04             	sub    ebx,0x4
c001be65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be67:	83 f8 ff             	cmp    eax,0xffffffff
c001be6a:	75 f4                	jne    c001be60 <__do_global_ctors_aux+0x14>
c001be6c:	58                   	pop    eax
c001be6d:	5b                   	pop    ebx
c001be6e:	5d                   	pop    ebp
c001be6f:	c3                   	ret    
c001be70:	c3                   	ret    
c001be71:	66 90                	xchg   ax,ax
c001be73:	90                   	nop

c001be74 <__divdi3>:
c001be74:	55                   	push   ebp
c001be75:	57                   	push   edi
c001be76:	56                   	push   esi
c001be77:	53                   	push   ebx
c001be78:	83 ec 1c             	sub    esp,0x1c
c001be7b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be83:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001be86:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001be8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be8e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001be92:	85 db                	test   ebx,ebx
c001be94:	0f 88 8e 00 00 00    	js     c001bf28 <__divdi3+0xb4>
c001be9a:	89 dd                	mov    ebp,ebx
c001be9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bea4:	89 d3                	mov    ebx,edx
c001bea6:	85 d2                	test   edx,edx
c001bea8:	79 0d                	jns    c001beb7 <__divdi3+0x43>
c001beaa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001beae:	f7 d8                	neg    eax
c001beb0:	83 d2 00             	adc    edx,0x0
c001beb3:	f7 da                	neg    edx
c001beb5:	89 d3                	mov    ebx,edx
c001beb7:	89 c7                	mov    edi,eax
c001beb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bebc:	85 db                	test   ebx,ebx
c001bebe:	75 48                	jne    c001bf08 <__divdi3+0x94>
c001bec0:	39 ef                	cmp    edi,ebp
c001bec2:	76 24                	jbe    c001bee8 <__divdi3+0x74>
c001bec4:	89 ea                	mov    edx,ebp
c001bec6:	f7 f7                	div    edi
c001bec8:	89 c1                	mov    ecx,eax
c001beca:	31 f6                	xor    esi,esi
c001becc:	89 c8                	mov    eax,ecx
c001bece:	89 f2                	mov    edx,esi
c001bed0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bed4:	85 c9                	test   ecx,ecx
c001bed6:	74 07                	je     c001bedf <__divdi3+0x6b>
c001bed8:	f7 d8                	neg    eax
c001beda:	83 d2 00             	adc    edx,0x0
c001bedd:	f7 da                	neg    edx
c001bedf:	83 c4 1c             	add    esp,0x1c
c001bee2:	5b                   	pop    ebx
c001bee3:	5e                   	pop    esi
c001bee4:	5f                   	pop    edi
c001bee5:	5d                   	pop    ebp
c001bee6:	c3                   	ret    
c001bee7:	90                   	nop
c001bee8:	85 ff                	test   edi,edi
c001beea:	75 0b                	jne    c001bef7 <__divdi3+0x83>
c001beec:	b8 01 00 00 00       	mov    eax,0x1
c001bef1:	31 d2                	xor    edx,edx
c001bef3:	f7 f3                	div    ebx
c001bef5:	89 c7                	mov    edi,eax
c001bef7:	31 d2                	xor    edx,edx
c001bef9:	89 e8                	mov    eax,ebp
c001befb:	f7 f7                	div    edi
c001befd:	89 c6                	mov    esi,eax
c001beff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf02:	f7 f7                	div    edi
c001bf04:	89 c1                	mov    ecx,eax
c001bf06:	eb c4                	jmp    c001becc <__divdi3+0x58>
c001bf08:	39 eb                	cmp    ebx,ebp
c001bf0a:	77 3c                	ja     c001bf48 <__divdi3+0xd4>
c001bf0c:	0f bd f3             	bsr    esi,ebx
c001bf0f:	83 f6 1f             	xor    esi,0x1f
c001bf12:	75 40                	jne    c001bf54 <__divdi3+0xe0>
c001bf14:	39 eb                	cmp    ebx,ebp
c001bf16:	72 09                	jb     c001bf21 <__divdi3+0xad>
c001bf18:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bf1b:	0f 87 97 00 00 00    	ja     c001bfb8 <__divdi3+0x144>
c001bf21:	b9 01 00 00 00       	mov    ecx,0x1
c001bf26:	eb a4                	jmp    c001becc <__divdi3+0x58>
c001bf28:	f7 d9                	neg    ecx
c001bf2a:	83 d3 00             	adc    ebx,0x0
c001bf2d:	f7 db                	neg    ebx
c001bf2f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf32:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf36:	89 dd                	mov    ebp,ebx
c001bf38:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bf40:	e9 5f ff ff ff       	jmp    c001bea4 <__divdi3+0x30>
c001bf45:	8d 76 00             	lea    esi,[esi+0x0]
c001bf48:	31 f6                	xor    esi,esi
c001bf4a:	31 c9                	xor    ecx,ecx
c001bf4c:	e9 7b ff ff ff       	jmp    c001becc <__divdi3+0x58>
c001bf51:	8d 76 00             	lea    esi,[esi+0x0]
c001bf54:	b8 20 00 00 00       	mov    eax,0x20
c001bf59:	29 f0                	sub    eax,esi
c001bf5b:	89 f1                	mov    ecx,esi
c001bf5d:	d3 e3                	shl    ebx,cl
c001bf5f:	89 fa                	mov    edx,edi
c001bf61:	88 c1                	mov    cl,al
c001bf63:	d3 ea                	shr    edx,cl
c001bf65:	09 da                	or     edx,ebx
c001bf67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf6b:	89 f1                	mov    ecx,esi
c001bf6d:	d3 e7                	shl    edi,cl
c001bf6f:	89 eb                	mov    ebx,ebp
c001bf71:	88 c1                	mov    cl,al
c001bf73:	d3 eb                	shr    ebx,cl
c001bf75:	89 f1                	mov    ecx,esi
c001bf77:	d3 e5                	shl    ebp,cl
c001bf79:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bf7c:	88 c1                	mov    cl,al
c001bf7e:	d3 ea                	shr    edx,cl
c001bf80:	09 d5                	or     ebp,edx
c001bf82:	89 e8                	mov    eax,ebp
c001bf84:	89 da                	mov    edx,ebx
c001bf86:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bf8a:	89 d3                	mov    ebx,edx
c001bf8c:	89 c5                	mov    ebp,eax
c001bf8e:	f7 e7                	mul    edi
c001bf90:	39 d3                	cmp    ebx,edx
c001bf92:	72 18                	jb     c001bfac <__divdi3+0x138>
c001bf94:	74 0a                	je     c001bfa0 <__divdi3+0x12c>
c001bf96:	89 e9                	mov    ecx,ebp
c001bf98:	31 f6                	xor    esi,esi
c001bf9a:	e9 2d ff ff ff       	jmp    c001becc <__divdi3+0x58>
c001bf9f:	90                   	nop
c001bfa0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bfa3:	89 f1                	mov    ecx,esi
c001bfa5:	d3 e7                	shl    edi,cl
c001bfa7:	39 c7                	cmp    edi,eax
c001bfa9:	73 eb                	jae    c001bf96 <__divdi3+0x122>
c001bfab:	90                   	nop
c001bfac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bfaf:	31 f6                	xor    esi,esi
c001bfb1:	e9 16 ff ff ff       	jmp    c001becc <__divdi3+0x58>
c001bfb6:	66 90                	xchg   ax,ax
c001bfb8:	31 c9                	xor    ecx,ecx
c001bfba:	e9 0d ff ff ff       	jmp    c001becc <__divdi3+0x58>
c001bfbf:	90                   	nop

c001bfc0 <__moddi3>:
c001bfc0:	55                   	push   ebp
c001bfc1:	57                   	push   edi
c001bfc2:	56                   	push   esi
c001bfc3:	53                   	push   ebx
c001bfc4:	83 ec 2c             	sub    esp,0x2c
c001bfc7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bfcb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bfcf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bfd3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bfd7:	85 db                	test   ebx,ebx
c001bfd9:	0f 88 85 00 00 00    	js     c001c064 <__moddi3+0xa4>
c001bfdf:	89 de                	mov    esi,ebx
c001bfe1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bfe9:	89 d7                	mov    edi,edx
c001bfeb:	85 d2                	test   edx,edx
c001bfed:	79 09                	jns    c001bff8 <__moddi3+0x38>
c001bfef:	f7 d8                	neg    eax
c001bff1:	83 d2 00             	adc    edx,0x0
c001bff4:	f7 da                	neg    edx
c001bff6:	89 d7                	mov    edi,edx
c001bff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bffc:	89 cd                	mov    ebp,ecx
c001bffe:	85 ff                	test   edi,edi
c001c000:	75 52                	jne    c001c054 <__moddi3+0x94>
c001c002:	89 c3                	mov    ebx,eax
c001c004:	39 f0                	cmp    eax,esi
c001c006:	76 24                	jbe    c001c02c <__moddi3+0x6c>
c001c008:	89 c8                	mov    eax,ecx
c001c00a:	89 f2                	mov    edx,esi
c001c00c:	f7 f3                	div    ebx
c001c00e:	89 d6                	mov    esi,edx
c001c010:	89 f0                	mov    eax,esi
c001c012:	31 d2                	xor    edx,edx
c001c014:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c018:	85 c9                	test   ecx,ecx
c001c01a:	74 07                	je     c001c023 <__moddi3+0x63>
c001c01c:	f7 d8                	neg    eax
c001c01e:	83 d2 00             	adc    edx,0x0
c001c021:	f7 da                	neg    edx
c001c023:	83 c4 2c             	add    esp,0x2c
c001c026:	5b                   	pop    ebx
c001c027:	5e                   	pop    esi
c001c028:	5f                   	pop    edi
c001c029:	5d                   	pop    ebp
c001c02a:	c3                   	ret    
c001c02b:	90                   	nop
c001c02c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c030:	85 db                	test   ebx,ebx
c001c032:	75 0d                	jne    c001c041 <__moddi3+0x81>
c001c034:	b8 01 00 00 00       	mov    eax,0x1
c001c039:	31 d2                	xor    edx,edx
c001c03b:	f7 f7                	div    edi
c001c03d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c041:	89 f0                	mov    eax,esi
c001c043:	31 d2                	xor    edx,edx
c001c045:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c049:	f7 f7                	div    edi
c001c04b:	89 e8                	mov    eax,ebp
c001c04d:	f7 f7                	div    edi
c001c04f:	89 d6                	mov    esi,edx
c001c051:	eb bd                	jmp    c001c010 <__moddi3+0x50>
c001c053:	90                   	nop
c001c054:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c058:	39 f7                	cmp    edi,esi
c001c05a:	76 20                	jbe    c001c07c <__moddi3+0xbc>
c001c05c:	89 c8                	mov    eax,ecx
c001c05e:	89 f2                	mov    edx,esi
c001c060:	eb b2                	jmp    c001c014 <__moddi3+0x54>
c001c062:	66 90                	xchg   ax,ax
c001c064:	f7 d9                	neg    ecx
c001c066:	83 d3 00             	adc    ebx,0x0
c001c069:	f7 db                	neg    ebx
c001c06b:	89 de                	mov    esi,ebx
c001c06d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c075:	e9 6f ff ff ff       	jmp    c001bfe9 <__moddi3+0x29>
c001c07a:	66 90                	xchg   ax,ax
c001c07c:	0f bd c7             	bsr    eax,edi
c001c07f:	83 f0 1f             	xor    eax,0x1f
c001c082:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c086:	75 24                	jne    c001c0ac <__moddi3+0xec>
c001c088:	39 f7                	cmp    edi,esi
c001c08a:	72 06                	jb     c001c092 <__moddi3+0xd2>
c001c08c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c090:	77 0c                	ja     c001c09e <__moddi3+0xde>
c001c092:	89 e9                	mov    ecx,ebp
c001c094:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c098:	19 fe                	sbb    esi,edi
c001c09a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c09e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0a2:	89 f2                	mov    edx,esi
c001c0a4:	e9 6b ff ff ff       	jmp    c001c014 <__moddi3+0x54>
c001c0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0ac:	b8 20 00 00 00       	mov    eax,0x20
c001c0b1:	89 c2                	mov    edx,eax
c001c0b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c0b7:	29 da                	sub    edx,ebx
c001c0b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c0bd:	88 d9                	mov    cl,bl
c001c0bf:	d3 e7                	shl    edi,cl
c001c0c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0c5:	88 d1                	mov    cl,dl
c001c0c7:	d3 e8                	shr    eax,cl
c001c0c9:	09 c7                	or     edi,eax
c001c0cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c0cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c0d3:	89 d8                	mov    eax,ebx
c001c0d5:	88 d9                	mov    cl,bl
c001c0d7:	d3 e7                	shl    edi,cl
c001c0d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c0dd:	89 f3                	mov    ebx,esi
c001c0df:	88 d1                	mov    cl,dl
c001c0e1:	d3 eb                	shr    ebx,cl
c001c0e3:	89 c7                	mov    edi,eax
c001c0e5:	88 c1                	mov    cl,al
c001c0e7:	d3 e6                	shl    esi,cl
c001c0e9:	89 e8                	mov    eax,ebp
c001c0eb:	88 d1                	mov    cl,dl
c001c0ed:	d3 e8                	shr    eax,cl
c001c0ef:	09 f0                	or     eax,esi
c001c0f1:	89 f9                	mov    ecx,edi
c001c0f3:	d3 e5                	shl    ebp,cl
c001c0f5:	89 da                	mov    edx,ebx
c001c0f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c0fb:	89 d3                	mov    ebx,edx
c001c0fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c101:	89 c6                	mov    esi,eax
c001c103:	89 d1                	mov    ecx,edx
c001c105:	39 d3                	cmp    ebx,edx
c001c107:	72 27                	jb     c001c130 <__moddi3+0x170>
c001c109:	74 21                	je     c001c12c <__moddi3+0x16c>
c001c10b:	29 f5                	sub    ebp,esi
c001c10d:	19 cb                	sbb    ebx,ecx
c001c10f:	89 de                	mov    esi,ebx
c001c111:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c115:	d3 e6                	shl    esi,cl
c001c117:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c11b:	89 f9                	mov    ecx,edi
c001c11d:	d3 ed                	shr    ebp,cl
c001c11f:	09 ee                	or     esi,ebp
c001c121:	89 f0                	mov    eax,esi
c001c123:	d3 eb                	shr    ebx,cl
c001c125:	89 da                	mov    edx,ebx
c001c127:	e9 e8 fe ff ff       	jmp    c001c014 <__moddi3+0x54>
c001c12c:	39 c5                	cmp    ebp,eax
c001c12e:	73 db                	jae    c001c10b <__moddi3+0x14b>
c001c130:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c134:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c138:	89 d1                	mov    ecx,edx
c001c13a:	89 c6                	mov    esi,eax
c001c13c:	eb cd                	jmp    c001c10b <__moddi3+0x14b>
c001c13e:	66 90                	xchg   ax,ax

c001c140 <__udivdi3>:
c001c140:	55                   	push   ebp
c001c141:	57                   	push   edi
c001c142:	56                   	push   esi
c001c143:	53                   	push   ebx
c001c144:	83 ec 1c             	sub    esp,0x1c
c001c147:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c14b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c14f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c153:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c157:	85 d2                	test   edx,edx
c001c159:	75 41                	jne    c001c19c <__udivdi3+0x5c>
c001c15b:	39 f7                	cmp    edi,esi
c001c15d:	76 15                	jbe    c001c174 <__udivdi3+0x34>
c001c15f:	89 e8                	mov    eax,ebp
c001c161:	89 f2                	mov    edx,esi
c001c163:	f7 f7                	div    edi
c001c165:	31 db                	xor    ebx,ebx
c001c167:	89 da                	mov    edx,ebx
c001c169:	83 c4 1c             	add    esp,0x1c
c001c16c:	5b                   	pop    ebx
c001c16d:	5e                   	pop    esi
c001c16e:	5f                   	pop    edi
c001c16f:	5d                   	pop    ebp
c001c170:	c3                   	ret    
c001c171:	8d 76 00             	lea    esi,[esi+0x0]
c001c174:	89 f9                	mov    ecx,edi
c001c176:	85 ff                	test   edi,edi
c001c178:	75 0b                	jne    c001c185 <__udivdi3+0x45>
c001c17a:	b8 01 00 00 00       	mov    eax,0x1
c001c17f:	31 d2                	xor    edx,edx
c001c181:	f7 f7                	div    edi
c001c183:	89 c1                	mov    ecx,eax
c001c185:	31 d2                	xor    edx,edx
c001c187:	89 f0                	mov    eax,esi
c001c189:	f7 f1                	div    ecx
c001c18b:	89 c3                	mov    ebx,eax
c001c18d:	89 e8                	mov    eax,ebp
c001c18f:	f7 f1                	div    ecx
c001c191:	89 da                	mov    edx,ebx
c001c193:	83 c4 1c             	add    esp,0x1c
c001c196:	5b                   	pop    ebx
c001c197:	5e                   	pop    esi
c001c198:	5f                   	pop    edi
c001c199:	5d                   	pop    ebp
c001c19a:	c3                   	ret    
c001c19b:	90                   	nop
c001c19c:	39 f2                	cmp    edx,esi
c001c19e:	77 1c                	ja     c001c1bc <__udivdi3+0x7c>
c001c1a0:	0f bd da             	bsr    ebx,edx
c001c1a3:	83 f3 1f             	xor    ebx,0x1f
c001c1a6:	75 24                	jne    c001c1cc <__udivdi3+0x8c>
c001c1a8:	39 f2                	cmp    edx,esi
c001c1aa:	72 08                	jb     c001c1b4 <__udivdi3+0x74>
c001c1ac:	39 ef                	cmp    edi,ebp
c001c1ae:	0f 87 84 00 00 00    	ja     c001c238 <__udivdi3+0xf8>
c001c1b4:	b8 01 00 00 00       	mov    eax,0x1
c001c1b9:	eb ac                	jmp    c001c167 <__udivdi3+0x27>
c001c1bb:	90                   	nop
c001c1bc:	31 db                	xor    ebx,ebx
c001c1be:	31 c0                	xor    eax,eax
c001c1c0:	89 da                	mov    edx,ebx
c001c1c2:	83 c4 1c             	add    esp,0x1c
c001c1c5:	5b                   	pop    ebx
c001c1c6:	5e                   	pop    esi
c001c1c7:	5f                   	pop    edi
c001c1c8:	5d                   	pop    ebp
c001c1c9:	c3                   	ret    
c001c1ca:	66 90                	xchg   ax,ax
c001c1cc:	b8 20 00 00 00       	mov    eax,0x20
c001c1d1:	29 d8                	sub    eax,ebx
c001c1d3:	88 d9                	mov    cl,bl
c001c1d5:	d3 e2                	shl    edx,cl
c001c1d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c1db:	89 fa                	mov    edx,edi
c001c1dd:	88 c1                	mov    cl,al
c001c1df:	d3 ea                	shr    edx,cl
c001c1e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c1e5:	09 d1                	or     ecx,edx
c001c1e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c1eb:	88 d9                	mov    cl,bl
c001c1ed:	d3 e7                	shl    edi,cl
c001c1ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1f3:	89 f7                	mov    edi,esi
c001c1f5:	88 c1                	mov    cl,al
c001c1f7:	d3 ef                	shr    edi,cl
c001c1f9:	88 d9                	mov    cl,bl
c001c1fb:	d3 e6                	shl    esi,cl
c001c1fd:	89 ea                	mov    edx,ebp
c001c1ff:	88 c1                	mov    cl,al
c001c201:	d3 ea                	shr    edx,cl
c001c203:	09 d6                	or     esi,edx
c001c205:	89 f0                	mov    eax,esi
c001c207:	89 fa                	mov    edx,edi
c001c209:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c20d:	89 d7                	mov    edi,edx
c001c20f:	89 c6                	mov    esi,eax
c001c211:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c215:	39 d7                	cmp    edi,edx
c001c217:	72 13                	jb     c001c22c <__udivdi3+0xec>
c001c219:	74 09                	je     c001c224 <__udivdi3+0xe4>
c001c21b:	89 f0                	mov    eax,esi
c001c21d:	31 db                	xor    ebx,ebx
c001c21f:	e9 43 ff ff ff       	jmp    c001c167 <__udivdi3+0x27>
c001c224:	88 d9                	mov    cl,bl
c001c226:	d3 e5                	shl    ebp,cl
c001c228:	39 c5                	cmp    ebp,eax
c001c22a:	73 ef                	jae    c001c21b <__udivdi3+0xdb>
c001c22c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c22f:	31 db                	xor    ebx,ebx
c001c231:	e9 31 ff ff ff       	jmp    c001c167 <__udivdi3+0x27>
c001c236:	66 90                	xchg   ax,ax
c001c238:	31 c0                	xor    eax,eax
c001c23a:	e9 28 ff ff ff       	jmp    c001c167 <__udivdi3+0x27>
c001c23f:	90                   	nop

c001c240 <__umoddi3>:
c001c240:	55                   	push   ebp
c001c241:	57                   	push   edi
c001c242:	56                   	push   esi
c001c243:	53                   	push   ebx
c001c244:	83 ec 1c             	sub    esp,0x1c
c001c247:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c24b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c24f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c253:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c257:	89 da                	mov    edx,ebx
c001c259:	85 c0                	test   eax,eax
c001c25b:	75 37                	jne    c001c294 <__umoddi3+0x54>
c001c25d:	39 df                	cmp    edi,ebx
c001c25f:	76 13                	jbe    c001c274 <__umoddi3+0x34>
c001c261:	89 f0                	mov    eax,esi
c001c263:	f7 f7                	div    edi
c001c265:	89 d0                	mov    eax,edx
c001c267:	31 d2                	xor    edx,edx
c001c269:	83 c4 1c             	add    esp,0x1c
c001c26c:	5b                   	pop    ebx
c001c26d:	5e                   	pop    esi
c001c26e:	5f                   	pop    edi
c001c26f:	5d                   	pop    ebp
c001c270:	c3                   	ret    
c001c271:	8d 76 00             	lea    esi,[esi+0x0]
c001c274:	89 fd                	mov    ebp,edi
c001c276:	85 ff                	test   edi,edi
c001c278:	75 0b                	jne    c001c285 <__umoddi3+0x45>
c001c27a:	b8 01 00 00 00       	mov    eax,0x1
c001c27f:	31 d2                	xor    edx,edx
c001c281:	f7 f7                	div    edi
c001c283:	89 c5                	mov    ebp,eax
c001c285:	89 d8                	mov    eax,ebx
c001c287:	31 d2                	xor    edx,edx
c001c289:	f7 f5                	div    ebp
c001c28b:	89 f0                	mov    eax,esi
c001c28d:	f7 f5                	div    ebp
c001c28f:	89 d0                	mov    eax,edx
c001c291:	eb d4                	jmp    c001c267 <__umoddi3+0x27>
c001c293:	90                   	nop
c001c294:	89 f1                	mov    ecx,esi
c001c296:	39 d8                	cmp    eax,ebx
c001c298:	76 0a                	jbe    c001c2a4 <__umoddi3+0x64>
c001c29a:	89 f0                	mov    eax,esi
c001c29c:	83 c4 1c             	add    esp,0x1c
c001c29f:	5b                   	pop    ebx
c001c2a0:	5e                   	pop    esi
c001c2a1:	5f                   	pop    edi
c001c2a2:	5d                   	pop    ebp
c001c2a3:	c3                   	ret    
c001c2a4:	0f bd e8             	bsr    ebp,eax
c001c2a7:	83 f5 1f             	xor    ebp,0x1f
c001c2aa:	75 1c                	jne    c001c2c8 <__umoddi3+0x88>
c001c2ac:	39 d8                	cmp    eax,ebx
c001c2ae:	72 04                	jb     c001c2b4 <__umoddi3+0x74>
c001c2b0:	39 f7                	cmp    edi,esi
c001c2b2:	77 08                	ja     c001c2bc <__umoddi3+0x7c>
c001c2b4:	89 da                	mov    edx,ebx
c001c2b6:	29 fe                	sub    esi,edi
c001c2b8:	19 c2                	sbb    edx,eax
c001c2ba:	89 f1                	mov    ecx,esi
c001c2bc:	89 c8                	mov    eax,ecx
c001c2be:	83 c4 1c             	add    esp,0x1c
c001c2c1:	5b                   	pop    ebx
c001c2c2:	5e                   	pop    esi
c001c2c3:	5f                   	pop    edi
c001c2c4:	5d                   	pop    ebp
c001c2c5:	c3                   	ret    
c001c2c6:	66 90                	xchg   ax,ax
c001c2c8:	ba 20 00 00 00       	mov    edx,0x20
c001c2cd:	29 ea                	sub    edx,ebp
c001c2cf:	89 e9                	mov    ecx,ebp
c001c2d1:	d3 e0                	shl    eax,cl
c001c2d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2d7:	89 f8                	mov    eax,edi
c001c2d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c2dd:	88 d1                	mov    cl,dl
c001c2df:	d3 e8                	shr    eax,cl
c001c2e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2e5:	09 c1                	or     ecx,eax
c001c2e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2eb:	89 e9                	mov    ecx,ebp
c001c2ed:	d3 e7                	shl    edi,cl
c001c2ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2f3:	89 d8                	mov    eax,ebx
c001c2f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c2f9:	88 d1                	mov    cl,dl
c001c2fb:	d3 e8                	shr    eax,cl
c001c2fd:	89 c7                	mov    edi,eax
c001c2ff:	89 e9                	mov    ecx,ebp
c001c301:	d3 e3                	shl    ebx,cl
c001c303:	89 f0                	mov    eax,esi
c001c305:	88 d1                	mov    cl,dl
c001c307:	d3 e8                	shr    eax,cl
c001c309:	09 d8                	or     eax,ebx
c001c30b:	89 e9                	mov    ecx,ebp
c001c30d:	d3 e6                	shl    esi,cl
c001c30f:	89 f3                	mov    ebx,esi
c001c311:	89 fa                	mov    edx,edi
c001c313:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c317:	89 d1                	mov    ecx,edx
c001c319:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c31d:	89 c6                	mov    esi,eax
c001c31f:	89 d7                	mov    edi,edx
c001c321:	39 d1                	cmp    ecx,edx
c001c323:	72 27                	jb     c001c34c <__umoddi3+0x10c>
c001c325:	74 21                	je     c001c348 <__umoddi3+0x108>
c001c327:	89 ca                	mov    edx,ecx
c001c329:	29 f3                	sub    ebx,esi
c001c32b:	19 fa                	sbb    edx,edi
c001c32d:	89 d0                	mov    eax,edx
c001c32f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c333:	d3 e0                	shl    eax,cl
c001c335:	89 e9                	mov    ecx,ebp
c001c337:	d3 eb                	shr    ebx,cl
c001c339:	09 d8                	or     eax,ebx
c001c33b:	d3 ea                	shr    edx,cl
c001c33d:	83 c4 1c             	add    esp,0x1c
c001c340:	5b                   	pop    ebx
c001c341:	5e                   	pop    esi
c001c342:	5f                   	pop    edi
c001c343:	5d                   	pop    ebp
c001c344:	c3                   	ret    
c001c345:	8d 76 00             	lea    esi,[esi+0x0]
c001c348:	39 c3                	cmp    ebx,eax
c001c34a:	73 db                	jae    c001c327 <__umoddi3+0xe7>
c001c34c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c350:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c354:	89 d7                	mov    edi,edx
c001c356:	89 c6                	mov    esi,eax
c001c358:	eb cd                	jmp    c001c327 <__umoddi3+0xe7>

Disassembly of section .init:

c001c35a <_init>:
c001c35a:	55                   	push   ebp
c001c35b:	89 e5                	mov    ebp,esp
c001c35d:	e8 b6 3d fe ff       	call   c0000118 <frame_dummy>
c001c362:	e8 e5 fa ff ff       	call   c001be4c <__do_global_ctors_aux>
c001c367:	5d                   	pop    ebp
c001c368:	c3                   	ret    

Disassembly of section .fini:

c001c369 <_fini>:
c001c369:	55                   	push   ebp
c001c36a:	89 e5                	mov    ebp,esp
c001c36c:	e8 37 3d fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c371:	5d                   	pop    ebp
c001c372:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c374 <Computer::~Computer()>:
c001c374:	83 ec 0c             	sub    esp,0xc
c001c377:	ba 80 d6 01 c0       	mov    edx,0xc001d680
c001c37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c380:	89 10                	mov    DWORD PTR [eax],edx
c001c382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c386:	83 ec 0c             	sub    esp,0xc
c001c389:	50                   	push   eax
c001c38a:	e8 af fb fe ff       	call   c000bf3e <Device::~Device()>
c001c38f:	83 c4 10             	add    esp,0x10
c001c392:	90                   	nop
c001c393:	83 c4 0c             	add    esp,0xc
c001c396:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c398 <Computer::~Computer()>:
c001c398:	83 ec 0c             	sub    esp,0xc
c001c39b:	83 ec 0c             	sub    esp,0xc
c001c39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3a2:	e8 cd ff ff ff       	call   c001c374 <Computer::~Computer()>
c001c3a7:	83 c4 10             	add    esp,0x10
c001c3aa:	83 ec 08             	sub    esp,0x8
c001c3ad:	68 70 01 00 00       	push   0x170
c001c3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3b6:	e8 4b e7 fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001c3bb:	83 c4 10             	add    esp,0x10
c001c3be:	83 c4 0c             	add    esp,0xc
c001c3c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c3c2 <idleCommon()>:
c001c3c2:	83 ec 0c             	sub    esp,0xc
c001c3c5:	fa                   	cli    
c001c3c6:	ff 05 e8 3d 02 c0    	inc    DWORD PTR ds:0xc0023de8
c001c3cc:	e8 cf 76 ff ff       	call   c0013aa0 <schedule()>
c001c3d1:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c001c3d6:	48                   	dec    eax
c001c3d7:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c001c3dc:	75 01                	jne    c001c3df <idleCommon()+0x1d>
c001c3de:	fb                   	sti    
c001c3df:	83 c4 0c             	add    esp,0xc
c001c3e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c3e4 <LinkedList<UnixFile>::~LinkedList()>:
c001c3e4:	90                   	nop
c001c3e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c3e6 <LinkedList<UnixFile>::LinkedList()>:
c001c3e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c40a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c414:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c41b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c41f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c426:	90                   	nop
c001c427:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c428 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c428:	83 ec 0c             	sub    esp,0xc
c001c42b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c430:	75 10                	jne    c001c442 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c432:	83 ec 0c             	sub    esp,0xc
c001c435:	68 d4 d8 01 c0       	push   0xc001d8d4
c001c43a:	e8 0c 43 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c43f:	83 c4 10             	add    esp,0x10
c001c442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c446:	8b 00                	mov    eax,DWORD PTR [eax]
c001c448:	85 c0                	test   eax,eax
c001c44a:	74 34                	je     c001c480 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c450:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c453:	85 c0                	test   eax,eax
c001c455:	74 29                	je     c001c480 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c45b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c45e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c462:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c469:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c46d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c474:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c477:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c47e:	eb 65                	jmp    c001c4e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c484:	8b 00                	mov    eax,DWORD PTR [eax]
c001c486:	85 c0                	test   eax,eax
c001c488:	75 4b                	jne    c001c4d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c491:	85 c0                	test   eax,eax
c001c493:	75 40                	jne    c001c4d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c499:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c49d:	89 10                	mov    DWORD PTR [eax],edx
c001c49f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4bf:	85 c0                	test   eax,eax
c001c4c1:	74 22                	je     c001c4e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4c3:	83 ec 0c             	sub    esp,0xc
c001c4c6:	68 f6 d8 01 c0       	push   0xc001d8f6
c001c4cb:	e8 7b 42 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c4d0:	83 c4 10             	add    esp,0x10
c001c4d3:	eb 10                	jmp    c001c4e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4d5:	83 ec 0c             	sub    esp,0xc
c001c4d8:	68 00 d9 01 c0       	push   0xc001d900
c001c4dd:	e8 69 42 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c4e2:	83 c4 10             	add    esp,0x10
c001c4e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ec:	8d 50 01             	lea    edx,[eax+0x1]
c001c4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4f6:	90                   	nop
c001c4f7:	83 c4 0c             	add    esp,0xc
c001c4fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c4fc <LinkedList<UnixFile>::getFirstElement()>:
c001c4fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c500:	8b 00                	mov    eax,DWORD PTR [eax]
c001c502:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c504 <LinkedList<UnixFile>::removeFirst()>:
c001c504:	83 ec 0c             	sub    esp,0xc
c001c507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c50d:	85 c0                	test   eax,eax
c001c50f:	75 12                	jne    c001c523 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c511:	83 ec 0c             	sub    esp,0xc
c001c514:	68 0c d9 01 c0       	push   0xc001d90c
c001c519:	e8 2d 42 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c51e:	83 c4 10             	add    esp,0x10
c001c521:	eb 7e                	jmp    c001c5a1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c527:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c52a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c52d:	85 c0                	test   eax,eax
c001c52f:	74 10                	je     c001c541 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c531:	83 ec 0c             	sub    esp,0xc
c001c534:	68 57 d9 01 c0       	push   0xc001d957
c001c539:	e8 0d 42 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c53e:	83 c4 10             	add    esp,0x10
c001c541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c545:	8b 00                	mov    eax,DWORD PTR [eax]
c001c547:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c54a:	85 c0                	test   eax,eax
c001c54c:	75 33                	jne    c001c581 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c552:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c567:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c56a:	83 f8 01             	cmp    eax,0x1
c001c56d:	74 21                	je     c001c590 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c56f:	83 ec 0c             	sub    esp,0xc
c001c572:	68 30 d9 01 c0       	push   0xc001d930
c001c577:	e8 cf 41 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c57c:	83 c4 10             	add    esp,0x10
c001c57f:	eb 0f                	jmp    c001c590 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c585:	8b 00                	mov    eax,DWORD PTR [eax]
c001c587:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c58e:	89 10                	mov    DWORD PTR [eax],edx
c001c590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c594:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c597:	8d 50 ff             	lea    edx,[eax-0x1]
c001c59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5a1:	83 c4 0c             	add    esp,0xc
c001c5a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c5a6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c5a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5ad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c5ae <DriverlessDevice::~DriverlessDevice()>:
c001c5ae:	ba 9c df 01 c0       	mov    edx,0xc001df9c
c001c5b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5b7:	89 10                	mov    DWORD PTR [eax],edx
c001c5b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5bd:	50                   	push   eax
c001c5be:	e8 7b f9 fe ff       	call   c000bf3e <Device::~Device()>
c001c5c3:	83 c4 04             	add    esp,0x4
c001c5c6:	90                   	nop
c001c5c7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c5c8 <DriverlessDevice::~DriverlessDevice()>:
c001c5c8:	83 ec 0c             	sub    esp,0xc
c001c5cb:	83 ec 0c             	sub    esp,0xc
c001c5ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5d2:	e8 d7 ff ff ff       	call   c001c5ae <DriverlessDevice::~DriverlessDevice()>
c001c5d7:	83 c4 10             	add    esp,0x10
c001c5da:	83 ec 08             	sub    esp,0x8
c001c5dd:	68 58 01 00 00       	push   0x158
c001c5e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5e6:	e8 1b e5 fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001c5eb:	83 c4 10             	add    esp,0x10
c001c5ee:	83 c4 0c             	add    esp,0xc
c001c5f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c5f2 <LinkedList<Device>::addElement(Device*)>:
c001c5f2:	83 ec 0c             	sub    esp,0xc
c001c5f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c5fa:	75 10                	jne    c001c60c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c5fc:	83 ec 0c             	sub    esp,0xc
c001c5ff:	68 d4 d8 01 c0       	push   0xc001d8d4
c001c604:	e8 42 41 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c609:	83 c4 10             	add    esp,0x10
c001c60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c610:	8b 00                	mov    eax,DWORD PTR [eax]
c001c612:	85 c0                	test   eax,eax
c001c614:	74 3a                	je     c001c650 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c61d:	85 c0                	test   eax,eax
c001c61f:	74 2f                	je     c001c650 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c625:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c628:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c62c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c636:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c63a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c63d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c641:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c644:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c64e:	eb 68                	jmp    c001c6b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c654:	8b 00                	mov    eax,DWORD PTR [eax]
c001c656:	85 c0                	test   eax,eax
c001c658:	75 4e                	jne    c001c6a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c661:	85 c0                	test   eax,eax
c001c663:	75 43                	jne    c001c6a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c66d:	89 10                	mov    DWORD PTR [eax],edx
c001c66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c673:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c677:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c681:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c68b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c692:	85 c0                	test   eax,eax
c001c694:	74 22                	je     c001c6b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c696:	83 ec 0c             	sub    esp,0xc
c001c699:	68 f6 d8 01 c0       	push   0xc001d8f6
c001c69e:	e8 a8 40 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c6a3:	83 c4 10             	add    esp,0x10
c001c6a6:	eb 10                	jmp    c001c6b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6a8:	83 ec 0c             	sub    esp,0xc
c001c6ab:	68 00 d9 01 c0       	push   0xc001d900
c001c6b0:	e8 96 40 ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c6b5:	83 c4 10             	add    esp,0x10
c001c6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6bf:	8d 50 01             	lea    edx,[eax+0x1]
c001c6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6c9:	90                   	nop
c001c6ca:	83 c4 0c             	add    esp,0xc
c001c6cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c6ce <LinkedList<Device>::LinkedList()>:
c001c6ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c707:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c70e:	90                   	nop
c001c70f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c710 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c714:	8b 00                	mov    eax,DWORD PTR [eax]
c001c716:	85 c0                	test   eax,eax
c001c718:	75 0e                	jne    c001c728 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c71a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c71e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c721:	85 c0                	test   eax,eax
c001c723:	75 03                	jne    c001c728 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c725:	b0 01                	mov    al,0x1
c001c727:	c3                   	ret    
c001c728:	b0 00                	mov    al,0x0
c001c72a:	90                   	nop
c001c72b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c72c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c72c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c730:	8b 00                	mov    eax,DWORD PTR [eax]
c001c732:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c734 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c734:	83 ec 0c             	sub    esp,0xc
c001c737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c73d:	85 c0                	test   eax,eax
c001c73f:	75 17                	jne    c001c758 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c741:	83 ec 0c             	sub    esp,0xc
c001c744:	68 0c d9 01 c0       	push   0xc001d90c
c001c749:	e8 fd 3f ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c74e:	83 c4 10             	add    esp,0x10
c001c751:	e9 92 00 00 00       	jmp    c001c7e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c756:	66 90                	xchg   ax,ax
c001c758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c75f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c762:	85 c0                	test   eax,eax
c001c764:	0f 95 c0             	setne  al
c001c767:	84 c0                	test   al,al
c001c769:	74 11                	je     c001c77c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c76b:	83 ec 0c             	sub    esp,0xc
c001c76e:	68 57 d9 01 c0       	push   0xc001d957
c001c773:	e8 d3 3f ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c778:	83 c4 10             	add    esp,0x10
c001c77b:	90                   	nop
c001c77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c780:	8b 00                	mov    eax,DWORD PTR [eax]
c001c782:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c785:	85 c0                	test   eax,eax
c001c787:	0f 94 c0             	sete   al
c001c78a:	84 c0                	test   al,al
c001c78c:	74 36                	je     c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c792:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7aa:	83 f8 01             	cmp    eax,0x1
c001c7ad:	74 25                	je     c001c7d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c7af:	83 ec 0c             	sub    esp,0xc
c001c7b2:	68 30 d9 01 c0       	push   0xc001d930
c001c7b7:	e8 8f 3f ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c7bc:	83 c4 10             	add    esp,0x10
c001c7bf:	eb 13                	jmp    c001c7d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c7c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7ca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d1:	89 10                	mov    DWORD PTR [eax],edx
c001c7d3:	90                   	nop
c001c7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7db:	8d 50 ff             	lea    edx,[eax-0x1]
c001c7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7e8:	83 c4 0c             	add    esp,0xc
c001c7eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c7ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c7ec:	83 ec 0c             	sub    esp,0xc
c001c7ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c7f4:	75 12                	jne    c001c808 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c7f6:	83 ec 0c             	sub    esp,0xc
c001c7f9:	68 d4 d8 01 c0       	push   0xc001d8d4
c001c7fe:	e8 48 3f ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c803:	83 c4 10             	add    esp,0x10
c001c806:	66 90                	xchg   ax,ax
c001c808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c80e:	85 c0                	test   eax,eax
c001c810:	74 36                	je     c001c848 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c816:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c819:	85 c0                	test   eax,eax
c001c81b:	74 2b                	je     c001c848 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c821:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c824:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c828:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c833:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c83d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c844:	eb 6a                	jmp    c001c8b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c846:	66 90                	xchg   ax,ax
c001c848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c84e:	85 c0                	test   eax,eax
c001c850:	75 4e                	jne    c001c8a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c856:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c859:	85 c0                	test   eax,eax
c001c85b:	75 43                	jne    c001c8a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c85d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c861:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c865:	89 10                	mov    DWORD PTR [eax],edx
c001c867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c86f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c879:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c887:	85 c0                	test   eax,eax
c001c889:	74 25                	je     c001c8b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c88b:	83 ec 0c             	sub    esp,0xc
c001c88e:	68 f6 d8 01 c0       	push   0xc001d8f6
c001c893:	e8 b3 3e ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c898:	83 c4 10             	add    esp,0x10
c001c89b:	eb 13                	jmp    c001c8b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c89d:	8d 76 00             	lea    esi,[esi+0x0]
c001c8a0:	83 ec 0c             	sub    esp,0xc
c001c8a3:	68 00 d9 01 c0       	push   0xc001d900
c001c8a8:	e8 9e 3e ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c8ad:	83 c4 10             	add    esp,0x10
c001c8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8b7:	8d 50 01             	lea    edx,[eax+0x1]
c001c8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8c1:	90                   	nop
c001c8c2:	83 c4 0c             	add    esp,0xc
c001c8c5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c8c8 <ACPI::~ACPI()>:
c001c8c8:	83 ec 0c             	sub    esp,0xc
c001c8cb:	ba 04 e5 01 c0       	mov    edx,0xc001e504
c001c8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d4:	89 10                	mov    DWORD PTR [eax],edx
c001c8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8da:	83 ec 0c             	sub    esp,0xc
c001c8dd:	50                   	push   eax
c001c8de:	e8 5b f6 fe ff       	call   c000bf3e <Device::~Device()>
c001c8e3:	83 c4 10             	add    esp,0x10
c001c8e6:	90                   	nop
c001c8e7:	83 c4 0c             	add    esp,0xc
c001c8ea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c8ec <ACPI::~ACPI()>:
c001c8ec:	83 ec 0c             	sub    esp,0xc
c001c8ef:	83 ec 0c             	sub    esp,0xc
c001c8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8f6:	e8 cd ff ff ff       	call   c001c8c8 <ACPI::~ACPI()>
c001c8fb:	83 c4 10             	add    esp,0x10
c001c8fe:	83 ec 08             	sub    esp,0x8
c001c901:	68 64 12 00 00       	push   0x1264
c001c906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c90a:	e8 f7 e1 fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001c90f:	83 c4 10             	add    esp,0x10
c001c912:	83 c4 0c             	add    esp,0xc
c001c915:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c918 <LinkedList<Device>::~LinkedList()>:
c001c918:	90                   	nop
c001c919:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c91c <LinkedList<Device>::isEmpty()>:
c001c91c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c920:	8b 00                	mov    eax,DWORD PTR [eax]
c001c922:	85 c0                	test   eax,eax
c001c924:	75 0e                	jne    c001c934 <LinkedList<Device>::isEmpty()+0x18>
c001c926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c92a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c92d:	85 c0                	test   eax,eax
c001c92f:	75 03                	jne    c001c934 <LinkedList<Device>::isEmpty()+0x18>
c001c931:	b0 01                	mov    al,0x1
c001c933:	c3                   	ret    
c001c934:	b0 00                	mov    al,0x0
c001c936:	90                   	nop
c001c937:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c938 <LinkedList<Device>::getFirstElement()>:
c001c938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c93c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c93e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c940 <LinkedList<Device>::removeFirst()>:
c001c940:	83 ec 0c             	sub    esp,0xc
c001c943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c947:	8b 00                	mov    eax,DWORD PTR [eax]
c001c949:	85 c0                	test   eax,eax
c001c94b:	75 17                	jne    c001c964 <LinkedList<Device>::removeFirst()+0x24>
c001c94d:	83 ec 0c             	sub    esp,0xc
c001c950:	68 0c d9 01 c0       	push   0xc001d90c
c001c955:	e8 f1 3d ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c95a:	83 c4 10             	add    esp,0x10
c001c95d:	e9 92 00 00 00       	jmp    c001c9f4 <LinkedList<Device>::removeFirst()+0xb4>
c001c962:	66 90                	xchg   ax,ax
c001c964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c968:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c96b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c971:	85 c0                	test   eax,eax
c001c973:	74 13                	je     c001c988 <LinkedList<Device>::removeFirst()+0x48>
c001c975:	83 ec 0c             	sub    esp,0xc
c001c978:	68 57 d9 01 c0       	push   0xc001d957
c001c97d:	e8 c9 3d ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c982:	83 c4 10             	add    esp,0x10
c001c985:	8d 76 00             	lea    esi,[esi+0x0]
c001c988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c98c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c98e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c994:	85 c0                	test   eax,eax
c001c996:	75 34                	jne    c001c9cc <LinkedList<Device>::removeFirst()+0x8c>
c001c998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9b4:	83 f8 01             	cmp    eax,0x1
c001c9b7:	74 27                	je     c001c9e0 <LinkedList<Device>::removeFirst()+0xa0>
c001c9b9:	83 ec 0c             	sub    esp,0xc
c001c9bc:	68 30 d9 01 c0       	push   0xc001d930
c001c9c1:	e8 85 3d ff ff       	call   c001074b <Krnl::panic(char const*)>
c001c9c6:	83 c4 10             	add    esp,0x10
c001c9c9:	eb 15                	jmp    c001c9e0 <LinkedList<Device>::removeFirst()+0xa0>
c001c9cb:	90                   	nop
c001c9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9d2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9dc:	89 10                	mov    DWORD PTR [eax],edx
c001c9de:	66 90                	xchg   ax,ax
c001c9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9e7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c9f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9f4:	83 c4 0c             	add    esp,0xc
c001c9f7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c9f8 <CPU::~CPU()>:
c001c9f8:	83 ec 0c             	sub    esp,0xc
c001c9fb:	ba a0 e6 01 c0       	mov    edx,0xc001e6a0
c001ca00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca04:	89 10                	mov    DWORD PTR [eax],edx
c001ca06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca0a:	83 ec 0c             	sub    esp,0xc
c001ca0d:	50                   	push   eax
c001ca0e:	e8 2b f5 fe ff       	call   c000bf3e <Device::~Device()>
c001ca13:	83 c4 10             	add    esp,0x10
c001ca16:	90                   	nop
c001ca17:	83 c4 0c             	add    esp,0xc
c001ca1a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ca1c <CPU::~CPU()>:
c001ca1c:	83 ec 0c             	sub    esp,0xc
c001ca1f:	83 ec 0c             	sub    esp,0xc
c001ca22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca26:	e8 cd ff ff ff       	call   c001c9f8 <CPU::~CPU()>
c001ca2b:	83 c4 10             	add    esp,0x10
c001ca2e:	83 ec 08             	sub    esp,0x8
c001ca31:	68 94 11 00 00       	push   0x1194
c001ca36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca3a:	e8 c7 e0 fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001ca3f:	83 c4 10             	add    esp,0x10
c001ca42:	83 c4 0c             	add    esp,0xc
c001ca45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ca48 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ca48:	90                   	nop
c001ca49:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ca4c <ThreadControlBlock::ThreadControlBlock()>:
c001ca4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca50:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ca57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca5b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ca62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca66:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ca6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca71:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ca78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca7c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ca83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca87:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ca8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca8f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ca93:	90                   	nop
c001ca94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ca98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ca98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001caa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caa6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001caad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cab1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cabc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cac6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cacd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cad1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cad8:	90                   	nop
c001cad9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cadc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cadc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cae0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cae3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cae4 <PCI::~PCI()>:
c001cae4:	83 ec 0c             	sub    esp,0xc
c001cae7:	ba bc f1 01 c0       	mov    edx,0xc001f1bc
c001caec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf0:	89 10                	mov    DWORD PTR [eax],edx
c001caf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf6:	83 ec 0c             	sub    esp,0xc
c001caf9:	50                   	push   eax
c001cafa:	e8 c9 ee fe ff       	call   c000b9c8 <Bus::~Bus()>
c001caff:	83 c4 10             	add    esp,0x10
c001cb02:	90                   	nop
c001cb03:	83 c4 0c             	add    esp,0xc
c001cb06:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cb08 <PCI::~PCI()>:
c001cb08:	83 ec 0c             	sub    esp,0xc
c001cb0b:	83 ec 0c             	sub    esp,0xc
c001cb0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb12:	e8 cd ff ff ff       	call   c001cae4 <PCI::~PCI()>
c001cb17:	83 c4 10             	add    esp,0x10
c001cb1a:	83 ec 08             	sub    esp,0x8
c001cb1d:	68 5c 01 00 00       	push   0x15c
c001cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb26:	e8 db df fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001cb2b:	83 c4 10             	add    esp,0x10
c001cb2e:	83 c4 0c             	add    esp,0xc
c001cb31:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cb32 <IDE::~IDE()>:
c001cb32:	83 ec 0c             	sub    esp,0xc
c001cb35:	ba 70 f2 01 c0       	mov    edx,0xc001f270
c001cb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb3e:	89 10                	mov    DWORD PTR [eax],edx
c001cb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb44:	83 ec 0c             	sub    esp,0xc
c001cb47:	50                   	push   eax
c001cb48:	e8 6b f8 fe ff       	call   c000c3b8 <HardDiskController::~HardDiskController()>
c001cb4d:	83 c4 10             	add    esp,0x10
c001cb50:	90                   	nop
c001cb51:	83 c4 0c             	add    esp,0xc
c001cb54:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cb56 <IDE::~IDE()>:
c001cb56:	83 ec 0c             	sub    esp,0xc
c001cb59:	83 ec 0c             	sub    esp,0xc
c001cb5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb60:	e8 cd ff ff ff       	call   c001cb32 <IDE::~IDE()>
c001cb65:	83 c4 10             	add    esp,0x10
c001cb68:	83 ec 08             	sub    esp,0x8
c001cb6b:	68 70 02 00 00       	push   0x270
c001cb70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb74:	e8 8d df fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001cb79:	83 c4 10             	add    esp,0x10
c001cb7c:	83 c4 0c             	add    esp,0xc
c001cb7f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cb80 <SATABus::~SATABus()>:
c001cb80:	83 ec 0c             	sub    esp,0xc
c001cb83:	ba c0 f2 01 c0       	mov    edx,0xc001f2c0
c001cb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb8c:	89 10                	mov    DWORD PTR [eax],edx
c001cb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb92:	83 ec 0c             	sub    esp,0xc
c001cb95:	50                   	push   eax
c001cb96:	e8 1d f8 fe ff       	call   c000c3b8 <HardDiskController::~HardDiskController()>
c001cb9b:	83 c4 10             	add    esp,0x10
c001cb9e:	90                   	nop
c001cb9f:	83 c4 0c             	add    esp,0xc
c001cba2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cba4 <SATABus::~SATABus()>:
c001cba4:	83 ec 0c             	sub    esp,0xc
c001cba7:	83 ec 0c             	sub    esp,0xc
c001cbaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbae:	e8 cd ff ff ff       	call   c001cb80 <SATABus::~SATABus()>
c001cbb3:	83 c4 10             	add    esp,0x10
c001cbb6:	83 ec 08             	sub    esp,0x8
c001cbb9:	68 64 01 00 00       	push   0x164
c001cbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbc2:	e8 3f df fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001cbc7:	83 c4 10             	add    esp,0x10
c001cbca:	83 c4 0c             	add    esp,0xc
c001cbcd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cbce <ATA::~ATA()>:
c001cbce:	83 ec 0c             	sub    esp,0xc
c001cbd1:	ba 00 f3 01 c0       	mov    edx,0xc001f300
c001cbd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbda:	89 10                	mov    DWORD PTR [eax],edx
c001cbdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe0:	83 ec 0c             	sub    esp,0xc
c001cbe3:	50                   	push   eax
c001cbe4:	e8 b1 f8 fe ff       	call   c000c49a <PhysicalDisk::~PhysicalDisk()>
c001cbe9:	83 c4 10             	add    esp,0x10
c001cbec:	90                   	nop
c001cbed:	83 c4 0c             	add    esp,0xc
c001cbf0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cbf2 <ATA::~ATA()>:
c001cbf2:	83 ec 0c             	sub    esp,0xc
c001cbf5:	83 ec 0c             	sub    esp,0xc
c001cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbfc:	e8 cd ff ff ff       	call   c001cbce <ATA::~ATA()>
c001cc01:	83 c4 10             	add    esp,0x10
c001cc04:	83 ec 08             	sub    esp,0x8
c001cc07:	68 7c 01 00 00       	push   0x17c
c001cc0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc10:	e8 f1 de fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001cc15:	83 c4 10             	add    esp,0x10
c001cc18:	83 c4 0c             	add    esp,0xc
c001cc1b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cc1c <ATAPI::~ATAPI()>:
c001cc1c:	83 ec 0c             	sub    esp,0xc
c001cc1f:	ba 48 f3 01 c0       	mov    edx,0xc001f348
c001cc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc28:	89 10                	mov    DWORD PTR [eax],edx
c001cc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2e:	83 ec 0c             	sub    esp,0xc
c001cc31:	50                   	push   eax
c001cc32:	e8 63 f8 fe ff       	call   c000c49a <PhysicalDisk::~PhysicalDisk()>
c001cc37:	83 c4 10             	add    esp,0x10
c001cc3a:	90                   	nop
c001cc3b:	83 c4 0c             	add    esp,0xc
c001cc3e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cc40 <ATAPI::~ATAPI()>:
c001cc40:	83 ec 0c             	sub    esp,0xc
c001cc43:	83 ec 0c             	sub    esp,0xc
c001cc46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc4a:	e8 cd ff ff ff       	call   c001cc1c <ATAPI::~ATAPI()>
c001cc4f:	83 c4 10             	add    esp,0x10
c001cc52:	83 ec 08             	sub    esp,0x8
c001cc55:	68 84 01 00 00       	push   0x184
c001cc5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc5e:	e8 a3 de fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001cc63:	83 c4 10             	add    esp,0x10
c001cc66:	83 c4 0c             	add    esp,0xc
c001cc69:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cc6a <SATA::~SATA()>:
c001cc6a:	83 ec 0c             	sub    esp,0xc
c001cc6d:	ba fc f3 01 c0       	mov    edx,0xc001f3fc
c001cc72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc76:	89 10                	mov    DWORD PTR [eax],edx
c001cc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc7c:	83 ec 0c             	sub    esp,0xc
c001cc7f:	50                   	push   eax
c001cc80:	e8 15 f8 fe ff       	call   c000c49a <PhysicalDisk::~PhysicalDisk()>
c001cc85:	83 c4 10             	add    esp,0x10
c001cc88:	90                   	nop
c001cc89:	83 c4 0c             	add    esp,0xc
c001cc8c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cc8e <SATA::~SATA()>:
c001cc8e:	83 ec 0c             	sub    esp,0xc
c001cc91:	83 ec 0c             	sub    esp,0xc
c001cc94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc98:	e8 cd ff ff ff       	call   c001cc6a <SATA::~SATA()>
c001cc9d:	83 c4 10             	add    esp,0x10
c001cca0:	83 ec 08             	sub    esp,0x8
c001cca3:	68 7c 01 00 00       	push   0x17c
c001cca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccac:	e8 55 de fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001ccb1:	83 c4 10             	add    esp,0x10
c001ccb4:	83 c4 0c             	add    esp,0xc
c001ccb7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ccb8 <SATAPI::~SATAPI()>:
c001ccb8:	83 ec 0c             	sub    esp,0xc
c001ccbb:	ba 8c f5 01 c0       	mov    edx,0xc001f58c
c001ccc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc4:	89 10                	mov    DWORD PTR [eax],edx
c001ccc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccca:	83 ec 0c             	sub    esp,0xc
c001cccd:	50                   	push   eax
c001ccce:	e8 c7 f7 fe ff       	call   c000c49a <PhysicalDisk::~PhysicalDisk()>
c001ccd3:	83 c4 10             	add    esp,0x10
c001ccd6:	90                   	nop
c001ccd7:	83 c4 0c             	add    esp,0xc
c001ccda:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ccdc <SATAPI::~SATAPI()>:
c001ccdc:	83 ec 0c             	sub    esp,0xc
c001ccdf:	83 ec 0c             	sub    esp,0xc
c001cce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cce6:	e8 cd ff ff ff       	call   c001ccb8 <SATAPI::~SATAPI()>
c001cceb:	83 c4 10             	add    esp,0x10
c001ccee:	83 ec 08             	sub    esp,0x8
c001ccf1:	68 84 01 00 00       	push   0x184
c001ccf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccfa:	e8 07 de fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001ccff:	83 c4 10             	add    esp,0x10
c001cd02:	83 c4 0c             	add    esp,0xc
c001cd05:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cd06 <IOAPIC::~IOAPIC()>:
c001cd06:	83 ec 0c             	sub    esp,0xc
c001cd09:	ba cc f5 01 c0       	mov    edx,0xc001f5cc
c001cd0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd12:	89 10                	mov    DWORD PTR [eax],edx
c001cd14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd18:	83 ec 0c             	sub    esp,0xc
c001cd1b:	50                   	push   eax
c001cd1c:	e8 1d f2 fe ff       	call   c000bf3e <Device::~Device()>
c001cd21:	83 c4 10             	add    esp,0x10
c001cd24:	90                   	nop
c001cd25:	83 c4 0c             	add    esp,0xc
c001cd28:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cd2a <IOAPIC::~IOAPIC()>:
c001cd2a:	83 ec 0c             	sub    esp,0xc
c001cd2d:	83 ec 0c             	sub    esp,0xc
c001cd30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd34:	e8 cd ff ff ff       	call   c001cd06 <IOAPIC::~IOAPIC()>
c001cd39:	83 c4 10             	add    esp,0x10
c001cd3c:	83 ec 08             	sub    esp,0x8
c001cd3f:	68 68 01 00 00       	push   0x168
c001cd44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd48:	e8 b9 dd fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001cd4d:	83 c4 10             	add    esp,0x10
c001cd50:	83 c4 0c             	add    esp,0xc
c001cd53:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cd54 <APICTimer::~APICTimer()>:
c001cd54:	83 ec 0c             	sub    esp,0xc
c001cd57:	ba 14 f6 01 c0       	mov    edx,0xc001f614
c001cd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd60:	89 10                	mov    DWORD PTR [eax],edx
c001cd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd66:	83 ec 0c             	sub    esp,0xc
c001cd69:	50                   	push   eax
c001cd6a:	e8 cd 0a ff ff       	call   c000d83c <Timer::~Timer()>
c001cd6f:	83 c4 10             	add    esp,0x10
c001cd72:	90                   	nop
c001cd73:	83 c4 0c             	add    esp,0xc
c001cd76:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cd78 <APICTimer::~APICTimer()>:
c001cd78:	83 ec 0c             	sub    esp,0xc
c001cd7b:	83 ec 0c             	sub    esp,0xc
c001cd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd82:	e8 cd ff ff ff       	call   c001cd54 <APICTimer::~APICTimer()>
c001cd87:	83 c4 10             	add    esp,0x10
c001cd8a:	83 ec 08             	sub    esp,0x8
c001cd8d:	68 60 01 00 00       	push   0x160
c001cd92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd96:	e8 6b dd fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001cd9b:	83 c4 10             	add    esp,0x10
c001cd9e:	83 c4 0c             	add    esp,0xc
c001cda1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cda4 <PIT::~PIT()>:
c001cda4:	83 ec 0c             	sub    esp,0xc
c001cda7:	ba 64 f6 01 c0       	mov    edx,0xc001f664
c001cdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdb0:	89 10                	mov    DWORD PTR [eax],edx
c001cdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdb6:	83 ec 0c             	sub    esp,0xc
c001cdb9:	50                   	push   eax
c001cdba:	e8 7d 0a ff ff       	call   c000d83c <Timer::~Timer()>
c001cdbf:	83 c4 10             	add    esp,0x10
c001cdc2:	90                   	nop
c001cdc3:	83 c4 0c             	add    esp,0xc
c001cdc6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cdc8 <PIT::~PIT()>:
c001cdc8:	83 ec 0c             	sub    esp,0xc
c001cdcb:	83 ec 0c             	sub    esp,0xc
c001cdce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdd2:	e8 cd ff ff ff       	call   c001cda4 <PIT::~PIT()>
c001cdd7:	83 c4 10             	add    esp,0x10
c001cdda:	83 ec 08             	sub    esp,0x8
c001cddd:	68 5c 01 00 00       	push   0x15c
c001cde2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cde6:	e8 1b dd fe ff       	call   c000ab06 <operator delete(void*, unsigned long)>
c001cdeb:	83 c4 10             	add    esp,0x10
c001cdee:	83 c4 0c             	add    esp,0xc
c001cdf1:	c3                   	ret    
